
CM530.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000134  08003000  08003000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f10  08003134  08003134  00003134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         000000d8  20000000  08007044  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000d84  200000d8  0800711c  000080d8  2**2
                  ALLOC
  4 ._usrstack    00000100  20000e5c  08007ea0  000080d8  2**0
                  ALLOC
  5 .comment      00000460  00000000  00000000  000080d8  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000470  00000000  00000000  00008538  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 0000330c  00000000  00000000  000089a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000c800  00000000  00000000  0000bcb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000033d4  00000000  00000000  000184b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002f0b  00000000  00000000  0001b888  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000023dc  00000000  00000000  0001e794  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00004b9f  00000000  00000000  00020b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000047be  00000000  00000000  0002570f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000031  00000000  00000000  00029ecd  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000248  00000000  00000000  00029f00  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08003000 <g_pfnVectors>:
 8003000:	20010000 	.word	0x20010000
 8003004:	08006b65 	.word	0x08006b65
 8003008:	0800343d 	.word	0x0800343d
 800300c:	08003441 	.word	0x08003441
 8003010:	08003445 	.word	0x08003445
 8003014:	08003449 	.word	0x08003449
 8003018:	0800344d 	.word	0x0800344d
	...
 800302c:	08003455 	.word	0x08003455
 8003030:	08003451 	.word	0x08003451
 8003034:	00000000 	.word	0x00000000
 8003038:	08003459 	.word	0x08003459
 800303c:	08003565 	.word	0x08003565
 8003040:	0800345d 	.word	0x0800345d
 8003044:	08003461 	.word	0x08003461
 8003048:	08003465 	.word	0x08003465
 800304c:	08003469 	.word	0x08003469
 8003050:	0800346d 	.word	0x0800346d
 8003054:	08003471 	.word	0x08003471
 8003058:	08003475 	.word	0x08003475
 800305c:	08003479 	.word	0x08003479
 8003060:	0800347d 	.word	0x0800347d
 8003064:	08003481 	.word	0x08003481
 8003068:	08003485 	.word	0x08003485
	...
 8003088:	080034a5 	.word	0x080034a5
 800308c:	080034a9 	.word	0x080034a9
 8003090:	080034ad 	.word	0x080034ad
 8003094:	080034b1 	.word	0x080034b1
 8003098:	080034b5 	.word	0x080034b5
 800309c:	080034b9 	.word	0x080034b9
 80030a0:	080034bd 	.word	0x080034bd
 80030a4:	080034c1 	.word	0x080034c1
 80030a8:	080034c5 	.word	0x080034c5
 80030ac:	080034c9 	.word	0x080034c9
 80030b0:	080034cd 	.word	0x080034cd
 80030b4:	080034d1 	.word	0x080034d1
 80030b8:	080034d5 	.word	0x080034d5
 80030bc:	080034d9 	.word	0x080034d9
 80030c0:	080034dd 	.word	0x080034dd
 80030c4:	080034e1 	.word	0x080034e1
 80030c8:	080034e5 	.word	0x080034e5
 80030cc:	080034e9 	.word	0x080034e9
 80030d0:	080034ed 	.word	0x080034ed
 80030d4:	08003559 	.word	0x08003559
 80030d8:	080034f1 	.word	0x080034f1
 80030dc:	0800354d 	.word	0x0800354d
 80030e0:	080034f5 	.word	0x080034f5
 80030e4:	080034f9 	.word	0x080034f9
 80030e8:	080034fd 	.word	0x080034fd
 80030ec:	08003501 	.word	0x08003501
 80030f0:	08003505 	.word	0x08003505
 80030f4:	08003509 	.word	0x08003509
 80030f8:	0800350d 	.word	0x0800350d
 80030fc:	08003511 	.word	0x08003511
 8003100:	08003515 	.word	0x08003515
 8003104:	08003519 	.word	0x08003519
 8003108:	0800351d 	.word	0x0800351d
 800310c:	08003521 	.word	0x08003521
 8003110:	08003525 	.word	0x08003525
 8003114:	08003541 	.word	0x08003541
 8003118:	08003529 	.word	0x08003529
 800311c:	0800352d 	.word	0x0800352d
 8003120:	08003531 	.word	0x08003531
 8003124:	08003535 	.word	0x08003535
 8003128:	08003539 	.word	0x08003539
 800312c:	0800353d 	.word	0x0800353d
 8003130:	0000f85f 	.word	0x0000f85f

Disassembly of section .text:

08003134 <main>:
#include "adc.h"
#include "button.h"
#include "mic.h"
//#include <stdlib.h>

int main(void) {
 8003134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003136:	b081      	sub	sp, #4

	// Must include this line in all programs using "cm530.h/.c"
	SysInit();
 8003138:	f001 fdfe 	bl	8004d38 <SysInit>

	byte	ReceivedData;
	char    tmpComm[128];
	char * ReceivedCommand;
	ReceivedCommand = tmpComm;
	PrintString("Starting Program by turning on POWER LED!\r\n");
 800313c:	489c      	ldr	r0, [pc, #624]	(80033b0 <main+0x27c>)
 800313e:	f000 fc7d 	bl	8003a3c <PrintString>
	SetLED(POWER, 1);
 8003142:	2000      	movs	r0, #0
 8003144:	2101      	movs	r1, #1
 8003146:	f001 fa89 	bl	800465c <SetLED>

	while(1){


		PrintString("Battery Voltage: ");
 800314a:	489a      	ldr	r0, [pc, #616]	(80033b4 <main+0x280>)
 800314c:	f000 fc76 	bl	8003a3c <PrintString>
		Printu32d((u32)ReadAnalog(VBUS)>>4);
 8003150:	2006      	movs	r0, #6
 8003152:	f001 f9b7 	bl	80044c4 <ReadAnalog>
 8003156:	0900      	lsrs	r0, r0, #4
 8003158:	b280      	uxth	r0, r0
 800315a:	f000 fc37 	bl	80039cc <Printu32d>
		PrintString("e-1 [Volts]\n");
 800315e:	4896      	ldr	r0, [pc, #600]	(80033b8 <main+0x284>)
 8003160:	f000 fc6c 	bl	8003a3c <PrintString>

		Battery_Monitor_Alarm();
 8003164:	f001 fa26 	bl	80045b4 <Battery_Monitor_Alarm>

		    PrintString("PCU:");
 8003168:	4894      	ldr	r0, [pc, #592]	(80033bc <main+0x288>)
 800316a:	f000 fc67 	bl	8003a3c <PrintString>
		#ifdef USING_PC_UART
		    Printu32d(Baudrate_PCU);
 800316e:	4b94      	ldr	r3, [pc, #592]	(80033c0 <main+0x28c>)
		    PrintString("Not in use\n");
		#endif

		    PrintString("DXL:");
		#ifdef USING_DYNAMIXEL
		    Printu32d(Baudrate_DXL);
 8003170:	4c94      	ldr	r4, [pc, #592]	(80033c4 <main+0x290>)

		Battery_Monitor_Alarm();

		    PrintString("PCU:");
		#ifdef USING_PC_UART
		    Printu32d(Baudrate_PCU);
 8003172:	6818      	ldr	r0, [r3, #0]
 8003174:	f000 fc2a 	bl	80039cc <Printu32d>
		    PrintString("(bps)\n");
 8003178:	4893      	ldr	r0, [pc, #588]	(80033c8 <main+0x294>)
 800317a:	f000 fc5f 	bl	8003a3c <PrintString>
		#else
		    PrintString("Not in use\n");
		#endif

		    PrintString("ZIG:");
 800317e:	4893      	ldr	r0, [pc, #588]	(80033cc <main+0x298>)
 8003180:	f000 fc5c 	bl	8003a3c <PrintString>
		#ifdef USING_ZIGBEE
		    Printu32d(Baudrate_ZIG);
 8003184:	4b92      	ldr	r3, [pc, #584]	(80033d0 <main+0x29c>)
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	f000 fc20 	bl	80039cc <Printu32d>
		    PrintString("(bps)\n");
 800318c:	488e      	ldr	r0, [pc, #568]	(80033c8 <main+0x294>)
 800318e:	f000 fc55 	bl	8003a3c <PrintString>
		#else
		    PrintString("Not in use\n");
		#endif

		    PrintString("DXL:");
 8003192:	4890      	ldr	r0, [pc, #576]	(80033d4 <main+0x2a0>)
 8003194:	f000 fc52 	bl	8003a3c <PrintString>
		#ifdef USING_DYNAMIXEL
		    Printu32d(Baudrate_DXL);
 8003198:	6820      	ldr	r0, [r4, #0]
 800319a:	f000 fc17 	bl	80039cc <Printu32d>
		    PrintString("(bps)\n");
 800319e:	488a      	ldr	r0, [pc, #552]	(80033c8 <main+0x294>)
 80031a0:	f000 fc4c 	bl	8003a3c <PrintString>
		#endif

//		Buzzed(150, 200);    // 2500 Hz ~ Ds_7/Eb_7


		ReceivedData = std_getchar();;
 80031a4:	f000 fd12 	bl	8003bcc <std_getchar>
 80031a8:	b2c0      	uxtb	r0, r0

		//if(strcmp(ReceivedCommand, "led on") == 0){
		if(ReceivedData == 'l'){
 80031aa:	286c      	cmp	r0, #108
 80031ac:	d113      	bne.n	80031d6 <main+0xa2>
			std_putchar(ReceivedData);
 80031ae:	f000 fb4f 	bl	8003850 <std_putchar>
			PrintString(" * \t* Turn on LEDs!\r\n");
 80031b2:	4889      	ldr	r0, [pc, #548]	(80033d8 <main+0x2a4>)
 80031b4:	f000 fc42 	bl	8003a3c <PrintString>
			SetLED(POWER, 1);
 80031b8:	2000      	movs	r0, #0
 80031ba:	2101      	movs	r1, #1
 80031bc:	f001 fa4e 	bl	800465c <SetLED>
			SetLED(PLAY, 1);
 80031c0:	2003      	movs	r0, #3
 80031c2:	2101      	movs	r1, #1
 80031c4:	f001 fa4a 	bl	800465c <SetLED>
			SetLED(MANAGE, 1);
 80031c8:	2001      	movs	r0, #1
 80031ca:	2101      	movs	r1, #1
 80031cc:	f001 fa46 	bl	800465c <SetLED>
			SetLED(PROGRAM, 1);
 80031d0:	2002      	movs	r0, #2
 80031d2:	2101      	movs	r1, #1
 80031d4:	e014      	b.n	8003200 <main+0xcc>
		}
		else if(ReceivedData == 'o'){
 80031d6:	286f      	cmp	r0, #111
 80031d8:	d115      	bne.n	8003206 <main+0xd2>
		//else if(strcmp(ReceivedCommand, "led off")){
			std_putchar(ReceivedData);
 80031da:	f000 fb39 	bl	8003850 <std_putchar>
			PrintString(" * \t* Turn off LEDs!\r\n");
 80031de:	487f      	ldr	r0, [pc, #508]	(80033dc <main+0x2a8>)
 80031e0:	f000 fc2c 	bl	8003a3c <PrintString>
			SetLED(POWER, 0);
 80031e4:	2000      	movs	r0, #0
 80031e6:	2100      	movs	r1, #0
 80031e8:	f001 fa38 	bl	800465c <SetLED>
			SetLED(PLAY, 0);
 80031ec:	2003      	movs	r0, #3
 80031ee:	2100      	movs	r1, #0
 80031f0:	f001 fa34 	bl	800465c <SetLED>
			SetLED(MANAGE, 0);
 80031f4:	2001      	movs	r0, #1
 80031f6:	2100      	movs	r1, #0
 80031f8:	f001 fa30 	bl	800465c <SetLED>
			SetLED(PROGRAM, 0);
 80031fc:	2002      	movs	r0, #2
 80031fe:	2100      	movs	r1, #0
 8003200:	f001 fa2c 	bl	800465c <SetLED>
 8003204:	e0d0      	b.n	80033a8 <main+0x274>
		}
		//else if(strcmp(ReceivedCommand, "motors report")){
		else if(ReceivedData == 'm'){
 8003206:	286d      	cmp	r0, #109
 8003208:	d166      	bne.n	80032d8 <main+0x1a4>
			u8 id, num=0;
			u16 wdata, error, pdata, perror;
			dxl_initialize(Baudrate_DXL);
 800320a:	6820      	ldr	r0, [r4, #0]
 800320c:	f000 ff90 	bl	8004130 <dxl_initialize>
 8003210:	2700      	movs	r7, #0
 8003212:	2501      	movs	r5, #1
 8003214:	b2ee      	uxtb	r6, r5
			for (id=1; id<(250); id++)
			{
				wdata = (dxl_read_byte(id, P_ID)&0x00FF);
 8003216:	2103      	movs	r1, #3
 8003218:	4630      	mov	r0, r6
 800321a:	f000 ff4b 	bl	80040b4 <dxl_read_byte>
				if (wdata==id)
 800321e:	b2ab      	uxth	r3, r5
 8003220:	b280      	uxth	r0, r0
 8003222:	4298      	cmp	r0, r3
 8003224:	d14d      	bne.n	80032c2 <main+0x18e>
				{
					wdata=0;
					num++;
					PrintString("{");
 8003226:	486e      	ldr	r0, [pc, #440]	(80033e0 <main+0x2ac>)
 8003228:	f000 fc08 	bl	8003a3c <PrintString>
					Printu32d(id);
 800322c:	4628      	mov	r0, r5
 800322e:	f000 fbcd 	bl	80039cc <Printu32d>
					PrintString(", ");
 8003232:	486c      	ldr	r0, [pc, #432]	(80033e4 <main+0x2b0>)
 8003234:	f000 fc02 	bl	8003a3c <PrintString>

					// Read present position
					wdata = dxl_read_word(id, P_MODEL_NUMBER_L);
 8003238:	2100      	movs	r1, #0
 800323a:	4630      	mov	r0, r6
 800323c:	f000 fef2 	bl	8004024 <dxl_read_word>
 8003240:	4604      	mov	r4, r0
					error = dxl_get_result();
 8003242:	f000 fcf1 	bl	8003c28 <dxl_get_result>


					if (!(error&DXL_RXSUCCESS))
 8003246:	f010 0f02 	tst.w	r0, #2	; 0x2
 800324a:	d102      	bne.n	8003252 <main+0x11e>
						PrintCommStatus(error);
 800324c:	f000 fbfc 	bl	8003a48 <PrintCommStatus>
 8003250:	e00b      	b.n	800326a <main+0x136>
					else{
						PrintString(",* ");
 8003252:	4865      	ldr	r0, [pc, #404]	(80033e8 <main+0x2b4>)
 8003254:	f000 fbf2 	bl	8003a3c <PrintString>
						Printu32d(dxl_read_word( id, AXM_PRESENT_POSITION_L ));
 8003258:	2124      	movs	r1, #36
 800325a:	4630      	mov	r0, r6
 800325c:	f000 fee2 	bl	8004024 <dxl_read_word>
 8003260:	f000 fbb4 	bl	80039cc <Printu32d>
						PrintString("*, ");
 8003264:	4861      	ldr	r0, [pc, #388]	(80033ec <main+0x2b8>)
 8003266:	f000 fbe9 	bl	8003a3c <PrintString>
					}
					Printu32d(wdata);
 800326a:	4620      	mov	r0, r4
 800326c:	f000 fbae 	bl	80039cc <Printu32d>
					if (wdata==MODEL_AX12)
 8003270:	2c0c      	cmp	r4, #12
					{
						PrintString(" (AX-12)");
 8003272:	bf08      	it	eq
 8003274:	485e      	ldreq	r0, [pc, #376]	(80033f0 <main+0x2bc>)
						PrintString(",* ");
						Printu32d(dxl_read_word( id, AXM_PRESENT_POSITION_L ));
						PrintString("*, ");
					}
					Printu32d(wdata);
					if (wdata==MODEL_AX12)
 8003276:	d014      	beq.n	80032a2 <main+0x16e>
					{
						PrintString(" (AX-12)");
					}
					else if (wdata==MODEL_AX18)
 8003278:	2c12      	cmp	r4, #18
					{
						PrintString(" (AX-18)");
 800327a:	bf08      	it	eq
 800327c:	485d      	ldreq	r0, [pc, #372]	(80033f4 <main+0x2c0>)
					Printu32d(wdata);
					if (wdata==MODEL_AX12)
					{
						PrintString(" (AX-12)");
					}
					else if (wdata==MODEL_AX18)
 800327e:	d010      	beq.n	80032a2 <main+0x16e>
					{
						PrintString(" (AX-18)");
					}
					else if (wdata==MODEL_AXS1)
 8003280:	2c0d      	cmp	r4, #13
					{
						PrintString(" (AX-S1)");
 8003282:	bf08      	it	eq
 8003284:	485c      	ldreq	r0, [pc, #368]	(80033f8 <main+0x2c4>)
					}
					else if (wdata==MODEL_AX18)
					{
						PrintString(" (AX-18)");
					}
					else if (wdata==MODEL_AXS1)
 8003286:	d00c      	beq.n	80032a2 <main+0x16e>
					{
						PrintString(" (AX-S1)");
					}
					else if (wdata==MODEL_AXS20)
 8003288:	2cd4      	cmp	r4, #212
					{
						PrintString(" (AX-S20)");
 800328a:	bf08      	it	eq
 800328c:	485b      	ldreq	r0, [pc, #364]	(80033fc <main+0x2c8>)
					}
					else if (wdata==MODEL_AXS1)
					{
						PrintString(" (AX-S1)");
					}
					else if (wdata==MODEL_AXS20)
 800328e:	d008      	beq.n	80032a2 <main+0x16e>
					{
						PrintString(" (AX-S20)");
					}
					else if (wdata==MODEL_JHFPS)
 8003290:	f244 330b 	movw	r3, #17163	; 0x430b
 8003294:	429c      	cmp	r4, r3
					{
						PrintString(" (JH-FPS)");
 8003296:	bf08      	it	eq
 8003298:	4859      	ldreq	r0, [pc, #356]	(8003400 <main+0x2cc>)
					}
					else if (wdata==MODEL_AXS20)
					{
						PrintString(" (AX-S20)");
					}
					else if (wdata==MODEL_JHFPS)
 800329a:	d002      	beq.n	80032a2 <main+0x16e>
					{
						PrintString(" (JH-FPS)");
					}
					else if (wdata==MODEL_MX28)
 800329c:	2c1d      	cmp	r4, #29
 800329e:	d102      	bne.n	80032a6 <main+0x172>
					{
						PrintString(" (MX-28)");
 80032a0:	4858      	ldr	r0, [pc, #352]	(8003404 <main+0x2d0>)
 80032a2:	f000 fbcb 	bl	8003a3c <PrintString>
			{
				wdata = (dxl_read_byte(id, P_ID)&0x00FF);
				if (wdata==id)
				{
					wdata=0;
					num++;
 80032a6:	1c7b      	adds	r3, r7, #1
					else if (wdata==MODEL_MX28)
					{
						PrintString(" (MX-28)");
					}

					PrintString(", ");
 80032a8:	484e      	ldr	r0, [pc, #312]	(80033e4 <main+0x2b0>)
			{
				wdata = (dxl_read_byte(id, P_ID)&0x00FF);
				if (wdata==id)
				{
					wdata=0;
					num++;
 80032aa:	b2df      	uxtb	r7, r3
					else if (wdata==MODEL_MX28)
					{
						PrintString(" (MX-28)");
					}

					PrintString(", ");
 80032ac:	f000 fbc6 	bl	8003a3c <PrintString>
					Printu32d(dxl_read_byte(id, P_FIRMWARE_VERSION));
 80032b0:	2102      	movs	r1, #2
 80032b2:	4630      	mov	r0, r6
 80032b4:	f000 fefe 	bl	80040b4 <dxl_read_byte>
 80032b8:	f000 fb88 	bl	80039cc <Printu32d>

					PrintString("} \n");
 80032bc:	4852      	ldr	r0, [pc, #328]	(8003408 <main+0x2d4>)
 80032be:	f000 fbbd 	bl	8003a3c <PrintString>
 80032c2:	3501      	adds	r5, #1
		//else if(strcmp(ReceivedCommand, "motors report")){
		else if(ReceivedData == 'm'){
			u8 id, num=0;
			u16 wdata, error, pdata, perror;
			dxl_initialize(Baudrate_DXL);
			for (id=1; id<(250); id++)
 80032c4:	2dfa      	cmp	r5, #250
 80032c6:	d1a5      	bne.n	8003214 <main+0xe0>
					Printu32d(dxl_read_byte(id, P_FIRMWARE_VERSION));

					PrintString("} \n");
				}
			}
			PrintString("\nDXL DEVICES:");
 80032c8:	4850      	ldr	r0, [pc, #320]	(800340c <main+0x2d8>)
 80032ca:	f000 fbb7 	bl	8003a3c <PrintString>
			Printu32d(num);
 80032ce:	4638      	mov	r0, r7
 80032d0:	f000 fb7c 	bl	80039cc <Printu32d>
			PrintString("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
 80032d4:	484e      	ldr	r0, [pc, #312]	(8003410 <main+0x2dc>)
 80032d6:	e065      	b.n	80033a4 <main+0x270>
		}
		else if(ReceivedData == 'b'){
 80032d8:	2862      	cmp	r0, #98
 80032da:	d107      	bne.n	80032ec <main+0x1b8>
			PrintString("\nPlaying Some music\n");
 80032dc:	484d      	ldr	r0, [pc, #308]	(8003414 <main+0x2e0>)
 80032de:	f000 fbad 	bl	8003a3c <PrintString>
			Buzzed(150, 200);    // 2500 Hz ~ Ds_7/Eb_7
 80032e2:	2096      	movs	r0, #150
 80032e4:	21c8      	movs	r1, #200
 80032e6:	f001 f9cf 	bl	8004688 <Buzzed>
 80032ea:	e05d      	b.n	80033a8 <main+0x274>
		}
		else if(ReceivedData == 'i'){
 80032ec:	2869      	cmp	r0, #105
 80032ee:	d126      	bne.n	800333e <main+0x20a>
			PrintString("\n(IR_L, IR_R, DMS):\t(");
 80032f0:	4849      	ldr	r0, [pc, #292]	(8003418 <main+0x2e4>)
 80032f2:	f000 fba3 	bl	8003a3c <PrintString>
			Prints32d(ReadIR(EPORT1A));
 80032f6:	2000      	movs	r0, #0
 80032f8:	f001 f97e 	bl	80045f8 <ReadIR>
 80032fc:	f000 fb2c 	bl	8003958 <Prints32d>
			//Printu32d(ReadIR(EPORT1A));
			PrintString(", ");
 8003300:	4838      	ldr	r0, [pc, #224]	(80033e4 <main+0x2b0>)
 8003302:	f000 fb9b 	bl	8003a3c <PrintString>
			Prints32d(ReadIR(EPORT6A));
 8003306:	2005      	movs	r0, #5
 8003308:	f001 f976 	bl	80045f8 <ReadIR>
 800330c:	f000 fb24 	bl	8003958 <Prints32d>
			PrintString(", ");
 8003310:	4834      	ldr	r0, [pc, #208]	(80033e4 <main+0x2b0>)
 8003312:	f000 fb93 	bl	8003a3c <PrintString>
			Prints32d(ReadIR(EPORT5A));
 8003316:	2004      	movs	r0, #4
 8003318:	f001 f96e 	bl	80045f8 <ReadIR>
 800331c:	f000 fb1c 	bl	8003958 <Prints32d>
			PrintString(")\n");
 8003320:	483e      	ldr	r0, [pc, #248]	(800341c <main+0x2e8>)
 8003322:	f000 fb8b 	bl	8003a3c <PrintString>
			PlayNote(300, NOTE_E, 1);    // 2500 Hz ~ Ds_7/Eb_7
 8003326:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800332a:	f645 61ce 	movw	r1, #24270	; 0x5ece
 800332e:	2201      	movs	r2, #1
 8003330:	f001 f9c8 	bl	80046c4 <PlayNote>
			mDelay(2000);
 8003334:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003338:	f001 f9ec 	bl	8004714 <mDelay>
 800333c:	e034      	b.n	80033a8 <main+0x274>
		}
		else if(ReadButton(UP)){
 800333e:	2000      	movs	r0, #0
 8003340:	f001 f97a 	bl	8004638 <ReadButton>
 8003344:	b108      	cbz	r0, 800334a <main+0x216>
			PrintString("\nUP UP UP is pressed!\n");
 8003346:	4836      	ldr	r0, [pc, #216]	(8003420 <main+0x2ec>)
 8003348:	e02c      	b.n	80033a4 <main+0x270>
			//Buzzed(150, 200);    // 2500 Hz ~ Ds_7/Eb_7
		}
		else if(ReadButton(DOWN)){
 800334a:	2001      	movs	r0, #1
 800334c:	f001 f974 	bl	8004638 <ReadButton>
 8003350:	b108      	cbz	r0, 8003356 <main+0x222>
			PrintString("\nDOWN DOWN DOWN is pressed!\n");
 8003352:	4834      	ldr	r0, [pc, #208]	(8003424 <main+0x2f0>)
 8003354:	e026      	b.n	80033a4 <main+0x270>
		}
		else if(ReadButton(LEFT)){
 8003356:	2002      	movs	r0, #2
 8003358:	f001 f96e 	bl	8004638 <ReadButton>
 800335c:	b108      	cbz	r0, 8003362 <main+0x22e>
			PrintString("\nLEFT LEFT LEFT is pressed!\n");
 800335e:	4832      	ldr	r0, [pc, #200]	(8003428 <main+0x2f4>)
 8003360:	e020      	b.n	80033a4 <main+0x270>
		}
		else if(ReadButton(RIGHT)){
 8003362:	2003      	movs	r0, #3
 8003364:	f001 f968 	bl	8004638 <ReadButton>
 8003368:	b108      	cbz	r0, 800336e <main+0x23a>
			PrintString("\nRIGHT RIGHT RIGHT is pressed!\n");
 800336a:	4830      	ldr	r0, [pc, #192]	(800342c <main+0x2f8>)
 800336c:	e01a      	b.n	80033a4 <main+0x270>
		}
		else if(ReadButton(START)){
 800336e:	2004      	movs	r0, #4
 8003370:	f001 f962 	bl	8004638 <ReadButton>
 8003374:	b118      	cbz	r0, 800337e <main+0x24a>
			PrintString("\nSTART START START is pressed!\n");
 8003376:	482e      	ldr	r0, [pc, #184]	(8003430 <main+0x2fc>)
 8003378:	f000 fb60 	bl	8003a3c <PrintString>
 800337c:	e00a      	b.n	8003394 <main+0x260>
			PlayNote(200, NOTE_A, 1);    // 2500 Hz ~ Ds_7/Eb_7
		}
		else if(ReadButton(MIC)){
 800337e:	2005      	movs	r0, #5
 8003380:	f001 f95a 	bl	8004638 <ReadButton>
 8003384:	b168      	cbz	r0, 80033a2 <main+0x26e>
			PrintString("\nMIC MIC MIC MIC MIC MIMIC MIC MIMIC MIC MIMIC MIC MIMIC MIC MIMIC MIC MIMIC MIC MIMIC MIC MIMIC MIC MIMIC MIC MIis pressed!\n");
 8003386:	482b      	ldr	r0, [pc, #172]	(8003434 <main+0x300>)
 8003388:	f000 fb58 	bl	8003a3c <PrintString>
			SetLED(MANAGE, 1);
 800338c:	2001      	movs	r0, #1
 800338e:	2101      	movs	r1, #1
 8003390:	f001 f964 	bl	800465c <SetLED>
			PlayNote(200, NOTE_A, 1);    // 2500 Hz ~ Ds_7/Eb_7
 8003394:	20c8      	movs	r0, #200
 8003396:	f244 7106 	movw	r1, #18182	; 0x4706
 800339a:	2201      	movs	r2, #1
 800339c:	f001 f992 	bl	80046c4 <PlayNote>
 80033a0:	e002      	b.n	80033a8 <main+0x274>
			//mDelay(300);
			//SetLED(MANAGE, 0);
			//mDelay(2000);
		}
		else{
			PrintString("\nWait for command\n");
 80033a2:	4825      	ldr	r0, [pc, #148]	(8003438 <main+0x304>)
 80033a4:	f000 fb4a 	bl	8003a3c <PrintString>
//				std_puts(ReceivedCommand);
//				PrintString("\n");
//			}
		}
		//mDelay(1000);
		mDelay(100);
 80033a8:	2064      	movs	r0, #100
 80033aa:	f001 f9b3 	bl	8004714 <mDelay>
 80033ae:	e6cc      	b.n	800314a <main+0x16>
 80033b0:	08006bcc 	.word	0x08006bcc
 80033b4:	08006bf8 	.word	0x08006bf8
 80033b8:	08006c0a 	.word	0x08006c0a
 80033bc:	08006c17 	.word	0x08006c17
 80033c0:	200000d4 	.word	0x200000d4
 80033c4:	200000cc 	.word	0x200000cc
 80033c8:	08006c1c 	.word	0x08006c1c
 80033cc:	08006c23 	.word	0x08006c23
 80033d0:	200000d0 	.word	0x200000d0
 80033d4:	08006c28 	.word	0x08006c28
 80033d8:	08006c2d 	.word	0x08006c2d
 80033dc:	08006c43 	.word	0x08006c43
 80033e0:	08006c5a 	.word	0x08006c5a
 80033e4:	08006c61 	.word	0x08006c61
 80033e8:	08006c5c 	.word	0x08006c5c
 80033ec:	08006c60 	.word	0x08006c60
 80033f0:	08006c64 	.word	0x08006c64
 80033f4:	08006c6d 	.word	0x08006c6d
 80033f8:	08006c76 	.word	0x08006c76
 80033fc:	08006c7f 	.word	0x08006c7f
 8003400:	08006c89 	.word	0x08006c89
 8003404:	08006c93 	.word	0x08006c93
 8003408:	08006c9c 	.word	0x08006c9c
 800340c:	08006ca0 	.word	0x08006ca0
 8003410:	08006cae 	.word	0x08006cae
 8003414:	08006cd9 	.word	0x08006cd9
 8003418:	08006cee 	.word	0x08006cee
 800341c:	08006c20 	.word	0x08006c20
 8003420:	08006d04 	.word	0x08006d04
 8003424:	08006d1b 	.word	0x08006d1b
 8003428:	08006d38 	.word	0x08006d38
 800342c:	08006d55 	.word	0x08006d55
 8003430:	08006d75 	.word	0x08006d75
 8003434:	08006d95 	.word	0x08006d95
 8003438:	08006e13 	.word	0x08006e13

0800343c <NMIException>:
* Output         : None
* Return         : None
*******************************************************************************/
void NMIException(void)
{
}
 800343c:	4770      	bx	lr
 800343e:	46c0      	nop			(mov r8, r8)

08003440 <HardFaultException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void HardFaultException(void)
{
 8003440:	e7fe      	b.n	8003440 <HardFaultException>
 8003442:	46c0      	nop			(mov r8, r8)

08003444 <MemManageException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void MemManageException(void)
{
 8003444:	e7fe      	b.n	8003444 <MemManageException>
 8003446:	46c0      	nop			(mov r8, r8)

08003448 <BusFaultException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void BusFaultException(void)
{
 8003448:	e7fe      	b.n	8003448 <BusFaultException>
 800344a:	46c0      	nop			(mov r8, r8)

0800344c <UsageFaultException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UsageFaultException(void)
{
 800344c:	e7fe      	b.n	800344c <UsageFaultException>
 800344e:	46c0      	nop			(mov r8, r8)

08003450 <DebugMonitor>:
* Output         : None
* Return         : None
*******************************************************************************/
void DebugMonitor(void)
{
}
 8003450:	4770      	bx	lr
 8003452:	46c0      	nop			(mov r8, r8)

08003454 <SVCHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SVCHandler(void)
{
}
 8003454:	4770      	bx	lr
 8003456:	46c0      	nop			(mov r8, r8)

08003458 <PendSVC>:
* Output         : None
* Return         : None
*******************************************************************************/
void PendSVC(void)
{
}
 8003458:	4770      	bx	lr
 800345a:	46c0      	nop			(mov r8, r8)

0800345c <WWDG_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void WWDG_IRQHandler(void)
{
}
 800345c:	4770      	bx	lr
 800345e:	46c0      	nop			(mov r8, r8)

08003460 <PVD_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void PVD_IRQHandler(void)
{
}
 8003460:	4770      	bx	lr
 8003462:	46c0      	nop			(mov r8, r8)

08003464 <TAMPER_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TAMPER_IRQHandler(void)
{
}
 8003464:	4770      	bx	lr
 8003466:	46c0      	nop			(mov r8, r8)

08003468 <RTC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void RTC_IRQHandler(void)
{
}
 8003468:	4770      	bx	lr
 800346a:	46c0      	nop			(mov r8, r8)

0800346c <FLASH_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void FLASH_IRQHandler(void)
{
}
 800346c:	4770      	bx	lr
 800346e:	46c0      	nop			(mov r8, r8)

08003470 <RCC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_IRQHandler(void)
{
}
 8003470:	4770      	bx	lr
 8003472:	46c0      	nop			(mov r8, r8)

08003474 <EXTI0_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI0_IRQHandler(void)
{
}
 8003474:	4770      	bx	lr
 8003476:	46c0      	nop			(mov r8, r8)

08003478 <EXTI1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI1_IRQHandler(void)
{
}
 8003478:	4770      	bx	lr
 800347a:	46c0      	nop			(mov r8, r8)

0800347c <EXTI2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI2_IRQHandler(void)
{
}
 800347c:	4770      	bx	lr
 800347e:	46c0      	nop			(mov r8, r8)

08003480 <EXTI3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI3_IRQHandler(void)
{
}
 8003480:	4770      	bx	lr
 8003482:	46c0      	nop			(mov r8, r8)

08003484 <EXTI4_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI4_IRQHandler(void)
{
}
 8003484:	4770      	bx	lr
 8003486:	46c0      	nop			(mov r8, r8)

08003488 <DMA1_Channel1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel1_IRQHandler(void)
{
}
 8003488:	4770      	bx	lr
 800348a:	46c0      	nop			(mov r8, r8)

0800348c <DMA1_Channel2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel2_IRQHandler(void)
{
}
 800348c:	4770      	bx	lr
 800348e:	46c0      	nop			(mov r8, r8)

08003490 <DMA1_Channel3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel3_IRQHandler(void)
{
}
 8003490:	4770      	bx	lr
 8003492:	46c0      	nop			(mov r8, r8)

08003494 <DMA1_Channel4_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel4_IRQHandler(void)
{
}
 8003494:	4770      	bx	lr
 8003496:	46c0      	nop			(mov r8, r8)

08003498 <DMA1_Channel5_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel5_IRQHandler(void)
{
}
 8003498:	4770      	bx	lr
 800349a:	46c0      	nop			(mov r8, r8)

0800349c <DMA1_Channel6_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel6_IRQHandler(void)
{
}
 800349c:	4770      	bx	lr
 800349e:	46c0      	nop			(mov r8, r8)

080034a0 <DMA1_Channel7_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel7_IRQHandler(void)
{
}
 80034a0:	4770      	bx	lr
 80034a2:	46c0      	nop			(mov r8, r8)

080034a4 <ADC1_2_IRQHandler>:
* Return         : None
*******************************************************************************/

void ADC1_2_IRQHandler(void)
{
}
 80034a4:	4770      	bx	lr
 80034a6:	46c0      	nop			(mov r8, r8)

080034a8 <USB_HP_CAN_TX_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USB_HP_CAN_TX_IRQHandler(void)
{
}
 80034a8:	4770      	bx	lr
 80034aa:	46c0      	nop			(mov r8, r8)

080034ac <USB_LP_CAN_RX0_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN_RX0_IRQHandler(void)
{
}
 80034ac:	4770      	bx	lr
 80034ae:	46c0      	nop			(mov r8, r8)

080034b0 <CAN_RX1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_RX1_IRQHandler(void)
{
}
 80034b0:	4770      	bx	lr
 80034b2:	46c0      	nop			(mov r8, r8)

080034b4 <CAN_SCE_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_SCE_IRQHandler(void)
{
}
 80034b4:	4770      	bx	lr
 80034b6:	46c0      	nop			(mov r8, r8)

080034b8 <EXTI9_5_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI9_5_IRQHandler(void)
{
}
 80034b8:	4770      	bx	lr
 80034ba:	46c0      	nop			(mov r8, r8)

080034bc <TIM1_BRK_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_BRK_IRQHandler(void)
{
}
 80034bc:	4770      	bx	lr
 80034be:	46c0      	nop			(mov r8, r8)

080034c0 <TIM1_UP_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_UP_IRQHandler(void)
{
}
 80034c0:	4770      	bx	lr
 80034c2:	46c0      	nop			(mov r8, r8)

080034c4 <TIM1_TRG_COM_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_TRG_COM_IRQHandler(void)
{
}
 80034c4:	4770      	bx	lr
 80034c6:	46c0      	nop			(mov r8, r8)

080034c8 <TIM1_CC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_CC_IRQHandler(void)
{
}
 80034c8:	4770      	bx	lr
 80034ca:	46c0      	nop			(mov r8, r8)

080034cc <TIM2_IRQHandler>:
* Return         : None
*******************************************************************************/
void TIM2_IRQHandler(void)
{
//	ISR_Timer_1ms();
}
 80034cc:	4770      	bx	lr
 80034ce:	46c0      	nop			(mov r8, r8)

080034d0 <TIM3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM3_IRQHandler(void)
{
}
 80034d0:	4770      	bx	lr
 80034d2:	46c0      	nop			(mov r8, r8)

080034d4 <TIM4_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM4_IRQHandler(void)
{
}
 80034d4:	4770      	bx	lr
 80034d6:	46c0      	nop			(mov r8, r8)

080034d8 <I2C1_EV_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_EV_IRQHandler(void)
{
}
 80034d8:	4770      	bx	lr
 80034da:	46c0      	nop			(mov r8, r8)

080034dc <I2C1_ER_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_ER_IRQHandler(void)
{
}
 80034dc:	4770      	bx	lr
 80034de:	46c0      	nop			(mov r8, r8)

080034e0 <I2C2_EV_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_EV_IRQHandler(void)
{
}
 80034e0:	4770      	bx	lr
 80034e2:	46c0      	nop			(mov r8, r8)

080034e4 <I2C2_ER_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_ER_IRQHandler(void)
{
}
 80034e4:	4770      	bx	lr
 80034e6:	46c0      	nop			(mov r8, r8)

080034e8 <SPI1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SPI1_IRQHandler(void)
{
}
 80034e8:	4770      	bx	lr
 80034ea:	46c0      	nop			(mov r8, r8)

080034ec <SPI2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SPI2_IRQHandler(void)
{
}
 80034ec:	4770      	bx	lr
 80034ee:	46c0      	nop			(mov r8, r8)

080034f0 <USART2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USART2_IRQHandler(void)
{
}
 80034f0:	4770      	bx	lr
 80034f2:	46c0      	nop			(mov r8, r8)

080034f4 <EXTI15_10_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI15_10_IRQHandler(void)
{
}
 80034f4:	4770      	bx	lr
 80034f6:	46c0      	nop			(mov r8, r8)

080034f8 <RTCAlarm_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void RTCAlarm_IRQHandler(void)
{
}
 80034f8:	4770      	bx	lr
 80034fa:	46c0      	nop			(mov r8, r8)

080034fc <USBWakeUp_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USBWakeUp_IRQHandler(void)
{
}
 80034fc:	4770      	bx	lr
 80034fe:	46c0      	nop			(mov r8, r8)

08003500 <TIM8_BRK_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_BRK_IRQHandler(void)
{
}
 8003500:	4770      	bx	lr
 8003502:	46c0      	nop			(mov r8, r8)

08003504 <TIM8_UP_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_UP_IRQHandler(void)
{
}
 8003504:	4770      	bx	lr
 8003506:	46c0      	nop			(mov r8, r8)

08003508 <TIM8_TRG_COM_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_TRG_COM_IRQHandler(void)
{
}
 8003508:	4770      	bx	lr
 800350a:	46c0      	nop			(mov r8, r8)

0800350c <TIM8_CC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_CC_IRQHandler(void)
{
}
 800350c:	4770      	bx	lr
 800350e:	46c0      	nop			(mov r8, r8)

08003510 <ADC3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void ADC3_IRQHandler(void)
{
}
 8003510:	4770      	bx	lr
 8003512:	46c0      	nop			(mov r8, r8)

08003514 <FSMC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void FSMC_IRQHandler(void)
{
}
 8003514:	4770      	bx	lr
 8003516:	46c0      	nop			(mov r8, r8)

08003518 <SDIO_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SDIO_IRQHandler(void)
{
}
 8003518:	4770      	bx	lr
 800351a:	46c0      	nop			(mov r8, r8)

0800351c <TIM5_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM5_IRQHandler(void)
{
}
 800351c:	4770      	bx	lr
 800351e:	46c0      	nop			(mov r8, r8)

08003520 <SPI3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SPI3_IRQHandler(void)
{
}
 8003520:	4770      	bx	lr
 8003522:	46c0      	nop			(mov r8, r8)

08003524 <UART4_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void UART4_IRQHandler(void)
{
}
 8003524:	4770      	bx	lr
 8003526:	46c0      	nop			(mov r8, r8)

08003528 <TIM6_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM6_IRQHandler(void)
{
}
 8003528:	4770      	bx	lr
 800352a:	46c0      	nop			(mov r8, r8)

0800352c <TIM7_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM7_IRQHandler(void)
{
}
 800352c:	4770      	bx	lr
 800352e:	46c0      	nop			(mov r8, r8)

08003530 <DMA2_Channel1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel1_IRQHandler(void)
{
}
 8003530:	4770      	bx	lr
 8003532:	46c0      	nop			(mov r8, r8)

08003534 <DMA2_Channel2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel2_IRQHandler(void)
{
}
 8003534:	4770      	bx	lr
 8003536:	46c0      	nop			(mov r8, r8)

08003538 <DMA2_Channel3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel3_IRQHandler(void)
{
}
 8003538:	4770      	bx	lr
 800353a:	46c0      	nop			(mov r8, r8)

0800353c <DMA2_Channel4_5_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel4_5_IRQHandler(void)
{
}
 800353c:	4770      	bx	lr
 800353e:	46c0      	nop			(mov r8, r8)

08003540 <UART5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UART5_IRQHandler(void)
{
 8003540:	b500      	push	{lr}
 8003542:	b081      	sub	sp, #4
#ifdef USING_ZIGBEE
	RxD_ZIG_Interrupt();
 8003544:	f001 fe20 	bl	8005188 <RxD_ZIG_Interrupt>
#endif
}
 8003548:	b001      	add	sp, #4
 800354a:	bd00      	pop	{pc}

0800354c <USART3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART3_IRQHandler(void)
{
 800354c:	b500      	push	{lr}
 800354e:	b081      	sub	sp, #4
#ifdef USING_PC_UART
	RxD_PCU_Interrupt();
 8003550:	f001 fed2 	bl	80052f8 <RxD_PCU_Interrupt>
#endif
}
 8003554:	b001      	add	sp, #4
 8003556:	bd00      	pop	{pc}

08003558 <USART1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART1_IRQHandler(void)
{
 8003558:	b500      	push	{lr}
 800355a:	b081      	sub	sp, #4
#ifdef USING_DYNAMIXEL
	RxD_DXL_Interrupt();
 800355c:	f001 fce6 	bl	8004f2c <RxD_DXL_Interrupt>
#endif
}
 8003560:	b001      	add	sp, #4
 8003562:	bd00      	pop	{pc}

08003564 <SysTickHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SysTickHandler(void)
{
 8003564:	b500      	push	{lr}
 8003566:	b081      	sub	sp, #4
	ISR_Delay_Base();
 8003568:	f001 f938 	bl	80047dc <ISR_Delay_Base>
}
 800356c:	b001      	add	sp, #4
 800356e:	bd00      	pop	{pc}

08003570 <CheckPCNewArrive>:
#include "usart.h"

#ifdef USING_PC_UART

byte CheckPCNewArrive(void) {
	if (gbPcuRead != gbPcuWrite)
 8003570:	4b03      	ldr	r3, [pc, #12]	(8003580 <CheckPCNewArrive+0x10>)
 8003572:	881a      	ldrh	r2, [r3, #0]
 8003574:	4b03      	ldr	r3, [pc, #12]	(8003584 <CheckPCNewArrive+0x14>)
 8003576:	8818      	ldrh	r0, [r3, #0]
 8003578:	1a80      	subs	r0, r0, r2
 800357a:	bf18      	it	ne
 800357c:	2001      	movne	r0, #1
		return 1;
	else
		return 0;
}
 800357e:	4770      	bx	lr
 8003580:	200004da 	.word	0x200004da
 8003584:	200004d8 	.word	0x200004d8

08003588 <RxDByte_PC>:
byte RxDByte_PC(void) {
	byte bTemp;

	while (1) {
		if (gbPcuRead != gbPcuWrite)
 8003588:	f8df c020 	ldr.w	ip, [pc, #32]	; 80035ac <RxDByte_PC+0x24>
 800358c:	4808      	ldr	r0, [pc, #32]	(80035b0 <RxDByte_PC+0x28>)
 800358e:	f8bc 2000 	ldrh.w	r2, [ip]
 8003592:	8803      	ldrh	r3, [r0, #0]
 8003594:	4905      	ldr	r1, [pc, #20]	(80035ac <RxDByte_PC+0x24>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d0f9      	beq.n	800358e <RxDByte_PC+0x6>
			break;
	}

	bTemp = gbpPcuBuffer[gbPcuRead];
 800359a:	880b      	ldrh	r3, [r1, #0]
 800359c:	4a05      	ldr	r2, [pc, #20]	(80035b4 <RxDByte_PC+0x2c>)
 800359e:	b29b      	uxth	r3, r3
 80035a0:	5cd0      	ldrb	r0, [r2, r3]
	gbPcuRead++;
 80035a2:	880b      	ldrh	r3, [r1, #0]
 80035a4:	3301      	adds	r3, #1
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	800b      	strh	r3, [r1, #0]
	return bTemp;
}
 80035aa:	4770      	bx	lr
 80035ac:	200004da 	.word	0x200004da
 80035b0:	200004d8 	.word	0x200004d8
 80035b4:	200000d8 	.word	0x200000d8

080035b8 <TxD_Dec_S32>:
    }
}

//##############################################################################
void TxD_Dec_S32(s32 lLong)
{
 80035b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    u8 bCount, bPrinted;
    s32 lTmp,lDigit;
    bPrinted = 0;
    if(lLong < 0)
 80035ba:	2800      	cmp	r0, #0
    }
}

//##############################################################################
void TxD_Dec_S32(s32 lLong)
{
 80035bc:	b083      	sub	sp, #12
 80035be:	4604      	mov	r4, r0
    u8 bCount, bPrinted;
    s32 lTmp,lDigit;
    bPrinted = 0;
    if(lLong < 0)
 80035c0:	da04      	bge.n	80035cc <TxD_Dec_S32+0x14>
    {
        lLong = -lLong;
 80035c2:	f1c0 0400 	rsb	r4, r0, #0	; 0x0
        pcu_put_byte(  '-');
 80035c6:	202d      	movs	r0, #45
 80035c8:	f001 fe9c 	bl	8005304 <pcu_put_byte>
 80035cc:	2700      	movs	r7, #0
 80035ce:	4e13      	ldr	r6, [pc, #76]	(800361c <TxD_Dec_S32+0x64>)
 80035d0:	9701      	str	r7, [sp, #4]
    }
    lDigit = 1000000000L;
    for(bCount = 0; bCount < 9; bCount++)
    {
        lTmp = (u8)(lLong/lDigit);
 80035d2:	fb94 f3f6 	sdiv	r3, r4, r6
 80035d6:	b2dd      	uxtb	r5, r3
        if(lTmp)
 80035d8:	b13d      	cbz	r5, 80035ea <TxD_Dec_S32+0x32>
        {
            pcu_put_byte( ((u8)lTmp)+'0');
 80035da:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80035de:	b2c0      	uxtb	r0, r0
 80035e0:	f001 fe90 	bl	8005304 <pcu_put_byte>
 80035e4:	2101      	movs	r1, #1
 80035e6:	9101      	str	r1, [sp, #4]
 80035e8:	e004      	b.n	80035f4 <TxD_Dec_S32+0x3c>
            bPrinted = 1;
        }
        else if(bPrinted) pcu_put_byte( ((u8)lTmp)+'0');
 80035ea:	9b01      	ldr	r3, [sp, #4]
 80035ec:	b113      	cbz	r3, 80035f4 <TxD_Dec_S32+0x3c>
 80035ee:	2030      	movs	r0, #48
 80035f0:	f001 fe88 	bl	8005304 <pcu_put_byte>
        lLong -= ((u32)lTmp)*lDigit;
        lDigit = lDigit/10;
 80035f4:	490a      	ldr	r1, [pc, #40]	(8003620 <TxD_Dec_S32+0x68>)
        {
            pcu_put_byte( ((u8)lTmp)+'0');
            bPrinted = 1;
        }
        else if(bPrinted) pcu_put_byte( ((u8)lTmp)+'0');
        lLong -= ((u32)lTmp)*lDigit;
 80035f6:	fb06 4415 	mls	r4, r6, r5, r4
        lDigit = lDigit/10;
 80035fa:	fb86 2301 	smull	r2, r3, r6, r1
 80035fe:	17f1      	asrs	r1, r6, #31
 8003600:	ebc1 06a3 	rsb	r6, r1, r3, asr #2
    {
        lLong = -lLong;
        pcu_put_byte(  '-');
    }
    lDigit = 1000000000L;
    for(bCount = 0; bCount < 9; bCount++)
 8003604:	1c7b      	adds	r3, r7, #1
 8003606:	b2df      	uxtb	r7, r3
 8003608:	2f09      	cmp	r7, #9
 800360a:	d1e2      	bne.n	80035d2 <TxD_Dec_S32+0x1a>
        else if(bPrinted) pcu_put_byte( ((u8)lTmp)+'0');
        lLong -= ((u32)lTmp)*lDigit;
        lDigit = lDigit/10;
    }
    lTmp = (u8)(lLong/lDigit);
    /*if(lTmp)*/ pcu_put_byte(  ((u8)lTmp)+'0');
 800360c:	fb94 f0f6 	sdiv	r0, r4, r6
 8003610:	3030      	adds	r0, #48
 8003612:	b2c0      	uxtb	r0, r0
 8003614:	f001 fe76 	bl	8005304 <pcu_put_byte>
}
 8003618:	b003      	add	sp, #12
 800361a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800361c:	3b9aca00 	.word	0x3b9aca00
 8003620:	66666667 	.word	0x66666667

08003624 <TxD_Dec_S16>:
        wDigit /= 10;
    }
}
//##############################################################################
void TxD_Dec_S16(s16 wData)
{
 8003624:	b5f0      	push	{r4, r5, r6, r7, lr}
    u16 wTmp,wDigit;
    u8 bMinus = 0;

    bPrinted = 0;

    if (wData&0x8000) {
 8003626:	2800      	cmp	r0, #0
        wDigit /= 10;
    }
}
//##############################################################################
void TxD_Dec_S16(s16 wData)
{
 8003628:	b083      	sub	sp, #12
 800362a:	4605      	mov	r5, r0
    u16 wTmp,wDigit;
    u8 bMinus = 0;

    bPrinted = 0;

    if (wData&0x8000) {
 800362c:	db02      	blt.n	8003634 <TxD_Dec_S16+0x10>
 800362e:	2100      	movs	r1, #0
 8003630:	9101      	str	r1, [sp, #4]
 8003632:	e004      	b.n	800363e <TxD_Dec_S16+0x1a>
        bMinus = 1;
        wData = -wData;
 8003634:	f1c0 0300 	rsb	r3, r0, #0	; 0x0
 8003638:	2201      	movs	r2, #1
 800363a:	b21d      	sxth	r5, r3
 800363c:	9201      	str	r2, [sp, #4]
 800363e:	2700      	movs	r7, #0
 8003640:	9700      	str	r7, [sp, #0]
 8003642:	f242 7610 	movw	r6, #10000	; 0x2710

    wDigit = 10000;
    for(bCount = 0; bCount < 5; bCount++)
    {
        wTmp = (wData/wDigit);
        if(wTmp && !bPrinted)
 8003646:	9900      	ldr	r1, [sp, #0]
    }

    wDigit = 10000;
    for(bCount = 0; bCount < 5; bCount++)
    {
        wTmp = (wData/wDigit);
 8003648:	fb95 f3f6 	sdiv	r3, r5, r6
 800364c:	b29c      	uxth	r4, r3
        if(wTmp && !bPrinted)
 800364e:	f081 0301 	eor.w	r3, r1, #1	; 0x1
 8003652:	2c00      	cmp	r4, #0
 8003654:	bf0c      	ite	eq
 8003656:	2300      	moveq	r3, #0
 8003658:	f003 0301 	andne.w	r3, r3, #1	; 0x1
 800365c:	b163      	cbz	r3, 8003678 <TxD_Dec_S16+0x54>
        {
            if (bMinus) pcu_put_byte( '-');
 800365e:	9a01      	ldr	r2, [sp, #4]
 8003660:	b112      	cbz	r2, 8003668 <TxD_Dec_S16+0x44>
 8003662:	202d      	movs	r0, #45
 8003664:	f001 fe4e 	bl	8005304 <pcu_put_byte>
            pcu_put_byte( ((u8)wTmp)+'0');
 8003668:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800366c:	b2c0      	uxtb	r0, r0
 800366e:	f001 fe49 	bl	8005304 <pcu_put_byte>
 8003672:	2301      	movs	r3, #1
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	e00c      	b.n	8003692 <TxD_Dec_S16+0x6e>
            bPrinted = 1;
        }
        else
        {
            if(bPrinted) pcu_put_byte( ((u8)wTmp)+'0');
 8003678:	9900      	ldr	r1, [sp, #0]
 800367a:	b119      	cbz	r1, 8003684 <TxD_Dec_S16+0x60>
 800367c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003680:	b2c0      	uxtb	r0, r0
 8003682:	e004      	b.n	800368e <TxD_Dec_S16+0x6a>
            else
            {
                if(bCount < 4) pcu_put_byte( ' ');
 8003684:	2f04      	cmp	r7, #4
 8003686:	d001      	beq.n	800368c <TxD_Dec_S16+0x68>
 8003688:	2020      	movs	r0, #32
 800368a:	e000      	b.n	800368e <TxD_Dec_S16+0x6a>
                else pcu_put_byte(  '0');
 800368c:	2030      	movs	r0, #48
 800368e:	f001 fe39 	bl	8005304 <pcu_put_byte>
        bMinus = 1;
        wData = -wData;
    }

    wDigit = 10000;
    for(bCount = 0; bCount < 5; bCount++)
 8003692:	1c7b      	adds	r3, r7, #1
 8003694:	b2df      	uxtb	r7, r3
 8003696:	2f05      	cmp	r7, #5
 8003698:	d008      	beq.n	80036ac <TxD_Dec_S16+0x88>
            {
                if(bCount < 4) pcu_put_byte( ' ');
                else pcu_put_byte(  '0');
            }
        }
        wData -= wTmp*wDigit;
 800369a:	fb06 5314 	mls	r3, r6, r4, r5
        wDigit /= 10;
 800369e:	4904      	ldr	r1, [pc, #16]	(80036b0 <TxD_Dec_S16+0x8c>)
            {
                if(bCount < 4) pcu_put_byte( ' ');
                else pcu_put_byte(  '0');
            }
        }
        wData -= wTmp*wDigit;
 80036a0:	b21d      	sxth	r5, r3
        wDigit /= 10;
 80036a2:	fba6 2301 	umull	r2, r3, r6, r1
 80036a6:	08db      	lsrs	r3, r3, #3
 80036a8:	b29e      	uxth	r6, r3
 80036aa:	e7cc      	b.n	8003646 <TxD_Dec_S16+0x22>
    }
}
 80036ac:	b003      	add	sp, #12
 80036ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036b0:	cccccccd 	.word	0xcccccccd

080036b4 <TxD_Dec_S8>:
    }
}

//##############################################################################
void TxD_Dec_S8(s8 wData)
{
 80036b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    u16 wTmp,wDigit;
    u8 bMinus = 0;

    bPrinted = 0;

    if (wData&0x80) {
 80036b6:	2800      	cmp	r0, #0
    }
}

//##############################################################################
void TxD_Dec_S8(s8 wData)
{
 80036b8:	b083      	sub	sp, #12
 80036ba:	4605      	mov	r5, r0
    u16 wTmp,wDigit;
    u8 bMinus = 0;

    bPrinted = 0;

    if (wData&0x80) {
 80036bc:	db02      	blt.n	80036c4 <TxD_Dec_S8+0x10>
 80036be:	2100      	movs	r1, #0
 80036c0:	9101      	str	r1, [sp, #4]
 80036c2:	e004      	b.n	80036ce <TxD_Dec_S8+0x1a>
        bMinus = 1;
        wData = -wData;
 80036c4:	f1c0 0300 	rsb	r3, r0, #0	; 0x0
 80036c8:	2201      	movs	r2, #1
 80036ca:	b25d      	sxtb	r5, r3
 80036cc:	9201      	str	r2, [sp, #4]
 80036ce:	2300      	movs	r3, #0
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	2700      	movs	r7, #0
 80036d4:	2664      	movs	r6, #100
    }

    wDigit = 100;
    for(bCount = 0; bCount < 3; bCount++)
    {
        wTmp = (wData/wDigit);
 80036d6:	fb95 f3f6 	sdiv	r3, r5, r6
 80036da:	b29c      	uxth	r4, r3
        if(wTmp && !bPrinted)
 80036dc:	f087 0301 	eor.w	r3, r7, #1	; 0x1
 80036e0:	2c00      	cmp	r4, #0
 80036e2:	bf0c      	ite	eq
 80036e4:	2300      	moveq	r3, #0
 80036e6:	f003 0301 	andne.w	r3, r3, #1	; 0x1
 80036ea:	b15b      	cbz	r3, 8003704 <TxD_Dec_S8+0x50>
        {
            if (bMinus) pcu_put_byte( '-');
 80036ec:	9901      	ldr	r1, [sp, #4]
 80036ee:	b111      	cbz	r1, 80036f6 <TxD_Dec_S8+0x42>
 80036f0:	202d      	movs	r0, #45
 80036f2:	f001 fe07 	bl	8005304 <pcu_put_byte>
            pcu_put_byte( ((u8)wTmp)+'0');
 80036f6:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80036fa:	b2c0      	uxtb	r0, r0
 80036fc:	f001 fe02 	bl	8005304 <pcu_put_byte>
 8003700:	2701      	movs	r7, #1
 8003702:	e007      	b.n	8003714 <TxD_Dec_S8+0x60>
            bPrinted = 1;
        }
        else
        {
            if(bPrinted) pcu_put_byte( ((u8)wTmp)+'0');
 8003704:	b11f      	cbz	r7, 800370e <TxD_Dec_S8+0x5a>
 8003706:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800370a:	b2c0      	uxtb	r0, r0
 800370c:	e000      	b.n	8003710 <TxD_Dec_S8+0x5c>
            else
            {
                if(bCount < 4) pcu_put_byte( ' ');
 800370e:	2020      	movs	r0, #32
 8003710:	f001 fdf8 	bl	8005304 <pcu_put_byte>
        bMinus = 1;
        wData = -wData;
    }

    wDigit = 100;
    for(bCount = 0; bCount < 3; bCount++)
 8003714:	9a00      	ldr	r2, [sp, #0]
 8003716:	1c53      	adds	r3, r2, #1
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b03      	cmp	r3, #3
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	d008      	beq.n	8003732 <TxD_Dec_S8+0x7e>
            {
                if(bCount < 4) pcu_put_byte( ' ');
                else pcu_put_byte(  '0');
            }
        }
        wData -= wTmp*wDigit;
 8003720:	fb06 5314 	mls	r3, r6, r4, r5
        wDigit /= 10;
 8003724:	4904      	ldr	r1, [pc, #16]	(8003738 <TxD_Dec_S8+0x84>)
            {
                if(bCount < 4) pcu_put_byte( ' ');
                else pcu_put_byte(  '0');
            }
        }
        wData -= wTmp*wDigit;
 8003726:	b25d      	sxtb	r5, r3
        wDigit /= 10;
 8003728:	fba6 2301 	umull	r2, r3, r6, r1
 800372c:	08db      	lsrs	r3, r3, #3
 800372e:	b29e      	uxth	r6, r3
 8003730:	e7d1      	b.n	80036d6 <TxD_Dec_S8+0x22>
    }
}
 8003732:	b003      	add	sp, #12
 8003734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003736:	46c0      	nop			(mov r8, r8)
 8003738:	cccccccd 	.word	0xcccccccd

0800373c <TxD_Dec_U32>:
    }
}

//##############################################################################
void TxD_Dec_U32(u32 wData)
{
 800373c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800373e:	2500      	movs	r5, #0
 8003740:	b083      	sub	sp, #12
 8003742:	4e12      	ldr	r6, [pc, #72]	(800378c <TxD_Dec_U32+0x50>)
 8003744:	4607      	mov	r7, r0
 8003746:	9501      	str	r5, [sp, #4]

    wDigit = 1000000000;

    for(bCount = 0; bCount < 10; bCount++)
    {
        wTmp = (wData/wDigit);
 8003748:	fbb7 f4f6 	udiv	r4, r7, r6
        if(wTmp)
 800374c:	b13c      	cbz	r4, 800375e <TxD_Dec_U32+0x22>
        {
            pcu_put_byte( ((u8)wTmp)+'0');
 800374e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003752:	b2c0      	uxtb	r0, r0
 8003754:	f001 fdd6 	bl	8005304 <pcu_put_byte>
 8003758:	2101      	movs	r1, #1
 800375a:	9101      	str	r1, [sp, #4]
 800375c:	e008      	b.n	8003770 <TxD_Dec_U32+0x34>
            bPrinted = 1;
        }
        else
        {
            if(bPrinted) pcu_put_byte( ((u8)wTmp)+'0');
 800375e:	9b01      	ldr	r3, [sp, #4]
 8003760:	b91b      	cbnz	r3, 800376a <TxD_Dec_U32+0x2e>
            else
            {
                if(bCount < 4) pcu_put_byte( ' ');
 8003762:	2d03      	cmp	r5, #3
 8003764:	d801      	bhi.n	800376a <TxD_Dec_U32+0x2e>
 8003766:	2020      	movs	r0, #32
 8003768:	e000      	b.n	800376c <TxD_Dec_U32+0x30>
                else pcu_put_byte( '0');
 800376a:	2030      	movs	r0, #48
 800376c:	f001 fdca 	bl	8005304 <pcu_put_byte>
    u32 wTmp,wDigit;
    bPrinted = 0;

    wDigit = 1000000000;

    for(bCount = 0; bCount < 10; bCount++)
 8003770:	1c6b      	adds	r3, r5, #1
 8003772:	b2dd      	uxtb	r5, r3
 8003774:	2d0a      	cmp	r5, #10
 8003776:	d006      	beq.n	8003786 <TxD_Dec_U32+0x4a>
                if(bCount < 4) pcu_put_byte( ' ');
                else pcu_put_byte( '0');
            }
        }
        wData -= wTmp*wDigit;
        wDigit /= 10;
 8003778:	4905      	ldr	r1, [pc, #20]	(8003790 <TxD_Dec_U32+0x54>)
            {
                if(bCount < 4) pcu_put_byte( ' ');
                else pcu_put_byte( '0');
            }
        }
        wData -= wTmp*wDigit;
 800377a:	fb06 7714 	mls	r7, r6, r4, r7
        wDigit /= 10;
 800377e:	fba6 2301 	umull	r2, r3, r6, r1
 8003782:	08de      	lsrs	r6, r3, #3
 8003784:	e7e0      	b.n	8003748 <TxD_Dec_U32+0xc>
    }
}
 8003786:	b003      	add	sp, #12
 8003788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800378a:	46c0      	nop			(mov r8, r8)
 800378c:	3b9aca00 	.word	0x3b9aca00
 8003790:	cccccccd 	.word	0xcccccccd

08003794 <TxD_Dec_U16>:
    pcu_put_byte( bByte - bTmp*10+'0');
}

//##############################################################################
void TxD_Dec_U16(u16 wData)
{
 8003794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003796:	2600      	movs	r6, #0
 8003798:	b083      	sub	sp, #12
 800379a:	4607      	mov	r7, r0
 800379c:	9601      	str	r6, [sp, #4]
 800379e:	f242 7410 	movw	r4, #10000	; 0x2710
    bPrinted = 0;

    wDigit = 10000;
    for(bCount = 0; bCount < 5; bCount++)
    {
        wTmp = (wData/wDigit);
 80037a2:	fbb7 f5f4 	udiv	r5, r7, r4
        if(wTmp)
 80037a6:	b13d      	cbz	r5, 80037b8 <TxD_Dec_U16+0x24>
        {
            pcu_put_byte( ((u8)wTmp)+'0');
 80037a8:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80037ac:	b2c0      	uxtb	r0, r0
 80037ae:	f001 fda9 	bl	8005304 <pcu_put_byte>
 80037b2:	2101      	movs	r1, #1
 80037b4:	9101      	str	r1, [sp, #4]
 80037b6:	e008      	b.n	80037ca <TxD_Dec_U16+0x36>
            bPrinted = 1;
        }
        else
        {
            if(bPrinted) pcu_put_byte( ((u8)wTmp)+'0');
 80037b8:	9b01      	ldr	r3, [sp, #4]
 80037ba:	b91b      	cbnz	r3, 80037c4 <TxD_Dec_U16+0x30>
            else
            {
                if(bCount < 4) pcu_put_byte( ' ');
 80037bc:	2e04      	cmp	r6, #4
 80037be:	d001      	beq.n	80037c4 <TxD_Dec_U16+0x30>
 80037c0:	2020      	movs	r0, #32
 80037c2:	e000      	b.n	80037c6 <TxD_Dec_U16+0x32>
                else pcu_put_byte( '0');
 80037c4:	2030      	movs	r0, #48
 80037c6:	f001 fd9d 	bl	8005304 <pcu_put_byte>
    u8 bCount, bPrinted;
    u16 wTmp,wDigit;
    bPrinted = 0;

    wDigit = 10000;
    for(bCount = 0; bCount < 5; bCount++)
 80037ca:	1c73      	adds	r3, r6, #1
 80037cc:	b2de      	uxtb	r6, r3
 80037ce:	2e05      	cmp	r6, #5
 80037d0:	d008      	beq.n	80037e4 <TxD_Dec_U16+0x50>
            {
                if(bCount < 4) pcu_put_byte( ' ');
                else pcu_put_byte( '0');
            }
        }
        wData -= wTmp*wDigit;
 80037d2:	fb04 7315 	mls	r3, r4, r5, r7
        wDigit /= 10;
 80037d6:	4904      	ldr	r1, [pc, #16]	(80037e8 <TxD_Dec_U16+0x54>)
            {
                if(bCount < 4) pcu_put_byte( ' ');
                else pcu_put_byte( '0');
            }
        }
        wData -= wTmp*wDigit;
 80037d8:	b29f      	uxth	r7, r3
        wDigit /= 10;
 80037da:	fba4 2301 	umull	r2, r3, r4, r1
 80037de:	08db      	lsrs	r3, r3, #3
 80037e0:	b29c      	uxth	r4, r3
 80037e2:	e7de      	b.n	80037a2 <TxD_Dec_U16+0xe>
    }
}
 80037e4:	b003      	add	sp, #12
 80037e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037e8:	cccccccd 	.word	0xcccccccd

080037ec <TxD_Dec_U8>:

//##############################################################################
void TxD_Dec_U8(u8 bByte)
{
    u8 bTmp;
    bTmp = bByte/100;
 80037ec:	4a16      	ldr	r2, [pc, #88]	(8003848 <TxD_Dec_U8+0x5c>)
	return;
}

//##############################################################################
void TxD_Dec_U8(u8 bByte)
{
 80037ee:	b530      	push	{r4, r5, lr}
    u8 bTmp;
    bTmp = bByte/100;
 80037f0:	fba0 2302 	umull	r2, r3, r0, r2
 80037f4:	095c      	lsrs	r4, r3, #5
 80037f6:	b2e4      	uxtb	r4, r4
	return;
}

//##############################################################################
void TxD_Dec_U8(u8 bByte)
{
 80037f8:	4605      	mov	r5, r0
    u8 bTmp;
    bTmp = bByte/100;
    /*if(bTmp)*/ pcu_put_byte(bTmp+'0');
 80037fa:	f104 0030 	add.w	r0, r4, #48	; 0x30
	return;
}

//##############################################################################
void TxD_Dec_U8(u8 bByte)
{
 80037fe:	b081      	sub	sp, #4
    u8 bTmp;
    bTmp = bByte/100;
    /*if(bTmp)*/ pcu_put_byte(bTmp+'0');
 8003800:	b2c0      	uxtb	r0, r0
 8003802:	f001 fd7f 	bl	8005304 <pcu_put_byte>
    bByte -= bTmp*100;
 8003806:	ebc4 6344 	rsb	r3, r4, r4, lsl #25
 800380a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800380e:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
 8003812:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    bTmp = bByte/10;
 8003816:	4a0d      	ldr	r2, [pc, #52]	(800384c <TxD_Dec_U8+0x60>)
void TxD_Dec_U8(u8 bByte)
{
    u8 bTmp;
    bTmp = bByte/100;
    /*if(bTmp)*/ pcu_put_byte(bTmp+'0');
    bByte -= bTmp*100;
 8003818:	b2ed      	uxtb	r5, r5
    bTmp = bByte/10;
 800381a:	fba5 2302 	umull	r2, r3, r5, r2
 800381e:	08dc      	lsrs	r4, r3, #3
 8003820:	b2e4      	uxtb	r4, r4
    /*if(bTmp)*/ pcu_put_byte( bTmp+'0');
 8003822:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003826:	b2c0      	uxtb	r0, r0
 8003828:	f001 fd6c 	bl	8005304 <pcu_put_byte>
    pcu_put_byte( bByte - bTmp*10+'0');
 800382c:	ebc4 7344 	rsb	r3, r4, r4, lsl #29
 8003830:	3530      	adds	r5, #48
 8003832:	ebc4 0483 	rsb	r4, r4, r3, lsl #2
 8003836:	eb05 0544 	add.w	r5, r5, r4, lsl #1
 800383a:	b2ed      	uxtb	r5, r5
 800383c:	4628      	mov	r0, r5
 800383e:	f001 fd61 	bl	8005304 <pcu_put_byte>
}
 8003842:	b001      	add	sp, #4
 8003844:	bd30      	pop	{r4, r5, pc}
 8003846:	46c0      	nop			(mov r8, r8)
 8003848:	51eb851f 	.word	0x51eb851f
 800384c:	cccccccd 	.word	0xcccccccd

08003850 <std_putchar>:
	pcu_hal_close();
}

//##############################################################################
int std_putchar(char c) {
	if (c == '\n') {
 8003850:	280a      	cmp	r0, #10
void pcu_terminate(void) {
	pcu_hal_close();
}

//##############################################################################
int std_putchar(char c) {
 8003852:	b510      	push	{r4, lr}
 8003854:	4604      	mov	r4, r0
	if (c == '\n') {
		pcu_put_byte((u8) '\r'); //0x0D
		pcu_put_byte((u8) '\n'); //0x0A
	} else {
		pcu_put_byte((u8) c);
 8003856:	bf18      	it	ne
 8003858:	4600      	movne	r0, r0
	pcu_hal_close();
}

//##############################################################################
int std_putchar(char c) {
	if (c == '\n') {
 800385a:	d103      	bne.n	8003864 <std_putchar+0x14>
		pcu_put_byte((u8) '\r'); //0x0D
 800385c:	200d      	movs	r0, #13
 800385e:	f001 fd51 	bl	8005304 <pcu_put_byte>
		pcu_put_byte((u8) '\n'); //0x0A
 8003862:	200a      	movs	r0, #10
	} else {
		pcu_put_byte((u8) c);
 8003864:	f001 fd4e 	bl	8005304 <pcu_put_byte>
	}

	return c;
}
 8003868:	4620      	mov	r0, r4
 800386a:	bd10      	pop	{r4, pc}

0800386c <PrintChar>:
	if (dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
		std_puts("\nInstruction code error!\n");
}

//##############################################################################
int PrintChar(char c) {
 800386c:	b500      	push	{lr}
 800386e:	b081      	sub	sp, #4
	return std_putchar(c);
 8003870:	f7ff ffee 	bl	8003850 <std_putchar>
}
 8003874:	b001      	add	sp, #4
 8003876:	bd00      	pop	{pc}

08003878 <std_puts>:

	return c;
}

//##############################################################################
int std_puts(const char *str) {
 8003878:	b530      	push	{r4, r5, lr}
 800387a:	4605      	mov	r5, r0
 800387c:	b081      	sub	sp, #4
 800387e:	2400      	movs	r4, #0
 8003880:	e002      	b.n	8003888 <std_puts+0x10>
	int n = 0;
	while (str[n])
		std_putchar(str[n++]);
 8003882:	3401      	adds	r4, #1
 8003884:	f7ff ffe4 	bl	8003850 <std_putchar>
}

//##############################################################################
int std_puts(const char *str) {
	int n = 0;
	while (str[n])
 8003888:	5d28      	ldrb	r0, [r5, r4]
 800388a:	2800      	cmp	r0, #0
 800388c:	d1f9      	bne.n	8003882 <std_puts+0xa>
		std_putchar(str[n++]);

	return n;
}
 800388e:	4620      	mov	r0, r4
 8003890:	b001      	add	sp, #4
 8003892:	bd30      	pop	{r4, r5, pc}

08003894 <Printu8h>:
	std_puts(out);
	return;
}

//##############################################################################
void Printu8h(u8 bNum) {
 8003894:	b500      	push	{lr}
	char out[5];
	out[0] = '0';
 8003896:	2330      	movs	r3, #48
	std_puts(out);
	return;
}

//##############################################################################
void Printu8h(u8 bNum) {
 8003898:	b083      	sub	sp, #12
	char out[5];
	out[0] = '0';
 800389a:	f88d 3003 	strb.w	r3, [sp, #3]
	out[1] = 'x';
 800389e:	2378      	movs	r3, #120
 80038a0:	f88d 3004 	strb.w	r3, [sp, #4]
	out[4] = '\0';
 80038a4:	2300      	movs	r3, #0
 80038a6:	f88d 3007 	strb.w	r3, [sp, #7]

	out[2] = (char) ((bNum >> 4) & 0x0F) + 0x30;
 80038aa:	0903      	lsrs	r3, r0, #4
 80038ac:	3330      	adds	r3, #48
	if (out[2] > '9')
 80038ae:	2b39      	cmp	r3, #57
	char out[5];
	out[0] = '0';
	out[1] = 'x';
	out[4] = '\0';

	out[2] = (char) ((bNum >> 4) & 0x0F) + 0x30;
 80038b0:	f88d 3005 	strb.w	r3, [sp, #5]
	if (out[2] > '9')
 80038b4:	d902      	bls.n	80038bc <Printu8h+0x28>
		out[2] += 7;
 80038b6:	3307      	adds	r3, #7
 80038b8:	f88d 3005 	strb.w	r3, [sp, #5]

	out[3] = (char) (bNum & 0x0F) + 0x30;
 80038bc:	f000 030f 	and.w	r3, r0, #15	; 0xf
 80038c0:	f103 0030 	add.w	r0, r3, #48	; 0x30
	if (out[3] > '9')
 80038c4:	2839      	cmp	r0, #57

	out[2] = (char) ((bNum >> 4) & 0x0F) + 0x30;
	if (out[2] > '9')
		out[2] += 7;

	out[3] = (char) (bNum & 0x0F) + 0x30;
 80038c6:	f88d 0006 	strb.w	r0, [sp, #6]
	if (out[3] > '9')
 80038ca:	d902      	bls.n	80038d2 <Printu8h+0x3e>
		out[3] += 7;
 80038cc:	1dc3      	adds	r3, r0, #7
 80038ce:	f88d 3006 	strb.w	r3, [sp, #6]

	std_puts(out);
 80038d2:	f10d 0003 	add.w	r0, sp, #3	; 0x3
 80038d6:	f7ff ffcf 	bl	8003878 <std_puts>
	return;
}
 80038da:	b003      	add	sp, #12
 80038dc:	bd00      	pop	{pc}
 80038de:	46c0      	nop			(mov r8, r8)

080038e0 <Printu16h>:
	std_puts(out);
	return;
}

//##############################################################################
void Printu16h(u16 wNum) {
 80038e0:	b500      	push	{lr}
	char out[7];
	out[0] = '0';
 80038e2:	2330      	movs	r3, #48
	std_puts(out);
	return;
}

//##############################################################################
void Printu16h(u16 wNum) {
 80038e4:	b083      	sub	sp, #12
	char out[7];
	out[0] = '0';
 80038e6:	f88d 3001 	strb.w	r3, [sp, #1]
	out[1] = 'x';
 80038ea:	2378      	movs	r3, #120
 80038ec:	f88d 3002 	strb.w	r3, [sp, #2]
	out[6] = '\0';
 80038f0:	2300      	movs	r3, #0
 80038f2:	f88d 3007 	strb.w	r3, [sp, #7]

	out[2] = (char) ((wNum >> 12) & 0x0F) + 0x30;
 80038f6:	0b03      	lsrs	r3, r0, #12
 80038f8:	3330      	adds	r3, #48
	if (out[2] > '9')
 80038fa:	2b39      	cmp	r3, #57
	char out[7];
	out[0] = '0';
	out[1] = 'x';
	out[6] = '\0';

	out[2] = (char) ((wNum >> 12) & 0x0F) + 0x30;
 80038fc:	f88d 3003 	strb.w	r3, [sp, #3]
	if (out[2] > '9')
 8003900:	d902      	bls.n	8003908 <Printu16h+0x28>
		out[2] += 7;
 8003902:	3307      	adds	r3, #7
 8003904:	f88d 3003 	strb.w	r3, [sp, #3]

	out[3] = (char) ((wNum >> 8) & 0x0F) + 0x30;
 8003908:	0a03      	lsrs	r3, r0, #8
 800390a:	f003 030f 	and.w	r3, r3, #15	; 0xf
 800390e:	3330      	adds	r3, #48
	if (out[3] > '9')
 8003910:	2b39      	cmp	r3, #57

	out[2] = (char) ((wNum >> 12) & 0x0F) + 0x30;
	if (out[2] > '9')
		out[2] += 7;

	out[3] = (char) ((wNum >> 8) & 0x0F) + 0x30;
 8003912:	f88d 3004 	strb.w	r3, [sp, #4]
	if (out[3] > '9')
 8003916:	d902      	bls.n	800391e <Printu16h+0x3e>
		out[3] += 7;
 8003918:	3307      	adds	r3, #7
 800391a:	f88d 3004 	strb.w	r3, [sp, #4]

	out[4] = (char) ((wNum >> 4) & 0x0F) + 0x30;
 800391e:	0903      	lsrs	r3, r0, #4
 8003920:	f003 030f 	and.w	r3, r3, #15	; 0xf
 8003924:	3330      	adds	r3, #48
	if (out[4] > '9')
 8003926:	2b39      	cmp	r3, #57

	out[3] = (char) ((wNum >> 8) & 0x0F) + 0x30;
	if (out[3] > '9')
		out[3] += 7;

	out[4] = (char) ((wNum >> 4) & 0x0F) + 0x30;
 8003928:	f88d 3005 	strb.w	r3, [sp, #5]
	if (out[4] > '9')
 800392c:	d902      	bls.n	8003934 <Printu16h+0x54>
		out[4] += 7;
 800392e:	3307      	adds	r3, #7
 8003930:	f88d 3005 	strb.w	r3, [sp, #5]

	out[5] = (char) (wNum & 0x0F) + 0x30;
 8003934:	f000 030f 	and.w	r3, r0, #15	; 0xf
 8003938:	f103 0030 	add.w	r0, r3, #48	; 0x30
	if (out[5] > '9')
 800393c:	2839      	cmp	r0, #57

	out[4] = (char) ((wNum >> 4) & 0x0F) + 0x30;
	if (out[4] > '9')
		out[4] += 7;

	out[5] = (char) (wNum & 0x0F) + 0x30;
 800393e:	f88d 0006 	strb.w	r0, [sp, #6]
	if (out[5] > '9')
 8003942:	d902      	bls.n	800394a <Printu16h+0x6a>
		out[5] += 7;
 8003944:	1dc3      	adds	r3, r0, #7
 8003946:	f88d 3006 	strb.w	r3, [sp, #6]

	std_puts(out);
 800394a:	f10d 0001 	add.w	r0, sp, #1	; 0x1
 800394e:	f7ff ff93 	bl	8003878 <std_puts>
	return;
}
 8003952:	b003      	add	sp, #12
 8003954:	bd00      	pop	{pc}
 8003956:	46c0      	nop			(mov r8, r8)

08003958 <Prints32d>:
	std_puts(out);
	return;
}

//##############################################################################
void Prints32d(s32 lNumS) {
 8003958:	b500      	push	{lr}
 800395a:	b085      	sub	sp, #20

	if (lNum < 0) {
		out[0] = '-';
		lNum = (u32) ((~lNumS) + 1);
	} else {
		out[0] = '+';
 800395c:	a904      	add	r1, sp, #16
 800395e:	232b      	movs	r3, #43
		lNum = (u32) (lNumS);
 8003960:	4a18      	ldr	r2, [pc, #96]	(80039c4 <Prints32d+0x6c>)
		temp = (lNum / div);
		lNum = (lNum % div);
//        lNum -= (u32) (temp*div);
//        out[i] = (char) (temp&0x0000000F)+0x30;
		out[i] = (char) ((temp & 0x0F) + 0x30);
		div /= 10;
 8003962:	f8df e064 	ldr.w	lr, [pc, #100]	; 80039c8 <Prints32d+0x70>

	if (lNum < 0) {
		out[0] = '-';
		lNum = (u32) ((~lNumS) + 1);
	} else {
		out[0] = '+';
 8003966:	f801 3d0c 	strb.w	r3, [r1, #-12]!
		lNum = (u32) (lNumS);
	}

	for (i = 1; i < 11; i++) {
 800396a:	f10d 0c0e 	add.w	ip, sp, #14	; 0xe
		temp = (lNum / div);
 800396e:	fbb0 f3f2 	udiv	r3, r0, r2
		lNum = (lNum % div);
 8003972:	fb02 0013 	mls	r0, r2, r3, r0
//        lNum -= (u32) (temp*div);
//        out[i] = (char) (temp&0x0000000F)+0x30;
		out[i] = (char) ((temp & 0x0F) + 0x30);
 8003976:	f003 030f 	and.w	r3, r3, #15	; 0xf
 800397a:	3330      	adds	r3, #48
 800397c:	f801 3f01 	strb.w	r3, [r1, #1]!
		div /= 10;
 8003980:	fba2 230e 	umull	r2, r3, r2, lr
 8003984:	08da      	lsrs	r2, r3, #3
	} else {
		out[0] = '+';
		lNum = (u32) (lNumS);
	}

	for (i = 1; i < 11; i++) {
 8003986:	4561      	cmp	r1, ip
 8003988:	d1f1      	bne.n	800396e <Prints32d+0x16>
//        lNum -= (u32) (temp*div);
//        out[i] = (char) (temp&0x0000000F)+0x30;
		out[i] = (char) ((temp & 0x0F) + 0x30);
		div /= 10;
	}
	out[i] = '\0';
 800398a:	2300      	movs	r3, #0
 800398c:	f88d 300f 	strb.w	r3, [sp, #15]
 8003990:	2100      	movs	r1, #0

	for (i = 0; i < 11; i++) {
		if (out[0] == '0') {
 8003992:	f10d 0005 	add.w	r0, sp, #5	; 0x5
 8003996:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800399a:	2b30      	cmp	r3, #48
 800399c:	d108      	bne.n	80039b0 <Prints32d+0x58>
 800399e:	4602      	mov	r2, r0
			for (j = 0; j < 11; j++) {
				out[j] = out[j + 1];
 80039a0:	7813      	ldrb	r3, [r2, #0]
 80039a2:	f802 3c01 	strb.w	r3, [r2, #-1]
				if (out[j] == '\0')
 80039a6:	b11b      	cbz	r3, 80039b0 <Prints32d+0x58>
					break;
 80039a8:	3201      	adds	r2, #1
	}
	out[i] = '\0';

	for (i = 0; i < 11; i++) {
		if (out[0] == '0') {
			for (j = 0; j < 11; j++) {
 80039aa:	ab04      	add	r3, sp, #16
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d1f7      	bne.n	80039a0 <Prints32d+0x48>
		out[i] = (char) ((temp & 0x0F) + 0x30);
		div /= 10;
	}
	out[i] = '\0';

	for (i = 0; i < 11; i++) {
 80039b0:	1c4b      	adds	r3, r1, #1
 80039b2:	b2d9      	uxtb	r1, r3
 80039b4:	290b      	cmp	r1, #11
 80039b6:	d1ee      	bne.n	8003996 <Prints32d+0x3e>
					break;
			}
		}
	}

	std_puts(out);
 80039b8:	a801      	add	r0, sp, #4
 80039ba:	f7ff ff5d 	bl	8003878 <std_puts>
	return;
}
 80039be:	b005      	add	sp, #20
 80039c0:	bd00      	pop	{pc}
 80039c2:	46c0      	nop			(mov r8, r8)
 80039c4:	3b9aca00 	.word	0x3b9aca00
 80039c8:	cccccccd 	.word	0xcccccccd

080039cc <Printu32d>:
char* GetString(char* s) {
	return std_gets(s);
}

//##############################################################################
void Printu32d(u32 lNum) {
 80039cc:	b500      	push	{lr}
 80039ce:	4a19      	ldr	r2, [pc, #100]	(8003a34 <Printu32d+0x68>)
 80039d0:	b085      	sub	sp, #20
		temp = (char) (lNum / div);
		lNum = (lNum % div);
//        lNum -= (u32) (temp*div);
//        out[i] = (char) (temp&0x0000000F)+0x30;
		out[i] = (char) ((temp & 0x0F) + 0x30);
		div /= 10;
 80039d2:	f8df c064 	ldr.w	ip, [pc, #100]	; 8003a38 <Printu32d+0x6c>
char* GetString(char* s) {
	return std_gets(s);
}

//##############################################################################
void Printu32d(u32 lNum) {
 80039d6:	2100      	movs	r1, #0
	for (i = 0; i < 10; i++) {
		temp = (char) (lNum / div);
		lNum = (lNum % div);
//        lNum -= (u32) (temp*div);
//        out[i] = (char) (temp&0x0000000F)+0x30;
		out[i] = (char) ((temp & 0x0F) + 0x30);
 80039d8:	f10d 0e05 	add.w	lr, sp, #5	; 0x5
	u32 temp, div = 1000000000;
	char out[11];
	u8 i, j;

	for (i = 0; i < 10; i++) {
		temp = (char) (lNum / div);
 80039dc:	fbb0 f3f2 	udiv	r3, r0, r2
		lNum = (lNum % div);
 80039e0:	fb02 0013 	mls	r0, r2, r3, r0
//        lNum -= (u32) (temp*div);
//        out[i] = (char) (temp&0x0000000F)+0x30;
		out[i] = (char) ((temp & 0x0F) + 0x30);
 80039e4:	f003 030f 	and.w	r3, r3, #15	; 0xf
 80039e8:	3330      	adds	r3, #48
 80039ea:	f80e 3001 	strb.w	r3, [lr, r1]
		div /= 10;
 80039ee:	fba2 230c 	umull	r2, r3, r2, ip
 80039f2:	3101      	adds	r1, #1
 80039f4:	08da      	lsrs	r2, r3, #3
void Printu32d(u32 lNum) {
	u32 temp, div = 1000000000;
	char out[11];
	u8 i, j;

	for (i = 0; i < 10; i++) {
 80039f6:	290a      	cmp	r1, #10
 80039f8:	d1f0      	bne.n	80039dc <Printu32d+0x10>
//        lNum -= (u32) (temp*div);
//        out[i] = (char) (temp&0x0000000F)+0x30;
		out[i] = (char) ((temp & 0x0F) + 0x30);
		div /= 10;
	}
	out[i] = '\0';
 80039fa:	2300      	movs	r3, #0
 80039fc:	f88d 300f 	strb.w	r3, [sp, #15]
 8003a00:	2100      	movs	r1, #0

	for (i = 0; i < 10; i++) {
		if (out[0] == '0') {
 8003a02:	f10d 0006 	add.w	r0, sp, #6	; 0x6
 8003a06:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003a0a:	2b30      	cmp	r3, #48
 8003a0c:	d108      	bne.n	8003a20 <Printu32d+0x54>
 8003a0e:	4602      	mov	r2, r0
			for (j = 0; j < 10; j++) {
				out[j] = out[j + 1];
 8003a10:	7813      	ldrb	r3, [r2, #0]
 8003a12:	f802 3c01 	strb.w	r3, [r2, #-1]
				if (out[j] == '\0')
 8003a16:	b11b      	cbz	r3, 8003a20 <Printu32d+0x54>
					break;
 8003a18:	3201      	adds	r2, #1
	}
	out[i] = '\0';

	for (i = 0; i < 10; i++) {
		if (out[0] == '0') {
			for (j = 0; j < 10; j++) {
 8003a1a:	ab04      	add	r3, sp, #16
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d1f7      	bne.n	8003a10 <Printu32d+0x44>
		out[i] = (char) ((temp & 0x0F) + 0x30);
		div /= 10;
	}
	out[i] = '\0';

	for (i = 0; i < 10; i++) {
 8003a20:	1c4b      	adds	r3, r1, #1
 8003a22:	b2d9      	uxtb	r1, r3
 8003a24:	290a      	cmp	r1, #10
 8003a26:	d1ee      	bne.n	8003a06 <Printu32d+0x3a>
					break;
			}
		}
	}

	std_puts(out);
 8003a28:	f10d 0005 	add.w	r0, sp, #5	; 0x5
 8003a2c:	f7ff ff24 	bl	8003878 <std_puts>
	return;
}
 8003a30:	b005      	add	sp, #20
 8003a32:	bd00      	pop	{pc}
 8003a34:	3b9aca00 	.word	0x3b9aca00
 8003a38:	cccccccd 	.word	0xcccccccd

08003a3c <PrintString>:
int PrintChar(char c) {
	return std_putchar(c);
}

//##############################################################################
int PrintString(const char* s) {
 8003a3c:	b500      	push	{lr}
 8003a3e:	b081      	sub	sp, #4
	return std_puts(s);
 8003a40:	f7ff ff1a 	bl	8003878 <std_puts>
}
 8003a44:	b001      	add	sp, #4
 8003a46:	bd00      	pop	{pc}

08003a48 <PrintCommStatus>:

	return str;
}
//##############################################################################
void PrintCommStatus(u16 Status) {
	if (Status & DXL_TXFAIL)
 8003a48:	f010 0f04 	tst.w	r0, #4	; 0x4
	}

	return str;
}
//##############################################################################
void PrintCommStatus(u16 Status) {
 8003a4c:	b510      	push	{r4, lr}
 8003a4e:	4604      	mov	r4, r0
	if (Status & DXL_TXFAIL)
 8003a50:	d002      	beq.n	8003a58 <PrintCommStatus+0x10>
		std_puts("\nDXL_TXFAIL: Failed transmit instruction packet!\n");
 8003a52:	4817      	ldr	r0, [pc, #92]	(8003ab0 <PrintCommStatus+0x68>)
 8003a54:	f7ff ff10 	bl	8003878 <std_puts>

	if (Status & DXL_RXFAIL)
 8003a58:	f014 0f08 	tst.w	r4, #8	; 0x8
 8003a5c:	d002      	beq.n	8003a64 <PrintCommStatus+0x1c>
		std_puts("\nDXL_RXFAIL: Failed get status packet from device!\n");
 8003a5e:	4815      	ldr	r0, [pc, #84]	(8003ab4 <PrintCommStatus+0x6c>)
 8003a60:	f7ff ff0a 	bl	8003878 <std_puts>

	if (Status & DXL_TXERROR)
 8003a64:	f014 0f10 	tst.w	r4, #16	; 0x10
 8003a68:	d002      	beq.n	8003a70 <PrintCommStatus+0x28>
		std_puts("\nDXL_TXERROR: Incorrect instruction packet!\n");
 8003a6a:	4813      	ldr	r0, [pc, #76]	(8003ab8 <PrintCommStatus+0x70>)
 8003a6c:	f7ff ff04 	bl	8003878 <std_puts>

	if (Status & DXL_BAD_INST)
 8003a70:	f014 0f20 	tst.w	r4, #32	; 0x20
 8003a74:	d002      	beq.n	8003a7c <PrintCommStatus+0x34>
		std_puts("\nDXL_BAD_INST: Invalid Instruction byte\n");
 8003a76:	4811      	ldr	r0, [pc, #68]	(8003abc <PrintCommStatus+0x74>)
 8003a78:	f7ff fefe 	bl	8003878 <std_puts>

	if (Status & DXL_BAD_ID)
 8003a7c:	f014 0f40 	tst.w	r4, #64	; 0x40
 8003a80:	d002      	beq.n	8003a88 <PrintCommStatus+0x40>
		std_puts(
 8003a82:	480f      	ldr	r0, [pc, #60]	(8003ac0 <PrintCommStatus+0x78>)
 8003a84:	f7ff fef8 	bl	8003878 <std_puts>
				"\nDXL_BAD_ID: ID's not same for instruction and status packets\n");

	if (Status & DXL_RXWAITING)
 8003a88:	f414 7f00 	tst.w	r4, #512	; 0x200
 8003a8c:	d002      	beq.n	8003a94 <PrintCommStatus+0x4c>
		std_puts("\nDXL_RXWAITING: Now receiving status packet!\n");
 8003a8e:	480d      	ldr	r0, [pc, #52]	(8003ac4 <PrintCommStatus+0x7c>)
 8003a90:	f7ff fef2 	bl	8003878 <std_puts>

	if (Status & DXL_RXTIMEOUT)
 8003a94:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8003a98:	d002      	beq.n	8003aa0 <PrintCommStatus+0x58>
		std_puts("\nDXL_RXTIMEOUT: There is no status packet!\n");
 8003a9a:	480b      	ldr	r0, [pc, #44]	(8003ac8 <PrintCommStatus+0x80>)
 8003a9c:	f7ff feec 	bl	8003878 <std_puts>

	if (Status & DXL_RXCHECKSUM)
 8003aa0:	f414 5f80 	tst.w	r4, #4096	; 0x1000
 8003aa4:	d002      	beq.n	8003aac <PrintCommStatus+0x64>
		std_puts("\nDXL_RXCHECKSUM: Incorrect status packet checksum!\n");
 8003aa6:	4809      	ldr	r0, [pc, #36]	(8003acc <PrintCommStatus+0x84>)
 8003aa8:	f7ff fee6 	bl	8003878 <std_puts>

//    else
//        std_puts("\nThis is unknown error code!\n");
}
 8003aac:	bd10      	pop	{r4, pc}
 8003aae:	46c0      	nop			(mov r8, r8)
 8003ab0:	08006e26 	.word	0x08006e26
 8003ab4:	08006e58 	.word	0x08006e58
 8003ab8:	08006e8c 	.word	0x08006e8c
 8003abc:	08006eb9 	.word	0x08006eb9
 8003ac0:	08006ee2 	.word	0x08006ee2
 8003ac4:	08006f21 	.word	0x08006f21
 8003ac8:	08006f4f 	.word	0x08006f4f
 8003acc:	08006f7b 	.word	0x08006f7b

08003ad0 <PrintErrorCode>:

//##############################################################################
void PrintErrorCode(void) {
 8003ad0:	b500      	push	{lr}
	if (dxl_get_rxpacket_error(ERRBIT_VOLTAGE) == 1)
 8003ad2:	2001      	movs	r0, #1
//    else
//        std_puts("\nThis is unknown error code!\n");
}

//##############################################################################
void PrintErrorCode(void) {
 8003ad4:	b081      	sub	sp, #4
	if (dxl_get_rxpacket_error(ERRBIT_VOLTAGE) == 1)
 8003ad6:	f000 f8c5 	bl	8003c64 <dxl_get_rxpacket_error>
 8003ada:	2801      	cmp	r0, #1
 8003adc:	d102      	bne.n	8003ae4 <PrintErrorCode+0x14>
		std_puts("\nInput voltage error!\n");
 8003ade:	481a      	ldr	r0, [pc, #104]	(8003b48 <PrintErrorCode+0x78>)
 8003ae0:	f7ff feca 	bl	8003878 <std_puts>

	if (dxl_get_rxpacket_error(ERRBIT_ANGLE) == 1)
 8003ae4:	2002      	movs	r0, #2
 8003ae6:	f000 f8bd 	bl	8003c64 <dxl_get_rxpacket_error>
 8003aea:	2801      	cmp	r0, #1
 8003aec:	d102      	bne.n	8003af4 <PrintErrorCode+0x24>
		std_puts("\nAngle limit error!\n");
 8003aee:	4817      	ldr	r0, [pc, #92]	(8003b4c <PrintErrorCode+0x7c>)
 8003af0:	f7ff fec2 	bl	8003878 <std_puts>

	if (dxl_get_rxpacket_error(ERRBIT_OVERHEAT) == 1)
 8003af4:	2004      	movs	r0, #4
 8003af6:	f000 f8b5 	bl	8003c64 <dxl_get_rxpacket_error>
 8003afa:	2801      	cmp	r0, #1
 8003afc:	d102      	bne.n	8003b04 <PrintErrorCode+0x34>
		std_puts("\nOverheat error!\n");
 8003afe:	4814      	ldr	r0, [pc, #80]	(8003b50 <PrintErrorCode+0x80>)
 8003b00:	f7ff feba 	bl	8003878 <std_puts>

	if (dxl_get_rxpacket_error(ERRBIT_RANGE) == 1)
 8003b04:	2008      	movs	r0, #8
 8003b06:	f000 f8ad 	bl	8003c64 <dxl_get_rxpacket_error>
 8003b0a:	2801      	cmp	r0, #1
 8003b0c:	d102      	bne.n	8003b14 <PrintErrorCode+0x44>
		std_puts("\nOut of range error!\n");
 8003b0e:	4811      	ldr	r0, [pc, #68]	(8003b54 <PrintErrorCode+0x84>)
 8003b10:	f7ff feb2 	bl	8003878 <std_puts>

	if (dxl_get_rxpacket_error(ERRBIT_CHECKSUM) == 1)
 8003b14:	2010      	movs	r0, #16
 8003b16:	f000 f8a5 	bl	8003c64 <dxl_get_rxpacket_error>
 8003b1a:	2801      	cmp	r0, #1
 8003b1c:	d102      	bne.n	8003b24 <PrintErrorCode+0x54>
		std_puts("\nChecksum error!\n");
 8003b1e:	480e      	ldr	r0, [pc, #56]	(8003b58 <PrintErrorCode+0x88>)
 8003b20:	f7ff feaa 	bl	8003878 <std_puts>

	if (dxl_get_rxpacket_error(ERRBIT_OVERLOAD) == 1)
 8003b24:	2020      	movs	r0, #32
 8003b26:	f000 f89d 	bl	8003c64 <dxl_get_rxpacket_error>
 8003b2a:	2801      	cmp	r0, #1
 8003b2c:	d102      	bne.n	8003b34 <PrintErrorCode+0x64>
		std_puts("\nOverload error!\n");
 8003b2e:	480b      	ldr	r0, [pc, #44]	(8003b5c <PrintErrorCode+0x8c>)
 8003b30:	f7ff fea2 	bl	8003878 <std_puts>

	if (dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
 8003b34:	2040      	movs	r0, #64
 8003b36:	f000 f895 	bl	8003c64 <dxl_get_rxpacket_error>
 8003b3a:	2801      	cmp	r0, #1
 8003b3c:	d102      	bne.n	8003b44 <PrintErrorCode+0x74>
		std_puts("\nInstruction code error!\n");
 8003b3e:	4808      	ldr	r0, [pc, #32]	(8003b60 <PrintErrorCode+0x90>)
 8003b40:	f7ff fe9a 	bl	8003878 <std_puts>
}
 8003b44:	b001      	add	sp, #4
 8003b46:	bd00      	pop	{pc}
 8003b48:	08006faf 	.word	0x08006faf
 8003b4c:	08006fc6 	.word	0x08006fc6
 8003b50:	08006fdb 	.word	0x08006fdb
 8003b54:	08006fed 	.word	0x08006fed
 8003b58:	08007003 	.word	0x08007003
 8003b5c:	08007015 	.word	0x08007015
 8003b60:	08007027 	.word	0x08007027

08003b64 <std_gets>:
//	}
//	return str;
//}

//##############################################################################
char* std_gets(char *str) {
 8003b64:	b570      	push	{r4, r5, r6, lr}
 8003b66:	4605      	mov	r5, r0
 8003b68:	2400      	movs	r4, #0
 8003b6a:	2680      	movs	r6, #128
	u8 c, len = 0;

	while (len < 128) {
		pcu_hal_set_timeout(10);
 8003b6c:	200a      	movs	r0, #10
 8003b6e:	f001 fbe1 	bl	8005334 <pcu_hal_set_timeout>
		while ((pcu_hal_timeout() == 0) && (pcu_get_qstate() == 0))
 8003b72:	f001 f8f7 	bl	8004d64 <pcu_hal_timeout>
 8003b76:	b918      	cbnz	r0, 8003b80 <std_gets+0x1c>
 8003b78:	f001 f93c 	bl	8004df4 <pcu_get_qstate>
 8003b7c:	2800      	cmp	r0, #0
 8003b7e:	d0f8      	beq.n	8003b72 <std_gets+0xe>
			;
		if (pcu_get_qstate() == 0) {
 8003b80:	f001 f938 	bl	8004df4 <pcu_get_qstate>
 8003b84:	b910      	cbnz	r0, 8003b8c <std_gets+0x28>
			if (len == 0) {
 8003b86:	b1bc      	cbz	r4, 8003bb8 <std_gets+0x54>
				return 0; //NULL;
			} else {
				str[len] = '\0';
 8003b88:	5528      	strb	r0, [r5, r4]
 8003b8a:	e016      	b.n	8003bba <std_gets+0x56>
				return str;
			}
		}

		c = pcu_get_queue();
 8003b8c:	f001 f8f4 	bl	8004d78 <pcu_get_queue>
		if ((c == '\n') || (c == '\0')) {
 8003b90:	f1d0 0301 	rsbs	r3, r0, #1	; 0x1
 8003b94:	bf38      	it	cc
 8003b96:	2300      	movcc	r3, #0
 8003b98:	280a      	cmp	r0, #10
 8003b9a:	bf08      	it	eq
 8003b9c:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
				str[len] = '\0';
				return str;
			}
		}

		c = pcu_get_queue();
 8003ba0:	3e01      	subs	r6, #1
		if ((c == '\n') || (c == '\0')) {
 8003ba2:	b11b      	cbz	r3, 8003bac <std_gets+0x48>
			if (len == 0) {
 8003ba4:	b144      	cbz	r4, 8003bb8 <std_gets+0x54>
				return 0; //NULL;
			} else {
				str[len] = '\0';
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	552b      	strb	r3, [r5, r4]
 8003baa:	e006      	b.n	8003bba <std_gets+0x56>
				return str;
			}
		} else
			str[len++] = (s8) c;
 8003bac:	1c63      	adds	r3, r4, #1
 8003bae:	5528      	strb	r0, [r5, r4]
 8003bb0:	b2dc      	uxtb	r4, r3

//##############################################################################
char* std_gets(char *str) {
	u8 c, len = 0;

	while (len < 128) {
 8003bb2:	2e00      	cmp	r6, #0
 8003bb4:	d1da      	bne.n	8003b6c <std_gets+0x8>
 8003bb6:	e000      	b.n	8003bba <std_gets+0x56>
 8003bb8:	2500      	movs	r5, #0
		} else
			str[len++] = (s8) c;
	}

	return str;
}
 8003bba:	4628      	mov	r0, r5
 8003bbc:	bd70      	pop	{r4, r5, r6, pc}
 8003bbe:	46c0      	nop			(mov r8, r8)

08003bc0 <GetString>:
int GetChar(void) {
	return std_getchar();
}

//##############################################################################
char* GetString(char* s) {
 8003bc0:	b500      	push	{lr}
 8003bc2:	b081      	sub	sp, #4
	return std_gets(s);
 8003bc4:	f7ff ffce 	bl	8003b64 <std_gets>
}
 8003bc8:	b001      	add	sp, #4
 8003bca:	bd00      	pop	{pc}

08003bcc <std_getchar>:

	return n;
}

//##############################################################################
int std_getchar(void) {
 8003bcc:	b500      	push	{lr}
	char c;

	pcu_hal_set_timeout(10);
 8003bce:	200a      	movs	r0, #10

	return n;
}

//##############################################################################
int std_getchar(void) {
 8003bd0:	b081      	sub	sp, #4
	char c;

	pcu_hal_set_timeout(10);
 8003bd2:	f001 fbaf 	bl	8005334 <pcu_hal_set_timeout>
	while ((pcu_hal_timeout() == 0) && (pcu_get_qstate() == 0))
 8003bd6:	f001 f8c5 	bl	8004d64 <pcu_hal_timeout>
 8003bda:	b918      	cbnz	r0, 8003be4 <std_getchar+0x18>
 8003bdc:	f001 f90a 	bl	8004df4 <pcu_get_qstate>
 8003be0:	2800      	cmp	r0, #0
 8003be2:	d0f8      	beq.n	8003bd6 <std_getchar+0xa>
		;
	if (pcu_get_qstate() == 0)
 8003be4:	f001 f906 	bl	8004df4 <pcu_get_qstate>
 8003be8:	b908      	cbnz	r0, 8003bee <std_getchar+0x22>
 8003bea:	20ff      	movs	r0, #255
 8003bec:	e004      	b.n	8003bf8 <std_getchar+0x2c>
		return 0xFF;

	c = pcu_get_queue();
 8003bee:	f001 f8c3 	bl	8004d78 <pcu_get_queue>

	if (c == '\r')
 8003bf2:	280d      	cmp	r0, #13
 8003bf4:	bf08      	it	eq
 8003bf6:	200a      	moveq	r0, #10
		c = '\n';

	return c;
}
 8003bf8:	b001      	add	sp, #4
 8003bfa:	bd00      	pop	{pc}

08003bfc <GetChar>:
int PrintString(const char* s) {
	return std_puts(s);
}

//##############################################################################
int GetChar(void) {
 8003bfc:	b500      	push	{lr}
 8003bfe:	b081      	sub	sp, #4
	return std_getchar();
 8003c00:	f7ff ffe4 	bl	8003bcc <std_getchar>
}
 8003c04:	b001      	add	sp, #4
 8003c06:	bd00      	pop	{pc}

08003c08 <pcu_terminate>:

	return 1;
}

//##############################################################################
void pcu_terminate(void) {
 8003c08:	b500      	push	{lr}
 8003c0a:	b081      	sub	sp, #4
	pcu_hal_close();
 8003c0c:	f001 fa1a 	bl	8005044 <pcu_hal_close>
}
 8003c10:	b001      	add	sp, #4
 8003c12:	bd00      	pop	{pc}

08003c14 <pcu_initialize>:
	gbPcuRead++;
	return bTemp;
}

//##############################################################################
u8 pcu_initialize(u32 baudrate) {
 8003c14:	b500      	push	{lr}
 8003c16:	b081      	sub	sp, #4
	if (pcu_hal_open(baudrate) == 0)
 8003c18:	f001 fa86 	bl	8005128 <pcu_hal_open>
 8003c1c:	3800      	subs	r0, #0
 8003c1e:	bf18      	it	ne
 8003c20:	2001      	movne	r0, #1
		return 0;

	return 1;
}
 8003c22:	b001      	add	sp, #4
 8003c24:	bd00      	pop	{pc}
 8003c26:	46c0      	nop			(mov r8, r8)

08003c28 <dxl_get_result>:
#endif
}

//##############################################################################
u16 dxl_get_result(void) {
	return gbCommStatus;
 8003c28:	4b01      	ldr	r3, [pc, #4]	(8003c30 <dxl_get_result+0x8>)
 8003c2a:	8818      	ldrh	r0, [r3, #0]
 8003c2c:	b280      	uxth	r0, r0
}
 8003c2e:	4770      	bx	lr
 8003c30:	20000000 	.word	0x20000000

08003c34 <dxl_set_txpacket_id>:

//##############################################################################
void dxl_set_txpacket_id(u8 id) {
	gbInstructionPacket[DXL_PKT_ID] = id;
 8003c34:	4b01      	ldr	r3, [pc, #4]	(8003c3c <dxl_set_txpacket_id+0x8>)
 8003c36:	7098      	strb	r0, [r3, #2]
}
 8003c38:	4770      	bx	lr
 8003c3a:	46c0      	nop			(mov r8, r8)
 8003c3c:	200004dc 	.word	0x200004dc

08003c40 <dxl_set_txpacket_instruction>:

//##############################################################################
void dxl_set_txpacket_instruction(u8 instruction) {
	gbInstructionPacket[DXL_PKT_INST] = instruction;
 8003c40:	4b01      	ldr	r3, [pc, #4]	(8003c48 <dxl_set_txpacket_instruction+0x8>)
 8003c42:	7118      	strb	r0, [r3, #4]
}
 8003c44:	4770      	bx	lr
 8003c46:	46c0      	nop			(mov r8, r8)
 8003c48:	200004dc 	.word	0x200004dc

08003c4c <dxl_set_txpacket_parameter>:

//##############################################################################
void dxl_set_txpacket_parameter(u8 index, u8 value) {
	gbInstructionPacket[DXL_PKT_PARA + index] = value;
 8003c4c:	4b01      	ldr	r3, [pc, #4]	(8003c54 <dxl_set_txpacket_parameter+0x8>)
 8003c4e:	181b      	adds	r3, r3, r0
 8003c50:	7159      	strb	r1, [r3, #5]
}
 8003c52:	4770      	bx	lr
 8003c54:	200004dc 	.word	0x200004dc

08003c58 <dxl_set_txpacket_length>:

//##############################################################################
void dxl_set_txpacket_length(u8 length) {
	gbInstructionPacket[DXL_PKT_LEN] = length;
 8003c58:	4b01      	ldr	r3, [pc, #4]	(8003c60 <dxl_set_txpacket_length+0x8>)
 8003c5a:	70d8      	strb	r0, [r3, #3]
}
 8003c5c:	4770      	bx	lr
 8003c5e:	46c0      	nop			(mov r8, r8)
 8003c60:	200004dc 	.word	0x200004dc

08003c64 <dxl_get_rxpacket_error>:

//##############################################################################
u8 dxl_get_rxpacket_error(u8 errbit) {
	if ((gbCommStatus & DXL_RXFAIL))
 8003c64:	4b06      	ldr	r3, [pc, #24]	(8003c80 <dxl_get_rxpacket_error+0x1c>)
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	f013 0f08 	tst.w	r3, #8	; 0x8
 8003c6c:	d001      	beq.n	8003c72 <dxl_get_rxpacket_error+0xe>
 8003c6e:	2080      	movs	r0, #128
 8003c70:	e005      	b.n	8003c7e <dxl_get_rxpacket_error+0x1a>
 8003c72:	4b04      	ldr	r3, [pc, #16]	(8003c84 <dxl_get_rxpacket_error+0x20>)
 8003c74:	791b      	ldrb	r3, [r3, #4]
 8003c76:	4218      	tst	r0, r3
 8003c78:	bf0c      	ite	eq
 8003c7a:	2000      	moveq	r0, #0
 8003c7c:	2001      	movne	r0, #1

	if (gbStatusPacket[DXL_PKT_ERR] & errbit)
		return 1;

	return 0;
}
 8003c7e:	4770      	bx	lr
 8003c80:	20000000 	.word	0x20000000
 8003c84:	2000057c 	.word	0x2000057c

08003c88 <dxl_get_rxpacket_length>:

//##############################################################################
u8 dxl_get_rxpacket_length(void) {
	if ((gbCommStatus & DXL_RXFAIL))
 8003c88:	4b04      	ldr	r3, [pc, #16]	(8003c9c <dxl_get_rxpacket_length+0x14>)
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	f013 0f08 	tst.w	r3, #8	; 0x8
 8003c90:	d001      	beq.n	8003c96 <dxl_get_rxpacket_length+0xe>
 8003c92:	2000      	movs	r0, #0
 8003c94:	e001      	b.n	8003c9a <dxl_get_rxpacket_length+0x12>
		return 0;

	return gbStatusPacket[DXL_PKT_LEN];
 8003c96:	4b02      	ldr	r3, [pc, #8]	(8003ca0 <dxl_get_rxpacket_length+0x18>)
 8003c98:	78d8      	ldrb	r0, [r3, #3]
}
 8003c9a:	4770      	bx	lr
 8003c9c:	20000000 	.word	0x20000000
 8003ca0:	2000057c 	.word	0x2000057c

08003ca4 <dxl_get_rxpacket_parameter>:

//##############################################################################
u8 dxl_get_rxpacket_parameter(u8 index) {
	if ((gbCommStatus & DXL_RXFAIL))
 8003ca4:	4b05      	ldr	r3, [pc, #20]	(8003cbc <dxl_get_rxpacket_parameter+0x18>)
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	f013 0f08 	tst.w	r3, #8	; 0x8
 8003cac:	d001      	beq.n	8003cb2 <dxl_get_rxpacket_parameter+0xe>
 8003cae:	2000      	movs	r0, #0
 8003cb0:	e002      	b.n	8003cb8 <dxl_get_rxpacket_parameter+0x14>
		return 0;

	return gbStatusPacket[DXL_PKT_PARA + index];
 8003cb2:	4b03      	ldr	r3, [pc, #12]	(8003cc0 <dxl_get_rxpacket_parameter+0x1c>)
 8003cb4:	181b      	adds	r3, r3, r0
 8003cb6:	7958      	ldrb	r0, [r3, #5]
}
 8003cb8:	4770      	bx	lr
 8003cba:	46c0      	nop			(mov r8, r8)
 8003cbc:	20000000 	.word	0x20000000
 8003cc0:	2000057c 	.word	0x2000057c

08003cc4 <dxl_makeword>:
//##############################################################################
u16 dxl_makeword(u8 lowbyte, u8 highbyte) {
	u16 word;

	word = highbyte;
	word = word << 8;
 8003cc4:	eb00 2001 	add.w	r0, r0, r1, lsl #8
 8003cc8:	b280      	uxth	r0, r0
	word = word + lowbyte;
	return word;
}
 8003cca:	4770      	bx	lr

08003ccc <dxl_get_lowbyte>:

//##############################################################################
u8 dxl_get_lowbyte(u16 word) {
 8003ccc:	b2c0      	uxtb	r0, r0
	u16 temp = (word & 0x00FF);
	return (u8) temp;
}
 8003cce:	4770      	bx	lr

08003cd0 <dxl_get_highbyte>:

//##############################################################################
u8 dxl_get_highbyte(u16 word) {
 8003cd0:	0a00      	lsrs	r0, r0, #8
	u16 temp = ((word & 0xFF00) >> 8);
	return (u8) temp;
}
 8003cd2:	4770      	bx	lr

08003cd4 <dxl_clear_statpkt>:
	dxl_txrx_packet();
}

//##############################################################################
void dxl_clear_statpkt(void) {
	u8 i, max = gbStatusPacket[DXL_PKT_LEN];
 8003cd4:	4a0c      	ldr	r2, [pc, #48]	(8003d08 <dxl_clear_statpkt+0x34>)
 8003cd6:	78d1      	ldrb	r1, [r2, #3]
	if ((max > 0) && (max < DXL_MAXNUM_RXPARAM)) {
 8003cd8:	1e4b      	subs	r3, r1, #1
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b4e      	cmp	r3, #78
 8003cde:	d80a      	bhi.n	8003cf6 <dxl_clear_statpkt+0x22>
		for (i = 0; i < (max + 4); i++)
			gbStatusPacket[i] = 0;
 8003ce0:	4610      	mov	r0, r2
}

//##############################################################################
void dxl_clear_statpkt(void) {
	u8 i, max = gbStatusPacket[DXL_PKT_LEN];
	if ((max > 0) && (max < DXL_MAXNUM_RXPARAM)) {
 8003ce2:	2300      	movs	r3, #0
		for (i = 0; i < (max + 4); i++)
 8003ce4:	3103      	adds	r1, #3
			gbStatusPacket[i] = 0;
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	e002      	b.n	8003cf0 <dxl_clear_statpkt+0x1c>
 8003cea:	54c2      	strb	r2, [r0, r3]

//##############################################################################
void dxl_clear_statpkt(void) {
	u8 i, max = gbStatusPacket[DXL_PKT_LEN];
	if ((max > 0) && (max < DXL_MAXNUM_RXPARAM)) {
		for (i = 0; i < (max + 4); i++)
 8003cec:	3301      	adds	r3, #1
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	4299      	cmp	r1, r3
 8003cf2:	dafa      	bge.n	8003cea <dxl_clear_statpkt+0x16>
 8003cf4:	e006      	b.n	8003d04 <dxl_clear_statpkt+0x30>
			gbStatusPacket[i] = 0;
	} else {
		for (i = 0; i < 6; i++)
			gbStatusPacket[i] = 0;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	7013      	strb	r3, [r2, #0]
 8003cfa:	7053      	strb	r3, [r2, #1]
 8003cfc:	7093      	strb	r3, [r2, #2]
 8003cfe:	70d3      	strb	r3, [r2, #3]
 8003d00:	7113      	strb	r3, [r2, #4]
 8003d02:	7153      	strb	r3, [r2, #5]
	}
}
 8003d04:	4770      	bx	lr
 8003d06:	46c0      	nop			(mov r8, r8)
 8003d08:	2000057c 	.word	0x2000057c

08003d0c <dxl_rx_packet>:

	gbCommStatus = DXL_TXSUCCESS;
}

//##############################################################################
void dxl_rx_packet(void) {
 8003d0c:	b530      	push	{r4, r5, lr}
	u8 i, j, nRead;
	u8 checksum = 0;

	if (giBusUsing == 0)
 8003d0e:	495a      	ldr	r1, [pc, #360]	(8003e78 <dxl_rx_packet+0x16c>)

	gbCommStatus = DXL_TXSUCCESS;
}

//##############################################################################
void dxl_rx_packet(void) {
 8003d10:	b081      	sub	sp, #4
	u8 i, j, nRead;
	u8 checksum = 0;

	if (giBusUsing == 0)
 8003d12:	780b      	ldrb	r3, [r1, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 80ad 	beq.w	8003e74 <dxl_rx_packet+0x168>
		return;

	giBusUsing = 1;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	700b      	strb	r3, [r1, #0]

	if (gbInstructionPacket[DXL_PKT_ID] == BROADCAST_ID) {
 8003d1e:	4b57      	ldr	r3, [pc, #348]	(8003e7c <dxl_rx_packet+0x170>)
 8003d20:	4a57      	ldr	r2, [pc, #348]	(8003e80 <dxl_rx_packet+0x174>)
 8003d22:	789b      	ldrb	r3, [r3, #2]
 8003d24:	2bfe      	cmp	r3, #254
 8003d26:	f000 80a0 	beq.w	8003e6a <dxl_rx_packet+0x15e>
		gbCommStatus = DXL_RXSUCCESS;
		giBusUsing = 0;
		return;
	}

	if (gbCommStatus & DXL_TXSUCCESS) {
 8003d2a:	8813      	ldrh	r3, [r2, #0]
 8003d2c:	f013 0f01 	tst.w	r3, #1	; 0x1
 8003d30:	d005      	beq.n	8003d3e <dxl_rx_packet+0x32>
		gbRxGetLength = 0;
 8003d32:	4b54      	ldr	r3, [pc, #336]	(8003e84 <dxl_rx_packet+0x178>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	701a      	strb	r2, [r3, #0]
		gbRxPacketLength = 6;
 8003d38:	4b53      	ldr	r3, [pc, #332]	(8003e88 <dxl_rx_packet+0x17c>)
 8003d3a:	2206      	movs	r2, #6
 8003d3c:	701a      	strb	r2, [r3, #0]
	}

	nRead = dxl_hal_rx((u8*) &gbStatusPacket[gbRxGetLength],
 8003d3e:	4d51      	ldr	r5, [pc, #324]	(8003e84 <dxl_rx_packet+0x178>)
 8003d40:	4c51      	ldr	r4, [pc, #324]	(8003e88 <dxl_rx_packet+0x17c>)
 8003d42:	782b      	ldrb	r3, [r5, #0]
 8003d44:	7821      	ldrb	r1, [r4, #0]
 8003d46:	4851      	ldr	r0, [pc, #324]	(8003e8c <dxl_rx_packet+0x180>)
 8003d48:	1ac9      	subs	r1, r1, r3
 8003d4a:	18c0      	adds	r0, r0, r3
 8003d4c:	b2c9      	uxtb	r1, r1
 8003d4e:	f001 f8b5 	bl	8004ebc <dxl_hal_rx>
			gbRxPacketLength - gbRxGetLength);

	gbRxGetLength += nRead;
 8003d52:	782b      	ldrb	r3, [r5, #0]
 8003d54:	18c0      	adds	r0, r0, r3
	if (gbRxGetLength < gbRxPacketLength) {
 8003d56:	7823      	ldrb	r3, [r4, #0]
	}

	nRead = dxl_hal_rx((u8*) &gbStatusPacket[gbRxGetLength],
			gbRxPacketLength - gbRxGetLength);

	gbRxGetLength += nRead;
 8003d58:	b2c0      	uxtb	r0, r0
	if (gbRxGetLength < gbRxPacketLength) {
 8003d5a:	4283      	cmp	r3, r0
	}

	nRead = dxl_hal_rx((u8*) &gbStatusPacket[gbRxGetLength],
			gbRxPacketLength - gbRxGetLength);

	gbRxGetLength += nRead;
 8003d5c:	7028      	strb	r0, [r5, #0]
	if (gbRxGetLength < gbRxPacketLength) {
 8003d5e:	d903      	bls.n	8003d68 <dxl_rx_packet+0x5c>
		if (dxl_hal_timeout() == 1) {
 8003d60:	f001 f8da 	bl	8004f18 <dxl_hal_timeout>
 8003d64:	2801      	cmp	r0, #1
 8003d66:	d008      	beq.n	8003d7a <dxl_rx_packet+0x6e>
			return;
		}
	}

	// Find packet header
	for (i = 0; i < (gbRxGetLength - 1); i++) {
 8003d68:	4b46      	ldr	r3, [pc, #280]	(8003e84 <dxl_rx_packet+0x178>)
		if ((gbStatusPacket[i] == 0xFF) && (gbStatusPacket[i + 1] == 0xFF)) {
			break;
		} else if ((i == gbRxGetLength - 2)
 8003d6a:	2000      	movs	r0, #0
			return;
		}
	}

	// Find packet header
	for (i = 0; i < (gbRxGetLength - 1); i++) {
 8003d6c:	781a      	ldrb	r2, [r3, #0]
		if ((gbStatusPacket[i] == 0xFF) && (gbStatusPacket[i + 1] == 0xFF)) {
 8003d6e:	4947      	ldr	r1, [pc, #284]	(8003e8c <dxl_rx_packet+0x180>)
			return;
		}
	}

	// Find packet header
	for (i = 0; i < (gbRxGetLength - 1); i++) {
 8003d70:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
		if ((gbStatusPacket[i] == 0xFF) && (gbStatusPacket[i + 1] == 0xFF)) {
			break;
		} else if ((i == gbRxGetLength - 2)
 8003d74:	f1a2 0e02 	sub.w	lr, r2, #2	; 0x2
 8003d78:	e019      	b.n	8003dae <dxl_rx_packet+0xa2>
			gbRxPacketLength - gbRxGetLength);

	gbRxGetLength += nRead;
	if (gbRxGetLength < gbRxPacketLength) {
		if (dxl_hal_timeout() == 1) {
			if (gbRxGetLength == 0)
 8003d7a:	782b      	ldrb	r3, [r5, #0]
 8003d7c:	4a40      	ldr	r2, [pc, #256]	(8003e80 <dxl_rx_packet+0x174>)
 8003d7e:	b913      	cbnz	r3, 8003d86 <dxl_rx_packet+0x7a>
				gbCommStatus = DXL_RXTIMEOUT;
 8003d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d84:	e001      	b.n	8003d8a <dxl_rx_packet+0x7e>
			else
				gbCommStatus = DXL_RXLENGTH;
 8003d86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d8a:	8013      	strh	r3, [r2, #0]
 8003d8c:	e035      	b.n	8003dfa <dxl_rx_packet+0xee>
		}
	}

	// Find packet header
	for (i = 0; i < (gbRxGetLength - 1); i++) {
		if ((gbStatusPacket[i] == 0xFF) && (gbStatusPacket[i + 1] == 0xFF)) {
 8003d8e:	5c0b      	ldrb	r3, [r1, r0]
 8003d90:	2bff      	cmp	r3, #255
 8003d92:	d104      	bne.n	8003d9e <dxl_rx_packet+0x92>
 8003d94:	eb01 0300 	add.w	r3, r1, r0
 8003d98:	785b      	ldrb	r3, [r3, #1]
 8003d9a:	2bff      	cmp	r3, #255
 8003d9c:	d009      	beq.n	8003db2 <dxl_rx_packet+0xa6>
			break;
		} else if ((i == gbRxGetLength - 2)
 8003d9e:	4570      	cmp	r0, lr
 8003da0:	d103      	bne.n	8003daa <dxl_rx_packet+0x9e>
 8003da2:	f811 300c 	ldrb.w	r3, [r1, ip]
 8003da6:	2bff      	cmp	r3, #255
 8003da8:	d003      	beq.n	8003db2 <dxl_rx_packet+0xa6>
			return;
		}
	}

	// Find packet header
	for (i = 0; i < (gbRxGetLength - 1); i++) {
 8003daa:	1c43      	adds	r3, r0, #1
 8003dac:	b2d8      	uxtb	r0, r3
 8003dae:	4560      	cmp	r0, ip
 8003db0:	dbed      	blt.n	8003d8e <dxl_rx_packet+0x82>
		} else if ((i == gbRxGetLength - 2)
				&& (gbStatusPacket[gbRxGetLength - 1] == 0xFF)) {
			break;
		}
	}
	if (i > 0) {
 8003db2:	b188      	cbz	r0, 8003dd8 <dxl_rx_packet+0xcc>
 8003db4:	2100      	movs	r1, #0
		for (j = 0; j < (gbRxGetLength - i); j++)
 8003db6:	ebc0 0c02 	rsb	ip, r0, r2
			gbStatusPacket[j] = gbStatusPacket[j + i];
 8003dba:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 8003e8c <dxl_rx_packet+0x180>
 8003dbe:	e006      	b.n	8003dce <dxl_rx_packet+0xc2>
 8003dc0:	eb0e 0301 	add.w	r3, lr, r1
 8003dc4:	5c1b      	ldrb	r3, [r3, r0]
 8003dc6:	f80e 3001 	strb.w	r3, [lr, r1]
				&& (gbStatusPacket[gbRxGetLength - 1] == 0xFF)) {
			break;
		}
	}
	if (i > 0) {
		for (j = 0; j < (gbRxGetLength - i); j++)
 8003dca:	1c4b      	adds	r3, r1, #1
 8003dcc:	b2d9      	uxtb	r1, r3
 8003dce:	4561      	cmp	r1, ip
 8003dd0:	dbf6      	blt.n	8003dc0 <dxl_rx_packet+0xb4>
			gbStatusPacket[j] = gbStatusPacket[j + i];

		gbRxGetLength -= i;
 8003dd2:	4b2c      	ldr	r3, [pc, #176]	(8003e84 <dxl_rx_packet+0x178>)
 8003dd4:	1a12      	subs	r2, r2, r0
 8003dd6:	701a      	strb	r2, [r3, #0]
	}

	// Check if received full packet
	if (gbRxGetLength < gbRxPacketLength) {
 8003dd8:	4d2a      	ldr	r5, [pc, #168]	(8003e84 <dxl_rx_packet+0x178>)
 8003dda:	4c2b      	ldr	r4, [pc, #172]	(8003e88 <dxl_rx_packet+0x17c>)
 8003ddc:	f895 c000 	ldrb.w	ip, [r5]
 8003de0:	7823      	ldrb	r3, [r4, #0]
 8003de2:	4563      	cmp	r3, ip
 8003de4:	d826      	bhi.n	8003e34 <dxl_rx_packet+0x128>
		gbCommStatus = DXL_RXWAITING;
		return;
	}

	// Check id pairing
	if (gbInstructionPacket[DXL_PKT_ID] != gbStatusPacket[DXL_PKT_ID]) {
 8003de6:	4b25      	ldr	r3, [pc, #148]	(8003e7c <dxl_rx_packet+0x170>)
 8003de8:	4828      	ldr	r0, [pc, #160]	(8003e8c <dxl_rx_packet+0x180>)
 8003dea:	789a      	ldrb	r2, [r3, #2]
 8003dec:	7883      	ldrb	r3, [r0, #2]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d007      	beq.n	8003e02 <dxl_rx_packet+0xf6>
		gbCommStatus = DXL_BAD_ID | DXL_RXFAIL;
 8003df2:	4b23      	ldr	r3, [pc, #140]	(8003e80 <dxl_rx_packet+0x174>)
 8003df4:	f04f 0248 	mov.w	r2, #72	; 0x48
 8003df8:	801a      	strh	r2, [r3, #0]
		giBusUsing = 0;
 8003dfa:	4b1f      	ldr	r3, [pc, #124]	(8003e78 <dxl_rx_packet+0x16c>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	701a      	strb	r2, [r3, #0]
 8003e00:	e038      	b.n	8003e74 <dxl_rx_packet+0x168>
		return;
	}

	gbRxPacketLength = gbStatusPacket[DXL_PKT_LEN] + 4;
 8003e02:	78c3      	ldrb	r3, [r0, #3]
 8003e04:	3304      	adds	r3, #4
 8003e06:	b2d9      	uxtb	r1, r3
	if (gbRxGetLength < gbRxPacketLength) {
 8003e08:	458c      	cmp	ip, r1
		gbCommStatus = DXL_BAD_ID | DXL_RXFAIL;
		giBusUsing = 0;
		return;
	}

	gbRxPacketLength = gbStatusPacket[DXL_PKT_LEN] + 4;
 8003e0a:	7021      	strb	r1, [r4, #0]
	if (gbRxGetLength < gbRxPacketLength) {
 8003e0c:	d20c      	bcs.n	8003e28 <dxl_rx_packet+0x11c>
		nRead = dxl_hal_rx((u8*) &gbStatusPacket[gbRxGetLength],
 8003e0e:	ebcc 0101 	rsb	r1, ip, r1
 8003e12:	4460      	add	r0, ip
 8003e14:	b2c9      	uxtb	r1, r1
 8003e16:	f001 f851 	bl	8004ebc <dxl_hal_rx>
				gbRxPacketLength - gbRxGetLength);
		gbRxGetLength += nRead;
 8003e1a:	782b      	ldrb	r3, [r5, #0]
 8003e1c:	18c0      	adds	r0, r0, r3
		if (gbRxGetLength < gbRxPacketLength) {
 8003e1e:	7823      	ldrb	r3, [r4, #0]

	gbRxPacketLength = gbStatusPacket[DXL_PKT_LEN] + 4;
	if (gbRxGetLength < gbRxPacketLength) {
		nRead = dxl_hal_rx((u8*) &gbStatusPacket[gbRxGetLength],
				gbRxPacketLength - gbRxGetLength);
		gbRxGetLength += nRead;
 8003e20:	b2c0      	uxtb	r0, r0
		if (gbRxGetLength < gbRxPacketLength) {
 8003e22:	4283      	cmp	r3, r0

	gbRxPacketLength = gbStatusPacket[DXL_PKT_LEN] + 4;
	if (gbRxGetLength < gbRxPacketLength) {
		nRead = dxl_hal_rx((u8*) &gbStatusPacket[gbRxGetLength],
				gbRxPacketLength - gbRxGetLength);
		gbRxGetLength += nRead;
 8003e24:	7028      	strb	r0, [r5, #0]
		if (gbRxGetLength < gbRxPacketLength) {
 8003e26:	d805      	bhi.n	8003e34 <dxl_rx_packet+0x128>
			return;
		}
	}

	// Check checksum
	for (i = 0; i < (gbStatusPacket[DXL_PKT_LEN] + 1); i++)
 8003e28:	4b18      	ldr	r3, [pc, #96]	(8003e8c <dxl_rx_packet+0x180>)
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	78d8      	ldrb	r0, [r3, #3]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	469c      	mov	ip, r3
 8003e32:	e00b      	b.n	8003e4c <dxl_rx_packet+0x140>
	if (gbRxGetLength < gbRxPacketLength) {
		nRead = dxl_hal_rx((u8*) &gbStatusPacket[gbRxGetLength],
				gbRxPacketLength - gbRxGetLength);
		gbRxGetLength += nRead;
		if (gbRxGetLength < gbRxPacketLength) {
			gbCommStatus = DXL_RXWAITING;
 8003e34:	4b12      	ldr	r3, [pc, #72]	(8003e80 <dxl_rx_packet+0x174>)
 8003e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e3a:	801a      	strh	r2, [r3, #0]
 8003e3c:	e01a      	b.n	8003e74 <dxl_rx_packet+0x168>
		}
	}

	// Check checksum
	for (i = 0; i < (gbStatusPacket[DXL_PKT_LEN] + 1); i++)
		checksum += gbStatusPacket[i + 2];
 8003e3e:	eb0c 0301 	add.w	r3, ip, r1
 8003e42:	789b      	ldrb	r3, [r3, #2]
 8003e44:	4413      	add	r3, r2
 8003e46:	b2da      	uxtb	r2, r3
			return;
		}
	}

	// Check checksum
	for (i = 0; i < (gbStatusPacket[DXL_PKT_LEN] + 1); i++)
 8003e48:	1c4b      	adds	r3, r1, #1
 8003e4a:	b2d9      	uxtb	r1, r3
 8003e4c:	4288      	cmp	r0, r1
 8003e4e:	daf6      	bge.n	8003e3e <dxl_rx_packet+0x132>
		checksum += gbStatusPacket[i + 2];
	checksum = ~checksum;

	if (gbStatusPacket[gbStatusPacket[DXL_PKT_LEN] + 3] != checksum) {
 8003e50:	4b0e      	ldr	r3, [pc, #56]	(8003e8c <dxl_rx_packet+0x180>)
 8003e52:	ea6f 0202 	mvn.w	r2, r2
 8003e56:	181b      	adds	r3, r3, r0
 8003e58:	78db      	ldrb	r3, [r3, #3]
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	4906      	ldr	r1, [pc, #24]	(8003e78 <dxl_rx_packet+0x16c>)
 8003e60:	4a07      	ldr	r2, [pc, #28]	(8003e80 <dxl_rx_packet+0x174>)
		gbCommStatus = DXL_RXCHECKSUM | DXL_RXFAIL;
 8003e62:	bf18      	it	ne
 8003e64:	f241 0308 	movwne	r3, #4104	; 0x1008
	// Check checksum
	for (i = 0; i < (gbStatusPacket[DXL_PKT_LEN] + 1); i++)
		checksum += gbStatusPacket[i + 2];
	checksum = ~checksum;

	if (gbStatusPacket[gbStatusPacket[DXL_PKT_LEN] + 3] != checksum) {
 8003e68:	d101      	bne.n	8003e6e <dxl_rx_packet+0x162>
		gbCommStatus = DXL_RXCHECKSUM | DXL_RXFAIL;
		giBusUsing = 0;
		return;
	}

	gbCommStatus = DXL_RXSUCCESS;
 8003e6a:	f04f 0302 	mov.w	r3, #2	; 0x2
 8003e6e:	8013      	strh	r3, [r2, #0]
	giBusUsing = 0;
 8003e70:	2300      	movs	r3, #0
 8003e72:	700b      	strb	r3, [r1, #0]
}
 8003e74:	b001      	add	sp, #4
 8003e76:	bd30      	pop	{r4, r5, pc}
 8003e78:	200005ce 	.word	0x200005ce
 8003e7c:	200004dc 	.word	0x200004dc
 8003e80:	20000000 	.word	0x20000000
 8003e84:	200005cd 	.word	0x200005cd
 8003e88:	200005cc 	.word	0x200005cc
 8003e8c:	2000057c 	.word	0x2000057c

08003e90 <dxl_tx_packet>:
void dxl_terminate(void) {
	dxl_hal_close();
}

//##############################################################################
void dxl_tx_packet(void) {
 8003e90:	b530      	push	{r4, r5, lr}
	u8 i;
	u8 TxNumByte, RealTxNumByte;
	u8 checksum = 0;

	if (giBusUsing == 1)
 8003e92:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 8003f80 <dxl_tx_packet+0xf0>
void dxl_terminate(void) {
	dxl_hal_close();
}

//##############################################################################
void dxl_tx_packet(void) {
 8003e96:	b081      	sub	sp, #4
	u8 i;
	u8 TxNumByte, RealTxNumByte;
	u8 checksum = 0;

	if (giBusUsing == 1)
 8003e98:	f89c 3000 	ldrb.w	r3, [ip]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d06c      	beq.n	8003f7a <dxl_tx_packet+0xea>
		return;

	giBusUsing = 1;

	gbCommStatus = 0;
 8003ea0:	4838      	ldr	r0, [pc, #224]	(8003f84 <dxl_tx_packet+0xf4>)
	u8 checksum = 0;

	if (giBusUsing == 1)
		return;

	giBusUsing = 1;
 8003ea2:	2301      	movs	r3, #1

	gbCommStatus = 0;
 8003ea4:	f04f 0200 	mov.w	r2, #0	; 0x0
	u8 checksum = 0;

	if (giBusUsing == 1)
		return;

	giBusUsing = 1;
 8003ea8:	f88c 3000 	strb.w	r3, [ip]

	gbCommStatus = 0;
 8003eac:	8002      	strh	r2, [r0, #0]

	if (gbInstructionPacket[DXL_PKT_LEN] > (DXL_MAXNUM_TXPARAM + 2)) {
 8003eae:	4a36      	ldr	r2, [pc, #216]	(8003f88 <dxl_tx_packet+0xf8>)
	if (giBusUsing == 1)
		return;

	giBusUsing = 1;

	gbCommStatus = 0;
 8003eb0:	2400      	movs	r4, #0

	if (gbInstructionPacket[DXL_PKT_LEN] > (DXL_MAXNUM_TXPARAM + 2)) {
 8003eb2:	78d3      	ldrb	r3, [r2, #3]
 8003eb4:	2ba2      	cmp	r3, #162
 8003eb6:	d904      	bls.n	8003ec2 <dxl_tx_packet+0x32>
		gbCommStatus |= DXL_TXERROR;
 8003eb8:	8803      	ldrh	r3, [r0, #0]
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 8003ec0:	e012      	b.n	8003ee8 <dxl_tx_packet+0x58>
		giBusUsing = 0;
		return;
	}

	if ((gbInstructionPacket[DXL_PKT_INST] != INST_PING)
 8003ec2:	7911      	ldrb	r1, [r2, #4]
 8003ec4:	1e4a      	subs	r2, r1, #1
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	f1b1 0383 	subs.w	r3, r1, #131	; 0x83
 8003ecc:	bf18      	it	ne
 8003ece:	2301      	movne	r3, #1
 8003ed0:	2a05      	cmp	r2, #5
 8003ed2:	bf94      	ite	ls
 8003ed4:	2300      	movls	r3, #0
 8003ed6:	f003 0301 	andhi.w	r3, r3, #1	; 0x1
 8003eda:	b14b      	cbz	r3, 8003ef0 <dxl_tx_packet+0x60>
 8003edc:	290e      	cmp	r1, #14
 8003ede:	d007      	beq.n	8003ef0 <dxl_tx_packet+0x60>
			&& (gbInstructionPacket[DXL_PKT_INST] != INST_REG_WRITE)
			&& (gbInstructionPacket[DXL_PKT_INST] != INST_ACTION)
			&& (gbInstructionPacket[DXL_PKT_INST] != INST_RESET)
			&& (gbInstructionPacket[DXL_PKT_INST] != INST_SYNC_WRITE)
			&& (gbInstructionPacket[DXL_PKT_INST] != INST_CAP_REGION)) {
		gbCommStatus |= DXL_BAD_INST;
 8003ee0:	8803      	ldrh	r3, [r0, #0]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	f043 0320 	orr.w	r3, r3, #32	; 0x20
 8003ee8:	8003      	strh	r3, [r0, #0]
		giBusUsing = 0;
 8003eea:	f88c 4000 	strb.w	r4, [ip]
 8003eee:	e044      	b.n	8003f7a <dxl_tx_packet+0xea>
		return;
	}

	gbInstructionPacket[0] = 0xFF;
 8003ef0:	4a25      	ldr	r2, [pc, #148]	(8003f88 <dxl_tx_packet+0xf8>)
 8003ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ef6:	7013      	strb	r3, [r2, #0]
	gbInstructionPacket[1] = 0xFF;
 8003ef8:	7053      	strb	r3, [r2, #1]
	for (i = 0; i < (gbInstructionPacket[DXL_PKT_LEN] + 1); i++)
 8003efa:	f892 c003 	ldrb.w	ip, [r2, #3]
 8003efe:	2100      	movs	r1, #0
 8003f00:	2000      	movs	r0, #0
 8003f02:	e006      	b.n	8003f12 <dxl_tx_packet+0x82>
		checksum += gbInstructionPacket[i + 2];
 8003f04:	eb02 0301 	add.w	r3, r2, r1
 8003f08:	789b      	ldrb	r3, [r3, #2]
 8003f0a:	4403      	add	r3, r0
 8003f0c:	b2d8      	uxtb	r0, r3
		return;
	}

	gbInstructionPacket[0] = 0xFF;
	gbInstructionPacket[1] = 0xFF;
	for (i = 0; i < (gbInstructionPacket[DXL_PKT_LEN] + 1); i++)
 8003f0e:	1c4b      	adds	r3, r1, #1
 8003f10:	b2d9      	uxtb	r1, r3
 8003f12:	458c      	cmp	ip, r1
 8003f14:	daf6      	bge.n	8003f04 <dxl_tx_packet+0x74>
		checksum += gbInstructionPacket[i + 2];
	gbInstructionPacket[gbInstructionPacket[DXL_PKT_LEN] + 3] = ~checksum;
 8003f16:	4b1c      	ldr	r3, [pc, #112]	(8003f88 <dxl_tx_packet+0xf8>)
 8003f18:	ea6f 0200 	mvn.w	r2, r0
 8003f1c:	4463      	add	r3, ip
 8003f1e:	70da      	strb	r2, [r3, #3]

	if (gbCommStatus
 8003f20:	4b18      	ldr	r3, [pc, #96]	(8003f84 <dxl_tx_packet+0xf4>)
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	f423 7364 	bic.w	r3, r3, #912	; 0x390
 8003f28:	f023 0307 	bic.w	r3, r3, #7	; 0x7
 8003f2c:	04db      	lsls	r3, r3, #19
 8003f2e:	0cdb      	lsrs	r3, r3, #19
 8003f30:	b10b      	cbz	r3, 8003f36 <dxl_tx_packet+0xa6>
			& (DXL_RXFAIL | DXL_RXTIMEOUT | DXL_RXCHECKSUM | DXL_RXLENGTH
					| DXL_BAD_INST | DXL_BAD_ID)) {
		dxl_hal_clear();
 8003f32:	f000 ffad 	bl	8004e90 <dxl_hal_clear>
	}

	TxNumByte = gbInstructionPacket[DXL_PKT_LEN] + 4;
 8003f36:	4d14      	ldr	r5, [pc, #80]	(8003f88 <dxl_tx_packet+0xf8>)
 8003f38:	78ec      	ldrb	r4, [r5, #3]
	RealTxNumByte = dxl_hal_tx((u8*) gbInstructionPacket, TxNumByte);
 8003f3a:	4628      	mov	r0, r5
			& (DXL_RXFAIL | DXL_RXTIMEOUT | DXL_RXCHECKSUM | DXL_RXLENGTH
					| DXL_BAD_INST | DXL_BAD_ID)) {
		dxl_hal_clear();
	}

	TxNumByte = gbInstructionPacket[DXL_PKT_LEN] + 4;
 8003f3c:	3404      	adds	r4, #4
 8003f3e:	b2e4      	uxtb	r4, r4
	RealTxNumByte = dxl_hal_tx((u8*) gbInstructionPacket, TxNumByte);
 8003f40:	4621      	mov	r1, r4
 8003f42:	f001 f839 	bl	8004fb8 <dxl_hal_tx>

	if (TxNumByte != RealTxNumByte) {
 8003f46:	4284      	cmp	r4, r0
 8003f48:	d009      	beq.n	8003f5e <dxl_tx_packet+0xce>
		gbCommStatus |= DXL_TXFAIL;
 8003f4a:	4a0e      	ldr	r2, [pc, #56]	(8003f84 <dxl_tx_packet+0xf4>)
 8003f4c:	8813      	ldrh	r3, [r2, #0]
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 8003f54:	8013      	strh	r3, [r2, #0]
		giBusUsing = 0;
 8003f56:	4b0a      	ldr	r3, [pc, #40]	(8003f80 <dxl_tx_packet+0xf0>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	701a      	strb	r2, [r3, #0]
 8003f5c:	e00d      	b.n	8003f7a <dxl_tx_packet+0xea>
		return;
	}

	if (gbInstructionPacket[DXL_PKT_INST] == INST_READ_DATA)
 8003f5e:	792b      	ldrb	r3, [r5, #4]
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d103      	bne.n	8003f6c <dxl_tx_packet+0xdc>
		dxl_hal_set_timeout(gbInstructionPacket[DXL_PKT_PARA + 1] + 6);
 8003f64:	79a8      	ldrb	r0, [r5, #6]
 8003f66:	3006      	adds	r0, #6
 8003f68:	b2c0      	uxtb	r0, r0
 8003f6a:	e000      	b.n	8003f6e <dxl_tx_packet+0xde>
	else
		dxl_hal_set_timeout(6);
 8003f6c:	2006      	movs	r0, #6
 8003f6e:	f001 f819 	bl	8004fa4 <dxl_hal_set_timeout>

	gbCommStatus = DXL_TXSUCCESS;
 8003f72:	4b04      	ldr	r3, [pc, #16]	(8003f84 <dxl_tx_packet+0xf4>)
 8003f74:	f04f 0201 	mov.w	r2, #1	; 0x1
 8003f78:	801a      	strh	r2, [r3, #0]
}
 8003f7a:	b001      	add	sp, #4
 8003f7c:	bd30      	pop	{r4, r5, pc}
 8003f7e:	46c0      	nop			(mov r8, r8)
 8003f80:	200005ce 	.word	0x200005ce
 8003f84:	20000000 	.word	0x20000000
 8003f88:	200004dc 	.word	0x200004dc

08003f8c <dxl_txrx_packet>:
	gbCommStatus = DXL_RXSUCCESS;
	giBusUsing = 0;
}

//##############################################################################
void dxl_txrx_packet(void) {
 8003f8c:	b510      	push	{r4, lr}

	dxl_tx_packet();
 8003f8e:	f7ff ff7f 	bl	8003e90 <dxl_tx_packet>

	if (!(gbCommStatus & DXL_TXSUCCESS))
 8003f92:	4b14      	ldr	r3, [pc, #80]	(8003fe4 <dxl_txrx_packet+0x58>)
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	f013 0f01 	tst.w	r3, #1	; 0x1
 8003f9a:	d021      	beq.n	8003fe0 <dxl_txrx_packet+0x54>
	dxl_txrx_packet();
}

//##############################################################################
void dxl_clear_statpkt(void) {
	u8 i, max = gbStatusPacket[DXL_PKT_LEN];
 8003f9c:	4a12      	ldr	r2, [pc, #72]	(8003fe8 <dxl_txrx_packet+0x5c>)
 8003f9e:	78d1      	ldrb	r1, [r2, #3]
	if ((max > 0) && (max < DXL_MAXNUM_RXPARAM)) {
 8003fa0:	1e4b      	subs	r3, r1, #1
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b4e      	cmp	r3, #78
 8003fa6:	d80a      	bhi.n	8003fbe <dxl_txrx_packet+0x32>
		for (i = 0; i < (max + 4); i++)
			gbStatusPacket[i] = 0;
 8003fa8:	4610      	mov	r0, r2
}

//##############################################################################
void dxl_clear_statpkt(void) {
	u8 i, max = gbStatusPacket[DXL_PKT_LEN];
	if ((max > 0) && (max < DXL_MAXNUM_RXPARAM)) {
 8003faa:	2300      	movs	r3, #0
		for (i = 0; i < (max + 4); i++)
 8003fac:	3103      	adds	r1, #3
			gbStatusPacket[i] = 0;
 8003fae:	2200      	movs	r2, #0
 8003fb0:	e002      	b.n	8003fb8 <dxl_txrx_packet+0x2c>
 8003fb2:	54c2      	strb	r2, [r0, r3]

//##############################################################################
void dxl_clear_statpkt(void) {
	u8 i, max = gbStatusPacket[DXL_PKT_LEN];
	if ((max > 0) && (max < DXL_MAXNUM_RXPARAM)) {
		for (i = 0; i < (max + 4); i++)
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	4299      	cmp	r1, r3
 8003fba:	dafa      	bge.n	8003fb2 <dxl_txrx_packet+0x26>
 8003fbc:	e006      	b.n	8003fcc <dxl_txrx_packet+0x40>
			gbStatusPacket[i] = 0;
	} else {
		for (i = 0; i < 6; i++)
			gbStatusPacket[i] = 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	7013      	strb	r3, [r2, #0]
 8003fc2:	7053      	strb	r3, [r2, #1]
 8003fc4:	7093      	strb	r3, [r2, #2]
 8003fc6:	70d3      	strb	r3, [r2, #3]
 8003fc8:	7113      	strb	r3, [r2, #4]
 8003fca:	7153      	strb	r3, [r2, #5]

	dxl_clear_statpkt();
	do {
		dxl_rx_packet();
		uDelay(50);
	} while (gbCommStatus & DXL_RXWAITING);
 8003fcc:	4c05      	ldr	r4, [pc, #20]	(8003fe4 <dxl_txrx_packet+0x58>)
		PrintString("\n");
#endif

	dxl_clear_statpkt();
	do {
		dxl_rx_packet();
 8003fce:	f7ff fe9d 	bl	8003d0c <dxl_rx_packet>
		uDelay(50);
 8003fd2:	2032      	movs	r0, #50
 8003fd4:	f000 fb7e 	bl	80046d4 <uDelay>
	} while (gbCommStatus & DXL_RXWAITING);
 8003fd8:	8823      	ldrh	r3, [r4, #0]
 8003fda:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003fde:	d1f6      	bne.n	8003fce <dxl_txrx_packet+0x42>
		PrintString("Dynamixel  --- dxl_txrx_packet ---\n");
		PrintString("RX Comm Status\n");
		TxD_Dec_U16(gbCommStatus);
		PrintString("\n");
#endif
}
 8003fe0:	bd10      	pop	{r4, pc}
 8003fe2:	46c0      	nop			(mov r8, r8)
 8003fe4:	20000000 	.word	0x20000000
 8003fe8:	2000057c 	.word	0x2000057c

08003fec <dxl_write_word>:
	return dxl_makeword(gbStatusPacket[DXL_PKT_PARA],
			gbStatusPacket[DXL_PKT_PARA + 1]);
}

//##############################################################################
void dxl_write_word(u8 id, u8 address, u16 value) {
 8003fec:	b500      	push	{lr}
 8003fee:	4694      	mov	ip, r2
	while (giBusUsing)
 8003ff0:	4a0a      	ldr	r2, [pc, #40]	(800401c <dxl_write_word+0x30>)
	return dxl_makeword(gbStatusPacket[DXL_PKT_PARA],
			gbStatusPacket[DXL_PKT_PARA + 1]);
}

//##############################################################################
void dxl_write_word(u8 id, u8 address, u16 value) {
 8003ff2:	b081      	sub	sp, #4
	while (giBusUsing)
 8003ff4:	7813      	ldrb	r3, [r2, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1fc      	bne.n	8003ff4 <dxl_write_word+0x8>
		;

	gbInstructionPacket[DXL_PKT_ID] = id;
 8003ffa:	4a09      	ldr	r2, [pc, #36]	(8004020 <dxl_write_word+0x34>)
	gbInstructionPacket[DXL_PKT_INST] = INST_WRITE_DATA;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	7113      	strb	r3, [r2, #4]
	gbInstructionPacket[DXL_PKT_PARA] = address;
	gbInstructionPacket[DXL_PKT_PARA + 1] = dxl_get_lowbyte(value);
	gbInstructionPacket[DXL_PKT_PARA + 2] = dxl_get_highbyte(value);
 8004000:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8004004:	71d3      	strb	r3, [r2, #7]
	gbInstructionPacket[DXL_PKT_LEN] = 5;
 8004006:	2305      	movs	r3, #5
//##############################################################################
void dxl_write_word(u8 id, u8 address, u16 value) {
	while (giBusUsing)
		;

	gbInstructionPacket[DXL_PKT_ID] = id;
 8004008:	7090      	strb	r0, [r2, #2]
	gbInstructionPacket[DXL_PKT_INST] = INST_WRITE_DATA;
	gbInstructionPacket[DXL_PKT_PARA] = address;
 800400a:	7151      	strb	r1, [r2, #5]
	gbInstructionPacket[DXL_PKT_PARA + 1] = dxl_get_lowbyte(value);
 800400c:	f882 c006 	strb.w	ip, [r2, #6]
	gbInstructionPacket[DXL_PKT_PARA + 2] = dxl_get_highbyte(value);
	gbInstructionPacket[DXL_PKT_LEN] = 5;
 8004010:	70d3      	strb	r3, [r2, #3]

	dxl_txrx_packet();
 8004012:	f7ff ffbb 	bl	8003f8c <dxl_txrx_packet>
}
 8004016:	b001      	add	sp, #4
 8004018:	bd00      	pop	{pc}
 800401a:	46c0      	nop			(mov r8, r8)
 800401c:	200005ce 	.word	0x200005ce
 8004020:	200004dc 	.word	0x200004dc

08004024 <dxl_read_word>:

	dxl_txrx_packet();
}

//##############################################################################
u16 dxl_read_word(u8 id, u8 address) {
 8004024:	b500      	push	{lr}
	while (giBusUsing)
 8004026:	4a0f      	ldr	r2, [pc, #60]	(8004064 <dxl_read_word+0x40>)

	dxl_txrx_packet();
}

//##############################################################################
u16 dxl_read_word(u8 id, u8 address) {
 8004028:	b081      	sub	sp, #4
	while (giBusUsing)
 800402a:	7813      	ldrb	r3, [r2, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1fc      	bne.n	800402a <dxl_read_word+0x6>
		;

	gbInstructionPacket[DXL_PKT_ID] = id;
 8004030:	4a0d      	ldr	r2, [pc, #52]	(8004068 <dxl_read_word+0x44>)
	gbInstructionPacket[DXL_PKT_INST] = INST_READ_DATA;
 8004032:	2302      	movs	r3, #2
 8004034:	7113      	strb	r3, [r2, #4]
	gbInstructionPacket[DXL_PKT_PARA] = address;
	gbInstructionPacket[DXL_PKT_PARA + 1] = 2;
 8004036:	7193      	strb	r3, [r2, #6]
	gbInstructionPacket[DXL_PKT_LEN] = 4;
 8004038:	2304      	movs	r3, #4
 800403a:	70d3      	strb	r3, [r2, #3]
//##############################################################################
u16 dxl_read_word(u8 id, u8 address) {
	while (giBusUsing)
		;

	gbInstructionPacket[DXL_PKT_ID] = id;
 800403c:	7090      	strb	r0, [r2, #2]
	gbInstructionPacket[DXL_PKT_INST] = INST_READ_DATA;
	gbInstructionPacket[DXL_PKT_PARA] = address;
 800403e:	7151      	strb	r1, [r2, #5]
	gbInstructionPacket[DXL_PKT_PARA + 1] = 2;
	gbInstructionPacket[DXL_PKT_LEN] = 4;

	dxl_txrx_packet();
 8004040:	f7ff ffa4 	bl	8003f8c <dxl_txrx_packet>

	if ((gbCommStatus & DXL_RXFAIL))
 8004044:	4b09      	ldr	r3, [pc, #36]	(800406c <dxl_read_word+0x48>)
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	f013 0f08 	tst.w	r3, #8	; 0x8
 800404c:	d001      	beq.n	8004052 <dxl_read_word+0x2e>
 800404e:	2000      	movs	r0, #0
 8004050:	e005      	b.n	800405e <dxl_read_word+0x3a>

//##############################################################################
u16 dxl_makeword(u8 lowbyte, u8 highbyte) {
	u16 word;

	word = highbyte;
 8004052:	4b07      	ldr	r3, [pc, #28]	(8004070 <dxl_read_word+0x4c>)
 8004054:	799a      	ldrb	r2, [r3, #6]
	word = word << 8;
	word = word + lowbyte;
 8004056:	795b      	ldrb	r3, [r3, #5]
 8004058:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800405c:	b298      	uxth	r0, r3
	if ((gbCommStatus & DXL_RXFAIL))
		return 0;

	return dxl_makeword(gbStatusPacket[DXL_PKT_PARA],
			gbStatusPacket[DXL_PKT_PARA + 1]);
}
 800405e:	b001      	add	sp, #4
 8004060:	bd00      	pop	{pc}
 8004062:	46c0      	nop			(mov r8, r8)
 8004064:	200005ce 	.word	0x200005ce
 8004068:	200004dc 	.word	0x200004dc
 800406c:	20000000 	.word	0x20000000
 8004070:	2000057c 	.word	0x2000057c

08004074 <dxl_write_byte>:

	return gbStatusPacket[DXL_PKT_PARA];
}

//##############################################################################
void dxl_write_byte(u8 id, u8 address, u8 value) {
 8004074:	b500      	push	{lr}
 8004076:	4694      	mov	ip, r2
	while (giBusUsing)
 8004078:	4a08      	ldr	r2, [pc, #32]	(800409c <dxl_write_byte+0x28>)

	return gbStatusPacket[DXL_PKT_PARA];
}

//##############################################################################
void dxl_write_byte(u8 id, u8 address, u8 value) {
 800407a:	b081      	sub	sp, #4
	while (giBusUsing)
 800407c:	7813      	ldrb	r3, [r2, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1fc      	bne.n	800407c <dxl_write_byte+0x8>
		;

	gbInstructionPacket[DXL_PKT_ID] = id;
 8004082:	4b07      	ldr	r3, [pc, #28]	(80040a0 <dxl_write_byte+0x2c>)
	gbInstructionPacket[DXL_PKT_INST] = INST_WRITE_DATA;
 8004084:	2203      	movs	r2, #3
 8004086:	711a      	strb	r2, [r3, #4]
	gbInstructionPacket[DXL_PKT_PARA] = address;
	gbInstructionPacket[DXL_PKT_PARA + 1] = value;
	gbInstructionPacket[DXL_PKT_LEN] = 4;
 8004088:	2204      	movs	r2, #4
//##############################################################################
void dxl_write_byte(u8 id, u8 address, u8 value) {
	while (giBusUsing)
		;

	gbInstructionPacket[DXL_PKT_ID] = id;
 800408a:	7098      	strb	r0, [r3, #2]
	gbInstructionPacket[DXL_PKT_INST] = INST_WRITE_DATA;
	gbInstructionPacket[DXL_PKT_PARA] = address;
 800408c:	7159      	strb	r1, [r3, #5]
	gbInstructionPacket[DXL_PKT_PARA + 1] = value;
 800408e:	f883 c006 	strb.w	ip, [r3, #6]
	gbInstructionPacket[DXL_PKT_LEN] = 4;
 8004092:	70da      	strb	r2, [r3, #3]

	dxl_txrx_packet();
 8004094:	f7ff ff7a 	bl	8003f8c <dxl_txrx_packet>
}
 8004098:	b001      	add	sp, #4
 800409a:	bd00      	pop	{pc}
 800409c:	200005ce 	.word	0x200005ce
 80040a0:	200004dc 	.word	0x200004dc

080040a4 <dxl_capture>:
			gbStatusPacket[i] = 0;
	}
}

//##############################################################################
void dxl_capture(u8 id) {
 80040a4:	b500      	push	{lr}
//    gbInstructionPacket[DXL_PKT_INST] = INST_CAP_REGION;
//    gbInstructionPacket[DXL_PKT_LEN] = 2;

//    dxl_txrx_packet();

	dxl_write_byte(id, 0, 0);
 80040a6:	2100      	movs	r1, #0
			gbStatusPacket[i] = 0;
	}
}

//##############################################################################
void dxl_capture(u8 id) {
 80040a8:	b081      	sub	sp, #4
//    gbInstructionPacket[DXL_PKT_INST] = INST_CAP_REGION;
//    gbInstructionPacket[DXL_PKT_LEN] = 2;

//    dxl_txrx_packet();

	dxl_write_byte(id, 0, 0);
 80040aa:	2200      	movs	r2, #0
 80040ac:	f7ff ffe2 	bl	8004074 <dxl_write_byte>
}
 80040b0:	b001      	add	sp, #4
 80040b2:	bd00      	pop	{pc}

080040b4 <dxl_read_byte>:

	dxl_txrx_packet();
}

//##############################################################################
u8 dxl_read_byte(u8 id, u8 address) {
 80040b4:	b500      	push	{lr}
	while (giBusUsing)
 80040b6:	4a0d      	ldr	r2, [pc, #52]	(80040ec <dxl_read_byte+0x38>)

	dxl_txrx_packet();
}

//##############################################################################
u8 dxl_read_byte(u8 id, u8 address) {
 80040b8:	b081      	sub	sp, #4
	while (giBusUsing)
 80040ba:	7813      	ldrb	r3, [r2, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1fc      	bne.n	80040ba <dxl_read_byte+0x6>
		;

	gbInstructionPacket[DXL_PKT_ID] = id;
 80040c0:	4a0b      	ldr	r2, [pc, #44]	(80040f0 <dxl_read_byte+0x3c>)
	gbInstructionPacket[DXL_PKT_INST] = INST_READ_DATA;
 80040c2:	2302      	movs	r3, #2
 80040c4:	7113      	strb	r3, [r2, #4]
	gbInstructionPacket[DXL_PKT_PARA] = address;
	gbInstructionPacket[DXL_PKT_PARA + 1] = 1;
 80040c6:	2301      	movs	r3, #1
 80040c8:	7193      	strb	r3, [r2, #6]
	gbInstructionPacket[DXL_PKT_LEN] = 4;
 80040ca:	2304      	movs	r3, #4
 80040cc:	70d3      	strb	r3, [r2, #3]
//##############################################################################
u8 dxl_read_byte(u8 id, u8 address) {
	while (giBusUsing)
		;

	gbInstructionPacket[DXL_PKT_ID] = id;
 80040ce:	7090      	strb	r0, [r2, #2]
	gbInstructionPacket[DXL_PKT_INST] = INST_READ_DATA;
	gbInstructionPacket[DXL_PKT_PARA] = address;
 80040d0:	7151      	strb	r1, [r2, #5]
	gbInstructionPacket[DXL_PKT_PARA + 1] = 1;
	gbInstructionPacket[DXL_PKT_LEN] = 4;

	dxl_txrx_packet();
 80040d2:	f7ff ff5b 	bl	8003f8c <dxl_txrx_packet>

	if ((gbCommStatus & DXL_RXFAIL))
 80040d6:	4b07      	ldr	r3, [pc, #28]	(80040f4 <dxl_read_byte+0x40>)
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	f013 0f08 	tst.w	r3, #8	; 0x8
 80040de:	d001      	beq.n	80040e4 <dxl_read_byte+0x30>
 80040e0:	2000      	movs	r0, #0
 80040e2:	e001      	b.n	80040e8 <dxl_read_byte+0x34>
		return 0;

	return gbStatusPacket[DXL_PKT_PARA];
 80040e4:	4b04      	ldr	r3, [pc, #16]	(80040f8 <dxl_read_byte+0x44>)
 80040e6:	7958      	ldrb	r0, [r3, #5]
}
 80040e8:	b001      	add	sp, #4
 80040ea:	bd00      	pop	{pc}
 80040ec:	200005ce 	.word	0x200005ce
 80040f0:	200004dc 	.word	0x200004dc
 80040f4:	20000000 	.word	0x20000000
 80040f8:	2000057c 	.word	0x2000057c

080040fc <dxl_ping>:
	u16 temp = ((word & 0xFF00) >> 8);
	return (u8) temp;
}

//##############################################################################
void dxl_ping(u8 id) {
 80040fc:	b500      	push	{lr}
	while (giBusUsing)
 80040fe:	4a07      	ldr	r2, [pc, #28]	(800411c <dxl_ping+0x20>)
	u16 temp = ((word & 0xFF00) >> 8);
	return (u8) temp;
}

//##############################################################################
void dxl_ping(u8 id) {
 8004100:	b081      	sub	sp, #4
	while (giBusUsing)
 8004102:	7813      	ldrb	r3, [r2, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1fc      	bne.n	8004102 <dxl_ping+0x6>
		;

	gbInstructionPacket[DXL_PKT_ID] = id;
 8004108:	4b05      	ldr	r3, [pc, #20]	(8004120 <dxl_ping+0x24>)
	gbInstructionPacket[DXL_PKT_INST] = INST_PING;
 800410a:	2201      	movs	r2, #1
 800410c:	711a      	strb	r2, [r3, #4]
	gbInstructionPacket[DXL_PKT_LEN] = 2;
 800410e:	2202      	movs	r2, #2
//##############################################################################
void dxl_ping(u8 id) {
	while (giBusUsing)
		;

	gbInstructionPacket[DXL_PKT_ID] = id;
 8004110:	7098      	strb	r0, [r3, #2]
	gbInstructionPacket[DXL_PKT_INST] = INST_PING;
	gbInstructionPacket[DXL_PKT_LEN] = 2;
 8004112:	70da      	strb	r2, [r3, #3]

	dxl_txrx_packet();
 8004114:	f7ff ff3a 	bl	8003f8c <dxl_txrx_packet>
}
 8004118:	b001      	add	sp, #4
 800411a:	bd00      	pop	{pc}
 800411c:	200005ce 	.word	0x200005ce
 8004120:	200004dc 	.word	0x200004dc

08004124 <dxl_terminate>:

	return 1;
}

//##############################################################################
void dxl_terminate(void) {
 8004124:	b500      	push	{lr}
 8004126:	b081      	sub	sp, #4
	dxl_hal_close();
 8004128:	f000 ff70 	bl	800500c <dxl_hal_close>
}
 800412c:	b001      	add	sp, #4
 800412e:	bd00      	pop	{pc}

08004130 <dxl_initialize>:
u8 gbRxGetLength = 0;
volatile u16 gbCommStatus = DXL_RXSUCCESS;
volatile u8 giBusUsing = 0;

//##############################################################################
u8 dxl_initialize(u32 baudrate) {
 8004130:	b500      	push	{lr}
 8004132:	b081      	sub	sp, #4
	if (dxl_hal_open(baudrate) == 0)
 8004134:	f000 ff90 	bl	8005058 <dxl_hal_open>
 8004138:	b138      	cbz	r0, 800414a <dxl_initialize+0x1a>
		return 0;

	gbCommStatus = DXL_RXSUCCESS;
 800413a:	4b05      	ldr	r3, [pc, #20]	(8004150 <dxl_initialize+0x20>)
 800413c:	f04f 0202 	mov.w	r2, #2	; 0x2
 8004140:	801a      	strh	r2, [r3, #0]
	giBusUsing = 0;
 8004142:	4b04      	ldr	r3, [pc, #16]	(8004154 <dxl_initialize+0x24>)
 8004144:	2200      	movs	r2, #0
 8004146:	701a      	strb	r2, [r3, #0]
 8004148:	2001      	movs	r0, #1

	return 1;
}
 800414a:	b001      	add	sp, #4
 800414c:	bd00      	pop	{pc}
 800414e:	46c0      	nop			(mov r8, r8)
 8004150:	20000000 	.word	0x20000000
 8004154:	200005ce 	.word	0x200005ce

08004158 <zgb_rx_data>:
}

//##############################################################################
u16 zgb_rx_data(void)
{
	gbRcvFlag = 0;
 8004158:	4b02      	ldr	r3, [pc, #8]	(8004164 <zgb_rx_data+0xc>)
 800415a:	2200      	movs	r2, #0
 800415c:	701a      	strb	r2, [r3, #0]
 800415e:	4b02      	ldr	r3, [pc, #8]	(8004168 <zgb_rx_data+0x10>)
 8004160:	8818      	ldrh	r0, [r3, #0]
	return gwRcvData;
}
 8004162:	4770      	bx	lr
 8004164:	200005e4 	.word	0x200005e4
 8004168:	200005e2 	.word	0x200005e2

0800416c <zgb_rx_data_right_V>:
    return gbRcvFlag;
}

//##############################################################################
u16 zgb_rx_data_right_V(void)
{
 800416c:	4b01      	ldr	r3, [pc, #4]	(8004174 <zgb_rx_data_right_V+0x8>)
 800416e:	7818      	ldrb	r0, [r3, #0]
    //gbRcvFlag = 0;
    return right_V;
}
 8004170:	4770      	bx	lr
 8004172:	46c0      	nop			(mov r8, r8)
 8004174:	200005e5 	.word	0x200005e5

08004178 <zgb_rx_data_right_H>:
//##############################################################################
u16 zgb_rx_data_right_H(void)
{
 8004178:	4b01      	ldr	r3, [pc, #4]	(8004180 <zgb_rx_data_right_H+0x8>)
 800417a:	7818      	ldrb	r0, [r3, #0]
    //gbRcvFlag = 0;
    return right_H;
}
 800417c:	4770      	bx	lr
 800417e:	46c0      	nop			(mov r8, r8)
 8004180:	200005e6 	.word	0x200005e6

08004184 <zgb_rx_data_left_V>:
//##############################################################################
u16 zgb_rx_data_left_V(void)
{
 8004184:	4b01      	ldr	r3, [pc, #4]	(800418c <zgb_rx_data_left_V+0x8>)
 8004186:	7818      	ldrb	r0, [r3, #0]
    //gbRcvFlag = 0;
    return left_V;
}
 8004188:	4770      	bx	lr
 800418a:	46c0      	nop			(mov r8, r8)
 800418c:	200005e7 	.word	0x200005e7

08004190 <zgb_rx_data_left_H>:
//##############################################################################
u16 zgb_rx_data_left_H(void)
{
 8004190:	4b01      	ldr	r3, [pc, #4]	(8004198 <zgb_rx_data_left_H+0x8>)
 8004192:	7818      	ldrb	r0, [r3, #0]
    //gbRcvFlag = 0;
    return left_H;
}
 8004194:	4770      	bx	lr
 8004196:	46c0      	nop			(mov r8, r8)
 8004198:	200005e8 	.word	0x200005e8

0800419c <zgb_rx_data_buttons>:
//##############################################################################
u8 zgb_rx_data_buttons(void)
{
 800419c:	4b01      	ldr	r3, [pc, #4]	(80041a4 <zgb_rx_data_buttons+0x8>)
 800419e:	7818      	ldrb	r0, [r3, #0]
    //gbRcvFlag = 0;
    return buttons_;
}
 80041a0:	4770      	bx	lr
 80041a2:	46c0      	nop			(mov r8, r8)
 80041a4:	200005e9 	.word	0x200005e9

080041a8 <zgb_rx_data_extra>:
//##############################################################################
u8 zgb_rx_data_extra(void)
{
    gbRcvFlag = 0;
 80041a8:	4b02      	ldr	r3, [pc, #8]	(80041b4 <zgb_rx_data_extra+0xc>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	701a      	strb	r2, [r3, #0]
    return 0;

}
 80041ae:	2000      	movs	r0, #0
 80041b0:	4770      	bx	lr
 80041b2:	46c0      	nop			(mov r8, r8)
 80041b4:	200005e4 	.word	0x200005e4

080041b8 <zgb_rx_data_right_V_>:
//##############################################################################
int zgb_rx_data_right_V_(void)
{
 80041b8:	4b01      	ldr	r3, [pc, #4]	(80041c0 <zgb_rx_data_right_V_+0x8>)
 80041ba:	7818      	ldrb	r0, [r3, #0]
 80041bc:	3880      	subs	r0, #128
    //gbRcvFlag = 0;
    return (right_V - 128);
}
 80041be:	4770      	bx	lr
 80041c0:	200005e5 	.word	0x200005e5

080041c4 <zgb_rx_data_right_H_>:
//##############################################################################
int zgb_rx_data_right_H_(void)
{
 80041c4:	4b01      	ldr	r3, [pc, #4]	(80041cc <zgb_rx_data_right_H_+0x8>)
 80041c6:	7818      	ldrb	r0, [r3, #0]
 80041c8:	3880      	subs	r0, #128
    //gbRcvFlag = 0;
    return (right_H - 128);
}
 80041ca:	4770      	bx	lr
 80041cc:	200005e6 	.word	0x200005e6

080041d0 <zgb_rx_data_left_V_>:
//##############################################################################
int zgb_rx_data_left_V_(void)
{
 80041d0:	4b01      	ldr	r3, [pc, #4]	(80041d8 <zgb_rx_data_left_V_+0x8>)
 80041d2:	7818      	ldrb	r0, [r3, #0]
 80041d4:	3880      	subs	r0, #128
    //gbRcvFlag = 0;
    return (left_V - 128);
}
 80041d6:	4770      	bx	lr
 80041d8:	200005e7 	.word	0x200005e7

080041dc <zgb_rx_data_left_H_>:
//##############################################################################
int zgb_rx_data_left_H_(void)
{
 80041dc:	4b01      	ldr	r3, [pc, #4]	(80041e4 <zgb_rx_data_left_H_+0x8>)
 80041de:	7818      	ldrb	r0, [r3, #0]
 80041e0:	3880      	subs	r0, #128
    //gbRcvFlag = 0;
    return (left_H- 128);
}
 80041e2:	4770      	bx	lr
 80041e4:	200005e8 	.word	0x200005e8

080041e8 <CheckZBNewArrive>:
//##############################################################################
byte CheckZBNewArrive(void) {
	if (gbZigRead != gbZigWrite)
 80041e8:	4b03      	ldr	r3, [pc, #12]	(80041f8 <CheckZBNewArrive+0x10>)
 80041ea:	7818      	ldrb	r0, [r3, #0]
 80041ec:	4b03      	ldr	r3, [pc, #12]	(80041fc <CheckZBNewArrive+0x14>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	1ac0      	subs	r0, r0, r3
 80041f2:	bf18      	it	ne
 80041f4:	2001      	movne	r0, #1
		return 1;
	else
		return 0;
}
 80041f6:	4770      	bx	lr
 80041f8:	200005d0 	.word	0x200005d0
 80041fc:	200005d1 	.word	0x200005d1

08004200 <zgb_rx_check_arduino>:
	return gwRcvData;
}

//##############################################################################
u8 zgb_rx_check_arduino(void)
{
 8004200:	b570      	push	{r4, r5, r6, lr}

    u8 RcvNum;
    u8 checksum;
    u8 i, j;

    if (gbRcvFlag==1){
 8004202:	4b3e      	ldr	r3, [pc, #248]	(80042fc <zgb_rx_check_arduino+0xfc>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d101      	bne.n	800420e <zgb_rx_check_arduino+0xe>
 800420a:	2001      	movs	r0, #1
 800420c:	e075      	b.n	80042fa <zgb_rx_check_arduino+0xfa>
    }



    // Fill packet buffer
    if (gbRcvPacketNum<9)
 800420e:	4c3c      	ldr	r4, [pc, #240]	(8004300 <zgb_rx_check_arduino+0x100>)
 8004210:	7823      	ldrb	r3, [r4, #0]
 8004212:	2b08      	cmp	r3, #8
 8004214:	d809      	bhi.n	800422a <zgb_rx_check_arduino+0x2a>


    {


        RcvNum = zgb_hal_rx((u8*)&gbRcvPacketArduino[gbRcvPacketNum], (9-gbRcvPacketNum));
 8004216:	483b      	ldr	r0, [pc, #236]	(8004304 <zgb_rx_check_arduino+0x104>)
 8004218:	f1c3 0109 	rsb	r1, r3, #9	; 0x9
 800421c:	18c0      	adds	r0, r0, r3
 800421e:	b2c9      	uxtb	r1, r1
 8004220:	f000 fe0c 	bl	8004e3c <zgb_hal_rx>
        if (RcvNum!=-1)
            gbRcvPacketNum += RcvNum;
 8004224:	7823      	ldrb	r3, [r4, #0]
 8004226:	18c0      	adds	r0, r0, r3
 8004228:	7020      	strb	r0, [r4, #0]
    }

    // Find header
    if (gbRcvPacketNum>=2)
 800422a:	4b35      	ldr	r3, [pc, #212]	(8004300 <zgb_rx_check_arduino+0x100>)
 800422c:	f893 c000 	ldrb.w	ip, [r3]
 8004230:	f1bc 0f01 	cmp.w	ip, #1	; 0x1
 8004234:	d92c      	bls.n	8004290 <zgb_rx_check_arduino+0x90>
 8004236:	2200      	movs	r2, #0
    {

        for (i=0; i<gbRcvPacketNum; i++)
        {
            if (gbRcvPacketArduino[i]==0xFF)
 8004238:	4d32      	ldr	r5, [pc, #200]	(8004304 <zgb_rx_check_arduino+0x104>)
            {
                if (i<=(gbRcvPacketNum-2))
 800423a:	f10c 34ff 	add.w	r4, ip, #4294967295	; 0xffffffff
 800423e:	e00a      	b.n	8004256 <zgb_rx_check_arduino+0x56>
    if (gbRcvPacketNum>=2)
    {

        for (i=0; i<gbRcvPacketNum; i++)
        {
            if (gbRcvPacketArduino[i]==0xFF)
 8004240:	5cab      	ldrb	r3, [r5, r2]
 8004242:	eb05 0102 	add.w	r1, r5, r2
 8004246:	2bff      	cmp	r3, #255
 8004248:	d104      	bne.n	8004254 <zgb_rx_check_arduino+0x54>
            {
                if (i<=(gbRcvPacketNum-2))
 800424a:	4294      	cmp	r4, r2
 800424c:	dd02      	ble.n	8004254 <zgb_rx_check_arduino+0x54>
                {
                    if (gbRcvPacketArduino[i+1]==0x55)
 800424e:	784b      	ldrb	r3, [r1, #1]
 8004250:	2b55      	cmp	r3, #85
 8004252:	d003      	beq.n	800425c <zgb_rx_check_arduino+0x5c>
                        break;
 8004254:	3201      	adds	r2, #1
 8004256:	b2d0      	uxtb	r0, r2

    // Find header
    if (gbRcvPacketNum>=2)
    {

        for (i=0; i<gbRcvPacketNum; i++)
 8004258:	4560      	cmp	r0, ip
 800425a:	d3f1      	bcc.n	8004240 <zgb_rx_check_arduino+0x40>
                        break;
                }
            }
        }

        if (i>0)
 800425c:	b1c0      	cbz	r0, 8004290 <zgb_rx_check_arduino+0x90>
        {
            if (i==gbRcvPacketNum)
 800425e:	4560      	cmp	r0, ip
 8004260:	d107      	bne.n	8004272 <zgb_rx_check_arduino+0x72>
            {
                // Cannot find header
                if (gbRcvPacketArduino[i-1]==0xFF)
 8004262:	4b28      	ldr	r3, [pc, #160]	(8004304 <zgb_rx_check_arduino+0x104>)
 8004264:	181b      	adds	r3, r3, r0
 8004266:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800426a:	2bff      	cmp	r3, #255
 800426c:	d101      	bne.n	8004272 <zgb_rx_check_arduino+0x72>

                    i--;
 800426e:	1e43      	subs	r3, r0, #1
 8004270:	b2d8      	uxtb	r0, r3
 8004272:	4601      	mov	r1, r0

            // Remove data before header
            for (j=i; j<gbRcvPacketNum; j++)
            {

                gbRcvPacketArduino[j-i] = gbRcvPacketArduino[j];
 8004274:	4c23      	ldr	r4, [pc, #140]	(8004304 <zgb_rx_check_arduino+0x104>)
 8004276:	e005      	b.n	8004284 <zgb_rx_check_arduino+0x84>
 8004278:	5c62      	ldrb	r2, [r4, r1]
 800427a:	ebc0 0301 	rsb	r3, r0, r1
 800427e:	54e2      	strb	r2, [r4, r3]

                    i--;
            }

            // Remove data before header
            for (j=i; j<gbRcvPacketNum; j++)
 8004280:	1c4b      	adds	r3, r1, #1
 8004282:	b2d9      	uxtb	r1, r3
 8004284:	4561      	cmp	r1, ip
 8004286:	d3f7      	bcc.n	8004278 <zgb_rx_check_arduino+0x78>
            {

                gbRcvPacketArduino[j-i] = gbRcvPacketArduino[j];
            }
            gbRcvPacketNum -= i;
 8004288:	4b1d      	ldr	r3, [pc, #116]	(8004300 <zgb_rx_check_arduino+0x100>)
 800428a:	ebc0 020c 	rsb	r2, r0, ip
 800428e:	701a      	strb	r2, [r3, #0]
        }
    }

    // Verify packet
    if (gbRcvPacketNum==9)
 8004290:	4b1b      	ldr	r3, [pc, #108]	(8004300 <zgb_rx_check_arduino+0x100>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b09      	cmp	r3, #9
 8004296:	d12d      	bne.n	80042f4 <zgb_rx_check_arduino+0xf4>
    {

        if ( (gbRcvPacketArduino[0]==0xFF) && (gbRcvPacketArduino[1]==0x55) )
 8004298:	4e1a      	ldr	r6, [pc, #104]	(8004304 <zgb_rx_check_arduino+0x104>)
 800429a:	7833      	ldrb	r3, [r6, #0]
 800429c:	2bff      	cmp	r3, #255
 800429e:	d124      	bne.n	80042ea <zgb_rx_check_arduino+0xea>
 80042a0:	7873      	ldrb	r3, [r6, #1]
 80042a2:	2b55      	cmp	r3, #85
 80042a4:	d121      	bne.n	80042ea <zgb_rx_check_arduino+0xea>
                    gbRcvFlag = 1;
                }
            }*/


                  		left_V  =   gbRcvPacketArduino[2];
 80042a6:	78b5      	ldrb	r5, [r6, #2]
 80042a8:	4b17      	ldr	r3, [pc, #92]	(8004308 <zgb_rx_check_arduino+0x108>)
        	            left_H  =   gbRcvPacketArduino[3];
 80042aa:	78f4      	ldrb	r4, [r6, #3]
                    gbRcvFlag = 1;
                }
            }*/


                  		left_V  =   gbRcvPacketArduino[2];
 80042ac:	701d      	strb	r5, [r3, #0]
        	            left_H  =   gbRcvPacketArduino[3];
 80042ae:	4b17      	ldr	r3, [pc, #92]	(800430c <zgb_rx_check_arduino+0x10c>)
        	            right_V =   gbRcvPacketArduino[4];
 80042b0:	f896 c004 	ldrb.w	ip, [r6, #4]
                }
            }*/


                  		left_V  =   gbRcvPacketArduino[2];
        	            left_H  =   gbRcvPacketArduino[3];
 80042b4:	701c      	strb	r4, [r3, #0]
        	            right_V =   gbRcvPacketArduino[4];
 80042b6:	4b16      	ldr	r3, [pc, #88]	(8004310 <zgb_rx_check_arduino+0x110>)
        	            right_H =   gbRcvPacketArduino[5];
 80042b8:	4a16      	ldr	r2, [pc, #88]	(8004314 <zgb_rx_check_arduino+0x114>)
            }*/


                  		left_V  =   gbRcvPacketArduino[2];
        	            left_H  =   gbRcvPacketArduino[3];
        	            right_V =   gbRcvPacketArduino[4];
 80042ba:	f883 c000 	strb.w	ip, [r3]
        	            right_H =   gbRcvPacketArduino[5];
 80042be:	7973      	ldrb	r3, [r6, #5]
        	            buttons_=   gbRcvPacketArduino[6];
 80042c0:	79b0      	ldrb	r0, [r6, #6]


                  		left_V  =   gbRcvPacketArduino[2];
        	            left_H  =   gbRcvPacketArduino[3];
        	            right_V =   gbRcvPacketArduino[4];
        	            right_H =   gbRcvPacketArduino[5];
 80042c2:	7013      	strb	r3, [r2, #0]
        	            buttons_=   gbRcvPacketArduino[6];
 80042c4:	4a14      	ldr	r2, [pc, #80]	(8004318 <zgb_rx_check_arduino+0x118>)
	TxD_Dec_U8(extra);
	PrintString("\n");
#endif


            if (checksum == (255 - (right_V+right_H+left_V+left_H+buttons_)%256)){        	  //if (checksum == (255 - (gbRcvPacketArduino[2]+gbRcvPacketArduino[3]+gbRcvPacketArduino[4]+gbRcvPacketArduino[5]+gbRcvPacketArduino[6])%256)){
 80042c6:	4463      	add	r3, ip
 80042c8:	195b      	adds	r3, r3, r5
 80042ca:	191b      	adds	r3, r3, r4

                  		left_V  =   gbRcvPacketArduino[2];
        	            left_H  =   gbRcvPacketArduino[3];
        	            right_V =   gbRcvPacketArduino[4];
        	            right_H =   gbRcvPacketArduino[5];
        	            buttons_=   gbRcvPacketArduino[6];
 80042cc:	7010      	strb	r0, [r2, #0]
        	            extra   =   gbRcvPacketArduino[7];
 80042ce:	79f1      	ldrb	r1, [r6, #7]
 80042d0:	4a12      	ldr	r2, [pc, #72]	(800431c <zgb_rx_check_arduino+0x11c>)
	TxD_Dec_U8(extra);
	PrintString("\n");
#endif


            if (checksum == (255 - (right_V+right_H+left_V+left_H+buttons_)%256)){        	  //if (checksum == (255 - (gbRcvPacketArduino[2]+gbRcvPacketArduino[3]+gbRcvPacketArduino[4]+gbRcvPacketArduino[5]+gbRcvPacketArduino[6])%256)){
 80042d2:	181b      	adds	r3, r3, r0
                  		left_V  =   gbRcvPacketArduino[2];
        	            left_H  =   gbRcvPacketArduino[3];
        	            right_V =   gbRcvPacketArduino[4];
        	            right_H =   gbRcvPacketArduino[5];
        	            buttons_=   gbRcvPacketArduino[6];
        	            extra   =   gbRcvPacketArduino[7];
 80042d4:	7011      	strb	r1, [r2, #0]
	TxD_Dec_U8(extra);
	PrintString("\n");
#endif


            if (checksum == (255 - (right_V+right_H+left_V+left_H+buttons_)%256)){        	  //if (checksum == (255 - (gbRcvPacketArduino[2]+gbRcvPacketArduino[3]+gbRcvPacketArduino[4]+gbRcvPacketArduino[5]+gbRcvPacketArduino[6])%256)){
 80042d6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80042da:	7a32      	ldrb	r2, [r6, #8]
 80042dc:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d102      	bne.n	80042ea <zgb_rx_check_arduino+0xea>


				 gbRcvFlag = 1;
 80042e4:	4b05      	ldr	r3, [pc, #20]	(80042fc <zgb_rx_check_arduino+0xfc>)
 80042e6:	2201      	movs	r2, #1
 80042e8:	701a      	strb	r2, [r3, #0]
            }

        }
        gbRcvPacketArduino[0] = 0x00;
 80042ea:	4a06      	ldr	r2, [pc, #24]	(8004304 <zgb_rx_check_arduino+0x104>)
 80042ec:	2300      	movs	r3, #0
 80042ee:	7013      	strb	r3, [r2, #0]
        gbRcvPacketNum = 0;
 80042f0:	4a03      	ldr	r2, [pc, #12]	(8004300 <zgb_rx_check_arduino+0x100>)
 80042f2:	7013      	strb	r3, [r2, #0]
    }

    return gbRcvFlag;
 80042f4:	4b01      	ldr	r3, [pc, #4]	(80042fc <zgb_rx_check_arduino+0xfc>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
}
 80042fa:	bd70      	pop	{r4, r5, r6, pc}
 80042fc:	200005e4 	.word	0x200005e4
 8004300:	200005e1 	.word	0x200005e1
 8004304:	200005d8 	.word	0x200005d8
 8004308:	200005e7 	.word	0x200005e7
 800430c:	200005e8 	.word	0x200005e8
 8004310:	200005e5 	.word	0x200005e5
 8004314:	200005e6 	.word	0x200005e6
 8004318:	200005e9 	.word	0x200005e9
 800431c:	200005ea 	.word	0x200005ea

08004320 <zgb_rx_check>:
	return 1;
}

//##############################################################################
u8 zgb_rx_check(void)
{
 8004320:	b530      	push	{r4, r5, lr}
	u8 RcvNum;
	u8 checksum;
	u8 i, j;

	if (gbRcvFlag==1)
 8004322:	4b39      	ldr	r3, [pc, #228]	(8004408 <zgb_rx_check+0xe8>)
	return 1;
}

//##############################################################################
u8 zgb_rx_check(void)
{
 8004324:	b081      	sub	sp, #4
	u8 RcvNum;
	u8 checksum;
	u8 i, j;

	if (gbRcvFlag==1)
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d101      	bne.n	8004330 <zgb_rx_check+0x10>
 800432c:	2001      	movs	r0, #1
 800432e:	e068      	b.n	8004402 <zgb_rx_check+0xe2>
	return 1;

	// Fill packet buffer
	if (gbRcvPacketNum<6)
 8004330:	4c36      	ldr	r4, [pc, #216]	(800440c <zgb_rx_check+0xec>)
 8004332:	7823      	ldrb	r3, [r4, #0]
 8004334:	2b05      	cmp	r3, #5
 8004336:	d809      	bhi.n	800434c <zgb_rx_check+0x2c>
	{
		RcvNum = zgb_hal_rx((u8*)&gbRcvPacket[gbRcvPacketNum], (6-gbRcvPacketNum));
 8004338:	4835      	ldr	r0, [pc, #212]	(8004410 <zgb_rx_check+0xf0>)
 800433a:	f1c3 0106 	rsb	r1, r3, #6	; 0x6
 800433e:	18c0      	adds	r0, r0, r3
 8004340:	b2c9      	uxtb	r1, r1
 8004342:	f000 fd7b 	bl	8004e3c <zgb_hal_rx>
		if (RcvNum!=-1)
		gbRcvPacketNum += RcvNum;
 8004346:	7823      	ldrb	r3, [r4, #0]
 8004348:	18c0      	adds	r0, r0, r3
 800434a:	7020      	strb	r0, [r4, #0]
	}

	// Find header
	if (gbRcvPacketNum>=2)
 800434c:	4b2f      	ldr	r3, [pc, #188]	(800440c <zgb_rx_check+0xec>)
 800434e:	f893 c000 	ldrb.w	ip, [r3]
 8004352:	f1bc 0f01 	cmp.w	ip, #1	; 0x1
 8004356:	d92c      	bls.n	80043b2 <zgb_rx_check+0x92>
 8004358:	2200      	movs	r2, #0
	{
		for (i=0; i<gbRcvPacketNum; i++)
		{
			if (gbRcvPacket[i]==0xFF)
 800435a:	4d2d      	ldr	r5, [pc, #180]	(8004410 <zgb_rx_check+0xf0>)
			{
				if (i<=(gbRcvPacketNum-2))
 800435c:	f10c 34ff 	add.w	r4, ip, #4294967295	; 0xffffffff
 8004360:	e00a      	b.n	8004378 <zgb_rx_check+0x58>
	// Find header
	if (gbRcvPacketNum>=2)
	{
		for (i=0; i<gbRcvPacketNum; i++)
		{
			if (gbRcvPacket[i]==0xFF)
 8004362:	5cab      	ldrb	r3, [r5, r2]
 8004364:	eb05 0102 	add.w	r1, r5, r2
 8004368:	2bff      	cmp	r3, #255
 800436a:	d104      	bne.n	8004376 <zgb_rx_check+0x56>
			{
				if (i<=(gbRcvPacketNum-2))
 800436c:	4294      	cmp	r4, r2
 800436e:	dd02      	ble.n	8004376 <zgb_rx_check+0x56>
				{
					if (gbRcvPacket[i+1]==0x55)
 8004370:	784b      	ldrb	r3, [r1, #1]
 8004372:	2b55      	cmp	r3, #85
 8004374:	d003      	beq.n	800437e <zgb_rx_check+0x5e>
					break;
 8004376:	3201      	adds	r2, #1
 8004378:	b2d0      	uxtb	r0, r2
	}

	// Find header
	if (gbRcvPacketNum>=2)
	{
		for (i=0; i<gbRcvPacketNum; i++)
 800437a:	4560      	cmp	r0, ip
 800437c:	d3f1      	bcc.n	8004362 <zgb_rx_check+0x42>
					break;
				}
			}
		}

		if (i>0)
 800437e:	b1c0      	cbz	r0, 80043b2 <zgb_rx_check+0x92>
		{
			if (i==gbRcvPacketNum)
 8004380:	4560      	cmp	r0, ip
 8004382:	d107      	bne.n	8004394 <zgb_rx_check+0x74>
			{
				// Cannot find header
				if (gbRcvPacket[i-1]==0xFF)
 8004384:	4b22      	ldr	r3, [pc, #136]	(8004410 <zgb_rx_check+0xf0>)
 8004386:	181b      	adds	r3, r3, r0
 8004388:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800438c:	2bff      	cmp	r3, #255
 800438e:	d101      	bne.n	8004394 <zgb_rx_check+0x74>
				i--;
 8004390:	1e43      	subs	r3, r0, #1
 8004392:	b2d8      	uxtb	r0, r3
 8004394:	4601      	mov	r1, r0
			}

			// Remove data before header
			for (j=i; j<gbRcvPacketNum; j++)
			{
				gbRcvPacket[j-i] = gbRcvPacket[j];
 8004396:	4c1e      	ldr	r4, [pc, #120]	(8004410 <zgb_rx_check+0xf0>)
 8004398:	e005      	b.n	80043a6 <zgb_rx_check+0x86>
 800439a:	5c62      	ldrb	r2, [r4, r1]
 800439c:	ebc0 0301 	rsb	r3, r0, r1
 80043a0:	54e2      	strb	r2, [r4, r3]
				if (gbRcvPacket[i-1]==0xFF)
				i--;
			}

			// Remove data before header
			for (j=i; j<gbRcvPacketNum; j++)
 80043a2:	1c4b      	adds	r3, r1, #1
 80043a4:	b2d9      	uxtb	r1, r3
 80043a6:	4561      	cmp	r1, ip
 80043a8:	d3f7      	bcc.n	800439a <zgb_rx_check+0x7a>
			{
				gbRcvPacket[j-i] = gbRcvPacket[j];
			}
			gbRcvPacketNum -= i;
 80043aa:	4b18      	ldr	r3, [pc, #96]	(800440c <zgb_rx_check+0xec>)
 80043ac:	ebc0 020c 	rsb	r2, r0, ip
 80043b0:	701a      	strb	r2, [r3, #0]
		}
	}

	// Verify packet
	if (gbRcvPacketNum==6)
 80043b2:	4b16      	ldr	r3, [pc, #88]	(800440c <zgb_rx_check+0xec>)
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	2b06      	cmp	r3, #6
 80043b8:	d120      	bne.n	80043fc <zgb_rx_check+0xdc>
	{
		if ( (gbRcvPacket[0]==0xFF) && (gbRcvPacket[1]==0x55) )
 80043ba:	4a15      	ldr	r2, [pc, #84]	(8004410 <zgb_rx_check+0xf0>)
 80043bc:	7813      	ldrb	r3, [r2, #0]
 80043be:	2bff      	cmp	r3, #255
 80043c0:	d117      	bne.n	80043f2 <zgb_rx_check+0xd2>
 80043c2:	7853      	ldrb	r3, [r2, #1]
 80043c4:	2b55      	cmp	r3, #85
 80043c6:	d114      	bne.n	80043f2 <zgb_rx_check+0xd2>
		{
			checksum = ~gbRcvPacket[3];
			if (gbRcvPacket[2]==checksum)
 80043c8:	78d3      	ldrb	r3, [r2, #3]
 80043ca:	7890      	ldrb	r0, [r2, #2]
 80043cc:	ea6f 0303 	mvn.w	r3, r3
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	4298      	cmp	r0, r3
 80043d4:	d10d      	bne.n	80043f2 <zgb_rx_check+0xd2>
			{
				checksum = ~gbRcvPacket[5];
				if (gbRcvPacket[4]==checksum)
 80043d6:	7953      	ldrb	r3, [r2, #5]
 80043d8:	7911      	ldrb	r1, [r2, #4]
 80043da:	ea6f 0303 	mvn.w	r3, r3
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	4299      	cmp	r1, r3
 80043e2:	d106      	bne.n	80043f2 <zgb_rx_check+0xd2>
				{
					gwRcvData = (u16) ((gbRcvPacket[4]<<8)&0xFF00);
					gwRcvData += gbRcvPacket[2];
 80043e4:	4b0b      	ldr	r3, [pc, #44]	(8004414 <zgb_rx_check+0xf4>)
 80043e6:	eb00 2201 	add.w	r2, r0, r1, lsl #8
 80043ea:	801a      	strh	r2, [r3, #0]
					gbRcvFlag = 1;
 80043ec:	4b06      	ldr	r3, [pc, #24]	(8004408 <zgb_rx_check+0xe8>)
 80043ee:	2201      	movs	r2, #1
 80043f0:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		gbRcvPacket[0] = 0x00;
 80043f2:	4a07      	ldr	r2, [pc, #28]	(8004410 <zgb_rx_check+0xf0>)
 80043f4:	2300      	movs	r3, #0
 80043f6:	7013      	strb	r3, [r2, #0]
		gbRcvPacketNum = 0;
 80043f8:	4a04      	ldr	r2, [pc, #16]	(800440c <zgb_rx_check+0xec>)
 80043fa:	7013      	strb	r3, [r2, #0]
	}

	return gbRcvFlag;
 80043fc:	4b02      	ldr	r3, [pc, #8]	(8004408 <zgb_rx_check+0xe8>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
}
 8004402:	b001      	add	sp, #4
 8004404:	bd30      	pop	{r4, r5, pc}
 8004406:	46c0      	nop			(mov r8, r8)
 8004408:	200005e4 	.word	0x200005e4
 800440c:	200005e1 	.word	0x200005e1
 8004410:	200005d2 	.word	0x200005d2
 8004414:	200005e2 	.word	0x200005e2

08004418 <zgb_tx_data>:
	zgb_hal_close();
}

//##############################################################################
u8 zgb_tx_data(u16 word)
{
 8004418:	b500      	push	{lr}
	u8 SndPacket[6];
	u8 lowbyte = (u8) (word&0xFF);
 800441a:	b2c2      	uxtb	r2, r0
	zgb_hal_close();
}

//##############################################################################
u8 zgb_tx_data(u16 word)
{
 800441c:	b083      	sub	sp, #12
	u8 SndPacket[6];
	u8 lowbyte = (u8) (word&0xFF);
	u8 highbyte = (u8) ((word>>8)&0xFF);
 800441e:	0a00      	lsrs	r0, r0, #8

	SndPacket[0] = 0xFF;
	SndPacket[1] = 0x55;
	SndPacket[2] = lowbyte;
	SndPacket[3] = ~lowbyte;
	SndPacket[4] = highbyte;
 8004420:	f88d 0006 	strb.w	r0, [sp, #6]
{
	u8 SndPacket[6];
	u8 lowbyte = (u8) (word&0xFF);
	u8 highbyte = (u8) ((word>>8)&0xFF);

	SndPacket[0] = 0xFF;
 8004424:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	SndPacket[1] = 0x55;
	SndPacket[2] = lowbyte;
	SndPacket[3] = ~lowbyte;
	SndPacket[4] = highbyte;
	SndPacket[5] = ~highbyte;
 8004428:	ea6f 0000 	mvn.w	r0, r0
{
	u8 SndPacket[6];
	u8 lowbyte = (u8) (word&0xFF);
	u8 highbyte = (u8) ((word>>8)&0xFF);

	SndPacket[0] = 0xFF;
 800442c:	f88d 3002 	strb.w	r3, [sp, #2]
	SndPacket[1] = 0x55;
	SndPacket[2] = lowbyte;
 8004430:	f88d 2004 	strb.w	r2, [sp, #4]
	u8 SndPacket[6];
	u8 lowbyte = (u8) (word&0xFF);
	u8 highbyte = (u8) ((word>>8)&0xFF);

	SndPacket[0] = 0xFF;
	SndPacket[1] = 0x55;
 8004434:	2355      	movs	r3, #85
	SndPacket[2] = lowbyte;
	SndPacket[3] = ~lowbyte;
 8004436:	ea6f 0202 	mvn.w	r2, r2
	SndPacket[4] = highbyte;
	SndPacket[5] = ~highbyte;
 800443a:	f88d 0007 	strb.w	r0, [sp, #7]

	if (zgb_hal_tx(SndPacket, 6)!=6)
 800443e:	2106      	movs	r1, #6
 8004440:	f10d 0002 	add.w	r0, sp, #2	; 0x2
	u8 SndPacket[6];
	u8 lowbyte = (u8) (word&0xFF);
	u8 highbyte = (u8) ((word>>8)&0xFF);

	SndPacket[0] = 0xFF;
	SndPacket[1] = 0x55;
 8004444:	f88d 3003 	strb.w	r3, [sp, #3]
	SndPacket[2] = lowbyte;
	SndPacket[3] = ~lowbyte;
 8004448:	f88d 2005 	strb.w	r2, [sp, #5]
	SndPacket[4] = highbyte;
	SndPacket[5] = ~highbyte;

	if (zgb_hal_tx(SndPacket, 6)!=6)
 800444c:	f000 fee4 	bl	8005218 <zgb_hal_tx>
 8004450:	2806      	cmp	r0, #6
 8004452:	bf14      	ite	ne
 8004454:	2000      	movne	r0, #0
 8004456:	2001      	moveq	r0, #1
	return 0;

	return 1;
}
 8004458:	b003      	add	sp, #12
 800445a:	bd00      	pop	{pc}

0800445c <zgb_terminate>:
	return 1;
}

//##############################################################################
void zgb_terminate(void)
{
 800445c:	b500      	push	{lr}
 800445e:	b081      	sub	sp, #4
	zgb_hal_close();
 8004460:	f000 fdde 	bl	8005020 <zgb_hal_close>
}
 8004464:	b001      	add	sp, #4
 8004466:	bd00      	pop	{pc}

08004468 <zgb_initialize>:
u8 extra;


//##############################################################################
u8 zgb_initialize(u32 baudrate)
{
 8004468:	b500      	push	{lr}
 800446a:	b081      	sub	sp, #4
	if (zgb_hal_open(baudrate)==0)
 800446c:	f000 fe24 	bl	80050b8 <zgb_hal_open>
 8004470:	b148      	cbz	r0, 8004486 <zgb_initialize+0x1e>
	return 0;

	gbRcvFlag = 0;
 8004472:	4b06      	ldr	r3, [pc, #24]	(800448c <zgb_initialize+0x24>)
 8004474:	2200      	movs	r2, #0
 8004476:	701a      	strb	r2, [r3, #0]
	gwRcvData = 0;
 8004478:	4b05      	ldr	r3, [pc, #20]	(8004490 <zgb_initialize+0x28>)
 800447a:	f04f 0100 	mov.w	r1, #0	; 0x0
 800447e:	8019      	strh	r1, [r3, #0]
	gbRcvPacketNum = 0;
 8004480:	4b04      	ldr	r3, [pc, #16]	(8004494 <zgb_initialize+0x2c>)
 8004482:	2001      	movs	r0, #1
 8004484:	701a      	strb	r2, [r3, #0]
	return 1;
}
 8004486:	b001      	add	sp, #4
 8004488:	bd00      	pop	{pc}
 800448a:	46c0      	nop			(mov r8, r8)
 800448c:	200005e4 	.word	0x200005e4
 8004490:	200005e2 	.word	0x200005e2
 8004494:	200005e1 	.word	0x200005e1

08004498 <SetEPort>:
PORT_SIG_MOT6P, PIN_SIG_MOT6P }, { PORT_SIG_MOT6M,
PIN_SIG_MOT6M } };



void SetEPort(EPortD_t pin, u8 state) {
 8004498:	b500      	push	{lr}
 800449a:	4b09      	ldr	r3, [pc, #36]	(80044c0 <SetEPort+0x28>)
 800449c:	b081      	sub	sp, #4
 800449e:	00c2      	lsls	r2, r0, #3
	if (state)
 80044a0:	b131      	cbz	r1, 80044b0 <SetEPort+0x18>
		GPIO_SetBits(EasyEPort[pin].port, EasyEPort[pin].pin);
 80044a2:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 80044a6:	189b      	adds	r3, r3, r2
 80044a8:	8899      	ldrh	r1, [r3, #4]
 80044aa:	f001 fc1b 	bl	8005ce4 <GPIO_SetBits>
 80044ae:	e005      	b.n	80044bc <SetEPort+0x24>
	else
		GPIO_ResetBits(EasyEPort[pin].port, EasyEPort[pin].pin);
 80044b0:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 80044b4:	189b      	adds	r3, r3, r2
 80044b6:	8899      	ldrh	r1, [r3, #4]
 80044b8:	f001 fc16 	bl	8005ce8 <GPIO_ResetBits>
}
 80044bc:	b001      	add	sp, #4
 80044be:	bd00      	pop	{pc}
 80044c0:	20000004 	.word	0x20000004

080044c4 <ReadAnalog>:

#define ANALOG_RIGHT_BIT_SHIFT          0
//##############################################################################
u16 ReadAnalog(EPortA_t port) {
 80044c4:	b510      	push	{r4, lr}
	if ((port == EPORT1A) || (port == EPORT4A)) {
 80044c6:	f1d0 0401 	rsbs	r4, r0, #1	; 0x1
 80044ca:	bf38      	it	cc
 80044cc:	2400      	movcc	r4, #0
 80044ce:	2803      	cmp	r0, #3
 80044d0:	bf14      	ite	ne
 80044d2:	4623      	movne	r3, r4
 80044d4:	f044 0301 	orreq.w	r3, r4, #1	; 0x1
 80044d8:	b123      	cbz	r3, 80044e4 <ReadAnalog+0x20>
		// Select EPORT1A and EPORT4A via multiplexer
		GPIO_ResetBits(PORT_ADC_SELECT0, PIN_ADC_SELECT0);
 80044da:	4833      	ldr	r0, [pc, #204]	(80045a8 <ReadAnalog+0xe4>)
 80044dc:	2102      	movs	r1, #2
 80044de:	f001 fc03 	bl	8005ce8 <GPIO_ResetBits>
 80044e2:	e00d      	b.n	8004500 <ReadAnalog+0x3c>
			ADC_SoftwareStartConvCmd(ADC2, ENABLE);
			uDelay(5);
			return (u16) (ADC_GetConversionValue(ADC2))
					>> ANALOG_RIGHT_BIT_SHIFT;
		}
	} else if ((port == EPORT2A) || (port == EPORT5A)) {
 80044e4:	2801      	cmp	r0, #1
 80044e6:	bf14      	ite	ne
 80044e8:	2400      	movne	r4, #0
 80044ea:	2401      	moveq	r4, #1
 80044ec:	2804      	cmp	r0, #4
 80044ee:	bf14      	ite	ne
 80044f0:	4623      	movne	r3, r4
 80044f2:	f044 0301 	orreq.w	r3, r4, #1	; 0x1
 80044f6:	b143      	cbz	r3, 800450a <ReadAnalog+0x46>
		// Select EPORT2A and EPORT5A via multiplexer
		GPIO_SetBits(PORT_ADC_SELECT0, PIN_ADC_SELECT0);
 80044f8:	482b      	ldr	r0, [pc, #172]	(80045a8 <ReadAnalog+0xe4>)
 80044fa:	2102      	movs	r1, #2
 80044fc:	f001 fbf2 	bl	8005ce4 <GPIO_SetBits>
		GPIO_ResetBits(PORT_ADC_SELECT1, PIN_ADC_SELECT1);
 8004500:	4829      	ldr	r0, [pc, #164]	(80045a8 <ReadAnalog+0xe4>)
 8004502:	2104      	movs	r1, #4
 8004504:	f001 fbf0 	bl	8005ce8 <GPIO_ResetBits>
 8004508:	e011      	b.n	800452e <ReadAnalog+0x6a>
			ADC_SoftwareStartConvCmd(ADC2, ENABLE);
			uDelay(5);
			return (u16) (ADC_GetConversionValue(ADC2))
					>> ANALOG_RIGHT_BIT_SHIFT;
		}
	} else if ((port == EPORT3A) || (port == EPORT6A)) {
 800450a:	2802      	cmp	r0, #2
 800450c:	bf14      	ite	ne
 800450e:	2400      	movne	r4, #0
 8004510:	2401      	moveq	r4, #1
 8004512:	2805      	cmp	r0, #5
 8004514:	bf14      	ite	ne
 8004516:	4623      	movne	r3, r4
 8004518:	f044 0301 	orreq.w	r3, r4, #1	; 0x1
 800451c:	b303      	cbz	r3, 8004560 <ReadAnalog+0x9c>
		// Select EPORT3A and EPORT6A via multiplexer
		GPIO_ResetBits(PORT_ADC_SELECT0, PIN_ADC_SELECT0);
 800451e:	4822      	ldr	r0, [pc, #136]	(80045a8 <ReadAnalog+0xe4>)
 8004520:	2102      	movs	r1, #2
 8004522:	f001 fbe1 	bl	8005ce8 <GPIO_ResetBits>
		GPIO_SetBits(PORT_ADC_SELECT1, PIN_ADC_SELECT1);
 8004526:	4820      	ldr	r0, [pc, #128]	(80045a8 <ReadAnalog+0xe4>)
 8004528:	2104      	movs	r1, #4
 800452a:	f001 fbdb 	bl	8005ce4 <GPIO_SetBits>

		uDelay(5);
 800452e:	2005      	movs	r0, #5
 8004530:	f000 f8d0 	bl	80046d4 <uDelay>

		if (port == EPORT3A) {
 8004534:	b144      	cbz	r4, 8004548 <ReadAnalog+0x84>
			// Start ADC1 Software Conversion
			ADC_SoftwareStartConvCmd(ADC1, ENABLE);
 8004536:	481d      	ldr	r0, [pc, #116]	(80045ac <ReadAnalog+0xe8>)
 8004538:	2101      	movs	r1, #1
 800453a:	f000 ff6b 	bl	8005414 <ADC_SoftwareStartConvCmd>
			uDelay(5);
 800453e:	2005      	movs	r0, #5
 8004540:	f000 f8c8 	bl	80046d4 <uDelay>
			return (u16) (ADC_GetConversionValue(ADC1))
 8004544:	4819      	ldr	r0, [pc, #100]	(80045ac <ReadAnalog+0xe8>)
 8004546:	e007      	b.n	8004558 <ReadAnalog+0x94>
					>> ANALOG_RIGHT_BIT_SHIFT;
		} else {
			// Start ADC2 Software Conversion
			ADC_SoftwareStartConvCmd(ADC2, ENABLE);
 8004548:	4819      	ldr	r0, [pc, #100]	(80045b0 <ReadAnalog+0xec>)
 800454a:	2101      	movs	r1, #1
 800454c:	f000 ff62 	bl	8005414 <ADC_SoftwareStartConvCmd>
			uDelay(5);
 8004550:	2005      	movs	r0, #5
 8004552:	f000 f8bf 	bl	80046d4 <uDelay>
			return (u16) (ADC_GetConversionValue(ADC2))
 8004556:	4816      	ldr	r0, [pc, #88]	(80045b0 <ReadAnalog+0xec>)
 8004558:	f000 ffd4 	bl	8005504 <ADC_GetConversionValue>
 800455c:	4604      	mov	r4, r0
 800455e:	e021      	b.n	80045a4 <ReadAnalog+0xe0>
					>> ANALOG_RIGHT_BIT_SHIFT;
		}
	} else if (port == VBUS) {
 8004560:	2806      	cmp	r0, #6
 8004562:	bf18      	it	ne
 8004564:	f44f 4400 	movne.w	r4, #32768	; 0x8000
 8004568:	d11c      	bne.n	80045a4 <ReadAnalog+0xe0>
		u16 temp;

		// Set ADC1 to read SIG_VDD/VBUS on Channel 13
		ADC_RegularChannelConfig(ADC1, ADC_Channel_13, 1,
 800456a:	2201      	movs	r2, #1
 800456c:	2307      	movs	r3, #7
 800456e:	210d      	movs	r1, #13
 8004570:	480e      	ldr	r0, [pc, #56]	(80045ac <ReadAnalog+0xe8>)
 8004572:	f000 ff71 	bl	8005458 <ADC_RegularChannelConfig>
		ADC_SampleTime_239Cycles5);
		uDelay(5);
 8004576:	2005      	movs	r0, #5
 8004578:	f000 f8ac 	bl	80046d4 <uDelay>
		ADC_SoftwareStartConvCmd(ADC1, ENABLE);
 800457c:	2101      	movs	r1, #1
 800457e:	480b      	ldr	r0, [pc, #44]	(80045ac <ReadAnalog+0xe8>)
 8004580:	f000 ff48 	bl	8005414 <ADC_SoftwareStartConvCmd>
		uDelay(5);
 8004584:	2005      	movs	r0, #5
 8004586:	f000 f8a5 	bl	80046d4 <uDelay>
		temp = (ADC_GetConversionValue(ADC1)) >> ANALOG_RIGHT_BIT_SHIFT;
 800458a:	4808      	ldr	r0, [pc, #32]	(80045ac <ReadAnalog+0xe8>)
 800458c:	f000 ffba 	bl	8005504 <ADC_GetConversionValue>

		// Set ADC1 to read SIG_ADC0 (ADC1 multiplexer output) on Channel 10
		ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 1,
 8004590:	210a      	movs	r1, #10
		ADC_RegularChannelConfig(ADC1, ADC_Channel_13, 1,
		ADC_SampleTime_239Cycles5);
		uDelay(5);
		ADC_SoftwareStartConvCmd(ADC1, ENABLE);
		uDelay(5);
		temp = (ADC_GetConversionValue(ADC1)) >> ANALOG_RIGHT_BIT_SHIFT;
 8004592:	4604      	mov	r4, r0

		// Set ADC1 to read SIG_ADC0 (ADC1 multiplexer output) on Channel 10
		ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 1,
 8004594:	2201      	movs	r2, #1
 8004596:	4805      	ldr	r0, [pc, #20]	(80045ac <ReadAnalog+0xe8>)
 8004598:	2307      	movs	r3, #7
 800459a:	f000 ff5d 	bl	8005458 <ADC_RegularChannelConfig>
		ADC_SampleTime_239Cycles5);
		uDelay(5);
 800459e:	2005      	movs	r0, #5
 80045a0:	f000 f898 	bl	80046d4 <uDelay>

		return temp;
	}
	return 0x8000;
}
 80045a4:	4620      	mov	r0, r4
 80045a6:	bd10      	pop	{r4, pc}
 80045a8:	40011000 	.word	0x40011000
 80045ac:	40012400 	.word	0x40012400
 80045b0:	40012800 	.word	0x40012800

080045b4 <Battery_Monitor_Alarm>:

	return temp;
}

//##############################################################################
void Battery_Monitor_Alarm(void) {
 80045b4:	b500      	push	{lr}
	u16 volt = ReadAnalog(VBUS) >> 4;
 80045b6:	2006      	movs	r0, #6

	return temp;
}

//##############################################################################
void Battery_Monitor_Alarm(void) {
 80045b8:	b081      	sub	sp, #4
	u16 volt = ReadAnalog(VBUS) >> 4;
 80045ba:	f7ff ff83 	bl	80044c4 <ReadAnalog>
	//Printu32d(volt);
	//PrintString("e-1 [Volts]\n");
#endif

	// ALARM!!!
	if (volt < VBUS_LOW_LIMIT) {
 80045be:	0900      	lsrs	r0, r0, #4
 80045c0:	b280      	uxth	r0, r0
 80045c2:	2872      	cmp	r0, #114
 80045c4:	d815      	bhi.n	80045f2 <Battery_Monitor_Alarm+0x3e>
		Buzzed(500, 100);
 80045c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80045ca:	2164      	movs	r1, #100
 80045cc:	f000 f85c 	bl	8004688 <Buzzed>
		Buzzed(500, 5000);
 80045d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80045d4:	f241 3188 	movw	r1, #5000	; 0x1388
 80045d8:	f000 f856 	bl	8004688 <Buzzed>
		Buzzed(500, 100);
 80045dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80045e0:	2164      	movs	r1, #100
 80045e2:	f000 f851 	bl	8004688 <Buzzed>
		Buzzed(500, 5000);
 80045e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80045ea:	f241 3188 	movw	r1, #5000	; 0x1388
 80045ee:	f000 f84b 	bl	8004688 <Buzzed>
		PrintString("Battery Voltage Critical");
		PrintString("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
#endif
	}
	return;
}
 80045f2:	b001      	add	sp, #4
 80045f4:	bd00      	pop	{pc}
 80045f6:	46c0      	nop			(mov r8, r8)

080045f8 <ReadIR>:
	}
	return 0x8000;
}

//##############################################################################
u16 ReadIR(EPortA_t port) {
 80045f8:	b570      	push	{r4, r5, r6, lr}
	u16 temp;

	SetEPort((port * 2), 1);
 80045fa:	0044      	lsls	r4, r0, #1
 80045fc:	b2e6      	uxtb	r6, r4
	SetEPort((port * 2) + 1, 0);
 80045fe:	3401      	adds	r4, #1
	}
	return 0x8000;
}

//##############################################################################
u16 ReadIR(EPortA_t port) {
 8004600:	4605      	mov	r5, r0
	u16 temp;

	SetEPort((port * 2), 1);
 8004602:	2101      	movs	r1, #1
 8004604:	4630      	mov	r0, r6
	SetEPort((port * 2) + 1, 0);
 8004606:	b2e4      	uxtb	r4, r4

//##############################################################################
u16 ReadIR(EPortA_t port) {
	u16 temp;

	SetEPort((port * 2), 1);
 8004608:	f7ff ff46 	bl	8004498 <SetEPort>
	SetEPort((port * 2) + 1, 0);
 800460c:	2100      	movs	r1, #0
 800460e:	4620      	mov	r0, r4
 8004610:	f7ff ff42 	bl	8004498 <SetEPort>

	uDelay(25);
 8004614:	2019      	movs	r0, #25
 8004616:	f000 f85d 	bl	80046d4 <uDelay>
	temp = ReadAnalog(port);
 800461a:	4628      	mov	r0, r5
 800461c:	f7ff ff52 	bl	80044c4 <ReadAnalog>

	SetEPort((port * 2), 0);
 8004620:	2100      	movs	r1, #0

	SetEPort((port * 2), 1);
	SetEPort((port * 2) + 1, 0);

	uDelay(25);
	temp = ReadAnalog(port);
 8004622:	4605      	mov	r5, r0

	SetEPort((port * 2), 0);
 8004624:	4630      	mov	r0, r6
 8004626:	f7ff ff37 	bl	8004498 <SetEPort>
	SetEPort((port * 2) + 1, 0);
 800462a:	4620      	mov	r0, r4
 800462c:	2100      	movs	r1, #0
 800462e:	f7ff ff33 	bl	8004498 <SetEPort>

	return temp;
}
 8004632:	4628      	mov	r0, r5
 8004634:	bd70      	pop	{r4, r5, r6, pc}
 8004636:	46c0      	nop			(mov r8, r8)

08004638 <ReadButton>:
EasyPort_t EasyButton[6] = { { PORT_SW_UP, PIN_SW_UP }, { PORT_SW_DOWN,
PIN_SW_DOWN }, { PORT_SW_LEFT, PIN_SW_LEFT }, {
PORT_SW_RIGHT, PIN_SW_RIGHT }, { PORT_SW_START,
PIN_SW_START }, { PORT_MIC, PIN_MIC } };
//##############################################################################
u8 ReadButton(Button_t button) {
 8004638:	b500      	push	{lr}
	if (GPIO_ReadInputDataBit(EasyButton[button].port, EasyButton[button].pin)	!= SET)
 800463a:	4b07      	ldr	r3, [pc, #28]	(8004658 <ReadButton+0x20>)
EasyPort_t EasyButton[6] = { { PORT_SW_UP, PIN_SW_UP }, { PORT_SW_DOWN,
PIN_SW_DOWN }, { PORT_SW_LEFT, PIN_SW_LEFT }, {
PORT_SW_RIGHT, PIN_SW_RIGHT }, { PORT_SW_START,
PIN_SW_START }, { PORT_MIC, PIN_MIC } };
//##############################################################################
u8 ReadButton(Button_t button) {
 800463c:	b081      	sub	sp, #4
	if (GPIO_ReadInputDataBit(EasyButton[button].port, EasyButton[button].pin)	!= SET)
 800463e:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
 8004642:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8004646:	8899      	ldrh	r1, [r3, #4]
 8004648:	4610      	mov	r0, r2
 800464a:	f001 fb37 	bl	8005cbc <GPIO_ReadInputDataBit>
 800464e:	3801      	subs	r0, #1
 8004650:	bf18      	it	ne
 8004652:	2001      	movne	r0, #1
		return 1;
	return 0;
}
 8004654:	b001      	add	sp, #4
 8004656:	bd00      	pop	{pc}
 8004658:	20000064 	.word	0x20000064

0800465c <SetLED>:
PIN_LED_MANAGE }, { PORT_LED_PROGRAM, PIN_LED_PROGRAM }, { PORT_LED_PLAY,
PIN_LED_PLAY }, { PORT_LED_TXD, PIN_LED_TXD }, { PORT_LED_RXD,
PIN_LED_RXD }, { PORT_LED_AUX, PIN_LED_AUX } };

//##############################################################################
void SetLED(LED_t led, u8 state) {
 800465c:	b500      	push	{lr}
 800465e:	4b09      	ldr	r3, [pc, #36]	(8004684 <SetLED+0x28>)
 8004660:	b081      	sub	sp, #4
 8004662:	00c2      	lsls	r2, r0, #3
	if (state)
 8004664:	b131      	cbz	r1, 8004674 <SetLED+0x18>
		GPIO_ResetBits(EasyLED[led].port, EasyLED[led].pin);
 8004666:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 800466a:	189b      	adds	r3, r3, r2
 800466c:	8899      	ldrh	r1, [r3, #4]
 800466e:	f001 fb3b 	bl	8005ce8 <GPIO_ResetBits>
 8004672:	e005      	b.n	8004680 <SetLED+0x24>
	else
		GPIO_SetBits(EasyLED[led].port, EasyLED[led].pin);
 8004674:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8004678:	189b      	adds	r3, r3, r2
 800467a:	8899      	ldrh	r1, [r3, #4]
 800467c:	f001 fb32 	bl	8005ce4 <GPIO_SetBits>
}
 8004680:	b001      	add	sp, #4
 8004682:	bd00      	pop	{pc}
 8004684:	20000094 	.word	0x20000094

08004688 <Buzzed>:
#include "system_init.h"
#include "system_func.h"


//##############################################################################
void Buzzed(u32 mlength, u32 tone) {
 8004688:	b530      	push	{r4, r5, lr}
 800468a:	b081      	sub	sp, #4
 800468c:	460c      	mov	r4, r1
	//   using uDelay(), 50% duty cycle, cents relative to A_5

//#define FREQTOTONE(f)    (5000000/f)    // (1/(2*1e-6*f))

	start_countdown_buzzer(mlength);
	while (glBuzzerCounter > 0) {
 800468e:	4d0b      	ldr	r5, [pc, #44]	(80046bc <Buzzed+0x34>)
	// tone = 1/(2*1e-6*f) = 1/(2*1e-6*440*2^(cents_relative/1200))
	//   using uDelay(), 50% duty cycle, cents relative to A_5

//#define FREQTOTONE(f)    (5000000/f)    // (1/(2*1e-6*f))

	start_countdown_buzzer(mlength);
 8004690:	f000 f84c 	bl	800472c <start_countdown_buzzer>
 8004694:	e00d      	b.n	80046b2 <Buzzed+0x2a>
	while (glBuzzerCounter > 0) {
		GPIO_ResetBits(PORT_BUZZER, PIN_BUZZER);
 8004696:	2140      	movs	r1, #64
 8004698:	4809      	ldr	r0, [pc, #36]	(80046c0 <Buzzed+0x38>)
 800469a:	f001 fb25 	bl	8005ce8 <GPIO_ResetBits>
		uDelay(tone);
 800469e:	4620      	mov	r0, r4
 80046a0:	f000 f818 	bl	80046d4 <uDelay>
		GPIO_SetBits(PORT_BUZZER, PIN_BUZZER);
 80046a4:	4806      	ldr	r0, [pc, #24]	(80046c0 <Buzzed+0x38>)
 80046a6:	2140      	movs	r1, #64
 80046a8:	f001 fb1c 	bl	8005ce4 <GPIO_SetBits>
		uDelay(tone);
 80046ac:	4620      	mov	r0, r4
 80046ae:	f000 f811 	bl	80046d4 <uDelay>
	//   using uDelay(), 50% duty cycle, cents relative to A_5

//#define FREQTOTONE(f)    (5000000/f)    // (1/(2*1e-6*f))

	start_countdown_buzzer(mlength);
	while (glBuzzerCounter > 0) {
 80046b2:	682b      	ldr	r3, [r5, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1ee      	bne.n	8004696 <Buzzed+0xe>
		GPIO_ResetBits(PORT_BUZZER, PIN_BUZZER);
		uDelay(tone);
		GPIO_SetBits(PORT_BUZZER, PIN_BUZZER);
		uDelay(tone);
	}
}
 80046b8:	b001      	add	sp, #4
 80046ba:	bd30      	pop	{r4, r5, pc}
 80046bc:	200005fc 	.word	0x200005fc
 80046c0:	40010800 	.word	0x40010800

080046c4 <PlayNote>:

//##############################################################################
void PlayNote(u32 mlength, buzzed_note_t note, u8 octave) {
 80046c4:	b500      	push	{lr}
	Buzzed(mlength, (u32) (note >> octave));
 80046c6:	4111      	asrs	r1, r2
		uDelay(tone);
	}
}

//##############################################################################
void PlayNote(u32 mlength, buzzed_note_t note, u8 octave) {
 80046c8:	b081      	sub	sp, #4
	Buzzed(mlength, (u32) (note >> octave));
 80046ca:	f7ff ffdd 	bl	8004688 <Buzzed>
}
 80046ce:	b001      	add	sp, #4
 80046d0:	bd00      	pop	{pc}
 80046d2:	46c0      	nop			(mov r8, r8)

080046d4 <uDelay>:
	uDelay(nTime * 1000);
}

//##############################################################################
void uDelay(u32 nTime) {
	if (glDelayCounter == 0)
 80046d4:	4b0c      	ldr	r3, [pc, #48]	(8004708 <uDelay+0x34>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	b923      	cbnz	r3, 80046e4 <uDelay+0x10>
		gbCounterCount++;
 80046da:	4a0c      	ldr	r2, [pc, #48]	(800470c <uDelay+0x38>)
 80046dc:	7813      	ldrb	r3, [r2, #0]
 80046de:	3301      	adds	r3, #1
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	7013      	strb	r3, [r2, #0]
	if (nTime>=100)
	glDelayCounter = (nTime/100);
	else
	glDelayCounter = 1;
#elif defined USING_SYSTICK_10US
	if (nTime >= 10)
 80046e4:	2809      	cmp	r0, #9
 80046e6:	4908      	ldr	r1, [pc, #32]	(8004708 <uDelay+0x34>)
 80046e8:	d904      	bls.n	80046f4 <uDelay+0x20>
		glDelayCounter = (nTime / 10);
 80046ea:	4a09      	ldr	r2, [pc, #36]	(8004710 <uDelay+0x3c>)
 80046ec:	fba0 2302 	umull	r2, r3, r0, r2
 80046f0:	08db      	lsrs	r3, r3, #3
 80046f2:	e000      	b.n	80046f6 <uDelay+0x22>
	else
		glDelayCounter = 1;
 80046f4:	2301      	movs	r3, #1
 80046f6:	600b      	str	r3, [r1, #0]
#elif defined USING_SYSTICK_1US
	glDelayCounter = (nTime);
#endif

	if (gbCounterCount == 1) {
 80046f8:	4b04      	ldr	r3, [pc, #16]	(800470c <uDelay+0x38>)
		// Enable the SysTick Counter
		//SysTick_CounterCmd(SysTick_Counter_Enable);
	}

	while (glDelayCounter != 0)
 80046fa:	4a03      	ldr	r2, [pc, #12]	(8004708 <uDelay+0x34>)
		glDelayCounter = 1;
#elif defined USING_SYSTICK_1US
	glDelayCounter = (nTime);
#endif

	if (gbCounterCount == 1) {
 80046fc:	781b      	ldrb	r3, [r3, #0]
		// Enable the SysTick Counter
		//SysTick_CounterCmd(SysTick_Counter_Enable);
	}

	while (glDelayCounter != 0)
 80046fe:	6813      	ldr	r3, [r2, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1fc      	bne.n	80046fe <uDelay+0x2a>
		;
}
 8004704:	4770      	bx	lr
 8004706:	46c0      	nop			(mov r8, r8)
 8004708:	200005ec 	.word	0x200005ec
 800470c:	20000600 	.word	0x20000600
 8004710:	cccccccd 	.word	0xcccccccd

08004714 <mDelay>:
void BreakToBootLoader(void);
#endif


//##############################################################################
void mDelay(u32 nTime) {
 8004714:	b500      	push	{lr}
	uDelay(nTime * 1000);
 8004716:	ebc0 1340 	rsb	r3, r0, r0, lsl #5
 800471a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
void BreakToBootLoader(void);
#endif


//##############################################################################
void mDelay(u32 nTime) {
 800471e:	b081      	sub	sp, #4
	uDelay(nTime * 1000);
 8004720:	00c0      	lsls	r0, r0, #3
 8004722:	f7ff ffd7 	bl	80046d4 <uDelay>
}
 8004726:	b001      	add	sp, #4
 8004728:	bd00      	pop	{pc}
 800472a:	46c0      	nop			(mov r8, r8)

0800472c <start_countdown_buzzer>:
	SetLED(AUX, 1);
}

//##############################################################################
void start_countdown_buzzer(u32 nTime) {
	if (glBuzzerCounter == 0)
 800472c:	4b07      	ldr	r3, [pc, #28]	(800474c <start_countdown_buzzer+0x20>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	b923      	cbnz	r3, 800473c <start_countdown_buzzer+0x10>
		gbCounterCount++;
 8004732:	4a07      	ldr	r2, [pc, #28]	(8004750 <start_countdown_buzzer+0x24>)
 8004734:	7813      	ldrb	r3, [r2, #0]
 8004736:	3301      	adds	r3, #1
 8004738:	b2db      	uxtb	r3, r3
 800473a:	7013      	strb	r3, [r2, #0]
#ifdef USING_SYSTICK_1000US
	glCountdownCounter = (StartTime*1);
#elif USING_SYSTICK_100US
	glBuzzerCounter = (nTime*10);
#elif defined USING_SYSTICK_10US
	glBuzzerCounter = (nTime * 100);
 800473c:	2364      	movs	r3, #100
 800473e:	fb03 f300 	mul.w	r3, r3, r0
 8004742:	4a02      	ldr	r2, [pc, #8]	(800474c <start_countdown_buzzer+0x20>)
 8004744:	6013      	str	r3, [r2, #0]
#elif defined USING_SYSTICK_1US
	glBuzzerCounter = (nTime*1000);
#endif

	if (gbCounterCount == 1) {
 8004746:	4b02      	ldr	r3, [pc, #8]	(8004750 <start_countdown_buzzer+0x24>)
 8004748:	781b      	ldrb	r3, [r3, #0]
		// Enable the SysTick Counter
		//SysTick_CounterCmd(SysTick_Counter_Enable);
	}
}
 800474a:	4770      	bx	lr
 800474c:	200005fc 	.word	0x200005fc
 8004750:	20000600 	.word	0x20000600

08004754 <start_timeout_dxl>:

//##############################################################################
void start_timeout_dxl(u32 nTime) {
	if (glDxlTimeoutCounter == 0)
 8004754:	4b0a      	ldr	r3, [pc, #40]	(8004780 <start_timeout_dxl+0x2c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	b923      	cbnz	r3, 8004764 <start_timeout_dxl+0x10>
		gbCounterCount++;
 800475a:	4a0a      	ldr	r2, [pc, #40]	(8004784 <start_timeout_dxl+0x30>)
 800475c:	7813      	ldrb	r3, [r2, #0]
 800475e:	3301      	adds	r3, #1
 8004760:	b2db      	uxtb	r3, r3
 8004762:	7013      	strb	r3, [r2, #0]
	if (nTime>=100)
	glDxlTimeoutCounter = (nTime/100);
	else
	glDxlTimeoutCounter = 1;
#elif defined USING_SYSTICK_10US
	if (nTime >= 10)
 8004764:	2809      	cmp	r0, #9
 8004766:	4906      	ldr	r1, [pc, #24]	(8004780 <start_timeout_dxl+0x2c>)
 8004768:	d904      	bls.n	8004774 <start_timeout_dxl+0x20>
		glDxlTimeoutCounter = (nTime / 10);
 800476a:	4a07      	ldr	r2, [pc, #28]	(8004788 <start_timeout_dxl+0x34>)
 800476c:	fba0 2302 	umull	r2, r3, r0, r2
 8004770:	08db      	lsrs	r3, r3, #3
 8004772:	e000      	b.n	8004776 <start_timeout_dxl+0x22>
	else
		glDxlTimeoutCounter = 1;
 8004774:	2301      	movs	r3, #1
 8004776:	600b      	str	r3, [r1, #0]
#elif defined USING_SYSTICK_1US
	glDxlTimeoutCounter = (nTime);
#endif

	if (gbCounterCount == 1) {
 8004778:	4b02      	ldr	r3, [pc, #8]	(8004784 <start_timeout_dxl+0x30>)
 800477a:	781b      	ldrb	r3, [r3, #0]
		// Enable the SysTick Counter
		//SysTick_CounterCmd(SysTick_Counter_Enable);
	}
}
 800477c:	4770      	bx	lr
 800477e:	46c0      	nop			(mov r8, r8)
 8004780:	200005f4 	.word	0x200005f4
 8004784:	20000600 	.word	0x20000600
 8004788:	cccccccd 	.word	0xcccccccd

0800478c <start_timeout_pcu>:

//##############################################################################
void start_timeout_pcu(u32 nTime) {
	if (glPcuTimeoutCounter == 0)
 800478c:	4b0a      	ldr	r3, [pc, #40]	(80047b8 <start_timeout_pcu+0x2c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	b923      	cbnz	r3, 800479c <start_timeout_pcu+0x10>
		gbCounterCount++;
 8004792:	4a0a      	ldr	r2, [pc, #40]	(80047bc <start_timeout_pcu+0x30>)
 8004794:	7813      	ldrb	r3, [r2, #0]
 8004796:	3301      	adds	r3, #1
 8004798:	b2db      	uxtb	r3, r3
 800479a:	7013      	strb	r3, [r2, #0]
	if (nTime>=100)
	glPcuTimeoutCounter = (nTime/100);
	else
	glPcuTimeoutCounter = 1;
#elif defined USING_SYSTICK_10US
	if (nTime >= 10)
 800479c:	2809      	cmp	r0, #9
 800479e:	4906      	ldr	r1, [pc, #24]	(80047b8 <start_timeout_pcu+0x2c>)
 80047a0:	d904      	bls.n	80047ac <start_timeout_pcu+0x20>
		glPcuTimeoutCounter = (nTime / 10);
 80047a2:	4a07      	ldr	r2, [pc, #28]	(80047c0 <start_timeout_pcu+0x34>)
 80047a4:	fba0 2302 	umull	r2, r3, r0, r2
 80047a8:	08db      	lsrs	r3, r3, #3
 80047aa:	e000      	b.n	80047ae <start_timeout_pcu+0x22>
	else
		glPcuTimeoutCounter = 1;
 80047ac:	2301      	movs	r3, #1
 80047ae:	600b      	str	r3, [r1, #0]
#elif defined USING_SYSTICK_1US
	glPcuTimeoutCounter = (nTime);
#endif

	if (gbCounterCount == 1) {
 80047b0:	4b02      	ldr	r3, [pc, #8]	(80047bc <start_timeout_pcu+0x30>)
 80047b2:	781b      	ldrb	r3, [r3, #0]
		// Enable the SysTick Counter
		//SysTick_CounterCmd(SysTick_Counter_Enable);
	}
}
 80047b4:	4770      	bx	lr
 80047b6:	46c0      	nop			(mov r8, r8)
 80047b8:	200005f8 	.word	0x200005f8
 80047bc:	20000600 	.word	0x20000600
 80047c0:	cccccccd 	.word	0xcccccccd

080047c4 <getMillis>:

//##############################################################################
u32 getMillis(){
	/**msMillis = (Millis * (u32)(0.001)); //convert us to ms
	return msMillis;*/
	return (Millis/100) ;
 80047c4:	4b03      	ldr	r3, [pc, #12]	(80047d4 <getMillis+0x10>)
 80047c6:	4904      	ldr	r1, [pc, #16]	(80047d8 <getMillis+0x14>)
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	fba2 2301 	umull	r2, r3, r2, r1
 80047ce:	0958      	lsrs	r0, r3, #5
}
 80047d0:	4770      	bx	lr
 80047d2:	46c0      	nop			(mov r8, r8)
 80047d4:	20000604 	.word	0x20000604
 80047d8:	51eb851f 	.word	0x51eb851f

080047dc <ISR_Delay_Base>:
//}
//##############################################################################
void ISR_Delay_Base(void) {

	Millis++;
 80047dc:	4b37      	ldr	r3, [pc, #220]	(80048bc <ISR_Delay_Base+0xe0>)
	return msMillis;*/
	return (Millis/100) ;
}
//}
//##############################################################################
void ISR_Delay_Base(void) {
 80047de:	b510      	push	{r4, lr}

	Millis++;
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	3201      	adds	r2, #1
 80047e4:	601a      	str	r2, [r3, #0]

	// User accessible delay counter
	if (glDelayCounter > 1)
 80047e6:	4a36      	ldr	r2, [pc, #216]	(80048c0 <ISR_Delay_Base+0xe4>)
 80047e8:	6813      	ldr	r3, [r2, #0]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d903      	bls.n	80047f6 <ISR_Delay_Base+0x1a>
		glDelayCounter--;
 80047ee:	6813      	ldr	r3, [r2, #0]
 80047f0:	3b01      	subs	r3, #1
 80047f2:	6013      	str	r3, [r2, #0]
 80047f4:	e009      	b.n	800480a <ISR_Delay_Base+0x2e>
	else if (glDelayCounter > 0) {
 80047f6:	6813      	ldr	r3, [r2, #0]
 80047f8:	b13b      	cbz	r3, 800480a <ISR_Delay_Base+0x2e>
		glDelayCounter--;
 80047fa:	6813      	ldr	r3, [r2, #0]
 80047fc:	3b01      	subs	r3, #1
 80047fe:	6013      	str	r3, [r2, #0]
		gbCounterCount--;
 8004800:	4a30      	ldr	r2, [pc, #192]	(80048c4 <ISR_Delay_Base+0xe8>)
 8004802:	7813      	ldrb	r3, [r2, #0]
 8004804:	3b01      	subs	r3, #1
 8004806:	b2db      	uxtb	r3, r3
 8004808:	7013      	strb	r3, [r2, #0]
	}

	// User accessible timeout/countdown counter
	if (glCountdownCounter > 1) {
 800480a:	4c2f      	ldr	r4, [pc, #188]	(80048c8 <ISR_Delay_Base+0xec>)
 800480c:	6823      	ldr	r3, [r4, #0]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d90e      	bls.n	8004830 <ISR_Delay_Base+0x54>
		glCountdownCounter--;
 8004812:	6823      	ldr	r3, [r4, #0]
 8004814:	3b01      	subs	r3, #1
 8004816:	6023      	str	r3, [r4, #0]
#ifdef USING_SYSTICK_1000US
		if ( (glCountdownCounter&0x00000300) )
#elif USING_SYSTICK_100US
		if ( (glCountdownCounter&0x00000200) )
#elif defined USING_SYSTICK_10US
		if ((glCountdownCounter & 0x00001000))
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800481e:	d002      	beq.n	8004826 <ISR_Delay_Base+0x4a>
#elif defined USING_SYSTICK_1US
			if ( (glCountdownCounter&0x00010000) )
#endif
			SetLED(AUX, 1);
 8004820:	2006      	movs	r0, #6
 8004822:	2101      	movs	r1, #1
 8004824:	e001      	b.n	800482a <ISR_Delay_Base+0x4e>
		else
			SetLED(AUX, 0);
 8004826:	2006      	movs	r0, #6
 8004828:	2100      	movs	r1, #0
 800482a:	f7ff ff17 	bl	800465c <SetLED>
 800482e:	e00d      	b.n	800484c <ISR_Delay_Base+0x70>
	} else if (glCountdownCounter > 0) {
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	b15b      	cbz	r3, 800484c <ISR_Delay_Base+0x70>
		SetLED(AUX, 0);
 8004834:	2006      	movs	r0, #6
 8004836:	2100      	movs	r1, #0
 8004838:	f7ff ff10 	bl	800465c <SetLED>
		glCountdownCounter--;
 800483c:	6823      	ldr	r3, [r4, #0]
		gbCounterCount--;
 800483e:	4a21      	ldr	r2, [pc, #132]	(80048c4 <ISR_Delay_Base+0xe8>)
			SetLED(AUX, 1);
		else
			SetLED(AUX, 0);
	} else if (glCountdownCounter > 0) {
		SetLED(AUX, 0);
		glCountdownCounter--;
 8004840:	3b01      	subs	r3, #1
 8004842:	6023      	str	r3, [r4, #0]
		gbCounterCount--;
 8004844:	7813      	ldrb	r3, [r2, #0]
 8004846:	3b01      	subs	r3, #1
 8004848:	b2db      	uxtb	r3, r3
 800484a:	7013      	strb	r3, [r2, #0]
	}

	// Buzzer countdown counter
	if (glBuzzerCounter > 1)
 800484c:	4a1f      	ldr	r2, [pc, #124]	(80048cc <ISR_Delay_Base+0xf0>)
 800484e:	6813      	ldr	r3, [r2, #0]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d903      	bls.n	800485c <ISR_Delay_Base+0x80>
		glBuzzerCounter--;
 8004854:	6813      	ldr	r3, [r2, #0]
 8004856:	3b01      	subs	r3, #1
 8004858:	6013      	str	r3, [r2, #0]
 800485a:	e009      	b.n	8004870 <ISR_Delay_Base+0x94>
	else if (glBuzzerCounter > 0) {
 800485c:	6813      	ldr	r3, [r2, #0]
 800485e:	b13b      	cbz	r3, 8004870 <ISR_Delay_Base+0x94>
		glBuzzerCounter--;
 8004860:	6813      	ldr	r3, [r2, #0]
 8004862:	3b01      	subs	r3, #1
 8004864:	6013      	str	r3, [r2, #0]
		gbCounterCount--;
 8004866:	4a17      	ldr	r2, [pc, #92]	(80048c4 <ISR_Delay_Base+0xe8>)
 8004868:	7813      	ldrb	r3, [r2, #0]
 800486a:	3b01      	subs	r3, #1
 800486c:	b2db      	uxtb	r3, r3
 800486e:	7013      	strb	r3, [r2, #0]
	}

	// Dynamixel timeout counter
	if (glDxlTimeoutCounter > 1)
 8004870:	4a17      	ldr	r2, [pc, #92]	(80048d0 <ISR_Delay_Base+0xf4>)
 8004872:	6813      	ldr	r3, [r2, #0]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d903      	bls.n	8004880 <ISR_Delay_Base+0xa4>
		glDxlTimeoutCounter--;
 8004878:	6813      	ldr	r3, [r2, #0]
 800487a:	3b01      	subs	r3, #1
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	e009      	b.n	8004894 <ISR_Delay_Base+0xb8>
	else if (glDxlTimeoutCounter > 0) {
 8004880:	6813      	ldr	r3, [r2, #0]
 8004882:	b13b      	cbz	r3, 8004894 <ISR_Delay_Base+0xb8>
		glDxlTimeoutCounter--;
 8004884:	6813      	ldr	r3, [r2, #0]
 8004886:	3b01      	subs	r3, #1
 8004888:	6013      	str	r3, [r2, #0]
		gbCounterCount--;
 800488a:	4a0e      	ldr	r2, [pc, #56]	(80048c4 <ISR_Delay_Base+0xe8>)
 800488c:	7813      	ldrb	r3, [r2, #0]
 800488e:	3b01      	subs	r3, #1
 8004890:	b2db      	uxtb	r3, r3
 8004892:	7013      	strb	r3, [r2, #0]
	}

	// PC UART timeout counter
	if (glPcuTimeoutCounter > 1)
 8004894:	4a0f      	ldr	r2, [pc, #60]	(80048d4 <ISR_Delay_Base+0xf8>)
 8004896:	6813      	ldr	r3, [r2, #0]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d903      	bls.n	80048a4 <ISR_Delay_Base+0xc8>
		glPcuTimeoutCounter--;
 800489c:	6813      	ldr	r3, [r2, #0]
 800489e:	3b01      	subs	r3, #1
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	e009      	b.n	80048b8 <ISR_Delay_Base+0xdc>
	else if (glPcuTimeoutCounter > 0) {
 80048a4:	6813      	ldr	r3, [r2, #0]
 80048a6:	b13b      	cbz	r3, 80048b8 <ISR_Delay_Base+0xdc>
		glPcuTimeoutCounter--;
 80048a8:	6813      	ldr	r3, [r2, #0]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	6013      	str	r3, [r2, #0]
		gbCounterCount--;
 80048ae:	4a05      	ldr	r2, [pc, #20]	(80048c4 <ISR_Delay_Base+0xe8>)
 80048b0:	7813      	ldrb	r3, [r2, #0]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	7013      	strb	r3, [r2, #0]
		// Disable SysTick Counter
		SysTick_CounterCmd(SysTick_Counter_Disable);
		// Clear SysTick Counter
		SysTick_CounterCmd(SysTick_Counter_Clear);
	}*/
}
 80048b8:	bd10      	pop	{r4, pc}
 80048ba:	46c0      	nop			(mov r8, r8)
 80048bc:	20000604 	.word	0x20000604
 80048c0:	200005ec 	.word	0x200005ec
 80048c4:	20000600 	.word	0x20000600
 80048c8:	200005f0 	.word	0x200005f0
 80048cc:	200005fc 	.word	0x200005fc
 80048d0:	200005f4 	.word	0x200005f4
 80048d4:	200005f8 	.word	0x200005f8

080048d8 <StartCountdown>:
	while (glDelayCounter != 0)
		;
}

//##############################################################################
void StartCountdown(u32 StartTime) {
 80048d8:	b500      	push	{lr}
	if (glCountdownCounter == 0)
 80048da:	4b0b      	ldr	r3, [pc, #44]	(8004908 <StartCountdown+0x30>)
	while (glDelayCounter != 0)
		;
}

//##############################################################################
void StartCountdown(u32 StartTime) {
 80048dc:	b081      	sub	sp, #4
	if (glCountdownCounter == 0)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	b923      	cbnz	r3, 80048ec <StartCountdown+0x14>
		gbCounterCount++;
 80048e2:	4a0a      	ldr	r2, [pc, #40]	(800490c <StartCountdown+0x34>)
 80048e4:	7813      	ldrb	r3, [r2, #0]
 80048e6:	3301      	adds	r3, #1
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	7013      	strb	r3, [r2, #0]
#ifdef USING_SYSTICK_1000US
	glCountdownCounter = (StartTime*1);
#elif USING_SYSTICK_100US
	glCountdownCounter = (StartTime*10);
#elif defined USING_SYSTICK_10US
	glCountdownCounter = (StartTime * 100);
 80048ec:	2364      	movs	r3, #100
 80048ee:	fb03 f300 	mul.w	r3, r3, r0
 80048f2:	4a05      	ldr	r2, [pc, #20]	(8004908 <StartCountdown+0x30>)
	if (gbCounterCount == 1) {
		// Enable the SysTick Counter
		//SysTick_CounterCmd(SysTick_Counter_Enable);
	}

	SetLED(AUX, 1);
 80048f4:	2006      	movs	r0, #6
#ifdef USING_SYSTICK_1000US
	glCountdownCounter = (StartTime*1);
#elif USING_SYSTICK_100US
	glCountdownCounter = (StartTime*10);
#elif defined USING_SYSTICK_10US
	glCountdownCounter = (StartTime * 100);
 80048f6:	6013      	str	r3, [r2, #0]
#elif defined USING_SYSTICK_1US
	glCountdownCounter = (StartTime*1000);
#endif

	if (gbCounterCount == 1) {
 80048f8:	4b04      	ldr	r3, [pc, #16]	(800490c <StartCountdown+0x34>)
		// Enable the SysTick Counter
		//SysTick_CounterCmd(SysTick_Counter_Enable);
	}

	SetLED(AUX, 1);
 80048fa:	2101      	movs	r1, #1
	glCountdownCounter = (StartTime * 100);
#elif defined USING_SYSTICK_1US
	glCountdownCounter = (StartTime*1000);
#endif

	if (gbCounterCount == 1) {
 80048fc:	781b      	ldrb	r3, [r3, #0]
		// Enable the SysTick Counter
		//SysTick_CounterCmd(SysTick_Counter_Enable);
	}

	SetLED(AUX, 1);
 80048fe:	f7ff fead 	bl	800465c <SetLED>
}
 8004902:	b001      	add	sp, #4
 8004904:	bd00      	pop	{pc}
 8004906:	46c0      	nop			(mov r8, r8)
 8004908:	200005f0 	.word	0x200005f0
 800490c:	20000600 	.word	0x20000600

08004910 <USART_Configuration>:
	// Reset Active Counter count
	gbCounterCount = 0;
}
//##############################################################################
//void USART_Configuration(){
void USART_Configuration(){
 8004910:	b500      	push	{lr}
	u16 error = 0;

#ifdef USING_PC_UART
	mDelay(100);
 8004912:	2064      	movs	r0, #100
	// Reset Active Counter count
	gbCounterCount = 0;
}
//##############################################################################
//void USART_Configuration(){
void USART_Configuration(){
 8004914:	b081      	sub	sp, #4
	u16 error = 0;

#ifdef USING_PC_UART
	mDelay(100);
 8004916:	f7ff fefd 	bl	8004714 <mDelay>
	if (!pcu_initialize(Baudrate_PCU))
 800491a:	4b0a      	ldr	r3, [pc, #40]	(8004944 <USART_Configuration+0x34>)
 800491c:	6818      	ldr	r0, [r3, #0]
 800491e:	f7ff f979 	bl	8003c14 <pcu_initialize>
		error |= (1 << 0);
#endif
#ifdef USING_ZIGBEE
	mDelay(100);
 8004922:	2064      	movs	r0, #100
 8004924:	f7ff fef6 	bl	8004714 <mDelay>
	if (!zgb_initialize(Baudrate_ZIG))
 8004928:	4b07      	ldr	r3, [pc, #28]	(8004948 <USART_Configuration+0x38>)
 800492a:	6818      	ldr	r0, [r3, #0]
 800492c:	f7ff fd9c 	bl	8004468 <zgb_initialize>
	error|=(1<<1);
#endif
#ifdef USING_DYNAMIXEL
	mDelay(100);
 8004930:	2064      	movs	r0, #100
 8004932:	f7ff feef 	bl	8004714 <mDelay>
	if (!dxl_initialize(Baudrate_DXL))
 8004936:	4b05      	ldr	r3, [pc, #20]	(800494c <USART_Configuration+0x3c>)
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	f7ff fbf9 	bl	8004130 <dxl_initialize>
		error |= (1 << 2);
#endif
}
 800493e:	b001      	add	sp, #4
 8004940:	bd00      	pop	{pc}
 8004942:	46c0      	nop			(mov r8, r8)
 8004944:	200000d4 	.word	0x200000d4
 8004948:	200000d0 	.word	0x200000d0
 800494c:	200000cc 	.word	0x200000cc

08004950 <SysTick_Configuration>:
		// Start ADC2 Software Conversion
		ADC_SoftwareStartConvCmd(ADC1, ENABLE);
		ADC_SoftwareStartConvCmd(ADC2, ENABLE);
}
//##############################################################################
void SysTick_Configuration(void) {
 8004950:	b500      	push	{lr}
#elif USING_SYSTICK_100US
	// SysTick end of count event each 100us with input clock equal to 9MHz (HCLK/8, default)
	SysTick_SetReload(900);
#elif defined USING_SYSTICK_10US
	// SysTick end of count event each 10us with input clock equal to 9MHz (HCLK/8, default)
	SysTick_SetReload(90);
 8004952:	205a      	movs	r0, #90
		// Start ADC2 Software Conversion
		ADC_SoftwareStartConvCmd(ADC1, ENABLE);
		ADC_SoftwareStartConvCmd(ADC2, ENABLE);
}
//##############################################################################
void SysTick_Configuration(void) {
 8004954:	b081      	sub	sp, #4
#elif USING_SYSTICK_100US
	// SysTick end of count event each 100us with input clock equal to 9MHz (HCLK/8, default)
	SysTick_SetReload(900);
#elif defined USING_SYSTICK_10US
	// SysTick end of count event each 10us with input clock equal to 9MHz (HCLK/8, default)
	SysTick_SetReload(90);
 8004956:	f001 feab 	bl	80066b0 <SysTick_SetReload>
#elif defined USING_SYSTICK_1US
	// SysTick end of count event each 1us with input clock equal to 9MHz (HCLK/8, default)
	SysTick_SetReload(9);
#endif
	// Enable SysTick interrupt
	SysTick_ITConfig(ENABLE);
 800495a:	2001      	movs	r0, #1
 800495c:	f001 fec4 	bl	80066e8 <SysTick_ITConfig>

	// Enable the SysTick Counter
    SysTick_CounterCmd(SysTick_Counter_Enable);
 8004960:	2001      	movs	r0, #1
 8004962:	f001 feab 	bl	80066bc <SysTick_CounterCmd>

	// Reset Active Counter count
	gbCounterCount = 0;
 8004966:	4b02      	ldr	r3, [pc, #8]	(8004970 <SysTick_Configuration+0x20>)
 8004968:	2200      	movs	r2, #0
 800496a:	701a      	strb	r2, [r3, #0]
}
 800496c:	b001      	add	sp, #4
 800496e:	bd00      	pop	{pc}
 8004970:	20000600 	.word	0x20000600

08004974 <ADC_Configuration>:

		GPIO_PinRemapConfig( GPIO_Remap_USART1, ENABLE);
		GPIO_PinRemapConfig( GPIO_Remap_SWJ_Disable, ENABLE);
}
//##############################################################################
void ADC_Configuration(void) {
 8004974:	b570      	push	{r4, r5, r6, lr}
 8004976:	b086      	sub	sp, #24
	ADC_InitTypeDef ADC_InitStructure;

		ADC_StructInit(&ADC_InitStructure);
 8004978:	ad01      	add	r5, sp, #4
 800497a:	4628      	mov	r0, r5
 800497c:	f000 fd08 	bl	8005390 <ADC_StructInit>

		// ADC1 configuration
		ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
 8004980:	2400      	movs	r4, #0
		ADC_InitStructure.ADC_ScanConvMode = DISABLE;
		ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
		ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
		ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
		ADC_InitStructure.ADC_NbrOfChannel = 2;
 8004982:	2302      	movs	r3, #2

		// ADC1 configuration
		ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
		ADC_InitStructure.ADC_ScanConvMode = DISABLE;
		ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
		ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 8004984:	f44f 2660 	mov.w	r6, #917504	; 0xe0000
		ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
		ADC_InitStructure.ADC_NbrOfChannel = 2;

		ADC_Init(ADC1, &ADC_InitStructure);
 8004988:	4832      	ldr	r0, [pc, #200]	(8004a54 <ADC_Configuration+0xe0>)
 800498a:	4629      	mov	r1, r5
		ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
		ADC_InitStructure.ADC_ScanConvMode = DISABLE;
		ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
		ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
		ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
		ADC_InitStructure.ADC_NbrOfChannel = 2;
 800498c:	f88d 3014 	strb.w	r3, [sp, #20]
	ADC_InitTypeDef ADC_InitStructure;

		ADC_StructInit(&ADC_InitStructure);

		// ADC1 configuration
		ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
 8004990:	9401      	str	r4, [sp, #4]
		ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 8004992:	f88d 4008 	strb.w	r4, [sp, #8]
		ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 8004996:	f88d 4009 	strb.w	r4, [sp, #9]
		ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 800499a:	9603      	str	r6, [sp, #12]
		ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 800499c:	9404      	str	r4, [sp, #16]
		ADC_InitStructure.ADC_NbrOfChannel = 2;

		ADC_Init(ADC1, &ADC_InitStructure);
 800499e:	f000 fcd3 	bl	8005348 <ADC_Init>
		ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
		ADC_InitStructure.ADC_ScanConvMode = DISABLE;
		ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
		ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
		ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
		ADC_InitStructure.ADC_NbrOfChannel = 1;
 80049a2:	2301      	movs	r3, #1

		ADC_Init(ADC2, &ADC_InitStructure);
 80049a4:	482c      	ldr	r0, [pc, #176]	(8004a58 <ADC_Configuration+0xe4>)
 80049a6:	4629      	mov	r1, r5
		ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
		ADC_InitStructure.ADC_ScanConvMode = DISABLE;
		ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
		ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
		ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
		ADC_InitStructure.ADC_NbrOfChannel = 1;
 80049a8:	f88d 3014 	strb.w	r3, [sp, #20]
		ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
		ADC_InitStructure.ADC_NbrOfChannel = 2;

		ADC_Init(ADC1, &ADC_InitStructure);

		ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
 80049ac:	9401      	str	r4, [sp, #4]
		ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 80049ae:	f88d 4008 	strb.w	r4, [sp, #8]
		ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 80049b2:	f88d 4009 	strb.w	r4, [sp, #9]
		ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 80049b6:	9603      	str	r6, [sp, #12]
		ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 80049b8:	9404      	str	r4, [sp, #16]
		ADC_InitStructure.ADC_NbrOfChannel = 1;

		ADC_Init(ADC2, &ADC_InitStructure);
 80049ba:	f000 fcc5 	bl	8005348 <ADC_Init>

		// ADC1 regular channels configuration
		// Set ADC1 to read SIG_ADC0 (ADC1 multiplexer output) on Channel 10
		ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 1,
 80049be:	4825      	ldr	r0, [pc, #148]	(8004a54 <ADC_Configuration+0xe0>)
 80049c0:	210a      	movs	r1, #10
 80049c2:	2201      	movs	r2, #1
 80049c4:	2307      	movs	r3, #7
 80049c6:	f000 fd47 	bl	8005458 <ADC_RegularChannelConfig>
	//    ADC_RegularChannelConfig(ADC1, ADC_Channel_13, 1 , ADC_SampleTime_239Cycles5);    // SIG_VDD/VBUS
		//ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);

		// ADC2 regular channels configuration
		// Set ADC2 to read SIG_ADC1 (ADC2 multiplexer output) on Channel 5
		ADC_RegularChannelConfig(ADC2, ADC_Channel_5, 1, ADC_SampleTime_239Cycles5); // SIG_ADC1
 80049ca:	2201      	movs	r2, #1
 80049cc:	2307      	movs	r3, #7
 80049ce:	4822      	ldr	r0, [pc, #136]	(8004a58 <ADC_Configuration+0xe4>)
 80049d0:	2105      	movs	r1, #5
 80049d2:	f000 fd41 	bl	8005458 <ADC_RegularChannelConfig>

		// Enable ADC1 DMA
		//ADC_DMACmd(ADC1, ENABLE);

		// Enable ADC1,2
		ADC_Cmd(ADC1, ENABLE);
 80049d6:	481f      	ldr	r0, [pc, #124]	(8004a54 <ADC_Configuration+0xe0>)
 80049d8:	2101      	movs	r1, #1
 80049da:	f000 fce3 	bl	80053a4 <ADC_Cmd>
		ADC_Cmd(ADC2, ENABLE);
 80049de:	481e      	ldr	r0, [pc, #120]	(8004a58 <ADC_Configuration+0xe4>)
 80049e0:	2101      	movs	r1, #1
 80049e2:	f000 fcdf 	bl	80053a4 <ADC_Cmd>

		// Enable ADC1,2 reset calibration register
		// Check the end of ADC1,2 reset calibration register
		ADC_ResetCalibration(ADC1);
 80049e6:	481b      	ldr	r0, [pc, #108]	(8004a54 <ADC_Configuration+0xe0>)
 80049e8:	f000 fcfc 	bl	80053e4 <ADC_ResetCalibration>
		while (ADC_GetResetCalibrationStatus(ADC1))
 80049ec:	4819      	ldr	r0, [pc, #100]	(8004a54 <ADC_Configuration+0xe0>)
 80049ee:	f000 fcff 	bl	80053f0 <ADC_GetResetCalibrationStatus>
 80049f2:	2800      	cmp	r0, #0
 80049f4:	d1fa      	bne.n	80049ec <ADC_Configuration+0x78>
			;

		ADC_ResetCalibration(ADC2);
 80049f6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80049fa:	f500 3094 	add.w	r0, r0, #75776	; 0x12800
 80049fe:	f000 fcf1 	bl	80053e4 <ADC_ResetCalibration>
		while (ADC_GetResetCalibrationStatus(ADC2))
 8004a02:	4815      	ldr	r0, [pc, #84]	(8004a58 <ADC_Configuration+0xe4>)
 8004a04:	f000 fcf4 	bl	80053f0 <ADC_GetResetCalibrationStatus>
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	d1fa      	bne.n	8004a02 <ADC_Configuration+0x8e>
			;

		// Start ADC1,2 calibration
		// Check the end of ADC1,2 calibration
		ADC_StartCalibration(ADC1);
 8004a0c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8004a10:	f500 3092 	add.w	r0, r0, #74752	; 0x12400
 8004a14:	f000 fcf2 	bl	80053fc <ADC_StartCalibration>
		while (ADC_GetCalibrationStatus(ADC1))
 8004a18:	480e      	ldr	r0, [pc, #56]	(8004a54 <ADC_Configuration+0xe0>)
 8004a1a:	f000 fcf5 	bl	8005408 <ADC_GetCalibrationStatus>
 8004a1e:	2800      	cmp	r0, #0
 8004a20:	d1fa      	bne.n	8004a18 <ADC_Configuration+0xa4>
			;

		ADC_StartCalibration(ADC2);
 8004a22:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8004a26:	f500 3094 	add.w	r0, r0, #75776	; 0x12800
 8004a2a:	f000 fce7 	bl	80053fc <ADC_StartCalibration>
		while (ADC_GetCalibrationStatus(ADC2))
 8004a2e:	480a      	ldr	r0, [pc, #40]	(8004a58 <ADC_Configuration+0xe4>)
 8004a30:	f000 fcea 	bl	8005408 <ADC_GetCalibrationStatus>
 8004a34:	2800      	cmp	r0, #0
 8004a36:	d1fa      	bne.n	8004a2e <ADC_Configuration+0xba>
			;

		// Start ADC2 Software Conversion
		ADC_SoftwareStartConvCmd(ADC1, ENABLE);
 8004a38:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	f500 3092 	add.w	r0, r0, #74752	; 0x12400
 8004a42:	f000 fce7 	bl	8005414 <ADC_SoftwareStartConvCmd>
		ADC_SoftwareStartConvCmd(ADC2, ENABLE);
 8004a46:	4804      	ldr	r0, [pc, #16]	(8004a58 <ADC_Configuration+0xe4>)
 8004a48:	2101      	movs	r1, #1
 8004a4a:	f000 fce3 	bl	8005414 <ADC_SoftwareStartConvCmd>
}
 8004a4e:	b006      	add	sp, #24
 8004a50:	bd70      	pop	{r4, r5, r6, pc}
 8004a52:	46c0      	nop			(mov r8, r8)
 8004a54:	40012400 	.word	0x40012400
 8004a58:	40012800 	.word	0x40012800

08004a5c <GPIO_Configuration>:
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
}

//##############################################################################
void GPIO_Configuration(void) {
 8004a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a5e:	b083      	sub	sp, #12
	GPIO_InitTypeDef GPIO_InitStructure;
		GPIO_StructInit(&GPIO_InitStructure);
 8004a60:	ac01      	add	r4, sp, #4
		// PORTA CONFIG
		GPIO_InitStructure.GPIO_Pin = PIN_SIG_MOT1P | PIN_SIG_MOT1M | PIN_SIG_MOT2P
				| PIN_SIG_MOT2M | PIN_SIG_MOT5P | PIN_SIG_MOT5M;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004a62:	4d71      	ldr	r5, [pc, #452]	(8004c28 <GPIO_Configuration+0x1cc>)
}

//##############################################################################
void GPIO_Configuration(void) {
	GPIO_InitTypeDef GPIO_InitStructure;
		GPIO_StructInit(&GPIO_InitStructure);
 8004a64:	4620      	mov	r0, r4

		// PORTA CONFIG
		GPIO_InitStructure.GPIO_Pin = PIN_SIG_MOT1P | PIN_SIG_MOT1M | PIN_SIG_MOT2P
				| PIN_SIG_MOT2M | PIN_SIG_MOT5P | PIN_SIG_MOT5M;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004a66:	2603      	movs	r6, #3
}

//##############################################################################
void GPIO_Configuration(void) {
	GPIO_InitTypeDef GPIO_InitStructure;
		GPIO_StructInit(&GPIO_InitStructure);
 8004a68:	f001 f920 	bl	8005cac <GPIO_StructInit>

		// PORTA CONFIG
		GPIO_InitStructure.GPIO_Pin = PIN_SIG_MOT1P | PIN_SIG_MOT1M | PIN_SIG_MOT2P
				| PIN_SIG_MOT2M | PIN_SIG_MOT5P | PIN_SIG_MOT5M;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004a6c:	2710      	movs	r7, #16
void GPIO_Configuration(void) {
	GPIO_InitTypeDef GPIO_InitStructure;
		GPIO_StructInit(&GPIO_InitStructure);

		// PORTA CONFIG
		GPIO_InitStructure.GPIO_Pin = PIN_SIG_MOT1P | PIN_SIG_MOT1M | PIN_SIG_MOT2P
 8004a6e:	f640 130f 	movw	r3, #2319	; 0x90f
				| PIN_SIG_MOT2M | PIN_SIG_MOT5P | PIN_SIG_MOT5M;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004a72:	4628      	mov	r0, r5
 8004a74:	4621      	mov	r1, r4
void GPIO_Configuration(void) {
	GPIO_InitTypeDef GPIO_InitStructure;
		GPIO_StructInit(&GPIO_InitStructure);

		// PORTA CONFIG
		GPIO_InitStructure.GPIO_Pin = PIN_SIG_MOT1P | PIN_SIG_MOT1M | PIN_SIG_MOT2P
 8004a76:	f8ad 3004 	strh.w	r3, [sp, #4]
				| PIN_SIG_MOT2M | PIN_SIG_MOT5P | PIN_SIG_MOT5M;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004a7a:	f88d 6006 	strb.w	r6, [sp, #6]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004a7e:	f88d 7007 	strb.w	r7, [sp, #7]
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004a82:	f001 f8bf 	bl	8005c04 <GPIO_Init>

		GPIO_InitStructure.GPIO_Pin = PIN_BUZZER | PIN_ZIGBEE_RESET;
 8004a86:	f44f 5382 	mov.w	r3, #4160	; 0x1040
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	4621      	mov	r1, r4
				| PIN_SIG_MOT2M | PIN_SIG_MOT5P | PIN_SIG_MOT5M;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOA, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_BUZZER | PIN_ZIGBEE_RESET;
 8004a8e:	f8ad 3004 	strh.w	r3, [sp, #4]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004a92:	f88d 6006 	strb.w	r6, [sp, #6]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004a96:	f88d 7007 	strb.w	r7, [sp, #7]
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004a9a:	f001 f8b3 	bl	8005c04 <GPIO_Init>

		GPIO_InitStructure.GPIO_Pin = PIN_ADC1;
 8004a9e:	f04f 0320 	mov.w	r3, #32	; 0x20
 8004aa2:	f8ad 3004 	strh.w	r3, [sp, #4]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004aa6:	4628      	mov	r0, r5
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOA, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_ADC1;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 8004aa8:	f04f 0300 	mov.w	r3, #0	; 0x0
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004aac:	4621      	mov	r1, r4
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOA, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_ADC1;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 8004aae:	f88d 3007 	strb.w	r3, [sp, #7]
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004ab2:	f001 f8a7 	bl	8005c04 <GPIO_Init>

		GPIO_InitStructure.GPIO_Pin = PIN_SW_RIGHT | PIN_SW_LEFT;
 8004ab6:	f24c 0300 	movw	r3, #49152	; 0xc000
 8004aba:	f8ad 3004 	strh.w	r3, [sp, #4]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004abe:	4628      	mov	r0, r5
		GPIO_InitStructure.GPIO_Pin = PIN_ADC1;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
		GPIO_Init(GPIOA, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_SW_RIGHT | PIN_SW_LEFT;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8004ac0:	f04f 0348 	mov.w	r3, #72	; 0x48
		// PORTB CONFIG
		GPIO_InitStructure.GPIO_Pin = PIN_LED_AUX | PIN_LED_MANAGE | PIN_LED_PROGRAM
				| PIN_LED_PLAY;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004ac4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
		GPIO_Init(GPIOA, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_SW_RIGHT | PIN_SW_LEFT;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004ac8:	4621      	mov	r1, r4
		GPIO_InitStructure.GPIO_Pin = PIN_ADC1;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
		GPIO_Init(GPIOA, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_SW_RIGHT | PIN_SW_LEFT;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8004aca:	f88d 3007 	strb.w	r3, [sp, #7]
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004ace:	f001 f899 	bl	8005c04 <GPIO_Init>

		// PORTB CONFIG
		GPIO_InitStructure.GPIO_Pin = PIN_LED_AUX | PIN_LED_MANAGE | PIN_LED_PROGRAM
 8004ad2:	f24f 0300 	movw	r3, #61440	; 0xf000
				| PIN_LED_PLAY;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	4621      	mov	r1, r4
		GPIO_InitStructure.GPIO_Pin = PIN_SW_RIGHT | PIN_SW_LEFT;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
		GPIO_Init(GPIOA, &GPIO_InitStructure);

		// PORTB CONFIG
		GPIO_InitStructure.GPIO_Pin = PIN_LED_AUX | PIN_LED_MANAGE | PIN_LED_PROGRAM
 8004ada:	f8ad 3004 	strh.w	r3, [sp, #4]
				| PIN_LED_PLAY;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004ade:	f88d 6006 	strb.w	r6, [sp, #6]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004ae2:	f88d 7007 	strb.w	r7, [sp, #7]
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004ae6:	f001 f88d 	bl	8005c04 <GPIO_Init>

		GPIO_InitStructure.GPIO_Pin = PIN_ENABLE_TXD | PIN_ENABLE_RXD;
 8004aea:	f04f 0330 	mov.w	r3, #48	; 0x30
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004aee:	4628      	mov	r0, r5
 8004af0:	4621      	mov	r1, r4
				| PIN_LED_PLAY;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOB, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_ENABLE_TXD | PIN_ENABLE_RXD;
 8004af2:	f8ad 3004 	strh.w	r3, [sp, #4]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004af6:	f88d 6006 	strb.w	r6, [sp, #6]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004afa:	f88d 7007 	strb.w	r7, [sp, #7]
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004afe:	f001 f881 	bl	8005c04 <GPIO_Init>

		GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
 8004b02:	f44f 6308 	mov.w	r3, #2176	; 0x880
 8004b06:	f8ad 3004 	strh.w	r3, [sp, #4]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004b0a:	4628      	mov	r0, r5
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOB, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8004b0c:	f04f 0304 	mov.w	r3, #4	; 0x4
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004b10:	4621      	mov	r1, r4
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOB, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8004b12:	f88d 3007 	strb.w	r3, [sp, #7]
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004b16:	f001 f875 	bl	8005c04 <GPIO_Init>

		GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
 8004b1a:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8004b1e:	f8ad 3004 	strh.w	r3, [sp, #4]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004b22:	4628      	mov	r0, r5
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
		GPIO_Init(GPIOB, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8004b24:	f04f 0318 	mov.w	r3, #24	; 0x18
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004b28:	4621      	mov	r1, r4
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
		GPIO_Init(GPIOB, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8004b2a:	f88d 3007 	strb.w	r3, [sp, #7]
		GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
		GPIO_Init(GPIOB, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004b2e:	f88d 6006 	strb.w	r6, [sp, #6]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004b32:	f001 f867 	bl	8005c04 <GPIO_Init>

		GPIO_InitStructure.GPIO_Pin = PIN_SW_START;
 8004b36:	f04f 0308 	mov.w	r3, #8	; 0x8
 8004b3a:	f8ad 3004 	strh.w	r3, [sp, #4]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004b3e:	4628      	mov	r0, r5
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
		GPIO_Init(GPIOB, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_SW_START;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8004b40:	f04f 0348 	mov.w	r3, #72	; 0x48
		// PORTC CONFIG
		GPIO_InitStructure.GPIO_Pin = PIN_SIG_MOT3P | PIN_SIG_MOT3M | PIN_SIG_MOT4P
				| PIN_SIG_MOT4M;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004b44:	f505 6580 	add.w	r5, r5, #1024	; 0x400
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
		GPIO_Init(GPIOB, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_SW_START;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004b48:	4621      	mov	r1, r4
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
		GPIO_Init(GPIOB, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_SW_START;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8004b4a:	f88d 3007 	strb.w	r3, [sp, #7]
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004b4e:	f001 f859 	bl	8005c04 <GPIO_Init>

		// PORTC CONFIG
		GPIO_InitStructure.GPIO_Pin = PIN_SIG_MOT3P | PIN_SIG_MOT3M | PIN_SIG_MOT4P
 8004b52:	f44f 7370 	mov.w	r3, #960	; 0x3c0
				| PIN_SIG_MOT4M;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004b56:	4628      	mov	r0, r5
 8004b58:	4621      	mov	r1, r4
		GPIO_InitStructure.GPIO_Pin = PIN_SW_START;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
		GPIO_Init(GPIOB, &GPIO_InitStructure);

		// PORTC CONFIG
		GPIO_InitStructure.GPIO_Pin = PIN_SIG_MOT3P | PIN_SIG_MOT3M | PIN_SIG_MOT4P
 8004b5a:	f8ad 3004 	strh.w	r3, [sp, #4]
				| PIN_SIG_MOT4M;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004b5e:	f88d 6006 	strb.w	r6, [sp, #6]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004b62:	f88d 7007 	strb.w	r7, [sp, #7]
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004b66:	f001 f84d 	bl	8005c04 <GPIO_Init>

		GPIO_InitStructure.GPIO_Pin = PIN_ADC_SELECT0 | PIN_ADC_SELECT1;
 8004b6a:	f04f 0306 	mov.w	r3, #6	; 0x6
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004b6e:	4628      	mov	r0, r5
 8004b70:	4621      	mov	r1, r4
				| PIN_SIG_MOT4M;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOC, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_ADC_SELECT0 | PIN_ADC_SELECT1;
 8004b72:	f8ad 3004 	strh.w	r3, [sp, #4]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004b76:	f88d 6006 	strb.w	r6, [sp, #6]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004b7a:	f88d 7007 	strb.w	r7, [sp, #7]
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004b7e:	f001 f841 	bl	8005c04 <GPIO_Init>

		GPIO_InitStructure.GPIO_Pin = PIN_LED_POWER | PIN_LED_TXD | PIN_LED_RXD;
 8004b82:	f24e 0300 	movw	r3, #57344	; 0xe000
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004b86:	4628      	mov	r0, r5
 8004b88:	4621      	mov	r1, r4
		GPIO_InitStructure.GPIO_Pin = PIN_ADC_SELECT0 | PIN_ADC_SELECT1;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOC, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_LED_POWER | PIN_LED_TXD | PIN_LED_RXD;
 8004b8a:	f8ad 3004 	strh.w	r3, [sp, #4]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004b8e:	f88d 6006 	strb.w	r6, [sp, #6]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004b92:	f88d 7007 	strb.w	r7, [sp, #7]
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004b96:	f001 f835 	bl	8005c04 <GPIO_Init>

		GPIO_InitStructure.GPIO_Pin = PIN_ZIGBEE_TXD;
 8004b9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b9e:	f8ad 3004 	strh.w	r3, [sp, #4]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004ba2:	4628      	mov	r0, r5
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOC, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_ZIGBEE_TXD;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8004ba4:	f04f 0318 	mov.w	r3, #24	; 0x18
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004ba8:	4621      	mov	r1, r4
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOC, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_ZIGBEE_TXD;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8004baa:	f88d 3007 	strb.w	r3, [sp, #7]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOC, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_ZIGBEE_TXD;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004bae:	f88d 6006 	strb.w	r6, [sp, #6]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004bb2:	f001 f827 	bl	8005c04 <GPIO_Init>

		GPIO_InitStructure.GPIO_Pin = PIN_ADC0 | PIN_VDD_VOLT;
 8004bb6:	f04f 0309 	mov.w	r3, #9	; 0x9
 8004bba:	f8ad 3004 	strh.w	r3, [sp, #4]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004bbe:	4628      	mov	r0, r5
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
		GPIO_Init(GPIOC, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_ADC0 | PIN_VDD_VOLT;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 8004bc0:	f04f 0300 	mov.w	r3, #0	; 0x0
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004bc4:	4621      	mov	r1, r4
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
		GPIO_Init(GPIOC, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_ADC0 | PIN_VDD_VOLT;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 8004bc6:	f88d 3007 	strb.w	r3, [sp, #7]
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004bca:	f001 f81b 	bl	8005c04 <GPIO_Init>

		GPIO_InitStructure.GPIO_Pin = PIN_MIC;
 8004bce:	f04f 0310 	mov.w	r3, #16	; 0x10
 8004bd2:	f8ad 3004 	strh.w	r3, [sp, #4]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004bd6:	4628      	mov	r0, r5
		GPIO_InitStructure.GPIO_Pin = PIN_ADC0 | PIN_VDD_VOLT;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
		GPIO_Init(GPIOC, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_MIC;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8004bd8:	f04f 0348 	mov.w	r3, #72	; 0x48
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004bdc:	4621      	mov	r1, r4
		GPIO_InitStructure.GPIO_Pin = PIN_ADC0 | PIN_VDD_VOLT;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
		GPIO_Init(GPIOC, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_MIC;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8004bde:	f88d 3007 	strb.w	r3, [sp, #7]
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004be2:	f001 f80f 	bl	8005c04 <GPIO_Init>

		GPIO_InitStructure.GPIO_Pin = PIN_SW_UP | PIN_SW_DOWN;
 8004be6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004bea:	f8ad 3004 	strh.w	r3, [sp, #4]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004bee:	4628      	mov	r0, r5
		GPIO_InitStructure.GPIO_Pin = PIN_MIC;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
		GPIO_Init(GPIOC, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_SW_UP | PIN_SW_DOWN;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8004bf0:	f04f 0348 	mov.w	r3, #72	; 0x48
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004bf4:	4621      	mov	r1, r4
		GPIO_InitStructure.GPIO_Pin = PIN_MIC;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
		GPIO_Init(GPIOC, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_SW_UP | PIN_SW_DOWN;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8004bf6:	f88d 3007 	strb.w	r3, [sp, #7]
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004bfa:	f001 f803 	bl	8005c04 <GPIO_Init>

		// PORTD CONFIG
		GPIO_InitStructure.GPIO_Pin = PIN_ZIGBEE_RXD;
 8004bfe:	f04f 0304 	mov.w	r3, #4	; 0x4
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
		GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004c02:	4621      	mov	r1, r4
 8004c04:	4809      	ldr	r0, [pc, #36]	(8004c2c <GPIO_Configuration+0x1d0>)
		GPIO_InitStructure.GPIO_Pin = PIN_SW_UP | PIN_SW_DOWN;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
		GPIO_Init(GPIOC, &GPIO_InitStructure);

		// PORTD CONFIG
		GPIO_InitStructure.GPIO_Pin = PIN_ZIGBEE_RXD;
 8004c06:	f8ad 3004 	strh.w	r3, [sp, #4]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8004c0a:	f88d 3007 	strb.w	r3, [sp, #7]
		GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004c0e:	f000 fff9 	bl	8005c04 <GPIO_Init>

		GPIO_PinRemapConfig( GPIO_Remap_USART1, ENABLE);
 8004c12:	2004      	movs	r0, #4
 8004c14:	2101      	movs	r1, #1
 8004c16:	f001 f88f 	bl	8005d38 <GPIO_PinRemapConfig>
		GPIO_PinRemapConfig( GPIO_Remap_SWJ_Disable, ENABLE);
 8004c1a:	4805      	ldr	r0, [pc, #20]	(8004c30 <GPIO_Configuration+0x1d4>)
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	f001 f88b 	bl	8005d38 <GPIO_PinRemapConfig>
}
 8004c22:	b003      	add	sp, #12
 8004c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c26:	46c0      	nop			(mov r8, r8)
 8004c28:	40010800 	.word	0x40010800
 8004c2c:	40011400 	.word	0x40011400
 8004c30:	00300400 	.word	0x00300400

08004c34 <NVIC_Configuration>:

	PWR_BackupAccessCmd(ENABLE);
}

//##############################################################################
void NVIC_Configuration(void) {
 8004c34:	b570      	push	{r4, r5, r6, lr}
#ifdef  VECT_TAB_RAM
	// Set the Vector Table base location at 0x20000000
	NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0);
#else  // VECT_TAB_FLASH
	// Set the Vector Table base location at 0x08003000
	NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
 8004c36:	f44f 5140 	mov.w	r1, #12288	; 0x3000

	PWR_BackupAccessCmd(ENABLE);
}

//##############################################################################
void NVIC_Configuration(void) {
 8004c3a:	b082      	sub	sp, #8
#ifdef  VECT_TAB_RAM
	// Set the Vector Table base location at 0x20000000
	NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0);
#else  // VECT_TAB_FLASH
	// Set the Vector Table base location at 0x08003000
	NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
 8004c3c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8004c40:	f001 f9f4 	bl	800602c <NVIC_SetVectorTable>
	// Enable the USART1 Interrupt (Dynamixel)
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8004c44:	ad01      	add	r5, sp, #4
	NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
#endif

	// Configure the NVIC Preemption Priority Bits
	//NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 8004c46:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8004c4a:	f001 f951 	bl	8005ef0 <NVIC_PriorityGroupConfig>

	// Enable the USART1 Interrupt (Dynamixel)
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8004c4e:	2401      	movs	r4, #1
	// Configure the NVIC Preemption Priority Bits
	//NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);

	// Enable the USART1 Interrupt (Dynamixel)
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
 8004c50:	2325      	movs	r3, #37
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8004c52:	2600      	movs	r6, #0
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8004c54:	4628      	mov	r0, r5
	// Configure the NVIC Preemption Priority Bits
	//NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);

	// Enable the USART1 Interrupt (Dynamixel)
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
 8004c56:	f88d 3004 	strb.w	r3, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8004c5a:	f88d 6005 	strb.w	r6, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8004c5e:	f88d 4006 	strb.w	r4, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004c62:	f88d 4007 	strb.w	r4, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 8004c66:	f001 f94d 	bl	8005f04 <NVIC_Init>

	// Enable the USART3 Interrupt (Serial/PC_UART)
	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQChannel;
 8004c6a:	2327      	movs	r3, #39
 8004c6c:	f88d 3004 	strb.w	r3, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8004c70:	4628      	mov	r0, r5
	NVIC_Init(&NVIC_InitStructure);

	// Enable the USART3 Interrupt (Serial/PC_UART)
	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQChannel;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
 8004c72:	2303      	movs	r3, #3
 8004c74:	f88d 3006 	strb.w	r3, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);

	// Enable the USART3 Interrupt (Serial/PC_UART)
	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQChannel;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8004c78:	f88d 6005 	strb.w	r6, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004c7c:	f88d 4007 	strb.w	r4, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 8004c80:	f001 f940 	bl	8005f04 <NVIC_Init>

	// Enable the UART5 Interrupt (Zigbee)
	NVIC_InitStructure.NVIC_IRQChannel = UART5_IRQChannel;
 8004c84:	2335      	movs	r3, #53
 8004c86:	f88d 3004 	strb.w	r3, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8004c8a:	4628      	mov	r0, r5
	NVIC_Init(&NVIC_InitStructure);

	// Enable the UART5 Interrupt (Zigbee)
	NVIC_InitStructure.NVIC_IRQChannel = UART5_IRQChannel;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 8004c8c:	2302      	movs	r3, #2
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);

	// Enable the UART5 Interrupt (Zigbee)
	NVIC_InitStructure.NVIC_IRQChannel = UART5_IRQChannel;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8004c8e:	f88d 6005 	strb.w	r6, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 8004c92:	f88d 3006 	strb.w	r3, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004c96:	f88d 4007 	strb.w	r4, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 8004c9a:	f001 f933 	bl	8005f04 <NVIC_Init>
}
 8004c9e:	b002      	add	sp, #8
 8004ca0:	bd70      	pop	{r4, r5, r6, pc}
 8004ca2:	46c0      	nop			(mov r8, r8)

08004ca4 <RCC_Configuration>:
	// USART Configuration
	USART_Configuration();
}

//##############################################################################
void RCC_Configuration(void) {
 8004ca4:	b500      	push	{lr}
 8004ca6:	b081      	sub	sp, #4
	ErrorStatus HSEStartUpStatus;
	// RCC system reset(for debug purpose)
	RCC_DeInit();
 8004ca8:	f001 fb22 	bl	80062f0 <RCC_DeInit>

	// Enable HSE
	RCC_HSEConfig(RCC_HSE_ON);
 8004cac:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004cb0:	f001 fb3e 	bl	8006330 <RCC_HSEConfig>

	// Wait till HSE is ready
	HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8004cb4:	f001 fb56 	bl	8006364 <RCC_WaitForHSEStartUp>

	if (HSEStartUpStatus == SUCCESS) {
 8004cb8:	2801      	cmp	r0, #1
 8004cba:	d124      	bne.n	8004d06 <RCC_Configuration+0x62>
		// Enable Prefetch Buffer
		FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
 8004cbc:	2010      	movs	r0, #16
 8004cbe:	f000 fd25 	bl	800570c <FLASH_PrefetchBufferCmd>

		// Flash 2 wait state
		FLASH_SetLatency(FLASH_Latency_2);
 8004cc2:	2002      	movs	r0, #2
 8004cc4:	f000 fd0a 	bl	80056dc <FLASH_SetLatency>

		// HCLK = SYSCLK
		RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8004cc8:	2000      	movs	r0, #0
 8004cca:	f001 fb95 	bl	80063f8 <RCC_HCLKConfig>

		// PCLK2 = HCLK
		RCC_PCLK2Config(RCC_HCLK_Div1);
 8004cce:	2000      	movs	r0, #0
 8004cd0:	f001 fba6 	bl	8006420 <RCC_PCLK2Config>

		// PCLK1 = HCLK/2
		RCC_PCLK1Config(RCC_HCLK_Div2);
 8004cd4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004cd8:	f001 fb98 	bl	800640c <RCC_PCLK1Config>

		// PLLCLK = 8MHz * 9 = 72 MHz
		RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
 8004cdc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004ce0:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8004ce4:	f001 fb66 	bl	80063b4 <RCC_PLLConfig>

		// Enable PLL
		RCC_PLLCmd(ENABLE);
 8004ce8:	2001      	movs	r0, #1
 8004cea:	f001 fb6d 	bl	80063c8 <RCC_PLLCmd>

		// Wait till PLL is ready
		while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET) {
 8004cee:	2039      	movs	r0, #57
 8004cf0:	f001 fc96 	bl	8006620 <RCC_GetFlagStatus>
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	d0fa      	beq.n	8004cee <RCC_Configuration+0x4a>
		}

		// Select PLL as system clock source
		RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 8004cf8:	2002      	movs	r0, #2
 8004cfa:	f001 fb6b 	bl	80063d4 <RCC_SYSCLKConfig>

		// Wait till PLL is used as system clock source
		while (RCC_GetSYSCLKSource() != 0x08) {
 8004cfe:	f001 fb73 	bl	80063e8 <RCC_GetSYSCLKSource>
 8004d02:	2808      	cmp	r0, #8
 8004d04:	d1fb      	bne.n	8004cfe <RCC_Configuration+0x5a>
	}

	// Enable peripheral clocks

	// Enable GPIOB and GPIOC clocks
	RCC_APB2PeriphClockCmd(
 8004d06:	2101      	movs	r1, #1
 8004d08:	f240 601c 	movw	r0, #1564	; 0x61c
 8004d0c:	f001 fc3e 	bl	800658c <RCC_APB2PeriphClockCmd>
			RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC
					| RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2, ENABLE);

	// Enable USART1 Clock (Dynamixel)
#ifdef USING_DYNAMIXEL
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8004d10:	2101      	movs	r1, #1
 8004d12:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004d16:	f001 fc39 	bl	800658c <RCC_APB2PeriphClockCmd>
#endif
#ifdef USING_PC_UART
	// Enable USART3 Clock (PC_UART)
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004d20:	f001 fc42 	bl	80065a8 <RCC_APB1PeriphClockCmd>
#endif
#ifdef USING_ZIGBEE
	// Enable UART5 Clock (Zigbee)
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
 8004d24:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004d28:	2101      	movs	r1, #1
 8004d2a:	f001 fc3d 	bl	80065a8 <RCC_APB1PeriphClockCmd>
#endif

	PWR_BackupAccessCmd(ENABLE);
 8004d2e:	2001      	movs	r0, #1
 8004d30:	f001 fa6e 	bl	8006210 <PWR_BackupAccessCmd>
}
 8004d34:	b001      	add	sp, #4
 8004d36:	bd00      	pop	{pc}

08004d38 <SysInit>:
#include "serial.h"
#include "dynamixel.h"
#include "zigbee.h"

//##############################################################################
void SysInit(){
 8004d38:	b500      	push	{lr}
	// Clear the WatchDog Early Wakeup interrupt flag
//    WWDG_ClearFlag();
	ReBootToBootLoader = 0;
 8004d3a:	4b09      	ldr	r3, [pc, #36]	(8004d60 <SysInit+0x28>)
 8004d3c:	2200      	movs	r2, #0
#include "serial.h"
#include "dynamixel.h"
#include "zigbee.h"

//##############################################################################
void SysInit(){
 8004d3e:	b081      	sub	sp, #4
	// Clear the WatchDog Early Wakeup interrupt flag
//    WWDG_ClearFlag();
	ReBootToBootLoader = 0;
 8004d40:	701a      	strb	r2, [r3, #0]

	// System Clocks Configuration
	RCC_Configuration();
 8004d42:	f7ff ffaf 	bl	8004ca4 <RCC_Configuration>

	// NVIC configuration
	NVIC_Configuration();
 8004d46:	f7ff ff75 	bl	8004c34 <NVIC_Configuration>

	// GPIO configuration
	GPIO_Configuration();
 8004d4a:	f7ff fe87 	bl	8004a5c <GPIO_Configuration>

	// System clock count configuration
	SysTick_Configuration();
 8004d4e:	f7ff fdff 	bl	8004950 <SysTick_Configuration>

	// Analog to Digital Converter Configuration
	ADC_Configuration();
 8004d52:	f7ff fe0f 	bl	8004974 <ADC_Configuration>

	// USART Configuration
	USART_Configuration();
 8004d56:	f7ff fddb 	bl	8004910 <USART_Configuration>
}
 8004d5a:	b001      	add	sp, #4
 8004d5c:	bd00      	pop	{pc}
 8004d5e:	46c0      	nop			(mov r8, r8)
 8004d60:	2000060c 	.word	0x2000060c

08004d64 <pcu_hal_timeout>:
	}

	//##############################################################################
	u8 pcu_hal_timeout(void)
	{
	    if (glPcuTimeoutCounter==0)
 8004d64:	4b03      	ldr	r3, [pc, #12]	(8004d74 <pcu_hal_timeout+0x10>)
 8004d66:	6818      	ldr	r0, [r3, #0]
 8004d68:	f1d0 0001 	rsbs	r0, r0, #1	; 0x1
 8004d6c:	bf38      	it	cc
 8004d6e:	2000      	movcc	r0, #0
	        return 1;
	    else
	        return 0;
	}
 8004d70:	4770      	bx	lr
 8004d72:	46c0      	nop			(mov r8, r8)
 8004d74:	200005f8 	.word	0x200005f8

08004d78 <pcu_get_queue>:
	}

	//##############################################################################
	u8 pcu_get_queue(void)
	{
	    if (gbPcuWrite==gbPcuRead)
 8004d78:	4b0b      	ldr	r3, [pc, #44]	(8004da8 <pcu_get_queue+0x30>)
 8004d7a:	490c      	ldr	r1, [pc, #48]	(8004dac <pcu_get_queue+0x34>)
 8004d7c:	881a      	ldrh	r2, [r3, #0]
 8004d7e:	880b      	ldrh	r3, [r1, #0]
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d101      	bne.n	8004d88 <pcu_get_queue+0x10>
 8004d84:	20ff      	movs	r0, #255
 8004d86:	e00e      	b.n	8004da6 <pcu_get_queue+0x2e>
	        return 0xFF;

	    u8 data = gbpPcuBuffer[gbPcuRead++];
 8004d88:	880b      	ldrh	r3, [r1, #0]
 8004d8a:	4a09      	ldr	r2, [pc, #36]	(8004db0 <pcu_get_queue+0x38>)
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	5cd2      	ldrb	r2, [r2, r3]
 8004d90:	3301      	adds	r3, #1
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	800b      	strh	r3, [r1, #0]
 8004d96:	4610      	mov	r0, r2

	    if (gbPcuRead>(PC_UART_BUFFER_LENGTH-1))
 8004d98:	880a      	ldrh	r2, [r1, #0]
 8004d9a:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8004d9e:	429a      	cmp	r2, r3
	        gbPcuRead = 0;
 8004da0:	bf84      	itt	hi
 8004da2:	2300      	movhi	r3, #0
 8004da4:	800b      	strhhi	r3, [r1, #0]

	    return data;
	}
 8004da6:	4770      	bx	lr
 8004da8:	20000a16 	.word	0x20000a16
 8004dac:	20000a18 	.word	0x20000a18
 8004db0:	20000614 	.word	0x20000614

08004db4 <pcu_peek_queue>:

	//##############################################################################
	u8 pcu_peek_queue(void)
	{
	    if (gbPcuWrite==gbPcuRead)
 8004db4:	4b06      	ldr	r3, [pc, #24]	(8004dd0 <pcu_peek_queue+0x1c>)
 8004db6:	4907      	ldr	r1, [pc, #28]	(8004dd4 <pcu_peek_queue+0x20>)
 8004db8:	881a      	ldrh	r2, [r3, #0]
 8004dba:	880b      	ldrh	r3, [r1, #0]
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d101      	bne.n	8004dc4 <pcu_peek_queue+0x10>
 8004dc0:	20ff      	movs	r0, #255
 8004dc2:	e004      	b.n	8004dce <pcu_peek_queue+0x1a>
	        return 0xFF;

	    u8 data = gbpPcuBuffer[gbPcuRead];
 8004dc4:	880b      	ldrh	r3, [r1, #0]
 8004dc6:	4a04      	ldr	r2, [pc, #16]	(8004dd8 <pcu_peek_queue+0x24>)
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	5cd3      	ldrb	r3, [r2, r3]
 8004dcc:	4618      	mov	r0, r3

	    return data;
	}
 8004dce:	4770      	bx	lr
 8004dd0:	20000a16 	.word	0x20000a16
 8004dd4:	20000a18 	.word	0x20000a18
 8004dd8:	20000614 	.word	0x20000614

08004ddc <pcu_clear_queue>:
	}

	//##############################################################################
	void pcu_clear_queue(void)
	{
	    gbPcuWrite = 0;
 8004ddc:	4b03      	ldr	r3, [pc, #12]	(8004dec <pcu_clear_queue+0x10>)
 8004dde:	f04f 0200 	mov.w	r2, #0	; 0x0
 8004de2:	801a      	strh	r2, [r3, #0]
	    gbPcuRead = 0;
 8004de4:	4b02      	ldr	r3, [pc, #8]	(8004df0 <pcu_clear_queue+0x14>)
 8004de6:	801a      	strh	r2, [r3, #0]
	}
 8004de8:	4770      	bx	lr
 8004dea:	46c0      	nop			(mov r8, r8)
 8004dec:	20000a16 	.word	0x20000a16
 8004df0:	20000a18 	.word	0x20000a18

08004df4 <pcu_get_qstate>:

	//##############################################################################
	u8 pcu_get_qstate(void)
	{
	    if (gbPcuWrite==gbPcuRead)
 8004df4:	490f      	ldr	r1, [pc, #60]	(8004e34 <pcu_get_qstate+0x40>)
 8004df6:	4810      	ldr	r0, [pc, #64]	(8004e38 <pcu_get_qstate+0x44>)
 8004df8:	880a      	ldrh	r2, [r1, #0]
 8004dfa:	8803      	ldrh	r3, [r0, #0]
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d105      	bne.n	8004e0c <pcu_get_qstate+0x18>
	}

	//##############################################################################
	void pcu_clear_queue(void)
	{
	    gbPcuWrite = 0;
 8004e00:	f04f 0300 	mov.w	r3, #0	; 0x0
 8004e04:	800b      	strh	r3, [r1, #0]
	    gbPcuRead = 0;
 8004e06:	8003      	strh	r3, [r0, #0]
 8004e08:	2000      	movs	r0, #0
 8004e0a:	e011      	b.n	8004e30 <pcu_get_qstate+0x3c>
	    if (gbPcuWrite==gbPcuRead)
	    {
	        pcu_clear_queue();
	        return 0;
	    }
	    else if (gbPcuRead<gbPcuWrite)
 8004e0c:	8802      	ldrh	r2, [r0, #0]
 8004e0e:	880b      	ldrh	r3, [r1, #0]
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d906      	bls.n	8004e22 <pcu_get_qstate+0x2e>
	        return (u8) (gbPcuWrite-gbPcuRead);
 8004e14:	880a      	ldrh	r2, [r1, #0]
 8004e16:	8803      	ldrh	r3, [r0, #0]
 8004e18:	b292      	uxth	r2, r2
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	1ad2      	subs	r2, r2, r3
 8004e1e:	b2d0      	uxtb	r0, r2
 8004e20:	e006      	b.n	8004e30 <pcu_get_qstate+0x3c>
	    else
	        return (u8) (PC_UART_BUFFER_LENGTH-(gbPcuRead-gbPcuWrite));
 8004e22:	880b      	ldrh	r3, [r1, #0]
 8004e24:	8802      	ldrh	r2, [r0, #0]
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	b292      	uxth	r2, r2
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	1a9b      	subs	r3, r3, r2
 8004e2e:	b2d8      	uxtb	r0, r3
	}
 8004e30:	4770      	bx	lr
 8004e32:	46c0      	nop			(mov r8, r8)
 8004e34:	20000a16 	.word	0x20000a16
 8004e38:	20000a18 	.word	0x20000a18

08004e3c <zgb_hal_rx>:
	return numPacket;
}

//##############################################################################
u8 zgb_hal_rx(u8 *pPacket, u8 numPacket)
{
 8004e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e3e:	f04f 0c00 	mov.w	ip, #0	; 0x0
 8004e42:	460c      	mov	r4, r1
 8004e44:	b083      	sub	sp, #12
 8004e46:	4605      	mov	r5, r0
	u8 i;
	for (i=0; i<numPacket; i++)
	{
		if (gbZigRead!=gbZigWrite)
 8004e48:	490e      	ldr	r1, [pc, #56]	(8004e84 <zgb_hal_rx+0x48>)
		{
			pPacket[i] = gbpZigBuffer[gbZigRead++];
 8004e4a:	4f0f      	ldr	r7, [pc, #60]	(8004e88 <zgb_hal_rx+0x4c>)
			if (gbZigRead>(ZIGBEE_BUFFER_LENGTH-1))
			gbZigRead = 0;
 8004e4c:	2600      	movs	r6, #0
 8004e4e:	e011      	b.n	8004e74 <zgb_hal_rx+0x38>
u8 zgb_hal_rx(u8 *pPacket, u8 numPacket)
{
	u8 i;
	for (i=0; i<numPacket; i++)
	{
		if (gbZigRead!=gbZigWrite)
 8004e50:	4b0e      	ldr	r3, [pc, #56]	(8004e8c <zgb_hal_rx+0x50>)
 8004e52:	780a      	ldrb	r2, [r1, #0]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d011      	beq.n	8004e7e <zgb_hal_rx+0x42>
		{
			pPacket[i] = gbpZigBuffer[gbZigRead++];
 8004e5a:	780b      	ldrb	r3, [r1, #0]
 8004e5c:	5cfa      	ldrb	r2, [r7, r3]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	f805 200c 	strb.w	r2, [r5, ip]
 8004e66:	700b      	strb	r3, [r1, #0]
			if (gbZigRead>(ZIGBEE_BUFFER_LENGTH-1))
 8004e68:	780b      	ldrb	r3, [r1, #0]
			gbZigRead = 0;
 8004e6a:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
	for (i=0; i<numPacket; i++)
	{
		if (gbZigRead!=gbZigWrite)
		{
			pPacket[i] = gbpZigBuffer[gbZigRead++];
			if (gbZigRead>(ZIGBEE_BUFFER_LENGTH-1))
 8004e6e:	2b3f      	cmp	r3, #63
			gbZigRead = 0;
 8004e70:	bf88      	it	hi
 8004e72:	700e      	strbhi	r6, [r1, #0]
 8004e74:	fa5f f08c 	uxtb.w	r0, ip

//##############################################################################
u8 zgb_hal_rx(u8 *pPacket, u8 numPacket)
{
	u8 i;
	for (i=0; i<numPacket; i++)
 8004e78:	42a0      	cmp	r0, r4
 8004e7a:	d3e9      	bcc.n	8004e50 <zgb_hal_rx+0x14>
 8004e7c:	4620      	mov	r0, r4
		else
		return i;
	}

	return numPacket;
}
 8004e7e:	b003      	add	sp, #12
 8004e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e82:	46c0      	nop			(mov r8, r8)
 8004e84:	20000613 	.word	0x20000613
 8004e88:	20000a1a 	.word	0x20000a1a
 8004e8c:	20000612 	.word	0x20000612

08004e90 <dxl_hal_clear>:
//##############################################################################
void dxl_hal_clear(void) {
	// Clear communication buffer
	u16 i;
	for (i = 0; i < DXL_BUFFER_LENGTH; i++)
		gbpDxlBuffer[i] = 0;
 8004e90:	4807      	ldr	r0, [pc, #28]	(8004eb0 <dxl_hal_clear+0x20>)
	// Disable USART1 (dynamixel)
	USART_Cmd(USART1, DISABLE);
}

//##############################################################################
void dxl_hal_clear(void) {
 8004e92:	2300      	movs	r3, #0
	// Clear communication buffer
	u16 i;
	for (i = 0; i < DXL_BUFFER_LENGTH; i++)
		gbpDxlBuffer[i] = 0;
 8004e94:	2100      	movs	r1, #0

//##############################################################################
void dxl_hal_clear(void) {
	// Clear communication buffer
	u16 i;
	for (i = 0; i < DXL_BUFFER_LENGTH; i++)
 8004e96:	f240 32ff 	movw	r2, #1023	; 0x3ff
		gbpDxlBuffer[i] = 0;
 8004e9a:	54c1      	strb	r1, [r0, r3]
 8004e9c:	3301      	adds	r3, #1

//##############################################################################
void dxl_hal_clear(void) {
	// Clear communication buffer
	u16 i;
	for (i = 0; i < DXL_BUFFER_LENGTH; i++)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d1fb      	bne.n	8004e9a <dxl_hal_clear+0xa>
		gbpDxlBuffer[i] = 0;
	gbDxlRead = 0;
 8004ea2:	4b04      	ldr	r3, [pc, #16]	(8004eb4 <dxl_hal_clear+0x24>)
 8004ea4:	f04f 0200 	mov.w	r2, #0	; 0x0
 8004ea8:	801a      	strh	r2, [r3, #0]
	gbDxlWrite = 0;
 8004eaa:	4b03      	ldr	r3, [pc, #12]	(8004eb8 <dxl_hal_clear+0x28>)
 8004eac:	801a      	strh	r2, [r3, #0]
}
 8004eae:	4770      	bx	lr
 8004eb0:	20000a5b 	.word	0x20000a5b
 8004eb4:	20000610 	.word	0x20000610
 8004eb8:	2000060e 	.word	0x2000060e

08004ebc <dxl_hal_rx>:

	return numPacket;
}

//##############################################################################
u8 dxl_hal_rx(u8 *pPacket, u8 numPacket) {
 8004ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ebe:	f04f 0c00 	mov.w	ip, #0	; 0x0
 8004ec2:	460c      	mov	r4, r1
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	4605      	mov	r5, r0
	u8 i;
	for (i = 0; i < numPacket; i++) {
		if (gbDxlRead != gbDxlWrite) {
 8004ec8:	4910      	ldr	r1, [pc, #64]	(8004f0c <dxl_hal_rx+0x50>)
			pPacket[i] = gbpDxlBuffer[gbDxlRead++];
 8004eca:	4f11      	ldr	r7, [pc, #68]	(8004f10 <dxl_hal_rx+0x54>)
			if (gbDxlRead > (DXL_BUFFER_LENGTH - 1))
 8004ecc:	f240 36fe 	movw	r6, #1022	; 0x3fe
 8004ed0:	e014      	b.n	8004efc <dxl_hal_rx+0x40>

//##############################################################################
u8 dxl_hal_rx(u8 *pPacket, u8 numPacket) {
	u8 i;
	for (i = 0; i < numPacket; i++) {
		if (gbDxlRead != gbDxlWrite) {
 8004ed2:	4b10      	ldr	r3, [pc, #64]	(8004f14 <dxl_hal_rx+0x58>)
 8004ed4:	880a      	ldrh	r2, [r1, #0]
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d014      	beq.n	8004f06 <dxl_hal_rx+0x4a>
			pPacket[i] = gbpDxlBuffer[gbDxlRead++];
 8004edc:	880b      	ldrh	r3, [r1, #0]
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	5cfa      	ldrb	r2, [r7, r3]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	f805 200c 	strb.w	r2, [r5, ip]
 8004eea:	800b      	strh	r3, [r1, #0]
			if (gbDxlRead > (DXL_BUFFER_LENGTH - 1))
 8004eec:	880b      	ldrh	r3, [r1, #0]
				gbDxlRead = 0;
 8004eee:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
u8 dxl_hal_rx(u8 *pPacket, u8 numPacket) {
	u8 i;
	for (i = 0; i < numPacket; i++) {
		if (gbDxlRead != gbDxlWrite) {
			pPacket[i] = gbpDxlBuffer[gbDxlRead++];
			if (gbDxlRead > (DXL_BUFFER_LENGTH - 1))
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	42b3      	cmp	r3, r6
				gbDxlRead = 0;
 8004ef6:	bf84      	itt	hi
 8004ef8:	2300      	movhi	r3, #0
 8004efa:	800b      	strhhi	r3, [r1, #0]
 8004efc:	fa5f f08c 	uxtb.w	r0, ip
}

//##############################################################################
u8 dxl_hal_rx(u8 *pPacket, u8 numPacket) {
	u8 i;
	for (i = 0; i < numPacket; i++) {
 8004f00:	42a0      	cmp	r0, r4
 8004f02:	d3e6      	bcc.n	8004ed2 <dxl_hal_rx+0x16>
 8004f04:	4620      	mov	r0, r4
		} else
			return i;
	}

	return numPacket;
}
 8004f06:	b003      	add	sp, #12
 8004f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f0a:	46c0      	nop			(mov r8, r8)
 8004f0c:	20000610 	.word	0x20000610
 8004f10:	20000a5b 	.word	0x20000a5b
 8004f14:	2000060e 	.word	0x2000060e

08004f18 <dxl_hal_timeout>:
	start_timeout_dxl(NumRcvByte * 30);
}

//##############################################################################
u8 dxl_hal_timeout(void) {
	if (glDxlTimeoutCounter == 0)
 8004f18:	4b03      	ldr	r3, [pc, #12]	(8004f28 <dxl_hal_timeout+0x10>)
 8004f1a:	6818      	ldr	r0, [r3, #0]
 8004f1c:	f1d0 0001 	rsbs	r0, r0, #1	; 0x1
 8004f20:	bf38      	it	cc
 8004f22:	2000      	movcc	r0, #0
		return 1;
	else
		return 0;
}
 8004f24:	4770      	bx	lr
 8004f26:	46c0      	nop			(mov r8, r8)
 8004f28:	200005f4 	.word	0x200005f4

08004f2c <RxD_DXL_Interrupt>:

//##############################################################################
void RxD_DXL_Interrupt(void) {
 8004f2c:	b500      	push	{lr}
	u8 temp;
	if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET) {
 8004f2e:	4819      	ldr	r0, [pc, #100]	(8004f94 <RxD_DXL_Interrupt+0x68>)
	else
		return 0;
}

//##############################################################################
void RxD_DXL_Interrupt(void) {
 8004f30:	b081      	sub	sp, #4
	u8 temp;
	if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET) {
 8004f32:	f240 5125 	movw	r1, #1317	; 0x525
 8004f36:	f001 fd17 	bl	8006968 <USART_GetITStatus>
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	d028      	beq.n	8004f90 <RxD_DXL_Interrupt+0x64>
		temp = USART_ReceiveData(USART1);
 8004f3e:	4815      	ldr	r0, [pc, #84]	(8004f94 <RxD_DXL_Interrupt+0x68>)
 8004f40:	f001 fca4 	bl	800688c <USART_ReceiveData>
	} else
		return;

	if (gbDxlWrite < (DXL_BUFFER_LENGTH - 1)) {
 8004f44:	4914      	ldr	r1, [pc, #80]	(8004f98 <RxD_DXL_Interrupt+0x6c>)
 8004f46:	f240 33fd 	movw	r3, #1021	; 0x3fd
 8004f4a:	880a      	ldrh	r2, [r1, #0]

//##############################################################################
void RxD_DXL_Interrupt(void) {
	u8 temp;
	if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET) {
		temp = USART_ReceiveData(USART1);
 8004f4c:	b2c0      	uxtb	r0, r0
	} else
		return;

	if (gbDxlWrite < (DXL_BUFFER_LENGTH - 1)) {
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	4a12      	ldr	r2, [pc, #72]	(8004f9c <RxD_DXL_Interrupt+0x70>)
 8004f52:	d805      	bhi.n	8004f60 <RxD_DXL_Interrupt+0x34>
		gbpDxlBuffer[gbDxlWrite++] = temp;
 8004f54:	880b      	ldrh	r3, [r1, #0]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	54d0      	strb	r0, [r2, r3]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	e004      	b.n	8004f6a <RxD_DXL_Interrupt+0x3e>
	} else {
		gbpDxlBuffer[gbDxlWrite] = temp;
 8004f60:	880b      	ldrh	r3, [r1, #0]
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	54d0      	strb	r0, [r2, r3]
		gbDxlWrite = 0;
 8004f66:	f04f 0300 	mov.w	r3, #0	; 0x0
 8004f6a:	800b      	strh	r3, [r1, #0]
	}

	if (gbDxlRead == gbDxlWrite)
 8004f6c:	4a0a      	ldr	r2, [pc, #40]	(8004f98 <RxD_DXL_Interrupt+0x6c>)
 8004f6e:	490c      	ldr	r1, [pc, #48]	(8004fa0 <RxD_DXL_Interrupt+0x74>)
 8004f70:	880b      	ldrh	r3, [r1, #0]
 8004f72:	8812      	ldrh	r2, [r2, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d103      	bne.n	8004f80 <RxD_DXL_Interrupt+0x54>
		gbDxlRead++;
 8004f78:	880b      	ldrh	r3, [r1, #0]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	800b      	strh	r3, [r1, #0]
	if (gbDxlRead > (DXL_BUFFER_LENGTH - 1))
 8004f80:	4907      	ldr	r1, [pc, #28]	(8004fa0 <RxD_DXL_Interrupt+0x74>)
 8004f82:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8004f86:	880a      	ldrh	r2, [r1, #0]
 8004f88:	429a      	cmp	r2, r3
		gbDxlRead = 0;
 8004f8a:	bf84      	itt	hi
 8004f8c:	2300      	movhi	r3, #0
 8004f8e:	800b      	strhhi	r3, [r1, #0]
}
 8004f90:	b001      	add	sp, #4
 8004f92:	bd00      	pop	{pc}
 8004f94:	40013800 	.word	0x40013800
 8004f98:	2000060e 	.word	0x2000060e
 8004f9c:	20000a5b 	.word	0x20000a5b
 8004fa0:	20000610 	.word	0x20000610

08004fa4 <dxl_hal_set_timeout>:

	return numPacket;
}

//##############################################################################
void dxl_hal_set_timeout(u8 NumRcvByte) {
 8004fa4:	b500      	push	{lr}
	start_timeout_dxl(NumRcvByte * 30);
 8004fa6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4

	return numPacket;
}

//##############################################################################
void dxl_hal_set_timeout(u8 NumRcvByte) {
 8004faa:	b081      	sub	sp, #4
	start_timeout_dxl(NumRcvByte * 30);
 8004fac:	0040      	lsls	r0, r0, #1
 8004fae:	f7ff fbd1 	bl	8004754 <start_timeout_dxl>
}
 8004fb2:	b001      	add	sp, #4
 8004fb4:	bd00      	pop	{pc}
 8004fb6:	46c0      	nop			(mov r8, r8)

08004fb8 <dxl_hal_tx>:
	gbDxlRead = 0;
	gbDxlWrite = 0;
}

//##############################################################################
u8 dxl_hal_tx(u8 *pPacket, u8 numPacket) {
 8004fb8:	b570      	push	{r4, r5, r6, lr}
 8004fba:	4606      	mov	r6, r0
 8004fbc:	460d      	mov	r5, r1
 8004fbe:	2400      	movs	r4, #0
 8004fc0:	e01a      	b.n	8004ff8 <dxl_hal_tx+0x40>
	u8 i;
	for (i = 0; i < numPacket; i++) {
		// RX Disable
		GPIO_ResetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);
 8004fc2:	4810      	ldr	r0, [pc, #64]	(8005004 <dxl_hal_tx+0x4c>)
 8004fc4:	2120      	movs	r1, #32
 8004fc6:	f000 fe8f 	bl	8005ce8 <GPIO_ResetBits>
		// TX Enable
		GPIO_SetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);
 8004fca:	480e      	ldr	r0, [pc, #56]	(8005004 <dxl_hal_tx+0x4c>)
 8004fcc:	2110      	movs	r1, #16
 8004fce:	f000 fe89 	bl	8005ce4 <GPIO_SetBits>

		USART_SendData(USART1, pPacket[i]);
 8004fd2:	5d31      	ldrb	r1, [r6, r4]
 8004fd4:	480c      	ldr	r0, [pc, #48]	(8005008 <dxl_hal_tx+0x50>)
 8004fd6:	f001 fc55 	bl	8006884 <USART_SendData>
		while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
 8004fda:	480b      	ldr	r0, [pc, #44]	(8005008 <dxl_hal_tx+0x50>)
 8004fdc:	2140      	movs	r1, #64
 8004fde:	f001 fcb7 	bl	8006950 <USART_GetFlagStatus>
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	d0f9      	beq.n	8004fda <dxl_hal_tx+0x22>
			;

		// TX Disable
		GPIO_ResetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);
 8004fe6:	4807      	ldr	r0, [pc, #28]	(8005004 <dxl_hal_tx+0x4c>)
 8004fe8:	2110      	movs	r1, #16
 8004fea:	f000 fe7d 	bl	8005ce8 <GPIO_ResetBits>
		// RX Enable
		GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);
 8004fee:	4805      	ldr	r0, [pc, #20]	(8005004 <dxl_hal_tx+0x4c>)
 8004ff0:	2120      	movs	r1, #32
 8004ff2:	f000 fe77 	bl	8005ce4 <GPIO_SetBits>
 8004ff6:	3401      	adds	r4, #1
}

//##############################################################################
u8 dxl_hal_tx(u8 *pPacket, u8 numPacket) {
	u8 i;
	for (i = 0; i < numPacket; i++) {
 8004ff8:	b2e3      	uxtb	r3, r4
 8004ffa:	42ab      	cmp	r3, r5
 8004ffc:	d3e1      	bcc.n	8004fc2 <dxl_hal_tx+0xa>
		// RX Enable
		GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);
	}

	return numPacket;
}
 8004ffe:	4628      	mov	r0, r5
 8005000:	bd70      	pop	{r4, r5, r6, pc}
 8005002:	46c0      	nop			(mov r8, r8)
 8005004:	40010c00 	.word	0x40010c00
 8005008:	40013800 	.word	0x40013800

0800500c <dxl_hal_close>:

	return 1;
}

//##############################################################################
void dxl_hal_close(void) {
 800500c:	b500      	push	{lr}
	// Disable USART1 (dynamixel)
	USART_Cmd(USART1, DISABLE);
 800500e:	4803      	ldr	r0, [pc, #12]	(800501c <dxl_hal_close+0x10>)

	return 1;
}

//##############################################################################
void dxl_hal_close(void) {
 8005010:	b081      	sub	sp, #4
	// Disable USART1 (dynamixel)
	USART_Cmd(USART1, DISABLE);
 8005012:	2100      	movs	r1, #0
 8005014:	f001 fbbc 	bl	8006790 <USART_Cmd>
}
 8005018:	b001      	add	sp, #4
 800501a:	bd00      	pop	{pc}
 800501c:	40013800 	.word	0x40013800

08005020 <zgb_hal_close>:
	return 1;
}

//##############################################################################
void zgb_hal_close(void)
{
 8005020:	b500      	push	{lr}
	// Disable UART5 (ZigBee)
	USART_Cmd(UART5, DISABLE);
 8005022:	2100      	movs	r1, #0
	return 1;
}

//##############################################################################
void zgb_hal_close(void)
{
 8005024:	b081      	sub	sp, #4
	// Disable UART5 (ZigBee)
	USART_Cmd(UART5, DISABLE);
 8005026:	4805      	ldr	r0, [pc, #20]	(800503c <zgb_hal_close+0x1c>)
 8005028:	f001 fbb2 	bl	8006790 <USART_Cmd>
	// Activate Reset mode of ZIG-110 module
//    GPIO_SetBits(PORT_ZIGBEE_RESET, PIN_ZIGBEE_RESET);    // original
	GPIO_ResetBits(PORT_ZIGBEE_RESET, PIN_ZIGBEE_RESET);// correct?
 800502c:	4804      	ldr	r0, [pc, #16]	(8005040 <zgb_hal_close+0x20>)
 800502e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005032:	f000 fe59 	bl	8005ce8 <GPIO_ResetBits>
}
 8005036:	b001      	add	sp, #4
 8005038:	bd00      	pop	{pc}
 800503a:	46c0      	nop			(mov r8, r8)
 800503c:	40005000 	.word	0x40005000
 8005040:	40010800 	.word	0x40010800

08005044 <pcu_hal_close>:
	    return 1;
	}

	//##############################################################################
	void pcu_hal_close(void)
	{
 8005044:	b500      	push	{lr}
	    // Disable USART3 (PC UART)
	    USART_Cmd(USART3, DISABLE);
 8005046:	4803      	ldr	r0, [pc, #12]	(8005054 <pcu_hal_close+0x10>)
	    return 1;
	}

	//##############################################################################
	void pcu_hal_close(void)
	{
 8005048:	b081      	sub	sp, #4
	    // Disable USART3 (PC UART)
	    USART_Cmd(USART3, DISABLE);
 800504a:	2100      	movs	r1, #0
 800504c:	f001 fba0 	bl	8006790 <USART_Cmd>
	}
 8005050:	b001      	add	sp, #4
 8005052:	bd00      	pop	{pc}
 8005054:	40004800 	.word	0x40004800

08005058 <dxl_hal_open>:

#endif

#ifdef USING_DYNAMIXEL
//##############################################################################
u8 dxl_hal_open(u32 baudrate) {
 8005058:	b530      	push	{r4, r5, lr}
 800505a:	b085      	sub	sp, #20
 800505c:	4604      	mov	r4, r0
	USART_InitTypeDef USART_InitStructure;

	USART_StructInit(&USART_InitStructure);
 800505e:	4668      	mov	r0, sp
 8005060:	f001 fb6a 	bl	8006738 <USART_StructInit>

	USART_InitStructure.USART_BaudRate = baudrate;
 8005064:	9400      	str	r4, [sp, #0]
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl =
	USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

	USART_DeInit(USART1);
 8005066:	4c13      	ldr	r4, [pc, #76]	(80050b4 <dxl_hal_open+0x5c>)
	USART_InitTypeDef USART_InitStructure;

	USART_StructInit(&USART_InitStructure);

	USART_InitStructure.USART_BaudRate = baudrate;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8005068:	f04f 0300 	mov.w	r3, #0	; 0x0
 800506c:	f8ad 3004 	strh.w	r3, [sp, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8005070:	f8ad 3006 	strh.w	r3, [sp, #6]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8005074:	f8ad 3008 	strh.w	r3, [sp, #8]
	USART_InitStructure.USART_HardwareFlowControl =
 8005078:	f8ad 300c 	strh.w	r3, [sp, #12]
	USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

	USART_DeInit(USART1);
 800507c:	4620      	mov	r0, r4
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl =
	USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800507e:	f04f 030c 	mov.w	r3, #12	; 0xc
 8005082:	f8ad 300a 	strh.w	r3, [sp, #10]

	USART_DeInit(USART1);
 8005086:	f001 fceb 	bl	8006a60 <USART_DeInit>
	mDelay(10);
 800508a:	200a      	movs	r0, #10
 800508c:	f7ff fb42 	bl	8004714 <mDelay>
	// Configure USART1 (dynamixel)
	USART_Init(USART1, &USART_InitStructure);
 8005090:	4620      	mov	r0, r4
 8005092:	4669      	mov	r1, sp
 8005094:	f001 fc96 	bl	80069c4 <USART_Init>

	// Enable USART1 (dynamixel) Receive interrupt
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8005098:	4620      	mov	r0, r4
 800509a:	2201      	movs	r2, #1
 800509c:	f240 5125 	movw	r1, #1317	; 0x525
 80050a0:	f001 fb84 	bl	80067ac <USART_ITConfig>

	// Enable USART1 (dynamixel)
	USART_Cmd(USART1, ENABLE);
 80050a4:	4620      	mov	r0, r4
 80050a6:	2101      	movs	r1, #1
 80050a8:	f001 fb72 	bl	8006790 <USART_Cmd>
#ifdef USING_DYNAMIXEL
//##############################################################################
u8 dxl_hal_open(u32 baudrate) {
	USART_InitTypeDef USART_InitStructure;

	USART_StructInit(&USART_InitStructure);
 80050ac:	466d      	mov	r5, sp

	// Enable USART1 (dynamixel)
	USART_Cmd(USART1, ENABLE);

	return 1;
}
 80050ae:	2001      	movs	r0, #1
 80050b0:	b005      	add	sp, #20
 80050b2:	bd30      	pop	{r4, r5, pc}
 80050b4:	40013800 	.word	0x40013800

080050b8 <zgb_hal_open>:
#endif

#ifdef USING_ZIGBEE
//##############################################################################
u8 zgb_hal_open(u32 baudrate)
{
 80050b8:	b530      	push	{r4, r5, lr}
 80050ba:	b085      	sub	sp, #20
 80050bc:	4604      	mov	r4, r0
	USART_InitTypeDef USART_InitStructure;

	USART_StructInit(&USART_InitStructure);
 80050be:	4668      	mov	r0, sp
 80050c0:	f001 fb3a 	bl	8006738 <USART_StructInit>

	USART_InitStructure.USART_BaudRate = baudrate;
 80050c4:	9400      	str	r4, [sp, #0]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

	USART_DeInit(UART5);
 80050c6:	4c16      	ldr	r4, [pc, #88]	(8005120 <zgb_hal_open+0x68>)
	USART_InitTypeDef USART_InitStructure;

	USART_StructInit(&USART_InitStructure);

	USART_InitStructure.USART_BaudRate = baudrate;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80050c8:	f04f 0300 	mov.w	r3, #0	; 0x0
 80050cc:	f8ad 3004 	strh.w	r3, [sp, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80050d0:	f8ad 3006 	strh.w	r3, [sp, #6]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 80050d4:	f8ad 3008 	strh.w	r3, [sp, #8]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80050d8:	f8ad 300c 	strh.w	r3, [sp, #12]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

	USART_DeInit(UART5);
 80050dc:	4620      	mov	r0, r4
	USART_InitStructure.USART_BaudRate = baudrate;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80050de:	f04f 030c 	mov.w	r3, #12	; 0xc
 80050e2:	f8ad 300a 	strh.w	r3, [sp, #10]

	USART_DeInit(UART5);
 80050e6:	f001 fcbb 	bl	8006a60 <USART_DeInit>
	mDelay(10);
 80050ea:	200a      	movs	r0, #10
 80050ec:	f7ff fb12 	bl	8004714 <mDelay>
	// Configure UART5 (ZigBee)
	USART_Init(UART5, &USART_InitStructure);
 80050f0:	4620      	mov	r0, r4
 80050f2:	4669      	mov	r1, sp
 80050f4:	f001 fc66 	bl	80069c4 <USART_Init>

	// Enable UART5 (ZigBee) Receive interrupt
	USART_ITConfig(UART5, USART_IT_RXNE, ENABLE);
 80050f8:	2201      	movs	r2, #1
 80050fa:	4620      	mov	r0, r4
 80050fc:	f240 5125 	movw	r1, #1317	; 0x525
 8005100:	f001 fb54 	bl	80067ac <USART_ITConfig>

	// Enable UART5 (ZigBee)
	USART_Cmd(UART5, ENABLE);
 8005104:	4620      	mov	r0, r4
 8005106:	2101      	movs	r1, #1
 8005108:	f001 fb42 	bl	8006790 <USART_Cmd>

	// De-activate Reset mode of ZIG-110 module
	//GPIO_SetBits(PORT_ZIGBEE_RESET, PIN_ZIGBEE_RESET);
	GPIO_ResetBits(PORT_ZIGBEE_RESET, PIN_ZIGBEE_RESET);
 800510c:	4805      	ldr	r0, [pc, #20]	(8005124 <zgb_hal_open+0x6c>)
 800510e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005112:	f000 fde9 	bl	8005ce8 <GPIO_ResetBits>
//##############################################################################
u8 zgb_hal_open(u32 baudrate)
{
	USART_InitTypeDef USART_InitStructure;

	USART_StructInit(&USART_InitStructure);
 8005116:	466d      	mov	r5, sp
	// De-activate Reset mode of ZIG-110 module
	//GPIO_SetBits(PORT_ZIGBEE_RESET, PIN_ZIGBEE_RESET);
	GPIO_ResetBits(PORT_ZIGBEE_RESET, PIN_ZIGBEE_RESET);

	return 1;
}
 8005118:	2001      	movs	r0, #1
 800511a:	b005      	add	sp, #20
 800511c:	bd30      	pop	{r4, r5, pc}
 800511e:	46c0      	nop			(mov r8, r8)
 8005120:	40005000 	.word	0x40005000
 8005124:	40010800 	.word	0x40010800

08005128 <pcu_hal_open>:
#endif


#ifdef USING_PC_UART
	u8 pcu_hal_open(u32 baudrate)
	{
 8005128:	b530      	push	{r4, r5, lr}
 800512a:	b085      	sub	sp, #20
 800512c:	4604      	mov	r4, r0
	    USART_InitTypeDef USART_InitStructure;

	    USART_StructInit(&USART_InitStructure);
 800512e:	4668      	mov	r0, sp
 8005130:	f001 fb02 	bl	8006738 <USART_StructInit>

	    USART_InitStructure.USART_BaudRate = baudrate;
 8005134:	9400      	str	r4, [sp, #0]
	    USART_InitStructure.USART_StopBits = USART_StopBits_1;
	    USART_InitStructure.USART_Parity = USART_Parity_No ;
	    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

	    USART_DeInit(USART3);
 8005136:	4c13      	ldr	r4, [pc, #76]	(8005184 <pcu_hal_open+0x5c>)
	    USART_InitTypeDef USART_InitStructure;

	    USART_StructInit(&USART_InitStructure);

	    USART_InitStructure.USART_BaudRate = baudrate;
	    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8005138:	f04f 0300 	mov.w	r3, #0	; 0x0
 800513c:	f8ad 3004 	strh.w	r3, [sp, #4]
	    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8005140:	f8ad 3006 	strh.w	r3, [sp, #6]
	    USART_InitStructure.USART_Parity = USART_Parity_No ;
 8005144:	f8ad 3008 	strh.w	r3, [sp, #8]
	    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8005148:	f8ad 300c 	strh.w	r3, [sp, #12]
	    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

	    USART_DeInit(USART3);
 800514c:	4620      	mov	r0, r4
	    USART_InitStructure.USART_BaudRate = baudrate;
	    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	    USART_InitStructure.USART_StopBits = USART_StopBits_1;
	    USART_InitStructure.USART_Parity = USART_Parity_No ;
	    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800514e:	f04f 030c 	mov.w	r3, #12	; 0xc
 8005152:	f8ad 300a 	strh.w	r3, [sp, #10]

	    USART_DeInit(USART3);
 8005156:	f001 fc83 	bl	8006a60 <USART_DeInit>
	    mDelay(10);
 800515a:	200a      	movs	r0, #10
 800515c:	f7ff fada 	bl	8004714 <mDelay>
	    // Configure USART3 (PC_UART)
	    USART_Init(USART3, &USART_InitStructure);
 8005160:	4620      	mov	r0, r4
 8005162:	4669      	mov	r1, sp
 8005164:	f001 fc2e 	bl	80069c4 <USART_Init>

	    // Enable USART3 (PC_UART) Receive interrupt
	    USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
 8005168:	4620      	mov	r0, r4
 800516a:	2201      	movs	r2, #1
 800516c:	f240 5125 	movw	r1, #1317	; 0x525
 8005170:	f001 fb1c 	bl	80067ac <USART_ITConfig>

	    // Enable USART3 (PC_UART)
	    USART_Cmd(USART3, ENABLE);
 8005174:	4620      	mov	r0, r4
 8005176:	2101      	movs	r1, #1
 8005178:	f001 fb0a 	bl	8006790 <USART_Cmd>
#ifdef USING_PC_UART
	u8 pcu_hal_open(u32 baudrate)
	{
	    USART_InitTypeDef USART_InitStructure;

	    USART_StructInit(&USART_InitStructure);
 800517c:	466d      	mov	r5, sp
	    USART_Cmd(USART3, ENABLE);

	//    PC_UART_Device = fdevopen( std_putchar, std_getchar );

	    return 1;
	}
 800517e:	2001      	movs	r0, #1
 8005180:	b005      	add	sp, #20
 8005182:	bd30      	pop	{r4, r5, pc}
 8005184:	40004800 	.word	0x40004800

08005188 <RxD_ZIG_Interrupt>:
	return numPacket;
}

//##############################################################################
void RxD_ZIG_Interrupt(void)
{
 8005188:	b510      	push	{r4, lr}
	u8 temp;
	if (USART_GetITStatus(UART5, USART_IT_RXNE)!=RESET)
 800518a:	481e      	ldr	r0, [pc, #120]	(8005204 <RxD_ZIG_Interrupt+0x7c>)
 800518c:	f240 5125 	movw	r1, #1317	; 0x525
 8005190:	f001 fbea 	bl	8006968 <USART_GetITStatus>
 8005194:	2800      	cmp	r0, #0
 8005196:	d034      	beq.n	8005202 <RxD_ZIG_Interrupt+0x7a>
	{
		temp = USART_ReceiveData(UART5);
 8005198:	481a      	ldr	r0, [pc, #104]	(8005204 <RxD_ZIG_Interrupt+0x7c>)
 800519a:	f001 fb77 	bl	800688c <USART_ReceiveData>
 800519e:	b2c4      	uxtb	r4, r0
		if (temp=='#'){
 80051a0:	2c23      	cmp	r4, #35
 80051a2:	4a19      	ldr	r2, [pc, #100]	(8005208 <RxD_ZIG_Interrupt+0x80>)
 80051a4:	d103      	bne.n	80051ae <RxD_ZIG_Interrupt+0x26>
		ReBootToBootLoader++;
 80051a6:	7813      	ldrb	r3, [r2, #0]
 80051a8:	3301      	adds	r3, #1
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	e000      	b.n	80051b0 <RxD_ZIG_Interrupt+0x28>

		}
		else
		ReBootToBootLoader=0;
 80051ae:	2300      	movs	r3, #0
 80051b0:	7013      	strb	r3, [r2, #0]

		if (ReBootToBootLoader>15)
 80051b2:	4b15      	ldr	r3, [pc, #84]	(8005208 <RxD_ZIG_Interrupt+0x80>)
		}
	}
	else
	return;

	SetLED(RXD, 1);
 80051b4:	2101      	movs	r1, #1
 80051b6:	2005      	movs	r0, #5

		}
		else
		ReBootToBootLoader=0;

		if (ReBootToBootLoader>15)
 80051b8:	781b      	ldrb	r3, [r3, #0]
		}
	}
	else
	return;

	SetLED(RXD, 1);
 80051ba:	f7ff fa4f 	bl	800465c <SetLED>

	if (gbZigWrite<(ZIGBEE_BUFFER_LENGTH-1))
 80051be:	4a13      	ldr	r2, [pc, #76]	(800520c <RxD_ZIG_Interrupt+0x84>)
 80051c0:	4913      	ldr	r1, [pc, #76]	(8005210 <RxD_ZIG_Interrupt+0x88>)
 80051c2:	7813      	ldrb	r3, [r2, #0]
 80051c4:	2b3e      	cmp	r3, #62
 80051c6:	d804      	bhi.n	80051d2 <RxD_ZIG_Interrupt+0x4a>
	{
		gbpZigBuffer[gbZigWrite++] = temp;
 80051c8:	7813      	ldrb	r3, [r2, #0]
 80051ca:	54cc      	strb	r4, [r1, r3]
 80051cc:	3301      	adds	r3, #1
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	e002      	b.n	80051d8 <RxD_ZIG_Interrupt+0x50>
	}
	else
	{
		gbpZigBuffer[gbZigWrite] = temp;
 80051d2:	7813      	ldrb	r3, [r2, #0]
 80051d4:	54cc      	strb	r4, [r1, r3]
		gbZigWrite = 0;
 80051d6:	2300      	movs	r3, #0
 80051d8:	7013      	strb	r3, [r2, #0]
	}

	if (gbZigRead==gbZigWrite)
 80051da:	490e      	ldr	r1, [pc, #56]	(8005214 <RxD_ZIG_Interrupt+0x8c>)
 80051dc:	4a0b      	ldr	r2, [pc, #44]	(800520c <RxD_ZIG_Interrupt+0x84>)
 80051de:	780b      	ldrb	r3, [r1, #0]
 80051e0:	7812      	ldrb	r2, [r2, #0]
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d103      	bne.n	80051ee <RxD_ZIG_Interrupt+0x66>
	gbZigRead++;
 80051e6:	780b      	ldrb	r3, [r1, #0]
 80051e8:	3301      	adds	r3, #1
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	700b      	strb	r3, [r1, #0]
	if (gbZigRead>(ZIGBEE_BUFFER_LENGTH-1))
 80051ee:	4a09      	ldr	r2, [pc, #36]	(8005214 <RxD_ZIG_Interrupt+0x8c>)
 80051f0:	7813      	ldrb	r3, [r2, #0]
 80051f2:	2b3f      	cmp	r3, #63
 80051f4:	d901      	bls.n	80051fa <RxD_ZIG_Interrupt+0x72>
	gbZigRead=0;
 80051f6:	2300      	movs	r3, #0
 80051f8:	7013      	strb	r3, [r2, #0]

	SetLED(RXD, 0);
 80051fa:	2005      	movs	r0, #5
 80051fc:	2100      	movs	r1, #0
 80051fe:	f7ff fa2d 	bl	800465c <SetLED>
}
 8005202:	bd10      	pop	{r4, pc}
 8005204:	40005000 	.word	0x40005000
 8005208:	20000a14 	.word	0x20000a14
 800520c:	20000612 	.word	0x20000612
 8005210:	20000a1a 	.word	0x20000a1a
 8005214:	20000613 	.word	0x20000613

08005218 <zgb_hal_tx>:
	GPIO_ResetBits(PORT_ZIGBEE_RESET, PIN_ZIGBEE_RESET);// correct?
}

//##############################################################################
u8 zgb_hal_tx(u8 *pPacket, u8 numPacket)
{
 8005218:	b570      	push	{r4, r5, r6, lr}
 800521a:	4606      	mov	r6, r0
 800521c:	460d      	mov	r5, r1
 800521e:	2400      	movs	r4, #0
 8005220:	e012      	b.n	8005248 <zgb_hal_tx+0x30>
	u8 i;
	for (i=0; i<numPacket; i++)
	{
		SetLED(TXD, 1);
 8005222:	2004      	movs	r0, #4
 8005224:	2101      	movs	r1, #1
 8005226:	f7ff fa19 	bl	800465c <SetLED>

		USART_SendData(UART5,pPacket[i]);
 800522a:	5d31      	ldrb	r1, [r6, r4]
 800522c:	4809      	ldr	r0, [pc, #36]	(8005254 <zgb_hal_tx+0x3c>)
 800522e:	f001 fb29 	bl	8006884 <USART_SendData>
		while (USART_GetFlagStatus(UART5, USART_FLAG_TC)==RESET);
 8005232:	4808      	ldr	r0, [pc, #32]	(8005254 <zgb_hal_tx+0x3c>)
 8005234:	2140      	movs	r1, #64
 8005236:	f001 fb8b 	bl	8006950 <USART_GetFlagStatus>
 800523a:	2800      	cmp	r0, #0
 800523c:	d0f9      	beq.n	8005232 <zgb_hal_tx+0x1a>

		SetLED(TXD, 0);
 800523e:	2004      	movs	r0, #4
 8005240:	2100      	movs	r1, #0
 8005242:	f7ff fa0b 	bl	800465c <SetLED>
 8005246:	3401      	adds	r4, #1

//##############################################################################
u8 zgb_hal_tx(u8 *pPacket, u8 numPacket)
{
	u8 i;
	for (i=0; i<numPacket; i++)
 8005248:	b2e3      	uxtb	r3, r4
 800524a:	42ab      	cmp	r3, r5
 800524c:	d3e9      	bcc.n	8005222 <zgb_hal_tx+0xa>

		SetLED(TXD, 0);
	}

	return numPacket;
}
 800524e:	4628      	mov	r0, r5
 8005250:	bd70      	pop	{r4, r5, r6, pc}
 8005252:	46c0      	nop			(mov r8, r8)
 8005254:	40005000 	.word	0x40005000

08005258 <pcu_put_queue>:
	    return data;
	}

	//##############################################################################
	void pcu_put_queue(void)
	{
 8005258:	b510      	push	{r4, lr}
	    u8 temp;
	    if (USART_GetITStatus(USART3, USART_IT_RXNE)!=RESET)
 800525a:	4822      	ldr	r0, [pc, #136]	(80052e4 <pcu_put_queue+0x8c>)
 800525c:	f240 5125 	movw	r1, #1317	; 0x525
 8005260:	f001 fb82 	bl	8006968 <USART_GetITStatus>
 8005264:	2800      	cmp	r0, #0
 8005266:	d03b      	beq.n	80052e0 <pcu_put_queue+0x88>
	    {
	        temp = USART_ReceiveData(USART3);
 8005268:	481e      	ldr	r0, [pc, #120]	(80052e4 <pcu_put_queue+0x8c>)
 800526a:	f001 fb0f 	bl	800688c <USART_ReceiveData>
 800526e:	b2c4      	uxtb	r4, r0
	        if (temp=='#')
 8005270:	2c23      	cmp	r4, #35
 8005272:	4a1d      	ldr	r2, [pc, #116]	(80052e8 <pcu_put_queue+0x90>)
 8005274:	d103      	bne.n	800527e <pcu_put_queue+0x26>
	            ReBootToBootLoader++;
 8005276:	7813      	ldrb	r3, [r2, #0]
 8005278:	3301      	adds	r3, #1
 800527a:	b2db      	uxtb	r3, r3
 800527c:	e000      	b.n	8005280 <pcu_put_queue+0x28>
	        else
	            ReBootToBootLoader=0;
 800527e:	2300      	movs	r3, #0
 8005280:	7013      	strb	r3, [r2, #0]

	        if (ReBootToBootLoader>15)
 8005282:	4b19      	ldr	r3, [pc, #100]	(80052e8 <pcu_put_queue+0x90>)
	        }
	    }
	    else
	        return;

	    SetLED(RXD, 1);
 8005284:	2101      	movs	r1, #1
 8005286:	2005      	movs	r0, #5
	        if (temp=='#')
	            ReBootToBootLoader++;
	        else
	            ReBootToBootLoader=0;

	        if (ReBootToBootLoader>15)
 8005288:	781b      	ldrb	r3, [r3, #0]
	        }
	    }
	    else
	        return;

	    SetLED(RXD, 1);
 800528a:	f7ff f9e7 	bl	800465c <SetLED>

	    if (gbPcuWrite<(PC_UART_BUFFER_LENGTH-1))
 800528e:	4917      	ldr	r1, [pc, #92]	(80052ec <pcu_put_queue+0x94>)
 8005290:	f240 33fd 	movw	r3, #1021	; 0x3fd
 8005294:	880a      	ldrh	r2, [r1, #0]
 8005296:	429a      	cmp	r2, r3
 8005298:	4a15      	ldr	r2, [pc, #84]	(80052f0 <pcu_put_queue+0x98>)
 800529a:	d805      	bhi.n	80052a8 <pcu_put_queue+0x50>
	    {
	        gbpPcuBuffer[gbPcuWrite++] = temp;
 800529c:	880b      	ldrh	r3, [r1, #0]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	54d4      	strb	r4, [r2, r3]
 80052a2:	3301      	adds	r3, #1
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	e004      	b.n	80052b2 <pcu_put_queue+0x5a>
	    }
	    else
	    {
	        gbpPcuBuffer[gbPcuWrite] = temp;
 80052a8:	880b      	ldrh	r3, [r1, #0]
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	54d4      	strb	r4, [r2, r3]
	        gbPcuWrite = 0;
 80052ae:	f04f 0300 	mov.w	r3, #0	; 0x0
 80052b2:	800b      	strh	r3, [r1, #0]
	    }

	    if (gbPcuRead==gbPcuWrite)
 80052b4:	4a0d      	ldr	r2, [pc, #52]	(80052ec <pcu_put_queue+0x94>)
 80052b6:	490f      	ldr	r1, [pc, #60]	(80052f4 <pcu_put_queue+0x9c>)
 80052b8:	880b      	ldrh	r3, [r1, #0]
 80052ba:	8812      	ldrh	r2, [r2, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d103      	bne.n	80052c8 <pcu_put_queue+0x70>
	        gbPcuRead++;
 80052c0:	880b      	ldrh	r3, [r1, #0]
 80052c2:	3301      	adds	r3, #1
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	800b      	strh	r3, [r1, #0]
	    if (gbPcuRead>(PC_UART_BUFFER_LENGTH-1))
 80052c8:	490a      	ldr	r1, [pc, #40]	(80052f4 <pcu_put_queue+0x9c>)
 80052ca:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80052ce:	880a      	ldrh	r2, [r1, #0]
 80052d0:	429a      	cmp	r2, r3
	        gbPcuRead=0;
 80052d2:	bf84      	itt	hi
 80052d4:	2300      	movhi	r3, #0
 80052d6:	800b      	strhhi	r3, [r1, #0]

	    SetLED(RXD, 0);
 80052d8:	2005      	movs	r0, #5
 80052da:	2100      	movs	r1, #0
 80052dc:	f7ff f9be 	bl	800465c <SetLED>
	}
 80052e0:	bd10      	pop	{r4, pc}
 80052e2:	46c0      	nop			(mov r8, r8)
 80052e4:	40004800 	.word	0x40004800
 80052e8:	20000a14 	.word	0x20000a14
 80052ec:	20000a16 	.word	0x20000a16
 80052f0:	20000614 	.word	0x20000614
 80052f4:	20000a18 	.word	0x20000a18

080052f8 <RxD_PCU_Interrupt>:
	        return (u8) (PC_UART_BUFFER_LENGTH-(gbPcuRead-gbPcuWrite));
	}

	//##############################################################################
	void RxD_PCU_Interrupt(void)
	{
 80052f8:	b500      	push	{lr}
 80052fa:	b081      	sub	sp, #4
	    pcu_put_queue();
 80052fc:	f7ff ffac 	bl	8005258 <pcu_put_queue>
	}
 8005300:	b001      	add	sp, #4
 8005302:	bd00      	pop	{pc}

08005304 <pcu_put_byte>:
	        return 0;
	}

	//##############################################################################
	void pcu_put_byte(u8 bTxdData)
	{
 8005304:	b510      	push	{r4, lr}
 8005306:	4604      	mov	r4, r0
	    SetLED(TXD, 1);
 8005308:	2101      	movs	r1, #1
 800530a:	2004      	movs	r0, #4

	    USART_SendData(USART3,bTxdData);
 800530c:	b2a4      	uxth	r4, r4
	}

	//##############################################################################
	void pcu_put_byte(u8 bTxdData)
	{
	    SetLED(TXD, 1);
 800530e:	f7ff f9a5 	bl	800465c <SetLED>

	    USART_SendData(USART3,bTxdData);
 8005312:	4807      	ldr	r0, [pc, #28]	(8005330 <pcu_put_byte+0x2c>)
 8005314:	4621      	mov	r1, r4
 8005316:	f001 fab5 	bl	8006884 <USART_SendData>
	    while (USART_GetFlagStatus(USART3, USART_FLAG_TC)==RESET);
 800531a:	4805      	ldr	r0, [pc, #20]	(8005330 <pcu_put_byte+0x2c>)
 800531c:	2140      	movs	r1, #64
 800531e:	f001 fb17 	bl	8006950 <USART_GetFlagStatus>
 8005322:	2800      	cmp	r0, #0
 8005324:	d0f9      	beq.n	800531a <pcu_put_byte+0x16>

	    SetLED(TXD, 0);
 8005326:	2004      	movs	r0, #4
 8005328:	2100      	movs	r1, #0
 800532a:	f7ff f997 	bl	800465c <SetLED>
	}
 800532e:	bd10      	pop	{r4, pc}
 8005330:	40004800 	.word	0x40004800

08005334 <pcu_hal_set_timeout>:
	    USART_Cmd(USART3, DISABLE);
	}

	//##############################################################################
	void pcu_hal_set_timeout(u8 NumRcvByte)
	{
 8005334:	b500      	push	{lr}
 8005336:	4603      	mov	r3, r0
	    // 200us; ~180 us to transmit one byte at 57600 bps
	    start_timeout_pcu(NumRcvByte*200);
 8005338:	20c8      	movs	r0, #200
	    USART_Cmd(USART3, DISABLE);
	}

	//##############################################################################
	void pcu_hal_set_timeout(u8 NumRcvByte)
	{
 800533a:	b081      	sub	sp, #4
	    // 200us; ~180 us to transmit one byte at 57600 bps
	    start_timeout_pcu(NumRcvByte*200);
 800533c:	fb00 f003 	mul.w	r0, r0, r3
 8005340:	f7ff fa24 	bl	800478c <start_timeout_pcu>
	}
 8005344:	b001      	add	sp, #4
 8005346:	bd00      	pop	{pc}

08005348 <ADC_Init>:
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8005348:	6843      	ldr	r3, [r0, #4]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (u32)(ADC_InitStruct->ADC_Mode | ((u32)ADC_InitStruct->ADC_ScanConvMode << 8));
 800534a:	680a      	ldr	r2, [r1, #0]
 800534c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8005350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005354:	4313      	orrs	r3, r2
 8005356:	790a      	ldrb	r2, [r1, #4]
 8005358:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 800535c:	6043      	str	r3, [r0, #4]
  tmpreg1 &= CR2_CLEAR_Mask;
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (u32)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 800535e:	68cb      	ldr	r3, [r1, #12]
 8005360:	688a      	ldr	r2, [r1, #8]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8005362:	f8d0 c008 	ldr.w	ip, [r0, #8]
  tmpreg1 &= CR2_CLEAR_Mask;
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (u32)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8005366:	431a      	orrs	r2, r3
 8005368:	4b08      	ldr	r3, [pc, #32]	(800538c <ADC_Init+0x44>)
 800536a:	ea0c 0303 	and.w	r3, ip, r3
 800536e:	431a      	orrs	r2, r3
 8005370:	794b      	ldrb	r3, [r1, #5]
 8005372:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
            ((u32)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8005376:	6082      	str	r2, [r0, #8]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (ADC_InitStruct->ADC_NbrOfChannel - 1);
  tmpreg1 |= ((u32)tmpreg2 << 20);
 8005378:	7c0b      	ldrb	r3, [r1, #16]
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800537a:	6ac2      	ldr	r2, [r0, #44]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (ADC_InitStruct->ADC_NbrOfChannel - 1);
  tmpreg1 |= ((u32)tmpreg2 << 20);
 800537c:	3b01      	subs	r3, #1

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
 800537e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (ADC_InitStruct->ADC_NbrOfChannel - 1);
  tmpreg1 |= ((u32)tmpreg2 << 20);
 8005382:	b2db      	uxtb	r3, r3
 8005384:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8005388:	62c2      	str	r2, [r0, #44]
}
 800538a:	4770      	bx	lr
 800538c:	fff1f7fd 	.word	0xfff1f7fd

08005390 <ADC_StructInit>:
*******************************************************************************/
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
 8005390:	2300      	movs	r3, #0
 8005392:	6003      	str	r3, [r0, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8005394:	7103      	strb	r3, [r0, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8005396:	7143      	strb	r3, [r0, #5]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8005398:	6083      	str	r3, [r0, #8]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 800539a:	60c3      	str	r3, [r0, #12]

  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
 800539c:	2301      	movs	r3, #1
 800539e:	7403      	strb	r3, [r0, #16]
}
 80053a0:	4770      	bx	lr
 80053a2:	46c0      	nop			(mov r8, r8)

080053a4 <ADC_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80053a4:	b119      	cbz	r1, 80053ae <ADC_Cmd+0xa>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 80053a6:	6883      	ldr	r3, [r0, #8]
 80053a8:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 80053ac:	e002      	b.n	80053b4 <ADC_Cmd+0x10>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
 80053ae:	6883      	ldr	r3, [r0, #8]
 80053b0:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 80053b4:	6083      	str	r3, [r0, #8]
  }
}
 80053b6:	4770      	bx	lr

080053b8 <ADC_DMACmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80053b8:	b119      	cbz	r1, 80053c2 <ADC_DMACmd+0xa>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
 80053ba:	6883      	ldr	r3, [r0, #8]
 80053bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053c0:	e002      	b.n	80053c8 <ADC_DMACmd+0x10>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
 80053c2:	6883      	ldr	r3, [r0, #8]
 80053c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053c8:	6083      	str	r3, [r0, #8]
  }
}
 80053ca:	4770      	bx	lr

080053cc <ADC_ITConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));

  /* Get the ADC IT index */
  itmask = (u8)ADC_IT;
 80053cc:	b2c9      	uxtb	r1, r1

  if (NewState != DISABLE)
 80053ce:	b11a      	cbz	r2, 80053d8 <ADC_ITConfig+0xc>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 80053d0:	6843      	ldr	r3, [r0, #4]
 80053d2:	ea41 0303 	orr.w	r3, r1, r3
 80053d6:	e002      	b.n	80053de <ADC_ITConfig+0x12>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(u32)itmask);
 80053d8:	6843      	ldr	r3, [r0, #4]
 80053da:	ea23 0301 	bic.w	r3, r3, r1
 80053de:	6043      	str	r3, [r0, #4]
  }
}
 80053e0:	4770      	bx	lr
 80053e2:	46c0      	nop			(mov r8, r8)

080053e4 <ADC_ResetCalibration>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Resets the selected ADC calibartion registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
 80053e4:	6883      	ldr	r3, [r0, #8]
 80053e6:	f043 0308 	orr.w	r3, r3, #8	; 0x8
 80053ea:	6083      	str	r3, [r0, #8]
}
 80053ec:	4770      	bx	lr
 80053ee:	46c0      	nop			(mov r8, r8)

080053f0 <ADC_GetResetCalibrationStatus>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (u32)RESET)
 80053f0:	6880      	ldr	r0, [r0, #8]
 80053f2:	08c0      	lsrs	r0, r0, #3
 80053f4:	f000 0001 	and.w	r0, r0, #1	; 0x1
    bitstatus = RESET;
  }

  /* Return the RSTCAL bit status */
  return  bitstatus;
}
 80053f8:	4770      	bx	lr
 80053fa:	46c0      	nop			(mov r8, r8)

080053fc <ADC_StartCalibration>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 80053fc:	6883      	ldr	r3, [r0, #8]
 80053fe:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 8005402:	6083      	str	r3, [r0, #8]
}
 8005404:	4770      	bx	lr
 8005406:	46c0      	nop			(mov r8, r8)

08005408 <ADC_GetCalibrationStatus>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (u32)RESET)
 8005408:	6880      	ldr	r0, [r0, #8]
 800540a:	0880      	lsrs	r0, r0, #2
 800540c:	f000 0001 	and.w	r0, r0, #1	; 0x1
    bitstatus = RESET;
  }

  /* Return the CAL bit status */
  return  bitstatus;
}
 8005410:	4770      	bx	lr
 8005412:	46c0      	nop			(mov r8, r8)

08005414 <ADC_SoftwareStartConvCmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005414:	b119      	cbz	r1, 800541e <ADC_SoftwareStartConvCmd+0xa>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 8005416:	6883      	ldr	r3, [r0, #8]
 8005418:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800541c:	e002      	b.n	8005424 <ADC_SoftwareStartConvCmd+0x10>
  }
  else
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 800541e:	6883      	ldr	r3, [r0, #8]
 8005420:	f423 03a0 	bic.w	r3, r3, #5242880	; 0x500000
 8005424:	6083      	str	r3, [r0, #8]
  }
}
 8005426:	4770      	bx	lr

08005428 <ADC_GetSoftwareStartConvStatus>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & CR2_SWSTART_Set) != (u32)RESET)
 8005428:	6880      	ldr	r0, [r0, #8]
 800542a:	0d80      	lsrs	r0, r0, #22
 800542c:	f000 0001 	and.w	r0, r0, #1	; 0x1
    bitstatus = RESET;
  }

  /* Return the SWSTART bit status */
  return  bitstatus;
}
 8005430:	4770      	bx	lr
 8005432:	46c0      	nop			(mov r8, r8)

08005434 <ADC_DiscModeChannelCountConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));

  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 8005434:	6843      	ldr	r3, [r0, #4]
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_Reset;
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
  tmpreg1 |= tmpreg2 << 13;
 8005436:	3901      	subs	r1, #1
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));

  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_Reset;
 8005438:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
  tmpreg1 |= tmpreg2 << 13;
 800543c:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 8005440:	6043      	str	r3, [r0, #4]
}
 8005442:	4770      	bx	lr

08005444 <ADC_DiscModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005444:	b119      	cbz	r1, 800544e <ADC_DiscModeCmd+0xa>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= CR1_DISCEN_Set;
 8005446:	6843      	ldr	r3, [r0, #4]
 8005448:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800544c:	e002      	b.n	8005454 <ADC_DiscModeCmd+0x10>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= CR1_DISCEN_Reset;
 800544e:	6843      	ldr	r3, [r0, #4]
 8005450:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005454:	6043      	str	r3, [r0, #4]
  }
}
 8005456:	4770      	bx	lr

08005458 <ADC_RegularChannelConfig>:
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8005458:	2909      	cmp	r1, #9
*                       - ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
* Output         : None
* Return         : None
*******************************************************************************/
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, u8 ADC_Channel, u8 Rank, u8 ADC_SampleTime)
{
 800545a:	b530      	push	{r4, r5, lr}
 800545c:	4694      	mov	ip, r2
 800545e:	460c      	mov	r4, r1
 8005460:	461d      	mov	r5, r3
 8005462:	ea4f 0241 	mov.w	r2, r1, lsl #1
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8005466:	d90b      	bls.n	8005480 <ADC_RegularChannelConfig+0x28>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 8005468:	1912      	adds	r2, r2, r4
 800546a:	3a1e      	subs	r2, #30
    /* Clear the old discontinuous mode channel count */
    tmpreg1 &= ~tmpreg2;
 800546c:	2307      	movs	r3, #7
 800546e:	4093      	lsls	r3, r2
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_SampleTime << (3 * (ADC_Channel - 10));
    /* Set the discontinuous mode channel count */
    tmpreg1 |= tmpreg2;
 8005470:	fa15 f202 	lsls.w	r2, r5, r2

  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8005474:	68c1      	ldr	r1, [r0, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
    /* Clear the old discontinuous mode channel count */
    tmpreg1 &= ~tmpreg2;
 8005476:	ea21 0103 	bic.w	r1, r1, r3
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_SampleTime << (3 * (ADC_Channel - 10));
    /* Set the discontinuous mode channel count */
    tmpreg1 |= tmpreg2;
 800547a:	4311      	orrs	r1, r2
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 800547c:	60c1      	str	r1, [r0, #12]
 800547e:	e009      	b.n	8005494 <ADC_RegularChannelConfig+0x3c>
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 8005480:	1912      	adds	r2, r2, r4
    /* Clear the old discontinuous mode channel count */
    tmpreg1 &= ~tmpreg2;
 8005482:	2307      	movs	r3, #7
 8005484:	4093      	lsls	r3, r2
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_SampleTime << (3 * ADC_Channel);
    /* Set the discontinuous mode channel count */
    tmpreg1 |= tmpreg2;
 8005486:	fa15 f202 	lsls.w	r2, r5, r2
    ADCx->SMPR1 = tmpreg1;
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800548a:	6901      	ldr	r1, [r0, #16]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
    /* Clear the old discontinuous mode channel count */
    tmpreg1 &= ~tmpreg2;
 800548c:	ea21 0103 	bic.w	r1, r1, r3
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_SampleTime << (3 * ADC_Channel);
    /* Set the discontinuous mode channel count */
    tmpreg1 |= tmpreg2;
 8005490:	4311      	orrs	r1, r2
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8005492:	6101      	str	r1, [r0, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8005494:	f1bc 0f06 	cmp.w	ip, #6	; 0x6
 8005498:	d80c      	bhi.n	80054b4 <ADC_RegularChannelConfig+0x5c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 800549a:	eb0c 028c 	add.w	r2, ip, ip, lsl #2
 800549e:	3a05      	subs	r2, #5
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80054a0:	231f      	movs	r3, #31
 80054a2:	4093      	lsls	r3, r2
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_Channel << (5 * (Rank - 1));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80054a4:	fa14 f202 	lsls.w	r2, r4, r2
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80054a8:	6b41      	ldr	r1, [r0, #52]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80054aa:	ea21 0103 	bic.w	r1, r1, r3
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_Channel << (5 * (Rank - 1));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80054ae:	4311      	orrs	r1, r2
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80054b0:	6341      	str	r1, [r0, #52]
 80054b2:	e01b      	b.n	80054ec <ADC_RegularChannelConfig+0x94>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 80054b4:	f1bc 0f0c 	cmp.w	ip, #12	; 0xc
 80054b8:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80054bc:	d80b      	bhi.n	80054d6 <ADC_RegularChannelConfig+0x7e>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 80054be:	4462      	add	r2, ip
 80054c0:	3a23      	subs	r2, #35
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80054c2:	231f      	movs	r3, #31
 80054c4:	4093      	lsls	r3, r2
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_Channel << (5 * (Rank - 7));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80054c6:	fa14 f202 	lsls.w	r2, r4, r2
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80054ca:	6b01      	ldr	r1, [r0, #48]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80054cc:	ea21 0103 	bic.w	r1, r1, r3
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_Channel << (5 * (Rank - 7));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80054d0:	4311      	orrs	r1, r2
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 80054d2:	6301      	str	r1, [r0, #48]
 80054d4:	e00a      	b.n	80054ec <ADC_RegularChannelConfig+0x94>
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 80054d6:	4462      	add	r2, ip
 80054d8:	3a41      	subs	r2, #65
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80054da:	231f      	movs	r3, #31
 80054dc:	4093      	lsls	r3, r2
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_Channel << (5 * (Rank - 13));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80054de:	fa14 f202 	lsls.w	r2, r4, r2
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 80054e2:	6ac1      	ldr	r1, [r0, #44]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80054e4:	ea21 0103 	bic.w	r1, r1, r3
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_Channel << (5 * (Rank - 13));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80054e8:	4311      	orrs	r1, r2
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80054ea:	62c1      	str	r1, [r0, #44]
  }
}
 80054ec:	bd30      	pop	{r4, r5, pc}
 80054ee:	46c0      	nop			(mov r8, r8)

080054f0 <ADC_ExternalTrigConvCmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80054f0:	b119      	cbz	r1, 80054fa <ADC_ExternalTrigConvCmd+0xa>
  {
    /* Enable the selected ADC conversion on external event */
    ADCx->CR2 |= CR2_EXTTRIG_Set;
 80054f2:	6883      	ldr	r3, [r0, #8]
 80054f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054f8:	e002      	b.n	8005500 <ADC_ExternalTrigConvCmd+0x10>
  }
  else
  {
    /* Disable the selected ADC conversion on external event */
    ADCx->CR2 &= CR2_EXTTRIG_Reset;
 80054fa:	6883      	ldr	r3, [r0, #8]
 80054fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005500:	6083      	str	r3, [r0, #8]
  }
}
 8005502:	4770      	bx	lr

08005504 <ADC_GetConversionValue>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Return the selected ADC conversion value */
  return (u16) ADCx->DR;
 8005504:	6cc0      	ldr	r0, [r0, #76]
 8005506:	b280      	uxth	r0, r0
}
 8005508:	4770      	bx	lr
 800550a:	46c0      	nop			(mov r8, r8)

0800550c <ADC_GetDualModeConversionValue>:
* Return         : The Data conversion value.
*******************************************************************************/
u32 ADC_GetDualModeConversionValue(void)
{
  /* Return the dual mode conversion value */
  return (*(vu32 *) DR_ADDRESS);
 800550c:	4b01      	ldr	r3, [pc, #4]	(8005514 <ADC_GetDualModeConversionValue+0x8>)
 800550e:	6818      	ldr	r0, [r3, #0]
}
 8005510:	4770      	bx	lr
 8005512:	46c0      	nop			(mov r8, r8)
 8005514:	4001244c 	.word	0x4001244c

08005518 <ADC_AutoInjectedConvCmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005518:	b119      	cbz	r1, 8005522 <ADC_AutoInjectedConvCmd+0xa>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= CR1_JAUTO_Set;
 800551a:	6843      	ldr	r3, [r0, #4]
 800551c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005520:	e002      	b.n	8005528 <ADC_AutoInjectedConvCmd+0x10>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= CR1_JAUTO_Reset;
 8005522:	6843      	ldr	r3, [r0, #4]
 8005524:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005528:	6043      	str	r3, [r0, #4]
  }
}
 800552a:	4770      	bx	lr

0800552c <ADC_InjectedDiscModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800552c:	b119      	cbz	r1, 8005536 <ADC_InjectedDiscModeCmd+0xa>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= CR1_JDISCEN_Set;
 800552e:	6843      	ldr	r3, [r0, #4]
 8005530:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005534:	e002      	b.n	800553c <ADC_InjectedDiscModeCmd+0x10>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= CR1_JDISCEN_Reset;
 8005536:	6843      	ldr	r3, [r0, #4]
 8005538:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800553c:	6043      	str	r3, [r0, #4]
  }
}
 800553e:	4770      	bx	lr

08005540 <ADC_ExternalTrigInjectedConvConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));

  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8005540:	6883      	ldr	r3, [r0, #8]
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_Reset;
 8005542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 8005546:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8005548:	6081      	str	r1, [r0, #8]
}
 800554a:	4770      	bx	lr

0800554c <ADC_ExternalTrigInjectedConvCmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800554c:	b119      	cbz	r1, 8005556 <ADC_ExternalTrigInjectedConvCmd+0xa>
  {
    /* Enable the selected ADC external event selection for injected group */
    ADCx->CR2 |= CR2_JEXTTRIG_Set;
 800554e:	6883      	ldr	r3, [r0, #8]
 8005550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005554:	e002      	b.n	800555c <ADC_ExternalTrigInjectedConvCmd+0x10>
  }
  else
  {
    /* Disable the selected ADC external event selection for injected group */
    ADCx->CR2 &= CR2_JEXTTRIG_Reset;
 8005556:	6883      	ldr	r3, [r0, #8]
 8005558:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800555c:	6083      	str	r3, [r0, #8]
  }
}
 800555e:	4770      	bx	lr

08005560 <ADC_SoftwareStartInjectedConvCmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005560:	b119      	cbz	r1, 800556a <ADC_SoftwareStartInjectedConvCmd+0xa>
  {
    /* Enable the selected ADC conversion for injected group on external event and start the selected
       ADC injected conversion */
    ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
 8005562:	6883      	ldr	r3, [r0, #8]
 8005564:	f443 1302 	orr.w	r3, r3, #2129920	; 0x208000
 8005568:	e002      	b.n	8005570 <ADC_SoftwareStartInjectedConvCmd+0x10>
  }
  else
  {
    /* Disable the selected ADC conversion on external event for injected group and stop the selected
       ADC injected conversion */
    ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
 800556a:	6883      	ldr	r3, [r0, #8]
 800556c:	f423 1302 	bic.w	r3, r3, #2129920	; 0x208000
 8005570:	6083      	str	r3, [r0, #8]
  }
}
 8005572:	4770      	bx	lr

08005574 <ADC_GetSoftwareStartInjectedConvCmdStatus>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & CR2_JSWSTART_Set) != (u32)RESET)
 8005574:	6880      	ldr	r0, [r0, #8]
 8005576:	0d40      	lsrs	r0, r0, #21
 8005578:	f000 0001 	and.w	r0, r0, #1	; 0x1
    bitstatus = RESET;
  }

  /* Return the JSWSTART bit status */
  return  bitstatus;
}
 800557c:	4770      	bx	lr
 800557e:	46c0      	nop			(mov r8, r8)

08005580 <ADC_InjectedChannelConfig>:
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8005580:	2909      	cmp	r1, #9
*                       - ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
* Output         : None
* Return         : None
*******************************************************************************/
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, u8 ADC_Channel, u8 Rank, u8 ADC_SampleTime)
{
 8005582:	b530      	push	{r4, r5, lr}
 8005584:	468c      	mov	ip, r1
 8005586:	4615      	mov	r5, r2
 8005588:	461c      	mov	r4, r3
 800558a:	ea4f 0241 	mov.w	r2, r1, lsl #1
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800558e:	d90b      	bls.n	80055a8 <ADC_InjectedChannelConfig+0x28>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
 8005590:	4462      	add	r2, ip
 8005592:	3a1e      	subs	r2, #30
    /* Clear the old discontinuous mode channel count */
    tmpreg1 &= ~tmpreg2;
 8005594:	2307      	movs	r3, #7
 8005596:	4093      	lsls	r3, r2
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_SampleTime << (3*(ADC_Channel - 10));
    /* Set the discontinuous mode channel count */
    tmpreg1 |= tmpreg2;
 8005598:	fa14 f202 	lsls.w	r2, r4, r2

  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 800559c:	68c1      	ldr	r1, [r0, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
    /* Clear the old discontinuous mode channel count */
    tmpreg1 &= ~tmpreg2;
 800559e:	ea21 0103 	bic.w	r1, r1, r3
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_SampleTime << (3*(ADC_Channel - 10));
    /* Set the discontinuous mode channel count */
    tmpreg1 |= tmpreg2;
 80055a2:	4311      	orrs	r1, r2
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80055a4:	60c1      	str	r1, [r0, #12]
 80055a6:	e009      	b.n	80055bc <ADC_InjectedChannelConfig+0x3c>
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 80055a8:	4462      	add	r2, ip
    /* Clear the old discontinuous mode channel count */
    tmpreg1 &= ~tmpreg2;
 80055aa:	2307      	movs	r3, #7
 80055ac:	4093      	lsls	r3, r2
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_SampleTime << (3 * ADC_Channel);
    /* Set the discontinuous mode channel count */
    tmpreg1 |= tmpreg2;
 80055ae:	fa14 f202 	lsls.w	r2, r4, r2
    ADCx->SMPR1 = tmpreg1;
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80055b2:	6901      	ldr	r1, [r0, #16]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
    /* Clear the old discontinuous mode channel count */
    tmpreg1 &= ~tmpreg2;
 80055b4:	ea21 0103 	bic.w	r1, r1, r3
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_SampleTime << (3 * ADC_Channel);
    /* Set the discontinuous mode channel count */
    tmpreg1 |= tmpreg2;
 80055b8:	4311      	orrs	r1, r2
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80055ba:	6101      	str	r1, [r0, #16]
  }

  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 80055bc:	6b83      	ldr	r3, [r0, #56]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_Set << (5 * (u8)((Rank + 3) - (tmpreg3 + 1)));
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 80055be:	211f      	movs	r1, #31
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_Set << (5 * (u8)((Rank + 3) - (tmpreg3 + 1)));
 80055c0:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 80055c4:	ea6f 5212 	mvn.w	r2, r2, lsr #20
 80055c8:	442a      	add	r2, r5
 80055ca:	3203      	adds	r2, #3
 80055cc:	b2d2      	uxtb	r2, r2
 80055ce:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 80055d2:	4091      	lsls	r1, r2
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (u32)ADC_Channel << (5 * (u8)((Rank + 3) - (tmpreg3 + 1)));
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 80055d4:	fa0c f202 	lsl.w	r2, ip, r2
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_Set << (5 * (u8)((Rank + 3) - (tmpreg3 + 1)));
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 80055d8:	ea23 0301 	bic.w	r3, r3, r1
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (u32)ADC_Channel << (5 * (u8)((Rank + 3) - (tmpreg3 + 1)));
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 80055dc:	4313      	orrs	r3, r2
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 80055de:	6383      	str	r3, [r0, #56]
}
 80055e0:	bd30      	pop	{r4, r5, pc}
 80055e2:	46c0      	nop			(mov r8, r8)

080055e4 <ADC_InjectedSequencerLengthConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 80055e4:	6b83      	ldr	r3, [r0, #56]
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= JSQR_JL_Reset;
  /* Set the injected sequnence lenght JL bits */
  tmpreg2 = Length - 1; 
  tmpreg1 |= tmpreg2 << 20;
 80055e6:	3901      	subs	r1, #1
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= JSQR_JL_Reset;
 80055e8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
  /* Set the injected sequnence lenght JL bits */
  tmpreg2 = Length - 1; 
  tmpreg1 |= tmpreg2 << 20;
 80055ec:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 80055f0:	6383      	str	r3, [r0, #56]
}
 80055f2:	4770      	bx	lr

080055f4 <ADC_SetInjectedOffset>:
*                    This parameter must be a 12bit value.
* Output         : None
* Return         : None
*******************************************************************************/
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, u8 ADC_InjectedChannel, u16 Offset)
{
 80055f4:	b082      	sub	sp, #8
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));  

  /* Set the selected injected channel data offset */
  *((vu32 *)((*(u32*)&ADCx) + ADC_InjectedChannel)) = (u32)Offset;
 80055f6:	500a      	str	r2, [r1, r0]
}
 80055f8:	b002      	add	sp, #8
 80055fa:	4770      	bx	lr

080055fc <ADC_GetInjectedConversionValue>:
*                       - ADC_InjectedChannel_4: Injected Channel4 selected
* Output         : None
* Return         : The Data conversion value.
*******************************************************************************/
u16 ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, u8 ADC_InjectedChannel)
{
 80055fc:	b082      	sub	sp, #8
 80055fe:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  /* Returns the selected injected channel conversion data value */
  return (u16) (*(vu32*) (((*(u32*)&ADCx) + ADC_InjectedChannel + JDR_Offset)));
 8005600:	3028      	adds	r0, #40
 8005602:	5840      	ldr	r0, [r0, r1]
 8005604:	b280      	uxth	r0, r0
}
 8005606:	b002      	add	sp, #8
 8005608:	4770      	bx	lr
 800560a:	46c0      	nop			(mov r8, r8)

0800560c <ADC_AnalogWatchdogCmd>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));

  /* Get the old register value */
  tmpreg = ADCx->CR1;
 800560c:	6843      	ldr	r3, [r0, #4]
  /* Clear AWDEN, AWDENJ and AWDSGL bits */
  tmpreg &= CR1_AWDMode_Reset;
 800560e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005612:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 8005616:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8005618:	6041      	str	r1, [r0, #4]
}
 800561a:	4770      	bx	lr

0800561c <ADC_AnalogWatchdogThresholdsConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));

  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 800561c:	6241      	str	r1, [r0, #36]
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 800561e:	6282      	str	r2, [r0, #40]
}
 8005620:	4770      	bx	lr
 8005622:	46c0      	nop			(mov r8, r8)

08005624 <ADC_AnalogWatchdogSingleChannelConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));

  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8005624:	6843      	ldr	r3, [r0, #4]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_Reset;
 8005626:	f023 031f 	bic.w	r3, r3, #31	; 0x1f
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 800562a:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 800562c:	6041      	str	r1, [r0, #4]
}
 800562e:	4770      	bx	lr

08005630 <ADC_TempSensorVrefintCmd>:
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005630:	b120      	cbz	r0, 800563c <ADC_TempSensorVrefintCmd+0xc>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
 8005632:	4a05      	ldr	r2, [pc, #20]	(8005648 <ADC_TempSensorVrefintCmd+0x18>)
 8005634:	6893      	ldr	r3, [r2, #8]
 8005636:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800563a:	e003      	b.n	8005644 <ADC_TempSensorVrefintCmd+0x14>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
 800563c:	4a02      	ldr	r2, [pc, #8]	(8005648 <ADC_TempSensorVrefintCmd+0x18>)
 800563e:	6893      	ldr	r3, [r2, #8]
 8005640:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005644:	6093      	str	r3, [r2, #8]
  }
}
 8005646:	4770      	bx	lr
 8005648:	40012400 	.word	0x40012400

0800564c <ADC_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (u8)RESET)
 800564c:	6803      	ldr	r3, [r0, #0]
 800564e:	4219      	tst	r1, r3
 8005650:	bf0c      	ite	eq
 8005652:	2000      	moveq	r0, #0
 8005654:	2001      	movne	r0, #1
    bitstatus = RESET;
  }

  /* Return the ADC_FLAG status */
  return  bitstatus;
}
 8005656:	4770      	bx	lr

08005658 <ADC_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(u32)ADC_FLAG;
 8005658:	ea6f 0101 	mvn.w	r1, r1
 800565c:	6001      	str	r1, [r0, #0]
}
 800565e:	4770      	bx	lr

08005660 <ADC_GetITStatus>:

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & (u8)ADC_IT) ;
 8005660:	6842      	ldr	r2, [r0, #4]

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (u32)RESET) && enablestatus)
 8005662:	6803      	ldr	r3, [r0, #0]
 8005664:	ea13 2311 	ands.w	r3, r3, r1, lsr #8
 8005668:	d101      	bne.n	800566e <ADC_GetITStatus+0xe>
 800566a:	2000      	movs	r0, #0
 800566c:	e004      	b.n	8005678 <ADC_GetITStatus+0x18>
 800566e:	b2cb      	uxtb	r3, r1
 8005670:	4213      	tst	r3, r2
 8005672:	bf0c      	ite	eq
 8005674:	2000      	moveq	r0, #0
 8005676:	2001      	movne	r0, #1
    bitstatus = RESET;
  }

  /* Return the ADC_IT status */
  return  bitstatus;
}
 8005678:	4770      	bx	lr
 800567a:	46c0      	nop			(mov r8, r8)

0800567c <ADC_ClearITPendingBit>:

  /* Get the ADC IT index */
  itmask = (u8)(ADC_IT >> 8);

  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(u32)itmask;
 800567c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8005680:	6001      	str	r1, [r0, #0]
}
 8005682:	4770      	bx	lr

08005684 <ADC_DeInit>:
* Input          : - ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void ADC_DeInit(ADC_TypeDef* ADCx)
{
 8005684:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  switch (*(u32*)&ADCx)
 8005686:	4b14      	ldr	r3, [pc, #80]	(80056d8 <ADC_DeInit+0x54>)
* Input          : - ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void ADC_DeInit(ADC_TypeDef* ADCx)
{
 8005688:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  switch (*(u32*)&ADCx)
 800568a:	4298      	cmp	r0, r3
* Input          : - ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void ADC_DeInit(ADC_TypeDef* ADCx)
{
 800568c:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  switch (*(u32*)&ADCx)
 800568e:	d00f      	beq.n	80056b0 <ADC_DeInit+0x2c>
 8005690:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8005694:	4298      	cmp	r0, r3
 8005696:	d013      	beq.n	80056c0 <ADC_DeInit+0x3c>
 8005698:	f5a3 53c0 	sub.w	r3, r3, #6144	; 0x1800
 800569c:	4298      	cmp	r0, r3
 800569e:	d119      	bne.n	80056d4 <ADC_DeInit+0x50>
  {
    case ADC1_BASE:
      /* Enable ADC1 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
 80056a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80056a4:	2101      	movs	r1, #1
 80056a6:	f000 ff8d 	bl	80065c4 <RCC_APB2PeriphResetCmd>
      /* Release ADC1 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
 80056aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80056ae:	e00e      	b.n	80056ce <ADC_DeInit+0x4a>
      break;
    
    case ADC2_BASE:
      /* Enable ADC2 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
 80056b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80056b4:	2101      	movs	r1, #1
 80056b6:	f000 ff85 	bl	80065c4 <RCC_APB2PeriphResetCmd>
      /* Release ADC2 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
 80056ba:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80056be:	e006      	b.n	80056ce <ADC_DeInit+0x4a>
      break;
      
    case ADC3_BASE:
      /* Enable ADC3 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
 80056c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80056c4:	2101      	movs	r1, #1
 80056c6:	f000 ff7d 	bl	80065c4 <RCC_APB2PeriphResetCmd>
      /* Release ADC3 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
 80056ca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80056ce:	2100      	movs	r1, #0
 80056d0:	f000 ff78 	bl	80065c4 <RCC_APB2PeriphResetCmd>
      break; 

    default:
      break;
  }
}
 80056d4:	b003      	add	sp, #12
 80056d6:	bd00      	pop	{pc}
 80056d8:	40012800 	.word	0x40012800

080056dc <FLASH_SetLatency>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Sets the Latency value */
  FLASH->ACR &= ACR_LATENCY_Mask;
 80056dc:	4a04      	ldr	r2, [pc, #16]	(80056f0 <FLASH_SetLatency+0x14>)
 80056de:	6813      	ldr	r3, [r2, #0]
 80056e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056e4:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_Latency;
 80056e6:	6813      	ldr	r3, [r2, #0]
 80056e8:	4318      	orrs	r0, r3
 80056ea:	6010      	str	r0, [r2, #0]
}
 80056ec:	4770      	bx	lr
 80056ee:	46c0      	nop			(mov r8, r8)
 80056f0:	40022000 	.word	0x40022000

080056f4 <FLASH_HalfCycleAccessCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_HALFCYCLEACCESS_STATE(FLASH_HalfCycleAccess));
  
  /* Enable or disable the Half cycle access */
  FLASH->ACR &= ACR_HLFCYA_Mask;
 80056f4:	4a04      	ldr	r2, [pc, #16]	(8005708 <FLASH_HalfCycleAccessCmd+0x14>)
 80056f6:	6813      	ldr	r3, [r2, #0]
 80056f8:	f023 0308 	bic.w	r3, r3, #8	; 0x8
 80056fc:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_HalfCycleAccess;
 80056fe:	6813      	ldr	r3, [r2, #0]
 8005700:	4318      	orrs	r0, r3
 8005702:	6010      	str	r0, [r2, #0]
}
 8005704:	4770      	bx	lr
 8005706:	46c0      	nop			(mov r8, r8)
 8005708:	40022000 	.word	0x40022000

0800570c <FLASH_PrefetchBufferCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 800570c:	4a04      	ldr	r2, [pc, #16]	(8005720 <FLASH_PrefetchBufferCmd+0x14>)
 800570e:	6813      	ldr	r3, [r2, #0]
 8005710:	f023 0310 	bic.w	r3, r3, #16	; 0x10
 8005714:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 8005716:	6813      	ldr	r3, [r2, #0]
 8005718:	4318      	orrs	r0, r3
 800571a:	6010      	str	r0, [r2, #0]
}
 800571c:	4770      	bx	lr
 800571e:	46c0      	nop			(mov r8, r8)
 8005720:	40022000 	.word	0x40022000

08005724 <FLASH_Unlock>:
* Return         : None
*******************************************************************************/
void FLASH_Unlock(void)
{
  /* Authorize the FPEC Access */
  FLASH->KEYR = FLASH_KEY1;
 8005724:	4b03      	ldr	r3, [pc, #12]	(8005734 <FLASH_Unlock+0x10>)
 8005726:	4a04      	ldr	r2, [pc, #16]	(8005738 <FLASH_Unlock+0x14>)
 8005728:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 800572a:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800572e:	605a      	str	r2, [r3, #4]
}
 8005730:	4770      	bx	lr
 8005732:	46c0      	nop			(mov r8, r8)
 8005734:	40022000 	.word	0x40022000
 8005738:	45670123 	.word	0x45670123

0800573c <FLASH_Lock>:
* Return         : None
*******************************************************************************/
void FLASH_Lock(void)
{
  /* Set the Lock Bit to lock the FPEC and the FCR */
  FLASH->CR |= CR_LOCK_Set;
 800573c:	4a02      	ldr	r2, [pc, #8]	(8005748 <FLASH_Lock+0xc>)
 800573e:	6913      	ldr	r3, [r2, #16]
 8005740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005744:	6113      	str	r3, [r2, #16]
}
 8005746:	4770      	bx	lr
 8005748:	40022000 	.word	0x40022000

0800574c <FLASH_GetUserOptionByte>:
*                  and RST_STDBY(Bit2).
*******************************************************************************/
u32 FLASH_GetUserOptionByte(void)
{
  /* Return the User Option Byte */
  return (u32)(FLASH->OBR >> 2);
 800574c:	4b01      	ldr	r3, [pc, #4]	(8005754 <FLASH_GetUserOptionByte+0x8>)
 800574e:	69d8      	ldr	r0, [r3, #28]
 8005750:	0880      	lsrs	r0, r0, #2
}
 8005752:	4770      	bx	lr
 8005754:	40022000 	.word	0x40022000

08005758 <FLASH_GetWriteProtectionOptionByte>:
* Return         : The FLASH Write Protection  Option Bytes Register value
*******************************************************************************/
u32 FLASH_GetWriteProtectionOptionByte(void)
{
  /* Return the Falsh write protection Register value */
  return (u32)(FLASH->WRPR);
 8005758:	4b01      	ldr	r3, [pc, #4]	(8005760 <FLASH_GetWriteProtectionOptionByte+0x8>)
 800575a:	6a18      	ldr	r0, [r3, #32]
}
 800575c:	4770      	bx	lr
 800575e:	46c0      	nop			(mov r8, r8)
 8005760:	40022000 	.word	0x40022000

08005764 <FLASH_GetReadOutProtectionStatus>:
*******************************************************************************/
FlagStatus FLASH_GetReadOutProtectionStatus(void)
{
  FlagStatus readoutstatus = RESET;

  if ((FLASH->OBR & RDPRT_Mask) != (u32)RESET)
 8005764:	4b02      	ldr	r3, [pc, #8]	(8005770 <FLASH_GetReadOutProtectionStatus+0xc>)
 8005766:	69d8      	ldr	r0, [r3, #28]
 8005768:	0840      	lsrs	r0, r0, #1
 800576a:	f000 0001 	and.w	r0, r0, #1	; 0x1
  else
  {
    readoutstatus = RESET;
  }
  return readoutstatus;
}
 800576e:	4770      	bx	lr
 8005770:	40022000 	.word	0x40022000

08005774 <FLASH_GetPrefetchBufferStatus>:
*******************************************************************************/
FlagStatus FLASH_GetPrefetchBufferStatus(void)
{
  FlagStatus bitstatus = RESET;
  
  if ((FLASH->ACR & ACR_PRFTBS_Mask) != (u32)RESET)
 8005774:	4b02      	ldr	r3, [pc, #8]	(8005780 <FLASH_GetPrefetchBufferStatus+0xc>)
 8005776:	6818      	ldr	r0, [r3, #0]
 8005778:	0940      	lsrs	r0, r0, #5
 800577a:	f000 0001 	and.w	r0, r0, #1	; 0x1
  {
    bitstatus = RESET;
  }
  /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
  return bitstatus; 
}
 800577e:	4770      	bx	lr
 8005780:	40022000 	.word	0x40022000

08005784 <FLASH_ITConfig>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 8005784:	b121      	cbz	r1, 8005790 <FLASH_ITConfig+0xc>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8005786:	4a05      	ldr	r2, [pc, #20]	(800579c <FLASH_ITConfig+0x18>)
 8005788:	6913      	ldr	r3, [r2, #16]
 800578a:	ea40 0303 	orr.w	r3, r0, r3
 800578e:	e003      	b.n	8005798 <FLASH_ITConfig+0x14>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(u32)FLASH_IT;
 8005790:	4a02      	ldr	r2, [pc, #8]	(800579c <FLASH_ITConfig+0x18>)
 8005792:	6913      	ldr	r3, [r2, #16]
 8005794:	ea23 0300 	bic.w	r3, r3, r0
 8005798:	6113      	str	r3, [r2, #16]
  }
}
 800579a:	4770      	bx	lr
 800579c:	40022000 	.word	0x40022000

080057a0 <FLASH_GetFlagStatus>:
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;

  if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
 80057a0:	2801      	cmp	r0, #1
 80057a2:	d104      	bne.n	80057ae <FLASH_GetFlagStatus+0xe>
  {
    if((FLASH->OBR & FLASH_FLAG_OPTERR) != (u32)RESET)
 80057a4:	4b05      	ldr	r3, [pc, #20]	(80057bc <FLASH_GetFlagStatus+0x1c>)
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	f003 0001 	and.w	r0, r3, #1	; 0x1
 80057ac:	e005      	b.n	80057ba <FLASH_GetFlagStatus+0x1a>
      bitstatus = RESET;
    }
  }
  else
  {
   if((FLASH->SR & FLASH_FLAG) != (u32)RESET)
 80057ae:	4b03      	ldr	r3, [pc, #12]	(80057bc <FLASH_GetFlagStatus+0x1c>)
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	4218      	tst	r0, r3
 80057b4:	bf0c      	ite	eq
 80057b6:	2000      	moveq	r0, #0
 80057b8:	2001      	movne	r0, #1
      bitstatus = RESET;
    }
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus;
}
 80057ba:	4770      	bx	lr
 80057bc:	40022000 	.word	0x40022000

080057c0 <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 80057c0:	4b01      	ldr	r3, [pc, #4]	(80057c8 <FLASH_ClearFlag+0x8>)
 80057c2:	60d8      	str	r0, [r3, #12]
}
 80057c4:	4770      	bx	lr
 80057c6:	46c0      	nop			(mov r8, r8)
 80057c8:	40022000 	.word	0x40022000

080057cc <FLASH_GetStatus>:
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80057cc:	4a09      	ldr	r2, [pc, #36]	(80057f4 <FLASH_GetStatus+0x28>)
 80057ce:	68d3      	ldr	r3, [r2, #12]
 80057d0:	f013 0f01 	tst.w	r3, #1	; 0x1
 80057d4:	d001      	beq.n	80057da <FLASH_GetStatus+0xe>
 80057d6:	2001      	movs	r0, #1
 80057d8:	e00b      	b.n	80057f2 <FLASH_GetStatus+0x26>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 80057da:	68d3      	ldr	r3, [r2, #12]
 80057dc:	f013 0f04 	tst.w	r3, #4	; 0x4
 80057e0:	d001      	beq.n	80057e6 <FLASH_GetStatus+0x1a>
 80057e2:	2002      	movs	r0, #2
 80057e4:	e005      	b.n	80057f2 <FLASH_GetStatus+0x26>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 80057e6:	68d3      	ldr	r3, [r2, #12]
 80057e8:	f013 0f10 	tst.w	r3, #16	; 0x10
 80057ec:	bf14      	ite	ne
 80057ee:	2003      	movne	r0, #3
 80057f0:	2004      	moveq	r0, #4
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 80057f2:	4770      	bx	lr
 80057f4:	40022000 	.word	0x40022000

080057f8 <FLASH_WaitForLastOperation>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 80057f8:	b510      	push	{r4, lr}
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80057fa:	4a23      	ldr	r2, [pc, #140]	(8005888 <FLASH_WaitForLastOperation+0x90>)
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 80057fc:	b082      	sub	sp, #8
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80057fe:	68d3      	ldr	r3, [r2, #12]
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 8005800:	4601      	mov	r1, r0
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8005802:	f013 0f01 	tst.w	r3, #1	; 0x1
 8005806:	d001      	beq.n	800580c <FLASH_WaitForLastOperation+0x14>
 8005808:	2001      	movs	r0, #1
 800580a:	e02a      	b.n	8005862 <FLASH_WaitForLastOperation+0x6a>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 800580c:	68d3      	ldr	r3, [r2, #12]
 800580e:	f013 0f04 	tst.w	r3, #4	; 0x4
 8005812:	d001      	beq.n	8005818 <FLASH_WaitForLastOperation+0x20>
 8005814:	2002      	movs	r0, #2
 8005816:	e024      	b.n	8005862 <FLASH_WaitForLastOperation+0x6a>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 8005818:	68d3      	ldr	r3, [r2, #12]
 800581a:	f013 0f10 	tst.w	r3, #16	; 0x10
 800581e:	bf14      	ite	ne
 8005820:	2003      	movne	r0, #3
 8005822:	2004      	moveq	r0, #4
 8005824:	e01d      	b.n	8005862 <FLASH_WaitForLastOperation+0x6a>
* Output         : None
* Return         : None
*******************************************************************************/
static void delay(void)
{
  vu32 i = 0;
 8005826:	9401      	str	r4, [sp, #4]

  for(i = 0xFF; i != 0; i--)
 8005828:	f8cd c004 	str.w	ip, [sp, #4]
 800582c:	e002      	b.n	8005834 <FLASH_WaitForLastOperation+0x3c>
 800582e:	9b01      	ldr	r3, [sp, #4]
 8005830:	3b01      	subs	r3, #1
 8005832:	9301      	str	r3, [sp, #4]
 8005834:	9b01      	ldr	r3, [sp, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1f9      	bne.n	800582e <FLASH_WaitForLastOperation+0x36>
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 800583a:	68d3      	ldr	r3, [r2, #12]
 800583c:	f013 0f01 	tst.w	r3, #1	; 0x1
 8005840:	d001      	beq.n	8005846 <FLASH_WaitForLastOperation+0x4e>
 8005842:	2001      	movs	r0, #1
 8005844:	e00b      	b.n	800585e <FLASH_WaitForLastOperation+0x66>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 8005846:	68d3      	ldr	r3, [r2, #12]
 8005848:	f013 0f04 	tst.w	r3, #4	; 0x4
 800584c:	d001      	beq.n	8005852 <FLASH_WaitForLastOperation+0x5a>
 800584e:	2002      	movs	r0, #2
 8005850:	e005      	b.n	800585e <FLASH_WaitForLastOperation+0x66>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 8005852:	68d3      	ldr	r3, [r2, #12]
 8005854:	f013 0f10 	tst.w	r3, #16	; 0x10
 8005858:	bf14      	ite	ne
 800585a:	2003      	movne	r0, #3
 800585c:	2004      	moveq	r0, #4
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
  {
    delay();
    status = FLASH_GetStatus();
    Timeout--;
 800585e:	3901      	subs	r1, #1
 8005860:	e003      	b.n	800586a <FLASH_WaitForLastOperation+0x72>
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8005862:	4a09      	ldr	r2, [pc, #36]	(8005888 <FLASH_WaitForLastOperation+0x90>)
* Output         : None
* Return         : None
*******************************************************************************/
static void delay(void)
{
  vu32 i = 0;
 8005864:	2400      	movs	r4, #0

  for(i = 0xFF; i != 0; i--)
 8005866:	f04f 0cff 	mov.w	ip, #255	; 0xff
   
  /* Check for the Flash Status */
  status = FLASH_GetStatus();

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 800586a:	1e0b      	subs	r3, r1, #0
 800586c:	bf18      	it	ne
 800586e:	2301      	movne	r3, #1
 8005870:	2801      	cmp	r0, #1
 8005872:	bf14      	ite	ne
 8005874:	2300      	movne	r3, #0
 8005876:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1d3      	bne.n	8005826 <FLASH_WaitForLastOperation+0x2e>
    delay();
    status = FLASH_GetStatus();
    Timeout--;
  }

  if(Timeout == 0x00 )
 800587e:	2900      	cmp	r1, #0
 8005880:	bf08      	it	eq
 8005882:	2005      	moveq	r0, #5
    status = FLASH_TIMEOUT;
  }

  /* Return the operation status */
  return status;
}
 8005884:	b002      	add	sp, #8
 8005886:	bd10      	pop	{r4, pc}
 8005888:	40022000 	.word	0x40022000

0800588c <FLASH_UserOptionByteConfig>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 800588c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 800588e:	4b13      	ldr	r3, [pc, #76]	(80058dc <FLASH_UserOptionByteConfig+0x50>)
 8005890:	4c13      	ldr	r4, [pc, #76]	(80058e0 <FLASH_UserOptionByteConfig+0x54>)
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 8005892:	b081      	sub	sp, #4
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 8005894:	60a3      	str	r3, [r4, #8]
  FLASH->OPTKEYR = FLASH_KEY2;
 8005896:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 800589a:	4605      	mov	r5, r0
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
 800589c:	60a3      	str	r3, [r4, #8]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800589e:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 80058a0:	460e      	mov	r6, r1
 80058a2:	4617      	mov	r7, r2
  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80058a4:	f7ff ffa8 	bl	80057f8 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80058a8:	2804      	cmp	r0, #4
 80058aa:	d115      	bne.n	80058d8 <FLASH_UserOptionByteConfig+0x4c>
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 80058ac:	6923      	ldr	r3, [r4, #16]
           
    OB->USER = ( OB_IWDG | OB_STOP |OB_STDBY) | (u16)0xF8; 
 80058ae:	4a0d      	ldr	r2, [pc, #52]	(80058e4 <FLASH_UserOptionByteConfig+0x58>)
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 80058b0:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 80058b4:	6123      	str	r3, [r4, #16]
           
    OB->USER = ( OB_IWDG | OB_STOP |OB_STDBY) | (u16)0xF8; 
 80058b6:	f045 03f8 	orr.w	r3, r5, #248	; 0xf8
 80058ba:	ea46 0303 	orr.w	r3, r6, r3
 80058be:	ea47 0303 	orr.w	r3, r7, r3
 80058c2:	8053      	strh	r3, [r2, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80058c4:	200f      	movs	r0, #15
 80058c6:	f7ff ff97 	bl	80057f8 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 80058ca:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 80058cc:	bf1f      	itttt	ne
 80058ce:	6922      	ldrne	r2, [r4, #16]
 80058d0:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 80058d4:	4013      	andne	r3, r2
 80058d6:	6123      	strne	r3, [r4, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;
}
 80058d8:	b001      	add	sp, #4
 80058da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058dc:	45670123 	.word	0x45670123
 80058e0:	40022000 	.word	0x40022000
 80058e4:	1ffff800 	.word	0x1ffff800

080058e8 <FLASH_ReadOutProtection>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ReadOutProtection(FunctionalState NewState)
{
 80058e8:	b530      	push	{r4, r5, lr}
 80058ea:	4605      	mov	r5, r0
 80058ec:	b081      	sub	sp, #4
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  status = FLASH_WaitForLastOperation(EraseTimeout);
 80058ee:	f640 70ff 	movw	r0, #4095	; 0xfff
 80058f2:	f7ff ff81 	bl	80057f8 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 80058f6:	2804      	cmp	r0, #4
 80058f8:	d13c      	bne.n	8005974 <FLASH_ReadOutProtection+0x8c>
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80058fa:	4c1f      	ldr	r4, [pc, #124]	(8005978 <FLASH_ReadOutProtection+0x90>)
 80058fc:	4b1f      	ldr	r3, [pc, #124]	(800597c <FLASH_ReadOutProtection+0x94>)

    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80058fe:	f500 607e 	add.w	r0, r0, #4064	; 0xfe0
  status = FLASH_WaitForLastOperation(EraseTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8005902:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8005904:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8005908:	60a3      	str	r3, [r4, #8]

    FLASH->CR |= CR_OPTER_Set;
 800590a:	6923      	ldr	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 800590c:	301b      	adds	r0, #27
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;

    FLASH->CR |= CR_OPTER_Set;
 800590e:	f043 0320 	orr.w	r3, r3, #32	; 0x20
 8005912:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 8005914:	6923      	ldr	r3, [r4, #16]
 8005916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800591a:	6123      	str	r3, [r4, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 800591c:	f7ff ff6c 	bl	80057f8 <FLASH_WaitForLastOperation>

    if(status == FLASH_COMPLETE)
 8005920:	2804      	cmp	r0, #4
 8005922:	d120      	bne.n	8005966 <FLASH_ReadOutProtection+0x7e>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 8005924:	6923      	ldr	r3, [r4, #16]
 8005926:	f641 72df 	movw	r2, #8159	; 0x1fdf
 800592a:	ea03 0202 	and.w	r2, r3, r2
 800592e:	6122      	str	r2, [r4, #16]

      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set; 
 8005930:	6923      	ldr	r3, [r4, #16]
 8005932:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 8005936:	6123      	str	r3, [r4, #16]

      if(NewState != DISABLE)
 8005938:	b11d      	cbz	r5, 8005942 <FLASH_ReadOutProtection+0x5a>
      {
        OB->RDP = 0x00;
 800593a:	4b11      	ldr	r3, [pc, #68]	(8005980 <FLASH_ReadOutProtection+0x98>)
 800593c:	f04f 0200 	mov.w	r2, #0	; 0x0
 8005940:	e002      	b.n	8005948 <FLASH_ReadOutProtection+0x60>
      }
      else
      {
        OB->RDP = RDP_Key;  
 8005942:	4b0f      	ldr	r3, [pc, #60]	(8005980 <FLASH_ReadOutProtection+0x98>)
 8005944:	f04f 02a5 	mov.w	r2, #165	; 0xa5
 8005948:	801a      	strh	r2, [r3, #0]
      }

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(EraseTimeout); 
 800594a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800594e:	f7ff ff53 	bl	80057f8 <FLASH_WaitForLastOperation>
    
      if(status != FLASH_BUSY)
 8005952:	2801      	cmp	r0, #1
 8005954:	d00e      	beq.n	8005974 <FLASH_ReadOutProtection+0x8c>
      {
        /* if the program operation is completed, disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 8005956:	4908      	ldr	r1, [pc, #32]	(8005978 <FLASH_ReadOutProtection+0x90>)
 8005958:	f641 73ef 	movw	r3, #8175	; 0x1fef
 800595c:	690a      	ldr	r2, [r1, #16]
 800595e:	ea02 0303 	and.w	r3, r2, r3
 8005962:	610b      	str	r3, [r1, #16]
 8005964:	e006      	b.n	8005974 <FLASH_ReadOutProtection+0x8c>
      }
    }
    else 
    {
      if(status != FLASH_BUSY)
 8005966:	2801      	cmp	r0, #1
      {
        /* Disable the OPTER Bit */
        FLASH->CR &= CR_OPTER_Reset;
 8005968:	bf1f      	itttt	ne
 800596a:	6922      	ldrne	r2, [r4, #16]
 800596c:	f641 73df 	movwne	r3, #8159	; 0x1fdf
 8005970:	4013      	andne	r3, r2
 8005972:	6123      	strne	r3, [r4, #16]
      }
    }
  }
  /* Return the protection operation Status */
  return status;      
}
 8005974:	b001      	add	sp, #4
 8005976:	bd30      	pop	{r4, r5, pc}
 8005978:	40022000 	.word	0x40022000
 800597c:	45670123 	.word	0x45670123
 8005980:	1ffff800 	.word	0x1ffff800

08005984 <FLASH_EnableWriteProtection>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EnableWriteProtection(u32 FLASH_Pages)
{
 8005984:	b510      	push	{r4, lr}
 8005986:	4604      	mov	r4, r0
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005988:	200f      	movs	r0, #15
 800598a:	f7ff ff35 	bl	80057f8 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800598e:	2804      	cmp	r0, #4
 8005990:	d150      	bne.n	8005a34 <FLASH_EnableWriteProtection+0xb0>
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8005992:	4a29      	ldr	r2, [pc, #164]	(8005a38 <FLASH_EnableWriteProtection+0xb4>)
 8005994:	4b29      	ldr	r3, [pc, #164]	(8005a3c <FLASH_EnableWriteProtection+0xb8>)
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
 8005996:	ea6f 0404 	mvn.w	r4, r4
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 800599a:	6093      	str	r3, [r2, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 800599c:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80059a0:	6093      	str	r3, [r2, #8]
    FLASH->CR |= CR_OPTPG_Set;
 80059a2:	6913      	ldr	r3, [r2, #16]
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
 80059a4:	b2e1      	uxtb	r1, r4
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
 80059a6:	f043 0310 	orr.w	r3, r3, #16	; 0x10

    if(WRP0_Data != 0xFF)
 80059aa:	29ff      	cmp	r1, #255
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
 80059ac:	6113      	str	r3, [r2, #16]

    if(WRP0_Data != 0xFF)
 80059ae:	d004      	beq.n	80059ba <FLASH_EnableWriteProtection+0x36>
    {
      OB->WRP0 = WRP0_Data;
 80059b0:	4b23      	ldr	r3, [pc, #140]	(8005a40 <FLASH_EnableWriteProtection+0xbc>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80059b2:	200f      	movs	r0, #15
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;

    if(WRP0_Data != 0xFF)
    {
      OB->WRP0 = WRP0_Data;
 80059b4:	8119      	strh	r1, [r3, #8]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80059b6:	f7ff ff1f 	bl	80057f8 <FLASH_WaitForLastOperation>
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
 80059ba:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 80059be:	0a1a      	lsrs	r2, r3, #8
      OB->WRP0 = WRP0_Data;
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 80059c0:	f1b2 03ff 	subs.w	r3, r2, #255	; 0xff
 80059c4:	bf18      	it	ne
 80059c6:	2301      	movne	r3, #1
 80059c8:	2804      	cmp	r0, #4
 80059ca:	bf14      	ite	ne
 80059cc:	2300      	movne	r3, #0
 80059ce:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
 80059d2:	b123      	cbz	r3, 80059de <FLASH_EnableWriteProtection+0x5a>
    {
      OB->WRP1 = WRP1_Data;
 80059d4:	4b1a      	ldr	r3, [pc, #104]	(8005a40 <FLASH_EnableWriteProtection+0xbc>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80059d6:	200f      	movs	r0, #15
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
    {
      OB->WRP1 = WRP1_Data;
 80059d8:	815a      	strh	r2, [r3, #10]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80059da:	f7ff ff0d 	bl	80057f8 <FLASH_WaitForLastOperation>
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
 80059de:	f404 037f 	and.w	r3, r4, #16711680	; 0xff0000
 80059e2:	0c1a      	lsrs	r2, r3, #16
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }

    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 80059e4:	f1b2 03ff 	subs.w	r3, r2, #255	; 0xff
 80059e8:	bf18      	it	ne
 80059ea:	2301      	movne	r3, #1
 80059ec:	2804      	cmp	r0, #4
 80059ee:	bf14      	ite	ne
 80059f0:	2300      	movne	r3, #0
 80059f2:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
 80059f6:	b123      	cbz	r3, 8005a02 <FLASH_EnableWriteProtection+0x7e>
    {
      OB->WRP2 = WRP2_Data;
 80059f8:	4b11      	ldr	r3, [pc, #68]	(8005a40 <FLASH_EnableWriteProtection+0xbc>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80059fa:	200f      	movs	r0, #15
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }

    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
    {
      OB->WRP2 = WRP2_Data;
 80059fc:	819a      	strh	r2, [r3, #12]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80059fe:	f7ff fefb 	bl	80057f8 <FLASH_WaitForLastOperation>
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
 8005a02:	0e22      	lsrs	r2, r4, #24
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 8005a04:	f1b2 03ff 	subs.w	r3, r2, #255	; 0xff
 8005a08:	bf18      	it	ne
 8005a0a:	2301      	movne	r3, #1
 8005a0c:	2804      	cmp	r0, #4
 8005a0e:	bf14      	ite	ne
 8005a10:	2300      	movne	r3, #0
 8005a12:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
 8005a16:	b123      	cbz	r3, 8005a22 <FLASH_EnableWriteProtection+0x9e>
    {
      OB->WRP3 = WRP3_Data;
 8005a18:	4b09      	ldr	r3, [pc, #36]	(8005a40 <FLASH_EnableWriteProtection+0xbc>)
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005a1a:	200f      	movs	r0, #15
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
    {
      OB->WRP3 = WRP3_Data;
 8005a1c:	81da      	strh	r2, [r3, #14]
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005a1e:	f7ff feeb 	bl	80057f8 <FLASH_WaitForLastOperation>
    }
          
    if(status != FLASH_BUSY)
 8005a22:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 8005a24:	bf1f      	itttt	ne
 8005a26:	4904      	ldrne	r1, [pc, #16]	(8005a38 <FLASH_EnableWriteProtection+0xb4>)
 8005a28:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8005a2c:	690a      	ldrne	r2, [r1, #16]
 8005a2e:	4013      	andne	r3, r2
 8005a30:	bf18      	it	ne
 8005a32:	610b      	strne	r3, [r1, #16]
    }
  } 
  /* Return the write protection operation Status */
  return status;       
}
 8005a34:	bd10      	pop	{r4, pc}
 8005a36:	46c0      	nop			(mov r8, r8)
 8005a38:	40022000 	.word	0x40022000
 8005a3c:	45670123 	.word	0x45670123
 8005a40:	1ffff800 	.word	0x1ffff800

08005a44 <FLASH_ProgramOptionByteData>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramOptionByteData(u32 Address, u8 Data)
{
 8005a44:	b570      	push	{r4, r5, r6, lr}
 8005a46:	4606      	mov	r6, r0
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));

  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005a48:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramOptionByteData(u32 Address, u8 Data)
{
 8005a4a:	460d      	mov	r5, r1
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));

  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005a4c:	f7ff fed4 	bl	80057f8 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 8005a50:	2804      	cmp	r0, #4
 8005a52:	d114      	bne.n	8005a7e <FLASH_ProgramOptionByteData+0x3a>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8005a54:	4c0a      	ldr	r4, [pc, #40]	(8005a80 <FLASH_ProgramOptionByteData+0x3c>)
 8005a56:	4b0b      	ldr	r3, [pc, #44]	(8005a84 <FLASH_ProgramOptionByteData+0x40>)
    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
    *(vu16*)Address = Data;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005a58:	200f      	movs	r0, #15
  status = FLASH_WaitForLastOperation(ProgramTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8005a5a:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8005a5c:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8005a60:	60a3      	str	r3, [r4, #8]

    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 8005a62:	6923      	ldr	r3, [r4, #16]
 8005a64:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 8005a68:	6123      	str	r3, [r4, #16]
    *(vu16*)Address = Data;
 8005a6a:	8035      	strh	r5, [r6, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005a6c:	f7ff fec4 	bl	80057f8 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8005a70:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 8005a72:	bf1f      	itttt	ne
 8005a74:	6922      	ldrne	r2, [r4, #16]
 8005a76:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8005a7a:	4013      	andne	r3, r2
 8005a7c:	6123      	strne	r3, [r4, #16]
    }
  }    
  /* Return the Option Byte Data Program Status */
  return status;      
}
 8005a7e:	bd70      	pop	{r4, r5, r6, pc}
 8005a80:	40022000 	.word	0x40022000
 8005a84:	45670123 	.word	0x45670123

08005a88 <FLASH_ProgramHalfWord>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramHalfWord(u32 Address, u16 Data)
{
 8005a88:	b570      	push	{r4, r5, r6, lr}
 8005a8a:	4606      	mov	r6, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005a8c:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramHalfWord(u32 Address, u16 Data)
{
 8005a8e:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005a90:	f7ff feb2 	bl	80057f8 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8005a94:	2804      	cmp	r0, #4
 8005a96:	d10f      	bne.n	8005ab8 <FLASH_ProgramHalfWord+0x30>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8005a98:	4c08      	ldr	r4, [pc, #32]	(8005abc <FLASH_ProgramHalfWord+0x34>)
  
    *(vu16*)Address = Data;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005a9a:	200f      	movs	r0, #15
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8005a9c:	6923      	ldr	r3, [r4, #16]
 8005a9e:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 8005aa2:	6123      	str	r3, [r4, #16]
  
    *(vu16*)Address = Data;
 8005aa4:	8035      	strh	r5, [r6, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005aa6:	f7ff fea7 	bl	80057f8 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8005aaa:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the PG Bit */
      FLASH->CR &= CR_PG_Reset;
 8005aac:	bf1f      	itttt	ne
 8005aae:	6922      	ldrne	r2, [r4, #16]
 8005ab0:	f641 73fe 	movwne	r3, #8190	; 0x1ffe
 8005ab4:	4013      	andne	r3, r2
 8005ab6:	6123      	strne	r3, [r4, #16]
    }
  } 
  /* Return the Program Status */
  return status;
}
 8005ab8:	bd70      	pop	{r4, r5, r6, pc}
 8005aba:	46c0      	nop			(mov r8, r8)
 8005abc:	40022000 	.word	0x40022000

08005ac0 <FLASH_ProgramWord>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 8005ac0:	b570      	push	{r4, r5, r6, lr}
 8005ac2:	4606      	mov	r6, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005ac4:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 8005ac6:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005ac8:	f7ff fe96 	bl	80057f8 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8005acc:	2804      	cmp	r0, #4
 8005ace:	d117      	bne.n	8005b00 <FLASH_ProgramWord+0x40>
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 8005ad0:	4c0c      	ldr	r4, [pc, #48]	(8005b04 <FLASH_ProgramWord+0x44>)
  
    *(vu16*)Address = (u16)Data;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005ad2:	200f      	movs	r0, #15
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 8005ad4:	6923      	ldr	r3, [r4, #16]
 8005ad6:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 8005ada:	6123      	str	r3, [r4, #16]
  
    *(vu16*)Address = (u16)Data;
 8005adc:	b2ab      	uxth	r3, r5
 8005ade:	8033      	strh	r3, [r6, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005ae0:	f7ff fe8a 	bl	80057f8 <FLASH_WaitForLastOperation>
 
    if(status == FLASH_COMPLETE)
 8005ae4:	2804      	cmp	r0, #4
 8005ae6:	d104      	bne.n	8005af2 <FLASH_ProgramWord+0x32>
    {
      /* if the previous operation is completed, proceed to program the new second 
      half word */
      *(vu16*)(Address + 2) = Data >> 16;
 8005ae8:	0c2b      	lsrs	r3, r5, #16
 8005aea:	8073      	strh	r3, [r6, #2]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005aec:	200f      	movs	r0, #15
 8005aee:	f7ff fe83 	bl	80057f8 <FLASH_WaitForLastOperation>
        FLASH->CR &= CR_PG_Reset;
      }
    }
    else
    {
      if (status != FLASH_BUSY)
 8005af2:	2801      	cmp	r0, #1
      {
        /* Disable the PG Bit */
        FLASH->CR &= CR_PG_Reset;
 8005af4:	bf1f      	itttt	ne
 8005af6:	6922      	ldrne	r2, [r4, #16]
 8005af8:	f641 73fe 	movwne	r3, #8190	; 0x1ffe
 8005afc:	4013      	andne	r3, r2
 8005afe:	6123      	strne	r3, [r4, #16]
      }
     }
  }
  /* Return the Program Status */
  return status;
}
 8005b00:	bd70      	pop	{r4, r5, r6, pc}
 8005b02:	46c0      	nop			(mov r8, r8)
 8005b04:	40022000 	.word	0x40022000

08005b08 <FLASH_EraseOptionBytes>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EraseOptionBytes(void)
{
 8005b08:	b510      	push	{r4, lr}
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8005b0a:	f640 70ff 	movw	r0, #4095	; 0xfff
 8005b0e:	f7ff fe73 	bl	80057f8 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 8005b12:	2804      	cmp	r0, #4
 8005b14:	d12c      	bne.n	8005b70 <FLASH_EraseOptionBytes+0x68>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8005b16:	4c17      	ldr	r4, [pc, #92]	(8005b74 <FLASH_EraseOptionBytes+0x6c>)
 8005b18:	4b17      	ldr	r3, [pc, #92]	(8005b78 <FLASH_EraseOptionBytes+0x70>)
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8005b1a:	f500 607e 	add.w	r0, r0, #4064	; 0xfe0
  status = FLASH_WaitForLastOperation(EraseTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8005b1e:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8005b20:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8005b24:	60a3      	str	r3, [r4, #8]
    
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
 8005b26:	6923      	ldr	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8005b28:	301b      	adds	r0, #27
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
 8005b2a:	f043 0320 	orr.w	r3, r3, #32	; 0x20
 8005b2e:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 8005b30:	6923      	ldr	r3, [r4, #16]
 8005b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b36:	6123      	str	r3, [r4, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8005b38:	f7ff fe5e 	bl	80057f8 <FLASH_WaitForLastOperation>
    
    if(status == FLASH_COMPLETE)
 8005b3c:	2804      	cmp	r0, #4
 8005b3e:	d110      	bne.n	8005b62 <FLASH_EraseOptionBytes+0x5a>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 8005b40:	6922      	ldr	r2, [r4, #16]
 8005b42:	f641 73df 	movw	r3, #8159	; 0x1fdf
 8005b46:	ea02 0303 	and.w	r3, r2, r3
 8005b4a:	6123      	str	r3, [r4, #16]
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 8005b4c:	6923      	ldr	r3, [r4, #16]

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 8005b4e:	f04f 02a5 	mov.w	r2, #165	; 0xa5
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 8005b52:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 8005b56:	6123      	str	r3, [r4, #16]

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 8005b58:	4b08      	ldr	r3, [pc, #32]	(8005b7c <FLASH_EraseOptionBytes+0x74>)

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005b5a:	200f      	movs	r0, #15
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 8005b5c:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005b5e:	f7ff fe4b 	bl	80057f8 <FLASH_WaitForLastOperation>
        FLASH->CR &= CR_OPTPG_Reset;
      }
    }
    else
    {
      if (status != FLASH_BUSY)
 8005b62:	2801      	cmp	r0, #1
      {
        /* Disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 8005b64:	bf1f      	itttt	ne
 8005b66:	6922      	ldrne	r2, [r4, #16]
 8005b68:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8005b6c:	4013      	andne	r3, r2
 8005b6e:	6123      	strne	r3, [r4, #16]
      }
    }  
  }
  /* Return the erase status */
  return status;
}
 8005b70:	bd10      	pop	{r4, pc}
 8005b72:	46c0      	nop			(mov r8, r8)
 8005b74:	40022000 	.word	0x40022000
 8005b78:	45670123 	.word	0x45670123
 8005b7c:	1ffff800 	.word	0x1ffff800

08005b80 <FLASH_EraseAllPages>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EraseAllPages(void)
{
 8005b80:	b510      	push	{r4, lr}
  FLASH_Status status = FLASH_COMPLETE;

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8005b82:	f640 70ff 	movw	r0, #4095	; 0xfff
 8005b86:	f7ff fe37 	bl	80057f8 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8005b8a:	2804      	cmp	r0, #4
 8005b8c:	d113      	bne.n	8005bb6 <FLASH_EraseAllPages+0x36>
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 8005b8e:	4c0a      	ldr	r4, [pc, #40]	(8005bb8 <FLASH_EraseAllPages+0x38>)
 8005b90:	6923      	ldr	r3, [r4, #16]
 8005b92:	4303      	orrs	r3, r0
 8005b94:	6123      	str	r3, [r4, #16]
     FLASH->CR |= CR_STRT_Set;
 8005b96:	6923      	ldr	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8005b98:	f500 607e 	add.w	r0, r0, #4064	; 0xfe0
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
     FLASH->CR |= CR_STRT_Set;
 8005b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ba0:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8005ba2:	301b      	adds	r0, #27
 8005ba4:	f7ff fe28 	bl	80057f8 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8005ba8:	2801      	cmp	r0, #1
    {
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= CR_MER_Reset;
 8005baa:	bf1f      	itttt	ne
 8005bac:	6922      	ldrne	r2, [r4, #16]
 8005bae:	f641 73fb 	movwne	r3, #8187	; 0x1ffb
 8005bb2:	4013      	andne	r3, r2
 8005bb4:	6123      	strne	r3, [r4, #16]
    }
  }	   
  /* Return the Erase Status */
  return status;
}
 8005bb6:	bd10      	pop	{r4, pc}
 8005bb8:	40022000 	.word	0x40022000

08005bbc <FLASH_ErasePage>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ErasePage(u32 Page_Address)
{
 8005bbc:	b530      	push	{r4, r5, lr}
 8005bbe:	4605      	mov	r5, r0
 8005bc0:	b081      	sub	sp, #4

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Page_Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8005bc2:	f640 70ff 	movw	r0, #4095	; 0xfff
 8005bc6:	f7ff fe17 	bl	80057f8 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8005bca:	2804      	cmp	r0, #4
 8005bcc:	d115      	bne.n	8005bfa <FLASH_ErasePage+0x3e>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8005bce:	4c0c      	ldr	r4, [pc, #48]	(8005c00 <FLASH_ErasePage+0x44>)
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8005bd0:	f500 607e 	add.w	r0, r0, #4064	; 0xfe0
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8005bd4:	6923      	ldr	r3, [r4, #16]
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8005bd6:	301b      	adds	r0, #27
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8005bd8:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 8005bdc:	6123      	str	r3, [r4, #16]
    FLASH->AR = Page_Address; 
 8005bde:	6165      	str	r5, [r4, #20]
    FLASH->CR|= CR_STRT_Set;
 8005be0:	6923      	ldr	r3, [r4, #16]
 8005be2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005be6:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8005be8:	f7ff fe06 	bl	80057f8 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8005bec:	2801      	cmp	r0, #1
    {
      /* if the erase operation is completed, disable the PER Bit */
      FLASH->CR &= CR_PER_Reset;
 8005bee:	bf1f      	itttt	ne
 8005bf0:	6922      	ldrne	r2, [r4, #16]
 8005bf2:	f641 73fd 	movwne	r3, #8189	; 0x1ffd
 8005bf6:	4013      	andne	r3, r2
 8005bf8:	6123      	strne	r3, [r4, #16]
    }
  }
  /* Return the Erase Status */
  return status;
}
 8005bfa:	b001      	add	sp, #4
 8005bfc:	bd30      	pop	{r4, r5, pc}
 8005bfe:	46c0      	nop			(mov r8, r8)
 8005c00:	40022000 	.word	0x40022000

08005c04 <GPIO_Init>:
*                    peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8005c04:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
 8005c06:	78cd      	ldrb	r5, [r1, #3]
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 8005c08:	880e      	ldrh	r6, [r1, #0]
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);

  if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
 8005c0a:	f015 0f10 	tst.w	r5, #16	; 0x10
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
 8005c0e:	bf18      	it	ne
 8005c10:	788b      	ldrbne	r3, [r1, #2]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
 8005c12:	f005 070f 	and.w	r7, r5, #15	; 0xf
  if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
 8005c16:	bf18      	it	ne
 8005c18:	431f      	orrne	r7, r3
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 8005c1a:	f016 0fff 	tst.w	r6, #255	; 0xff
*                    peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8005c1e:	b083      	sub	sp, #12
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 8005c20:	d01e      	beq.n	8005c60 <GPIO_Init+0x5c>
  {
    tmpreg = GPIOx->CRL;
 8005c22:	6804      	ldr	r4, [r0, #0]
 8005c24:	2100      	movs	r1, #0

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((u32)0x01) << pinpos;
 8005c26:	2201      	movs	r2, #1
 8005c28:	fa12 f301 	lsls.w	r3, r2, r1
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8005c2c:	ea03 0c06 	and.w	ip, r3, r6

      if (currentpin == pos)
 8005c30:	459c      	cmp	ip, r3
 8005c32:	d111      	bne.n	8005c58 <GPIO_Init+0x54>
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
 8005c34:	008a      	lsls	r2, r1, #2
        tmpreg &= ~pinmask;
 8005c36:	230f      	movs	r3, #15
 8005c38:	4093      	lsls	r3, r2

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8005c3a:	fa17 f202 	lsls.w	r2, r7, r2
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 8005c3e:	ea24 0403 	bic.w	r4, r4, r3

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8005c42:	4314      	orrs	r4, r2

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8005c44:	2d28      	cmp	r5, #40
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 8005c46:	9301      	str	r3, [sp, #4]
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((u32)0x01) << pinpos);
 8005c48:	bf08      	it	eq
 8005c4a:	f8c0 c014 	streq.w	ip, [r0, #20]

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8005c4e:	d003      	beq.n	8005c58 <GPIO_Init+0x54>
          GPIOx->BRR = (((u32)0x01) << pinpos);
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8005c50:	2d48      	cmp	r5, #72
          {
            GPIOx->BSRR = (((u32)0x01) << pinpos);
 8005c52:	bf08      	it	eq
 8005c54:	f8c0 c010 	streq.w	ip, [r0, #16]
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8005c58:	3101      	adds	r1, #1
 8005c5a:	2908      	cmp	r1, #8
 8005c5c:	d1e3      	bne.n	8005c26 <GPIO_Init+0x22>
            GPIOx->BSRR = (((u32)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8005c5e:	6004      	str	r4, [r0, #0]
  }

/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8005c60:	2eff      	cmp	r6, #255
 8005c62:	d920      	bls.n	8005ca6 <GPIO_Init+0xa2>
  {
    tmpreg = GPIOx->CRH;
 8005c64:	6844      	ldr	r4, [r0, #4]
 8005c66:	2100      	movs	r1, #0
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((u32)0x01) << (pinpos + 0x08));
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f101 0308 	add.w	r3, r1, #8	; 0x8
 8005c6e:	fa12 f303 	lsls.w	r3, r2, r3
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8005c72:	ea03 0c06 	and.w	ip, r3, r6
      if (currentpin == pos)
 8005c76:	459c      	cmp	ip, r3
 8005c78:	d111      	bne.n	8005c9e <GPIO_Init+0x9a>
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
 8005c7a:	008a      	lsls	r2, r1, #2
        tmpreg &= ~pinmask;
 8005c7c:	230f      	movs	r3, #15
 8005c7e:	4093      	lsls	r3, r2

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8005c80:	fa17 f202 	lsls.w	r2, r7, r2
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 8005c84:	ea24 0403 	bic.w	r4, r4, r3

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8005c88:	4314      	orrs	r4, r2

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8005c8a:	2d28      	cmp	r5, #40
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 8005c8c:	9301      	str	r3, [sp, #4]
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((u32)0x01) << (pinpos + 0x08));
 8005c8e:	bf08      	it	eq
 8005c90:	f8c0 c014 	streq.w	ip, [r0, #20]

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8005c94:	d003      	beq.n	8005c9e <GPIO_Init+0x9a>
        {
          GPIOx->BRR = (((u32)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8005c96:	2d48      	cmp	r5, #72
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
 8005c98:	bf08      	it	eq
 8005c9a:	f8c0 c010 	streq.w	ip, [r0, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8005c9e:	3101      	adds	r1, #1
 8005ca0:	2908      	cmp	r1, #8
 8005ca2:	d1e1      	bne.n	8005c68 <GPIO_Init+0x64>
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8005ca4:	6044      	str	r4, [r0, #4]
  }
}
 8005ca6:	b003      	add	sp, #12
 8005ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005caa:	46c0      	nop			(mov r8, r8)

08005cac <GPIO_StructInit>:
* Return         : None
*******************************************************************************/
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8005cac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cb0:	8003      	strh	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	7083      	strb	r3, [r0, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8005cb6:	2304      	movs	r3, #4
 8005cb8:	70c3      	strb	r3, [r0, #3]
}
 8005cba:	4770      	bx	lr

08005cbc <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (u32)Bit_RESET)
 8005cbc:	6883      	ldr	r3, [r0, #8]
 8005cbe:	4219      	tst	r1, r3
 8005cc0:	bf0c      	ite	eq
 8005cc2:	2000      	moveq	r0, #0
 8005cc4:	2001      	movne	r0, #1
  else
  {
    bitstatus = (u8)Bit_RESET;
  }
  return bitstatus;
}
 8005cc6:	4770      	bx	lr

08005cc8 <GPIO_ReadInputData>:
u16 GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((u16)GPIOx->IDR);
 8005cc8:	6880      	ldr	r0, [r0, #8]
 8005cca:	b280      	uxth	r0, r0
}
 8005ccc:	4770      	bx	lr
 8005cce:	46c0      	nop			(mov r8, r8)

08005cd0 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (u32)Bit_RESET)
 8005cd0:	68c3      	ldr	r3, [r0, #12]
 8005cd2:	4219      	tst	r1, r3
 8005cd4:	bf0c      	ite	eq
 8005cd6:	2000      	moveq	r0, #0
 8005cd8:	2001      	movne	r0, #1
  else
  {
    bitstatus = (u8)Bit_RESET;
  }
  return bitstatus;
}
 8005cda:	4770      	bx	lr

08005cdc <GPIO_ReadOutputData>:
u16 GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((u16)GPIOx->ODR);
 8005cdc:	68c0      	ldr	r0, [r0, #12]
 8005cde:	b280      	uxth	r0, r0
}
 8005ce0:	4770      	bx	lr
 8005ce2:	46c0      	nop			(mov r8, r8)

08005ce4 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8005ce4:	6101      	str	r1, [r0, #16]
}
 8005ce6:	4770      	bx	lr

08005ce8 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8005ce8:	6141      	str	r1, [r0, #20]
}
 8005cea:	4770      	bx	lr

08005cec <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8005cec:	b10a      	cbz	r2, 8005cf2 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cee:	6101      	str	r1, [r0, #16]
 8005cf0:	e000      	b.n	8005cf4 <GPIO_WriteBit+0x8>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 8005cf2:	6141      	str	r1, [r0, #20]
  }
}
 8005cf4:	4770      	bx	lr
 8005cf6:	46c0      	nop			(mov r8, r8)

08005cf8 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, u16 PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 8005cf8:	60c1      	str	r1, [r0, #12]
}
 8005cfa:	4770      	bx	lr

08005cfc <GPIO_PinLockConfig>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 8005cfc:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8005d00:	6183      	str	r3, [r0, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8005d02:	6181      	str	r1, [r0, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8005d04:	6183      	str	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8005d06:	6983      	ldr	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8005d08:	6983      	ldr	r3, [r0, #24]
}
 8005d0a:	4770      	bx	lr

08005d0c <GPIO_EventOutputConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 8005d0c:	f8df c018 	ldr.w	ip, [pc, #24]	; 8005d28 <GPIO_EventOutputConfig+0x1c>
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 8005d10:	f64f 7380 	movw	r3, #65408	; 0xff80

  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 8005d14:	f8dc 2000 	ldr.w	r2, [ip]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
  tmpreg |= (u32)GPIO_PortSource << 0x04;
 8005d18:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 8005d1c:	ea02 0303 	and.w	r3, r2, r3
  tmpreg |= (u32)GPIO_PortSource << 0x04;
  tmpreg |= GPIO_PinSource;
 8005d20:	4319      	orrs	r1, r3

  AFIO->EVCR = tmpreg;
 8005d22:	f8cc 1000 	str.w	r1, [ip]
}
 8005d26:	4770      	bx	lr
 8005d28:	40010000 	.word	0x40010000

08005d2c <GPIO_EventOutputCmd>:
void GPIO_EventOutputCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(vu32 *) EVCR_EVOE_BB = (u32)NewState;
 8005d2c:	4b01      	ldr	r3, [pc, #4]	(8005d34 <GPIO_EventOutputCmd+0x8>)
 8005d2e:	6018      	str	r0, [r3, #0]
}
 8005d30:	4770      	bx	lr
 8005d32:	46c0      	nop			(mov r8, r8)
 8005d34:	4220001c 	.word	0x4220001c

08005d38 <GPIO_PinRemapConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)
{
 8005d38:	b530      	push	{r4, r5, lr}
  tmpreg = AFIO->MAPR;

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8005d3a:	f400 1340 	and.w	r3, r0, #3145728	; 0x300000
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;
 8005d3e:	0404      	lsls	r4, r0, #16
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)
{
 8005d40:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
 8005d42:	4914      	ldr	r1, [pc, #80]	(8005d94 <GPIO_PinRemapConfig+0x5c>)

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;
 8005d44:	0c24      	lsrs	r4, r4, #16

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8005d46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
 8005d4a:	f8d1 c004 	ldr.w	ip, [r1, #4]

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8005d4e:	d106      	bne.n	8005d5e <GPIO_PinRemapConfig+0x26>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8005d50:	684b      	ldr	r3, [r1, #4]
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8005d52:	f02c 6270 	bic.w	r2, ip, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8005d56:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005d5a:	604b      	str	r3, [r1, #4]
 8005d5c:	e010      	b.n	8005d80 <GPIO_PinRemapConfig+0x48>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8005d5e:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8005d62:	d005      	beq.n	8005d70 <GPIO_PinRemapConfig+0x38>
  {
    tmp1 = ((u32)0x03) << tmpmask;
    tmpreg &= ~tmp1;
 8005d64:	f400 2270 	and.w	r2, r0, #983040	; 0xf0000
 8005d68:	0c12      	lsrs	r2, r2, #16
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	4093      	lsls	r3, r2
 8005d6e:	e003      	b.n	8005d78 <GPIO_PinRemapConfig+0x40>
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8005d70:	0d43      	lsrs	r3, r0, #21
 8005d72:	011b      	lsls	r3, r3, #4
 8005d74:	fa14 f303 	lsls.w	r3, r4, r3
 8005d78:	ea2c 0303 	bic.w	r3, ip, r3
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8005d7c:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
  }

  if (NewState != DISABLE)
 8005d80:	b125      	cbz	r5, 8005d8c <GPIO_PinRemapConfig+0x54>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8005d82:	0d43      	lsrs	r3, r0, #21
 8005d84:	011b      	lsls	r3, r3, #4
 8005d86:	fa14 f303 	lsls.w	r3, r4, r3
 8005d8a:	431a      	orrs	r2, r3
  }

  AFIO->MAPR = tmpreg;
 8005d8c:	4b01      	ldr	r3, [pc, #4]	(8005d94 <GPIO_PinRemapConfig+0x5c>)
 8005d8e:	605a      	str	r2, [r3, #4]
}
 8005d90:	bd30      	pop	{r4, r5, pc}
 8005d92:	46c0      	nop			(mov r8, r8)
 8005d94:	40010000 	.word	0x40010000

08005d98 <GPIO_EXTILineConfig>:
*                   This parameter can be GPIO_PinSourcex where x can be (0..15).
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_EXTILineConfig(u8 GPIO_PortSource, u8 GPIO_PinSource)
{
 8005d98:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));
 8005d9a:	f001 0403 	and.w	r4, r1, #3	; 0x3
 8005d9e:	00a4      	lsls	r4, r4, #2

  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8005da0:	230f      	movs	r3, #15
 8005da2:	40a3      	lsls	r3, r4
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((u32)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (u8)0x03)));
 8005da4:	40a0      	lsls	r0, r4
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));

  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8005da6:	f8df c020 	ldr.w	ip, [pc, #32]	; 8005dc8 <GPIO_EXTILineConfig+0x30>
 8005daa:	0889      	lsrs	r1, r1, #2
 8005dac:	3102      	adds	r1, #2
 8005dae:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
 8005db2:	ea22 0203 	bic.w	r2, r2, r3
 8005db6:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((u32)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (u8)0x03)));
 8005dba:	f85c 3021 	ldr.w	r3, [ip, r1, lsl #2]
 8005dbe:	4318      	orrs	r0, r3
 8005dc0:	f84c 0021 	str.w	r0, [ip, r1, lsl #2]
}
 8005dc4:	bd10      	pop	{r4, pc}
 8005dc6:	46c0      	nop			(mov r8, r8)
 8005dc8:	40010000 	.word	0x40010000

08005dcc <GPIO_AFIODeInit>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_AFIODeInit(void)
{
 8005dcc:	b500      	push	{lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8005dce:	2001      	movs	r0, #1
 8005dd0:	2101      	movs	r1, #1
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_AFIODeInit(void)
{
 8005dd2:	b081      	sub	sp, #4
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8005dd4:	f000 fbf6 	bl	80065c4 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 8005dd8:	2001      	movs	r0, #1
 8005dda:	2100      	movs	r1, #0
 8005ddc:	f000 fbf2 	bl	80065c4 <RCC_APB2PeriphResetCmd>
}
 8005de0:	b001      	add	sp, #4
 8005de2:	bd00      	pop	{pc}

08005de4 <GPIO_DeInit>:
* Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8005de4:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
 8005de6:	4b27      	ldr	r3, [pc, #156]	(8005e84 <GPIO_DeInit+0xa0>)
* Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8005de8:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
 8005dea:	4298      	cmp	r0, r3
* Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8005dec:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
 8005dee:	d02b      	beq.n	8005e48 <GPIO_DeInit+0x64>
 8005df0:	d80c      	bhi.n	8005e0c <GPIO_DeInit+0x28>
 8005df2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8005df6:	4298      	cmp	r0, r3
 8005df8:	d01a      	beq.n	8005e30 <GPIO_DeInit+0x4c>
 8005dfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dfe:	4298      	cmp	r0, r3
 8005e00:	d01c      	beq.n	8005e3c <GPIO_DeInit+0x58>
 8005e02:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8005e06:	4298      	cmp	r0, r3
 8005e08:	d13a      	bne.n	8005e80 <GPIO_DeInit+0x9c>
 8005e0a:	e00b      	b.n	8005e24 <GPIO_DeInit+0x40>
 8005e0c:	4b1e      	ldr	r3, [pc, #120]	(8005e88 <GPIO_DeInit+0xa4>)
 8005e0e:	4298      	cmp	r0, r3
 8005e10:	d026      	beq.n	8005e60 <GPIO_DeInit+0x7c>
 8005e12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e16:	4298      	cmp	r0, r3
 8005e18:	d028      	beq.n	8005e6c <GPIO_DeInit+0x88>
 8005e1a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8005e1e:	4298      	cmp	r0, r3
 8005e20:	d12e      	bne.n	8005e80 <GPIO_DeInit+0x9c>
 8005e22:	e017      	b.n	8005e54 <GPIO_DeInit+0x70>
  {
    case GPIOA_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8005e24:	2004      	movs	r0, #4
 8005e26:	2101      	movs	r1, #1
 8005e28:	f000 fbcc 	bl	80065c4 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 8005e2c:	2004      	movs	r0, #4
 8005e2e:	e024      	b.n	8005e7a <GPIO_DeInit+0x96>
      break;

    case GPIOB_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8005e30:	2008      	movs	r0, #8
 8005e32:	2101      	movs	r1, #1
 8005e34:	f000 fbc6 	bl	80065c4 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 8005e38:	2008      	movs	r0, #8
 8005e3a:	e01e      	b.n	8005e7a <GPIO_DeInit+0x96>
      break;

    case GPIOC_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8005e3c:	2010      	movs	r0, #16
 8005e3e:	2101      	movs	r1, #1
 8005e40:	f000 fbc0 	bl	80065c4 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 8005e44:	2010      	movs	r0, #16
 8005e46:	e018      	b.n	8005e7a <GPIO_DeInit+0x96>
      break;

    case GPIOD_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 8005e48:	2020      	movs	r0, #32
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	f000 fbba 	bl	80065c4 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 8005e50:	2020      	movs	r0, #32
 8005e52:	e012      	b.n	8005e7a <GPIO_DeInit+0x96>
      break;
      
    case GPIOE_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 8005e54:	2040      	movs	r0, #64
 8005e56:	2101      	movs	r1, #1
 8005e58:	f000 fbb4 	bl	80065c4 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 8005e5c:	2040      	movs	r0, #64
 8005e5e:	e00c      	b.n	8005e7a <GPIO_DeInit+0x96>
      break; 

    case GPIOF_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 8005e60:	2080      	movs	r0, #128
 8005e62:	2101      	movs	r1, #1
 8005e64:	f000 fbae 	bl	80065c4 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 8005e68:	2080      	movs	r0, #128
 8005e6a:	e006      	b.n	8005e7a <GPIO_DeInit+0x96>
      break;

    case GPIOG_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 8005e6c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005e70:	2101      	movs	r1, #1
 8005e72:	f000 fba7 	bl	80065c4 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 8005e76:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	f000 fba2 	bl	80065c4 <RCC_APB2PeriphResetCmd>
      break;                       

    default:
      break;
  }
}
 8005e80:	b003      	add	sp, #12
 8005e82:	bd00      	pop	{pc}
 8005e84:	40011400 	.word	0x40011400
 8005e88:	40011c00 	.word	0x40011c00

08005e8c <NVIC_DeInit>:
*******************************************************************************/
void NVIC_DeInit(void)
{
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
 8005e8c:	4b0b      	ldr	r3, [pc, #44]	(8005ebc <NVIC_DeInit+0x30>)
 8005e8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  NVIC->ICER[1] = 0x0FFFFFFF;
 8005e92:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
*******************************************************************************/
void NVIC_DeInit(void)
{
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
 8005e96:	f8c3 1080 	str.w	r1, [r3, #128]
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
  {
     NVIC->IPR[index] = 0x00000000;
 8005e9a:	4618      	mov	r0, r3
void NVIC_DeInit(void)
{
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
 8005e9c:	f8c3 2084 	str.w	r2, [r3, #132]
  NVIC->ICPR[0] = 0xFFFFFFFF;
 8005ea0:	f8c3 1180 	str.w	r1, [r3, #384]
  NVIC->ICPR[1] = 0x0FFFFFFF;
 8005ea4:	f8c3 2184 	str.w	r2, [r3, #388]
  
  for(index = 0; index < 0x0F; index++)
  {
     NVIC->IPR[index] = 0x00000000;
 8005ea8:	2100      	movs	r1, #0
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
 8005eaa:	2200      	movs	r2, #0
  
  for(index = 0; index < 0x0F; index++)
  {
     NVIC->IPR[index] = 0x00000000;
 8005eac:	f102 03c0 	add.w	r3, r2, #192	; 0xc0
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
 8005eb0:	3201      	adds	r2, #1
 8005eb2:	2a0f      	cmp	r2, #15
  {
     NVIC->IPR[index] = 0x00000000;
 8005eb4:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
 8005eb8:	d1f8      	bne.n	8005eac <NVIC_DeInit+0x20>
  {
     NVIC->IPR[index] = 0x00000000;
  } 
}
 8005eba:	4770      	bx	lr
 8005ebc:	e000e100 	.word	0xe000e100

08005ec0 <NVIC_SCBDeInit>:
*******************************************************************************/
void NVIC_SCBDeInit(void)
{
  u32 index = 0x00;
  
  SCB->ICSR = 0x0A000000;
 8005ec0:	4a09      	ldr	r2, [pc, #36]	(8005ee8 <NVIC_SCBDeInit+0x28>)
 8005ec2:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
  SCB->VTOR = 0x00000000;
  SCB->AIRCR = AIRCR_VECTKEY_MASK;
 8005ec6:	4909      	ldr	r1, [pc, #36]	(8005eec <NVIC_SCBDeInit+0x2c>)
*******************************************************************************/
void NVIC_SCBDeInit(void)
{
  u32 index = 0x00;
  
  SCB->ICSR = 0x0A000000;
 8005ec8:	6053      	str	r3, [r2, #4]
  SCB->VTOR = 0x00000000;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	6093      	str	r3, [r2, #8]
  SCB->AIRCR = AIRCR_VECTKEY_MASK;
 8005ece:	60d1      	str	r1, [r2, #12]
  SCB->SCR = 0x00000000;
 8005ed0:	6113      	str	r3, [r2, #16]
  SCB->CCR = 0x00000000;
 8005ed2:	6153      	str	r3, [r2, #20]
  for(index = 0; index < 0x03; index++)
  {
     SCB->SHPR[index] = 0;
 8005ed4:	6193      	str	r3, [r2, #24]
 8005ed6:	61d3      	str	r3, [r2, #28]
 8005ed8:	6213      	str	r3, [r2, #32]
  }
  SCB->SHCSR = 0x00000000;
 8005eda:	6253      	str	r3, [r2, #36]
  SCB->CFSR = 0xFFFFFFFF;
 8005edc:	3b01      	subs	r3, #1
 8005ede:	6293      	str	r3, [r2, #40]
  SCB->HFSR = 0xFFFFFFFF;
 8005ee0:	62d3      	str	r3, [r2, #44]
  SCB->DFSR = 0xFFFFFFFF;
 8005ee2:	6313      	str	r3, [r2, #48]
}
 8005ee4:	4770      	bx	lr
 8005ee6:	46c0      	nop			(mov r8, r8)
 8005ee8:	e000ed00 	.word	0xe000ed00
 8005eec:	05fa0000 	.word	0x05fa0000

08005ef0 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8005ef0:	f040 60be 	orr.w	r0, r0, #99614720	; 0x5f00000
 8005ef4:	4b02      	ldr	r3, [pc, #8]	(8005f00 <NVIC_PriorityGroupConfig+0x10>)
 8005ef6:	f440 2020 	orr.w	r0, r0, #655360	; 0xa0000
 8005efa:	60d8      	str	r0, [r3, #12]
}
 8005efc:	4770      	bx	lr
 8005efe:	46c0      	nop			(mov r8, r8)
 8005f00:	e000ed00 	.word	0xe000ed00

08005f04 <NVIC_Init>:
*                    specified NVIC peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8005f04:	b530      	push	{r4, r5, lr}
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_InitStruct->NVIC_IRQChannel));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8005f06:	78c3      	ldrb	r3, [r0, #3]
 8005f08:	7805      	ldrb	r5, [r0, #0]
 8005f0a:	b35b      	cbz	r3, 8005f64 <NVIC_Init+0x60>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8005f0c:	4b1a      	ldr	r3, [pc, #104]	(8005f78 <NVIC_Init+0x74>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8005f0e:	7841      	ldrb	r1, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8005f10:	68da      	ldr	r2, [r3, #12]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 8005f12:	4c1a      	ldr	r4, [pc, #104]	(8005f7c <NVIC_Init+0x78>)
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8005f14:	ea6f 0202 	mvn.w	r2, r2
 8005f18:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005f1c:	0a12      	lsrs	r2, r2, #8
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8005f1e:	f1c2 0304 	rsb	r3, r2, #4	; 0x4
 8005f22:	4099      	lsls	r1, r3
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8005f24:	230f      	movs	r3, #15
 8005f26:	40d3      	lsrs	r3, r2
 8005f28:	7882      	ldrb	r2, [r0, #2]

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8005f2a:	f005 0003 	and.w	r0, r5, #3	; 0x3
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8005f2e:	4013      	ands	r3, r2
 8005f30:	430b      	orrs	r3, r1

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8005f32:	00c0      	lsls	r0, r0, #3
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
 8005f34:	011b      	lsls	r3, r3, #4
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8005f36:	22ff      	movs	r2, #255
 8005f38:	4082      	lsls	r2, r0
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8005f3a:	4083      	lsls	r3, r0
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 8005f3c:	ea4f 0c95 	mov.w	ip, r5, lsr #2
 8005f40:	f10c 0cc0 	add.w	ip, ip, #192	; 0xc0
 8005f44:	f854 102c 	ldr.w	r1, [r4, ip, lsl #2]
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
    tmppriority &= tmpmask;  
    tmpreg |= tmppriority;
 8005f48:	4013      	ands	r3, r2
    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
 8005f4a:	ea21 0102 	bic.w	r1, r1, r2
    tmppriority &= tmpmask;  
    tmpreg |= tmppriority;
 8005f4e:	430b      	orrs	r3, r1

    NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
 8005f50:	f844 302c 	str.w	r3, [r4, ip, lsl #2]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8005f54:	f005 021f 	and.w	r2, r5, #31	; 0x1f
 8005f58:	2301      	movs	r3, #1
 8005f5a:	4093      	lsls	r3, r2
 8005f5c:	0969      	lsrs	r1, r5, #5
 8005f5e:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
 8005f62:	e008      	b.n	8005f76 <NVIC_Init+0x72>
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8005f64:	f005 021f 	and.w	r2, r5, #31	; 0x1f
 8005f68:	2301      	movs	r3, #1
 8005f6a:	4093      	lsls	r3, r2
 8005f6c:	0969      	lsrs	r1, r5, #5
 8005f6e:	4a03      	ldr	r2, [pc, #12]	(8005f7c <NVIC_Init+0x78>)
 8005f70:	3120      	adds	r1, #32
 8005f72:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
}
 8005f76:	bd30      	pop	{r4, r5, pc}
 8005f78:	e000ed00 	.word	0xe000ed00
 8005f7c:	e000e100 	.word	0xe000e100

08005f80 <NVIC_StructInit>:
* Return         : None
*******************************************************************************/
void NVIC_StructInit(NVIC_InitTypeDef* NVIC_InitStruct)
{
  /* NVIC_InitStruct members default value */
  NVIC_InitStruct->NVIC_IRQChannel = 0x00;
 8005f80:	2300      	movs	r3, #0
 8005f82:	7003      	strb	r3, [r0, #0]
  NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority = 0x00;
 8005f84:	7043      	strb	r3, [r0, #1]
  NVIC_InitStruct->NVIC_IRQChannelSubPriority = 0x00;
 8005f86:	7083      	strb	r3, [r0, #2]
  NVIC_InitStruct->NVIC_IRQChannelCmd = DISABLE;
 8005f88:	70c3      	strb	r3, [r0, #3]
}
 8005f8a:	4770      	bx	lr

08005f8c <NVIC_GetCurrentPendingIRQChannel>:
* Output         : None
* Return         : Pending IRQ Channel Identifier.
*******************************************************************************/
u16 NVIC_GetCurrentPendingIRQChannel(void)
{
  return ((u16)((SCB->ICSR & (u32)0x003FF000) >> 0x0C));
 8005f8c:	4b03      	ldr	r3, [pc, #12]	(8005f9c <NVIC_GetCurrentPendingIRQChannel+0x10>)
 8005f8e:	4804      	ldr	r0, [pc, #16]	(8005fa0 <NVIC_GetCurrentPendingIRQChannel+0x14>)
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	ea03 0000 	and.w	r0, r3, r0
 8005f96:	0b00      	lsrs	r0, r0, #12
}
 8005f98:	4770      	bx	lr
 8005f9a:	46c0      	nop			(mov r8, r8)
 8005f9c:	e000ed00 	.word	0xe000ed00
 8005fa0:	003ff000 	.word	0x003ff000

08005fa4 <NVIC_GetIRQChannelPendingBitStatus>:
  u32 tmp = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
 8005fa4:	f000 031f 	and.w	r3, r0, #31	; 0x1f
 8005fa8:	2201      	movs	r2, #1
 8005faa:	409a      	lsls	r2, r3

  if (((NVIC->ISPR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp)
 8005fac:	0940      	lsrs	r0, r0, #5
 8005fae:	4b05      	ldr	r3, [pc, #20]	(8005fc4 <NVIC_GetIRQChannelPendingBitStatus+0x20>)
 8005fb0:	3040      	adds	r0, #64
 8005fb2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005fb6:	4010      	ands	r0, r2
 8005fb8:	4290      	cmp	r0, r2
 8005fba:	bf14      	ite	ne
 8005fbc:	2000      	movne	r0, #0
 8005fbe:	2001      	moveq	r0, #1
  else
  {
    pendingirqstatus = RESET;
  }
  return pendingirqstatus;
}
 8005fc0:	4770      	bx	lr
 8005fc2:	46c0      	nop			(mov r8, r8)
 8005fc4:	e000e100 	.word	0xe000e100

08005fc8 <NVIC_SetIRQChannelPendingBit>:
void NVIC_SetIRQChannelPendingBit(u8 NVIC_IRQChannel)
{
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  *(vu32*) 0xE000EF00 = (u32)NVIC_IRQChannel;
 8005fc8:	4b01      	ldr	r3, [pc, #4]	(8005fd0 <NVIC_SetIRQChannelPendingBit+0x8>)
 8005fca:	6018      	str	r0, [r3, #0]
}
 8005fcc:	4770      	bx	lr
 8005fce:	46c0      	nop			(mov r8, r8)
 8005fd0:	e000ef00 	.word	0xe000ef00

08005fd4 <NVIC_ClearIRQChannelPendingBit>:
void NVIC_ClearIRQChannelPendingBit(u8 NVIC_IRQChannel)
{
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  NVIC->ICPR[(NVIC_IRQChannel >> 0x05)] = (u32)0x01 << (NVIC_IRQChannel & (u32)0x1F);
 8005fd4:	0941      	lsrs	r1, r0, #5
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 8005fdc:	4083      	lsls	r3, r0
 8005fde:	4a02      	ldr	r2, [pc, #8]	(8005fe8 <NVIC_ClearIRQChannelPendingBit+0x14>)
 8005fe0:	3160      	adds	r1, #96
 8005fe2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8005fe6:	4770      	bx	lr
 8005fe8:	e000e100 	.word	0xe000e100

08005fec <NVIC_GetCurrentActiveHandler>:
* Output         : None
* Return         : Active Handler Identifier.
*******************************************************************************/
u16 NVIC_GetCurrentActiveHandler(void)
{
  return ((u16)(SCB->ICSR & (u32)0x3FF));
 8005fec:	4b02      	ldr	r3, [pc, #8]	(8005ff8 <NVIC_GetCurrentActiveHandler+0xc>)
 8005fee:	6858      	ldr	r0, [r3, #4]
 8005ff0:	0580      	lsls	r0, r0, #22
 8005ff2:	0d80      	lsrs	r0, r0, #22
}
 8005ff4:	4770      	bx	lr
 8005ff6:	46c0      	nop			(mov r8, r8)
 8005ff8:	e000ed00 	.word	0xe000ed00

08005ffc <NVIC_GetIRQChannelActiveBitStatus>:
  u32 tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
 8005ffc:	f000 031f 	and.w	r3, r0, #31	; 0x1f
 8006000:	2201      	movs	r2, #1
 8006002:	409a      	lsls	r2, r3

  if (((NVIC->IABR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp )
 8006004:	0940      	lsrs	r0, r0, #5
 8006006:	4b05      	ldr	r3, [pc, #20]	(800601c <NVIC_GetIRQChannelActiveBitStatus+0x20>)
 8006008:	3080      	adds	r0, #128
 800600a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800600e:	4010      	ands	r0, r2
 8006010:	4290      	cmp	r0, r2
 8006012:	bf14      	ite	ne
 8006014:	2000      	movne	r0, #0
 8006016:	2001      	moveq	r0, #1
  else
  {
    activeirqstatus = RESET;
  }
  return activeirqstatus;
}
 8006018:	4770      	bx	lr
 800601a:	46c0      	nop			(mov r8, r8)
 800601c:	e000e100 	.word	0xe000e100

08006020 <NVIC_GetCPUID>:
* Output         : None
* Return         : CPU ID.
*******************************************************************************/
u32 NVIC_GetCPUID(void)
{
  return (SCB->CPUID);
 8006020:	4b01      	ldr	r3, [pc, #4]	(8006028 <NVIC_GetCPUID+0x8>)
 8006022:	6818      	ldr	r0, [r3, #0]
}
 8006024:	4770      	bx	lr
 8006026:	46c0      	nop			(mov r8, r8)
 8006028:	e000ed00 	.word	0xe000ed00

0800602c <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (u32)0x1FFFFF80);
 800602c:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8006030:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8006034:	4b01      	ldr	r3, [pc, #4]	(800603c <NVIC_SetVectorTable+0x10>)
 8006036:	4301      	orrs	r1, r0
 8006038:	6099      	str	r1, [r3, #8]
}
 800603a:	4770      	bx	lr
 800603c:	e000ed00 	.word	0xe000ed00

08006040 <NVIC_GenerateSystemReset>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_GenerateSystemReset(void)
{
  SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x04;
 8006040:	4a01      	ldr	r2, [pc, #4]	(8006048 <NVIC_GenerateSystemReset+0x8>)
 8006042:	4b02      	ldr	r3, [pc, #8]	(800604c <NVIC_GenerateSystemReset+0xc>)
 8006044:	60da      	str	r2, [r3, #12]
}
 8006046:	4770      	bx	lr
 8006048:	05fa0004 	.word	0x05fa0004
 800604c:	e000ed00 	.word	0xe000ed00

08006050 <NVIC_GenerateCoreReset>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_GenerateCoreReset(void)
{
  SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x01;
 8006050:	4a01      	ldr	r2, [pc, #4]	(8006058 <NVIC_GenerateCoreReset+0x8>)
 8006052:	4b02      	ldr	r3, [pc, #8]	(800605c <NVIC_GenerateCoreReset+0xc>)
 8006054:	60da      	str	r2, [r3, #12]
}
 8006056:	4770      	bx	lr
 8006058:	05fa0001 	.word	0x05fa0001
 800605c:	e000ed00 	.word	0xe000ed00

08006060 <NVIC_SystemLPConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8006060:	b121      	cbz	r1, 800606c <NVIC_SystemLPConfig+0xc>
  {
    SCB->SCR |= LowPowerMode;
 8006062:	4a05      	ldr	r2, [pc, #20]	(8006078 <NVIC_SystemLPConfig+0x18>)
 8006064:	6913      	ldr	r3, [r2, #16]
 8006066:	ea40 0303 	orr.w	r3, r0, r3
 800606a:	e003      	b.n	8006074 <NVIC_SystemLPConfig+0x14>
  }
  else
  {
    SCB->SCR &= (u32)(~(u32)LowPowerMode);
 800606c:	4a02      	ldr	r2, [pc, #8]	(8006078 <NVIC_SystemLPConfig+0x18>)
 800606e:	6913      	ldr	r3, [r2, #16]
 8006070:	ea23 0300 	bic.w	r3, r3, r0
 8006074:	6113      	str	r3, [r2, #16]
  }
}
 8006076:	4770      	bx	lr
 8006078:	e000ed00 	.word	0xe000ed00

0800607c <NVIC_SystemHandlerConfig>:

  /* Check the parameters */
  assert_param(IS_CONFIG_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  tmpreg =  (u32)0x01 << (SystemHandler & (u32)0x1F);
 800607c:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 8006080:	2301      	movs	r3, #1
 8006082:	fa13 f000 	lsls.w	r0, r3, r0

  if (NewState != DISABLE)
 8006086:	b121      	cbz	r1, 8006092 <NVIC_SystemHandlerConfig+0x16>
  {
    SCB->SHCSR |= tmpreg;
 8006088:	4a05      	ldr	r2, [pc, #20]	(80060a0 <NVIC_SystemHandlerConfig+0x24>)
 800608a:	6a53      	ldr	r3, [r2, #36]
 800608c:	ea40 0303 	orr.w	r3, r0, r3
 8006090:	e003      	b.n	800609a <NVIC_SystemHandlerConfig+0x1e>
  }
  else
  {
    SCB->SHCSR &= ~tmpreg;
 8006092:	4a03      	ldr	r2, [pc, #12]	(80060a0 <NVIC_SystemHandlerConfig+0x24>)
 8006094:	6a53      	ldr	r3, [r2, #36]
 8006096:	ea23 0300 	bic.w	r3, r3, r0
 800609a:	6253      	str	r3, [r2, #36]
  }
}
 800609c:	4770      	bx	lr
 800609e:	46c0      	nop			(mov r8, r8)
 80060a0:	e000ed00 	.word	0xe000ed00

080060a4 <NVIC_SystemHandlerPriorityConfig>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SystemHandlerPriorityConfig(u32 SystemHandler, u8 SystemHandlerPreemptionPriority,
                                      u8 SystemHandlerSubPriority)
{
 80060a4:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_PRIORITY_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(SystemHandlerPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(SystemHandlerSubPriority));
    
  tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 80060a6:	4c14      	ldr	r4, [pc, #80]	(80060f8 <NVIC_SystemHandlerPriorityConfig+0x54>)
 80060a8:	68e3      	ldr	r3, [r4, #12]
 80060aa:	ea6f 0303 	mvn.w	r3, r3
 80060ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060b2:	0a1b      	lsrs	r3, r3, #8
  tmp1 = (0x4 - tmppriority);
  tmp2 = tmp2 >> tmppriority;
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
 80060b4:	f1c3 0c04 	rsb	ip, r3, #4	; 0x4
 80060b8:	fa01 f10c 	lsl.w	r1, r1, ip
  tmppriority |=  SystemHandlerSubPriority & tmp2;
 80060bc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80060c0:	fa2c f303 	lsr.w	r3, ip, r3
 80060c4:	401a      	ands	r2, r3
 80060c6:	430a      	orrs	r2, r1

  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
 80060c8:	f000 01c0 	and.w	r1, r0, #192	; 0xc0
  tmp1 = tmp1 >> 0x06; 
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
 80060cc:	0940      	lsrs	r0, r0, #5
 80060ce:	f000 0018 	and.w	r0, r0, #24	; 0x18
  handlermask = (u32)0xFF << (tmp2 * 0x08);
  
  SCB->SHPR[tmp1] &= ~handlermask;
 80060d2:	fa0c fc00 	lsl.w	ip, ip, r0
  tmp2 = tmp2 >> tmppriority;
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;

  tmppriority = tmppriority << 0x04;
 80060d6:	0112      	lsls	r2, r2, #4
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
  handlermask = (u32)0xFF << (tmp2 * 0x08);
  
  SCB->SHPR[tmp1] &= ~handlermask;
  SCB->SHPR[tmp1] |= tmppriority;
 80060d8:	4082      	lsls	r2, r0
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;

  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
  tmp1 = tmp1 >> 0x06; 
 80060da:	0989      	lsrs	r1, r1, #6
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
  handlermask = (u32)0xFF << (tmp2 * 0x08);
  
  SCB->SHPR[tmp1] &= ~handlermask;
 80060dc:	3106      	adds	r1, #6
 80060de:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 80060e2:	ea23 030c 	bic.w	r3, r3, ip
 80060e6:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
  SCB->SHPR[tmp1] |= tmppriority;
 80060ea:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 80060ee:	431a      	orrs	r2, r3
 80060f0:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
}
 80060f4:	bd10      	pop	{r4, pc}
 80060f6:	46c0      	nop			(mov r8, r8)
 80060f8:	e000ed00 	.word	0xe000ed00

080060fc <NVIC_GetSystemHandlerPendingBitStatus>:
  u32 tmp = 0x00, tmppos = 0x00;

  /* Check the parameters */
  assert_param(IS_GET_PENDING_SYSTEM_HANDLER(SystemHandler));
  
  tmppos = (SystemHandler >> 0x0A);
 80060fc:	0a80      	lsrs	r0, r0, #10
  tmppos &= (u32)0x0F;

  tmppos = (u32)0x01 << tmppos;
 80060fe:	f000 000f 	and.w	r0, r0, #15	; 0xf
 8006102:	2301      	movs	r3, #1
 8006104:	4083      	lsls	r3, r0

  tmp = SCB->SHCSR & tmppos;
 8006106:	4a04      	ldr	r2, [pc, #16]	(8006118 <NVIC_GetSystemHandlerPendingBitStatus+0x1c>)
 8006108:	6a50      	ldr	r0, [r2, #36]
 800610a:	ea03 0000 	and.w	r0, r3, r0
 800610e:	4298      	cmp	r0, r3
 8006110:	bf14      	ite	ne
 8006112:	2000      	movne	r0, #0
 8006114:	2001      	moveq	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8006116:	4770      	bx	lr
 8006118:	e000ed00 	.word	0xe000ed00

0800611c <NVIC_SetSystemHandlerPendingBit>:
  assert_param(IS_SET_PENDING_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
  /* Set the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << tmp);
 800611c:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 8006120:	2301      	movs	r3, #1
 8006122:	4083      	lsls	r3, r0
 8006124:	4a02      	ldr	r2, [pc, #8]	(8006130 <NVIC_SetSystemHandlerPendingBit+0x14>)
 8006126:	6851      	ldr	r1, [r2, #4]
 8006128:	430b      	orrs	r3, r1
 800612a:	6053      	str	r3, [r2, #4]
}
 800612c:	4770      	bx	lr
 800612e:	46c0      	nop			(mov r8, r8)
 8006130:	e000ed00 	.word	0xe000ed00

08006134 <NVIC_ClearSystemHandlerPendingBit>:
  assert_param(IS_CLEAR_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
  /* Clear the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << (tmp - 0x01));
 8006134:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 8006138:	3801      	subs	r0, #1
 800613a:	2301      	movs	r3, #1
 800613c:	4083      	lsls	r3, r0
 800613e:	4a02      	ldr	r2, [pc, #8]	(8006148 <NVIC_ClearSystemHandlerPendingBit+0x14>)
 8006140:	6851      	ldr	r1, [r2, #4]
 8006142:	430b      	orrs	r3, r1
 8006144:	6053      	str	r3, [r2, #4]
}
 8006146:	4770      	bx	lr
 8006148:	e000ed00 	.word	0xe000ed00

0800614c <NVIC_GetSystemHandlerActiveBitStatus>:
  /* Check the parameters */
  assert_param(IS_GET_ACTIVE_SYSTEM_HANDLER(SystemHandler));
  
  tmppos = (SystemHandler >> 0x0E) & (u32)0x0F;

  tmppos = (u32)0x01 << tmppos;
 800614c:	0b80      	lsrs	r0, r0, #14
 800614e:	f000 000f 	and.w	r0, r0, #15	; 0xf
 8006152:	2301      	movs	r3, #1
 8006154:	4083      	lsls	r3, r0

  tmp = SCB->SHCSR & tmppos;
 8006156:	4a04      	ldr	r2, [pc, #16]	(8006168 <NVIC_GetSystemHandlerActiveBitStatus+0x1c>)
 8006158:	6a50      	ldr	r0, [r2, #36]
 800615a:	ea03 0000 	and.w	r0, r3, r0
 800615e:	4298      	cmp	r0, r3
 8006160:	bf14      	ite	ne
 8006162:	2000      	movne	r0, #0
 8006164:	2001      	moveq	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8006166:	4770      	bx	lr
 8006168:	e000ed00 	.word	0xe000ed00

0800616c <NVIC_GetFaultHandlerSources>:
  u32 tmpreg = 0x00, tmppos = 0x00;

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
 800616c:	0c83      	lsrs	r3, r0, #18
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;

  if (tmpreg == 0x00)
 800616e:	f013 0303 	ands.w	r3, r3, #3	; 0x3
 8006172:	d102      	bne.n	800617a <NVIC_GetFaultHandlerSources+0xe>
  {
    faultsources = SCB->HFSR;
 8006174:	4b0d      	ldr	r3, [pc, #52]	(80061ac <NVIC_GetFaultHandlerSources+0x40>)
 8006176:	6ad8      	ldr	r0, [r3, #44]
 8006178:	e017      	b.n	80061aa <NVIC_GetFaultHandlerSources+0x3e>
  }
  else if (tmpreg == 0x01)
 800617a:	2b01      	cmp	r3, #1
 800617c:	d113      	bne.n	80061a6 <NVIC_GetFaultHandlerSources+0x3a>
  {
    faultsources = SCB->CFSR >> (tmppos * 0x08);
 800617e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8006182:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8006186:	33fe      	adds	r3, #254

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;
 8006188:	0d02      	lsrs	r2, r0, #20
  {
    faultsources = SCB->HFSR;
  }
  else if (tmpreg == 0x01)
  {
    faultsources = SCB->CFSR >> (tmppos * 0x08);
 800618a:	3301      	adds	r3, #1

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;
 800618c:	f002 0203 	and.w	r2, r2, #3	; 0x3
  {
    faultsources = SCB->HFSR;
  }
  else if (tmpreg == 0x01)
  {
    faultsources = SCB->CFSR >> (tmppos * 0x08);
 8006190:	6a99      	ldr	r1, [r3, #40]
 8006192:	00d3      	lsls	r3, r2, #3
 8006194:	fa31 f003 	lsrs.w	r0, r1, r3
    if (tmppos != 0x02)
 8006198:	2a02      	cmp	r2, #2
    {
      faultsources &= (u32)0x0F;
 800619a:	bf14      	ite	ne
 800619c:	f000 000f 	andne.w	r0, r0, #15	; 0xf
    }
    else
    {
      faultsources &= (u32)0xFF;
 80061a0:	f000 00ff 	andeq.w	r0, r0, #255	; 0xff
 80061a4:	e001      	b.n	80061aa <NVIC_GetFaultHandlerSources+0x3e>
    }
  }
  else
  {
    faultsources = SCB->DFSR;
 80061a6:	4b01      	ldr	r3, [pc, #4]	(80061ac <NVIC_GetFaultHandlerSources+0x40>)
 80061a8:	6b18      	ldr	r0, [r3, #48]
  }
  return faultsources;
}
 80061aa:	4770      	bx	lr
 80061ac:	e000ed00 	.word	0xe000ed00

080061b0 <NVIC_GetFaultAddress>:
  /* Check the parameters */
  assert_param(IS_FAULT_ADDRESS_SYSTEM_HANDLER(SystemHandler));
  
  tmp = (SystemHandler >> 0x16) & (u32)0x01;

  if (tmp == 0x00)
 80061b0:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
  {
    faultaddress = SCB->MMFAR;
 80061b4:	bf0b      	itete	eq
 80061b6:	4b02      	ldreq	r3, [pc, #8]	(80061c0 <NVIC_GetFaultAddress+0x10>)
  }
  else
  {
    faultaddress = SCB->BFAR;
 80061b8:	4b01      	ldrne	r3, [pc, #4]	(80061c0 <NVIC_GetFaultAddress+0x10>)
  
  tmp = (SystemHandler >> 0x16) & (u32)0x01;

  if (tmp == 0x00)
  {
    faultaddress = SCB->MMFAR;
 80061ba:	6b58      	ldreq	r0, [r3, #52]
  }
  else
  {
    faultaddress = SCB->BFAR;
 80061bc:	6b98      	ldrne	r0, [r3, #56]
  }
  return faultaddress;
}
 80061be:	4770      	bx	lr
 80061c0:	e000ed00 	.word	0xe000ed00

080061c4 <NVIC_GetBASEPRI>:
* Input          : None
* Output         : None
* Return         : BASEPRI register value
*******************************************************************************/
u32 NVIC_GetBASEPRI(void)
{
 80061c4:	b500      	push	{lr}
 80061c6:	b081      	sub	sp, #4
  return (__GetBASEPRI());
 80061c8:	f000 fcc4 	bl	8006b54 <__GetBASEPRI>
}
 80061cc:	b001      	add	sp, #4
 80061ce:	bd00      	pop	{pc}

080061d0 <NVIC_BASEPRICONFIG>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_BASEPRICONFIG(u32 NewPriority)
{
 80061d0:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_NVIC_BASE_PRI(NewPriority));
  
  __BASEPRICONFIG(NewPriority << 0x04);
 80061d2:	0100      	lsls	r0, r0, #4
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_BASEPRICONFIG(u32 NewPriority)
{
 80061d4:	b081      	sub	sp, #4
  /* Check the parameters */
  assert_param(IS_NVIC_BASE_PRI(NewPriority));
  
  __BASEPRICONFIG(NewPriority << 0x04);
 80061d6:	f000 fcba 	bl	8006b4e <__BASEPRICONFIG>
}
 80061da:	b001      	add	sp, #4
 80061dc:	bd00      	pop	{pc}
 80061de:	46c0      	nop			(mov r8, r8)

080061e0 <NVIC_RESETFAULTMASK>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_RESETFAULTMASK(void)
{
 80061e0:	b500      	push	{lr}
 80061e2:	b081      	sub	sp, #4
  __RESETFAULTMASK();
 80061e4:	f000 fcb1 	bl	8006b4a <__RESETFAULTMASK>
}
 80061e8:	b001      	add	sp, #4
 80061ea:	bd00      	pop	{pc}

080061ec <NVIC_SETFAULTMASK>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SETFAULTMASK(void)
{
 80061ec:	b500      	push	{lr}
 80061ee:	b081      	sub	sp, #4
  __SETFAULTMASK();
 80061f0:	f000 fca9 	bl	8006b46 <__SETFAULTMASK>
}
 80061f4:	b001      	add	sp, #4
 80061f6:	bd00      	pop	{pc}

080061f8 <NVIC_RESETPRIMASK>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_RESETPRIMASK(void)
{
 80061f8:	b500      	push	{lr}
 80061fa:	b081      	sub	sp, #4
  __RESETPRIMASK();
 80061fc:	f000 fca1 	bl	8006b42 <__RESETPRIMASK>
}
 8006200:	b001      	add	sp, #4
 8006202:	bd00      	pop	{pc}

08006204 <NVIC_SETPRIMASK>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SETPRIMASK(void)
{
 8006204:	b500      	push	{lr}
 8006206:	b081      	sub	sp, #4
  __SETPRIMASK();
 8006208:	f000 fc99 	bl	8006b3e <__SETPRIMASK>
}
 800620c:	b001      	add	sp, #4
 800620e:	bd00      	pop	{pc}

08006210 <PWR_BackupAccessCmd>:
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_DBP_BB = (u32)NewState;
 8006210:	4b01      	ldr	r3, [pc, #4]	(8006218 <PWR_BackupAccessCmd+0x8>)
 8006212:	6018      	str	r0, [r3, #0]
}
 8006214:	4770      	bx	lr
 8006216:	46c0      	nop			(mov r8, r8)
 8006218:	420e0020 	.word	0x420e0020

0800621c <PWR_PVDCmd>:
void PWR_PVDCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PVDE_BB = (u32)NewState;
 800621c:	4b01      	ldr	r3, [pc, #4]	(8006224 <PWR_PVDCmd+0x8>)
 800621e:	6018      	str	r0, [r3, #0]
}
 8006220:	4770      	bx	lr
 8006222:	46c0      	nop			(mov r8, r8)
 8006224:	420e0010 	.word	0x420e0010

08006228 <PWR_PVDLevelConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));

  tmpreg = PWR->CR;
 8006228:	4a03      	ldr	r2, [pc, #12]	(8006238 <PWR_PVDLevelConfig+0x10>)
 800622a:	6813      	ldr	r3, [r2, #0]

  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_Mask;
 800622c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0

  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 8006230:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 8006232:	6010      	str	r0, [r2, #0]
}
 8006234:	4770      	bx	lr
 8006236:	46c0      	nop			(mov r8, r8)
 8006238:	40007000 	.word	0x40007000

0800623c <PWR_WakeUpPinCmd>:
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CSR_EWUP_BB = (u32)NewState;
 800623c:	4b01      	ldr	r3, [pc, #4]	(8006244 <PWR_WakeUpPinCmd+0x8>)
 800623e:	6018      	str	r0, [r3, #0]
}
 8006240:	4770      	bx	lr
 8006242:	46c0      	nop			(mov r8, r8)
 8006244:	420e00a0 	.word	0x420e00a0

08006248 <PWR_GetFlagStatus>:
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (u32)RESET)
 8006248:	4b03      	ldr	r3, [pc, #12]	(8006258 <PWR_GetFlagStatus+0x10>)
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	4218      	tst	r0, r3
 800624e:	bf0c      	ite	eq
 8006250:	2000      	moveq	r0, #0
 8006252:	2001      	movne	r0, #1
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 8006254:	4770      	bx	lr
 8006256:	46c0      	nop			(mov r8, r8)
 8006258:	40007000 	.word	0x40007000

0800625c <PWR_ClearFlag>:
void PWR_ClearFlag(u32 PWR_FLAG)
{
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 800625c:	4a02      	ldr	r2, [pc, #8]	(8006268 <PWR_ClearFlag+0xc>)
 800625e:	6813      	ldr	r3, [r2, #0]
 8006260:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 8006264:	6013      	str	r3, [r2, #0]
}
 8006266:	4770      	bx	lr
 8006268:	40007000 	.word	0x40007000

0800626c <PWR_EnterSTANDBYMode>:
* Return         : None
*******************************************************************************/
void PWR_EnterSTANDBYMode(void)
{
  /* Clear Wake-up flag */
  PWR->CR |= CR_CWUF_Set;
 800626c:	4a0b      	ldr	r2, [pc, #44]	(800629c <PWR_EnterSTANDBYMode+0x30>)
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_EnterSTANDBYMode(void)
{
 800626e:	b500      	push	{lr}
  /* Clear Wake-up flag */
  PWR->CR |= CR_CWUF_Set;
 8006270:	6813      	ldr	r3, [r2, #0]
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_EnterSTANDBYMode(void)
{
 8006272:	b081      	sub	sp, #4
  /* Clear Wake-up flag */
  PWR->CR |= CR_CWUF_Set;
 8006274:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 8006278:	6013      	str	r3, [r2, #0]

  /* Select STANDBY mode */
  PWR->CR |= CR_PDDS_Set;
 800627a:	6813      	ldr	r3, [r2, #0]
 800627c:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 8006280:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 8006282:	f102 4220 	add.w	r2, r2, #2684354560	; 0xa0000000
 8006286:	f502 42fa 	add.w	r2, r2, #32000	; 0x7d00
 800628a:	3210      	adds	r2, #16
 800628c:	6813      	ldr	r3, [r2, #0]
 800628e:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 8006292:	6013      	str	r3, [r2, #0]

  /* Request Wait For Interrupt */
  __WFI();
 8006294:	f000 fc2e 	bl	8006af4 <__WFI>
}
 8006298:	b001      	add	sp, #4
 800629a:	bd00      	pop	{pc}
 800629c:	40007000 	.word	0x40007000

080062a0 <PWR_EnterSTOPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 80062a0:	4a0c      	ldr	r2, [pc, #48]	(80062d4 <PWR_EnterSTOPMode+0x34>)
*                       - PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_EnterSTOPMode(u32 PWR_Regulator, u8 PWR_STOPEntry)
{
 80062a2:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 80062a4:	6813      	ldr	r3, [r2, #0]
*                       - PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_EnterSTOPMode(u32 PWR_Regulator, u8 PWR_STOPEntry)
{
 80062a6:	b081      	sub	sp, #4
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_Mask;
 80062a8:	f023 0303 	bic.w	r3, r3, #3	; 0x3

  /* Set LPDS bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 80062ac:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 80062ae:	6010      	str	r0, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 80062b0:	f102 4220 	add.w	r2, r2, #2684354560	; 0xa0000000
 80062b4:	f502 42fa 	add.w	r2, r2, #32000	; 0x7d00
 80062b8:	3210      	adds	r2, #16
 80062ba:	6813      	ldr	r3, [r2, #0]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 80062bc:	2901      	cmp	r1, #1

  /* Store the new value */
  PWR->CR = tmpreg;

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 80062be:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 80062c2:	6013      	str	r3, [r2, #0]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 80062c4:	d102      	bne.n	80062cc <PWR_EnterSTOPMode+0x2c>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80062c6:	f000 fc15 	bl	8006af4 <__WFI>
 80062ca:	e001      	b.n	80062d0 <PWR_EnterSTOPMode+0x30>
  }
  else
  {
    /* Request Wait For Event */
    __WFE();
 80062cc:	f000 fc14 	bl	8006af8 <__WFE>
  }
}
 80062d0:	b001      	add	sp, #4
 80062d2:	bd00      	pop	{pc}
 80062d4:	40007000 	.word	0x40007000

080062d8 <PWR_DeInit>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_DeInit(void)
{
 80062d8:	b510      	push	{r4, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 80062da:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
 80062de:	4620      	mov	r0, r4
 80062e0:	2101      	movs	r1, #1
 80062e2:	f000 f97d 	bl	80065e0 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 80062e6:	4620      	mov	r0, r4
 80062e8:	2100      	movs	r1, #0
 80062ea:	f000 f979 	bl	80065e0 <RCC_APB1PeriphResetCmd>
}
 80062ee:	bd10      	pop	{r4, pc}

080062f0 <RCC_DeInit>:
* Return         : None
*******************************************************************************/
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (u32)0x00000001;
 80062f0:	4a0d      	ldr	r2, [pc, #52]	(8006328 <RCC_DeInit+0x38>)
 80062f2:	6813      	ldr	r3, [r2, #0]
 80062f4:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 80062f8:	6013      	str	r3, [r2, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], ADCPRE[1:0] and MCO[2:0] bits */
  RCC->CFGR &= (u32)0xF8FF0000;
 80062fa:	6851      	ldr	r1, [r2, #4]
 80062fc:	4b0b      	ldr	r3, [pc, #44]	(800632c <RCC_DeInit+0x3c>)
 80062fe:	ea01 0303 	and.w	r3, r1, r3
 8006302:	6053      	str	r3, [r2, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (u32)0xFEF6FFFF;
 8006304:	6813      	ldr	r3, [r2, #0]
 8006306:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800630a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800630e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (u32)0xFFFBFFFF;
 8006310:	6813      	ldr	r3, [r2, #0]
 8006312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006316:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL[3:0] and USBPRE bits */
  RCC->CFGR &= (u32)0xFF80FFFF;
 8006318:	6853      	ldr	r3, [r2, #4]
 800631a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800631e:	6053      	str	r3, [r2, #4]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006320:	2300      	movs	r3, #0
 8006322:	6093      	str	r3, [r2, #8]
}
 8006324:	4770      	bx	lr
 8006326:	46c0      	nop			(mov r8, r8)
 8006328:	40021000 	.word	0x40021000
 800632c:	f8ff0000 	.word	0xf8ff0000

08006330 <RCC_HSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8006330:	4a0b      	ldr	r2, [pc, #44]	(8006360 <RCC_HSEConfig+0x30>)

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8006332:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8006336:	6813      	ldr	r3, [r2, #0]
 8006338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800633c:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 800633e:	6813      	ldr	r3, [r2, #0]
 8006340:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006344:	6013      	str	r3, [r2, #0]

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8006346:	d003      	beq.n	8006350 <RCC_HSEConfig+0x20>
 8006348:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 800634c:	d107      	bne.n	800635e <RCC_HSEConfig+0x2e>
 800634e:	e002      	b.n	8006356 <RCC_HSEConfig+0x26>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8006350:	6813      	ldr	r3, [r2, #0]
 8006352:	4303      	orrs	r3, r0
 8006354:	e002      	b.n	800635c <RCC_HSEConfig+0x2c>
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8006356:	6813      	ldr	r3, [r2, #0]
 8006358:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 800635c:	6013      	str	r3, [r2, #0]
      break;            
      
    default:
      break;      
  }
}
 800635e:	4770      	bx	lr
 8006360:	40021000 	.word	0x40021000

08006364 <RCC_WaitForHSEStartUp>:
* Return         : An ErrorStatus enumuration value:
*                         - SUCCESS: HSE oscillator is stable and ready to use
*                         - ERROR: HSE oscillator not yet ready
*******************************************************************************/
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8006364:	b082      	sub	sp, #8
  vu32 StartUpCounter = 0;
 8006366:	2300      	movs	r3, #0
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8006368:	4909      	ldr	r1, [pc, #36]	(8006390 <RCC_WaitForHSEStartUp+0x2c>)
*                         - SUCCESS: HSE oscillator is stable and ready to use
*                         - ERROR: HSE oscillator not yet ready
*******************************************************************************/
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  vu32 StartUpCounter = 0;
 800636a:	9301      	str	r3, [sp, #4]
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 800636c:	680a      	ldr	r2, [r1, #0]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
 800636e:	9b01      	ldr	r3, [sp, #4]
 8006370:	3301      	adds	r3, #1
  } while((HSEStatus == RESET) && (StartUpCounter != HSEStartUp_TimeOut));
 8006372:	f412 3f00 	tst.w	r2, #131072	; 0x20000
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
 8006376:	9301      	str	r3, [sp, #4]
  } while((HSEStatus == RESET) && (StartUpCounter != HSEStartUp_TimeOut));
 8006378:	d103      	bne.n	8006382 <RCC_WaitForHSEStartUp+0x1e>
 800637a:	9b01      	ldr	r3, [sp, #4]
 800637c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006380:	d1f4      	bne.n	800636c <RCC_WaitForHSEStartUp+0x8>
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8006382:	4b03      	ldr	r3, [pc, #12]	(8006390 <RCC_WaitForHSEStartUp+0x2c>)
 8006384:	6818      	ldr	r0, [r3, #0]
 8006386:	0c40      	lsrs	r0, r0, #17
 8006388:	f000 0001 	and.w	r0, r0, #1	; 0x1
  {
    status = ERROR;
  }  

  return (status);
}
 800638c:	b002      	add	sp, #8
 800638e:	4770      	bx	lr
 8006390:	40021000 	.word	0x40021000

08006394 <RCC_AdjustHSICalibrationValue>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8006394:	4a03      	ldr	r2, [pc, #12]	(80063a4 <RCC_AdjustHSICalibrationValue+0x10>)
 8006396:	6813      	ldr	r3, [r2, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 8006398:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (u32)HSICalibrationValue << 3;
 800639c:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 80063a0:	6013      	str	r3, [r2, #0]
}
 80063a2:	4770      	bx	lr
 80063a4:	40021000 	.word	0x40021000

080063a8 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_HSION_BB = (u32)NewState;
 80063a8:	4b01      	ldr	r3, [pc, #4]	(80063b0 <RCC_HSICmd+0x8>)
 80063aa:	6018      	str	r0, [r3, #0]
}
 80063ac:	4770      	bx	lr
 80063ae:	46c0      	nop			(mov r8, r8)
 80063b0:	42420000 	.word	0x42420000

080063b4 <RCC_PLLConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 80063b4:	4a03      	ldr	r2, [pc, #12]	(80063c4 <RCC_PLLConfig+0x10>)
 80063b6:	6853      	ldr	r3, [r2, #4]

  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;

  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 80063b8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80063bc:	4318      	orrs	r0, r3
 80063be:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80063c0:	6050      	str	r0, [r2, #4]
}
 80063c2:	4770      	bx	lr
 80063c4:	40021000 	.word	0x40021000

080063c8 <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PLLON_BB = (u32)NewState;
 80063c8:	4b01      	ldr	r3, [pc, #4]	(80063d0 <RCC_PLLCmd+0x8>)
 80063ca:	6018      	str	r0, [r3, #0]
}
 80063cc:	4770      	bx	lr
 80063ce:	46c0      	nop			(mov r8, r8)
 80063d0:	42420060 	.word	0x42420060

080063d4 <RCC_SYSCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 80063d4:	4a03      	ldr	r2, [pc, #12]	(80063e4 <RCC_SYSCLKConfig+0x10>)
 80063d6:	6853      	ldr	r3, [r2, #4]

  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 80063d8:	f023 0303 	bic.w	r3, r3, #3	; 0x3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80063dc:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80063de:	6050      	str	r0, [r2, #4]
}
 80063e0:	4770      	bx	lr
 80063e2:	46c0      	nop			(mov r8, r8)
 80063e4:	40021000 	.word	0x40021000

080063e8 <RCC_GetSYSCLKSource>:
*                       - 0x04: HSE used as system clock
*                       - 0x08: PLL used as system clock
*******************************************************************************/
u8 RCC_GetSYSCLKSource(void)
{
  return ((u8)(RCC->CFGR & CFGR_SWS_Mask));
 80063e8:	4b02      	ldr	r3, [pc, #8]	(80063f4 <RCC_GetSYSCLKSource+0xc>)
 80063ea:	6858      	ldr	r0, [r3, #4]
 80063ec:	f000 000c 	and.w	r0, r0, #12	; 0xc
}
 80063f0:	4770      	bx	lr
 80063f2:	46c0      	nop			(mov r8, r8)
 80063f4:	40021000 	.word	0x40021000

080063f8 <RCC_HCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 80063f8:	4a03      	ldr	r2, [pc, #12]	(8006408 <RCC_HCLKConfig+0x10>)
 80063fa:	6853      	ldr	r3, [r2, #4]

  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 80063fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8006400:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8006402:	6050      	str	r0, [r2, #4]
}
 8006404:	4770      	bx	lr
 8006406:	46c0      	nop			(mov r8, r8)
 8006408:	40021000 	.word	0x40021000

0800640c <RCC_PCLK1Config>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800640c:	4a03      	ldr	r2, [pc, #12]	(800641c <RCC_PCLK1Config+0x10>)
 800640e:	6853      	ldr	r3, [r2, #4]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8006410:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8006414:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8006416:	6050      	str	r0, [r2, #4]
}
 8006418:	4770      	bx	lr
 800641a:	46c0      	nop			(mov r8, r8)
 800641c:	40021000 	.word	0x40021000

08006420 <RCC_PCLK2Config>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8006420:	4a03      	ldr	r2, [pc, #12]	(8006430 <RCC_PCLK2Config+0x10>)
 8006422:	6853      	ldr	r3, [r2, #4]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8006424:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8006428:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800642c:	6053      	str	r3, [r2, #4]
}
 800642e:	4770      	bx	lr
 8006430:	40021000 	.word	0x40021000

08006434 <RCC_ITConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006434:	b121      	cbz	r1, 8006440 <RCC_ITConfig+0xc>
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to enable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8006436:	4a05      	ldr	r2, [pc, #20]	(800644c <RCC_ITConfig+0x18>)
 8006438:	7813      	ldrb	r3, [r2, #0]
 800643a:	ea40 0303 	orr.w	r3, r0, r3
 800643e:	e003      	b.n	8006448 <RCC_ITConfig+0x14>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to disable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS &= (u8)~RCC_IT;
 8006440:	4a02      	ldr	r2, [pc, #8]	(800644c <RCC_ITConfig+0x18>)
 8006442:	7813      	ldrb	r3, [r2, #0]
 8006444:	ea23 0300 	bic.w	r3, r3, r0
 8006448:	7013      	strb	r3, [r2, #0]
  }
}
 800644a:	4770      	bx	lr
 800644c:	40021009 	.word	0x40021009

08006450 <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(u32 RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(vu32 *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8006450:	4b01      	ldr	r3, [pc, #4]	(8006458 <RCC_USBCLKConfig+0x8>)
 8006452:	6018      	str	r0, [r3, #0]
}
 8006454:	4770      	bx	lr
 8006456:	46c0      	nop			(mov r8, r8)
 8006458:	424200d8 	.word	0x424200d8

0800645c <RCC_ADCCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));

  tmpreg = RCC->CFGR;
 800645c:	4a03      	ldr	r2, [pc, #12]	(800646c <RCC_ADCCLKConfig+0x10>)
 800645e:	6853      	ldr	r3, [r2, #4]

  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8006460:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000

  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8006464:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8006466:	6050      	str	r0, [r2, #4]
}
 8006468:	4770      	bx	lr
 800646a:	46c0      	nop			(mov r8, r8)
 800646c:	40021000 	.word	0x40021000

08006470 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 8006470:	4a06      	ldr	r2, [pc, #24]	(800648c <RCC_LSEConfig+0x1c>)
 8006472:	2300      	movs	r3, #0

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8006474:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 8006476:	7013      	strb	r3, [r2, #0]

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 8006478:	7013      	strb	r3, [r2, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_ON;
 800647a:	bf08      	it	eq
 800647c:	7010      	strbeq	r0, [r2, #0]

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 800647e:	d003      	beq.n	8006488 <RCC_LSEConfig+0x18>
 8006480:	2804      	cmp	r0, #4
 8006482:	d101      	bne.n	8006488 <RCC_LSEConfig+0x18>
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8006484:	2305      	movs	r3, #5
 8006486:	7013      	strb	r3, [r2, #0]
      break;            
      
    default:
      break;      
  }
}
 8006488:	4770      	bx	lr
 800648a:	46c0      	nop			(mov r8, r8)
 800648c:	40021020 	.word	0x40021020

08006490 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CSR_LSION_BB = (u32)NewState;
 8006490:	4b01      	ldr	r3, [pc, #4]	(8006498 <RCC_LSICmd+0x8>)
 8006492:	6018      	str	r0, [r3, #0]
}
 8006494:	4770      	bx	lr
 8006496:	46c0      	nop			(mov r8, r8)
 8006498:	42420480 	.word	0x42420480

0800649c <RCC_RTCCLKConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 800649c:	4a02      	ldr	r2, [pc, #8]	(80064a8 <RCC_RTCCLKConfig+0xc>)
 800649e:	6a13      	ldr	r3, [r2, #32]
 80064a0:	4318      	orrs	r0, r3
 80064a2:	6210      	str	r0, [r2, #32]
}
 80064a4:	4770      	bx	lr
 80064a6:	46c0      	nop			(mov r8, r8)
 80064a8:	40021000 	.word	0x40021000

080064ac <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) BDCR_RTCEN_BB = (u32)NewState;
 80064ac:	4b01      	ldr	r3, [pc, #4]	(80064b4 <RCC_RTCCLKCmd+0x8>)
 80064ae:	6018      	str	r0, [r3, #0]
}
 80064b0:	4770      	bx	lr
 80064b2:	46c0      	nop			(mov r8, r8)
 80064b4:	4242043c 	.word	0x4242043c

080064b8 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80064b8:	4929      	ldr	r1, [pc, #164]	(8006560 <RCC_GetClocksFreq+0xa8>)
*                    will hold the clocks frequencies.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80064ba:	4684      	mov	ip, r0
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80064bc:	684b      	ldr	r3, [r1, #4]

  switch (tmp)
 80064be:	f003 030c 	and.w	r3, r3, #12	; 0xc
 80064c2:	2b04      	cmp	r3, #4
 80064c4:	d021      	beq.n	800650a <RCC_GetClocksFreq+0x52>
 80064c6:	2b08      	cmp	r3, #8
 80064c8:	d11f      	bne.n	800650a <RCC_GetClocksFreq+0x52>
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
      break;

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80064ca:	684b      	ldr	r3, [r1, #4]
      pllmull = ( pllmull >> 18) + 2;
 80064cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80064d0:	0c9b      	lsrs	r3, r3, #18
 80064d2:	1c9a      	adds	r2, r3, #2

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80064d4:	684b      	ldr	r3, [r1, #4]

      if (pllsource == 0x00)
 80064d6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
 80064da:	bf08      	it	eq
 80064dc:	ebc2 1342 	rsbeq	r3, r2, r2, lsl #5
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
      pllmull = ( pllmull >> 18) + 2;

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;

      if (pllsource == 0x00)
 80064e0:	d006      	beq.n	80064f0 <RCC_GetClocksFreq+0x38>
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
      }
      else
      {/* HSE selected as PLL clock entry */

        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (u32)RESET)
 80064e2:	684b      	ldr	r3, [r1, #4]
 80064e4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80064e8:	ea4f 1342 	mov.w	r3, r2, lsl #5
 80064ec:	d006      	beq.n	80064fc <RCC_GetClocksFreq+0x44>
        {/* HSE oscillator clock divided by 2 */

          RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
 80064ee:	1a9b      	subs	r3, r3, r2
 80064f0:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 80064f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80064f8:	021b      	lsls	r3, r3, #8
 80064fa:	e007      	b.n	800650c <RCC_GetClocksFreq+0x54>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
 80064fc:	1a9b      	subs	r3, r3, r2
 80064fe:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 8006502:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006506:	025b      	lsls	r3, r3, #9
 8006508:	e000      	b.n	800650c <RCC_GetClocksFreq+0x54>
        }
      }
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 800650a:	4b16      	ldr	r3, [pc, #88]	(8006564 <RCC_GetClocksFreq+0xac>)
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 800650c:	4814      	ldr	r0, [pc, #80]	(8006560 <RCC_GetClocksFreq+0xa8>)
        }
      }
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 800650e:	f8cc 3000 	str.w	r3, [ip]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8006512:	6843      	ldr	r3, [r0, #4]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8006514:	4a14      	ldr	r2, [pc, #80]	(8006568 <RCC_GetClocksFreq+0xb0>)
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8006516:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800651a:	091b      	lsrs	r3, r3, #4
 800651c:	5cd3      	ldrb	r3, [r2, r3]
 800651e:	f8dc 1000 	ldr.w	r1, [ip]
 8006522:	40d9      	lsrs	r1, r3
 8006524:	f8cc 1004 	str.w	r1, [ip, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8006528:	6843      	ldr	r3, [r0, #4]
 800652a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  tmp = tmp >> 8;
  presc = APBAHBPrescTable[tmp];

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800652e:	0a1b      	lsrs	r3, r3, #8
 8006530:	5cd3      	ldrb	r3, [r2, r3]
 8006532:	fa31 f303 	lsrs.w	r3, r1, r3
 8006536:	f8cc 3008 	str.w	r3, [ip, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800653a:	6843      	ldr	r3, [r0, #4]
 800653c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
  tmp = tmp >> 11;
  presc = APBAHBPrescTable[tmp];

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8006540:	0adb      	lsrs	r3, r3, #11
 8006542:	5cd3      	ldrb	r3, [r2, r3]
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];

  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8006544:	4a09      	ldr	r2, [pc, #36]	(800656c <RCC_GetClocksFreq+0xb4>)
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
  tmp = tmp >> 11;
  presc = APBAHBPrescTable[tmp];

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8006546:	40d9      	lsrs	r1, r3
 8006548:	f8cc 100c 	str.w	r1, [ip, #12]

  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 800654c:	6843      	ldr	r3, [r0, #4]
 800654e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];

  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8006552:	0b9b      	lsrs	r3, r3, #14
 8006554:	5cd3      	ldrb	r3, [r2, r3]
 8006556:	fbb1 f1f3 	udiv	r1, r1, r3
 800655a:	f8cc 1010 	str.w	r1, [ip, #16]
}
 800655e:	4770      	bx	lr
 8006560:	40021000 	.word	0x40021000
 8006564:	007a1200 	.word	0x007a1200
 8006568:	08006bb8 	.word	0x08006bb8
 800656c:	08006bc8 	.word	0x08006bc8

08006570 <RCC_AHBPeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006570:	b121      	cbz	r1, 800657c <RCC_AHBPeriphClockCmd+0xc>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8006572:	4a05      	ldr	r2, [pc, #20]	(8006588 <RCC_AHBPeriphClockCmd+0x18>)
 8006574:	6953      	ldr	r3, [r2, #20]
 8006576:	ea40 0303 	orr.w	r3, r0, r3
 800657a:	e003      	b.n	8006584 <RCC_AHBPeriphClockCmd+0x14>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 800657c:	4a02      	ldr	r2, [pc, #8]	(8006588 <RCC_AHBPeriphClockCmd+0x18>)
 800657e:	6953      	ldr	r3, [r2, #20]
 8006580:	ea23 0300 	bic.w	r3, r3, r0
 8006584:	6153      	str	r3, [r2, #20]
  }
}
 8006586:	4770      	bx	lr
 8006588:	40021000 	.word	0x40021000

0800658c <RCC_APB2PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800658c:	b121      	cbz	r1, 8006598 <RCC_APB2PeriphClockCmd+0xc>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800658e:	4a05      	ldr	r2, [pc, #20]	(80065a4 <RCC_APB2PeriphClockCmd+0x18>)
 8006590:	6993      	ldr	r3, [r2, #24]
 8006592:	ea40 0303 	orr.w	r3, r0, r3
 8006596:	e003      	b.n	80065a0 <RCC_APB2PeriphClockCmd+0x14>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8006598:	4a02      	ldr	r2, [pc, #8]	(80065a4 <RCC_APB2PeriphClockCmd+0x18>)
 800659a:	6993      	ldr	r3, [r2, #24]
 800659c:	ea23 0300 	bic.w	r3, r3, r0
 80065a0:	6193      	str	r3, [r2, #24]
  }
}
 80065a2:	4770      	bx	lr
 80065a4:	40021000 	.word	0x40021000

080065a8 <RCC_APB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80065a8:	b121      	cbz	r1, 80065b4 <RCC_APB1PeriphClockCmd+0xc>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80065aa:	4a05      	ldr	r2, [pc, #20]	(80065c0 <RCC_APB1PeriphClockCmd+0x18>)
 80065ac:	69d3      	ldr	r3, [r2, #28]
 80065ae:	ea40 0303 	orr.w	r3, r0, r3
 80065b2:	e003      	b.n	80065bc <RCC_APB1PeriphClockCmd+0x14>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80065b4:	4a02      	ldr	r2, [pc, #8]	(80065c0 <RCC_APB1PeriphClockCmd+0x18>)
 80065b6:	69d3      	ldr	r3, [r2, #28]
 80065b8:	ea23 0300 	bic.w	r3, r3, r0
 80065bc:	61d3      	str	r3, [r2, #28]
  }
}
 80065be:	4770      	bx	lr
 80065c0:	40021000 	.word	0x40021000

080065c4 <RCC_APB2PeriphResetCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80065c4:	b121      	cbz	r1, 80065d0 <RCC_APB2PeriphResetCmd+0xc>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80065c6:	4a05      	ldr	r2, [pc, #20]	(80065dc <RCC_APB2PeriphResetCmd+0x18>)
 80065c8:	68d3      	ldr	r3, [r2, #12]
 80065ca:	ea40 0303 	orr.w	r3, r0, r3
 80065ce:	e003      	b.n	80065d8 <RCC_APB2PeriphResetCmd+0x14>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80065d0:	4a02      	ldr	r2, [pc, #8]	(80065dc <RCC_APB2PeriphResetCmd+0x18>)
 80065d2:	68d3      	ldr	r3, [r2, #12]
 80065d4:	ea23 0300 	bic.w	r3, r3, r0
 80065d8:	60d3      	str	r3, [r2, #12]
  }
}
 80065da:	4770      	bx	lr
 80065dc:	40021000 	.word	0x40021000

080065e0 <RCC_APB1PeriphResetCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80065e0:	b121      	cbz	r1, 80065ec <RCC_APB1PeriphResetCmd+0xc>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80065e2:	4a05      	ldr	r2, [pc, #20]	(80065f8 <RCC_APB1PeriphResetCmd+0x18>)
 80065e4:	6913      	ldr	r3, [r2, #16]
 80065e6:	ea40 0303 	orr.w	r3, r0, r3
 80065ea:	e003      	b.n	80065f4 <RCC_APB1PeriphResetCmd+0x14>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80065ec:	4a02      	ldr	r2, [pc, #8]	(80065f8 <RCC_APB1PeriphResetCmd+0x18>)
 80065ee:	6913      	ldr	r3, [r2, #16]
 80065f0:	ea23 0300 	bic.w	r3, r3, r0
 80065f4:	6113      	str	r3, [r2, #16]
  }
}
 80065f6:	4770      	bx	lr
 80065f8:	40021000 	.word	0x40021000

080065fc <RCC_BackupResetCmd>:
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) BDCR_BDRST_BB = (u32)NewState;
 80065fc:	4b01      	ldr	r3, [pc, #4]	(8006604 <RCC_BackupResetCmd+0x8>)
 80065fe:	6018      	str	r0, [r3, #0]
}
 8006600:	4770      	bx	lr
 8006602:	46c0      	nop			(mov r8, r8)
 8006604:	42420440 	.word	0x42420440

08006608 <RCC_ClockSecuritySystemCmd>:
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_CSSON_BB = (u32)NewState;
 8006608:	4b01      	ldr	r3, [pc, #4]	(8006610 <RCC_ClockSecuritySystemCmd+0x8>)
 800660a:	6018      	str	r0, [r3, #0]
}
 800660c:	4770      	bx	lr
 800660e:	46c0      	nop			(mov r8, r8)
 8006610:	4242004c 	.word	0x4242004c

08006614 <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO[2:0] bits to select the MCO source */
  *(vu8 *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 8006614:	4b01      	ldr	r3, [pc, #4]	(800661c <RCC_MCOConfig+0x8>)
 8006616:	7018      	strb	r0, [r3, #0]
}
 8006618:	4770      	bx	lr
 800661a:	46c0      	nop			(mov r8, r8)
 800661c:	40021007 	.word	0x40021007

08006620 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8006620:	0943      	lsrs	r3, r0, #5

  if (tmp == 1)               /* The flag to check is in CR register */
 8006622:	2b01      	cmp	r3, #1
 8006624:	d108      	bne.n	8006638 <RCC_GetFlagStatus+0x18>
  {
    statusreg = RCC->CR;
 8006626:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800662a:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800662e:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8006632:	3307      	adds	r3, #7
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	e00c      	b.n	8006652 <RCC_GetFlagStatus+0x32>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8006638:	2b02      	cmp	r3, #2
 800663a:	d108      	bne.n	800664e <RCC_GetFlagStatus+0x2e>
  {
    statusreg = RCC->BDCR;
 800663c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006640:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8006644:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8006648:	3306      	adds	r3, #6
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	e001      	b.n	8006652 <RCC_GetFlagStatus+0x32>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800664e:	4b04      	ldr	r3, [pc, #16]	(8006660 <RCC_GetFlagStatus+0x40>)
 8006650:	6a5b      	ldr	r3, [r3, #36]
 8006652:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 8006656:	fa33 f000 	lsrs.w	r0, r3, r0
 800665a:	f000 0001 	and.w	r0, r0, #1	; 0x1
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 800665e:	4770      	bx	lr
 8006660:	40021000 	.word	0x40021000

08006664 <RCC_ClearFlag>:
* Return         : None
*******************************************************************************/
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 8006664:	4a02      	ldr	r2, [pc, #8]	(8006670 <RCC_ClearFlag+0xc>)
 8006666:	6a53      	ldr	r3, [r2, #36]
 8006668:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800666c:	6253      	str	r3, [r2, #36]
}
 800666e:	4770      	bx	lr
 8006670:	40021000 	.word	0x40021000

08006674 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (u32)RESET)
 8006674:	4b03      	ldr	r3, [pc, #12]	(8006684 <RCC_GetITStatus+0x10>)
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	4218      	tst	r0, r3
 800667a:	bf0c      	ite	eq
 800667c:	2000      	moveq	r0, #0
 800667e:	2001      	movne	r0, #1
    bitstatus = RESET;
  }

  /* Return the RCC_IT status */
  return  bitstatus;
}
 8006680:	4770      	bx	lr
 8006682:	46c0      	nop			(mov r8, r8)
 8006684:	40021000 	.word	0x40021000

08006688 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(vu8 *) CIR_BYTE3_ADDRESS = RCC_IT;
 8006688:	4b01      	ldr	r3, [pc, #4]	(8006690 <RCC_ClearITPendingBit+0x8>)
 800668a:	7018      	strb	r0, [r3, #0]
}
 800668c:	4770      	bx	lr
 800668e:	46c0      	nop			(mov r8, r8)
 8006690:	4002100a 	.word	0x4002100a

08006694 <SysTick_CLKSourceConfig>:
void SysTick_CLKSourceConfig(u32 SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));

  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8006694:	2804      	cmp	r0, #4
 8006696:	d103      	bne.n	80066a0 <SysTick_CLKSourceConfig+0xc>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8006698:	4a04      	ldr	r2, [pc, #16]	(80066ac <SysTick_CLKSourceConfig+0x18>)
 800669a:	6813      	ldr	r3, [r2, #0]
 800669c:	4303      	orrs	r3, r0
 800669e:	e003      	b.n	80066a8 <SysTick_CLKSourceConfig+0x14>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80066a0:	4a02      	ldr	r2, [pc, #8]	(80066ac <SysTick_CLKSourceConfig+0x18>)
 80066a2:	6813      	ldr	r3, [r2, #0]
 80066a4:	f023 0304 	bic.w	r3, r3, #4	; 0x4
 80066a8:	6013      	str	r3, [r2, #0]
  }
}
 80066aa:	4770      	bx	lr
 80066ac:	e000e010 	.word	0xe000e010

080066b0 <SysTick_SetReload>:
void SysTick_SetReload(u32 Reload)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_RELOAD(Reload));

  SysTick->LOAD = Reload;
 80066b0:	4b01      	ldr	r3, [pc, #4]	(80066b8 <SysTick_SetReload+0x8>)
 80066b2:	6058      	str	r0, [r3, #4]
}
 80066b4:	4770      	bx	lr
 80066b6:	46c0      	nop			(mov r8, r8)
 80066b8:	e000e010 	.word	0xe000e010

080066bc <SysTick_CounterCmd>:
void SysTick_CounterCmd(u32 SysTick_Counter)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_COUNTER(SysTick_Counter));

  if (SysTick_Counter == SysTick_Counter_Enable)
 80066bc:	2801      	cmp	r0, #1
 80066be:	d103      	bne.n	80066c8 <SysTick_CounterCmd+0xc>
  {
    SysTick->CTRL |= SysTick_Counter_Enable;
 80066c0:	4a08      	ldr	r2, [pc, #32]	(80066e4 <SysTick_CounterCmd+0x28>)
 80066c2:	6813      	ldr	r3, [r2, #0]
 80066c4:	4303      	orrs	r3, r0
 80066c6:	e006      	b.n	80066d6 <SysTick_CounterCmd+0x1a>
  }
  else if (SysTick_Counter == SysTick_Counter_Disable) 
 80066c8:	f110 0f02 	cmn.w	r0, #2	; 0x2
 80066cc:	d105      	bne.n	80066da <SysTick_CounterCmd+0x1e>
  {
    SysTick->CTRL &= SysTick_Counter_Disable;
 80066ce:	4a05      	ldr	r2, [pc, #20]	(80066e4 <SysTick_CounterCmd+0x28>)
 80066d0:	6813      	ldr	r3, [r2, #0]
 80066d2:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 80066d6:	6013      	str	r3, [r2, #0]
 80066d8:	e002      	b.n	80066e0 <SysTick_CounterCmd+0x24>
  }
  else /* SysTick_Counter == SysTick_Counter_Clear */
  {
    SysTick->VAL = SysTick_Counter_Clear;
 80066da:	4b02      	ldr	r3, [pc, #8]	(80066e4 <SysTick_CounterCmd+0x28>)
 80066dc:	2200      	movs	r2, #0
 80066de:	609a      	str	r2, [r3, #8]
  }    
}
 80066e0:	4770      	bx	lr
 80066e2:	46c0      	nop			(mov r8, r8)
 80066e4:	e000e010 	.word	0xe000e010

080066e8 <SysTick_ITConfig>:
void SysTick_ITConfig(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80066e8:	b120      	cbz	r0, 80066f4 <SysTick_ITConfig+0xc>
  {
    SysTick->CTRL |= CTRL_TICKINT_Set;
 80066ea:	4a05      	ldr	r2, [pc, #20]	(8006700 <SysTick_ITConfig+0x18>)
 80066ec:	6813      	ldr	r3, [r2, #0]
 80066ee:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 80066f2:	e003      	b.n	80066fc <SysTick_ITConfig+0x14>
  }
  else
  {
    SysTick->CTRL &= CTRL_TICKINT_Reset;
 80066f4:	4a02      	ldr	r2, [pc, #8]	(8006700 <SysTick_ITConfig+0x18>)
 80066f6:	6813      	ldr	r3, [r2, #0]
 80066f8:	f023 0302 	bic.w	r3, r3, #2	; 0x2
 80066fc:	6013      	str	r3, [r2, #0]
  }
}
 80066fe:	4770      	bx	lr
 8006700:	e000e010 	.word	0xe000e010

08006704 <SysTick_GetCounter>:
* Output         : None
* Return         : SysTick current value
*******************************************************************************/
u32 SysTick_GetCounter(void)
{
  return(SysTick->VAL);
 8006704:	4b01      	ldr	r3, [pc, #4]	(800670c <SysTick_GetCounter+0x8>)
 8006706:	6898      	ldr	r0, [r3, #8]
}
 8006708:	4770      	bx	lr
 800670a:	46c0      	nop			(mov r8, r8)
 800670c:	e000e010 	.word	0xe000e010

08006710 <SysTick_GetFlagStatus>:
  assert_param(IS_SYSTICK_FLAG(SysTick_FLAG));

  /* Get the SysTick register index */
  tmp = SysTick_FLAG >> 3;

  if (tmp == 2) /* The flag to check is in CTRL register */
 8006710:	08c3      	lsrs	r3, r0, #3
 8006712:	2b02      	cmp	r3, #2
*                       - SysTick_FLAG_NOREF
* Output         : None
* Return         : None
*******************************************************************************/
FlagStatus SysTick_GetFlagStatus(u8 SysTick_FLAG)
{
 8006714:	4602      	mov	r2, r0
  assert_param(IS_SYSTICK_FLAG(SysTick_FLAG));

  /* Get the SysTick register index */
  tmp = SysTick_FLAG >> 3;

  if (tmp == 2) /* The flag to check is in CTRL register */
 8006716:	d106      	bne.n	8006726 <SysTick_GetFlagStatus+0x16>
  {
    statusreg = SysTick->CTRL;
 8006718:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800671c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8006720:	330e      	adds	r3, #14
 8006722:	6818      	ldr	r0, [r3, #0]
 8006724:	e001      	b.n	800672a <SysTick_GetFlagStatus+0x1a>
  }
  else          /* The flag to check is in CALIB register */
  {
    statusreg = SysTick->CALIB;
 8006726:	4b03      	ldr	r3, [pc, #12]	(8006734 <SysTick_GetFlagStatus+0x24>)
 8006728:	68d8      	ldr	r0, [r3, #12]
 800672a:	40d0      	lsrs	r0, r2
 800672c:	f000 0001 	and.w	r0, r0, #1	; 0x1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8006730:	4770      	bx	lr
 8006732:	46c0      	nop			(mov r8, r8)
 8006734:	e000e010 	.word	0xe000e010

08006738 <USART_StructInit>:
* Return         : None
*******************************************************************************/
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8006738:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800673c:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 800673e:	f04f 0300 	mov.w	r3, #0	; 0x0
 8006742:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8006744:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8006746:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8006748:	f04f 030c 	mov.w	r3, #12	; 0xc
 800674c:	8143      	strh	r3, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 800674e:	f04f 0300 	mov.w	r3, #0	; 0x0
 8006752:	8183      	strh	r3, [r0, #12]
}
 8006754:	4770      	bx	lr
 8006756:	46c0      	nop			(mov r8, r8)

08006758 <USART_ClockInit>:
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8006758:	f8b1 c000 	ldrh.w	ip, [r1]
 800675c:	884b      	ldrh	r3, [r1, #2]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800675e:	8a02      	ldrh	r2, [r0, #16]
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8006760:	ea43 030c 	orr.w	r3, r3, ip
 8006764:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 8006768:	88c9      	ldrh	r1, [r1, #6]
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 800676a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 800676e:	ea43 030c 	orr.w	r3, r3, ip
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 8006772:	0412      	lsls	r2, r2, #16
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8006774:	430b      	orrs	r3, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 8006776:	0c12      	lsrs	r2, r2, #16
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8006778:	b29b      	uxth	r3, r3
 800677a:	4313      	orrs	r3, r2
 800677c:	8203      	strh	r3, [r0, #16]
}
 800677e:	4770      	bx	lr

08006780 <USART_ClockStructInit>:
* Return         : None
*******************************************************************************/
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8006780:	f04f 0300 	mov.w	r3, #0	; 0x0
 8006784:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8006786:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8006788:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 800678a:	80c3      	strh	r3, [r0, #6]
}
 800678c:	4770      	bx	lr
 800678e:	46c0      	nop			(mov r8, r8)

08006790 <USART_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006790:	b121      	cbz	r1, 800679c <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8006792:	8983      	ldrh	r3, [r0, #12]
 8006794:	b29b      	uxth	r3, r3
 8006796:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800679a:	e004      	b.n	80067a6 <USART_Cmd+0x16>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 800679c:	8983      	ldrh	r3, [r0, #12]
 800679e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067a2:	041b      	lsls	r3, r3, #16
 80067a4:	0c1b      	lsrs	r3, r3, #16
 80067a6:	8183      	strh	r3, [r0, #12]
  }
}
 80067a8:	4770      	bx	lr
 80067aa:	46c0      	nop			(mov r8, r8)

080067ac <USART_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  usartxbase = (*(u32*)&(USARTx));

  /* Get the USART register index */
  usartreg = (((u8)USART_IT) >> 0x05);
 80067ac:	b2cb      	uxtb	r3, r1
 80067ae:	ea4f 1c53 	mov.w	ip, r3, lsr #5

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;

  itmask = (((u32)0x01) << itpos);
 80067b2:	f001 011f 	and.w	r1, r1, #31	; 0x1f
 80067b6:	2301      	movs	r3, #1
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ITConfig(USART_TypeDef* USARTx, u16 USART_IT, FunctionalState NewState)
{
 80067b8:	b082      	sub	sp, #8
  usartreg = (((u8)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;

  itmask = (((u32)0x01) << itpos);
 80067ba:	fa13 f101 	lsls.w	r1, r3, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80067be:	f1bc 0f01 	cmp.w	ip, #1	; 0x1
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ITConfig(USART_TypeDef* USARTx, u16 USART_IT, FunctionalState NewState)
{
 80067c2:	9001      	str	r0, [sp, #4]
  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;

  itmask = (((u32)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80067c4:	d101      	bne.n	80067ca <USART_ITConfig+0x1e>
  {
    usartxbase += 0x0C;
 80067c6:	300c      	adds	r0, #12
 80067c8:	e005      	b.n	80067d6 <USART_ITConfig+0x2a>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80067ca:	f1bc 0f02 	cmp.w	ip, #2	; 0x2
 80067ce:	d101      	bne.n	80067d4 <USART_ITConfig+0x28>
  {
    usartxbase += 0x10;
 80067d0:	3010      	adds	r0, #16
 80067d2:	e000      	b.n	80067d6 <USART_ITConfig+0x2a>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80067d4:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
 80067d6:	b112      	cbz	r2, 80067de <USART_ITConfig+0x32>
  {
    *(vu32*)usartxbase  |= itmask;
 80067d8:	6803      	ldr	r3, [r0, #0]
 80067da:	430b      	orrs	r3, r1
 80067dc:	e002      	b.n	80067e4 <USART_ITConfig+0x38>
  }
  else
  {
    *(vu32*)usartxbase &= ~itmask;
 80067de:	6803      	ldr	r3, [r0, #0]
 80067e0:	ea23 0301 	bic.w	r3, r3, r1
 80067e4:	6003      	str	r3, [r0, #0]
  }
}
 80067e6:	b002      	add	sp, #8
 80067e8:	4770      	bx	lr
 80067ea:	46c0      	nop			(mov r8, r8)

080067ec <USART_DMACmd>:
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80067ec:	b122      	cbz	r2, 80067f8 <USART_DMACmd+0xc>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80067ee:	8a83      	ldrh	r3, [r0, #20]
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	ea41 0303 	orr.w	r3, r1, r3
 80067f6:	e003      	b.n	8006800 <USART_DMACmd+0x14>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (u16)~USART_DMAReq;
 80067f8:	8a83      	ldrh	r3, [r0, #20]
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	ea23 0301 	bic.w	r3, r3, r1
 8006800:	8283      	strh	r3, [r0, #20]
  }
}
 8006802:	4770      	bx	lr

08006804 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
 8006804:	8a03      	ldrh	r3, [r0, #16]
 8006806:	f023 030f 	bic.w	r3, r3, #15	; 0xf
 800680a:	041b      	lsls	r3, r3, #16
 800680c:	0c1b      	lsrs	r3, r3, #16
 800680e:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8006810:	8a03      	ldrh	r3, [r0, #16]
 8006812:	b29b      	uxth	r3, r3
 8006814:	430b      	orrs	r3, r1
 8006816:	8203      	strh	r3, [r0, #16]
}
 8006818:	4770      	bx	lr
 800681a:	46c0      	nop			(mov r8, r8)

0800681c <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
 800681c:	8983      	ldrh	r3, [r0, #12]
 800681e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006822:	041b      	lsls	r3, r3, #16
 8006824:	0c1b      	lsrs	r3, r3, #16
 8006826:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8006828:	8983      	ldrh	r3, [r0, #12]
 800682a:	b29b      	uxth	r3, r3
 800682c:	4319      	orrs	r1, r3
 800682e:	8181      	strh	r1, [r0, #12]
}
 8006830:	4770      	bx	lr
 8006832:	46c0      	nop			(mov r8, r8)

08006834 <USART_ReceiverWakeUpCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8006834:	b121      	cbz	r1, 8006840 <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 8006836:	8983      	ldrh	r3, [r0, #12]
 8006838:	b29b      	uxth	r3, r3
 800683a:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 800683e:	e004      	b.n	800684a <USART_ReceiverWakeUpCmd+0x16>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
 8006840:	8983      	ldrh	r3, [r0, #12]
 8006842:	f023 0302 	bic.w	r3, r3, #2	; 0x2
 8006846:	041b      	lsls	r3, r3, #16
 8006848:	0c1b      	lsrs	r3, r3, #16
 800684a:	8183      	strh	r3, [r0, #12]
  }
}
 800684c:	4770      	bx	lr
 800684e:	46c0      	nop			(mov r8, r8)

08006850 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
 8006850:	8a03      	ldrh	r3, [r0, #16]
 8006852:	f023 0320 	bic.w	r3, r3, #32	; 0x20
 8006856:	041b      	lsls	r3, r3, #16
 8006858:	0c1b      	lsrs	r3, r3, #16
 800685a:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 800685c:	8a03      	ldrh	r3, [r0, #16]
 800685e:	b29b      	uxth	r3, r3
 8006860:	4319      	orrs	r1, r3
 8006862:	8201      	strh	r1, [r0, #16]
}
 8006864:	4770      	bx	lr
 8006866:	46c0      	nop			(mov r8, r8)

08006868 <USART_LINCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006868:	b121      	cbz	r1, 8006874 <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 800686a:	8a03      	ldrh	r3, [r0, #16]
 800686c:	b29b      	uxth	r3, r3
 800686e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006872:	e004      	b.n	800687e <USART_LINCmd+0x16>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
 8006874:	8a03      	ldrh	r3, [r0, #16]
 8006876:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800687a:	041b      	lsls	r3, r3, #16
 800687c:	0c1b      	lsrs	r3, r3, #16
 800687e:	8203      	strh	r3, [r0, #16]
  }
}
 8006880:	4770      	bx	lr
 8006882:	46c0      	nop			(mov r8, r8)

08006884 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (u16)0x01FF);
 8006884:	05c9      	lsls	r1, r1, #23
 8006886:	0dc9      	lsrs	r1, r1, #23
 8006888:	8081      	strh	r1, [r0, #4]
}
 800688a:	4770      	bx	lr

0800688c <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (u16)(USARTx->DR & (u16)0x01FF);
 800688c:	8880      	ldrh	r0, [r0, #4]
 800688e:	05c0      	lsls	r0, r0, #23
 8006890:	0dc0      	lsrs	r0, r0, #23
}
 8006892:	4770      	bx	lr

08006894 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
 8006894:	8983      	ldrh	r3, [r0, #12]
 8006896:	b29b      	uxth	r3, r3
 8006898:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 800689c:	8183      	strh	r3, [r0, #12]
}
 800689e:	4770      	bx	lr

080068a0 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
 80068a0:	8b03      	ldrh	r3, [r0, #24]
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (u16)((u16)USART_GuardTime << 0x08);
 80068a6:	8b03      	ldrh	r3, [r0, #24]
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80068ae:	8303      	strh	r3, [r0, #24]
}
 80068b0:	4770      	bx	lr
 80068b2:	46c0      	nop			(mov r8, r8)

080068b4 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
 80068b4:	8b03      	ldrh	r3, [r0, #24]
 80068b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80068ba:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 80068bc:	8b03      	ldrh	r3, [r0, #24]
 80068be:	b29b      	uxth	r3, r3
 80068c0:	430b      	orrs	r3, r1
 80068c2:	8303      	strh	r3, [r0, #24]
}
 80068c4:	4770      	bx	lr
 80068c6:	46c0      	nop			(mov r8, r8)

080068c8 <USART_SmartCardCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80068c8:	b121      	cbz	r1, 80068d4 <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 80068ca:	8a83      	ldrh	r3, [r0, #20]
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	f043 0320 	orr.w	r3, r3, #32	; 0x20
 80068d2:	e004      	b.n	80068de <USART_SmartCardCmd+0x16>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
 80068d4:	8a83      	ldrh	r3, [r0, #20]
 80068d6:	f023 0320 	bic.w	r3, r3, #32	; 0x20
 80068da:	041b      	lsls	r3, r3, #16
 80068dc:	0c1b      	lsrs	r3, r3, #16
 80068de:	8283      	strh	r3, [r0, #20]
  }
}
 80068e0:	4770      	bx	lr
 80068e2:	46c0      	nop			(mov r8, r8)

080068e4 <USART_SmartCardNACKCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80068e4:	b121      	cbz	r1, 80068f0 <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 80068e6:	8a83      	ldrh	r3, [r0, #20]
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 80068ee:	e004      	b.n	80068fa <USART_SmartCardNACKCmd+0x16>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
 80068f0:	8a83      	ldrh	r3, [r0, #20]
 80068f2:	f023 0310 	bic.w	r3, r3, #16	; 0x10
 80068f6:	041b      	lsls	r3, r3, #16
 80068f8:	0c1b      	lsrs	r3, r3, #16
 80068fa:	8283      	strh	r3, [r0, #20]
  }
}
 80068fc:	4770      	bx	lr
 80068fe:	46c0      	nop			(mov r8, r8)

08006900 <USART_HalfDuplexCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006900:	b121      	cbz	r1, 800690c <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 8006902:	8a83      	ldrh	r3, [r0, #20]
 8006904:	b29b      	uxth	r3, r3
 8006906:	f043 0308 	orr.w	r3, r3, #8	; 0x8
 800690a:	e004      	b.n	8006916 <USART_HalfDuplexCmd+0x16>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
 800690c:	8a83      	ldrh	r3, [r0, #20]
 800690e:	f023 0308 	bic.w	r3, r3, #8	; 0x8
 8006912:	041b      	lsls	r3, r3, #16
 8006914:	0c1b      	lsrs	r3, r3, #16
 8006916:	8283      	strh	r3, [r0, #20]
  }
}
 8006918:	4770      	bx	lr
 800691a:	46c0      	nop			(mov r8, r8)

0800691c <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
 800691c:	8a83      	ldrh	r3, [r0, #20]
 800691e:	f023 0304 	bic.w	r3, r3, #4	; 0x4
 8006922:	041b      	lsls	r3, r3, #16
 8006924:	0c1b      	lsrs	r3, r3, #16
 8006926:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8006928:	8a83      	ldrh	r3, [r0, #20]
 800692a:	b29b      	uxth	r3, r3
 800692c:	4319      	orrs	r1, r3
 800692e:	8281      	strh	r1, [r0, #20]
}
 8006930:	4770      	bx	lr
 8006932:	46c0      	nop			(mov r8, r8)

08006934 <USART_IrDACmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8006934:	b121      	cbz	r1, 8006940 <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 8006936:	8a83      	ldrh	r3, [r0, #20]
 8006938:	b29b      	uxth	r3, r3
 800693a:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 800693e:	e004      	b.n	800694a <USART_IrDACmd+0x16>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
 8006940:	8a83      	ldrh	r3, [r0, #20]
 8006942:	f023 0302 	bic.w	r3, r3, #2	; 0x2
 8006946:	041b      	lsls	r3, r3, #16
 8006948:	0c1b      	lsrs	r3, r3, #16
 800694a:	8283      	strh	r3, [r0, #20]
  }
}
 800694c:	4770      	bx	lr
 800694e:	46c0      	nop			(mov r8, r8)

08006950 <USART_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   

  if ((USARTx->SR & USART_FLAG) != (u16)RESET)
 8006950:	8803      	ldrh	r3, [r0, #0]
 8006952:	4219      	tst	r1, r3
 8006954:	bf0c      	ite	eq
 8006956:	2000      	moveq	r0, #0
 8006958:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800695a:	4770      	bx	lr

0800695c <USART_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
  assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   
   
  USARTx->SR = (u16)~USART_FLAG;
 800695c:	ea6f 0101 	mvn.w	r1, r1
 8006960:	b289      	uxth	r1, r1
 8006962:	8001      	strh	r1, [r0, #0]
}
 8006964:	4770      	bx	lr
 8006966:	46c0      	nop			(mov r8, r8)

08006968 <USART_GetITStatus>:
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT));
  assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */  
  
  /* Get the USART register index */
  usartreg = (((u8)USART_IT) >> 0x05);
 8006968:	b2cb      	uxtb	r3, r1
 800696a:	ea4f 1c53 	mov.w	ip, r3, lsr #5

  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;

  itmask = (u32)0x01 << itmask;
 800696e:	f001 021f 	and.w	r2, r1, #31	; 0x1f
 8006972:	2301      	movs	r3, #1
 8006974:	fa13 f202 	lsls.w	r2, r3, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8006978:	f1bc 0f01 	cmp.w	ip, #1	; 0x1
  {
    itmask &= USARTx->CR1;
 800697c:	bf08      	it	eq
 800697e:	8983      	ldrheq	r3, [r0, #12]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;

  itmask = (u32)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8006980:	d004      	beq.n	800698c <USART_GetITStatus+0x24>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8006982:	f1bc 0f02 	cmp.w	ip, #2	; 0x2
  {
    itmask &= USARTx->CR2;
 8006986:	bf0c      	ite	eq
 8006988:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800698a:	8a83      	ldrhne	r3, [r0, #20]
 800698c:	b29b      	uxth	r3, r3
 800698e:	ea02 0c03 	and.w	ip, r2, r3
  }
  
  bitpos = USART_IT >> 0x08;

  bitpos = (u32)0x01 << bitpos;
 8006992:	0a0b      	lsrs	r3, r1, #8
 8006994:	2201      	movs	r2, #1
 8006996:	409a      	lsls	r2, r3
  bitpos &= USARTx->SR;
 8006998:	8803      	ldrh	r3, [r0, #0]
 800699a:	b29b      	uxth	r3, r3

  if ((itmask != (u16)RESET)&&(bitpos != (u16)RESET))
 800699c:	421a      	tst	r2, r3
 800699e:	bf0c      	ite	eq
 80069a0:	2000      	moveq	r0, #0
 80069a2:	2001      	movne	r0, #1
 80069a4:	f1bc 0f00 	cmp.w	ip, #0	; 0x0
 80069a8:	bf0c      	ite	eq
 80069aa:	2000      	moveq	r0, #0
 80069ac:	f000 0001 	andne.w	r0, r0, #1	; 0x1
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 80069b0:	4770      	bx	lr
 80069b2:	46c0      	nop			(mov r8, r8)

080069b4 <USART_ClearITPendingBit>:
  assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */
  
  bitpos = USART_IT >> 0x08;

  itmask = (u16)((u16)0x01 << bitpos);
  USARTx->SR = (u16)~itmask;
 80069b4:	0a09      	lsrs	r1, r1, #8
 80069b6:	2301      	movs	r3, #1
 80069b8:	408b      	lsls	r3, r1
 80069ba:	ea6f 0303 	mvn.w	r3, r3
 80069be:	b29b      	uxth	r3, r3
 80069c0:	8003      	strh	r3, [r0, #0]
}
 80069c2:	4770      	bx	lr

080069c4 <USART_Init>:
  assert_param(IS_USART_PERIPH_HFC(USARTx, USART_InitStruct->USART_HardwareFlowControl));
  
  usartxbase = (*(u32*)&USARTx);

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80069c4:	8a03      	ldrh	r3, [r0, #16]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (u32)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 80069c6:	88ca      	ldrh	r2, [r1, #6]
  usartxbase = (*(u32*)&USARTx);

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 80069c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80069cc:	041b      	lsls	r3, r3, #16
 80069ce:	0c1b      	lsrs	r3, r3, #16
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (u32)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 80069d0:	4313      	orrs	r3, r2
 80069d2:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80069d4:	8982      	ldrh	r2, [r0, #12]
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80069d6:	b570      	push	{r4, r5, r6, lr}
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 80069d8:	890b      	ldrh	r3, [r1, #8]
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80069da:	460e      	mov	r6, r1
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 80069dc:	8889      	ldrh	r1, [r1, #4]
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 80069de:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 80069e2:	430b      	orrs	r3, r1
 80069e4:	8971      	ldrh	r1, [r6, #10]
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 80069e6:	f022 020c 	bic.w	r2, r2, #12	; 0xc
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 80069ea:	430b      	orrs	r3, r1
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 80069ec:	0412      	lsls	r2, r2, #16
 80069ee:	0c12      	lsrs	r2, r2, #16
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	4313      	orrs	r3, r2
 80069f4:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80069f6:	8a83      	ldrh	r3, [r0, #20]
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (u16)tmpreg;
 80069f8:	89b2      	ldrh	r2, [r6, #12]
  USARTx->CR1 = (u16)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 80069fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069fe:	041b      	lsls	r3, r3, #16
 8006a00:	0c1b      	lsrs	r3, r3, #16
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8006a02:	b088      	sub	sp, #32
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (u16)tmpreg;
 8006a04:	4313      	orrs	r3, r2
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8006a06:	4605      	mov	r5, r0
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (u16)tmpreg;
 8006a08:	8283      	strh	r3, [r0, #20]
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8006a0a:	9001      	str	r0, [sp, #4]
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  /* The hardware flow control is available only for USART1, USART2 and USART3 */          
  assert_param(IS_USART_PERIPH_HFC(USARTx, USART_InitStruct->USART_HardwareFlowControl));
  
  usartxbase = (*(u32*)&USARTx);
 8006a0c:	4604      	mov	r4, r0
  /* Write to USART CR3 */
  USARTx->CR3 = (u16)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8006a0e:	a803      	add	r0, sp, #12
 8006a10:	f7ff fd52 	bl	80064b8 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8006a14:	4b10      	ldr	r3, [pc, #64]	(8006a58 <USART_Init+0x94>)
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }

  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
  tmpreg = (integerdivider / 0x64) << 0x04;
 8006a16:	4811      	ldr	r0, [pc, #68]	(8006a5c <USART_Init+0x98>)
  USARTx->CR3 = (u16)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  if (usartxbase == USART1_BASE)
 8006a18:	429d      	cmp	r5, r3
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8006a1a:	bf0c      	ite	eq
 8006a1c:	9b06      	ldreq	r3, [sp, #24]
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8006a1e:	9b05      	ldrne	r3, [sp, #20]
  }

  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
 8006a20:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006a24:	6833      	ldr	r3, [r6, #0]
 8006a26:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	fbb1 f1f3 	udiv	r1, r1, r3
  tmpreg = (integerdivider / 0x64) << 0x04;
 8006a30:	fba1 2300 	umull	r2, r3, r1, r0

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((u8)0x0F);
 8006a34:	2264      	movs	r2, #100
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }

  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
  tmpreg = (integerdivider / 0x64) << 0x04;
 8006a36:	ea4f 1c53 	mov.w	ip, r3, lsr #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((u8)0x0F);
 8006a3a:	fb0c 1212 	mls	r2, ip, r2, r1
 8006a3e:	0112      	lsls	r2, r2, #4
 8006a40:	3232      	adds	r2, #50
 8006a42:	fba2 2300 	umull	r2, r3, r2, r0
 8006a46:	095b      	lsrs	r3, r3, #5
 8006a48:	f003 030f 	and.w	r3, r3, #15	; 0xf

  /* Write to USART BRR */
  USARTx->BRR = (u16)tmpreg;
 8006a4c:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	812b      	strh	r3, [r5, #8]
}
 8006a54:	b008      	add	sp, #32
 8006a56:	bd70      	pop	{r4, r5, r6, pc}
 8006a58:	40013800 	.word	0x40013800
 8006a5c:	51eb851f 	.word	0x51eb851f

08006a60 <USART_DeInit>:
*                     - USART1, USART2, USART3, UART4 or UART5.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_DeInit(USART_TypeDef* USARTx)
{
 8006a60:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  switch (*(u32*)&USARTx)
 8006a62:	4b22      	ldr	r3, [pc, #136]	(8006aec <USART_DeInit+0x8c>)
*                     - USART1, USART2, USART3, UART4 or UART5.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_DeInit(USART_TypeDef* USARTx)
{
 8006a64:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  switch (*(u32*)&USARTx)
 8006a66:	4298      	cmp	r0, r3
*                     - USART1, USART2, USART3, UART4 or UART5.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_DeInit(USART_TypeDef* USARTx)
{
 8006a68:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  switch (*(u32*)&USARTx)
 8006a6a:	d02b      	beq.n	8006ac4 <USART_DeInit+0x64>
 8006a6c:	d808      	bhi.n	8006a80 <USART_DeInit+0x20>
 8006a6e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8006a72:	4298      	cmp	r0, r3
 8006a74:	d016      	beq.n	8006aa4 <USART_DeInit+0x44>
 8006a76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a7a:	4298      	cmp	r0, r3
 8006a7c:	d134      	bne.n	8006ae8 <USART_DeInit+0x88>
 8006a7e:	e019      	b.n	8006ab4 <USART_DeInit+0x54>
 8006a80:	4b1b      	ldr	r3, [pc, #108]	(8006af0 <USART_DeInit+0x90>)
 8006a82:	4298      	cmp	r0, r3
 8006a84:	d026      	beq.n	8006ad4 <USART_DeInit+0x74>
 8006a86:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8006a8a:	4298      	cmp	r0, r3
 8006a8c:	d12c      	bne.n	8006ae8 <USART_DeInit+0x88>
  {
    case USART1_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8006a8e:	2101      	movs	r1, #1
 8006a90:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006a94:	f7ff fd96 	bl	80065c4 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8006a98:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	f7ff fd91 	bl	80065c4 <RCC_APB2PeriphResetCmd>
 8006aa2:	e021      	b.n	8006ae8 <USART_DeInit+0x88>
      break;

    case USART2_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8006aa4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	f7ff fd99 	bl	80065e0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8006aae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006ab2:	e016      	b.n	8006ae2 <USART_DeInit+0x82>
      break;

    case USART3_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8006ab4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8006ab8:	2101      	movs	r1, #1
 8006aba:	f7ff fd91 	bl	80065e0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8006abe:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8006ac2:	e00e      	b.n	8006ae2 <USART_DeInit+0x82>
      break;
    
    case UART4_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8006ac4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006ac8:	2101      	movs	r1, #1
 8006aca:	f7ff fd89 	bl	80065e0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8006ace:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006ad2:	e006      	b.n	8006ae2 <USART_DeInit+0x82>
      break;
    
    case UART5_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8006ad4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006ad8:	2101      	movs	r1, #1
 8006ada:	f7ff fd81 	bl	80065e0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8006ade:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	f7ff fd7c 	bl	80065e0 <RCC_APB1PeriphResetCmd>
      break;            

    default:
      break;
  }
}
 8006ae8:	b003      	add	sp, #12
 8006aea:	bd00      	pop	{pc}
 8006aec:	40004c00 	.word	0x40004c00
 8006af0:	40005000 	.word	0x40005000

08006af4 <__WFI>:
; Return         : None
;******************************************************************************/
.thumb_func
__WFI: 
 
    WFI
 8006af4:	bf30      	wfi
    BX r14
 8006af6:	4770      	bx	lr

08006af8 <__WFE>:
; Return         : None
;******************************************************************************/
.thumb_func
__WFE:

    WFE
 8006af8:	bf20      	wfe
    BX r14
 8006afa:	4770      	bx	lr

08006afc <__SEV>:
; Return         : None
;******************************************************************************/
.thumb_func
__SEV:

    SEV
 8006afc:	bf40      	sev
    BX r14
 8006afe:	4770      	bx	lr

08006b00 <__ISB>:
; Return         : None
;******************************************************************************/
.thumb_func
__ISB:

    ISB
 8006b00:	f3bf 8f6f 	isb	sy
    BX r14
 8006b04:	4770      	bx	lr

08006b06 <__DSB>:
; Return         : None
;******************************************************************************/
.thumb_func
__DSB:

    DSB
 8006b06:	f3bf 8f4f 	dsb	sy
    BX r14
 8006b0a:	4770      	bx	lr

08006b0c <__DMB>:
; Return         : None
;******************************************************************************/
.thumb_func
__DMB:

    DMB
 8006b0c:	f3bf 8f5f 	dmb	sy
    BX r14
 8006b10:	4770      	bx	lr

08006b12 <__SVC>:
; Return         : None
;******************************************************************************/
.thumb_func
__SVC:

    SVC 0x01
 8006b12:	df01      	svc	1
    BX r14
 8006b14:	4770      	bx	lr

08006b16 <__MRS_CONTROL>:
; Return         : - r4 : Cortex-M3 CONTROL register value.
;******************************************************************************/
.thumb_func
__MRS_CONTROL:

  MRS  r0,control
 8006b16:	f3ef 8014 	mrs	r0, CONTROL
  BX r14
 8006b1a:	4770      	bx	lr

08006b1c <__MSR_CONTROL>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_CONTROL:

  MSR control, r0
 8006b1c:	f380 8814 	msr	CONTROL, r0
  ISB
 8006b20:	f3bf 8f6f 	isb	sy
  BX r14
 8006b24:	4770      	bx	lr

08006b26 <__MRS_PSP>:
; Return         : - r0 : Process Stack value.
;******************************************************************************/
.thumb_func
__MRS_PSP:

  MRS r0, psp
 8006b26:	f3ef 8009 	mrs	r0, PSP
  BX r14
 8006b2a:	4770      	bx	lr

08006b2c <__MSR_PSP>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_PSP:
 
    MSR psp,  r0      /* set Process Stack value*/
 8006b2c:	f380 8809 	msr	PSP, r0
    BX r14
 8006b30:	4770      	bx	lr

08006b32 <__MRS_MSP>:
; Return         : - r0 : Main Stack value.
;******************************************************************************/
.thumb_func
__MRS_MSP:

  MRS r0, msp
 8006b32:	f3ef 8008 	mrs	r0, MSP
  BX r14
 8006b36:	4770      	bx	lr

08006b38 <__MSR_MSP>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_MSP: 
 
    MSR msp, r0  /*; set Main Stack value*/
 8006b38:	f380 8808 	msr	MSP, r0
    BX r14
 8006b3c:	4770      	bx	lr

08006b3e <__SETPRIMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__SETPRIMASK:

  CPSID i
 8006b3e:	b672      	cpsid	i
  BX r14
 8006b40:	4770      	bx	lr

08006b42 <__RESETPRIMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__RESETPRIMASK:

  CPSIE i
 8006b42:	b662      	cpsie	i
  BX r14
 8006b44:	4770      	bx	lr

08006b46 <__SETFAULTMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__SETFAULTMASK:

  CPSID f
 8006b46:	b671      	cpsid	f
  BX r14
 8006b48:	4770      	bx	lr

08006b4a <__RESETFAULTMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__RESETFAULTMASK:

  CPSIE f
 8006b4a:	b661      	cpsie	f
  BX r14
 8006b4c:	4770      	bx	lr

08006b4e <__BASEPRICONFIG>:
; Return         : None
;******************************************************************************/
.thumb_func
__BASEPRICONFIG:

  MSR basepri, r0
 8006b4e:	f380 8811 	msr	BASEPRI, r0
  BX r14
 8006b52:	4770      	bx	lr

08006b54 <__GetBASEPRI>:
; Return         : - r0 : Base Priority value 
;******************************************************************************/
.thumb_func
__GetBASEPRI:

  MRS r0, basepri_max
 8006b54:	f3ef 8012 	mrs	r0, BASEPRI_MASK
  BX r14
 8006b58:	4770      	bx	lr

08006b5a <__REV_HalfWord>:
; Return         : - r0 : holds tve variable value after byte reversing.
;******************************************************************************/
.thumb_func
__REV_HalfWord: 
 
  REV16 r0, r0
 8006b5a:	ba40      	rev16	r0, r0
  BX r14
 8006b5c:	4770      	bx	lr

08006b5e <__REV_Word>:
; Return         : - r0 : holds tve variable value after byte reversing.
;******************************************************************************/
.thumb_func
__REV_Word: 
 
  REV r0, r0
 8006b5e:	ba00      	rev	r0, r0
  BX r14
 8006b60:	4770      	bx	lr
	...

08006b64 <Reset_Handler>:
* Input          :
* Output         :
* Return         :
*******************************************************************************/
void Reset_Handler(void)
{
 8006b64:	f02d 0107 	bic.w	r1, sp, #7	; 0x7
 8006b68:	4668      	mov	r0, sp
 8006b6a:	468d      	mov	sp, r1
 8006b6c:	b501      	push	{r0, lr}
 8006b6e:	2200      	movs	r2, #0

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_sidata;
    for(pulDest = &_sdata; pulDest < &_edata; )
 8006b70:	490c      	ldr	r1, [pc, #48]	(8006ba4 <Reset_Handler+0x40>)
 8006b72:	f8df c034 	ldr.w	ip, [pc, #52]	; 8006ba8 <Reset_Handler+0x44>
    {
        *(pulDest++) = *(pulSrc++);
 8006b76:	480d      	ldr	r0, [pc, #52]	(8006bac <Reset_Handler+0x48>)
 8006b78:	e002      	b.n	8006b80 <Reset_Handler+0x1c>
 8006b7a:	5883      	ldr	r3, [r0, r2]
 8006b7c:	508b      	str	r3, [r1, r2]
 8006b7e:	3204      	adds	r2, #4

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_sidata;
    for(pulDest = &_sdata; pulDest < &_edata; )
 8006b80:	eb01 0302 	add.w	r3, r1, r2
 8006b84:	4563      	cmp	r3, ip
 8006b86:	d3f8      	bcc.n	8006b7a <Reset_Handler+0x16>
 8006b88:	4b09      	ldr	r3, [pc, #36]	(8006bb0 <Reset_Handler+0x4c>)
    }

    //
    // Zero fill the bss segment.
    //
    for(pulDest = &_sbss; pulDest < &_ebss; )
 8006b8a:	490a      	ldr	r1, [pc, #40]	(8006bb4 <Reset_Handler+0x50>)
    {
        *(pulDest++) = 0;
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	e001      	b.n	8006b94 <Reset_Handler+0x30>
 8006b90:	f843 2b04 	str.w	r2, [r3], #4
    }

    //
    // Zero fill the bss segment.
    //
    for(pulDest = &_sbss; pulDest < &_ebss; )
 8006b94:	428b      	cmp	r3, r1
 8006b96:	d3fb      	bcc.n	8006b90 <Reset_Handler+0x2c>
    }

    //
    // Call the application's entry point.
    //
    main();
 8006b98:	f7fc facc 	bl	8003134 <main>
}
 8006b9c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 8006ba0:	4685      	mov	sp, r0
 8006ba2:	4770      	bx	lr
 8006ba4:	20000000 	.word	0x20000000
 8006ba8:	200000d8 	.word	0x200000d8
 8006bac:	08007044 	.word	0x08007044
 8006bb0:	200000d8 	.word	0x200000d8
 8006bb4:	20000e5c 	.word	0x20000e5c

08006bb8 <APBAHBPrescTable>:
 8006bb8:	00000000 	.word	0x00000000
 8006bbc:	04030201 	.word	0x04030201
 8006bc0:	04030201 	.word	0x04030201
 8006bc4:	09080706 	.word	0x09080706

08006bc8 <ADCPrescTable>:
 8006bc8:	08060402 	.word	0x08060402
 8006bcc:	72617453 	.word	0x72617453
 8006bd0:	676e6974 	.word	0x676e6974
 8006bd4:	6f725020 	.word	0x6f725020
 8006bd8:	6d617267 	.word	0x6d617267
 8006bdc:	20796220 	.word	0x20796220
 8006be0:	6e727574 	.word	0x6e727574
 8006be4:	20676e69 	.word	0x20676e69
 8006be8:	50206e6f 	.word	0x50206e6f
 8006bec:	5245574f 	.word	0x5245574f
 8006bf0:	44454c20 	.word	0x44454c20
 8006bf4:	000a0d21 	.word	0x000a0d21
 8006bf8:	74746142 	.word	0x74746142
 8006bfc:	20797265 	.word	0x20797265
 8006c00:	746c6f56 	.word	0x746c6f56
 8006c04:	3a656761 	.word	0x3a656761
 8006c08:	2d650020 	.word	0x2d650020
 8006c0c:	565b2031 	.word	0x565b2031
 8006c10:	73746c6f 	.word	0x73746c6f
 8006c14:	50000a5d 	.word	0x50000a5d
 8006c18:	003a5543 	.word	0x003a5543
 8006c1c:	73706228 	.word	0x73706228
 8006c20:	5a000a29 	.word	0x5a000a29
 8006c24:	003a4749 	.word	0x003a4749
 8006c28:	3a4c5844 	.word	0x3a4c5844
 8006c2c:	202a2000 	.word	0x202a2000
 8006c30:	54202a09 	.word	0x54202a09
 8006c34:	206e7275 	.word	0x206e7275
 8006c38:	4c206e6f 	.word	0x4c206e6f
 8006c3c:	21734445 	.word	0x21734445
 8006c40:	20000a0d 	.word	0x20000a0d
 8006c44:	2a09202a 	.word	0x2a09202a
 8006c48:	72755420 	.word	0x72755420
 8006c4c:	666f206e 	.word	0x666f206e
 8006c50:	454c2066 	.word	0x454c2066
 8006c54:	0d217344 	.word	0x0d217344
 8006c58:	007b000a 	.word	0x007b000a
 8006c5c:	00202a2c 	.word	0x00202a2c
 8006c60:	00202c2a 	.word	0x00202c2a
 8006c64:	58412820 	.word	0x58412820
 8006c68:	2932312d 	.word	0x2932312d
 8006c6c:	41282000 	.word	0x41282000
 8006c70:	38312d58 	.word	0x38312d58
 8006c74:	28200029 	.word	0x28200029
 8006c78:	532d5841 	.word	0x532d5841
 8006c7c:	20002931 	.word	0x20002931
 8006c80:	2d584128 	.word	0x2d584128
 8006c84:	29303253 	.word	0x29303253
 8006c88:	4a282000 	.word	0x4a282000
 8006c8c:	50462d48 	.word	0x50462d48
 8006c90:	20002953 	.word	0x20002953
 8006c94:	2d584d28 	.word	0x2d584d28
 8006c98:	00293832 	.word	0x00293832
 8006c9c:	000a207d 	.word	0x000a207d
 8006ca0:	4c58440a 	.word	0x4c58440a
 8006ca4:	56454420 	.word	0x56454420
 8006ca8:	53454349 	.word	0x53454349
 8006cac:	7e0a003a 	.word	0x7e0a003a
 8006cb0:	7e7e7e7e 	.word	0x7e7e7e7e
 8006cb4:	7e7e7e7e 	.word	0x7e7e7e7e
 8006cb8:	7e7e7e7e 	.word	0x7e7e7e7e
 8006cbc:	7e7e7e7e 	.word	0x7e7e7e7e
 8006cc0:	7e7e7e7e 	.word	0x7e7e7e7e
 8006cc4:	7e7e7e7e 	.word	0x7e7e7e7e
 8006cc8:	7e7e7e7e 	.word	0x7e7e7e7e
 8006ccc:	7e7e7e7e 	.word	0x7e7e7e7e
 8006cd0:	7e7e7e7e 	.word	0x7e7e7e7e
 8006cd4:	0a7e7e7e 	.word	0x0a7e7e7e
 8006cd8:	6c500a00 	.word	0x6c500a00
 8006cdc:	6e697961 	.word	0x6e697961
 8006ce0:	6f532067 	.word	0x6f532067
 8006ce4:	6d20656d 	.word	0x6d20656d
 8006ce8:	63697375 	.word	0x63697375
 8006cec:	280a000a 	.word	0x280a000a
 8006cf0:	4c5f5249 	.word	0x4c5f5249
 8006cf4:	5249202c 	.word	0x5249202c
 8006cf8:	202c525f 	.word	0x202c525f
 8006cfc:	29534d44 	.word	0x29534d44
 8006d00:	0028093a 	.word	0x0028093a
 8006d04:	2050550a 	.word	0x2050550a
 8006d08:	55205055 	.word	0x55205055
 8006d0c:	73692050 	.word	0x73692050
 8006d10:	65727020 	.word	0x65727020
 8006d14:	64657373 	.word	0x64657373
 8006d18:	0a000a21 	.word	0x0a000a21
 8006d1c:	4e574f44 	.word	0x4e574f44
 8006d20:	574f4420 	.word	0x574f4420
 8006d24:	4f44204e 	.word	0x4f44204e
 8006d28:	69204e57 	.word	0x69204e57
 8006d2c:	72702073 	.word	0x72702073
 8006d30:	65737365 	.word	0x65737365
 8006d34:	000a2164 	.word	0x000a2164
 8006d38:	46454c0a 	.word	0x46454c0a
 8006d3c:	454c2054 	.word	0x454c2054
 8006d40:	4c205446 	.word	0x4c205446
 8006d44:	20544645 	.word	0x20544645
 8006d48:	70207369 	.word	0x70207369
 8006d4c:	73736572 	.word	0x73736572
 8006d50:	0a216465 	.word	0x0a216465
 8006d54:	49520a00 	.word	0x49520a00
 8006d58:	20544847 	.word	0x20544847
 8006d5c:	48474952 	.word	0x48474952
 8006d60:	49522054 	.word	0x49522054
 8006d64:	20544847 	.word	0x20544847
 8006d68:	70207369 	.word	0x70207369
 8006d6c:	73736572 	.word	0x73736572
 8006d70:	0a216465 	.word	0x0a216465
 8006d74:	54530a00 	.word	0x54530a00
 8006d78:	20545241 	.word	0x20545241
 8006d7c:	52415453 	.word	0x52415453
 8006d80:	54532054 	.word	0x54532054
 8006d84:	20545241 	.word	0x20545241
 8006d88:	70207369 	.word	0x70207369
 8006d8c:	73736572 	.word	0x73736572
 8006d90:	0a216465 	.word	0x0a216465
 8006d94:	494d0a00 	.word	0x494d0a00
 8006d98:	494d2043 	.word	0x494d2043
 8006d9c:	494d2043 	.word	0x494d2043
 8006da0:	494d2043 	.word	0x494d2043
 8006da4:	494d2043 	.word	0x494d2043
 8006da8:	494d2043 	.word	0x494d2043
 8006dac:	2043494d 	.word	0x2043494d
 8006db0:	2043494d 	.word	0x2043494d
 8006db4:	494d494d 	.word	0x494d494d
 8006db8:	494d2043 	.word	0x494d2043
 8006dbc:	494d2043 	.word	0x494d2043
 8006dc0:	2043494d 	.word	0x2043494d
 8006dc4:	2043494d 	.word	0x2043494d
 8006dc8:	494d494d 	.word	0x494d494d
 8006dcc:	494d2043 	.word	0x494d2043
 8006dd0:	494d2043 	.word	0x494d2043
 8006dd4:	2043494d 	.word	0x2043494d
 8006dd8:	2043494d 	.word	0x2043494d
 8006ddc:	494d494d 	.word	0x494d494d
 8006de0:	494d2043 	.word	0x494d2043
 8006de4:	494d2043 	.word	0x494d2043
 8006de8:	2043494d 	.word	0x2043494d
 8006dec:	2043494d 	.word	0x2043494d
 8006df0:	494d494d 	.word	0x494d494d
 8006df4:	494d2043 	.word	0x494d2043
 8006df8:	494d2043 	.word	0x494d2043
 8006dfc:	2043494d 	.word	0x2043494d
 8006e00:	2043494d 	.word	0x2043494d
 8006e04:	7369494d 	.word	0x7369494d
 8006e08:	65727020 	.word	0x65727020
 8006e0c:	64657373 	.word	0x64657373
 8006e10:	0a000a21 	.word	0x0a000a21
 8006e14:	74696157 	.word	0x74696157
 8006e18:	726f6620 	.word	0x726f6620
 8006e1c:	6d6f6320 	.word	0x6d6f6320
 8006e20:	646e616d 	.word	0x646e616d
 8006e24:	440a000a 	.word	0x440a000a
 8006e28:	545f4c58 	.word	0x545f4c58
 8006e2c:	49414658 	.word	0x49414658
 8006e30:	46203a4c 	.word	0x46203a4c
 8006e34:	656c6961 	.word	0x656c6961
 8006e38:	72742064 	.word	0x72742064
 8006e3c:	6d736e61 	.word	0x6d736e61
 8006e40:	69207469 	.word	0x69207469
 8006e44:	7274736e 	.word	0x7274736e
 8006e48:	69746375 	.word	0x69746375
 8006e4c:	70206e6f 	.word	0x70206e6f
 8006e50:	656b6361 	.word	0x656b6361
 8006e54:	000a2174 	.word	0x000a2174
 8006e58:	4c58440a 	.word	0x4c58440a
 8006e5c:	4658525f 	.word	0x4658525f
 8006e60:	3a4c4941 	.word	0x3a4c4941
 8006e64:	69614620 	.word	0x69614620
 8006e68:	2064656c 	.word	0x2064656c
 8006e6c:	20746567 	.word	0x20746567
 8006e70:	74617473 	.word	0x74617473
 8006e74:	70207375 	.word	0x70207375
 8006e78:	656b6361 	.word	0x656b6361
 8006e7c:	72662074 	.word	0x72662074
 8006e80:	64206d6f 	.word	0x64206d6f
 8006e84:	63697665 	.word	0x63697665
 8006e88:	000a2165 	.word	0x000a2165
 8006e8c:	4c58440a 	.word	0x4c58440a
 8006e90:	4558545f 	.word	0x4558545f
 8006e94:	524f5252 	.word	0x524f5252
 8006e98:	6e49203a 	.word	0x6e49203a
 8006e9c:	72726f63 	.word	0x72726f63
 8006ea0:	20746365 	.word	0x20746365
 8006ea4:	74736e69 	.word	0x74736e69
 8006ea8:	74637572 	.word	0x74637572
 8006eac:	206e6f69 	.word	0x206e6f69
 8006eb0:	6b636170 	.word	0x6b636170
 8006eb4:	0a217465 	.word	0x0a217465
 8006eb8:	58440a00 	.word	0x58440a00
 8006ebc:	41425f4c 	.word	0x41425f4c
 8006ec0:	4e495f44 	.word	0x4e495f44
 8006ec4:	203a5453 	.word	0x203a5453
 8006ec8:	61766e49 	.word	0x61766e49
 8006ecc:	2064696c 	.word	0x2064696c
 8006ed0:	74736e49 	.word	0x74736e49
 8006ed4:	74637572 	.word	0x74637572
 8006ed8:	206e6f69 	.word	0x206e6f69
 8006edc:	65747962 	.word	0x65747962
 8006ee0:	440a000a 	.word	0x440a000a
 8006ee4:	425f4c58 	.word	0x425f4c58
 8006ee8:	495f4441 	.word	0x495f4441
 8006eec:	49203a44 	.word	0x49203a44
 8006ef0:	20732744 	.word	0x20732744
 8006ef4:	20746f6e 	.word	0x20746f6e
 8006ef8:	656d6173 	.word	0x656d6173
 8006efc:	726f6620 	.word	0x726f6620
 8006f00:	736e6920 	.word	0x736e6920
 8006f04:	63757274 	.word	0x63757274
 8006f08:	6e6f6974 	.word	0x6e6f6974
 8006f0c:	646e6120 	.word	0x646e6120
 8006f10:	61747320 	.word	0x61747320
 8006f14:	20737574 	.word	0x20737574
 8006f18:	6b636170 	.word	0x6b636170
 8006f1c:	0a737465 	.word	0x0a737465
 8006f20:	58440a00 	.word	0x58440a00
 8006f24:	58525f4c 	.word	0x58525f4c
 8006f28:	54494157 	.word	0x54494157
 8006f2c:	3a474e49 	.word	0x3a474e49
 8006f30:	776f4e20 	.word	0x776f4e20
 8006f34:	63657220 	.word	0x63657220
 8006f38:	69766965 	.word	0x69766965
 8006f3c:	7320676e 	.word	0x7320676e
 8006f40:	75746174 	.word	0x75746174
 8006f44:	61702073 	.word	0x61702073
 8006f48:	74656b63 	.word	0x74656b63
 8006f4c:	0a000a21 	.word	0x0a000a21
 8006f50:	5f4c5844 	.word	0x5f4c5844
 8006f54:	49545852 	.word	0x49545852
 8006f58:	554f454d 	.word	0x554f454d
 8006f5c:	54203a54 	.word	0x54203a54
 8006f60:	65726568 	.word	0x65726568
 8006f64:	20736920 	.word	0x20736920
 8006f68:	73206f6e 	.word	0x73206f6e
 8006f6c:	75746174 	.word	0x75746174
 8006f70:	61702073 	.word	0x61702073
 8006f74:	74656b63 	.word	0x74656b63
 8006f78:	0a000a21 	.word	0x0a000a21
 8006f7c:	5f4c5844 	.word	0x5f4c5844
 8006f80:	48435852 	.word	0x48435852
 8006f84:	534b4345 	.word	0x534b4345
 8006f88:	203a4d55 	.word	0x203a4d55
 8006f8c:	6f636e49 	.word	0x6f636e49
 8006f90:	63657272 	.word	0x63657272
 8006f94:	74732074 	.word	0x74732074
 8006f98:	73757461 	.word	0x73757461
 8006f9c:	63617020 	.word	0x63617020
 8006fa0:	2074656b 	.word	0x2074656b
 8006fa4:	63656863 	.word	0x63656863
 8006fa8:	6d75736b 	.word	0x6d75736b
 8006fac:	0a000a21 	.word	0x0a000a21
 8006fb0:	75706e49 	.word	0x75706e49
 8006fb4:	6f762074 	.word	0x6f762074
 8006fb8:	6761746c 	.word	0x6761746c
 8006fbc:	72652065 	.word	0x72652065
 8006fc0:	21726f72 	.word	0x21726f72
 8006fc4:	410a000a 	.word	0x410a000a
 8006fc8:	656c676e 	.word	0x656c676e
 8006fcc:	6d696c20 	.word	0x6d696c20
 8006fd0:	65207469 	.word	0x65207469
 8006fd4:	726f7272 	.word	0x726f7272
 8006fd8:	0a000a21 	.word	0x0a000a21
 8006fdc:	7265764f 	.word	0x7265764f
 8006fe0:	74616568 	.word	0x74616568
 8006fe4:	72726520 	.word	0x72726520
 8006fe8:	0a21726f 	.word	0x0a21726f
 8006fec:	754f0a00 	.word	0x754f0a00
 8006ff0:	666f2074 	.word	0x666f2074
 8006ff4:	6e617220 	.word	0x6e617220
 8006ff8:	65206567 	.word	0x65206567
 8006ffc:	726f7272 	.word	0x726f7272
 8007000:	0a000a21 	.word	0x0a000a21
 8007004:	63656843 	.word	0x63656843
 8007008:	6d75736b 	.word	0x6d75736b
 800700c:	72726520 	.word	0x72726520
 8007010:	0a21726f 	.word	0x0a21726f
 8007014:	764f0a00 	.word	0x764f0a00
 8007018:	6f6c7265 	.word	0x6f6c7265
 800701c:	65206461 	.word	0x65206461
 8007020:	726f7272 	.word	0x726f7272
 8007024:	0a000a21 	.word	0x0a000a21
 8007028:	74736e49 	.word	0x74736e49
 800702c:	74637572 	.word	0x74637572
 8007030:	206e6f69 	.word	0x206e6f69
 8007034:	65646f63 	.word	0x65646f63
 8007038:	72726520 	.word	0x72726520
 800703c:	0a21726f 	.word	0x0a21726f
 8007040:	00000000 	.word	0x00000000

Disassembly of section .data:

20000000 <_sdata>:
20000000:	00000002 	.word	0x00000002

20000004 <EasyEPort>:
20000004:	40010800 	.word	0x40010800
20000008:	00000001 	.word	0x00000001
2000000c:	40010800 	.word	0x40010800
20000010:	00000002 	.word	0x00000002
20000014:	40010800 	.word	0x40010800
20000018:	00000004 	.word	0x00000004
2000001c:	40010800 	.word	0x40010800
20000020:	00000008 	.word	0x00000008
20000024:	40011000 	.word	0x40011000
20000028:	00000040 	.word	0x00000040
2000002c:	40011000 	.word	0x40011000
20000030:	00000080 	.word	0x00000080
20000034:	40011000 	.word	0x40011000
20000038:	00000100 	.word	0x00000100
2000003c:	40011000 	.word	0x40011000
20000040:	00000200 	.word	0x00000200
20000044:	40010800 	.word	0x40010800
20000048:	00000100 	.word	0x00000100
2000004c:	40010800 	.word	0x40010800
20000050:	00000800 	.word	0x00000800
20000054:	40010c00 	.word	0x40010c00
20000058:	00000100 	.word	0x00000100
2000005c:	40010c00 	.word	0x40010c00
20000060:	00000200 	.word	0x00000200

20000064 <EasyButton>:
20000064:	40011000 	.word	0x40011000
20000068:	00000800 	.word	0x00000800
2000006c:	40011000 	.word	0x40011000
20000070:	00000400 	.word	0x00000400
20000074:	40010800 	.word	0x40010800
20000078:	00008000 	.word	0x00008000
2000007c:	40010800 	.word	0x40010800
20000080:	00004000 	.word	0x00004000
20000084:	40010c00 	.word	0x40010c00
20000088:	00000008 	.word	0x00000008
2000008c:	40011000 	.word	0x40011000
20000090:	00000010 	.word	0x00000010

20000094 <EasyLED>:
20000094:	40011000 	.word	0x40011000
20000098:	00002000 	.word	0x00002000
2000009c:	40010c00 	.word	0x40010c00
200000a0:	00002000 	.word	0x00002000
200000a4:	40010c00 	.word	0x40010c00
200000a8:	00004000 	.word	0x00004000
200000ac:	40010c00 	.word	0x40010c00
200000b0:	00008000 	.word	0x00008000
200000b4:	40011000 	.word	0x40011000
200000b8:	00004000 	.word	0x00004000
200000bc:	40011000 	.word	0x40011000
200000c0:	00008000 	.word	0x00008000
200000c4:	40010c00 	.word	0x40010c00
200000c8:	00001000 	.word	0x00001000

200000cc <Baudrate_DXL>:
200000cc:	000f4240 	.word	0x000f4240

200000d0 <Baudrate_ZIG>:
200000d0:	0000e100 	.word	0x0000e100

200000d4 <Baudrate_PCU>:
200000d4:	0000e100 	.word	0x0000e100

Disassembly of section .bss:

200000d8 <_sbss>:
	...

200004d8 <gbPcuWrite>:
	...

200004da <gbPcuRead>:
	...

200004dc <gbInstructionPacket>:
	...

2000057c <gbStatusPacket>:
	...

200005cc <gbRxPacketLength>:
	...

200005cd <gbRxGetLength>:
	...

200005ce <giBusUsing>:
	...

200005d0 <gbZigRead>:
	...

200005d1 <gbZigWrite>:
	...

200005d2 <gbRcvPacket>:
200005d2:	0000      	.short	0x0000
200005d4:	00000000 	.word	0x00000000

200005d8 <gbRcvPacketArduino>:
	...

200005e1 <gbRcvPacketNum>:
	...

200005e2 <gwRcvData>:
	...

200005e4 <gbRcvFlag>:
	...

200005e5 <right_V>:
	...

200005e6 <right_H>:
	...

200005e7 <left_V>:
	...

200005e8 <left_H>:
	...

200005e9 <buttons_>:
	...

200005ea <extra>:
	...

200005ec <glDelayCounter>:
200005ec:	00000000 	.word	0x00000000

200005f0 <glCountdownCounter>:
200005f0:	00000000 	.word	0x00000000

200005f4 <glDxlTimeoutCounter>:
200005f4:	00000000 	.word	0x00000000

200005f8 <glPcuTimeoutCounter>:
200005f8:	00000000 	.word	0x00000000

200005fc <glBuzzerCounter>:
200005fc:	00000000 	.word	0x00000000

20000600 <gbCounterCount>:
20000600:	00000000 	.word	0x00000000

20000604 <Millis>:
20000604:	00000000 	.word	0x00000000

20000608 <msMillis>:
20000608:	00000000 	.word	0x00000000

2000060c <ReBootToBootLoader>:
	...

2000060e <gbDxlWrite>:
	...

20000610 <gbDxlRead>:
	...

20000612 <gbZigWrite>:
	...

20000613 <gbZigRead>:
	...

20000614 <gbpPcuBuffer>:
	...

20000a14 <ReBootToBootLoader>:
	...

20000a16 <gbPcuWrite>:
	...

20000a18 <gbPcuRead>:
	...

20000a1a <gbpZigBuffer>:
	...

20000a5b <gbpDxlBuffer>:
	...

Disassembly of section ._usrstack:

20000e5c <_susrstack>:
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	5728203a 	undefined
   8:	52416e69 	subpl	r6, r1, #1680	; 0x690
   c:	614d204d 	cmpvs	sp, sp, asr #32
  10:	20686372 	rsbcs	r6, r8, r2, ror r3
  14:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  18:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  1c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  20:	43434700 	movtmi	r4, #14080	; 0x3700
  24:	5728203a 	undefined
  28:	52416e69 	subpl	r6, r1, #1680	; 0x690
  2c:	614d204d 	cmpvs	sp, sp, asr #32
  30:	20686372 	rsbcs	r6, r8, r2, ror r3
  34:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  38:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  3c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  40:	43434700 	movtmi	r4, #14080	; 0x3700
  44:	5728203a 	undefined
  48:	52416e69 	subpl	r6, r1, #1680	; 0x690
  4c:	614d204d 	cmpvs	sp, sp, asr #32
  50:	20686372 	rsbcs	r6, r8, r2, ror r3
  54:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  58:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  5c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  60:	43434700 	movtmi	r4, #14080	; 0x3700
  64:	5728203a 	undefined
  68:	52416e69 	subpl	r6, r1, #1680	; 0x690
  6c:	614d204d 	cmpvs	sp, sp, asr #32
  70:	20686372 	rsbcs	r6, r8, r2, ror r3
  74:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  78:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  7c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  80:	43434700 	movtmi	r4, #14080	; 0x3700
  84:	5728203a 	undefined
  88:	52416e69 	subpl	r6, r1, #1680	; 0x690
  8c:	614d204d 	cmpvs	sp, sp, asr #32
  90:	20686372 	rsbcs	r6, r8, r2, ror r3
  94:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  98:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  9c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  a0:	43434700 	movtmi	r4, #14080	; 0x3700
  a4:	5728203a 	undefined
  a8:	52416e69 	subpl	r6, r1, #1680	; 0x690
  ac:	614d204d 	cmpvs	sp, sp, asr #32
  b0:	20686372 	rsbcs	r6, r8, r2, ror r3
  b4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  b8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  bc:	00302e33 	eorseq	r2, r0, r3, lsr lr
  c0:	43434700 	movtmi	r4, #14080	; 0x3700
  c4:	5728203a 	undefined
  c8:	52416e69 	subpl	r6, r1, #1680	; 0x690
  cc:	614d204d 	cmpvs	sp, sp, asr #32
  d0:	20686372 	rsbcs	r6, r8, r2, ror r3
  d4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  d8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  dc:	00302e33 	eorseq	r2, r0, r3, lsr lr
  e0:	43434700 	movtmi	r4, #14080	; 0x3700
  e4:	5728203a 	undefined
  e8:	52416e69 	subpl	r6, r1, #1680	; 0x690
  ec:	614d204d 	cmpvs	sp, sp, asr #32
  f0:	20686372 	rsbcs	r6, r8, r2, ror r3
  f4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  f8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  fc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 100:	43434700 	movtmi	r4, #14080	; 0x3700
 104:	5728203a 	undefined
 108:	52416e69 	subpl	r6, r1, #1680	; 0x690
	ui2a(num,10,0,bf);
	}

static int a2d(char ch)
	{
	if (ch>='0' && ch<='9') 
 10c:	614d204d 	cmpvs	sp, sp, asr #32
 110:	20686372 	rsbcs	r6, r8, r2, ror r3
	int num=0;
	int digit;
	while ((digit=a2d(ch))>=0) {
		if (digit>base) break;
		num=num*base+digit;
		ch=*p++;
 114:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}

static int a2d(char ch)
	{
	if (ch>='0' && ch<='9') 
		return ch-'0';
	else if (ch>='a' && ch<='f')
 118:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 11c:	00302e33 	eorseq	r2, r0, r3, lsr lr
		return ch-'a'+10;
 120:	43434700 	movtmi	r4, #14080	; 0x3700
 124:	5728203a 	undefined
	else if (ch>='A' && ch<='F')
 128:	52416e69 	subpl	r6, r1, #1680	; 0x690
 12c:	614d204d 	cmpvs	sp, sp, asr #32
 130:	20686372 	rsbcs	r6, r8, r2, ror r3
		return ch-'A'+10;
 134:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
static char a2i(char ch, char** src,int base,int* nump)
	{
	char* p= *src;
	int num=0;
	int digit;
	while ((digit=a2d(ch))>=0) {
 138:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
			if (ch=='l') {
				ch=*(fmt++);
				lng=1;
			}
#endif
			switch (ch) {
 13c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 140:	43434700 	movtmi	r4, #14080	; 0x3700
 144:	5728203a 	undefined
 148:	52416e69 	subpl	r6, r1, #1680	; 0x690
 14c:	614d204d 	cmpvs	sp, sp, asr #32
 150:	20686372 	rsbcs	r6, r8, r2, ror r3
 154:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 158:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 15c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 160:	43434700 	movtmi	r4, #14080	; 0x3700
 164:	5728203a 	undefined
 168:	52416e69 	subpl	r6, r1, #1680	; 0x690
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
 16c:	614d204d 	cmpvs	sp, sp, asr #32
 170:	20686372 	rsbcs	r6, r8, r2, ror r3
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
 174:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}

static void i2a (int num, char * bf)
	{
	if (num<0) {
		num=-num;
		*bf++ = '-';
 178:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 17c:	00302e33 	eorseq	r2, r0, r3, lsr lr
	*bf=0;
	}

static void i2a (int num, char * bf)
	{
	if (num<0) {
 180:	43434700 	movtmi	r4, #14080	; 0x3700
		num=-num;
		*bf++ = '-';
 184:	5728203a 	undefined
 188:	52416e69 	subpl	r6, r1, #1680	; 0x690
		}
	ui2a(num,10,0,bf);
 18c:	614d204d 	cmpvs	sp, sp, asr #32
 190:	20686372 	rsbcs	r6, r8, r2, ror r3
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
					putchw(putp,putf,w,lz,bf);
 194:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 198:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 19c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 1a0:	43434700 	movtmi	r4, #14080	; 0x3700
 1a4:	5728203a 	undefined
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 1a8:	52416e69 	subpl	r6, r1, #1680	; 0x690
 1ac:	614d204d 	cmpvs	sp, sp, asr #32
 1b0:	20686372 	rsbcs	r6, r8, r2, ror r3
 1b4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 1b8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
					putchw(putp,putf,w,lz,bf);
 1bc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 1c0:	43434700 	movtmi	r4, #14080	; 0x3700
 1c4:	5728203a 	undefined
					break;
				case 'c' : 
					putf(putp,(char)(va_arg(va, int)));
 1c8:	52416e69 	subpl	r6, r1, #1680	; 0x690
 1cc:	614d204d 	cmpvs	sp, sp, asr #32
 1d0:	20686372 	rsbcs	r6, r8, r2, ror r3
					break;
				case 's' : 
					putchw(putp,putf,w,0,va_arg(va, char*));
 1d4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 1d8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 1dc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 1e0:	43434700 	movtmi	r4, #14080	; 0x3700
 1e4:	5728203a 	undefined
 1e8:	52416e69 	subpl	r6, r1, #1680	; 0x690
					break;
				case '%' :
					putf(putp,ch);
 1ec:	614d204d 	cmpvs	sp, sp, asr #32
 1f0:	20686372 	rsbcs	r6, r8, r2, ror r3
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
 1f4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 1f8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
					break;
				}
			}
		}
	abort:;
	}
 1fc:	00302e33 	eorseq	r2, r0, r3, lsr lr


void init_printf(void* putp,void (*putf) (void*,char))
	{
	stdout_putf=putf;
 200:	43434700 	movtmi	r4, #14080	; 0x3700
	stdout_putp=putp;
 204:	5728203a 	undefined
	}
 208:	52416e69 	subpl	r6, r1, #1680	; 0x690
 20c:	614d204d 	cmpvs	sp, sp, asr #32
 210:	20686372 	rsbcs	r6, r8, r2, ror r3
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
 214:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 218:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
	}
 21c:	00302e33 	eorseq	r2, r0, r3, lsr lr



void tfp_sprintf(char* s,char *fmt, ...)
	{
 220:	43434700 	movtmi	r4, #14080	; 0x3700
 224:	5728203a 	undefined
 228:	52416e69 	subpl	r6, r1, #1680	; 0x690
 22c:	614d204d 	cmpvs	sp, sp, asr #32
 230:	20686372 	rsbcs	r6, r8, r2, ror r3
	va_list va;
	va_start(va,fmt);
	tfp_format(&s,putcp,fmt,va);
 234:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 238:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
 23c:	00302e33 	eorseq	r2, r0, r3, lsr lr
	va_list va;
	va_start(va,fmt);
	tfp_format(&s,putcp,fmt,va);
	putcp(&s,0);
	va_end(va);
	}
 240:	43434700 	movtmi	r4, #14080	; 0x3700
 244:	5728203a 	undefined
 248:	52416e69 	subpl	r6, r1, #1680	; 0x690
 24c:	614d204d 	cmpvs	sp, sp, asr #32
	stdout_putf=putf;
	stdout_putp=putp;
	}

void tfp_printf(char *fmt, ...)
	{
 250:	20686372 	rsbcs	r6, r8, r2, ror r3
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
 254:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 258:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
	stdout_putf=putf;
	stdout_putp=putp;
	}

void tfp_printf(char *fmt, ...)
	{
 25c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 260:	43434700 	movtmi	r4, #14080	; 0x3700
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
 264:	5728203a 	undefined
	va_end(va);
	}
 268:	52416e69 	subpl	r6, r1, #1680	; 0x690
 26c:	614d204d 	cmpvs	sp, sp, asr #32
 270:	20686372 	rsbcs	r6, r8, r2, ror r3
 274:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 278:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
 27c:	00302e33 	eorseq	r2, r0, r3, lsr lr
	dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction (INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
 280:	43434700 	movtmi	r4, #14080	; 0x3700
 284:	5728203a 	undefined
 288:	52416e69 	subpl	r6, r1, #1680	; 0x690
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
	}
	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
 28c:	614d204d 	cmpvs	sp, sp, asr #32
 290:	20686372 	rsbcs	r6, r8, r2, ror r3
 294:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
	dxl_txrx_packet();
 298:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
	u16 CommStatus = dxl_get_result();
 29c:	00302e33 	eorseq	r2, r0, r3, lsr lr
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
 2a0:	43434700 	movtmi	r4, #14080	; 0x3700
		PrintErrorCode();
 2a4:	5728203a 	undefined
	else
		PrintCommStatus(CommStatus);
 2a8:	52416e69 	subpl	r6, r1, #1680	; 0x690
#endif
}
 2ac:	614d204d 	cmpvs	sp, sp, asr #32
 2b0:	20686372 	rsbcs	r6, r8, r2, ror r3
 2b4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 2b8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
	}
	interpolating = 1;
}
/* interpolate our pose, this should be called at about 30Hz. */
#define WAIT_SLOP_FACTOR 10
int BioloidControllerEx_interpolateStep(bool fWait) {
 2bc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 2c0:	43434700 	movtmi	r4, #14080	; 0x3700

	if (interpolating == 0)
 2c4:	5728203a 	undefined
		return 0;
	int i;
	int complete = poseSize;
 2c8:	52416e69 	subpl	r6, r1, #1680	; 0x690
	if (!fWait) {
 2cc:	614d204d 	cmpvs	sp, sp, asr #32
		if (getMillis() < (nextframe_ - WAIT_SLOP_FACTOR)) {
 2d0:	20686372 	rsbcs	r6, r8, r2, ror r3
 2d4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 2d8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
			return (getMillis() - nextframe_); // We still have some time to do something...
 2dc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 2e0:	43434700 	movtmi	r4, #14080	; 0x3700
 2e4:	5728203a 	undefined
#ifdef MILLIS
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	while (getMillis() < nextframe_);
 2e8:	52416e69 	subpl	r6, r1, #1680	; 0x690
 2ec:	614d204d 	cmpvs	sp, sp, asr #32
 2f0:	20686372 	rsbcs	r6, r8, r2, ror r3
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
 2f4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
 2f8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 2fc:	00302e33 	eorseq	r2, r0, r3, lsr lr
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
 300:	43434700 	movtmi	r4, #14080	; 0x3700
 304:	5728203a 	undefined
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
 308:	52416e69 	subpl	r6, r1, #1680	; 0x690
		int diff = nextpose_[i] - pose_[i];
 30c:	614d204d 	cmpvs	sp, sp, asr #32
 310:	20686372 	rsbcs	r6, r8, r2, ror r3
 314:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 318:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 31c:	00302e33 	eorseq	r2, r0, r3, lsr lr
		if (diff == 0) {
 320:	43434700 	movtmi	r4, #14080	; 0x3700
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
 324:	5728203a 	undefined
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
 328:	52416e69 	subpl	r6, r1, #1680	; 0x690
		int diff = nextpose_[i] - pose_[i];
		if (diff == 0) {
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
 32c:	614d204d 	cmpvs	sp, sp, asr #32
					pose_[i] = nextpose_[i];
 330:	20686372 	rsbcs	r6, r8, r2, ror r3
					complete--;
 334:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
 338:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 33c:	00302e33 	eorseq	r2, r0, r3, lsr lr
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
 340:	43434700 	movtmi	r4, #14080	; 0x3700
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
 344:	5728203a 	undefined
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
 348:	52416e69 	subpl	r6, r1, #1680	; 0x690
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
 34c:	614d204d 	cmpvs	sp, sp, asr #32
 350:	20686372 	rsbcs	r6, r8, r2, ror r3
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif

	}
	if (complete <= 0)
 354:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
		interpolating = 0;
 358:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
	BioloidControllerEx_writePose();
 35c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 360:	43434700 	movtmi	r4, #14080	; 0x3700
	return 0;
}
 364:	5728203a 	undefined
 368:	52416e69 	subpl	r6, r1, #1680	; 0x690
 36c:	614d204d 	cmpvs	sp, sp, asr #32
 370:	20686372 	rsbcs	r6, r8, r2, ror r3
 374:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 378:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 37c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 380:	43434700 	movtmi	r4, #14080	; 0x3700
	for (i = 0; i < poseSize; i++)
		//nextpose_[i] = pgm_read_word_near(addr+1+i) << BIOLOID_SHIFT;
		nextpose_[i] = pgm_read_word_near(addr + 1 + i);
}
/* read in current servo positions to the pose. */
void BioloidControllerEx_readPose() {
 384:	5728203a 	undefined
 388:	52416e69 	subpl	r6, r1, #1680	; 0x690
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
		//pose_[i] = dxl_read_word(id_[i],AXM_PRESENT_POSITION_L)<<BIOLOID_SHIFT;
		pose_[i] = dxl_read_word(id_[i], AXM_PRESENT_POSITION_L);
 38c:	614d204d 	cmpvs	sp, sp, asr #32
 390:	20686372 	rsbcs	r6, r8, r2, ror r3
 394:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 398:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 39c:	00302e33 	eorseq	r2, r0, r3, lsr lr
		PrintChar(id_[i]);
		PrintString(" - ");
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
 3a0:	43434700 	movtmi	r4, #14080	; 0x3700

#ifdef DEBUG_BIOLOIDEX
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
 3a4:	5728203a 	undefined
 3a8:	52416e69 	subpl	r6, r1, #1680	; 0x690
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
	}
}
 3ac:	614d204d 	cmpvs	sp, sp, asr #32
 3b0:	20686372 	rsbcs	r6, r8, r2, ror r3
 3b4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 3b8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitPosY[GaitCurrentLegNr] = -3 * g_InControlState.LegLiftHeight
				/ (3 + g_InControlState.gaitCur.HalfLiftHeight); // Easier to shift between div factor: /1 (3/3), /2 (3/6) and 3/4
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y
 3bc:	00302e33 	eorseq	r2, r0, r3, lsr lr
				/ g_InControlState.gaitCur.LiftDivFactor;
	}

	//Optional Half heigth Rear 5 LiftedPos (5 lifted positions)
	else if (((g_InControlState.gaitCur.NrLiftedPos == 5 && (LegStep == -2)))
 3c0:	43434700 	movtmi	r4, #14080	; 0x3700
 3c4:	5728203a 	undefined
 3c8:	52416e69 	subpl	r6, r1, #1680	; 0x690
 3cc:	614d204d 	cmpvs	sp, sp, asr #32
 3d0:	20686372 	rsbcs	r6, r8, r2, ror r3
 3d4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 3d8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = -g_InControlState.TravelLength.x / 2;
 3dc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 3e0:	43434700 	movtmi	r4, #14080	; 0x3700
 3e4:	5728203a 	undefined
 3e8:	52416e69 	subpl	r6, r1, #1680	; 0x690
 3ec:	614d204d 	cmpvs	sp, sp, asr #32
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
 3f0:	20686372 	rsbcs	r6, r8, r2, ror r3
 3f4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 3f8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 3fc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 400:	43434700 	movtmi	r4, #14080	; 0x3700
		GaitPosZ[GaitCurrentLegNr] = -g_InControlState.TravelLength.z / 2;
 404:	5728203a 	undefined
 408:	52416e69 	subpl	r6, r1, #1680	; 0x690
 40c:	614d204d 	cmpvs	sp, sp, asr #32
 410:	20686372 	rsbcs	r6, r8, r2, ror r3
		GaitRotY[GaitCurrentLegNr] = -g_InControlState.TravelLength.y / 2;
 414:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 418:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 41c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 420:	43434700 	movtmi	r4, #14080	; 0x3700
	}

	//Optional Half heigth Front 5 LiftedPos (5 lifted positions)
	else if ((g_InControlState.gaitCur.NrLiftedPos == 5)
 424:	5728203a 	undefined
 428:	52416e69 	subpl	r6, r1, #1680	; 0x690
 42c:	614d204d 	cmpvs	sp, sp, asr #32
 430:	20686372 	rsbcs	r6, r8, r2, ror r3
 434:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 438:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
			&& (LegStep == 2
					|| LegStep == -(g_InControlState.gaitCur.StepsInGait - 2))
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
 43c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 440:	43434700 	movtmi	r4, #14080	; 0x3700
 444:	5728203a 	undefined
 448:	52416e69 	subpl	r6, r1, #1680	; 0x690
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
 44c:	614d204d 	cmpvs	sp, sp, asr #32
 450:	20686372 	rsbcs	r6, r8, r2, ror r3
 454:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 458:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 45c:	00302e33 	eorseq	r2, r0, r3, lsr lr

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
	...
  14:	0000000c 	andeq	r0, r0, ip
  18:	00000000 	andeq	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	004d0002 	subeq	r0, sp, r2
  30:	00040000 	andeq	r0, r4, r0
	...
  3c:	00000104 	andeq	r0, r0, r4, lsl #2
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	00d10002 	sbcseq	r0, r1, r2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
  5c:	00000308 	andeq	r0, r0, r8, lsl #6
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	05aa0002 	streq	r0, [sl, #2]!
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	0800343c 	stmdaeq	r0, {r2, r3, r4, r5, sl, ip, sp}
  7c:	00000134 	andeq	r0, r0, r4, lsr r1
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	0c170002 	ldceq	0, cr0, [r7], {2}
  90:	00040000 	andeq	r0, r4, r0
	...
  9c:	000021cc 	andeq	r2, r0, ip, asr #3
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	26ce0002 	strbcs	r0, [lr], r2
  b0:	00040000 	andeq	r0, r4, r0
	...
  bc:	000003bc 	strheq	r0, [r0], -ip
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	2e400002 	cdpcs	0, 4, cr0, cr0, cr2, {0}
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	08003570 	stmdaeq	r0, {r4, r5, r6, r8, sl, ip, sp}
  dc:	000006b6 	strheq	r0, [r0], -r6
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	36660002 	strbtcc	r0, [r6], -r2
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	08003c28 	stmdaeq	r0, {r3, r5, sl, fp, ip, sp}
  fc:	00000530 	andeq	r0, r0, r0, lsr r5
	...
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
	ui2a(num,10,0,bf);
	}

static int a2d(char ch)
	{
	if (ch>='0' && ch<='9') 
 10c:	3e520002 	cdpcc	0, 5, cr0, cr2, cr2, {0}
 110:	00040000 	andeq	r0, r4, r0
	int num=0;
	int digit;
	while ((digit=a2d(ch))>=0) {
		if (digit>base) break;
		num=num*base+digit;
		ch=*p++;
 114:	00000000 	andeq	r0, r0, r0

static int a2d(char ch)
	{
	if (ch>='0' && ch<='9') 
		return ch-'0';
	else if (ch>='a' && ch<='f')
 118:	08004158 	stmdaeq	r0, {r3, r4, r6, r8, lr}
 11c:	00000340 	andeq	r0, r0, r0, asr #6
	...
		return ch-'a'+10;
	else if (ch>='A' && ch<='F')
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	468e0002 	strmi	r0, [lr], r2
 130:	00040000 	andeq	r0, r4, r0
	...
			if (ch=='l') {
				ch=*(fmt++);
				lng=1;
			}
#endif
			switch (ch) {
 13c:	0000027c 	andeq	r0, r0, ip, ror r2
	...
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	4b010002 	blmi	4015c <__Stack_Size+0x3fd5c>
 150:	00040000 	andeq	r0, r4, r0
 154:	00000000 	andeq	r0, r0, r0
 158:	08004498 	stmdaeq	r0, {r3, r4, r7, sl, lr}
 15c:	0000019e 	muleq	r0, lr, r1
	...
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
 16c:	4efa0002 	cdpmi	0, 15, cr0, cr10, cr2, {0}
 170:	00040000 	andeq	r0, r4, r0
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
 174:	00000000 	andeq	r0, r0, r0

static void i2a (int num, char * bf)
	{
	if (num<0) {
		num=-num;
		*bf++ = '-';
 178:	08004638 	stmdaeq	r0, {r3, r4, r5, r9, sl, lr}
 17c:	00000024 	andeq	r0, r0, r4, lsr #32
	...
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
		}
	ui2a(num,10,0,bf);
 18c:	50bf0002 	adcspl	r0, pc, r2
 190:	00040000 	andeq	r0, r4, r0
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
					putchw(putp,putf,w,lz,bf);
 194:	00000000 	andeq	r0, r0, r0
 198:	0800465c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, lr}
 19c:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ac:	52810002 	addpl	r0, r1, #2	; 0x2
 1b0:	00040000 	andeq	r0, r4, r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	08004688 	stmdaeq	r0, {r3, r7, r9, sl, lr}
					putchw(putp,putf,w,lz,bf);
 1bc:	0000004a 	andeq	r0, r0, sl, asr #32
	...
					break;
				case 'c' : 
					putf(putp,(char)(va_arg(va, int)));
 1c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1cc:	54920002 	ldrpl	r0, [r2], #2
 1d0:	00040000 	andeq	r0, r4, r0
					break;
				case 's' : 
					putchw(putp,putf,w,0,va_arg(va, char*));
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	080046d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, lr}
 1dc:	0000023c 	andeq	r0, r0, ip, lsr r2
	...
 1e8:	0000001c 	andeq	r0, r0, ip, lsl r0
					break;
				case '%' :
					putf(putp,ch);
 1ec:	56dd0002 	ldrbpl	r0, [sp], r2
 1f0:	00040000 	andeq	r0, r4, r0
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	08004910 	stmdaeq	r0, {r4, r8, fp, lr}
					break;
				}
			}
		}
	abort:;
	}
 1fc:	00000454 	andeq	r0, r0, r4, asr r4
	...

void init_printf(void* putp,void (*putf) (void*,char))
	{
	stdout_putf=putf;
	stdout_putp=putp;
	}
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	5c6c0002 	stclpl	0, cr0, [ip], #-8
 210:	00040000 	andeq	r0, r4, r0
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
 214:	00000000 	andeq	r0, r0, r0
 218:	08004d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp, lr}
	}
 21c:	000005e4 	andeq	r0, r0, r4, ror #11
	...



void tfp_sprintf(char* s,char *fmt, ...)
	{
 228:	0000001c 	andeq	r0, r0, ip, lsl r0
 22c:	64590002 	ldrbvs	r0, [r9], #-2
 230:	00040000 	andeq	r0, r4, r0
	va_list va;
	va_start(va,fmt);
	tfp_format(&s,putcp,fmt,va);
 234:	00000000 	andeq	r0, r0, r0
 238:	08005348 	stmdaeq	r0, {r3, r6, r8, r9, ip, lr}
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
 23c:	00000394 	muleq	r0, r4, r3
	...
	va_list va;
	va_start(va,fmt);
	tfp_format(&s,putcp,fmt,va);
	putcp(&s,0);
	va_end(va);
	}
 248:	0000001c 	andeq	r0, r0, ip, lsl r0
 24c:	6f780002 	svcvs	0x00780002
	stdout_putf=putf;
	stdout_putp=putp;
	}

void tfp_printf(char *fmt, ...)
	{
 250:	00040000 	andeq	r0, r4, r0
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
 254:	00000000 	andeq	r0, r0, r0
 258:	080056dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, ip, lr}
	stdout_putf=putf;
	stdout_putp=putp;
	}

void tfp_printf(char *fmt, ...)
	{
 25c:	00000528 	andeq	r0, r0, r8, lsr #10
	...
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
	va_end(va);
	}
 268:	0000001c 	andeq	r0, r0, ip, lsl r0
 26c:	76b20002 	ldrtvc	r0, [r2], r2
 270:	00040000 	andeq	r0, r4, r0
 274:	00000000 	andeq	r0, r0, r0
 278:	08005c04 	stmdaeq	r0, {r2, sl, fp, ip, lr}
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
 27c:	00000288 	andeq	r0, r0, r8, lsl #5
	...
	dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction (INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
 288:	0000001c 	andeq	r0, r0, ip, lsl r0
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
	}
	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
 28c:	7cfa0002 	ldclvc	0, cr0, [sl], #8
 290:	00040000 	andeq	r0, r4, r0
 294:	00000000 	andeq	r0, r0, r0
	dxl_txrx_packet();
 298:	08005e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, ip, lr}
	u16 CommStatus = dxl_get_result();
 29c:	00000384 	andeq	r0, r0, r4, lsl #7
	...
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
		PrintErrorCode();
	else
		PrintCommStatus(CommStatus);
 2a8:	0000001c 	andeq	r0, r0, ip, lsl r0
#endif
}
 2ac:	85e10002 	strbhi	r0, [r1, #2]!
 2b0:	00040000 	andeq	r0, r4, r0
 2b4:	00000000 	andeq	r0, r0, r0
 2b8:	08006210 	stmdaeq	r0, {r4, r9, sp, lr}
	}
	interpolating = 1;
}
/* interpolate our pose, this should be called at about 30Hz. */
#define WAIT_SLOP_FACTOR 10
int BioloidControllerEx_interpolateStep(bool fWait) {
 2bc:	000000e0 	andeq	r0, r0, r0, ror #1
	...

	if (interpolating == 0)
		return 0;
	int i;
	int complete = poseSize;
 2c8:	0000001c 	andeq	r0, r0, ip, lsl r0
	if (!fWait) {
 2cc:	88280002 	stmdahi	r8!, {r1}
		if (getMillis() < (nextframe_ - WAIT_SLOP_FACTOR)) {
 2d0:	00040000 	andeq	r0, r4, r0
 2d4:	00000000 	andeq	r0, r0, r0
 2d8:	080062f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sp, lr}
			return (getMillis() - nextframe_); // We still have some time to do something...
 2dc:	000003a4 	andeq	r0, r0, r4, lsr #7
	...
#ifdef MILLIS
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	while (getMillis() < nextframe_);
 2e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2ec:	90e50002 	rscls	r0, r5, r2
 2f0:	00040000 	andeq	r0, r4, r0
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
 2f4:	00000000 	andeq	r0, r0, r0
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
 2f8:	08006694 	stmdaeq	r0, {r2, r4, r7, r9, sl, sp, lr}
 2fc:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
 308:	0000001c 	andeq	r0, r0, ip, lsl r0
		int diff = nextpose_[i] - pose_[i];
 30c:	92d40002 	sbcsls	r0, r4, #2	; 0x2
 310:	00040000 	andeq	r0, r4, r0
 314:	00000000 	andeq	r0, r0, r0
 318:	08006738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, sp, lr}
 31c:	000003bc 	strheq	r0, [r0], -ip
	...
			if (diff > 0) {
				if (diff < speed_[i]) {
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
 328:	0000001c 	andeq	r0, r0, ip, lsl r0
		int diff = nextpose_[i] - pose_[i];
		if (diff == 0) {
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
 32c:	9c240002 	stcls	0, cr0, [r4], #-8
					pose_[i] = nextpose_[i];
 330:	00040000 	andeq	r0, r4, r0
					complete--;
 334:	00000000 	andeq	r0, r0, r0
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
 338:	08006af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, sp, lr}
 33c:	0000006e 	andeq	r0, r0, lr, rrx
	...
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
 348:	0000001c 	andeq	r0, r0, ip, lsl r0
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
 34c:	9cb60002 	ldcls	0, cr0, [r6], #8
 350:	00040000 	andeq	r0, r4, r0
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif

	}
	if (complete <= 0)
 354:	00000000 	andeq	r0, r0, r0
		interpolating = 0;
 358:	08006b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp, sp, lr}
	BioloidControllerEx_writePose();
 35c:	00000054 	andeq	r0, r0, r4, asr r0
	...
	return 0;
}
 368:	0000001c 	andeq	r0, r0, ip, lsl r0
 36c:	9dbc0002 	ldcls	0, cr0, [ip, #8]!
 370:	00040000 	andeq	r0, r4, r0
	...
 37c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
	for (i = 0; i < poseSize; i++)
		//nextpose_[i] = pgm_read_word_near(addr+1+i) << BIOLOID_SHIFT;
		nextpose_[i] = pgm_read_word_near(addr + 1 + i);
}
/* read in current servo positions to the pose. */
void BioloidControllerEx_readPose() {
 388:	0000001c 	andeq	r0, r0, ip, lsl r0
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
		//pose_[i] = dxl_read_word(id_[i],AXM_PRESENT_POSITION_L)<<BIOLOID_SHIFT;
		pose_[i] = dxl_read_word(id_[i], AXM_PRESENT_POSITION_L);
 38c:	9e810002 	cdpls	0, 8, cr0, cr1, cr2, {0}
 390:	00040000 	andeq	r0, r4, r0
	...
 39c:	00000030 	andeq	r0, r0, r0, lsr r0
	...

#ifdef DEBUG_BIOLOIDEX
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
 3a8:	0000001c 	andeq	r0, r0, ip, lsl r0
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
	}
}
 3ac:	b0f50002 	rscslt	r0, r5, r2
 3b0:	00040000 	andeq	r0, r4, r0
	...
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitPosY[GaitCurrentLegNr] = -3 * g_InControlState.LegLiftHeight
				/ (3 + g_InControlState.gaitCur.HalfLiftHeight); // Easier to shift between div factor: /1 (3/3), /2 (3/6) and 3/4
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y
 3bc:	000000c8 	andeq	r0, r0, r8, asr #1
	...
				/ g_InControlState.gaitCur.LiftDivFactor;
	}

	//Optional Half heigth Rear 5 LiftedPos (5 lifted positions)
	else if (((g_InControlState.gaitCur.NrLiftedPos == 5 && (LegStep == -2)))
 3c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3cc:	b23b0002 	eorslt	r0, fp, #2	; 0x2
 3d0:	00040000 	andeq	r0, r4, r0
	...
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = -g_InControlState.TravelLength.x / 2;
 3dc:	000000fc 	strdeq	r0, [r0], -ip
	...
 3e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3ec:	b3490002 	movtlt	r0, #36866	; 0x9002
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
 3f0:	00040000 	andeq	r0, r4, r0
	...
 3fc:	000000d0 	ldrdeq	r0, [r0], -r0
	...
		GaitPosZ[GaitCurrentLegNr] = -g_InControlState.TravelLength.z / 2;
 408:	0000001c 	andeq	r0, r0, ip, lsl r0
 40c:	b45c0002 	ldrblt	r0, [ip], #-2
 410:	00040000 	andeq	r0, r4, r0
	...
		GaitRotY[GaitCurrentLegNr] = -g_InControlState.TravelLength.y / 2;
 41c:	0000009c 	muleq	r0, ip, r0
	...
	}

	//Optional Half heigth Front 5 LiftedPos (5 lifted positions)
	else if ((g_InControlState.gaitCur.NrLiftedPos == 5)
 428:	0000001c 	andeq	r0, r0, ip, lsl r0
 42c:	be010002 	cdplt	0, 0, cr0, cr1, cr2, {0}
 430:	00040000 	andeq	r0, r4, r0
	...
			&& (LegStep == 2
					|| LegStep == -(g_InControlState.gaitCur.StepsInGait - 2))
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
 43c:	0000010c 	andeq	r0, r0, ip, lsl #2
	...
 448:	00000024 	andeq	r0, r0, r4, lsr #32
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
 44c:	c7b30002 	ldrgt	r0, [r3, r2]!
 450:	00040000 	andeq	r0, r4, r0
	...
 45c:	0000000c 	andeq	r0, r0, ip
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
 460:	00000000 	andeq	r0, r0, r0
 464:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_pubnames:

00000000 <.debug_pubnames>:
       0:	00000017 	andeq	r0, r0, r7, lsl r0
       4:	00d10002 	sbcseq	r0, r1, r2
       8:	04d90000 	ldrbeq	r0, [r9]
       c:	034b0000 	movteq	r0, #45056	; 0xb000
      10:	616d0000 	cmnvs	sp, r0
      14:	00006e69 	andeq	r6, r0, r9, ror #28
      18:	38000000 	stmdacc	r0, {}
      1c:	02000006 	andeq	r0, r0, #6	; 0x6
      20:	0005aa00 	andeq	sl, r5, r0, lsl #20
      24:	00066d00 	andeq	r6, r6, r0, lsl #26
      28:	00006700 	andeq	r6, r0, r0, lsl #14
      2c:	494d4e00 	stmdbmi	sp, {r9, sl, fp, lr}^
      30:	65637845 	strbvs	r7, [r3, #-2117]!
      34:	6f697470 	svcvs	0x00697470
      38:	007a006e 	rsbseq	r0, sl, lr, rrx
      3c:	61480000 	cmpvs	r8, r0
      40:	61466472 	cmpvs	r6, r2, ror r4
      44:	45746c75 	ldrbmi	r6, [r4, #-3189]!
      48:	70656378 	rsbvc	r6, r5, r8, ror r3
      4c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
      50:	00008d00 	andeq	r8, r0, r0, lsl #26
      54:	6d654d00 	stclvs	13, cr4, [r5]
      58:	616e614d 	cmnvs	lr, sp, asr #2
      5c:	78456567 	stmdavc	r5, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^
      60:	74706563 	ldrbtvc	r6, [r0], #-1379
      64:	006e6f69 	rsbeq	r6, lr, r9, ror #30
      68:	000000a0 	andeq	r0, r0, r0, lsr #1
      6c:	46737542 	ldrbtmi	r7, [r3], -r2, asr #10
      70:	746c7561 	strbtvc	r7, [ip], #-1377
      74:	65637845 	strbvs	r7, [r3, #-2117]!
      78:	6f697470 	svcvs	0x00697470
      7c:	00b3006e 	adcseq	r0, r3, lr, rrx
      80:	73550000 	cmpvc	r5, #0	; 0x0
      84:	46656761 	strbtmi	r6, [r5], -r1, ror #14
      88:	746c7561 	strbtvc	r7, [ip], #-1377
      8c:	65637845 	strbvs	r7, [r3, #-2117]!
      90:	6f697470 	svcvs	0x00697470
      94:	00c6006e 	sbceq	r0, r6, lr, rrx
      98:	65440000 	strbvs	r0, [r4]
      9c:	4d677562 	cfstr64mi	mvdx7, [r7, #-392]!
      a0:	74696e6f 	strbtvc	r6, [r9], #-3695
      a4:	d900726f 	stmdble	r0, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}
      a8:	53000000 	movwpl	r0, #0	; 0x0
      ac:	61484356 	cmpvs	r8, r6, asr r3
      b0:	656c646e 	strbvs	r6, [ip, #-1134]!
      b4:	00ec0072 	rsceq	r0, ip, r2, ror r0
      b8:	65500000 	ldrbvs	r0, [r0]
      bc:	5653646e 	ldrbpl	r6, [r3], -lr, ror #8
      c0:	00ff0043 	rscseq	r0, pc, r3, asr #32
      c4:	57570000 	ldrbpl	r0, [r7, -r0]
      c8:	495f4744 	ldmdbmi	pc, {r2, r6, r8, r9, sl, lr}^
      cc:	61485152 	cmpvs	r8, r2, asr r1
      d0:	656c646e 	strbvs	r6, [ip, #-1134]!
      d4:	01120072 	tsteq	r2, r2, ror r0
      d8:	56500000 	ldrbpl	r0, [r0], -r0
      dc:	52495f44 	subpl	r5, r9, #272	; 0x110
      e0:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
      e4:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
      e8:	00012500 	andeq	r2, r1, r0, lsl #10
      ec:	4d415400 	cfstrdmi	mvd5, [r1]
      f0:	5f524550 	svcpl	0x00524550
      f4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
      f8:	6c646e61 	stclvs	14, cr6, [r4], #-388
      fc:	38007265 	stmdacc	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     100:	52000001 	andpl	r0, r0, #1	; 0x1
     104:	495f4354 	ldmdbmi	pc, {r2, r4, r6, r8, r9, lr}^
     108:	61485152 	cmpvs	r8, r2, asr r1
	ui2a(num,10,0,bf);
	}

static int a2d(char ch)
	{
	if (ch>='0' && ch<='9') 
     10c:	656c646e 	strbvs	r6, [ip, #-1134]!
     110:	014b0072 	cmpeq	fp, r2, ror r0
	int num=0;
	int digit;
	while ((digit=a2d(ch))>=0) {
		if (digit>base) break;
		num=num*base+digit;
		ch=*p++;
     114:	4c460000 	marmi	acc0, r0, r6

static int a2d(char ch)
	{
	if (ch>='0' && ch<='9') 
		return ch-'0';
	else if (ch>='a' && ch<='f')
     118:	5f485341 	svcpl	0x00485341
     11c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
		return ch-'a'+10;
     120:	6c646e61 	stclvs	14, cr6, [r4], #-388
     124:	5e007265 	cdppl	2, 0, cr7, cr0, cr5, {3}
	else if (ch>='A' && ch<='F')
     128:	52000001 	andpl	r0, r0, #1	; 0x1
     12c:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^
     130:	61485152 	cmpvs	r8, r2, asr r1
		return ch-'A'+10;
     134:	656c646e 	strbvs	r6, [ip, #-1134]!
static char a2i(char ch, char** src,int base,int* nump)
	{
	char* p= *src;
	int num=0;
	int digit;
	while ((digit=a2d(ch))>=0) {
     138:	01710072 	cmneq	r1, r2, ror r0
			if (ch=='l') {
				ch=*(fmt++);
				lng=1;
			}
#endif
			switch (ch) {
     13c:	58450000 	stmdapl	r5, {}^
     140:	5f304954 	svcpl	0x00304954
     144:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     148:	6c646e61 	stclvs	14, cr6, [r4], #-388
     14c:	84007265 	strhi	r7, [r0], #-613
     150:	45000001 	strmi	r0, [r0, #-1]
     154:	31495458 	cmpcc	r9, r8, asr r4
     158:	5152495f 	cmppl	r2, pc, asr r9
     15c:	646e6148 	strbtvs	r6, [lr], #-328
     160:	0072656c 	rsbseq	r6, r2, ip, ror #10
     164:	00000197 	muleq	r0, r7, r1
     168:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
     16c:	52495f32 	subpl	r5, r9, #200	; 0xc8
     170:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
     174:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400

static void i2a (int num, char * bf)
	{
	if (num<0) {
		num=-num;
		*bf++ = '-';
     178:	0001aa00 	andeq	sl, r1, r0, lsl #20
     17c:	54584500 	ldrbpl	r4, [r8], #-1280
	*bf=0;
	}

static void i2a (int num, char * bf)
	{
	if (num<0) {
     180:	495f3349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, ip, sp}^
		num=-num;
		*bf++ = '-';
     184:	61485152 	cmpvs	r8, r2, asr r1
     188:	656c646e 	strbvs	r6, [ip, #-1134]!
		}
	ui2a(num,10,0,bf);
     18c:	01bd0072 	undefined instruction 0x01bd0072
     190:	58450000 	stmdapl	r5, {}^
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
					putchw(putp,putf,w,lz,bf);
     194:	5f344954 	svcpl	0x00344954
     198:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     19c:	6c646e61 	stclvs	14, cr6, [r4], #-388
     1a0:	d1007265 	tstle	r0, r5, ror #4
     1a4:	44000001 	strmi	r0, [r0], #-1
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
     1a8:	5f31414d 	svcpl	0x0031414d
     1ac:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     1b0:	316c656e 	cmncc	ip, lr, ror #10
     1b4:	5152495f 	cmppl	r2, pc, asr r9
     1b8:	646e6148 	strbtvs	r6, [lr], #-328
					putchw(putp,putf,w,lz,bf);
     1bc:	0072656c 	rsbseq	r6, r2, ip, ror #10
     1c0:	000001e5 	andeq	r0, r0, r5, ror #3
     1c4:	31414d44 	cmpcc	r1, r4, asr #26
					break;
				case 'c' : 
					putf(putp,(char)(va_arg(va, int)));
     1c8:	6168435f 	cmnvs	r8, pc, asr r3
     1cc:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     1d0:	52495f32 	subpl	r5, r9, #200	; 0xc8
					break;
				case 's' : 
					putchw(putp,putf,w,0,va_arg(va, char*));
     1d4:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     1d8:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     1dc:	0001f900 	andeq	pc, r1, r0, lsl #18
     1e0:	414d4400 	cmpmi	sp, r0, lsl #8
     1e4:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     1e8:	656e6e61 	strbvs	r6, [lr, #-3681]!
					break;
				case '%' :
					putf(putp,ch);
     1ec:	495f336c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, r9, ip, sp}^
     1f0:	61485152 	cmpvs	r8, r2, asr r1
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
     1f4:	656c646e 	strbvs	r6, [ip, #-1134]!
     1f8:	020d0072 	andeq	r0, sp, #114	; 0x72
					break;
				}
			}
		}
	abort:;
	}
     1fc:	4d440000 	stclmi	0, cr0, [r4]


void init_printf(void* putp,void (*putf) (void*,char))
	{
	stdout_putf=putf;
     200:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
	stdout_putp=putp;
     204:	6e6e6168 	powvsez	f6, f6, #0.0
	}
     208:	5f346c65 	svcpl	0x00346c65
     20c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     210:	6c646e61 	stclvs	14, cr6, [r4], #-388
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
     214:	21007265 	tstcs	r0, r5, ror #4
     218:	44000002 	strmi	r0, [r0], #-2
	}
     21c:	5f31414d 	svcpl	0x0031414d



void tfp_sprintf(char* s,char *fmt, ...)
	{
     220:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     224:	356c656e 	strbcc	r6, [ip, #-1390]!
     228:	5152495f 	cmppl	r2, pc, asr r9
     22c:	646e6148 	strbtvs	r6, [lr], #-328
     230:	0072656c 	rsbseq	r6, r2, ip, ror #10
	va_list va;
	va_start(va,fmt);
	tfp_format(&s,putcp,fmt,va);
     234:	00000235 	andeq	r0, r0, r5, lsr r2
     238:	31414d44 	cmpcc	r1, r4, asr #26
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
     23c:	6168435f 	cmnvs	r8, pc, asr r3
	va_list va;
	va_start(va,fmt);
	tfp_format(&s,putcp,fmt,va);
	putcp(&s,0);
	va_end(va);
	}
     240:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     244:	52495f36 	subpl	r5, r9, #216	; 0xd8
     248:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     24c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
	stdout_putf=putf;
	stdout_putp=putp;
	}

void tfp_printf(char *fmt, ...)
	{
     250:	00024900 	andeq	r4, r2, r0, lsl #18
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
     254:	414d4400 	cmpmi	sp, r0, lsl #8
     258:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
	stdout_putf=putf;
	stdout_putp=putp;
	}

void tfp_printf(char *fmt, ...)
	{
     25c:	656e6e61 	strbvs	r6, [lr, #-3681]!
     260:	495f376c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, r9, sl, ip, sp}^
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
     264:	61485152 	cmpvs	r8, r2, asr r1
	va_end(va);
	}
     268:	656c646e 	strbvs	r6, [ip, #-1134]!
     26c:	025d0072 	subseq	r0, sp, #114	; 0x72
     270:	44410000 	strbmi	r0, [r1]
     274:	325f3143 	subscc	r3, pc, #-1073741808	; 0xc0000010
     278:	5152495f 	cmppl	r2, pc, asr r9
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
     27c:	646e6148 	strbtvs	r6, [lr], #-328
	dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction (INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
     280:	0072656c 	rsbseq	r6, r2, ip, ror #10
     284:	00000271 	andeq	r0, r0, r1, ror r2
     288:	5f425355 	svcpl	0x00425355
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
	}
	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
     28c:	435f5048 	cmpmi	pc, #72	; 0x48
     290:	545f4e41 	ldrbpl	r4, [pc], #3649	; 298 <_Minimum_Stack_Size+0x198>
     294:	52495f58 	subpl	r5, r9, #352	; 0x160
	dxl_txrx_packet();
     298:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
	u16 CommStatus = dxl_get_result();
     29c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
     2a0:	00028500 	andeq	r8, r2, r0, lsl #10
		PrintErrorCode();
     2a4:	42535500 	subsmi	r5, r3, #0	; 0x0
	else
		PrintCommStatus(CommStatus);
     2a8:	5f504c5f 	svcpl	0x00504c5f
#endif
}
     2ac:	5f4e4143 	svcpl	0x004e4143
     2b0:	5f305852 	svcpl	0x00305852
     2b4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     2b8:	6c646e61 	stclvs	14, cr6, [r4], #-388
	}
	interpolating = 1;
}
/* interpolate our pose, this should be called at about 30Hz. */
#define WAIT_SLOP_FACTOR 10
int BioloidControllerEx_interpolateStep(bool fWait) {
     2bc:	99007265 	stmdbls	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     2c0:	43000002 	movwmi	r0, #2	; 0x2

	if (interpolating == 0)
     2c4:	525f4e41 	subspl	r4, pc, #1040	; 0x410
		return 0;
	int i;
	int complete = poseSize;
     2c8:	495f3158 	ldmdbmi	pc, {r3, r4, r6, r8, ip, sp}^
	if (!fWait) {
     2cc:	61485152 	cmpvs	r8, r2, asr r1
		if (getMillis() < (nextframe_ - WAIT_SLOP_FACTOR)) {
     2d0:	656c646e 	strbvs	r6, [ip, #-1134]!
     2d4:	02ad0072 	adceq	r0, sp, #114	; 0x72
     2d8:	41430000 	cmpmi	r3, r0
			return (getMillis() - nextframe_); // We still have some time to do something...
     2dc:	43535f4e 	cmpmi	r3, #312	; 0x138
     2e0:	52495f45 	subpl	r5, r9, #276	; 0x114
     2e4:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
#ifdef MILLIS
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	while (getMillis() < nextframe_);
     2e8:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     2ec:	0002c100 	andeq	ip, r2, r0, lsl #2
     2f0:	54584500 	ldrbpl	r4, [r8], #-1280
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
     2f4:	355f3949 	ldrbcc	r3, [pc, #-2377]	; fffff9b3 <SCS_BASE+0x1fff19b3>
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     2f8:	5152495f 	cmppl	r2, pc, asr r9
     2fc:	646e6148 	strbtvs	r6, [lr], #-328
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
     300:	0072656c 	rsbseq	r6, r2, ip, ror #10
     304:	000002d5 	ldrdeq	r0, [r0], -r5
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     308:	314d4954 	cmpcc	sp, r4, asr r9
		int diff = nextpose_[i] - pose_[i];
     30c:	4b52425f 	blmi	1490c90 <__Stack_Size+0x1490890>
     310:	5152495f 	cmppl	r2, pc, asr r9
     314:	646e6148 	strbtvs	r6, [lr], #-328
     318:	0072656c 	rsbseq	r6, r2, ip, ror #10
     31c:	000002e9 	andeq	r0, r0, r9, ror #5
		if (diff == 0) {
     320:	314d4954 	cmpcc	sp, r4, asr r9
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
     324:	5f50555f 	svcpl	0x0050555f
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
     328:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
		int diff = nextpose_[i] - pose_[i];
		if (diff == 0) {
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
     32c:	6c646e61 	stclvs	14, cr6, [r4], #-388
					pose_[i] = nextpose_[i];
     330:	fd007265 	stc2	2, cr7, [r0, #-404]
					complete--;
     334:	54000002 	strpl	r0, [r0], #-2
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
     338:	5f314d49 	svcpl	0x00314d49
     33c:	5f475254 	svcpl	0x00475254
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
     340:	5f4d4f43 	svcpl	0x004d4f43
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
     344:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
     348:	6c646e61 	stclvs	14, cr6, [r4], #-388
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     34c:	11007265 	tstne	r0, r5, ror #4
     350:	54000003 	strpl	r0, [r0], #-3
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif

	}
	if (complete <= 0)
     354:	5f314d49 	svcpl	0x00314d49
		interpolating = 0;
     358:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^
	BioloidControllerEx_writePose();
     35c:	61485152 	cmpvs	r8, r2, asr r1
     360:	656c646e 	strbvs	r6, [ip, #-1134]!
	return 0;
}
     364:	03250072 	teqeq	r5, #114	; 0x72
     368:	49540000 	ldmdbmi	r4, {}^
     36c:	495f324d 	ldmdbmi	pc, {r0, r2, r3, r6, r9, ip, sp}^
     370:	61485152 	cmpvs	r8, r2, asr r1
     374:	656c646e 	strbvs	r6, [ip, #-1134]!
     378:	03390072 	teqeq	r9, #114	; 0x72
     37c:	49540000 	ldmdbmi	r4, {}^
     380:	495f334d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, ip, sp}^
	for (i = 0; i < poseSize; i++)
		//nextpose_[i] = pgm_read_word_near(addr+1+i) << BIOLOID_SHIFT;
		nextpose_[i] = pgm_read_word_near(addr + 1 + i);
}
/* read in current servo positions to the pose. */
void BioloidControllerEx_readPose() {
     384:	61485152 	cmpvs	r8, r2, asr r1
     388:	656c646e 	strbvs	r6, [ip, #-1134]!
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
		//pose_[i] = dxl_read_word(id_[i],AXM_PRESENT_POSITION_L)<<BIOLOID_SHIFT;
		pose_[i] = dxl_read_word(id_[i], AXM_PRESENT_POSITION_L);
     38c:	034d0072 	movteq	r0, #53362	; 0xd072
     390:	49540000 	ldmdbmi	r4, {}^
     394:	495f344d 	ldmdbmi	pc, {r0, r2, r3, r6, sl, ip, sp}^
     398:	61485152 	cmpvs	r8, r2, asr r1
     39c:	656c646e 	strbvs	r6, [ip, #-1134]!
		PrintChar(id_[i]);
		PrintString(" - ");
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
     3a0:	03610072 	cmneq	r1, #114	; 0x72

#ifdef DEBUG_BIOLOIDEX
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
     3a4:	32490000 	subcc	r0, r9, #0	; 0x0
     3a8:	455f3143 	ldrbmi	r3, [pc, #-323]	; 26d <_Minimum_Stack_Size+0x16d>
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
	}
}
     3ac:	52495f56 	subpl	r5, r9, #344	; 0x158
     3b0:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     3b4:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     3b8:	00037500 	andeq	r7, r3, r0, lsl #10
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitPosY[GaitCurrentLegNr] = -3 * g_InControlState.LegLiftHeight
				/ (3 + g_InControlState.gaitCur.HalfLiftHeight); // Easier to shift between div factor: /1 (3/3), /2 (3/6) and 3/4
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y
     3bc:	43324900 	teqmi	r2, #0	; 0x0
				/ g_InControlState.gaitCur.LiftDivFactor;
	}

	//Optional Half heigth Rear 5 LiftedPos (5 lifted positions)
	else if (((g_InControlState.gaitCur.NrLiftedPos == 5 && (LegStep == -2)))
     3c0:	52455f31 	subpl	r5, r5, #196	; 0xc4
     3c4:	5152495f 	cmppl	r2, pc, asr r9
     3c8:	646e6148 	strbtvs	r6, [lr], #-328
     3cc:	0072656c 	rsbseq	r6, r2, ip, ror #10
     3d0:	00000389 	andeq	r0, r0, r9, lsl #7
     3d4:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
     3d8:	5f56455f 	svcpl	0x0056455f
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = -g_InControlState.TravelLength.x / 2;
     3dc:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     3e0:	6c646e61 	stclvs	14, cr6, [r4], #-388
     3e4:	9d007265 	sfmls	f7, 4, [r0, #-404]
     3e8:	49000003 	stmdbmi	r0, {r0, r1}
     3ec:	5f324332 	svcpl	0x00324332
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
     3f0:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^
     3f4:	61485152 	cmpvs	r8, r2, asr r1
     3f8:	656c646e 	strbvs	r6, [ip, #-1134]!
     3fc:	03b10072 	undefined instruction 0x03b10072
     400:	50530000 	subspl	r0, r3, r0
		GaitPosZ[GaitCurrentLegNr] = -g_InControlState.TravelLength.z / 2;
     404:	495f3149 	ldmdbmi	pc, {r0, r3, r6, r8, ip, sp}^
     408:	61485152 	cmpvs	r8, r2, asr r1
     40c:	656c646e 	strbvs	r6, [ip, #-1134]!
     410:	03c50072 	biceq	r0, r5, #114	; 0x72
		GaitRotY[GaitCurrentLegNr] = -g_InControlState.TravelLength.y / 2;
     414:	50530000 	subspl	r0, r3, r0
     418:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^
     41c:	61485152 	cmpvs	r8, r2, asr r1
     420:	656c646e 	strbvs	r6, [ip, #-1134]!
	}

	//Optional Half heigth Front 5 LiftedPos (5 lifted positions)
	else if ((g_InControlState.gaitCur.NrLiftedPos == 5)
     424:	03d90072 	bicseq	r0, r9, #114	; 0x72
     428:	53550000 	cmppl	r5, #0	; 0x0
     42c:	32545241 	subscc	r5, r4, #268435460	; 0x10000004
     430:	5152495f 	cmppl	r2, pc, asr r9
     434:	646e6148 	strbtvs	r6, [lr], #-328
     438:	0072656c 	rsbseq	r6, r2, ip, ror #10
			&& (LegStep == 2
					|| LegStep == -(g_InControlState.gaitCur.StepsInGait - 2))
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
     43c:	000003ed 	andeq	r0, r0, sp, ror #7
     440:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     444:	315f3531 	cmpcc	pc, r1, lsr r5
     448:	52495f30 	subpl	r5, r9, #192	; 0xc0
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
     44c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     450:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     454:	00040100 	andeq	r0, r4, r0, lsl #2
     458:	43545200 	cmpmi	r4, #0	; 0x0
     45c:	72616c41 	rsbvc	r6, r1, #16640	; 0x4100
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
     460:	52495f6d 	subpl	r5, r9, #436	; 0x1b4
     464:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     468:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     46c:	00041500 	andeq	r1, r4, r0, lsl #10
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y / 2;
     470:	42535500 	subsmi	r5, r3, #0	; 0x0
     474:	656b6157 	strbvs	r6, [fp, #-343]!
     478:	495f7055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, sp, lr}^
     47c:	61485152 	cmpvs	r8, r2, asr r1
	}
	//_B_
	//Leg front down position //bug here?  From _A_ to _B_ there should only be one gaitstep, not 2!
	//For example, where is the case of LegStep==0+2 executed when NRLiftedPos=3?
	else if ((LegStep == g_InControlState.gaitCur.FrontDownPos
     480:	656c646e 	strbvs	r6, [ip, #-1134]!
     484:	04290072 	strteq	r0, [r9], #-114
     488:	49540000 	ldmdbmi	r4, {}^
     48c:	425f384d 	subsmi	r3, pc, #5046272	; 0x4d0000
     490:	495f4b52 	ldmdbmi	pc, {r1, r4, r6, r8, r9, fp, lr}^
     494:	61485152 	cmpvs	r8, r2, asr r1
     498:	656c646e 	strbvs	r6, [ip, #-1134]!
     49c:	043d0072 	ldrteq	r0, [sp], #-114
			|| LegStep
					== -(g_InControlState.gaitCur.StepsInGait
							- g_InControlState.gaitCur.FrontDownPos))
			&& GaitPosY[GaitCurrentLegNr] < 0) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
     4a0:	49540000 	ldmdbmi	r4, {}^
     4a4:	555f384d 	ldrbpl	r3, [pc, #-2125]	; fffffc5f <SCS_BASE+0x1fff1c5f>
     4a8:	52495f50 	subpl	r5, r9, #320	; 0x140
     4ac:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
     4b0:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     4b4:	00045100 	andeq	r5, r4, r0, lsl #2
     4b8:	4d495400 	cfstrdmi	mvd5, [r9]
     4bc:	52545f38 	subspl	r5, r4, #224	; 0xe0
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y / 2;
     4c0:	4f435f47 	svcmi	0x00435f47
     4c4:	52495f4d 	subpl	r5, r9, #308	; 0x134
     4c8:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
		GaitPosY[GaitCurrentLegNr] = 0;
     4cc:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     4d0:	00046500 	andeq	r6, r4, r0, lsl #10
	}

	//Move body forward
	else {
		GaitPosX[GaitCurrentLegNr] = GaitPosX[GaitCurrentLegNr]
     4d4:	4d495400 	cfstrdmi	mvd5, [r9]
     4d8:	43435f38 	movtmi	r5, #16184	; 0x3f38
     4dc:	5152495f 	cmppl	r2, pc, asr r9
     4e0:	646e6148 	strbtvs	r6, [lr], #-328
     4e4:	0072656c 	rsbseq	r6, r2, ip, ror #10
     4e8:	00000479 	andeq	r0, r0, r9, ror r4
				- (g_InControlState.TravelLength.x
						/ (short) g_InControlState.gaitCur.TLDivFactor);
		GaitPosY[GaitCurrentLegNr] = 0;
     4ec:	33434441 	movtcc	r4, #13377	; 0x3441
     4f0:	5152495f 	cmppl	r2, pc, asr r9
     4f4:	646e6148 	strbtvs	r6, [lr], #-328
		GaitPosZ[GaitCurrentLegNr] = GaitPosZ[GaitCurrentLegNr]
     4f8:	0072656c 	rsbseq	r6, r2, ip, ror #10
     4fc:	0000048d 	andeq	r0, r0, sp, lsl #9
     500:	434d5346 	movtmi	r5, #54086	; 0xd346
     504:	5152495f 	cmppl	r2, pc, asr r9
				- (g_InControlState.TravelLength.z
						/ (short) g_InControlState.gaitCur.TLDivFactor);
		GaitRotY[GaitCurrentLegNr] = GaitRotY[GaitCurrentLegNr]
     508:	646e6148 	strbtvs	r6, [lr], #-328
     50c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     510:	000004a1 	andeq	r0, r0, r1, lsr #9
     514:	4f494453 	svcmi	0x00494453
				- (g_InControlState.TravelLength.y
						/ (short) g_InControlState.gaitCur.TLDivFactor);
	}

}
     518:	5152495f 	cmppl	r2, pc, asr r9
     51c:	646e6148 	strbtvs	r6, [lr], #-328
     520:	0072656c 	rsbseq	r6, r2, ip, ror #10
     524:	000004b5 	strheq	r0, [r0], -r5
     528:	354d4954 	strbcc	r4, [sp, #-2388]
     52c:	5152495f 	cmppl	r2, pc, asr r9
     530:	646e6148 	strbtvs	r6, [lr], #-328

}

//--------------------------------------------------------------------
//[GAIT Sequence]
void GaitSeq(void) {
     534:	0072656c 	rsbseq	r6, r2, ip, ror #10
	//Check if the Gait is in motion - If not if we are going to start a motion try to align our Gaitstep to start with a good foot
	// for the direction we are about to go...

	if (fWalking || (g_InControlState.ForceGaitStepCnt != 0))
     538:	000004c9 	andeq	r0, r0, r9, asr #9
     53c:	33495053 	movtcc	r5, #36947	; 0x9053
     540:	5152495f 	cmppl	r2, pc, asr r9
		TravelRequest = true;   // Is walking or was walking...
     544:	646e6148 	strbtvs	r6, [lr], #-328
     548:	0072656c 	rsbseq	r6, r2, ip, ror #10
	else {
		TravelRequest = (abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
     54c:	000004dd 	ldrdeq	r0, [r0], -sp
     550:	54524155 	ldrbpl	r4, [r2], #-341
     554:	52495f34 	subpl	r5, r9, #208	; 0xd0
     558:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     55c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     560:	0004f100 	andeq	pc, r4, r0, lsl #2
     564:	4d495400 	cfstrdmi	mvd5, [r9]
     568:	52495f36 	subpl	r5, r9, #216	; 0xd8
     56c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     570:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     574:	00050500 	andeq	r0, r5, r0, lsl #10
     578:	4d495400 	cfstrdmi	mvd5, [r9]
     57c:	52495f37 	subpl	r5, r9, #220	; 0xdc
				|| (abs(g_InControlState.TravelLength.y) > cTravelDeadZone);

		if (TravelRequest) {

		} else {    //Clear values under the cTravelDeadZone
			g_InControlState.TravelLength.x = 0;
     580:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
			g_InControlState.TravelLength.z = 0;
     584:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
			g_InControlState.TravelLength.y = 0; //Gait NOT in motion, return to home position
		}
	}

	//Calculate Gait sequence
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
     588:	00051900 	andeq	r1, r5, r0, lsl #18
     58c:	414d4400 	cmpmi	sp, r0, lsl #8
     590:	68435f32 	stmdavs	r3, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
		Gait(LegIndex);
     594:	656e6e61 	strbvs	r6, [lr, #-3681]!
			g_InControlState.TravelLength.y = 0; //Gait NOT in motion, return to home position
		}
	}

	//Calculate Gait sequence
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
     598:	495f316c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, ip, sp}^
     59c:	61485152 	cmpvs	r8, r2, asr r1
     5a0:	656c646e 	strbvs	r6, [ip, #-1134]!
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5a4:	052d0072 	streq	r0, [sp, #-114]!
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
     5a8:	4d440000 	stclmi	0, cr0, [r4]
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5ac:	435f3241 	cmpmi	pc, #268435460	; 0x10000004
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
     5b0:	6e6e6168 	powvsez	f6, f6, #0.0
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5b4:	5f326c65 	svcpl	0x00326c65
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
		g_InControlState.GaitStep = 1;
     5b8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     5bc:	6c646e61 	stclvs	14, cr6, [r4], #-388

	// If we have a force count decrement it now...
	if (g_InControlState.ForceGaitStepCnt)
     5c0:	41007265 	tstmi	r0, r5, ror #4
     5c4:	44000005 	strmi	r0, [r0], #-5
		g_InControlState.ForceGaitStepCnt--;
     5c8:	5f32414d 	svcpl	0x0032414d
}
     5cc:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     5d0:	336c656e 	cmncc	ip, #461373440	; 0x1b800000
     5d4:	5152495f 	cmppl	r2, pc, asr r9
     5d8:	646e6148 	strbtvs	r6, [lr], #-328
     5dc:	0072656c 	rsbseq	r6, r2, ip, ror #10
}
//--------------------------------------------------------------------
//[BalanceBody]
void BalanceBody(void) {

	TotalTransZ = TotalTransZ / BalanceDivFactor;
     5e0:	00000555 	andeq	r0, r0, r5, asr r5
     5e4:	32414d44 	subcc	r4, r1, #4352	; 0x1100
     5e8:	6168435f 	cmnvs	r8, pc, asr r3
     5ec:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     5f0:	5f355f34 	svcpl	0x00355f34
	TotalTransX = TotalTransX / BalanceDivFactor;
     5f4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     5f8:	6c646e61 	stclvs	14, cr6, [r4], #-388
     5fc:	69007265 	stmdbvs	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
	TotalTransY = TotalTransY / BalanceDivFactor;
     600:	55000005 	strpl	r0, [r0, #-5]
     604:	35545241 	ldrbcc	r5, [r4, #-577]
     608:	5152495f 	cmppl	r2, pc, asr r9
     60c:	646e6148 	strbtvs	r6, [lr], #-328

	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
		TotalXBal1 += 3600;

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
     610:	0072656c 	rsbseq	r6, r2, ip, ror #10
     614:	0000057f 	andeq	r0, r0, pc, ror r5
	TotalTransX = TotalTransX / BalanceDivFactor;
	TotalTransY = TotalTransY / BalanceDivFactor;

#ifndef QUADMODE // ??? on PhantomX Hex at no movment YBal1 = 1800, on Quad = 0...  Need to experiment
	if (TotalYBal1 > 0)        //Rotate balance circle by +/- 180 deg
		TotalYBal1 -= 1800;
     618:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     61c:	495f3354 	ldmdbmi	pc, {r2, r4, r6, r8, r9, ip, sp}^
	else
		TotalYBal1 += 1800;
     620:	61485152 	cmpvs	r8, r2, asr r1
#endif

	if (TotalZBal1 < -1800) //Compensate for extreme balance positions that causes overflow
     624:	656c646e 	strbvs	r6, [ip, #-1134]!
     628:	05950072 	ldreq	r0, [r5, #114]
     62c:	53550000 	cmppl	r5, #0	; 0x0
		TotalZBal1 += 3600;
     630:	31545241 	cmpcc	r4, r1, asr #4
     634:	5152495f 	cmppl	r2, pc, asr r9

	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
     638:	646e6148 	strbtvs	r6, [lr], #-328
     63c:	0072656c 	rsbseq	r6, r2, ip, ror #10
		TotalXBal1 += 3600;
     640:	000005ab 	andeq	r0, r0, fp, lsr #11
     644:	54737953 	ldrbtpl	r7, [r3], #-2387

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
     648:	486b6369 	stmdami	fp!, {r0, r3, r5, r6, r8, r9, sp, lr}^
     64c:	6c646e61 	stclvs	14, cr6, [r4], #-388
	TotalXBal1 = -TotalXBal1 / BalanceDivFactor;
     650:	00007265 	andeq	r7, r0, r5, ror #4
     654:	6f000000 	svcvs	0x00000000
	TotalZBal1 = TotalZBal1 / BalanceDivFactor;
     658:	02000009 	andeq	r0, r0, #9	; 0x9
	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
		TotalXBal1 += 3600;

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
	TotalXBal1 = -TotalXBal1 / BalanceDivFactor;
     65c:	000c1700 	andeq	r1, ip, r0, lsl #14
     660:	001ab700 	andseq	fp, sl, r0, lsl #14
	TotalZBal1 = TotalZBal1 / BalanceDivFactor;
     664:	00064000 	andeq	r4, r6, r0
     668:	6d6f4300 	stclvs	3, cr4, [pc]

}
     66c:	646e616d 	strbtvs	r6, [lr], #-365
     670:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
     674:	43747570 	cmnmi	r4, #469762048	; 0x1c000000
     678:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     67c:	656c6c6f 	strbvs	r6, [ip, #-3183]!
     680:	6e495f72 	mcrvs	15, 2, r5, cr9, cr2, {3}
     684:	4f007469 	svcmi	0x00007469
     688:	43000006 	movwmi	r0, #6	; 0x6
//sin4        - Output Sinus of AngleDeg
//cos4          - Output Cosinus of AngleDeg
void GetSinCos(short AngleDeg1) {
	short ABSAngleDeg1;   //Absolute value of the Angle in Degrees, decimals = 1
	//Get the absolute value of AngleDeg
	if (AngleDeg1 < 0)
     68c:	616d6d6f 	cmnvs	sp, pc, ror #26
     690:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
		ABSAngleDeg1 = AngleDeg1 * -1;
     694:	75706e49 	ldrbvc	r6, [r0, #-3657]!
     698:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
	else
		ABSAngleDeg1 = AngleDeg1;

	//Shift rotation to a full circle of 360 deg -> AngleDeg // 360
	if (AngleDeg1 < 0)    //Negative values
		AngleDeg1 = 3600 - (ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600)));
     69c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464
     6a0:	5f72656c 	svcpl	0x0072656c
     6a4:	6f6c6c41 	svcvs	0x006c6c41
     6a8:	6e6f4377 	mcrvs	3, 3, r4, cr15, cr7, {3}
     6ac:	6c6f7274 	sfmvs	f7, 2, [pc], #-464
     6b0:	4972656c 	ldmdbmi	r2!, {r2, r3, r5, r6, r8, sl, sp, lr}^
     6b4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     6b8:	74707572 	ldrbtvc	r7, [r0], #-1394
     6bc:	066a0073 	undefined
	else
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));

	if (AngleDeg1 >= 0 && AngleDeg1 <= 900)     // 0 to 90 deg
     6c0:	6f430000 	svcvs	0x00430000
     6c4:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
			{
		sin4 = pgm_read_word(&GetSin[AngleDeg1 / 5]); // 5 is the presision (0.5) of the table
     6c8:	54726564 	ldrbtpl	r6, [r2], #-1380
     6cc:	526e7275 	rsbpl	r7, lr, #1342177287	; 0x50000007
     6d0:	746f626f 	strbtvc	r6, [pc], #623	; 6d8 <__Stack_Size+0x2d8>
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
     6d4:	0066664f 	rsbeq	r6, r6, pc, asr #12
     6d8:	0000067e 	andeq	r0, r0, lr, ror r6
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));

	if (AngleDeg1 >= 0 && AngleDeg1 <= 900)     // 0 to 90 deg
			{
		sin4 = pgm_read_word(&GetSin[AngleDeg1 / 5]); // 5 is the presision (0.5) of the table
     6dc:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!
     6e0:	65646e61 	strbvs	r6, [r4, #-3681]!
     6e4:	6f435f72 	svcvs	0x00435f72
     6e8:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
     6ec:	00726564 	rsbseq	r6, r2, r4, ror #10
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
     6f0:	00000691 	muleq	r0, r1, r6
     6f4:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!
     6f8:	65646e61 	strbvs	r6, [r4, #-3681]!
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
     6fc:	65625f72 	strbvs	r5, [r2, #-3954]!
     700:	006e6967 	rsbeq	r6, lr, r7, ror #18
     704:	000006b8 	strheq	r0, [r0], -r8
     708:	636c6143 	cmnvs	ip, #-1073741808	; 0xc0000010
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     70c:	74616c75 	strbtvc	r6, [r1], #-3189
     710:	31584165 	cmpcc	r8, r5, ror #2
     714:	766f4d32 	undefined
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     718:	65705365 	ldrbvs	r5, [r0, #-869]!
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     71c:	26006465 	strcs	r6, [r0], -r5, ror #8
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     720:	72000007 	andvc	r0, r0, #7	; 0x7
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     724:	53646165 	cmnpl	r4, #1073741849	; 0x40000019
     728:	6f736e65 	svcvs	0x00736e65
     72c:	3a007372 	bcc	1d4fc <__Stack_Size+0x1d0fc>
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     730:	57000007 	strpl	r0, [r0, -r7]
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     734:	65746972 	ldrbvs	r6, [r4, #-2418]!
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     738:	7074754f 	rsbsvc	r7, r4, pc, asr #10
     73c:	00737475 	rsbseq	r7, r3, r5, ror r4
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
     740:	00000749 	andeq	r0, r0, r9, asr #14
     744:	676e6953 	undefined
     748:	654c656c 	strbvs	r6, [ip, #-1388]
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     74c:	6e6f4367 	cdpvs	3, 6, cr4, cr15, cr7, {3}
     750:	6c6f7274 	sfmvs	f7, 2, [pc], #-464
     754:	00075f00 	andeq	r5, r7, r0, lsl #30
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     758:	69614700 	stmdbvs	r1!, {r8, r9, sl, lr}^
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     75c:	6c655374 	stclvs	3, cr5, [r5], #-464
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     760:	00746365 	rsbseq	r6, r4, r5, ror #6
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     764:	00000770 	andeq	r0, r0, r0, ror r7
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     768:	74696147 	strbtvc	r6, [r9], #-327
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     76c:	0007ab00 	andeq	sl, r7, r0, lsl #22
     770:	69614700 	stmdbvs	r1!, {r8, r9, sl, lr}^
     774:	71655374 	smcvc	21812
     778:	0007c100 	andeq	ip, r7, r0, lsl #2
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     77c:	6c614200 	sfmvs	f4, 2, [r1]
     780:	65636e61 	strbvs	r6, [r3, #-3681]!
     784:	79646f42 	stmdbvc	r4!, {r1, r6, r8, r9, sl, fp, sp, lr}^
     788:	0007d700 	andeq	sp, r7, r0, lsl #14
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
     78c:	74654700 	strbtvc	r4, [r5], #-1792
     790:	436e6953 	cmnmi	lr, #1359872	; 0x14c000
     794:	1200736f 	andne	r7, r0, #-1140850687	; 0xbc000001
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     798:	47000008 	strmi	r0, [r0, -r8]
     79c:	72417465 	subvc	r7, r1, #1694498816	; 0x65000000
     7a0:	736f4363 	cmnvc	pc, #-1946157055	; 0x8c000001
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7a4:	00085100 	andeq	r5, r8, r0, lsl #2
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7a8:	71736900 	cmnvc	r3, r0, lsl #18
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7ac:	32337472 	eorscc	r7, r3, #1912602624	; 0x72000000
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7b0:	0008a600 	andeq	sl, r8, r0, lsl #12
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7b4:	74654700 	strbtvc	r4, [r5], #-1792
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7b8:	6e615441 	cdpvs	4, 6, cr5, cr1, cr1, {2}
     7bc:	08e50032 	stmiaeq	r5!, {r1, r4, r5}^
     7c0:	61420000 	cmpvs	r2, r0
     7c4:	6c61436c 	stclvs	3, cr4, [r1], #-432
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7c8:	656e4f63 	strbvs	r4, [lr, #-3939]!
     7cc:	0067654c 	rsbeq	r6, r7, ip, asr #10
     7d0:	00000978 	andeq	r0, r0, r8, ror r9
	//Shift rotation to a full circle of 360 deg -> AngleDeg // 360
	if (AngleDeg1 < 0)    //Negative values
		AngleDeg1 = 3600 - (ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600)));
	else
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));
     7d4:	79646f42 	stmdbvc	r4!, {r1, r6, r8, r9, sl, fp, sp, lr}^
     7d8:	69004b46 	stmdbvs	r0, {r1, r2, r6, r8, r9, fp, lr}
     7dc:	4c00000a 	stcmi	0, cr0, [r0], {10}
     7e0:	4b496765 	blmi	125a57c <__Stack_Size+0x125a17c>
     7e4:	000b1900 	andeq	r1, fp, r0, lsl #18
     7e8:	65684300 	strbvs	r4, [r8, #-768]!
     7ec:	65536b63 	ldrbvs	r6, [r3, #-2915]
     7f0:	416f7672 	smcmi	63330
     7f4:	656c676e 	strbvs	r6, [ip, #-1902]!
     7f8:	6e756f42 	cdpvs	15, 7, cr6, cr5, cr2, {2}
	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
	}
}
     7fc:	56007364 	strpl	r7, [r0], -r4, ror #6
     800:	4300000b 	movwmi	r0, #11	; 0xb
     804:	6b636568 	blvs	18d9dac <__Stack_Size+0x18d99ac>
     808:	6c676e41 	stclvs	14, cr6, [r7], #-260
     80c:	13007365 	movwne	r7, #869	; 0x365
//cos4        - Input Cosinus
//AngleRad4     - Output Angle in AngleRad4
long GetArcCos(short cos4) {
	boolean NegativeValue/*:1*/;    //If the the value is Negative
	//Check for negative value
	if (cos4 < 0) {
     810:	5300000c 	movwpl	r0, #12	; 0xc
     814:	746f6f6d 	strbtvc	r6, [pc], #3949	; 81c <__Stack_Size+0x41c>
     818:	6e6f4368 	cdpvs	3, 6, cr4, cr15, cr8, {3}
		cos4 = -cos4;
     81c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464
     820:	000c5c00 	andeq	r5, ip, r0, lsl #24
		NegativeValue = 1;
	} else
		NegativeValue = 0;

	//Limit cos4 to his maximal value
	cos4 = min(cos4, c4DEC);
     824:	74654700 	strbtvc	r4, [r5], #-1792
     828:	7367654c 	cmnvc	r7, #318767104	; 0x13000000
     82c:	654c5a58 	strbvs	r5, [ip, #-2648]

	if ((cos4 >= 0) && (cos4 < 9000)) {
     830:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     834:	000c7600 	andeq	r7, ip, r0, lsl #12
     838:	6a644100 	bvs	1910c40 <__Stack_Size+0x1910840>
		AngleRad4 = (byte) pgm_read_byte(&GetACos[cos4 / 79]);
     83c:	4c747375 	ldclmi	3, cr7, [r4], #-468
     840:	6f506765 	svcvs	0x00506765
     844:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
		AngleRad4 = ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255) ;
     848:	00736e6f 	rsbseq	r6, r3, pc, ror #28
     84c:	00000cad 	andeq	r0, r0, sp, lsr #25
	} else if ((cos4 >= 9000) && (cos4 < 9900)) {
     850:	65736552 	ldrbvs	r6, [r3, #-1362]!
     854:	67654c74 	undefined
     858:	74696e49 	strbtvc	r6, [r9], #-3657
     85c:	6c676e41 	stclvs	14, cr6, [r7], #-260
		AngleRad4 = (byte) pgm_read_byte(&GetACos[(cos4 - 9000) / 8 + 114]);
     860:	bc007365 	stclt	3, cr7, [r0], {101}
     864:	5200000c 	andpl	r0, r0, #12	; 0xc
     868:	7461746f 	strbtvc	r7, [r1], #-1135
     86c:	67654c65 	strbvs	r4, [r5, -r5, ror #24]!
     870:	74696e49 	strbtvc	r6, [r9], #-3657
     874:	6c676e41 	stclvs	14, cr6, [r7], #-260
		AngleRad4 = (long) ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255)
     878:	d7007365 	strle	r7, [r0, -r5, ror #6]
	} else if ((cos4 >= 9900) && (cos4 <= 10000)) {
     87c:	4100000c 	tstmi	r0, ip
     880:	73756a64 	cmnvc	r5, #409600	; 0x64000
     884:	67654c74 	undefined
		AngleRad4 = (byte) pgm_read_byte(&GetACos[(cos4 - 9900) / 2 + 227]);
     888:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
     88c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     890:	426f5473 	rsbmi	r5, pc, #1929379840	; 0x73000000
		AngleRad4 = (long) ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255)
     894:	4879646f 	ldmdami	r9!, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
     898:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
     89c:	0d0f0074 	stceq	0, cr0, [pc, #-464]
     8a0:	68430000 	stmdavs	r3, {}^
     8a4:	566b6365 	strbtpl	r6, [fp], -r5, ror #6
     8a8:	61746c6f 	cmnvs	r4, pc, ror #24
     8ac:	29006567 	stmdbcs	r0, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
	}

	//Add negative sign
	if (NegativeValue)
		AngleRad4 = 31416 - AngleRad4;
     8b0:	4200000d 	andmi	r0, r0, #13	; 0xd
     8b4:	676b6361 	strbvs	r6, [fp, -r1, ror #6]!
     8b8:	6e756f72 	mrcvs	15, 3, r6, cr5, cr2, {3}
     8bc:	6f725064 	svcvs	0x00725064
     8c0:	73736563 	cmnvc	r3, #415236096	; 0x18c00000

	return AngleRad4;
}
     8c4:	000d3f00 	andeq	r3, sp, r0, lsl #30
     8c8:	6c644900 	stclvs	9, cr4, [r4]
     8cc:	6d695465 	cfstrdvs	mvd5, [r9, #-404]!
     8d0:	0d550065 	ldcleq	0, cr0, [r5, #-404]
     8d4:	65530000 	ldrbvs	r0, [r3]
     8d8:	67655274 	undefined

unsigned long isqrt32(unsigned long n) //
{
     8dc:	6c416e4f 	mcrrvs	14, 4, r6, r1, cr15
     8e0:	7265536c 	rsbvc	r5, r5, #-1342177279	; 0xb0000001

	root = 0;
	remainder = n;
	place = 0x40000000; // OR place = 0x4000; OR place = 0x40; - respectively

	while (place > remainder)
     8e4:	00736f76 	rsbseq	r6, r3, r6, ror pc
     8e8:	00000dbd 	strheq	r0, [r0], -sp
     8ec:	656b614d 	strbvs	r6, [fp, #-333]!
		place = place >> 2;
	while (place) {
		if (remainder >= root + place) {
     8f0:	65727553 	ldrbvs	r7, [r2, #-1363]!
			remainder = remainder - root - place;
     8f4:	76726553 	undefined
     8f8:	7241736f 	subvc	r7, r1, #-1140850687	; 0xbc000001
			root = root + (place << 1);
     8fc:	006e4f65 	rsbeq	r4, lr, r5, ror #30

	while (place > remainder)
		place = place >> 2;
	while (place) {
		if (remainder >= root + place) {
			remainder = remainder - root - place;
     900:	00000dec 	andeq	r0, r0, ip, ror #27
			root = root + (place << 1);
		}
		root = root >> 1;
		place = place >> 2;
     904:	69676542 	stmdbvs	r7!, {r1, r6, r8, sl, sp, lr}^
	remainder = n;
	place = 0x40000000; // OR place = 0x4000; OR place = 0x40; - respectively

	while (place > remainder)
		place = place >> 2;
	while (place) {
     908:	7265536e 	rsbvc	r5, r5, #-1207959551	; 0xb8000001
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
	XYhyp2 = isqrt32(
     90c:	70556f76 	subsvc	r6, r5, r6, ror pc
//(GETATAN2) Simplyfied ArcTan2 function based on fixed point ArcCos
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
     910:	65746164 	ldrbvs	r6, [r4, #-356]!
	XYhyp2 = isqrt32(
     914:	000e1500 	andeq	r1, lr, r0, lsl #10
     918:	65724600 	ldrbvs	r4, [r2, #-1536]!
//(GETATAN2) Simplyfied ArcTan2 function based on fixed point ArcCos
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
     91c:	72655365 	rsbvc	r5, r5, #-1811939327	; 0x94000001
	XYhyp2 = isqrt32(
     920:	00736f76 	rsbseq	r6, r3, r6, ror pc
     924:	00000e44 	andeq	r0, r0, r4, asr #28
     928:	76726553 	undefined
			((long) AtanX * AtanX * c4DEC) + ((long) AtanY * AtanY * c4DEC));
	GetArcCos(((long) AtanX * (long) c6DEC) / (long) XYhyp2);
     92c:	6e495f6f 	cdpvs	15, 4, cr5, cr9, cr15, {3}
     930:	59007469 	stmdbpl	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
     934:	7300000e 	movwvc	r0, #14	; 0xe
     938:	70757465 	rsbsvc	r7, r5, r5, ror #8
     93c:	656f6850 	strbvs	r6, [pc, #-2128]!	; f4 <_Minimum_Stack_Size-0xc>
     940:	0078696e 	rsbseq	r6, r8, lr, ror #18
     944:	00000e8c 	andeq	r0, r0, ip, lsl #29

	if (AtanY < 0) // removed overhead... Atan4 = AngleRad4 * (AtanY/abs(AtanY));
     948:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!
		Atan4 = -AngleRad4;
     94c:	65537469 	ldrbvs	r7, [r3, #-1129]
	else
		Atan4 = AngleRad4;
     950:	446f7672 	strbtmi	r7, [pc], #1650	; 958 <__Stack_Size+0x558>
	XYhyp2 = isqrt32(
			((long) AtanX * AtanX * c4DEC) + ((long) AtanY * AtanY * c4DEC));
	GetArcCos(((long) AtanX * (long) c6DEC) / (long) XYhyp2);

	if (AtanY < 0) // removed overhead... Atan4 = AngleRad4 * (AtanY/abs(AtanY));
		Atan4 = -AngleRad4;
     954:	65766972 	ldrbvs	r6, [r6, #-2418]!
	else
		Atan4 = AngleRad4;
     958:	0f000072 	svceq	0x00000072
     95c:	754f0000 	strbvc	r0, [pc, #0]	; 964 <__Stack_Size+0x564>
	return Atan4;
}
     960:	74757074 	ldrbtvc	r7, [r5], #-116
     964:	76726553 	undefined
     968:	666e496f 	strbtvs	r4, [lr], -pc, ror #18
     96c:	726f466f 	rsbvc	r4, pc, #116391936	; 0x6f00000

}

//--------------------------------------------------------------------
//[BalCalcOneLeg]
void BalCalcOneLeg(long PosX, long PosZ, long PosY, byte BalLegNr) {
     970:	0067654c 	rsbeq	r6, r7, ip, asr #10
	long CPR_Y;            //Final Y value for centerpoint of rotation
	long CPR_Z;            //Final Z value for centerpoint of rotation

	long lAtan;
	//Calculating totals from center of the body to the feet
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BalLegNr]) + PosZ;
     974:	00000f77 	andeq	r0, r0, r7, ror pc
     978:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
	CPR_X = (short) pgm_read_word(&cOffsetX[BalLegNr]) + PosX;
     97c:	64705574 	ldrbtvs	r5, [r0], #-1396
     980:	53657461 	cmnpl	r5, #1627389952	; 0x61000000
	CPR_Y = 150 + PosY; // using the value 150 to lower the centerpoint of rotation 'g_InControlState.BodyPos.y +

	TotalTransY += (long) PosY;
     984:	6f767265 	svcvs	0x00767265
     988:	0fa20073 	svceq	0x00a20073
     98c:	65470000 	strbvs	r0, [r7]
	TotalTransZ += (long) CPR_Z;
     990:	74614274 	strbtvc	r4, [r1], #-628
     994:	79726574 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     998:	746c6f56 	strbtvc	r6, [ip], #-3926
	TotalTransX += (long) CPR_X;
     99c:	00656761 	rsbeq	r6, r5, r1, ror #14
     9a0:	00000fe0 	andeq	r0, r0, r0, ror #31
     9a4:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!
     9a8:	65646e61 	strbvs	r6, [r4, #-3681]!

	lAtan = GetATan2(CPR_X, CPR_Z);
     9ac:	65525f72 	ldrbvs	r5, [r2, #-3954]
	TotalYBal1 += (lAtan * 1800) / 31415;
     9b0:	734d6461 	movtvc	r6, #54369	; 0xd461
     9b4:	f9007367 	undefined instruction 0xf9007367
     9b8:	4300000f 	movwmi	r0, #15	; 0xf
     9bc:	616d6d6f 	cmnvs	sp, pc, ror #26
     9c0:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
     9c4:	75706e49 	ldrbvc	r6, [r0, #-3657]!
     9c8:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     9cc:	6c6f7274 	sfmvs	f7, 2, [pc], #-464

	lAtan = GetATan2(CPR_X, CPR_Y);
     9d0:	5f72656c 	svcpl	0x0072656c
     9d4:	746e6f43 	strbtvc	r6, [lr], #-3907
	TotalZBal1 += ((lAtan * 1800) / 31415) - 900; //Rotate balance circle 90 deg
     9d8:	496c6f72 	stmdbmi	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
     9dc:	7475706e 	ldrbtvc	r7, [r5], #-110
     9e0:	00109600 	andseq	r9, r0, r0, lsl #12
     9e4:	67694200 	strbvs	r4, [r9, -r0, lsl #4]!
     9e8:	69616d5f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
     9ec:	12ab006e 	adcne	r0, fp, #110	; 0x6e
     9f0:	554e0000 	strbpl	r0, [lr]
     9f4:	41475f4d 	cmpmi	r7, sp, asr #30
     9f8:	00535449 	subseq	r5, r3, r9, asr #8
     9fc:	000012be 	strheq	r1, [r0], -lr

	lAtan = GetATan2(CPR_Z, CPR_Y);
     a00:	44665f67 	strbtmi	r5, [r6], #-3943
     a04:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
	TotalXBal1 += ((lAtan * 1800) / 31415) - 900; //Rotate balance circle 90 deg
     a08:	7074754f 	rsbsvc	r7, r4, pc, asr #10
     a0c:	d1007475 	tstle	r0, r5, ror r4
     a10:	67000012 	smladvs	r0, r2, r0, r0
     a14:	6e45665f 	mcrvs	6, 2, r6, cr5, cr15, {2}
     a18:	656c6261 	strbvs	r6, [ip, #-609]!
     a1c:	76726553 	undefined
     a20:	e400736f 	str	r7, [r0], #-879
     a24:	67000012 	smladvs	r0, r2, r0, r0

}
     a28:	6f52665f 	svcvs	0x0052665f
     a2c:	55746f62 	ldrbpl	r6, [r4, #-3938]!
     a30:	64697370 	strbtvs	r7, [r9], #-880
     a34:	776f4465 	strbvc	r4, [pc, -r5, ror #8]!
     a38:	12f7006e 	rscsne	r0, r7, #110	; 0x6e
     a3c:	5f670000 	svcpl	0x00670000
     a40:	6f436e49 	svcvs	0x00436e49
     a44:	6f72746e 	svcvs	0x0072746e
     a48:	6174536c 	cmnvs	r4, ip, ror #6
     a4c:	19006574 	stmdbne	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
//SinG                  - Sin buffer for BodyRotZ
//CosG               - Cos buffer for BodyRotZ
//BodyFKPosX         - Output Position X of feet with Rotation
//BodyFKPosY         - Output Position Y of feet with Rotation
//BodyFKPosZ         - Output Position Z of feet with Rotation
void BodyFK(short PosX, short PosZ, short PosY, short RotationY, byte BodyIKLeg) {
     a50:	67000013 	smladvs	r0, r3, r0, r0
     a54:	4862615f 	stmdami	r2!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
	short CPR_X;            //Final X value for centerpoint of rotation
	short CPR_Y;            //Final Y value for centerpoint of rotation
	short CPR_Z;            //Final Z value for centerpoint of rotation

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
     a58:	6e497865 	cdpvs	8, 4, cr7, cr9, cr5, {3}
     a5c:	005a5874 	subseq	r5, sl, r4, ror r8
     a60:	00001330 	andeq	r1, r0, r0, lsr r3
//SinG                  - Sin buffer for BodyRotZ
//CosG               - Cos buffer for BodyRotZ
//BodyFKPosX         - Output Position X of feet with Rotation
//BodyFKPosY         - Output Position Y of feet with Rotation
//BodyFKPosZ         - Output Position Z of feet with Rotation
void BodyFK(short PosX, short PosZ, short PosY, short RotationY, byte BodyIKLeg) {
     a64:	62615f67 	rsbvs	r5, r1, #412	; 0x19c
	short CPR_X;            //Final X value for centerpoint of rotation
	short CPR_Y;            //Final Y value for centerpoint of rotation
	short CPR_Z;            //Final Z value for centerpoint of rotation

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
     a68:	4d786548 	cfldr64mi	mvdx6, [r8, #-288]!
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
     a6c:	6f427861 	svcvs	0x00427861
     a70:	00597964 	subseq	r7, r9, r4, ror #18
     a74:	00001347 	andeq	r1, r0, r7, asr #6

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     a78:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BodyIKLeg]) + PosZ
     a7c:	59005674 	stmdbpl	r0, {r2, r4, r5, r6, r9, sl, ip, lr}
     a80:	72000013 	andvc	r0, r0, #19	; 0x13
	//Successive global rotation matrix:
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
     a84:	74686769 	strbtvc	r6, [r8], #-1897
     a88:	136b0048 	cmnne	fp, #72	; 0x48

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BodyIKLeg]) + PosZ
     a8c:	656c0000 	strbvs	r0, [ip]!
	//Successive global rotation matrix:
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
     a90:	00567466 	subseq	r7, r6, r6, ror #8
     a94:	0000137d 	andeq	r1, r0, sp, ror r3
	SinG4 = sin4;
     a98:	7466656c 	strbtvc	r6, [r6], #-1388
	CosG4 = cos4;
     a9c:	138f0048 	orrne	r0, pc, #72	; 0x48
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
	SinG4 = sin4;
     aa0:	78650000 	stmdavc	r5!, {}^
	CosG4 = cos4;
     aa4:	13b10074 	undefined instruction 0x13b10074
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
	SinG4 = sin4;
     aa8:	61760000 	cmnvs	r6, r0
	CosG4 = cos4;

	GetSinCos(g_InControlState.BodyRot1.z + TotalZBal1);
     aac:	c300736c 	movwgt	r7, #876	; 0x36c
	SinB4 = sin4;
     ab0:	63000013 	movwvs	r0, #19	; 0x13
     ab4:	6b636568 	blvs	18da05c <__Stack_Size+0x18d9c5c>
	CosB4 = cos4;
     ab8:	006d7573 	rsbeq	r7, sp, r3, ror r5

	GetSinCos(g_InControlState.BodyRot1.y + (RotationY * c1DEC) + TotalYBal1);
     abc:	000013d5 	ldrdeq	r1, [r0], -r5
     ac0:	6c755f67 	ldclvs	15, cr5, [r5], #-412
     ac4:	7473614c 	ldrbtvc	r6, [r3], #-332
     ac8:	5467734d 	strbtpl	r7, [r7], #-845
     acc:	00656d69 	rsbeq	r6, r5, r9, ror #26

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     ad0:	000013e7 	andeq	r1, r0, r7, ror #7
     ad4:	47735f67 	ldrbmi	r5, [r3, -r7, ror #30]!
     ad8:	434d5350 	movtmi	r5, #54096	; 0xd350
     adc:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     ae0:	656c6c6f 	strbvs	r6, [ip, #-3183]!
     ae4:	13f90072 	mvnsne	r0, #114	; 0x72
     ae8:	5f670000 	svcpl	0x00670000
     aec:	6e794466 	cdpvs	4, 7, cr4, cr9, cr6, {3}
     af0:	63696d61 	cmnvs	r9, #6208	; 0x1840
     af4:	5867654c 	stmdapl	r7!, {r2, r3, r6, r8, sl, sp, lr}^
     af8:	6e654c5a 	mcrvs	12, 3, r4, cr5, cr10, {2}
     afc:	00687467 	rsbeq	r7, r8, r7, ror #8
     b00:	0000140b 	andeq	r1, r0, fp, lsl #8
     b04:	65535047 	ldrbvs	r5, [r3, #-71]
     b08:	141d0071 	ldrne	r0, [sp], #-113
     b0c:	5f670000 	svcpl	0x00670000
     b10:	53584166 	cmppl	r8, #-2147483623	; 0x80000019
     b14:	64656570 	strbtvs	r6, [r5], #-1392
     b18:	746e6f43 	strbtvc	r6, [lr], #-3907
     b1c:	006c6f72 	rsbeq	r6, ip, r2, ror pc
     b20:	00001459 	andeq	r1, r0, r9, asr r4
     b24:	77615f67 	strbvc	r5, [r1, -r7, ror #30]!
     b28:	41727543 	cmnmi	r2, r3, asr #10
     b2c:	736f5058 	cmnvc	pc, #88	; 0x58
     b30:	00146b00 	andseq	r6, r4, r0, lsl #22
     b34:	615f6700 	cmpvs	pc, r0, lsl #14
     b38:	616f4777 	smcvs	62583
     b3c:	5058416c 	subspl	r4, r8, ip, ror #2
     b40:	7d00736f 	stcvc	3, cr7, [r0, #-444]
     b44:	67000014 	smladvs	r0, r4, r0, r0
     b48:	6553665f 	ldrbvs	r6, [r3, #-1631]
     b4c:	736f7672 	cmnvc	pc, #119537664	; 0x7200000
     b50:	65657246 	strbvs	r7, [r5, #-582]!
     b54:	00148f00 	andseq	r8, r4, r0, lsl #30
     b58:	775f6700 	ldrbvc	r6, [pc, -r0, lsl #14]
     b5c:	7473614c 	ldrbtvc	r6, [r3], #-332
     b60:	746c6f56 	strbtvc	r6, [ip], #-3926
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     b64:	00656761 	rsbeq	r6, r5, r1, ror #14
     b68:	000014a1 	andeq	r1, r0, r1, lsr #9

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     b6c:	4c625f67 	stclmi	15, cr5, [r2], #-412
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     b70:	6f566765 	svcvs	0x00566765
     b74:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
     b78:	14b30065 	ldrtne	r0, [r3], #101
     b7c:	5f670000 	svcpl	0x00670000
     b80:	69546c75 	ldmdbvs	r4, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
     b84:	614c656d 	cmpvs	ip, sp, ror #10
     b88:	61427473 	cmpvs	r2, r3, ror r4
     b8c:	72657474 	rsbvc	r7, r5, #1946157056	; 0x74000000
     b90:	6c6f5679 	stclvs	6, cr5, [pc], #-484
     b94:	65676174 	strbvs	r6, [r7, #-372]!
     b98:	0014d500 	andseq	sp, r4, r0, lsl #10
     b9c:	6f436300 	svcvs	0x00436300
     ba0:	694d6178 	stmdbvs	sp, {r3, r4, r5, r6, r8, sp, lr}^
     ba4:	ec00316e 	stfs	f3, [r0], {110}
     ba8:	63000014 	movwvs	r0, #20	; 0x14
     bac:	61786f43 	cmnvs	r8, r3, asr #30
     bb0:	3178614d 	cmncc	r8, sp, asr #2
     bb4:	00150300 	andseq	r0, r5, r0, lsl #6
     bb8:	65466300 	strbvs	r6, [r6, #-768]
     bbc:	4d72756d 	cfldr64mi	mvdx7, [r2, #-436]!
     bc0:	00316e69 	eorseq	r6, r1, r9, ror #28
     bc4:	0000151a 	andeq	r1, r0, sl, lsl r5
     bc8:	6d654663 	stclvs	6, cr4, [r5, #-396]!
     bcc:	614d7275 	cmpvs	sp, r5, ror r2
     bd0:	31003178 	tstcc	r0, r8, ror r1
     bd4:	63000015 	movwvs	r0, #21	; 0x15
     bd8:	69626954 	stmdbvs	r2!, {r2, r4, r6, r8, fp, sp, lr}^
     bdc:	6e694d61 	cdpvs	13, 6, cr4, cr9, cr1, {3}
     be0:	15480031 	strbne	r0, [r8, #-49]
     be4:	54630000 	strbtpl	r0, [r3]
     be8:	61696269 	cmnvs	r9, r9, ror #4
     bec:	3178614d 	cmncc	r8, sp, asr #2
     bf0:	00156f00 	andseq	r6, r5, r0, lsl #30
     bf4:	6f436300 	svcvs	0x00436300
     bf8:	6e496178 	mcrvs	1, 2, r6, cr9, cr8, {3}
     bfc:	15860076 	strne	r0, [r6, #118]
     c00:	46630000 	strbtmi	r0, [r3], -r0
     c04:	72756d65 	rsbsvc	r6, r5, #6464	; 0x1940
     c08:	00766e49 	rsbseq	r6, r6, r9, asr #28
     c0c:	00001598 	muleq	r0, r8, r5
     c10:	62695463 	rsbvs	r5, r9, #1660944384	; 0x63000000
     c14:	6e496169 	dvfvsez	f6, f1, #1.0
     c18:	15af0076 	strne	r0, [pc, #118]!	; c96 <__Stack_Size+0x896>
     c1c:	43630000 	cmnmi	r3, #0	; 0x0
     c20:	4c61786f 	stclmi	8, cr7, [r1], #-444
     c24:	74676e65 	strbtvc	r6, [r7], #-3685
     c28:	15c60068 	strbne	r0, [r6, #104]
     c2c:	46630000 	strbtmi	r0, [r3], -r0
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * CosG4 / c4DEC
					- (long) CPR_Z * c2DEC * SinA4 / c4DEC * SinB4 / c4DEC
							* SinG4 / c4DEC
					- (long) CPR_Y * c2DEC * CosB4 / c4DEC * SinG4 / c4DEC))
			/ c2DEC;
	BodyFKPosY = ((long) CPR_Y * c2DEC
     c30:	72756d65 	rsbsvc	r6, r5, #6464	; 0x1940
	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     c34:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
     c38:	dd006874 	stcle	8, cr6, [r0, #-464]
     c3c:	63000015 	movwvs	r0, #21	; 0x15
     c40:	69626954 	stmdbvs	r2!, {r2, r4, r6, r8, fp, sp, lr}^
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * CosG4 / c4DEC
					- (long) CPR_Z * c2DEC * SinA4 / c4DEC * SinB4 / c4DEC
							* SinG4 / c4DEC
					- (long) CPR_Y * c2DEC * CosB4 / c4DEC * SinG4 / c4DEC))
			/ c2DEC;
	BodyFKPosY = ((long) CPR_Y * c2DEC
     c44:	6e654c61 	cdpvs	12, 6, cr4, cr5, cr1, {3}
     c48:	00687467 	rsbeq	r7, r8, r7, ror #8
     c4c:	000015f4 	strdeq	r1, [r0], -r4
     c50:	66664f63 	strbtvs	r4, [r6], -r3, ror #30
     c54:	58746573 	ldmdapl	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
     c58:	00160b00 	andseq	r0, r6, r0, lsl #22
     c5c:	664f6300 	strbvs	r6, [pc], -r0, lsl #6
     c60:	74657366 	strbtvc	r7, [r5], #-870
     c64:	1622005a 	undefined
     c68:	43630000 	cmnmi	r3, #0	; 0x0
     c6c:	4161786f 	cmnmi	r1, pc, ror #16
     c70:	656c676e 	strbvs	r6, [ip, #-1902]!
     c74:	16390031 	undefined
     c78:	49630000 	stmdbmi	r3!, {}^
     c7c:	5074696e 	rsbspl	r6, r4, lr, ror #18
     c80:	0058736f 	subseq	r7, r8, pc, ror #6
     c84:	00001651 	andeq	r1, r0, r1, asr r6
     c88:	696e4963 	stmdbvs	lr!, {r0, r1, r5, r6, r8, fp, lr}^
     c8c:	736f5074 	cmnvc	pc, #116	; 0x74
     c90:	16690059 	undefined
     c94:	49630000 	stmdbmi	r3!, {}^
     c98:	5074696e 	rsbspl	r6, r4, lr, ror #18
     c9c:	005a736f 	subseq	r7, sl, pc, ror #6
     ca0:	00001681 	andeq	r1, r0, r1, lsl #13
     ca4:	53665f67 	cmnpl	r6, #412	; 0x19c
     ca8:	44776f68 	ldrbtmi	r6, [r7], #-3944
     cac:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
     cb0:	6d6f7250 	sfmvs	f7, 2, [pc, #-320]!
     cb4:	94007470 	strls	r7, [r0], #-1136
     cb8:	43000016 	movwmi	r0, #22	; 0x16
     cbc:	4161786f 	cmnmi	r1, pc, ror #16
     cc0:	656c676e 	strbvs	r6, [ip, #-1902]!
     cc4:	16a70031 	undefined
     cc8:	65460000 	strbvs	r0, [r6]
     ccc:	4172756d 	cmnmi	r2, sp, ror #10
     cd0:	656c676e 	strbvs	r6, [ip, #-1902]!
     cd4:	16ba0031 	undefined
     cd8:	69540000 	ldmdbvs	r4, {}^
     cdc:	41616962 	cmnmi	r1, r2, ror #18
     ce0:	656c676e 	strbvs	r6, [ip, #-1902]!
     ce4:	16cd0031 	undefined
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * SinG4 / c4DEC
					+ (long) CPR_Z * c2DEC * CosG4 / c4DEC * SinA4 / c4DEC
							* SinB4 / c4DEC
					+ (long) CPR_Y * c2DEC * CosB4 / c4DEC * CosG4 / c4DEC))
			/ c2DEC;
}
     ce8:	654c0000 	strbvs	r0, [ip]
     cec:	736f5067 	cmnvc	pc, #103	; 0x67
     cf0:	16e00058 	usatne	r0, #0, r8, asr #0
     cf4:	654c0000 	strbvs	r0, [ip]
     cf8:	736f5067 	cmnvc	pc, #103	; 0x67
     cfc:	16f30059 	usatne	r0, #19, r9, asr #0
     d00:	654c0000 	strbvs	r0, [ip]
     d04:	736f5067 	cmnvc	pc, #103	; 0x67
     d08:	1706005a 	smlsdne	r6, sl, r0, r0
     d0c:	6e490000 	cdpvs	0, 4, cr0, cr9, cr0, {0}
     d10:	00786564 	rsbseq	r6, r8, r4, ror #10
     d14:	00001719 	andeq	r1, r0, r9, lsl r7
     d18:	4967654c 	stmdbmi	r7!, {r2, r3, r6, r8, sl, sp, lr}^
     d1c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
//FemurAngle1           - Output Angle of Femur in degrees
//TibiaAngle1           - Output Angle of Tibia in degrees
//CoxaAngle1            - Output Angle of Coxa in degrees
//--------------------------------------------------------------------
void LegIK(short IKFeetPosX, short IKFeetPosY, short IKFeetPosZ,
		byte LegIKLegNr) {
     d20:	00172c00 	andseq	r2, r7, r0, lsl #24
     d24:	676e4100 	strbvs	r4, [lr, -r0, lsl #2]!
     d28:	6544656c 	strbvs	r6, [r4, #-1388]
	long Temp1;
	long Temp2;
	long T3;

	//Calculate IKCoxaAngle and IKFeetPosXZ
	GetATan2(IKFeetPosX, IKFeetPosZ);
     d2c:	3f003167 	svccc	0x00003167
	CoxaAngle1[LegIKLegNr] = (((long) Atan4 * 180) / 3141)
     d30:	73000017 	movwvc	r0, #23	; 0x17
     d34:	00346e69 	eorseq	r6, r4, r9, ror #28
     d38:	00001752 	andeq	r1, r0, r2, asr r7
     d3c:	34736f63 	ldrbtcc	r6, [r3], #-3939
     d40:	00176500 	andseq	r6, r7, r0, lsl #10
     d44:	676e4100 	strbvs	r4, [lr, -r0, lsl #2]!
     d48:	6152656c 	cmpvs	r2, ip, ror #10
     d4c:	78003464 	stmdavc	r0, {r2, r5, r6, sl, ip, sp}
     d50:	41000017 	tstmi	r0, r7, lsl r0
     d54:	586e6174 	stmdapl	lr!, {r2, r4, r5, r6, r8, sp, lr}^
	//Length between the Coxa and tars [foot]
	IKFeetPosXZ = XYhyp2 / c2DEC;

	//Using GetAtan2 for solving IKA1 and IKSW
	//IKA14 - Angle between SW line and the ground in radians
	IKA14 = GetATan2(IKFeetPosY - TarsOffsetY,
     d58:	00178b00 	andseq	r8, r7, r0, lsl #22
     d5c:	61744100 	cmnvs	r4, r0, lsl #2
     d60:	9e00596e 	cdpls	9, 0, cr5, cr0, cr14, {3}
     d64:	41000017 	tstmi	r0, r7, lsl r0
     d68:	346e6174 	strbtcc	r6, [lr], #-372
     d6c:	0017b100 	andseq	fp, r7, r0, lsl #2
     d70:	68595800 	ldmdavs	r9, {fp, ip, lr}^

	//IKSW2 - Length between femur axis and tars
	IKSW2 = XYhyp2;

	//IKA2 - Angle of the line S>W with respect to the femur in radians
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     d74:	00327079 	eorseq	r7, r2, r9, ror r0
     d78:	000017c4 	andeq	r1, r0, r4, asr #15
     d7c:	58736f50 	ldmdapl	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
     d80:	0017d700 	andseq	sp, r7, r0, lsl #14
					* (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))) * c4DEC
			+ ((long) IKSW2 * IKSW2));
	Temp2 = (long) (2 * (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])) * c2DEC
			* (unsigned long) IKSW2;
	T3 = Temp1 / (Temp2 / c4DEC);
	IKA24 = GetArcCos(T3);
     d84:	736f5000 	cmnvc	pc, #0	; 0x0
     d88:	17ea005a 	ubfxne	r0, sl, #0, #11
     d8c:	6f500000 	svcvs	0x00500000
     d90:	fd005973 	stc2	9, cr5, [r0, #-460]
     d94:	42000017 	andmi	r0, r0, #23	; 0x17
     d98:	4679646f 	ldrbtmi	r6, [r9], -pc, ror #8
     d9c:	736f504b 	cmnvc	pc, #75	; 0x4b
     da0:	18100058 	ldmdane	r0, {r3, r4, r6}
     da4:	6f420000 	svcvs	0x00420000
     da8:	4b467964 	blmi	119f340 <__Stack_Size+0x119ef40>
     dac:	59736f50 	ldmdbpl	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
     db0:	00182300 	andseq	r2, r8, r0, lsl #6
     db4:	646f4200 	strbtvs	r4, [pc], #512	; dbc <__Stack_Size+0x9bc>

	FemurAngle1[LegIKLegNr] = -(long) (IKA14 + IKA24) * 180
     db8:	504b4679 	subpl	r4, fp, r9, ror r6
     dbc:	005a736f 	subseq	r7, sl, pc, ror #6
     dc0:	00001836 	andeq	r1, r0, r6, lsr r8
     dc4:	65464b49 	strbvs	r4, [r6, #-2889]
     dc8:	6f507465 	svcvs	0x00507465
     dcc:	49005873 	stmdbmi	r0, {r0, r1, r4, r5, r6, fp, ip, lr}
     dd0:	49000018 	stmdbmi	r0, {r3, r4}
     dd4:	6565464b 	strbvs	r4, [r5, #-1611]!
     dd8:	736f5074 	cmnvc	pc, #116	; 0x74
			/ 3141+ 900 + CFEMURHORNOFFSET1(LegIKLegNr);  //Normal

	//IKTibiaAngle
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     ddc:	185c0059 	ldmdane	ip, {r0, r3, r4, r6}^
	Temp2 = (long) (2 * (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])) * c2DEC
			* (unsigned long) IKSW2;
	T3 = Temp1 / (Temp2 / c4DEC);
	IKA24 = GetArcCos(T3);

	FemurAngle1[LegIKLegNr] = -(long) (IKA14 + IKA24) * 180
     de0:	4b490000 	blmi	1240de8 <__Stack_Size+0x12409e8>
			/ 3141+ 900 + CFEMURHORNOFFSET1(LegIKLegNr);  //Normal

	//IKTibiaAngle
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     de4:	74656546 	strbtvc	r6, [r5], #-1350
     de8:	5a736f50 	bpl	1cdcb30 <__Stack_Size+0x1cdc730>
			+ ((long) (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr])
					* (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))) * c4DEC
			- ((long) IKSW2 * IKSW2));
	Temp2 = 2 * ((long) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])))
			* (long) ((byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]));
	GetArcCos(Temp1 / Temp2);
     dec:	00186f00 	andseq	r6, r8, r0, lsl #30
     df0:	534b4900 	movtpl	r4, #47360	; 0xb900
     df4:	74756c6f 	ldrbtvc	r6, [r5], #-3183
     df8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     dfc:	00001882 	andeq	r1, r0, r2, lsl #17
     e00:	6f534b49 	svcvs	0x00534b49
     e04:	6974756c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     e08:	61576e6f 	cmpvs	r7, pc, ror #28

	TibiaAngle1[LegIKLegNr] = -(1450 - (long) AngleRad4 * 180 / 3141
     e0c:	6e696e72 	mcrvs	14, 3, r6, cr9, cr2, {3}
     e10:	18950067 	ldmne	r5, {r0, r1, r2, r5, r6}
     e14:	4b490000 	blmi	1240e1c <__Stack_Size+0x1240a1c>
     e18:	756c6f53 	strbvc	r6, [ip, #-3923]!
     e1c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     e20:	6f727245 	svcvs	0x00727245
     e24:	18a80072 	stmiane	r8!, {r1, r4, r5, r6}
     e28:	546c0000 	strbtpl	r0, [ip]
			+ CTIBIAHORNOFFSET1(LegIKLegNr)); //!!!!!!!!!!!!145 instead of 1800

	//Set the Solution quality
	if (IKSW2
     e2c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
			- ((long) IKSW2 * IKSW2));
	Temp2 = 2 * ((long) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])))
			* (long) ((byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]));
	GetArcCos(Temp1 / Temp2);

	TibiaAngle1[LegIKLegNr] = -(1450 - (long) AngleRad4 * 180 / 3141
     e30:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
			+ CTIBIAHORNOFFSET1(LegIKLegNr)); //!!!!!!!!!!!!145 instead of 1800

	//Set the Solution quality
	if (IKSW2
     e34:	18bb0074 	ldmne	fp!, {r2, r4, r5, r6}
     e38:	546c0000 	strbtpl	r0, [ip]
     e3c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     e40:	00646e45 	rsbeq	r6, r4, r5, asr #28
     e44:	000018ce 	andeq	r1, r0, lr, asr #17
			< ((word) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
					+ (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]) - 30)
					* c2DEC))
		IKSolution = 1;
     e48:	6c637943 	stclvs	9, cr7, [r3], #-268
	else {
		if (IKSW2
     e4c:	6d695465 	cfstrdvs	mvd5, [r9, #-404]!
     e50:	18e10065 	stmiane	r1!, {r0, r2, r5, r6}^
				< ((word) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
						+ (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))
						* c2DEC))
			IKSolutionWarning = 1;
     e54:	65530000 	ldrbvs	r0, [r3]
     e58:	4d6f7672 	stclmi	6, cr7, [pc, #-456]!
		else
			IKSolutionError = 1;
     e5c:	5465766f 	strbtpl	r7, [r5], #-1647
	}

}
     e60:	00656d69 	rsbeq	r6, r5, r9, ror #26
     e64:	000018f4 	strdeq	r1, [r0], -r4
     e68:	76657250 	undefined
     e6c:	76726553 	undefined
     e70:	766f4d6f 	strbtvc	r4, [pc], -pc, ror #26
     e74:	6d695465 	cfstrdvs	mvd5, [r9, #-404]!
     e78:	19070065 	stmdbne	r7, {r0, r2, r5, r6}
     e7c:	5f670000 	svcpl	0x00670000
     e80:	776f4c66 	strbvc	r4, [pc, -r6, ror #24]!
     e84:	746c6f56 	strbtvc	r6, [ip], #-3926
     e88:	53656761 	cmnpl	r5, #25427968	; 0x1840000
     e8c:	64747568 	ldrbtvs	r7, [r4], #-1384
     e90:	006e776f 	rsbeq	r7, lr, pc, ror #14
     e94:	0000191a 	andeq	r1, r0, sl, lsl r9
     e98:	746c6f56 	strbtvc	r6, [ip], #-3926
     e9c:	00656761 	rsbeq	r6, r5, r1, ror #14
     ea0:	0000192d 	andeq	r1, r0, sp, lsr #18
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ea4:	61746f54 	cmnvs	r4, r4, asr pc
	if (sVal < s) {
     ea8:	6172546c 	cmnvs	r2, ip, ror #8
     eac:	0058736e 	subseq	r7, r8, lr, ror #6
		return s;
	}

	s = (short) pgm_read_word(sMax);
     eb0:	00001940 	andeq	r1, r0, r0, asr #18
     eb4:	61746f54 	cmnvs	r4, r4, asr pc
     eb8:	6172546c 	cmnvs	r2, ip, ror #8

		return s;
	}
	return sVal;

}
     ebc:	005a736e 	subseq	r7, sl, lr, ror #6
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     ec0:	00001953 	andeq	r1, r0, r3, asr r9
}

//--------------------------------------------------------------------
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
     ec4:	61746f54 	cmnvs	r4, r4, asr pc
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     ec8:	6172546c 	cmnvs	r2, ip, ror #8
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ecc:	0059736e 	subseq	r7, r9, lr, ror #6
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
     ed0:	00001966 	andeq	r1, r0, r6, ror #18
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ed4:	61746f54 	cmnvs	r4, r4, asr pc
	if (sVal < s) {
     ed8:	6142596c 	cmpvs	r2, ip, ror #18
     edc:	7900316c 	stmdbvc	r0, {r2, r3, r5, r6, r8, ip, sp}
     ee0:	54000019 	strpl	r0, [r0], #-25
		return s;
	}

	s = (short) pgm_read_word(sMax);
     ee4:	6c61746f 	cfstrdvs	mvd7, [r1], #-444
     ee8:	6c614258 	sfmvs	f4, 2, [r1], #-352
     eec:	198c0031 	stmibne	ip, {r0, r4, r5}
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
     ef0:	6f540000 	svcvs	0x00540000
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ef4:	5a6c6174 	bpl	1b194cc <__Stack_Size+0x1b190cc>
	if (sVal < s) {
     ef8:	316c6142 	cmncc	ip, r2, asr #2
     efc:	00199f00 	andseq	r9, r9, r0, lsl #30
     f00:	6c6c4100 	stfvse	f4, [ip]
		return s;
	}

	s = (short) pgm_read_word(sMax);
     f04:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
     f08:	0019b200 	andseq	fp, r9, r0, lsl #4
     f0c:	61725400 	cmnvs	r2, r0, lsl #8
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     f10:	526c6576 	rsbpl	r6, ip, #494927872	; 0x1d800000
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
     f14:	65757165 	ldrbvs	r7, [r5, #-357]!
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     f18:	d5007473 	strle	r7, [r0, #-1139]
	if (sVal < s) {
     f1c:	47000019 	smladmi	r0, r9, r0, r0
     f20:	50746961 	rsbspl	r6, r4, r1, ror #18
     f24:	0058736f 	subseq	r7, r8, pc, ror #6
		return s;
	}

	s = (short) pgm_read_word(sMax);
     f28:	000019e8 	andeq	r1, r0, r8, ror #19
     f2c:	74696147 	strbtvc	r6, [r9], #-327
     f30:	59736f50 	ldmdbpl	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
				FemurAngle1[LegIndex], &cFemurMin1[LegIndex],
				&cFemurMax1[LegIndex]);
		TibiaAngle1[LegIndex] = CheckServoAngleBounds(s++,
     f34:	0019fb00 	andseq	pc, r9, r0, lsl #22
     f38:	69614700 	stmdbvs	r1!, {r8, r9, sl, lr}^
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     f3c:	736f5074 	cmnvc	pc, #116	; 0x74
     f40:	1a0e005a 	bne	3810b0 <__Stack_Size+0x380cb0>
				TibiaAngle1[LegIndex], &cTibiaMin1[LegIndex],
				&cTibiaMax1[LegIndex]);

	}
#endif
}
     f44:	61470000 	cmpvs	r7, r0
     f48:	6f527469 	svcvs	0x00527469
     f4c:	21005974 	tstcs	r0, r4, ror r9
     f50:	6600001a 	undefined
     f54:	6b6c6157 	blvs	1b194b8 <__Stack_Size+0x1b190b8>
     f58:	00676e69 	rsbeq	r6, r7, r9, ror #28
     f5c:	00001a34 	andeq	r1, r0, r4, lsr sl
     f60:	74784562 	ldrbtvc	r4, [r8], #-1378
     f64:	79436172 	stmdbvc	r3, {r1, r4, r5, r6, r8, sp, lr}^
     f68:	00656c63 	rsbeq	r6, r5, r3, ror #24
     f6c:	00001a47 	andeq	r1, r0, r7, asr #20
// SmoothControl (From Zenta) -  This function makes the body
//            rotation and translation much smoother
//--------------------------------------------------------------------
short SmoothControl(short CtrlMoveInp, short CtrlMoveOut, byte CtrlDivider) {

	if (CtrlMoveOut < (CtrlMoveInp - 4))
     f70:	626f5266 	rsbvs	r5, pc, #1610612742	; 0x60000006
     f74:	7055746f 	subsvc	r7, r5, pc, ror #8
		return CtrlMoveOut + abs((CtrlMoveOut - CtrlMoveInp) / CtrlDivider);
     f78:	65646973 	strbvs	r6, [r4, #-2419]!
     f7c:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
     f80:	76657250 	undefined
     f84:	001a6a00 	andseq	r6, sl, r0, lsl #20
     f88:	47504100 	ldrbmi	r4, [r0, -r0, lsl #2]
     f8c:	001a7d00 	andseq	r7, sl, r0, lsl #26
     f90:	625f7300 	subsvs	r7, pc, #0	; 0x0
	else if (CtrlMoveOut > (CtrlMoveInp + 4))
     f94:	6542564c 	strbvs	r5, [r2, #-1612]
		return CtrlMoveOut - abs((CtrlMoveOut - CtrlMoveInp) / CtrlDivider);
     f98:	6e437065 	cdpvs	0, 4, cr7, cr3, cr5, {3}
     f9c:	1a900074 	bne	fe401174 <SCS_BASE+0x1e3f3174>
     fa0:	5f670000 	svcpl	0x00670000
     fa4:	67654c77 	undefined
     fa8:	4c5a5873 	mrrcmi	8, 7, r5, sl, cr3
     fac:	74676e65 	strbtvc	r6, [r7], #-3685
     fb0:	1aa30068 	bne	fe8c1158 <SCS_BASE+0x1e8b3158>

	return CtrlMoveInp;
}
     fb4:	5f670000 	svcpl	0x00670000
// GetLegsXZLength -
//--------------------------------------------------------------------
word g_wLegsXZLength = 0xffff;
word GetLegsXZLength(void) {
	// Could save away or could do a little math on one leg...
	if (g_wLegsXZLength != 0xffff)
     fb8:	67654c69 	strbvs	r4, [r5, -r9, ror #24]!
     fbc:	74696e49 	strbtvc	r6, [r9], #-3657
     fc0:	65646e49 	strbvs	r6, [r4, #-3657]!

//--------------------------------------------------------------------
// GetLegsXZLength -
//--------------------------------------------------------------------
word g_wLegsXZLength = 0xffff;
word GetLegsXZLength(void) {
     fc4:	00000078 	andeq	r0, r0, r8, ror r0
	// Could save away or could do a little math on one leg...
	if (g_wLegsXZLength != 0xffff)
		return g_wLegsXZLength;

	return isqrt32((LegPosX[0] * LegPosX[0]) + (LegPosZ[0] * LegPosZ[0]));
     fc8:	02540000 	subseq	r0, r4, #0	; 0x0
     fcc:	00020000 	andeq	r0, r2, r0
     fd0:	000026ce 	andeq	r2, r0, lr, asr #13
     fd4:	00000772 	andeq	r0, r0, r2, ror r7
     fd8:	000002f6 	strdeq	r0, [r0], -r6
     fdc:	6c6f6942 	stclvs	9, cr6, [pc], #-264
}
     fe0:	4364696f 	cmnmi	r4, #1818624	; 0x1bc000
     fe4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     fe8:	656c6c6f 	strbvs	r6, [ip, #-3183]!
     fec:	5f784572 	svcpl	0x00784572

#ifndef MAX_XZ_LEG_ADJUST
#define MAX_XZ_LEG_ADJUST   (word)(cCoxaLength[0]+cTibiaLength[0] + cFemurLength[0]/4)
#endif

void AdjustLegPositions(word XZLength1) {
     ff0:	49746573 	ldmdbmi	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
     ff4:	03270064 	teqeq	r7, #100	; 0x64
     ff8:	69420000 	stmdbvs	r2, {}^
     ffc:	696f6c6f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
    1000:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
		XZLength1 = MAX_XZ_LEG_ADJUST;
	if (XZLength1 < MIN_XZ_LEG_ADJUST)
		XZLength1 = MIN_XZ_LEG_ADJUST;

	// see if same length as when we came in
	if (XZLength1 == g_wLegsXZLength)
    1004:	6c6f7274 	sfmvs	f7, 2, [pc], #-464
    1008:	4572656c 	ldrbmi	r6, [r2, #-1388]!
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		GetSinCos((short) pgm_read_word(&cCoxaAngle1[LegIndex]));

		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
    100c:	65675f78 	strbvs	r5, [r7, #-3960]!

	// see if same length as when we came in
	if (XZLength1 == g_wLegsXZLength)
		return;

	g_wLegsXZLength = XZLength1;
    1010:	00644974 	rsbeq	r4, r4, r4, ror r9

	u8 LegIndex;
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		GetSinCos((short) pgm_read_word(&cCoxaAngle1[LegIndex]));
    1014:	00000352 	andeq	r0, r0, r2, asr r3
    1018:	6c6f6942 	stclvs	9, cr6, [pc], #-264

		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
    101c:	4364696f 	cmnmi	r4, #1818624	; 0x1bc000
    1020:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    1024:	656c6c6f 	strbvs	r6, [ip, #-3183]!
    1028:	5f784572 	svcpl	0x00784572
    102c:	64616f6c 	strbtvs	r6, [r1], #-3948
    1030:	65736f50 	ldrbvs	r6, [r3, #-3920]!
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
    1034:	00038b00 	andeq	r8, r3, r0, lsl #22
    1038:	6f694200 	svcvs	0x00694200
    103c:	64696f6c 	strbtvs	r6, [r9], #-3948
    1040:	746e6f43 	strbtvc	r6, [lr], #-3907
    1044:	6c6c6f72 	stclvs	15, cr6, [ip], #-456
    1048:	78457265 	stmdavc	r5, {r0, r2, r5, r6, r9, ip, sp, lr}^
		return;

	g_wLegsXZLength = XZLength1;

	u8 LegIndex;
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    104c:	7465675f 	strbtvc	r6, [r5], #-1887
		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
	}

	// Make sure we cycle through one gait to have the legs all move into their new locations...
	g_InControlState.ForceGaitStepCnt = g_InControlState.gaitCur.StepsInGait;
    1050:	50727543 	rsbspl	r7, r2, r3, asr #10
    1054:	0065736f 	rsbeq	r7, r5, pc, ror #6
}
    1058:	000003c2 	andeq	r0, r0, r2, asr #7
    105c:	6c6f6942 	stclvs	9, cr6, [pc], #-264
    1060:	4364696f 	cmnmi	r4, #1818624	; 0x1bc000
    1064:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    1068:	656c6c6f 	strbvs	r6, [ip, #-3183]!
    106c:	5f784572 	svcpl	0x00784572
    1070:	4e746567 	cdpmi	5, 7, cr6, cr4, cr7, {3}
    1074:	50747865 	rsbspl	r7, r4, r5, ror #16
    1078:	0065736f 	rsbeq	r7, r5, pc, ror #6
		g_InControlState.aCoxaInitAngle1[LegIndex] = (short)pgm_read_word(&cCoxaAngle1[LegIndex]);
#endif
	}
	g_wLegsXZLength = 0xffff;
#endif
}
    107c:	000003f9 	strdeq	r0, [r0], -r9
		else if (g_InControlState.aCoxaInitAngle1[LegIndex] < -700)
		g_InControlState.aCoxaInitAngle1[LegIndex] = -700;
	}
	g_wLegsXZLength = 0xffff;
#endif
}
    1080:	6c6f6942 	stclvs	9, cr6, [pc], #-264
//     to be appropriate for the current y location of the body...
//--------------------------------------------------------------------

u8 g_iLegInitIndex = 0x00; // remember which index we are currently using...

void AdjustLegPositionsToBodyHeight() {
    1084:	4364696f 	cmnmi	r4, #1818624	; 0x1bc000
    1088:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
#ifdef CNT_HEX_INITS
	// Lets see which of our units we should use...
	// Note: We will also limit our body height here...
	if (g_InControlState.BodyPos.y
    108c:	656c6c6f 	strbvs	r6, [ip, #-3183]!
			> (short) pgm_read_byte(&g_abHexMaxBodyY[CNT_HEX_INITS-1]))
		g_InControlState.BodyPos.y = (short) pgm_read_byte(
    1090:	5f784572 	svcpl	0x00784572
				&g_abHexMaxBodyY[CNT_HEX_INITS-1]);

	u8 i;
	word XZLength1 = pgm_read_byte(&g_abHexIntXZ[CNT_HEX_INITS-1]);
	for (i = 0; i < (CNT_HEX_INITS - 1); i++) { // Don't need to look at last entry as we already init to assume this one...
		if (g_InControlState.BodyPos.y
    1094:	4e746573 	mrcmi	5, 3, r6, cr4, cr3, {3}
    1098:	50747865 	rsbspl	r7, r4, r5, ror #16
				<= (short) pgm_read_byte(&g_abHexMaxBodyY[i])) {
			XZLength1 = pgm_read_byte(&g_abHexIntXZ[i]);
			break;
		}
	}
	if (i != g_iLegInitIndex) {
    109c:	0065736f 	rsbeq	r7, r5, pc, ror #6
				&g_abHexMaxBodyY[CNT_HEX_INITS-1]);

	u8 i;
	word XZLength1 = pgm_read_byte(&g_abHexIntXZ[CNT_HEX_INITS-1]);
	for (i = 0; i < (CNT_HEX_INITS - 1); i++) { // Don't need to look at last entry as we already init to assume this one...
		if (g_InControlState.BodyPos.y
    10a0:	0000043b 	andeq	r0, r0, fp, lsr r4
    10a4:	6c6f6942 	stclvs	9, cr6, [pc], #-264
    10a8:	4364696f 	cmnmi	r4, #1818624	; 0x1bc000
				<= (short) pgm_read_byte(&g_abHexMaxBodyY[i])) {
			XZLength1 = pgm_read_byte(&g_abHexIntXZ[i]);
			break;
		}
	}
	if (i != g_iLegInitIndex) {
    10ac:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
		g_iLegInitIndex = i;  // remember the current index...
		AdjustLegPositions(XZLength1);
    10b0:	656c6c6f 	strbvs	r6, [ip, #-3183]!
	}
#endif // CNT_HEX_INITS
}
    10b4:	5f784572 	svcpl	0x00784572
    10b8:	4e746573 	mrcmi	5, 3, r6, cr4, cr3, {3}
    10bc:	50747865 	rsbspl	r7, r4, r5, ror #16
}
//--------------------------------------------------------------------
//[CHECK VOLTAGE]
//Reads the input voltage and shuts down the bot when the power drops
byte s_bLVBeepCnt;
boolean CheckVoltage() {
    10c0:	4265736f 	rsbmi	r7, r5, #-1140850687	; 0xbc000001
    10c4:	646e4979 	strbtvs	r4, [lr], #-2425
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10c8:	70007865 	andvc	r7, r0, r5, ror #16

	// BUGBUG:: if voltage is 0 it failed to retrieve don't hang program...
	//    if (!Voltage)
	//      return;

	if (!g_fLowVoltageShutdown) {
    10cc:	42000004 	andmi	r0, r0, #4	; 0x4
boolean CheckVoltage() {
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10d0:	6f6c6f69 	svcvs	0x006c6f69

	// BUGBUG:: if voltage is 0 it failed to retrieve don't hang program...
	//    if (!Voltage)
	//      return;

	if (!g_fLowVoltageShutdown) {
    10d4:	6f436469 	svcvs	0x00436469
boolean CheckVoltage() {
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10d8:	6f72746e 	svcvs	0x0072746e

	if (!g_fLowVoltageShutdown) {
		/**PrintString("Voltage : ");
		Printu32d(Voltage);
		PrintString("\n");*/
		if ((Voltage < cTurnOffVol) || (Voltage >= 1999)) {
    10dc:	72656c6c 	rsbvc	r6, r5, #27648	; 0x6c00
    10e0:	695f7845 	ldmdbvs	pc, {r0, r2, r6, fp, ip, sp, lr}^
    10e4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000


			//Turn off
			g_InControlState.BodyPos.x = 0;
    10e8:	616c6f70 	smcvs	50928
			g_InControlState.TravelLength.x = 0;
			g_InControlState.TravelLength.z = 0;

#ifdef OPT_SINGLELEG
			g_InControlState.TravelLength.y = 0;
			g_InControlState.SelectedLeg = 255;
    10ec:	65536574 	ldrbvs	r6, [r3, #-1396]
    10f0:	00707574 	rsbseq	r7, r0, r4, ror r5
#endif
			g_fLowVoltageShutdown = 1;
    10f4:	000004b1 	strheq	r0, [r0], -r1
			s_bLVBeepCnt = 0;    // how many times we beeped...
    10f8:	6c6f6942 	stclvs	9, cr6, [pc], #-264
		if ((Voltage < cTurnOffVol) || (Voltage >= 1999)) {


			//Turn off
			g_InControlState.BodyPos.x = 0;
			g_InControlState.BodyPos.y = 0;
    10fc:	5f64696f 	svcpl	0x0064696f
			g_InControlState.BodyPos.z = 0;
			g_InControlState.BodyRot1.x = 0;
    1100:	75746553 	ldrbvc	r6, [r4, #-1363]!
			g_InControlState.BodyRot1.y = 0;
			g_InControlState.BodyRot1.z = 0;
    1104:	04e70070 	strbteq	r0, [r7], #112
			g_InControlState.TravelLength.x = 0;
			g_InControlState.TravelLength.z = 0;
    1108:	69420000 	stmdbvs	r2, {}^
#ifdef OPT_SINGLELEG
			g_InControlState.TravelLength.y = 0;
			g_InControlState.SelectedLeg = 255;
#endif
			g_fLowVoltageShutdown = 1;
			s_bLVBeepCnt = 0;    // how many times we beeped...
    110c:	696f6c6f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
			g_InControlState.fRobotOn = false;
    1110:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
		}
#ifdef cTurnOnVol
	} else if ((Voltage > cTurnOnVol) && (Voltage < 1999)) {
    1114:	6c6f7274 	sfmvs	f7, 2, [pc], #-464
    1118:	4572656c 	ldrbmi	r6, [r2, #-1388]!

		g_fLowVoltageShutdown = 0;
    111c:	05090078 	streq	r0, [r9, #-120]
    1120:	69420000 	stmdbvs	r2, {}^

#endif
	} else {
		if (s_bLVBeepCnt < 5) {
    1124:	696f6c6f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
    1128:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
			s_bLVBeepCnt++;
    112c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464

			//MSound( 1, 45, 2000);
			Buzzed(45, 2000);
    1130:	4572656c 	ldrbmi	r6, [r2, #-1388]!
    1134:	72775f78 	rsbsvc	r5, r7, #480	; 0x1e0
    1138:	50657469 	rsbpl	r7, r5, r9, ror #8
		}
		mDelay(2000);
    113c:	0065736f 	rsbeq	r7, r5, pc, ror #6
    1140:	00000547 	andeq	r0, r0, r7, asr #10
    1144:	6c6f6942 	stclvs	9, cr6, [pc], #-264
	}
#endif

	return g_fLowVoltageShutdown;
}
    1148:	4364696f 	cmnmi	r4, #1818624	; 0x1bc000
    114c:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    1150:	656c6c6f 	strbvs	r6, [ip, #-3183]!
    1154:	5f784572 	svcpl	0x00784572
    1158:	65746e69 	ldrbvs	r6, [r4, #-3689]!

//==============================================================================
// BackgroundProcess - Allows us to have some background processing for those
//    servo drivers that need us to do things like polling...
//==============================================================================
void BackgroundProcess(void) {
    115c:	6c6f7072 	stclvs	0, cr7, [pc], #-456
    1160:	53657461 	cmnpl	r5, #1627389952	; 0x61000000
	if (g_fAXSpeedControl)
    1164:	00706574 	rsbseq	r6, r0, r4, ror r5
		return;  // nothing to do in this mode...

	if (ServosEnabled) {
		//DebugToggle(A3);
		BioloidControllerEx_interpolateStep(false); // Do our background stuff...
    1168:	000005a5 	andeq	r0, r0, r5, lsr #11
		Battery_Monitor_Alarm();
    116c:	6c6f6942 	stclvs	9, cr6, [pc], #-264
	}
}
    1170:	4364696f 	cmnmi	r4, #1818624	; 0x1bc000
    1174:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
//Function that gets called from the main loop if the robot is not logically
//     on.  Gives us a chance to play some...
//--------------------------------------------------------------------
static u8 g_iIdleServoNum = (u8) - 1;
static u8 g_iIdleLedState = 1;  // what state to we wish to set...
void IdleTime(void) {
    1178:	656c6c6f 	strbvs	r6, [ip, #-3183]!
    117c:	5f784572 	svcpl	0x00784572
	// Each time we call this set servos LED on or off...
	g_iIdleServoNum++;
    1180:	64616572 	strbtvs	r6, [r1], #-1394
	if (g_iIdleServoNum >= NUMSERVOS) {
    1184:	65736f50 	ldrbvs	r6, [r3, #-3920]!
    1188:	00067500 	andeq	r7, r6, r0, lsl #10
		g_iIdleServoNum = 0;
    118c:	746e6900 	strbtvc	r6, [lr], #-2304
		g_iIdleLedState = 1 - g_iIdleLedState;
    1190:	6f707265 	svcvs	0x00707265
    1194:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
	}
	dxl_write_byte(pgm_read_byte(&cPinTable[g_iIdleServoNum]), AXM_LED,
    1198:	8700676e 	strhi	r6, [r0, -lr, ror #14]
    119c:	72000006 	andvc	r0, r0, #6	; 0x6
    11a0:	696e6e75 	stmdbvs	lr!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
    11a4:	6553676e 	ldrbvs	r6, [r3, #-1902]
    11a8:	06990071 	undefined
			g_iIdleLedState);
	//ax12ReadPacket(6);  // get the response...


}
    11ac:	6f700000 	svcvs	0x00700000
    11b0:	69536573 	ldmdbvs	r3, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    11b4:	ab00657a 	blge	1a7a4 <__Stack_Size+0x1a3a4>
    11b8:	66000006 	strvs	r0, [r0], -r6

//--------------------------------------------------------------------
//[SetRegOnAllServos] Function that is called to set the state of one
//  register in all of the servos, like Torque on...
//--------------------------------------------------------------------
void SetRegOnAllServos(u8 bReg, u8 bVal) {
    11bc:	656d6172 	strbvs	r6, [sp, #-370]!
    11c0:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    11c4:	cd006874 	stcgt	8, cr6, [r0, #-464]
	 ax12write(bVal);

  }
  ax12write(0xff - (checksum % 256));
  setRX(0);*/
	 dxl_set_txpacket_id (BROADCAST_ID);
    11c8:	70000006 	andvc	r0, r0, r6
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    11cc:	5f65736f 	svcpl	0x0065736f
	dxl_set_txpacket_parameter(0,bReg);
    11d0:	0006df00 	andeq	sp, r6, r0, lsl #30
    11d4:	78656e00 	stmdavc	r5!, {r9, sl, fp, sp, lr}^
	dxl_set_txpacket_parameter(1,2);
    11d8:	736f7074 	cmnvc	pc, #116	; 0x74
    11dc:	01005f65 	tsteq	r0, r5, ror #30
    11e0:	73000007 	movwvc	r0, #7	; 0x7
  int i;
	for (i = 0; i < poseSize; i++) {
		byte id = pgm_read_byte(&cPinTable[i]);
		dxl_set_txpacket_parameter(2 + 3 * i, id);
    11e4:	64656570 	strbtvs	r6, [r5], #-1392
    11e8:	0723005f 	undefined
    11ec:	64690000 	strbtvs	r0, [r9]
    11f0:	0735005f 	undefined
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
    11f4:	656e0000 	strbvs	r0, [lr]!
    11f8:	72667478 	rsbvc	r7, r6, #2013265920	; 0x78000000
    11fc:	5f656d61 	svcpl	0x00656d61
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
    1200:	00074700 	andeq	r4, r7, r0, lsl #14
    1204:	71657300 	cmnvc	r5, r0, lsl #6
    1208:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
	dxl_set_txpacket_parameter(1,2);
  int i;
	for (i = 0; i < poseSize; i++) {
		byte id = pgm_read_byte(&cPinTable[i]);
		dxl_set_txpacket_parameter(2 + 3 * i, id);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
    120c:	075f0065 	ldrbeq	r0, [pc, -r5, rrx]
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
    1210:	72740000 	rsbsvc	r0, r4, #0	; 0x0
	 dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0,bReg);
	dxl_set_txpacket_parameter(1,2);
  int i;
	for (i = 0; i < poseSize; i++) {
    1214:	69736e61 	ldmdbvs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
    1218:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    121c:	00000073 	andeq	r0, r0, r3, ror r0
		dxl_set_txpacket_parameter(2 + 3 * i, id);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
	}

	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
    1220:	01850000 	orreq	r0, r5, r0
    1224:	00020000 	andeq	r0, r2, r0
    1228:	00002e40 	andeq	r2, r0, r0, asr #28
#ifdef DEBUG_BIOLOIDEX
	PrintString("DriverAX12 --- SetRegOnAllServos ---\n");
#endif
	dxl_txrx_packet();
    122c:	00000826 	andeq	r0, r0, r6, lsr #16

	u16 CommStatus = dxl_get_result();
    1230:	0000012f 	andeq	r0, r0, pc, lsr #2
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
    1234:	63656843 	cmnvs	r5, #4390912	; 0x430000
		PrintErrorCode();
    1238:	4e43506b 	cdpmi	0, 4, cr5, cr3, cr11, {3}
	else
		PrintCommStatus(CommStatus);
    123c:	72417765 	subvc	r7, r1, #26476544	; 0x1940000
#endif
}
    1240:	65766972 	ldrbvs	r6, [r6, #-2418]!
    1244:	00014600 	andeq	r4, r1, r0, lsl #12
    1248:	44785200 	ldrbtmi	r5, [r8], #-512
//--------------------------------------------------------------------
//[MakeSureServosAreOn] Function that is called to handle when you are
//  transistioning from servos all off to being on.  May need to read
//  in the current pose...
//--------------------------------------------------------------------
void MakeSureServosAreOn(void) {
    124c:	65747942 	ldrbvs	r7, [r4, #-2370]!

	if (ServosEnabled) {

		if (!g_fServosFree)
    1250:	0043505f 	subeq	r5, r3, pc, asr r0
			return;    // we are not free

		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		if (g_fAXSpeedControl) {
    1254:	0000016f 	andeq	r0, r0, pc, ror #2
    1258:	5f447854 	svcpl	0x00447854

			int i;
			for (i = 0; i < NUMSERVOS; i++) {
				g_awGoalAXPos[i] = dxl_read_word(pgm_read_byte(&cPinTable[i]),
    125c:	5f636544 	svcpl	0x00636544
    1260:	00323353 	eorseq	r3, r2, r3, asr r3
    1264:	000001d4 	ldrdeq	r0, [r0], -r4
    1268:	5f447854 	svcpl	0x00447854
						AXM_PRESENT_POSITION_L);
				mDelay(25);
    126c:	5f636544 	svcpl	0x00636544
    1270:	00363153 	eorseq	r3, r6, r3, asr r1

		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		if (g_fAXSpeedControl) {

			int i;
			for (i = 0; i < NUMSERVOS; i++) {
    1274:	00000249 	andeq	r0, r0, r9, asr #4
    1278:	5f447854 	svcpl	0x00447854
				g_awGoalAXPos[i] = dxl_read_word(pgm_read_byte(&cPinTable[i]),
						AXM_PRESENT_POSITION_L);
				mDelay(25);
			}
		} else {
			BioloidControllerEx_readPose();
    127c:	5f636544 	svcpl	0x00636544
		}

		SetRegOnAllServos(AXM_TORQUE_ENABLE, 1);  // Use sync write to do it.
    1280:	bd003853 	stclt	8, cr3, [r0, #-332]
    1284:	54000002 	strpl	r0, [r0], #-2

		CommanderInputController_AllowControllerInterrupts(true);
		g_fServosFree = false;
    1288:	445f4478 	ldrbmi	r4, [pc], #1144	; 1290 <__Stack_Size+0xe90>
	}

}
    128c:	555f6365 	ldrbpl	r6, [pc, #-869]	; f2f <__Stack_Size+0xb2f>
    1290:	22003233 	andcs	r3, r0, #805306371	; 0x30000003
    1294:	54000003 	strpl	r0, [r0], #-3
    1298:	445f4478 	ldrbmi	r4, [pc], #1144	; 12a0 <__Stack_Size+0xea0>
    129c:	555f6365 	ldrbpl	r6, [pc, #-869]	; f3f <__Stack_Size+0xb3f>

//------------------------------------------------------------------------------------------
//[BeginServoUpdate] Does whatever preperation that is needed to starrt a move of our servos
//------------------------------------------------------------------------------------------
void BeginServoUpdate(void)    // Start the update
		{
    12a0:	87003631 	smladxhi	r0, r1, r6, r3

	MakeSureServosAreOn();
    12a4:	54000003 	strpl	r0, [r0], #-3
	if (ServosEnabled) {

		if (g_fAXSpeedControl) {
    12a8:	445f4478 	ldrbmi	r4, [pc], #1144	; 12b0 <__Stack_Size+0xeb0>
    12ac:	555f6365 	ldrbpl	r6, [pc, #-869]	; f4f <__Stack_Size+0xb4f>

#ifdef USE_AX12_SPEED_CONTROL
			// If we are trying our own Servo control need to save away the new positions...
			byte i;
			for (i = 0; i < NUMSERVOS; i++) {
				g_awCurAXPos[i] = g_awGoalAXPos[i];
    12b0:	03c20038 	biceq	r0, r2, #56	; 0x38
    12b4:	74730000 	ldrbtvc	r0, [r3]
    12b8:	75705f64 	ldrbvc	r5, [r0, #-3940]!
		if (g_fAXSpeedControl) {

#ifdef USE_AX12_SPEED_CONTROL
			// If we are trying our own Servo control need to save away the new positions...
			byte i;
			for (i = 0; i < NUMSERVOS; i++) {
    12bc:	61686374 	smcvs	34356
				g_awCurAXPos[i] = g_awGoalAXPos[i];
			}
#endif
		} else
			BioloidControllerEx_interpolateStep(true); // Make sure we call at least once
    12c0:	03fb0072 	mvnseq	r0, #114	; 0x72
    12c4:	72500000 	subsvc	r0, r0, #0	; 0x0

	}
}
    12c8:	43746e69 	cmnmi	r4, #1680	; 0x690
    12cc:	00726168 	rsbseq	r6, r2, r8, ror #2
    12d0:	00000426 	andeq	r0, r0, r6, lsr #8
    12d4:	5f647473 	svcpl	0x00647473
}

//--------------------------------------------------------------------
//[FREE SERVOS] Frees all the servos
//--------------------------------------------------------------------
void FreeServos(void) {
    12d8:	73747570 	cmnvc	r4, #469762048	; 0x1c000000
    12dc:	00046900 	andeq	r6, r4, r0, lsl #18

	if (!g_fServosFree) {
    12e0:	69725000 	ldmdbvs	r2!, {ip, lr}^
		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		SetRegOnAllServos(AXM_TORQUE_ENABLE, 0);  // do this as one statement...
    12e4:	3875746e 	ldmdacc	r5!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    12e8:	04b30068 	ldrteq	r0, [r3], #104
    12ec:	72500000 	subsvc	r0, r0, #0	; 0x0
		byte i;
		for (i = 0; i < NUMSERVOS; i++) {
			Relax(pgm_read_byte(&cPinTable[i]));
    12f0:	75746e69 	ldrbvc	r6, [r4, #-3689]!
    12f4:	00683631 	rsbeq	r3, r8, r1, lsr r6
    12f8:	000004fd 	strdeq	r0, [r0], -sp

	if (!g_fServosFree) {
		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		SetRegOnAllServos(AXM_TORQUE_ENABLE, 0);  // do this as one statement...
		byte i;
		for (i = 0; i < NUMSERVOS; i++) {
    12fc:	6e697250 	mcrvs	2, 3, r7, cr9, cr0, {2}
			Relax(pgm_read_byte(&cPinTable[i]));
		}
		CommanderInputController_AllowControllerInterrupts(true);
		g_fServosFree = true;
    1300:	32337374 	eorscc	r7, r3, #-805306367	; 0xd0000001
	}
}
    1304:	058f0064 	streq	r0, [pc, #100]	; 1370 <__Stack_Size+0xf70>
    1308:	72500000 	subsvc	r0, r0, #0	; 0x0
    130c:	75746e69 	ldrbvc	r6, [r4, #-3689]!
extern void SetRegOnAllServos(u8 bReg, u8 bVal);

//--------------------------------------------------------------------
//Init
//--------------------------------------------------------------------
void Servo_Init(void) {
    1310:	00643233 	rsbeq	r3, r4, r3, lsr r2
	// First lets get the actual servo positions for all of our servos...
	//pinMode(0, OUTPUT);
	g_fServosFree = true;
    1314:	00000606 	andeq	r0, r0, r6, lsl #12

  poseSize = NUMSERVOS;
    1318:	6e697250 	mcrvs	2, 3, r7, cr9, cr0, {2}
    131c:	72745374 	rsbsvc	r5, r4, #-805306367	; 0xd0000001
  BioloidControllerEx_readPose();
    1320:	00676e69 	rsbeq	r6, r7, r9, ror #28
#ifdef cVoltagePin
	for (byte i=0; i < 8; i++)
	GetBatteryVoltage();  // init the voltage pin
#endif

	g_fAXSpeedControl = false;
    1324:	00000631 	andeq	r0, r0, r1, lsr r6
    1328:	6e697250 	mcrvs	2, 3, r7, cr9, cr0, {2}



	// Added - try to speed things up later if we do a query...
	SetRegOnAllServos(AXM_RETURN_DELAY_TIME, 0); // tell servos to give us back their info as quick as they can...
    132c:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!
    1330:	6174536d 	cmnvs	r4, sp, ror #6

}
    1334:	00737574 	rsbseq	r7, r3, r4, ror r5
    1338:	0000065a 	andeq	r0, r0, sl, asr r6
    133c:	6e697250 	mcrvs	2, 3, r7, cr9, cr0, {2}
    1340:	72724574 	rsbsvc	r4, r2, #486539264	; 0x1d000000

}

void setupPhoenix() {

	g_fShowDebugPrompt = true;
    1344:	6f43726f 	svcvs	0x0043726f
void readSensors(){


}

void setupPhoenix() {
    1348:	6f006564 	svcvs	0x00006564

	g_fShowDebugPrompt = true;
	g_fDebugOutput = false;
    134c:	73000006 	movwvc	r0, #6	; 0x6
    1350:	675f6474 	undefined
	//init BioloidEx
	BioloidControllerEx();
    1354:	00737465 	rsbseq	r7, r3, r5, ror #8

	// Init our ServoDriver
	Servo_Init();
    1358:	000006b8 	strheq	r0, [r0], -r8

	mDelay(10);
    135c:	53746547 	cmnpl	r4, #297795584	; 0x11c00000

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		LegPosX[LegIndex] = (short) pgm_read_word(&cInitPosX[LegIndex]); //Set start positions for each leg
    1360:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    1364:	06e30067 	strbteq	r0, [r3], r7, rrx
		LegPosY[LegIndex] = (short) pgm_read_word(&cInitPosY[LegIndex]);
    1368:	74730000 	ldrbtvc	r0, [r3]
    136c:	65675f64 	strbvs	r5, [r7, #-3940]!
		LegPosZ[LegIndex] = (short) pgm_read_word(&cInitPosZ[LegIndex]);
    1370:	61686374 	smcvs	34356

	mDelay(10);

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		LegPosX[LegIndex] = (short) pgm_read_word(&cInitPosX[LegIndex]); //Set start positions for each leg
    1374:	070c0072 	smlsdxeq	ip, r2, r0, r0
    1378:	65470000 	strbvs	r0, [r7]
		LegPosY[LegIndex] = (short) pgm_read_word(&cInitPosY[LegIndex]);
    137c:	61684374 	smcvs	33844
    1380:	07250072 	undefined
		LegPosZ[LegIndex] = (short) pgm_read_word(&cInitPosZ[LegIndex]);
    1384:	63700000 	cmnvs	r0, #0	; 0x0
    1388:	65745f75 	ldrbvs	r5, [r4, #-3957]!
    138c:	6e696d72 	mcrvs	13, 3, r6, cr9, cr2, {3}
	Servo_Init();

	mDelay(10);

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    1390:	00657461 	rsbeq	r7, r5, r1, ror #8
    1394:	0000073a 	andeq	r0, r0, sl, lsr r7
    1398:	5f756370 	svcpl	0x00756370

	ResetLegInitAngles();

	//Single leg control. Make sure no leg is selected
#ifdef OPT_SINGLELEG
	g_InControlState.SelectedLeg = 255; // No Leg selected
    139c:	74696e69 	strbtvc	r6, [r9], #-3689
    13a0:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
	g_InControlState.PrevSelectedLeg = 255;
    13a4:	0000657a 	andeq	r6, r0, sl, ror r5
#endif
	//Body Positions
	g_InControlState.BodyPos.x = 0;
    13a8:	71000000 	tstvc	r0, r0
	g_InControlState.BodyPos.y = 0;
	g_InControlState.BodyPos.z = 0;
    13ac:	02000002 	andeq	r0, r0, #2	; 0x2

//Body Rotations
	g_InControlState.BodyRot1.x = 0;
	g_InControlState.BodyRot1.y = 0;
    13b0:	00366600 	eorseq	r6, r6, r0, lsl #12
	g_InControlState.BodyRot1.z = 0;
	g_InControlState.BodyRotOffset.x = 0;
    13b4:	0007ec00 	andeq	lr, r7, r0, lsl #24
	g_InControlState.BodyRotOffset.y = 0; //Input Y offset value to adjust centerpoint of rotation
	g_InControlState.BodyRotOffset.z = 0;
    13b8:	00024400 	andeq	r4, r2, r0, lsl #8

	//Gait
	g_InControlState.GaitType = 0;
    13bc:	6c786400 	cfldrdvs	mvd6, [r8]
	g_InControlState.BalanceMode = 0;
    13c0:	7465675f 	strbtvc	r6, [r5], #-1887
	g_InControlState.LegLiftHeight = 50;
	g_InControlState.ForceGaitStepCnt = 0; // added to try to adjust starting positions depending on height...
    13c4:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
	g_InControlState.GaitStep = 1;
    13c8:	00746c75 	rsbseq	r6, r4, r5, ror ip
}

void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {
    13cc:	0000025b 	andeq	r0, r0, fp, asr r2
	g_InControlState.BodyRotOffset.z = 0;

	//Gait
	g_InControlState.GaitType = 0;
	g_InControlState.BalanceMode = 0;
	g_InControlState.LegLiftHeight = 50;
    13d0:	5f6c7864 	svcpl	0x006c7864
    13d4:	5f746573 	svcpl	0x00746573
void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {

		g_InControlState.gaitCur = APG[g_InControlState.GaitType];
    13d8:	61707874 	cmnvs	r0, r4, ror r8
    13dc:	74656b63 	strbtvc	r6, [r5], #-2915
    13e0:	0064695f 	rsbeq	r6, r4, pc, asr r9
//==============================================================================

// If both PS2 and XBee are defined then we will become secondary to the xbee
void CommanderInputController_Init(void) {

	g_BodyYOffset = 0;
    13e4:	0000027f 	andeq	r0, r0, pc, ror r2
    13e8:	5f6c7864 	svcpl	0x006c7864
    13ec:	5f746573 	svcpl	0x00746573
	g_BodyYShift = 0;
	//begin(XBEE_BAUD);
	GPSeq = 0;  // init to something...
    13f0:	61707874 	cmnvs	r0, r4, ror r8
    13f4:	74656b63 	strbtvc	r6, [r5], #-2915

	ControlMode = WALKMODE;
    13f8:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
	HeightSpeedMode = NORM_NORM;
    13fc:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
	//    DoubleHeightOn = false;
	DoubleTravelOn = false;
    1400:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
	bJoystickWalkMode = 0;
    1404:	0002a400 	andeq	sl, r2, r0, lsl #8
	GaitSelect();

	CommanderInputController_Init();

	// Servo Driver
	ServoMoveTime = 150;
    1408:	6c786400 	cfldrdvs	mvd6, [r8]
	g_InControlState.fRobotOn = 0;
    140c:	7465735f 	strbtvc	r7, [r5], #-863
	g_fLowVoltageShutdown = false;
    1410:	7078745f 	rsbsvc	r7, r8, pc, asr r4

}
    1414:	656b6361 	strbvs	r6, [fp, #-865]!
    1418:	61705f74 	cmnvs	r0, r4, ror pc
    141c:	656d6172 	strbvs	r6, [sp, #-370]!
    1420:	00726574 	rsbseq	r6, r2, r4, ror r5
    1424:	000002d6 	ldrdeq	r0, [r0], -r6
    1428:	5f6c7864 	svcpl	0x006c7864
    142c:	5f746573 	svcpl	0x00746573
    1430:	61707874 	cmnvs	r0, r4, ror r8
    1434:	74656b63 	strbtvc	r6, [r5], #-2915
    1438:	6e656c5f 	mcrvs	12, 3, r6, cr5, cr15, {2}
    143c:	00687467 	rsbeq	r7, r8, r7, ror #8
    1440:	000002fb 	strdeq	r0, [r0], -fp
    1444:	5f6c7864 	svcpl	0x006c7864
    1448:	5f746567 	svcpl	0x00746567
    144c:	61707872 	cmnvs	r0, r2, ror r8
    1450:	74656b63 	strbtvc	r6, [r5], #-2915
    1454:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
    1458:	2600726f 	strcs	r7, [r0], -pc, ror #4
    145c:	64000003 	strvs	r0, [r0], #-3
    1460:	675f6c78 	undefined
    1464:	725f7465 	subsvc	r7, pc, #1694498816	; 0x65000000
//[CommitServoDriver Updates the positions of the servos - This outputs
//         as much of the command as we can without committing it.  This
//         allows us to once the previous update was completed to quickly
//        get the next command to start
//--------------------------------------------------------------------
void CommitServoDriver(word wMoveTime) {
    1468:	63617078 	cmnvs	r1, #120	; 0x78
    146c:	5f74656b 	svcpl	0x0074656b
    1470:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!


	CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    1474:	3d006874 	stccc	8, cr6, [r0, #-464]

      }
      ax12write(0xff - (checksum % 256));
      setRX(0);
*/
  	    dxl_set_txpacket_id (BROADCAST_ID);
    1478:	64000003 	strvs	r0, [r0], #-3
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    147c:	675f6c78 	undefined
    1480:	725f7465 	subsvc	r7, pc, #1694498816	; 0x65000000
		dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
    1484:	63617078 	cmnvs	r1, #120	; 0x78
    1488:	5f74656b 	svcpl	0x0074656b
		dxl_set_txpacket_parameter(1, 2);
    148c:	61726170 	cmnvs	r2, r0, ror r1
    1490:	6574656d 	ldrbvs	r6, [r4, #-1389]!
    1494:	036a0072 	cmneq	sl, #114	; 0x72
    1498:	78640000 	stmdavc	r4!, {}^
      int i;
      word wSpeed;
		for (i = 0; i < poseSize; i++) {
			wSpeed = CalculateAX12MoveSpeed(g_awCurAXPos[i], g_awGoalAXPos[i], wMoveTime);    // What order should we store these values?
    149c:	616d5f6c 	cmnvs	sp, ip, ror #30
    14a0:	6f77656b 	svcvs	0x0077656b
    14a4:	93006472 	movwls	r6, #1138	; 0x472
    14a8:	64000003 	strvs	r0, [r0], #-3
			//dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
			byte id = pgm_read_byte(&cPinTable[i]);
			dxl_set_txpacket_parameter(2 + 3 * i, id);
    14ac:	675f6c78 	undefined
    14b0:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}
    14b4:	7962776f 	stmdbvc	r2!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    14b8:	b5006574 	strlt	r6, [r0, #-1396]
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(g_awGoalAXPos[i]));
    14bc:	64000003 	strvs	r0, [r0], #-3
    14c0:	675f6c78 	undefined
    14c4:	685f7465 	ldmdavs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^
    14c8:	62686769 	rsbvs	r6, r8, #27525120	; 0x1a40000
    14cc:	00657479 	rsbeq	r7, r5, r9, ror r4
			dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(g_awGoalAXPos[i]));
    14d0:	000003d7 	ldrdeq	r0, [r0], -r7
    14d4:	5f6c7864 	svcpl	0x006c7864
    14d8:	61656c63 	cmnvs	r5, r3, ror #24
    14dc:	74735f72 	ldrbtvc	r5, [r3], #-3954
    14e0:	6b707461 	blvs	1c1e66c <__Stack_Size+0x1c1e26c>
    14e4:	03fd0074 	mvnseq	r0, #116	; 0x74
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(wSpeed));
    14e8:	78640000 	stmdavc	r4!, {}^
    14ec:	78725f6c 	ldmdavc	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    14f0:	6361705f 	cmnvs	r1, #95	; 0x5f
		    dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(wSpeed));
    14f4:	0074656b 	rsbseq	r6, r4, fp, ror #10
    14f8:	0000044b 	andeq	r0, r0, fp, asr #8
    14fc:	5f6c7864 	svcpl	0x006c7864
    1500:	705f7874 	subsvc	r7, pc, r4, ror r8
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
		dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
		dxl_set_txpacket_parameter(1, 2);
      int i;
      word wSpeed;
		for (i = 0; i < poseSize; i++) {
    1504:	656b6361 	strbvs	r6, [fp, #-865]!
    1508:	04990074 	ldreq	r0, [r9], #116
    150c:	78640000 	stmdavc	r4!, {}^
    1510:	78745f6c 	ldmdavc	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
			dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(g_awGoalAXPos[i]));
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(wSpeed));
		    dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(wSpeed));
		}

		dxl_set_txpacket_length((4 + 1) * poseSize + 4);
    1514:	705f7872 	subsvc	r7, pc, r2, ror r8
    1518:	656b6361 	strbvs	r6, [fp, #-865]!
    151c:	04df0074 	ldrbeq	r0, [pc], #116	; 1524 <__Stack_Size+0x1124>
#ifdef DEBUG_BIOLOIDEX
	PrintString("DriverAX12 --- CommitServoDriver ---\n");
#endif
		dxl_txrx_packet();
    1520:	78640000 	stmdavc	r4!, {}^

			u16 CommStatus = dxl_get_result();
    1524:	72775f6c 	rsbsvc	r5, r7, #432	; 0x1b0
#ifdef USING_PC_UART
			if (CommStatus == DXL_RXSUCCESS)
    1528:	5f657469 	svcpl	0x00657469
				PrintErrorCode();
    152c:	64726f77 	ldrbtvs	r6, [r2], #-3959
			else
				PrintCommStatus(CommStatus);
    1530:	00052900 	andeq	r2, r5, r0, lsl #18
    1534:	6c786400 	cfldrdvs	mvd6, [r8]
#endif
#endif
		} else {
			BioloidControllerEx_interpolateSetup(wMoveTime);
    1538:	6165725f 	cmnvs	r5, pc, asr r2

	}

	CommanderInputController_AllowControllerInterrupts(true);

}
    153c:	6f775f64 	svcvs	0x00775f64
    1540:	95006472 	strls	r6, [r0, #-1138]
    1544:	64000005 	strvs	r0, [r0], #-5
    1548:	775f6c78 	undefined
    154c:	65746972 	ldrbvs	r6, [r4, #-2418]!
    1550:	7479625f 	ldrbtvc	r6, [r9], #-607
	word wCoxaSDV;        // Coxa value in servo driver units
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    1554:	05df0065 	ldrbeq	r0, [pc, #101]	; 15c1 <__Stack_Size+0x11c1>
    1558:	78640000 	stmdavc	r4!, {}^
    155c:	61635f6c 	cmnvs	r3, ip, ror #30
    1560:	72757470 	rsbsvc	r7, r5, #1879048192	; 0x70000000
    1564:	06090065 	streq	r0, [r9], -r5, rrx


void OutputServoInfoForLeg(byte LegIndex, short sCoxaAngle1, short sFemurAngle1,
		short sTibiaAngle1)

		{
    1568:	78640000 	stmdavc	r4!, {}^
	word wCoxaSDV;        // Coxa value in servo driver units
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    156c:	65725f6c 	ldrbvs	r5, [r2, #-3948]!
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
    1570:	625f6461 	subsvs	r6, pc, #1627389952	; 0x61000000
    1574:	00657479 	rsbeq	r7, r5, r9, ror r4
    1578:	00000647 	andeq	r0, r0, r7, asr #12
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    157c:	5f6c7864 	svcpl	0x006c7864
    1580:	676e6970 	undefined
    1584:	00067100 	andeq	r7, r6, r0, lsl #2


void OutputServoInfoForLeg(byte LegIndex, short sCoxaAngle1, short sFemurAngle1,
		short sTibiaAngle1)

		{
    1588:	6c786400 	cfldrdvs	mvd6, [r8]
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    158c:	7265745f 	rsbvc	r7, r5, #1593835520	; 0x5f000000
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
    1590:	616e696d 	cmnvs	lr, sp, ror #18
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    1594:	86006574 	undefined
#ifdef USE_AX12_SPEED_CONTROL
			// Save away the new positions...
			g_awGoalAXPos[FIRSTCOXAPIN + LegIndex] = wCoxaSDV; // What order should we store these values?
			g_awGoalAXPos[FIRSTFEMURPIN + LegIndex] = wFemurSDV;
    1598:	64000006 	strvs	r0, [r0], #-6

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
#ifdef USE_AX12_SPEED_CONTROL
			// Save away the new positions...
			g_awGoalAXPos[FIRSTCOXAPIN + LegIndex] = wCoxaSDV; // What order should we store these values?
    159c:	695f6c78 	ldmdbvs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^
			g_awGoalAXPos[FIRSTFEMURPIN + LegIndex] = wFemurSDV;
    15a0:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
			g_awGoalAXPos[FIRSTTIBIAPIN + LegIndex] = wTibiaSDV;
    15a4:	7a696c61 	bvc	1a5c730 <__Stack_Size+0x1a5c330>
    15a8:	076f0065 	strbeq	r0, [pc, -r5, rrx]!
    15ac:	62670000 	rsbvs	r0, r7, #0	; 0x0

#endif
		} else {
			BioloidControllerEx_setNextPose(
    15b0:	74736e49 	ldrbtvc	r6, [r3], #-3657
    15b4:	74637572 	strbtvc	r7, [r3], #-1394
					pgm_read_byte(&cPinTable[FIRSTCOXAPIN + LegIndex]),
					wCoxaSDV);
			BioloidControllerEx_setNextPose(
    15b8:	506e6f69 	rsbpl	r6, lr, r9, ror #30
    15bc:	656b6361 	strbvs	r6, [fp, #-865]!
    15c0:	07910074 	undefined
					pgm_read_byte(&cPinTable[FIRSTFEMURPIN + LegIndex]),
					wFemurSDV);
			BioloidControllerEx_setNextPose(
    15c4:	62670000 	rsbvs	r0, r7, #0	; 0x0
    15c8:	74617453 	strbtvc	r7, [r1], #-1107
					wTibiaSDV);

		}
	}
	CommanderInputController_AllowControllerInterrupts(true); // Ok for hserial again...
}
    15cc:	61507375 	cmpvs	r0, r5, ror r3
    15d0:	74656b63 	strbtvc	r6, [r5], #-2915
    15d4:	0007a300 	andeq	sl, r7, r0, lsl #6
    15d8:	52626700 	rsbpl	r6, r2, #0	; 0x0
    15dc:	63615078 	cmnvs	r1, #120	; 0x78

void StartUpdateServos() {
    15e0:	4c74656b 	cfldr64mi	mvdx6, [r4], #-428
	byte LegIndex;

	// First call off to the init...
	BeginServoUpdate();    // Start the update
    15e4:	74676e65 	strbtvc	r6, [r7], #-3685
    15e8:	07b50068 	ldreq	r0, [r5, r8, rrx]!
    15ec:	62670000 	rsbvs	r0, r7, #0	; 0x0

	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		OutputServoInfoForLeg(LegIndex,
    15f0:	65477852 	strbvs	r7, [r7, #-2130]
    15f4:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    15f8:	00687467 	rsbeq	r7, r8, r7, ror #8
    15fc:	000007c7 	andeq	r0, r0, r7, asr #15
    1600:	6f436267 	svcvs	0x00436267
    1604:	74536d6d 	ldrbvc	r6, [r3], #-3437
    1608:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    160c:	0007d900 	andeq	sp, r7, r0, lsl #18
    1610:	42696700 	rsbmi	r6, r9, #0	; 0x0
    1614:	73557375 	cmpvc	r5, #-738197503	; 0xd4000001
    1618:	00676e69 	rsbeq	r6, r7, r9, ror #28
    161c:	00000000 	andeq	r0, r0, r0
    1620:	0000021b 	andeq	r0, r0, fp, lsl r2
    1624:	3e520002 	cdpcc	0, 5, cr0, cr2, cr2, {0}
    1628:	04770000 	ldrbteq	r0, [r7]
    162c:	007d0000 	rsbseq	r0, sp, r0
    1630:	677a0000 	ldrbvs	r0, [sl, -r0]!
    1634:	78725f62 	ldmdavc	r2!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    1638:	7461645f 	strbtvc	r6, [r1], #-1119
    163c:	00940061 	addseq	r0, r4, r1, rrx
    1640:	677a0000 	ldrbvs	r0, [sl, -r0]!
	byte LegIndex;

	// First call off to the init...
	BeginServoUpdate();    // Start the update

	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    1644:	78725f62 	ldmdavc	r2!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
				cTibiaInv[LegIndex] ?
						-TibiaAngle1[LegIndex] : TibiaAngle1[LegIndex]);

	}

}
    1648:	7461645f 	strbtvc	r6, [r1], #-1119
    164c:	69725f61 	ldmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    1650:	5f746867 	svcpl	0x00746867
    1654:	00ac0056 	adceq	r0, ip, r6, asr r0
    1658:	677a0000 	ldrbvs	r0, [sl, -r0]!
    165c:	78725f62 	ldmdavc	r2!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    1660:	7461645f 	strbtvc	r6, [r1], #-1119
#else
word g_wLastVoltage = 0xffff;    // save the last voltage we retrieved...
byte g_bLegVoltage = 0;		// what leg did we last check?
unsigned long g_ulTimeLastBatteryVoltage;
#define VOLTAGE_REPEAT_MAX  3
word GetBatteryVoltage(void) {
    1664:	69725f61 	ldmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
	if (interpolating && (g_wLastVoltage != 0xffff)
    1668:	5f746867 	svcpl	0x00746867
    166c:	00c40048 	sbceq	r0, r4, r8, asr #32
    1670:	677a0000 	ldrbvs	r0, [sl, -r0]!
    1674:	78725f62 	ldmdavc	r2!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    1678:	7461645f 	strbtvc	r6, [r1], #-1119
    167c:	656c5f61 	strbvs	r5, [ip, #-3937]!
    1680:	565f7466 	ldrbpl	r7, [pc], -r6, ror #8
    1684:	0000dc00 	andeq	sp, r0, r0, lsl #24
			&& ((getMillis() - g_ulTimeLastBatteryVoltage)
					< VOLTAGE_MAX_TIME_BETWEEN_CALLS))
		return g_wLastVoltage;
    1688:	62677a00 	rsbvs	r7, r7, #0	; 0x0

	register u8 bLoopCnt = VOLTAGE_REPEAT_MAX;
	do {
		register word wVoltage = dxl_read_byte(1, AXM_PRESENT_VOLTAGE);
    168c:	5f78725f 	svcpl	0x0078725f
    1690:	61746164 	cmnvs	r4, r4, ror #2
    1694:	66656c5f 	undefined
		if (wVoltage != 0xffff) {
			g_ulTimeLastBatteryVoltage = getMillis();
    1698:	00485f74 	subeq	r5, r8, r4, ror pc
			g_wLastVoltage = wVoltage * 10;
    169c:	000000f4 	strdeq	r0, [r0], -r4

	register u8 bLoopCnt = VOLTAGE_REPEAT_MAX;
	do {
		register word wVoltage = dxl_read_byte(1, AXM_PRESENT_VOLTAGE);
		if (wVoltage != 0xffff) {
			g_ulTimeLastBatteryVoltage = getMillis();
    16a0:	5f62677a 	svcpl	0x0062677a
			g_wLastVoltage = wVoltage * 10;
    16a4:	645f7872 	ldrbvs	r7, [pc], #2162	; 16ac <__Stack_Size+0x12ac>
		}
	} while (--bLoopCnt);

	return 0;

}
    16a8:	5f617461 	svcpl	0x00617461
    16ac:	74747562 	ldrbtvc	r7, [r4], #-1378
    16b0:	00736e6f 	rsbseq	r6, r3, pc, ror #28
    16b4:	0000010c 	andeq	r0, r0, ip, lsl #2
// ReadMsgs
//==============================================================================

/* process messages coming from Commander
 *  format = 0xFF RIGHT_H RIGHT_V LEFT_H LEFT_V BUTTONS EXT CHECKSUM */
int Commander_ReadMsgs() {
    16b8:	5f62677a 	svcpl	0x0062677a
	 }
	 #endif
	 */
	//while (CheckZBNewArrive() > 0) {
	while (1) {
		if (zgb_rx_check_arduino() == 1) {
    16bc:	645f7872 	ldrbvs	r7, [pc], #2162	; 16c4 <__Stack_Size+0x12c4>
    16c0:	5f617461 	svcpl	0x00617461

			leftV = (signed char) (zgb_rx_data_right_V_());
    16c4:	72747865 	rsbsvc	r7, r4, #6619136	; 0x650000
    16c8:	01240061 	teqeq	r4, r1, rrx
			leftH = (signed char) (zgb_rx_data_right_H_());
    16cc:	677a0000 	ldrbvs	r0, [sl, -r0]!
    16d0:	78725f62 	ldmdavc	r2!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
			rightV = (signed char) (zgb_rx_data_left_V_());
    16d4:	7461645f 	strbtvc	r6, [r1], #-1119
    16d8:	69725f61 	ldmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
			rightH = (signed char) (zgb_rx_data_left_H_());
    16dc:	5f746867 	svcpl	0x00746867
    16e0:	43005f56 	movwmi	r5, #3926	; 0xf56
			buttons = zgb_rx_data_buttons();
    16e4:	7a000001 	bvc	16f0 <__Stack_Size+0x12f0>
    16e8:	725f6267 	subsvc	r6, pc, #1879048198	; 0x70000006
			ext = zgb_rx_data_extra();
    16ec:	61645f78 	smcvs	17912
    16f0:	725f6174 	subsvc	r6, pc, #29	; 0x1d

	}

	return 0;

}
    16f4:	74686769 	strbtvc	r6, [r8], #-1897
    16f8:	005f485f 	subseq	r4, pc, pc, asr r8
    16fc:	0000015b 	andeq	r0, r0, fp, asr r1
    1700:	5f62677a 	svcpl	0x0062677a
    1704:	645f7872 	ldrbvs	r7, [pc], #2162	; 170c <__Stack_Size+0x130c>
    1708:	5f617461 	svcpl	0x00617461
    170c:	7466656c 	strbtvc	r6, [r6], #-1388
    1710:	005f565f 	subseq	r5, pc, pc, asr r6

//==============================================================================
// This is The main code to input function to read inputs from the Commander and then
//process any commands.
//==============================================================================
void CommanderInputController_ControlInput(void) {
    1714:	00000173 	andeq	r0, r0, r3, ror r1

	// See if we have a new command available...
	if (Commander_ReadMsgs() > 0) {
    1718:	5f62677a 	svcpl	0x0062677a
    171c:	645f7872 	ldrbvs	r7, [pc], #2162	; 1724 <__Stack_Size+0x1324>
    1720:	5f617461 	svcpl	0x00617461
    1724:	7466656c 	strbtvc	r6, [r6], #-1388
		// If we receive a valid message than turn robot on...
		boolean fAdjustLegPositions = false;
		short sLegInitXZAdjust = 0;
		short sLegInitAngleAdjust = 0;

		if (!g_InControlState.fRobotOn) {
    1728:	005f485f 	subseq	r4, pc, pc, asr r8
    172c:	0000018b 	andeq	r0, r0, fp, lsl #3
			g_InControlState.fRobotOn = true;
    1730:	63656843 	cmnvs	r5, #4390912	; 0x430000
    1734:	4e425a6b 	fnmacsmi	s11, s4, s23
		}

		// [SWITCH MODES]

		// Cycle through modes...
		if ((buttons & BUT_LT) && !(buttonsPrev & BUT_LT)) {
    1738:	72417765 	subvc	r7, r1, #26476544	; 0x1940000
    173c:	65766972 	ldrbvs	r6, [r6, #-2418]!
    1740:	0001a300 	andeq	sl, r1, r0, lsl #6
    1744:	62677a00 	rsbvs	r7, r7, #0	; 0x0
    1748:	5f78725f 	svcpl	0x0078725f
    174c:	63656863 	cmnvs	r5, #6488064	; 0x630000

			if (++ControlMode >= MODECNT) {
    1750:	72615f6b 	rsbvc	r5, r1, #428	; 0x1ac
    1754:	6e697564 	cdpvs	5, 6, cr7, cr9, cr4, {3}
    1758:	01f1006f 	mvnseq	r0, pc, rrx
    175c:	677a0000 	ldrbvs	r0, [sl, -r0]!
				ControlMode = WALKMODE;    // cycled back around...
				Buzzed(50, 2000);
    1760:	78725f62 	ldmdavc	r2!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    1764:	6568635f 	strbvs	r6, [r8, #-863]!
    1768:	3f006b63 	svccc	0x00006b63
				Buzzed(50, 3000);
    176c:	7a000002 	bvc	177c <__Stack_Size+0x137c>
    1770:	745f6267 	ldrbvc	r6, [pc], #615	; 1778 <__Stack_Size+0x1378>

			} else {
				Buzzed(50, 2000);
    1774:	61645f78 	smcvs	17912
    1778:	a8006174 	stmdage	r0, {r2, r4, r5, r6, r8, sp, lr}
    177c:	7a000002 	bvc	178c <__Stack_Size+0x138c>
			}
			if (ControlMode != SINGLELEGMODE)
    1780:	745f6267 	ldrbvc	r6, [pc], #615	; 1788 <__Stack_Size+0x1388>
    1784:	696d7265 	stmdbvs	sp!, {r0, r2, r5, r6, r9, ip, sp, lr}^
				g_InControlState.SelectedLeg = 255;
    1788:	6574616e 	ldrbvs	r6, [r4, #-366]!
    178c:	0002bd00 	andeq	fp, r2, r0, lsl #26
    1790:	62677a00 	rsbvs	r7, r7, #0	; 0x0

		}

		//[Common functions]
		//Switch Balance mode on/off
		if ((buttons & BUT_L4) && !(buttonsPrev & BUT_L4)) {
    1794:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    1798:	6c616974 	stclvs	9, cr6, [r1], #-464
    179c:	00657a69 	rsbeq	r7, r5, r9, ror #20
    17a0:	000003a0 	andeq	r0, r0, r0, lsr #7
    17a4:	63526267 	cmpvs	r2, #1879048198	; 0x70000006
    17a8:	63615076 	cmnvs	r1, #118	; 0x76

			g_InControlState.BalanceMode = !g_InControlState.BalanceMode;
    17ac:	0074656b 	rsbseq	r6, r4, fp, ror #10
    17b0:	000003c2 	andeq	r0, r0, r2, asr #7
    17b4:	63526267 	cmpvs	r2, #1879048198	; 0x70000006
    17b8:	63615076 	cmnvs	r1, #118	; 0x76
    17bc:	4174656b 	cmnmi	r4, fp, ror #10
			if (g_InControlState.BalanceMode) {
    17c0:	69756472 	ldmdbvs	r5!, {r1, r4, r5, r6, sl, sp, lr}^
				Buzzed(250, 1500);
    17c4:	d4006f6e 	strle	r6, [r0], #-3950
    17c8:	67000003 	strvs	r0, [r0, -r3]
			} else {
				Buzzed(100, 2000);
    17cc:	76635262 	strbtvc	r5, [r3], -r2, ror #4
    17d0:	6b636150 	blvs	18d9d18 <__Stack_Size+0x18d9918>
				Buzzed(50, 4000);
    17d4:	754e7465 	strbvc	r7, [lr, #-1125]
    17d8:	03e6006d 	mvneq	r0, #109	; 0x6d
    17dc:	77670000 	strbvc	r0, [r7, -r0]!
			}
		}

		//Stand up, sit down
		if ((buttons & BUT_L5) && !(buttonsPrev & BUT_L5)) {
    17e0:	44766352 	ldrbtmi	r6, [r6], #-850
    17e4:	00617461 	rsbeq	r7, r1, r1, ror #8
    17e8:	000003f8 	strdeq	r0, [r0], -r8
    17ec:	63526267 	cmpvs	r2, #1879048198	; 0x70000006
    17f0:	616c4676 	smcvs	50278
    17f4:	040a0067 	streq	r0, [sl], #-103
			if (g_BodyYOffset > 0)
    17f8:	69720000 	ldmdbvs	r2!, {}^
    17fc:	5f746867 	svcpl	0x00746867
				g_BodyYOffset = 0;
    1800:	041c0056 	ldreq	r0, [ip], #-86
    1804:	69720000 	ldmdbvs	r2!, {}^
			else
				g_BodyYOffset = 35;
			fAdjustLegPositions = true;
			g_fDynamicLegXZLength = false;
    1808:	5f746867 	svcpl	0x00746867
		//Stand up, sit down
		if ((buttons & BUT_L5) && !(buttonsPrev & BUT_L5)) {
			if (g_BodyYOffset > 0)
				g_BodyYOffset = 0;
			else
				g_BodyYOffset = 35;
    180c:	042e0048 	strteq	r0, [lr], #-72
			fAdjustLegPositions = true;
			g_fDynamicLegXZLength = false;
    1810:	656c0000 	strbvs	r0, [ip]!
    1814:	565f7466 	ldrbpl	r7, [pc], -r6, ror #8

		// We will use L6 with the Right joystick to control both body offset as well as Speed...
		// We move each pass through this by a percentage of how far we are from center in each direction
		// We get feedback with height by seeing the robot move up and down.  For Speed, I put in sounds
		// which give an idea, but only for those whoes robot has a speaker
		int lx = leftH;
    1818:	00044000 	andeq	r4, r4, r0
		int ly = leftV;
		if (buttons & BUT_L6) {
    181c:	66656c00 	strbtvs	r6, [r5], -r0, lsl #24

		// We will use L6 with the Right joystick to control both body offset as well as Speed...
		// We move each pass through this by a percentage of how far we are from center in each direction
		// We get feedback with height by seeing the robot move up and down.  For Speed, I put in sounds
		// which give an idea, but only for those whoes robot has a speaker
		int lx = leftH;
    1820:	00485f74 	subeq	r5, r8, r4, ror pc
    1824:	00000452 	andeq	r0, r0, r2, asr r4
		int ly = leftV;
    1828:	74747562 	ldrbtvc	r7, [r4], #-1378
    182c:	5f736e6f 	svcpl	0x00736e6f
		if (buttons & BUT_L6) {
    1830:	00046400 	andeq	r6, r4, r0, lsl #8
    1834:	74786500 	ldrbtvc	r6, [r8], #-1280
			// raise or lower the robot on the joystick up /down
			// Maybe should have Min/Max
			int delta = rightV / 25;
    1838:	00006172 	andeq	r6, r0, r2, ror r1
    183c:	62000000 	andvs	r0, r0, #0	; 0x0
    1840:	02000002 	andeq	r0, r0, #2	; 0x2
    1844:	0042c900 	subeq	ip, r2, r0, lsl #18
    1848:	0003c500 	andeq	ip, r3, r0, lsl #10
    184c:	0000e500 	andeq	lr, r0, r0, lsl #10
			if (delta) {
    1850:	31584100 	cmpcc	r8, r0, lsl #2
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
    1854:	72655332 	rsbvc	r5, r5, #-939524096	; 0xc8000000
    1858:	00736f76 	rsbseq	r6, r3, r6, ror pc
    185c:	0000010c 	andeq	r0, r0, ip, lsl #2
    1860:	32315841 	eorscc	r5, r1, #4259840	; 0x410000
    1864:	5344495f 	movtpl	r4, #18783	; 0x495f
    1868:	00012300 	andeq	r2, r1, r0, lsl #6
    186c:	7a756200 	bvc	1d5a074 <__Stack_Size+0x1d59c74>
    1870:	4672657a 	undefined
    1874:	73696e69 	cmnvc	r9, #1680	; 0x690
			sLegInitAngleAdjust = ly / 8;
			lx = 0;
			ly = 0;

			// Likewise for Speed control
			delta = rightH / 16;   //
    1878:	00646568 	rsbeq	r6, r4, r8, ror #10
    187c:	00000135 	andeq	r0, r0, r5, lsr r1
    1880:	7a7a7562 	bvc	1e9ee10 <__Stack_Size+0x1e9ea10>
    1884:	65537265 	ldrbvs	r7, [r3, #-613]
    1888:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
			if ((delta < 0) && g_InControlState.SpeedControl) {
    188c:	69006563 	stmdbvs	r0, {r0, r1, r5, r6, r8, sl, sp, lr}
    1890:	61000001 	tstvs	r0, r1
    1894:	735f6364 	cmpvc	pc, #-1879048191	; 0x90000001
				if ((word)(-delta) < g_InControlState.SpeedControl)
    1898:	6f736e65 	svcvs	0x00736e65
					g_InControlState.SpeedControl += delta;
    189c:	6e655f72 	mcrvs	15, 3, r5, cr5, cr2, {3}
				else
					g_InControlState.SpeedControl = 0;
    18a0:	656c6261 	strbvs	r6, [ip, #-609]!
    18a4:	00019000 	andeq	r9, r1, r0

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}
			if ((delta > 0) && (g_InControlState.SpeedControl < 2000)) {
    18a8:	63646100 	cmnvs	r4, #0	; 0x0
    18ac:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
    18b0:	5f726f73 	svcpl	0x00726f73
				g_InControlState.SpeedControl += delta;
				if (g_InControlState.SpeedControl > 2000)
    18b4:	006c6176 	rsbeq	r6, ip, r6, ror r1
					g_InControlState.SpeedControl = 0;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}
			if ((delta > 0) && (g_InControlState.SpeedControl < 2000)) {
				g_InControlState.SpeedControl += delta;
    18b8:	000001a7 	andeq	r0, r0, r7, lsr #3
				if (g_InControlState.SpeedControl > 2000)
					g_InControlState.SpeedControl = 2000;
    18bc:	5f636461 	svcpl	0x00636461
    18c0:	74746162 	ldrbtvc	r6, [r4], #-354

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
    18c4:	5f797265 	svcpl	0x00797265
    18c8:	006c6176 	rsbeq	r6, ip, r6, ror r1
    18cc:	000001be 	strheq	r0, [r0], -lr
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
				fAdjustLegPositions = true;
			}

			// Also use right Horizontal to manually adjust the initial leg positions.
			sLegInitXZAdjust = lx / 10;        // play with this.
    18d0:	5f636461 	svcpl	0x00636461
    18d4:	6f727967 	svcvs	0x00727967
    18d8:	65635f78 	strbvs	r5, [r3, #-3960]!
    18dc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
			sLegInitAngleAdjust = ly / 8;
    18e0:	0001d000 	andeq	sp, r1, r0
    18e4:	63646100 	cmnvs	r4, #0	; 0x0
    18e8:	7279675f 	rsbsvc	r6, r9, #24903680	; 0x17c0000
    18ec:	635f796f 	cmpvs	pc, #1818624	; 0x1bc000
					g_InControlState.SpeedControl = 2000;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}

			rightH = 0; // don't walk when adjusting the speed here...
    18f0:	65746e65 	ldrbvs	r6, [r4, #-3685]!
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
				fAdjustLegPositions = true;
			}

			// Also use right Horizontal to manually adjust the initial leg positions.
			sLegInitXZAdjust = lx / 10;        // play with this.
    18f4:	01e20072 	mvneq	r0, r2, ror r0
					g_InControlState.SpeedControl = 2000;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}

			rightH = 0; // don't walk when adjusting the speed here...
    18f8:	64610000 	strbtvs	r0, [r1]
		}

		//[Walk functions]
		if (ControlMode == WALKMODE) {
    18fc:	63615f63 	cmnvs	r1, #396	; 0x18c
    1900:	786c6563 	stmdavc	ip!, {r0, r1, r5, r6, r8, sl, sp, lr}^
    1904:	0001f900 	andeq	pc, r1, r0, lsl #18

			//Switch gates
			if (((buttons & BUT_R1) && !(buttonsPrev & BUT_R1))
    1908:	63646100 	cmnvs	r4, #0	; 0x0
    190c:	6363615f 	cmnvs	r3, #-1073741801	; 0xc0000017
    1910:	00796c65 	rsbseq	r6, r9, r5, ror #24
    1914:	0000020b 	andeq	r0, r0, fp, lsl #4
    1918:	5f636461 	svcpl	0x00636461
    191c:	65636361 	strbvs	r6, [r3, #-865]!
    1920:	635f786c 	cmpvs	pc, #7077888	; 0x6c0000
    1924:	65746e65 	ldrbvs	r6, [r4, #-3685]!
    1928:	021d0072 	andseq	r0, sp, #114	; 0x72
    192c:	64610000 	strbtvs	r0, [r1]
    1930:	63615f63 	cmnvs	r1, #396	; 0x18c
    1934:	796c6563 	stmdbvc	ip!, {r0, r1, r5, r6, r8, sl, sp, lr}^
    1938:	6e65635f 	mcrvs	3, 3, r6, cr5, cr15, {2}
    193c:	00726574 	rsbseq	r6, r2, r4, ror r5
    1940:	0000022f 	andeq	r0, r0, pc, lsr #4
    1944:	5f636461 	svcpl	0x00636461
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
    1948:	72746c75 	rsbsvc	r6, r4, #29952	; 0x7500
					&& abs(g_InControlState.TravelLength.x) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
    194c:	6e6f7361 	cdpvs	3, 6, cr7, cr15, cr1, {3}
    1950:	645f6369 	ldrbvs	r6, [pc], #873	; 1958 <__Stack_Size+0x1558>
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
    1954:	61747369 	cmnvs	r4, r9, ror #6
					&& abs(g_InControlState.TravelLength.x) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
    1958:	0065636e 	rsbeq	r6, r5, lr, ror #6
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
					Buzzed(50, 2000);
    195c:	00000241 	andeq	r0, r0, r1, asr #4
    1960:	5f636461 	svcpl	0x00636461
    1964:	5f736d64 	svcpl	0x00736d64
				} else {
					Buzzed(50, 2000);
    1968:	74736964 	ldrbtvc	r6, [r3], #-2404
    196c:	65636e61 	strbvs	r6, [r3, #-3681]!
    1970:	00025300 	andeq	r5, r2, r0, lsl #6
					Buzzed(50, 2250);
    1974:	6f696200 	svcvs	0x00696200
    1978:	64696f6c 	strbtvs	r6, [r9], #-3948
					g_InControlState.GaitType = 0;
    197c:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!
    1980:	646e616d 	strbtvs	r6, [lr], #-365
}

void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {
    1984:	00026a00 	andeq	r6, r2, r0, lsl #20
    1988:	73616c00 	cmnvc	r1, #0	; 0x0
    198c:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^

		g_InControlState.gaitCur = APG[g_InControlState.GaitType];
    1990:	696f6c6f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
    1994:	6f635f64 	svcvs	0x00635f64
    1998:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
    199c:	027c0064 	rsbseq	r0, ip, #100	; 0x64
    19a0:	656e0000 	strbvs	r0, [lr]!
				}
				GaitSelect();
			}

			//Double leg lift height
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    19a4:	6f635f77 	svcvs	0x00635f77
    19a8:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
    19ac:	02930064 	addseq	r0, r3, #100	; 0x64
    19b0:	6c660000 	stclvs	0, cr0, [r6]
    19b4:	725f6761 	subsvc	r6, pc, #25427968	; 0x1840000
				Buzzed(50, 2000);
    19b8:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    19bc:	725f6576 	subsvc	r6, pc, #494927872	; 0x1d800000
				HeightSpeedMode = (HeightSpeedMode + 1) & 0x3; // wrap around mode
    19c0:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    19c4:	0002a500 	andeq	sl, r2, r0, lsl #10
    19c8:	6a616d00 	bvs	185cdd0 <__Stack_Size+0x185c9d0>
    19cc:	615f726f 	cmpvs	pc, pc, ror #4
				DoubleTravelOn = HeightSpeedMode & 0x1;
    19d0:	6d72616c 	ldfvse	f6, [r2, #-432]!
    19d4:	0002c700 	andeq	ip, r2, r0, lsl #14
				if (HeightSpeedMode & 0x2)
    19d8:	72756300 	rsbsvc	r6, r5, #0	; 0x0
    19dc:	746e6572 	strbtvc	r6, [lr], #-1394
					g_InControlState.LegLiftHeight = 80;
    19e0:	736f705f 	cmnvc	pc, #95	; 0x5f
    19e4:	02f40065 	rscseq	r0, r4, #101	; 0x65
				else
					g_InControlState.LegLiftHeight = 50;
			}

			// Switch between Walk method 1 && Walk method 2
			if ((buttons & BUT_R2) && !(buttonsPrev & BUT_R2)) {
    19e8:	6f6d0000 	svcvs	0x006d0000
    19ec:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    19f0:	6574735f 	ldrbvs	r7, [r4, #-863]!
    19f4:	65735f70 	ldrbvs	r5, [r3, #-3952]!
    19f8:	736f7672 	cmnvc	pc, #119537664	; 0x7200000

				if ((++bJoystickWalkMode) > 1)
    19fc:	766f6d5f 	undefined
    1a00:	00676e69 	rsbeq	r6, r7, r9, ror #28
    1a04:	0000030b 	andeq	r0, r0, fp, lsl #6

					bJoystickWalkMode = 0;
				Buzzed(50, 2000 + bJoystickWalkMode * 250);
    1a08:	69746f6d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
			// Switch between Walk method 1 && Walk method 2
			if ((buttons & BUT_R2) && !(buttonsPrev & BUT_R2)) {

				if ((++bJoystickWalkMode) > 1)

					bJoystickWalkMode = 0;
    1a0c:	735f6e6f 	cmpvc	pc, #1776	; 0x6f0
				Buzzed(50, 2000 + bJoystickWalkMode * 250);
    1a10:	6f767265 	svcvs	0x00767265
    1a14:	6f6d5f73 	svcvs	0x006d5f73
    1a18:	676e6976 	undefined
    1a1c:	00032200 	andeq	r2, r3, r0, lsl #4
			}

			//Walking
			switch (bJoystickWalkMode) {
    1a20:	72756300 	rsbsvc	r6, r5, #0	; 0x0
    1a24:	746e6572 	strbtvc	r6, [lr], #-1394
    1a28:	746f6d5f 	strbtvc	r6, [pc], #3423	; 1a30 <__Stack_Size+0x1630>
			case 0:
				g_InControlState.TravelLength.x = -lx;
    1a2c:	5f6e6f69 	svcpl	0x006e6f69
    1a30:	65676170 	strbvs	r6, [r7, #-368]!
    1a34:	00033400 	andeq	r3, r3, r0, lsl #8
				g_InControlState.TravelLength.z = -ly;
    1a38:	78656e00 	stmdavc	r5!, {r9, sl, fp, sp, lr}^
				g_InControlState.TravelLength.y = -(rightH) / 4; //Right Stick Left/Right
				break;
			case 1:
				g_InControlState.TravelLength.z = (rightV); //Right Stick Up/Down
    1a3c:	6f6d5f74 	svcvs	0x006d5f74
    1a40:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1a44:	6761705f 	undefined
				g_InControlState.TravelLength.y = -(rightH) / 4; //Right Stick Left/Right
    1a48:	03460065 	movteq	r0, #24677	; 0x6065
    1a4c:	75630000 	strbvc	r0, [r3]!
    1a50:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    1a54:	74735f74 	ldrbtvc	r5, [r3], #-3956
    1a58:	68007065 	stmdavs	r0, {r0, r2, r5, r6, ip, sp, lr}
    1a5c:	70000003 	andvc	r0, r0, r3
				break;

			}

			if (!DoubleTravelOn) {  //(Double travel length)
    1a60:	695f6469 	ldmdbvs	pc, {r0, r3, r5, r6, sl, sp, lr}^
				g_InControlState.TravelLength.x =
    1a64:	7475706e 	ldrbtvc	r7, [r5], #-110
    1a68:	00037f00 	andeq	r7, r3, r0, lsl #30
    1a6c:	64697000 	strbtvs	r7, [r9]
						g_InControlState.TravelLength.x / 2;
				g_InControlState.TravelLength.z =
    1a70:	74756f5f 	ldrbtvc	r6, [r5], #-3935
    1a74:	00747570 	rsbseq	r7, r4, r0, ror r5
    1a78:	00000396 	muleq	r0, r6, r3
			}

		}

		//[Translate functions]
		g_BodyYShift = 0;
    1a7c:	5f646970 	svcpl	0x00646970
    1a80:	70746573 	rsbsvc	r6, r4, r3, ror r5
		if (ControlMode == TRANSLATEMODE) {
    1a84:	746e696f 	strbtvc	r6, [lr], #-2415
    1a88:	0003ad00 	andeq	sl, r3, r0, lsl #26

		      g_InControlState.BodyPos.x =  SmoothControl(((lx)*2/3), g_InControlState.BodyPos.x, SmDiv);
    1a8c:	64697000 	strbtvs	r7, [r9]
    1a90:	736e755f 	cmnvc	lr, #398458880	; 0x17c00000
    1a94:	656c6163 	strbvs	r6, [ip, #-355]!
    1a98:	756f5f64 	strbvc	r5, [pc, #-3940]!	; b3c <__Stack_Size+0x73c>
    1a9c:	74757074 	ldrbtvc	r7, [r5], #-116
    1aa0:	00000000 	andeq	r0, r0, r0
    1aa4:	00004c00 	andeq	r4, r0, r0, lsl #24
    1aa8:	8e000200 	cdphi	2, 0, cr0, cr0, cr0, {0}
		      g_InControlState.BodyPos.z =  SmoothControl(((ly)*2/3), g_InControlState.BodyPos.z, SmDiv);
    1aac:	73000046 	movwvc	r0, #70	; 0x46
    1ab0:	50000004 	andpl	r0, r0, r4
    1ab4:	74000002 	strvc	r0, [r0], #-2
    1ab8:	665f7066 	ldrbvs	r7, [pc], -r6, rrx
    1abc:	616d726f 	cmnvs	sp, pc, ror #4
		      g_InControlState.BodyRot1.y = SmoothControl(((rightH)*2), g_InControlState.BodyRot1.y, SmDiv);
    1ac0:	037a0074 	cmneq	sl, #116	; 0x74
		//[Translate functions]
		g_BodyYShift = 0;
		if (ControlMode == TRANSLATEMODE) {

		      g_InControlState.BodyPos.x =  SmoothControl(((lx)*2/3), g_InControlState.BodyPos.x, SmDiv);
		      g_InControlState.BodyPos.z =  SmoothControl(((ly)*2/3), g_InControlState.BodyPos.z, SmDiv);
    1ac4:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
		      g_InControlState.BodyRot1.y = SmoothControl(((rightH)*2), g_InControlState.BodyRot1.y, SmDiv);
    1ac8:	705f7469 	subsvc	r7, pc, r9, ror #8
    1acc:	746e6972 	strbtvc	r6, [lr], #-2418
    1ad0:	03ce0066 	biceq	r0, lr, #102	; 0x66
    1ad4:	66740000 	ldrbtvs	r0, [r4], -r0


			//      g_InControlState.BodyPos.x = (lx)/2;
			//      g_InControlState.BodyPos.z = -(ly)/3;
			//      g_InControlState.BodyRot1.y = (rightH)*2;
			g_BodyYShift = (-(rightV) / 2);
    1ad8:	70735f70 	rsbsvc	r5, r3, r0, ror pc
    1adc:	746e6972 	strbtvc	r6, [lr], #-2418
    1ae0:	041d0066 	ldreq	r0, [sp], #-102
    1ae4:	66740000 	ldrbtvs	r0, [r4], -r0
    1ae8:	72705f70 	rsbsvc	r5, r0, #448	; 0x1c0
    1aec:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
    1af0:	00000000 	andeq	r0, r0, r0
			g_InControlState.BodyRot1.x = (ly);
			g_InControlState.BodyRot1.y = (rightH) * 2;
    1af4:	00005d00 	andeq	r5, r0, r0, lsl #26
    1af8:	01000200 	tsteq	r0, r0, lsl #4
			g_InControlState.BodyRot1.z = (lx);
			g_BodyYShift = (-(rightV) / 2);
    1afc:	f900004b 	undefined instruction 0xf900004b
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
			g_InControlState.BodyRot1.x = (ly);
			g_InControlState.BodyRot1.y = (rightH) * 2;
    1b00:	fb000003 	blx	1b16 <__Stack_Size+0x1716>
			g_BodyYShift = (-(rightV) / 2);
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
			g_InControlState.BodyRot1.x = (ly);
    1b04:	53000002 	movwpl	r0, #2	; 0x2
			g_InControlState.BodyRot1.y = (rightH) * 2;
			g_InControlState.BodyRot1.z = (lx);
			g_BodyYShift = (-(rightV) / 2);
    1b08:	50457465 	subpl	r7, r5, r5, ror #8
    1b0c:	0074726f 	rsbseq	r7, r4, pc, ror #4
    1b10:	00000333 	andeq	r0, r0, r3, lsr r3
    1b14:	64616552 	strbtvs	r6, [r1], #-1362
    1b18:	6c616e41 	stclvs	14, cr6, [r1], #-260
		}

		//[Single leg functions]
#ifdef OPT_SINGLELEG
		if (ControlMode == SINGLELEGMODE) {
    1b1c:	7900676f 	stmdbvc	r0, {r0, r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}

			//Switch leg for single leg control
			if ((buttons & BUT_R1) && !(buttonsPrev & BUT_R1)) {
    1b20:	42000003 	andmi	r0, r0, #3	; 0x3
    1b24:	65747461 	ldrbvs	r7, [r4, #-1121]!
    1b28:	4d5f7972 	ldclmi	9, cr7, [pc, #-456]
    1b2c:	74696e6f 	strbtvc	r6, [r9], #-3695
    1b30:	415f726f 	cmpmi	pc, pc, ror #4
				Buzzed(50,2000);
    1b34:	6d72616c 	ldfvse	f6, [r2, #-432]!
    1b38:	00039e00 	andeq	r9, r3, r0, lsl #28
    1b3c:	61655200 	cmnvs	r5, r0, lsl #4
				if (g_InControlState.SelectedLeg < (CNT_LEGS-1)) {
    1b40:	00524964 	subseq	r4, r2, r4, ror #18
    1b44:	000003e6 	andeq	r0, r0, r6, ror #7
					g_InControlState.SelectedLeg = g_InControlState.SelectedLeg + 1;
				} else {
					g_InControlState.SelectedLeg = 0;
    1b48:	79736145 	ldmdbvc	r3!, {r0, r2, r6, r8, sp, lr}^
		if (ControlMode == SINGLELEGMODE) {

			//Switch leg for single leg control
			if ((buttons & BUT_R1) && !(buttonsPrev & BUT_R1)) {
				Buzzed(50,2000);
				if (g_InControlState.SelectedLeg < (CNT_LEGS-1)) {
    1b4c:	726f5045 	rsbvc	r5, pc, #69	; 0x45
					g_InControlState.SelectedLeg = g_InControlState.SelectedLeg + 1;
    1b50:	00000074 	andeq	r0, r0, r4, ror r0
			   g_InControlState.SLLeg.x= (signed char)((int)((int)lx+128)/2); //Left Stick Right/Left
      		   g_InControlState.SLLeg.y= (signed char)((int)((int)rightV+128)/10); //Right Stick Up/Down
		       g_InControlState.SLLeg.z = (signed char)((int)((int)ly+128)/2); //Left Stick Up/Down

#else
			g_InControlState.SLLeg.x = lx; //Left Stick Right/Left
    1b54:	002c0000 	eoreq	r0, ip, r0
			g_InControlState.SLLeg.y = rightV / 3 - 20;//Right Stick Up/Down
    1b58:	00020000 	andeq	r0, r2, r0
    1b5c:	00004efa 	strdeq	r4, [r0], -sl
    1b60:	000001c5 	andeq	r0, r0, r5, asr #3
    1b64:	00000175 	andeq	r0, r0, r5, ror r1
    1b68:	64616552 	strbtvs	r6, [r1], #-1362
			g_InControlState.SLLeg.z = ly;//Left Stick Up/Down

#endif
			// Hold single leg in place
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    1b6c:	74747542 	ldrbtvc	r7, [r4], #-1346
    1b70:	b2006e6f 	andlt	r6, r0, #1776	; 0x6f0
    1b74:	45000001 	strmi	r0, [r0, #-1]
      		   g_InControlState.SLLeg.y= (signed char)((int)((int)rightV+128)/10); //Right Stick Up/Down
		       g_InControlState.SLLeg.z = (signed char)((int)((int)ly+128)/2); //Left Stick Up/Down

#else
			g_InControlState.SLLeg.x = lx; //Left Stick Right/Left
			g_InControlState.SLLeg.y = rightV / 3 - 20;//Right Stick Up/Down
    1b78:	42797361 	rsbsmi	r7, r9, #-2080374783	; 0x84000001
			g_InControlState.SLLeg.z = ly;//Left Stick Up/Down

#endif
			// Hold single leg in place
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    1b7c:	6f747475 	svcvs	0x00747475
    1b80:	0000006e 	andeq	r0, r0, lr, rrx
    1b84:	00250000 	eoreq	r0, r5, r0
				Buzzed(50,2000);
    1b88:	00020000 	andeq	r0, r2, r0
    1b8c:	000050bf 	strheq	r5, [r0], -pc
				g_InControlState.fSLHold = !g_InControlState.fSLHold;
    1b90:	000001c2 	andeq	r0, r0, r2, asr #3
    1b94:	00000167 	andeq	r0, r0, r7, ror #2
    1b98:	4c746553 	cfldr64mi	mvdx6, [r4], #-332
    1b9c:	af004445 	svcge	0x00004445
			}
		}
#endif

		//Calculate walking time delay
		g_InControlState.InputTimeDelay = 128- max(max(abs(lx), abs(ly)), abs(rightH));
    1ba0:	45000001 	strmi	r0, [r0, #-1]
    1ba4:	4c797361 	ldclmi	3, cr7, [r9], #-388
    1ba8:	00004445 	andeq	r4, r0, r5, asr #8
    1bac:	26000000 	strcs	r0, [r0], -r0
    1bb0:	02000000 	andeq	r0, r0, #0	; 0x0
    1bb4:	00528100 	subseq	r8, r2, r0, lsl #2
    1bb8:	00021100 	andeq	r1, r2, r0, lsl #2
    1bbc:	00017f00 	andeq	r7, r1, r0, lsl #30
    1bc0:	7a754200 	bvc	1d523c8 <__Stack_Size+0x1d51fc8>
    1bc4:	0064657a 	rsbeq	r6, r4, sl, ror r5
    1bc8:	000001b7 	strheq	r0, [r0], -r7
    1bcc:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
    1bd0:	65746f4e 	ldrbvs	r6, [r4, #-3918]!

		//Calculate g_InControlState.BodyPos.y
		g_InControlState.BodyPos.y = max(g_BodyYOffset + g_BodyYShift, 0);
    1bd4:	00000000 	andeq	r0, r0, r0
    1bd8:	00013800 	andeq	r3, r1, r0, lsl #16
    1bdc:	92000200 	andls	r0, r0, #0	; 0x0
    1be0:	4b000054 	blmi	1d38 <__Stack_Size+0x1938>
    1be4:	9e000002 	cdpls	0, 0, cr0, cr0, cr2, {0}
    1be8:	75000000 	strvc	r0, [r0]

		if (sLegInitXZAdjust || sLegInitAngleAdjust) {
    1bec:	616c6544 	cmnvs	ip, r4, asr #10
    1bf0:	00c30079 	sbceq	r0, r3, r9, ror r0
			// User asked for manual leg adjustment - only do when we have finished any previous adjustment

			if (!g_InControlState.ForceGaitStepCnt) {
    1bf4:	446d0000 	strbtmi	r0, [sp]
				if (sLegInitXZAdjust)
    1bf8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
					g_fDynamicLegXZLength = true;
    1bfc:	0000ec00 	andeq	lr, r0, r0, lsl #24
    1c00:	61747300 	cmnvs	r4, r0, lsl #6

				sLegInitXZAdjust += GetLegsXZLength(); // Add on current length to our adjustment...
    1c04:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
    1c08:	746e756f 	strbtvc	r7, [lr], #-1391
				// Handle maybe change angles...
				if (sLegInitAngleAdjust)
					RotateLegInitAngles(sLegInitAngleAdjust);

				// Give system time to process previous calls
				AdjustLegPositions(sLegInitXZAdjust);
    1c0c:	6e776f64 	cdpvs	15, 7, cr6, cr7, cr4, {3}
			}
		}

		if (fAdjustLegPositions && !g_fDynamicLegXZLength)
    1c10:	7a75625f 	bvc	1d5a594 <__Stack_Size+0x1d5a194>
    1c14:	0072657a 	rsbseq	r6, r2, sl, ror r5
    1c18:	00000111 	andeq	r0, r0, r1, lsl r1
			AdjustLegPositionsToBodyHeight(); // Put main workings into main program file
    1c1c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
		// Save away the buttons state as to not process the same press twice.
		buttonsPrev = buttons;
    1c20:	69745f74 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1c24:	756f656d 	strbvc	r6, [pc, #-1389]!	; 16bf <__Stack_Size+0x12bf>
		extPrev = ext;
    1c28:	78645f74 	stmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1c2c:	0136006c 	teqeq	r6, ip, rrx
		g_ulLastMsgTime = getMillis();
    1c30:	74730000 	ldrbtvc	r0, [r3]
    1c34:	5f747261 	svcpl	0x00747261
	} else {
		// We did not receive a valid packet.  check for a timeout to see if we should turn robot off...
		if (g_InControlState.fRobotOn) {
    1c38:	656d6974 	strbvs	r6, [sp, #-2420]!
			if ((getMillis() - g_ulLastMsgTime) > ARBOTIX_TO)
    1c3c:	5f74756f 	svcpl	0x0074756f
    1c40:	00756370 	rsbseq	r6, r5, r0, ror r3
    1c44:	0000015b 	andeq	r0, r0, fp, asr r1
    1c48:	4d746567 	cfldr64mi	mvdx6, [r4, #-412]!
    1c4c:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
				CommanderTurnRobotOff();
    1c50:	01720073 	cmneq	r2, r3, ror r0
		}
	}

}
    1c54:	53490000 	movtpl	r0, #36864	; 0x9000
    1c58:	65445f52 	strbvs	r5, [r4, #-3922]
    1c5c:	5f79616c 	svcpl	0x0079616c
    1c60:	65736142 	ldrbvs	r6, [r3, #-322]!
    1c64:	00018700 	andeq	r8, r1, r0, lsl #14
    1c68:	61745300 	cmnvs	r4, r0, lsl #6
    1c6c:	6f437472 	svcvs	0x00437472
    1c70:	64746e75 	ldrbtvs	r6, [r4], #-3701
    1c74:	006e776f 	rsbeq	r7, lr, pc, ror #14
    1c78:	000001b0 	strheq	r0, [r0], -r0
    1c7c:	65446c67 	strbvs	r6, [r4, #-3175]
    1c80:	4379616c 	cmnmi	r9, #27	; 0x1b
    1c84:	746e756f 	strbtvc	r7, [lr], #-1391
    1c88:	c7007265 	strgt	r7, [r0, -r5, ror #4]
    1c8c:	67000001 	strvs	r0, [r0, -r1]
    1c90:	756f436c 	strbvc	r4, [pc, #-876]!	; 192c <__Stack_Size+0x152c>
    1c94:	6f64746e 	svcvs	0x0064746e
    1c98:	6f436e77 	svcvs	0x00436e77
    1c9c:	65746e75 	ldrbvs	r6, [r4, #-3701]!
    1ca0:	01d90072 	bicseq	r0, r9, r2, ror r0
    1ca4:	6c670000 	stclvs	0, cr0, [r7]
    1ca8:	546c7844 	strbtpl	r7, [ip], #-2116
    1cac:	6f656d69 	svcvs	0x00656d69

extern void setupPhoenix(void);
extern void readSensors(void);


int Big_main(void) {
    1cb0:	6f437475 	svcvs	0x00437475

	// Must include this line in all programs using "cm530.h/.c"
	SysInit();
    1cb4:	65746e75 	ldrbvs	r6, [r4, #-3701]!
	setupPhoenix();
    1cb8:	01eb0072 	mvneq	r0, r2, ror r0
			TotalYBal1 = 0;
			TotalZBal1 = 0;

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1cbc:	6c670000 	stclvs	0, cr0, [r7]

	while (1){
		while (1) {
			//Start time
			unsigned long lTimeWaitEnd;
			lTimerStart = getMillis();
    1cc0:	54756350 	ldrbtpl	r6, [r5], #-848
    1cc4:	6f656d69 	svcvs	0x00656d69
    1cc8:	6f437475 	svcvs	0x00437475
#ifdef MILLIS
			PrintString("Barebones lTimerStart ");
			Printu32d(lTimerStart);
			PrintString("\n");
#endif
			DoBackgroundProcess();
    1ccc:	65746e75 	ldrbvs	r6, [r4, #-3701]!
			//Read input
			CheckVoltage();        // check our voltages...
    1cd0:	01fd0072 	mvnseq	r0, r2, ror r0
			if (!g_fLowVoltageShutdown) {
    1cd4:	6c670000 	stclvs	0, cr0, [r7]
    1cd8:	7a7a7542 	bvc	1e9f1e8 <__Stack_Size+0x1e9ede8>
				CommanderInputController_ControlInput();
    1cdc:	6f437265 	svcvs	0x00437265
			}
			WriteOutputs();        // Write Outputs
			//Single leg control
			SingleLegControl();
    1ce0:	65746e75 	ldrbvs	r6, [r4, #-3701]!
			DoBackgroundProcess();
    1ce4:	020f0072 	andeq	r0, pc, #114	; 0x72

			//Gait
			GaitSeq();
    1ce8:	62670000 	rsbvs	r0, r7, #0	; 0x0

			DoBackgroundProcess();
    1cec:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}

			//Balance calculations
			TotalTransX = 0;     //reset values used for calculation of balance
    1cf0:	43726574 	cmnmi	r2, #486539264	; 0x1d000000
    1cf4:	746e756f 	strbtvc	r7, [lr], #-1391
			TotalTransZ = 0;
    1cf8:	00022600 	andeq	r2, r2, r0, lsl #12
			TotalTransY = 0;
    1cfc:	6c694d00 	stclvs	13, cr4, [r9]
    1d00:	0073696c 	rsbseq	r6, r3, ip, ror #18
			TotalXBal1 = 0;
    1d04:	00000238 	andeq	r0, r0, r8, lsr r2
			TotalYBal1 = 0;
    1d08:	694d736d 	stmdbvs	sp, {r0, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    1d0c:	73696c6c 	cmnvc	r9, #27648	; 0x6c00
			TotalZBal1 = 0;
    1d10:	00000000 	andeq	r0, r0, r0

			if (g_InControlState.BalanceMode) {
    1d14:	0000a600 	andeq	sl, r0, r0, lsl #12
    1d18:	dd000200 	sfmle	f0, 4, [r0]
    1d1c:	8f000056 	svchi	0x00000056

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1d20:	bb000005 	bllt	1d3c <__Stack_Size+0x193c>

					DoBackgroundProcess();
					BalCalcOneLeg(-LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d24:	55000003 	strpl	r0, [r0, #-3]
    1d28:	54524153 	ldrbpl	r4, [r2], #-339
    1d2c:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs

					DoBackgroundProcess();
    1d30:	75676966 	strbvc	r6, [r7, #-2406]!
					BalCalcOneLeg(-LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d34:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1d38:	e1006e6f 	tst	r0, pc, ror #28
    1d3c:	53000003 	movwpl	r0, #3	; 0x3
    1d40:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    1d44:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    1d48:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1d4c:	61727567 	cmnvs	r2, r7, ror #10
    1d50:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1d54:	0003f700 	andeq	pc, r3, r0, lsl #14
    1d58:	43444100 	movtmi	r4, #16640	; 0x4100
    1d5c:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
    1d60:	75676966 	strbvc	r6, [r7, #-2406]!
    1d64:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1d68:	1f006e6f 	svcne	0x00006e6f
    1d6c:	47000004 	strmi	r0, [r0, -r4]
			TotalYBal1 = 0;
			TotalZBal1 = 0;

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1d70:	5f4f4950 	svcpl	0x004f4950
    1d74:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1d78:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
    1d7c:	6f697461 	svcvs	0x00697461
    1d80:	0447006e 	strbeq	r0, [r7], #-110
					DoBackgroundProcess();
					BalCalcOneLeg(LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d84:	564e0000 	strbpl	r0, [lr], -r0
    1d88:	435f4349 	cmpmi	pc, #603979777	; 0x24000001
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
					DoBackgroundProcess();
    1d8c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
					BalCalcOneLeg(LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d90:	61727567 	cmnvs	r2, r7, ror #10
    1d94:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1d98:	00046f00 	andeq	r6, r4, r0, lsl #30
    1d9c:	43435200 	movtmi	r5, #12800	; 0x3200
    1da0:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
    1da4:	75676966 	strbvc	r6, [r7, #-2406]!
    1da8:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1dac:	94006e6f 	strls	r6, [r0], #-3695
    1db0:	53000004 	movwpl	r0, #4	; 0x4
    1db4:	6e497379 	mcrvs	3, 2, r7, cr9, cr9, {3}
    1db8:	00007469 	andeq	r7, r0, r9, ror #8
    1dbc:	01000000 	tsteq	r0, r0
    1dc0:	02000002 	andeq	r0, r0, #2	; 0x2
    1dc4:	005c6c00 	subseq	r6, ip, r0, lsl #24
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
    1dc8:	0007ed00 	andeq	lr, r7, r0, lsl #26
    1dcc:	00029c00 	andeq	r9, r2, r0, lsl #24
    1dd0:	75637000 	strbvc	r7, [r3]!
							LegPosZ[LegIndex] + GaitPosZ[LegIndex],
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}
				BalanceBody();
    1dd4:	6c61685f 	stclvs	8, cr6, [r1], #-380
			}

			//Reset IKsolution indicators
			IKSolution = 0;
    1dd8:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!
    1ddc:	74756f65 	ldrbtvc	r6, [r5], #-3941
			IKSolutionWarning = 0;
			IKSolutionError = 0;

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
    1de0:	0002b300 	andeq	fp, r2, r0, lsl #6
			}

			//Reset IKsolution indicators
			IKSolution = 0;
			IKSolutionWarning = 0;
			IKSolutionError = 0;
    1de4:	75637000 	strbvc	r7, [r3]!
    1de8:	7465675f 	strbtvc	r6, [r5], #-1887

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
				DoBackgroundProcess();
    1dec:	6575715f 	ldrbvs	r7, [r5, #-351]!
				BodyFK(
    1df0:	de006575 	cfrshl64le	mvdx0, mvdx5, r6
    1df4:	70000002 	andvc	r0, r0, r2
    1df8:	705f7563 	subsvc	r7, pc, r3, ror #10
    1dfc:	5f6b6565 	svcpl	0x006b6565
    1e00:	75657571 	strbvc	r7, [r5, #-1393]!
    1e04:	03090065 	movweq	r0, #36965	; 0x9065
    1e08:	63700000 	cmnvs	r0, #0	; 0x0
    1e0c:	6c635f75 	stclvs	15, cr5, [r3], #-468
    1e10:	5f726165 	svcpl	0x00726165
    1e14:	75657571 	strbvc	r7, [r5, #-1393]!
    1e18:	03180065 	tsteq	r8, #101	; 0x65
    1e1c:	63700000 	cmnvs	r0, #0	; 0x0
    1e20:	65675f75 	strbvs	r5, [r7, #-3957]!
    1e24:	73715f74 	cmnvc	r1, #464	; 0x1d0
    1e28:	65746174 	ldrbvs	r6, [r4, #-372]!
    1e2c:	00034300 	andeq	r4, r3, r0, lsl #6
    1e30:	62677a00 	rsbvs	r7, r7, #0	; 0x0
    1e34:	6c61685f 	stclvs	8, cr6, [r1], #-380
    1e38:	0078725f 	rsbseq	r7, r8, pc, asr r2
    1e3c:	00000396 	muleq	r0, r6, r3
    1e40:	5f6c7864 	svcpl	0x006c7864
    1e44:	5f6c6168 	svcpl	0x006c6168
    1e48:	61656c63 	cmnvs	r5, r3, ror #24
    1e4c:	03b90072 	undefined instruction 0x03b90072
						+ GaitPosZ[LegIndex] - TotalTransZ,
						LegPosY[LegIndex] + g_InControlState.BodyPos.y
						+ GaitPosY[LegIndex] - TotalTransY,
						GaitRotY[LegIndex], LegIndex);

				LegIK(
    1e50:	78640000 	stmdavc	r4!, {}^
    1e54:	61685f6c 	cmnvs	r8, ip, ror #30
    1e58:	78725f6c 	ldmdavc	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1e5c:	00040600 	andeq	r0, r4, r0, lsl #12
    1e60:	6c786400 	cfldrdvs	mvd6, [r8]
    1e64:	6c61685f 	stclvs	8, cr6, [r1], #-380
    1e68:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!
    1e6c:	74756f65 	ldrbtvc	r6, [r5], #-3941
    1e70:	00041e00 	andeq	r1, r4, r0, lsl #28
    1e74:	44785200 	ldrbtmi	r5, [r8], #-512
    1e78:	4c58445f 	cfldrdmi	mvd4, [r8], {95}
    1e7c:	746e495f 	strbtvc	r4, [lr], #-2399
    1e80:	75727265 	ldrbvc	r7, [r2, #-613]!
    1e84:	47007470 	smlsdxmi	r0, r0, r4, r7
    1e88:	64000004 	strvs	r0, [r0], #-4
    1e8c:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^
    1e90:	735f6c61 	cmpvc	pc, #24832	; 0x6100
    1e94:	745f7465 	ldrbvc	r7, [pc], #1125	; 1e9c <__Stack_Size+0x1a9c>
    1e98:	6f656d69 	svcvs	0x00656d69
    1e9c:	72007475 	andvc	r7, r0, #1962934272	; 0x75000000
    1ea0:	64000004 	strvs	r0, [r0], #-4
    1ea4:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^
    1ea8:	745f6c61 	ldrbvc	r6, [pc], #3169	; 1eb0 <__Stack_Size+0x1ab0>
    1eac:	04bb0078 	ldrteq	r0, [fp], #120
    1eb0:	78640000 	stmdavc	r4!, {}^
    1eb4:	61685f6c 	cmnvs	r8, ip, ror #30
    1eb8:	6c635f6c 	stclvs	15, cr5, [r3], #-432
    1ebc:	0065736f 	rsbeq	r7, r5, pc, ror #6
    1ec0:	000004d1 	ldrdeq	r0, [r0], -r1
			IKSolutionWarning = 0;
			IKSolutionError = 0;

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
    1ec4:	5f62677a 	svcpl	0x0062677a
    1ec8:	5f6c6168 	svcpl	0x006c6168
    1ecc:	736f6c63 	cmnvc	pc, #25344	; 0x6300
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Do IK for all Left legs
			for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) {
    1ed0:	04e70065 	strbteq	r0, [r7], #101
    1ed4:	63700000 	cmnvs	r0, #0	; 0x0
				DoBackgroundProcess();
    1ed8:	61685f75 	smcvs	34293
				BodyFK(
    1edc:	6c635f6c 	stclvs	15, cr5, [r3], #-432
    1ee0:	0065736f 	rsbeq	r7, r5, pc, ror #6
    1ee4:	000004fc 	strdeq	r0, [r0], -ip
    1ee8:	5f6c7864 	svcpl	0x006c7864
    1eec:	5f6c6168 	svcpl	0x006c6168
    1ef0:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
    1ef4:	00053a00 	andeq	r3, r5, r0, lsl #20
    1ef8:	62677a00 	rsbvs	r7, r7, #0	; 0x0
    1efc:	6c61685f 	stclvs	8, cr6, [r1], #-380
    1f00:	65706f5f 	ldrbvs	r6, [r0, #-3935]!
    1f04:	0578006e 	ldrbeq	r0, [r8, #-110]!
    1f08:	63700000 	cmnvs	r0, #0	; 0x0
    1f0c:	61685f75 	smcvs	34293
    1f10:	706f5f6c 	rsbvc	r5, pc, ip, ror #30
    1f14:	b3006e65 	movwlt	r6, #3685	; 0xe65
    1f18:	52000005 	andpl	r0, r0, #5	; 0x5
    1f1c:	5a5f4478 	bpl	17d3104 <__Stack_Size+0x17d2d04>
    1f20:	495f4749 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, lr}^
    1f24:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1f28:	74707572 	ldrbtvc	r7, [r0], #-1394
    1f2c:	0005dc00 	andeq	sp, r5, r0, lsl #24
    1f30:	62677a00 	rsbvs	r7, r7, #0	; 0x0
    1f34:	6c61685f 	stclvs	8, cr6, [r1], #-380
    1f38:	0078745f 	rsbseq	r7, r8, pc, asr r4
    1f3c:	00000625 	andeq	r0, r0, r5, lsr #12
    1f40:	5f756370 	svcpl	0x00756370
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z
						+ GaitPosZ[LegIndex] - TotalTransZ,
						LegPosY[LegIndex] + g_InControlState.BodyPos.y
						+ GaitPosY[LegIndex] - TotalTransY,
						GaitRotY[LegIndex], LegIndex);
				LegIK(
    1f44:	5f747570 	svcpl	0x00747570
    1f48:	75657571 	strbvc	r7, [r5, #-1393]!
    1f4c:	064c0065 	strbeq	r0, [ip], -r5, rrx
    1f50:	78520000 	ldmdavc	r2, {}^
    1f54:	43505f44 	cmpmi	r0, #272	; 0x110
    1f58:	6e495f55 	mcrvs	15, 2, r5, cr9, cr5, {2}
    1f5c:	72726574 	rsbsvc	r6, r2, #486539264	; 0x1d000000
    1f60:	00747075 	rsbseq	r7, r4, r5, ror r0
    1f64:	00000661 	andeq	r0, r0, r1, ror #12
    1f68:	5f756370 	svcpl	0x00756370
    1f6c:	5f747570 	svcpl	0x00747570
    1f70:	65747962 	ldrbvs	r7, [r4, #-2402]!
    1f74:	00068a00 	andeq	r8, r6, r0, lsl #20
    1f78:	75637000 	strbvc	r7, [r3]!
    1f7c:	6c61685f 	stclvs	8, cr6, [r1], #-380
    1f80:	7465735f 	strbtvc	r7, [r5], #-863
    1f84:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!
    1f88:	74756f65 	ldrbtvc	r6, [r5], #-3941
    1f8c:	00079700 	andeq	r9, r7, r0, lsl #14
    1f90:	75614200 	strbvc	r4, [r1, #-512]!
    1f94:	74617264 	strbtvc	r7, [r1], #-612
    1f98:	58445f65 	stmdapl	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    1f9c:	07a9004c 	streq	r0, [r9, ip, asr #32]!
    1fa0:	61420000 	cmpvs	r2, r0
    1fa4:	61726475 	cmnvs	r2, r5, ror r4
    1fa8:	5a5f6574 	bpl	17db580 <__Stack_Size+0x17db180>
    1fac:	bb004749 	bllt	13cd8 <__Stack_Size+0x138d8>
    1fb0:	42000007 	andmi	r0, r0, #7	; 0x7
    1fb4:	72647561 	rsbvc	r7, r4, #406847488	; 0x18400000
    1fb8:	5f657461 	svcpl	0x00657461
    1fbc:	00554350 	subseq	r4, r5, r0, asr r3
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Do IK for all Left legs
			for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) {
    1fc0:	00000000 	andeq	r0, r0, r0
    1fc4:	000003fd 	strdeq	r0, [r0], -sp
    1fc8:	64590002 	ldrbvs	r0, [r9], #-2
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Check mechanical limits
			CheckAngles();
    1fcc:	0b1f0000 	bleq	7c1fd4 <__Stack_Size+0x7c1bd4>

			//Drive Servos
			if (g_InControlState.fRobotOn) {
    1fd0:	02540000 	subseq	r0, r4, #0	; 0x0
    1fd4:	44410000 	strbmi	r0, [r1]
    1fd8:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
				if (g_InControlState.fRobotOn && !g_InControlState.fPrev_RobotOn) {
					// MSound(3, 60, 2000, 80, 2250, 100, 2500);
					Buzzed(30, 2000);
    1fdc:	ac007469 	cfstrsge	mvf7, [r0], {105}
    1fe0:	41000002 	tstmi	r0, r2
    1fe4:	535f4344 	cmppl	pc, #268435457	; 0x10000001
					Buzzed(80, 2250);
    1fe8:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    1fec:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
					Buzzed(100, 2500);
    1ff0:	02d10074 	sbcseq	r0, r1, #116	; 0x74
    1ff4:	44410000 	strbmi	r0, [r1]
    1ff8:	6d435f43 	stclvs	15, cr5, [r3, #-268]

				}

				//Calculate Servo Move time
				if ((abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
    1ffc:	03060064 	movweq	r0, #24676	; 0x6064
    2000:	44410000 	strbmi	r0, [r1]
    2004:	4d445f43 	stclmi	15, cr5, [r4, #-268]
    2008:	646d4341 	strbtvs	r4, [sp], #-833
    200c:	00033b00 	andeq	r3, r3, r0, lsl #22
    2010:	43444100 	movtmi	r4, #16640	; 0x4100
    2014:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    2018:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    201c:	038e0067 	orreq	r0, lr, #103	; 0x67
    2020:	44410000 	strbmi	r0, [r1]
    2024:	65525f43 	ldrbvs	r5, [r2, #-3907]
						|| (abs(g_InControlState.TravelLength.z) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.y*2) > cTravelDeadZone)) {
					ServoMoveTime = g_InControlState.gaitCur.NomGaitSpeed
    2028:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    202c:	62696c61 	rsbvs	r6, r9, #24832	; 0x6100
    2030:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    2034:	b5006e6f 	strlt	r6, [r0, #-3695]
    2038:	41000003 	tstmi	r0, r3
							+ (g_InControlState.InputTimeDelay * 2)
							+ g_InControlState.SpeedControl;

					//Add aditional delay when Balance mode is on
					if (g_InControlState.BalanceMode)
    203c:	475f4344 	ldrbmi	r4, [pc, -r4, asr #6]

				//Calculate Servo Move time
				if ((abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.z) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.y*2) > cTravelDeadZone)) {
					ServoMoveTime = g_InControlState.gaitCur.NomGaitSpeed
    2040:	65527465 	ldrbvs	r7, [r2, #-1125]
							+ (g_InControlState.InputTimeDelay * 2)
							+ g_InControlState.SpeedControl;

					//Add aditional delay when Balance mode is on
					if (g_InControlState.BalanceMode)
						ServoMoveTime = ServoMoveTime + BALANCE_DELAY;
    2044:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    2048:	62696c61 	rsbvs	r6, r9, #24832	; 0x6100
				} else
					//Movement speed excl. Walking
					ServoMoveTime = 200 + g_InControlState.SpeedControl;
    204c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    2050:	74536e6f 	ldrbvc	r6, [r3], #-3695
    2054:	73757461 	cmnvc	r5, #1627389952	; 0x61000000

				// note we broke up the servo driver into start/commit that way we can output all of the servo information
				// before we wait and only have the termination information to output after the wait.  That way we hopefully
				// be more accurate with our timings...
				DoBackgroundProcess();
    2058:	0003ee00 	andeq	lr, r3, r0, lsl #28
				StartUpdateServos();
    205c:	43444100 	movtmi	r4, #16640	; 0x4100

				// See if we need to sync our processor with the servo driver while walking to ensure the prev is completed
				//before sending the next one

				// Finding any incident of GaitPos/Rot <>0:
				for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    2060:	6174535f 	cmnvs	r4, pc, asr r3
					if ((GaitPosX[LegIndex] > cGPlimit)
    2064:	61437472 	cmpvs	r3, r2, ror r4
    2068:	7262696c 	rsbvc	r6, r2, #1769472	; 0x1b0000
    206c:	6f697461 	svcvs	0x00697461
    2070:	0415006e 	ldreq	r0, [r5], #-110
    2074:	44410000 	strbmi	r0, [r1]
    2078:	65475f43 	strbvs	r5, [r7, #-3907]
    207c:	6c614374 	stclvs	3, cr4, [r1], #-464
    2080:	61726269 	cmnvs	r2, r9, ror #4
    2084:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    2088:	74617453 	strbtvc	r7, [r1], #-1107
    208c:	4e007375 	mcrmi	3, 0, r7, cr0, cr5, {3}
    2090:	41000004 	tstmi	r0, r4
    2094:	535f4344 	cmppl	pc, #268435457	; 0x10000001
    2098:	7774666f 	ldrbvc	r6, [r4, -pc, ror #12]!
    209c:	53657261 	cmnpl	r5, #268435462	; 0x10000006
							|| (GaitPosZ[LegIndex] > cGPlimit)
							|| (GaitPosZ[LegIndex] < -cGPlimit)
							|| (GaitRotY[LegIndex] > cGPlimit)
							|| (GaitRotY[LegIndex] < -cGPlimit)) {

						bExtraCycle = g_InControlState.gaitCur.NrLiftedPos + 1;	//For making sure that we are using timed move until all legs are down
    20a0:	74726174 	ldrbtvc	r6, [r2], #-372
    20a4:	766e6f43 	strbtvc	r6, [lr], -r3, asr #30
    20a8:	00646d43 	rsbeq	r6, r4, r3, asr #26

				// See if we need to sync our processor with the servo driver while walking to ensure the prev is completed
				//before sending the next one

				// Finding any incident of GaitPos/Rot <>0:
				for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    20ac:	00000483 	andeq	r0, r0, r3, lsl #9
    20b0:	5f434441 	svcpl	0x00434441

						bExtraCycle = g_InControlState.gaitCur.NrLiftedPos + 1;	//For making sure that we are using timed move until all legs are down
						break;
					}
				}
				if (bExtraCycle > 0) {
    20b4:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
					bExtraCycle--;
    20b8:	7774666f 	ldrbvc	r6, [r4, -pc, ror #12]!
    20bc:	53657261 	cmnpl	r5, #268435462	; 0x10000006
					fWalking = !(bExtraCycle == 0);
    20c0:	74726174 	ldrbtvc	r6, [r2], #-372
    20c4:	766e6f43 	strbtvc	r6, [lr], -r3, asr #30

					//Get endtime and calculate wait time
					lTimeWaitEnd = lTimerStart + PrevServoMoveTime;
    20c8:	74617453 	strbtvc	r7, [r1], #-1107
    20cc:	bc007375 	stclt	3, cr7, [r0], {117}
    20d0:	41000004 	tstmi	r0, r4
					PrintString("\n");
#endif
					//DebugWrite(A1, HIGH);
					do {
						// Wait the appropriate time, call any background process while waiting...
						DoBackgroundProcess();
    20d4:	445f4344 	ldrbmi	r4, [pc], #836	; 20dc <__Stack_Size+0x1cdc>
					} while (getMillis() < lTimeWaitEnd);
    20d8:	4d637369 	stclmi	3, cr7, [r3, #-420]!
    20dc:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
					PrintString("\n");
#endif

				}
				// Only do commit if we are actually doing something...
				CommitServoDriver(ServoMoveTime);
    20e0:	6e6e6168 	powvsez	f6, f6, #0.0
    20e4:	6f436c65 	svcvs	0x00436c65
    20e8:	43746e75 	cmnmi	r4, #1872	; 0x750
			} else {
				//Turn the bot off - May need to add ajust here...
				if (g_InControlState.fPrev_RobotOn || (AllDown = 0)) {
    20ec:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
					PrintString("Barebones lTimeWaitEnd-Millis  ");
					Printu32d(getMillis);
					PrintString("\n");
#endif
				} else {
					FreeServos();
    20f0:	050d0067 	streq	r0, [sp, #-103]
    20f4:	44410000 	strbmi	r0, [r1]
				// Only do commit if we are actually doing something...
				CommitServoDriver(ServoMoveTime);
			} else {
				//Turn the bot off - May need to add ajust here...
				if (g_InControlState.fPrev_RobotOn || (AllDown = 0)) {
					ServoMoveTime = 600;
    20f8:	69445f43 	stmdbvs	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    20fc:	6f4d6373 	svcvs	0x004d6373
					StartUpdateServos();
    2100:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]
					CommitServoDriver(ServoMoveTime);
    2104:	05420064 	strbeq	r0, [r2, #-100]
					//MSound(3, 100, 2500, 80, 2250, 60, 2000);
					Buzzed(100, 2500);
    2108:	44410000 	strbmi	r0, [r1]
    210c:	65525f43 	ldrbvs	r5, [r2, #-3907]
    2110:	616c7567 	cmnvs	ip, r7, ror #10
					Buzzed(80, 2250);
    2114:	61684372 	smcvs	33842
    2118:	6c656e6e 	stclvs	14, cr6, [r5], #-440
					Buzzed(60, 2000);
    211c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2120:	b7006769 	strlt	r6, [r0, -r9, ror #14]
    2124:	41000005 	tstmi	r0, r5

					//lTimeWaitEnd = getMillis() + 600; // setup to process background stuff while we wait...
					lTimeWaitEnd = getMillis() + 600; // setup to process background stuff while we wait...
    2128:	455f4344 	ldrbmi	r4, [pc, #-836]	; 1dec <__Stack_Size+0x19ec>
    212c:	72657478 	rsbvc	r7, r5, #2013265920	; 0x78000000
					Printu32d(lTimeWaitEnd);
					PrintString("\n");
#endif
					do {
						// Wait the appropriate time, call any background process while waiting...
						DoBackgroundProcess();
    2130:	546c616e 	strbtpl	r6, [ip], #-366
					} while (getMillis() < lTimeWaitEnd);
    2134:	43676972 	cmnmi	r7, #1867776	; 0x1c8000
    2138:	43766e6f 	cmnmi	r6, #1776	; 0x6f0
				} else {
					FreeServos();
				}

				// Allow the Servo driver to do stuff durint our idle time
				IdleTime();
    213c:	ec00646d 	cfstrs	mvf6, [r0], {109}
				mDelay(20); // give a pause between times we call if nothing is happening
    2140:	41000005 	tstmi	r0, r5
			}
			PrevServoMoveTime = ServoMoveTime;
    2144:	475f4344 	ldrbmi	r4, [pc, -r4, asr #6]
    2148:	6f437465 	svcvs	0x00437465

			//Store previous g_InControlState.fRobotOn State
			if (g_InControlState.fRobotOn)
    214c:	7265766e 	rsbvc	r7, r5, #115343360	; 0x6e00000
    2150:	6e6f6973 	mcrvs	9, 3, r6, cr15, cr3, {3}
				g_InControlState.fPrev_RobotOn = 1;
			else
				g_InControlState.fPrev_RobotOn = 0;
    2154:	756c6156 	strbvc	r6, [ip, #-342]!
    2158:	06190065 	ldreq	r0, [r9], -r5, rrx
    215c:	44410000 	strbmi	r0, [r1]
    2160:	65475f43 	strbvs	r5, [r7, #-3907]
    2164:	61754474 	cmnvs	r5, r4, ror r4
    2168:	646f4d6c 	strbtvs	r4, [pc], #3436	; 2170 <__Stack_Size+0x1d70>
    216c:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    2170:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    2174:	566e6f69 	strbtpl	r6, [lr], -r9, ror #30
    2178:	65756c61 	ldrbvs	r6, [r5, #-3169]!
    217c:	00063100 	andeq	r3, r6, r0, lsl #2
    2180:	43444100 	movtmi	r4, #16640	; 0x4100
    2184:	7475415f 	ldrbtvc	r4, [r5], #-351
    2188:	6a6e496f 	bvs	1b9474c <__Stack_Size+0x1b9434c>
    218c:	65746365 	ldrbvs	r6, [r4, #-869]!
    2190:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    2194:	646d4376 	strbtvs	r4, [sp], #-886
    2198:	00066600 	andeq	r6, r6, r0, lsl #12
    219c:	43444100 	movtmi	r4, #16640	; 0x4100
    21a0:	6a6e495f 	bvs	1b94724 <__Stack_Size+0x1b94324>
    21a4:	65746365 	ldrbvs	r6, [r4, #-869]!
    21a8:	73694464 	cmnvc	r9, #1677721600	; 0x64000000
    21ac:	646f4d63 	strbtvs	r4, [pc], #3427	; 21b4 <__Stack_Size+0x1db4>
    21b0:	646d4365 	strbtvs	r4, [sp], #-869
    21b4:	00069b00 	andeq	r9, r6, r0, lsl #22
    21b8:	43444100 	movtmi	r4, #16640	; 0x4100
    21bc:	7478455f 	ldrbtvc	r4, [r8], #-1375
    21c0:	616e7265 	cmnvs	lr, r5, ror #4
    21c4:	6972546c 	ldmdbvs	r2!, {r2, r3, r5, r6, sl, ip, lr}^
    21c8:	6a6e4967 	bvs	1b9476c <__Stack_Size+0x1b9436c>
    21cc:	65746365 	ldrbvs	r6, [r4, #-869]!
    21d0:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    21d4:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
    21d8:	00676966 	rsbeq	r6, r7, r6, ror #18
    21dc:	000006e2 	andeq	r0, r0, r2, ror #13
    21e0:	5f434441 	svcpl	0x00434441
    21e4:	65747845 	ldrbvs	r7, [r4, #-2117]!
    21e8:	6c616e72 	stclvs	14, cr6, [r1], #-456
    21ec:	67697254 	undefined
    21f0:	656a6e49 	strbvs	r6, [sl, #-3657]!
    21f4:	64657463 	strbtvs	r7, [r5], #-1123
    21f8:	766e6f43 	strbtvc	r6, [lr], -r3, asr #30
    21fc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2200:	00000717 	andeq	r0, r0, r7, lsl r7
    2204:	5f434441 	svcpl	0x00434441
    2208:	74666f53 	strbtvc	r6, [r6], #-3923
    220c:	65726177 	ldrbvs	r6, [r2, #-375]!
    2210:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    2214:	6a6e4974 	bvs	1b947ec <__Stack_Size+0x1b943ec>
    2218:	65746365 	ldrbvs	r6, [r4, #-869]!
    221c:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    2220:	646d4376 	strbtvs	r4, [sp], #-886
    2224:	00074c00 	andeq	r4, r7, r0, lsl #24
    2228:	43444100 	movtmi	r4, #16640	; 0x4100
    222c:	7465475f 	strbtvc	r4, [r5], #-1887
    2230:	74666f53 	strbtvc	r6, [r6], #-3923
    2234:	65726177 	ldrbvs	r6, [r2, #-375]!
    2238:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    223c:	6a6e4974 	bvs	1b94814 <__Stack_Size+0x1b94414>
    2240:	65746365 	ldrbvs	r6, [r4, #-869]!
    2244:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    2248:	646d4376 	strbtvs	r4, [sp], #-886
    224c:	74617453 	strbtvc	r7, [r1], #-1107
    2250:	85007375 	strhi	r7, [r0, #-885]
    2254:	41000007 	tstmi	r0, r7
    2258:	495f4344 	ldmdbmi	pc, {r2, r6, r8, r9, lr}^
    225c:	63656a6e 	cmnvs	r5, #450560	; 0x6e000
    2260:	43646574 	cmnmi	r4, #486539264	; 0x1d000000
    2264:	6e6e6168 	powvsez	f6, f6, #0.0
    2268:	6f436c65 	svcvs	0x00436c65
    226c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2270:	00080600 	andeq	r0, r8, r0, lsl #12
    2274:	43444100 	movtmi	r4, #16640	; 0x4100
    2278:	6a6e495f 	bvs	1b947fc <__Stack_Size+0x1b943fc>
    227c:	65746365 	ldrbvs	r6, [r4, #-869]!
    2280:	71655364 	cmnvc	r5, r4, ror #6
    2284:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    2288:	654c7265 	strbvs	r7, [ip, #-613]
    228c:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2290:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2294:	57006769 	strpl	r6, [r0, -r9, ror #14]
    2298:	41000008 	tstmi	r0, r8
    229c:	535f4344 	cmppl	pc, #268435457	; 0x10000001
    22a0:	6e497465 	cdpvs	4, 4, cr7, cr9, cr5, {3}
    22a4:	7463656a 	strbtvc	r6, [r3], #-1386
    22a8:	664f6465 	strbvs	r6, [pc], -r5, ror #8
    22ac:	74657366 	strbtvc	r7, [r5], #-870
    22b0:	00089e00 	andeq	r9, r8, r0, lsl #28
    22b4:	43444100 	movtmi	r4, #16640	; 0x4100
    22b8:	7465475f 	strbtvc	r4, [r5], #-1887
    22bc:	656a6e49 	strbvs	r6, [sl, #-3657]!
    22c0:	64657463 	strbtvs	r7, [r5], #-1123
    22c4:	766e6f43 	strbtvc	r6, [lr], -r3, asr #30
    22c8:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    22cc:	61566e6f 	cmpvs	r6, pc, ror #28
    22d0:	0065756c 	rsbeq	r7, r5, ip, ror #10
    22d4:	000008db 	ldrdeq	r0, [r0], -fp
    22d8:	5f434441 	svcpl	0x00434441
    22dc:	6c616e41 	stclvs	14, cr6, [r1], #-260
    22e0:	6157676f 	cmpvs	r7, pc, ror #14
    22e4:	64686374 	strbtvs	r6, [r8], #-884
    22e8:	6d43676f 	stclvs	7, cr6, [r3, #-444]
    22ec:	09220064 	stmdbeq	r2!, {r2, r5, r6}
    22f0:	44410000 	strbmi	r0, [r1]
    22f4:	6e415f43 	cdpvs	15, 4, cr5, cr1, cr3, {2}
    22f8:	676f6c61 	strbvs	r6, [pc, -r1, ror #24]!
    22fc:	63746157 	cmnvs	r4, #-1073741803	; 0xc0000015
    2300:	676f6468 	strbvs	r6, [pc, -r8, ror #8]!
    2304:	65726854 	ldrbvs	r6, [r2, #-2132]!
    2308:	6c6f6873 	stclvs	8, cr6, [pc], #-460
    230c:	6f437364 	svcvs	0x00437364
    2310:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2314:	00096500 	andeq	r6, r9, r0, lsl #10
    2318:	43444100 	movtmi	r4, #16640	; 0x4100
    231c:	616e415f 	cmnvs	lr, pc, asr r1
    2320:	57676f6c 	strbpl	r6, [r7, -ip, ror #30]!
    2324:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    2328:	53676f64 	cmnpl	r7, #400	; 0x190
    232c:	6c676e69 	stclvs	14, cr6, [r7], #-420
    2330:	61684365 	cmnvs	r8, r5, ror #6
    2334:	6c656e6e 	stclvs	14, cr6, [r5], #-440
    2338:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    233c:	ac006769 	stcge	7, cr6, [r0], {105}
    2340:	41000009 	tstmi	r0, r9
    2344:	545f4344 	ldrbpl	r4, [pc], #836	; 234c <__Stack_Size+0x1f4c>
    2348:	53706d65 	cmnpl	r0, #6464	; 0x1940
    234c:	6f736e65 	svcvs	0x00736e65
    2350:	65725672 	ldrbvs	r5, [r2, #-1650]!
    2354:	746e6966 	strbtvc	r6, [lr], #-2406
    2358:	00646d43 	rsbeq	r6, r4, r3, asr #26
    235c:	000009d3 	ldrdeq	r0, [r0], -r3
    2360:	5f434441 	svcpl	0x00434441
    2364:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    2368:	5367616c 	cmnpl	r7, #27	; 0x1b
    236c:	75746174 	ldrbvc	r6, [r4, #-372]!
    2370:	0a1a0073 	beq	682544 <__Stack_Size+0x682144>
    2374:	44410000 	strbmi	r0, [r1]
    2378:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    237c:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    2380:	0067616c 	rsbeq	r6, r7, ip, ror #2
    2384:	00000a51 	andeq	r0, r0, r1, asr sl
    2388:	5f434441 	svcpl	0x00434441
    238c:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    2390:	61745354 	cmnvs	r4, r4, asr r3
    2394:	00737574 	rsbseq	r7, r3, r4, ror r5
    2398:	00000ab6 	strheq	r0, [r0], -r6
    239c:	5f434441 	svcpl	0x00434441
    23a0:	61656c43 	cmnvs	r5, r3, asr #24
    23a4:	50544972 	subspl	r4, r4, r2, ror r9
    23a8:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    23ac:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    23b0:	0af90074 	beq	ffe42588 <SCS_BASE+0x1fe34588>
    23b4:	44410000 	strbmi	r0, [r1]
    23b8:	65445f43 	strbvs	r5, [r4, #-3907]
    23bc:	74696e49 	strbtvc	r6, [r9], #-3657
    23c0:	00000000 	andeq	r0, r0, r0
    23c4:	00026a00 	andeq	r6, r2, r0, lsl #20
    23c8:	78000200 	stmdavc	r0, {r9}
    23cc:	3a00006f 	bcc	2590 <__Stack_Size+0x2190>
    23d0:	37000007 	strcc	r0, [r0, -r7]
    23d4:	46000002 	strmi	r0, [r0], -r2
    23d8:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    23dc:	7465535f 	strbtvc	r5, [r5], #-863
    23e0:	6574614c 	ldrbvs	r6, [r4, #-332]!
    23e4:	0079636e 	rsbseq	r6, r9, lr, ror #6
    23e8:	0000025e 	andeq	r0, r0, lr, asr r2
    23ec:	53414c46 	movtpl	r4, #7238	; 0x1c46
    23f0:	61485f48 	cmpvs	r8, r8, asr #30
    23f4:	7943666c 	stmdbvc	r3, {r2, r3, r5, r6, r9, sl, sp, lr}^
    23f8:	41656c63 	cmnmi	r5, r3, ror #24
    23fc:	73656363 	cmnvc	r5, #-1946157055	; 0x8c000001
    2400:	646d4373 	strbtvs	r4, [sp], #-883
    2404:	00028500 	andeq	r8, r2, r0, lsl #10
    2408:	414c4600 	cmpmi	ip, r0, lsl #12
    240c:	505f4853 	subspl	r4, pc, r3, asr r8
    2410:	65666572 	strbvs	r6, [r6, #-1394]!
    2414:	42686374 	rsbmi	r6, r8, #-805306367	; 0xd0000001
    2418:	65666675 	strbvs	r6, [r6, #-1653]!
    241c:	646d4372 	strbtvs	r4, [sp], #-882
    2420:	0002ac00 	andeq	sl, r2, r0, lsl #24
    2424:	414c4600 	cmpmi	ip, r0, lsl #12
    2428:	555f4853 	ldrbpl	r4, [pc, #-2131]	; 1bdd <__Stack_Size+0x17dd>
    242c:	636f6c6e 	cmnvs	pc, #28160	; 0x6e00
    2430:	02bf006b 	adcseq	r0, pc, #107	; 0x6b
    2434:	4c460000 	marmi	acc0, r0, r6
    2438:	5f485341 	svcpl	0x00485341
    243c:	6b636f4c 	blvs	18de174 <__Stack_Size+0x18ddd74>
    2440:	0002d200 	andeq	sp, r2, r0, lsl #4
    2444:	414c4600 	cmpmi	ip, r0, lsl #12
    2448:	475f4853 	undefined
    244c:	73557465 	cmpvc	r5, #1694498816	; 0x65000000
    2450:	704f7265 	subvc	r7, pc, r5, ror #4
    2454:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    2458:	65747942 	ldrbvs	r7, [r4, #-2370]!
    245c:	0002ea00 	andeq	lr, r2, r0, lsl #20
    2460:	414c4600 	cmpmi	ip, r0, lsl #12
    2464:	475f4853 	undefined
    2468:	72577465 	subsvc	r7, r7, #1694498816	; 0x65000000
    246c:	50657469 	rsbpl	r7, r5, r9, ror #8
    2470:	65746f72 	ldrbvs	r6, [r4, #-3954]!
    2474:	6f697463 	svcvs	0x00697463
    2478:	74704f6e 	ldrbtvc	r4, [r0], #-3950
    247c:	426e6f69 	rsbmi	r6, lr, #420	; 0x1a4
    2480:	00657479 	rsbeq	r7, r5, r9, ror r4
    2484:	00000302 	andeq	r0, r0, r2, lsl #6
    2488:	53414c46 	movtpl	r4, #7238	; 0x1c46
    248c:	65475f48 	strbvs	r5, [r7, #-3912]
    2490:	61655274 	smcvs	21796
    2494:	74754f64 	ldrbtvc	r4, [r5], #-3940
    2498:	746f7250 	strbtvc	r7, [pc], #592	; 24a0 <__Stack_Size+0x20a0>
    249c:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    24a0:	74536e6f 	ldrbvc	r6, [r3], #-3695
    24a4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    24a8:	00032b00 	andeq	r2, r3, r0, lsl #22
    24ac:	414c4600 	cmpmi	ip, r0, lsl #12
    24b0:	475f4853 	undefined
    24b4:	72507465 	subsvc	r7, r0, #1694498816	; 0x65000000
    24b8:	74656665 	strbtvc	r6, [r5], #-1637
    24bc:	75426863 	strbvc	r6, [r2, #-2147]
    24c0:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    24c4:	74617453 	strbtvc	r7, [r1], #-1107
    24c8:	54007375 	strpl	r7, [r0], #-885
    24cc:	46000003 	strmi	r0, [r0], -r3
    24d0:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    24d4:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    24d8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    24dc:	03890067 	orreq	r0, r9, #103	; 0x67
    24e0:	4c460000 	marmi	acc0, r0, r6
    24e4:	5f485341 	svcpl	0x00485341
    24e8:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    24ec:	5367616c 	cmnpl	r7, #27	; 0x1b
    24f0:	75746174 	ldrbvc	r6, [r4, #-372]!
    24f4:	03c60073 	biceq	r0, r6, #115	; 0x73
    24f8:	4c460000 	marmi	acc0, r0, r6
    24fc:	5f485341 	svcpl	0x00485341
    2500:	61656c43 	cmnvs	r5, r3, asr #24
    2504:	616c4672 	smcvs	50274
    2508:	03ed0067 	mvneq	r0, #103	; 0x67
    250c:	4c460000 	marmi	acc0, r0, r6
    2510:	5f485341 	svcpl	0x00485341
    2514:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    2518:	75746174 	ldrbvc	r6, [r4, #-372]!
    251c:	040a0073 	streq	r0, [sl], #-115
    2520:	4c460000 	marmi	acc0, r0, r6
    2524:	5f485341 	svcpl	0x00485341
    2528:	74696157 	strbtvc	r6, [r9], #-343
    252c:	4c726f46 	ldclmi	15, cr6, [r2], #-280
    2530:	4f747361 	svcmi	0x00747361
    2534:	61726570 	cmnvs	r2, r0, ror r5
    2538:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    253c:	00049d00 	andeq	r9, r4, r0, lsl #26
    2540:	414c4600 	cmpmi	ip, r0, lsl #12
    2544:	555f4853 	ldrbpl	r4, [pc, #-2131]	; 1cf9 <__Stack_Size+0x18f9>
    2548:	4f726573 	svcmi	0x00726573
    254c:	6f697470 	svcvs	0x00697470
    2550:	7479426e 	ldrbtvc	r4, [r9], #-622
    2554:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    2558:	00676966 	rsbeq	r6, r7, r6, ror #18
    255c:	000004fc 	strdeq	r0, [r0], -ip
    2560:	53414c46 	movtpl	r4, #7238	; 0x1c46
    2564:	65525f48 	ldrbvs	r5, [r2, #-3912]
    2568:	754f6461 	strbvc	r6, [pc, #-1121]	; 210f <__Stack_Size+0x1d0f>
    256c:	6f725074 	svcvs	0x00725074
    2570:	74636574 	strbtvc	r6, [r3], #-1396
    2574:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    2578:	0000053b 	andeq	r0, r0, fp, lsr r5
    257c:	53414c46 	movtpl	r4, #7238	; 0x1c46
    2580:	6e455f48 	cdpvs	15, 4, cr5, cr5, cr8, {2}
    2584:	656c6261 	strbvs	r6, [ip, #-609]!
    2588:	74697257 	strbtvc	r7, [r9], #-599
    258c:	6f725065 	svcvs	0x00725065
    2590:	74636574 	strbtvc	r6, [r3], #-1396
    2594:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    2598:	000005ba 	strheq	r0, [r0], -sl
    259c:	53414c46 	movtpl	r4, #7238	; 0x1c46
    25a0:	72505f48 	subsvc	r5, r0, #288	; 0x120
    25a4:	6172676f 	cmnvs	r2, pc, ror #14
    25a8:	74704f6d 	ldrbtvc	r4, [r0], #-3949
    25ac:	426e6f69 	rsbmi	r6, lr, #420	; 0x1a4
    25b0:	44657479 	strbtmi	r7, [r5], #-1145
    25b4:	00617461 	rsbeq	r7, r1, r1, ror #8
    25b8:	00000609 	andeq	r0, r0, r9, lsl #12
    25bc:	53414c46 	movtpl	r4, #7238	; 0x1c46
    25c0:	72505f48 	subsvc	r5, r0, #288	; 0x120
    25c4:	6172676f 	cmnvs	r2, pc, ror #14
    25c8:	6c61486d 	stclvs	8, cr4, [r1], #-436
    25cc:	726f5766 	rsbvc	r5, pc, #26738688	; 0x1980000
    25d0:	06580064 	ldrbeq	r0, [r8], -r4, rrx
    25d4:	4c460000 	marmi	acc0, r0, r6
    25d8:	5f485341 	svcpl	0x00485341
    25dc:	676f7250 	undefined
    25e0:	576d6172 	undefined
    25e4:	0064726f 	rsbeq	r7, r4, pc, ror #4
    25e8:	000006a7 	andeq	r0, r0, r7, lsr #13
    25ec:	53414c46 	movtpl	r4, #7238	; 0x1c46
    25f0:	72455f48 	subvc	r5, r5, #288	; 0x120
    25f4:	4f657361 	svcmi	0x00657361
    25f8:	6f697470 	svcvs	0x00697470
    25fc:	7479426e 	ldrbtvc	r4, [r9], #-622
    2600:	d4007365 	strle	r7, [r0], #-869
    2604:	46000006 	strmi	r0, [r0], -r6
    2608:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    260c:	6172455f 	cmnvs	r2, pc, asr r5
    2610:	6c416573 	cfstr64vs	mvdx6, [r1], {115}
    2614:	6761506c 	strbvs	r5, [r1, -ip, rrx]!
    2618:	01007365 	tsteq	r0, r5, ror #6
    261c:	46000007 	strmi	r0, [r0], -r7
    2620:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    2624:	6172455f 	cmnvs	r2, pc, asr r5
    2628:	61506573 	cmpvs	r0, r3, ror r5
    262c:	00006567 	andeq	r6, r0, r7, ror #10
    2630:	77000000 	strvc	r0, [r0, -r0]
    2634:	02000001 	andeq	r0, r0, #1	; 0x1
    2638:	0076b200 	rsbseq	fp, r6, r0, lsl #4
    263c:	00064800 	andeq	r4, r6, r0, lsl #16
    2640:	00022b00 	andeq	r2, r2, r0, lsl #22
    2644:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    2648:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
    264c:	bb007469 	bllt	1f7f8 <__Stack_Size+0x1f3f8>
    2650:	47000002 	strmi	r0, [r0, -r2]
    2654:	5f4f4950 	svcpl	0x004f4950
    2658:	75727453 	ldrbvc	r7, [r2, #-1107]!
    265c:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    2660:	e0007469 	and	r7, r0, r9, ror #8
    2664:	47000002 	strmi	r0, [r0, -r2]
    2668:	5f4f4950 	svcpl	0x004f4950
    266c:	64616552 	strbtvs	r6, [r1], #-1362
    2670:	75706e49 	ldrbvc	r6, [r0, #-3657]!
    2674:	74614474 	strbtvc	r4, [r1], #-1140
    2678:	74694261 	strbtvc	r4, [r9], #-609
    267c:	00032300 	andeq	r2, r3, r0, lsl #6
    2680:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    2684:	65525f4f 	ldrbvs	r5, [r2, #-3919]
    2688:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
    268c:	44747570 	ldrbtmi	r7, [r4], #-1392
    2690:	00617461 	rsbeq	r7, r1, r1, ror #8
    2694:	00000350 	andeq	r0, r0, r0, asr r3
    2698:	4f495047 	svcmi	0x00495047
    269c:	6165525f 	cmnvs	r5, pc, asr r2
    26a0:	74754f64 	ldrbtvc	r4, [r5], #-3940
    26a4:	44747570 	ldrbtmi	r7, [r4], #-1392
    26a8:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    26ac:	97007469 	strls	r7, [r0, -r9, ror #8]
    26b0:	47000003 	strmi	r0, [r0, -r3]
    26b4:	5f4f4950 	svcpl	0x004f4950
    26b8:	64616552 	strbtvs	r6, [r1], #-1362
    26bc:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    26c0:	61447475 	cmpvs	r4, r5, ror r4
    26c4:	c4006174 	strgt	r6, [r0], #-372
    26c8:	47000003 	strmi	r0, [r0, -r3]
    26cc:	5f4f4950 	svcpl	0x004f4950
    26d0:	42746553 	rsbsmi	r6, r4, #348127232	; 0x14c00000
    26d4:	00737469 	rsbseq	r7, r3, r9, ror #8
    26d8:	000003f9 	strdeq	r0, [r0], -r9
    26dc:	4f495047 	svcmi	0x00495047
    26e0:	7365525f 	cmnvc	r5, #-268435451	; 0xf0000005
    26e4:	69427465 	stmdbvs	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
    26e8:	2e007374 	mcrcs	3, 0, r7, cr0, cr4, {3}
    26ec:	47000004 	strmi	r0, [r0, -r4]
    26f0:	5f4f4950 	svcpl	0x004f4950
    26f4:	74697257 	strbtvc	r7, [r9], #-599
    26f8:	74694265 	strbtvc	r4, [r9], #-613
    26fc:	00047100 	andeq	r7, r4, r0, lsl #2
    2700:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    2704:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
    2708:	00657469 	rsbeq	r7, r5, r9, ror #8
    270c:	000004a6 	andeq	r0, r0, r6, lsr #9
    2710:	4f495047 	svcmi	0x00495047
    2714:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    2718:	6b636f4c 	blvs	18de450 <__Stack_Size+0x18de050>
    271c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2720:	e9006769 	stmdb	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    2724:	47000004 	strmi	r0, [r0, -r4]
    2728:	5f4f4950 	svcpl	0x004f4950
    272c:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    2730:	74754f74 	ldrbtvc	r4, [r5], #-3956
    2734:	43747570 	cmnmi	r4, #469762048	; 0x1c000000
    2738:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    273c:	05300067 	ldreq	r0, [r0, #-103]!
    2740:	50470000 	subpl	r0, r7, r0
    2744:	455f4f49 	ldrbmi	r4, [pc, #-3913]	; 1803 <__Stack_Size+0x1403>
    2748:	746e6576 	strbtvc	r6, [lr], #-1398
    274c:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    2750:	6d437475 	cfstrdvs	mvd7, [r3, #-468]
    2754:	05570064 	ldrbeq	r0, [r7, #-100]
    2758:	50470000 	subpl	r0, r7, r0
    275c:	505f4f49 	subspl	r4, pc, r9, asr #30
    2760:	65526e69 	ldrbvs	r6, [r2, #-3689]
    2764:	4370616d 	cmnmi	r0, #1073741851	; 0x4000001b
    2768:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    276c:	05c60067 	strbeq	r0, [r6, #103]
    2770:	50470000 	subpl	r0, r7, r0
    2774:	455f4f49 	ldrbmi	r4, [pc, #-3913]	; 1833 <__Stack_Size+0x1433>
    2778:	4c495458 	cfstrdmi	mvd5, [r9], {88}
    277c:	43656e69 	cmnmi	r5, #1680	; 0x690
    2780:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2784:	060d0067 	streq	r0, [sp], -r7, rrx
    2788:	50470000 	subpl	r0, r7, r0
    278c:	415f4f49 	cmpmi	pc, r9, asr #30
    2790:	444f4946 	strbmi	r4, [pc], #2374	; 2798 <__Stack_Size+0x2398>
    2794:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    2798:	06220074 	undefined
    279c:	50470000 	subpl	r0, r7, r0
    27a0:	445f4f49 	ldrbmi	r4, [pc], #3913	; 27a8 <__Stack_Size+0x23a8>
    27a4:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    27a8:	00000074 	andeq	r0, r0, r4, ror r0
    27ac:	035c0000 	cmpeq	ip, #0	; 0x0
    27b0:	00020000 	andeq	r0, r2, r0
    27b4:	00007cfa 	strdeq	r7, [r0], -sl
    27b8:	000008e7 	andeq	r0, r0, r7, ror #17
    27bc:	00000310 	andeq	r0, r0, r0, lsl r3
    27c0:	4349564e 	movtmi	r5, #38478	; 0x964e
    27c4:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    27c8:	0074696e 	rsbseq	r6, r4, lr, ror #18
    27cc:	00000335 	andeq	r0, r0, r5, lsr r3
    27d0:	4349564e 	movtmi	r5, #38478	; 0x964e
    27d4:	4243535f 	submi	r5, r3, #2080374785	; 0x7c000001
    27d8:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    27dc:	58007469 	stmdapl	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    27e0:	4e000003 	cdpmi	0, 0, cr0, cr0, cr3, {0}
    27e4:	5f434956 	svcpl	0x00434956
    27e8:	6f697250 	svcvs	0x00697250
    27ec:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    27f0:	756f7247 	strbvc	r7, [pc, #-583]!	; 25b1 <__Stack_Size+0x21b1>
    27f4:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
    27f8:	00676966 	rsbeq	r6, r7, r6, ror #18
    27fc:	0000037f 	andeq	r0, r0, pc, ror r3
    2800:	4349564e 	movtmi	r5, #38478	; 0x964e
    2804:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2808:	03f10074 	mvnseq	r0, #116	; 0x74
    280c:	564e0000 	strbpl	r0, [lr], -r0
    2810:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    2814:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    2818:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    281c:	04160074 	ldreq	r0, [r6], #-116
    2820:	564e0000 	strbpl	r0, [lr], -r0
    2824:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    2828:	75437465 	strbvc	r7, [r3, #-1125]
    282c:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    2830:	6e655074 	mcrvs	0, 3, r5, cr5, cr4, {3}
    2834:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    2838:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    283c:	6e6e6168 	powvsez	f6, f6, #0.0
    2840:	2e006c65 	cdpcs	12, 0, cr6, cr0, cr5, {3}
    2844:	4e000004 	cdpmi	0, 0, cr0, cr0, cr4, {0}
    2848:	5f434956 	svcpl	0x00434956
    284c:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    2850:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    2854:	656e6e61 	strbvs	r6, [lr, #-3681]!
    2858:	6e65506c 	cdpvs	0, 6, cr5, cr5, cr12, {3}
    285c:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    2860:	53746942 	cmnpl	r4, #1081344	; 0x108000
    2864:	75746174 	ldrbvc	r6, [r4, #-372]!
    2868:	04750073 	ldrbteq	r0, [r5], #-115
    286c:	564e0000 	strbpl	r0, [lr], -r0
    2870:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    2874:	52497465 	subpl	r7, r9, #1694498816	; 0x65000000
    2878:	61684351 	cmnvs	r8, r1, asr r3
    287c:	6c656e6e 	stclvs	14, cr6, [r5], #-440
    2880:	646e6550 	strbtvs	r6, [lr], #-1360
    2884:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    2888:	9c007469 	cfstrsls	mvf7, [r0], {105}
    288c:	4e000004 	cdpmi	0, 0, cr0, cr0, cr4, {0}
    2890:	5f434956 	svcpl	0x00434956
    2894:	61656c43 	cmnvs	r5, r3, asr #24
    2898:	51524972 	cmppl	r2, r2, ror r9
    289c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    28a0:	506c656e 	rsbpl	r6, ip, lr, ror #10
    28a4:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    28a8:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    28ac:	04c50074 	strbeq	r0, [r5], #116
    28b0:	564e0000 	strbpl	r0, [lr], -r0
    28b4:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    28b8:	75437465 	strbvc	r7, [r3, #-1125]
    28bc:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    28c0:	74634174 	strbtvc	r4, [r3], #-372
    28c4:	48657669 	stmdami	r5!, {r0, r3, r5, r6, r9, sl, ip, sp, lr}^
    28c8:	6c646e61 	stclvs	14, cr6, [r4], #-388
    28cc:	dd007265 	sfmle	f7, 4, [r0, #-404]
    28d0:	4e000004 	cdpmi	0, 0, cr0, cr0, cr4, {0}
    28d4:	5f434956 	svcpl	0x00434956
    28d8:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    28dc:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    28e0:	656e6e61 	strbvs	r6, [lr, #-3681]!
    28e4:	7463416c 	strbtvc	r4, [r3], #-364
    28e8:	42657669 	rsbmi	r7, r5, #110100480	; 0x6900000
    28ec:	74537469 	ldrbvc	r7, [r3], #-1129
    28f0:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    28f4:	00052400 	andeq	r2, r5, r0, lsl #8
    28f8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    28fc:	65475f43 	strbvs	r5, [r7, #-3907]
    2900:	55504374 	ldrbpl	r4, [r0, #-884]
    2904:	3c004449 	cfstrscc	mvf4, [r0], {73}
    2908:	4e000005 	cdpmi	0, 0, cr0, cr0, cr5, {0}
    290c:	5f434956 	svcpl	0x00434956
    2910:	56746553 	undefined
    2914:	6f746365 	svcvs	0x00746365
    2918:	62615472 	rsbvs	r5, r1, #1912602624	; 0x72000000
    291c:	7300656c 	movwvc	r6, #1388	; 0x56c
    2920:	4e000005 	cdpmi	0, 0, cr0, cr0, cr5, {0}
    2924:	5f434956 	svcpl	0x00434956
    2928:	656e6547 	strbvs	r6, [lr, #-1351]!
    292c:	65746172 	ldrbvs	r6, [r4, #-370]!
    2930:	74737953 	ldrbtvc	r7, [r3], #-2387
    2934:	65526d65 	ldrbvs	r6, [r2, #-3429]
    2938:	00746573 	rsbseq	r6, r4, r3, ror r5
    293c:	00000587 	andeq	r0, r0, r7, lsl #11
    2940:	4349564e 	movtmi	r5, #38478	; 0x964e
    2944:	6e65475f 	mcrvs	7, 3, r4, cr5, cr15, {2}
    2948:	74617265 	strbtvc	r7, [r1], #-613
    294c:	726f4365 	rsbvc	r4, pc, #-1811939327	; 0x94000001
    2950:	73655265 	cmnvc	r5, #1342177286	; 0x50000006
    2954:	9b007465 	blls	1faf0 <__Stack_Size+0x1f6f0>
    2958:	4e000005 	cdpmi	0, 0, cr0, cr0, cr5, {0}
    295c:	5f434956 	svcpl	0x00434956
    2960:	74737953 	ldrbtvc	r7, [r3], #-2387
    2964:	504c6d65 	subpl	r6, ip, r5, ror #26
    2968:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    296c:	d0006769 	andle	r6, r0, r9, ror #14
    2970:	4e000005 	cdpmi	0, 0, cr0, cr0, cr5, {0}
    2974:	5f434956 	svcpl	0x00434956
    2978:	74737953 	ldrbtvc	r7, [r3], #-2387
    297c:	61486d65 	cmpvs	r8, r5, ror #26
    2980:	656c646e 	strbvs	r6, [ip, #-1134]!
    2984:	6e6f4372 	mcrvs	3, 3, r4, cr15, cr2, {3}
    2988:	00676966 	rsbeq	r6, r7, r6, ror #18
    298c:	00000615 	andeq	r0, r0, r5, lsl r6
    2990:	4349564e 	movtmi	r5, #38478	; 0x964e
    2994:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    2998:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    299c:	6c646e61 	stclvs	14, cr6, [r4], #-388
    29a0:	72507265 	subsvc	r7, r0, #1342177286	; 0x50000006
    29a4:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    29a8:	6f437974 	svcvs	0x00437974
    29ac:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    29b0:	00069800 	andeq	r9, r6, r0, lsl #16
    29b4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    29b8:	65475f43 	strbvs	r5, [r7, #-3907]
    29bc:	73795374 	cmnvc	r9, #-805306367	; 0xd0000001
    29c0:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    29c4:	6c646e61 	stclvs	14, cr6, [r4], #-388
    29c8:	65507265 	ldrbvs	r7, [r0, #-613]
    29cc:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    29d0:	74694267 	strbtvc	r4, [r9], #-615
    29d4:	74617453 	strbtvc	r7, [r1], #-1107
    29d8:	ed007375 	stc	3, cr7, [r0, #-468]
    29dc:	4e000006 	cdpmi	0, 0, cr0, cr0, cr6, {0}
    29e0:	5f434956 	svcpl	0x00434956
    29e4:	53746553 	cmnpl	r4, #348127232	; 0x14c00000
    29e8:	65747379 	ldrbvs	r7, [r4, #-889]!
    29ec:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    29f0:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    29f4:	646e6550 	strbtvs	r6, [lr], #-1360
    29f8:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    29fc:	22007469 	andcs	r7, r0, #1761607680	; 0x69000000
    2a00:	4e000007 	cdpmi	0, 0, cr0, cr0, cr7, {0}
    2a04:	5f434956 	svcpl	0x00434956
    2a08:	61656c43 	cmnvs	r5, r3, asr #24
    2a0c:	73795372 	cmnvc	r9, #-939524095	; 0xc8000001
    2a10:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    2a14:	6c646e61 	stclvs	14, cr6, [r4], #-388
    2a18:	65507265 	ldrbvs	r7, [r0, #-613]
    2a1c:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    2a20:	74694267 	strbtvc	r4, [r9], #-615
    2a24:	00075700 	andeq	r5, r7, r0, lsl #14
    2a28:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    2a2c:	65475f43 	strbvs	r5, [r7, #-3907]
    2a30:	73795374 	cmnvc	r9, #-805306367	; 0xd0000001
    2a34:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    2a38:	6c646e61 	stclvs	14, cr6, [r4], #-388
    2a3c:	63417265 	movtvs	r7, #4709	; 0x1265
    2a40:	65766974 	ldrbvs	r6, [r6, #-2420]!
    2a44:	53746942 	cmnpl	r4, #1081344	; 0x108000
    2a48:	75746174 	ldrbvc	r6, [r4, #-372]!
    2a4c:	07aa0073 	undefined
    2a50:	564e0000 	strbpl	r0, [lr], -r0
    2a54:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    2a58:	61467465 	cmpvs	r6, r5, ror #8
    2a5c:	48746c75 	ldmdami	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    2a60:	6c646e61 	stclvs	14, cr6, [r4], #-388
    2a64:	6f537265 	svcvs	0x00537265
    2a68:	65637275 	strbvs	r7, [r3, #-629]!
    2a6c:	08070073 	stmdaeq	r7, {r0, r1, r4, r5, r6}
    2a70:	564e0000 	strbpl	r0, [lr], -r0
    2a74:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    2a78:	61467465 	cmpvs	r6, r5, ror #8
    2a7c:	41746c75 	cmnmi	r4, r5, ror ip
    2a80:	65726464 	ldrbvs	r6, [r2, #-1124]!
    2a84:	50007373 	andpl	r7, r0, r3, ror r3
    2a88:	4e000008 	cdpmi	0, 0, cr0, cr0, cr8, {0}
    2a8c:	5f434956 	svcpl	0x00434956
    2a90:	42746547 	rsbsmi	r6, r4, #297795584	; 0x11c00000
    2a94:	50455341 	subpl	r5, r5, r1, asr #6
    2a98:	69004952 	stmdbvs	r0, {r1, r4, r6, r8, fp, lr}
    2a9c:	4e000008 	cdpmi	0, 0, cr0, cr0, cr8, {0}
    2aa0:	5f434956 	svcpl	0x00434956
    2aa4:	45534142 	ldrbmi	r4, [r3, #-322]
    2aa8:	43495250 	movtmi	r5, #37456	; 0x9250
    2aac:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
    2ab0:	08920047 	ldmeq	r2, {r0, r1, r2, r6}
    2ab4:	564e0000 	strbpl	r0, [lr], -r0
    2ab8:	525f4349 	subspl	r4, pc, #603979777	; 0x24000001
    2abc:	54455345 	strbpl	r5, [r5], #-837
    2ac0:	4c554146 	ldfmie	f4, [r5], {70}
    2ac4:	53414d54 	movtpl	r4, #7508	; 0x1d54
    2ac8:	08a7004b 	stmiaeq	r7!, {r0, r1, r3, r6}
    2acc:	564e0000 	strbpl	r0, [lr], -r0
    2ad0:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    2ad4:	41465445 	cmpmi	r6, r5, asr #8
    2ad8:	4d544c55 	ldclmi	12, cr4, [r4, #-340]
    2adc:	004b5341 	subeq	r5, fp, r1, asr #6
    2ae0:	000008bc 	strheq	r0, [r0], -ip
    2ae4:	4349564e 	movtmi	r5, #38478	; 0x964e
    2ae8:	5345525f 	movtpl	r5, #21087	; 0x525f
    2aec:	52505445 	subspl	r5, r0, #1157627904	; 0x45000000
    2af0:	53414d49 	movtpl	r4, #7497	; 0x1d49
    2af4:	08d1004b 	ldmeq	r1, {r0, r1, r3, r6}^
    2af8:	564e0000 	strbpl	r0, [lr], -r0
    2afc:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    2b00:	52505445 	subspl	r5, r0, #1157627904	; 0x45000000
    2b04:	53414d49 	movtpl	r4, #7497	; 0x1d49
    2b08:	0000004b 	andeq	r0, r0, fp, asr #32
    2b0c:	00c70000 	sbceq	r0, r7, r0
    2b10:	00020000 	andeq	r0, r2, r0
    2b14:	000085e1 	andeq	r8, r0, r1, ror #11
    2b18:	00000247 	andeq	r0, r0, r7, asr #4
    2b1c:	000000d3 	ldrdeq	r0, [r0], -r3
    2b20:	5f525750 	svcpl	0x00525750
    2b24:	6b636142 	blvs	18db034 <__Stack_Size+0x18dac34>
    2b28:	63417075 	movtvs	r7, #4213	; 0x1075
    2b2c:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    2b30:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2b34:	000000f8 	strdeq	r0, [r0], -r8
    2b38:	5f525750 	svcpl	0x00525750
    2b3c:	43445650 	movtmi	r5, #18000	; 0x4650
    2b40:	1d00646d 	cfstrsne	mvf6, [r0, #-436]
    2b44:	50000001 	andpl	r0, r0, r1
    2b48:	505f5257 	subspl	r5, pc, r7, asr r2
    2b4c:	654c4456 	strbvs	r4, [ip, #-1110]
    2b50:	436c6576 	cmnmi	ip, #494927872	; 0x1d800000
    2b54:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2b58:	01530067 	cmpeq	r3, r7, rrx
    2b5c:	57500000 	ldrbpl	r0, [r0, -r0]
    2b60:	61575f52 	cmpvs	r7, r2, asr pc
    2b64:	7055656b 	subsvc	r6, r5, fp, ror #10
    2b68:	436e6950 	cmnmi	lr, #1310720	; 0x140000
    2b6c:	7800646d 	stmdavc	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    2b70:	50000001 	andpl	r0, r0, r1
    2b74:	475f5257 	undefined
    2b78:	6c467465 	cfstrdvs	mvd7, [r6], {101}
    2b7c:	74536761 	ldrbvc	r6, [r3], #-1889
    2b80:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2b84:	0001ae00 	andeq	sl, r1, r0, lsl #28
    2b88:	52575000 	subspl	r5, r7, #0	; 0x0
    2b8c:	656c435f 	strbvs	r4, [ip, #-863]!
    2b90:	6c467261 	sfmvs	f7, 2, [r6], {97}
    2b94:	d5006761 	strle	r6, [r0, #-1889]
    2b98:	50000001 	andpl	r0, r0, r1
    2b9c:	455f5257 	ldrbmi	r5, [pc, #-599]	; 294d <__Stack_Size+0x254d>
    2ba0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2ba4:	4e415453 	mcrmi	4, 2, r5, cr1, cr3, {2}
    2ba8:	4d594244 	lfmmi	f4, 2, [r9, #-272]
    2bac:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2bb0:	000001ea 	andeq	r0, r0, sl, ror #3
    2bb4:	5f525750 	svcpl	0x00525750
    2bb8:	65746e45 	ldrbvs	r6, [r4, #-3653]!
    2bbc:	4f545372 	svcmi	0x00545372
    2bc0:	646f4d50 	strbtvs	r4, [pc], #3408	; 2bc8 <__Stack_Size+0x27c8>
    2bc4:	02310065 	eorseq	r0, r1, #101	; 0x65
    2bc8:	57500000 	ldrbpl	r0, [r0, -r0]
    2bcc:	65445f52 	strbvs	r5, [r4, #-3922]
    2bd0:	74696e49 	strbtvc	r6, [r9], #-3657
    2bd4:	00000000 	andeq	r0, r0, r0
    2bd8:	0002c000 	andeq	ip, r2, r0
    2bdc:	28000200 	stmdacs	r0, {r9}
    2be0:	bd000088 	stclt	0, cr0, [r0, #-544]
    2be4:	14000008 	strne	r0, [r0], #-8
    2be8:	52000002 	andpl	r0, r0, #2	; 0x2
    2bec:	445f4343 	ldrbmi	r4, [pc], #835	; 2bf4 <__Stack_Size+0x27f4>
    2bf0:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    2bf4:	02270074 	eoreq	r0, r7, #116	; 0x74
    2bf8:	43520000 	cmpmi	r2, #0	; 0x0
    2bfc:	53485f43 	movtpl	r5, #36675	; 0x8f43
    2c00:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
    2c04:	00676966 	rsbeq	r6, r7, r6, ror #18
    2c08:	0000024c 	andeq	r0, r0, ip, asr #4
    2c0c:	5f434352 	svcpl	0x00434352
    2c10:	74696157 	strbtvc	r6, [r9], #-343
    2c14:	48726f46 	ldmdami	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    2c18:	74534553 	ldrbvc	r4, [r3], #-1363
    2c1c:	55747261 	ldrbpl	r7, [r4, #-609]!
    2c20:	02f10070 	rscseq	r0, r1, #112	; 0x70
    2c24:	43520000 	cmpmi	r2, #0	; 0x0
    2c28:	64415f43 	strbvs	r5, [r1], #-3907
    2c2c:	7473756a 	ldrbtvc	r7, [r3], #-1386
    2c30:	43495348 	movtmi	r5, #37704	; 0x9348
    2c34:	62696c61 	rsbvs	r6, r9, #24832	; 0x6100
    2c38:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    2c3c:	61566e6f 	cmpvs	r6, pc, ror #28
    2c40:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2c44:	00000323 	andeq	r0, r0, r3, lsr #6
    2c48:	5f434352 	svcpl	0x00434352
    2c4c:	43495348 	movtmi	r5, #37704	; 0x9348
    2c50:	4a00646d 	bmi	1be0c <__Stack_Size+0x1ba0c>
    2c54:	52000003 	andpl	r0, r0, #3	; 0x3
    2c58:	505f4343 	subspl	r4, pc, r3, asr #6
    2c5c:	6f434c4c 	svcvs	0x00434c4c
    2c60:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2c64:	00039100 	andeq	r9, r3, r0, lsl #2
    2c68:	43435200 	movtmi	r5, #12800	; 0x3200
    2c6c:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    2c70:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2c74:	000003b8 	strheq	r0, [r0], -r8
    2c78:	5f434352 	svcpl	0x00434352
    2c7c:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    2c80:	6f434b4c 	svcvs	0x00434b4c
    2c84:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2c88:	0003f100 	andeq	pc, r3, r0, lsl #2
    2c8c:	43435200 	movtmi	r5, #12800	; 0x3200
    2c90:	7465475f 	strbtvc	r4, [r5], #-1887
    2c94:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    2c98:	6f534b4c 	svcvs	0x00534b4c
    2c9c:	65637275 	strbvs	r7, [r3, #-629]!
    2ca0:	00040900 	andeq	r0, r4, r0, lsl #18
    2ca4:	43435200 	movtmi	r5, #12800	; 0x3200
    2ca8:	4c43485f 	mcrrmi	8, 5, r4, r3, cr15
    2cac:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    2cb0:	00676966 	rsbeq	r6, r7, r6, ror #18
    2cb4:	00000442 	andeq	r0, r0, r2, asr #8
    2cb8:	5f434352 	svcpl	0x00434352
    2cbc:	4b4c4350 	blmi	1313a04 <__Stack_Size+0x1313604>
    2cc0:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
    2cc4:	00676966 	rsbeq	r6, r7, r6, ror #18
    2cc8:	0000047b 	andeq	r0, r0, fp, ror r4
    2ccc:	5f434352 	svcpl	0x00434352
    2cd0:	4b4c4350 	blmi	1313a18 <__Stack_Size+0x1313618>
    2cd4:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
    2cd8:	00676966 	rsbeq	r6, r7, r6, ror #18
    2cdc:	000004b0 	strheq	r0, [r0], -r0
    2ce0:	5f434352 	svcpl	0x00434352
    2ce4:	6f435449 	svcvs	0x00435449
    2ce8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2cec:	0004e500 	andeq	lr, r4, r0, lsl #10
    2cf0:	43435200 	movtmi	r5, #12800	; 0x3200
    2cf4:	4253555f 	subsmi	r5, r3, #398458880	; 0x17c00000
    2cf8:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    2cfc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2d00:	050c0067 	streq	r0, [ip, #-103]
    2d04:	43520000 	cmpmi	r2, #0	; 0x0
    2d08:	44415f43 	strbmi	r5, [r1], #-3907
    2d0c:	4b4c4343 	blmi	1313a20 <__Stack_Size+0x1313620>
    2d10:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2d14:	45006769 	strmi	r6, [r0, #-1897]
    2d18:	52000005 	andpl	r0, r0, #5	; 0x5
    2d1c:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3
    2d20:	6f434553 	svcvs	0x00434553
    2d24:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2d28:	00056c00 	andeq	r6, r5, r0, lsl #24
    2d2c:	43435200 	movtmi	r5, #12800	; 0x3200
    2d30:	49534c5f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, sl, fp, lr}^
    2d34:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2d38:	00000593 	muleq	r0, r3, r5
    2d3c:	5f434352 	svcpl	0x00434352
    2d40:	43435452 	movtmi	r5, #13394	; 0x3452
    2d44:	6f434b4c 	svcvs	0x00434b4c
    2d48:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2d4c:	0005bc00 	andeq	fp, r5, r0, lsl #24
    2d50:	43435200 	movtmi	r5, #12800	; 0x3200
    2d54:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    2d58:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    2d5c:	e300646d 	movw	r6, #1133	; 0x46d
    2d60:	52000005 	andpl	r0, r0, #5	; 0x5
    2d64:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    2d68:	6c437465 	cfstrdvs	mvd7, [r3], {101}
    2d6c:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    2d70:	71657246 	cmnvc	r5, r6, asr #4
    2d74:	00064a00 	andeq	r4, r6, r0, lsl #20
    2d78:	43435200 	movtmi	r5, #12800	; 0x3200
    2d7c:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    2d80:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2d84:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    2d88:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    2d8c:	7f00646d 	svcvc	0x0000646d
    2d90:	52000006 	andpl	r0, r0, #6	; 0x6
    2d94:	415f4343 	cmpmi	pc, r3, asr #6
    2d98:	50324250 	eorspl	r4, r2, r0, asr r2
    2d9c:	70697265 	rsbvc	r7, r9, r5, ror #4
    2da0:	6f6c4368 	svcvs	0x006c4368
    2da4:	6d436b63 	vstrvs	d22, [r3, #-396]
    2da8:	06b40064 	ldrteq	r0, [r4], r4, rrx
    2dac:	43520000 	cmpmi	r2, #0	; 0x0
    2db0:	50415f43 	subpl	r5, r1, r3, asr #30
    2db4:	65503142 	ldrbvs	r3, [r0, #-322]
    2db8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2dbc:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2dc0:	646d436b 	strbtvs	r4, [sp], #-875
    2dc4:	0006e900 	andeq	lr, r6, r0, lsl #18
    2dc8:	43435200 	movtmi	r5, #12800	; 0x3200
    2dcc:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    2dd0:	72655032 	rsbvc	r5, r5, #50	; 0x32
    2dd4:	52687069 	rsbpl	r7, r8, #105	; 0x69
    2dd8:	74657365 	strbtvc	r7, [r5], #-869
    2ddc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2de0:	0000071e 	andeq	r0, r0, lr, lsl r7
    2de4:	5f434352 	svcpl	0x00434352
    2de8:	31425041 	cmpcc	r2, r1, asr #32
    2dec:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2df0:	65526870 	ldrbvs	r6, [r2, #-2160]
    2df4:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    2df8:	5300646d 	movwpl	r6, #1133	; 0x46d
    2dfc:	52000007 	andpl	r0, r0, #7	; 0x7
    2e00:	425f4343 	subsmi	r4, pc, #201326593	; 0xc000001
    2e04:	756b6361 	strbvc	r6, [fp, #-865]!
    2e08:	73655270 	cmnvc	r5, #7	; 0x7
    2e0c:	6d437465 	cfstrdvs	mvd7, [r3, #-404]
    2e10:	077a0064 	ldrbeq	r0, [sl, -r4, rrx]!
    2e14:	43520000 	cmpmi	r2, #0	; 0x0
    2e18:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    2e1c:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    2e20:	72756365 	rsbsvc	r6, r5, #-1811939327	; 0x94000001
    2e24:	53797469 	cmnpl	r9, #1761607680	; 0x69000000
    2e28:	65747379 	ldrbvs	r7, [r4, #-889]!
    2e2c:	646d436d 	strbtvs	r4, [sp], #-877
    2e30:	0007a100 	andeq	sl, r7, r0, lsl #2
    2e34:	43435200 	movtmi	r5, #12800	; 0x3200
    2e38:	4f434d5f 	svcmi	0x00434d5f
    2e3c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2e40:	c8006769 	stmdagt	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    2e44:	52000007 	andpl	r0, r0, #7	; 0x7
    2e48:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    2e4c:	6c467465 	cfstrdvs	mvd7, [r6], {101}
    2e50:	74536761 	ldrbvc	r6, [r3], #-1889
    2e54:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2e58:	0007fc00 	andeq	pc, r7, r0, lsl #24
    2e5c:	43435200 	movtmi	r5, #12800	; 0x3200
    2e60:	656c435f 	strbvs	r4, [ip, #-863]!
    2e64:	6c467261 	sfmvs	f7, 2, [r6], {97}
    2e68:	10006761 	andne	r6, r0, r1, ror #14
    2e6c:	52000008 	andpl	r0, r0, #8	; 0x8
    2e70:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    2e74:	54497465 	strbpl	r7, [r9], #-1125
    2e78:	74617453 	strbtvc	r7, [r1], #-1107
    2e7c:	49007375 	stmdbmi	r0, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}
    2e80:	52000008 	andpl	r0, r0, #8	; 0x8
    2e84:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    2e88:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    2e8c:	65505449 	ldrbvs	r5, [r0, #-1097]
    2e90:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    2e94:	74694267 	strbtvc	r4, [r9], #-615
    2e98:	00000000 	andeq	r0, r0, r0
    2e9c:	00009d00 	andeq	r9, r0, r0, lsl #26
    2ea0:	e5000200 	str	r0, [r0, #-512]
    2ea4:	ef000090 	svc	0x00000090
    2ea8:	f7000001 	undefined instruction 0xf7000001
    2eac:	53000000 	movwpl	r0, #0	; 0x0
    2eb0:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    2eb4:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    2eb8:	6f534b4c 	svcvs	0x00534b4c
    2ebc:	65637275 	strbvs	r7, [r3, #-629]!
    2ec0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2ec4:	1c006769 	stcne	7, cr6, [r0], {105}
    2ec8:	53000001 	movwpl	r0, #1	; 0x1
    2ecc:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    2ed0:	535f6b63 	cmppl	pc, #101376	; 0x18c00
    2ed4:	65527465 	ldrbvs	r7, [r2, #-1125]
    2ed8:	64616f6c 	strbtvs	r6, [r1], #-3948
    2edc:	00014100 	andeq	r4, r1, r0, lsl #2
    2ee0:	73795300 	cmnvc	r9, #0	; 0x0
    2ee4:	6b636954 	blvs	18dd43c <__Stack_Size+0x18dd03c>
    2ee8:	756f435f 	strbvc	r4, [pc, #-863]!	; 2b91 <__Stack_Size+0x2791>
    2eec:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2ef0:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2ef4:	00000166 	andeq	r0, r0, r6, ror #2
    2ef8:	54737953 	ldrbtpl	r7, [r3], #-2387
    2efc:	5f6b6369 	svcpl	0x006b6369
    2f00:	6f435449 	svcvs	0x00435449
    2f04:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2f08:	00018b00 	andeq	r8, r1, r0, lsl #22
    2f0c:	73795300 	cmnvc	r9, #0	; 0x0
    2f10:	6b636954 	blvs	18dd468 <__Stack_Size+0x18dd068>
    2f14:	7465475f 	strbtvc	r4, [r5], #-1887
    2f18:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    2f1c:	00726574 	rsbseq	r6, r2, r4, ror r5
    2f20:	000001a2 	andeq	r0, r0, r2, lsr #3
    2f24:	54737953 	ldrbtpl	r7, [r3], #-2387
    2f28:	5f6b6369 	svcpl	0x006b6369
    2f2c:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    2f30:	5367616c 	cmnpl	r7, #27	; 0x1b
    2f34:	75746174 	ldrbvc	r6, [r4, #-372]!
    2f38:	00000073 	andeq	r0, r0, r3, ror r0
    2f3c:	025b0000 	subseq	r0, fp, #0	; 0x0
    2f40:	00020000 	andeq	r0, r2, r0
    2f44:	000092d4 	ldrdeq	r9, [r0], -r4
    2f48:	00000950 	andeq	r0, r0, r0, asr r9
    2f4c:	000002b6 	strheq	r0, [r0], -r6
    2f50:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2f54:	74535f54 	ldrbvc	r5, [r3], #-3924
    2f58:	74637572 	strbtvc	r7, [r3], #-1394
    2f5c:	74696e49 	strbtvc	r6, [r9], #-3657
    2f60:	0002e100 	andeq	lr, r2, r0, lsl #2
    2f64:	41535500 	cmpmi	r3, r0, lsl #10
    2f68:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    2f6c:	6b636f6c 	blvs	18ded24 <__Stack_Size+0x18de924>
    2f70:	74696e49 	strbtvc	r6, [r9], #-3657
    2f74:	00033000 	andeq	r3, r3, r0
    2f78:	41535500 	cmpmi	r3, r0, lsl #10
    2f7c:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    2f80:	6b636f6c 	blvs	18ded38 <__Stack_Size+0x18de938>
    2f84:	75727453 	ldrbvc	r7, [r2, #-1107]!
    2f88:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    2f8c:	57007469 	strpl	r7, [r0, -r9, ror #8]
    2f90:	55000003 	strpl	r0, [r0, #-3]
    2f94:	54524153 	ldrbpl	r4, [r2], #-339
    2f98:	646d435f 	strbtvs	r4, [sp], #-863
    2f9c:	00038c00 	andeq	r8, r3, r0, lsl #24
    2fa0:	41535500 	cmpmi	r3, r0, lsl #10
    2fa4:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^
    2fa8:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    2fac:	00676966 	rsbeq	r6, r7, r6, ror #18
    2fb0:	0000040d 	andeq	r0, r0, sp, lsl #8
    2fb4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2fb8:	4d445f54 	stclmi	15, cr5, [r4, #-336]
    2fbc:	646d4341 	strbtvs	r4, [sp], #-833
    2fc0:	00045000 	andeq	r5, r4, r0
    2fc4:	41535500 	cmpmi	r3, r0, lsl #10
    2fc8:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    2fcc:	64417465 	strbvs	r7, [r1], #-1125
    2fd0:	73657264 	cmnvc	r5, #1073741830	; 0x40000006
    2fd4:	04850073 	streq	r0, [r5], #115
    2fd8:	53550000 	cmppl	r5, #0	; 0x0
    2fdc:	5f545241 	svcpl	0x00545241
    2fe0:	656b6157 	strbvs	r6, [fp, #-343]!
    2fe4:	6f437055 	svcvs	0x00437055
    2fe8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2fec:	0004bc00 	andeq	fp, r4, r0, lsl #24
    2ff0:	41535500 	cmpmi	r3, r0, lsl #10
    2ff4:	525f5452 	subspl	r5, pc, #1375731712	; 0x52000000
    2ff8:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    2ffc:	57726576 	undefined
    3000:	55656b61 	strbpl	r6, [r5, #-2913]!
    3004:	646d4370 	strbtvs	r4, [sp], #-880
    3008:	0004f100 	andeq	pc, r4, r0, lsl #2
    300c:	41535500 	cmpmi	r3, r0, lsl #10
    3010:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}
    3014:	72424e49 	subvc	r4, r2, #1168	; 0x490
    3018:	446b6165 	strbtmi	r6, [fp], #-357
    301c:	63657465 	cmnvs	r5, #1694498816	; 0x65000000
    3020:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    3024:	43687467 	cmnmi	r8, #1728053248	; 0x67000000
    3028:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    302c:	05280067 	streq	r0, [r8, #-103]!
    3030:	53550000 	cmppl	r5, #0	; 0x0
    3034:	5f545241 	svcpl	0x00545241
    3038:	434e494c 	movtmi	r4, #59724	; 0xe94c
    303c:	5d00646d 	cfstrspl	mvf6, [r0, #-436]
    3040:	55000005 	strpl	r0, [r0, #-5]
    3044:	54524153 	ldrbpl	r4, [r2], #-339
    3048:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
    304c:	74614464 	strbtvc	r4, [r1], #-1124
    3050:	05940061 	ldreq	r0, [r4, #97]
    3054:	53550000 	cmppl	r5, #0	; 0x0
    3058:	5f545241 	svcpl	0x00545241
    305c:	65636552 	strbvs	r6, [r3, #-1362]!
    3060:	44657669 	strbtmi	r7, [r5], #-1641
    3064:	00617461 	rsbeq	r7, r1, r1, ror #8
    3068:	000005c1 	andeq	r0, r0, r1, asr #11
    306c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3070:	65535f54 	ldrbvs	r5, [r3, #-3924]
    3074:	7242646e 	subvc	r6, r2, #1845493760	; 0x6e000000
    3078:	006b6165 	rsbeq	r6, fp, r5, ror #2
    307c:	000005e8 	andeq	r0, r0, r8, ror #11
    3080:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3084:	65535f54 	ldrbvs	r5, [r3, #-3924]
    3088:	61754774 	cmnvs	r5, r4, ror r7
    308c:	69546472 	ldmdbvs	r4, {r1, r4, r5, r6, sl, sp, lr}^
    3090:	1d00656d 	cfstr32ne	mvfx6, [r0, #-436]
    3094:	55000006 	strpl	r0, [r0, #-6]
    3098:	54524153 	ldrbpl	r4, [r2], #-339
    309c:	7465535f 	strbtvc	r5, [r5], #-863
    30a0:	73657250 	cmnvc	r5, #5	; 0x5
    30a4:	656c6163 	strbvs	r6, [ip, #-355]!
    30a8:	06520072 	undefined
    30ac:	53550000 	cmppl	r5, #0	; 0x0
    30b0:	5f545241 	svcpl	0x00545241
    30b4:	72616d53 	rsbvc	r6, r1, #5312	; 0x14c0
    30b8:	72614374 	rsbvc	r4, r1, #-805306367	; 0xd0000001
    30bc:	646d4364 	strbtvs	r4, [sp], #-868
    30c0:	00068700 	andeq	r8, r6, r0, lsl #14
    30c4:	41535500 	cmpmi	r3, r0, lsl #10
    30c8:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    30cc:	7472616d 	ldrbtvc	r6, [r2], #-365
    30d0:	64726143 	ldrbtvs	r6, [r2], #-323
    30d4:	4b43414e 	blmi	10d3614 <__Stack_Size+0x10d3214>
    30d8:	00646d43 	rsbeq	r6, r4, r3, asr #26
    30dc:	000006bc 	strheq	r0, [r0], -ip
    30e0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    30e4:	61485f54 	cmpvs	r8, r4, asr pc
    30e8:	7544666c 	strbvc	r6, [r4, #-1644]
    30ec:	78656c70 	stmdavc	r5!, {r4, r5, r6, sl, fp, sp, lr}^
    30f0:	00646d43 	rsbeq	r6, r4, r3, asr #26
    30f4:	000006f1 	strdeq	r0, [r0], -r1
    30f8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    30fc:	72495f54 	subvc	r5, r9, #336	; 0x150
    3100:	6f434144 	svcvs	0x00434144
    3104:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3108:	00072800 	andeq	r2, r7, r0, lsl #16
    310c:	41535500 	cmpmi	r3, r0, lsl #10
    3110:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^
    3114:	43414472 	movtmi	r4, #5234	; 0x1472
    3118:	5d00646d 	cfstrspl	mvf6, [r0, #-436]
    311c:	55000007 	strpl	r0, [r0, #-7]
    3120:	54524153 	ldrbpl	r4, [r2], #-339
    3124:	7465475f 	strbtvc	r4, [r5], #-1887
    3128:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    312c:	74617453 	strbtvc	r7, [r1], #-1107
    3130:	a4007375 	strge	r7, [r0], #-885
    3134:	55000007 	strpl	r0, [r0, #-7]
    3138:	54524153 	ldrbpl	r4, [r2], #-339
    313c:	656c435f 	strbvs	r4, [ip, #-863]!
    3140:	6c467261 	sfmvs	f7, 2, [r6], {97}
    3144:	db006761 	blle	1ced0 <__Stack_Size+0x1cad0>
    3148:	55000007 	strpl	r0, [r0, #-7]
    314c:	54524153 	ldrbpl	r4, [r2], #-339
    3150:	7465475f 	strbtvc	r4, [r5], #-1887
    3154:	74535449 	ldrbvc	r5, [r3], #-1097
    3158:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    315c:	00085200 	andeq	r5, r8, r0, lsl #4
    3160:	41535500 	cmpmi	r3, r0, lsl #10
    3164:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    3168:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    316c:	65505449 	ldrbvs	r5, [r0, #-1097]
    3170:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    3174:	74694267 	strbtvc	r4, [r9], #-615
    3178:	0008a100 	andeq	sl, r8, r0, lsl #2
    317c:	41535500 	cmpmi	r3, r0, lsl #10
    3180:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^
    3184:	0074696e 	rsbseq	r6, r4, lr, ror #18
    3188:	0000092a 	andeq	r0, r0, sl, lsr #18
    318c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3190:	65445f54 	strbvs	r5, [r4, #-3924]
    3194:	74696e49 	strbtvc	r6, [r9], #-3657
    3198:	00000000 	andeq	r0, r0, r0
    319c:	00003100 	andeq	r3, r0, r0, lsl #2
    31a0:	b6000200 	strlt	r0, [r0], -r0, lsl #4
    31a4:	0600009c 	undefined
    31a8:	52000001 	andpl	r0, r0, #1	; 0x1
    31ac:	52000000 	andpl	r0, r0, #0	; 0x0
    31b0:	74657365 	strbtvc	r7, [r5], #-869
    31b4:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
    31b8:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    31bc:	0000ee00 	andeq	lr, r0, r0, lsl #28
    31c0:	705f6700 	subsvc	r6, pc, r0, lsl #14
    31c4:	65566e66 	ldrbvs	r6, [r6, #-3686]
    31c8:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    31cc:	00000073 	andeq	r0, r0, r3, ror r0
    31d0:	00190000 	andseq	r0, r9, r0
    31d4:	00020000 	andeq	r0, r2, r0
    31d8:	00009dbc 	strheq	r9, [r0], -ip
    31dc:	000000c5 	andeq	r0, r0, r5, asr #1
    31e0:	0000009c 	muleq	r0, ip, r0
    31e4:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    31e8:	00007469 	andeq	r7, r0, r9, ror #8
    31ec:	17000000 	strne	r0, [r0, -r0]
    31f0:	02000000 	andeq	r0, r0, #0	; 0x0
    31f4:	009e8100 	addseq	r8, lr, r0, lsl #2
    31f8:	00093a00 	andeq	r3, r9, r0, lsl #20
    31fc:	0008ff00 	andeq	pc, r8, r0, lsl #30
    3200:	69786500 	ldmdbvs	r8!, {r8, sl, sp, lr}^
    3204:	00000074 	andeq	r0, r0, r4, ror r0
    3208:	00350000 	eorseq	r0, r5, r0
    320c:	00020000 	andeq	r0, r2, r0
    3210:	0000a7bb 	strheq	sl, [r0], -fp
    3214:	0000093a 	andeq	r0, r0, sl, lsr r9
    3218:	00000910 	andeq	r0, r0, r0, lsl r9
    321c:	706d695f 	rsbvc	r6, sp, pc, asr r9
    3220:	5f657275 	svcpl	0x00657275
    3224:	00727470 	rsbseq	r7, r2, r0, ror r4
    3228:	00000922 	andeq	r0, r0, r2, lsr #18
    322c:	6f6c675f 	svcvs	0x006c675f
    3230:	5f6c6162 	svcpl	0x006c6162
    3234:	75706d69 	ldrbvc	r6, [r0, #-3433]!
    3238:	705f6572 	subsvc	r6, pc, r2, ror r5
    323c:	00007274 	andeq	r7, r0, r4, ror r2
    3240:	3a000000 	bcc	3248 <__Stack_Size+0x2e48>
    3244:	02000000 	andeq	r0, r0, #0	; 0x0
    3248:	00b0f500 	adcseq	pc, r0, r0, lsl #10
    324c:	00014600 	andeq	r4, r1, r0, lsl #12
    3250:	00008000 	andeq	r8, r0, r0
    3254:	6c5f5f00 	mrrcvs	15, 0, r5, pc, cr0
    3258:	5f636269 	svcpl	0x00636269
    325c:	696e6966 	stmdbvs	lr!, {r1, r2, r5, r6, r8, fp, sp, lr}^
    3260:	7272615f 	rsbsvc	r6, r2, #-1073741801	; 0xc0000017
    3264:	b2007961 	andlt	r7, r0, #1589248	; 0x184000
    3268:	5f000000 	svcpl	0x00000000
    326c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    3270:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
    3274:	615f7469 	cmpvs	pc, r9, ror #8
    3278:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
    327c:	00000000 	andeq	r0, r0, r0
    3280:	00001900 	andeq	r1, r0, r0, lsl #18
    3284:	3b000200 	blcc	3a8c <__Stack_Size+0x368c>
    3288:	0e0000b2 	mcreq	0, 0, r0, cr0, cr2, {5}
    328c:	3e000001 	cdpcc	0, 0, cr0, cr0, cr1, {0}
    3290:	6d000000 	stcvs	0, cr0, [r0]
    3294:	70636d65 	rsbvc	r6, r3, r5, ror #26
    3298:	00000079 	andeq	r0, r0, r9, ror r0
    329c:	00190000 	andseq	r0, r9, r0
    32a0:	00020000 	andeq	r0, r2, r0
    32a4:	0000b349 	andeq	fp, r0, r9, asr #6
    32a8:	00000113 	andeq	r0, r0, r3, lsl r1
    32ac:	00000088 	andeq	r0, r0, r8, lsl #1
    32b0:	736d656d 	cmnvc	sp, #457179136	; 0x1b400000
    32b4:	00007465 	andeq	r7, r0, r5, ror #8
    32b8:	26000000 	strcs	r0, [r0], -r0
    32bc:	02000000 	andeq	r0, r0, #0	; 0x0
    32c0:	00b45c00 	adcseq	r5, r4, r0, lsl #24
    32c4:	0009a500 	andeq	sl, r9, r0, lsl #10
    32c8:	00091e00 	andeq	r1, r9, r0, lsl #28
    32cc:	725f5f00 	subsvc	r5, pc, #0	; 0x0
    32d0:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    32d4:	5f726574 	svcpl	0x00726574
    32d8:	74697865 	strbtvc	r7, [r9], #-2149
    32dc:	636f7270 	cmnvs	pc, #7	; 0x7
    32e0:	00000000 	andeq	r0, r0, r0
    32e4:	00002300 	andeq	r2, r0, r0, lsl #6
    32e8:	01000200 	tsteq	r0, r0, lsl #4
    32ec:	b20000be 	andlt	r0, r0, #190	; 0xbe
    32f0:	ff000009 	undefined instruction 0xff000009
    32f4:	5f000008 	svcpl	0x00000008
    32f8:	6c61635f 	stclvs	3, cr6, [r1], #-380
    32fc:	78655f6c 	stmdavc	r5!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    3300:	72707469 	rsbsvc	r7, r0, #1761607680	; 0x69000000
    3304:	0073636f 	rsbseq	r6, r3, pc, ror #6
    3308:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000049 	andeq	r0, r0, r9, asr #32
       4:	00000002 	andeq	r0, r0, r2
       8:	01040000 	tsteq	r4, r0
	...
      14:	69747263 	ldmdbvs	r4!, {r0, r1, r5, r6, r9, ip, sp, lr}^
      18:	6d73612e 	ldfvse	f6, [r3, #-184]!
      1c:	5c3a6300 	ldcpl	3, cr6, [sl]
      20:	616e6977 	smcvs	59031
      24:	5c736d72 	ldclpl	13, cr6, [r3], #-456
      28:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
      2c:	63675c64 	cmnvs	r7, #25600	; 0x6400
      30:	75622d63 	strbvc	r2, [r2, #-3427]!
      34:	5c646c69 	stclpl	12, cr6, [r4], #-420
      38:	00636367 	rsbeq	r6, r3, r7, ror #6
      3c:	20554e47 	subscs	r4, r5, r7, asr #28
      40:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
      44:	2e38312e 	rsfcsep	f3, f0, #0.5
      48:	01003035 	tsteq	r0, r5, lsr r0
      4c:	00008080 	andeq	r8, r0, r0, lsl #1
      50:	12000200 	andne	r0, r0, #0	; 0x0
      54:	04000000 	streq	r0, [r0]
      58:	00004901 	andeq	r4, r0, r1, lsl #18
	...
      64:	2f2e2e00 	svccs	0x002e2e00
      68:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
      6c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
      70:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
      74:	332e342d 	teqcc	lr, #754974720	; 0x2d000000
      78:	6c2f302e 	stcvs	0, cr3, [pc], #-184
      7c:	6c676269 	sfmvs	f6, 2, [r7], #-420
      80:	2f73736f 	svccs	0x0073736f
      84:	2f6d7261 	svccs	0x006d7261
      88:	30747263 	rsbscc	r7, r4, r3, ror #4
      8c:	6300532e 	movwvs	r5, #814	; 0x32e
      90:	69775c3a 	ldmdbvs	r7!, {r1, r3, r4, r5, sl, fp, ip, lr}^
      94:	6d72616e 	ldfvse	f6, [r2, #-440]!
      98:	75625c73 	strbvc	r5, [r2, #-3187]!
      9c:	5c646c69 	stclpl	12, cr6, [r4], #-420
      a0:	2d636367 	stclcs	3, cr6, [r3, #-412]!
      a4:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
      a8:	72615c64 	rsbvc	r5, r1, #25600	; 0x6400
      ac:	61652d6d 	cmnvs	r5, sp, ror #26
      b0:	6c5c6962 	mrrcvs	9, 6, r6, ip, cr2
      b4:	6c676269 	sfmvs	f6, 2, [r7], #-420
      b8:	5c73736f 	ldclpl	3, cr7, [r3], #-444
      bc:	006d7261 	rsbeq	r7, sp, r1, ror #4
      c0:	20554e47 	subscs	r4, r5, r7, asr #28
      c4:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
      c8:	2e38312e 	rsfcsep	f3, f0, #0.5
      cc:	01003035 	tsteq	r0, r5, lsr r0
      d0:	0004d580 	andeq	sp, r4, r0, lsl #11
      d4:	26000200 	strcs	r0, [r0], -r0, lsl #4
      d8:	04000000 	streq	r0, [r0]
      dc:	0001c601 	andeq	ip, r1, r1, lsl #12
      e0:	00470100 	subeq	r0, r7, r0, lsl #2
      e4:	039d0000 	orrseq	r0, sp, #0	; 0x0
      e8:	31340000 	teqcc	r4, r0
      ec:	343c0800 	ldrtcc	r0, [ip], #-2048
      f0:	00e30800 	rsceq	r0, r3, r0, lsl #16
      f4:	04020000 	streq	r0, [r2]
      f8:	00215005 	eoreq	r5, r1, r5
      fc:	05020200 	streq	r0, [r2, #-512]
     100:	00000495 	muleq	r0, r5, r4
     104:	69060102 	stmdbvs	r6, {r1, r8}
     108:	03000004 	movweq	r0, #4	; 0x4
	ui2a(num,10,0,bf);
	}

static int a2d(char ch)
	{
	if (ch>='0' && ch<='9') 
     10c:	00323375 	eorseq	r3, r2, r5, ror r3
     110:	00452702 	subeq	r2, r5, r2, lsl #14
	int num=0;
	int digit;
	while ((digit=a2d(ch))>=0) {
		if (digit>base) break;
		num=num*base+digit;
		ch=*p++;
     114:	04020000 	streq	r0, [r2]

static int a2d(char ch)
	{
	if (ch>='0' && ch<='9') 
		return ch-'0';
	else if (ch>='a' && ch<='f')
     118:	0021f107 	eoreq	pc, r1, r7, lsl #2
     11c:	31750300 	cmncc	r5, r0, lsl #6
		return ch-'a'+10;
     120:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
     124:	00000057 	andeq	r0, r0, r7, asr r0
	else if (ch>='A' && ch<='F')
     128:	22070202 	andcs	r0, r7, #536870912	; 0x20000000
     12c:	03000002 	movweq	r0, #2	; 0x2
     130:	02003875 	andeq	r3, r0, #7667712	; 0x750000
		return ch-'A'+10;
     134:	00006829 	andeq	r6, r0, r9, lsr #16
static char a2i(char ch, char** src,int base,int* nump)
	{
	char* p= *src;
	int num=0;
	int digit;
	while ((digit=a2d(ch))>=0) {
     138:	08010200 	stmdaeq	r1, {r9}
			if (ch=='l') {
				ch=*(fmt++);
				lng=1;
			}
#endif
			switch (ch) {
     13c:	00000467 	andeq	r0, r0, r7, ror #8
     140:	001f4104 	andseq	r4, pc, r4, lsl #2
     144:	682a0200 	stmdavs	sl!, {r9}
     148:	05000000 	streq	r0, [r0]
     14c:	f4060704 	vst1.8	{d0}, [r6], r4
     150:	01000004 	tsteq	r0, r4
     154:	00b40d04 	adcseq	r0, r4, r4, lsl #26
     158:	71070000 	tstvc	r7, r0
     15c:	00000003 	andeq	r0, r0, r3
     160:	00148607 	andseq	r8, r4, r7, lsl #12
     164:	63070100 	movwvs	r0, #28928	; 0x7100
     168:	02000000 	andeq	r0, r0, #0	; 0x0
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
     16c:	00047507 	andeq	r7, r4, r7, lsl #10
     170:	54080300 	strpl	r0, [r8], #-768
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
     174:	04004458 	streq	r4, [r0], #-1112

static void i2a (int num, char * bf)
	{
	if (num<0) {
		num=-num;
		*bf++ = '-';
     178:	44585208 	ldrbmi	r5, [r8], #-520
     17c:	41080500 	tstmi	r8, r0, lsl #10
	*bf=0;
	}

static void i2a (int num, char * bf)
	{
	if (num<0) {
     180:	06005855 	undefined
		num=-num;
		*bf++ = '-';
     184:	03020900 	movweq	r0, #10496	; 0x2900
     188:	000112cf 	andeq	r1, r1, pc, asr #5
		}
	ui2a(num,10,0,bf);
     18c:	06800700 	streq	r0, [r0], r0, lsl #14
     190:	07010000 	streq	r0, [r1, -r0]
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
					putchw(putp,putf,w,lz,bf);
     194:	00000487 	andeq	r0, r0, r7, lsl #9
     198:	03100702 	tsteq	r0, #524288	; 0x80000
     19c:	07040000 	streq	r0, [r4, -r0]
     1a0:	0000068e 	andeq	r0, r0, lr, lsl #13
     1a4:	04cb0708 	strbeq	r0, [fp], #1800
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
     1a8:	07100000 	ldreq	r0, [r0, -r0]
     1ac:	00000144 	andeq	r0, r0, r4, asr #2
     1b0:	058c0720 	streq	r0, [ip, #1824]
     1b4:	00c00000 	sbceq	r0, r0, r0
     1b8:	00020307 	andeq	r0, r2, r7, lsl #6
					putchw(putp,putf,w,lz,bf);
     1bc:	07018000 	streq	r8, [r1, -r0]
     1c0:	000006c1 	andeq	r0, r0, r1, asr #13
     1c4:	59070280 	stmdbpl	r7, {r7, r9}
					break;
				case 'c' : 
					putf(putp,(char)(va_arg(va, int)));
     1c8:	80000004 	andhi	r0, r0, r4
     1cc:	00260704 	eoreq	r0, r6, r4, lsl #14
     1d0:	08800000 	stmeq	r0, {}
					break;
				case 's' : 
					putchw(putp,putf,w,0,va_arg(va, char*));
     1d4:	0002a507 	andeq	sl, r2, r7, lsl #10
     1d8:	07108000 	ldreq	r8, [r0, -r0]
     1dc:	00000135 	andeq	r0, r0, r5, lsr r1
     1e0:	0a002080 	beq	83e8 <__Stack_Size+0x7fe8>
     1e4:	016e0301 	cmneq	lr, r1, lsl #6
     1e8:	00000248 	andeq	r0, r0, r8, asr #4
					break;
				case '%' :
					putf(putp,ch);
     1ec:	00029207 	andeq	r9, r2, r7, lsl #4
     1f0:	7f070000 	svcvc	0x00070000
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
     1f4:	01000002 	tsteq	r0, r2
     1f8:	0005bc07 	andeq	fp, r5, r7, lsl #24
					break;
				}
			}
		}
	abort:;
	}
     1fc:	70070200 	andvc	r0, r7, r0, lsl #4


void init_printf(void* putp,void (*putf) (void*,char))
	{
	stdout_putf=putf;
     200:	03000002 	movweq	r0, #2	; 0x2
	stdout_putp=putp;
     204:	0000b807 	andeq	fp, r0, r7, lsl #16
	}
     208:	c6070400 	strgt	r0, [r7], -r0, lsl #8
     20c:	05000000 	streq	r0, [r0]
     210:	00059707 	andeq	r9, r5, r7, lsl #14
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
     214:	77070600 	strvc	r0, [r7, -r0, lsl #12]
     218:	07000005 	streq	r0, [r0, -r5]
	}
     21c:	0001a007 	andeq	sl, r1, r7



void tfp_sprintf(char* s,char *fmt, ...)
	{
     220:	8a070800 	bhi	1c2228 <__Stack_Size+0x1c1e28>
     224:	09000001 	stmdbeq	r0, {r0}
     228:	00063407 	andeq	r3, r6, r7, lsl #8
     22c:	9f070a00 	svcls	0x00070a00
     230:	0b000004 	bleq	248 <_Minimum_Stack_Size+0x148>
	va_list va;
	va_start(va,fmt);
	tfp_format(&s,putcp,fmt,va);
     234:	00044007 	andeq	r4, r4, r7
     238:	03070c00 	movweq	r0, #31744	; 0x7c00
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
     23c:	0d000001 	stceq	0, cr0, [r0, #-4]
	va_list va;
	va_start(va,fmt);
	tfp_format(&s,putcp,fmt,va);
	putcp(&s,0);
	va_end(va);
	}
     240:	0002ea07 	andeq	lr, r2, r7, lsl #20
     244:	d9070e00 	stmdble	r7, {r9, sl, fp}
     248:	0f000002 	svceq	0x00000002
     24c:	00008c07 	andeq	r8, r0, r7, lsl #24
	stdout_putf=putf;
	stdout_putp=putp;
	}

void tfp_printf(char *fmt, ...)
	{
     250:	bd071000 	stclt	0, cr1, [r7]
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
     254:	11000004 	tstne	r0, r4
     258:	00060207 	andeq	r0, r6, r7, lsl #4
	stdout_putf=putf;
	stdout_putp=putp;
	}

void tfp_printf(char *fmt, ...)
	{
     25c:	34071200 	strcc	r1, [r7], #-512
     260:	13000000 	movwne	r0, #0	; 0x0
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
     264:	00051107 	andeq	r1, r5, r7, lsl #2
	va_end(va);
	}
     268:	fa071400 	blx	1c5270 <__Stack_Size+0x1c4e70>
     26c:	15000004 	strne	r0, [r0, #-4]
     270:	00032307 	andeq	r2, r3, r7, lsl #6
     274:	fb071600 	blx	1c5a7e <__Stack_Size+0x1c567e>
     278:	17000002 	strne	r0, [r0, -r2]
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
     27c:	00042e07 	andeq	r2, r4, r7, lsl #28
	dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction (INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
     280:	6b071800 	blvs	1c6288 <__Stack_Size+0x1c5e88>
     284:	19000000 	stmdbne	r0, {}
     288:	00007307 	andeq	r7, r0, r7, lsl #6
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
	}
	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
     28c:	bf071a00 	svclt	0x00071a00
     290:	1b000002 	blne	2a0 <_Minimum_Stack_Size+0x1a0>
     294:	00066007 	andeq	r6, r6, r7
	dxl_txrx_packet();
     298:	d2071c00 	andle	r1, r7, #0	; 0x0
	u16 CommStatus = dxl_get_result();
     29c:	1d000001 	stcne	0, cr0, [r0, #-4]
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
     2a0:	00064507 	andeq	r4, r6, r7, lsl #10
		PrintErrorCode();
     2a4:	20071e00 	andcs	r1, r7, r0, lsl #28
	else
		PrintCommStatus(CommStatus);
     2a8:	1f000006 	svcne	0x00000006
#endif
}
     2ac:	0005ef07 	andeq	lr, r5, r7, lsl #30
     2b0:	d1072000 	tstle	r7, r0
     2b4:	21000005 	tstcs	r0, r5
     2b8:	00040007 	andeq	r0, r4, r7
	}
	interpolating = 1;
}
/* interpolate our pose, this should be called at about 30Hz. */
#define WAIT_SLOP_FACTOR 10
int BioloidControllerEx_interpolateStep(bool fWait) {
     2bc:	e3072200 	movw	r2, #29184	; 0x7200
     2c0:	23000003 	movwcs	r0, #3	; 0x3

	if (interpolating == 0)
     2c4:	00035a07 	andeq	r5, r3, r7, lsl #20
		return 0;
	int i;
	int complete = poseSize;
     2c8:	43072400 	movwmi	r2, #29696	; 0x7400
	if (!fWait) {
     2cc:	25000003 	strcs	r0, [r0, #-3]
		if (getMillis() < (nextframe_ - WAIT_SLOP_FACTOR)) {
     2d0:	00055b07 	andeq	r5, r5, r7, lsl #22
     2d4:	47072600 	strmi	r2, [r7, -r0, lsl #12]
     2d8:	27000005 	strcs	r0, [r0, -r5]
			return (getMillis() - nextframe_); // We still have some time to do something...
     2dc:	0006cf07 	andeq	ip, r6, r7, lsl #30
     2e0:	ae072800 	cdpge	8, 0, cr2, cr7, cr0, {0}
     2e4:	29000006 	stmdbcs	r0, {r1, r2}
#ifdef MILLIS
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	while (getMillis() < nextframe_);
     2e8:	00001207 	andeq	r1, r0, r7, lsl #4
     2ec:	1d072a00 	fstsne	s4, [r7]
     2f0:	2b000001 	blcs	2fc <_Minimum_Stack_Size+0x1fc>
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
     2f4:	00041307 	andeq	r1, r4, r7, lsl #6
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     2f8:	f4072c00 	undefined instruction 0xf4072c00
     2fc:	2d000001 	stccs	0, cr0, [r0, #-4]
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
     300:	00033807 	andeq	r3, r3, r7, lsl #16
     304:	eb072e00 	bl	1cbb0c <__Stack_Size+0x1cb70c>
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     308:	2f000001 	svccs	0x00000001
		int diff = nextpose_[i] - pose_[i];
     30c:	00016507 	andeq	r6, r1, r7, lsl #10
     310:	59073000 	stmdbpl	r7, {ip, sp}
     314:	31000001 	tstcc	r0, r1
     318:	07040200 	streq	r0, [r4, -r0, lsl #4]
     31c:	000021f6 	strdeq	r2, [r0], -r6
		if (diff == 0) {
     320:	00017106 	andeq	r7, r1, r6, lsl #2
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
     324:	20050100 	andcs	r0, r5, r0, lsl #2
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
     328:	00000286 	andeq	r0, r0, r6, lsl #5
		int diff = nextpose_[i] - pose_[i];
		if (diff == 0) {
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
     32c:	0005b407 	andeq	fp, r5, r7, lsl #8
					pose_[i] = nextpose_[i];
     330:	a6070000 	strge	r0, [r7], -r0
					complete--;
     334:	01000006 	tsteq	r0, r6
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
     338:	0000e407 	andeq	lr, r0, r7, lsl #8
     33c:	82070200 	andhi	r0, r7, #0	; 0x0
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
     340:	03000001 	movweq	r0, #1	; 0x1
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
     344:	00021107 	andeq	r1, r2, r7, lsl #2
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
     348:	1b070400 	blne	1c1350 <__Stack_Size+0x1c0f50>
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     34c:	05000003 	streq	r0, [r0, #-3]
     350:	00024a07 	andeq	r4, r2, r7, lsl #20
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif

	}
	if (complete <= 0)
     354:	06000600 	streq	r0, [r0], -r0, lsl #12
		interpolating = 0;
     358:	00000219 	andeq	r0, r0, r9, lsl r2
	BioloidControllerEx_writePose();
     35c:	b60d0601 	strlt	r0, [sp], -r1, lsl #12
     360:	08000002 	stmdaeq	r0, {r1}
	return 0;
}
     364:	00005055 	andeq	r5, r0, r5, asr r0
     368:	00061007 	andeq	r1, r6, r7
     36c:	00070100 	andeq	r0, r7, r0, lsl #2
     370:	02000000 	andeq	r0, r0, #0	; 0x0
     374:	00052807 	andeq	r2, r5, r7, lsl #16
     378:	86070300 	strhi	r0, [r7], -r0, lsl #6
     37c:	04000003 	streq	r0, [r0], #-3
     380:	43494d08 	movtmi	r4, #40200	; 0x9d08
	for (i = 0; i < poseSize; i++)
		//nextpose_[i] = pgm_read_word_near(addr+1+i) << BIOLOID_SHIFT;
		nextpose_[i] = pgm_read_word_near(addr + 1 + i);
}
/* read in current servo positions to the pose. */
void BioloidControllerEx_readPose() {
     384:	06000500 	streq	r0, [r0], -r0, lsl #10
     388:	000000aa 	andeq	r0, r0, sl, lsr #1
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
		//pose_[i] = dxl_read_word(id_[i],AXM_PRESENT_POSITION_L)<<BIOLOID_SHIFT;
		pose_[i] = dxl_read_word(id_[i], AXM_PRESENT_POSITION_L);
     38c:	4b0d0702 	blmi	341f9c <__Stack_Size+0x341b9c>
     390:	07000003 	streq	r0, [r0, -r3]
     394:	0000037f 	andeq	r0, r0, pc, ror r3
     398:	0701eef2 	undefined
     39c:	000004ec 	andeq	r0, r0, ip, ror #9
		PrintChar(id_[i]);
		PrintString(" - ");
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
     3a0:	0701e1be 	undefined

#ifdef DEBUG_BIOLOIDEX
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
     3a4:	0000056f 	andeq	r0, r0, pc, ror #10
     3a8:	0701e1be 	undefined
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
	}
}
     3ac:	00000243 	andeq	r0, r0, r3, asr #4
     3b0:	0701d4ea 	streq	sp, [r1, -sl, ror #9]
     3b4:	000005ac 	andeq	r0, r0, ip, lsr #11
     3b8:	0701c8f1 	undefined
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitPosY[GaitCurrentLegNr] = -3 * g_InControlState.LegLiftHeight
				/ (3 + g_InControlState.gaitCur.HalfLiftHeight); // Easier to shift between div factor: /1 (3/3), /2 (3/6) and 3/4
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y
     3bc:	00000678 	andeq	r0, r0, r8, ror r6
				/ g_InControlState.gaitCur.LiftDivFactor;
	}

	//Optional Half heigth Rear 5 LiftedPos (5 lifted positions)
	else if (((g_InControlState.gaitCur.NrLiftedPos == 5 && (LegStep == -2)))
     3c0:	0701c8f1 	undefined
     3c4:	0000038c 	andeq	r0, r0, ip, lsl #7
     3c8:	0701bdce 	streq	fp, [r1, -lr, asr #27]
     3cc:	0000024f 	andeq	r0, r0, pc, asr #4
     3d0:	0701b2fc 	undefined
     3d4:	000000dc 	ldrdeq	r0, [r0], -ip
     3d8:	0701a8f6 	undefined
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = -g_InControlState.TravelLength.x / 2;
     3dc:	00000151 	andeq	r0, r0, r1, asr r1
     3e0:	0701a8f6 	undefined
     3e4:	00000256 	andeq	r0, r0, r6, asr r2
     3e8:	07019fb8 	undefined
     3ec:	0000017a 	andeq	r0, r0, sl, ror r1
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
     3f0:	070196bf 	undefined
     3f4:	0000025d 	andeq	r0, r0, sp, asr r2
     3f8:	070196bf 	undefined
     3fc:	00000235 	andeq	r0, r0, r5, lsr r2
     400:	07018e86 	streq	r8, [r1, -r6, lsl #29]
		GaitPosZ[GaitCurrentLegNr] = -g_InControlState.TravelLength.z / 2;
     404:	00000277 	andeq	r0, r0, r7, ror r2
     408:	07018689 	streq	r8, [r1, -r9, lsl #13]
     40c:	00000377 	andeq	r0, r0, r7, ror r3
     410:	07018689 	streq	r8, [r1, -r9, lsl #13]
		GaitRotY[GaitCurrentLegNr] = -g_InControlState.TravelLength.y / 2;
     414:	0000023c 	andeq	r0, r0, ip, lsr r2
     418:	0000fec6 	andeq	pc, r0, r6, asr #29
     41c:	134c010b 	movtne	r0, #49419	; 0xc10b
     420:	16010000 	strne	r0, [r1], -r0
	}

	//Optional Half heigth Front 5 LiftedPos (5 lifted positions)
	else if ((g_InControlState.gaitCur.NrLiftedPos == 5)
     424:	0003e101 	andeq	lr, r3, r1, lsl #2
     428:	00313400 	eorseq	r3, r1, r0, lsl #8
     42c:	00343c08 	eorseq	r3, r4, r8, lsl #24
     430:	00000008 	andeq	r0, r0, r8
     434:	0003e100 	andeq	lr, r3, r0, lsl #2
     438:	04df0c00 	ldrbeq	r0, [pc], #3072	; 440 <__Stack_Size+0x40>
			&& (LegStep == 2
					|| LegStep == -(g_InControlState.gaitCur.StepsInGait - 2))
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
     43c:	1b010000 	blne	40444 <__Stack_Size+0x40044>
     440:	0000006f 	andeq	r0, r0, pc, rrx
     444:	0000002b 	andeq	r0, r0, fp, lsr #32
     448:	0004d70d 	andeq	sp, r4, sp, lsl #14
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
     44c:	e81c0100 	ldmda	ip, {r8}
     450:	0d000003 	stceq	0, cr0, [r0, #-12]
     454:	000001b6 	strheq	r0, [r0], -r6
     458:	03ff1d01 	mvnseq	r1, #64	; 0x40
     45c:	0a0e0000 	beq	380464 <__Stack_Size+0x380064>
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
     460:	d8080032 	stmdale	r8, {r1, r4, r5}
     464:	0f080032 	svceq	0x00080032
     468:	01006469 	tsteq	r0, r9, ror #8
     46c:	00005e5c 	andeq	r5, r0, ip, asr lr
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y / 2;
     470:	0f560100 	svceq	0x00560100
     474:	006d756e 	rsbeq	r7, sp, lr, ror #10
     478:	005e5c01 	subseq	r5, lr, r1, lsl #24
     47c:	57010000 	strpl	r0, [r1, -r0]
	}
	//_B_
	//Leg front down position //bug here?  From _A_ to _B_ there should only be one gaitstep, not 2!
	//For example, where is the case of LegStep==0+2 executed when NRLiftedPos=3?
	else if ((LegStep == g_InControlState.gaitCur.FrontDownPos
     480:	0000a40c 	andeq	sl, r0, ip, lsl #8
     484:	4c5d0100 	ldfmie	f0, [sp], {0}
     488:	75000000 	strvc	r0, [r0]
     48c:	0d000000 	stceq	0, cr0, [r0]
     490:	00001db6 	strheq	r1, [r0], -r6
     494:	004c5d01 	subeq	r5, ip, r1, lsl #26
     498:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
     49c:	01000005 	tsteq	r0, r5
			|| LegStep
					== -(g_InControlState.gaitCur.StepsInGait
							- g_InControlState.gaitCur.FrontDownPos))
			&& GaitPosY[GaitCurrentLegNr] < 0) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
     4a0:	00004c5d 	andeq	r4, r0, sp, asr ip
     4a4:	06590d00 	ldrbeq	r0, [r9], -r0, lsl #26
     4a8:	5d010000 	stcpl	0, cr0, [r1]
     4ac:	0000004c 	andeq	r0, r0, ip, asr #32
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
     4b0:	04100000 	ldreq	r0, [r0]
     4b4:	746e6905 	strbtvc	r6, [lr], #-2309
     4b8:	03f81100 	mvnseq	r1, #0	; 0x0
     4bc:	03f80000 	mvnseq	r0, #0	; 0x0
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y / 2;
     4c0:	7a120000 	bvc	4804c8 <__Stack_Size+0x4800c8>
     4c4:	7f000000 	svcvc	0x00000000
     4c8:	08010200 	stmdaeq	r1, {r9}
		GaitPosY[GaitCurrentLegNr] = 0;
     4cc:	00000470 	andeq	r0, r0, r0, ror r4
     4d0:	03f80413 	mvnseq	r0, #318767104	; 0x13000000
	}

	//Move body forward
	else {
		GaitPosX[GaitCurrentLegNr] = GaitPosX[GaitCurrentLegNr]
     4d4:	340d0000 	strcc	r0, [sp]
     4d8:	08000005 	stmdaeq	r0, {r0, r2}
     4dc:	0004102a 	andeq	r1, r4, sl, lsr #32
     4e0:	005e1400 	subseq	r1, lr, r0, lsl #8
     4e4:	650d0000 	strvs	r0, [sp]
     4e8:	08000002 	stmdaeq	r0, {r1}
				- (g_InControlState.TravelLength.x
						/ (short) g_InControlState.gaitCur.TLDivFactor);
		GaitPosY[GaitCurrentLegNr] = 0;
     4ec:	00042028 	andeq	r2, r4, r8, lsr #32
     4f0:	004c1400 	subeq	r1, ip, r0, lsl #8
     4f4:	f60d0000 	undefined instruction 0xf60d0000
		GaitPosZ[GaitCurrentLegNr] = GaitPosZ[GaitCurrentLegNr]
     4f8:	08000003 	stmdaeq	r0, {r0, r1}
     4fc:	00042028 	andeq	r2, r4, r8, lsr #32
     500:	005e1100 	subseq	r1, lr, r0, lsl #2
     504:	04410000 	strbeq	r0, [r1]
				- (g_InControlState.TravelLength.z
						/ (short) g_InControlState.gaitCur.TLDivFactor);
		GaitRotY[GaitCurrentLegNr] = GaitRotY[GaitCurrentLegNr]
     508:	7a150000 	bvc	540510 <__Stack_Size+0x540110>
     50c:	ff000000 	undefined instruction 0xff000000
     510:	7a0d0003 	bvc	340524 <__Stack_Size+0x340124>
     514:	08000004 	stmdaeq	r0, {r2}
				- (g_InControlState.TravelLength.y
						/ (short) g_InControlState.gaitCur.TLDivFactor);
	}

}
     518:	00044c29 	andeq	r4, r4, r9, lsr #24
     51c:	04301400 	ldrteq	r1, [r0], #-1024
     520:	15160000 	ldrne	r0, [r6]
     524:	08000006 	stmdaeq	r0, {r1, r2}
     528:	00041044 	andeq	r1, r4, r4, asr #32
     52c:	93160000 	tstls	r6, #0	; 0x0
     530:	08000003 	stmdaeq	r0, {r0, r1}

}

//--------------------------------------------------------------------
//[GAIT Sequence]
void GaitSeq(void) {
     534:	00041044 	andeq	r1, r4, r4, asr #32
	//Check if the Gait is in motion - If not if we are going to start a motion try to align our Gaitstep to start with a good foot
	// for the direction we are about to go...

	if (fWalking || (g_InControlState.ForceGaitStepCnt != 0))
     538:	5e110000 	wxorpl	wr0, wr1, wr0
     53c:	79000000 	stmdbvc	r0, {}
     540:	12000004 	andne	r0, r0, #4	; 0x4
		TravelRequest = true;   // Is walking or was walking...
     544:	0000007a 	andeq	r0, r0, sl, ror r0
     548:	ec0d0040 	stc	0, cr0, [sp], {64}
	else {
		TravelRequest = (abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
     54c:	08000000 	stmdaeq	r0, {}
     550:	00048445 	andeq	r8, r4, r5, asr #8
     554:	04691400 	strbteq	r1, [r9], #-1024
     558:	e4160000 	ldr	r0, [r6]
     55c:	08000005 	stmdaeq	r0, {r0, r2}
     560:	00042058 	andeq	r2, r4, r8, asr r0
     564:	f9160000 	undefined instruction 0xf9160000
     568:	08000000 	stmdaeq	r0, {}
     56c:	00042058 	andeq	r2, r4, r8, asr r0
     570:	b20d0000 	andlt	r0, sp, #0	; 0x0
     574:	08000002 	stmdaeq	r0, {r1}
     578:	0004ac59 	andeq	sl, r4, r9, asr ip
     57c:	04301400 	ldrteq	r1, [r0], #-1024
				|| (abs(g_InControlState.TravelLength.y) > cTravelDeadZone);

		if (TravelRequest) {

		} else {    //Clear values under the cTravelDeadZone
			g_InControlState.TravelLength.x = 0;
     580:	99170000 	ldmdbls	r7, {}
			g_InControlState.TravelLength.z = 0;
     584:	08000006 	stmdaeq	r0, {r1, r2}
			g_InControlState.TravelLength.y = 0; //Gait NOT in motion, return to home position
		}
	}

	//Calculate Gait sequence
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
     588:	00003a14 	andeq	r3, r0, r4, lsl sl
     58c:	17010100 	strne	r0, [r1, -r0, lsl #2]
     590:	00000005 	andeq	r0, r0, r5
		Gait(LegIndex);
     594:	003a1708 	eorseq	r1, sl, r8, lsl #14
			g_InControlState.TravelLength.y = 0; //Gait NOT in motion, return to home position
		}
	}

	//Calculate Gait sequence
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
     598:	01010000 	tsteq	r1, r0
     59c:	00005617 	andeq	r5, r0, r7, lsl r6
     5a0:	3a1a0800 	bcc	6825a8 <__Stack_Size+0x6821a8>
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5a4:	01000000 	tsteq	r0, r0
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
     5a8:	06690001 	strbteq	r0, [r9], -r1
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5ac:	00020000 	andeq	r0, r2, r0
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
     5b0:	00000146 	andeq	r0, r0, r6, asr #2
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5b4:	01c60104 	biceq	r0, r6, r4, lsl #2
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
		g_InControlState.GaitStep = 1;
     5b8:	2d010000 	stccs	0, cr0, [r1]
     5bc:	9d00000a 	stcls	0, cr0, [r0, #-40]

	// If we have a force count decrement it now...
	if (g_InControlState.ForceGaitStepCnt)
     5c0:	3c000003 	stccc	0, cr0, [r0], {3}
     5c4:	70080034 	andvc	r0, r8, r4, lsr r0
		g_InControlState.ForceGaitStepCnt--;
     5c8:	1e080035 	mcrne	0, 0, r0, cr8, cr5, {1}
}
     5cc:	02000002 	andeq	r0, r0, #2	; 0x2
     5d0:	21500504 	cmpcs	r0, r4, lsl #10
     5d4:	02020000 	andeq	r0, r2, #0	; 0x0
     5d8:	00049505 	andeq	r9, r4, r5, lsl #10
     5dc:	06010200 	streq	r0, [r1], -r0, lsl #4
}
//--------------------------------------------------------------------
//[BalanceBody]
void BalanceBody(void) {

	TotalTransZ = TotalTransZ / BalanceDivFactor;
     5e0:	00000469 	andeq	r0, r0, r9, ror #8
     5e4:	f1070402 	undefined instruction 0xf1070402
     5e8:	03000021 	movweq	r0, #33	; 0x21
     5ec:	00363175 	eorseq	r3, r6, r5, ror r1
     5f0:	004c2802 	subeq	r2, ip, r2, lsl #16
	TotalTransX = TotalTransX / BalanceDivFactor;
     5f4:	02020000 	andeq	r0, r2, #0	; 0x0
     5f8:	00022207 	andeq	r2, r2, r7, lsl #4
     5fc:	38750300 	ldmdacc	r5!, {r8, r9}^
	TotalTransY = TotalTransY / BalanceDivFactor;
     600:	5d290200 	sfmpl	f0, 4, [r9]
     604:	02000000 	andeq	r0, r0, #0	; 0x0
     608:	04670801 	strbteq	r0, [r7], #-2049
     60c:	04040000 	streq	r0, [r4]

	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
		TotalXBal1 += 3600;

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
     610:	ed010507 	cfstr32	mvfx0, [r1, #-28]
     614:	01000007 	tsteq	r0, r7
	TotalTransX = TotalTransX / BalanceDivFactor;
	TotalTransY = TotalTransY / BalanceDivFactor;

#ifndef QUADMODE // ??? on PhantomX Hex at no movment YBal1 = 1800, on Quad = 0...  Need to experiment
	if (TotalYBal1 > 0)        //Rotate balance circle by +/- 180 deg
		TotalYBal1 -= 1800;
     618:	343c0128 	ldrtcc	r0, [ip], #-296
     61c:	343e0800 	ldrtcc	r0, [lr], #-2048
	else
		TotalYBal1 += 1800;
     620:	5d010800 	stcpl	8, cr0, [r1]
#endif

	if (TotalZBal1 < -1800) //Compensate for extreme balance positions that causes overflow
     624:	09d20105 	ldmibeq	r2, {r0, r2, r8}^
     628:	33010000 	movwcc	r0, #4096	; 0x1000
     62c:	00344001 	eorseq	r4, r4, r1
		TotalZBal1 += 3600;
     630:	00344208 	eorseq	r4, r4, r8, lsl #4
     634:	055d0108 	ldrbeq	r0, [sp, #-264]

	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
     638:	000bfc01 	andeq	pc, fp, r1, lsl #24
     63c:	01420100 	cmpeq	r2, r0, lsl #2
		TotalXBal1 += 3600;
     640:	08003444 	stmdaeq	r0, {r2, r6, sl, ip, sp}
     644:	08003446 	stmdaeq	r0, {r1, r2, r6, sl, ip, sp}

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
     648:	01055d01 	tsteq	r5, r1, lsl #26
     64c:	0000080a 	andeq	r0, r0, sl, lsl #16
	TotalXBal1 = -TotalXBal1 / BalanceDivFactor;
     650:	48015101 	stmdami	r1, {r0, r8, ip, lr}
     654:	4a080034 	bmi	20072c <__Stack_Size+0x20032c>
	TotalZBal1 = TotalZBal1 / BalanceDivFactor;
     658:	01080034 	tsteq	r8, r4, lsr r0
	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
		TotalXBal1 += 3600;

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
	TotalXBal1 = -TotalXBal1 / BalanceDivFactor;
     65c:	4c01055d 	cfstr32mi	mvfx0, [r1], {93}
     660:	01000007 	tsteq	r0, r7
	TotalZBal1 = TotalZBal1 / BalanceDivFactor;
     664:	344c0160 	strbcc	r0, [ip], #-352
     668:	344e0800 	strbcc	r0, [lr], #-2048

}
     66c:	5d010800 	stcpl	8, cr0, [r1]
     670:	0a0d0105 	beq	340a8c <__Stack_Size+0x34068c>
     674:	6f010000 	svcvs	0x00010000
     678:	00345001 	eorseq	r5, r4, r1
     67c:	00345208 	eorseq	r5, r4, r8, lsl #4
     680:	055d0108 	ldrbeq	r0, [sp, #-264]
     684:	00094301 	andeq	r4, r9, r1, lsl #6
     688:	017a0100 	cmneq	sl, r0, lsl #2
//sin4        - Output Sinus of AngleDeg
//cos4          - Output Cosinus of AngleDeg
void GetSinCos(short AngleDeg1) {
	short ABSAngleDeg1;   //Absolute value of the Angle in Degrees, decimals = 1
	//Get the absolute value of AngleDeg
	if (AngleDeg1 < 0)
     68c:	08003454 	stmdaeq	r0, {r2, r4, r6, sl, ip, sp}
     690:	08003456 	stmdaeq	r0, {r1, r2, r4, r6, sl, ip, sp}
		ABSAngleDeg1 = AngleDeg1 * -1;
     694:	01055d01 	tsteq	r5, r1, lsl #26
     698:	00000b2a 	andeq	r0, r0, sl, lsr #22
	else
		ABSAngleDeg1 = AngleDeg1;

	//Shift rotation to a full circle of 360 deg -> AngleDeg // 360
	if (AngleDeg1 < 0)    //Negative values
		AngleDeg1 = 3600 - (ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600)));
     69c:	58018501 	stmdapl	r1, {r0, r8, sl, pc}
     6a0:	5a080034 	bpl	200778 <__Stack_Size+0x200378>
     6a4:	01080034 	tsteq	r8, r4, lsr r0
     6a8:	4401055d 	strmi	r0, [r1], #-1373
     6ac:	0100000a 	tsteq	r0, sl
     6b0:	345c019c 	ldrbcc	r0, [ip], #-412
     6b4:	345e0800 	ldrbcc	r0, [lr], #-2048
     6b8:	5d010800 	stcpl	8, cr0, [r1]
     6bc:	090a0105 	stmdbeq	sl, {r0, r2, r8}
	else
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));

	if (AngleDeg1 >= 0 && AngleDeg1 <= 900)     // 0 to 90 deg
     6c0:	a7010000 	strge	r0, [r1, -r0]
     6c4:	00346001 	eorseq	r6, r4, r1
			{
		sin4 = pgm_read_word(&GetSin[AngleDeg1 / 5]); // 5 is the presision (0.5) of the table
     6c8:	00346208 	eorseq	r6, r4, r8, lsl #4
     6cc:	055d0108 	ldrbeq	r0, [sp, #-264]
     6d0:	00073a01 	andeq	r3, r7, r1, lsl #20
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
     6d4:	01b20100 	undefined instruction 0x01b20100
     6d8:	08003464 	stmdaeq	r0, {r2, r5, r6, sl, ip, sp}
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));

	if (AngleDeg1 >= 0 && AngleDeg1 <= 900)     // 0 to 90 deg
			{
		sin4 = pgm_read_word(&GetSin[AngleDeg1 / 5]); // 5 is the presision (0.5) of the table
     6dc:	08003466 	stmdaeq	r0, {r1, r2, r5, r6, sl, ip, sp}
     6e0:	01055d01 	tsteq	r5, r1, lsl #26
     6e4:	00000789 	andeq	r0, r0, r9, lsl #15
     6e8:	6801bd01 	stmdavs	r1, {r0, r8, sl, fp, ip, sp, pc}
     6ec:	6a080034 	bvs	2007c4 <__Stack_Size+0x2003c4>
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
     6f0:	01080034 	tsteq	r8, r4, lsr r0
     6f4:	9401055d 	strls	r0, [r1], #-1373
     6f8:	0100000a 	tsteq	r0, sl
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
     6fc:	346c01c8 	strbtcc	r0, [ip], #-456
     700:	346e0800 	strbtcc	r0, [lr], #-2048
     704:	5d010800 	stcpl	8, cr0, [r1]
     708:	09e50105 	stmibeq	r5!, {r0, r2, r8}^
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     70c:	d3010000 	movwle	r0, #4096	; 0x1000
     710:	00347001 	eorseq	r7, r4, r1
     714:	00347208 	eorseq	r7, r4, r8, lsl #4
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     718:	055d0108 	ldrbeq	r0, [sp, #-264]
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     71c:	0009ae01 	andeq	sl, r9, r1, lsl #28
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     720:	01de0100 	bicseq	r0, lr, r0, lsl #2
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     724:	08003474 	stmdaeq	r0, {r2, r4, r5, r6, sl, ip, sp}
     728:	08003476 	stmdaeq	r0, {r1, r2, r4, r5, r6, sl, ip, sp}
     72c:	01055d01 	tsteq	r5, r1, lsl #26
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     730:	000008e0 	andeq	r0, r0, r0, ror #17
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     734:	7801e901 	stmdavc	r1, {r0, r8, fp, sp, lr, pc}
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     738:	7a080034 	bvc	200810 <__Stack_Size+0x200410>
     73c:	01080034 	tsteq	r8, r4, lsr r0
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
     740:	a601055d 	undefined
     744:	0100000b 	tsteq	r0, fp
     748:	347c01f4 	ldrbtcc	r0, [ip], #-500
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     74c:	347e0800 	ldrbtcc	r0, [lr], #-2048
     750:	5d010800 	stcpl	8, cr0, [r1]
     754:	094e0105 	stmdbeq	lr, {r0, r2, r8}^
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     758:	ff010000 	undefined instruction 0xff010000
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     75c:	00348001 	eorseq	r8, r4, r1
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     760:	00348208 	eorseq	r8, r4, r8, lsl #4
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     764:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     768:	00099d01 	andeq	r9, r9, r1, lsl #26
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     76c:	010a0100 	tsteq	sl, r0, lsl #2
     770:	00348401 	eorseq	r8, r4, r1, lsl #8
     774:	00348608 	eorseq	r8, r4, r8, lsl #12
     778:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     77c:	000b8d01 	andeq	r8, fp, r1, lsl #26
     780:	01150100 	tsteq	r5, r0, lsl #2
     784:	00348801 	eorseq	r8, r4, r1, lsl #16
     788:	00348a08 	eorseq	r8, r4, r8, lsl #20
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
     78c:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     790:	000bb701 	andeq	fp, fp, r1, lsl #14
     794:	01200100 	teqeq	r0, r0, lsl #2
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     798:	00348c01 	eorseq	r8, r4, r1, lsl #24
     79c:	00348e08 	eorseq	r8, r4, r8, lsl #28
     7a0:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7a4:	000be301 	andeq	lr, fp, r1, lsl #6
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7a8:	012b0100 	teqeq	fp, r0, lsl #2
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7ac:	00349001 	eorseq	r9, r4, r1
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7b0:	00349208 	eorseq	r9, r4, r8, lsl #4
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7b4:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7b8:	0006f501 	andeq	pc, r6, r1, lsl #10
     7bc:	01360100 	teqeq	r6, r0, lsl #2
     7c0:	00349401 	eorseq	r9, r4, r1, lsl #8
     7c4:	00349608 	eorseq	r9, r4, r8, lsl #12
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7c8:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     7cc:	00076001 	andeq	r6, r7, r1
     7d0:	01410100 	cmpeq	r1, r0, lsl #2
	//Shift rotation to a full circle of 360 deg -> AngleDeg // 360
	if (AngleDeg1 < 0)    //Negative values
		AngleDeg1 = 3600 - (ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600)));
	else
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));
     7d4:	00349801 	eorseq	r9, r4, r1, lsl #16
     7d8:	00349a08 	eorseq	r9, r4, r8, lsl #20
     7dc:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     7e0:	0009f401 	andeq	pc, r9, r1, lsl #8
     7e4:	014c0100 	cmpeq	ip, r0, lsl #2
     7e8:	00349c01 	eorseq	r9, r4, r1, lsl #24
     7ec:	00349e08 	eorseq	r9, r4, r8, lsl #28
     7f0:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     7f4:	000a5401 	andeq	r5, sl, r1, lsl #8
     7f8:	01570100 	cmpeq	r7, r0, lsl #2
	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
	}
}
     7fc:	0034a001 	eorseq	sl, r4, r1
     800:	0034a208 	eorseq	sl, r4, r8, lsl #4
     804:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     808:	00087801 	andeq	r7, r8, r1, lsl #16
     80c:	01630100 	cmneq	r3, r0, lsl #2
//cos4        - Input Cosinus
//AngleRad4     - Output Angle in AngleRad4
long GetArcCos(short cos4) {
	boolean NegativeValue/*:1*/;    //If the the value is Negative
	//Check for negative value
	if (cos4 < 0) {
     810:	0034a401 	eorseq	sl, r4, r1, lsl #8
     814:	0034a608 	eorseq	sl, r4, r8, lsl #12
     818:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
		cos4 = -cos4;
     81c:	00082c01 	andeq	r2, r8, r1, lsl #24
     820:	016f0100 	cmneq	pc, r0, lsl #2
		NegativeValue = 1;
	} else
		NegativeValue = 0;

	//Limit cos4 to his maximal value
	cos4 = min(cos4, c4DEC);
     824:	0034a801 	eorseq	sl, r4, r1, lsl #16
     828:	0034aa08 	eorseq	sl, r4, r8, lsl #20
     82c:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2

	if ((cos4 >= 0) && (cos4 < 9000)) {
     830:	00092901 	andeq	r2, r9, r1, lsl #18
     834:	017b0100 	cmneq	fp, r0, lsl #2
     838:	0034ac01 	eorseq	sl, r4, r1, lsl #24
		AngleRad4 = (byte) pgm_read_byte(&GetACos[cos4 / 79]);
     83c:	0034ae08 	eorseq	sl, r4, r8, lsl #28
     840:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     844:	00098a01 	andeq	r8, r9, r1, lsl #20
		AngleRad4 = ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255) ;
     848:	01860100 	orreq	r0, r6, r0, lsl #2
     84c:	0034b001 	eorseq	fp, r4, r1
	} else if ((cos4 >= 9000) && (cos4 < 9900)) {
     850:	0034b208 	eorseq	fp, r4, r8, lsl #4
     854:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     858:	000bd001 	andeq	sp, fp, r1
     85c:	01910100 	orrseq	r0, r1, r0, lsl #2
		AngleRad4 = (byte) pgm_read_byte(&GetACos[(cos4 - 9000) / 8 + 114]);
     860:	0034b401 	eorseq	fp, r4, r1, lsl #8
     864:	0034b608 	eorseq	fp, r4, r8, lsl #12
     868:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     86c:	00095f01 	andeq	r5, r9, r1, lsl #30
     870:	019c0100 	orrseq	r0, ip, r0, lsl #2
     874:	0034b801 	eorseq	fp, r4, r1, lsl #16
		AngleRad4 = (long) ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255)
     878:	0034ba08 	eorseq	fp, r4, r8, lsl #20
	} else if ((cos4 >= 9900) && (cos4 <= 10000)) {
     87c:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     880:	00070e01 	andeq	r0, r7, r1, lsl #28
     884:	01a70100 	undefined instruction 0x01a70100
		AngleRad4 = (byte) pgm_read_byte(&GetACos[(cos4 - 9900) / 2 + 227]);
     888:	0034bc01 	eorseq	fp, r4, r1, lsl #24
     88c:	0034be08 	eorseq	fp, r4, r8, lsl #28
     890:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
		AngleRad4 = (long) ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255)
     894:	0009bf01 	andeq	fp, r9, r1, lsl #30
     898:	01b30100 	undefined instruction 0x01b30100
     89c:	0034c001 	eorseq	ip, r4, r1
     8a0:	0034c208 	eorseq	ip, r4, r8, lsl #4
     8a4:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     8a8:	00072201 	andeq	r2, r7, r1, lsl #4
     8ac:	01bf0100 	undefined instruction 0x01bf0100
	}

	//Add negative sign
	if (NegativeValue)
		AngleRad4 = 31416 - AngleRad4;
     8b0:	0034c401 	eorseq	ip, r4, r1, lsl #8
     8b4:	0034c608 	eorseq	ip, r4, r8, lsl #12
     8b8:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     8bc:	00085501 	andeq	r5, r8, r1, lsl #10
     8c0:	01ca0100 	biceq	r0, sl, r0, lsl #2

	return AngleRad4;
}
     8c4:	0034c801 	eorseq	ip, r4, r1, lsl #16
     8c8:	0034ca08 	eorseq	ip, r4, r8, lsl #20
     8cc:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     8d0:	00077901 	andeq	r7, r7, r1, lsl #18
     8d4:	01d50100 	bicseq	r0, r5, r0, lsl #2
     8d8:	0034cc01 	eorseq	ip, r4, r1, lsl #24

unsigned long isqrt32(unsigned long n) //
{
     8dc:	0034ce08 	eorseq	ip, r4, r8, lsl #28
     8e0:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2

	root = 0;
	remainder = n;
	place = 0x40000000; // OR place = 0x4000; OR place = 0x40; - respectively

	while (place > remainder)
     8e4:	00079801 	andeq	r9, r7, r1, lsl #16
     8e8:	01e10100 	mvneq	r0, r0, lsl #2
     8ec:	0034d001 	eorseq	sp, r4, r1
		place = place >> 2;
	while (place) {
		if (remainder >= root + place) {
     8f0:	0034d208 	eorseq	sp, r4, r8, lsl #4
			remainder = remainder - root - place;
     8f4:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     8f8:	0007b801 	andeq	fp, r7, r1, lsl #16
			root = root + (place << 1);
     8fc:	01ec0100 	mvneq	r0, r0, lsl #2

	while (place > remainder)
		place = place >> 2;
	while (place) {
		if (remainder >= root + place) {
			remainder = remainder - root - place;
     900:	0034d401 	eorseq	sp, r4, r1, lsl #8
			root = root + (place << 1);
		}
		root = root >> 1;
		place = place >> 2;
     904:	0034d608 	eorseq	sp, r4, r8, lsl #12
	remainder = n;
	place = 0x40000000; // OR place = 0x4000; OR place = 0x40; - respectively

	while (place > remainder)
		place = place >> 2;
	while (place) {
     908:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
	XYhyp2 = isqrt32(
     90c:	000a6d01 	andeq	r6, sl, r1, lsl #26
//(GETATAN2) Simplyfied ArcTan2 function based on fixed point ArcCos
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
     910:	01f70100 	mvnseq	r0, r0, lsl #2
	XYhyp2 = isqrt32(
     914:	0034d801 	eorseq	sp, r4, r1, lsl #16
     918:	0034da08 	eorseq	sp, r4, r8, lsl #20
//(GETATAN2) Simplyfied ArcTan2 function based on fixed point ArcCos
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
     91c:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
	XYhyp2 = isqrt32(
     920:	0006e201 	andeq	lr, r6, r1, lsl #4
     924:	02020100 	andeq	r0, r2, #0	; 0x0
     928:	0034dc01 	eorseq	sp, r4, r1, lsl #24
			((long) AtanX * AtanX * c4DEC) + ((long) AtanY * AtanY * c4DEC));
	GetArcCos(((long) AtanX * (long) c6DEC) / (long) XYhyp2);
     92c:	0034de08 	eorseq	sp, r4, r8, lsl #28
     930:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     934:	0008b401 	andeq	fp, r8, r1, lsl #8
     938:	020d0100 	andeq	r0, sp, #0	; 0x0
     93c:	0034e001 	eorseq	lr, r4, r1
     940:	0034e208 	eorseq	lr, r4, r8, lsl #4
     944:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2

	if (AtanY < 0) // removed overhead... Atan4 = AngleRad4 * (AtanY/abs(AtanY));
     948:	000aea01 	andeq	lr, sl, r1, lsl #20
		Atan4 = -AngleRad4;
     94c:	02180100 	andseq	r0, r8, #0	; 0x0
	else
		Atan4 = AngleRad4;
     950:	0034e401 	eorseq	lr, r4, r1, lsl #8
	XYhyp2 = isqrt32(
			((long) AtanX * AtanX * c4DEC) + ((long) AtanY * AtanY * c4DEC));
	GetArcCos(((long) AtanX * (long) c6DEC) / (long) XYhyp2);

	if (AtanY < 0) // removed overhead... Atan4 = AngleRad4 * (AtanY/abs(AtanY));
		Atan4 = -AngleRad4;
     954:	0034e608 	eorseq	lr, r4, r8, lsl #12
	else
		Atan4 = AngleRad4;
     958:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     95c:	0007fa01 	andeq	pc, r7, r1, lsl #20
	return Atan4;
}
     960:	02230100 	eoreq	r0, r3, #0	; 0x0
     964:	0034e801 	eorseq	lr, r4, r1, lsl #16
     968:	0034ea08 	eorseq	lr, r4, r8, lsl #20
     96c:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2

}

//--------------------------------------------------------------------
//[BalCalcOneLeg]
void BalCalcOneLeg(long PosX, long PosZ, long PosY, byte BalLegNr) {
     970:	00081c01 	andeq	r1, r8, r1, lsl #24
	long CPR_Y;            //Final Y value for centerpoint of rotation
	long CPR_Z;            //Final Z value for centerpoint of rotation

	long lAtan;
	//Calculating totals from center of the body to the feet
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BalLegNr]) + PosZ;
     974:	022e0100 	eoreq	r0, lr, #0	; 0x0
     978:	0034ec01 	eorseq	lr, r4, r1, lsl #24
	CPR_X = (short) pgm_read_word(&cOffsetX[BalLegNr]) + PosX;
     97c:	0034ee08 	eorseq	lr, r4, r8, lsl #28
     980:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
	CPR_Y = 150 + PosY; // using the value 150 to lower the centerpoint of rotation 'g_InControlState.BodyPos.y +

	TotalTransY += (long) PosY;
     984:	000b4501 	andeq	r4, fp, r1, lsl #10
     988:	02470100 	subeq	r0, r7, #0	; 0x0
     98c:	0034f001 	eorseq	pc, r4, r1
	TotalTransZ += (long) CPR_Z;
     990:	0034f208 	eorseq	pc, r4, r8, lsl #4
     994:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     998:	000b7801 	andeq	r7, fp, r1, lsl #16
	TotalTransX += (long) CPR_X;
     99c:	02600100 	rsbeq	r0, r0, #0	; 0x0
     9a0:	0034f401 	eorseq	pc, r4, r1, lsl #8
     9a4:	0034f608 	eorseq	pc, r4, r8, lsl #12
     9a8:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2

	lAtan = GetATan2(CPR_X, CPR_Z);
     9ac:	000ac601 	andeq	ip, sl, r1, lsl #12
	TotalYBal1 += (lAtan * 1800) / 31415;
     9b0:	026b0100 	rsbeq	r0, fp, #0	; 0x0
     9b4:	0034f801 	eorseq	pc, r4, r1, lsl #16
     9b8:	0034fa08 	eorseq	pc, r4, r8, lsl #20
     9bc:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     9c0:	0007c801 	andeq	ip, r7, r1, lsl #16
     9c4:	02760100 	rsbseq	r0, r6, #0	; 0x0
     9c8:	0034fc01 	eorseq	pc, r4, r1, lsl #24
     9cc:	0034fe08 	eorseq	pc, r4, r8, lsl #28

	lAtan = GetATan2(CPR_X, CPR_Y);
     9d0:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     9d4:	000a8001 	andeq	r8, sl, r1
	TotalZBal1 += ((lAtan * 1800) / 31415) - 900; //Rotate balance circle 90 deg
     9d8:	02810100 	addeq	r0, r1, #0	; 0x0
     9dc:	00350001 	eorseq	r0, r5, r1
     9e0:	00350208 	eorseq	r0, r5, r8, lsl #4
     9e4:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     9e8:	000b3201 	andeq	r3, fp, r1, lsl #4
     9ec:	028d0100 	addeq	r0, sp, #0	; 0x0
     9f0:	00350401 	eorseq	r0, r5, r1, lsl #8
     9f4:	00350608 	eorseq	r0, r5, r8, lsl #12
     9f8:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     9fc:	00097201 	andeq	r7, r9, r1, lsl #4

	lAtan = GetATan2(CPR_Z, CPR_Y);
     a00:	02990100 	addseq	r0, r9, #0	; 0x0
     a04:	00350801 	eorseq	r0, r5, r1, lsl #16
	TotalXBal1 += ((lAtan * 1800) / 31415) - 900; //Rotate balance circle 90 deg
     a08:	00350a08 	eorseq	r0, r5, r8, lsl #20
     a0c:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     a10:	000a1a01 	andeq	r1, sl, r1, lsl #20
     a14:	02a40100 	adceq	r0, r4, #0	; 0x0
     a18:	00350c01 	eorseq	r0, r5, r1, lsl #24
     a1c:	00350e08 	eorseq	r0, r5, r8, lsl #28
     a20:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     a24:	00086801 	andeq	r6, r8, r1, lsl #16

}
     a28:	02af0100 	adceq	r0, pc, #0	; 0x0
     a2c:	00351001 	eorseq	r1, r5, r1
     a30:	00351208 	eorseq	r1, r5, r8, lsl #4
     a34:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     a38:	0007a801 	andeq	sl, r7, r1, lsl #16
     a3c:	02ba0100 	adcseq	r0, sl, #0	; 0x0
     a40:	00351401 	eorseq	r1, r5, r1, lsl #8
     a44:	00351608 	eorseq	r1, r5, r8, lsl #12
     a48:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     a4c:	00091901 	andeq	r1, r9, r1, lsl #18
//SinG                  - Sin buffer for BodyRotZ
//CosG               - Cos buffer for BodyRotZ
//BodyFKPosX         - Output Position X of feet with Rotation
//BodyFKPosY         - Output Position Y of feet with Rotation
//BodyFKPosZ         - Output Position Z of feet with Rotation
void BodyFK(short PosX, short PosZ, short PosY, short RotationY, byte BodyIKLeg) {
     a50:	02c50100 	sbceq	r0, r5, #0	; 0x0
     a54:	00351801 	eorseq	r1, r5, r1, lsl #16
	short CPR_X;            //Final X value for centerpoint of rotation
	short CPR_Y;            //Final Y value for centerpoint of rotation
	short CPR_Z;            //Final Z value for centerpoint of rotation

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
     a58:	00351a08 	eorseq	r1, r5, r8, lsl #20
     a5c:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     a60:	0007dd01 	andeq	sp, r7, r1, lsl #26
//SinG                  - Sin buffer for BodyRotZ
//CosG               - Cos buffer for BodyRotZ
//BodyFKPosX         - Output Position X of feet with Rotation
//BodyFKPosY         - Output Position Y of feet with Rotation
//BodyFKPosZ         - Output Position Z of feet with Rotation
void BodyFK(short PosX, short PosZ, short PosY, short RotationY, byte BodyIKLeg) {
     a64:	02d00100 	sbcseq	r0, r0, #0	; 0x0
	short CPR_X;            //Final X value for centerpoint of rotation
	short CPR_Y;            //Final Y value for centerpoint of rotation
	short CPR_Z;            //Final Z value for centerpoint of rotation

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
     a68:	00351c01 	eorseq	r1, r5, r1, lsl #24
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
     a6c:	00351e08 	eorseq	r1, r5, r8, lsl #28
     a70:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     a74:	00084501 	andeq	r4, r8, r1, lsl #10

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     a78:	02db0100 	sbcseq	r0, fp, #0	; 0x0

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BodyIKLeg]) + PosZ
     a7c:	00352001 	eorseq	r2, r5, r1
     a80:	00352208 	eorseq	r2, r5, r8, lsl #4
	//Successive global rotation matrix:
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
     a84:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     a88:	000aa501 	andeq	sl, sl, r1, lsl #10

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BodyIKLeg]) + PosZ
     a8c:	02e60100 	rsceq	r0, r6, #0	; 0x0
	//Successive global rotation matrix:
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
     a90:	00352401 	eorseq	r2, r5, r1, lsl #8
     a94:	00352608 	eorseq	r2, r5, r8, lsl #12
	SinG4 = sin4;
     a98:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
	CosG4 = cos4;
     a9c:	000ab601 	andeq	fp, sl, r1, lsl #12
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
	SinG4 = sin4;
     aa0:	02ff0100 	rscseq	r0, pc, #0	; 0x0
	CosG4 = cos4;
     aa4:	00352801 	eorseq	r2, r5, r1, lsl #16
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
	SinG4 = sin4;
     aa8:	00352a08 	eorseq	r2, r5, r8, lsl #20
	CosG4 = cos4;

	GetSinCos(g_InControlState.BodyRot1.z + TotalZBal1);
     aac:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
	SinB4 = sin4;
     ab0:	000ada01 	andeq	sp, sl, r1, lsl #20
     ab4:	030a0100 	movweq	r0, #41216	; 0xa100
	CosB4 = cos4;
     ab8:	00352c01 	eorseq	r2, r5, r1, lsl #24

	GetSinCos(g_InControlState.BodyRot1.y + (RotationY * c1DEC) + TotalYBal1);
     abc:	00352e08 	eorseq	r2, r5, r8, lsl #28
     ac0:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     ac4:	00089b01 	andeq	r9, r8, r1, lsl #22
     ac8:	03150100 	tsteq	r5, #0	; 0x0
     acc:	00353001 	eorseq	r3, r5, r1

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     ad0:	00353208 	eorseq	r3, r5, r8, lsl #4
     ad4:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     ad8:	0008c701 	andeq	ip, r8, r1, lsl #14
     adc:	03200100 	teqeq	r0, #0	; 0x0
     ae0:	00353401 	eorseq	r3, r5, r1, lsl #8
     ae4:	00353608 	eorseq	r3, r5, r8, lsl #12
     ae8:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     aec:	0008f101 	andeq	pc, r8, r1, lsl #2
     af0:	032b0100 	teqeq	fp, #0	; 0x0
     af4:	00353801 	eorseq	r3, r5, r1, lsl #16
     af8:	00353a08 	eorseq	r3, r5, r8, lsl #20
     afc:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     b00:	000b0f01 	andeq	r0, fp, r1, lsl #30
     b04:	03370100 	teqeq	r7, #0	; 0x0
     b08:	00353c01 	eorseq	r3, r5, r1, lsl #24
     b0c:	00353e08 	eorseq	r3, r5, r8, lsl #28
     b10:	075d0108 	ldrbeq	r0, [sp, -r8, lsl #2]
     b14:	00088a01 	andeq	r8, r8, r1, lsl #20
     b18:	02f10100 	rscseq	r0, r1, #0	; 0x0
     b1c:	00354001 	eorseq	r4, r5, r1
     b20:	00354c08 	eorseq	r4, r5, r8, lsl #24
     b24:	00008808 	andeq	r8, r0, r8, lsl #16
     b28:	57010700 	strpl	r0, [r1, -r0, lsl #14]
     b2c:	0100000b 	tsteq	r0, fp
     b30:	4c010252 	sfmmi	f0, 4, [r1], {82}
     b34:	58080035 	stmdapl	r8, {r0, r2, r4, r5}
     b38:	b3080035 	movwlt	r0, #32821	; 0x8035
     b3c:	07000000 	streq	r0, [r0, -r0]
     b40:	000afd01 	andeq	pc, sl, r1, lsl #26
     b44:	02390100 	eorseq	r0, r9, #0	; 0x0
     b48:	00355801 	eorseq	r5, r5, r1, lsl #16
     b4c:	00356408 	eorseq	r6, r5, r8, lsl #8
     b50:	0000de08 	andeq	sp, r0, r8, lsl #28
     b54:	69010800 	stmdbvs	r1, {fp}
     b58:	0100000b 	tsteq	r0, fp
     b5c:	35640190 	strbcc	r0, [r4, #-400]!
     b60:	35700800 	ldrbcc	r0, [r0, #-2048]!
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     b64:	01090800 	tsteq	r9, r0, lsl #16
     b68:	34090000 	strcc	r0, [r9]

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     b6c:	03000005 	movweq	r0, #5	; 0x5
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     b70:	0005cb2a 	andeq	ip, r5, sl, lsr #22
     b74:	00530a00 	subseq	r0, r3, r0, lsl #20
     b78:	65090000 	strvs	r0, [r9]
     b7c:	03000002 	movweq	r0, #2	; 0x2
     b80:	0005db28 	andeq	sp, r5, r8, lsr #22
     b84:	00410a00 	subeq	r0, r1, r0, lsl #20
     b88:	f6090000 	undefined instruction 0xf6090000
     b8c:	03000003 	movweq	r0, #3	; 0x3
     b90:	0005db28 	andeq	sp, r5, r8, lsr #22
     b94:	00530b00 	subseq	r0, r3, r0, lsl #22
     b98:	05fc0000 	ldrbeq	r0, [ip]!
     b9c:	640c0000 	strvs	r0, [ip]
     ba0:	ff000000 	undefined instruction 0xff000000
     ba4:	7a090003 	bvc	240bb8 <__Stack_Size+0x2407b8>
     ba8:	03000004 	movweq	r0, #4	; 0x4
     bac:	00060729 	andeq	r0, r6, r9, lsr #14
     bb0:	05eb0a00 	strbeq	r0, [fp, #2560]!
     bb4:	150d0000 	strne	r0, [sp]
     bb8:	03000006 	movweq	r0, #6	; 0x6
     bbc:	0005cb44 	andeq	ip, r5, r4, asr #22
     bc0:	930d0000 	movwls	r0, #53248	; 0xd000
     bc4:	03000003 	movweq	r0, #3	; 0x3
     bc8:	0005cb44 	andeq	ip, r5, r4, asr #22
     bcc:	530b0000 	movwpl	r0, #45056	; 0xb000
     bd0:	34000000 	strcc	r0, [r0]
     bd4:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
     bd8:	00000064 	andeq	r0, r0, r4, rrx
     bdc:	ec090040 	stc	0, cr0, [r9], {64}
     be0:	03000000 	movweq	r0, #0	; 0x0
     be4:	00063f45 	andeq	r3, r6, r5, asr #30
     be8:	06240a00 	strteq	r0, [r4], -r0, lsl #20
     bec:	e40d0000 	str	r0, [sp]
     bf0:	03000005 	movweq	r0, #5	; 0x5
     bf4:	0005db58 	andeq	sp, r5, r8, asr fp
     bf8:	f90d0000 	undefined instruction 0xf90d0000
     bfc:	03000000 	movweq	r0, #0	; 0x0
     c00:	0005db58 	andeq	sp, r5, r8, asr fp
     c04:	b2090000 	andlt	r0, r9, #0	; 0x0
     c08:	03000002 	movweq	r0, #2	; 0x2
     c0c:	00066759 	andeq	r6, r6, r9, asr r7
     c10:	05eb0a00 	strbeq	r0, [fp, #2560]!
     c14:	b3000000 	movwlt	r0, #0	; 0x0
     c18:	0200001a 	andeq	r0, r0, #26	; 0x1a
     c1c:	00020d00 	andeq	r0, r2, r0, lsl #26
     c20:	c6010400 	strgt	r0, [r1], -r0, lsl #8
     c24:	01000001 	tsteq	r0, r1
     c28:	00001493 	muleq	r0, r3, r4
     c2c:	0000039d 	muleq	r0, sp, r3
	...
     c38:	000003b6 	strheq	r0, [r0], -r6
     c3c:	50050402 	andpl	r0, r5, r2, lsl #8
     c40:	02000021 	andeq	r0, r0, #33	; 0x21
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * CosG4 / c4DEC
					- (long) CPR_Z * c2DEC * SinA4 / c4DEC * SinB4 / c4DEC
							* SinG4 / c4DEC
					- (long) CPR_Y * c2DEC * CosB4 / c4DEC * SinG4 / c4DEC))
			/ c2DEC;
	BodyFKPosY = ((long) CPR_Y * c2DEC
     c44:	04950502 	ldreq	r0, [r5], #1282
     c48:	01020000 	tsteq	r2, r0
     c4c:	00046906 	andeq	r6, r4, r6, lsl #18
     c50:	002c0300 	eoreq	r0, ip, r0, lsl #6
     c54:	75040000 	strvc	r0, [r4]
     c58:	04003233 	streq	r3, [r0], #-563
     c5c:	00004a27 	andeq	r4, r0, r7, lsr #20
     c60:	07040200 	streq	r0, [r4, -r0, lsl #4]
     c64:	000021f1 	strdeq	r2, [r0], -r1
     c68:	36317504 	ldrtcc	r7, [r1], -r4, lsl #10
     c6c:	5c280400 	cfstrspl	mvf0, [r8]
     c70:	02000000 	andeq	r0, r0, #0	; 0x0
     c74:	02220702 	eoreq	r0, r2, #524288	; 0x80000
     c78:	75040000 	strvc	r0, [r4]
     c7c:	29040038 	stmdbcs	r4, {r3, r4, r5}
     c80:	0000006d 	andeq	r0, r0, sp, rrx
     c84:	67080102 	strvs	r0, [r8, -r2, lsl #2]
     c88:	05000004 	streq	r0, [r0, #-4]
     c8c:	00001f41 	andeq	r1, r0, r1, asr #30
     c90:	006d2a04 	rsbeq	r2, sp, r4, lsl #20
     c94:	01060000 	tsteq	r6, r0
     c98:	00943804 	addseq	r3, r4, r4, lsl #16
     c9c:	07070000 	streq	r0, [r7, -r0]
     ca0:	00000014 	andeq	r0, r0, r4, lsl r0
     ca4:	00171007 	andseq	r1, r7, r7
     ca8:	05000100 	streq	r0, [r0, #-256]
     cac:	00000f61 	andeq	r0, r0, r1, ror #30
     cb0:	007f3804 	rsbseq	r3, pc, r4, lsl #16
     cb4:	04080000 	streq	r0, [r8]
     cb8:	1d1b0507 	cfldr32ne	mvfx0, [fp, #-28]
     cbc:	63050000 	movwvs	r0, #20480	; 0x5000
     cc0:	000000ad 	andeq	r0, r0, sp, lsr #1
     cc4:	f6070402 	undefined instruction 0xf6070402
     cc8:	05000021 	streq	r0, [r0, #-33]
     ccc:	00000efc 	strdeq	r0, [r0], -ip
     cd0:	00636405 	rsbeq	r6, r3, r5, lsl #8
     cd4:	01060000 	tsteq	r6, r0
     cd8:	00f22a06 	rscseq	r2, r2, r6, lsl #20
     cdc:	63090000 	movwvs	r0, #36864	; 0x9000
     ce0:	00005252 	andeq	r5, r0, r2, asr r2
     ce4:	4d526309 	ldclmi	3, cr6, [r2, #-36]
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * SinG4 / c4DEC
					+ (long) CPR_Z * c2DEC * CosG4 / c4DEC * SinA4 / c4DEC
							* SinB4 / c4DEC
					+ (long) CPR_Y * c2DEC * CosB4 / c4DEC * CosG4 / c4DEC))
			/ c2DEC;
}
     ce8:	63090100 	movwvs	r0, #37120	; 0x9100
     cec:	02004652 	andeq	r4, r0, #85983232	; 0x5200000
     cf0:	524c6309 	subpl	r6, ip, #603979776	; 0x24000000
     cf4:	63090300 	movwvs	r0, #37632	; 0x9300
     cf8:	04004d4c 	streq	r4, [r0], #-3404
     cfc:	464c6309 	strbmi	r6, [ip], -r9, lsl #6
     d00:	e2070500 	and	r0, r7, #0	; 0x0
     d04:	06000011 	undefined
     d08:	0f110a00 	svceq	0x00110a00
     d0c:	060c0000 	streq	r0, [ip], -r0
     d10:	0001236a 	andeq	r2, r1, sl, ror #6
     d14:	00780b00 	rsbseq	r0, r8, r0, lsl #22
     d18:	00256b06 	eoreq	r6, r5, r6, lsl #22
     d1c:	23020000 	movwcs	r0, #8192	; 0x2000
//FemurAngle1           - Output Angle of Femur in degrees
//TibiaAngle1           - Output Angle of Tibia in degrees
//CoxaAngle1            - Output Angle of Coxa in degrees
//--------------------------------------------------------------------
void LegIK(short IKFeetPosX, short IKFeetPosY, short IKFeetPosZ,
		byte LegIKLegNr) {
     d20:	00790b00 	rsbseq	r0, r9, r0, lsl #22
     d24:	00256c06 	eoreq	r6, r5, r6, lsl #24
     d28:	23020000 	movwcs	r0, #8192	; 0x2000
	long Temp1;
	long Temp2;
	long T3;

	//Calculate IKCoxaAngle and IKFeetPosXZ
	GetATan2(IKFeetPosX, IKFeetPosZ);
     d2c:	007a0b04 	rsbseq	r0, sl, r4, lsl #22
	CoxaAngle1[LegIKLegNr] = (((long) Atan4 * 180) / 3141)
     d30:	00256d06 	eoreq	r6, r5, r6, lsl #26
     d34:	23020000 	movwcs	r0, #8192	; 0x2000
     d38:	07050008 	streq	r0, [r5, -r8]
     d3c:	06000015 	undefined
     d40:	0000f26e 	andeq	pc, r0, lr, ror #4
     d44:	10da0a00 	sbcsne	r0, sl, r0, lsl #20
     d48:	060e0000 	streq	r0, [lr], -r0
     d4c:	0001ab74 	andeq	sl, r1, r4, ror fp
     d50:	12ef0c00 	rscne	r0, pc, #0	; 0x0
     d54:	75060000 	strvc	r0, [r6]
	//Length between the Coxa and tars [foot]
	IKFeetPosXZ = XYhyp2 / c2DEC;

	//Using GetAtan2 for solving IKA1 and IKSW
	//IKA14 - Angle between SW line and the ground in radians
	IKA14 = GetATan2(IKFeetPosY - TarsOffsetY,
     d58:	0000002c 	andeq	r0, r0, ip, lsr #32
     d5c:	0c002302 	stceq	3, cr2, [r0], {2}
     d60:	00001311 	andeq	r1, r0, r1, lsl r3
     d64:	00747606 	rsbseq	r7, r4, r6, lsl #12
     d68:	23020000 	movwcs	r0, #8192	; 0x2000
     d6c:	0f910c02 	svceq	0x00910c02
     d70:	77060000 	strvc	r0, [r6, -r0]

	//IKSW2 - Length between femur axis and tars
	IKSW2 = XYhyp2;

	//IKA2 - Angle of the line S>W with respect to the femur in radians
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     d74:	00000074 	andeq	r0, r0, r4, ror r0
     d78:	0c032302 	stceq	3, cr2, [r3], {2}
     d7c:	0000108b 	andeq	r1, r0, fp, lsl #1
     d80:	00747806 	rsbseq	r7, r4, r6, lsl #16
					* (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))) * c4DEC
			+ ((long) IKSW2 * IKSW2));
	Temp2 = (long) (2 * (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])) * c2DEC
			* (unsigned long) IKSW2;
	T3 = Temp1 / (Temp2 / c4DEC);
	IKA24 = GetArcCos(T3);
     d84:	23020000 	movwcs	r0, #8192	; 0x2000
     d88:	152e0c04 	strne	r0, [lr, #-3076]!
     d8c:	79060000 	stmdbvc	r6, {}
     d90:	00000074 	andeq	r0, r0, r4, ror r0
     d94:	0c052302 	stceq	3, cr2, [r5], {2}
     d98:	00000df2 	strdeq	r0, [r0], -r2
     d9c:	00747a06 	rsbseq	r7, r4, r6, lsl #20
     da0:	23020000 	movwcs	r0, #8192	; 0x2000
     da4:	124e0c06 	subne	r0, lr, #1536	; 0x600
     da8:	7b060000 	blvc	180db0 <__Stack_Size+0x1809b0>
     dac:	00000074 	andeq	r0, r0, r4, ror r0
     db0:	0c072302 	stceq	3, cr2, [r7], {2}
     db4:	00001706 	andeq	r1, r0, r6, lsl #14

	FemurAngle1[LegIKLegNr] = -(long) (IKA14 + IKA24) * 180
     db8:	01ab7e06 	undefined instruction 0x01ab7e06
     dbc:	23020000 	movwcs	r0, #8192	; 0x2000
     dc0:	740d0008 	strvc	r0, [sp], #-8
     dc4:	bb000000 	bllt	dcc <__Stack_Size+0x9cc>
     dc8:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     dcc:	0000009f 	muleq	r0, pc, r0
     dd0:	39050005 	stmdbcc	r5, {r0, r2}
     dd4:	0600000d 	streq	r0, [r0], -sp
     dd8:	00012e80 	andeq	r2, r1, r0, lsl #29
			/ 3141+ 900 + CFEMURHORNOFFSET1(LegIKLegNr);  //Normal

	//IKTibiaAngle
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     ddc:	15ae0a00 	strne	r0, [lr, #2560]!
	Temp2 = (long) (2 * (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])) * c2DEC
			* (unsigned long) IKSW2;
	T3 = Temp1 / (Temp2 / c4DEC);
	IKA24 = GetArcCos(T3);

	FemurAngle1[LegIKLegNr] = -(long) (IKA14 + IKA24) * 180
     de0:	06640000 	strbteq	r0, [r4], -r0
			/ 3141+ 900 + CFEMURHORNOFFSET1(LegIKLegNr);  //Normal

	//IKTibiaAngle
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     de4:	0002cf8b 	andeq	ip, r2, fp, lsl #31
     de8:	15250c00 	strne	r0, [r5, #-3072]!
			+ ((long) (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr])
					* (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))) * c4DEC
			- ((long) IKSW2 * IKSW2));
	Temp2 = 2 * ((long) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])))
			* (long) ((byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]));
	GetArcCos(Temp1 / Temp2);
     dec:	8c060000 	stchi	0, cr0, [r6], {0}
     df0:	000000b4 	strheq	r0, [r0], -r4
     df4:	0c002302 	stceq	3, cr2, [r0], {2}
     df8:	00001419 	andeq	r1, r0, r9, lsl r4
     dfc:	00b48d06 	adcseq	r8, r4, r6, lsl #26
     e00:	23020000 	movwcs	r0, #8192	; 0x2000
     e04:	12220c01 	eorne	r0, r2, #256	; 0x100
     e08:	8f060000 	svchi	0x00060000

	TibiaAngle1[LegIKLegNr] = -(1450 - (long) AngleRad4 * 180 / 3141
     e0c:	00000123 	andeq	r0, r0, r3, lsr #2
     e10:	0c042302 	stceq	3, cr2, [r4], {2}
     e14:	00000ee4 	andeq	r0, r0, r4, ror #29
     e18:	01239006 	teqeq	r3, r6
     e1c:	23020000 	movwcs	r0, #8192	; 0x2000
     e20:	128c0c10 	addne	r0, ip, #4096	; 0x1000
     e24:	93060000 	movwls	r0, #24576	; 0x6000
     e28:	00000123 	andeq	r0, r0, r3, lsr #2
			+ CTIBIAHORNOFFSET1(LegIKLegNr)); //!!!!!!!!!!!!145 instead of 1800

	//Set the Solution quality
	if (IKSW2
     e2c:	0c1c2302 	ldceq	3, cr2, [ip], {2}
			- ((long) IKSW2 * IKSW2));
	Temp2 = 2 * ((long) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])))
			* (long) ((byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]));
	GetArcCos(Temp1 / Temp2);

	TibiaAngle1[LegIKLegNr] = -(1450 - (long) AngleRad4 * 180 / 3141
     e30:	00000d67 	andeq	r0, r0, r7, ror #26
			+ CTIBIAHORNOFFSET1(LegIKLegNr)); //!!!!!!!!!!!!145 instead of 1800

	//Set the Solution quality
	if (IKSW2
     e34:	00749606 	rsbseq	r9, r4, r6, lsl #12
     e38:	23020000 	movwcs	r0, #8192	; 0x2000
     e3c:	0f580c28 	svceq	0x00580c28
     e40:	97060000 	strls	r0, [r6, -r0]
     e44:	00000074 	andeq	r0, r0, r4, ror r0
			< ((word) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
					+ (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]) - 30)
					* c2DEC))
		IKSolution = 1;
     e48:	0c292302 	stceq	3, cr2, [r9], #-8
	else {
		if (IKSW2
     e4c:	000010a9 	andeq	r1, r0, r9, lsr #1
     e50:	01bb9806 	undefined instruction 0x01bb9806
				< ((word) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
						+ (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))
						* c2DEC))
			IKSolutionWarning = 1;
     e54:	23020000 	movwcs	r0, #8192	; 0x2000
     e58:	16270c2a 	strtne	r0, [r7], -sl, lsr #24
		else
			IKSolutionError = 1;
     e5c:	9a060000 	bls	180e64 <__Stack_Size+0x180a64>
	}

}
     e60:	0000002c 	andeq	r0, r0, ip, lsr #32
     e64:	0c382302 	ldceq	3, cr2, [r8], #-8
     e68:	00000fb0 	strheq	r0, [r0], -r0
     e6c:	01239b06 	teqeq	r3, r6, lsl #22
     e70:	23020000 	movwcs	r0, #8192	; 0x2000
     e74:	17c80c3c 	undefined
     e78:	9f060000 	svcls	0x00060000
     e7c:	00000074 	andeq	r0, r0, r4, ror r0
     e80:	0c482302 	mcrreq	3, 0, r2, r8, cr2
     e84:	000017c4 	andeq	r1, r0, r4, asr #15
     e88:	0074a006 	rsbseq	sl, r4, r6
     e8c:	23020000 	movwcs	r0, #8192	; 0x2000
     e90:	163d0c49 	ldrtne	r0, [sp], -r9, asr #24
     e94:	a1060000 	tstge	r6, r0
     e98:	00000123 	andeq	r0, r0, r3, lsr #2
     e9c:	0c4c2302 	mcrreq	3, 0, r2, ip, cr2
     ea0:	00001779 	andeq	r1, r0, r9, ror r7
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ea4:	00b4a206 	adcseq	sl, r4, r6, lsl #4
	if (sVal < s) {
     ea8:	23020000 	movwcs	r0, #8192	; 0x2000
     eac:	0e120c58 	mrceq	12, 0, r0, cr2, cr8, {2}
		return s;
	}

	s = (short) pgm_read_word(sMax);
     eb0:	a6060000 	strge	r0, [r6], -r0
     eb4:	000000b4 	strheq	r0, [r0], -r4
     eb8:	0c592302 	mrrceq	3, 0, r2, r9, cr2

		return s;
	}
	return sVal;

}
     ebc:	00000cfa 	strdeq	r0, [r0], -sl
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     ec0:	0074a906 	rsbseq	sl, r4, r6, lsl #18
}

//--------------------------------------------------------------------
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
     ec4:	23020000 	movwcs	r0, #8192	; 0x2000
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     ec8:	13a40c5a 	undefined instruction 0x13a40c5a
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ecc:	aa060000 	bge	180ed4 <__Stack_Size+0x180ad4>
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
     ed0:	000000a2 	andeq	r0, r0, r2, lsr #1
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ed4:	0c5c2302 	mrrceq	3, 0, r2, ip, cr2
	if (sVal < s) {
     ed8:	0000167f 	andeq	r1, r0, pc, ror r6
     edc:	0074ab06 	rsbseq	sl, r4, r6, lsl #22
     ee0:	23020000 	movwcs	r0, #8192	; 0x2000
		return s;
	}

	s = (short) pgm_read_word(sMax);
     ee4:	d0050060 	andle	r0, r5, r0, rrx
     ee8:	06000012 	undefined
     eec:	0001c6b1 	strheq	ip, [r1], -r1
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
     ef0:	01710f00 	cmneq	r1, r0, lsl #30
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ef4:	0a010000 	beq	40efc <__Stack_Size+0x40afc>
	if (sVal < s) {
     ef8:	00031120 	andeq	r1, r3, r0, lsr #2
     efc:	05b40700 	ldreq	r0, [r4, #1792]!
     f00:	07000000 	streq	r0, [r0, -r0]
		return s;
	}

	s = (short) pgm_read_word(sMax);
     f04:	000006a6 	andeq	r0, r0, r6, lsr #13
     f08:	00e40701 	rsceq	r0, r4, r1, lsl #14
     f0c:	07020000 	streq	r0, [r2, -r0]
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     f10:	00000182 	andeq	r0, r0, r2, lsl #3
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
     f14:	02110703 	andseq	r0, r1, #786432	; 0xc0000
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     f18:	07040000 	streq	r0, [r4, -r0]
	if (sVal < s) {
     f1c:	0000031b 	andeq	r0, r0, fp, lsl r3
     f20:	024a0705 	subeq	r0, sl, #1310720	; 0x140000
     f24:	00060000 	andeq	r0, r6, r0
		return s;
	}

	s = (short) pgm_read_word(sMax);
     f28:	54070106 	strpl	r0, [r7], #-262
     f2c:	000003a8 	andeq	r0, r0, r8, lsr #7
     f30:	000f6b07 	andeq	r6, pc, r7, lsl #22
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
				FemurAngle1[LegIndex], &cFemurMin1[LegIndex],
				&cFemurMax1[LegIndex]);
		TibiaAngle1[LegIndex] = CheckServoAngleBounds(s++,
     f34:	a1070100 	tstge	r7, r0, lsl #2
     f38:	02000011 	andeq	r0, r0, #17	; 0x11
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     f3c:	00144007 	andseq	r4, r4, r7
     f40:	c3070300 	movwgt	r0, #29440	; 0x7300
				TibiaAngle1[LegIndex], &cTibiaMin1[LegIndex],
				&cTibiaMax1[LegIndex]);

	}
#endif
}
     f44:	0400000e 	streq	r0, [r0], #-14
     f48:	000e4b07 	andeq	r4, lr, r7, lsl #22
     f4c:	bd070500 	cfstr32lt	mvfx0, [r7]
     f50:	06000010 	undefined
     f54:	000eb007 	andeq	fp, lr, r7
     f58:	f5070700 	undefined instruction 0xf5070700
     f5c:	0c000016 	stceq	0, cr0, [r0], {22}
     f60:	00175107 	andseq	r5, r7, r7, lsl #2
     f64:	ef070d00 	svc	0x00070d00
     f68:	0e000015 	mcreq	0, 0, r0, cr0, cr5, {0}
     f6c:	000d5707 	andeq	r5, sp, r7, lsl #14
// SmoothControl (From Zenta) -  This function makes the body
//            rotation and translation much smoother
//--------------------------------------------------------------------
short SmoothControl(short CtrlMoveInp, short CtrlMoveOut, byte CtrlDivider) {

	if (CtrlMoveOut < (CtrlMoveInp - 4))
     f70:	7d070f00 	stcvc	15, cr0, [r7]
     f74:	10000014 	andne	r0, r0, r4, lsl r0
		return CtrlMoveOut + abs((CtrlMoveOut - CtrlMoveInp) / CtrlDivider);
     f78:	00115807 	andseq	r5, r1, r7, lsl #16
     f7c:	16071100 	strne	r1, [r7], -r0, lsl #2
     f80:	12000015 	andne	r0, r0, #21	; 0x15
     f84:	00171507 	andseq	r1, r7, r7, lsl #10
     f88:	62071300 	andvs	r1, r7, #0	; 0x0
     f8c:	14000012 	strne	r0, [r0], #-18
     f90:	0010e707 	andseq	lr, r0, r7, lsl #14
	else if (CtrlMoveOut > (CtrlMoveInp + 4))
     f94:	4e071500 	cfsh32mi	mvfx1, mvfx7, #0
		return CtrlMoveOut - abs((CtrlMoveOut - CtrlMoveInp) / CtrlDivider);
     f98:	1600000c 	strne	r0, [r0], -ip
     f9c:	000d9607 	andeq	r9, sp, r7, lsl #12
     fa0:	43071700 	movwmi	r1, #30464	; 0x7700
     fa4:	83000016 	movwhi	r0, #22	; 0x16
     fa8:	10f50701 	rscsne	r0, r5, r1, lsl #14
     fac:	01840000 	orreq	r0, r4, r0
     fb0:	0016bb07 	andseq	fp, r6, r7, lsl #22

	return CtrlMoveInp;
}
     fb4:	07019200 	streq	r9, [r1, -r0, lsl #4]
// GetLegsXZLength -
//--------------------------------------------------------------------
word g_wLegsXZLength = 0xffff;
word GetLegsXZLength(void) {
	// Could save away or could do a little math on one leg...
	if (g_wLegsXZLength != 0xffff)
     fb8:	000011b8 	strheq	r1, [r0], -r8
     fbc:	060001d0 	undefined
     fc0:	06cf0702 	strbeq	r0, [pc], r2, lsl #14

//--------------------------------------------------------------------
// GetLegsXZLength -
//--------------------------------------------------------------------
word g_wLegsXZLength = 0xffff;
word GetLegsXZLength(void) {
     fc4:	07000004 	streq	r0, [r0, -r4]
	// Could save away or could do a little math on one leg...
	if (g_wLegsXZLength != 0xffff)
		return g_wLegsXZLength;

	return isqrt32((LegPosX[0] * LegPosX[0]) + (LegPosZ[0] * LegPosZ[0]));
     fc8:	00000680 	andeq	r0, r0, r0, lsl #13
     fcc:	04870701 	streq	r0, [r7], #1793
     fd0:	07020000 	streq	r0, [r2, -r0]
     fd4:	00000310 	andeq	r0, r0, r0, lsl r3
     fd8:	068e0704 	streq	r0, [lr], r4, lsl #14
     fdc:	07080000 	streq	r0, [r8, -r0]
}
     fe0:	000004cb 	andeq	r0, r0, fp, asr #9
     fe4:	01440710 	cmpeq	r4, r0, lsl r7
     fe8:	07200000 	streq	r0, [r0, -r0]!
     fec:	0000058c 	andeq	r0, r0, ip, lsl #11

#ifndef MAX_XZ_LEG_ADJUST
#define MAX_XZ_LEG_ADJUST   (word)(cCoxaLength[0]+cTibiaLength[0] + cFemurLength[0]/4)
#endif

void AdjustLegPositions(word XZLength1) {
     ff0:	030700c0 	movweq	r0, #28864	; 0x70c0
     ff4:	80000002 	andhi	r0, r0, r2
     ff8:	06c10701 	strbeq	r0, [r1], r1, lsl #14
     ffc:	02800000 	addeq	r0, r0, #0	; 0x0
    1000:	00045907 	andeq	r5, r4, r7, lsl #18
		XZLength1 = MAX_XZ_LEG_ADJUST;
	if (XZLength1 < MIN_XZ_LEG_ADJUST)
		XZLength1 = MIN_XZ_LEG_ADJUST;

	// see if same length as when we came in
	if (XZLength1 == g_wLegsXZLength)
    1004:	07048000 	streq	r8, [r4, -r0]
    1008:	00000026 	andeq	r0, r0, r6, lsr #32
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		GetSinCos((short) pgm_read_word(&cCoxaAngle1[LegIndex]));

		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
    100c:	a5070880 	strge	r0, [r7, #-2176]

	// see if same length as when we came in
	if (XZLength1 == g_wLegsXZLength)
		return;

	g_wLegsXZLength = XZLength1;
    1010:	80000002 	andhi	r0, r0, r2

	u8 LegIndex;
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		GetSinCos((short) pgm_read_word(&cCoxaAngle1[LegIndex]));
    1014:	01350710 	teqeq	r5, r0, lsl r7
    1018:	20800000 	addcs	r0, r0, r0

		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
    101c:	07011000 	streq	r1, [r1, -r0]
    1020:	053c016e 	ldreq	r0, [ip, #-366]!
    1024:	92070000 	andls	r0, r7, #0	; 0x0
    1028:	00000002 	andeq	r0, r0, r2
    102c:	00027f07 	andeq	r7, r2, r7, lsl #30
    1030:	bc070100 	stflts	f0, [r7], {0}
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
    1034:	02000005 	andeq	r0, r0, #5	; 0x5
    1038:	00027007 	andeq	r7, r2, r7
    103c:	b8070300 	stmdalt	r7, {r8, r9}
    1040:	04000000 	streq	r0, [r0]
    1044:	0000c607 	andeq	ip, r0, r7, lsl #12
    1048:	97070500 	strls	r0, [r7, -r0, lsl #10]
		return;

	g_wLegsXZLength = XZLength1;

	u8 LegIndex;
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    104c:	06000005 	streq	r0, [r0], -r5
		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
	}

	// Make sure we cycle through one gait to have the legs all move into their new locations...
	g_InControlState.ForceGaitStepCnt = g_InControlState.gaitCur.StepsInGait;
    1050:	00057707 	andeq	r7, r5, r7, lsl #14
    1054:	a0070700 	andge	r0, r7, r0, lsl #14
}
    1058:	08000001 	stmdaeq	r0, {r0}
    105c:	00018a07 	andeq	r8, r1, r7, lsl #20
    1060:	34070900 	strcc	r0, [r7], #-2304
    1064:	0a000006 	beq	1084 <__Stack_Size+0xc84>
    1068:	00049f07 	andeq	r9, r4, r7, lsl #30
    106c:	40070b00 	andmi	r0, r7, r0, lsl #22
    1070:	0c000004 	stceq	0, cr0, [r0], {4}
    1074:	00010307 	andeq	r0, r1, r7, lsl #6
    1078:	ea070d00 	b	1c4480 <__Stack_Size+0x1c4080>
		g_InControlState.aCoxaInitAngle1[LegIndex] = (short)pgm_read_word(&cCoxaAngle1[LegIndex]);
#endif
	}
	g_wLegsXZLength = 0xffff;
#endif
}
    107c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
		else if (g_InControlState.aCoxaInitAngle1[LegIndex] < -700)
		g_InControlState.aCoxaInitAngle1[LegIndex] = -700;
	}
	g_wLegsXZLength = 0xffff;
#endif
}
    1080:	0002d907 	andeq	sp, r2, r7, lsl #18
//     to be appropriate for the current y location of the body...
//--------------------------------------------------------------------

u8 g_iLegInitIndex = 0x00; // remember which index we are currently using...

void AdjustLegPositionsToBodyHeight() {
    1084:	8c070f00 	stchi	15, cr0, [r7], {0}
    1088:	10000000 	andne	r0, r0, r0
#ifdef CNT_HEX_INITS
	// Lets see which of our units we should use...
	// Note: We will also limit our body height here...
	if (g_InControlState.BodyPos.y
    108c:	0004bd07 	andeq	fp, r4, r7, lsl #26
			> (short) pgm_read_byte(&g_abHexMaxBodyY[CNT_HEX_INITS-1]))
		g_InControlState.BodyPos.y = (short) pgm_read_byte(
    1090:	02071100 	andeq	r1, r7, #0	; 0x0
				&g_abHexMaxBodyY[CNT_HEX_INITS-1]);

	u8 i;
	word XZLength1 = pgm_read_byte(&g_abHexIntXZ[CNT_HEX_INITS-1]);
	for (i = 0; i < (CNT_HEX_INITS - 1); i++) { // Don't need to look at last entry as we already init to assume this one...
		if (g_InControlState.BodyPos.y
    1094:	12000006 	andne	r0, r0, #6	; 0x6
    1098:	00003407 	andeq	r3, r0, r7, lsl #8
				<= (short) pgm_read_byte(&g_abHexMaxBodyY[i])) {
			XZLength1 = pgm_read_byte(&g_abHexIntXZ[i]);
			break;
		}
	}
	if (i != g_iLegInitIndex) {
    109c:	11071300 	tstne	r7, r0, lsl #6
				&g_abHexMaxBodyY[CNT_HEX_INITS-1]);

	u8 i;
	word XZLength1 = pgm_read_byte(&g_abHexIntXZ[CNT_HEX_INITS-1]);
	for (i = 0; i < (CNT_HEX_INITS - 1); i++) { // Don't need to look at last entry as we already init to assume this one...
		if (g_InControlState.BodyPos.y
    10a0:	14000005 	strne	r0, [r0], #-5
    10a4:	0004fa07 	andeq	pc, r4, r7, lsl #20
    10a8:	23071500 	movwcs	r1, #29952	; 0x7500
				<= (short) pgm_read_byte(&g_abHexMaxBodyY[i])) {
			XZLength1 = pgm_read_byte(&g_abHexIntXZ[i]);
			break;
		}
	}
	if (i != g_iLegInitIndex) {
    10ac:	16000003 	strne	r0, [r0], -r3
		g_iLegInitIndex = i;  // remember the current index...
		AdjustLegPositions(XZLength1);
    10b0:	0002fb07 	andeq	pc, r2, r7, lsl #22
	}
#endif // CNT_HEX_INITS
}
    10b4:	2e071700 	cdpcs	7, 0, cr1, cr7, cr0, {0}
    10b8:	18000004 	stmdane	r0, {r2}
    10bc:	00006b07 	andeq	r6, r0, r7, lsl #22
}
//--------------------------------------------------------------------
//[CHECK VOLTAGE]
//Reads the input voltage and shuts down the bot when the power drops
byte s_bLVBeepCnt;
boolean CheckVoltage() {
    10c0:	73071900 	movwvc	r1, #30976	; 0x7900
    10c4:	1a000000 	bne	10cc <__Stack_Size+0xccc>
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10c8:	0002bf07 	andeq	fp, r2, r7, lsl #30

	// BUGBUG:: if voltage is 0 it failed to retrieve don't hang program...
	//    if (!Voltage)
	//      return;

	if (!g_fLowVoltageShutdown) {
    10cc:	60071b00 	andvs	r1, r7, r0, lsl #22
boolean CheckVoltage() {
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10d0:	1c000006 	stcne	0, cr0, [r0], {6}

	// BUGBUG:: if voltage is 0 it failed to retrieve don't hang program...
	//    if (!Voltage)
	//      return;

	if (!g_fLowVoltageShutdown) {
    10d4:	0001d207 	andeq	sp, r1, r7, lsl #4
boolean CheckVoltage() {
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10d8:	45071d00 	strmi	r1, [r7, #-3328]

	if (!g_fLowVoltageShutdown) {
		/**PrintString("Voltage : ");
		Printu32d(Voltage);
		PrintString("\n");*/
		if ((Voltage < cTurnOffVol) || (Voltage >= 1999)) {
    10dc:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    10e0:	00062007 	andeq	r2, r6, r7
    10e4:	ef071f00 	svc	0x00071f00


			//Turn off
			g_InControlState.BodyPos.x = 0;
    10e8:	20000005 	andcs	r0, r0, r5
			g_InControlState.TravelLength.x = 0;
			g_InControlState.TravelLength.z = 0;

#ifdef OPT_SINGLELEG
			g_InControlState.TravelLength.y = 0;
			g_InControlState.SelectedLeg = 255;
    10ec:	0005d107 	andeq	sp, r5, r7, lsl #2
    10f0:	00072100 	andeq	r2, r7, r0, lsl #2
#endif
			g_fLowVoltageShutdown = 1;
    10f4:	22000004 	andcs	r0, r0, #4	; 0x4
			s_bLVBeepCnt = 0;    // how many times we beeped...
    10f8:	0003e307 	andeq	lr, r3, r7, lsl #6
		if ((Voltage < cTurnOffVol) || (Voltage >= 1999)) {


			//Turn off
			g_InControlState.BodyPos.x = 0;
			g_InControlState.BodyPos.y = 0;
    10fc:	5a072300 	bpl	1c9d04 <__Stack_Size+0x1c9904>
			g_InControlState.BodyPos.z = 0;
			g_InControlState.BodyRot1.x = 0;
    1100:	24000003 	strcs	r0, [r0], #-3
			g_InControlState.BodyRot1.y = 0;
			g_InControlState.BodyRot1.z = 0;
    1104:	00034307 	andeq	r4, r3, r7, lsl #6
			g_InControlState.TravelLength.x = 0;
			g_InControlState.TravelLength.z = 0;
    1108:	5b072500 	blpl	1ca510 <__Stack_Size+0x1ca110>
#ifdef OPT_SINGLELEG
			g_InControlState.TravelLength.y = 0;
			g_InControlState.SelectedLeg = 255;
#endif
			g_fLowVoltageShutdown = 1;
			s_bLVBeepCnt = 0;    // how many times we beeped...
    110c:	26000005 	strcs	r0, [r0], -r5
			g_InControlState.fRobotOn = false;
    1110:	00054707 	andeq	r4, r5, r7, lsl #14
		}
#ifdef cTurnOnVol
	} else if ((Voltage > cTurnOnVol) && (Voltage < 1999)) {
    1114:	cf072700 	svcgt	0x00072700
    1118:	28000006 	stmdacs	r0, {r1, r2}

		g_fLowVoltageShutdown = 0;
    111c:	0006ae07 	andeq	sl, r6, r7, lsl #28
    1120:	12072900 	andne	r2, r7, #0	; 0x0

#endif
	} else {
		if (s_bLVBeepCnt < 5) {
    1124:	2a000000 	bcs	112c <__Stack_Size+0xd2c>
    1128:	00011d07 	andeq	r1, r1, r7, lsl #26
			s_bLVBeepCnt++;
    112c:	13072b00 	movwne	r2, #31488	; 0x7b00

			//MSound( 1, 45, 2000);
			Buzzed(45, 2000);
    1130:	2c000004 	stccs	0, cr0, [r0], {4}
    1134:	0001f407 	andeq	pc, r1, r7, lsl #8
    1138:	38072d00 	stmdacc	r7, {r8, sl, fp, sp}
		}
		mDelay(2000);
    113c:	2e000003 	cdpcs	0, 0, cr0, cr0, cr3, {0}
    1140:	0001eb07 	andeq	lr, r1, r7, lsl #22
    1144:	65072f00 	strvs	r2, [r7, #-3840]
	}
#endif

	return g_fLowVoltageShutdown;
}
    1148:	30000001 	andcc	r0, r0, r1
    114c:	00015907 	andeq	r5, r1, r7, lsl #18
    1150:	06003100 	streq	r3, [r0], -r0, lsl #2
    1154:	63480101 	movtvs	r0, #33025	; 0x8101
    1158:	07000005 	streq	r0, [r0, -r5]

//==============================================================================
// BackgroundProcess - Allows us to have some background processing for those
//    servo drivers that need us to do things like polling...
//==============================================================================
void BackgroundProcess(void) {
    115c:	000016b2 	strheq	r1, [r0], -r2
    1160:	18000700 	stmdane	r0, {r8, r9, sl}
	if (g_fAXSpeedControl)
    1164:	07010000 	streq	r0, [r1, -r0]
		return;  // nothing to do in this mode...

	if (ServosEnabled) {
		//DebugToggle(A3);
		BioloidControllerEx_interpolateStep(false); // Do our background stuff...
    1168:	00000da7 	andeq	r0, r0, r7, lsr #27
		Battery_Monitor_Alarm();
    116c:	18600702 	stmdane	r0!, {r1, r8, r9, sl}^
	}
}
    1170:	07030000 	streq	r0, [r3, -r0]
    1174:	00000cc3 	andeq	r0, r0, r3, asr #25
//Function that gets called from the main loop if the robot is not logically
//     on.  Gives us a chance to play some...
//--------------------------------------------------------------------
static u8 g_iIdleServoNum = (u8) - 1;
static u8 g_iIdleLedState = 1;  // what state to we wish to set...
void IdleTime(void) {
    1178:	01060004 	tsteq	r6, r4
    117c:	05844f01 	streq	r4, [r4, #3841]
	// Each time we call this set servos LED on or off...
	g_iIdleServoNum++;
    1180:	74070000 	strvc	r0, [r7]
	if (g_iIdleServoNum >= NUMSERVOS) {
    1184:	00000010 	andeq	r0, r0, r0, lsl r0
    1188:	000e5707 	andeq	r5, lr, r7, lsl #14
		g_iIdleServoNum = 0;
    118c:	07070100 	streq	r0, [r7, -r0, lsl #2]
		g_iIdleLedState = 1 - g_iIdleLedState;
    1190:	02000013 	andeq	r0, r0, #19	; 0x13
    1194:	00118907 	andseq	r8, r1, r7, lsl #18
	}
	dxl_write_byte(pgm_read_byte(&cPinTable[g_iIdleServoNum]), AXM_LED,
    1198:	11000300 	tstne	r0, r0, lsl #6
    119c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    11a0:	01120074 	tsteq	r2, r4, ror r0
    11a4:	00001798 	muleq	r0, r8, r7
    11a8:	01058503 	tsteq	r5, r3, lsl #10
			g_iIdleLedState);
	//ax12ReadPacket(6);  // get the response...


}
    11ac:	0000002c 	andeq	r0, r0, ip, lsr #32
    11b0:	0005d901 	andeq	sp, r5, r1, lsl #18
    11b4:	49731300 	ldmdbmi	r3!, {r8, r9, ip}^
    11b8:	84030044 	strhi	r0, [r3], #-68

//--------------------------------------------------------------------
//[SetRegOnAllServos] Function that is called to set the state of one
//  register in all of the servos, like Torque on...
//--------------------------------------------------------------------
void SetRegOnAllServos(u8 bReg, u8 bVal) {
    11bc:	00002c05 	andeq	r2, r0, r5, lsl #24
    11c0:	0cbe1400 	cfldrseq	mvf1, [lr]
    11c4:	84030000 	strhi	r0, [r3]
	 ax12write(bVal);

  }
  ax12write(0xff - (checksum % 256));
  setRX(0);*/
	 dxl_set_txpacket_id (BROADCAST_ID);
    11c8:	00002c05 	andeq	r2, r0, r5, lsl #24
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    11cc:	125d1400 	subsne	r1, sp, #0	; 0x0
	dxl_set_txpacket_parameter(0,bReg);
    11d0:	84030000 	strhi	r0, [r3]
    11d4:	0005d905 	andeq	sp, r5, r5, lsl #18
	dxl_set_txpacket_parameter(1,2);
    11d8:	12ea1400 	rscne	r1, sl, #0	; 0x0
    11dc:	85030000 	strhi	r0, [r3]
    11e0:	0005d905 	andeq	sp, r5, r5, lsl #18
  int i;
	for (i = 0; i < poseSize; i++) {
		byte id = pgm_read_byte(&cPinTable[i]);
		dxl_set_txpacket_parameter(2 + 3 * i, id);
    11e4:	00731500 	rsbseq	r1, r3, r0, lsl #10
    11e8:	2c058903 	stccs	9, cr8, [r5], {3}
    11ec:	00000000 	andeq	r0, r0, r0
    11f0:	003a0416 	eorseq	r0, sl, r6, lsl r4
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
    11f4:	01170000 	tsteq	r7, r0
    11f8:	00000f25 	andeq	r0, r0, r5, lsr #30
    11fc:	0101c801 	tsteq	r1, r1, lsl #16
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
    1200:	000005f9 	strdeq	r0, [r0], -r9
    1204:	00161318 	andseq	r1, r6, r8, lsl r3
    1208:	b4c80100 	strblt	r0, [r8], #256
	dxl_set_txpacket_parameter(1,2);
  int i;
	for (i = 0; i < poseSize; i++) {
		byte id = pgm_read_byte(&cPinTable[i]);
		dxl_set_txpacket_parameter(2 + 3 * i, id);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
    120c:	00000000 	andeq	r0, r0, r0
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
    1210:	11450119 	cmpne	r5, r9, lsl r1
	 dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0,bReg);
	dxl_set_txpacket_parameter(1,2);
  int i;
	for (i = 0; i < poseSize; i++) {
    1214:	f0030000 	undefined instruction 0xf0030000
    1218:	19010105 	stmdbne	r1, {r0, r2, r8}
    121c:	0016d701 	andseq	sp, r6, r1, lsl #14
		dxl_set_txpacket_parameter(2 + 3 * i, id);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
	}

	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
    1220:	03990300 	orrseq	r0, r9, #0	; 0x0
    1224:	011a0101 	tsteq	sl, r1, lsl #2
    1228:	00000e68 	andeq	r0, r0, r8, ror #28
#ifdef DEBUG_BIOLOIDEX
	PrintString("DriverAX12 --- SetRegOnAllServos ---\n");
#endif
	dxl_txrx_packet();
    122c:	0101b501 	tsteq	r1, r1, lsl #10

	u16 CommStatus = dxl_get_result();
    1230:	11fc011b 	mvnsne	r0, fp, lsl r1
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
    1234:	00030000 	andeq	r0, r3, r0
		PrintErrorCode();
    1238:	35010106 	strcc	r0, [r1, #-262]
	else
		PrintCommStatus(CommStatus);
    123c:	14000006 	strne	r0, [r0], #-6
#endif
}
    1240:	00001732 	andeq	r1, r0, r2, lsr r7
    1244:	84060003 	strhi	r0, [r6], #-3
    1248:	00000005 	andeq	r0, r0, r5
//--------------------------------------------------------------------
//[MakeSureServosAreOn] Function that is called to handle when you are
//  transistioning from servos all off to being on.  May need to read
//  in the current pose...
//--------------------------------------------------------------------
void MakeSureServosAreOn(void) {
    124c:	0f040119 	svceq	0x00040119

	if (ServosEnabled) {

		if (!g_fServosFree)
    1250:	1d030000 	stcne	0, cr0, [r3]
			return;    // we are not free

		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		if (g_fAXSpeedControl) {
    1254:	1c010103 	stfnes	f0, [r1], {3}
    1258:	0000060f 	andeq	r0, r0, pc, lsl #12
	...

			int i;
			for (i = 0; i < NUMSERVOS; i++) {
				g_awGoalAXPos[i] = dxl_read_word(pgm_read_byte(&cPinTable[i]),
    1264:	df1d5d01 	svcle	0x001d5d01
    1268:	00000005 	andeq	r0, r0, r5
						AXM_PRESENT_POSITION_L);
				mDelay(25);
    126c:	00000000 	andeq	r0, r0, r0
    1270:	01000000 	tsteq	r0, r0

		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		if (g_fAXSpeedControl) {

			int i;
			for (i = 0; i < NUMSERVOS; i++) {
    1274:	00066a5d 	andeq	r6, r6, sp, asr sl
    1278:	05ed1e00 	strbeq	r1, [sp, #3584]!
				g_awGoalAXPos[i] = dxl_read_word(pgm_read_byte(&cPinTable[i]),
						AXM_PRESENT_POSITION_L);
				mDelay(25);
			}
		} else {
			BioloidControllerEx_readPose();
    127c:	50010000 	andpl	r0, r1, r0
		}

		SetRegOnAllServos(AXM_TORQUE_ENABLE, 1);  // Use sync write to do it.
    1280:	63011f00 	movwvs	r1, #7936	; 0x1f00
    1284:	01000017 	tsteq	r0, r7, lsl r0

		CommanderInputController_AllowControllerInterrupts(true);
		g_fServosFree = false;
    1288:	000101d7 	ldrdeq	r0, [r1], -r7
	}

}
    128c:	00000000 	andeq	r0, r0, r0
    1290:	01000000 	tsteq	r0, r0
    1294:	fe01205d 	mcr2	0, 0, r2, cr1, cr13, {2}
    1298:	0100000d 	tsteq	r0, sp
    129c:	0000020b 	andeq	r0, r0, fp, lsl #4

//------------------------------------------------------------------------------------------
//[BeginServoUpdate] Does whatever preperation that is needed to starrt a move of our servos
//------------------------------------------------------------------------------------------
void BeginServoUpdate(void)    // Start the update
		{
    12a0:	00000000 	andeq	r0, r0, r0

	MakeSureServosAreOn();
    12a4:	5d010000 	stcpl	0, cr0, [r1]
	if (ServosEnabled) {

		if (g_fAXSpeedControl) {
    12a8:	13e60121 	mvnne	r0, #1073741832	; 0x40000008
    12ac:	12010000 	andne	r0, r1, #0	; 0x0

#ifdef USE_AX12_SPEED_CONTROL
			// If we are trying our own Servo control need to save away the new positions...
			byte i;
			for (i = 0; i < NUMSERVOS; i++) {
				g_awCurAXPos[i] = g_awGoalAXPos[i];
    12b0:	00000102 	andeq	r0, r0, r2, lsl #2
    12b4:	00000000 	andeq	r0, r0, r0
    12b8:	5d010000 	stcpl	0, cr0, [r1]
		if (g_fAXSpeedControl) {

#ifdef USE_AX12_SPEED_CONTROL
			// If we are trying our own Servo control need to save away the new positions...
			byte i;
			for (i = 0; i < NUMSERVOS; i++) {
    12bc:	000006b8 	strheq	r0, [r0], -r8
				g_awCurAXPos[i] = g_awGoalAXPos[i];
			}
#endif
		} else
			BioloidControllerEx_interpolateStep(true); // Make sure we call at least once
    12c0:	000c0f22 	andeq	r0, ip, r2, lsr #30
    12c4:	02120100 	andseq	r0, r2, #0	; 0x0

	}
}
    12c8:	0000004a 	andeq	r0, r0, sl, asr #32
    12cc:	23005001 	movwcs	r5, #1	; 0x1
    12d0:	000e8b01 	andeq	r8, lr, r1, lsl #22
    12d4:	01fb0200 	mvnseq	r0, r0, lsl #4
}

//--------------------------------------------------------------------
//[FREE SERVOS] Frees all the servos
//--------------------------------------------------------------------
void FreeServos(void) {
    12d8:	000000a2 	andeq	r0, r0, r2, lsr #1
	...

	if (!g_fServosFree) {
		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		SetRegOnAllServos(AXM_TORQUE_ENABLE, 0);  // do this as one statement...
    12e4:	07265d01 	streq	r5, [r6, -r1, lsl #26]!
    12e8:	2f240000 	svccs	0x00240000
    12ec:	02000010 	andeq	r0, r0, #16	; 0x10
		byte i;
		for (i = 0; i < NUMSERVOS; i++) {
			Relax(pgm_read_byte(&cPinTable[i]));
    12f0:	0000a2fb 	strdeq	sl, [r0], -fp
    12f4:	00013400 	andeq	r3, r1, r0, lsl #8
    12f8:	15d02500 	ldrbne	r2, [r0, #1280]

	if (!g_fServosFree) {
		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		SetRegOnAllServos(AXM_TORQUE_ENABLE, 0);  // do this as one statement...
		byte i;
		for (i = 0; i < NUMSERVOS; i++) {
    12fc:	fb020000 	blx	81306 <__Stack_Size+0x80f06>
			Relax(pgm_read_byte(&cPinTable[i]));
		}
		CommanderInputController_AllowControllerInterrupts(true);
		g_fServosFree = true;
    1300:	000000a2 	andeq	r0, r0, r2, lsr #1
	}
}
    1304:	8d255101 	stfhis	f5, [r5, #-4]!
    1308:	02000014 	andeq	r0, r0, #20	; 0x14
    130c:	0000a2fb 	strdeq	sl, [r0], -fp
extern void SetRegOnAllServos(u8 bReg, u8 bVal);

//--------------------------------------------------------------------
//Init
//--------------------------------------------------------------------
void Servo_Init(void) {
    1310:	26520100 	ldrbcs	r0, [r2], -r0, lsl #2
	// First lets get the actual servo positions for all of our servos...
	//pinMode(0, OUTPUT);
	g_fServosFree = true;
    1314:	000017de 	ldrdeq	r1, [r0], -lr

  poseSize = NUMSERVOS;
    1318:	00a2fc02 	adceq	pc, r2, r2, lsl #24
    131c:	01520000 	cmpeq	r2, r0
  BioloidControllerEx_readPose();
    1320:	0f270000 	svceq	0x00270000
#ifdef cVoltagePin
	for (byte i=0; i < 8; i++)
	GetBatteryVoltage();  // init the voltage pin
#endif

	g_fAXSpeedControl = false;
    1324:	02000015 	andeq	r0, r0, #21	; 0x15
    1328:	00003ffd 	strdeq	r3, [r0], -sp



	// Added - try to speed things up later if we do a query...
	SetRegOnAllServos(AXM_RETURN_DELAY_TIME, 0); // tell servos to give us back their info as quick as they can...
    132c:	11192600 	tstne	r9, r0, lsl #12
    1330:	fe020000 	cdp2	0, 0, cr0, cr2, cr0, {0}

}
    1334:	000000a2 	andeq	r0, r0, r2, lsr #1
    1338:	00000165 	andeq	r0, r0, r5, ror #2
    133c:	b1011f00 	tstlt	r1, r0, lsl #30
    1340:	03000013 	movweq	r0, #19	; 0x13

}

void setupPhoenix() {

	g_fShowDebugPrompt = true;
    1344:	000102c9 	andeq	r0, r1, r9, asr #5
void readSensors(){


}

void setupPhoenix() {
    1348:	00000000 	andeq	r0, r0, r0

	g_fShowDebugPrompt = true;
	g_fDebugOutput = false;
    134c:	01000000 	tsteq	r0, r0
    1350:	06351c5d 	undefined
	...
	BioloidControllerEx();

	// Init our ServoDriver
	Servo_Init();

	mDelay(10);
    135c:	5d010000 	stcpl	0, cr0, [r1]

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		LegPosX[LegIndex] = (short) pgm_read_word(&cInitPosX[LegIndex]); //Set start positions for each leg
    1360:	132d0128 	teqne	sp, #10	; 0xa
    1364:	5e030000 	cdppl	0, 0, cr0, cr3, cr0, {0}
		LegPosY[LegIndex] = (short) pgm_read_word(&cInitPosY[LegIndex]);
    1368:	00000103 	andeq	r0, r0, r3, lsl #2
    136c:	00000000 	andeq	r0, r0, r0
		LegPosZ[LegIndex] = (short) pgm_read_word(&cInitPosZ[LegIndex]);
    1370:	01780000 	cmneq	r8, r0

	mDelay(10);

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		LegPosX[LegIndex] = (short) pgm_read_word(&cInitPosX[LegIndex]); //Set start positions for each leg
    1374:	04290000 	strteq	r0, [r9]
    1378:	00000006 	andeq	r0, r0, r6
		LegPosY[LegIndex] = (short) pgm_read_word(&cInitPosY[LegIndex]);
    137c:	00000000 	andeq	r0, r0, r0
    1380:	97000000 	strls	r0, [r0, -r0]
		LegPosZ[LegIndex] = (short) pgm_read_word(&cInitPosZ[LegIndex]);
    1384:	2a000001 	bcs	1390 <__Stack_Size+0xf90>
    1388:	00131801 	andseq	r1, r3, r1, lsl #16
    138c:	03cb0300 	biceq	r0, fp, #0	; 0x0
	Servo_Init();

	mDelay(10);

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    1390:	00000001 	andeq	r0, r0, r1
    1394:	00000000 	andeq	r0, r0, r0
    1398:	0001c200 	andeq	ip, r1, r0, lsl #4

	ResetLegInitAngles();

	//Single leg control. Make sure no leg is selected
#ifdef OPT_SINGLELEG
	g_InControlState.SelectedLeg = 255; // No Leg selected
    139c:	0007ab00 	andeq	sl, r7, r0, lsl #22
    13a0:	11eb2b00 	mvnne	r2, r0, lsl #22
	g_InControlState.PrevSelectedLeg = 255;
    13a4:	cb030000 	blgt	c13ac <__Stack_Size+0xc0fac>
#endif
	//Body Positions
	g_InControlState.BodyPos.x = 0;
    13a8:	00007403 	andeq	r7, r0, r3, lsl #8
	g_InControlState.BodyPos.y = 0;
	g_InControlState.BodyPos.z = 0;
    13ac:	0001e100 	andeq	lr, r1, r0, lsl #2

//Body Rotations
	g_InControlState.BodyRot1.x = 0;
	g_InControlState.BodyRot1.y = 0;
    13b0:	0d8e2c00 	stceq	12, cr2, [lr]
	g_InControlState.BodyRot1.z = 0;
	g_InControlState.BodyRotOffset.x = 0;
    13b4:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
	g_InControlState.BodyRotOffset.y = 0; //Input Y offset value to adjust centerpoint of rotation
	g_InControlState.BodyRotOffset.z = 0;
    13b8:	00002c03 	andeq	r2, r0, r3, lsl #24

	//Gait
	g_InControlState.GaitType = 0;
    13bc:	0001f400 	andeq	pc, r1, r0, lsl #8
	g_InControlState.BalanceMode = 0;
    13c0:	01280000 	teqeq	r8, r0
	g_InControlState.LegLiftHeight = 50;
	g_InControlState.ForceGaitStepCnt = 0; // added to try to adjust starting positions depending on height...
    13c4:	00001635 	andeq	r1, r0, r5, lsr r6
	g_InControlState.GaitStep = 1;
    13c8:	0103a603 	tsteq	r3, r3, lsl #12
	...
	g_InControlState.BodyRotOffset.z = 0;

	//Gait
	g_InControlState.GaitType = 0;
	g_InControlState.BalanceMode = 0;
	g_InControlState.LegLiftHeight = 50;
    13d4:	00000280 	andeq	r0, r0, r0, lsl #5
void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {

		g_InControlState.gaitCur = APG[g_InControlState.GaitType];
    13d8:	13890128 	orrne	r0, r9, #10	; 0xa
    13dc:	4d030000 	stcmi	0, cr0, [r3]
    13e0:	00000104 	andeq	r0, r0, r4, lsl #2
//==============================================================================

// If both PS2 and XBee are defined then we will become secondary to the xbee
void CommanderInputController_Init(void) {

	g_BodyYOffset = 0;
    13e4:	00000000 	andeq	r0, r0, r0
    13e8:	029f0000 	addseq	r0, pc, #0	; 0x0
    13ec:	012a0000 	teqeq	sl, r0
	g_BodyYShift = 0;
	//begin(XBEE_BAUD);
	GPSeq = 0;  // init to something...
    13f0:	0000133e 	andeq	r1, r0, lr, lsr r3
    13f4:	01046b03 	tsteq	r4, r3, lsl #22
	...

	ControlMode = WALKMODE;
	HeightSpeedMode = NORM_NORM;
	//    DoubleHeightOn = false;
	DoubleTravelOn = false;
    1400:	000002be 	strheq	r0, [r0], -lr
	bJoystickWalkMode = 0;
    1404:	00000812 	andeq	r0, r0, r2, lsl r8
	GaitSelect();

	CommanderInputController_Init();

	// Servo Driver
	ServoMoveTime = 150;
    1408:	000fa62b 	andeq	sl, pc, fp, lsr #12
	g_InControlState.fRobotOn = 0;
    140c:	046b0300 	strbteq	r0, [fp], #-768
	g_fLowVoltageShutdown = false;
    1410:	0000002c 	andeq	r0, r0, ip, lsr #32

}
    1414:	000002dd 	ldrdeq	r0, [r0], -sp
    1418:	000fa32c 	andeq	sl, pc, ip, lsr #6
    141c:	046c0300 	strbteq	r0, [ip], #-768
    1420:	0000002c 	andeq	r0, r0, ip, lsr #32
    1424:	00000332 	andeq	r0, r0, r2, lsr r3
    1428:	95012d00 	strls	r2, [r1, #-3328]
    142c:	03000013 	movweq	r0, #19	; 0x13
    1430:	25010495 	strcs	r0, [r1, #-1173]
	...
    143c:	45000000 	strmi	r0, [r0]
    1440:	51000003 	tstpl	r0, r3
    1444:	2b000008 	blcs	146c <__Stack_Size+0x106c>
    1448:	00000f66 	andeq	r0, r0, r6, ror #30
    144c:	2c049503 	cfstr32cs	mvfx9, [r4], {3}
    1450:	64000000 	strvs	r0, [r0]
    1454:	2c000003 	stccs	0, cr0, [r0], {3}
    1458:	00001193 	muleq	r0, r3, r1
    145c:	b4049603 	strlt	r9, [r4], #-1539
    1460:	b9000000 	stmdblt	r0, {}
    1464:	00000003 	andeq	r0, r0, r3
//[CommitServoDriver Updates the positions of the servos - This outputs
//         as much of the command as we can without committing it.  This
//         allows us to once the previous update was completed to quickly
//        get the next command to start
//--------------------------------------------------------------------
void CommitServoDriver(word wMoveTime) {
    1468:	1787012e 	strne	r0, [r7, lr, lsr #2]
    146c:	b4030000 	strlt	r0, [r3]
    1470:	004a0104 	subeq	r0, sl, r4, lsl #2
	...
      }
      ax12write(0xff - (checksum % 256));
      setRX(0);
*/
  	    dxl_set_txpacket_id (BROADCAST_ID);
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    147c:	5d010000 	stcpl	0, cr0, [r1]
    1480:	000008a6 	andeq	r0, r0, r6, lsr #17
		dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
    1484:	03006e2f 	movweq	r6, #3631	; 0xe2f
    1488:	004a04b3 	strheq	r0, [sl], #-67
		dxl_set_txpacket_parameter(1, 2);
    148c:	03d70000 	bicseq	r0, r7, #0	; 0x0
    1490:	ad300000 	ldcge	0, cr0, [r0]
    1494:	0300000c 	movweq	r0, #12	; 0xc
    1498:	004a04b5 	strheq	r0, [sl], #-69
      int i;
      word wSpeed;
		for (i = 0; i < poseSize; i++) {
			wSpeed = CalculateAX12MoveSpeed(g_awCurAXPos[i], g_awGoalAXPos[i], wMoveTime);    // What order should we store these values?
    149c:	50010000 	andpl	r0, r1, r0
    14a0:	0018a730 	andseq	sl, r8, r0, lsr r7
    14a4:	04b60300 	ldrteq	r0, [r6], #768
    14a8:	0000004a 	andeq	r0, r0, sl, asr #32
			//dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
			byte id = pgm_read_byte(&cPinTable[i]);
			dxl_set_txpacket_parameter(2 + 3 * i, id);
    14ac:	c6305101 	ldrtgt	r5, [r0], -r1, lsl #2
    14b0:	03000013 	movweq	r0, #19	; 0x13
    14b4:	004a04b7 	strheq	r0, [sl], #-71
    14b8:	52010000 	andpl	r0, r1, #0	; 0x0
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(g_awGoalAXPos[i]));
    14bc:	5d012d00 	stcpl	13, cr2, [r1]
    14c0:	0300000c 	movweq	r0, #12	; 0xc
    14c4:	2c0104d0 	cfstrscs	mvf0, [r1], {208}
	...
			dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(g_awGoalAXPos[i]));
    14d0:	ea000000 	b	14d8 <__Stack_Size+0x10d8>
    14d4:	e5000003 	str	r0, [r0, #-3]
    14d8:	2b000008 	blcs	1500 <__Stack_Size+0x1100>
    14dc:	00001041 	andeq	r1, r0, r1, asr #32
    14e0:	2c04d003 	stccs	0, cr13, [r4], {3}
    14e4:	15000000 	strne	r0, [r0]
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(wSpeed));
    14e8:	2b000004 	blcs	1500 <__Stack_Size+0x1100>
    14ec:	00001047 	andeq	r1, r0, r7, asr #32
    14f0:	2c04d003 	stccs	0, cr13, [r4], {3}
		    dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(wSpeed));
    14f4:	33000000 	movwcc	r0, #0	; 0x0
    14f8:	00000004 	andeq	r0, r0, r4
    14fc:	0fcf012a 	svceq	0x00cf012a
    1500:	32030000 	andcc	r0, r3, #0	; 0x0
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
		dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
		dxl_set_txpacket_parameter(1, 2);
      int i;
      word wSpeed;
		for (i = 0; i < poseSize; i++) {
    1504:	00000104 	andeq	r0, r0, r4, lsl #2
    1508:	00000000 	andeq	r0, r0, r0
    150c:	04510000 	ldrbeq	r0, [r1]
    1510:	09780000 	ldmdbeq	r8!, {}^
			dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(g_awGoalAXPos[i]));
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(wSpeed));
		    dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(wSpeed));
		}

		dxl_set_txpacket_length((4 + 1) * poseSize + 4);
    1514:	b72b0000 	strlt	r0, [fp, -r0]!
    1518:	03000018 	movweq	r0, #24	; 0x18
    151c:	00250432 	eoreq	r0, r5, r2, lsr r4
#ifdef DEBUG_BIOLOIDEX
	PrintString("DriverAX12 --- CommitServoDriver ---\n");
#endif
		dxl_txrx_packet();
    1520:	047c0000 	ldrbteq	r0, [ip]

			u16 CommStatus = dxl_get_result();
    1524:	cd2b0000 	stcgt	0, cr0, [fp]
#ifdef USING_PC_UART
			if (CommStatus == DXL_RXSUCCESS)
    1528:	03000018 	movweq	r0, #24	; 0x18
				PrintErrorCode();
    152c:	00250432 	eoreq	r0, r5, r2, lsr r4
			else
				PrintCommStatus(CommStatus);
    1530:	048f0000 	streq	r0, [pc], #0	; 1538 <__Stack_Size+0x1138>
    1534:	c22b0000 	eorgt	r0, fp, #0	; 0x0
#endif
#endif
		} else {
			BioloidControllerEx_interpolateSetup(wMoveTime);
    1538:	03000018 	movweq	r0, #24	; 0x18

	}

	CommanderInputController_AllowControllerInterrupts(true);

}
    153c:	00250432 	eoreq	r0, r5, r2, lsr r4
    1540:	04a20000 	strteq	r0, [r2]
    1544:	e22b0000 	eor	r0, fp, #0	; 0x0
    1548:	03000016 	movweq	r0, #22	; 0x16
    154c:	00740432 	rsbseq	r0, r4, r2, lsr r4
    1550:	04c00000 	strbeq	r0, [r0]
	word wCoxaSDV;        // Coxa value in servo driver units
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    1554:	952c0000 	strls	r0, [ip]!
    1558:	03000012 	movweq	r0, #18	; 0x12
    155c:	00250433 	eoreq	r0, r5, r3, lsr r4
    1560:	04d30000 	ldrbeq	r0, [r3]
    1564:	ff310000 	undefined instruction 0xff310000


void OutputServoInfoForLeg(byte LegIndex, short sCoxaAngle1, short sFemurAngle1,
		short sTibiaAngle1)

		{
    1568:	0300000f 	movweq	r0, #15	; 0xf
	word wCoxaSDV;        // Coxa value in servo driver units
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    156c:	00250434 	eoreq	r0, r5, r4, lsr r4
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
    1570:	052c0000 	streq	r0, [ip]!
    1574:	03000010 	movweq	r0, #16	; 0x10
    1578:	00250435 	eoreq	r0, r5, r5, lsr r4
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    157c:	04e60000 	strbteq	r0, [r6]
    1580:	f9310000 	undefined instruction 0xf9310000
    1584:	0300000f 	movweq	r0, #15	; 0xf


void OutputServoInfoForLeg(byte LegIndex, short sCoxaAngle1, short sFemurAngle1,
		short sTibiaAngle1)

		{
    1588:	00250437 	eoreq	r0, r5, r7, lsr r4
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    158c:	2a000000 	bcs	1594 <__Stack_Size+0x1194>
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
    1590:	000de601 	andeq	lr, sp, r1, lsl #12
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    1594:	04eb0300 	strbteq	r0, [fp], #768
#ifdef USE_AX12_SPEED_CONTROL
			// Save away the new positions...
			g_awGoalAXPos[FIRSTCOXAPIN + LegIndex] = wCoxaSDV; // What order should we store these values?
			g_awGoalAXPos[FIRSTFEMURPIN + LegIndex] = wFemurSDV;
    1598:	00000001 	andeq	r0, r0, r1

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
#ifdef USE_AX12_SPEED_CONTROL
			// Save away the new positions...
			g_awGoalAXPos[FIRSTCOXAPIN + LegIndex] = wCoxaSDV; // What order should we store these values?
    159c:	00000000 	andeq	r0, r0, r0
			g_awGoalAXPos[FIRSTFEMURPIN + LegIndex] = wFemurSDV;
    15a0:	0004f900 	andeq	pc, r4, r0, lsl #18
			g_awGoalAXPos[FIRSTTIBIAPIN + LegIndex] = wTibiaSDV;
    15a4:	000a6900 	andeq	r6, sl, r0, lsl #18
    15a8:	18b72b00 	ldmne	r7!, {r8, r9, fp, sp}
    15ac:	eb030000 	bl	c15b4 <__Stack_Size+0xc11b4>

#endif
		} else {
			BioloidControllerEx_setNextPose(
    15b0:	00002c04 	andeq	r2, r0, r4, lsl #24
    15b4:	00052500 	andeq	r2, r5, r0, lsl #10
					pgm_read_byte(&cPinTable[FIRSTCOXAPIN + LegIndex]),
					wCoxaSDV);
			BioloidControllerEx_setNextPose(
    15b8:	18cd2b00 	stmiane	sp, {r8, r9, fp, sp}^
    15bc:	eb030000 	bl	c15c4 <__Stack_Size+0xc11c4>
    15c0:	00002c04 	andeq	r2, r0, r4, lsl #24
					pgm_read_byte(&cPinTable[FIRSTFEMURPIN + LegIndex]),
					wFemurSDV);
			BioloidControllerEx_setNextPose(
    15c4:	00053800 	andeq	r3, r5, r0, lsl #16
    15c8:	18c22b00 	stmiane	r2, {r8, r9, fp, sp}^
					wTibiaSDV);

		}
	}
	CommanderInputController_AllowControllerInterrupts(true); // Ok for hserial again...
}
    15cc:	eb030000 	bl	c15d4 <__Stack_Size+0xc11d4>
    15d0:	00002c04 	andeq	r2, r0, r4, lsl #24
    15d4:	00054b00 	andeq	r4, r5, r0, lsl #22
    15d8:	0ef22b00 	fconstdeq	d18, #32
    15dc:	eb030000 	bl	c15e4 <__Stack_Size+0xc11e4>

void StartUpdateServos() {
    15e0:	00002c04 	andeq	r2, r0, r4, lsl #24
	byte LegIndex;

	// First call off to the init...
	BeginServoUpdate();    // Start the update
    15e4:	00056900 	andeq	r6, r5, r0, lsl #18
    15e8:	0d292b00 	vstmdbeq	r9!, {d2-d1}
    15ec:	eb030000 	bl	c15f4 <__Stack_Size+0xc11f4>

	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		OutputServoInfoForLeg(LegIndex,
    15f0:	00007404 	andeq	r7, r0, r4, lsl #8
    15f4:	00058800 	andeq	r8, r5, r0, lsl #16
    15f8:	0c7c3100 	ldfeqe	f3, [ip]
    15fc:	ec030000 	stc	0, cr0, [r3], {0}
    1600:	00002c04 	andeq	r2, r0, r4, lsl #24
    1604:	13833100 	orrne	r3, r3, #0	; 0x0
    1608:	ed030000 	stc	0, cr0, [r3]
    160c:	00002c04 	andeq	r2, r0, r4, lsl #24
    1610:	0d332c00 	ldceq	12, cr2, [r3]
    1614:	ee030000 	cdp	0, 0, cr0, cr3, cr0, {0}
    1618:	00002c04 	andeq	r2, r0, r4, lsl #24
    161c:	0005a700 	andeq	sl, r5, r0, lsl #14
    1620:	14012c00 	strne	r2, [r1], #-3072
    1624:	ef030000 	svc	0x00030000
    1628:	00002c04 	andeq	r2, r0, r4, lsl #24
    162c:	0005ba00 	andeq	fp, r5, r0, lsl #20
    1630:	0fe23000 	svceq	0x00e23000
    1634:	f0030000 	undefined instruction 0xf0030000
    1638:	00002c04 	andeq	r2, r0, r4, lsl #24
    163c:	207d0200 	rsbscs	r0, sp, r0, lsl #4
    1640:	00167930 	andseq	r7, r6, r0, lsr r9
	byte LegIndex;

	// First call off to the init...
	BeginServoUpdate();    // Start the update

	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    1644:	04f10300 	ldrbteq	r0, [r1], #768
				cTibiaInv[LegIndex] ?
						-TibiaAngle1[LegIndex] : TibiaAngle1[LegIndex]);

	}

}
    1648:	0000002c 	andeq	r0, r0, ip, lsr #32
    164c:	2c247d02 	stccs	13, cr7, [r4], #-8
    1650:	00001295 	muleq	r0, r5, r2
    1654:	2c04f203 	sfmcs	f7, 1, [r4], {3}
    1658:	cd000000 	stcgt	0, cr0, [r0]
    165c:	2c000005 	stccs	0, cr0, [r0], {5}
    1660:	00000fff 	strdeq	r0, [r0], -pc
#else
word g_wLastVoltage = 0xffff;    // save the last voltage we retrieved...
byte g_bLegVoltage = 0;		// what leg did we last check?
unsigned long g_ulTimeLastBatteryVoltage;
#define VOLTAGE_REPEAT_MAX  3
word GetBatteryVoltage(void) {
    1664:	2c04f303 	stccs	3, cr15, [r4], {3}
	if (interpolating && (g_wLastVoltage != 0xffff)
    1668:	e0000000 	and	r0, r0, r0
    166c:	2c000005 	stccs	0, cr0, [r0], {5}
    1670:	00001005 	andeq	r1, r0, r5
    1674:	2c04f403 	cfstrscs	mvf15, [r4], {3}
    1678:	ff000000 	undefined instruction 0xff000000
    167c:	00000005 	andeq	r0, r0, r5
    1680:	0c14012a 	ldfeqs	f0, [r4], {42}
    1684:	35030000 	strcc	r0, [r3]
			&& ((getMillis() - g_ulTimeLastBatteryVoltage)
					< VOLTAGE_MAX_TIME_BETWEEN_CALLS))
		return g_wLastVoltage;
    1688:	00000105 	andeq	r0, r0, r5, lsl #2

	register u8 bLoopCnt = VOLTAGE_REPEAT_MAX;
	do {
		register word wVoltage = dxl_read_byte(1, AXM_PRESENT_VOLTAGE);
    168c:	00000000 	andeq	r0, r0, r0
    1690:	061e0000 	ldreq	r0, [lr], -r0
    1694:	0b190000 	bleq	64169c <__Stack_Size+0x64129c>
		if (wVoltage != 0xffff) {
			g_ulTimeLastBatteryVoltage = getMillis();
    1698:	c82b0000 	stmdagt	fp!, {}
			g_wLastVoltage = wVoltage * 10;
    169c:	03000014 	movweq	r0, #20	; 0x14

	register u8 bLoopCnt = VOLTAGE_REPEAT_MAX;
	do {
		register word wVoltage = dxl_read_byte(1, AXM_PRESENT_VOLTAGE);
		if (wVoltage != 0xffff) {
			g_ulTimeLastBatteryVoltage = getMillis();
    16a0:	002c0534 	eoreq	r0, ip, r4, lsr r5
			g_wLastVoltage = wVoltage * 10;
    16a4:	06490000 	strbeq	r0, [r9], -r0
		}
	} while (--bLoopCnt);

	return 0;

}
    16a8:	d32b0000 	teqle	fp, #0	; 0x0
    16ac:	03000014 	movweq	r0, #20	; 0x14
    16b0:	002c0534 	eoreq	r0, ip, r4, lsr r5
    16b4:	065c0000 	ldrbeq	r0, [ip], -r0
// ReadMsgs
//==============================================================================

/* process messages coming from Commander
 *  format = 0xFF RIGHT_H RIGHT_V LEFT_H LEFT_V BUTTONS EXT CHECKSUM */
int Commander_ReadMsgs() {
    16b8:	de2b0000 	cdple	0, 2, cr0, cr11, cr0, {0}
	 }
	 #endif
	 */
	//while (CheckZBNewArrive() > 0) {
	while (1) {
		if (zgb_rx_check_arduino() == 1) {
    16bc:	03000014 	movweq	r0, #20	; 0x14
    16c0:	002c0534 	eoreq	r0, ip, r4, lsr r5

			leftV = (signed char) (zgb_rx_data_right_V_());
    16c4:	067a0000 	ldrbteq	r0, [sl], -r0
    16c8:	fc2b0000 	stc2	0, cr0, [fp]
			leftH = (signed char) (zgb_rx_data_right_H_());
    16cc:	03000012 	movweq	r0, #18	; 0x12
    16d0:	00740535 	rsbseq	r0, r4, r5, lsr r5
			rightV = (signed char) (zgb_rx_data_left_V_());
    16d4:	068d0000 	streq	r0, [sp], r0
    16d8:	7b300000 	blvc	c016e0 <__Stack_Size+0xc012e0>
			rightH = (signed char) (zgb_rx_data_left_H_());
    16dc:	03000015 	movweq	r0, #21	; 0x15
    16e0:	004a0536 	subeq	r0, sl, r6, lsr r5
			buttons = zgb_rx_data_buttons();
    16e4:	57010000 	strpl	r0, [r1, -r0]
    16e8:	00178131 	andseq	r8, r7, r1, lsr r1
			ext = zgb_rx_data_extra();
    16ec:	05370300 	ldreq	r0, [r7, #-768]!
    16f0:	0000004a 	andeq	r0, r0, sl, asr #32

	}

	return 0;

}
    16f4:	0017e631 	andseq	lr, r7, r1, lsr r6
    16f8:	05380300 	ldreq	r0, [r8, #-768]!
    16fc:	0000004a 	andeq	r0, r0, sl, asr #32
    1700:	0017ae31 	andseq	sl, r7, r1, lsr lr
    1704:	05390300 	ldreq	r0, [r9, #-768]!
    1708:	0000002c 	andeq	r0, r0, ip, lsr #32
    170c:	000f7531 	andeq	r7, pc, r1, lsr r5
    1710:	053e0300 	ldreq	r0, [lr, #-768]!

//==============================================================================
// This is The main code to input function to read inputs from the Commander and then
//process any commands.
//==============================================================================
void CommanderInputController_ControlInput(void) {
    1714:	00000025 	andeq	r0, r0, r5, lsr #32

	// See if we have a new command available...
	if (Commander_ReadMsgs() > 0) {
    1718:	000f7b31 	andeq	r7, pc, r1, lsr fp
    171c:	053f0300 	ldreq	r0, [pc, #-768]!	; 1424 <__Stack_Size+0x1024>
    1720:	00000025 	andeq	r0, r0, r5, lsr #32
    1724:	00335415 	eorseq	r5, r3, r5, lsl r4
		// If we receive a valid message than turn robot on...
		boolean fAdjustLegPositions = false;
		short sLegInitXZAdjust = 0;
		short sLegInitAngleAdjust = 0;

		if (!g_InControlState.fRobotOn) {
    1728:	25054003 	strcs	r4, [r5, #-3]
    172c:	00000000 	andeq	r0, r0, r0
			g_InControlState.fRobotOn = true;
    1730:	00058b1d 	andeq	r8, r5, sp, lsl fp
	...
		}

		// [SWITCH MODES]

		// Cycle through modes...
		if ((buttons & BUT_LT) && !(buttonsPrev & BUT_LT)) {
    173c:	565d0100 	ldrbpl	r0, [sp], -r0, lsl #2
    1740:	3200000b 	andcc	r0, r0, #11	; 0xb
    1744:	0000059e 	muleq	r0, lr, r5
    1748:	000006ab 	andeq	r0, r0, fp, lsr #13
    174c:	0005aa1e 	andeq	sl, r5, lr, lsl sl

			if (++ControlMode >= MODECNT) {
    1750:	1e510100 	rdfnes	f0, f1, f0
    1754:	000005b6 	strheq	r0, [r0], -r6
    1758:	c2325201 	eorsgt	r5, r2, #268435456	; 0x10000000
    175c:	be000005 	cdplt	0, 0, cr0, cr0, cr5, {0}
				ControlMode = WALKMODE;    // cycled back around...
				Buzzed(50, 2000);
    1760:	33000006 	movwcc	r0, #6	; 0x6
    1764:	000005ce 	andeq	r0, r0, lr, asr #11
    1768:	000006dc 	ldrdeq	r0, [r0], -ip
				Buzzed(50, 3000);
    176c:	c0012a00 	andgt	r2, r1, r0, lsl #20
    1770:	0300000d 	movweq	r0, #13	; 0xd

			} else {
				Buzzed(50, 2000);
    1774:	0001059a 	muleq	r1, sl, r5
    1778:	00000000 	andeq	r0, r0, r0
    177c:	10000000 	andne	r0, r0, r0
			}
			if (ControlMode != SINGLELEGMODE)
    1780:	13000007 	movwne	r0, #7	; 0x7
    1784:	1500000c 	strne	r0, [r0, #-12]
				g_InControlState.SelectedLeg = 255;
    1788:	9c030073 	stcls	0, cr0, [r3], {115}
    178c:	00002c05 	andeq	r2, r0, r5, lsl #24
    1790:	058b3400 	streq	r3, [fp, #1024]

		}

		//[Common functions]
		//Switch Balance mode on/off
		if ((buttons & BUT_L4) && !(buttonsPrev & BUT_L4)) {
    1794:	00200000 	eoreq	r0, r0, r0
    1798:	9e030000 	cdpls	0, 0, cr0, cr3, cr0, {0}
    179c:	000bae05 	andeq	sl, fp, r5, lsl #28
    17a0:	0b433500 	bleq	10ceba8 <__Stack_Size+0x10ce7a8>
    17a4:	3c350000 	ldccc	0, cr0, [r5]
    17a8:	3500000b 	strcc	r0, [r0, #-11]

			g_InControlState.BalanceMode = !g_InControlState.BalanceMode;
    17ac:	00000b35 	andeq	r0, r0, r5, lsr fp
    17b0:	000b2c35 	andeq	r2, fp, r5, lsr ip
    17b4:	00383600 	eorseq	r3, r8, r0, lsl #12
    17b8:	ce330000 	cdpgt	0, 3, cr0, cr3, cr0, {0}
    17bc:	2f000005 	svccs	0x00000005
			if (g_InControlState.BalanceMode) {
    17c0:	00000007 	andeq	r0, r0, r7
				Buzzed(250, 1500);
    17c4:	058b3400 	streq	r3, [fp, #1024]
    17c8:	00500000 	subseq	r0, r0, r0
			} else {
				Buzzed(100, 2000);
    17cc:	a0030000 	andge	r0, r3, r0
    17d0:	000be205 	andeq	lr, fp, r5, lsl #4
				Buzzed(50, 4000);
    17d4:	0b433500 	bleq	10cebdc <__Stack_Size+0x10ce7dc>
    17d8:	3c350000 	ldccc	0, cr0, [r5]
    17dc:	3500000b 	strcc	r0, [r0, #-11]
			}
		}

		//Stand up, sit down
		if ((buttons & BUT_L5) && !(buttonsPrev & BUT_L5)) {
    17e0:	00000b35 	andeq	r0, r0, r5, lsr fp
    17e4:	000b2c35 	andeq	r2, fp, r5, lsr ip
    17e8:	00683600 	rsbeq	r3, r8, r0, lsl #12
    17ec:	ce330000 	cdpgt	0, 3, cr0, cr3, cr0, {0}
    17f0:	84000005 	strhi	r0, [r0], #-5
    17f4:	00000007 	andeq	r0, r0, r7
			if (g_BodyYOffset > 0)
    17f8:	058b3700 	streq	r3, [fp, #1792]
    17fc:	00800000 	addeq	r0, r0, r0
				g_BodyYOffset = 0;
    1800:	a3030000 	movwge	r0, #12288	; 0x3000
    1804:	0b433505 	bleq	10cec20 <__Stack_Size+0x10ce820>
			else
				g_BodyYOffset = 35;
			fAdjustLegPositions = true;
			g_fDynamicLegXZLength = false;
    1808:	3c350000 	ldccc	0, cr0, [r5]
		//Stand up, sit down
		if ((buttons & BUT_L5) && !(buttonsPrev & BUT_L5)) {
			if (g_BodyYOffset > 0)
				g_BodyYOffset = 0;
			else
				g_BodyYOffset = 35;
    180c:	3500000b 	strcc	r0, [r0, #-11]
			fAdjustLegPositions = true;
			g_fDynamicLegXZLength = false;
    1810:	00000b35 	andeq	r0, r0, r5, lsr fp
    1814:	000b2c35 	andeq	r2, fp, r5, lsr ip

		// We will use L6 with the Right joystick to control both body offset as well as Speed...
		// We move each pass through this by a percentage of how far we are from center in each direction
		// We get feedback with height by seeing the robot move up and down.  For Speed, I put in sounds
		// which give an idea, but only for those whoes robot has a speaker
		int lx = leftH;
    1818:	00983600 	addseq	r3, r8, r0, lsl #12
		int ly = leftV;
		if (buttons & BUT_L6) {
    181c:	ce330000 	cdpgt	0, 3, cr0, cr3, cr0, {0}

		// We will use L6 with the Right joystick to control both body offset as well as Speed...
		// We move each pass through this by a percentage of how far we are from center in each direction
		// We get feedback with height by seeing the robot move up and down.  For Speed, I put in sounds
		// which give an idea, but only for those whoes robot has a speaker
		int lx = leftH;
    1820:	ef000005 	svc	0x00000005
    1824:	00000007 	andeq	r0, r0, r7
		int ly = leftV;
    1828:	012e0000 	teqeq	lr, r0
    182c:	000016a4 	andeq	r1, r0, r4, lsr #13
		if (buttons & BUT_L6) {
    1830:	0105af03 	tsteq	r5, r3, lsl #30
    1834:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
			// raise or lower the robot on the joystick up /down
			// Maybe should have Min/Max
			int delta = rightV / 25;
    1840:	0c5c5d01 	mrrceq	13, 0, r5, ip, cr1
    1844:	512b0000 	teqpl	fp, r0
    1848:	03000013 	movweq	r0, #19	; 0x13
    184c:	002c05af 	eoreq	r0, ip, pc, lsr #11
			if (delta) {
    1850:	08650000 	stmdaeq	r5!, {}^
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
    1854:	66220000 	strtvs	r0, [r2], -r0
    1858:	0300000c 	movweq	r0, #12	; 0xc
    185c:	002c05af 	eoreq	r0, ip, pc, lsr #11
    1860:	51010000 	tstpl	r1, r0
    1864:	00142722 	andseq	r2, r4, r2, lsr #14
    1868:	05af0300 	streq	r0, [pc, #768]!	; 1b70 <__Stack_Size+0x1770>
    186c:	00000074 	andeq	r0, r0, r4, ror r0
    1870:	38005201 	stmdacc	r0, {r0, r9, ip, lr}
    1874:	0014f701 	andseq	pc, r4, r1, lsl #14
			sLegInitAngleAdjust = ly / 8;
			lx = 0;
			ly = 0;

			// Likewise for Speed control
			delta = rightH / 16;   //
    1878:	05bd0300 	ldreq	r0, [sp, #768]!
    187c:	0000a201 	andeq	sl, r0, r1, lsl #4
	...
    1888:	00088e00 	andeq	r8, r8, r0, lsl #28
			if ((delta < 0) && g_InControlState.SpeedControl) {
    188c:	91012a00 	tstls	r1, r0, lsl #20
    1890:	03000016 	movweq	r0, #22	; 0x16
    1894:	000105d1 	ldrdeq	r0, [r1], -r1
				if ((word)(-delta) < g_InControlState.SpeedControl)
    1898:	00000000 	andeq	r0, r0, r0
					g_InControlState.SpeedControl += delta;
    189c:	b9000000 	stmdblt	r0, {}
				else
					g_InControlState.SpeedControl = 0;
    18a0:	ad000008 	stcge	0, cr0, [r0, #-32]
    18a4:	2b00000c 	blcs	18dc <__Stack_Size+0x14dc>

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}
			if ((delta > 0) && (g_InControlState.SpeedControl < 2000)) {
    18a8:	0000113b 	andeq	r1, r0, fp, lsr r1
    18ac:	a205d103 	andge	sp, r5, #-1073741824	; 0xc0000000
    18b0:	e4000000 	str	r0, [r0]
				g_InControlState.SpeedControl += delta;
				if (g_InControlState.SpeedControl > 2000)
    18b4:	31000008 	tstcc	r0, r8
					g_InControlState.SpeedControl = 0;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}
			if ((delta > 0) && (g_InControlState.SpeedControl < 2000)) {
				g_InControlState.SpeedControl += delta;
    18b8:	00000d70 	andeq	r0, r0, r0, ror sp
				if (g_InControlState.SpeedControl > 2000)
					g_InControlState.SpeedControl = 2000;
    18bc:	6305de03 	movwvs	sp, #24067	; 0x5e03
    18c0:	00000000 	andeq	r0, r0, r0

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
    18c4:	0005f91c 	andeq	pc, r5, ip, lsl r9
	...
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
				fAdjustLegPositions = true;
			}

			// Also use right Horizontal to manually adjust the initial leg positions.
			sLegInitXZAdjust = lx / 10;        // play with this.
    18d0:	1d5d0100 	ldfnee	f0, [sp]
    18d4:	00000619 	andeq	r0, r0, r9, lsl r6
	...
			sLegInitAngleAdjust = ly / 8;
    18e0:	0cd75d01 	ldcleq	13, cr5, [r7], {1}
    18e4:	281e0000 	ldmdacs	lr, {}
    18e8:	01000006 	tsteq	r0, r6
    18ec:	01390050 	teqeq	r9, r0, asr r0
					g_InControlState.SpeedControl = 2000;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}

			rightH = 0; // don't walk when adjusting the speed here...
    18f0:	0000158e 	andeq	r1, r0, lr, lsl #11
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
				fAdjustLegPositions = true;
			}

			// Also use right Horizontal to manually adjust the initial leg positions.
			sLegInitXZAdjust = lx / 10;        // play with this.
    18f4:	00061c03 	andeq	r1, r6, r3, lsl #24
					g_InControlState.SpeedControl = 2000;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}

			rightH = 0; // don't walk when adjusting the speed here...
    18f8:	00000000 	andeq	r0, r0, r0
		}

		//[Walk functions]
		if (ControlMode == WALKMODE) {
    18fc:	02000000 	andeq	r0, r0, #0	; 0x0
    1900:	0f000009 	svceq	0x00000009
    1904:	3a00000d 	bcc	1940 <__Stack_Size+0x1540>

			//Switch gates
			if (((buttons & BUT_R1) && !(buttonsPrev & BUT_R1))
    1908:	25030069 	strcs	r0, [r3, #-105]
    190c:	00006306 	andeq	r6, r0, r6, lsl #6
    1910:	00092d00 	andeq	r2, r9, r0, lsl #26
    1914:	113b2c00 	teqne	fp, r0, lsl #24
    1918:	26030000 	strcs	r0, [r3], -r0
    191c:	0000a206 	andeq	sl, r0, r6, lsl #4
    1920:	00094b00 	andeq	r4, r9, r0, lsl #22
    1924:	01380000 	teqeq	r8, r0
    1928:	00000c1a 	andeq	r0, r0, sl, lsl ip
    192c:	01032403 	tsteq	r3, r3, lsl #8
    1930:	000000b4 	strheq	r0, [r0], -r4
	...
    193c:	00000969 	andeq	r0, r0, r9, ror #18
    1940:	122a0128 	eorne	r0, sl, #10	; 0xa
    1944:	e6020000 	str	r0, [r2], -r0
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
    1948:	00000101 	andeq	r0, r0, r1, lsl #2
					&& abs(g_InControlState.TravelLength.x) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
    194c:	00000000 	andeq	r0, r0, r0
    1950:	09940000 	ldmibeq	r4, {}
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
    1954:	01280000 	teqeq	r8, r0
					&& abs(g_InControlState.TravelLength.x) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
    1958:	000014b2 	strheq	r1, [r0], -r2
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
					Buzzed(50, 2000);
    195c:	0101b302 	tsteq	r1, r2, lsl #6
	...
				} else {
					Buzzed(50, 2000);
    1968:	000009bf 	strheq	r0, [r0], -pc
    196c:	1271012a 	rsbsne	r0, r1, #-2147483638	; 0x8000000a
    1970:	1c020000 	stcne	0, cr0, [r2], {0}
					Buzzed(50, 2250);
    1974:	00000101 	andeq	r0, r0, r1, lsl #2
    1978:	00000000 	andeq	r0, r0, r0
					g_InControlState.GaitType = 0;
    197c:	09ea0000 	stmibeq	sl!, {}^
    1980:	0dbd0000 	ldceq	0, cr0, [sp]
}

void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {
    1984:	dd2b0000 	stcle	0, cr0, [fp]
    1988:	02000011 	andeq	r0, r0, #17	; 0x11
    198c:	0063011c 	rsbeq	r0, r3, ip, lsl r1

		g_InControlState.gaitCur = APG[g_InControlState.GaitType];
    1990:	0a150000 	beq	541998 <__Stack_Size+0x541598>
    1994:	862b0000 	strthi	r0, [fp], -r0
    1998:	0200000e 	andeq	r0, r0, #14	; 0xe
    199c:	0063011c 	rsbeq	r0, r3, ip, lsl r1
    19a0:	0a330000 	beq	cc19a8 <__Stack_Size+0xcc15a8>
				}
				GaitSelect();
			}

			//Double leg lift height
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    19a4:	693b0000 	ldmdbvs	fp!, {}
    19a8:	01350200 	teqeq	r5, r0, lsl #4
    19ac:	00000584 	andeq	r0, r0, r4, lsl #11
    19b0:	de315501 	cdple	5, 3, cr5, cr1, cr1, {0}
    19b4:	0200001d 	andeq	r0, r0, #29	; 0x1d
				Buzzed(50, 2000);
    19b8:	00510143 	subseq	r0, r1, r3, asr #2
    19bc:	003c0000 	eorseq	r0, ip, r0
				HeightSpeedMode = (HeightSpeedMode + 1) & 0x3; // wrap around mode
    19c0:	00000000 	andeq	r0, r0, r0
    19c4:	15000000 	strne	r0, [r0]
    19c8:	02006469 	andeq	r6, r0, #1761607680	; 0x69000000
    19cc:	00740137 	rsbseq	r0, r4, r7, lsr r1
				DoubleTravelOn = HeightSpeedMode & 0x1;
    19d0:	00000000 	andeq	r0, r0, r0
    19d4:	153c012a 	ldrne	r0, [ip, #-298]!
				if (HeightSpeedMode & 0x2)
    19d8:	c6020000 	strgt	r0, [r2], -r0
    19dc:	00000101 	andeq	r0, r0, r1, lsl #2
					g_InControlState.LegLiftHeight = 80;
    19e0:	00000000 	andeq	r0, r0, r0
    19e4:	0a510000 	beq	14419ec <__Stack_Size+0x14415ec>
				else
					g_InControlState.LegLiftHeight = 50;
			}

			// Switch between Walk method 1 && Walk method 2
			if ((buttons & BUT_R2) && !(buttonsPrev & BUT_R2)) {
    19e8:	0dec0000 	stcleq	0, cr0, [ip]
    19ec:	b0360000 	eorslt	r0, r6, r0
    19f0:	3a000000 	bcc	19f8 <__Stack_Size+0x15f8>
    19f4:	d0020069 	andle	r0, r2, r9, rrx
    19f8:	00058401 	andeq	r8, r5, r1, lsl #8

				if ((++bJoystickWalkMode) > 1)
    19fc:	000a7000 	andeq	r7, sl, r0
    1a00:	3d000000 	stccc	0, cr0, [r0]
    1a04:	00109801 	andseq	r9, r0, r1, lsl #16

					bJoystickWalkMode = 0;
				Buzzed(50, 2000 + bJoystickWalkMode * 250);
    1a08:	01b20200 	undefined instruction 0x01b20200
	...
    1a14:	00000a8e 	andeq	r0, r0, lr, lsl #21
    1a18:	00000e15 	andeq	r0, r0, r5, lsl lr
    1a1c:	0000c836 	andeq	ip, r0, r6, lsr r8
			}

			//Walking
			switch (bJoystickWalkMode) {
    1a20:	00693e00 	rsbeq	r3, r9, r0, lsl #28
    1a24:	0074bb02 	rsbseq	fp, r4, r2, lsl #22
    1a28:	00000000 	andeq	r0, r0, r0
			case 0:
				g_InControlState.TravelLength.x = -lx;
    1a2c:	1463012a 	strbtne	r0, [r3], #-298
    1a30:	9f020000 	svcls	0x00020000
    1a34:	00000101 	andeq	r0, r0, r1, lsl #2
				g_InControlState.TravelLength.z = -ly;
    1a38:	00000000 	andeq	r0, r0, r0
				g_InControlState.TravelLength.y = -(rightH) / 4; //Right Stick Left/Right
				break;
			case 1:
				g_InControlState.TravelLength.z = (rightV); //Right Stick Up/Down
    1a3c:	0ab90000 	beq	fee41a44 <SCS_BASE+0x1ee33a44>
    1a40:	0e440000 	cdpeq	0, 4, cr0, cr4, cr0, {0}
    1a44:	003c0000 	eorseq	r0, ip, r0
				g_InControlState.TravelLength.y = -(rightH) / 4; //Right Stick Left/Right
    1a48:	00000000 	andeq	r0, r0, r0
    1a4c:	15000000 	strne	r0, [r0]
    1a50:	a4020069 	strge	r0, [r2], #-105
    1a54:	00007401 	andeq	r7, r0, r1, lsl #8
    1a58:	3f000000 	svccc	0x00000000
    1a5c:	0015ff01 	andseq	pc, r5, r1, lsl #30
				break;

			}

			if (!DoubleTravelOn) {  //(Double travel length)
    1a60:	01650200 	cmneq	r5, r0, lsl #4
	...
				g_InControlState.TravelLength.x =
    1a6c:	00000ae4 	andeq	r0, r0, r4, ror #21
						g_InControlState.TravelLength.x / 2;
				g_InControlState.TravelLength.z =
    1a70:	161a012a 	ldrne	r0, [sl], -sl, lsr #2
    1a74:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
    1a78:	00000102 	andeq	r0, r0, r2, lsl #2
			}

		}

		//[Translate functions]
		g_BodyYShift = 0;
    1a7c:	00000000 	andeq	r0, r0, r0
    1a80:	0b0f0000 	bleq	3c1a88 <__Stack_Size+0x3c1688>
		if (ControlMode == TRANSLATEMODE) {
    1a84:	0e8c0000 	cdpeq	0, 8, cr0, cr12, cr0, {0}
    1a88:	04400000 	strbeq	r0, [r0]

		      g_InControlState.BodyPos.x =  SmoothControl(((lx)*2/3), g_InControlState.BodyPos.x, SmDiv);
    1a8c:	e0000006 	and	r0, r0, r6
    1a90:	03000000 	movweq	r0, #0	; 0x0
    1a94:	0f4002fb 	svceq	0x004002fb
    1a98:	00000006 	andeq	r0, r0, r6
    1a9c:	03000001 	movweq	r0, #1	; 0x1
    1aa0:	2a0002fd 	bcs	269c <__Stack_Size+0x229c>
    1aa4:	0015be01 	andseq	fp, r5, r1, lsl #28
    1aa8:	01510200 	cmpeq	r1, r0, lsl #4
		      g_InControlState.BodyPos.z =  SmoothControl(((ly)*2/3), g_InControlState.BodyPos.z, SmDiv);
    1aac:	00000001 	andeq	r0, r0, r1
    1ab0:	00000000 	andeq	r0, r0, r0
    1ab4:	000b2e00 	andeq	r2, fp, r0, lsl #28
    1ab8:	000f0000 	andeq	r0, pc, r0
    1abc:	17ba2b00 	ldrne	r2, [sl, r0, lsl #22]!
		      g_InControlState.BodyRot1.y = SmoothControl(((rightH)*2), g_InControlState.BodyRot1.y, SmDiv);
    1ac0:	51020000 	tstpl	r2, r0
		//[Translate functions]
		g_BodyYShift = 0;
		if (ControlMode == TRANSLATEMODE) {

		      g_InControlState.BodyPos.x =  SmoothControl(((lx)*2/3), g_InControlState.BodyPos.x, SmDiv);
		      g_InControlState.BodyPos.z =  SmoothControl(((ly)*2/3), g_InControlState.BodyPos.z, SmDiv);
    1ac4:	0000a201 	andeq	sl, r0, r1, lsl #4
		      g_InControlState.BodyRot1.y = SmoothControl(((rightH)*2), g_InControlState.BodyRot1.y, SmDiv);
    1ac8:	000b5900 	andeq	r5, fp, r0, lsl #18
    1acc:	00003c00 	andeq	r3, r0, r0, lsl #24
    1ad0:	00000000 	andeq	r0, r0, r0
    1ad4:	693a0000 	ldmdbvs	sl!, {}


			//      g_InControlState.BodyPos.x = (lx)/2;
			//      g_InControlState.BodyPos.z = -(ly)/3;
			//      g_InControlState.BodyRot1.y = (rightH)*2;
			g_BodyYShift = (-(rightV) / 2);
    1ad8:	01770200 	cmneq	r7, r0, lsl #4
    1adc:	00000584 	andeq	r0, r0, r4, lsl #11
    1ae0:	00000b84 	andeq	r0, r0, r4, lsl #23
    1ae4:	0011192c 	andseq	r1, r1, ip, lsr #18
    1ae8:	01780200 	cmneq	r8, r0, lsl #4
    1aec:	000000a2 	andeq	r0, r0, r2, lsr #1
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
    1af0:	00000bc8 	andeq	r0, r0, r8, asr #23
			g_InControlState.BodyRot1.x = (ly);
			g_InControlState.BodyRot1.y = (rightH) * 2;
    1af4:	001dde31 	andseq	sp, sp, r1, lsr lr
    1af8:	018a0200 	orreq	r0, sl, r0, lsl #4
			g_InControlState.BodyRot1.z = (lx);
			g_BodyYShift = (-(rightV) / 2);
    1afc:	00000051 	andeq	r0, r0, r1, asr r0
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
			g_InControlState.BodyRot1.x = (ly);
			g_InControlState.BodyRot1.y = (rightH) * 2;
    1b00:	0000003c 	andeq	r0, r0, ip, lsr r0
			g_BodyYShift = (-(rightV) / 2);
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
			g_InControlState.BodyRot1.x = (ly);
    1b04:	00000000 	andeq	r0, r0, r0
			g_InControlState.BodyRot1.y = (rightH) * 2;
			g_InControlState.BodyRot1.z = (lx);
			g_BodyYShift = (-(rightV) / 2);
    1b08:	64691500 	strbtvs	r1, [r9], #-1280
    1b0c:	017c0200 	cmneq	ip, r0, lsl #4
    1b10:	00000074 	andeq	r0, r0, r4, ror r0
    1b14:	3d000000 	stccc	0, cr0, [r0]
    1b18:	0015d901 	andseq	sp, r5, r1, lsl #18
		}

		//[Single leg functions]
#ifdef OPT_SINGLELEG
		if (ControlMode == SINGLELEGMODE) {
    1b1c:	01cf0200 	biceq	r0, pc, r0, lsl #4
	...

			//Switch leg for single leg control
			if ((buttons & BUT_R1) && !(buttonsPrev & BUT_R1)) {
    1b28:	00000bdb 	ldrdeq	r0, [r0], -fp
    1b2c:	00000f77 	andeq	r0, r0, r7, ror pc
    1b30:	000d7024 	andeq	r7, sp, r4, lsr #32
				Buzzed(50,2000);
    1b34:	74cc0200 	strbvc	r0, [ip], #512
    1b38:	06000000 	streq	r0, [r0], -r0
    1b3c:	2400000c 	strcs	r0, [r0], #-12
				if (g_InControlState.SelectedLeg < (CNT_LEGS-1)) {
    1b40:	000010b1 	strheq	r1, [r0], -r1
    1b44:	002ccc02 	eoreq	ip, ip, r2, lsl #24
					g_InControlState.SelectedLeg = g_InControlState.SelectedLeg + 1;
				} else {
					g_InControlState.SelectedLeg = 0;
    1b48:	0c240000 	stceq	0, cr0, [r4]
		if (ControlMode == SINGLELEGMODE) {

			//Switch leg for single leg control
			if ((buttons & BUT_R1) && !(buttonsPrev & BUT_R1)) {
				Buzzed(50,2000);
				if (g_InControlState.SelectedLeg < (CNT_LEGS-1)) {
    1b4c:	9a240000 	bls	901b54 <__Stack_Size+0x901754>
					g_InControlState.SelectedLeg = g_InControlState.SelectedLeg + 1;
    1b50:	02000018 	andeq	r0, r0, #24	; 0x18
			   g_InControlState.SLLeg.x= (signed char)((int)((int)lx+128)/2); //Left Stick Right/Left
      		   g_InControlState.SLLeg.y= (signed char)((int)((int)rightV+128)/10); //Right Stick Up/Down
		       g_InControlState.SLLeg.z = (signed char)((int)((int)ly+128)/2); //Left Stick Up/Down

#else
			g_InControlState.SLLeg.x = lx; //Left Stick Right/Left
    1b54:	00002ccc 	andeq	r2, r0, ip, asr #25
			g_InControlState.SLLeg.y = rightV / 3 - 20;//Right Stick Up/Down
    1b58:	000c3700 	andeq	r3, ip, r0, lsl #14
    1b5c:	14bb2400 	ldrtne	r2, [fp], #1024
    1b60:	cd020000 	stcgt	0, cr0, [r2]
    1b64:	0000002c 	andeq	r0, r0, ip, lsr #32
    1b68:	00000c4a 	andeq	r0, r0, sl, asr #24
			g_InControlState.SLLeg.z = ly;//Left Stick Up/Down

#endif
			// Hold single leg in place
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    1b6c:	0013bd27 	andseq	fp, r3, r7, lsr #26
    1b70:	a2d00200 	sbcsge	r0, r0, #0	; 0x0
    1b74:	27000000 	strcs	r0, [r0, -r0]
      		   g_InControlState.SLLeg.y= (signed char)((int)((int)rightV+128)/10); //Right Stick Up/Down
		       g_InControlState.SLLeg.z = (signed char)((int)((int)ly+128)/2); //Left Stick Up/Down

#else
			g_InControlState.SLLeg.x = lx; //Left Stick Right/Left
			g_InControlState.SLLeg.y = rightV / 3 - 20;//Right Stick Up/Down
    1b78:	00001459 	andeq	r1, r0, r9, asr r4
			g_InControlState.SLLeg.z = ly;//Left Stick Up/Down

#endif
			// Hold single leg in place
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    1b7c:	00a2d102 	adceq	sp, r2, r2, lsl #2
    1b80:	19270000 	stmdbne	r7!, {}
    1b84:	02000018 	andeq	r0, r0, #24	; 0x18
				Buzzed(50,2000);
    1b88:	0000a2d2 	ldrdeq	sl, [r0], -r2
    1b8c:	012a0000 	teqeq	sl, r0
				g_InControlState.fSLHold = !g_InControlState.fSLHold;
    1b90:	00001371 	andeq	r1, r0, r1, ror r3
    1b94:	01030603 	tsteq	r3, r3, lsl #12
	...
			}
		}
#endif

		//Calculate walking time delay
		g_InControlState.InputTimeDelay = 128- max(max(abs(lx), abs(ly)), abs(rightH));
    1ba0:	00000c5d 	andeq	r0, r0, sp, asr ip
    1ba4:	00000fa2 	andeq	r0, r0, r2, lsr #31
    1ba8:	000d702c 	andeq	r7, sp, ip, lsr #32
    1bac:	03070300 	movweq	r0, #29440	; 0x7300
    1bb0:	00000074 	andeq	r0, r0, r4, ror r0
    1bb4:	00000c88 	andeq	r0, r0, r8, lsl #25
    1bb8:	c8014100 	stmdagt	r1, {r8, lr}
    1bbc:	02000010 	andeq	r0, r0, #16	; 0x10
    1bc0:	00a20199 	umlaleq	r0, r2, r9, r1
	...
    1bcc:	0c9b0000 	ldceq	0, cr0, [fp], {0}
    1bd0:	0fe00000 	svceq	0x00e00000

		//Calculate g_InControlState.BodyPos.y
		g_InControlState.BodyPos.y = max(g_BodyYOffset + g_BodyYShift, 0);
    1bd4:	d2270000 	eorle	r0, r7, #0	; 0x0
    1bd8:	0200000e 	andeq	r0, r0, #14	; 0xe
    1bdc:	0000639f 	muleq	r0, pc, r3
    1be0:	00003c00 	andeq	r3, r0, r0, lsl #24
    1be4:	00000000 	andeq	r0, r0, r0
    1be8:	0a270000 	beq	9c1bf0 <__Stack_Size+0x9c17f0>

		if (sLegInitXZAdjust || sLegInitAngleAdjust) {
    1bec:	02000016 	andeq	r0, r0, #22	; 0x16
    1bf0:	0000a2a1 	andeq	sl, r0, r1, lsr #5
			// User asked for manual leg adjustment - only do when we have finished any previous adjustment

			if (!g_InControlState.ForceGaitStepCnt) {
    1bf4:	42000000 	andmi	r0, r0, #0	; 0x0
				if (sLegInitXZAdjust)
    1bf8:	000c9a01 	andeq	r9, ip, r1, lsl #20
					g_fDynamicLegXZLength = true;
    1bfc:	021c0100 	andseq	r0, ip, #0	; 0x0
    1c00:	00000584 	andeq	r0, r0, r4, lsl #11
	...
				// Handle maybe change angles...
				if (sLegInitAngleAdjust)
					RotateLegInitAngles(sLegInitAngleAdjust);

				// Give system time to process previous calls
				AdjustLegPositions(sLegInitXZAdjust);
    1c0c:	00000cba 	strheq	r0, [r0], -sl
			}
		}

		if (fAdjustLegPositions && !g_fDynamicLegXZLength)
    1c10:	1653013d 	undefined
    1c14:	d0010000 	andle	r0, r1, r0
    1c18:	00000001 	andeq	r0, r0, r1
			AdjustLegPositionsToBodyHeight(); // Put main workings into main program file
    1c1c:	00000000 	andeq	r0, r0, r0
		// Save away the buttons state as to not process the same press twice.
		buttonsPrev = buttons;
    1c20:	000ce500 	andeq	lr, ip, r0, lsl #10
    1c24:	00109600 	andseq	r9, r0, r0, lsl #12
		extPrev = ext;
    1c28:	00003c00 	andeq	r3, r0, r0, lsl #24
    1c2c:	00000000 	andeq	r0, r0, r0
		g_ulLastMsgTime = getMillis();
    1c30:	90260000 	eorls	r0, r6, r0
    1c34:	01000016 	tsteq	r0, r6, lsl r0
	} else {
		// We did not receive a valid packet.  check for a timeout to see if we should turn robot off...
		if (g_InControlState.fRobotOn) {
    1c38:	0000b4d5 	ldrdeq	fp, [r0], -r5
			if ((getMillis() - g_ulLastMsgTime) > ARBOTIX_TO)
    1c3c:	000d1000 	andeq	r1, sp, r0
    1c40:	186e2600 	stmdane	lr!, {r9, sl, sp}^
    1c44:	d6010000 	strle	r0, [r1], -r0
    1c48:	0000002c 	andeq	r0, r0, ip, lsr #32
    1c4c:	00000d48 	andeq	r0, r0, r8, asr #26
				CommanderTurnRobotOff();
    1c50:	00135d26 	andseq	r5, r3, r6, lsr #26
		}
	}

}
    1c54:	2cd70100 	ldfcse	f0, [r7], {0}
    1c58:	80000000 	andhi	r0, r0, r0
    1c5c:	3a00000d 	bcc	1c98 <__Stack_Size+0x1898>
    1c60:	0100786c 	tsteq	r0, ip, ror #16
    1c64:	0584010b 	streq	r0, [r4, #267]
    1c68:	0db80000 	ldceq	0, cr0, [r8]
    1c6c:	6c3a0000 	ldcvs	0, cr0, [sl]
    1c70:	0c010079 	stceq	0, cr0, [r1], {121}
    1c74:	00058401 	andeq	r8, r5, r1, lsl #8
    1c78:	000dfc00 	andeq	pc, sp, r0, lsl #24
    1c7c:	00004300 	andeq	r4, r0, r0, lsl #6
    1c80:	00000000 	andeq	r0, r0, r0
    1c84:	10840000 	addne	r0, r4, r0
    1c88:	f12c0000 	undefined instruction 0xf12c0000
    1c8c:	01000014 	tsteq	r0, r4, lsl r0
    1c90:	05840110 	streq	r0, [r4, #272]
    1c94:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
    1c98:	44000000 	strmi	r0, [r0]
    1c9c:	00000604 	andeq	r0, r0, r4, lsl #12
	...
    1ca8:	00014301 	andeq	r4, r1, r1, lsl #6
    1cac:	48012d00 	stmdami	r1, {r8, sl, fp, sp}

extern void setupPhoenix(void);
extern void readSensors(void);


int Big_main(void) {
    1cb0:	03000013 	movweq	r0, #19	; 0x13

	// Must include this line in all programs using "cm530.h/.c"
	SysInit();
    1cb4:	840101dc 	strhi	r0, [r1], #-476
	setupPhoenix();
    1cb8:	00000005 	andeq	r0, r0, r5
			TotalYBal1 = 0;
			TotalZBal1 = 0;

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1cbc:	00000000 	andeq	r0, r0, r0

	while (1){
		while (1) {
			//Start time
			unsigned long lTimeWaitEnd;
			lTimerStart = getMillis();
    1cc0:	59000000 	stmdbpl	r0, {}
    1cc4:	cf00000e 	svcgt	0x0000000e
    1cc8:	3c000010 	stccc	0, cr0, [r0], {16}
	...
			PrintString("\n");
#endif
			DoBackgroundProcess();
			//Read input
			CheckVoltage();        // check our voltages...
			if (!g_fLowVoltageShutdown) {
    1cd4:	0016ca2c 	andseq	ip, r6, ip, lsr #20
    1cd8:	01e60300 	mvneq	r0, r0, lsl #6
				CommanderInputController_ControlInput();
    1cdc:	0000004a 	andeq	r0, r0, sl, asr #32
			}
			WriteOutputs();        // Write Outputs
			//Single leg control
			SingleLegControl();
    1ce0:	00000e84 	andeq	r0, r0, r4, lsl #29
			DoBackgroundProcess();
    1ce4:	34270000 	strtcc	r0, [r7]

			//Gait
			GaitSeq();
    1ce8:	08000005 	stmdaeq	r0, {r0, r2}

			DoBackgroundProcess();
    1cec:	0010da2a 	andseq	sp, r0, sl, lsr #20

			//Balance calculations
			TotalTransX = 0;     //reset values used for calculation of balance
    1cf0:	00634500 	rsbeq	r4, r3, r0, lsl #10
    1cf4:	65270000 	strvs	r0, [r7]!
			TotalTransZ = 0;
    1cf8:	08000002 	stmdaeq	r0, {r1}
			TotalTransY = 0;
    1cfc:	0010ea28 	andseq	lr, r0, r8, lsr #20
    1d00:	00514500 	subseq	r4, r1, r0, lsl #10
			TotalXBal1 = 0;
    1d04:	f6270000 	undefined instruction 0xf6270000
			TotalYBal1 = 0;
    1d08:	08000003 	stmdaeq	r0, {r0, r1}
    1d0c:	0010ea28 	andseq	lr, r0, r8, lsr #20
			TotalZBal1 = 0;
    1d10:	00630d00 	rsbeq	r0, r3, r0, lsl #26

			if (g_InControlState.BalanceMode) {
    1d14:	110b0000 	tstne	fp, r0
    1d18:	9f460000 	svcls	0x00460000
    1d1c:	ff000000 	undefined instruction 0xff000000

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1d20:	7a270003 	bvc	9c1d34 <__Stack_Size+0x9c1934>

					DoBackgroundProcess();
					BalCalcOneLeg(-LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d24:	08000004 	stmdaeq	r0, {r2}
    1d28:	00111629 	andseq	r1, r1, r9, lsr #12
    1d2c:	10fa4500 	rscsne	r4, sl, r0, lsl #10

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs

					DoBackgroundProcess();
    1d30:	15470000 	strbne	r0, [r7]
					BalCalcOneLeg(-LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d34:	08000006 	stmdaeq	r0, {r1, r2}
    1d38:	0010da44 	andseq	sp, r0, r4, asr #20
    1d3c:	93470000 	movtls	r0, #28672	; 0x7000
    1d40:	08000003 	stmdaeq	r0, {r0, r1}
    1d44:	0010da44 	andseq	sp, r0, r4, asr #20
    1d48:	630d0000 	movwvs	r0, #53248	; 0xd000
    1d4c:	43000000 	movwmi	r0, #0	; 0x0
    1d50:	0e000011 	mcreq	0, 0, r0, cr0, cr1, {0}
    1d54:	0000009f 	muleq	r0, pc, r0
    1d58:	ec270040 	stc	0, cr0, [r7], #-256
    1d5c:	08000000 	stmdaeq	r0, {}
    1d60:	00114e45 	andseq	r4, r1, r5, asr #28
    1d64:	11334500 	teqne	r3, r0, lsl #10
    1d68:	e4470000 	strb	r0, [r7]
    1d6c:	08000005 	stmdaeq	r0, {r0, r2}
			TotalYBal1 = 0;
			TotalZBal1 = 0;

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1d70:	0010ea58 	andseq	lr, r0, r8, asr sl
    1d74:	f9470000 	undefined instruction 0xf9470000
    1d78:	08000000 	stmdaeq	r0, {}
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
    1d7c:	0010ea58 	andseq	lr, r0, r8, asr sl
    1d80:	b2270000 	eorlt	r0, r7, #0	; 0x0
					DoBackgroundProcess();
					BalCalcOneLeg(LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d84:	08000002 	stmdaeq	r0, {r1}
    1d88:	00117659 	andseq	r7, r1, r9, asr r6
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
					DoBackgroundProcess();
    1d8c:	10fa4500 	rscsne	r4, sl, r0, lsl #10
					BalCalcOneLeg(LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d90:	94480000 	strbls	r0, [r8]
    1d94:	01000020 	tsteq	r0, r0, lsr #32
    1d98:	00006d8c 	andeq	r6, r0, ip, lsl #27
    1d9c:	00030500 	andeq	r0, r3, r0, lsl #10
    1da0:	48000000 	stmdami	r0, {}
    1da4:	00000ea2 	andeq	r0, r0, r2, lsr #29
    1da8:	002c9f01 	eoreq	r9, ip, r1, lsl #30
    1dac:	03050000 	movweq	r0, #20480	; 0x5000
    1db0:	00000000 	andeq	r0, r0, r0
    1db4:	00143348 	andseq	r3, r4, r8, asr #6
    1db8:	2ca00100 	stfcss	f0, [r0]
    1dbc:	05000000 	streq	r0, [r0]
    1dc0:	00000003 	andeq	r0, r0, r3
    1dc4:	0fc34800 	svceq	0x00c34800
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
    1dc8:	a1010000 	tstge	r1, r0
    1dcc:	00000074 	andeq	r0, r0, r4, ror r0
    1dd0:	00000305 	andeq	r0, r0, r5, lsl #6
							LegPosZ[LegIndex] + GaitPosZ[LegIndex],
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}
				BalanceBody();
    1dd4:	81480000 	cmphi	r8, r0
			}

			//Reset IKsolution indicators
			IKSolution = 0;
    1dd8:	0100000f 	tsteq	r0, pc
    1ddc:	000074a2 	andeq	r7, r0, r2, lsr #9
			IKSolutionWarning = 0;
			IKSolutionError = 0;

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
    1de0:	00030500 	andeq	r0, r3, r0, lsl #10
			}

			//Reset IKsolution indicators
			IKSolution = 0;
			IKSolutionWarning = 0;
			IKSolutionError = 0;
    1de4:	48000000 	stmdami	r0, {}
    1de8:	000012c1 	andeq	r1, r0, r1, asr #5

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
				DoBackgroundProcess();
    1dec:	0094a401 	addseq	sl, r4, r1, lsl #8
				BodyFK(
    1df0:	03050000 	movweq	r0, #20480	; 0x5000
    1df4:	00000000 	andeq	r0, r0, r0
    1df8:	00123c48 	andseq	r3, r2, r8, asr #24
    1dfc:	74a50100 	strtvc	r0, [r5], #256
    1e00:	05000000 	streq	r0, [r0]
    1e04:	00000003 	andeq	r0, r0, r3
    1e08:	100b4800 	andne	r4, fp, r0, lsl #16
    1e0c:	a8010000 	stmdage	r1, {}
    1e10:	00000074 	andeq	r0, r0, r4, ror r0
    1e14:	00000305 	andeq	r0, r0, r5, lsl #6
    1e18:	e9480000 	stmdb	r8, {}^
    1e1c:	01000014 	tsteq	r0, r4, lsl r0
    1e20:	000074a9 	andeq	r7, r0, r9, lsr #9
    1e24:	00030500 	andeq	r0, r3, r0, lsl #10
    1e28:	0d000000 	stceq	0, cr0, [r0]
    1e2c:	00000074 	andeq	r0, r0, r4, ror r0
    1e30:	00001224 	andeq	r1, r0, r4, lsr #4
    1e34:	00009f0e 	andeq	r9, r0, lr, lsl #30
    1e38:	48001100 	stmdami	r0, {r8, ip}
    1e3c:	000017f6 	strdeq	r1, [r0], -r6
    1e40:	12353f02 	eorsne	r3, r5, #8	; 0x8
    1e44:	03050000 	movweq	r0, #20480	; 0x5000
    1e48:	00000000 	andeq	r0, r0, r0
    1e4c:	00121403 	andseq	r1, r2, r3, lsl #8
						+ GaitPosZ[LegIndex] - TotalTransZ,
						LegPosY[LegIndex] + g_InControlState.BodyPos.y
						+ GaitPosY[LegIndex] - TotalTransY,
						GaitRotY[LegIndex], LegIndex);

				LegIK(
    1e50:	11093000 	tstne	r9, r0
    1e54:	b1020000 	tstlt	r2, r0
    1e58:	00006301 	andeq	r6, r0, r1, lsl #6
    1e5c:	00030500 	andeq	r0, r3, r0, lsl #10
    1e60:	30000000 	andcc	r0, r0, r0
    1e64:	00000cea 	andeq	r0, r0, sl, ror #25
    1e68:	6301b202 	movwvs	fp, #4610	; 0x1202
    1e6c:	05000000 	streq	r0, [r0]
    1e70:	00000003 	andeq	r0, r0, r3
    1e74:	00740d00 	rsbseq	r0, r4, r0, lsl #26
    1e78:	126f0000 	rsbne	r0, pc, #0	; 0x0
    1e7c:	9f460000 	svcls	0x00460000
    1e80:	15000000 	strne	r0, [r0]
    1e84:	b0480001 	sublt	r0, r8, r1
    1e88:	03000011 	movweq	r0, #17	; 0x11
    1e8c:	00128047 	andseq	r8, r2, r7, asr #32
    1e90:	00030500 	andeq	r0, r3, r0, lsl #10
    1e94:	03000000 	movweq	r0, #0	; 0x0
    1e98:	0000125e 	andeq	r1, r0, lr, asr r2
    1e9c:	0000a20d 	andeq	sl, r0, sp, lsl #4
    1ea0:	00129500 	andseq	r9, r2, r0, lsl #10
    1ea4:	009f0e00 	addseq	r0, pc, r0, lsl #28
    1ea8:	00b40000 	adcseq	r0, r4, r0
    1eac:	000e6148 	andeq	r6, lr, r8, asr #2
    1eb0:	a65b0300 	ldrbge	r0, [fp], -r0, lsl #6
    1eb4:	05000012 	streq	r0, [r0, #-18]
    1eb8:	00000003 	andeq	r0, r0, r3
    1ebc:	12850300 	addne	r0, r5, #0	; 0x0
    1ec0:	ec490000 	mar	acc0, r0, r9
			IKSolutionWarning = 0;
			IKSolutionError = 0;

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
    1ec4:	03000017 	movweq	r0, #23	; 0x17
    1ec8:	007401be 	ldrhteq	r0, [r4], #-30
    1ecc:	05010000 	streq	r0, [r1]
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Do IK for all Left legs
			for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) {
    1ed0:	00000003 	andeq	r0, r0, r3
    1ed4:	10174900 	andsne	r4, r7, r0, lsl #18
				DoBackgroundProcess();
    1ed8:	0d030000 	stceq	0, cr0, [r3]
				BodyFK(
    1edc:	0000b401 	andeq	fp, r0, r1, lsl #8
    1ee0:	03050100 	movweq	r0, #20736	; 0x5100
    1ee4:	00000000 	andeq	r0, r0, r0
    1ee8:	00112049 	andseq	r2, r1, r9, asr #32
    1eec:	010e0300 	tsteq	lr, r0, lsl #6
    1ef0:	000000b4 	strheq	r0, [r0], -r4
    1ef4:	00030501 	andeq	r0, r3, r1, lsl #10
    1ef8:	49000000 	stmdbmi	r0, {}
    1efc:	00000d16 	andeq	r0, r0, r6, lsl sp
    1f00:	b4016903 	strlt	r6, [r1], #-2307
    1f04:	01000000 	tsteq	r0, r0
    1f08:	00000305 	andeq	r0, r0, r5, lsl #6
    1f0c:	ad4a0000 	stclge	0, cr0, [sl]
    1f10:	03000015 	movweq	r0, #21	; 0x15
    1f14:	0002cf10 	andeq	ip, r2, r0, lsl pc
    1f18:	03050100 	movweq	r0, #20736	; 0x5100
    1f1c:	00000000 	andeq	r0, r0, r0
    1f20:	0000740d 	andeq	r7, r0, sp, lsl #8
    1f24:	00131900 	andseq	r1, r3, r0, lsl #18
    1f28:	009f0e00 	addseq	r0, pc, r0, lsl #28
    1f2c:	00010000 	andeq	r0, r1, r0
    1f30:	0015814a 	andseq	r8, r5, sl, asr #2
    1f34:	2b140300 	blcs	502b3c <__Stack_Size+0x50273c>
    1f38:	01000013 	tsteq	r0, r3, lsl r0
    1f3c:	00000305 	andeq	r0, r0, r5, lsl #6
    1f40:	09030000 	stmdbeq	r3, {}
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z
						+ GaitPosZ[LegIndex] - TotalTransZ,
						LegPosY[LegIndex] + g_InControlState.BodyPos.y
						+ GaitPosY[LegIndex] - TotalTransY,
						GaitRotY[LegIndex], LegIndex);
				LegIK(
    1f44:	4a000013 	bmi	1f98 <__Stack_Size+0x1b98>
    1f48:	00001846 	andeq	r1, r0, r6, asr #16
    1f4c:	13421503 	movtne	r1, #9475	; 0x2503
    1f50:	05010000 	streq	r0, [r1]
    1f54:	00000003 	andeq	r0, r0, r3
    1f58:	13090300 	movwne	r0, #37632	; 0x9300
    1f5c:	094a0000 	stmdbeq	sl, {}^
    1f60:	0100000d 	tsteq	r0, sp
    1f64:	00003386 	andeq	r3, r0, r6, lsl #7
    1f68:	03050100 	movweq	r0, #20736	; 0x5100
    1f6c:	00000000 	andeq	r0, r0, r0
    1f70:	000ce34a 	andeq	lr, ip, sl, asr #6
    1f74:	33870100 	orrcc	r0, r7, #0	; 0x0
    1f78:	01000000 	tsteq	r0, r0
    1f7c:	00000305 	andeq	r0, r0, r5, lsl #6
    1f80:	bd4a0000 	stcllt	0, cr0, [sl]
    1f84:	0100000f 	tsteq	r0, pc
    1f88:	00003388 	andeq	r3, r0, r8, lsl #7
    1f8c:	03050100 	movweq	r0, #20736	; 0x5100
    1f90:	00000000 	andeq	r0, r0, r0
    1f94:	000f9d4a 	andeq	r9, pc, sl, asr #26
    1f98:	33890100 	orrcc	r0, r9, #0	; 0x0
    1f9c:	01000000 	tsteq	r0, r0
    1fa0:	00000305 	andeq	r0, r0, r5, lsl #6
    1fa4:	654b0000 	strbvs	r0, [fp]
    1fa8:	01007478 	tsteq	r0, r8, ror r4
    1fac:	00006d8d 	andeq	r6, r0, sp, lsl #27
    1fb0:	03050100 	movweq	r0, #20736	; 0x5100
    1fb4:	00000000 	andeq	r0, r0, r0
    1fb8:	00006d0d 	andeq	r6, r0, sp, lsl #26
    1fbc:	0013b100 	andseq	fp, r3, r0, lsl #2
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Do IK for all Left legs
			for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) {
    1fc0:	009f0e00 	addseq	r0, pc, r0, lsl #28
    1fc4:	00060000 	andeq	r0, r6, r0
    1fc8:	000ded4a 	andeq	lr, sp, sl, asr #26
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Check mechanical limits
			CheckAngles();
    1fcc:	a1920100 	orrsge	r0, r2, r0, lsl #2

			//Drive Servos
			if (g_InControlState.fRobotOn) {
    1fd0:	01000013 	tsteq	r0, r3, lsl r0
    1fd4:	00000305 	andeq	r0, r0, r5, lsl #6
    1fd8:	504a0000 	subpl	r0, sl, r0
				if (g_InControlState.fRobotOn && !g_InControlState.fPrev_RobotOn) {
					// MSound(3, 60, 2000, 80, 2250, 100, 2500);
					Buzzed(30, 2000);
    1fdc:	01000014 	tsteq	r0, r4, lsl r0
    1fe0:	00058494 	muleq	r5, r4, r4
    1fe4:	03050100 	movweq	r0, #20736	; 0x5100
					Buzzed(80, 2250);
    1fe8:	00000000 	andeq	r0, r0, r0
    1fec:	000cd34a 	andeq	sp, ip, sl, asr #6
					Buzzed(100, 2500);
    1ff0:	4a9b0100 	bmi	fe6c23f8 <SCS_BASE+0x1e6b43f8>
    1ff4:	01000000 	tsteq	r0, r0
    1ff8:	00000305 	andeq	r0, r0, r5, lsl #6

				}

				//Calculate Servo Move time
				if ((abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
    1ffc:	274a0000 	strbcs	r0, [sl, -r0]
    2000:	0100000c 	tsteq	r0, ip
    2004:	00002c9c 	muleq	r0, ip, ip
    2008:	03050100 	movweq	r0, #20736	; 0x5100
    200c:	00000000 	andeq	r0, r0, r0
    2010:	0018234a 	andseq	r2, r8, sl, asr #6
    2014:	b49d0100 	ldrlt	r0, [sp], #256
    2018:	01000000 	tsteq	r0, r0
    201c:	00000305 	andeq	r0, r0, r5, lsl #6
    2020:	104a0000 	subne	r0, sl, r0
    2024:	0100000d 	tsteq	r0, sp
						|| (abs(g_InControlState.TravelLength.z) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.y*2) > cTravelDeadZone)) {
					ServoMoveTime = g_InControlState.gaitCur.NomGaitSpeed
    2028:	000074a6 	andeq	r7, r0, r6, lsr #9
    202c:	03050100 	movweq	r0, #20736	; 0x5100
    2030:	00000000 	andeq	r0, r0, r0
    2034:	00139f4a 	andseq	r9, r3, sl, asr #30
    2038:	b42d0200 	strtlt	r0, [sp], #-512
							+ (g_InControlState.InputTimeDelay * 2)
							+ g_InControlState.SpeedControl;

					//Add aditional delay when Balance mode is on
					if (g_InControlState.BalanceMode)
    203c:	01000000 	tsteq	r0, r0

				//Calculate Servo Move time
				if ((abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.z) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.y*2) > cTravelDeadZone)) {
					ServoMoveTime = g_InControlState.gaitCur.NomGaitSpeed
    2040:	00000305 	andeq	r0, r0, r5, lsl #6
							+ (g_InControlState.InputTimeDelay * 2)
							+ g_InControlState.SpeedControl;

					//Add aditional delay when Balance mode is on
					if (g_InControlState.BalanceMode)
						ServoMoveTime = ServoMoveTime + BALANCE_DELAY;
    2044:	244c0000 	strbcs	r0, [ip]
    2048:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
				} else
					//Movement speed excl. Walking
					ServoMoveTime = 200 + g_InControlState.SpeedControl;
    204c:	00006d41 	andeq	r6, r0, r1, asr #26
    2050:	4c010100 	stfmis	f0, [r1], {0}
    2054:	0000178f 	andeq	r1, r0, pc, lsl #15

				// note we broke up the servo driver into start/commit that way we can output all of the servo information
				// before we wait and only have the termination information to output after the wait.  That way we hopefully
				// be more accurate with our timings...
				DoBackgroundProcess();
    2058:	05844309 	streq	r4, [r4, #777]
				StartUpdateServos();
    205c:	01010000 	tsteq	r1, r0

				// See if we need to sync our processor with the servo driver while walking to ensure the prev is completed
				//before sending the next one

				// Finding any incident of GaitPos/Rot <>0:
				for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    2060:	0000a20d 	andeq	sl, r0, sp, lsl #4
					if ((GaitPosX[LegIndex] > cGPlimit)
    2064:	00145900 	andseq	r5, r4, r0, lsl #18
    2068:	009f0e00 	addseq	r0, pc, r0, lsl #28
    206c:	00110000 	andseq	r0, r1, r0
    2070:	00107e4a 	andseq	r7, r0, sl, asr #28
    2074:	49330200 	ldmdbmi	r3!, {r9}
    2078:	01000014 	tsteq	r0, r4, lsl r0
    207c:	00000305 	andeq	r0, r0, r5, lsl #6
    2080:	8c4a0000 	marhi	acc0, r0, sl
    2084:	02000018 	andeq	r0, r0, #24	; 0x18
    2088:	00144934 	andseq	r4, r4, r4, lsr r9
    208c:	03050100 	movweq	r0, #20736	; 0x5100
    2090:	00000000 	andeq	r0, r0, r0
    2094:	000db24a 	andeq	fp, sp, sl, asr #4
    2098:	b44e0200 	strblt	r0, [lr], #-512
    209c:	01000000 	tsteq	r0, r0
							|| (GaitPosZ[LegIndex] > cGPlimit)
							|| (GaitPosZ[LegIndex] < -cGPlimit)
							|| (GaitRotY[LegIndex] > cGPlimit)
							|| (GaitRotY[LegIndex] < -cGPlimit)) {

						bExtraCycle = g_InControlState.gaitCur.NrLiftedPos + 1;	//For making sure that we are using timed move until all legs are down
    20a0:	00000305 	andeq	r0, r0, r5, lsl #6
    20a4:	6e4a0000 	cdpvs	0, 4, cr0, cr10, cr0, {0}
    20a8:	02000014 	andeq	r0, r0, #20	; 0x14

				// See if we need to sync our processor with the servo driver while walking to ensure the prev is completed
				//before sending the next one

				// Finding any incident of GaitPos/Rot <>0:
				for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    20ac:	0000a295 	muleq	r0, r5, r2
    20b0:	03050100 	movweq	r0, #20736	; 0x5100

						bExtraCycle = g_InControlState.gaitCur.NrLiftedPos + 1;	//For making sure that we are using timed move until all legs are down
						break;
					}
				}
				if (bExtraCycle > 0) {
    20b4:	00000000 	andeq	r0, r0, r0
					bExtraCycle--;
    20b8:	0012a64a 	andseq	sl, r2, sl, asr #12
    20bc:	74960200 	ldrvc	r0, [r6], #512
					fWalking = !(bExtraCycle == 0);
    20c0:	01000000 	tsteq	r0, r0
    20c4:	00000305 	andeq	r0, r0, r5, lsl #6

					//Get endtime and calculate wait time
					lTimeWaitEnd = lTimerStart + PrevServoMoveTime;
    20c8:	1e4a0000 	cdpne	0, 4, cr0, cr10, cr0, {0}
    20cc:	0200000e 	andeq	r0, r0, #14	; 0xe
    20d0:	00004a97 	muleq	r0, r7, sl
					PrintString("\n");
#endif
					//DebugWrite(A1, HIGH);
					do {
						// Wait the appropriate time, call any background process while waiting...
						DoBackgroundProcess();
    20d4:	03050100 	movweq	r0, #20736	; 0x5100
					} while (getMillis() < lTimeWaitEnd);
    20d8:	00000000 	andeq	r0, r0, r0
    20dc:	00002c0d 	andeq	r2, r0, sp, lsl #24
					PrintString("\n");
#endif

				}
				// Only do commit if we are actually doing something...
				CommitServoDriver(ServoMoveTime);
    20e0:	0014d500 	andseq	sp, r4, r0, lsl #10
    20e4:	009f0e00 	addseq	r0, pc, r0, lsl #28
    20e8:	00050000 	andeq	r0, r5, r0
			} else {
				//Turn the bot off - May need to add ajust here...
				if (g_InControlState.fPrev_RobotOn || (AllDown = 0)) {
    20ec:	000d794a 	andeq	r7, sp, sl, asr #18
					PrintString("Barebones lTimeWaitEnd-Millis  ");
					Printu32d(getMillis);
					PrintString("\n");
#endif
				} else {
					FreeServos();
    20f0:	e7d20300 	ldrb	r0, [r2, r0, lsl #6]
    20f4:	01000014 	tsteq	r0, r4, lsl r0
				// Only do commit if we are actually doing something...
				CommitServoDriver(ServoMoveTime);
			} else {
				//Turn the bot off - May need to add ajust here...
				if (g_InControlState.fPrev_RobotOn || (AllDown = 0)) {
					ServoMoveTime = 600;
    20f8:	00000305 	andeq	r0, r0, r5, lsl #6
    20fc:	c5030000 	strgt	r0, [r3]
					StartUpdateServos();
    2100:	4a000014 	bmi	2158 <__Stack_Size+0x1d58>
					CommitServoDriver(ServoMoveTime);
    2104:	000016eb 	andeq	r1, r0, fp, ror #13
					//MSound(3, 100, 2500, 80, 2250, 60, 2000);
					Buzzed(100, 2500);
    2108:	14fed403 	ldrbtne	sp, [lr], #1027
    210c:	05010000 	streq	r0, [r1]
    2110:	00000003 	andeq	r0, r0, r3
					Buzzed(80, 2250);
    2114:	14c50300 	strbne	r0, [r5], #768
    2118:	df4a0000 	svcle	0x004a0000
					Buzzed(60, 2000);
    211c:	03000012 	movweq	r0, #18	; 0x12
    2120:	001515d6 	ldrsbeq	r1, [r5], -r6
    2124:	03050100 	movweq	r0, #20736	; 0x5100

					//lTimeWaitEnd = getMillis() + 600; // setup to process background stuff while we wait...
					lTimeWaitEnd = getMillis() + 600; // setup to process background stuff while we wait...
    2128:	00000000 	andeq	r0, r0, r0
    212c:	0014c503 	andseq	ip, r4, r3, lsl #10
					Printu32d(lTimeWaitEnd);
					PrintString("\n");
#endif
					do {
						// Wait the appropriate time, call any background process while waiting...
						DoBackgroundProcess();
    2130:	0fe84a00 	svceq	0x00e84a00
					} while (getMillis() < lTimeWaitEnd);
    2134:	d9030000 	stmdble	r3, {}
    2138:	0000152c 	andeq	r1, r0, ip, lsr #10
				} else {
					FreeServos();
				}

				// Allow the Servo driver to do stuff durint our idle time
				IdleTime();
    213c:	00030501 	andeq	r0, r3, r1, lsl #10
				mDelay(20); // give a pause between times we call if nothing is happening
    2140:	03000000 	movweq	r0, #0	; 0x0
			}
			PrevServoMoveTime = ServoMoveTime;
    2144:	000014c5 	andeq	r1, r0, r5, asr #9
    2148:	00129b4a 	andseq	r9, r2, sl, asr #22

			//Store previous g_InControlState.fRobotOn State
			if (g_InControlState.fRobotOn)
    214c:	43dc0300 	bicsmi	r0, ip, #0	; 0x0
    2150:	01000015 	tsteq	r0, r5, lsl r0
				g_InControlState.fPrev_RobotOn = 1;
			else
				g_InControlState.fPrev_RobotOn = 0;
    2154:	00000305 	andeq	r0, r0, r5, lsl #6
    2158:	c5030000 	strgt	r0, [r3]
    215c:	4a000014 	bmi	21b4 <__Stack_Size+0x1db4>
    2160:	0000180e 	andeq	r1, r0, lr, lsl #16
    2164:	155adf03 	ldrbne	sp, [sl, #-3843]
    2168:	05010000 	streq	r0, [r1]
    216c:	00000003 	andeq	r0, r0, r3
    2170:	14c50300 	strbne	r0, [r5], #768
    2174:	940d0000 	strls	r0, [sp]
    2178:	6f000000 	svcvs	0x00000000
    217c:	0e000015 	mcreq	0, 0, r0, cr0, cr5, {0}
    2180:	0000009f 	muleq	r0, pc, r0
    2184:	4d4a0005 	stclmi	0, cr0, [sl, #-20]
    2188:	03000010 	movweq	r0, #16	; 0x10
    218c:	001581e6 	andseq	r8, r5, r6, ror #3
    2190:	03050100 	movweq	r0, #20736	; 0x5100
    2194:	00000000 	andeq	r0, r0, r0
    2198:	00155f03 	andseq	r5, r5, r3, lsl #30
    219c:	13dc4a00 	bicsne	r4, ip, #0	; 0x0
    21a0:	e8030000 	stmda	r3, {}
    21a4:	0000155f 	andeq	r1, r0, pc, asr r5
    21a8:	00030501 	andeq	r0, r3, r1, lsl #10
    21ac:	4a000000 	bmi	21b4 <__Stack_Size+0x1db4>
    21b0:	000017d4 	ldrdeq	r1, [r0], -r4
    21b4:	15aaea03 	strne	lr, [sl, #2563]!
    21b8:	05010000 	streq	r0, [r1]
    21bc:	00000003 	andeq	r0, r0, r3
    21c0:	155f0300 	ldrbne	r0, [pc, #-768]	; 1ec8 <__Stack_Size+0x1ac8>
    21c4:	0d4a0000 	stcleq	0, cr0, [sl]
    21c8:	03000014 	movweq	r0, #20	; 0x14
    21cc:	0015c1ee 	andseq	ip, r5, lr, ror #3
    21d0:	03050100 	movweq	r0, #20736	; 0x5100
    21d4:	00000000 	andeq	r0, r0, r0
    21d8:	0001ab03 	andeq	sl, r1, r3, lsl #22
    21dc:	12b44a00 	adcsne	r4, r4, #0	; 0x0
    21e0:	f1030000 	undefined instruction 0xf1030000
    21e4:	000015d8 	ldrdeq	r1, [r0], -r8
    21e8:	00030501 	andeq	r0, r3, r1, lsl #10
    21ec:	03000000 	movweq	r0, #0	; 0x0
    21f0:	000001ab 	andeq	r0, r0, fp, lsr #3
    21f4:	0018394a 	andseq	r3, r8, sl, asr #18
    21f8:	eff40300 	svc	0x00f40300
    21fc:	01000015 	tsteq	r0, r5, lsl r0
    2200:	00000305 	andeq	r0, r0, r5, lsl #6
    2204:	ab030000 	blge	c220c <__Stack_Size+0xc1e0c>
    2208:	4a000001 	bmi	2214 <__Stack_Size+0x1e14>
    220c:	00001177 	andeq	r1, r0, r7, ror r1
    2210:	1606f903 	strne	pc, [r6], -r3, lsl #18
    2214:	05010000 	streq	r0, [r1]
    2218:	00000003 	andeq	r0, r0, r3
    221c:	14c50300 	strbne	r0, [r5], #768
    2220:	804a0000 	subhi	r0, sl, r0
    2224:	03000011 	movweq	r0, #17	; 0x11
    2228:	00161dfb 	ldrsheq	r1, [r6], -fp
    222c:	03050100 	movweq	r0, #20736	; 0x5100
    2230:	00000000 	andeq	r0, r0, r0
    2234:	0014c503 	andseq	ip, r4, r3, lsl #10
    2238:	0cb24a00 	fldmiaseq	r2!, {s8-s7}
    223c:	ff030000 	undefined instruction 0xff030000
    2240:	00001634 	andeq	r1, r0, r4, lsr r6
    2244:	00030501 	andeq	r0, r3, r1, lsl #10
    2248:	03000000 	movweq	r0, #0	; 0x0
    224c:	000014c5 	andeq	r1, r0, r5, asr #9
    2250:	00105649 	andseq	r5, r0, r9, asr #12
    2254:	01040300 	tsteq	r4, r0, lsl #6
    2258:	0000164c 	andeq	r1, r0, ip, asr #12
    225c:	00030501 	andeq	r0, r3, r1, lsl #10
    2260:	03000000 	movweq	r0, #0	; 0x0
    2264:	000014c5 	andeq	r1, r0, r5, asr #9
    2268:	00106049 	andseq	r6, r0, r9, asr #32
    226c:	01060300 	tsteq	r6, r0, lsl #6
    2270:	00001664 	andeq	r1, r0, r4, ror #12
    2274:	00030501 	andeq	r0, r3, r1, lsl #10
    2278:	03000000 	movweq	r0, #0	; 0x0
    227c:	000014c5 	andeq	r1, r0, r5, asr #9
    2280:	00106a49 	andseq	r6, r0, r9, asr #20
    2284:	01080300 	tsteq	r8, r0, lsl #6
    2288:	0000167c 	andeq	r1, r0, ip, ror r6
    228c:	00030501 	andeq	r0, r3, r1, lsl #10
    2290:	03000000 	movweq	r0, #0	; 0x0
    2294:	000014c5 	andeq	r1, r0, r5, asr #9
    2298:	00173e49 	andseq	r3, r7, r9, asr #28
    229c:	010c0300 	tsteq	ip, r0, lsl #6
    22a0:	000000b4 	strheq	r0, [r0], -r4
    22a4:	00030501 	andeq	r0, r3, r1, lsl #10
    22a8:	49000000 	stmdbmi	r0, {}
    22ac:	00000cb3 	strheq	r0, [r0], -r3
    22b0:	c5011203 	strgt	r1, [r1, #-515]
    22b4:	01000014 	tsteq	r0, r4, lsl r0
    22b8:	00000305 	andeq	r0, r0, r5, lsl #6
    22bc:	9b490000 	blls	12422c4 <__Stack_Size+0x1241ec4>
    22c0:	03000018 	movweq	r0, #24	; 0x18
    22c4:	14c50113 	strbne	r0, [r5], #275
    22c8:	05010000 	streq	r0, [r1]
    22cc:	00000003 	andeq	r0, r0, r3
    22d0:	14bc4900 	ldrtne	r4, [ip], #2304
    22d4:	14030000 	strne	r0, [r3]
    22d8:	0014c501 	andseq	ip, r4, r1, lsl #10
    22dc:	03050100 	movweq	r0, #20736	; 0x5100
    22e0:	00000000 	andeq	r0, r0, r0
    22e4:	000c8249 	andeq	r8, ip, r9, asr #4
    22e8:	01190300 	tsteq	r9, r0, lsl #6
    22ec:	000014c5 	andeq	r1, r0, r5, asr #9
    22f0:	00030501 	andeq	r0, r3, r1, lsl #10
    22f4:	49000000 	stmdbmi	r0, {}
    22f8:	00000c8a 	andeq	r0, r0, sl, lsl #25
    22fc:	c5011a03 	strgt	r1, [r1, #-2563]
    2300:	01000014 	tsteq	r0, r4, lsl r0
    2304:	00000305 	andeq	r0, r0, r5, lsl #6
    2308:	92490000 	subls	r0, r9, #0	; 0x0
    230c:	0300000c 	movweq	r0, #12	; 0xc
    2310:	14c5011b 	strbne	r0, [r5], #283
    2314:	05010000 	streq	r0, [r1]
    2318:	00000003 	andeq	r0, r0, r3
    231c:	0d734900 	ldcleq	9, cr4, [r3]
    2320:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
    2324:	00007401 	andeq	r7, r0, r1, lsl #8
    2328:	03050100 	movweq	r0, #20736	; 0x5100
    232c:	00000000 	andeq	r0, r0, r0
    2330:	000d7049 	andeq	r7, sp, r9, asr #32
    2334:	011f0300 	tsteq	pc, r0, lsl #6
    2338:	00000074 	andeq	r0, r0, r4, ror r0
    233c:	00030501 	andeq	r0, r3, r1, lsl #10
    2340:	49000000 	stmdbmi	r0, {}
    2344:	00000fa6 	andeq	r0, r0, r6, lsr #31
    2348:	2c012203 	sfmcs	f2, 4, [r1], {3}
    234c:	01000000 	tsteq	r0, r0
    2350:	00000305 	andeq	r0, r0, r5, lsl #6
    2354:	dd490000 	stclle	0, cr0, [r9]
    2358:	0300000f 	movweq	r0, #15	; 0xf
    235c:	002c0123 	eoreq	r0, ip, r3, lsr #2
    2360:	05010000 	streq	r0, [r1]
    2364:	00000003 	andeq	r0, r0, r3
    2368:	0f664900 	svceq	0x00664900
    236c:	24030000 	strcs	r0, [r3]
    2370:	00002c01 	andeq	r2, r0, r1, lsl #24
    2374:	03050100 	movweq	r0, #20736	; 0x5100
    2378:	00000000 	andeq	r0, r0, r0
    237c:	00103749 	andseq	r3, r0, r9, asr #14
    2380:	01250300 	teqeq	r5, r0, lsl #6
    2384:	0000002c 	andeq	r0, r0, ip, lsr #32
    2388:	00030501 	andeq	r0, r3, r1, lsl #10
    238c:	49000000 	stmdbmi	r0, {}
    2390:	00001041 	andeq	r1, r0, r1, asr #32
    2394:	2c012803 	stccs	8, cr2, [r1], {3}
    2398:	01000000 	tsteq	r0, r0
    239c:	00000305 	andeq	r0, r0, r5, lsl #6
    23a0:	47490000 	strbmi	r0, [r9, -r0]
    23a4:	03000010 	movweq	r0, #16	; 0x10
    23a8:	002c0129 	eoreq	r0, ip, r9, lsr #2
    23ac:	05010000 	streq	r0, [r1]
    23b0:	00000003 	andeq	r0, r0, r3
    23b4:	0ff34900 	svceq	0x00f34900
    23b8:	2a030000 	bcs	c23c0 <__Stack_Size+0xc1fc0>
    23bc:	00002c01 	andeq	r2, r0, r1, lsl #24
    23c0:	03050100 	movweq	r0, #20736	; 0x5100
    23c4:	00000000 	andeq	r0, r0, r0
    23c8:	00155049 	andseq	r5, r5, r9, asr #32
    23cc:	012b0300 	teqeq	fp, r0, lsl #6
    23d0:	00000025 	andeq	r0, r0, r5, lsr #32
    23d4:	00030501 	andeq	r0, r3, r1, lsl #10
    23d8:	49000000 	stmdbmi	r0, {}
    23dc:	000018b7 	strheq	r1, [r0], -r7
    23e0:	2c012e03 	stccs	14, cr2, [r1], {3}
    23e4:	01000000 	tsteq	r0, r0
    23e8:	00000305 	andeq	r0, r0, r5, lsl #6
    23ec:	cd490000 	stclgt	0, cr0, [r9]
    23f0:	03000018 	movweq	r0, #24	; 0x18
    23f4:	002c012f 	eoreq	r0, ip, pc, lsr #2
    23f8:	05010000 	streq	r0, [r1]
    23fc:	00000003 	andeq	r0, r0, r3
    2400:	18c24900 	stmiane	r2, {r8, fp, lr}^
    2404:	30030000 	andcc	r0, r3, r0
    2408:	00002c01 	andeq	r2, r0, r1, lsl #24
    240c:	03050100 	movweq	r0, #20736	; 0x5100
    2410:	00000000 	andeq	r0, r0, r0
    2414:	0018b149 	andseq	fp, r8, r9, asr #2
    2418:	01310300 	teqeq	r1, r0, lsl #6
    241c:	00000025 	andeq	r0, r0, r5, lsr #32
    2420:	00030501 	andeq	r0, r3, r1, lsl #10
    2424:	49000000 	stmdbmi	r0, {}
    2428:	000018bc 	strheq	r1, [r0], -ip
    242c:	25013203 	strcs	r3, [r1, #-515]
    2430:	01000000 	tsteq	r0, r0
    2434:	00000305 	andeq	r0, r0, r5, lsl #6
    2438:	c7490000 	strbgt	r0, [r9, -r0]
    243c:	03000018 	movweq	r0, #24	; 0x18
    2440:	00250133 	eoreq	r0, r5, r3, lsr r1
    2444:	05010000 	streq	r0, [r1]
    2448:	00000003 	andeq	r0, r0, r3
    244c:	14c84900 	strbne	r4, [r8], #2304
    2450:	36030000 	strcc	r0, [r3], -r0
    2454:	00002501 	andeq	r2, r0, r1, lsl #10
    2458:	03050100 	movweq	r0, #20736	; 0x5100
    245c:	00000000 	andeq	r0, r0, r0
    2460:	0014d349 	andseq	sp, r4, r9, asr #6
    2464:	01370300 	teqeq	r7, r0, lsl #6
    2468:	00000025 	andeq	r0, r0, r5, lsr #32
    246c:	00030501 	andeq	r0, r3, r1, lsl #10
    2470:	49000000 	stmdbmi	r0, {}
    2474:	000014de 	ldrdeq	r1, [r0], -lr
    2478:	25013803 	strcs	r3, [r1, #-2051]
    247c:	01000000 	tsteq	r0, r0
    2480:	00000305 	andeq	r0, r0, r5, lsl #6
    2484:	83490000 	movthi	r0, #36864	; 0x9000
    2488:	0300000d 	movweq	r0, #13	; 0xd
    248c:	00b40139 	adcseq	r0, r4, r9, lsr r1
    2490:	05010000 	streq	r0, [r1]
    2494:	00000003 	andeq	r0, r0, r3
    2498:	0d454900 	stcleq	9, cr4, [r5]
    249c:	3a030000 	bcc	c24a4 <__Stack_Size+0xc20a4>
    24a0:	0000b401 	andeq	fp, r0, r1, lsl #8
    24a4:	03050100 	movweq	r0, #20736	; 0x5100
    24a8:	00000000 	andeq	r0, r0, r0
    24ac:	00116749 	andseq	r6, r1, r9, asr #14
    24b0:	013b0300 	teqeq	fp, r0, lsl #6
    24b4:	000000b4 	strheq	r0, [r0], -r4
    24b8:	00030501 	andeq	r0, r3, r1, lsl #10
    24bc:	49000000 	stmdbmi	r0, {}
    24c0:	000014a6 	andeq	r1, r0, r6, lsr #9
    24c4:	4a013e03 	bmi	51cd8 <__Stack_Size+0x518d8>
    24c8:	01000000 	tsteq	r0, r0
    24cc:	00000305 	andeq	r0, r0, r5, lsl #6
    24d0:	72490000 	subvc	r0, r9, #0	; 0x0
    24d4:	0300000c 	movweq	r0, #12	; 0xc
    24d8:	004a013f 	subeq	r0, sl, pc, lsr r1
    24dc:	05010000 	streq	r0, [r1]
    24e0:	00000003 	andeq	r0, r0, r3
    24e4:	18564900 	ldmdane	r6, {r8, fp, lr}^
    24e8:	40030000 	andmi	r0, r3, r0
    24ec:	00007401 	andeq	r7, r0, r1, lsl #8
    24f0:	03050100 	movweq	r0, #20736	; 0x5100
    24f4:	00000000 	andeq	r0, r0, r0
    24f8:	00121449 	andseq	r1, r2, r9, asr #8
    24fc:	01420300 	cmpeq	r2, r0, lsl #6
    2500:	000000a2 	andeq	r0, r0, r2, lsr #1
    2504:	00030501 	andeq	r0, r3, r1, lsl #10
    2508:	49000000 	stmdbmi	r0, {}
    250c:	00001210 	andeq	r1, r0, r0, lsl r2
    2510:	a2014303 	andge	r4, r1, #201326592	; 0xc000000
    2514:	01000000 	tsteq	r0, r0
    2518:	00000305 	andeq	r0, r0, r5, lsl #6
    251c:	c7490000 	strbgt	r0, [r9, -r0]
    2520:	03000011 	movweq	r0, #17	; 0x11
    2524:	00b40149 	adcseq	r0, r4, r9, asr #2
    2528:	05010000 	streq	r0, [r1]
    252c:	00000003 	andeq	r0, r0, r3
    2530:	12ac4900 	adcne	r4, ip, #0	; 0x0
    2534:	4a030000 	bmi	c253c <__Stack_Size+0xc213c>
    2538:	0000a201 	andeq	sl, r0, r1, lsl #4
    253c:	03050100 	movweq	r0, #20736	; 0x5100
    2540:	00000000 	andeq	r0, r0, r0
    2544:	00155749 	andseq	r5, r5, r9, asr #14
    2548:	01500300 	cmpeq	r0, r0, lsl #6
    254c:	00000025 	andeq	r0, r0, r5, lsr #32
    2550:	00030501 	andeq	r0, r3, r1, lsl #10
    2554:	49000000 	stmdbmi	r0, {}
    2558:	0000156f 	andeq	r1, r0, pc, ror #10
    255c:	25015103 	strcs	r5, [r1, #-259]
    2560:	01000000 	tsteq	r0, r0
    2564:	00000305 	andeq	r0, r0, r5, lsl #6
    2568:	63490000 	movtvs	r0, #36864	; 0x9000
    256c:	03000015 	movweq	r0, #21	; 0x15
    2570:	00250152 	eoreq	r0, r5, r2, asr r1
    2574:	05010000 	streq	r0, [r1]
    2578:	00000003 	andeq	r0, r0, r3
    257c:	11304900 	teqne	r0, r0, lsl #18
    2580:	53030000 	movwpl	r0, #12288	; 0x3000
    2584:	00002501 	andeq	r2, r0, r1, lsl #10
    2588:	03050100 	movweq	r0, #20736	; 0x5100
    258c:	00000000 	andeq	r0, r0, r0
    2590:	0013f649 	andseq	pc, r3, r9, asr #12
    2594:	01540300 	cmpeq	r4, r0, lsl #6
    2598:	00000025 	andeq	r0, r0, r5, lsr #32
    259c:	00030501 	andeq	r0, r3, r1, lsl #10
    25a0:	49000000 	stmdbmi	r0, {}
    25a4:	00000f1a 	andeq	r0, r0, sl, lsl pc
    25a8:	25015503 	strcs	r5, [r1, #-1283]
    25ac:	01000000 	tsteq	r0, r0
    25b0:	00000305 	andeq	r0, r0, r5, lsl #6
    25b4:	cb490000 	blgt	12425bc <__Stack_Size+0x12421bc>
    25b8:	0300000c 	movweq	r0, #12	; 0xc
    25bc:	00b40157 	adcseq	r0, r4, r7, asr r1
    25c0:	05010000 	streq	r0, [r1]
    25c4:	00000003 	andeq	r0, r0, r3
    25c8:	0dcc4900 	stcleq	9, cr4, [ip]
    25cc:	5b030000 	blpl	c25d4 <__Stack_Size+0xc21d4>
    25d0:	0000b401 	andeq	fp, r0, r1, lsl #8
    25d4:	03050100 	movweq	r0, #20736	; 0x5100
    25d8:	00000000 	andeq	r0, r0, r0
    25dc:	0000250d 	andeq	r2, r0, sp, lsl #10
    25e0:	0019d500 	andseq	sp, r9, r0, lsl #10
    25e4:	009f0e00 	addseq	r0, pc, r0, lsl #28
    25e8:	00050000 	andeq	r0, r5, r0
    25ec:	00128349 	andseq	r8, r2, r9, asr #6
    25f0:	015d0300 	cmpeq	sp, r0, lsl #6
    25f4:	000019c5 	andeq	r1, r0, r5, asr #19
    25f8:	00030501 	andeq	r0, r3, r1, lsl #10
    25fc:	49000000 	stmdbmi	r0, {}
    2600:	00000e39 	andeq	r0, r0, r9, lsr lr
    2604:	c5015e03 	strgt	r5, [r1, #-3587]
    2608:	01000019 	tsteq	r0, r9, lsl r0
    260c:	00000305 	andeq	r0, r0, r5, lsl #6
    2610:	42490000 	submi	r0, r9, #0	; 0x0
    2614:	0300000e 	movweq	r0, #14	; 0xe
    2618:	19c5015f 	stmibne	r5, {r0, r1, r2, r3, r4, r6, r8}^
    261c:	05010000 	streq	r0, [r1]
    2620:	00000003 	andeq	r0, r0, r3
    2624:	0edb4900 	cdpeq	9, 13, cr4, cr11, cr0, {0}
    2628:	60030000 	andvs	r0, r3, r0
    262c:	0019c501 	andseq	ip, r9, r1, lsl #10
    2630:	03050100 	movweq	r0, #20736	; 0x5100
    2634:	00000000 	andeq	r0, r0, r0
    2638:	00102649 	andseq	r2, r0, r9, asr #12
    263c:	01650300 	cmneq	r5, r0, lsl #6
    2640:	000000b4 	strheq	r0, [r0], -r4
    2644:	00030501 	andeq	r0, r3, r1, lsl #10
    2648:	49000000 	stmdbmi	r0, {}
    264c:	00000dda 	ldrdeq	r0, [r0], -sl
    2650:	74016603 	strvc	r6, [r1], #-1539
    2654:	01000000 	tsteq	r0, r0
    2658:	00000305 	andeq	r0, r0, r5, lsl #6
    265c:	39490000 	stmdbcc	r9, {}^
    2660:	0300000c 	movweq	r0, #12	; 0xc
    2664:	00b4016a 	adcseq	r0, r4, sl, ror #2
    2668:	05010000 	streq	r0, [r1]
    266c:	00000003 	andeq	r0, r0, r3
    2670:	01bb0d00 	undefined instruction 0x01bb0d00
    2674:	1a6a0000 	bne	1a8267c <__Stack_Size+0x1a8227c>
    2678:	9f0e0000 	svcls	0x000e0000
    267c:	05000000 	streq	r0, [r0]
    2680:	50414d00 	subpl	r4, r1, r0, lsl #26
    2684:	90030047 	andls	r0, r3, r7, asr #32
    2688:	001a5a01 	andseq	r5, sl, r1, lsl #20
    268c:	03050100 	movweq	r0, #20736	; 0x5100
    2690:	00000000 	andeq	r0, r0, r0
    2694:	00187f49 	andseq	r7, r8, r9, asr #30
    2698:	03230300 	teqeq	r3, #0	; 0x0
    269c:	00000074 	andeq	r0, r0, r4, ror r0
    26a0:	00030501 	andeq	r0, r3, r1, lsl #10
    26a4:	49000000 	stmdbmi	r0, {}
    26a8:	0000131d 	andeq	r1, r0, sp, lsl r3
    26ac:	a205bc03 	andge	fp, r5, #768	; 0x300
    26b0:	01000000 	tsteq	r0, r0
    26b4:	00000305 	andeq	r0, r0, r5, lsl #6
    26b8:	cc490000 	margt	acc0, r0, r9
    26bc:	03000013 	movweq	r0, #19	; 0x13
    26c0:	0063061a 	rsbeq	r0, r3, sl, lsl r6
    26c4:	05010000 	streq	r0, [r1]
    26c8:	00000003 	andeq	r0, r0, r3
    26cc:	076e0000 	strbeq	r0, [lr, -r0]!
    26d0:	00020000 	andeq	r0, r2, r0
    26d4:	0000068f 	andeq	r0, r0, pc, lsl #13
    26d8:	01c60104 	biceq	r0, r6, r4, lsl #2
    26dc:	ba010000 	blt	426e4 <__Stack_Size+0x422e4>
    26e0:	9d000019 	stcls	0, cr0, [r0, #-100]
    26e4:	00000003 	andeq	r0, r0, r3
    26e8:	00000000 	andeq	r0, r0, r0
    26ec:	36000000 	strcc	r0, [r0], -r0
    26f0:	0200000a 	andeq	r0, r0, #10	; 0xa
    26f4:	21500504 	cmpcs	r0, r4, lsl #10
    26f8:	02020000 	andeq	r0, r2, #0	; 0x0
    26fc:	00049505 	andeq	r9, r4, r5, lsl #10
    2700:	06010200 	streq	r0, [r1], -r0, lsl #4
    2704:	00000469 	andeq	r0, r0, r9, ror #8
    2708:	f1070402 	undefined instruction 0xf1070402
    270c:	03000021 	movweq	r0, #33	; 0x21
    2710:	00363175 	eorseq	r3, r6, r5, ror r1
    2714:	004c2802 	subeq	r2, ip, r2, lsl #16
    2718:	02020000 	andeq	r0, r2, #0	; 0x0
    271c:	00022207 	andeq	r2, r2, r7, lsl #4
    2720:	38750300 	ldmdacc	r5!, {r8, r9}^
    2724:	5d290200 	sfmpl	f0, 4, [r9]
    2728:	02000000 	andeq	r0, r0, #0	; 0x0
    272c:	04670801 	strbteq	r0, [r7], #-2049
    2730:	01040000 	tsteq	r4, r0
    2734:	00793802 	rsbseq	r3, r9, r2, lsl #16
    2738:	07050000 	streq	r0, [r5, -r0]
    273c:	00000014 	andeq	r0, r0, r4, lsl r0
    2740:	00171005 	andseq	r1, r7, r5
    2744:	06000100 	streq	r0, [r0], -r0, lsl #2
    2748:	00000f61 	andeq	r0, r0, r1, ror #30
    274c:	00643802 	rsbeq	r3, r4, r2, lsl #16
    2750:	08070000 	stmdaeq	r7, {}
    2754:	00a92703 	adceq	r2, r9, r3, lsl #14
    2758:	2c080000 	stccs	0, cr0, [r8], {0}
    275c:	03000023 	movweq	r0, #35	; 0x23
    2760:	0000a928 	andeq	sl, r0, r8, lsr #18
    2764:	00230200 	eoreq	r0, r3, r0, lsl #4
    2768:	001a3b08 	andseq	r3, sl, r8, lsl #22
    276c:	b6290300 	strtlt	r0, [r9], -r0, lsl #6
    2770:	02000000 	andeq	r0, r0, #0	; 0x0
    2774:	09000423 	stmdbeq	r0, {r0, r1, r5, sl}
    2778:	0000af04 	andeq	sl, r0, r4, lsl #30
    277c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2780:	000021f6 	strdeq	r2, [r0], -r6
    2784:	6905040a 	stmdbvs	r5, {r1, r3, sl}
    2788:	0600746e 	streq	r7, [r0], -lr, ror #8
    278c:	00001988 	andeq	r1, r0, r8, lsl #19
    2790:	00842a03 	addeq	r2, r4, r3, lsl #20
    2794:	01040000 	tsteq	r4, r0
    2798:	015f5404 	cmpeq	pc, r4, lsl #8
    279c:	6b050000 	blvs	1427a4 <__Stack_Size+0x1423a4>
    27a0:	0100000f 	tsteq	r0, pc
    27a4:	0011a105 	andseq	sl, r1, r5, lsl #2
    27a8:	40050200 	andmi	r0, r5, r0, lsl #4
    27ac:	03000014 	movweq	r0, #20	; 0x14
    27b0:	000ec305 	andeq	ip, lr, r5, lsl #6
    27b4:	4b050400 	blmi	1437bc <__Stack_Size+0x1433bc>
    27b8:	0500000e 	streq	r0, [r0, #-14]
    27bc:	0010bd05 	andseq	fp, r0, r5, lsl #26
    27c0:	b0050600 	andlt	r0, r5, r0, lsl #12
    27c4:	0700000e 	streq	r0, [r0, -lr]
    27c8:	0016f505 	andseq	pc, r6, r5, lsl #10
    27cc:	51050c00 	tstpl	r5, r0, lsl #24
    27d0:	0d000017 	stceq	0, cr0, [r0, #-92]
    27d4:	0015ef05 	andseq	lr, r5, r5, lsl #30
    27d8:	57050e00 	strpl	r0, [r5, -r0, lsl #28]
    27dc:	0f00000d 	svceq	0x0000000d
    27e0:	00147d05 	andseq	r7, r4, r5, lsl #26
    27e4:	58051000 	stmdapl	r5, {ip}
    27e8:	11000011 	tstne	r0, r1, lsl r0
    27ec:	00151605 	andseq	r1, r5, r5, lsl #12
    27f0:	15051200 	strne	r1, [r5, #-512]
    27f4:	13000017 	movwne	r0, #23	; 0x17
    27f8:	00126205 	andseq	r6, r2, r5, lsl #4
    27fc:	e7051400 	str	r1, [r5, -r0, lsl #8]
    2800:	15000010 	strne	r0, [r0, #-16]
    2804:	000c4e05 	andeq	r4, ip, r5, lsl #28
    2808:	96051600 	strls	r1, [r5], -r0, lsl #12
    280c:	1700000d 	strne	r0, [r0, -sp]
    2810:	00164305 	andseq	r4, r6, r5, lsl #6
    2814:	05018300 	streq	r8, [r1, #-768]
    2818:	000010f5 	strdeq	r1, [r0], -r5
    281c:	bb050184 	bllt	142e34 <__Stack_Size+0x142a34>
    2820:	92000016 	andls	r0, r0, #22	; 0x16
    2824:	11b80501 	undefined instruction 0x11b80501
    2828:	01d00000 	bicseq	r0, r0, r0
    282c:	04020400 	streq	r0, [r2], #-1024
    2830:	0001bdcf 	andeq	fp, r1, pc, asr #27
    2834:	06800500 	streq	r0, [r0], r0, lsl #10
    2838:	05010000 	streq	r0, [r1]
    283c:	00000487 	andeq	r0, r0, r7, lsl #9
    2840:	03100502 	tsteq	r0, #8388608	; 0x800000
    2844:	05040000 	streq	r0, [r4]
    2848:	0000068e 	andeq	r0, r0, lr, lsl #13
    284c:	04cb0508 	strbeq	r0, [fp], #1288
    2850:	05100000 	ldreq	r0, [r0]
    2854:	00000144 	andeq	r0, r0, r4, asr #2
    2858:	058c0520 	streq	r0, [ip, #1312]
    285c:	00c00000 	sbceq	r0, r0, r0
    2860:	00020305 	andeq	r0, r2, r5, lsl #6
    2864:	05018000 	streq	r8, [r1]
    2868:	000006c1 	andeq	r0, r0, r1, asr #13
    286c:	59050280 	stmdbpl	r5, {r7, r9}
    2870:	80000004 	andhi	r0, r0, r4
    2874:	00260504 	eoreq	r0, r6, r4, lsl #10
    2878:	08800000 	stmeq	r0, {}
    287c:	0002a505 	andeq	sl, r2, r5, lsl #10
    2880:	05108000 	ldreq	r8, [r0]
    2884:	00000135 	andeq	r0, r0, r5, lsr r1
    2888:	0b002080 	bleq	aa90 <__Stack_Size+0xa690>
    288c:	016e0401 	cmneq	lr, r1, lsl #8
    2890:	000002f3 	strdeq	r0, [r0], -r3
    2894:	00029205 	andeq	r9, r2, r5, lsl #4
    2898:	7f050000 	svcvc	0x00050000
    289c:	01000002 	tsteq	r0, r2
    28a0:	0005bc05 	andeq	fp, r5, r5, lsl #24
    28a4:	70050200 	andvc	r0, r5, r0, lsl #4
    28a8:	03000002 	movweq	r0, #2	; 0x2
    28ac:	0000b805 	andeq	fp, r0, r5, lsl #16
    28b0:	c6050400 	strgt	r0, [r5], -r0, lsl #8
    28b4:	05000000 	streq	r0, [r0]
    28b8:	00059705 	andeq	r9, r5, r5, lsl #14
    28bc:	77050600 	strvc	r0, [r5, -r0, lsl #12]
    28c0:	07000005 	streq	r0, [r0, -r5]
    28c4:	0001a005 	andeq	sl, r1, r5
    28c8:	8a050800 	bhi	1448d0 <__Stack_Size+0x1444d0>
    28cc:	09000001 	stmdbeq	r0, {r0}
    28d0:	00063405 	andeq	r3, r6, r5, lsl #8
    28d4:	9f050a00 	svcls	0x00050a00
    28d8:	0b000004 	bleq	28f0 <__Stack_Size+0x24f0>
    28dc:	00044005 	andeq	r4, r4, r5
    28e0:	03050c00 	movweq	r0, #23552	; 0x5c00
    28e4:	0d000001 	stceq	0, cr0, [r0, #-4]
    28e8:	0002ea05 	andeq	lr, r2, r5, lsl #20
    28ec:	d9050e00 	stmdble	r5, {r9, sl, fp}
    28f0:	0f000002 	svceq	0x00000002
    28f4:	00008c05 	andeq	r8, r0, r5, lsl #24
    28f8:	bd051000 	stclt	0, cr1, [r5]
    28fc:	11000004 	tstne	r0, r4
    2900:	00060205 	andeq	r0, r6, r5, lsl #4
    2904:	34051200 	strcc	r1, [r5], #-512
    2908:	13000000 	movwne	r0, #0	; 0x0
    290c:	00051105 	andeq	r1, r5, r5, lsl #2
    2910:	fa051400 	blx	147918 <__Stack_Size+0x147518>
    2914:	15000004 	strne	r0, [r0, #-4]
    2918:	00032305 	andeq	r2, r3, r5, lsl #6
    291c:	fb051600 	blx	148126 <__Stack_Size+0x147d26>
    2920:	17000002 	strne	r0, [r0, -r2]
    2924:	00042e05 	andeq	r2, r4, r5, lsl #28
    2928:	6b051800 	blvs	148930 <__Stack_Size+0x148530>
    292c:	19000000 	stmdbne	r0, {}
    2930:	00007305 	andeq	r7, r0, r5, lsl #6
    2934:	bf051a00 	svclt	0x00051a00
    2938:	1b000002 	blne	2948 <__Stack_Size+0x2548>
    293c:	00066005 	andeq	r6, r6, r5
    2940:	d2051c00 	andle	r1, r5, #0	; 0x0
    2944:	1d000001 	stcne	0, cr0, [r0, #-4]
    2948:	00064505 	andeq	r4, r6, r5, lsl #10
    294c:	20051e00 	andcs	r1, r5, r0, lsl #28
    2950:	1f000006 	svcne	0x00000006
    2954:	0005ef05 	andeq	lr, r5, r5, lsl #30
    2958:	d1052000 	tstle	r5, r0
    295c:	21000005 	tstcs	r0, r5
    2960:	00040005 	andeq	r0, r4, r5
    2964:	e3052200 	movw	r2, #20992	; 0x5200
    2968:	23000003 	movwcs	r0, #3	; 0x3
    296c:	00035a05 	andeq	r5, r3, r5, lsl #20
    2970:	43052400 	movwmi	r2, #21504	; 0x5400
    2974:	25000003 	strcs	r0, [r0, #-3]
    2978:	00055b05 	andeq	r5, r5, r5, lsl #22
    297c:	47052600 	strmi	r2, [r5, -r0, lsl #12]
    2980:	27000005 	strcs	r0, [r0, -r5]
    2984:	0006cf05 	andeq	ip, r6, r5, lsl #30
    2988:	ae052800 	cdpge	8, 0, cr2, cr5, cr0, {0}
    298c:	29000006 	stmdbcs	r0, {r1, r2}
    2990:	00001205 	andeq	r1, r0, r5, lsl #4
    2994:	1d052a00 	fstsne	s4, [r5]
    2998:	2b000001 	blcs	29a4 <__Stack_Size+0x25a4>
    299c:	00041305 	andeq	r1, r4, r5, lsl #6
    29a0:	f4052c00 	undefined instruction 0xf4052c00
    29a4:	2d000001 	stccs	0, cr0, [r0, #-4]
    29a8:	00033805 	andeq	r3, r3, r5, lsl #16
    29ac:	eb052e00 	bl	14e1b4 <__Stack_Size+0x14ddb4>
    29b0:	2f000001 	svccs	0x00000001
    29b4:	00016505 	andeq	r6, r1, r5, lsl #10
    29b8:	59053000 	stmdbpl	r5, {ip, sp}
    29bc:	31000001 	tstcc	r0, r1
    29c0:	07040c00 	streq	r0, [r4, -r0, lsl #24]
    29c4:	191c010d 	ldmdbne	ip, {r0, r2, r3, r8}
    29c8:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    29cc:	00000001 	andeq	r0, r0, r1
    29d0:	00000000 	andeq	r0, r0, r0
    29d4:	275d0100 	ldrbcs	r0, [sp, -r0, lsl #2]
    29d8:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    29dc:	00001a5a 	andeq	r1, r0, sl, asr sl
    29e0:	00b64e01 	adcseq	r4, r6, r1, lsl #28
    29e4:	50010000 	andpl	r0, r1, r0
    29e8:	0064690f 	rsbeq	r6, r4, pc, lsl #18
    29ec:	00b64e01 	adcseq	r4, r6, r1, lsl #28
    29f0:	51010000 	tstpl	r1, r0
    29f4:	40011000 	andmi	r1, r1, r0
    29f8:	0100001a 	tsteq	r0, sl, lsl r0
    29fc:	00b60151 	adcseq	r0, r6, r1, asr r1
	...
    2a08:	5d010000 	stcpl	0, cr0, [r1]
    2a0c:	00000352 	andeq	r0, r0, r2, asr r3
    2a10:	001a5a11 	andseq	r5, sl, r1, lsl sl
    2a14:	b6510100 	ldrblt	r0, [r1], -r0, lsl #2
    2a18:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    2a1c:	0000000e 	andeq	r0, r0, lr
    2a20:	19ce010d 	stmibne	lr, {r0, r2, r3, r8}^
    2a24:	56010000 	strpl	r0, [r1], -r0
    2a28:	00000001 	andeq	r0, r0, r1
    2a2c:	00000000 	andeq	r0, r0, r0
    2a30:	805d0100 	subshi	r0, sp, r0, lsl #2
    2a34:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    2a38:	00004aac 	andeq	r4, r0, ip, lsr #21
    2a3c:	03805601 	orreq	r5, r0, #1048576	; 0x100000
    2a40:	50010000 	andpl	r0, r1, r0
    2a44:	01006912 	tsteq	r0, r2, lsl r9
    2a48:	0000b657 	andeq	fp, r0, r7, asr r6
    2a4c:	04090000 	streq	r0, [r9]
    2a50:	00000386 	andeq	r0, r0, r6, lsl #7
    2a54:	0000af13 	andeq	sl, r0, r3, lsl pc
    2a58:	36011000 	strcc	r1, [r1], -r0
    2a5c:	01000019 	tsteq	r0, r9, lsl r0
    2a60:	00b601f1 	ldrshteq	r0, [r6], r1
	...
    2a6c:	5d010000 	stcpl	0, cr0, [r1]
    2a70:	000003c2 	andeq	r0, r0, r2, asr #7
    2a74:	00646914 	rsbeq	r6, r4, r4, lsl r9
    2a78:	00b6f101 	adcseq	pc, r6, r1, lsl #2
    2a7c:	0ee10000 	cdpeq	0, 14, cr0, cr1, cr0, {0}
    2a80:	69150000 	ldmdbvs	r5, {}
    2a84:	b6f20100 	ldrbtlt	r0, [r2], r0, lsl #2
    2a88:	ff000000 	undefined instruction 0xff000000
    2a8c:	0000000e 	andeq	r0, r0, lr
    2a90:	19680110 	stmdbne	r8!, {r4, r8}^
    2a94:	fb010000 	blx	42a9e <__Stack_Size+0x4269e>
    2a98:	0000b601 	andeq	fp, r0, r1, lsl #12
	...
    2aa4:	f95d0100 	undefined instruction 0xf95d0100
    2aa8:	14000003 	strne	r0, [r0], #-3
    2aac:	01006469 	tsteq	r0, r9, ror #8
    2ab0:	0000b6fb 	strdeq	fp, [r0], -fp
    2ab4:	000f1d00 	andeq	r1, pc, r0, lsl #26
    2ab8:	00691500 	rsbeq	r1, r9, r0, lsl #10
    2abc:	00b6fc01 	adcseq	pc, r6, r1, lsl #24
    2ac0:	0f3b0000 	svceq	0x003b0000
    2ac4:	16000000 	strne	r0, [r0], -r0
    2ac8:	0019eb01 	andseq	lr, r9, r1, lsl #22
    2acc:	01050100 	tsteq	r5, r0, lsl #2
    2ad0:	00000001 	andeq	r0, r0, r1
    2ad4:	00000000 	andeq	r0, r0, r0
    2ad8:	000f5900 	andeq	r5, pc, r0, lsl #18
    2adc:	00043b00 	andeq	r3, r4, r0, lsl #22
    2ae0:	64691700 	strbtvs	r1, [r9], #-1792
    2ae4:	01050100 	tsteq	r5, r0, lsl #2
    2ae8:	000000b6 	strheq	r0, [r0], -r6
    2aec:	70175001 	andsvc	r5, r7, r1
    2af0:	0100736f 	tsteq	r0, pc, ror #6
    2af4:	00b60105 	adcseq	r0, r6, r5, lsl #2
    2af8:	51010000 	tstpl	r1, r0
    2afc:	01006918 	tsteq	r0, r8, lsl r9
    2b00:	00b60106 	adcseq	r0, r6, r6, lsl #2
    2b04:	52010000 	andpl	r0, r1, #0	; 0x0
    2b08:	d2011900 	andle	r1, r1, #0	; 0x0
    2b0c:	01000018 	tsteq	r0, r8, lsl r0
    2b10:	00010111 	andeq	r0, r1, r1, lsl r1
    2b14:	00000000 	andeq	r0, r0, r0
    2b18:	01000000 	tsteq	r0, r0
    2b1c:	0004705d 	andeq	r7, r4, sp, asr r0
    2b20:	1a5a1a00 	bne	1689328 <__Stack_Size+0x1688f28>
    2b24:	11010000 	tstne	r1, r0
    2b28:	0000b601 	andeq	fp, r0, r1, lsl #12
    2b2c:	17500100 	ldrbne	r0, [r0, -r0, lsl #2]
    2b30:	00736f70 	rsbseq	r6, r3, r0, ror pc
    2b34:	b6011101 	strlt	r1, [r1], -r1, lsl #2
    2b38:	01000000 	tsteq	r0, r0
    2b3c:	011b0051 	tsteq	fp, r1, asr r0
    2b40:	00001a60 	andeq	r1, r0, r0, ror #20
    2b44:	00018e01 	andeq	r8, r1, r1, lsl #28
    2b48:	00000000 	andeq	r0, r0, r0
    2b4c:	78000000 	stmdavc	r0, {}
    2b50:	b100000f 	tstlt	r0, pc
    2b54:	11000004 	tstne	r0, r4
    2b58:	00001a3b 	andeq	r1, r0, fp, lsr sl
    2b5c:	00b68e01 	adcseq	r8, r6, r1, lsl #28
    2b60:	0f970000 	svceq	0x00970000
    2b64:	691c0000 	ldmdbvs	ip, {}
    2b68:	b68f0100 	strlt	r0, [pc], r0, lsl #2
    2b6c:	01000000 	tsteq	r0, r0
    2b70:	1ae61d50 	bne	ff98a0b8 <SCS_BASE+0x1f97c0b8>
    2b74:	90010000 	andls	r0, r1, r0
    2b78:	000000b6 	strheq	r0, [r0], -r6
    2b7c:	1b005501 	blne	17f88 <__Stack_Size+0x17b88>
    2b80:	00195501 	andseq	r5, r9, r1, lsl #10
    2b84:	01380100 	teqeq	r8, r0, lsl #2
	...
    2b90:	00000faa 	andeq	r0, r0, sl, lsr #31
    2b94:	000004e7 	andeq	r0, r0, r7, ror #9
    2b98:	001a9b11 	andseq	r9, sl, r1, lsl fp
    2b9c:	b6380100 	ldrtlt	r0, [r8], -r0, lsl #2
    2ba0:	d5000000 	strle	r0, [r0]
    2ba4:	1500000f 	strne	r0, [r0, #-15]
    2ba8:	39010069 	stmdbcc	r1, {r0, r3, r5, r6}
    2bac:	000000b6 	strheq	r0, [r0], -r6
    2bb0:	00000fe8 	andeq	r0, r0, r8, ror #31
    2bb4:	a5011e00 	strge	r1, [r1, #-3584]
    2bb8:	0100001a 	tsteq	r0, sl, lsl r0
    2bbc:	00000020 	andeq	r0, r0, r0, lsr #32
    2bc0:	00000000 	andeq	r0, r0, r0
    2bc4:	000ffb00 	andeq	pc, pc, r0, lsl #22
    2bc8:	00050900 	andeq	r0, r5, r0, lsl #18
    2bcc:	00691200 	rsbeq	r1, r9, r0, lsl #4
    2bd0:	00b62101 	adcseq	r2, r6, r1, lsl #2
    2bd4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2bd8:	00199c01 	andseq	r9, r9, r1, lsl #24
    2bdc:	00730100 	rsbseq	r0, r3, r0, lsl #2
    2be0:	00000000 	andeq	r0, r0, r0
    2be4:	1a000000 	bne	2bec <__Stack_Size+0x27ec>
    2be8:	47000010 	smladmi	r0, r0, r0, r0
    2bec:	1f000005 	svcne	0x00000005
    2bf0:	00001963 	andeq	r1, r0, r3, ror #18
    2bf4:	00b67401 	adcseq	r7, r6, r1, lsl #8
    2bf8:	10450000 	subne	r0, r5, r0
    2bfc:	691c0000 	ldmdbvs	ip, {}
    2c00:	b6790100 	ldrbtlt	r0, [r9], -r0, lsl #2
    2c04:	01000000 	tsteq	r0, r0
    2c08:	1dde2056 	ldclne	0, cr2, [lr, #344]
    2c0c:	83010000 	movwhi	r0, #4096	; 0x1000
    2c10:	00000041 	andeq	r0, r0, r1, asr #32
    2c14:	b9012100 	stmdblt	r1, {r8, sp}
    2c18:	0100001a 	tsteq	r0, sl, lsl r0
    2c1c:	00b601ae 	adcseq	r0, r6, lr, lsr #3
	...
    2c28:	10580000 	subsne	r0, r8, r0
    2c2c:	05a50000 	streq	r0, [r5]!
    2c30:	16110000 	ldrne	r0, [r1], -r0
    2c34:	01000019 	tsteq	r0, r9, lsl r0
    2c38:	000079ae 	andeq	r7, r0, lr, lsr #19
    2c3c:	00108300 	andseq	r8, r0, r0, lsl #6
    2c40:	00691c00 	rsbeq	r1, r9, r0, lsl #24
    2c44:	00b6b201 	adcseq	fp, r6, r1, lsl #4
    2c48:	55010000 	strpl	r0, [r1]
    2c4c:	001add1d 	andseq	sp, sl, sp, lsl sp
    2c50:	b6b30100 	ldrtlt	r0, [r3], r0, lsl #2
    2c54:	01000000 	tsteq	r0, r0
    2c58:	00002254 	andeq	r2, r0, r4, asr r2
    2c5c:	00000000 	andeq	r0, r0, r0
    2c60:	111f0000 	tstne	pc, r0
    2c64:	01000019 	tsteq	r0, r9, lsl r0
    2c68:	0000b6cd 	andeq	fp, r0, sp, asr #13
    2c6c:	0010ac00 	andseq	sl, r0, r0, lsl #24
    2c70:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2c74:	001a1401 	andseq	r1, sl, r1, lsl #8
    2c78:	005e0100 	subseq	r0, lr, r0, lsl #2
    2c7c:	00000000 	andeq	r0, r0, r0
    2c80:	eb000000 	bl	2c88 <__Stack_Size+0x2888>
    2c84:	c9000010 	stmdbgt	r0, {r4}
    2c88:	1c000005 	stcne	0, cr0, [r0], {5}
    2c8c:	5f010069 	svcpl	0x00010069
    2c90:	000000b6 	strheq	r0, [r0], -r6
    2c94:	20005401 	andcs	r5, r0, r1, lsl #8
    2c98:	00000534 	andeq	r0, r0, r4, lsr r5
    2c9c:	05d42a05 	ldrbeq	r2, [r4, #2565]
    2ca0:	53230000 	teqpl	r3, #0	; 0x0
    2ca4:	20000000 	andcs	r0, r0, r0
    2ca8:	00000265 	andeq	r0, r0, r5, ror #4
    2cac:	05e42805 	strbeq	r2, [r4, #2053]!
    2cb0:	41230000 	teqmi	r3, r0
    2cb4:	20000000 	andcs	r0, r0, r0
    2cb8:	000003f6 	strdeq	r0, [r0], -r6
    2cbc:	05e42805 	strbeq	r2, [r4, #2053]!
    2cc0:	53240000 	teqpl	r4, #0	; 0x0
    2cc4:	05000000 	streq	r0, [r0]
    2cc8:	25000006 	strcs	r0, [r0, #-6]
    2ccc:	000002f3 	strdeq	r0, [r0], -r3
    2cd0:	200003ff 	strdcs	r0, [r0], -pc
    2cd4:	0000047a 	andeq	r0, r0, sl, ror r4
    2cd8:	06102905 	ldreq	r2, [r0], -r5, lsl #18
    2cdc:	f4230000 	vld4.8	{d0-d3}, [r3], r0
    2ce0:	26000005 	strcs	r0, [r0], -r5
    2ce4:	00000615 	andeq	r0, r0, r5, lsl r6
    2ce8:	05d44405 	ldrbeq	r4, [r4, #1029]
    2cec:	26000000 	strcs	r0, [r0], -r0
    2cf0:	00000393 	muleq	r0, r3, r3
    2cf4:	05d44405 	ldrbeq	r4, [r4, #1029]
    2cf8:	24000000 	strcs	r0, [r0]
    2cfc:	00000053 	andeq	r0, r0, r3, asr r0
    2d00:	0000063d 	andeq	r0, r0, sp, lsr r6
    2d04:	0002f327 	andeq	pc, r2, r7, lsr #6
    2d08:	20004000 	andcs	r4, r0, r0
    2d0c:	000000ec 	andeq	r0, r0, ip, ror #1
    2d10:	06484505 	strbeq	r4, [r8], -r5, lsl #10
    2d14:	2d230000 	stccs	0, cr0, [r3]
    2d18:	26000006 	strcs	r0, [r0], -r6
    2d1c:	000005e4 	andeq	r0, r0, r4, ror #11
    2d20:	05e45805 	strbeq	r5, [r4, #2053]!
    2d24:	26000000 	strcs	r0, [r0], -r0
    2d28:	000000f9 	strdeq	r0, [r0], -r9
    2d2c:	05e45805 	strbeq	r5, [r4, #2053]!
    2d30:	20000000 	andcs	r0, r0, r0
    2d34:	000002b2 	strheq	r0, [r0], -r2
    2d38:	06705905 	ldrbteq	r5, [r0], -r5, lsl #18
    2d3c:	f4230000 	vld4.8	{d0-d3}, [r3], r0
    2d40:	28000005 	stmdacs	r0, {r0, r2}
    2d44:	00001724 	andeq	r1, r0, r4, lsr #14
    2d48:	005d1001 	subseq	r1, sp, r1
    2d4c:	05010000 	streq	r0, [r1]
    2d50:	00000003 	andeq	r0, r0, r3
    2d54:	1a852800 	bne	fe14cd5c <SCS_BASE+0x1e13ed5c>
    2d58:	11010000 	tstne	r1, r0
    2d5c:	0000005d 	andeq	r0, r0, sp, asr r0
    2d60:	00030501 	andeq	r0, r3, r1, lsl #10
    2d64:	28000000 	stmdacs	r0, {}
    2d68:	0000178f 	andeq	r1, r0, pc, lsl #15
    2d6c:	00b61201 	adcseq	r1, r6, r1, lsl #4
    2d70:	05010000 	streq	r0, [r1]
    2d74:	00000003 	andeq	r0, r0, r3
    2d78:	18f92800 	ldmne	r9!, {fp, sp}^
    2d7c:	13010000 	movwne	r0, #4096	; 0x1000
    2d80:	00000053 	andeq	r0, r0, r3, asr r0
    2d84:	00030501 	andeq	r0, r3, r1, lsl #10
    2d88:	24000000 	strcs	r0, [r0]
    2d8c:	000000af 	andeq	r0, r0, pc, lsr #1
    2d90:	000006cd 	andeq	r0, r0, sp, asr #13
    2d94:	0002f327 	andeq	pc, r2, r7, lsr #6
    2d98:	28001100 	stmdacs	r0, {r8, ip}
    2d9c:	00001a35 	andeq	r1, r0, r5, lsr sl
    2da0:	06bd1401 	ldrteq	r1, [sp], r1, lsl #8
    2da4:	05010000 	streq	r0, [r1]
    2da8:	00000003 	andeq	r0, r0, r3
    2dac:	1a312800 	bne	c4cdb4 <__Stack_Size+0xc4c9b4>
    2db0:	15010000 	strne	r0, [r1]
    2db4:	000006bd 	strheq	r0, [r0], -sp
    2db8:	00030501 	andeq	r0, r3, r1, lsl #10
    2dbc:	24000000 	strcs	r0, [r0]
    2dc0:	000000b6 	strheq	r0, [r0], -r6
    2dc4:	00000701 	andeq	r0, r0, r1, lsl #14
    2dc8:	0002f327 	andeq	pc, r2, r7, lsr #6
    2dcc:	28001100 	stmdacs	r0, {r8, ip}
    2dd0:	00001995 	muleq	r0, r5, r9
    2dd4:	06f11601 	ldrbteq	r1, [r1], r1, lsl #12
    2dd8:	05010000 	streq	r0, [r1]
    2ddc:	00000003 	andeq	r0, r0, r3
    2de0:	005d2400 	subseq	r2, sp, r0, lsl #8
    2de4:	07230000 	streq	r0, [r3, -r0]!
    2de8:	f3270000 	vhadd.u32	d0, d7, d0
    2dec:	11000002 	tstne	r0, r2
    2df0:	64692900 	strbtvs	r2, [r9], #-2304
    2df4:	1701005f 	smlsdne	r1, pc, r0, r0
    2df8:	00000713 	andeq	r0, r0, r3, lsl r7
    2dfc:	00030501 	andeq	r0, r3, r1, lsl #10
    2e00:	28000000 	stmdacs	r0, {}
    2e04:	00001a90 	muleq	r0, r0, sl
    2e08:	003a1a01 	eorseq	r1, sl, r1, lsl #20
    2e0c:	05010000 	streq	r0, [r1]
    2e10:	00000003 	andeq	r0, r0, r3
    2e14:	1a0b2800 	bne	2cce1c <__Stack_Size+0x2cca1c>
    2e18:	1b010000 	blne	42e20 <__Stack_Size+0x42a20>
    2e1c:	00000759 	andeq	r0, r0, r9, asr r7
    2e20:	00030501 	andeq	r0, r3, r1, lsl #10
    2e24:	09000000 	stmdbeq	r0, {}
    2e28:	0000bd04 	andeq	fp, r0, r4, lsl #26
    2e2c:	19052800 	stmdbne	r5, {fp, sp}
    2e30:	1c010000 	stcne	0, cr0, [r1], {0}
    2e34:	000000b6 	strheq	r0, [r0], -r6
    2e38:	00030501 	andeq	r0, r3, r1, lsl #10
    2e3c:	00000000 	andeq	r0, r0, r0
    2e40:	00000822 	andeq	r0, r0, r2, lsr #16
    2e44:	08e90002 	stmiaeq	r9!, {r1}^
    2e48:	01040000 	tsteq	r4, r0
    2e4c:	000001c6 	andeq	r0, r0, r6, asr #3
    2e50:	001c9001 	andseq	r9, ip, r1
    2e54:	00039d00 	andeq	r9, r3, r0, lsl #26
    2e58:	00357000 	eorseq	r7, r5, r0
    2e5c:	003c2608 	eorseq	r2, ip, r8, lsl #12
    2e60:	000bb908 	andeq	fp, fp, r8, lsl #18
    2e64:	33730200 	cmncc	r3, #0	; 0x0
    2e68:	17020032 	smladxne	r2, r2, r0, r0
    2e6c:	00000030 	andeq	r0, r0, r0, lsr r0
    2e70:	50050403 	andpl	r0, r5, r3, lsl #8
    2e74:	02000021 	andeq	r0, r0, #33	; 0x21
    2e78:	00363173 	eorseq	r3, r6, r3, ror r1
    2e7c:	00421802 	subeq	r1, r2, r2, lsl #16
    2e80:	02030000 	andeq	r0, r3, #0	; 0x0
    2e84:	00049505 	andeq	r9, r4, r5, lsl #10
    2e88:	38730200 	ldmdacc	r3!, {r9}^
    2e8c:	53190200 	tstpl	r9, #0	; 0x0
    2e90:	03000000 	movweq	r0, #0	; 0x0
    2e94:	04690601 	strbteq	r0, [r9], #-1537
    2e98:	75020000 	strvc	r0, [r2]
    2e9c:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    2ea0:	00006527 	andeq	r6, r0, r7, lsr #10
    2ea4:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2ea8:	000021f1 	strdeq	r2, [r0], -r1
    2eac:	36317502 	ldrtcc	r7, [r1], -r2, lsl #10
    2eb0:	77280200 	strvc	r0, [r8, -r0, lsl #4]!
    2eb4:	03000000 	movweq	r0, #0	; 0x0
    2eb8:	02220702 	eoreq	r0, r2, #524288	; 0x80000
    2ebc:	75020000 	strvc	r0, [r2]
    2ec0:	29020038 	stmdbcs	r2, {r3, r4, r5}
    2ec4:	00000088 	andeq	r0, r0, r8, lsl #1
    2ec8:	67080103 	strvs	r0, [r8, -r3, lsl #2]
    2ecc:	04000004 	streq	r0, [r0], #-4
    2ed0:	00001f41 	andeq	r1, r0, r1, asr #30
    2ed4:	00882a02 	addeq	r2, r8, r2, lsl #20
    2ed8:	04050000 	streq	r0, [r5]
    2edc:	03010607 	movweq	r0, #5639	; 0x1607
    2ee0:	0000d1b5 	strheq	sp, [r0], -r5
    2ee4:	1baa0700 	blne	fea84aec <SCS_BASE+0x1ea76aec>
    2ee8:	00c00000 	sbceq	r0, r0, r0
    2eec:	001cdb07 	andseq	sp, ip, r7, lsl #22
    2ef0:	22072000 	andcs	r2, r7, #0	; 0x0
    2ef4:	1000001b 	andne	r0, r0, fp, lsl r0
    2ef8:	001cc307 	andseq	ip, ip, r7, lsl #6
    2efc:	32070800 	andcc	r0, r7, #0	; 0x0
    2f00:	0400001b 	streq	r0, [r0], #-27
    2f04:	001b9d07 	andseq	r9, fp, r7, lsl #26
    2f08:	ff070200 	undefined instruction 0xff070200
    2f0c:	0100001b 	tsteq	r0, fp, lsl r0
    2f10:	03020600 	movweq	r0, #9728	; 0x2600
    2f14:	00012fcf 	andeq	r2, r1, pc, asr #31
    2f18:	06800700 	streq	r0, [r0], r0, lsl #14
    2f1c:	07010000 	streq	r0, [r1, -r0]
    2f20:	00000487 	andeq	r0, r0, r7, lsl #9
    2f24:	03100702 	tsteq	r0, #524288	; 0x80000
    2f28:	07040000 	streq	r0, [r4, -r0]
    2f2c:	0000068e 	andeq	r0, r0, lr, lsl #13
    2f30:	04cb0708 	strbeq	r0, [fp], #1800
    2f34:	07100000 	ldreq	r0, [r0, -r0]
    2f38:	00000144 	andeq	r0, r0, r4, asr #2
    2f3c:	058c0720 	streq	r0, [ip, #1824]
    2f40:	00c00000 	sbceq	r0, r0, r0
    2f44:	00020307 	andeq	r0, r2, r7, lsl #6
    2f48:	07018000 	streq	r8, [r1, -r0]
    2f4c:	000006c1 	andeq	r0, r0, r1, asr #13
    2f50:	59070280 	stmdbpl	r7, {r7, r9}
    2f54:	80000004 	andhi	r0, r0, r4
    2f58:	00260704 	eoreq	r0, r6, r4, lsl #14
    2f5c:	08800000 	stmeq	r0, {}
    2f60:	0002a507 	andeq	sl, r2, r7, lsl #10
    2f64:	07108000 	ldreq	r8, [r0, -r0]
    2f68:	00000135 	andeq	r0, r0, r5, lsr r1
    2f6c:	08002080 	stmdaeq	r0, {r7, sp}
    2f70:	001c0e01 	andseq	r0, ip, r1, lsl #28
    2f74:	010e0100 	tsteq	lr, r0, lsl #2
    2f78:	0000008f 	andeq	r0, r0, pc, lsl #1
    2f7c:	08003570 	stmdaeq	r0, {r4, r5, r6, r8, sl, ip, sp}
    2f80:	08003588 	stmdaeq	r0, {r3, r7, r8, sl, ip, sp}
    2f84:	01095d01 	tsteq	r9, r1, lsl #26
    2f88:	00001cac 	andeq	r1, r0, ip, lsr #25
    2f8c:	8f011401 	svchi	0x00011401
    2f90:	88000000 	stmdahi	r0, {}
    2f94:	b8080035 	stmdalt	r8, {r0, r2, r4, r5}
    2f98:	01080035 	tsteq	r8, r5, lsr r0
    2f9c:	00016f5d 	andeq	r6, r1, sp, asr pc
    2fa0:	1c5f0a00 	mrrcne	10, 0, r0, pc, cr0
    2fa4:	15010000 	strne	r0, [r1]
    2fa8:	0000008f 	andeq	r0, r0, pc, lsl #1
    2fac:	0b005001 	bleq	16fb8 <__Stack_Size+0x16bb8>
    2fb0:	001afd01 	andseq	pc, sl, r1, lsl #26
    2fb4:	01ed0100 	mvneq	r0, r0, lsl #2
    2fb8:	0035b801 	eorseq	fp, r5, r1, lsl #16
    2fbc:	00362408 	eorseq	r2, r6, r8, lsl #8
    2fc0:	00111608 	andseq	r1, r1, r8, lsl #12
    2fc4:	0001d400 	andeq	sp, r1, r0, lsl #8
    2fc8:	1be40c00 	blne	ff905fd0 <SCS_BASE+0x1f8f7fd0>
    2fcc:	ec010000 	stc	0, cr0, [r1], {0}
    2fd0:	00002501 	andeq	r2, r0, r1, lsl #10
    2fd4:	00114100 	andseq	r4, r1, r0, lsl #2
    2fd8:	1b4b0d00 	blne	12c63e0 <__Stack_Size+0x12c5fe0>
    2fdc:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    2fe0:	00007e01 	andeq	r7, r0, r1, lsl #28
    2fe4:	0e570100 	rdfeqs	f0, f7, f0
    2fe8:	00001b6c 	andeq	r1, r0, ip, ror #22
    2fec:	7e01ee01 	cdpvc	14, 0, cr14, cr1, cr1, {0}
    2ff0:	5f000000 	svcpl	0x00000000
    2ff4:	0d000011 	stceq	0, cr0, [r0, #-68]
    2ff8:	00001bbd 	strheq	r1, [r0], -sp
    2ffc:	2501ef01 	strcs	lr, [r1, #-3841]
    3000:	01000000 	tsteq	r0, r0
    3004:	1c760d55 	ldclne	13, cr0, [r6], #-340
    3008:	ef010000 	svc	0x00010000
    300c:	00002501 	andeq	r2, r0, r1, lsl #10
    3010:	00560100 	subseq	r0, r6, r0, lsl #2
    3014:	1bea010b 	blne	ffa83448 <SCS_BASE+0x1fa75448>
    3018:	c7010000 	strgt	r0, [r1, -r0]
    301c:	36240101 	strtcc	r0, [r4], -r1, lsl #2
    3020:	36b40800 	ldrtcc	r0, [r4], r0, lsl #16
    3024:	118b0800 	orrne	r0, fp, r0, lsl #16
    3028:	02490000 	subeq	r0, r9, #0	; 0x0
    302c:	f70c0000 	undefined instruction 0xf70c0000
    3030:	0100001a 	tsteq	r0, sl, lsl r0
    3034:	003701c6 	eorseq	r0, r7, r6, asr #3
    3038:	11b60000 	undefined instruction 0x11b60000
    303c:	4b0d0000 	blmi	343044 <__Stack_Size+0x342c44>
    3040:	0100001b 	tsteq	r0, fp, lsl r0
    3044:	007e01c8 	rsbseq	r0, lr, r8, asr #3
    3048:	57010000 	strpl	r0, [r1, -r0]
    304c:	001b6c0e 	andseq	r6, fp, lr, lsl #24
    3050:	01c80100 	biceq	r0, r8, r0, lsl #2
    3054:	0000007e 	andeq	r0, r0, lr, ror r0
    3058:	000011d4 	ldrdeq	r1, [r0], -r4
    305c:	001cbe0d 	andseq	fp, ip, sp, lsl #28
    3060:	01c90100 	biceq	r0, r9, r0, lsl #2
    3064:	0000006c 	andeq	r0, r0, ip, rrx
    3068:	290d5401 	stmdbcs	sp, {r0, sl, ip, lr}
    306c:	0100001c 	tsteq	r0, ip, lsl r0
    3070:	006c01c9 	rsbeq	r0, ip, r9, asr #3
    3074:	56010000 	strpl	r0, [r1], -r0
    3078:	001cb70e 	andseq	fp, ip, lr, lsl #14
    307c:	01ca0100 	biceq	r0, sl, r0, lsl #2
    3080:	0000007e 	andeq	r0, r0, lr, ror r0
    3084:	00001218 	andeq	r1, r0, r8, lsl r2
    3088:	54010b00 	strpl	r0, [r1], #-2816
    308c:	0100001c 	tsteq	r0, ip, lsl r0
    3090:	b40101a2 	strlt	r0, [r1], #-418
    3094:	3c080036 	stccc	0, cr0, [r8], {54}
    3098:	50080037 	andpl	r0, r8, r7, lsr r0
    309c:	bd000012 	stclt	0, cr0, [r0, #-72]
    30a0:	0c000002 	stceq	0, cr0, [r0], {2}
    30a4:	00001af7 	strdeq	r1, [r0], -r7
    30a8:	4901a101 	stmdbmi	r1, {r0, r8, sp, pc}
    30ac:	7b000000 	blvc	30b4 <__Stack_Size+0x2cb4>
    30b0:	0d000012 	stceq	0, cr0, [r0, #-72]
    30b4:	00001b4b 	andeq	r1, r0, fp, asr #22
    30b8:	7e01a301 	cdpvc	3, 0, cr10, cr1, cr1, {0}
    30bc:	02000000 	andeq	r0, r0, #0	; 0x0
    30c0:	6c0d007d 	stcvs	0, cr0, [sp], {125}
    30c4:	0100001b 	tsteq	r0, fp, lsl r0
    30c8:	007e01a3 	rsbseq	r0, lr, r3, lsr #3
    30cc:	57010000 	strpl	r0, [r1, -r0]
    30d0:	001cbe0d 	andseq	fp, ip, sp, lsl #28
    30d4:	01a40100 	undefined instruction 0x01a40100
    30d8:	0000006c 	andeq	r0, r0, ip, rrx
    30dc:	290d5401 	stmdbcs	sp, {r0, sl, ip, lr}
    30e0:	0100001c 	tsteq	r0, ip, lsl r0
    30e4:	006c01a4 	rsbeq	r0, ip, r4, lsr #3
    30e8:	56010000 	strpl	r0, [r1], -r0
    30ec:	001cb70e 	andseq	fp, ip, lr, lsl #14
    30f0:	01a50100 	undefined instruction 0x01a50100
    30f4:	0000007e 	andeq	r0, r0, lr, ror r0
    30f8:	00001299 	muleq	r0, r9, r2
    30fc:	60010b00 	andvs	r0, r1, r0, lsl #22
    3100:	0100001b 	tsteq	r0, fp, lsl r0
    3104:	3c010183 	stfccs	f0, [r1], {131}
    3108:	94080037 	strls	r0, [r8], #-55
    310c:	d1080037 	tstle	r8, r7, lsr r0
    3110:	22000012 	andcs	r0, r0, #18	; 0x12
    3114:	0c000003 	stceq	0, cr0, [r0], {3}
    3118:	00001af7 	strdeq	r1, [r0], -r7
    311c:	5a018201 	bpl	63928 <__Stack_Size+0x63528>
    3120:	fc000000 	stc2	0, cr0, [r0], {0}
    3124:	0d000012 	stceq	0, cr0, [r0, #-72]
    3128:	00001b4b 	andeq	r1, r0, fp, asr #22
    312c:	7e018401 	cdpvc	4, 0, cr8, cr1, cr1, {0}
    3130:	01000000 	tsteq	r0, r0
    3134:	1b6c0e55 	blne	1b06a90 <__Stack_Size+0x1b06690>
    3138:	84010000 	strhi	r0, [r1]
    313c:	00007e01 	andeq	r7, r0, r1, lsl #28
    3140:	00131a00 	andseq	r1, r3, r0, lsl #20
    3144:	1cbe0d00 	ldcne	13, cr0, [lr]
    3148:	85010000 	strhi	r0, [r1]
    314c:	00005a01 	andeq	r5, r0, r1, lsl #20
    3150:	0d540100 	ldfeqe	f0, [r4]
    3154:	00001c29 	andeq	r1, r0, r9, lsr #24
    3158:	5a018501 	bpl	64564 <__Stack_Size+0x64164>
    315c:	01000000 	tsteq	r0, r0
    3160:	010b0056 	qaddeq	r0, r6, fp
    3164:	00001b91 	muleq	r0, r1, fp
    3168:	01016501 	tsteq	r1, r1, lsl #10
    316c:	08003794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, ip, sp}
    3170:	080037ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, ip, sp}
    3174:	00001346 	andeq	r1, r0, r6, asr #6
    3178:	00000387 	andeq	r0, r0, r7, lsl #7
    317c:	001af70c 	andseq	pc, sl, ip, lsl #14
    3180:	01640100 	cmneq	r4, r0, lsl #2
    3184:	0000006c 	andeq	r0, r0, ip, rrx
    3188:	00001371 	andeq	r1, r0, r1, ror r3
    318c:	001b4b0d 	andseq	r4, fp, sp, lsl #22
    3190:	01660100 	cmneq	r6, r0, lsl #2
    3194:	0000007e 	andeq	r0, r0, lr, ror r0
    3198:	6c0e5601 	stcvs	6, cr5, [lr], {1}
    319c:	0100001b 	tsteq	r0, fp, lsl r0
    31a0:	007e0166 	rsbseq	r0, lr, r6, ror #2
    31a4:	138f0000 	orrne	r0, pc, #0	; 0x0
    31a8:	be0d0000 	cdplt	0, 0, cr0, cr13, cr0, {0}
    31ac:	0100001c 	tsteq	r0, ip, lsl r0
    31b0:	006c0167 	rsbeq	r0, ip, r7, ror #2
    31b4:	55010000 	strpl	r0, [r1]
    31b8:	001c290d 	andseq	r2, ip, sp, lsl #18
    31bc:	01670100 	cmneq	r7, r0, lsl #2
    31c0:	0000006c 	andeq	r0, r0, ip, rrx
    31c4:	0b005401 	bleq	181d0 <__Stack_Size+0x17dd0>
    31c8:	001ca101 	andseq	sl, ip, r1, lsl #2
    31cc:	01590100 	cmpeq	r9, r0, lsl #2
    31d0:	0037ec01 	eorseq	lr, r7, r1, lsl #24
    31d4:	00385008 	eorseq	r5, r8, r8
    31d8:	0013bb08 	andseq	fp, r3, r8, lsl #22
    31dc:	0003c200 	andeq	ip, r3, r0, lsl #4
    31e0:	1cd50c00 	ldclne	12, cr0, [r5], {0}
    31e4:	58010000 	stmdapl	r1, {}
    31e8:	00007e01 	andeq	r7, r0, r1, lsl #28
    31ec:	0013e600 	andseq	lr, r3, r0, lsl #12
    31f0:	1cd00e00 	ldclne	14, cr0, [r0], {0}
    31f4:	5a010000 	bpl	431fc <__Stack_Size+0x42dfc>
    31f8:	00007e01 	andeq	r7, r0, r1, lsl #28
    31fc:	00140f00 	andseq	r0, r4, r0, lsl #30
    3200:	010f0000 	mrseq	r0, CPSR
    3204:	00001bc2 	andeq	r1, r0, r2, asr #23
    3208:	ed012f01 	stc	15, cr2, [r1, #-4]
    320c:	50000003 	andpl	r0, r0, r3
    3210:	6c080038 	stcvs	0, cr0, [r8], {56}
    3214:	2d080038 	stccs	0, cr0, [r8, #-224]
    3218:	ed000014 	stc	0, cr0, [r0, #-80]
    321c:	10000003 	andne	r0, r0, r3
    3220:	2f010063 	svccs	0x00010063
    3224:	000003f4 	strdeq	r0, [r0], -r4
    3228:	0000144c 	andeq	r1, r0, ip, asr #8
    322c:	05041100 	streq	r1, [r4, #-256]
    3230:	00746e69 	rsbseq	r6, r4, r9, ror #28
    3234:	70080103 	andvc	r0, r8, r3, lsl #2
    3238:	0f000004 	svceq	0x00000004
    323c:	001c1f01 	andseq	r1, ip, r1, lsl #30
    3240:	01d20100 	bicseq	r0, r2, r0, lsl #2
    3244:	000003ed 	andeq	r0, r0, sp, ror #7
    3248:	0800386c 	stmdaeq	r0, {r2, r3, r5, r6, fp, ip, sp}
    324c:	08003878 	stmdaeq	r0, {r3, r4, r5, r6, fp, ip, sp}
    3250:	0000146a 	andeq	r1, r0, sl, ror #8
    3254:	00000426 	andeq	r0, r0, r6, lsr #8
    3258:	01006310 	tsteq	r0, r0, lsl r3
    325c:	0003f4d2 	ldrdeq	pc, [r3], -r2
    3260:	00149500 	andseq	r9, r4, r0, lsl #10
    3264:	010f0000 	mrseq	r0, CPSR
    3268:	00001c4b 	andeq	r1, r0, fp, asr #24
    326c:	ed013b01 	vstr	d3, [r1, #-4]
    3270:	78000003 	stmdavc	r0, {r0, r1}
    3274:	94080038 	strls	r0, [r8], #-56
    3278:	a8080038 	stmdage	r8, {r3, r4, r5}
    327c:	5e000014 	mcrpl	0, 0, r0, cr0, cr4, {0}
    3280:	10000004 	andne	r0, r0, r4
    3284:	00727473 	rsbseq	r7, r2, r3, ror r4
    3288:	045e3b01 	ldrbeq	r3, [lr], #-2817
    328c:	14d30000 	ldrbne	r0, [r3]
    3290:	6e120000 	wxorvs	wr0, wr2, wr0
    3294:	ed3c0100 	ldfs	f0, [ip]
    3298:	01000003 	tsteq	r0, r3
    329c:	04130054 	ldreq	r0, [r3], #-84
    32a0:	00000464 	andeq	r0, r0, r4, ror #8
    32a4:	0003f414 	andeq	pc, r3, r4, lsl r4
    32a8:	87010b00 	strhi	r0, [r1, -r0, lsl #22]
    32ac:	0100001c 	tsteq	r0, ip, lsl r0
    32b0:	94010145 	strls	r0, [r1], #-325
    32b4:	de080038 	mcrle	0, 0, r0, cr8, cr8, {1}
    32b8:	f1080038 	undefined instruction 0xf1080038
    32bc:	a3000014 	movwge	r0, #20	; 0x14
    32c0:	0c000004 	stceq	0, cr0, [r0], {4}
    32c4:	00001c65 	andeq	r1, r0, r5, ror #24
    32c8:	7e014501 	cfsh32vc	mvfx4, mvfx1, #1
    32cc:	1c000000 	stcne	0, cr0, [r0], {0}
    32d0:	15000015 	strne	r0, [r0, #-21]
    32d4:	0074756f 	rsbseq	r7, r4, pc, ror #10
    32d8:	a3014601 	movwge	r4, #5633	; 0x1601
    32dc:	02000004 	andeq	r0, r0, #4	; 0x4
    32e0:	16007391 	undefined
    32e4:	000003f4 	strdeq	r0, [r0], -r4
    32e8:	000004b3 	strheq	r0, [r0], -r3
    32ec:	00009a17 	andeq	r9, r0, r7, lsl sl
    32f0:	0b000400 	bleq	42f8 <__Stack_Size+0x3ef8>
    32f4:	001aed01 	andseq	lr, sl, r1, lsl #26
    32f8:	012a0100 	teqeq	sl, r0, lsl #2
    32fc:	0038e001 	eorseq	lr, r8, r1
    3300:	00395608 	eorseq	r5, r9, r8, lsl #12
    3304:	00152f08 	andseq	r2, r5, r8, lsl #30
    3308:	0004ed00 	andeq	lr, r4, r0, lsl #26
    330c:	1c300c00 	ldcne	12, cr0, [r0]
    3310:	2a010000 	bcs	43318 <__Stack_Size+0x42f18>
    3314:	00006c01 	andeq	r6, r0, r1, lsl #24
    3318:	00155a00 	andseq	r5, r5, r0, lsl #20
    331c:	756f1500 	strbvc	r1, [pc, #-1280]!	; 2e24 <__Stack_Size+0x2a24>
    3320:	2b010074 	blcs	434f8 <__Stack_Size+0x430f8>
    3324:	0004ed01 	andeq	lr, r4, r1, lsl #26
    3328:	71910200 	orrsvc	r0, r1, r0, lsl #4
    332c:	03f41600 	mvnseq	r1, #0	; 0x0
    3330:	04fd0000 	ldrbteq	r0, [sp]
    3334:	9a170000 	bls	5c333c <__Stack_Size+0x5c2f3c>
    3338:	06000000 	streq	r0, [r0], -r0
    333c:	da010b00 	ble	45f44 <__Stack_Size+0x45b44>
    3340:	0100001b 	tsteq	r0, fp, lsl r0
    3344:	58010104 	stmdapl	r1, {r2, r8}
    3348:	cc080039 	stcgt	0, cr0, [r8], {57}
    334c:	6d080039 	stcvs	0, cr0, [r8, #-228]
    3350:	7f000015 	svcvc	0x00000015
    3354:	0c000005 	stceq	0, cr0, [r0], {5}
    3358:	00001c45 	andeq	r1, r0, r5, asr #24
    335c:	25010401 	strcs	r0, [r1, #-1025]
    3360:	98000000 	stmdals	r0, {}
    3364:	0e000015 	mcreq	0, 0, r0, cr0, cr5, {0}
    3368:	00001963 	andeq	r1, r0, r3, ror #18
    336c:	5a010501 	bpl	44778 <__Stack_Size+0x44378>
    3370:	ab000000 	blge	3378 <__Stack_Size+0x2f78>
    3374:	0e000015 	mcreq	0, 0, r0, cr0, cr5, {0}
    3378:	00001b8c 	andeq	r1, r0, ip, lsl #23
    337c:	5a010501 	bpl	44788 <__Stack_Size+0x44388>
    3380:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    3384:	18000015 	stmdane	r0, {r0, r2, r4}
    3388:	00766964 	rsbseq	r6, r6, r4, ror #18
    338c:	5a010501 	bpl	44798 <__Stack_Size+0x44398>
    3390:	d1000000 	tstle	r0, r0
    3394:	15000015 	strne	r0, [r0, #-21]
    3398:	0074756f 	rsbseq	r7, r4, pc, ror #10
    339c:	7f010601 	svcvc	0x00010601
    33a0:	02000005 	andeq	r0, r0, #5	; 0x5
    33a4:	69186c91 	ldmdbvs	r8, {r0, r4, r7, sl, fp, sp, lr}
    33a8:	01070100 	tsteq	r7, r0, lsl #2
    33ac:	0000007e 	andeq	r0, r0, lr, ror r0
    33b0:	000015fa 	strdeq	r1, [r0], -sl
    33b4:	01006a19 	tsteq	r0, r9, lsl sl
    33b8:	007e0107 	rsbseq	r0, lr, r7, lsl #2
    33bc:	16000000 	strne	r0, [r0], -r0
    33c0:	000003f4 	strdeq	r0, [r0], -r4
    33c4:	0000058f 	andeq	r0, r0, pc, lsl #11
    33c8:	00009a17 	andeq	r9, r0, r7, lsl sl
    33cc:	1a000b00 	bne	5fd4 <__Stack_Size+0x5bd4>
    33d0:	001c7d01 	andseq	r7, ip, r1, lsl #26
    33d4:	01e60100 	mvneq	r0, r0, lsl #2
    33d8:	080039cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, fp, ip, sp}
    33dc:	08003a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp, ip, sp}
    33e0:	0000160d 	andeq	r1, r0, sp, lsl #12
    33e4:	000005f6 	strdeq	r0, [r0], -r6
    33e8:	001b8c1b 	andseq	r8, fp, fp, lsl ip
    33ec:	5ae60100 	bpl	ff9837f4 <SCS_BASE+0x1f9757f4>
    33f0:	38000000 	stmdacc	r0, {}
    33f4:	1c000016 	stcne	0, cr0, [r0], {22}
    33f8:	00001963 	andeq	r1, r0, r3, ror #18
    33fc:	005ae701 	subseq	lr, sl, r1, lsl #14
    3400:	641d0000 	ldrvs	r0, [sp]
    3404:	01007669 	tsteq	r0, r9, ror #12
    3408:	00005ae7 	andeq	r5, r0, r7, ror #21
    340c:	00164b00 	andseq	r4, r6, r0, lsl #22
    3410:	756f1200 	strbvc	r1, [pc, #-512]!	; 3218 <__Stack_Size+0x2e18>
    3414:	e8010074 	stmda	r1, {r2, r4, r5, r6}
    3418:	000005f6 	strdeq	r0, [r0], -r6
    341c:	1d6d9102 	stfnep	f1, [sp, #-8]!
    3420:	e9010069 	stmdb	r1, {r0, r3, r5, r6}
    3424:	0000007e 	andeq	r0, r0, lr, ror r0
    3428:	00001674 	andeq	r1, r0, r4, ror r6
    342c:	01006a1e 	tsteq	r0, lr, lsl sl
    3430:	00007ee9 	andeq	r7, r0, r9, ror #29
    3434:	f4160000 	undefined instruction 0xf4160000
    3438:	06000003 	streq	r0, [r0], -r3
    343c:	17000006 	strne	r0, [r0, -r6]
    3440:	0000009a 	muleq	r0, sl, r0
    3444:	010f000a 	tsteq	pc, sl
    3448:	00001bce 	andeq	r1, r0, lr, asr #23
    344c:	ed01d701 	stc	7, cr13, [r1, #-4]
    3450:	3c000003 	stccc	0, cr0, [r0], {3}
    3454:	4808003a 	stmdami	r8, {r1, r3, r4, r5}
    3458:	8708003a 	smladxhi	r8, sl, r0, r0
    345c:	31000016 	tstcc	r0, r6, lsl r0
    3460:	10000006 	andne	r0, r0, r6
    3464:	d7010073 	smlsdxle	r1, r3, r0, r0
    3468:	0000045e 	andeq	r0, r0, lr, asr r4
    346c:	000016b2 	strheq	r1, [r0], -r2
    3470:	35011a00 	strcc	r1, [r1, #-2560]
    3474:	0100001c 	tsteq	r0, ip, lsl r0
    3478:	3a48019b 	bcc	1203aec <__Stack_Size+0x12036ec>
    347c:	3ad00800 	bcc	ff405484 <SCS_BASE+0x1f3f7484>
    3480:	16c50800 	strbne	r0, [r5], r0, lsl #16
    3484:	065a0000 	ldrbeq	r0, [sl], -r0
    3488:	251b0000 	ldrcs	r0, [fp]
    348c:	0100003e 	tsteq	r0, lr, lsr r0
    3490:	00006c9b 	muleq	r0, fp, ip
    3494:	0016e400 	andseq	lr, r6, r0, lsl #8
    3498:	011f0000 	tsteq	pc, r0
    349c:	00001b75 	andeq	r1, r0, r5, ror fp
    34a0:	d001ba01 	andle	fp, r1, r1, lsl #20
    34a4:	6408003a 	strvs	r0, [r8], #-58
    34a8:	5a08003b 	bpl	20359c <__Stack_Size+0x20319c>
    34ac:	0f000017 	svceq	0x00000017
    34b0:	001b4201 	andseq	r4, fp, r1, lsl #4
    34b4:	017c0100 	cmneq	ip, r0, lsl #2
    34b8:	000006b2 	strheq	r0, [r0], -r2
    34bc:	08003b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp, ip, sp}
    34c0:	08003bbe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, fp, ip, sp}
    34c4:	00001785 	andeq	r1, r0, r5, lsl #15
    34c8:	000006b2 	strheq	r0, [r0], -r2
    34cc:	72747310 	rsbsvc	r7, r4, #1073741824	; 0x40000000
    34d0:	b27c0100 	rsbslt	r0, ip, #0	; 0x0
    34d4:	a4000006 	strge	r0, [r0], #-6
    34d8:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
    34dc:	7d010063 	stcvc	0, cr0, [r1, #-396]
    34e0:	0000007e 	andeq	r0, r0, lr, ror r0
    34e4:	6e656c12 	mcrvs	12, 3, r6, cr5, cr2, {0}
    34e8:	7e7d0100 	rpwvce	f0, f5, f0
    34ec:	01000000 	tsteq	r0, r0
    34f0:	04130054 	ldreq	r0, [r3], #-84
    34f4:	000003f4 	strdeq	r0, [r0], -r4
    34f8:	1b09010f 	blne	24393c <__Stack_Size+0x24353c>
    34fc:	e1010000 	tst	r1, r0
    3500:	0006b201 	andeq	fp, r6, r1, lsl #4
    3504:	003bc000 	eorseq	ip, fp, r0
    3508:	003bcc08 	eorseq	ip, fp, r8, lsl #24
    350c:	0017c208 	andseq	ip, r7, r8, lsl #4
    3510:	0006e300 	andeq	lr, r6, r0, lsl #6
    3514:	00731000 	rsbseq	r1, r3, r0
    3518:	06b2e101 	ldrteq	lr, [r2], r1, lsl #2
    351c:	17ed0000 	strbne	r0, [sp, r0]!
    3520:	0f000000 	svceq	0x00000000
    3524:	001c6a01 	andseq	r6, ip, r1, lsl #20
    3528:	01440100 	cmpeq	r4, r0, lsl #2
    352c:	000003ed 	andeq	r0, r0, sp, ror #7
    3530:	08003bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp, ip, sp}
    3534:	08003bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, sp}
    3538:	00001800 	andeq	r1, r0, r0, lsl #16
    353c:	0000070c 	andeq	r0, r0, ip, lsl #14
    3540:	01006312 	tsteq	r0, r2, lsl r3
    3544:	0003f445 	andeq	pc, r3, r5, asr #8
    3548:	00500100 	subseq	r0, r0, r0, lsl #2
    354c:	1b840120 	blne	fe1039d4 <SCS_BASE+0x1e0f59d4>
    3550:	dc010000 	stcle	0, cr0, [r1], {0}
    3554:	0003ed01 	andeq	lr, r3, r1, lsl #26
    3558:	003bfc00 	eorseq	pc, fp, r0, lsl #24
    355c:	003c0808 	eorseq	r0, ip, r8, lsl #16
    3560:	00182b08 	andseq	r2, r8, r8, lsl #22
    3564:	52011f00 	andpl	r1, r1, #0	; 0x0
    3568:	0100001b 	tsteq	r0, fp, lsl r0
    356c:	3c08012a 	stfccs	f0, [r8], {42}
    3570:	3c140800 	ldccc	8, cr0, [r4], {0}
    3574:	18560800 	ldmdane	r6, {fp}^
    3578:	010f0000 	mrseq	r0, CPSR
    357c:	00001b13 	andeq	r1, r0, r3, lsl fp
    3580:	7e012201 	cdpvc	2, 0, cr2, cr1, cr1, {0}
    3584:	14000000 	strne	r0, [r0]
    3588:	2608003c 	undefined
    358c:	8108003c 	tsthi	r8, ip, lsr r0
    3590:	67000018 	smladvs	r0, r8, r0, r0
    3594:	1b000007 	blne	35b8 <__Stack_Size+0x31b8>
    3598:	00001bf6 	strdeq	r1, [r0], -r6
    359c:	005a2201 	subseq	r2, sl, r1, lsl #4
    35a0:	18ac0000 	stmiane	ip!, {}
    35a4:	1c000000 	stcne	0, cr0, [r0], {0}
    35a8:	00000534 	andeq	r0, r0, r4, lsr r5
    35ac:	07722a04 	ldrbeq	r2, [r2, -r4, lsl #20]!
    35b0:	7e210000 	cdpvc	0, 2, cr0, cr1, cr0, {0}
    35b4:	0a000000 	beq	35bc <__Stack_Size+0x31bc>
    35b8:	00000265 	andeq	r0, r0, r5, ror #4
    35bc:	07882804 	streq	r2, [r8, r4, lsl #16]
    35c0:	03050000 	movweq	r0, #20480	; 0x5000
    35c4:	200004d8 	ldrdcs	r0, [r0], -r8
    35c8:	00006c21 	andeq	r6, r0, r1, lsr #24
    35cc:	03f60a00 	mvnseq	r0, #0	; 0x0
    35d0:	28040000 	stmdacs	r4, {}
    35d4:	00000788 	andeq	r0, r0, r8, lsl #15
    35d8:	04da0305 	ldrbeq	r0, [sl], #773
    35dc:	7e162000 	wxorvc	wr2, wr6, wr0
    35e0:	af000000 	svcge	0x00000000
    35e4:	22000007 	andcs	r0, r0, #7	; 0x7
    35e8:	0000009a 	muleq	r0, sl, r0
    35ec:	0a0003ff 	beq	45f0 <__Stack_Size+0x41f0>
    35f0:	0000047a 	andeq	r0, r0, sl, ror r4
    35f4:	07c02904 	strbeq	r2, [r0, r4, lsl #18]
    35f8:	03050000 	movweq	r0, #20480	; 0x5000
    35fc:	200000d8 	ldrdcs	r0, [r0], -r8
    3600:	00079e21 	andeq	r9, r7, r1, lsr #28
    3604:	06152300 	ldreq	r2, [r5], -r0, lsl #6
    3608:	44040000 	strmi	r0, [r4]
    360c:	00000772 	andeq	r0, r0, r2, ror r7
    3610:	03932300 	orrseq	r2, r3, #0	; 0x0
    3614:	44040000 	strmi	r0, [r4]
    3618:	00000772 	andeq	r0, r0, r2, ror r7
    361c:	007e1600 	rsbseq	r1, lr, r0, lsl #12
    3620:	07ed0000 	strbeq	r0, [sp, r0]!
    3624:	9a170000 	bls	5c362c <__Stack_Size+0x5c322c>
    3628:	40000000 	andmi	r0, r0, r0
    362c:	00ec1c00 	rsceq	r1, ip, r0, lsl #24
    3630:	45040000 	strmi	r0, [r4]
    3634:	000007f8 	strdeq	r0, [r0], -r8
    3638:	0007dd21 	andeq	sp, r7, r1, lsr #26
    363c:	05e42300 	strbeq	r2, [r4, #768]!
    3640:	58040000 	stmdapl	r4, {}
    3644:	00000788 	andeq	r0, r0, r8, lsl #15
    3648:	00f92300 	rscseq	r2, r9, r0, lsl #6
    364c:	58040000 	stmdapl	r4, {}
    3650:	00000788 	andeq	r0, r0, r8, lsl #15
    3654:	02b21c00 	adcseq	r1, r2, #0	; 0x0
    3658:	59040000 	stmdbpl	r4, {}
    365c:	00000820 	andeq	r0, r0, r0, lsr #16
    3660:	00079e21 	andeq	r9, r7, r1, lsr #28
    3664:	07e80000 	strbeq	r0, [r8, r0]!
    3668:	00020000 	andeq	r0, r2, r0
    366c:	00000aed 	andeq	r0, r0, sp, ror #21
    3670:	01c60104 	biceq	r0, r6, r4, lsl #2
    3674:	bf010000 	svclt	0x00010000
    3678:	9d00001e 	stcls	0, cr0, [r0, #-120]
    367c:	28000003 	stmdacs	r0, {r0, r1}
    3680:	5808003c 	stmdapl	r8, {r2, r3, r4, r5}
    3684:	dc080041 	stcle	0, cr0, [r8], {65}
    3688:	0200000d 	andeq	r0, r0, #13	; 0xd
    368c:	21500504 	cmpcs	r0, r4, lsl #10
    3690:	02020000 	andeq	r0, r2, #0	; 0x0
    3694:	00049505 	andeq	r9, r4, r5, lsl #10
    3698:	06010200 	streq	r0, [r1], -r0, lsl #4
    369c:	00000469 	andeq	r0, r0, r9, ror #8
    36a0:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    36a4:	45270200 	strmi	r0, [r7, #-512]!
    36a8:	02000000 	andeq	r0, r0, #0	; 0x0
    36ac:	21f10704 	mvnscs	r0, r4, lsl #14
    36b0:	75030000 	strvc	r0, [r3]
    36b4:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    36b8:	00005728 	andeq	r5, r0, r8, lsr #14
    36bc:	07020200 	streq	r0, [r2, -r0, lsl #4]
    36c0:	00000222 	andeq	r0, r0, r2, lsr #4
    36c4:	00387503 	eorseq	r7, r8, r3, lsl #10
    36c8:	00682902 	rsbeq	r2, r8, r2, lsl #18
    36cc:	01020000 	tsteq	r2, r0
    36d0:	00046708 	andeq	r6, r4, r8, lsl #14
    36d4:	07040400 	streq	r0, [r4, -r0, lsl #8]
    36d8:	3f030105 	svccc	0x00030105
    36dc:	00000099 	muleq	r0, r9, r0
    36e0:	001dd106 	andseq	sp, sp, r6, lsl #2
    36e4:	06060200 	streq	r0, [r6], -r0, lsl #4
    36e8:	0300001d 	movweq	r0, #29	; 0x1d
    36ec:	001d6806 	andseq	r6, sp, r6, lsl #16
    36f0:	a3060400 	movwge	r0, #25600	; 0x6400
    36f4:	0400001e 	streq	r0, [r0], #-30
    36f8:	001d9806 	andseq	r9, sp, r6, lsl #16
    36fc:	05000500 	streq	r0, [r0, #-1280]
    3700:	30540301 	subscc	r0, r4, r1, lsl #6
    3704:	06000001 	streq	r0, [r0], -r1
    3708:	00000f6b 	andeq	r0, r0, fp, ror #30
    370c:	11a10601 	undefined instruction 0x11a10601
    3710:	06020000 	streq	r0, [r2], -r0
    3714:	00001440 	andeq	r1, r0, r0, asr #8
    3718:	0ec30603 	cdpeq	6, 12, cr0, cr3, cr3, {0}
    371c:	06040000 	streq	r0, [r4], -r0
    3720:	00000e4b 	andeq	r0, r0, fp, asr #28
    3724:	10bd0605 	adcsne	r0, sp, r5, lsl #12
    3728:	06060000 	streq	r0, [r6], -r0
    372c:	00000eb0 	strheq	r0, [r0], -r0
    3730:	16f50607 	ldrbtne	r0, [r5], r7, lsl #12
    3734:	060c0000 	streq	r0, [ip], -r0
    3738:	00001751 	andeq	r1, r0, r1, asr r7
    373c:	15ef060d 	strbne	r0, [pc, #1549]!	; 3d51 <__Stack_Size+0x3951>
    3740:	060e0000 	streq	r0, [lr], -r0
    3744:	00000d57 	andeq	r0, r0, r7, asr sp
    3748:	147d060f 	ldrbtne	r0, [sp], #-1551
    374c:	06100000 	ldreq	r0, [r0], -r0
    3750:	00001158 	andeq	r1, r0, r8, asr r1
    3754:	15160611 	ldrne	r0, [r6, #-1553]
    3758:	06120000 	ldreq	r0, [r2], -r0
    375c:	00001715 	andeq	r1, r0, r5, lsl r7
    3760:	12620613 	rsbne	r0, r2, #19922944	; 0x1300000
    3764:	06140000 	ldreq	r0, [r4], -r0
    3768:	000010e7 	andeq	r1, r0, r7, ror #1
    376c:	0c4e0615 	mcrreq	6, 1, r0, lr, cr5
    3770:	06160000 	ldreq	r0, [r6], -r0
    3774:	00000d96 	muleq	r0, r6, sp
    3778:	16430617 	undefined
    377c:	01830000 	orreq	r0, r3, r0
    3780:	0010f506 	andseq	pc, r0, r6, lsl #10
    3784:	06018400 	streq	r8, [r1], -r0, lsl #8
    3788:	000016bb 	strheq	r1, [r0], -fp
    378c:	b8060192 	stmdalt	r6, {r1, r4, r7, r8}
    3790:	d0000011 	andle	r0, r0, r1, lsl r0
    3794:	02050001 	andeq	r0, r5, #1	; 0x1
    3798:	018ecf03 	orreq	ip, lr, r3, lsl #30
    379c:	80060000 	andhi	r0, r6, r0
    37a0:	01000006 	tsteq	r0, r6
    37a4:	00048706 	andeq	r8, r4, r6, lsl #14
    37a8:	10060200 	andne	r0, r6, r0, lsl #4
    37ac:	04000003 	streq	r0, [r0], #-3
    37b0:	00068e06 	andeq	r8, r6, r6, lsl #28
    37b4:	cb060800 	blgt	1857bc <__Stack_Size+0x1853bc>
    37b8:	10000004 	andne	r0, r0, r4
    37bc:	00014406 	andeq	r4, r1, r6, lsl #8
    37c0:	8c062000 	stchi	0, cr2, [r6], {0}
    37c4:	c0000005 	andgt	r0, r0, r5
    37c8:	02030600 	andeq	r0, r3, #0	; 0x0
    37cc:	01800000 	orreq	r0, r0, r0
    37d0:	0006c106 	andeq	ip, r6, r6, lsl #2
    37d4:	06028000 	streq	r8, [r2], -r0
    37d8:	00000459 	andeq	r0, r0, r9, asr r4
    37dc:	26060480 	strcs	r0, [r6], -r0, lsl #9
    37e0:	80000000 	andhi	r0, r0, r0
    37e4:	02a50608 	adceq	r0, r5, #8388608	; 0x800000
    37e8:	10800000 	addne	r0, r0, r0
    37ec:	00013506 	andeq	r3, r1, r6, lsl #10
    37f0:	00208000 	eoreq	r8, r0, r0
    37f4:	1ef10107 	cdpne	1, 15, cr0, cr1, cr7, {0}
    37f8:	75010000 	strvc	r0, [r1]
    37fc:	b4010101 	strlt	r0, [r1], #-257
    3800:	08000001 	stmdaeq	r0, {r0}
    3804:	76010069 	strvc	r0, [r1], -r9, rrx
    3808:	00005e01 	andeq	r5, r0, r1, lsl #28
    380c:	616d0800 	cmnvs	sp, r0, lsl #16
    3810:	76010078 	undefined
    3814:	00005e01 	andeq	r5, r0, r1, lsl #28
    3818:	01090000 	tsteq	r9, r0
    381c:	00001e93 	muleq	r0, r3, lr
    3820:	01011901 	tsteq	r1, r1, lsl #18
    3824:	0000005e 	andeq	r0, r0, lr, asr r0
    3828:	0001e001 	andeq	lr, r1, r1
    382c:	1d1b0a00 	fldsne	s0, [fp]
    3830:	19010000 	stmdbne	r1, {}
    3834:	00004c01 	andeq	r4, r0, r1, lsl #24
    3838:	19630b00 	stmdbne	r3!, {r8, r9, fp}^
    383c:	1a010000 	bne	43844 <__Stack_Size+0x43444>
    3840:	00004c01 	andeq	r4, r0, r1, lsl #24
    3844:	01090000 	tsteq	r9, r0
    3848:	00001e74 	andeq	r1, r0, r4, ror lr
    384c:	01011f01 	tsteq	r1, r1, lsl #30
    3850:	0000005e 	andeq	r0, r0, lr, asr r0
    3854:	00020c01 	andeq	r0, r2, r1, lsl #24
    3858:	1d1b0a00 	fldsne	s0, [fp]
    385c:	1f010000 	svcne	0x00010000
    3860:	00004c01 	andeq	r4, r0, r1, lsl #24
    3864:	19630b00 	stmdbne	r3!, {r8, r9, fp}^
    3868:	20010000 	andcs	r0, r1, r0
    386c:	00004c01 	andeq	r4, r0, r1, lsl #24
    3870:	01090000 	tsteq	r9, r0
    3874:	00001e67 	andeq	r1, r0, r7, ror #28
    3878:	01010f01 	tsteq	r1, r1, lsl #30
    387c:	0000004c 	andeq	r0, r0, ip, asr #32
    3880:	00024401 	andeq	r4, r2, r1, lsl #8
    3884:	1e9b0a00 	cdpne	10, 9, cr0, cr11, cr0, {0}
    3888:	0f010000 	svceq	0x00010000
    388c:	00005e01 	andeq	r5, r0, r1, lsl #28
    3890:	1e7c0a00 	faddsne	s1, s24, s0
    3894:	0f010000 	svceq	0x00010000
    3898:	00005e01 	andeq	r5, r0, r1, lsl #28
    389c:	1d1b0b00 	vldrne	d0, [fp]
    38a0:	10010000 	andne	r0, r1, r0
    38a4:	00004c01 	andeq	r4, r0, r1, lsl #24
    38a8:	010c0000 	tsteq	ip, r0
    38ac:	00001d75 	andeq	r1, r0, r5, ror sp
    38b0:	4c01db01 	stcmi	11, cr13, [r1], {1}
    38b4:	28000000 	stmdacs	r0, {}
    38b8:	3408003c 	strcc	r0, [r8], #-60
    38bc:	0108003c 	tsteq	r8, ip, lsr r0
    38c0:	84010d5d 	strhi	r0, [r1], #-3421
    38c4:	0100001d 	tsteq	r0, sp, lsl r0
    38c8:	3c3401e0 	ldfccs	f0, [r4], #-896
    38cc:	3c400800 	mcrrcc	8, 0, r0, r0, cr0
    38d0:	5d010800 	stcpl	8, cr0, [r1]
    38d4:	0000027f 	andeq	r0, r0, pc, ror r2
    38d8:	0064690e 	rsbeq	r6, r4, lr, lsl #18
    38dc:	005ee001 	subseq	lr, lr, r1
    38e0:	50010000 	andpl	r0, r1, r0
    38e4:	f2010d00 	vadd.f32	d0, d1, d0
    38e8:	0100001d 	tsteq	r0, sp, lsl r0
    38ec:	3c4001e5 	stfcce	f0, [r0], {229}
    38f0:	3c4c0800 	mcrrcc	8, 0, r0, ip, cr0
    38f4:	5d010800 	stcpl	8, cr0, [r1]
    38f8:	000002a4 	andeq	r0, r0, r4, lsr #5
    38fc:	001e030f 	andseq	r0, lr, pc, lsl #6
    3900:	5ee50100 	cdppl	1, 14, cr0, cr5, cr0, {0}
    3904:	01000000 	tsteq	r0, r0
    3908:	010d0050 	qaddeq	r0, r0, sp
    390c:	00001ceb 	andeq	r1, r0, fp, ror #25
    3910:	4c01ea01 	stcmi	10, cr14, [r1], {1}
    3914:	5808003c 	stmdapl	r8, {r2, r3, r4, r5}
    3918:	0108003c 	tsteq	r8, ip, lsr r0
    391c:	0002d65d 	andeq	sp, r2, sp, asr r6
    3920:	1a5a0f00 	bne	1687528 <__Stack_Size+0x1687128>
    3924:	ea010000 	b	4392c <__Stack_Size+0x4352c>
    3928:	0000005e 	andeq	r0, r0, lr, asr r0
    392c:	8a0f5001 	bhi	3d7938 <__Stack_Size+0x3d7538>
    3930:	01000047 	tsteq	r0, r7, asr #32
    3934:	00005eea 	andeq	r5, r0, sl, ror #29
    3938:	00510100 	subseq	r0, r1, r0, lsl #2
    393c:	1e20010d 	sufnes	f0, f0, #5.0
    3940:	ef010000 	svc	0x00010000
    3944:	003c5801 	eorseq	r5, ip, r1, lsl #16
    3948:	003c6408 	eorseq	r6, ip, r8, lsl #8
    394c:	fb5d0108 	blx	1743d76 <__Stack_Size+0x1743976>
    3950:	0f000002 	svceq	0x00000002
    3954:	00001d61 	andeq	r1, r0, r1, ror #26
    3958:	005eef01 	subseq	lr, lr, r1, lsl #30
    395c:	50010000 	andpl	r0, r1, r0
    3960:	a5011000 	strge	r1, [r1]
    3964:	0100001d 	tsteq	r0, sp, lsl r0
    3968:	005e01f4 	ldrsheq	r0, [lr], #-20
    396c:	3c640000 	stclcc	0, cr0, [r4]
    3970:	3c880800 	stccc	8, cr0, [r8], {0}
    3974:	5d010800 	stcpl	8, cr0, [r1]
    3978:	00000326 	andeq	r0, r0, r6, lsr #6
    397c:	001dbc11 	andseq	fp, sp, r1, lsl ip
    3980:	5ef40100 	cdppl	1, 15, cr0, cr4, cr0, {0}
    3984:	bf000000 	svclt	0x00000000
    3988:	00000018 	andeq	r0, r0, r8, lsl r0
    398c:	1d50010c 	ldfnee	f0, [r0, #-48]
    3990:	ff010000 	undefined instruction 0xff010000
    3994:	00005e01 	andeq	r5, r0, r1, lsl #28
    3998:	003c8800 	eorseq	r8, ip, r0, lsl #16
    399c:	003ca408 	eorseq	sl, ip, r8, lsl #8
    39a0:	125d0108 	subsne	r0, sp, #2	; 0x2
    39a4:	001e4c01 	andseq	r4, lr, r1, lsl #24
    39a8:	01070100 	tsteq	r7, r0, lsl #2
    39ac:	00005e01 	andeq	r5, r0, r1, lsl #28
    39b0:	003ca400 	eorseq	sl, ip, r0, lsl #8
    39b4:	003cc408 	eorseq	ip, ip, r8, lsl #8
    39b8:	6a5d0108 	bvs	1743de0 <__Stack_Size+0x17439e0>
    39bc:	13000003 	movwne	r0, #3	; 0x3
    39c0:	00001a5a 	andeq	r1, r0, sl, asr sl
    39c4:	5e010701 	cdppl	7, 0, cr0, cr1, cr1, {0}
    39c8:	dd000000 	stcle	0, cr0, [r0]
    39cc:	00000018 	andeq	r0, r0, r8, lsl r0
    39d0:	00020c14 	andeq	r0, r2, r4, lsl ip
    39d4:	003cc400 	eorseq	ip, ip, r0, lsl #8
    39d8:	003ccc08 	eorseq	ip, ip, r8, lsl #24
    39dc:	935d0108 	cmpls	sp, #2	; 0x2
    39e0:	15000003 	strne	r0, [r0, #-3]
    39e4:	0000021f 	andeq	r0, r0, pc, lsl r2
    39e8:	000018fb 	strdeq	r1, [r0], -fp
    39ec:	00022b16 	andeq	r2, r2, r6, lsl fp
    39f0:	17510100 	ldrbne	r0, [r1, -r0, lsl #2]
    39f4:	00000237 	andeq	r0, r0, r7, lsr r2
    39f8:	01b41400 	undefined instruction 0x01b41400
    39fc:	3ccc0000 	stclcc	0, cr0, [ip], {0}
    3a00:	3cd00800 	ldclcc	8, cr0, [r0], {0}
    3a04:	5d010800 	stcpl	8, cr0, [r1]
    3a08:	000003b5 	strheq	r0, [r0], -r5
    3a0c:	0001c715 	andeq	ip, r1, r5, lsl r7
    3a10:	00190e00 	andseq	r0, r9, r0, lsl #28
    3a14:	01d31700 	bicseq	r1, r3, r0, lsl #14
    3a18:	14000000 	strne	r0, [r0]
    3a1c:	000001e0 	andeq	r0, r0, r0, ror #3
    3a20:	08003cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, ip, sp}
    3a24:	08003cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp, ip, sp}
    3a28:	03d75d01 	bicseq	r5, r7, #64	; 0x40
    3a2c:	f3150000 	vhadd.u16	d0, d5, d0
    3a30:	21000001 	tstcs	r0, r1
    3a34:	17000019 	smladne	r0, r9, r0, r0
    3a38:	000001ff 	strdeq	r0, [r0], -pc
    3a3c:	018e1400 	orreq	r1, lr, r0, lsl #8
    3a40:	3cd40000 	ldclcc	0, cr0, [r4], {0}
    3a44:	3d0c0800 	stccc	8, cr0, [ip]
    3a48:	5d010800 	stcpl	8, cr0, [r1]
    3a4c:	000003fd 	strdeq	r0, [r0], -sp
    3a50:	00019d18 	andeq	r9, r1, r8, lsl sp
    3a54:	00193400 	andseq	r3, r9, r0, lsl #8
    3a58:	01a71800 	undefined instruction 0x01a71800
    3a5c:	195d0000 	ldmdbne	sp, {}^
    3a60:	19000000 	stmdbne	r0, {}
    3a64:	001e8501 	andseq	r8, lr, r1, lsl #10
    3a68:	01630100 	cmneq	r3, r0, lsl #2
    3a6c:	08003d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp, ip, sp}
    3a70:	08003e90 	stmdaeq	r0, {r4, r7, r9, sl, fp, ip, sp}
    3a74:	0000197b 	andeq	r1, r0, fp, ror r9
    3a78:	0000044b 	andeq	r0, r0, fp, asr #8
    3a7c:	0100691a 	tsteq	r0, sl, lsl r9
    3a80:	00005e64 	andeq	r5, r0, r4, ror #28
    3a84:	0019a600 	andseq	sl, r9, r0, lsl #12
    3a88:	006a1a00 	rsbeq	r1, sl, r0, lsl #20
    3a8c:	005e6401 	subseq	r6, lr, r1, lsl #8
    3a90:	19f00000 	ldmibne	r0!, {}^
    3a94:	461b0000 	ldrmi	r0, [fp], -r0
    3a98:	0100001e 	tsteq	r0, lr, lsl r0
    3a9c:	00005e64 	andeq	r5, r0, r4, ror #28
    3aa0:	14501c00 	ldrbne	r1, [r0], #-3072
    3aa4:	65010000 	strvs	r0, [r1]
    3aa8:	0000005e 	andeq	r0, r0, lr, asr r0
    3aac:	00001a19 	andeq	r1, r0, r9, lsl sl
    3ab0:	34011900 	strcc	r1, [r1], #-2304
    3ab4:	0100001d 	tsteq	r0, sp, lsl r0
    3ab8:	3e900126 	fmlccsp	f0, f0, f6
    3abc:	3f8c0800 	svccc	0x008c0800
    3ac0:	1a370800 	bne	dc5ac8 <__Stack_Size+0xdc56c8>
    3ac4:	04990000 	ldreq	r0, [r9]
    3ac8:	691a0000 	ldmdbvs	sl, {}
    3acc:	5e270100 	sufpls	f0, f7, f0
    3ad0:	62000000 	andvs	r0, r0, #0	; 0x0
    3ad4:	1d00001a 	stcne	0, cr0, [r0, #-104]
    3ad8:	00001e3c 	andeq	r1, r0, ip, lsr lr
    3adc:	005e2801 	subseq	r2, lr, r1, lsl #16
    3ae0:	54010000 	strpl	r0, [r1]
    3ae4:	001e381b 	andseq	r3, lr, fp, lsl r8
    3ae8:	5e280100 	sufple	f0, f0, f0
    3aec:	1c000000 	stcne	0, cr0, [r0], {0}
    3af0:	00001450 	andeq	r1, r0, r0, asr r4
    3af4:	005e2901 	subseq	r2, lr, r1, lsl #18
    3af8:	1a800000 	bne	fe003b00 <SCS_BASE+0x1dff5b00>
    3afc:	19000000 	stmdbne	r0, {}
    3b00:	001eaf01 	andseq	sl, lr, r1, lsl #30
    3b04:	01be0100 	undefined instruction 0x01be0100
    3b08:	08003f8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, fp, ip, sp}
    3b0c:	08003fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp, ip, sp}
    3b10:	00001a9e 	muleq	r0, lr, sl
    3b14:	000004df 	ldrdeq	r0, [r0], -pc
    3b18:	00018e1e 	andeq	r8, r1, lr, lsl lr
    3b1c:	003f9c00 	eorseq	r9, pc, r0, lsl #24
    3b20:	003fcc08 	eorseq	ip, pc, r8, lsl #24
    3b24:	1fcc0108 	svcne	0x00cc0108
    3b28:	08003f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp, ip, sp}
    3b2c:	08003fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, ip, sp}
    3b30:	00019d18 	andeq	r9, r1, r8, lsl sp
    3b34:	001abd00 	andseq	fp, sl, r0, lsl #26
    3b38:	01a71800 	undefined instruction 0x01a71800
    3b3c:	1ae60000 	bne	ff983b44 <SCS_BASE+0x1f975b44>
    3b40:	00000000 	andeq	r0, r0, r0
    3b44:	1e012000 	cdpne	0, 0, cr2, cr1, cr0, {0}
    3b48:	0100001f 	tsteq	r0, pc, lsl r0
    3b4c:	ec010166 	stfs	f0, [r1], {102}
    3b50:	2408003f 	strcs	r0, [r8], #-63
    3b54:	04080040 	streq	r0, [r8], #-64
    3b58:	2900001b 	stmdbcs	r0, {r0, r1, r3, r4}
    3b5c:	21000005 	tstcs	r0, r5
    3b60:	01006469 	tsteq	r0, r9, ror #8
    3b64:	005e0166 	subseq	r0, lr, r6, ror #2
    3b68:	1b2f0000 	blne	bc3b70 <__Stack_Size+0xbc3770>
    3b6c:	06130000 	ldreq	r0, [r3], -r0
    3b70:	01000037 	tsteq	r0, r7, lsr r0
    3b74:	005e0166 	subseq	r0, lr, r6, ror #2
    3b78:	1b420000 	blne	1083b80 <__Stack_Size+0x1083780>
    3b7c:	8a130000 	bhi	4c3b84 <__Stack_Size+0x4c3784>
    3b80:	01000047 	tsteq	r0, r7, asr #32
    3b84:	004c0166 	subeq	r0, ip, r6, ror #2
    3b88:	1b550000 	blne	1543b90 <__Stack_Size+0x1543790>
    3b8c:	22000000 	andcs	r0, r0, #0	; 0x0
    3b90:	001d1201 	andseq	r1, sp, r1, lsl #4
    3b94:	01520100 	cmpeq	r2, r0, lsl #2
    3b98:	00004c01 	andeq	r4, r0, r1, lsl #24
    3b9c:	00402400 	subeq	r2, r0, r0, lsl #8
    3ba0:	00407408 	subeq	r7, r0, r8, lsl #8
    3ba4:	001b7308 	andseq	r7, fp, r8, lsl #6
    3ba8:	00059500 	andeq	r9, r5, r0, lsl #10
    3bac:	64692100 	strbtvs	r2, [r9], #-256
    3bb0:	01520100 	cmpeq	r2, r0, lsl #2
    3bb4:	0000005e 	andeq	r0, r0, lr, asr r0
    3bb8:	00001b9e 	muleq	r0, lr, fp
    3bbc:	00370613 	eorseq	r0, r7, r3, lsl r6
    3bc0:	01520100 	cmpeq	r2, r0, lsl #2
    3bc4:	0000005e 	andeq	r0, r0, lr, asr r0
    3bc8:	00001bb1 	strheq	r1, [r0], -r1
    3bcc:	00020c23 	andeq	r0, r2, r3, lsr #24
    3bd0:	00405200 	subeq	r5, r0, r0, lsl #4
    3bd4:	00405e08 	subeq	r5, r0, r8, lsl #28
    3bd8:	01610108 	cmneq	r1, r8, lsl #2
    3bdc:	00038624 	andeq	r8, r3, r4, lsr #12
    3be0:	037d2400 	cmneq	sp, #0	; 0x0
    3be4:	521f0000 	andspl	r0, pc, #0	; 0x0
    3be8:	5e080040 	cdppl	0, 0, cr0, cr8, cr0, {2}
    3bec:	18080040 	stmdane	r8, {r6}
    3bf0:	00000237 	andeq	r0, r0, r7, lsr r2
    3bf4:	00001bc4 	andeq	r1, r0, r4, asr #23
    3bf8:	20000000 	andcs	r0, r0, r0
    3bfc:	001f0301 	andseq	r0, pc, r1, lsl #6
    3c00:	01440100 	cmpeq	r4, r0, lsl #2
    3c04:	00407401 	subeq	r7, r0, r1, lsl #8
    3c08:	0040a408 	subeq	sl, r0, r8, lsl #8
    3c0c:	001bed08 	andseq	lr, fp, r8, lsl #26
    3c10:	0005df00 	andeq	sp, r5, r0, lsl #30
    3c14:	64692100 	strbtvs	r2, [r9], #-256
    3c18:	01440100 	cmpeq	r4, r0, lsl #2
    3c1c:	0000005e 	andeq	r0, r0, lr, asr r0
    3c20:	00001c18 	andeq	r1, r0, r8, lsl ip
    3c24:	00370613 	eorseq	r0, r7, r3, lsl r6
    3c28:	01440100 	cmpeq	r4, r0, lsl #2
    3c2c:	0000005e 	andeq	r0, r0, lr, asr r0
    3c30:	00001c2b 	andeq	r1, r0, fp, lsr #24
    3c34:	00478a13 	subeq	r8, r7, r3, lsl sl
    3c38:	01440100 	cmpeq	r4, r0, lsl #2
    3c3c:	0000005e 	andeq	r0, r0, lr, asr r0
    3c40:	00001c3e 	andeq	r1, r0, lr, lsr ip
    3c44:	12012000 	andne	r2, r1, #0	; 0x0
    3c48:	0100001f 	tsteq	r0, pc, lsl r0
    3c4c:	a4010181 	strge	r0, [r1], #-385
    3c50:	b4080040 	strlt	r0, [r8], #-64
    3c54:	5c080040 	stcpl	0, cr0, [r8], {64}
    3c58:	0900001c 	stmdbeq	r0, {r2, r3, r4}
    3c5c:	21000006 	tstcs	r0, r6
    3c60:	01006469 	tsteq	r0, r9, ror #8
    3c64:	005e0181 	subseq	r0, lr, r1, lsl #3
    3c68:	1c870000 	stcne	0, cr0, [r7], {0}
    3c6c:	22000000 	andcs	r0, r0, #0	; 0x0
    3c70:	001f3801 	andseq	r3, pc, r1, lsl #16
    3c74:	01310100 	teqeq	r1, r0, lsl #2
    3c78:	00005e01 	andeq	r5, r0, r1, lsl #28
    3c7c:	0040b400 	subeq	fp, r0, r0, lsl #8
    3c80:	0040fc08 	subeq	pc, r0, r8, lsl #24
    3c84:	001c9a08 	andseq	r9, ip, r8, lsl #20
    3c88:	00064700 	andeq	r4, r6, r0, lsl #14
    3c8c:	64692100 	strbtvs	r2, [r9], #-256
    3c90:	01310100 	teqeq	r1, r0, lsl #2
    3c94:	0000005e 	andeq	r0, r0, lr, asr r0
    3c98:	00001cc5 	andeq	r1, r0, r5, asr #25
    3c9c:	00370613 	eorseq	r0, r7, r3, lsl r6
    3ca0:	01310100 	teqeq	r1, r0, lsl #2
    3ca4:	0000005e 	andeq	r0, r0, lr, asr r0
    3ca8:	00001cd8 	ldrdeq	r1, [r0], -r8
    3cac:	e9012000 	stmdb	r1, {sp}
    3cb0:	0100001d 	tsteq	r0, sp, lsl r0
    3cb4:	fc010125 	stc2	1, cr0, [r1], {37}
    3cb8:	24080040 	strcs	r0, [r8], #-64
    3cbc:	eb080041 	bl	203dc8 <__Stack_Size+0x2039c8>
    3cc0:	7100001c 	tstvc	r0, ip, lsl r0
    3cc4:	21000006 	tstcs	r0, r6
    3cc8:	01006469 	tsteq	r0, r9, ror #8
    3ccc:	005e0125 	subseq	r0, lr, r5, lsr #2
    3cd0:	1d160000 	ldcne	0, cr0, [r6]
    3cd4:	25000000 	strcs	r0, [r0]
    3cd8:	001d4201 	andseq	r4, sp, r1, lsl #4
    3cdc:	01210100 	teqeq	r1, r0, lsl #2
    3ce0:	08004124 	stmdaeq	r0, {r2, r5, r8, lr}
    3ce4:	08004130 	stmdaeq	r0, {r4, r5, r8, lr}
    3ce8:	00001d29 	andeq	r1, r0, r9, lsr #26
    3cec:	1ee20126 	cdpne	1, 14, cr0, cr2, cr6, {1}
    3cf0:	16010000 	strne	r0, [r1], -r0
    3cf4:	00005e01 	andeq	r5, r0, r1, lsl #28
    3cf8:	00413000 	subeq	r3, r1, r0
    3cfc:	00415808 	subeq	r5, r1, r8, lsl #16
    3d00:	001d5408 	andseq	r5, sp, r8, lsl #8
    3d04:	0006b300 	andeq	fp, r6, r0, lsl #6
    3d08:	1bf61100 	blne	ffd88110 <SCS_BASE+0x1fd7a110>
    3d0c:	16010000 	strne	r0, [r1], -r0
    3d10:	0000003a 	andeq	r0, r0, sl, lsr r0
    3d14:	00001d7f 	andeq	r1, r0, pc, ror sp
    3d18:	05341b00 	ldreq	r1, [r4, #-2816]!
    3d1c:	2a040000 	bcs	103d24 <__Stack_Size+0x103924>
    3d20:	000006be 	strheq	r0, [r0], -lr
    3d24:	00005e27 	andeq	r5, r0, r7, lsr #28
    3d28:	02651b00 	rsbeq	r1, r5, #0	; 0x0
    3d2c:	28040000 	stmdacs	r4, {}
    3d30:	000006ce 	andeq	r0, r0, lr, asr #13
    3d34:	00004c27 	andeq	r4, r0, r7, lsr #24
    3d38:	03f61b00 	mvnseq	r1, #0	; 0x0
    3d3c:	28040000 	stmdacs	r4, {}
    3d40:	000006ce 	andeq	r0, r0, lr, asr #13
    3d44:	00005e28 	andeq	r5, r0, r8, lsr #28
    3d48:	0006ef00 	andeq	lr, r6, r0, lsl #30
    3d4c:	006f2900 	rsbeq	r2, pc, r0, lsl #18
    3d50:	03ff0000 	mvnseq	r0, #0	; 0x0
    3d54:	047a1b00 	ldrbteq	r1, [sl], #-2816
    3d58:	29040000 	stmdbcs	r4, {}
    3d5c:	000006fa 	strdeq	r0, [r0], -sl
    3d60:	0006de27 	andeq	sp, r6, r7, lsr #28
    3d64:	06152a00 	ldreq	r2, [r5], -r0, lsl #20
    3d68:	44040000 	strmi	r0, [r4]
    3d6c:	000006be 	strheq	r0, [r0], -lr
    3d70:	03932a00 	orrseq	r2, r3, #0	; 0x0
    3d74:	44040000 	strmi	r0, [r4]
    3d78:	000006be 	strheq	r0, [r0], -lr
    3d7c:	005e2800 	subseq	r2, lr, r0, lsl #16
    3d80:	07270000 	streq	r0, [r7, -r0]!
    3d84:	6f2b0000 	svcvs	0x002b0000
    3d88:	40000000 	andmi	r0, r0, r0
    3d8c:	00ec1b00 	rsceq	r1, ip, r0, lsl #22
    3d90:	45040000 	strmi	r0, [r4]
    3d94:	00000732 	andeq	r0, r0, r2, lsr r7
    3d98:	00071727 	andeq	r1, r7, r7, lsr #14
    3d9c:	05e42a00 	strbeq	r2, [r4, #2560]!
    3da0:	58040000 	stmdapl	r4, {}
    3da4:	000006ce 	andeq	r0, r0, lr, asr #13
    3da8:	00f92a00 	rscseq	r2, r9, r0, lsl #20
    3dac:	58040000 	stmdapl	r4, {}
    3db0:	000006ce 	andeq	r0, r0, lr, asr #13
    3db4:	02b21b00 	adcseq	r1, r2, #0	; 0x0
    3db8:	59040000 	stmdbpl	r4, {}
    3dbc:	0000075a 	andeq	r0, r0, sl, asr r7
    3dc0:	0006de27 	andeq	sp, r6, r7, lsr #28
    3dc4:	005e2800 	subseq	r2, lr, r0, lsl #16
    3dc8:	076f0000 	strbeq	r0, [pc, -r0]!
    3dcc:	6f2b0000 	svcvs	0x002b0000
    3dd0:	9f000000 	svcls	0x00000000
    3dd4:	1d202c00 	stcne	12, cr2, [r0]
    3dd8:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    3ddc:	0000075f 	andeq	r0, r0, pc, asr r7
    3de0:	dc030501 	cfstr32le	mvfx0, [r3], {1}
    3de4:	28200004 	stmdacs	r0!, {r2}
    3de8:	0000005e 	andeq	r0, r0, lr, asr r0
    3dec:	00000791 	muleq	r0, r1, r7
    3df0:	00006f2b 	andeq	r6, r0, fp, lsr #30
    3df4:	2c004f00 	stccs	15, cr4, [r0], {0}
    3df8:	00001ed3 	ldrdeq	r1, [r0], -r3
    3dfc:	07810f01 	streq	r0, [r1, r1, lsl #30]
    3e00:	05010000 	streq	r0, [r1]
    3e04:	00057c03 	andeq	r7, r5, r3, lsl #24
    3e08:	1e0f2c20 	cdpne	12, 0, cr2, cr15, cr0, {1}
    3e0c:	10010000 	andne	r0, r1, r0
    3e10:	0000005e 	andeq	r0, r0, lr, asr r0
    3e14:	cc030501 	cfstr32gt	mvfx0, [r3], {1}
    3e18:	2c200005 	stccs	0, cr0, [r0], #-20
    3e1c:	00001dc3 	andeq	r1, r0, r3, asr #27
    3e20:	005e1101 	subseq	r1, lr, r1, lsl #2
    3e24:	05010000 	streq	r0, [r1]
    3e28:	0005cd03 	andeq	ip, r5, r3, lsl #26
    3e2c:	1ddc2c20 	ldclne	12, cr2, [ip, #128]
    3e30:	12010000 	andne	r0, r1, #0	; 0x0
    3e34:	000006ce 	andeq	r0, r0, lr, asr #13
    3e38:	00030501 	andeq	r0, r3, r1, lsl #10
    3e3c:	2c200000 	stccs	0, cr0, [r0]
    3e40:	00001f2d 	andeq	r1, r0, sp, lsr #30
    3e44:	06be1301 	ldrteq	r1, [lr], r1, lsl #6
    3e48:	05010000 	streq	r0, [r1]
    3e4c:	0005ce03 	andeq	ip, r5, r3, lsl #28
    3e50:	04730020 	ldrbteq	r0, [r3], #-32
    3e54:	00020000 	andeq	r0, r2, r0
    3e58:	00000d82 	andeq	r0, r0, r2, lsl #27
    3e5c:	01c60104 	biceq	r0, r6, r4, lsl #2
    3e60:	53010000 	movwpl	r0, #4096	; 0x1000
    3e64:	9d00001f 	stcls	0, cr0, [r0, #-124]
    3e68:	58000003 	stmdapl	r0, {r0, r1}
    3e6c:	98080041 	stmdals	r8, {r0, r6}
    3e70:	9e080044 	cdpls	0, 0, cr0, cr8, cr4, {2}
    3e74:	0200000f 	andeq	r0, r0, #15	; 0xf
    3e78:	21500504 	cmpcs	r0, r4, lsl #10
    3e7c:	02020000 	andeq	r0, r2, #0	; 0x0
    3e80:	00049505 	andeq	r9, r4, r5, lsl #10
    3e84:	06010200 	streq	r0, [r1], -r0, lsl #4
    3e88:	00000469 	andeq	r0, r0, r9, ror #8
    3e8c:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    3e90:	45270200 	strmi	r0, [r7, #-512]!
    3e94:	02000000 	andeq	r0, r0, #0	; 0x0
    3e98:	21f10704 	mvnscs	r0, r4, lsl #14
    3e9c:	75030000 	strvc	r0, [r3]
    3ea0:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    3ea4:	00005728 	andeq	r5, r0, r8, lsr #14
    3ea8:	07020200 	streq	r0, [r2, -r0, lsl #4]
    3eac:	00000222 	andeq	r0, r0, r2, lsr #4
    3eb0:	00387503 	eorseq	r7, r8, r3, lsl #10
    3eb4:	00682902 	rsbeq	r2, r8, r2, lsl #18
    3eb8:	01020000 	tsteq	r2, r0
    3ebc:	00046708 	andeq	r6, r4, r8, lsl #14
    3ec0:	1f410400 	svcne	0x00410400
    3ec4:	2a020000 	bcs	83ecc <__Stack_Size+0x83acc>
    3ec8:	00000068 	andeq	r0, r0, r8, rrx
    3ecc:	06070405 	streq	r0, [r7], -r5, lsl #8
    3ed0:	001ff101 	andseq	pc, pc, r1, lsl #2
    3ed4:	018c0100 	orreq	r0, ip, r0, lsl #2
    3ed8:	0000004c 	andeq	r0, r0, ip, asr #32
    3edc:	08004158 	stmdaeq	r0, {r3, r4, r6, r8, lr}
    3ee0:	0800416c 	stmdaeq	r0, {r2, r3, r5, r6, r8, lr}
    3ee4:	01075d01 	tsteq	r7, r1, lsl #26
    3ee8:	00001f9a 	muleq	r0, sl, pc
    3eec:	01010d01 	tsteq	r1, r1, lsl #26
    3ef0:	0000004c 	andeq	r0, r0, ip, asr #32
    3ef4:	0800416c 	stmdaeq	r0, {r2, r3, r5, r6, r8, lr}
    3ef8:	08004178 	stmdaeq	r0, {r3, r4, r5, r6, r8, lr}
    3efc:	01075d01 	tsteq	r7, r1, lsl #26
    3f00:	00001f73 	andeq	r1, r0, r3, ror pc
    3f04:	01011301 	tsteq	r1, r1, lsl #6
    3f08:	0000004c 	andeq	r0, r0, ip, asr #32
    3f0c:	08004178 	stmdaeq	r0, {r3, r4, r5, r6, r8, lr}
    3f10:	08004184 	stmdaeq	r0, {r2, r7, r8, lr}
    3f14:	01075d01 	tsteq	r7, r1, lsl #26
    3f18:	000020b1 	strheq	r2, [r0], -r1
    3f1c:	01011901 	tsteq	r1, r1, lsl #18
    3f20:	0000004c 	andeq	r0, r0, ip, asr #32
    3f24:	08004184 	stmdaeq	r0, {r2, r7, r8, lr}
    3f28:	08004190 	stmdaeq	r0, {r4, r7, r8, lr}
    3f2c:	01075d01 	tsteq	r7, r1, lsl #26
    3f30:	00002075 	andeq	r2, r0, r5, ror r0
    3f34:	01011f01 	tsteq	r1, r1, lsl #30
    3f38:	0000004c 	andeq	r0, r0, ip, asr #32
    3f3c:	08004190 	stmdaeq	r0, {r4, r7, r8, lr}
    3f40:	0800419c 	stmdaeq	r0, {r2, r3, r4, r7, r8, lr}
    3f44:	01075d01 	tsteq	r7, r1, lsl #26
    3f48:	00002088 	andeq	r2, r0, r8, lsl #1
    3f4c:	01012501 	tsteq	r1, r1, lsl #10
    3f50:	0000005e 	andeq	r0, r0, lr, asr r0
    3f54:	0800419c 	stmdaeq	r0, {r2, r3, r4, r7, r8, lr}
    3f58:	080041a8 	stmdaeq	r0, {r3, r5, r7, r8, lr}
    3f5c:	01075d01 	tsteq	r7, r1, lsl #26
    3f60:	00001fb8 	strheq	r1, [r0], -r8
    3f64:	01012b01 	tsteq	r1, r1, lsl #22
    3f68:	0000005e 	andeq	r0, r0, lr, asr r0
    3f6c:	080041a8 	stmdaeq	r0, {r3, r5, r7, r8, lr}
    3f70:	080041b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, lr}
    3f74:	01075d01 	tsteq	r7, r1, lsl #26
    3f78:	0000209c 	muleq	r0, ip, r0
    3f7c:	01013201 	tsteq	r1, r1, lsl #4
    3f80:	0000013c 	andeq	r0, r0, ip, lsr r1
    3f84:	080041b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, lr}
    3f88:	080041c4 	stmdaeq	r0, {r2, r6, r7, r8, lr}
    3f8c:	04085d01 	streq	r5, [r8], #-3329
    3f90:	746e6905 	strbtvc	r6, [lr], #-2309
    3f94:	fd010700 	stc2	7, cr0, [r1]
    3f98:	0100001f 	tsteq	r0, pc, lsl r0
    3f9c:	3c010138 	stfccs	f0, [r1], {56}
    3fa0:	c4000001 	strgt	r0, [r0], #-1
    3fa4:	d0080041 	andle	r0, r8, r1, asr #32
    3fa8:	01080041 	tsteq	r8, r1, asr #32
    3fac:	5001075d 	andpl	r0, r1, sp, asr r7
    3fb0:	01000020 	tsteq	r0, r0, lsr #32
    3fb4:	3c01013e 	stfccs	f0, [r1], {62}
    3fb8:	d0000001 	andle	r0, r0, r1
    3fbc:	dc080041 	stcle	0, cr0, [r8], {65}
    3fc0:	01080041 	tsteq	r8, r1, asr #32
    3fc4:	ca01075d 	bgt	45d40 <__Stack_Size+0x45940>
    3fc8:	0100001f 	tsteq	r0, pc, lsl r0
    3fcc:	3c010144 	stfccs	f0, [r1], {68}
    3fd0:	dc000001 	stcle	0, cr0, [r0], {1}
    3fd4:	e8080041 	stmda	r8, {r0, r6}
    3fd8:	01080041 	tsteq	r8, r1, asr #32
    3fdc:	6401075d 	strvs	r0, [r1], #-1885
    3fe0:	01000020 	tsteq	r0, r0, lsr #32
    3fe4:	6f010149 	svcvs	0x00010149
    3fe8:	e8000000 	stmda	r0, {}
    3fec:	00080041 	andeq	r0, r8, r1, asr #32
    3ff0:	01080042 	tsteq	r8, r2, asr #32
    3ff4:	1201095d 	andne	r0, r1, #1523712	; 0x174000
    3ff8:	01000020 	tsteq	r0, r0, lsr #32
    3ffc:	005e0193 	ldrbeq	r0, [lr], #-19
    4000:	42000000 	andmi	r0, r0, #0	; 0x0
    4004:	43200800 	teqmi	r0, #0	; 0x0
    4008:	1d920800 	ldcne	8, cr0, [r2]
    400c:	01f10000 	mvnseq	r0, r0
    4010:	930a0000 	movwls	r0, #40960	; 0xa000
    4014:	0100001f 	tsteq	r0, pc, lsl r0
    4018:	00005e96 	muleq	r0, r6, lr
    401c:	14500a00 	ldrbne	r0, [r0], #-2560
    4020:	97010000 	strls	r0, [r1, -r0]
    4024:	0000005e 	andeq	r0, r0, lr, asr r0
    4028:	0100690b 	tsteq	r0, fp, lsl #18
    402c:	00005e98 	muleq	r0, r8, lr
    4030:	001db100 	andseq	fp, sp, r0, lsl #2
    4034:	006a0b00 	rsbeq	r0, sl, r0, lsl #22
    4038:	005e9801 	subseq	r9, lr, r1, lsl #16
    403c:	1dcf0000 	stclne	0, cr0, [pc]
    4040:	09000000 	stmdbeq	r0, {}
    4044:	001f4601 	andseq	r4, pc, r1, lsl #12
    4048:	01410100 	cmpeq	r1, r0, lsl #2
    404c:	0000005e 	andeq	r0, r0, lr, asr r0
    4050:	08004320 	stmdaeq	r0, {r5, r8, r9, lr}
    4054:	08004418 	stmdaeq	r0, {r3, r4, sl, lr}
    4058:	00001ded 	andeq	r1, r0, sp, ror #27
    405c:	0000023f 	andeq	r0, r0, pc, lsr r2
    4060:	001f930a 	andseq	r9, pc, sl, lsl #6
    4064:	5e420100 	dvfpls	f0, f2, f0
    4068:	0a000000 	beq	4070 <__Stack_Size+0x3c70>
    406c:	00001450 	andeq	r1, r0, r0, asr r4
    4070:	005e4301 	subseq	r4, lr, r1, lsl #6
    4074:	690b0000 	stmdbvs	fp, {}
    4078:	5e440100 	dvfpls	f0, f4, f0
    407c:	18000000 	stmdane	r0, {}
    4080:	0b00001e 	bleq	4100 <__Stack_Size+0x3d00>
    4084:	4401006a 	strmi	r0, [r1], #-106
    4088:	0000005e 	andeq	r0, r0, lr, asr r0
    408c:	00001e36 	andeq	r1, r0, r6, lsr lr
    4090:	36010900 	strcc	r0, [r1], -r0, lsl #18
    4094:	01000020 	tsteq	r0, r0, lsr #32
    4098:	005e012d 	subseq	r0, lr, sp, lsr #2
    409c:	44180000 	ldrmi	r0, [r8]
    40a0:	445c0800 	ldrbmi	r0, [ip], #-2048
    40a4:	1e540800 	cdpne	8, 5, cr0, cr4, cr0, {0}
    40a8:	02980000 	addseq	r0, r8, #0	; 0x0
    40ac:	1b0c0000 	blne	3040b4 <__Stack_Size+0x303cb4>
    40b0:	0100001d 	tsteq	r0, sp, lsl r0
    40b4:	00004c2c 	andeq	r4, r0, ip, lsr #24
    40b8:	001e7f00 	andseq	r7, lr, r0, lsl #30
    40bc:	1fae0d00 	svcne	0x00ae0d00
    40c0:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    40c4:	00000298 	muleq	r0, r8, r2
    40c8:	0e729102 	expeqs	f1, f2
    40cc:	00001e9b 	muleq	r0, fp, lr
    40d0:	005e2f01 	subseq	r2, lr, r1, lsl #30
    40d4:	1e920000 	cdpne	0, 9, cr0, cr2, cr0, {0}
    40d8:	7c0e0000 	stcvc	0, cr0, [lr], {0}
    40dc:	0100001e 	tsteq	r0, lr, lsl r0
    40e0:	00005e30 	andeq	r5, r0, r0, lsr lr
    40e4:	001ea500 	andseq	sl, lr, r0, lsl #10
    40e8:	5e0f0000 	cdppl	0, 0, cr0, cr15, cr0, {0}
    40ec:	a8000000 	stmdage	r0, {}
    40f0:	10000002 	andne	r0, r0, r2
    40f4:	0000007a 	andeq	r0, r0, sl, ror r0
    40f8:	01110005 	tsteq	r1, r5
    40fc:	00002042 	andeq	r2, r0, r2, asr #32
    4100:	5c012701 	stcpl	7, cr2, [r1], {1}
    4104:	68080044 	stmdavs	r8, {r2, r6}
    4108:	b8080044 	stmdalt	r8, {r2, r6}
    410c:	0900001e 	stmdbeq	r0, {r1, r2, r3, r4}
    4110:	001f6401 	andseq	r6, pc, r1, lsl #8
    4114:	011b0100 	tsteq	fp, r0, lsl #2
    4118:	0000005e 	andeq	r0, r0, lr, asr r0
    411c:	08004468 	stmdaeq	r0, {r3, r5, r6, sl, lr}
    4120:	08004498 	stmdaeq	r0, {r3, r4, r7, sl, lr}
    4124:	00001ee3 	andeq	r1, r0, r3, ror #29
    4128:	000002ea 	andeq	r0, r0, sl, ror #5
    412c:	001bf60c 	andseq	pc, fp, ip, lsl #12
    4130:	3a1a0100 	bcc	684538 <__Stack_Size+0x684138>
    4134:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    4138:	0000001f 	andeq	r0, r0, pc, lsl r0
    413c:	0005340a 	andeq	r3, r5, sl, lsl #8
    4140:	f52a0300 	undefined instruction 0xf52a0300
    4144:	12000002 	andne	r0, r0, #2	; 0x2
    4148:	0000005e 	andeq	r0, r0, lr, asr r0
    414c:	0002650a 	andeq	r6, r2, sl, lsl #10
    4150:	05280300 	streq	r0, [r8, #-768]!
    4154:	12000003 	andne	r0, r0, #3	; 0x3
    4158:	0000004c 	andeq	r0, r0, ip, asr #32
    415c:	0003f60a 	andeq	pc, r3, sl, lsl #12
    4160:	05280300 	streq	r0, [r8, #-768]!
    4164:	0f000003 	svceq	0x00000003
    4168:	0000005e 	andeq	r0, r0, lr, asr r0
    416c:	00000326 	andeq	r0, r0, r6, lsr #6
    4170:	00007a13 	andeq	r7, r0, r3, lsl sl
    4174:	0003ff00 	andeq	pc, r3, r0, lsl #30
    4178:	00047a0a 	andeq	r7, r4, sl, lsl #20
    417c:	31290300 	teqcc	r9, r0, lsl #6
    4180:	12000003 	andne	r0, r0, #3	; 0x3
    4184:	00000315 	andeq	r0, r0, r5, lsl r3
    4188:	0006150d 	andeq	r1, r6, sp, lsl #10
    418c:	f5440300 	undefined instruction 0xf5440300
    4190:	05000002 	streq	r0, [r0, #-2]
    4194:	0005d103 	andeq	sp, r5, r3, lsl #2
    4198:	03930d20 	orrseq	r0, r3, #2048	; 0x800
    419c:	44030000 	strmi	r0, [r3]
    41a0:	000002f5 	strdeq	r0, [r0], -r5
    41a4:	05d00305 	ldrbeq	r0, [r0, #773]
    41a8:	5e0f2000 	cdppl	0, 0, cr2, cr15, cr0, {0}
    41ac:	68000000 	stmdavs	r0, {}
    41b0:	10000003 	andne	r0, r0, r3
    41b4:	0000007a 	andeq	r0, r0, sl, ror r0
    41b8:	ec0a0040 	stc	0, cr0, [sl], {64}
    41bc:	03000000 	movweq	r0, #0	; 0x0
    41c0:	00037345 	andeq	r7, r3, r5, asr #6
    41c4:	03581200 	cmpeq	r8, #0	; 0x0
    41c8:	e4140000 	ldr	r0, [r4]
    41cc:	03000005 	movweq	r0, #5	; 0x5
    41d0:	00030558 	andeq	r0, r3, r8, asr r5
    41d4:	f9140000 	undefined instruction 0xf9140000
    41d8:	03000000 	movweq	r0, #0	; 0x0
    41dc:	00030558 	andeq	r0, r3, r8, asr r5
    41e0:	b20a0000 	andlt	r0, sl, #0	; 0x0
    41e4:	03000002 	movweq	r0, #2	; 0x2
    41e8:	00039b59 	andeq	r9, r3, r9, asr fp
    41ec:	03151200 	tsteq	r5, #0	; 0x0
    41f0:	87150000 	ldrhi	r0, [r5, -r0]
    41f4:	0100001f 	tsteq	r0, pc, lsl r0
    41f8:	0002980b 	andeq	r9, r2, fp, lsl #16
    41fc:	03050100 	movweq	r0, #20736	; 0x5100
    4200:	200005d2 	ldrdcs	r0, [r0], -r2
    4204:	00005e0f 	andeq	r5, r0, pc, lsl #28
    4208:	0003c200 	andeq	ip, r3, r0, lsl #4
    420c:	007a1000 	rsbseq	r1, sl, r0
    4210:	00080000 	andeq	r0, r8, r0
    4214:	0020ce15 	eoreq	ip, r0, r5, lsl lr
    4218:	b20c0100 	andlt	r0, ip, #0	; 0x0
    421c:	01000003 	tsteq	r0, r3
    4220:	05d80305 	ldrbeq	r0, [r8, #773]
    4224:	27152000 	ldrcs	r2, [r5, -r0]
    4228:	01000020 	tsteq	r0, r0, lsr #32
    422c:	00005e0d 	andeq	r5, r0, sp, lsl #28
    4230:	03050100 	movweq	r0, #20736	; 0x5100
    4234:	200005e1 	andcs	r0, r0, r1, ror #11
    4238:	001fde15 	andseq	sp, pc, r5, lsl lr
    423c:	4c0e0100 	stfmis	f0, [lr], {0}
    4240:	01000000 	tsteq	r0, r0
    4244:	05e20305 	strbeq	r0, [r2, #773]!
    4248:	c4152000 	ldrgt	r2, [r5]
    424c:	01000020 	tsteq	r0, r0, lsr #32
    4250:	0002f50f 	andeq	pc, r2, pc, lsl #10
    4254:	03050100 	movweq	r0, #20736	; 0x5100
    4258:	200005e4 	andcs	r0, r0, r4, ror #11
    425c:	001fa615 	andseq	sl, pc, r5, lsl r6
    4260:	5e110100 	mufpls	f0, f1, f0
    4264:	01000000 	tsteq	r0, r0
    4268:	05e50305 	strbeq	r0, [r5, #773]!
    426c:	7f152000 	svcvc	0x00152000
    4270:	0100001f 	tsteq	r0, pc, lsl r0
    4274:	00005e12 	andeq	r5, r0, r2, lsl lr
    4278:	03050100 	movweq	r0, #20736	; 0x5100
    427c:	200005e6 	andcs	r0, r0, r6, ror #11
    4280:	0020bd15 	eoreq	fp, r0, r5, lsl sp
    4284:	5e130100 	mufpls	f0, f3, f0
    4288:	01000000 	tsteq	r0, r0
    428c:	05e70305 	strbeq	r0, [r7, #773]!
    4290:	81152000 	tsthi	r5, r0
    4294:	01000020 	tsteq	r0, r0, lsr #32
    4298:	00005e14 	andeq	r5, r0, r4, lsl lr
    429c:	03050100 	movweq	r0, #20736	; 0x5100
    42a0:	200005e8 	andcs	r0, r0, r8, ror #11
    42a4:	001fe815 	andseq	lr, pc, r5, lsl r8
    42a8:	5e150100 	mufpls	f0, f5, f0
    42ac:	01000000 	tsteq	r0, r0
    42b0:	05e90305 	strbeq	r0, [r9, #773]!
    42b4:	c4152000 	ldrgt	r2, [r5]
    42b8:	0100001f 	tsteq	r0, pc, lsl r0
    42bc:	00005e16 	andeq	r5, r0, r6, lsl lr
    42c0:	03050100 	movweq	r0, #20736	; 0x5100
    42c4:	200005ea 	andcs	r0, r0, sl, ror #11
    42c8:	0003c100 	andeq	ip, r3, r0, lsl #2
    42cc:	b6000200 	.word	0xb6000200
    42d0:	0400000e 	.word	0x0400000e
    42d4:	0001c601 	.word	0x0001c601
    42d8:	216b0100 	.word	0x216b0100
    42dc:	220c0000 	.word	0x220c0000
	...
    42e8:	10cf0000 	.word	0x10cf0000
    42ec:	01020000 	.word	0x01020000
    42f0:	00046906 	.word	0x00046906
    42f4:	21160300 	.word	0x21160300
    42f8:	2e010000 	.word	0x2e010000
    42fc:	00000037 	.word	0x00000037
    4300:	67080102 	.word	0x67080102
    4304:	03000004 	.word	0x03000004
    4308:	00002204 	.word	0x00002204
    430c:	00493901 	.word	0x00493901
    4310:	02020000 	.word	0x02020000
    4314:	00049505 	.word	0x00049505
    4318:	22030300 	.word	0x22030300
    431c:	3a010000 	.word	0x3a010000
    4320:	0000005b 	.word	0x0000005b
    4324:	22070202 	.word	0x22070202
    4328:	02000002 	.word	0x02000002
    432c:	21500504 	.word	0x21500504
    4330:	04020000 	.word	0x04020000
    4334:	0021f107 	.word	0x0021f107
    4338:	05080200 	.word	0x05080200
    433c:	0000214b 	.word	0x0000214b
    4340:	ec070802 	.word	0xec070802
    4344:	04000021 	.word	0x04000021
    4348:	6e690504 	.word	0x6e690504
    434c:	04020074 	.word	0x04020074
    4350:	0021f607 	.word	0x0021f607
    4354:	00370500 	.word	0x00370500
    4358:	01060000 	.word	0x01060000
    435c:	00a63802 	.word	0x00a63802
    4360:	07070000 	.word	0x07070000
    4364:	0014      	.short	0x0014
    4366:	0000      	.short	0x0000
    4368:	00171007 	.word	0x00171007
    436c:	03000100 	.word	0x03000100
    4370:	00000f61 	.word	0x00000f61
    4374:	00913802 	.word	0x00913802
    4378:	1e030000 	.word	0x1e030000
    437c:	03000021 	.word	0x03000021
    4380:	00002c0f 	.word	0x00002c0f
    4384:	210f0300 	.word	0x210f0300
    4388:	11030000 	.word	0x11030000
    438c:	00000050 	.word	0x00000050
    4390:	00211003 	.word	0x00211003
    4394:	3e120300 	.word	0x3e120300
    4398:	08000000 	.word	0x08000000
    439c:	000000b1 	.word	0x000000b1
    43a0:	000000e2 	.word	0x000000e2
    43a4:	0000e209 	.word	0x0000e209
    43a8:	0a001900 	.word	0x0a001900
    43ac:	400b0704 	.word	0x400b0704
    43b0:	04000021 	.word	0x04000021
    43b4:	0000f708 	.word	0x0000f708
    43b8:	03050100 	.word	0x03050100
    43bc:	00000000 	.word	0x00000000
    43c0:	0000d20c 	.word	0x0000d20c
    43c4:	00b10800 	.word	0x00b10800
    43c8:	010c0000 	.word	0x010c0000
    43cc:	e2090000 	.word	0xe2090000
    43d0:	11000000 	.word	0x11000000
    43d4:	20f40b00 	.word	0x20f40b00
    43d8:	09040000 	.word	0x09040000
    43dc:	0000011e 	.word	0x0000011e
    43e0:	00030501 	.word	0x00030501
    43e4:	0c000000 	.word	0x0c000000
    43e8:	000000fc 	.word	0x000000fc
    43ec:	0021240b 	.word	0x0021240b
    43f0:	8c1f0400 	.word	0x8c1f0400
    43f4:	01000000 	.word	0x01000000
    43f8:	00000305 	.word	0x00000305
    43fc:	000b0000 	.word	0x000b0000
    4400:	04000023 	.word	0x04000023
    4404:	00014720 	.word	0x00014720
    4408:	0100      	.short	0x0100
    440a:	05          	.byte	0x05
    440b:	03          	.byte	0x03
    440c:	00000000 	.word	0x00000000
    4410:	014d040d 	.word	0x014d040d
    4414:	520c0000 	.word	0x520c0000
    4418:	02000001 	.word	0x02000001
    441c:	04700801 	.word	0x04700801
    4420:	b1080000 	.word	0xb1080000
    4424:	69000000 	.word	0x69000000
    4428:	09000001 	.word	0x09000001
    442c:	000000e2 	.word	0x000000e2
    4430:	fd0b0005 	.word	0xfd0b0005
    4434:	04000020 	.word	0x04000020
    4438:	00017b2e 	.word	0x00017b2e
    443c:	03050100 	.word	0x03050100
    4440:	00000000 	.word	0x00000000
    4444:	00015905 	.word	0x00015905
    4448:	00c70800 	.word	0x00c70800
    444c:	01900000 	.word	0x01900000
    4450:	e2090000 	.word	0xe2090000
    4454:	05000000 	.word	0x05000000
    4458:	21800b00 	.word	0x21800b00
    445c:	30040000 	.word	0x30040000
    4460:	000001a2 	.word	0x000001a2
    4464:	00030501 	.word	0x00030501
    4468:	05000000 	.word	0x05000000
    446c:	00000180 	.word	0x00000180
    4470:	00218f0b 	.word	0x00218f0b
    4474:	b9310400 	.word	0xb9310400
    4478:	01000001 	.word	0x01000001
    447c:	00000305 	.word	0x00000305
    4480:	bc050000 	.word	0xbc050000
    4484:	0b000000 	.word	0x0b000000
    4488:	0000219f 	.word	0x0000219f
    448c:	01b93204 	.word	0x01b93204
    4490:	05010000 	.word	0x05010000
    4494:	00000003 	.word	0x00000003
    4498:	22710b00 	.word	0x22710b00
    449c:	33040000 	.word	0x33040000
    44a0:	000001b9 	.word	0x000001b9
    44a4:	00030501 	.word	0x00030501
    44a8:	0b000000 	.word	0x0b000000
    44ac:	0000224a 	.word	0x0000224a
    44b0:	01f43404 	.word	0x01f43404
    44b4:	05010000 	.word	0x05010000
    44b8:	00000003 	.word	0x00000003
    44bc:	00c70500 	.word	0x00c70500
    44c0:	550b0000 	.word	0x550b0000
    44c4:	04000022 	.word	0x04000022
    44c8:	0001f435 	.word	0x0001f435
    44cc:	03050100 	.word	0x03050100
    44d0:	00000000 	.word	0x00000000
    44d4:	0023310b 	.word	0x0023310b
    44d8:	b9360400 	.word	0xb9360400
    44dc:	01000001 	.word	0x01000001
    44e0:	00000305 	.word	0x00000305
    44e4:	590b0000 	.word	0x590b0000
    44e8:	04000021 	.word	0x04000021
    44ec:	0001b937 	.word	0x0001b937
    44f0:	03050100 	.word	0x03050100
    44f4:	00000000 	.word	0x00000000
    44f8:	0021b00b 	.word	0x0021b00b
    44fc:	b9380400 	.word	0xb9380400
    4500:	01000001 	.word	0x01000001
    4504:	00000305 	.word	0x00000305
    4508:	600b0000 	.word	0x600b0000
    450c:	04000022 	.word	0x04000022
    4510:	0001b939 	.word	0x0001b939
    4514:	03050100 	.word	0x03050100
    4518:	00000000 	.word	0x00000000
    451c:	0023140b 	.word	0x0023140b
    4520:	653c0400 	.word	0x653c0400
    4524:	01000002 	.word	0x01000002
    4528:	00000305 	.word	0x00000305
    452c:	b1050000 	.word	0xb1050000
    4530:	0b000000 	.word	0x0b000000
    4534:	0000230f 	.word	0x0000230f
    4538:	3d04      	.short	0x3d04
    453a:	65          	.byte	0x65
    453b:	02          	.byte	0x02
    453c:	05010000 	.word	0x05010000
    4540:	00000003 	.word	0x00000003
    4544:	21e00b00 	.word	0x21e00b00
    4548:	3e040000 	.word	0x3e040000
    454c:	0000028e 	.word	0x0000028e
    4550:	00030501 	.word	0x00030501
    4554:	05000000 	.word	0x05000000
    4558:	000000a6 	.word	0x000000a6
    455c:	0020e10b 	.word	0x0020e10b
    4560:	653f0400 	.word	0x653f0400
    4564:	01000002 	.word	0x01000002
    4568:	00000305 	.word	0x00000305
    456c:	d60b0000 	.word	0xd60b0000
    4570:	04000022 	.word	0x04000022
    4574:	00028e40 	.word	0x00028e40
    4578:	03050100 	.word	0x03050100
    457c:	00000000 	.word	0x00000000
    4580:	0000c708 	.word	0x0000c708
    4584:	0002c700 	.word	0x0002c700
    4588:	00e20900 	.word	0x00e20900
    458c:	00110000 	.word	0x00110000
    4590:	0023240b 	.word	0x0023240b
    4594:	d9430400 	.word	0xd9430400
    4598:	01000002 	.word	0x01000002
    459c:	00000305 	.word	0x00000305
    45a0:	b7050000 	.word	0xb7050000
    45a4:	08000002 	.word	0x08000002
    45a8:	000000b1 	.word	0x000000b1
    45ac:	000002f4 	.word	0x000002f4
    45b0:	0000e209 	.word	0x0000e209
    45b4:	e2090600 	.word	0xe2090600
    45b8:	11000000 	.word	0x11000000
    45bc:	22820b00 	.word	0x22820b00
    45c0:	45040000 	.word	0x45040000
    45c4:	00000306 	.word	0x00000306
    45c8:	00030501 	.word	0x00030501
    45cc:	05000000 	.word	0x05000000
    45d0:	000002de 	.word	0x000002de
    45d4:	0022ad0b 	.word	0x0022ad0b
    45d8:	1d460400 	.word	0x1d460400
    45dc:	01000003 	.word	0x01000003
    45e0:	00000305 	.word	0x00000305
    45e4:	fc050000 	.word	0xfc050000
    45e8:	0b000000 	.word	0x0b000000
    45ec:	000022ec 	.word	0x000022ec
    45f0:	02654904 	.word	0x02654904
    45f4:	05010000 	.word	0x05010000
    45f8:	00000003 	.word	0x00000003
    45fc:	229c0b00 	.word	0x229c0b00
    4600:	4a040000 	.word	0x4a040000
    4604:	00000265 	.word	0x00000265
    4608:	00030501 	.word	0x00030501
    460c:	0b000000 	.word	0x0b000000
    4610:	000021c8 	.word	0x000021c8
    4614:	02654b04 	.word	0x02654b04
    4618:	05010000 	.word	0x05010000
    461c:	00000003 	.word	0x00000003
    4620:	00620800 	.word	0x00620800
    4624:	03680000 	.word	0x03680000
    4628:	e2090000 	.word	0xe2090000
    462c:	01000000 	.word	0x01000000
    4630:	22e20b00 	.word	0x22e20b00
    4634:	4e040000 	.word	0x4e040000
    4638:	0000037a 	.word	0x0000037a
    463c:	00030501 	.word	0x00030501
    4640:	05000000 	.word	0x05000000
    4644:	00000358 	.word	0x00000358
    4648:	0021d50b 	.word	0x0021d50b
    464c:	914f0400 	.word	0x914f0400
    4650:	01000003 	.word	0x01000003
    4654:	00000305 	.word	0x00000305
    4658:	58050000 	.word	0x58050000
    465c:	0b000003 	.word	0x0b000003
    4660:	00002133 	.word	0x00002133
    4664:	03a85004 	.word	0x03a85004
    4668:	05010000 	.word	0x05010000
    466c:	00000003 	.word	0x00000003
    4670:	03580500 	.word	0x03580500
    4674:	c20b0000 	.word	0xc20b0000
    4678:	04000022 	.word	0x04000022
    467c:	0003bf51 	.word	0x0003bf51
    4680:	03050100 	.word	0x03050100
    4684:	00000000 	.word	0x00000000
    4688:	00035805 	.word	0x00035805
    468c:	046f0000 	.word	0x046f0000
    4690:	00020000 	.word	0x00020000
    4694:	00000f46 	.word	0x00000f46
    4698:	01c60104 	.word	0x01c60104
    469c:	50010000 	.word	0x50010000
    46a0:	0c000023 	.word	0x0c000023
    46a4:	00000022 	.word	0x00000022
    46a8:	00000000 	.word	0x00000000
    46ac:	75000000 	.word	0x75000000
    46b0:	02000011 	.word	0x02000011
    46b4:	000023be 	.word	0x000023be
    46b8:	00302b02 	.word	0x00302b02
    46bc:	04030000 	.word	0x04030000
    46c0:	00002361 	.word	0x00002361
    46c4:	0023c502 	.word	0x0023c502
    46c8:	25690200 	.word	0x25690200
    46cc:	02000000 	.word	0x02000000
    46d0:	0000234a 	.word	0x0000234a
    46d4:	004c2401 	.word	0x004c2401
    46d8:	04040000 	.word	0x04040000
    46dc:	00000052 	.word	0x00000052
    46e0:	00630105 	.word	0x00630105
    46e4:	63060000 	.word	0x63060000
    46e8:	06000000 	.word	0x06000000
    46ec:	00000065 	.word	0x00000065
    46f0:	08040700 	.word	0x08040700
    46f4:	04700801 	.word	0x04700801
    46f8:	61090000 	.word	0x61090000
    46fc:	01006432 	.word	0x01006432
    4700:	00880164 	.word	0x00880164
    4704:	88010000 	.word	0x88010000
    4708:	0a000000 	.word	0x0a000000
    470c:	01006863 	.word	0x01006863
    4710:	00006563 	.word	0x00006563
    4714:	040b0000 	.word	0x040b0000
    4718:	746e6905 	.word	0x746e6905
    471c:	32610900 	.word	0x32610900
    4720:	6f010069 	.word	0x6f010069
    4724:	00006501 	.word	0x00006501
    4728:	00f20100 	.word	0x00f20100
    472c:	630a0000 	.word	0x630a0000
    4730:	6e010068 	.word	0x6e010068
    4734:	00000065 	.word	0x00000065
    4738:	6372730a 	.word	0x6372730a
    473c:	f26e0100 	.word	0xf26e0100
    4740:	0c000000 	.word	0x0c000000
    4744:	00004582 	.word	0x00004582
    4748:	00886e01 	.word	0x00886e01
    474c:	790c0000 	.word	0x790c0000
    4750:	01000023 	.word	0x01000023
    4754:	0000fe6e 	.word	0x0000fe6e
    4758:	00700d00 	.word	0x00700d00
    475c:	00f87001 	.word	0x00f87001
    4760:	6e0d0000 	.word	0x6e0d0000
    4764:	01006d75 	.word	0x01006d75
    4768:	00008871 	.word	0x00008871
    476c:	23ac0e00 	.word	0x23ac0e00
    4770:	72010000 	.word	0x72010000
    4774:	00000088 	.word	0x00000088
    4778:	007d100f 	.word	0x007d100f
    477c:	00000000 	.word	0x00000000
    4780:	00f80404 	.word	0x00f80404
    4784:	04040000 	.word	0x04040000
    4788:	00000065 	.word	0x00000065
    478c:	00880404 	.word	0x00880404
    4790:	69110000 	.word	0x69110000
    4794:	01006132 	.word	0x01006132
    4798:	2701015b 	.word	0x2701015b
    479c:	0a000001 	.word	0x0a000001
    47a0:	006d756e 	.word	0x006d756e
    47a4:	00885a01 	.word	0x00885a01
    47a8:	620a0000 	.word	0x620a0000
    47ac:	5a010066 	.word	0x5a010066
    47b0:	000000f8 	.word	0x000000f8
    47b4:	23731200 	.word	0x23731200
    47b8:	e8010000 	.word	0xe8010000
    47bc:	01470101 	.word	0x01470101
    47c0:	700a0000 	.word	0x700a0000
    47c4:	63e70100 	.word	0x63e70100
    47c8:	0a000000 	.word	0x0a000000
    47cc:	e7010063 	.word	0xe7010063
    47d0:	00000065 	.word	0x00000065
    47d4:	23df1300 	.word	0x23df1300
    47d8:	49010000 	.word	0x49010000
    47dc:	00000001 	.word	0x00000001
    47e0:	00000000 	.word	0x00000000
    47e4:	001f2100 	.word	0x001f2100
    47e8:	0001c700 	.word	0x0001c700
    47ec:	756e1400 	.word	0x756e1400
    47f0:	4801006d 	.word	0x4801006d
    47f4:	000001c7 	.word	0x000001c7
    47f8:	82155001 	.word	0x82155001
    47fc:	01000045 	.word	0x01000045
    4800:	0001c748 	.word	0x0001c748
    4804:	001f4000 	.word	0x001f4000
    4808:	63751600 	.word	0x63751600
    480c:	88480100 	.word	0x88480100
    4810:	5e000000 	.word	0x5e000000
    4814:	1600001f 	.word	0x1600001f
    4818:	01006662 	.word	0x01006662
    481c:	0000f848 	.word	0x0000f848
    4820:	001f7c00 	.word	0x001f7c00
    4824:	006e1700 	.word	0x006e1700
    4828:	00884a01 	.word	0x00884a01
    482c:	51010000 	.word	0x51010000
    4830:	01006418 	.word	0x01006418
    4834:	0001c74b 	.word	0x0001c74b
    4838:	001f9a00 	.word	0x001f9a00
    483c:	00001900 	.word	0x00001900
    4840:	00000000 	.word	0x00000000
    4844:	64170000 	.word	0x64170000
    4848:	01007467 	.word	0x01007467
    484c:	0000884f 	.word	0x0000884f
    4850:	005c0100 	.word	0x005c0100
    4854:	07040800 	.word	0x07040800
    4858:	000021f6 	.word	0x000021f6
    485c:	00234313 	.word	0x00234313
    4860:	017e0100 	.word	0x017e0100
	...
    486c:	00001fc3 	.word	0x00001fc3
    4870:	00000250 	.word	0x00000250
    4874:	0023b915 	.word	0x0023b915
    4878:	637d0100 	.word	0x637d0100
    487c:	ee000000 	.word	0xee000000
    4880:	1500001f 	.word	0x1500001f
    4884:	0000239b 	.word	0x0000239b
    4888:	00417d01 	.word	0x00417d01
    488c:	200c0000 	.word	0x200c0000
    4890:	6e160000 	.word	0x6e160000
    4894:	887d0100 	.word	0x887d0100
    4898:	2a000000 	.word	0x2a000000
    489c:	16000020 	.word	0x16000020
    48a0:	7d01007a 	.word	0x7d01007a
    48a4:	00000065 	.word	0x00000065
    48a8:	00002053 	.word	0x00002053
    48ac:	00666216 	.word	0x00666216
    48b0:	00f87d01 	.word	0x00f87d01
    48b4:	20710000 	.word	0x20710000
    48b8:	66170000 	.word	0x66170000
    48bc:	7f010063 	.word	0x7f010063
    48c0:	00000065 	.word	0x00000065
    48c4:	63185501 	.word	0x63185501
    48c8:	80010068 	.word	0x80010068
    48cc:	00000065 	.word	0x00000065
    48d0:	000020a9 	.word	0x000020a9
    48d4:	0100700d 	.word	0x0100700d
    48d8:	0000f881 	.word	0x0000f881
    48dc:	011a0000 	.word	0x011a0000
    48e0:	00002389 	.word	0x00002389
    48e4:	00018b01 	.word	0x00018b01
    48e8:	00000000 	.word	0x00000000
    48ec:	c7000000 	.word	0xc7000000
    48f0:	67000020 	.word	0x67000020
    48f4:	15000003 	.word	0x15000003
    48f8:	000023b9 	.word	0x000023b9
    48fc:	00638a01 	.word	0x00638a01
    4900:	20f30000 	.word	0x20f30000
    4904:	9b150000 	.word	0x9b150000
    4908:	01000023 	.word	0x01000023
    490c:	0000418a 	.word	0x0000418a
    4910:	00215700 	.word	0x00215700
    4914:	6d661600 	.word	0x6d661600
    4918:	8a010074 	.word	0x8a010074
    491c:	000000f8 	.word	0x000000f8
    4920:	00002199 	.word	0x00002199
    4924:	00617616 	.word	0x00617616
    4928:	00368a01 	.word	0x00368a01
    492c:	21b70000 	.word	0x21b70000
    4930:	62170000 	.word	0x62170000
    4934:	8c010066 	.word	0x8c010066
    4938:	00000367 	.word	0x00000367
    493c:	185c9102 	.word	0x185c9102
    4940:	01006863 	.word	0x01006863
    4944:	0000658e 	.word	0x0000658e
    4948:	00222d00 	.word	0x00222d00
    494c:	23d91b00 	.word	0x23d91b00
    4950:	d5010000 	.word	0xd5010000
    4954:	00000000 	.word	0x00000000
    4958:	00000019 	.word	0x00000019
    495c:	00000000 	.word	0x00000000
    4960:	7a6c1700 	.word	0x7a6c1700
    4964:	65950100 	.word	0x65950100
    4968:	02000000 	.word	0x02000000
    496c:	7718147d 	.word	0x7718147d
    4970:	88990100 	.word	0x88990100
    4974:	98000000 	.word	0x98000000
    4978:	1c000022 	.word	0x1c000022
    497c:	0000008f 	.word	0x0000008f
	...
    4988:	0343a001 	.word	0x0343a001
    498c:	c0100000 	.word	0xc0100000
    4990:	10000000 	.word	0x10000000
    4994:	000000b5 	.word	0x000000b5
    4998:	0000aa10 	.word	0x0000aa10
    499c:	00a01000 	.word	0x00a01000
    49a0:	00190000 	.word	0x00190000
    49a4:	00000000 	.word	0x00000000
    49a8:	1d000000 	.word	0x1d000000
    49ac:	000000cb 	.word	0x000000cb
    49b0:	0000d41d 	.word	0x0000d41d
    49b4:	00df1e00 	.word	0x00df1e00
    49b8:	22c10000 	.word	0x22c10000
    49bc:	6c1f0000 	.word	0x6c1f0000
    49c0:	18000000 	.word	0x18000000
    49c4:	01000001 	.word	0x01000001
    49c8:	007d1073 	.word	0x007d1073
    49cc:	00000000 	.word	0x00000000
    49d0:	01042000 	.word	0x01042000
	...
    49dc:	bb010000 	.word	0xbb010000
    49e0:	00011c21 	.word	0x00011c21
    49e4:	00232c00 	.word	0x00232c00
    49e8:	01112100 	.word	0x01112100
    49ec:	233f0000 	.word	0x233f0000
    49f0:	00000000 	.word	0x00000000
    49f4:	00652200 	.word	0x00652200
    49f8:	03770000 	.word	0x03770000
    49fc:	77230000 	.word	0x77230000
    4a00:	0b000003 	.word	0x0b000003
    4a04:	07042400 	.word	0x07042400
    4a08:	23cd0125 	.word	0x23cd0125
    4a0c:	da010000 	.word	0xda010000
    4a10:	00000001 	.word	0x00000001
    4a14:	00000000 	.word	0x00000000
    4a18:	ac5d0100 	.word	0xac5d0100
    4a1c:	26000003 	.word	0x26000003
    4a20:	000023b9 	.word	0x000023b9
    4a24:	0063d901 	.word	0x0063d901
    4a28:	50010000 	.word	0x50010000
    4a2c:	00239b26 	.word	0x00239b26
    4a30:	4cd90100 	.word	0x4cd90100
    4a34:	01000000 	.word	0x01000000
    4a38:	27270051 	.word	0x27270051
    4a3c:	00000001 	.word	0x00000001
    4a40:	00000000 	.word	0x00000000
    4a44:	01000000 	.word	0x01000000
    4a48:	0003ce5d 	.word	0x0003ce5d
    4a4c:	01342800 	.word	0x01342800
    4a50:	50010000 	.word	0x50010000
    4a54:	00013d28 	.word	0x00013d28
    4a58:	00510100 	.word	0x00510100
    4a5c:	23a0011a 	.word	0x23a0011a
    4a60:	ef010000 	.word	0xef010000
    4a64:	00000001 	.word	0x00000001
    4a68:	00000000 	.word	0x00000000
    4a6c:	00235200 	.word	0x00235200
    4a70:	00041d00 	.word	0x00041d00
    4a74:	00731600 	.word	0x00731600
    4a78:	00f8ee01 	.word	0x00f8ee01
    4a7c:	23890000 	.word	0x23890000
    4a80:	66140000 	.word	0x66140000
    4a84:	0100746d 	.word	0x0100746d
    4a88:	0000f8ee 	.word	0x0000f8ee
    4a8c:	00910200 	.word	0x00910200
    4a90:	61760d29 	.word	0x61760d29
    4a94:	36f00100 	.word	0x36f00100
    4a98:	2a000000 	.word	0x2a000000
    4a9c:	00000127 	.word	0x00000127
	...
    4aa8:	1a00f301 	.word	0x1a00f301
    4aac:	00237e01 	.word	0x00237e01
    4ab0:	01e00100 	.word	0x01e00100
	...
    4abc:	000023a8 	.word	0x000023a8
    4ac0:	00000450 	.word	0x00000450
    4ac4:	746d6614 	.word	0x746d6614
    4ac8:	f8df0100 	.word	0xf8df0100
    4acc:	02000000 	.word	0x02000000
    4ad0:	0d290091 	.word	0x0d290091
    4ad4:	01006176 	.word	0x01006176
    4ad8:	000036e1 	.word	0x000036e1
    4adc:	942b0000 	.word	0x942b0000
    4ae0:	01000023 	.word	0x01000023
    4ae4:	00004125 	.word	0x00004125
    4ae8:	00030500 	.word	0x00030500
    4aec:	2b000000 	.word	0x2b000000
    4af0:	000023b2 	.word	0x000023b2
    4af4:	00632601 	.word	0x00632601
    4af8:	03050000 	.word	0x03050000
    4afc:	00000000 	.word	0x00000000
    4b00:	0003f500 	.word	0x0003f500
    4b04:	6a000200 	.word	0x6a000200
    4b08:	04000011 	.word	0x04000011
    4b0c:	0001c601 	.word	0x0001c601
    4b10:	24510100 	.word	0x24510100
    4b14:	039d0000 	.word	0x039d0000
    4b18:	44980000 	.word	0x44980000
    4b1c:	46360800 	.word	0x46360800
    4b20:	12700800 	.word	0x12700800
    4b24:	04020000 	.word	0x04020000
    4b28:	00215005 	.word	0x00215005
    4b2c:	05020200 	.word	0x05020200
    4b30:	00000495 	.word	0x00000495
    4b34:	69060102 	.word	0x69060102
    4b38:	02000004 	.word	0x02000004
    4b3c:	21f10704 	.word	0x21f10704
    4b40:	75030000 	.word	0x75030000
    4b44:	02003631 	.word	0x02003631
    4b48:	00004c28 	.word	0x00004c28
    4b4c:	07020200 	.word	0x07020200
    4b50:	00000222 	.word	0x00000222
    4b54:	00387503 	.word	0x00387503
    4b58:	005d2902 	.word	0x005d2902
    4b5c:	01020000 	.word	0x01020000
    4b60:	00046708 	.word	0x00046708
    4b64:	003a0400 	.word	0x003a0400
    4b68:	01050000 	.word	0x01050000
    4b6c:	007e3c02 	.word	0x007e3c02
    4b70:	6c060000 	.word	0x6c060000
    4b74:	00000024 	.word	0x00000024
    4b78:	00043906 	.word	0x00043906
    4b7c:	07000100 	.word	0x07000100
    4b80:	9d250350 	.word	0x9d250350
    4b84:	08000001 	.word	0x08000001
    4b88:	03005253 	.word	0x03005253
    4b8c:	00006426 	.word	0x00006426
    4b90:	00230200 	.word	0x00230200
    4b94:	31524308 	.word	0x31524308
    4b98:	64270300 	.word	0x64270300
    4b9c:	02000000 	.word	0x02000000
    4ba0:	43080423 	.word	0x43080423
    4ba4:	03003252 	.word	0x03003252
    4ba8:	00006428 	.word	0x00006428
    4bac:	08230200 	.word	0x08230200
    4bb0:	00251709 	.word	0x00251709
    4bb4:	64290300 	.word	0x64290300
    4bb8:	02000000 	.word	0x02000000
    4bbc:	1d090c23 	.word	0x1d090c23
    4bc0:	03000025 	.word	0x03000025
    4bc4:	0000642a 	.word	0x0000642a
    4bc8:	10230200 	.word	0x10230200
    4bcc:	00248609 	.word	0x00248609
    4bd0:	642b0300 	.word	0x642b0300
    4bd4:	02000000 	.word	0x02000000
    4bd8:	8c091423 	.word	0x8c091423
    4bdc:	03000024 	.word	0x03000024
    4be0:	0000642c 	.word	0x0000642c
    4be4:	18230200 	.word	0x18230200
    4be8:	0024ad09 	.word	0x0024ad09
    4bec:	642d0300 	.word	0x642d0300
    4bf0:	02000000 	.word	0x02000000
    4bf4:	bb091c23 	.word	0xbb091c23
    4bf8:	03000024 	.word	0x03000024
    4bfc:	0000642e 	.word	0x0000642e
    4c00:	20230200 	.word	0x20230200
    4c04:	52544808 	.word	0x52544808
    4c08:	642f0300 	.word	0x642f0300
    4c0c:	02000000 	.word	0x02000000
    4c10:	4c082423 	.word	0x4c082423
    4c14:	03005254 	.word	0x03005254
    4c18:	00006430 	.word	0x00006430
    4c1c:	28230200 	.word	0x28230200
    4c20:	0024ea09 	.word	0x0024ea09
    4c24:	64310300 	.word	0x64310300
    4c28:	02000000 	.word	0x02000000
    4c2c:	ef092c23 	.word	0xef092c23
    4c30:	03000024 	.word	0x03000024
    4c34:	00006432 	.word	0x00006432
    4c38:	30230200 	.word	0x30230200
    4c3c:	0024f409 	.word	0x0024f409
    4c40:	64330300 	.word	0x64330300
    4c44:	02000000 	.word	0x02000000
    4c48:	36093423 	.word	0x36093423
    4c4c:	03000024 	.word	0x03000024
    4c50:	00006434 	.word	0x00006434
    4c54:	38230200 	.word	0x38230200
    4c58:	00247409 	.word	0x00247409
    4c5c:	64350300 	.word	0x64350300
    4c60:	02000000 	.word	0x02000000
    4c64:	f8093c23 	.word	0xf8093c23
    4c68:	03000023 	.word	0x03000023
    4c6c:	00006436 	.word	0x00006436
    4c70:	40230200 	.word	0x40230200
    4c74:	0023fd09 	.word	0x0023fd09
    4c78:	64370300 	.word	0x64370300
    4c7c:	02000000 	.word	0x02000000
    4c80:	02094423 	.word	0x02094423
    4c84:	03000024 	.word	0x03000024
    4c88:	00006438 	.word	0x00006438
    4c8c:	48230200 	.word	0x48230200
    4c90:	00524408 	.word	0x00524408
    4c94:	00643903 	.word	0x00643903
    4c98:	23020000 	.word	0x23020000
    4c9c:	040a004c 	.word	0x040a004c
    4ca0:	031c0b07 	.word	0x031c0b07
    4ca4:	0213014f 	.word	0x0213014f
    4ca8:	430c0000 	.word	0x430c0000
    4cac:	03004c52 	.word	0x03004c52
    4cb0:	00640150 	.word	0x00640150
    4cb4:	23020000 	.word	0x23020000
    4cb8:	52430c00 	.word	0x52430c00
    4cbc:	51030048 	.word	0x51030048
    4cc0:	00006401 	.word	0x00006401
    4cc4:	04230200 	.word	0x04230200
    4cc8:	5244490c 	.word	0x5244490c
    4ccc:	01520300 	.word	0x01520300
    4cd0:	00000064 	.word	0x00000064
    4cd4:	0c082302 	.word	0x0c082302
    4cd8:	0052444f 	.word	0x0052444f
    4cdc:	64015303 	.word	0x64015303
    4ce0:	02000000 	.word	0x02000000
    4ce4:	790d0c23 	.word	0x790d0c23
    4ce8:	03000024 	.word	0x03000024
    4cec:	00640154 	.word	0x00640154
    4cf0:	23020000 	.word	0x23020000
    4cf4:	52420c10 	.word	0x52420c10
    4cf8:	55030052 	.word	0x55030052
    4cfc:	00006401 	.word	0x00006401
    4d00:	14230200 	.word	0x14230200
    4d04:	0025230d 	.word	0x0025230d
    4d08:	01560300 	.word	0x01560300
    4d0c:	00000064 	.word	0x00000064
    4d10:	00182302 	.word	0x00182302
    4d14:	0023e40e 	.word	0x0023e40e
    4d18:	01570300 	.word	0x01570300
    4d1c:	000001a0 	.word	0x000001a0
    4d20:	00243b0f 	.word	0x00243b0f
    4d24:	12040100 	.word	0x12040100
    4d28:	00000274 	.word	0x00000274
    4d2c:	0024f906 	.word	0x0024f906
    4d30:	b3060000 	.word	0xb3060000
    4d34:	01000024 	.word	0x01000024
    4d38:	00242506 	.word	0x00242506
    4d3c:	1d060200 	.word	0x1d060200
    4d40:	03000024 	.word	0x03000024
    4d44:	00247e06 	.word	0x00247e06
    4d48:	92060400 	.word	0x92060400
    4d4c:	05000024 	.word	0x05000024
    4d50:	0024cc06 	.word	0x0024cc06
    4d54:	d4060600 	.word	0xd4060600
    4d58:	07000024 	.word	0x07000024
    4d5c:	00252806 	.word	0x00252806
    4d60:	30060800 	.word	0x30060800
    4d64:	09000025 	.word	0x09000025
    4d68:	00244906 	.word	0x00244906
    4d6c:	64060a00 	.word	0x64060a00
    4d70:	0b000024 	.word	0x0b000024
    4d74:	24a41000 	.word	0x24a41000
    4d78:	1f040000 	.word	0x1f040000
    4d7c:	0000021f 	.word	0x0000021f
    4d80:	0001710f 	.word	0x0001710f
    4d84:	20040100 	.word	0x20040100
    4d88:	000002b6 	.word	0x000002b6
    4d8c:	0005b406 	.word	0x0005b406
    4d90:	a6060000 	.word	0xa6060000
    4d94:	01000006 	.word	0x01000006
    4d98:	0000e406 	.word	0x0000e406
    4d9c:	82060200 	.word	0x82060200
    4da0:	03000001 	.word	0x03000001
    4da4:	00021106 	.word	0x00021106
    4da8:	1b060400 	.word	0x1b060400
    4dac:	05000003 	.word	0x05000003
    4db0:	00024a06 	.word	0x00024a06
    4db4:	10000600 	.word	0x10000600
    4db8:	000024e1 	.word	0x000024e1
    4dbc:	027f2804 	.word	0x027f2804
    4dc0:	01110000 	.word	0x01110000
    4dc4:	08000025 	.word	0x08000025
    4dc8:	02ea7005 	.word	0x02ea7005
    4dcc:	dc090000 	.word	0xdc090000
    4dd0:	05000024 	.word	0x05000024
    4dd4:	0002ea71 	.word	0x0002ea71
    4dd8:	00230200 	.word	0x00230200
    4ddc:	6e697008 	.word	0x6e697008
    4de0:	41720500 	.word	0x41720500
    4de4:	02000000 	.word	0x02000000
    4de8:	12000423 	.word	0x12000423
    4dec:	00021304 	.word	0x00021304
    4df0:	250c1000 	.word	0x250c1000
    4df4:	73050000 	.word	0x73050000
    4df8:	000002c1 	.word	0x000002c1
    4dfc:	242d0113 	.word	0x242d0113
    4e00:	1d010000 	.word	0x1d010000
    4e04:	00449801 	.word	0x00449801
    4e08:	0044c408 	.word	0x0044c408
    4e0c:	0023df08 	.word	0x0023df08
    4e10:	00033300 	.word	0x00033300
    4e14:	69701400 	.word	0x69701400
    4e18:	1d01006e 	.word	0x1d01006e
    4e1c:	00000274 	.word	0x00000274
    4e20:	0000240a 	.word	0x0000240a
    4e24:	00456c15 	.word	0x00456c15
    4e28:	531d0100 	.word	0x531d0100
    4e2c:	28000000 	.word	0x28000000
    4e30:	00000024 	.word	0x00000024
    4e34:	24c10116 	.word	0x24c10116
    4e38:	26010000 	.word	0x26010000
    4e3c:	00004101 	.word	0x00004101
    4e40:	0044c400 	.word	0x0044c400
    4e44:	0045b408 	.word	0x0045b408
    4e48:	00244608 	.word	0x00244608
    4e4c:	00037900 	.word	0x00037900
    4e50:	24dc1500 	.word	0x24dc1500
    4e54:	26010000 	.word	0x26010000
    4e58:	000002b6 	.word	0x000002b6
    4e5c:	00002465 	.word	0x00002465
    4e60:	00456a17 	.word	0x00456a17
    4e64:	0045a408 	.word	0x0045a408
    4e68:	19631808 	.word	0x19631808
    4e6c:	64010000 	.word	0x64010000
    4e70:	00000041 	.word	0x00000041
    4e74:	000024a4 	.word	0x000024a4
    4e78:	01130000 	.word	0x01130000
    4e7c:	00002407 	.word	0x00002407
    4e80:	b4018901 	.word	0xb4018901
    4e84:	f6080045 	.word	0xf6080045
    4e88:	c2080045 	.word	0xc2080045
    4e8c:	9e000024 	.word	0x9e000024
    4e90:	19000003 	.word	0x19000003
    4e94:	00002444 	.word	0x00002444
    4e98:	00418a01 	.word	0x00418a01
    4e9c:	16000000 	.word	0x16000000
    4ea0:	0023f101 	.word	0x0023f101
    4ea4:	01790100 	.word	0x01790100
    4ea8:	00000041 	.word	0x00000041
    4eac:	080045f8 	.word	0x080045f8
    4eb0:	08004636 	.word	0x08004636
    4eb4:	000024ed 	.word	0x000024ed
    4eb8:	000003d6 	.word	0x000003d6
    4ebc:	0024dc15 	.word	0x0024dc15
    4ec0:	b6790100 	.word	0xb6790100
    4ec4:	0c000002 	.word	0x0c000002
    4ec8:	19000025 	.word	0x19000025
    4ecc:	00001963 	.word	0x00001963
    4ed0:	00417a01 	.word	0x00417a01
    4ed4:	1a000000 	.word	0x1a000000
    4ed8:	000002f0 	.word	0x000002f0
    4edc:	000003e6 	.word	0x000003e6
    4ee0:	00019d1b 	.word	0x00019d1b
    4ee4:	1c000b00 	.word	0x1c000b00
    4ee8:	0000249a 	.word	0x0000249a
    4eec:	03d61001 	.word	0x03d61001
    4ef0:	05010000 	.word	0x05010000
    4ef4:	00000403 	.word	0x00000403
    4ef8:	01c10020 	.word	0x01c10020
    4efc:	00020000 	.word	0x00020000
    4f00:	000012e9 	.word	0x000012e9
    4f04:	01c60104 	.word	0x01c60104
    4f08:	57010000 	.word	0x57010000
    4f0c:	9d000025 	.word	0x9d000025
    4f10:	38000003 	.word	0x38000003
    4f14:	5c080046 	.word	0x5c080046
    4f18:	53080046 	.word	0x53080046
    4f1c:	02000013 	.word	0x02000013
    4f20:	21500504 	.word	0x21500504
    4f24:	02020000 	.word	0x02020000
    4f28:	00049505 	.word	0x00049505
    4f2c:	06010200 	.word	0x06010200
    4f30:	00000469 	.word	0x00000469
    4f34:	f1070402 	.word	0xf1070402
    4f38:	03000021 	.word	0x03000021
    4f3c:	00363175 	.word	0x00363175
    4f40:	004c2802 	.word	0x004c2802
    4f44:	02020000 	.word	0x02020000
    4f48:	00022207 	.word	0x00022207
    4f4c:	38750300 	.word	0x38750300
    4f50:	5d290200 	.word	0x5d290200
    4f54:	02000000 	.word	0x02000000
    4f58:	04670801 	.word	0x04670801
    4f5c:	3a040000 	.word	0x3a040000
    4f60:	05000000 	.word	0x05000000
    4f64:	7e3a0201 	.word	0x7e3a0201
    4f68:	06000000 	.word	0x06000000
    4f6c:	00000ebd 	.word	0x00000ebd
    4f70:	45530700 	.word	0x45530700
    4f74:	00010054 	.word	0x00010054
    4f78:	00021908 	.word	0x00021908
    4f7c:	0d040100 	.word	0x0d040100
    4f80:	000000ae 	.word	0x000000ae
    4f84:	00505507 	.word	0x00505507
    4f88:	06100600 	.word	0x06100600
    4f8c:	06010000 	.word	0x06010000
    4f90:	00000000 	.word	0x00000000
    4f94:	05280602 	.word	0x05280602
    4f98:	06030000 	.word	0x06030000
    4f9c:	00000386 	.word	0x00000386
    4fa0:	494d0704 	.word	0x494d0704
    4fa4:	00050043 	.word	0x00050043
    4fa8:	00253809 	.word	0x00253809
    4fac:	7e140400 	.word	0x7e140400
    4fb0:	0a000000 	.word	0x0a000000
    4fb4:	1c0b0704 	.word	0x1c0b0704
    4fb8:	2f014f03 	.word	0x2f014f03
    4fbc:	0c000001 	.word	0x0c000001
    4fc0:	004c5243 	.word	0x004c5243
    4fc4:	64015003 	.word	0x64015003
    4fc8:	02000000 	.word	0x02000000
    4fcc:	430c0023 	.word	0x430c0023
    4fd0:	03004852 	.word	0x03004852
    4fd4:	00640151 	.word	0x00640151
    4fd8:	23020000 	.word	0x23020000
    4fdc:	44490c04 	.word	0x44490c04
    4fe0:	52030052 	.word	0x52030052
    4fe4:	00006401 	.word	0x00006401
    4fe8:	08230200 	.word	0x08230200
    4fec:	52444f0c 	.word	0x52444f0c
    4ff0:	01530300 	.word	0x01530300
    4ff4:	00000064 	.word	0x00000064
    4ff8:	0d0c2302 	.word	0x0d0c2302
    4ffc:	00002479 	.word	0x00002479
    5000:	64015403 	.word	0x64015403
    5004:	02000000 	.word	0x02000000
    5008:	420c1023 	.word	0x420c1023
    500c:	03005252 	.word	0x03005252
    5010:	00640155 	.word	0x00640155
    5014:	23020000 	.word	0x23020000
    5018:	25230d14 	.word	0x25230d14
    501c:	56030000 	.word	0x56030000
    5020:	00006401 	.word	0x00006401
    5024:	18230200 	.word	0x18230200
    5028:	23e40e00 	.word	0x23e40e00
    502c:	57030000 	.word	0x57030000
    5030:	0000bc01 	.word	0x0000bc01
    5034:	25010f00 	.word	0x25010f00
    5038:	05080000 	.word	0x05080000
    503c:	00016470 	.word	0x00016470
    5040:	24dc1000 	.word	0x24dc1000
    5044:	71050000 	.word	0x71050000
    5048:	00000164 	.word	0x00000164
    504c:	11002302 	.word	0x11002302
    5050:	006e6970 	.word	0x006e6970
    5054:	00417205 	.word	0x00417205
    5058:	23020000 	.word	0x23020000
    505c:	04120004 	.word	0x04120004
    5060:	0000012f 	.word	0x0000012f
    5064:	00250c09 	.word	0x00250c09
    5068:	3b730500 	.word	0x3b730500
    506c:	13000001 	.word	0x13000001
    5070:	00254c01 	.word	0x00254c01
    5074:	01110100 	.word	0x01110100
    5078:	00000053 	.word	0x00000053
    507c:	08004638 	.word	0x08004638
    5080:	0800465c 	.word	0x0800465c
    5084:	0000252a 	.word	0x0000252a
    5088:	000001a2 	.word	0x000001a2
    508c:	00256d14 	.word	0x00256d14
    5090:	ae110100 	.word	0xae110100
    5094:	55000000 	.word	0x55000000
    5098:	00000025 	.word	0x00000025
    509c:	00016a15 	.word	0x00016a15
    50a0:	0001b200 	.word	0x0001b200
    50a4:	00b91600 	.word	0x00b91600
    50a8:	00050000 	.word	0x00050000
    50ac:	00254117 	.word	0x00254117
    50b0:	a20c0100 	.word	0xa20c0100
    50b4:	01000001 	.word	0x01000001
    50b8:	00640305 	.word	0x00640305
    50bc:	be002000 	.word	0xbe002000
    50c0:	02000001 	.word	0x02000001
    50c4:	00141900 	.word	0x00141900
    50c8:	c6010400 	.word	0xc6010400
    50cc:	01000001 	.word	0x01000001
    50d0:	00002574 	.word	0x00002574
    50d4:	0000039d 	.word	0x0000039d
    50d8:	0800465c 	.word	0x0800465c
    50dc:	08004688 	.word	0x08004688
    50e0:	000013ff 	.word	0x000013ff
    50e4:	50050402 	.word	0x50050402
    50e8:	02000021 	.word	0x02000021
    50ec:	04950502 	.word	0x04950502
    50f0:	01020000 	.word	0x01020000
    50f4:	00046906 	.word	0x00046906
    50f8:	07040200 	.word	0x07040200
    50fc:	000021f1 	.word	0x000021f1
    5100:	36317503 	.word	0x36317503
    5104:	4c280200 	.word	0x4c280200
    5108:	02000000 	.word	0x02000000
    510c:	02220702 	.word	0x02220702
    5110:	75030000 	.word	0x75030000
    5114:	29020038 	.word	0x29020038
    5118:	0000005d 	.word	0x0000005d
    511c:	67080102 	.word	0x67080102
    5120:	04000004 	.word	0x04000004
    5124:	0000003a 	.word	0x0000003a
    5128:	0004f405 	.word	0x0004f405
    512c:	0d040100 	.word	0x0d040100
    5130:	000000a0 	.word	0x000000a0
    5134:	00037106 	.word	0x00037106
    5138:	86060000 	.word	0x86060000
    513c:	01000014 	.word	0x01000014
    5140:	00006306 	.word	0x00006306
    5144:	75060200 	.word	0x75060200
    5148:	03000004 	.word	0x03000004
    514c:	44585407 	.word	0x44585407
    5150:	52070400 	.word	0x52070400
    5154:	05004458 	.word	0x05004458
    5158:	58554107 	.word	0x58554107
    515c:	08000600 	.word	0x08000600
    5160:	00002587 	.word	0x00002587
    5164:	00691504 	.word	0x00691504
    5168:	04090000 	.word	0x04090000
    516c:	031c0a07 	.word	0x031c0a07
    5170:	0121014f 	.word	0x0121014f
    5174:	430b0000 	.word	0x430b0000
    5178:	03004c52 	.word	0x03004c52
    517c:	00640150 	.word	0x00640150
    5180:	23020000 	.word	0x23020000
    5184:	52430b00 	.word	0x52430b00
    5188:	51030048 	.word	0x51030048
    518c:	00006401 	.word	0x00006401
    5190:	04230200 	.word	0x04230200
    5194:	5244490b 	.word	0x5244490b
    5198:	01520300 	.word	0x01520300
    519c:	00000064 	.word	0x00000064
    51a0:	0b082302 	.word	0x0b082302
    51a4:	0052444f 	.word	0x0052444f
    51a8:	64015303 	.word	0x64015303
    51ac:	02000000 	.word	0x02000000
    51b0:	790c0c23 	.word	0x790c0c23
    51b4:	03000024 	.word	0x03000024
    51b8:	00640154 	.word	0x00640154
    51bc:	23020000 	.word	0x23020000
    51c0:	52420b10 	.word	0x52420b10
    51c4:	55030052 	.word	0x55030052
    51c8:	00006401 	.word	0x00006401
    51cc:	14230200 	.word	0x14230200
    51d0:	0025230c 	.word	0x0025230c
    51d4:	01560300 	.word	0x01560300
    51d8:	00000064 	.word	0x00000064
    51dc:	00182302 	.word	0x00182302
    51e0:	0023e40d 	.word	0x0023e40d
    51e4:	01570300 	.word	0x01570300
    51e8:	000000ae 	.word	0x000000ae
    51ec:	0025010e 	.word	0x0025010e
    51f0:	70050800 	.word	0x70050800
    51f4:	00000156 	.word	0x00000156
    51f8:	0024dc0f 	.word	0x0024dc0f
    51fc:	56710500 	.word	0x56710500
    5200:	02000001 	.word	0x02000001
    5204:	70100023 	.word	0x70100023
    5208:	05006e69 	.word	0x05006e69
    520c:	00004172 	.word	0x00004172
    5210:	04230200 	.word	0x04230200
    5214:	21041100 	.word	0x21041100
    5218:	08000001 	.word	0x08000001
    521c:	0000250c 	.word	0x0000250c
    5220:	012d7305 	.word	0x012d7305
    5224:	01120000 	.word	0x01120000
    5228:	0000258d 	.word	0x0000258d
    522c:	5c011301 	.word	0x5c011301
    5230:	88080046 	.word	0x88080046
    5234:	68080046 	.word	0x68080046
    5238:	9f000025 	.word	0x9f000025
    523c:	13000001 	.word	0x13000001
    5240:	0064656c 	.word	0x0064656c
    5244:	00a01301 	.word	0x00a01301
    5248:	25930000 	.word	0x25930000
    524c:	6c140000 	.word	0x6c140000
    5250:	01000045 	.word	0x01000045
    5254:	00005313 	.word	0x00005313
    5258:	0025b100 	.word	0x0025b100
    525c:	5c150000 	.word	0x5c150000
    5260:	af000001 	.word	0xaf000001
    5264:	16000001 	.word	0x16000001
    5268:	000000ab 	.word	0x000000ab
    526c:	94170006 	.word	0x94170006
    5270:	01000025 	.word	0x01000025
    5274:	00019f0c 	.word	0x00019f0c
    5278:	03050100 	.word	0x03050100
    527c:	20000094 	.word	0x20000094
    5280:	00020d00 	.word	0x00020d00
    5284:	49000200 	.word	0x49000200
    5288:	04000015 	.word	0x04000015
    528c:	0001c601 	.word	0x0001c601
    5290:	25e30100 	.word	0x25e30100
    5294:	039d0000 	.word	0x039d0000
    5298:	46880000 	.word	0x46880000
    529c:	46d20800 	.word	0x46d20800
    52a0:	14a50800 	.word	0x14a50800
    52a4:	04020000 	.word	0x04020000
    52a8:	00215005 	.word	0x00215005
    52ac:	05020200 	.word	0x05020200
    52b0:	00000495 	.word	0x00000495
    52b4:	69060102 	.word	0x69060102
    52b8:	03000004 	.word	0x03000004
    52bc:	00323375 	.word	0x00323375
    52c0:	00452702 	.word	0x00452702
    52c4:	04020000 	.word	0x04020000
    52c8:	0021f107 	.word	0x0021f107
    52cc:	07020200 	.word	0x07020200
    52d0:	00000222 	.word	0x00000222
    52d4:	00387503 	.word	0x00387503
    52d8:	005d2902 	.word	0x005d2902
    52dc:	01020000 	.word	0x01020000
    52e0:	00046708 	.word	0x00046708
    52e4:	00450400 	.word	0x00450400
    52e8:	aa050000 	.word	0xaa050000
    52ec:	02000000 	.word	0x02000000
    52f0:	00fe0d04 	.word	0x00fe0d04
    52f4:	7f060000 	.word	0x7f060000
    52f8:	f2000003 	.word	0xf2000003
    52fc:	ec0601ee 	.word	0xec0601ee
    5300:	be000004 	.word	0xbe000004
    5304:	6f0601e1 	.word	0x6f0601e1
    5308:	be000005 	.word	0xbe000005
    530c:	430601e1 	.word	0x430601e1
    5310:	ea000002 	.word	0xea000002
    5314:	ac0601d4 	.word	0xac0601d4
    5318:	f1000005 	.word	0xf1000005
    531c:	780601c8 	.word	0x780601c8
    5320:	f1000006 	.word	0xf1000006
    5324:	8c0601c8 	.word	0x8c0601c8
    5328:	ce000003 	.word	0xce000003
    532c:	4f0601bd 	.word	0x4f0601bd
    5330:	fc000002 	.word	0xfc000002
    5334:	dc0601b2 	.word	0xdc0601b2
    5338:	f6000000 	.word	0xf6000000
    533c:	510601a8 	.word	0x510601a8
    5340:	f6000001 	.word	0xf6000001
    5344:	560601a8 	.word	0x560601a8
    5348:	b8000002 	.word	0xb8000002
    534c:	7a06019f 	.word	0x7a06019f
    5350:	bf000001 	.word	0xbf000001
    5354:	5d060196 	.word	0x5d060196
    5358:	bf000002 	.word	0xbf000002
    535c:	35060196 	.word	0x35060196
    5360:	86000002 	.word	0x86000002
    5364:	7706018e 	.word	0x7706018e
    5368:	89000002 	.word	0x89000002
    536c:	77060186 	.word	0x77060186
    5370:	89000003 	.word	0x89000003
    5374:	3c060186 	.word	0x3c060186
    5378:	c6000002 	.word	0xc6000002
    537c:	070000fe 	.word	0x070000fe
    5380:	000025a6 	.word	0x000025a6
    5384:	00692704 	.word	0x00692704
    5388:	04080000 	.word	0x04080000
    538c:	031c0907 	.word	0x031c0907
    5390:	017f014f 	.word	0x017f014f
    5394:	430a0000 	.word	0x430a0000
    5398:	03004c52 	.word	0x03004c52
    539c:	00640150 	.word	0x00640150
    53a0:	23020000 	.word	0x23020000
    53a4:	52430a00 	.word	0x52430a00
    53a8:	51030048 	.word	0x51030048
    53ac:	00006401 	.word	0x00006401
    53b0:	04230200 	.word	0x04230200
    53b4:	5244490a 	.word	0x5244490a
    53b8:	01520300 	.word	0x01520300
    53bc:	00000064 	.word	0x00000064
    53c0:	0a082302 	.word	0x0a082302
    53c4:	0052444f 	.word	0x0052444f
    53c8:	64015303 	.word	0x64015303
    53cc:	02000000 	.word	0x02000000
    53d0:	790b0c23 	.word	0x790b0c23
    53d4:	03000024 	.word	0x03000024
    53d8:	00640154 	.word	0x00640154
    53dc:	23020000 	.word	0x23020000
    53e0:	52420a10 	.word	0x52420a10
    53e4:	55030052 	.word	0x55030052
    53e8:	00006401 	.word	0x00006401
    53ec:	14230200 	.word	0x14230200
    53f0:	0025230b 	.word	0x0025230b
    53f4:	01560300 	.word	0x01560300
    53f8:	00000064 	.word	0x00000064
    53fc:	00182302 	.word	0x00182302
    5400:	25dc010c 	.word	0x25dc010c
    5404:	0e010000 	.word	0x0e010000
    5408:	00468801 	.word	0x00468801
    540c:	0046c408 	.word	0x0046c408
    5410:	0025cf08 	.word	0x0025cf08
    5414:	0001b700 	.word	0x0001b700
    5418:	25b40d00 	.word	0x25b40d00
    541c:	0e010000 	.word	0x0e010000
    5420:	0000003a 	.word	0x0000003a
    5424:	000025fa 	.word	0x000025fa
    5428:	0025a10d 	.word	0x0025a10d
    542c:	3a0e0100 	.word	0x3a0e0100
    5430:	0d000000 	.word	0x0d000000
    5434:	00000026 	.word	0x00000026
    5438:	25c3010c 	.word	0x25c3010c
    543c:	27010000 	.word	0x27010000
    5440:	0046c401 	.word	0x0046c401
    5444:	0046d208 	.word	0x0046d208
    5448:	00262b08 	.word	0x00262b08
    544c:	0001fe00 	.word	0x0001fe00
    5450:	25b40d00 	.word	0x25b40d00
    5454:	27010000 	.word	0x27010000
    5458:	0000003a 	.word	0x0000003a
    545c:	00002656 	.word	0x00002656
    5460:	00259c0d 	.word	0x00259c0d
    5464:	fe270100 	.word	0xfe270100
    5468:	69000000 	.word	0x69000000
    546c:	0d000026 	.word	0x0d000026
    5470:	000025bc 	.word	0x000025bc
    5474:	00532701 	.word	0x00532701
    5478:	267c0000 	.word	0x267c0000
    547c:	0e000000 	.word	0x0e000000
    5480:	000025cc 	.word	0x000025cc
    5484:	020b1c05 	.word	0x020b1c05
    5488:	01010000 	.word	0x01010000
    548c:	00003a04 	.word	0x00003a04
    5490:	02470000 	.word	0x02470000
    5494:	00020000 	.word	0x00020000
    5498:	0000160c 	.word	0x0000160c
    549c:	01c60104 	.word	0x01c60104
    54a0:	03010000 	.word	0x03010000
    54a4:	9d000026 	.word	0x9d000026
    54a8:	d4000003 	.word	0xd4000003
    54ac:	10080046 	.word	0x10080046
    54b0:	57080049 	.word	0x57080049
    54b4:	02000015 	.word	0x02000015
    54b8:	21500504 	.word	0x21500504
    54bc:	02020000 	.word	0x02020000
    54c0:	00049505 	.word	0x00049505
    54c4:	06010200 	.word	0x06010200
    54c8:	00000469 	.word	0x00000469
    54cc:	32337503 	.word	0x32337503
    54d0:	45270200 	.word	0x45270200
    54d4:	02000000 	.word	0x02000000
    54d8:	21f10704 	.word	0x21f10704
    54dc:	02020000 	.word	0x02020000
    54e0:	00022207 	.word	0x00022207
    54e4:	38750300 	.word	0x38750300
    54e8:	5d290200 	.word	0x5d290200
    54ec:	02000000 	.word	0x02000000
    54f0:	04670801 	.word	0x04670801
    54f4:	04040000 	.word	0x04040000
    54f8:	04f40507 	.word	0x04f40507
    54fc:	03010000 	.word	0x03010000
    5500:	00009e0d 	.word	0x00009e0d
    5504:	03710600 	.word	0x03710600
    5508:	06000000 	.word	0x06000000
    550c:	00001486 	.word	0x00001486
    5510:	00630601 	.word	0x00630601
    5514:	06020000 	.word	0x06020000
    5518:	00000475 	.word	0x00000475
    551c:	58540703 	.word	0x58540703
    5520:	07040044 	.word	0x07040044
    5524:	00445852 	.word	0x00445852
    5528:	55410705 	.word	0x55410705
    552c:	00060058 	.word	0x00060058
    5530:	26770108 	.word	0x26770108
    5534:	2d010000 	.word	0x2d010000
    5538:	0046d401 	.word	0x0046d401
    553c:	00471408 	.word	0x00471408
    5540:	c35d0108 	.word	0xc35d0108
    5544:	09000000 	.word	0x09000000
    5548:	000025f6 	.word	0x000025f6
    554c:	003a2d01 	.word	0x003a2d01
    5550:	50010000 	.word	0x50010000
    5554:	fc010a00 	.word	0xfc010a00
    5558:	01000025 	.word	0x01000025
    555c:	47140128 	.word	0x47140128
    5560:	472a0800 	.word	0x472a0800
    5564:	268f0800 	.word	0x268f0800
    5568:	00ec0000 	.word	0x00ec0000
    556c:	f60b0000 	.word	0xf60b0000
    5570:	01000025 	.word	0x01000025
    5574:	00003a28 	.word	0x00003a28
    5578:	0026ba00 	.word	0x0026ba00
    557c:	01080000 	.word	0x01080000
    5580:	000026bc 	.word	0x000026bc
    5584:	2c016601 	.word	0x2c016601
    5588:	54080047 	.word	0x54080047
    558c:	01080047 	.word	0x01080047
    5590:	0001115d 	.word	0x0001115d
    5594:	25f60900 	.word	0x25f60900
    5598:	66010000 	.word	0x66010000
    559c:	0000003a 	.word	0x0000003a
    55a0:	08005001 	.word	0x08005001
    55a4:	00268701 	.word	0x00268701
    55a8:	017c0100 	.word	0x017c0100
    55ac:	08004754 	.word	0x08004754
    55b0:	0800478c 	.word	0x0800478c
    55b4:	01365d01 	.word	0x01365d01
    55b8:	f6090000 	.word	0xf6090000
    55bc:	01000025 	.word	0x01000025
    55c0:	00003a7c 	.word	0x00003a7c
    55c4:	00500100 	.word	0x00500100
    55c8:	26d30108 	.word	0x26d30108
    55cc:	9b010000 	.word	0x9b010000
    55d0:	00478c01 	.word	0x00478c01
    55d4:	0047c408 	.word	0x0047c408
    55d8:	5b5d0108 	.word	0x5b5d0108
    55dc:	09000001 	.word	0x09000001
    55e0:	000025f6 	.word	0x000025f6
    55e4:	003a9b01 	.word	0x003a9b01
    55e8:	50010000 	.word	0x50010000
    55ec:	1e010c00 	.word	0x1e010c00
    55f0:	01000026 	.word	0x01000026
    55f4:	003a01ba 	.word	0x003a01ba
    55f8:	47c40000 	.word	0x47c40000
    55fc:	47dc0800 	.word	0x47dc0800
    5600:	5d010800 	.word	0x5d010800
    5604:	2699010d 	.word	0x2699010d
    5608:	c1010000 	.word	0xc1010000
    560c:	0047dc01 	.word	0x0047dc01
    5610:	0048d808 	.word	0x0048d808
    5614:	0026cd08 	.word	0x0026cd08
    5618:	68010a00 	.word	0x68010a00
    561c:	01000026 	.word	0x01000026
    5620:	48d8014e 	.word	0x48d8014e
    5624:	49100800 	.word	0x49100800
    5628:	26ec0800 	.word	0x26ec0800
    562c:	01b00000 	.word	0x01b00000
    5630:	3b0b0000 	.word	0x3b0b0000
    5634:	01000026 	.word	0x01000026
    5638:	00003a4e 	.word	0x00003a4e
    563c:	00271700 	.word	0x00271700
    5640:	450e0000 	.word	0x450e0000
    5644:	01000026 	.word	0x01000026
    5648:	0001c217 	.word	0x0001c217
    564c:	03050100 	.word	0x03050100
    5650:	200005ec 	.word	0x200005ec
    5654:	00003a0f 	.word	0x00003a0f
    5658:	26280e00 	.word	0x26280e00
    565c:	18010000 	.word	0x18010000
    5660:	000001c2 	.word	0x000001c2
    5664:	f0030501 	.word	0xf0030501
    5668:	0e200005 	.word	0x0e200005
    566c:	000026a8 	.word	0x000026a8
    5670:	01c21901 	.word	0x01c21901
    5674:	05010000 	.word	0x05010000
    5678:	0005f403 	.word	0x0005f403
    567c:	26540e20 	.word	0x26540e20
    5680:	1a010000 	.word	0x1a010000
    5684:	000001c2 	.word	0x000001c2
    5688:	f8030501 	.word	0xf8030501
    568c:	0e200005 	.word	0x0e200005
    5690:	000025cc 	.word	0x000025cc
    5694:	01c21b01 	.word	0x01c21b01
    5698:	05010000 	.word	0x05010000
    569c:	0005fc03 	.word	0x0005fc03
    56a0:	26e50e20 	.word	0x26e50e20
    56a4:	1c010000 	.word	0x1c010000
    56a8:	00000221 	.word	0x00000221
    56ac:	00030501 	.word	0x00030501
    56b0:	0f200006 	.word	0x0f200006
    56b4:	00000053 	.word	0x00000053
    56b8:	0026800e 	.word	0x0026800e
    56bc:	c21d0100 	.word	0xc21d0100
    56c0:	01000001 	.word	0x01000001
    56c4:	06040305 	.word	0x06040305
    56c8:	7e0e2000 	.word	0x7e0e2000
    56cc:	01000026 	.word	0x01000026
    56d0:	0001c21e 	.word	0x0001c21e
    56d4:	03050100 	.word	0x03050100
    56d8:	20000608 	.word	0x20000608
    56dc:	00058b00 	.word	0x00058b00
    56e0:	f2000200 	.word	0xf2000200
    56e4:	04000016 	.word	0x04000016
    56e8:	0001c601 	.word	0x0001c601
    56ec:	27430100 	.word	0x27430100
    56f0:	039d0000 	.word	0x039d0000
    56f4:	49100000 	.word	0x49100000
    56f8:	4d640800 	.word	0x4d640800
    56fc:	16490800 	.word	0x16490800
    5700:	04020000 	.word	0x04020000
    5704:	00215005 	.word	0x00215005
    5708:	05020200 	.word	0x05020200
    570c:	00000495 	.word	0x00000495
    5710:	69060102 	.word	0x69060102
    5714:	03000004 	.word	0x03000004
    5718:	00323375 	.word	0x00323375
    571c:	00452702 	.word	0x00452702
    5720:	04020000 	.word	0x04020000
    5724:	0021f107 	.word	0x0021f107
    5728:	31750300 	.word	0x31750300
    572c:	28020036 	.word	0x28020036
    5730:	00000057 	.word	0x00000057
    5734:	22070202 	.word	0x22070202
    5738:	03000002 	.word	0x03000002
    573c:	02003875 	.word	0x02003875
    5740:	00006829 	.word	0x00006829
    5744:	08010200 	.word	0x08010200
    5748:	00000467 	.word	0x00000467
    574c:	00004504 	.word	0x00004504
    5750:	02010500 	.word	0x02010500
    5754:	0000893a 	.word	0x0000893a
    5758:	0ebd0600 	.word	0x0ebd0600
    575c:	07000000 	.word	0x07000000
    5760:	00544553 	.word	0x00544553
    5764:	01050001 	.word	0x01050001
    5768:	009e3c02 	.word	0x009e3c02
    576c:	6c060000 	.word	0x6c060000
    5770:	00000024 	.word	0x00000024
    5774:	00043906 	.word	0x00043906
    5778:	08000100 	.word	0x08000100
    577c:	00002951 	.word	0x00002951
    5780:	00893c02 	.word	0x00893c02
    5784:	01050000 	.word	0x01050000
    5788:	00be3f02 	.word	0x00be3f02
    578c:	d1060000 	.word	0xd1060000
    5790:	00000004 	.word	0x00000004
    5794:	00048d06 	.word	0x00048d06
    5798:	08000100 	.word	0x08000100
    579c:	000027f4 	.word	0x000027f4
    57a0:	00a93f02 	.word	0x00a93f02
    57a4:	50090000 	.word	0x50090000
    57a8:	01e82503 	.word	0x01e82503
    57ac:	530a0000 	.word	0x530a0000
    57b0:	26030052 	.word	0x26030052
    57b4:	0000006f 	.word	0x0000006f
    57b8:	0a002302 	.word	0x0a002302
    57bc:	00315243 	.word	0x00315243
    57c0:	006f2703 	.word	0x006f2703
    57c4:	23020000 	.word	0x23020000
    57c8:	52430a04 	.word	0x52430a04
    57cc:	28030032 	.word	0x28030032
    57d0:	0000006f 	.word	0x0000006f
    57d4:	0b082302 	.word	0x0b082302
    57d8:	00002517 	.word	0x00002517
    57dc:	006f2903 	.word	0x006f2903
    57e0:	23020000 	.word	0x23020000
    57e4:	251d0b0c 	.word	0x251d0b0c
    57e8:	2a030000 	.word	0x2a030000
    57ec:	0000006f 	.word	0x0000006f
    57f0:	0b102302 	.word	0x0b102302
    57f4:	00002486 	.word	0x00002486
    57f8:	006f2b03 	.word	0x006f2b03
    57fc:	23020000 	.word	0x23020000
    5800:	248c0b14 	.word	0x248c0b14
    5804:	2c030000 	.word	0x2c030000
    5808:	0000006f 	.word	0x0000006f
    580c:	0b182302 	.word	0x0b182302
    5810:	000024ad 	.word	0x000024ad
    5814:	006f2d03 	.word	0x006f2d03
    5818:	23020000 	.word	0x23020000
    581c:	24bb0b1c 	.word	0x24bb0b1c
    5820:	2e030000 	.word	0x2e030000
    5824:	0000006f 	.word	0x0000006f
    5828:	0a202302 	.word	0x0a202302
    582c:	00525448 	.word	0x00525448
    5830:	006f2f03 	.word	0x006f2f03
    5834:	23020000 	.word	0x23020000
    5838:	544c0a24 	.word	0x544c0a24
    583c:	30030052 	.word	0x30030052
    5840:	0000006f 	.word	0x0000006f
    5844:	0b282302 	.word	0x0b282302
    5848:	000024ea 	.word	0x000024ea
    584c:	006f3103 	.word	0x006f3103
    5850:	23020000 	.word	0x23020000
    5854:	24ef0b2c 	.word	0x24ef0b2c
    5858:	32030000 	.word	0x32030000
    585c:	0000006f 	.word	0x0000006f
    5860:	0b302302 	.word	0x0b302302
    5864:	000024f4 	.word	0x000024f4
    5868:	006f3303 	.word	0x006f3303
    586c:	23020000 	.word	0x23020000
    5870:	24360b34 	.word	0x24360b34
    5874:	34030000 	.word	0x34030000
    5878:	0000006f 	.word	0x0000006f
    587c:	0b382302 	.word	0x0b382302
    5880:	00002474 	.word	0x00002474
    5884:	006f3503 	.word	0x006f3503
    5888:	23020000 	.word	0x23020000
    588c:	23f80b3c 	.word	0x23f80b3c
    5890:	36030000 	.word	0x36030000
    5894:	0000006f 	.word	0x0000006f
    5898:	0b402302 	.word	0x0b402302
    589c:	000023fd 	.word	0x000023fd
    58a0:	006f3703 	.word	0x006f3703
    58a4:	23020000 	.word	0x23020000
    58a8:	24020b44 	.word	0x24020b44
    58ac:	38030000 	.word	0x38030000
    58b0:	0000006f 	.word	0x0000006f
    58b4:	0a482302 	.word	0x0a482302
    58b8:	03005244 	.word	0x03005244
    58bc:	00006f39 	.word	0x00006f39
    58c0:	4c230200 	.word	0x4c230200
    58c4:	07040c00 	.word	0x07040c00
    58c8:	4f031c0d 	.word	0x4f031c0d
    58cc:	00025e01 	.word	0x00025e01
    58d0:	52430e00 	.word	0x52430e00
    58d4:	5003004c 	.word	0x5003004c
    58d8:	00006f01 	.word	0x00006f01
    58dc:	00230200 	.word	0x00230200
    58e0:	4852430e 	.word	0x4852430e
    58e4:	01510300 	.word	0x01510300
    58e8:	0000006f 	.word	0x0000006f
    58ec:	0e042302 	.word	0x0e042302
    58f0:	00524449 	.word	0x00524449
    58f4:	6f015203 	.word	0x6f015203
    58f8:	02000000 	.word	0x02000000
    58fc:	4f0e0823 	.word	0x4f0e0823
    5900:	03005244 	.word	0x03005244
    5904:	006f0153 	.word	0x006f0153
    5908:	23020000 	.word	0x23020000
    590c:	24790f0c 	.word	0x24790f0c
    5910:	54030000 	.word	0x54030000
    5914:	00006f01 	.word	0x00006f01
    5918:	10230200 	.word	0x10230200
    591c:	5252420e 	.word	0x5252420e
    5920:	01550300 	.word	0x01550300
    5924:	0000006f 	.word	0x0000006f
    5928:	0f142302 	.word	0x0f142302
    592c:	00002523 	.word	0x00002523
    5930:	6f015603 	.word	0x6f015603
    5934:	02000000 	.word	0x02000000
    5938:	05001823 	.word	0x05001823
    593c:	79230401 	.word	0x79230401
    5940:	06000002 	.word	0x06000002
    5944:	00002800 	.word	0x00002800
    5948:	281a0601 	.word	0x281a0601
    594c:	06020000 	.word	0x06020000
    5950:	0000287b 	.word	0x0000287b
    5954:	3f080003 	.word	0x3f080003
    5958:	04000029 	.word	0x04000029
    595c:	00025e27 	.word	0x00025e27
    5960:	04010500 	.word	0x04010500
    5964:	0002be2e 	.word	0x0002be2e
    5968:	28fb0600 	.word	0x28fb0600
    596c:	06000000 	.word	0x06000000
    5970:	000029ac 	.word	0x000029ac
    5974:	286d0604 	.word	0x286d0604
    5978:	06280000 	.word	0x06280000
    597c:	000028d8 	.word	0x000028d8
    5980:	9d0600c8 	.word	0x9d0600c8
    5984:	14000027 	.word	0x14000027
    5988:	00297206 	.word	0x00297206
    598c:	c2061000 	.word	0xc2061000
    5990:	1c000029 	.word	0x1c000029
    5994:	0027ae06 	.word	0x0027ae06
    5998:	08001800 	.word	0x08001800
    599c:	00002732 	.word	0x00002732
    59a0:	02843604 	.word	0x02843604
    59a4:	04090000 	.word	0x04090000
    59a8:	02fc3f04 	.word	0x02fc3f04
    59ac:	f40b0000 	.word	0xf40b0000
    59b0:	04000026 	.word	0x04000026
    59b4:	00004c40 	.word	0x00004c40
    59b8:	00230200 	.word	0x00230200
    59bc:	00276f0b 	.word	0x00276f0b
    59c0:	79410400 	.word	0x79410400
    59c4:	02000002 	.word	0x02000002
    59c8:	d20b0223 	.word	0xd20b0223
    59cc:	04000029 	.word	0x04000029
    59d0:	0002be42 	.word	0x0002be42
    59d4:	03230200 	.word	0x03230200
    59d8:	283d0800 	.word	0x283d0800
    59dc:	43040000 	.word	0x43040000
    59e0:	000002c9 	.word	0x000002c9
    59e4:	1b050409 	.word	0x1b050409
    59e8:	00000348 	.word	0x00000348
    59ec:	0028b60b 	.word	0x0028b60b
    59f0:	5e1c0500 	.word	0x5e1c0500
    59f4:	02000000 	.word	0x02000000
    59f8:	1d0b0023 	.word	0x1d0b0023
    59fc:	05000029 	.word	0x05000029
    5a00:	00005e1d 	.word	0x00005e1d
    5a04:	01230200 	.word	0x01230200
    5a08:	0027820b 	.word	0x0027820b
    5a0c:	5e1e0500 	.word	0x5e1e0500
    5a10:	02000000 	.word	0x02000000
    5a14:	0f0b0223 	.word	0x0f0b0223
    5a18:	05000027 	.word	0x05000027
    5a1c:	00009e1f 	.word	0x00009e1f
    5a20:	03230200 	.word	0x03230200
    5a24:	29610800 	.word	0x29610800
    5a28:	20050000 	.word	0x20050000
    5a2c:	00000307 	.word	0x00000307
    5a30:	1b061409 	.word	0x1b061409
    5a34:	000003b0 	.word	0x000003b0
    5a38:	0028110b 	.word	0x0028110b
    5a3c:	3a1c0600 	.word	0x3a1c0600
    5a40:	02000000 	.word	0x02000000
    5a44:	5e0b0023 	.word	0x5e0b0023
    5a48:	06000027 	.word	0x06000027
    5a4c:	00009e1d 	.word	0x00009e1d
    5a50:	04230200 	.word	0x04230200
    5a54:	00289f0b 	.word	0x00289f0b
    5a58:	9e1e0600 	.word	0x9e1e0600
    5a5c:	02000000 	.word	0x02000000
    5a60:	e60b0523 	.word	0xe60b0523
    5a64:	06000028 	.word	0x06000028
    5a68:	00003a1f 	.word	0x00003a1f
    5a6c:	08230200 	.word	0x08230200
    5a70:	00285f0b 	.word	0x00285f0b
    5a74:	3a200600 	.word	0x3a200600
    5a78:	02000000 	.word	0x02000000
    5a7c:	4e0b0c23 	.word	0x4e0b0c23
    5a80:	06000028 	.word	0x06000028
    5a84:	00005e21 	.word	0x00005e21
    5a88:	10230200 	.word	0x10230200
    5a8c:	27220800 	.word	0x27220800
    5a90:	22060000 	.word	0x22060000
    5a94:	00000353 	.word	0x00000353
    5a98:	29090110 	.word	0x29090110
    5a9c:	4f010000 	.word	0x4f010000
    5aa0:	00491001 	.word	0x00491001
    5aa4:	00495008 	.word	0x00495008
    5aa8:	00272a08 	.word	0x00272a08
    5aac:	0003e100 	.word	0x0003e100
    5ab0:	1db61100 	.word	0x1db61100
    5ab4:	50010000 	.word	0x50010000
    5ab8:	00004c01 	.word	0x00004c01
    5abc:	01120000 	.word	0x01120000
    5ac0:	00002996 	.word	0x00002996
    5ac4:	01013601 	.word	0x01013601
    5ac8:	08004950 	.word	0x08004950
    5acc:	08004974 	.word	0x08004974
    5ad0:	00002755 	.word	0x00002755
    5ad4:	28c60113 	.word	0x28c60113
    5ad8:	f1010000 	.word	0xf1010000
    5adc:	00497401 	.word	0x00497401
    5ae0:	004a5c08 	.word	0x004a5c08
    5ae4:	00278008 	.word	0x00278008
    5ae8:	00041f00 	.word	0x00041f00
    5aec:	26fd1400 	.word	0x26fd1400
    5af0:	f2010000 	.word	0xf2010000
    5af4:	000003b0 	.word	0x000003b0
    5af8:	005c9102 	.word	0x005c9102
    5afc:	282a0113 	.word	0x282a0113
    5b00:	95010000 	.word	0x95010000
    5b04:	004a5c01 	.word	0x004a5c01
    5b08:	004c3408 	.word	0x004c3408
    5b0c:	0027ab08 	.word	0x0027ab08
    5b10:	00044700 	.word	0x00044700
    5b14:	29831400 	.word	0x29831400
    5b18:	96010000 	.word	0x96010000
    5b1c:	000002fc 	.word	0x000002fc
    5b20:	00649102 	.word	0x00649102
    5b24:	27cf0113 	.word	0x27cf0113
    5b28:	6f010000 	.word	0x6f010000
    5b2c:	004c3401 	.word	0x004c3401
    5b30:	004ca208 	.word	0x004ca208
    5b34:	0027d608 	.word	0x0027d608
    5b38:	00046f00 	.word	0x00046f00
    5b3c:	288c1400 	.word	0x288c1400
    5b40:	70010000 	.word	0x70010000
    5b44:	00000348 	.word	0x00000348
    5b48:	006c9102 	.word	0x006c9102
    5b4c:	27e20113 	.word	0x27e20113
    5b50:	2a010000 	.word	0x2a010000
    5b54:	004ca401 	.word	0x004ca401
    5b58:	004d3808 	.word	0x004d3808
    5b5c:	00280108 	.word	0x00280108
    5b60:	00049400 	.word	0x00049400
    5b64:	27be1500 	.word	0x27be1500
    5b68:	2b010000 	.word	0x2b010000
    5b6c:	000000be 	.word	0x000000be
    5b70:	7a011600 	.word	0x7a011600
    5b74:	01000027 	.word	0x01000027
    5b78:	004d3811 	.word	0x004d3811
    5b7c:	004d6408 	.word	0x004d6408
    5b80:	00282c08 	.word	0x00282c08
    5b84:	05341400 	.word	0x05341400
    5b88:	2a070000 	.word	0x2a070000
    5b8c:	000004b9 	.word	0x000004b9
    5b90:	060c0305 	.word	0x060c0305
    5b94:	5e042000 	.word	0x5e042000
    5b98:	15000000 	.word	0x15000000
    5b9c:	00000265 	.word	0x00000265
    5ba0:	04c92807 	.word	0x04c92807
    5ba4:	4c040000 	.word	0x4c040000
    5ba8:	15000000 	.word	0x15000000
    5bac:	000003f6 	.word	0x000003f6
    5bb0:	04c92807 	.word	0x04c92807
    5bb4:	5e170000 	.word	0x5e170000
    5bb8:	ea000000 	.word	0xea000000
    5bbc:	18000004 	.word	0x18000004
    5bc0:	000001e8 	.word	0x000001e8
    5bc4:	150003ff 	.word	0x150003ff
    5bc8:	0000047a 	.word	0x0000047a
    5bcc:	04f52907 	.word	0x04f52907
    5bd0:	d9040000 	.word	0xd9040000
    5bd4:	19000004 	.word	0x19000004
    5bd8:	00000615 	.word	0x00000615
    5bdc:	04b94407 	.word	0x04b94407
    5be0:	19000000 	.word	0x19000000
    5be4:	00000393 	.word	0x00000393
    5be8:	04b94407 	.word	0x04b94407
    5bec:	17000000 	.word	0x17000000
    5bf0:	0000005e 	.word	0x0000005e
    5bf4:	00000522 	.word	0x00000522
    5bf8:	0001e81a 	.word	0x0001e81a
    5bfc:	15004000 	.word	0x15004000
    5c00:	000000ec 	.word	0x000000ec
    5c04:	052d4507 	.word	0x052d4507
    5c08:	12040000 	.word	0x12040000
    5c0c:	19000005 	.word	0x19000005
    5c10:	000005e4 	.word	0x000005e4
    5c14:	04c95807 	.word	0x04c95807
    5c18:	19000000 	.word	0x19000000
    5c1c:	000000f9 	.word	0x000000f9
    5c20:	04c95807 	.word	0x04c95807
    5c24:	15000000 	.word	0x15000000
    5c28:	000002b2 	.word	0x000002b2
    5c2c:	05555907 	.word	0x05555907
    5c30:	d9040000 	.word	0xd9040000
    5c34:	1b000004 	.word	0x1b000004
    5c38:	00000699 	.word	0x00000699
    5c3c:	003a1407 	.word	0x003a1407
    5c40:	01010000 	.word	0x01010000
    5c44:	0000051b 	.word	0x0000051b
    5c48:	3a170700 	.word	0x3a170700
    5c4c:	01000000 	.word	0x01000000
    5c50:	00561b01 	.word	0x00561b01
    5c54:	1a070000 	.word	0x1a070000
    5c58:	0000003a 	.word	0x0000003a
    5c5c:	e51b0101 	.word	0xe51b0101
    5c60:	08000026 	.word	0x08000026
    5c64:	0004b920 	.word	0x0004b920
    5c68:	00010100 	.word	0x00010100
    5c6c:	000007e9 	.word	0x000007e9
    5c70:	18680002 	.word	0x18680002
    5c74:	01040000 	.word	0x01040000
    5c78:	000001c6 	.word	0x000001c6
    5c7c:	002b9e01 	.word	0x002b9e01
    5c80:	00039d00 	.word	0x00039d00
    5c84:	004d6400 	.word	0x004d6400
    5c88:	00534808 	.word	0x00534808
    5c8c:	00183a08 	.word	0x00183a08
    5c90:	05040200 	.word	0x05040200
    5c94:	00002150 	.word	0x00002150
    5c98:	95050202 	.word	0x95050202
    5c9c:	02000004 	.word	0x02000004
    5ca0:	04690601 	.word	0x04690601
    5ca4:	75030000 	.word	0x75030000
    5ca8:	02003233 	.word	0x02003233
    5cac:	00004527 	.word	0x00004527
    5cb0:	07040200 	.word	0x07040200
    5cb4:	000021f1 	.word	0x000021f1
    5cb8:	36317503 	.word	0x36317503
    5cbc:	57280200 	.word	0x57280200
    5cc0:	02000000 	.word	0x02000000
    5cc4:	02220702 	.word	0x02220702
    5cc8:	75030000 	.word	0x75030000
    5ccc:	29020038 	.word	0x29020038
    5cd0:	00000068 	.word	0x00000068
    5cd4:	67080102 	.word	0x67080102
    5cd8:	04000004 	.word	0x04000004
    5cdc:	00000045 	.word	0x00000045
    5ce0:	00005704 	.word	0x00005704
    5ce4:	02010500 	.word	0x02010500
    5ce8:	00008e3a 	.word	0x00008e3a
    5cec:	0ebd0600 	.word	0x0ebd0600
    5cf0:	07000000 	.word	0x07000000
    5cf4:	00544553 	.word	0x00544553
    5cf8:	01050001 	.word	0x01050001
    5cfc:	00a33c02 	.word	0x00a33c02
    5d00:	6c060000 	.word	0x6c060000
    5d04:	00000024 	.word	0x00000024
    5d08:	00043906 	.word	0x00043906
    5d0c:	08000100 	.word	0x08000100
    5d10:	1c090704 	.word	0x1c090704
    5d14:	19014f03 	.word	0x19014f03
    5d18:	0a000001 	.word	0x0a000001
    5d1c:	004c5243 	.word	0x004c5243
    5d20:	6f015003 	.word	0x6f015003
    5d24:	02000000 	.word	0x02000000
    5d28:	430a0023 	.word	0x430a0023
    5d2c:	03004852 	.word	0x03004852
    5d30:	006f0151 	.word	0x006f0151
    5d34:	23020000 	.word	0x23020000
    5d38:	44490a04 	.word	0x44490a04
    5d3c:	52030052 	.word	0x52030052
    5d40:	00006f01 	.word	0x00006f01
    5d44:	08230200 	.word	0x08230200
    5d48:	52444f0a 	.word	0x52444f0a
    5d4c:	01530300 	.word	0x01530300
    5d50:	0000006f 	.word	0x0000006f
    5d54:	0b0c2302 	.word	0x0b0c2302
    5d58:	00002479 	.word	0x00002479
    5d5c:	6f015403 	.word	0x6f015403
    5d60:	02000000 	.word	0x02000000
    5d64:	420a1023 	.word	0x420a1023
    5d68:	03005252 	.word	0x03005252
    5d6c:	006f0155 	.word	0x006f0155
    5d70:	23020000 	.word	0x23020000
    5d74:	25230b14 	.word	0x25230b14
    5d78:	56030000 	.word	0x56030000
    5d7c:	00006f01 	.word	0x00006f01
    5d80:	18230200 	.word	0x18230200
    5d84:	031c0900 	.word	0x031c0900
    5d88:	01f30239 	.word	0x01f30239
    5d8c:	530a0000 	.word	0x530a0000
    5d90:	3a030052 	.word	0x3a030052
    5d94:	00007402 	.word	0x00007402
    5d98:	00230200 	.word	0x00230200
    5d9c:	002bb30b 	.word	0x002bb30b
    5da0:	023b0300 	.word	0x023b0300
    5da4:	0000004c 	.word	0x0000004c
    5da8:	0a022302 	.word	0x0a022302
    5dac:	03005244 	.word	0x03005244
    5db0:	0074023c 	.word	0x0074023c
    5db4:	23020000 	.word	0x23020000
    5db8:	2a730b04 	.word	0x2a730b04
    5dbc:	3d030000 	.word	0x3d030000
    5dc0:	00004c02 	.word	0x00004c02
    5dc4:	06230200 	.word	0x06230200
    5dc8:	5252420a 	.word	0x5252420a
    5dcc:	023e0300 	.word	0x023e0300
    5dd0:	00000074 	.word	0x00000074
    5dd4:	0b082302 	.word	0x0b082302
    5dd8:	00002bbd 	.word	0x00002bbd
    5ddc:	4c023f03 	.word	0x4c023f03
    5de0:	02000000 	.word	0x02000000
    5de4:	430a0a23 	.word	0x430a0a23
    5de8:	03003152 	.word	0x03003152
    5dec:	00740240 	.word	0x00740240
    5df0:	23020000 	.word	0x23020000
    5df4:	2bc70b0c 	.word	0x2bc70b0c
    5df8:	41030000 	.word	0x41030000
    5dfc:	00004c02 	.word	0x00004c02
    5e00:	0e230200 	.word	0x0e230200
    5e04:	3252430a 	.word	0x3252430a
    5e08:	02420300 	.word	0x02420300
    5e0c:	00000074 	.word	0x00000074
    5e10:	0b102302 	.word	0x0b102302
    5e14:	00002bd1 	.word	0x00002bd1
    5e18:	4c024303 	.word	0x4c024303
    5e1c:	02000000 	.word	0x02000000
    5e20:	430a1223 	.word	0x430a1223
    5e24:	03003352 	.word	0x03003352
    5e28:	00740244 	.word	0x00740244
    5e2c:	23020000 	.word	0x23020000
    5e30:	2bdb0b14 	.word	0x2bdb0b14
    5e34:	45030000 	.word	0x45030000
    5e38:	00004c02 	.word	0x00004c02
    5e3c:	16230200 	.word	0x16230200
    5e40:	002b370b 	.word	0x002b370b
    5e44:	02460300 	.word	0x02460300
    5e48:	00000074 	.word	0x00000074
    5e4c:	0b182302 	.word	0x0b182302
    5e50:	00002be5 	.word	0x00002be5
    5e54:	4c024703 	.word	0x4c024703
    5e58:	02000000 	.word	0x02000000
    5e5c:	0c001a23 	.word	0x0c001a23
    5e60:	501b0410 	.word	0x501b0410
    5e64:	0d000002 	.word	0x0d000002
    5e68:	00002abb 	.word	0x00002abb
    5e6c:	003a1c04 	.word	0x003a1c04
    5e70:	23020000 	.word	0x23020000
    5e74:	2a9a0d00 	.word	0x2a9a0d00
    5e78:	1d040000 	.word	0x1d040000
    5e7c:	0000004c 	.word	0x0000004c
    5e80:	0d042302 	.word	0x0d042302
    5e84:	00002a57 	.word	0x00002a57
    5e88:	004c1e04 	.word	0x004c1e04
    5e8c:	23020000 	.word	0x23020000
    5e90:	2b2a0d06 	.word	0x2b2a0d06
    5e94:	1f040000 	.word	0x1f040000
    5e98:	0000004c 	.word	0x0000004c
    5e9c:	0d082302 	.word	0x0d082302
    5ea0:	00002b93 	.word	0x00002b93
    5ea4:	004c2004 	.word	0x004c2004
    5ea8:	23020000 	.word	0x23020000
    5eac:	2b790d0a 	.word	0x2b790d0a
    5eb0:	21040000 	.word	0x21040000
    5eb4:	0000004c 	.word	0x0000004c
    5eb8:	000c2302 	.word	0x000c2302
    5ebc:	002c2e0e 	.word	0x002c2e0e
    5ec0:	f3220400 	.word	0xf3220400
    5ec4:	0f000001 	.word	0x0f000001
    5ec8:	000004f4 	.word	0x000004f4
    5ecc:	920d0701 	.word	0x920d0701
    5ed0:	06000002 	.word	0x06000002
    5ed4:	00000371 	.word	0x00000371
    5ed8:	14860600 	.word	0x14860600
    5edc:	06010000 	.word	0x06010000
    5ee0:	00000063 	.word	0x00000063
    5ee4:	04750602 	.word	0x04750602
    5ee8:	07030000 	.word	0x07030000
    5eec:	00445854 	.word	0x00445854
    5ef0:	58520704 	.word	0x58520704
    5ef4:	07050044 	.word	0x07050044
    5ef8:	00585541 	.word	0x00585541
    5efc:	01100006 	.word	0x01100006
    5f00:	00002bef 	.word	0x00002bef
    5f04:	01019d01 	.word	0x01019d01
    5f08:	2aab0111 	.word	0x2aab0111
    5f0c:	46010000 	.word	0x46010000
    5f10:	00005e01 	.word	0x00005e01
    5f14:	004d6400 	.word	0x004d6400
    5f18:	004d7808 	.word	0x004d7808
    5f1c:	125d0108 	.word	0x125d0108
    5f20:	002ad901 	.word	0x002ad901
    5f24:	015a0100 	.word	0x015a0100
    5f28:	0000005e 	.word	0x0000005e
    5f2c:	08004d78 	.word	0x08004d78
    5f30:	08004db4 	.word	0x08004db4
    5f34:	02de5d01 	.word	0x02de5d01
    5f38:	98130000 	.word	0x98130000
    5f3c:	01000048 	.word	0x01000048
    5f40:	00005e5e 	.word	0x00005e5e
    5f44:	00285700 	.word	0x00285700
    5f48:	01120000 	.word	0x01120000
    5f4c:	00002a7d 	.word	0x00002a7d
    5f50:	5e016801 	.word	0x5e016801
    5f54:	b4000000 	.word	0xb4000000
    5f58:	dc08004d 	.word	0xdc08004d
    5f5c:	0108004d 	.word	0x0108004d
    5f60:	0003095d 	.word	0x0003095d
    5f64:	48981300 	.word	0x48981300
    5f68:	6c010000 	.word	0x6c010000
    5f6c:	0000005e 	.word	0x0000005e
    5f70:	00002875 	.word	0x00002875
    5f74:	02921400 	.word	0x02921400
    5f78:	4ddc0000 	.word	0x4ddc0000
    5f7c:	4df40800 	.word	0x4df40800
    5f80:	5d010800 	.word	0x5d010800
    5f84:	2aca0112 	.word	0x2aca0112
    5f88:	a4010000 	.word	0xa4010000
    5f8c:	00005e01 	.word	0x00005e01
    5f90:	004df400 	.word	0x004df400
    5f94:	004e3c08 	.word	0x004e3c08
    5f98:	435d0108 	.word	0x435d0108
    5f9c:	15000003 	.word	0x15000003
    5fa0:	00000292 	.word	0x00000292
    5fa4:	08004e00 	.word	0x08004e00
    5fa8:	08004e0c 	.word	0x08004e0c
    5fac:	1600a701 	.word	0x1600a701
    5fb0:	002c2301 	.word	0x002c2301
    5fb4:	01830100 	.word	0x01830100
    5fb8:	00005e01 	.word	0x00005e01
    5fbc:	004e3c00 	.word	0x004e3c00
    5fc0:	004e9008 	.word	0x004e9008
    5fc4:	00289308 	.word	0x00289308
    5fc8:	00039000 	.word	0x00039000
    5fcc:	2a2f1700 	.word	0x2a2f1700
    5fd0:	82010000 	.word	0x82010000
    5fd4:	00039001 	.word	0x00039001
    5fd8:	0028be00 	.word	0x0028be00
    5fdc:	2b621700 	.word	0x2b621700
    5fe0:	82010000 	.word	0x82010000
    5fe4:	00005e01 	.word	0x00005e01
    5fe8:	0028dc00 	.word	0x0028dc00
    5fec:	00691800 	.word	0x00691800
    5ff0:	5e018401 	.word	0x5e018401
    5ff4:	fa000000 	.word	0xfa000000
    5ff8:	00000028 	.word	0x00000028
    5ffc:	005e0419 	.word	0x005e0419
    6000:	011a0000 	.word	0x011a0000
    6004:	00002b3c 	.word	0x00002b3c
    6008:	0101e701 	.word	0x0101e701
    600c:	08004e90 	.word	0x08004e90
    6010:	08004ebc 	.word	0x08004ebc
    6014:	03b95d01 	.word	0x03b95d01
    6018:	691b0000 	.word	0x691b0000
    601c:	01e90100 	.word	0x01e90100
    6020:	0000004c 	.word	0x0000004c
    6024:	57011600 	.word	0x57011600
    6028:	0100002b 	.word	0x0100002b
    602c:	5e010207 	.word	0x5e010207
    6030:	bc000000 	.word	0xbc000000
    6034:	1808004e 	.word	0x1808004e
    6038:	0d08004f 	.word	0x0d08004f
    603c:	06000029 	.word	0x06000029
    6040:	17000004 	.word	0x17000004
    6044:	00002a2f 	.word	0x00002a2f
    6048:	90020701 	.word	0x90020701
    604c:	38000003 	.word	0x38000003
    6050:	17000029 	.word	0x17000029
    6054:	00002b62 	.word	0x00002b62
    6058:	5e020701 	.word	0x5e020701
    605c:	56000000 	.word	0x56000000
    6060:	18000029 	.word	0x18000029
    6064:	08010069 	.word	0x08010069
    6068:	00005e02 	.word	0x00005e02
    606c:	00297400 	.word	0x00297400
    6070:	011c0000 	.word	0x011c0000
    6074:	00002bff 	.word	0x00002bff
    6078:	01021b01 	.word	0x01021b01
    607c:	0000005e 	.word	0x0000005e
    6080:	08004f18 	.word	0x08004f18
    6084:	08004f2c 	.word	0x08004f2c
    6088:	011d5d01 	.word	0x011d5d01
    608c:	000029f0 	.word	0x000029f0
    6090:	01022301 	.word	0x01022301
    6094:	08004f2c 	.word	0x08004f2c
    6098:	08004fa4 	.word	0x08004fa4
    609c:	00002987 	.word	0x00002987
    60a0:	00000447 	.word	0x00000447
    60a4:	0019631e 	.word	0x0019631e
    60a8:	02240100 	.word	0x02240100
    60ac:	0000005e 	.word	0x0000005e
    60b0:	1d005001 	.word	0x1d005001
    60b4:	002c0f01 	.word	0x002c0f01
    60b8:	02160100 	.word	0x02160100
    60bc:	004fa401 	.word	0x004fa401
    60c0:	004fb608 	.word	0x004fb608
    60c4:	0029b208 	.word	0x0029b208
    60c8:	00047200 	.word	0x00047200
    60cc:	2b001700 	.word	0x2b001700
    60d0:	16010000 	.word	0x16010000
    60d4:	00005e02 	.word	0x00005e02
    60d8:	0029dd00 	.word	0x0029dd00
    60dc:	01160000 	.word	0x01160000
    60e0:	00002a16 	.word	0x00002a16
    60e4:	0101f101 	.word	0x0101f101
    60e8:	0000005e 	.word	0x0000005e
    60ec:	08004fb8 	.word	0x08004fb8
    60f0:	0800500c 	.word	0x0800500c
    60f4:	000029f0 	.word	0x000029f0
    60f8:	000004bb 	.word	0x000004bb
    60fc:	002a2f17 	.word	0x002a2f17
    6100:	01f10100 	.word	0x01f10100
    6104:	00000390 	.word	0x00000390
    6108:	00002a0f 	.word	0x00002a0f
    610c:	002b6217 	.word	0x002b6217
    6110:	01f10100 	.word	0x01f10100
    6114:	0000005e 	.word	0x0000005e
    6118:	00002a2d 	.word	0x00002a2d
    611c:	0100691b 	.word	0x0100691b
    6120:	005e01f2 	.word	0x005e01f2
    6124:	1f000000 	.word	0x1f000000
    6128:	002a2101 	.word	0x002a2101
    612c:	01e10100 	.word	0x01e10100
    6130:	00500c01 	.word	0x00500c01
    6134:	00502008 	.word	0x00502008
    6138:	002a4b08 	.word	0x002a4b08
    613c:	e7011f00 	.word	0xe7011f00
    6140:	0100002a 	.word	0x0100002a
    6144:	20010168 	.word	0x20010168
    6148:	44080050 	.word	0x44080050
    614c:	76080050 	.word	0x76080050
    6150:	2000002a 	.word	0x2000002a
    6154:	002a8c01 	.word	0x002a8c01
    6158:	01380100 	.word	0x01380100
    615c:	08005044 	.word	0x08005044
    6160:	08005058 	.word	0x08005058
    6164:	00002aa1 	.word	0x00002aa1
    6168:	2b4a0116 	.word	0x2b4a0116
    616c:	c5010000 	.word	0xc5010000
    6170:	005e0101 	.word	0x005e0101
    6174:	50580000 	.word	0x50580000
    6178:	50b80800 	.word	0x50b80800
    617c:	2acc0800 	.word	0x2acc0800
    6180:	053a0000 	.word	0x053a0000
    6184:	f6170000 	.word	0xf6170000
    6188:	0100001b 	.word	0x0100001b
    618c:	003a01c5 	.word	0x003a01c5
    6190:	2af70000 	.word	0x2af70000
    6194:	dc1e0000 	.word	0xdc1e0000
    6198:	01000029 	.word	0x01000029
    619c:	025001c6 	.word	0x025001c6
    61a0:	91020000 	.word	0x91020000
    61a4:	01160060 	.word	0x01160060
    61a8:	00002b1d 	.word	0x00002b1d
    61ac:	01014801 	.word	0x01014801
    61b0:	0000005e 	.word	0x0000005e
    61b4:	080050b8 	.word	0x080050b8
    61b8:	08005128 	.word	0x08005128
    61bc:	00002b15 	.word	0x00002b15
    61c0:	00000578 	.word	0x00000578
    61c4:	001bf617 	.word	0x001bf617
    61c8:	01470100 	.word	0x01470100
    61cc:	0000003a 	.word	0x0000003a
    61d0:	00002b40 	.word	0x00002b40
    61d4:	0029dc1e 	.word	0x0029dc1e
    61d8:	01490100 	.word	0x01490100
    61dc:	00000250 	.word	0x00000250
    61e0:	00609102 	.word	0x00609102
    61e4:	2b6c0121 	.word	0x2b6c0121
    61e8:	1a010000 	.word	0x1a010000
    61ec:	00005e01 	.word	0x00005e01
    61f0:	00512800 	.word	0x00512800
    61f4:	00518808 	.word	0x00518808
    61f8:	002b5e08 	.word	0x002b5e08
    61fc:	0005b300 	.word	0x0005b300
    6200:	1bf62200 	.word	0x1bf62200
    6204:	19010000 	.word	0x19010000
    6208:	0000003a 	.word	0x0000003a
    620c:	00002b89 	.word	0x00002b89
    6210:	0029dc23 	.word	0x0029dc23
    6214:	501b0100 	.word	0x501b0100
    6218:	02000002 	.word	0x02000002
    621c:	1d006091 	.word	0x1d006091
    6220:	002b0b01 	.word	0x002b0b01
    6224:	01960100 	.word	0x01960100
    6228:	00518801 	.word	0x00518801
    622c:	00521808 	.word	0x00521808
    6230:	002ba708 	.word	0x002ba708
    6234:	0005dc00 	.word	0x0005dc00
    6238:	19631e00 	.word	0x19631e00
    623c:	97010000 	.word	0x97010000
    6240:	00005e01 	.word	0x00005e01
    6244:	00540100 	.word	0x00540100
    6248:	2af50116 	.word	0x2af50116
    624c:	72010000 	.word	0x72010000
    6250:	005e0101 	.word	0x005e0101
    6254:	52180000 	.word	0x52180000
    6258:	52580800 	.word	0x52580800
    625c:	2bc60800 	.word	0x2bc60800
    6260:	06250000 	.word	0x06250000
    6264:	2f170000 	.word	0x2f170000
    6268:	0100002a 	.word	0x0100002a
    626c:	03900171 	.word	0x03900171
    6270:	2be50000 	.word	0x2be50000
    6274:	62170000 	.word	0x62170000
    6278:	0100002b 	.word	0x0100002b
    627c:	005e0171 	.word	0x005e0171
    6280:	2c030000 	.word	0x2c030000
    6284:	691b0000 	.word	0x691b0000
    6288:	01730100 	.word	0x01730100
    628c:	0000005e 	.word	0x0000005e
    6290:	49012400 	.word	0x49012400
    6294:	0100002a 	.word	0x0100002a
    6298:	52580173 	.word	0x52580173
    629c:	52f80800 	.word	0x52f80800
    62a0:	2c210800 	.word	0x2c210800
    62a4:	064c0000 	.word	0x064c0000
    62a8:	63230000 	.word	0x63230000
    62ac:	01000019 	.word	0x01000019
    62b0:	00005e74 	.word	0x00005e74
    62b4:	00540100 	.word	0x00540100
    62b8:	2a370120 	.word	0x2a370120
    62bc:	b2010000 	.word	0xb2010000
    62c0:	0052f801 	.word	0x0052f801
    62c4:	00530408 	.word	0x00530408
    62c8:	002c4008 	.word	0x002c4008
    62cc:	66012400 	.word	0x66012400
    62d0:	0100002a 	.word	0x0100002a
    62d4:	5304014f 	.word	0x5304014f
    62d8:	53340800 	.word	0x53340800
    62dc:	2c6b0800 	.word	0x2c6b0800
    62e0:	068a0000 	.word	0x068a0000
    62e4:	40220000 	.word	0x40220000
    62e8:	0100002c 	.word	0x0100002c
    62ec:	00005e4e 	.word	0x00005e4e
    62f0:	002c8a00 	.word	0x002c8a00
    62f4:	01240000 	.word	0x01240000
    62f8:	00002a02 	.word	0x00002a02
    62fc:	34013f01 	.word	0x34013f01
    6300:	48080053 	.word	0x48080053
    6304:	a8080053 	.word	0xa8080053
    6308:	b300002c 	.word	0xb300002c
    630c:	22000006 	.word	0x22000006
    6310:	00002b00 	.word	0x00002b00
    6314:	005e3e01 	.word	0x005e3e01
    6318:	2cd30000 	.word	0x2cd30000
    631c:	23000000 	.word	0x23000000
    6320:	00000534 	.word	0x00000534
    6324:	06c42a05 	.word	0x06c42a05
    6328:	03050000 	.word	0x03050000
    632c:	20000a14 	.word	0x20000a14
    6330:	00005e04 	.word	0x00005e04
    6334:	02652300 	.word	0x02652300
    6338:	28050000 	.word	0x28050000
    633c:	000006da 	.word	0x000006da
    6340:	0a160305 	.word	0x0a160305
    6344:	4c042000 	.word	0x4c042000
    6348:	23000000 	.word	0x23000000
    634c:	000003f6 	.word	0x000003f6
    6350:	06da2805 	.word	0x06da2805
    6354:	03050000 	.word	0x03050000
    6358:	20000a18 	.word	0x20000a18
    635c:	00005e25 	.word	0x00005e25
    6360:	00070100 	.word	0x00070100
    6364:	00a32600 	.word	0x00a32600
    6368:	03ff0000 	.word	0x03ff0000
    636c:	047a2300 	.word	0x047a2300
    6370:	29050000 	.word	0x29050000
    6374:	00000712 	.word	0x00000712
    6378:	06140305 	.word	0x06140305
    637c:	f0042000 	.word	0xf0042000
    6380:	23000006 	.word	0x23000006
    6384:	00000615 	.word	0x00000615
    6388:	06c44405 	.word	0x06c44405
    638c:	03050000 	.word	0x03050000
    6390:	20000612 	.word	0x20000612
    6394:	00039323 	.word	0x00039323
    6398:	c4440500 	.word	0xc4440500
    639c:	05000006 	.word	0x05000006
    63a0:	00061303 	.word	0x00061303
    63a4:	005e2520 	.word	0x005e2520
    63a8:	07490000 	.word	0x07490000
    63ac:	a3270000 	.word	0xa3270000
    63b0:	40000000 	.word	0x40000000
    63b4:	00ec2300 	.word	0x00ec2300
    63b8:	45050000 	.word	0x45050000
    63bc:	0000075a 	.word	0x0000075a
    63c0:	0a1a0305 	.word	0x0a1a0305
    63c4:	39042000 	.word	0x39042000
    63c8:	23000007 	.word	0x23000007
    63cc:	000005e4 	.word	0x000005e4
    63d0:	06da5805 	.word	0x06da5805
    63d4:	03050000 	.word	0x03050000
    63d8:	2000060e 	.word	0x2000060e
    63dc:	0000f923 	.word	0x0000f923
    63e0:	da580500 	.word	0xda580500
    63e4:	05000006 	.word	0x05000006
    63e8:	00061003 	.word	0x00061003
    63ec:	02b22320 	.word	0x02b22320
    63f0:	59050000 	.word	0x59050000
    63f4:	00000792 	.word	0x00000792
    63f8:	0a5b0305 	.word	0x0a5b0305
    63fc:	f0042000 	.word	0xf0042000
    6400:	28000006 	.word	0x28000006
    6404:	00000699 	.word	0x00000699
    6408:	003a0e01 	.word	0x003a0e01
    640c:	05010000 	.word	0x05010000
    6410:	0000cc03 	.word	0x0000cc03
    6414:	00052820 	.word	0x00052820
    6418:	11010000 	.word	0x11010000
    641c:	0000003a 	.word	0x0000003a
    6420:	d0030501 	.word	0xd0030501
    6424:	28200000 	.word	0x28200000
    6428:	00000056 	.word	0x00000056
    642c:	003a1401 	.word	0x003a1401
    6430:	05010000 	.word	0x05010000
    6434:	0000d403 	.word	0x0000d403
    6438:	26a82920 	.word	0x26a82920
    643c:	1a060000 	.word	0x1a060000
    6440:	000007da 	.word	0x000007da
    6444:	3a040101 	.word	0x3a040101
    6448:	29000000 	.word	0x29000000
    644c:	00002654 	.word	0x00002654
    6450:	07da1b06 	.word	0x07da1b06
    6454:	01010000 	.word	0x01010000
    6458:	000b1b00 	.word	0x000b1b00
    645c:	e8000200 	.word	0xe8000200
    6460:	0400001a 	.word	0x0400001a
    6464:	0001c601 	.word	0x0001c601
    6468:	2cce0100 	.word	0x2cce0100
    646c:	039d0000 	.word	0x039d0000
    6470:	53480000 	.word	0x53480000
    6474:	56dc0800 	.word	0x56dc0800
    6478:	1a460800 	.word	0x1a460800
    647c:	04020000 	.word	0x04020000
    6480:	00215005 	.word	0x00215005
    6484:	05020200 	.word	0x05020200
    6488:	00000495 	.word	0x00000495
    648c:	69060102 	.word	0x69060102
    6490:	03000004 	.word	0x03000004
    6494:	00323375 	.word	0x00323375
    6498:	00452702 	.word	0x00452702
    649c:	04020000 	.word	0x04020000
    64a0:	0021f107 	.word	0x0021f107
    64a4:	31750300 	.word	0x31750300
    64a8:	28020036 	.word	0x28020036
    64ac:	00000057 	.word	0x00000057
    64b0:	22070202 	.word	0x22070202
    64b4:	03000002 	.word	0x03000002
    64b8:	02003875 	.word	0x02003875
    64bc:	00006829 	.word	0x00006829
    64c0:	08010200 	.word	0x08010200
    64c4:	00000467 	.word	0x00000467
    64c8:	00004504 	.word	0x00004504
    64cc:	02010500 	.word	0x02010500
    64d0:	0000893a 	.word	0x0000893a
    64d4:	0ebd0600 	.word	0x0ebd0600
    64d8:	07000000 	.word	0x07000000
    64dc:	00544553 	.word	0x00544553
    64e0:	dc080001 	.word	0xdc080001
    64e4:	0200003d 	.word	0x0200003d
    64e8:	0000743a 	.word	0x0000743a
    64ec:	3bd60800 	.word	0x3bd60800
    64f0:	3a020000 	.word	0x3a020000
    64f4:	00000074 	.word	0x00000074
    64f8:	3c020105 	.word	0x3c020105
    64fc:	000000b4 	.word	0x000000b4
    6500:	00246c06 	.word	0x00246c06
    6504:	39060000 	.word	0x39060000
    6508:	01000004 	.word	0x01000004
    650c:	29510800 	.word	0x29510800
    6510:	3c020000 	.word	0x3c020000
    6514:	0000009f 	.word	0x0000009f
    6518:	25035009 	.word	0x25035009
    651c:	000001de 	.word	0x000001de
    6520:	0052530a 	.word	0x0052530a
    6524:	006f2603 	.word	0x006f2603
    6528:	23020000 	.word	0x23020000
    652c:	52430a00 	.word	0x52430a00
    6530:	27030031 	.word	0x27030031
    6534:	0000006f 	.word	0x0000006f
    6538:	0a042302 	.word	0x0a042302
    653c:	00325243 	.word	0x00325243
    6540:	006f2803 	.word	0x006f2803
    6544:	23020000 	.word	0x23020000
    6548:	25170b08 	.word	0x25170b08
    654c:	29030000 	.word	0x29030000
    6550:	0000006f 	.word	0x0000006f
    6554:	0b0c2302 	.word	0x0b0c2302
    6558:	0000251d 	.word	0x0000251d
    655c:	006f2a03 	.word	0x006f2a03
    6560:	23020000 	.word	0x23020000
    6564:	24860b10 	.word	0x24860b10
    6568:	2b030000 	.word	0x2b030000
    656c:	0000006f 	.word	0x0000006f
    6570:	0b142302 	.word	0x0b142302
    6574:	0000248c 	.word	0x0000248c
    6578:	006f2c03 	.word	0x006f2c03
    657c:	23020000 	.word	0x23020000
    6580:	24ad0b18 	.word	0x24ad0b18
    6584:	2d030000 	.word	0x2d030000
    6588:	0000006f 	.word	0x0000006f
    658c:	0b1c2302 	.word	0x0b1c2302
    6590:	000024bb 	.word	0x000024bb
    6594:	006f2e03 	.word	0x006f2e03
    6598:	23020000 	.word	0x23020000
    659c:	54480a20 	.word	0x54480a20
    65a0:	2f030052 	.word	0x2f030052
    65a4:	0000006f 	.word	0x0000006f
    65a8:	0a242302 	.word	0x0a242302
    65ac:	0052544c 	.word	0x0052544c
    65b0:	006f3003 	.word	0x006f3003
    65b4:	23020000 	.word	0x23020000
    65b8:	24ea0b28 	.word	0x24ea0b28
    65bc:	31030000 	.word	0x31030000
    65c0:	0000006f 	.word	0x0000006f
    65c4:	0b2c2302 	.word	0x0b2c2302
    65c8:	000024ef 	.word	0x000024ef
    65cc:	006f3203 	.word	0x006f3203
    65d0:	23020000 	.word	0x23020000
    65d4:	24f40b30 	.word	0x24f40b30
    65d8:	33030000 	.word	0x33030000
    65dc:	0000006f 	.word	0x0000006f
    65e0:	0b342302 	.word	0x0b342302
    65e4:	00002436 	.word	0x00002436
    65e8:	006f3403 	.word	0x006f3403
    65ec:	23020000 	.word	0x23020000
    65f0:	24740b38 	.word	0x24740b38
    65f4:	35030000 	.word	0x35030000
    65f8:	0000006f 	.word	0x0000006f
    65fc:	0b3c2302 	.word	0x0b3c2302
    6600:	000023f8 	.word	0x000023f8
    6604:	006f3603 	.word	0x006f3603
    6608:	23020000 	.word	0x23020000
    660c:	23fd0b40 	.word	0x23fd0b40
    6610:	37030000 	.word	0x37030000
    6614:	0000006f 	.word	0x0000006f
    6618:	0b442302 	.word	0x0b442302
    661c:	00002402 	.word	0x00002402
    6620:	006f3803 	.word	0x006f3803
    6624:	23020000 	.word	0x23020000
    6628:	52440a48 	.word	0x52440a48
    662c:	6f390300 	.word	0x6f390300
    6630:	02000000 	.word	0x02000000
    6634:	08004c23 	.word	0x08004c23
    6638:	0000306a 	.word	0x0000306a
    663c:	00bf3a03 	.word	0x00bf3a03
    6640:	040c0000 	.word	0x040c0000
    6644:	04140907 	.word	0x04140907
    6648:	0002491b 	.word	0x0002491b
    664c:	28110b00 	.word	0x28110b00
    6650:	1c040000 	.word	0x1c040000
    6654:	0000003a 	.word	0x0000003a
    6658:	0b002302 	.word	0x0b002302
    665c:	0000275e 	.word	0x0000275e
    6660:	00b41d04 	.word	0x00b41d04
    6664:	23020000 	.word	0x23020000
    6668:	289f0b04 	.word	0x289f0b04
    666c:	1e040000 	.word	0x1e040000
    6670:	000000b4 	.word	0x000000b4
    6674:	0b052302 	.word	0x0b052302
    6678:	000028e6 	.word	0x000028e6
    667c:	003a1f04 	.word	0x003a1f04
    6680:	23020000 	.word	0x23020000
    6684:	285f0b08 	.word	0x285f0b08
    6688:	20040000 	.word	0x20040000
    668c:	0000003a 	.word	0x0000003a
    6690:	0b0c2302 	.word	0x0b0c2302
    6694:	0000284e 	.word	0x0000284e
    6698:	005e2104 	.word	0x005e2104
    669c:	23020000 	.word	0x23020000
    66a0:	22080010 	.word	0x22080010
    66a4:	04000027 	.word	0x04000027
    66a8:	0001ec22 	.word	0x0001ec22
    66ac:	76010d00 	.word	0x76010d00
    66b0:	01000030 	.word	0x01000030
    66b4:	534801af 	.word	0x534801af
    66b8:	53900800 	.word	0x53900800
    66bc:	5d010800 	.word	0x5d010800
    66c0:	000002a0 	.word	0x000002a0
    66c4:	002c490e 	.word	0x002c490e
    66c8:	a0ae0100 	.word	0xa0ae0100
    66cc:	01000002 	.word	0x01000002
    66d0:	2cff0e50 	.word	0x2cff0e50
    66d4:	ae010000 	.word	0xae010000
    66d8:	000002a6 	.word	0x000002a6
    66dc:	4e0f5101 	.word	0x4e0f5101
    66e0:	0100002c 	.word	0x0100002c
    66e4:	00003ab0 	.word	0x00003ab0
    66e8:	002cf100 	.word	0x002cf100
    66ec:	2f1e1000 	.word	0x2f1e1000
    66f0:	b1010000 	.word	0xb1010000
    66f4:	0000005e 	.word	0x0000005e
    66f8:	de041100 	.word	0xde041100
    66fc:	11000001 	.word	0x11000001
    6700:	00024904 	.word	0x00024904
    6704:	c8010d00 	.word	0xc8010d00
    6708:	0100002f 	.word	0x0100002f
    670c:	539001ec 	.word	0x539001ec
    6710:	53a20800 	.word	0x53a20800
    6714:	5d010800 	.word	0x5d010800
    6718:	000002d1 	.word	0x000002d1
    671c:	002cff0e 	.word	0x002cff0e
    6720:	a6eb0100 	.word	0xa6eb0100
    6724:	01000002 	.word	0x01000002
    6728:	01120050 	.word	0x01120050
    672c:	00002cf7 	.word	0x00002cf7
    6730:	01010b01 	.word	0x01010b01
    6734:	080053a4 	.word	0x080053a4
    6738:	080053b8 	.word	0x080053b8
    673c:	03065d01 	.word	0x03065d01
    6740:	49130000 	.word	0x49130000
    6744:	0100002c 	.word	0x0100002c
    6748:	02a0010a 	.word	0x02a0010a
    674c:	50010000 	.word	0x50010000
    6750:	002d6e13 	.word	0x002d6e13
    6754:	010a0100 	.word	0x010a0100
    6758:	000000b4 	.word	0x000000b4
    675c:	12005101 	.word	0x12005101
    6760:	00309901 	.word	0x00309901
    6764:	01270100 	.word	0x01270100
    6768:	0053b801 	.word	0x0053b801
    676c:	0053cc08 	.word	0x0053cc08
    6770:	3b5d0108 	.word	0x3b5d0108
    6774:	13000003 	.word	0x13000003
    6778:	00002c49 	.word	0x00002c49
    677c:	a0012601 	.word	0xa0012601
    6780:	01000002 	.word	0x01000002
    6784:	2d6e1350 	.word	0x2d6e1350
    6788:	26010000 	.word	0x26010000
    678c:	0000b401 	.word	0x0000b401
    6790:	00510100 	.word	0x00510100
    6794:	2c6c0112 	.word	0x2c6c0112
    6798:	48010000 	.word	0x48010000
    679c:	53cc0101 	.word	0x53cc0101
    67a0:	53e20800 	.word	0x53e20800
    67a4:	5d010800 	.word	0x5d010800
    67a8:	0000038e 	.word	0x0000038e
    67ac:	002c4913 	.word	0x002c4913
    67b0:	01470100 	.word	0x01470100
    67b4:	000002a0 	.word	0x000002a0
    67b8:	5c145001 	.word	0x5c145001
    67bc:	01000030 	.word	0x01000030
    67c0:	004c0147 	.word	0x004c0147
    67c4:	2d250000 	.word	0x2d250000
    67c8:	6e130000 	.word	0x6e130000
    67cc:	0100002d 	.word	0x0100002d
    67d0:	00b40147 	.word	0x00b40147
    67d4:	52010000 	.word	0x52010000
    67d8:	00306315 	.word	0x00306315
    67dc:	01490100 	.word	0x01490100
    67e0:	0000005e 	.word	0x0000005e
    67e4:	12005101 	.word	0x12005101
    67e8:	00304701 	.word	0x00304701
    67ec:	01670100 	.word	0x01670100
    67f0:	0053e401 	.word	0x0053e401
    67f4:	0053ee08 	.word	0x0053ee08
    67f8:	b55d0108 	.word	0xb55d0108
    67fc:	13000003 	.word	0x13000003
    6800:	00002c49 	.word	0x00002c49
    6804:	a0016601 	.word	0xa0016601
    6808:	01000002 	.word	0x01000002
    680c:	01160050 	.word	0x01160050
    6810:	00002d47 	.word	0x00002d47
    6814:	01017701 	.word	0x01017701
    6818:	00000089 	.word	0x00000089
    681c:	080053f0 	.word	0x080053f0
    6820:	080053fa 	.word	0x080053fa
    6824:	03ee5d01 	.word	0x03ee5d01
    6828:	49140000 	.word	0x49140000
    682c:	0100002c 	.word	0x0100002c
    6830:	02a00176 	.word	0x02a00176
    6834:	2d380000 	.word	0x2d380000
    6838:	47170000 	.word	0x47170000
    683c:	0100002f 	.word	0x0100002f
    6840:	00890178 	.word	0x00890178
    6844:	12000000 	.word	0x12000000
    6848:	002f0901 	.word	0x002f0901
    684c:	01950100 	.word	0x01950100
    6850:	0053fc01 	.word	0x0053fc01
    6854:	00540608 	.word	0x00540608
    6858:	155d0108 	.word	0x155d0108
    685c:	13000004 	.word	0x13000004
    6860:	00002c49 	.word	0x00002c49
    6864:	a0019401 	.word	0xa0019401
    6868:	01000002 	.word	0x01000002
    686c:	01160050 	.word	0x01160050
    6870:	00002f2e 	.word	0x00002f2e
    6874:	0101a501 	.word	0x0101a501
    6878:	00000089 	.word	0x00000089
    687c:	08005408 	.word	0x08005408
    6880:	08005412 	.word	0x08005412
    6884:	044e5d01 	.word	0x044e5d01
    6888:	49140000 	.word	0x49140000
    688c:	0100002c 	.word	0x0100002c
    6890:	02a001a4 	.word	0x02a001a4
    6894:	2d4b0000 	.word	0x2d4b0000
    6898:	47170000 	.word	0x47170000
    689c:	0100002f 	.word	0x0100002f
    68a0:	008901a6 	.word	0x008901a6
    68a4:	12000000 	.word	0x12000000
    68a8:	002f5101 	.word	0x002f5101
    68ac:	01c50100 	.word	0x01c50100
    68b0:	00541401 	.word	0x00541401
    68b4:	00542808 	.word	0x00542808
    68b8:	835d0108 	.word	0x835d0108
    68bc:	13000004 	.word	0x13000004
    68c0:	00002c49 	.word	0x00002c49
    68c4:	a001c401 	.word	0xa001c401
    68c8:	01000002 	.word	0x01000002
    68cc:	2d6e1350 	.word	0x2d6e1350
    68d0:	c4010000 	.word	0xc4010000
    68d4:	0000b401 	.word	0x0000b401
    68d8:	00510100 	.word	0x00510100
    68dc:	2e430116 	.word	0x2e430116
    68e0:	e0010000 	.word	0xe0010000
    68e4:	00890101 	.word	0x00890101
    68e8:	54280000 	.word	0x54280000
    68ec:	54320800 	.word	0x54320800
    68f0:	5d010800 	.word	0x5d010800
    68f4:	000004bc 	.word	0x000004bc
    68f8:	002c4914 	.word	0x002c4914
    68fc:	01df0100 	.word	0x01df0100
    6900:	000002a0 	.word	0x000002a0
    6904:	00002d5e 	.word	0x00002d5e
    6908:	002f4717 	.word	0x002f4717
    690c:	01e10100 	.word	0x01e10100
    6910:	00000089 	.word	0x00000089
    6914:	d1011200 	.word	0xd1011200
    6918:	0100002d 	.word	0x0100002d
    691c:	34010201 	.word	0x34010201
    6920:	44080054 	.word	0x44080054
    6924:	01080054 	.word	0x01080054
    6928:	00050d5d 	.word	0x00050d5d
    692c:	2c491300 	.word	0x2c491300
    6930:	00010000 	.word	0x00010000
    6934:	0002a002 	.word	0x0002a002
    6938:	14500100 	.word	0x14500100
    693c:	00002cf0 	.word	0x00002cf0
    6940:	5e020001 	.word	0x5e020001
    6944:	71000000 	.word	0x71000000
    6948:	1500002d 	.word	0x1500002d
    694c:	00002c4e 	.word	0x00002c4e
    6950:	3a020201 	.word	0x3a020201
    6954:	01000000 	.word	0x01000000
    6958:	2f1e1753 	.word	0x2f1e1753
    695c:	03010000 	.word	0x03010000
    6960:	00003a02 	.word	0x00003a02
    6964:	01120000 	.word	0x01120000
    6968:	00003037 	.word	0x00003037
    696c:	01022001 	.word	0x01022001
    6970:	08005444 	.word	0x08005444
    6974:	08005458 	.word	0x08005458
    6978:	05425d01 	.word	0x05425d01
    697c:	49130000 	.word	0x49130000
    6980:	0100002c 	.word	0x0100002c
    6984:	02a0021f 	.word	0x02a0021f
    6988:	50010000 	.word	0x50010000
    698c:	002d6e13 	.word	0x002d6e13
    6990:	021f0100 	.word	0x021f0100
    6994:	000000b4 	.word	0x000000b4
    6998:	18005101 	.word	0x18005101
    699c:	002d9d01 	.word	0x002d9d01
    69a0:	025b0100 	.word	0x025b0100
    69a4:	00545801 	.word	0x00545801
    69a8:	0054ee08 	.word	0x0054ee08
    69ac:	002d8408 	.word	0x002d8408
    69b0:	0005b700 	.word	0x0005b700
    69b4:	2c491300 	.word	0x2c491300
    69b8:	5a010000 	.word	0x5a010000
    69bc:	0002a002 	.word	0x0002a002
    69c0:	14500100 	.word	0x14500100
    69c4:	00002efd 	.word	0x00002efd
    69c8:	5e025a01 	.word	0x5e025a01
    69cc:	a3000000 	.word	0xa3000000
    69d0:	1400002d 	.word	0x1400002d
    69d4:	00002e0e 	.word	0x00002e0e
    69d8:	5e025a01 	.word	0x5e025a01
    69dc:	d7000000 	.word	0xd7000000
    69e0:	1400002d 	.word	0x1400002d
    69e4:	00002fb9 	.word	0x00002fb9
    69e8:	5e025a01 	.word	0x5e025a01
    69ec:	f5000000 	.word	0xf5000000
    69f0:	1900002d 	.word	0x1900002d
    69f4:	00002c4e 	.word	0x00002c4e
    69f8:	3a025c01 	.word	0x3a025c01
    69fc:	13000000 	.word	0x13000000
    6a00:	1700002e 	.word	0x1700002e
    6a04:	00002f1e 	.word	0x00002f1e
    6a08:	3a025c01 	.word	0x3a025c01
    6a0c:	00000000 	.word	0x00000000
    6a10:	2e2b0112 	.word	0x2e2b0112
    6a14:	c0010000 	.word	0xc0010000
    6a18:	54f00102 	.word	0x54f00102
    6a1c:	55040800 	.word	0x55040800
    6a20:	5d010800 	.word	0x5d010800
    6a24:	000005ec 	.word	0x000005ec
    6a28:	002c4913 	.word	0x002c4913
    6a2c:	02bf0100 	.word	0x02bf0100
    6a30:	000002a0 	.word	0x000002a0
    6a34:	6e135001 	.word	0x6e135001
    6a38:	0100002d 	.word	0x0100002d
    6a3c:	00b402bf 	.word	0x00b402bf
    6a40:	51010000 	.word	0x51010000
    6a44:	f0011600 	.word	0xf0011600
    6a48:	0100002d 	.word	0x0100002d
    6a4c:	4c0102d9 	.word	0x4c0102d9
    6a50:	04000000 	.word	0x04000000
    6a54:	0a080055 	.word	0x0a080055
    6a58:	01080055 	.word	0x01080055
    6a5c:	0006195d 	.word	0x0006195d
    6a60:	2c491400 	.word	0x2c491400
    6a64:	d8010000 	.word	0xd8010000
    6a68:	0002a002 	.word	0x0002a002
    6a6c:	002e3100 	.word	0x002e3100
    6a70:	011a0000 	.word	0x011a0000
    6a74:	000030a4 	.word	0x000030a4
    6a78:	0102e801 	.word	0x0102e801
    6a7c:	0000003a 	.word	0x0000003a
    6a80:	0800550c 	.word	0x0800550c
    6a84:	08005518 	.word	0x08005518
    6a88:	01125d01 	.word	0x01125d01
    6a8c:	00002e13 	.word	0x00002e13
    6a90:	0102f901 	.word	0x0102f901
    6a94:	08005518 	.word	0x08005518
    6a98:	0800552c 	.word	0x0800552c
    6a9c:	06665d01 	.word	0x06665d01
    6aa0:	49130000 	.word	0x49130000
    6aa4:	0100002c 	.word	0x0100002c
    6aa8:	02a002f8 	.word	0x02a002f8
    6aac:	50010000 	.word	0x50010000
    6ab0:	002d6e13 	.word	0x002d6e13
    6ab4:	02f80100 	.word	0x02f80100
    6ab8:	000000b4 	.word	0x000000b4
    6abc:	12005101 	.word	0x12005101
    6ac0:	002ea301 	.word	0x002ea301
    6ac4:	03160100 	.word	0x03160100
    6ac8:	00552c01 	.word	0x00552c01
    6acc:	00554008 	.word	0x00554008
    6ad0:	9b5d0108 	.word	0x9b5d0108
    6ad4:	13000006 	.word	0x13000006
    6ad8:	00002c49 	.word	0x00002c49
    6adc:	a0031501 	.word	0xa0031501
    6ae0:	01000002 	.word	0x01000002
    6ae4:	2d6e1350 	.word	0x2d6e1350
    6ae8:	15010000 	.word	0x15010000
    6aec:	0000b403 	.word	0x0000b403
    6af0:	00510100 	.word	0x00510100
    6af4:	2ebb0112 	.word	0x2ebb0112
    6af8:	4e010000 	.word	0x4e010000
    6afc:	55400103 	.word	0x55400103
    6b00:	554c0800 	.word	0x554c0800
    6b04:	5d010800 	.word	0x5d010800
    6b08:	000006e2 	.word	0x000006e2
    6b0c:	002c4913 	.word	0x002c4913
    6b10:	034d0100 	.word	0x034d0100
    6b14:	000002a0 	.word	0x000002a0
    6b18:	7f145001 	.word	0x7f145001
    6b1c:	01000030 	.word	0x01000030
    6b20:	003a034d 	.word	0x003a034d
    6b24:	2e440000 	.word	0x2e440000
    6b28:	07190000 	.word	0x07190000
    6b2c:	0100002e 	.word	0x0100002e
    6b30:	003a034f 	.word	0x003a034f
    6b34:	2e570000 	.word	0x2e570000
    6b38:	12000000 	.word	0x12000000
    6b3c:	002e8301 	.word	0x002e8301
    6b40:	036b0100 	.word	0x036b0100
    6b44:	00554c01 	.word	0x00554c01
    6b48:	00556008 	.word	0x00556008
    6b4c:	175d0108 	.word	0x175d0108
    6b50:	13000007 	.word	0x13000007
    6b54:	00002c49 	.word	0x00002c49
    6b58:	a0036a01 	.word	0xa0036a01
    6b5c:	01000002 	.word	0x01000002
    6b60:	2d6e1350 	.word	0x2d6e1350
    6b64:	6a010000 	.word	0x6a010000
    6b68:	0000b403 	.word	0x0000b403
    6b6c:	00510100 	.word	0x00510100
    6b70:	2fd70112 	.word	0x2fd70112
    6b74:	88010000 	.word	0x88010000
    6b78:	55600103 	.word	0x55600103
    6b7c:	55740800 	.word	0x55740800
    6b80:	5d010800 	.word	0x5d010800
    6b84:	0000074c 	.word	0x0000074c
    6b88:	002c4913 	.word	0x002c4913
    6b8c:	03870100 	.word	0x03870100
    6b90:	000002a0 	.word	0x000002a0
    6b94:	6e135001 	.word	0x6e135001
    6b98:	0100002d 	.word	0x0100002d
    6b9c:	00b40387 	.word	0x00b40387
    6ba0:	51010000 	.word	0x51010000
    6ba4:	79011600 	.word	0x79011600
    6ba8:	0100002c 	.word	0x0100002c
    6bac:	890103a3 	.word	0x890103a3
    6bb0:	74000000 	.word	0x74000000
    6bb4:	7e080055 	.word	0x7e080055
    6bb8:	01080055 	.word	0x01080055
    6bbc:	0007855d 	.word	0x0007855d
    6bc0:	2c491400 	.word	0x2c491400
    6bc4:	a2010000 	.word	0xa2010000
    6bc8:	0002a003 	.word	0x0002a003
    6bcc:	002e7500 	.word	0x002e7500
    6bd0:	2f471700 	.word	0x2f471700
    6bd4:	a4010000 	.word	0xa4010000
    6bd8:	00008903 	.word	0x00008903
    6bdc:	01180000 	.word	0x01180000
    6be0:	00002f9f 	.word	0x00002f9f
    6be4:	0103e301 	.word	0x0103e301
    6be8:	08005580 	.word	0x08005580
    6bec:	080055e2 	.word	0x080055e2
    6bf0:	00002e88 	.word	0x00002e88
    6bf4:	00000806 	.word	0x00000806
    6bf8:	002c4913 	.word	0x002c4913
    6bfc:	03e20100 	.word	0x03e20100
    6c00:	000002a0 	.word	0x000002a0
    6c04:	fd145001 	.word	0xfd145001
    6c08:	0100002e 	.word	0x0100002e
    6c0c:	005e03e2 	.word	0x005e03e2
    6c10:	2ea70000 	.word	0x2ea70000
    6c14:	0e140000 	.word	0x0e140000
    6c18:	0100002e 	.word	0x0100002e
    6c1c:	005e03e2 	.word	0x005e03e2
    6c20:	2edb0000 	.word	0x2edb0000
    6c24:	b9140000 	.word	0xb9140000
    6c28:	0100002f 	.word	0x0100002f
    6c2c:	005e03e2 	.word	0x005e03e2
    6c30:	2ef90000 	.word	0x2ef90000
    6c34:	4e190000 	.word	0x4e190000
    6c38:	0100002c 	.word	0x0100002c
    6c3c:	003a03e4 	.word	0x003a03e4
    6c40:	2f170000 	.word	0x2f170000
    6c44:	1e170000 	.word	0x1e170000
    6c48:	0100002f 	.word	0x0100002f
    6c4c:	003a03e4 	.word	0x003a03e4
    6c50:	26170000 	.word	0x26170000
    6c54:	0100002f 	.word	0x0100002f
    6c58:	003a03e4 	.word	0x003a03e4
    6c5c:	12000000 	.word	0x12000000
    6c60:	002f6a01 	.word	0x002f6a01
    6c64:	04270100 	.word	0x04270100
    6c68:	0055e401 	.word	0x0055e401
    6c6c:	0055f408 	.word	0x0055f408
    6c70:	575d0108 	.word	0x575d0108
    6c74:	13000008 	.word	0x13000008
    6c78:	00002c49 	.word	0x00002c49
    6c7c:	a0042601 	.word	0xa0042601
    6c80:	01000002 	.word	0x01000002
    6c84:	18321450 	.word	0x18321450
    6c88:	26010000 	.word	0x26010000
    6c8c:	00005e04 	.word	0x00005e04
    6c90:	002f4000 	.word	0x002f4000
    6c94:	2c4e1500 	.word	0x2c4e1500
    6c98:	28010000 	.word	0x28010000
    6c9c:	00003a04 	.word	0x00003a04
    6ca0:	17530100 	.word	0x17530100
    6ca4:	00002f1e 	.word	0x00002f1e
    6ca8:	3a042901 	.word	0x3a042901
    6cac:	00000000 	.word	0x00000000
    6cb0:	2e620118 	.word	0x2e620118
    6cb4:	4b010000 	.word	0x4b010000
    6cb8:	55f40104 	.word	0x55f40104
    6cbc:	55fc0800 	.word	0x55fc0800
    6cc0:	2f530800 	.word	0x2f530800
    6cc4:	089e0000 	.word	0x089e0000
    6cc8:	49140000 	.word	0x49140000
    6ccc:	0100002c 	.word	0x0100002c
    6cd0:	02a0044a 	.word	0x02a0044a
    6cd4:	2f720000 	.word	0x2f720000
    6cd8:	f8130000 	.word	0xf8130000
    6cdc:	0100002f 	.word	0x0100002f
    6ce0:	005e044a 	.word	0x005e044a
    6ce4:	51010000 	.word	0x51010000
    6ce8:	000ea913 	.word	0x000ea913
    6cec:	044a0100 	.word	0x044a0100
    6cf0:	0000004c 	.word	0x0000004c
    6cf4:	1b005201 	.word	0x1b005201
    6cf8:	002ede01 	.word	0x002ede01
    6cfc:	04630100 	.word	0x04630100
    6d00:	00004c01 	.word	0x00004c01
    6d04:	0055fc00 	.word	0x0055fc00
    6d08:	00560a08 	.word	0x00560a08
    6d0c:	002f8508 	.word	0x002f8508
    6d10:	0008db00 	.word	0x0008db00
    6d14:	2c491400 	.word	0x2c491400
    6d18:	62010000 	.word	0x62010000
    6d1c:	0002a004 	.word	0x0002a004
    6d20:	002fa400 	.word	0x002fa400
    6d24:	2ff81300 	.word	0x2ff81300
    6d28:	62010000 	.word	0x62010000
    6d2c:	00005e04 	.word	0x00005e04
    6d30:	00510100 	.word	0x00510100
    6d34:	2c560112 	.word	0x2c560112
    6d38:	85010000 	.word	0x85010000
    6d3c:	560c0104 	.word	0x560c0104
    6d40:	561c0800 	.word	0x561c0800
    6d44:	5d010800 	.word	0x5d010800
    6d48:	00000922 	.word	0x00000922
    6d4c:	002c4913 	.word	0x002c4913
    6d50:	04840100 	.word	0x04840100
    6d54:	000002a0 	.word	0x000002a0
    6d58:	8c145001 	.word	0x8c145001
    6d5c:	0100002f 	.word	0x0100002f
    6d60:	003a0484 	.word	0x003a0484
    6d64:	2fb70000 	.word	0x2fb70000
    6d68:	07190000 	.word	0x07190000
    6d6c:	0100002e 	.word	0x0100002e
    6d70:	003a0486 	.word	0x003a0486
    6d74:	2fca0000 	.word	0x2fca0000
    6d78:	12000000 	.word	0x12000000
    6d7c:	002d0e01 	.word	0x002d0e01
    6d80:	04a30100 	.word	0x04a30100
    6d84:	00561c01 	.word	0x00561c01
    6d88:	00562208 	.word	0x00562208
    6d8c:	655d0108 	.word	0x655d0108
    6d90:	13000009 	.word	0x13000009
    6d94:	00002c49 	.word	0x00002c49
    6d98:	a004a101 	.word	0xa004a101
    6d9c:	01000002 	.word	0x01000002
    6da0:	2dc31350 	.word	0x2dc31350
    6da4:	a1010000 	.word	0xa1010000
    6da8:	00004c04 	.word	0x00004c04
    6dac:	13510100 	.word	0x13510100
    6db0:	00002ca3 	.word	0x00002ca3
    6db4:	4c04a201 	.word	0x4c04a201
    6db8:	01000000 	.word	0x01000000
    6dbc:	01120052 	.word	0x01120052
    6dc0:	00002d77 	.word	0x00002d77
    6dc4:	0104cc01 	.word	0x0104cc01
    6dc8:	08005624 	.word	0x08005624
    6dcc:	08005630 	.word	0x08005630
    6dd0:	09ac5d01 	.word	0x09ac5d01
    6dd4:	49130000 	.word	0x49130000
    6dd8:	0100002c 	.word	0x0100002c
    6ddc:	02a004cb 	.word	0x02a004cb
    6de0:	50010000 	.word	0x50010000
    6de4:	002efd14 	.word	0x002efd14
    6de8:	04cb0100 	.word	0x04cb0100
    6dec:	0000005e 	.word	0x0000005e
    6df0:	00002fe8 	.word	0x00002fe8
    6df4:	002e0719 	.word	0x002e0719
    6df8:	04cd0100 	.word	0x04cd0100
    6dfc:	0000003a 	.word	0x0000003a
    6e00:	00002ffb 	.word	0x00002ffb
    6e04:	1e011200 	.word	0x1e011200
    6e08:	01000030 	.word	0x01000030
    6e0c:	300104e6 	.word	0x300104e6
    6e10:	4c080056 	.word	0x4c080056
    6e14:	01080056 	.word	0x01080056
    6e18:	0009d35d 	.word	0x0009d35d
    6e1c:	2d6e1300 	.word	0x2d6e1300
    6e20:	e5010000 	.word	0xe5010000
    6e24:	0000b404 	.word	0x0000b404
    6e28:	00500100 	.word	0x00500100
    6e2c:	300c0116 	.word	0x300c0116
    6e30:	05010000 	.word	0x05010000
    6e34:	00890105 	.word	0x00890105
    6e38:	564c0000 	.word	0x564c0000
    6e3c:	56580800 	.word	0x56580800
    6e40:	5d010800 	.word	0x5d010800
    6e44:	00000a1a 	.word	0x00000a1a
    6e48:	002c4914 	.word	0x002c4914
    6e4c:	05040100 	.word	0x05040100
    6e50:	000002a0 	.word	0x000002a0
    6e54:	00003019 	.word	0x00003019
    6e58:	002d6513 	.word	0x002d6513
    6e5c:	05040100 	.word	0x05040100
    6e60:	0000005e 	.word	0x0000005e
    6e64:	47175101 	.word	0x47175101
    6e68:	0100002f 	.word	0x0100002f
    6e6c:	00890506 	.word	0x00890506
    6e70:	12000000 	.word	0x12000000
    6e74:	002cb001 	.word	0x002cb001
    6e78:	052b0100 	.word	0x052b0100
    6e7c:	00565801 	.word	0x00565801
    6e80:	00566008 	.word	0x00566008
    6e84:	515d0108 	.word	0x515d0108
    6e88:	1300000a 	.word	0x1300000a
    6e8c:	00002c49 	.word	0x00002c49
    6e90:	a0052a01 	.word	0xa0052a01
    6e94:	01000002 	.word	0x01000002
    6e98:	2d651450 	.word	0x2d651450
    6e9c:	2a010000 	.word	0x2a010000
    6ea0:	00005e05 	.word	0x00005e05
    6ea4:	00302c00 	.word	0x00302c00
    6ea8:	01160000 	.word	0x01160000
    6eac:	00002cbe 	.word	0x00002cbe
    6eb0:	01054101 	.word	0x01054101
    6eb4:	00000094 	.word	0x00000094
    6eb8:	08005660 	.word	0x08005660
    6ebc:	0800567a 	.word	0x0800567a
    6ec0:	0ab65d01 	.word	0x0ab65d01
    6ec4:	49140000 	.word	0x49140000
    6ec8:	0100002c 	.word	0x0100002c
    6ecc:	02a00540 	.word	0x02a00540
    6ed0:	303f0000 	.word	0x303f0000
    6ed4:	5c140000 	.word	0x5c140000
    6ed8:	01000030 	.word	0x01000030
    6edc:	004c0540 	.word	0x004c0540
    6ee0:	305d0000 	.word	0x305d0000
    6ee4:	47190000 	.word	0x47190000
    6ee8:	0100002f 	.word	0x0100002f
    6eec:	00940542 	.word	0x00940542
    6ef0:	307b0000 	.word	0x307b0000
    6ef4:	63170000 	.word	0x63170000
    6ef8:	01000030 	.word	0x01000030
    6efc:	003a0543 	.word	0x003a0543
    6f00:	b6170000 	.word	0xb6170000
    6f04:	0100002d 	.word	0x0100002d
    6f08:	003a0543 	.word	0x003a0543
    6f0c:	12000000 	.word	0x12000000
    6f10:	002d3101 	.word	0x002d3101
    6f14:	056c0100 	.word	0x056c0100
    6f18:	00567c01 	.word	0x00567c01
    6f1c:	00568408 	.word	0x00568408
    6f20:	f95d0108 	.word	0xf95d0108
    6f24:	1300000a 	.word	0x1300000a
    6f28:	00002c49 	.word	0x00002c49
    6f2c:	a0056b01 	.word	0xa0056b01
    6f30:	01000002 	.word	0x01000002
    6f34:	305c1450 	.word	0x305c1450
    6f38:	6b010000 	.word	0x6b010000
    6f3c:	00004c05 	.word	0x00004c05
    6f40:	00309900 	.word	0x00309900
    6f44:	30631700 	.word	0x30631700
    6f48:	6d010000 	.word	0x6d010000
    6f4c:	00005e05 	.word	0x00005e05
    6f50:	011c0000 	.word	0x011c0000
    6f54:	00002e78 	.word	0x00002e78
    6f58:	84018301 	.word	0x84018301
    6f5c:	dc080056 	.word	0xdc080056
    6f60:	ac080056 	.word	0xac080056
    6f64:	1d000030 	.word	0x1d000030
    6f68:	00002c49 	.word	0x00002c49
    6f6c:	02a08201 	.word	0x02a08201
    6f70:	30d70000 	.word	0x30d70000
    6f74:	00000000 	.word	0x00000000
    6f78:	00000736 	.word	0x00000736
    6f7c:	1caa0002 	.word	0x1caa0002
    6f80:	01040000 	.word	0x01040000
    6f84:	000001c6 	.word	0x000001c6
    6f88:	00324501 	.word	0x00324501
    6f8c:	00039d00 	.word	0x00039d00
    6f90:	0056dc00 	.word	0x0056dc00
    6f94:	005c0408 	.word	0x005c0408
    6f98:	001c5708 	.word	0x001c5708
    6f9c:	05040200 	.word	0x05040200
    6fa0:	00002150 	.word	0x00002150
    6fa4:	95050202 	.word	0x95050202
    6fa8:	02000004 	.word	0x02000004
    6fac:	04690601 	.word	0x04690601
    6fb0:	75030000 	.word	0x75030000
    6fb4:	02003233 	.word	0x02003233
    6fb8:	00004527 	.word	0x00004527
    6fbc:	07040200 	.word	0x07040200
    6fc0:	000021f1 	.word	0x000021f1
    6fc4:	36317503 	.word	0x36317503
    6fc8:	57280200 	.word	0x57280200
    6fcc:	02000000 	.word	0x02000000
    6fd0:	02220702 	.word	0x02220702
    6fd4:	75030000 	.word	0x75030000
    6fd8:	29020038 	.word	0x29020038
    6fdc:	00000068 	.word	0x00000068
    6fe0:	67080102 	.word	0x67080102
    6fe4:	04000004 	.word	0x04000004
    6fe8:	00000045 	.word	0x00000045
    6fec:	00005704 	.word	0x00005704
    6ff0:	02010500 	.word	0x02010500
    6ff4:	00008e3a 	.word	0x00008e3a
    6ff8:	0ebd0600 	.word	0x0ebd0600
    6ffc:	07000000 	.word	0x07000000
    7000:	00544553 	.word	0x00544553
    7004:	dc080001 	.word	0xdc080001
    7008:	0200003d 	.word	0x0200003d
    700c:	0000793a 	.word	0x0000793a
    7010:	02010500 	.word	0x02010500
    7014:	0000ae3c 	.word	0x0000ae3c
    7018:	246c0600 	.word	0x246c0600
    701c:	06000000 	.word	0x06000000
    7020:	00000439 	.word	0x00000439
    7024:	51080001 	.word	0x51080001
    7028:	02000029 	.word	0x02000029
    702c:	0000993c 	.word	0x0000993c
    7030:	07040900 	.word	0x07040900
    7034:	0d03240a 	.word	0x0d03240a
    7038:	00014a01 	.word	0x00014a01
    703c:	43410b00 	.word	0x43410b00
    7040:	0e030052 	.word	0x0e030052
    7044:	00006f01 	.word	0x00006f01
    7048:	00230200 	.word	0x00230200
    704c:	0031d00c 	.word	0x0031d00c
    7050:	010f0300 	.word	0x010f0300
    7054:	0000006f 	.word	0x0000006f
    7058:	0c042302 	.word	0x0c042302
    705c:	000031cd 	.word	0x000031cd
    7060:	6f011003 	.word	0x6f011003
    7064:	02000000 	.word	0x02000000
    7068:	530b0823 	.word	0x530b0823
    706c:	11030052 	.word	0x11030052
    7070:	00006f01 	.word	0x00006f01
    7074:	0c230200 	.word	0x0c230200
    7078:	0052430b 	.word	0x0052430b
    707c:	6f011203 	.word	0x6f011203
    7080:	02000000 	.word	0x02000000
    7084:	410b1023 	.word	0x410b1023
    7088:	13030052 	.word	0x13030052
    708c:	00006f01 	.word	0x00006f01
    7090:	14230200 	.word	0x14230200
    7094:	00340c0c 	.word	0x00340c0c
    7098:	01140300 	.word	0x01140300
    709c:	0000006f 	.word	0x0000006f
    70a0:	0b182302 	.word	0x0b182302
    70a4:	0052424f 	.word	0x0052424f
    70a8:	6f011503 	.word	0x6f011503
    70ac:	02000000 	.word	0x02000000
    70b0:	630c1c23 	.word	0x630c1c23
    70b4:	03000031 	.word	0x03000031
    70b8:	006f0116 	.word	0x006f0116
    70bc:	23020000 	.word	0x23020000
    70c0:	100a0020 	.word	0x100a0020
    70c4:	cc011a03 	.word	0xcc011a03
    70c8:	0b000001 	.word	0x0b000001
    70cc:	00504452 	.word	0x00504452
    70d0:	74011b03 	.word	0x74011b03
    70d4:	02000000 	.word	0x02000000
    70d8:	d40c0023 	.word	0xd40c0023
    70dc:	03000033 	.word	0x03000033
    70e0:	0074011c 	.word	0x0074011c
    70e4:	23020000 	.word	0x23020000
    70e8:	33d90c02 	.word	0x33d90c02
    70ec:	1d030000 	.word	0x1d030000
    70f0:	00007401 	.word	0x00007401
    70f4:	04230200 	.word	0x04230200
    70f8:	0033df0c 	.word	0x0033df0c
    70fc:	011e0300 	.word	0x011e0300
    7100:	00000074 	.word	0x00000074
    7104:	0c062302 	.word	0x0c062302
    7108:	00003196 	.word	0x00003196
    710c:	74011f03 	.word	0x74011f03
    7110:	02000000 	.word	0x02000000
    7114:	9b0c0823 	.word	0x9b0c0823
    7118:	03000031 	.word	0x03000031
    711c:	00740120 	.word	0x00740120
    7120:	23020000 	.word	0x23020000
    7124:	31a00c0a 	.word	0x31a00c0a
    7128:	21030000 	.word	0x21030000
    712c:	00007401 	.word	0x00007401
    7130:	0c230200 	.word	0x0c230200
    7134:	0031a50c 	.word	0x0031a50c
    7138:	01220300 	.word	0x01220300
    713c:	00000074 	.word	0x00000074
    7140:	000e2302 	.word	0x000e2302
    7144:	1d040105 	.word	0x1d040105
    7148:	000001f3 	.word	0x000001f3
    714c:	0032b406 	.word	0x0032b406
    7150:	21060100 	.word	0x21060100
    7154:	02000032 	.word	0x02000032
    7158:	00311106 	.word	0x00311106
    715c:	a5060300 	.word	0xa5060300
    7160:	04000032 	.word	0x04000032
    7164:	0032c906 	.word	0x0032c906
    7168:	08000500 	.word	0x08000500
    716c:	00003189 	.word	0x00003189
    7170:	01cc2304 	.word	0x01cc2304
    7174:	010d0000 	.word	0x010d0000
    7178:	00003329 	.word	0x00003329
    717c:	01034001 	.word	0x01034001
    7180:	000001f3 	.word	0x000001f3
    7184:	00021e01 	.word	0x00021e01
    7188:	32080e00 	.word	0x32080e00
    718c:	41010000 	.word	0x41010000
    7190:	0001f303 	.word	0x0001f303
    7194:	5d0f0000 	.word	0x5d0f0000
    7198:	01000031 	.word	0x01000031
    719c:	01010386 	.word	0x01010386
    71a0:	00000237 	.word	0x00000237
    71a4:	01006910 	.word	0x01006910
    71a8:	006f0387 	.word	0x006f0387
    71ac:	11000000 	.word	0x11000000
    71b0:	00335501 	.word	0x00335501
    71b4:	01570100 	.word	0x01570100
    71b8:	080056dc 	.word	0x080056dc
    71bc:	080056f4 	.word	0x080056f4
    71c0:	025e5d01 	.word	0x025e5d01
    71c4:	31120000 	.word	0x31120000
    71c8:	01000031 	.word	0x01000031
    71cc:	00003a56 	.word	0x00003a56
    71d0:	0030f600 	.word	0x0030f600
    71d4:	01110000 	.word	0x01110000
    71d8:	00003366 	.word	0x00003366
    71dc:	f4016b01 	.word	0xf4016b01
    71e0:	0c080056 	.word	0x0c080056
    71e4:	01080057 	.word	0x01080057
    71e8:	0002855d 	.word	0x0002855d
    71ec:	33131200 	.word	0x33131200
    71f0:	6a010000 	.word	0x6a010000
    71f4:	0000003a 	.word	0x0000003a
    71f8:	00003109 	.word	0x00003109
    71fc:	69011100 	.word	0x69011100
    7200:	01000032 	.word	0x01000032
    7204:	570c017f 	.word	0x570c017f
    7208:	57240800 	.word	0x57240800
    720c:	5d010800 	.word	0x5d010800
    7210:	000002ac 	.word	0x000002ac
    7214:	00343012 	.word	0x00343012
    7218:	3a7e0100 	.word	0x3a7e0100
    721c:	1c000000 	.word	0x1c000000
    7220:	00000031 	.word	0x00000031
    7224:	31680113 	.word	0x31680113
    7228:	91010000 	.word	0x91010000
    722c:	00572401 	.word	0x00572401
    7230:	00573c08 	.word	0x00573c08
    7234:	135d0108 	.word	0x135d0108
    7238:	00323001 	.word	0x00323001
    723c:	019f0100 	.word	0x019f0100
    7240:	0800573c 	.word	0x0800573c
    7244:	0800574c 	.word	0x0800574c
    7248:	01145d01 	.word	0x01145d01
    724c:	0000339b 	.word	0x0000339b
    7250:	01029701 	.word	0x01029701
    7254:	0000003a 	.word	0x0000003a
    7258:	0800574c 	.word	0x0800574c
    725c:	08005758 	.word	0x08005758
    7260:	01145d01 	.word	0x01145d01
    7264:	000031aa 	.word	0x000031aa
    7268:	0102a401 	.word	0x0102a401
    726c:	0000003a 	.word	0x0000003a
    7270:	08005758 	.word	0x08005758
    7274:	08005764 	.word	0x08005764
    7278:	01155d01 	.word	0x01155d01
    727c:	000032df 	.word	0x000032df
    7280:	0102b201 	.word	0x0102b201
    7284:	0000008e 	.word	0x0000008e
    7288:	08005764 	.word	0x08005764
    728c:	08005774 	.word	0x08005774
    7290:	032b5d01 	.word	0x032b5d01
    7294:	030e0000 	.word	0x030e0000
    7298:	01000031 	.word	0x01000031
    729c:	008e02b3 	.word	0x008e02b3
    72a0:	15000000 	.word	0x15000000
    72a4:	00313f01 	.word	0x00313f01
    72a8:	02c80100 	.word	0x02c80100
    72ac:	00008e01 	.word	0x00008e01
    72b0:	00577400 	.word	0x00577400
    72b4:	00578408 	.word	0x00578408
    72b8:	545d0108 	.word	0x545d0108
    72bc:	0e000003 	.word	0x0e000003
    72c0:	00002f47 	.word	0x00002f47
    72c4:	8e02c901 	.word	0x8e02c901
    72c8:	00000000 	.word	0x00000000
    72cc:	30c30116 	.word	0x30c30116
    72d0:	e3010000 	.word	0xe3010000
    72d4:	57840102 	.word	0x57840102
    72d8:	57a00800 	.word	0x57a00800
    72dc:	5d010800 	.word	0x5d010800
    72e0:	00000389 	.word	0x00000389
    72e4:	0033f117 	.word	0x0033f117
    72e8:	02e20100 	.word	0x02e20100
    72ec:	0000004c 	.word	0x0000004c
    72f0:	6e175001 	.word	0x6e175001
    72f4:	0100002d 	.word	0x0100002d
    72f8:	00ae02e2 	.word	0x00ae02e2
    72fc:	51010000 	.word	0x51010000
    7300:	81011500 	.word	0x81011500
    7304:	01000032 	.word	0x01000032
    7308:	8e010302 	.word	0x8e010302
    730c:	a0000000 	.word	0xa0000000
    7310:	c0080057 	.word	0xc0080057
    7314:	01080057 	.word	0x01080057
    7318:	0003c65d 	.word	0x0003c65d
    731c:	33c91800 	.word	0x33c91800
    7320:	01010000 	.word	0x01010000
    7324:	00004c03 	.word	0x00004c03
    7328:	00312f00 	.word	0x00312f00
    732c:	2f471900 	.word	0x2f471900
    7330:	03010000 	.word	0x03010000
    7334:	00008e03 	.word	0x00008e03
    7338:	00314d00 	.word	0x00314d00
    733c:	01160000 	.word	0x01160000
    7340:	00003295 	.word	0x00003295
    7344:	01032f01 	.word	0x01032f01
    7348:	080057c0 	.word	0x080057c0
    734c:	080057cc 	.word	0x080057cc
    7350:	03ed5d01 	.word	0x03ed5d01
    7354:	c9170000 	.word	0xc9170000
    7358:	01000033 	.word	0x01000033
    735c:	004c032e 	.word	0x004c032e
    7360:	50010000 	.word	0x50010000
    7364:	01fe1a00 	.word	0x01fe1a00
    7368:	57cc0000 	.word	0x57cc0000
    736c:	57f80800 	.word	0x57f80800
    7370:	5d010800 	.word	0x5d010800
    7374:	0000040a 	.word	0x0000040a
    7378:	0002111b 	.word	0x0002111b
    737c:	00316b00 	.word	0x00316b00
    7380:	011c0000 	.word	0x011c0000
    7384:	00003415 	.word	0x00003415
    7388:	01036701 	.word	0x01036701
    738c:	000001f3 	.word	0x000001f3
    7390:	080057f8 	.word	0x080057f8
    7394:	0800588c 	.word	0x0800588c
    7398:	00003194 	.word	0x00003194
    739c:	0000049d 	.word	0x0000049d
    73a0:	0032d718 	.word	0x0032d718
    73a4:	03660100 	.word	0x03660100
    73a8:	0000003a 	.word	0x0000003a
    73ac:	000031bf 	.word	0x000031bf
    73b0:	002dbc19 	.word	0x002dbc19
    73b4:	03680100 	.word	0x03680100
    73b8:	000001f3 	.word	0x000001f3
    73bc:	000031dd 	.word	0x000031dd
    73c0:	0001fe1d 	.word	0x0001fe1d
    73c4:	00013000 	.word	0x00013000
    73c8:	036b0100 	.word	0x036b0100
    73cc:	00000464 	.word	0x00000464
    73d0:	0001501e 	.word	0x0001501e
    73d4:	02111f00 	.word	0x02111f00
    73d8:	00000000 	.word	0x00000000
    73dc:	00021e1d 	.word	0x00021e1d
    73e0:	00017000 	.word	0x00017000
    73e4:	03700100 	.word	0x03700100
    73e8:	00000484 	.word	0x00000484
    73ec:	0001881e 	.word	0x0001881e
    73f0:	022c1b00 	.word	0x022c1b00
    73f4:	32060000 	.word	0x32060000
    73f8:	00000000 	.word	0x00000000
    73fc:	0001fe20 	.word	0x0001fe20
    7400:	0001a000 	.word	0x0001a000
    7404:	03710100 	.word	0x03710100
    7408:	0001b81e 	.word	0x0001b81e
    740c:	02111f00 	.word	0x02111f00
    7410:	00000000 	.word	0x00000000
    7414:	d5011c00 	.word	0xd5011c00
    7418:	01000031 	.word	0x01000031
    741c:	f301026b 	.word	0xf301026b
    7420:	8c000001 	.word	0x8c000001
    7424:	e8080058 	.word	0xe8080058
    7428:	56080058 	.word	0x56080058
    742c:	fc000032 	.word	0xfc000032
    7430:	18000004 	.word	0x18000004
    7434:	000030d2 	.word	0x000030d2
    7438:	4c026a01 	.word	0x4c026a01
    743c:	81000000 	.word	0x81000000
    7440:	18000032 	.word	0x18000032
    7444:	000030e4 	.word	0x000030e4
    7448:	4c026a01 	.word	0x4c026a01
    744c:	9f000000 	.word	0x9f000000
    7450:	18000032 	.word	0x18000032
    7454:	00003300 	.word	0x00003300
    7458:	4c026a01 	.word	0x4c026a01
    745c:	bd000000 	.word	0xbd000000
    7460:	19000032 	.word	0x19000032
    7464:	00002dbc 	.word	0x00002dbc
    7468:	f3026c01 	.word	0xf3026c01
    746c:	db000001 	.word	0xdb000001
    7470:	00000032 	.word	0x00000032
    7474:	31f0011c 	.word	0x31f0011c
    7478:	1a010000 	.word	0x1a010000
    747c:	01f30102 	.word	0x01f30102
    7480:	58e80000 	.word	0x58e80000
    7484:	59840800 	.word	0x59840800
    7488:	32f90800 	.word	0x32f90800
    748c:	053b0000 	.word	0x053b0000
    7490:	6e180000 	.word	0x6e180000
    7494:	0100002d 	.word	0x0100002d
    7498:	00ae0219 	.word	0x00ae0219
    749c:	33240000 	.word	0x33240000
    74a0:	bc190000 	.word	0xbc190000
    74a4:	0100002d 	.word	0x0100002d
    74a8:	01f3021b 	.word	0x01f3021b
    74ac:	33420000 	.word	0x33420000
    74b0:	1c000000 	.word	0x1c000000
    74b4:	00333901 	.word	0x00333901
    74b8:	01cb0100 	.word	0x01cb0100
    74bc:	0001f301 	.word	0x0001f301
    74c0:	00598400 	.word	0x00598400
    74c4:	005a4408 	.word	0x005a4408
    74c8:	00336b08 	.word	0x00336b08
    74cc:	0005ba00 	.word	0x0005ba00
    74d0:	33e51800 	.word	0x33e51800
    74d4:	ca010000 	.word	0xca010000
    74d8:	00003a01 	.word	0x00003a01
    74dc:	00338a00 	.word	0x00338a00
    74e0:	33091900 	.word	0x33091900
    74e4:	cc010000 	.word	0xcc010000
    74e8:	00004c01 	.word	0x00004c01
    74ec:	0033a800 	.word	0x0033a800
    74f0:	32bf1900 	.word	0x32bf1900
    74f4:	cc010000 	.word	0xcc010000
    74f8:	00004c01 	.word	0x00004c01
    74fc:	0033e700 	.word	0x0033e700
    7500:	30da1900 	.word	0x30da1900
    7504:	cc010000 	.word	0xcc010000
    7508:	00004c01 	.word	0x00004c01
    750c:	00340500 	.word	0x00340500
    7510:	323b1900 	.word	0x323b1900
    7514:	cc010000 	.word	0xcc010000
    7518:	00004c01 	.word	0x00004c01
    751c:	00342300 	.word	0x00342300
    7520:	2dbc1900 	.word	0x2dbc1900
    7524:	ce010000 	.word	0xce010000
    7528:	0001f301 	.word	0x0001f301
    752c:	00344100 	.word	0x00344100
    7530:	011c0000 	.word	0x011c0000
    7534:	0000337f 	.word	0x0000337f
    7538:	01019a01 	.word	0x01019a01
    753c:	000001f3 	.word	0x000001f3
    7540:	08005a44 	.word	0x08005a44
    7544:	08005a88 	.word	0x08005a88
    7548:	00003480 	.word	0x00003480
    754c:	00000609 	.word	0x00000609
    7550:	00426a18 	.word	0x00426a18
    7554:	01990100 	.word	0x01990100
    7558:	0000003a 	.word	0x0000003a
    755c:	0000349f 	.word	0x0000349f
    7560:	00330e18 	.word	0x00330e18
    7564:	01990100 	.word	0x01990100
    7568:	0000005e 	.word	0x0000005e
    756c:	000034bd 	.word	0x000034bd
    7570:	002dbc19 	.word	0x002dbc19
    7574:	019b0100 	.word	0x019b0100
    7578:	000001f3 	.word	0x000001f3
    757c:	000034db 	.word	0x000034db
    7580:	b3011c00 	.word	0xb3011c00
    7584:	01000033 	.word	0x01000033
    7588:	f3010172 	.word	0xf3010172
    758c:	88000001 	.word	0x88000001
    7590:	c008005a 	.word	0xc008005a
    7594:	f908005a 	.word	0xf908005a
    7598:	58000034 	.word	0x58000034
    759c:	18000006 	.word	0x18000006
    75a0:	0000426a 	.word	0x0000426a
    75a4:	3a017101 	.word	0x3a017101
    75a8:	18000000 	.word	0x18000000
    75ac:	18000035 	.word	0x18000035
    75b0:	0000330e 	.word	0x0000330e
    75b4:	4c017101 	.word	0x4c017101
    75b8:	36000000 	.word	0x36000000
    75bc:	19000035 	.word	0x19000035
    75c0:	00002dbc 	.word	0x00002dbc
    75c4:	f3017301 	.word	0xf3017301
    75c8:	54000001 	.word	0x54000001
    75cc:	00000035 	.word	0x00000035
    75d0:	33fa011c 	.word	0x33fa011c
    75d4:	37010000 	.word	0x37010000
    75d8:	01f30101 	.word	0x01f30101
    75dc:	5ac00000 	.word	0x5ac00000
    75e0:	5b080800 	.word	0x5b080800
    75e4:	35720800 	.word	0x35720800
    75e8:	06a70000 	.word	0x06a70000
    75ec:	6a180000 	.word	0x6a180000
    75f0:	01000042 	.word	0x01000042
    75f4:	003a0136 	.word	0x003a0136
    75f8:	35910000 	.word	0x35910000
    75fc:	0e180000 	.word	0x0e180000
    7600:	01000033 	.word	0x01000033
    7604:	003a0136 	.word	0x003a0136
    7608:	35af0000 	.word	0x35af0000
    760c:	bc190000 	.word	0xbc190000
    7610:	0100002d 	.word	0x0100002d
    7614:	01f30138 	.word	0x01f30138
    7618:	35cd0000 	.word	0x35cd0000
    761c:	21000000 	.word	0x21000000
    7620:	0030ec01 	.word	0x0030ec01
    7624:	01f80100 	.word	0x01f80100
    7628:	000001f3 	.word	0x000001f3
    762c:	08005b08 	.word	0x08005b08
    7630:	08005b80 	.word	0x08005b80
    7634:	000035f6 	.word	0x000035f6
    7638:	000006d4 	.word	0x000006d4
    763c:	002dbc22 	.word	0x002dbc22
    7640:	f3f90100 	.word	0xf3f90100
    7644:	15000001 	.word	0x15000001
    7648:	00000036 	.word	0x00000036
    764c:	31750121 	.word	0x31750121
    7650:	d5010000 	.word	0xd5010000
    7654:	0001f301 	.word	0x0001f301
    7658:	005b8000 	.word	0x005b8000
    765c:	005bbc08 	.word	0x005bbc08
    7660:	00363e08 	.word	0x00363e08
    7664:	00070100 	.word	0x00070100
    7668:	2dbc2200 	.word	0x2dbc2200
    766c:	d6010000 	.word	0xd6010000
    7670:	000001f3 	.word	0x000001f3
    7674:	0000365d 	.word	0x0000365d
    7678:	21012300 	.word	0x21012300
    767c:	01000031 	.word	0x01000031
    7680:	01f301ae 	.word	0x01f301ae
    7684:	5bbc0000 	.word	0x5bbc0000
    7688:	5c040800 	.word	0x5c040800
    768c:	367b0800 	.word	0x367b0800
    7690:	14120000 	.word	0x14120000
    7694:	01000032 	.word	0x01000032
    7698:	00003aad 	.word	0x00003aad
    769c:	0036a600 	.word	0x0036a600
    76a0:	2dbc2200 	.word	0x2dbc2200
    76a4:	af010000 	.word	0xaf010000
    76a8:	000001f3 	.word	0x000001f3
    76ac:	000036c4 	.word	0x000036c4
    76b0:	06440000 	.word	0x06440000
    76b4:	00020000 	.word	0x00020000
    76b8:	00001ec6 	.word	0x00001ec6
    76bc:	01c60104 	.word	0x01c60104
    76c0:	c9010000 	.word	0xc9010000
    76c4:	9d000034 	.word	0x9d000034
    76c8:	04000003 	.word	0x04000003
    76cc:	8c08005c 	.word	0x8c08005c
    76d0:	7a08005e 	.word	0x7a08005e
    76d4:	0200001e 	.word	0x0200001e
    76d8:	21500504 	.word	0x21500504
    76dc:	02020000 	.word	0x02020000
    76e0:	00049505 	.word	0x00049505
    76e4:	06010200 	.word	0x06010200
    76e8:	00000469 	.word	0x00000469
    76ec:	32337503 	.word	0x32337503
    76f0:	45270200 	.word	0x45270200
    76f4:	02000000 	.word	0x02000000
    76f8:	21f10704 	.word	0x21f10704
    76fc:	75030000 	.word	0x75030000
    7700:	02003631 	.word	0x02003631
    7704:	00005728 	.word	0x00005728
    7708:	07020200 	.word	0x07020200
    770c:	00000222 	.word	0x00000222
    7710:	00387503 	.word	0x00387503
    7714:	00682902 	.word	0x00682902
    7718:	01020000 	.word	0x01020000
    771c:	00046708 	.word	0x00046708
    7720:	00450400 	.word	0x00450400
    7724:	01050000 	.word	0x01050000
    7728:	00893c02 	.word	0x00893c02
    772c:	6c060000 	.word	0x6c060000
    7730:	00000024 	.word	0x00000024
    7734:	00043906 	.word	0x00043906
    7738:	07000100 	.word	0x07000100
    773c:	00002951 	.word	0x00002951
    7740:	00743c02 	.word	0x00743c02
    7744:	04080000 	.word	0x04080000
    7748:	031c0907 	.word	0x031c0907
    774c:	010a014f 	.word	0x010a014f
    7750:	430a0000 	.word	0x430a0000
    7754:	03004c52 	.word	0x03004c52
    7758:	006f0150 	.word	0x006f0150
    775c:	23020000 	.word	0x23020000
    7760:	52430a00 	.word	0x52430a00
    7764:	51030048 	.word	0x51030048
    7768:	00006f01 	.word	0x00006f01
    776c:	04230200 	.word	0x04230200
    7770:	5244490a 	.word	0x5244490a
    7774:	01520300 	.word	0x01520300
    7778:	0000006f 	.word	0x0000006f
    777c:	0a082302 	.word	0x0a082302
    7780:	0052444f 	.word	0x0052444f
    7784:	6f015303 	.word	0x6f015303
    7788:	02000000 	.word	0x02000000
    778c:	790b0c23 	.word	0x790b0c23
    7790:	03000024 	.word	0x03000024
    7794:	006f0154 	.word	0x006f0154
    7798:	23020000 	.word	0x23020000
    779c:	52420a10 	.word	0x52420a10
    77a0:	55030052 	.word	0x55030052
    77a4:	00006f01 	.word	0x00006f01
    77a8:	14230200 	.word	0x14230200
    77ac:	0025230b 	.word	0x0025230b
    77b0:	01560300 	.word	0x01560300
    77b4:	0000006f 	.word	0x0000006f
    77b8:	00182302 	.word	0x00182302
    77bc:	0023e40c 	.word	0x0023e40c
    77c0:	01570300 	.word	0x01570300
    77c4:	00000097 	.word	0x00000097
    77c8:	5a031809 	.word	0x5a031809
    77cc:	00014d01 	.word	0x00014d01
    77d0:	36100b00 	.word	0x36100b00
    77d4:	5b030000 	.word	0x5b030000
    77d8:	00006f01 	.word	0x00006f01
    77dc:	00230200 	.word	0x00230200
    77e0:	0035f50b 	.word	0x0035f50b
    77e4:	015c0300 	.word	0x015c0300
    77e8:	0000006f 	.word	0x0000006f
    77ec:	0b042302 	.word	0x0b042302
    77f0:	000034c2 	.word	0x000034c2
    77f4:	5d015d03 	.word	0x5d015d03
    77f8:	02000001 	.word	0x02000001
    77fc:	0d000823 	.word	0x0d000823
    7800:	00000045 	.word	0x00000045
    7804:	0000015d 	.word	0x0000015d
    7808:	0000940e 	.word	0x0000940e
    780c:	04000300 	.word	0x04000300
    7810:	0000014d 	.word	0x0000014d
    7814:	23040105 	.word	0x23040105
    7818:	0000017d 	.word	0x0000017d
    781c:	00280006 	.word	0x00280006
    7820:	1a060100 	.word	0x1a060100
    7824:	02000028 	.word	0x02000028
    7828:	00287b06 	.word	0x00287b06
    782c:	07000300 	.word	0x07000300
    7830:	0000293f 	.word	0x0000293f
    7834:	01622704 	.word	0x01622704
    7838:	01050000 	.word	0x01050000
    783c:	01c22e04 	.word	0x01c22e04
    7840:	fb060000 	.word	0xfb060000
    7844:	00000028 	.word	0x00000028
    7848:	0029ac06 	.word	0x0029ac06
    784c:	6d060400 	.word	0x6d060400
    7850:	28000028 	.word	0x28000028
    7854:	0028d806 	.word	0x0028d806
    7858:	0600c800 	.word	0x0600c800
    785c:	0000279d 	.word	0x0000279d
    7860:	29720614 	.word	0x29720614
    7864:	06100000 	.word	0x06100000
    7868:	000029c2 	.word	0x000029c2
    786c:	27ae061c 	.word	0x27ae061c
    7870:	00180000 	.word	0x00180000
    7874:	00273207 	.word	0x00273207
    7878:	88360400 	.word	0x88360400
    787c:	0f000001 	.word	0x0f000001
    7880:	003f0404 	.word	0x003f0404
    7884:	10000002 	.word	0x10000002
    7888:	000026f4 	.word	0x000026f4
    788c:	004c4004 	.word	0x004c4004
    7890:	23020000 	.word	0x23020000
    7894:	276f1000 	.word	0x276f1000
    7898:	41040000 	.word	0x41040000
    789c:	0000017d 	.word	0x0000017d
    78a0:	10022302 	.word	0x10022302
    78a4:	000029d2 	.word	0x000029d2
    78a8:	01c24204 	.word	0x01c24204
    78ac:	23020000 	.word	0x23020000
    78b0:	3d070003 	.word	0x3d070003
    78b4:	04000028 	.word	0x04000028
    78b8:	0001cd43 	.word	0x0001cd43
    78bc:	04010500 	.word	0x04010500
    78c0:	00022047 	.word	0x00022047
    78c4:	34930600 	.word	0x34930600
    78c8:	06000000 	.word	0x06000000
    78cc:	0000344c 	.word	0x0000344c
    78d0:	eb070001 	.word	0xeb070001
    78d4:	04000035 	.word	0x04000035
    78d8:	00020b49 	.word	0x00020b49
    78dc:	b8011100 	.word	0xb8011100
    78e0:	01000034 	.word	0x01000034
    78e4:	5c04017d 	.word	0x5c04017d
    78e8:	5caa0800 	.word	0x5caa0800
    78ec:	36e20800 	.word	0x36e20800
    78f0:	02af0000 	.word	0x02af0000
    78f4:	fa120000 	.word	0xfa120000
    78f8:	01000035 	.word	0x01000035
    78fc:	0002af7c 	.word	0x0002af7c
    7900:	13500100 	.word	0x13500100
    7904:	00003600 	.word	0x00003600
    7908:	02b57c01 	.word	0x02b57c01
    790c:	370d0000 	.word	0x370d0000
    7910:	5f140000 	.word	0x5f140000
    7914:	01000035 	.word	0x01000035
    7918:	00003a7e 	.word	0x00003a7e
    791c:	14570100 	.word	0x14570100
    7920:	000035bc 	.word	0x000035bc
    7924:	003a7e01 	.word	0x003a7e01
    7928:	5c010000 	.word	0x5c010000
    792c:	00344514 	.word	0x00344514
    7930:	3a7e0100 	.word	0x3a7e0100
    7934:	01000000 	.word	0x01000000
    7938:	6f701551 	.word	0x6f701551
    793c:	7e010073 	.word	0x7e010073
    7940:	0000003a 	.word	0x0000003a
    7944:	00003736 	.word	0x00003736
    7948:	002e0714 	.word	0x002e0714
    794c:	3a7f0100 	.word	0x3a7f0100
    7950:	01000000 	.word	0x01000000
    7954:	34ec1654 	.word	0x34ec1654
    7958:	7f010000 	.word	0x7f010000
    795c:	0000003a 	.word	0x0000003a
    7960:	0a041700 	.word	0x0a041700
    7964:	17000001 	.word	0x17000001
    7968:	00020004 	.word	0x00020004
    796c:	7c011800 	.word	0x7c011800
    7970:	01000034 	.word	0x01000034
    7974:	5cac01e6 	.word	0x5cac01e6
    7978:	5cbc0800 	.word	0x5cbc0800
    797c:	5d010800 	.word	0x5d010800
    7980:	000002e0 	.word	0x000002e0
    7984:	00360012 	.word	0x00360012
    7988:	b5e50100 	.word	0xb5e50100
    798c:	01000002 	.word	0x01000002
    7990:	01190050 	.word	0x01190050
    7994:	00003532 	.word	0x00003532
    7998:	5e01f701 	.word	0x5e01f701
    799c:	bc000000 	.word	0xbc000000
    79a0:	c808005c 	.word	0xc808005c
    79a4:	0108005c 	.word	0x0108005c
    79a8:	0003235d 	.word	0x0003235d
    79ac:	35fa1300 	.word	0x35fa1300
    79b0:	f6010000 	.word	0xf6010000
    79b4:	000002af 	.word	0x000002af
    79b8:	0000376a 	.word	0x0000376a
    79bc:	0026f412 	.word	0x0026f412
    79c0:	4cf60100 	.word	0x4cf60100
    79c4:	01000000 	.word	0x01000000
    79c8:	2f471651 	.word	0x2f471651
    79cc:	f8010000 	.word	0xf8010000
    79d0:	0000005e 	.word	0x0000005e
    79d4:	8e011a00 	.word	0x8e011a00
    79d8:	01000035 	.word	0x01000035
    79dc:	4c010111 	.word	0x4c010111
    79e0:	c8000000 	.word	0xc8000000
    79e4:	ce08005c 	.word	0xce08005c
    79e8:	0108005c 	.word	0x0108005c
    79ec:	0003505d 	.word	0x0003505d
    79f0:	35fa1b00 	.word	0x35fa1b00
    79f4:	10010000 	.word	0x10010000
    79f8:	0002af01 	.word	0x0002af01
    79fc:	00377d00 	.word	0x00377d00
    7a00:	011a0000 	.word	0x011a0000
    7a04:	00003615 	.word	0x00003615
    7a08:	01012201 	.word	0x01012201
    7a0c:	0000005e 	.word	0x0000005e
    7a10:	08005cd0 	.word	0x08005cd0
    7a14:	08005cdc 	.word	0x08005cdc
    7a18:	03975d01 	.word	0x03975d01
    7a1c:	fa1b0000 	.word	0xfa1b0000
    7a20:	01000035 	.word	0x01000035
    7a24:	02af0121 	.word	0x02af0121
    7a28:	37900000 	.word	0x37900000
    7a2c:	f41c0000 	.word	0xf41c0000
    7a30:	01000026 	.word	0x01000026
    7a34:	004c0121 	.word	0x004c0121
    7a38:	51010000 	.word	0x51010000
    7a3c:	002f471d 	.word	0x002f471d
    7a40:	01230100 	.word	0x01230100
    7a44:	0000005e 	.word	0x0000005e
    7a48:	54011a00 	.word	0x54011a00
    7a4c:	01000034 	.word	0x01000034
    7a50:	4c01013c 	.word	0x4c01013c
    7a54:	dc000000 	.word	0xdc000000
    7a58:	e208005c 	.word	0xe208005c
    7a5c:	0108005c 	.word	0x0108005c
    7a60:	0003c45d 	.word	0x0003c45d
    7a64:	35fa1b00 	.word	0x35fa1b00
    7a68:	3b010000 	.word	0x3b010000
    7a6c:	0002af01 	.word	0x0002af01
    7a70:	0037a300 	.word	0x0037a300
    7a74:	011e0000 	.word	0x011e0000
    7a78:	000034ab 	.word	0x000034ab
    7a7c:	01014e01 	.word	0x01014e01
    7a80:	08005ce4 	.word	0x08005ce4
    7a84:	08005ce8 	.word	0x08005ce8
    7a88:	03f95d01 	.word	0x03f95d01
    7a8c:	fa1c0000 	.word	0xfa1c0000
    7a90:	01000035 	.word	0x01000035
    7a94:	02af014d 	.word	0x02af014d
    7a98:	50010000 	.word	0x50010000
    7a9c:	0026f41c 	.word	0x0026f41c
    7aa0:	014d0100 	.word	0x014d0100
    7aa4:	0000004c 	.word	0x0000004c
    7aa8:	1e005101 	.word	0x1e005101
    7aac:	00354801 	.word	0x00354801
    7ab0:	01610100 	.word	0x01610100
    7ab4:	005ce801 	.word	0x005ce801
    7ab8:	005cec08 	.word	0x005cec08
    7abc:	2e5d0108 	.word	0x2e5d0108
    7ac0:	1c000004 	.word	0x1c000004
    7ac4:	000035fa 	.word	0x000035fa
    7ac8:	af016001 	.word	0xaf016001
    7acc:	01000002 	.word	0x01000002
    7ad0:	26f41c50 	.word	0x26f41c50
    7ad4:	60010000 	.word	0x60010000
    7ad8:	00004c01 	.word	0x00004c01
    7adc:	00510100 	.word	0x00510100
    7ae0:	349d011e 	.word	0x349d011e
    7ae4:	77010000 	.word	0x77010000
    7ae8:	5cec0101 	.word	0x5cec0101
    7aec:	5cf60800 	.word	0x5cf60800
    7af0:	5d010800 	.word	0x5d010800
    7af4:	00000471 	.word	0x00000471
    7af8:	0035fa1c 	.word	0x0035fa1c
    7afc:	01760100 	.word	0x01760100
    7b00:	000002af 	.word	0x000002af
    7b04:	f41c5001 	.word	0xf41c5001
    7b08:	01000026 	.word	0x01000026
    7b0c:	004c0176 	.word	0x004c0176
    7b10:	51010000 	.word	0x51010000
    7b14:	00348c1c 	.word	0x00348c1c
    7b18:	01760100 	.word	0x01760100
    7b1c:	00000220 	.word	0x00000220
    7b20:	1e005201 	.word	0x1e005201
    7b24:	0035c701 	.word	0x0035c701
    7b28:	01910100 	.word	0x01910100
    7b2c:	005cf801 	.word	0x005cf801
    7b30:	005cfc08 	.word	0x005cfc08
    7b34:	a65d0108 	.word	0xa65d0108
    7b38:	1c000004 	.word	0x1c000004
    7b3c:	000035fa 	.word	0x000035fa
    7b40:	af019001 	.word	0xaf019001
    7b44:	01000002 	.word	0x01000002
    7b48:	35571c50 	.word	0x35571c50
    7b4c:	90010000 	.word	0x90010000
    7b50:	00004c01 	.word	0x00004c01
    7b54:	00510100 	.word	0x00510100
    7b58:	35a9011e 	.word	0x35a9011e
    7b5c:	a3010000 	.word	0xa3010000
    7b60:	5cfc0101 	.word	0x5cfc0101
    7b64:	5d0c0800 	.word	0x5d0c0800
    7b68:	5d010800 	.word	0x5d010800
    7b6c:	000004e9 	.word	0x000004e9
    7b70:	0035fa1c 	.word	0x0035fa1c
    7b74:	01a20100 	.word	0x01a20100
    7b78:	000002af 	.word	0x000002af
    7b7c:	f41c5001 	.word	0xf41c5001
    7b80:	01000026 	.word	0x01000026
    7b84:	004c01a2 	.word	0x004c01a2
    7b88:	51010000 	.word	0x51010000
    7b8c:	706d741f 	.word	0x706d741f
    7b90:	01a40100 	.word	0x01a40100
    7b94:	0000003a 	.word	0x0000003a
    7b98:	1e005301 	.word	0x1e005301
    7b9c:	00351001 	.word	0x00351001
    7ba0:	01c40100 	.word	0x01c40100
    7ba4:	005d0c01 	.word	0x005d0c01
    7ba8:	005d2c08 	.word	0x005d2c08
    7bac:	305d0108 	.word	0x305d0108
    7bb0:	1c000005 	.word	0x1c000005
    7bb4:	000034f4 	.word	0x000034f4
    7bb8:	5e01c301 	.word	0x5e01c301
    7bbc:	01000000 	.word	0x01000000
    7bc0:	357f1b50 	.word	0x357f1b50
    7bc4:	c3010000 	.word	0xc3010000
    7bc8:	00005e01 	.word	0x00005e01
    7bcc:	0037b600 	.word	0x0037b600
    7bd0:	2e072000 	.word	0x2e072000
    7bd4:	c5010000 	.word	0xc5010000
    7bd8:	00003a01 	.word	0x00003a01
    7bdc:	0037c900 	.word	0x0037c900
    7be0:	011e0000 	.word	0x011e0000
    7be4:	00003468 	.word	0x00003468
    7be8:	0101dd01 	.word	0x0101dd01
    7bec:	08005d2c 	.word	0x08005d2c
    7bf0:	08005d38 	.word	0x08005d38
    7bf4:	05575d01 	.word	0x05575d01
    7bf8:	6e1c0000 	.word	0x6e1c0000
    7bfc:	0100002d 	.word	0x0100002d
    7c00:	008901dc 	.word	0x008901dc
    7c04:	50010000 	.word	0x50010000
    7c08:	6b012100 	.word	0x6b012100
    7c0c:	01000035 	.word	0x01000035
    7c10:	38010208 	.word	0x38010208
    7c14:	9808005d 	.word	0x9808005d
    7c18:	0808005d 	.word	0x0808005d
    7c1c:	c6000038 	.word	0xc6000038
    7c20:	1c000005 	.word	0x1c000005
    7c24:	00003527 	.word	0x00003527
    7c28:	3a020701 	.word	0x3a020701
    7c2c:	01000000 	.word	0x01000000
    7c30:	2d6e1b50 	.word	0x2d6e1b50
    7c34:	07010000 	.word	0x07010000
    7c38:	00008902 	.word	0x00008902
    7c3c:	00382700 	.word	0x00382700
    7c40:	6d741f00 	.word	0x6d741f00
    7c44:	09010070 	.word	0x09010070
    7c48:	00003a02 	.word	0x00003a02
    7c4c:	1d540100 	.word	0x1d540100
    7c50:	000035d2 	.word	0x000035d2
    7c54:	3a020901 	.word	0x3a020901
    7c58:	20000000 	.word	0x20000000
    7c5c:	00002e07 	.word	0x00002e07
    7c60:	3a020901 	.word	0x3a020901
    7c64:	45000000 	.word	0x45000000
    7c68:	1d000038 	.word	0x1d000038
    7c6c:	000035a1 	.word	0x000035a1
    7c70:	3a020901 	.word	0x3a020901
    7c74:	00000000 	.word	0x00000000
    7c78:	35d70121 	.word	0x35d70121
    7c7c:	3a010000 	.word	0x3a010000
    7c80:	5d980102 	.word	0x5d980102
    7c84:	5dcc0800 	.word	0x5dcc0800
    7c88:	38840800 	.word	0x38840800
    7c8c:	060d0000 	.word	0x060d0000
    7c90:	f41b0000 	.word	0xf41b0000
    7c94:	01000034 	.word	0x01000034
    7c98:	005e0239 	.word	0x005e0239
    7c9c:	38a30000 	.word	0x38a30000
    7ca0:	7f1b0000 	.word	0x7f1b0000
    7ca4:	01000035 	.word	0x01000035
    7ca8:	005e0239 	.word	0x005e0239
    7cac:	38b60000 	.word	0x38b60000
    7cb0:	74220000 	.word	0x74220000
    7cb4:	0100706d 	.word	0x0100706d
    7cb8:	003a023b 	.word	0x003a023b
    7cbc:	23000000 	.word	0x23000000
    7cc0:	00362c01 	.word	0x00362c01
    7cc4:	016c0100 	.word	0x016c0100
    7cc8:	08005dcc 	.word	0x08005dcc
    7ccc:	08005de4 	.word	0x08005de4
    7cd0:	000038c9 	.word	0x000038c9
    7cd4:	35040124 	.word	0x35040124
    7cd8:	34010000 	.word	0x34010000
    7cdc:	005de401 	.word	0x005de401
    7ce0:	005e8c08 	.word	0x005e8c08
    7ce4:	0038f408 	.word	0x0038f408
    7ce8:	35fa1300 	.word	0x35fa1300
    7cec:	33010000 	.word	0x33010000
    7cf0:	000002af 	.word	0x000002af
    7cf4:	0000391f 	.word	0x0000391f
    7cf8:	08e30000 	.word	0x08e30000
    7cfc:	00020000 	.word	0x00020000
    7d00:	000020eb 	.word	0x000020eb
    7d04:	01c60104 	.word	0x01c60104
    7d08:	2f010000 	.word	0x2f010000
    7d0c:	9d000037 	.word	0x9d000037
    7d10:	8c000003 	.word	0x8c000003
    7d14:	1008005e 	.word	0x1008005e
    7d18:	f2080062 	.word	0xf2080062
    7d1c:	0200001f 	.word	0x0200001f
    7d20:	21500504 	.word	0x21500504
    7d24:	02020000 	.word	0x02020000
    7d28:	00049505 	.word	0x00049505
    7d2c:	06010200 	.word	0x06010200
    7d30:	00000469 	.word	0x00000469
    7d34:	32337503 	.word	0x32337503
    7d38:	45270200 	.word	0x45270200
    7d3c:	02000000 	.word	0x02000000
    7d40:	21f10704 	.word	0x21f10704
    7d44:	75030000 	.word	0x75030000
    7d48:	02003631 	.word	0x02003631
    7d4c:	00005728 	.word	0x00005728
    7d50:	07020200 	.word	0x07020200
    7d54:	00000222 	.word	0x00000222
    7d58:	00387503 	.word	0x00387503
    7d5c:	00682902 	.word	0x00682902
    7d60:	01020000 	.word	0x01020000
    7d64:	00046708 	.word	0x00046708
    7d68:	00450400 	.word	0x00450400
    7d6c:	6f050000 	.word	0x6f050000
    7d70:	06000000 	.word	0x06000000
    7d74:	8e3a0201 	.word	0x8e3a0201
    7d78:	07000000 	.word	0x07000000
    7d7c:	00000ebd 	.word	0x00000ebd
    7d80:	45530800 	.word	0x45530800
    7d84:	00010054 	.word	0x00010054
    7d88:	003bd609 	.word	0x003bd609
    7d8c:	793a0200 	.word	0x793a0200
    7d90:	06000000 	.word	0x06000000
    7d94:	ae3c0201 	.word	0xae3c0201
    7d98:	07000000 	.word	0x07000000
    7d9c:	0000246c 	.word	0x0000246c
    7da0:	04390700 	.word	0x04390700
    7da4:	00010000 	.word	0x00010000
    7da8:	00295109 	.word	0x00295109
    7dac:	993c0200 	.word	0x993c0200
    7db0:	0a000000 	.word	0x0a000000
    7db4:	3c0b0704 	.word	0x3c0b0704
    7db8:	01820303 	.word	0x01820303
    7dbc:	00000175 	.word	0x00000175
    7dc0:	0039270c 	.word	0x0039270c
    7dc4:	01830300 	.word	0x01830300
    7dc8:	00000185 	.word	0x00000185
    7dcc:	0c002302 	.word	0x0c002302
    7dd0:	00002bb3 	.word	0x00002bb3
    7dd4:	8a018403 	.word	0x8a018403
    7dd8:	02000001 	.word	0x02000001
    7ddc:	eb0c0823 	.word	0xeb0c0823
    7de0:	03000038 	.word	0x03000038
    7de4:	019a0185 	.word	0x019a0185
    7de8:	23030000 	.word	0x23030000
    7dec:	b70c0180 	.word	0xb70c0180
    7df0:	03000037 	.word	0x03000037
    7df4:	018a0186 	.word	0x018a0186
    7df8:	23030000 	.word	0x23030000
    7dfc:	010c0188 	.word	0x010c0188
    7e00:	03000039 	.word	0x03000039
    7e04:	019f0187 	.word	0x019f0187
    7e08:	23030000 	.word	0x23030000
    7e0c:	bd0c0280 	.word	0xbd0c0280
    7e10:	0300002b 	.word	0x0300002b
    7e14:	018a0188 	.word	0x018a0188
    7e18:	23030000 	.word	0x23030000
    7e1c:	770c0288 	.word	0x770c0288
    7e20:	03000038 	.word	0x03000038
    7e24:	01a40189 	.word	0x01a40189
    7e28:	23030000 	.word	0x23030000
    7e2c:	c70c0380 	.word	0xc70c0380
    7e30:	0300002b 	.word	0x0300002b
    7e34:	018a018a 	.word	0x018a018a
    7e38:	23030000 	.word	0x23030000
    7e3c:	3c0c0388 	.word	0x3c0c0388
    7e40:	03000036 	.word	0x03000036
    7e44:	01a9018b 	.word	0x01a9018b
    7e48:	23030000 	.word	0x23030000
    7e4c:	d10c0480 	.word	0xd10c0480
    7e50:	0300002b 	.word	0x0300002b
    7e54:	01ae018c 	.word	0x01ae018c
    7e58:	23030000 	.word	0x23030000
    7e5c:	490d0488 	.word	0x490d0488
    7e60:	03005250 	.word	0x03005250
    7e64:	01ce018d 	.word	0x01ce018d
    7e68:	23030000 	.word	0x23030000
    7e6c:	0e000680 	.word	0x0e000680
    7e70:	00000045 	.word	0x00000045
    7e74:	00000185 	.word	0x00000185
    7e78:	0000b90f 	.word	0x0000b90f
    7e7c:	04000100 	.word	0x04000100
    7e80:	00000175 	.word	0x00000175
    7e84:	00003a0e 	.word	0x00003a0e
    7e88:	00019a00 	.word	0x00019a00
    7e8c:	00b90f00 	.word	0x00b90f00
    7e90:	001d0000 	.word	0x001d0000
    7e94:	00017504 	.word	0x00017504
    7e98:	01750400 	.word	0x01750400
    7e9c:	75040000 	.word	0x75040000
    7ea0:	04000001 	.word	0x04000001
    7ea4:	00000175 	.word	0x00000175
    7ea8:	00003a0e 	.word	0x00003a0e
    7eac:	0001be00 	.word	0x0001be00
    7eb0:	00b90f00 	.word	0x00b90f00
    7eb4:	003d0000 	.word	0x003d0000
    7eb8:	0000450e 	.word	0x0000450e
    7ebc:	0001ce00 	.word	0x0001ce00
    7ec0:	00b90f00 	.word	0x00b90f00
    7ec4:	000e0000 	.word	0x000e0000
    7ec8:	0001be04 	.word	0x0001be04
    7ecc:	03401000 	.word	0x03401000
    7ed0:	02af0191 	.word	0x02af0191
    7ed4:	5a0c0000 	.word	0x5a0c0000
    7ed8:	03000037 	.word	0x03000037
    7edc:	00740192 	.word	0x00740192
    7ee0:	23020000 	.word	0x23020000
    7ee4:	37b20c00 	.word	0x37b20c00
    7ee8:	93030000 	.word	0x93030000
    7eec:	00006f01 	.word	0x00006f01
    7ef0:	04230200 	.word	0x04230200
    7ef4:	0038fc0c 	.word	0x0038fc0c
    7ef8:	01940300 	.word	0x01940300
    7efc:	0000006f 	.word	0x0000006f
    7f00:	0c082302 	.word	0x0c082302
    7f04:	0000385d 	.word	0x0000385d
    7f08:	6f019503 	.word	0x6f019503
    7f0c:	02000000 	.word	0x02000000
    7f10:	530d0c23 	.word	0x530d0c23
    7f14:	03005243 	.word	0x03005243
    7f18:	006f0196 	.word	0x006f0196
    7f1c:	23020000 	.word	0x23020000
    7f20:	43430d10 	.word	0x43430d10
    7f24:	97030052 	.word	0x97030052
    7f28:	00006f01 	.word	0x00006f01
    7f2c:	14230200 	.word	0x14230200
    7f30:	0038860c 	.word	0x0038860c
    7f34:	01980300 	.word	0x01980300
    7f38:	000002bf 	.word	0x000002bf
    7f3c:	0c182302 	.word	0x0c182302
    7f40:	0000388b 	.word	0x0000388b
    7f44:	6f019903 	.word	0x6f019903
    7f48:	02000000 	.word	0x02000000
    7f4c:	380c2423 	.word	0x380c2423
    7f50:	03000038 	.word	0x03000038
    7f54:	006f019a 	.word	0x006f019a
    7f58:	23020000 	.word	0x23020000
    7f5c:	390b0c28 	.word	0x390b0c28
    7f60:	9b030000 	.word	0x9b030000
    7f64:	00006f01 	.word	0x00006f01
    7f68:	2c230200 	.word	0x2c230200
    7f6c:	0039060c 	.word	0x0039060c
    7f70:	019c0300 	.word	0x019c0300
    7f74:	0000006f 	.word	0x0000006f
    7f78:	0c302302 	.word	0x0c302302
    7f7c:	000038a1 	.word	0x000038a1
    7f80:	6f019d03 	.word	0x6f019d03
    7f84:	02000000 	.word	0x02000000
    7f88:	0f0c3423 	.word	0x0f0c3423
    7f8c:	03000038 	.word	0x03000038
    7f90:	006f019e 	.word	0x006f019e
    7f94:	23020000 	.word	0x23020000
    7f98:	39220c38 	.word	0x39220c38
    7f9c:	9f030000 	.word	0x9f030000
    7fa0:	00006f01 	.word	0x00006f01
    7fa4:	3c230200 	.word	0x3c230200
    7fa8:	00450e00 	.word	0x00450e00
    7fac:	02bf0000 	.word	0x02bf0000
    7fb0:	b90f0000 	.word	0xb90f0000
    7fb4:	02000000 	.word	0x02000000
    7fb8:	02af0400 	.word	0x02af0400
    7fbc:	04110000 	.word	0x04110000
    7fc0:	03051b04 	.word	0x03051b04
    7fc4:	b6120000 	.word	0xb6120000
    7fc8:	04000028 	.word	0x04000028
    7fcc:	00005e1c 	.word	0x00005e1c
    7fd0:	00230200 	.word	0x00230200
    7fd4:	00291d12 	.word	0x00291d12
    7fd8:	5e1d0400 	.word	0x5e1d0400
    7fdc:	02000000 	.word	0x02000000
    7fe0:	82120123 	.word	0x82120123
    7fe4:	04000027 	.word	0x04000027
    7fe8:	00005e1e 	.word	0x00005e1e
    7fec:	02230200 	.word	0x02230200
    7ff0:	00270f12 	.word	0x00270f12
    7ff4:	ae1f0400 	.word	0xae1f0400
    7ff8:	02000000 	.word	0x02000000
    7ffc:	09000323 	.word	0x09000323
    8000:	00002961 	.word	0x00002961
    8004:	02c42004 	.word	0x02c42004
    8008:	01130000 	.word	0x01130000
    800c:	00003a58 	.word	0x00003a58
    8010:	8c012501 	.word	0x8c012501
    8014:	c008005e 	.word	0xc008005e
    8018:	0108005e 	.word	0x0108005e
    801c:	0003355d 	.word	0x0003355d
    8020:	1a5a1400 	.word	0x1a5a1400
    8024:	26010000 	.word	0x26010000
    8028:	0000003a 	.word	0x0000003a
    802c:	13005201 	.word	0x13005201
    8030:	0039e501 	.word	0x0039e501
    8034:	013c0100 	.word	0x013c0100
    8038:	08005ec0 	.word	0x08005ec0
    803c:	08005ef0 	.word	0x08005ef0
    8040:	03585d01 	.word	0x03585d01
    8044:	5a150000 	.word	0x5a150000
    8048:	0100001a 	.word	0x0100001a
    804c:	00003a3d 	.word	0x00003a3d
    8050:	01130000 	.word	0x01130000
    8054:	00003a64 	.word	0x00003a64
    8058:	f0016201 	.word	0xf0016201
    805c:	0408005e 	.word	0x0408005e
    8060:	0108005f 	.word	0x0108005f
    8064:	00037f5d 	.word	0x00037f5d
    8068:	37601600 	.word	0x37601600
    806c:	61010000 	.word	0x61010000
    8070:	0000003a 	.word	0x0000003a
    8074:	0000393e 	.word	0x0000393e
    8078:	7c011700 	.word	0x7c011700
    807c:	01000038 	.word	0x01000038
    8080:	5f040175 	.word	0x5f040175
    8084:	5f800800 	.word	0x5f800800
    8088:	39510800 	.word	0x39510800
    808c:	03eb0000 	.word	0x03eb0000
    8090:	60160000 	.word	0x60160000
    8094:	01000036 	.word	0x01000036
    8098:	0003eb74 	.word	0x0003eb74
    809c:	00397000 	.word	0x00397000
    80a0:	38f01800 	.word	0x38f01800
    80a4:	76010000 	.word	0x76010000
    80a8:	0000003a 	.word	0x0000003a
    80ac:	0000398e 	.word	0x0000398e
    80b0:	002e0718 	.word	0x002e0718
    80b4:	3a760100 	.word	0x3a760100
    80b8:	b7000000 	.word	0xb7000000
    80bc:	18000039 	.word	0x18000039
    80c0:	000035a1 	.word	0x000035a1
    80c4:	003a7601 	.word	0x003a7601
    80c8:	39d50000 	.word	0x39d50000
    80cc:	e8150000 	.word	0xe8150000
    80d0:	01000036 	.word	0x01000036
    80d4:	00003a77 	.word	0x00003a77
    80d8:	38a71500 	.word	0x38a71500
    80dc:	77010000 	.word	0x77010000
    80e0:	0000003a 	.word	0x0000003a
    80e4:	05041900 	.word	0x05041900
    80e8:	13000003 	.word	0x13000003
    80ec:	0038db01 	.word	0x0038db01
    80f0:	01a90100 	.word	0x01a90100
    80f4:	08005f80 	.word	0x08005f80
    80f8:	08005f8c 	.word	0x08005f8c
    80fc:	04165d01 	.word	0x04165d01
    8100:	601a0000 	.word	0x601a0000
    8104:	01000036 	.word	0x01000036
    8108:	0003eba8 	.word	0x0003eba8
    810c:	00500100 	.word	0x00500100
    8110:	3670011b 	.word	0x3670011b
    8114:	06010000 	.word	0x06010000
    8118:	004c0101 	.word	0x004c0101
    811c:	5f8c0000 	.word	0x5f8c0000
    8120:	5fa40800 	.word	0x5fa40800
    8124:	5d010800 	.word	0x5d010800
    8128:	39c2011c 	.word	0x39c2011c
    812c:	13010000 	.word	0x13010000
    8130:	008e0101 	.word	0x008e0101
    8134:	5fa40000 	.word	0x5fa40000
    8138:	5fc80800 	.word	0x5fc80800
    813c:	5d010800 	.word	0x5d010800
    8140:	00000475 	.word	0x00000475
    8144:	0028b61d 	.word	0x0028b61d
    8148:	01120100 	.word	0x01120100
    814c:	0000005e 	.word	0x0000005e
    8150:	000039e8 	.word	0x000039e8
    8154:	003a7d1e 	.word	0x003a7d1e
    8158:	01140100 	.word	0x01140100
    815c:	0000008e 	.word	0x0000008e
    8160:	706d741f 	.word	0x706d741f
    8164:	01150100 	.word	0x01150100
    8168:	0000003a 	.word	0x0000003a
    816c:	20005201 	.word	0x20005201
    8170:	00381401 	.word	0x00381401
    8174:	012f0100 	.word	0x012f0100
    8178:	005fc801 	.word	0x005fc801
    817c:	005fd408 	.word	0x005fd408
    8180:	9c5d0108 	.word	0x9c5d0108
    8184:	21000004 	.word	0x21000004
    8188:	000028b6 	.word	0x000028b6
    818c:	5e012e01 	.word	0x5e012e01
    8190:	01000000 	.word	0x01000000
    8194:	01200050 	.word	0x01200050
    8198:	00003641 	.word	0x00003641
    819c:	01013e01 	.word	0x01013e01
    81a0:	08005fd4 	.word	0x08005fd4
    81a4:	08005fec 	.word	0x08005fec
    81a8:	04c55d01 	.word	0x04c55d01
    81ac:	b61d0000 	.word	0xb61d0000
    81b0:	01000028 	.word	0x01000028
    81b4:	005e013d 	.word	0x005e013d
    81b8:	39fb0000 	.word	0x39fb0000
    81bc:	1b000000 	.word	0x1b000000
    81c0:	00378701 	.word	0x00378701
    81c4:	014e0100 	.word	0x014e0100
    81c8:	00004c01 	.word	0x00004c01
    81cc:	005fec00 	.word	0x005fec00
    81d0:	005ffc08 	.word	0x005ffc08
    81d4:	1c5d0108 	.word	0x1c5d0108
    81d8:	003a3601 	.word	0x003a3601
    81dc:	015b0100 	.word	0x015b0100
    81e0:	00008e01 	.word	0x00008e01
    81e4:	005ffc00 	.word	0x005ffc00
    81e8:	00602008 	.word	0x00602008
    81ec:	245d0108 	.word	0x245d0108
    81f0:	1d000005 	.word	0x1d000005
    81f4:	000028b6 	.word	0x000028b6
    81f8:	5e015a01 	.word	0x5e015a01
    81fc:	0e000000 	.word	0x0e000000
    8200:	1e00003a 	.word	0x1e00003a
    8204:	00003a0d 	.word	0x00003a0d
    8208:	8e015c01 	.word	0x8e015c01
    820c:	1f000000 	.word	0x1f000000
    8210:	00706d74 	.word	0x00706d74
    8214:	3a015d01 	.word	0x3a015d01
    8218:	01000000 	.word	0x01000000
    821c:	011b0052 	.word	0x011b0052
    8220:	00003752 	.word	0x00003752
    8224:	01017801 	.word	0x01017801
    8228:	0000003a 	.word	0x0000003a
    822c:	08006020 	.word	0x08006020
    8230:	0800602c 	.word	0x0800602c
    8234:	01205d01 	.word	0x01205d01
    8238:	00003863 	.word	0x00003863
    823c:	01018a01 	.word	0x01018a01
    8240:	0800602c 	.word	0x0800602c
    8244:	08006040 	.word	0x08006040
    8248:	05735d01 	.word	0x05735d01
    824c:	00210000 	.word	0x00210000
    8250:	0100003a 	.word	0x0100003a
    8254:	003a0189 	.word	0x003a0189
    8258:	50010000 	.word	0x50010000
    825c:	000ea91d 	.word	0x000ea91d
    8260:	01890100 	.word	0x01890100
    8264:	0000003a 	.word	0x0000003a
    8268:	00003a21 	.word	0x00003a21
    826c:	cf012200 	.word	0xcf012200
    8270:	01000036 	.word	0x01000036
    8274:	4001019a 	.word	0x4001019a
    8278:	50080060 	.word	0x50080060
    827c:	01080060 	.word	0x01080060
    8280:	c001225d 	.word	0xc001225d
    8284:	01000037 	.word	0x01000037
    8288:	500101a6 	.word	0x500101a6
    828c:	60080060 	.word	0x60080060
    8290:	01080060 	.word	0x01080060
    8294:	c701205d 	.word	0xc701205d
    8298:	01000038 	.word	0x01000038
    829c:	600101b9 	.word	0x600101b9
    82a0:	7c080060 	.word	0x7c080060
    82a4:	01080060 	.word	0x01080060
    82a8:	0005d05d 	.word	0x0005d05d
    82ac:	3a292100 	.word	0x3a292100
    82b0:	b8010000 	.word	0xb8010000
    82b4:	00005e01 	.word	0x00005e01
    82b8:	21500100 	.word	0x21500100
    82bc:	00002d6e 	.word	0x00002d6e
    82c0:	ae01b801 	.word	0xae01b801
    82c4:	01000000 	.word	0x01000000
    82c8:	01200051 	.word	0x01200051
    82cc:	000038ae 	.word	0x000038ae
    82d0:	0101d701 	.word	0x0101d701
    82d4:	0800607c 	.word	0x0800607c
    82d8:	080060a4 	.word	0x080060a4
    82dc:	06155d01 	.word	0x06155d01
    82e0:	a41d0000 	.word	0xa41d0000
    82e4:	01000037 	.word	0x01000037
    82e8:	003a01d6 	.word	0x003a01d6
    82ec:	3a340000 	.word	0x3a340000
    82f0:	6e210000 	.word	0x6e210000
    82f4:	0100002d 	.word	0x0100002d
    82f8:	00ae01d6 	.word	0x00ae01d6
    82fc:	51010000 	.word	0x51010000
    8300:	002e0723 	.word	0x002e0723
    8304:	01d80100 	.word	0x01d80100
    8308:	0000003a 	.word	0x0000003a
    830c:	24005001 	.word	0x24005001
    8310:	00370e01 	.word	0x00370e01
    8314:	02000100 	.word	0x02000100
    8318:	0060a401 	.word	0x0060a401
    831c:	0060fc08 	.word	0x0060fc08
    8320:	003a4708 	.word	0x003a4708
    8324:	00069800 	.word	0x00069800
    8328:	37a41d00 	.word	0x37a41d00
    832c:	fe010000 	.word	0xfe010000
    8330:	00003a01 	.word	0x00003a01
    8334:	003a6600 	.word	0x003a6600
    8338:	39a21d00 	.word	0x39a21d00
    833c:	fe010000 	.word	0xfe010000
    8340:	00005e01 	.word	0x00005e01
    8344:	003a7900 	.word	0x003a7900
    8348:	36a61d00 	.word	0x36a61d00
    834c:	ff010000 	.word	0xff010000
    8350:	00005e01 	.word	0x00005e01
    8354:	003a8c00 	.word	0x003a8c00
    8358:	35d22500 	.word	0x35d22500
    835c:	01010000 	.word	0x01010000
    8360:	00003a02 	.word	0x00003a02
    8364:	003a9f00 	.word	0x003a9f00
    8368:	39481e00 	.word	0x39481e00
    836c:	01010000 	.word	0x01010000
    8370:	00003a02 	.word	0x00003a02
    8374:	3a1d1e00 	.word	0x3a1d1e00
    8378:	01010000 	.word	0x01010000
    837c:	00003a02 	.word	0x00003a02
    8380:	38f02500 	.word	0x38f02500
    8384:	02010000 	.word	0x02010000
    8388:	00003a02 	.word	0x00003a02
    838c:	003ab200 	.word	0x003ab200
    8390:	011c0000 	.word	0x011c0000
    8394:	0000394d 	.word	0x0000394d
    8398:	01022901 	.word	0x01022901
    839c:	0000008e 	.word	0x0000008e
    83a0:	080060fc 	.word	0x080060fc
    83a4:	0800611c 	.word	0x0800611c
    83a8:	06ed5d01 	.word	0x06ed5d01
    83ac:	a41d0000 	.word	0xa41d0000
    83b0:	01000037 	.word	0x01000037
    83b4:	003a0228 	.word	0x003a0228
    83b8:	3adb0000 	.word	0x3adb0000
    83bc:	471e0000 	.word	0x471e0000
    83c0:	0100002f 	.word	0x0100002f
    83c4:	008e022a 	.word	0x008e022a
    83c8:	74260000 	.word	0x74260000
    83cc:	0100706d 	.word	0x0100706d
    83d0:	003a022b 	.word	0x003a022b
    83d4:	31250000 	.word	0x31250000
    83d8:	01000038 	.word	0x01000038
    83dc:	003a022b 	.word	0x003a022b
    83e0:	3aee0000 	.word	0x3aee0000
    83e4:	20000000 	.word	0x20000000
    83e8:	00383d01 	.word	0x00383d01
    83ec:	024f0100 	.word	0x024f0100
    83f0:	00611c01 	.word	0x00611c01
    83f4:	00613408 	.word	0x00613408
    83f8:	225d0108 	.word	0x225d0108
    83fc:	1d000007 	.word	0x1d000007
    8400:	000037a4 	.word	0x000037a4
    8404:	3a024e01 	.word	0x3a024e01
    8408:	0c000000 	.word	0x0c000000
    840c:	2600003b 	.word	0x2600003b
    8410:	00706d74 	.word	0x00706d74
    8414:	3a025001 	.word	0x3a025001
    8418:	00000000 	.word	0x00000000
    841c:	39730120 	.word	0x39730120
    8420:	67010000 	.word	0x67010000
    8424:	61340102 	.word	0x61340102
    8428:	614c0800 	.word	0x614c0800
    842c:	5d010800 	.word	0x5d010800
    8430:	00000757 	.word	0x00000757
    8434:	0037a41d 	.word	0x0037a41d
    8438:	02660100 	.word	0x02660100
    843c:	0000003a 	.word	0x0000003a
    8440:	00003b1f 	.word	0x00003b1f
    8444:	706d7426 	.word	0x706d7426
    8448:	02680100 	.word	0x02680100
    844c:	0000003a 	.word	0x0000003a
    8450:	d7011c00 	.word	0xd7011c00
    8454:	01000037 	.word	0x01000037
    8458:	8e010285 	.word	0x8e010285
    845c:	4c000000 	.word	0x4c000000
    8460:	6c080061 	.word	0x6c080061
    8464:	01080061 	.word	0x01080061
    8468:	0007aa5d 	.word	0x0007aa5d
    846c:	37a41d00 	.word	0x37a41d00
    8470:	84010000 	.word	0x84010000
    8474:	00003a02 	.word	0x00003a02
    8478:	003b3200 	.word	0x003b3200
    847c:	2f471e00 	.word	0x2f471e00
    8480:	86010000 	.word	0x86010000
    8484:	00008e02 	.word	0x00008e02
    8488:	6d742600 	.word	0x6d742600
    848c:	88010070 	.word	0x88010070
    8490:	00003a02 	.word	0x00003a02
    8494:	38312300 	.word	0x38312300
    8498:	88010000 	.word	0x88010000
    849c:	00003a02 	.word	0x00003a02
    84a0:	00530100 	.word	0x00530100
    84a4:	392c011c 	.word	0x392c011c
    84a8:	ad010000 	.word	0xad010000
    84ac:	003a0102 	.word	0x003a0102
    84b0:	616c0000 	.word	0x616c0000
    84b4:	61b00800 	.word	0x61b00800
    84b8:	5d010800 	.word	0x5d010800
    84bc:	00000807 	.word	0x00000807
    84c0:	0037a41d 	.word	0x0037a41d
    84c4:	02ac0100 	.word	0x02ac0100
    84c8:	0000003a 	.word	0x0000003a
    84cc:	00003b45 	.word	0x00003b45
    84d0:	00399525 	.word	0x00399525
    84d4:	02ae0100 	.word	0x02ae0100
    84d8:	0000003a 	.word	0x0000003a
    84dc:	00003b6e 	.word	0x00003b6e
    84e0:	002e0725 	.word	0x002e0725
    84e4:	02af0100 	.word	0x02af0100
    84e8:	0000003a 	.word	0x0000003a
    84ec:	00003b97 	.word	0x00003b97
    84f0:	00383125 	.word	0x00383125
    84f4:	02af0100 	.word	0x02af0100
    84f8:	0000003a 	.word	0x0000003a
    84fc:	00003bc0 	.word	0x00003bc0
    8500:	91011c00 	.word	0x91011c00
    8504:	01000036 	.word	0x01000036
    8508:	3a0102db 	.word	0x3a0102db
    850c:	b0000000 	.word	0xb0000000
    8510:	c4080061 	.word	0xc4080061
    8514:	01080061 	.word	0x01080061
    8518:	0008505d 	.word	0x0008505d
    851c:	37a41d00 	.word	0x37a41d00
    8520:	da010000 	.word	0xda010000
    8524:	00003a02 	.word	0x00003a02
    8528:	003bde00 	.word	0x003bde00
    852c:	37012500 	.word	0x37012500
    8530:	dc010000 	.word	0xdc010000
    8534:	00003a02 	.word	0x00003a02
    8538:	003bf100 	.word	0x003bf100
    853c:	6d742600 	.word	0x6d742600
    8540:	dd010070 	.word	0xdd010070
    8544:	00003a02 	.word	0x00003a02
    8548:	01270000 	.word	0x01270000
    854c:	00003891 	.word	0x00003891
    8550:	3a01fa01 	.word	0x3a01fa01
    8554:	c4000000 	.word	0xc4000000
    8558:	d0080061 	.word	0xd0080061
    855c:	04080061 	.word	0x04080061
    8560:	1700003c 	.word	0x1700003c
    8564:	0037fc01 	.word	0x0037fc01
    8568:	01eb0100 	.word	0x01eb0100
    856c:	080061d0 	.word	0x080061d0
    8570:	080061de 	.word	0x080061de
    8574:	00003c2f 	.word	0x00003c2f
    8578:	00000892 	.word	0x00000892
    857c:	0039f416 	.word	0x0039f416
    8580:	3aea0100 	.word	0x3aea0100
    8584:	5a000000 	.word	0x5a000000
    8588:	0000003c 	.word	0x0000003c
    858c:	37730128 	.word	0x37730128
    8590:	dd010000 	.word	0xdd010000
    8594:	0061e001 	.word	0x0061e001
    8598:	0061ec08 	.word	0x0061ec08
    859c:	003c6d08 	.word	0x003c6d08
    85a0:	10012800 	.word	0x10012800
    85a4:	01000039 	.word	0x01000039
    85a8:	61ec01d1 	.word	0x61ec01d1
    85ac:	61f80800 	.word	0x61f80800
    85b0:	3c980800 	.word	0x3c980800
    85b4:	01280000 	.word	0x01280000
    85b8:	000036ef 	.word	0x000036ef
    85bc:	f801c501 	.word	0xf801c501
    85c0:	04080061 	.word	0x04080061
    85c4:	c3080062 	.word	0xc3080062
    85c8:	2800003c 	.word	0x2800003c
    85cc:	0036bf01 	.word	0x0036bf01
    85d0:	01b90100 	.word	0x01b90100
    85d4:	08006204 	.word	0x08006204
    85d8:	08006210 	.word	0x08006210
    85dc:	00003cee 	.word	0x00003cee
    85e0:	00024300 	.word	0x00024300
    85e4:	44000200 	.word	0x44000200
    85e8:	04000023 	.word	0x04000023
    85ec:	0001c601 	.word	0x0001c601
    85f0:	3aeb0100 	.word	0x3aeb0100
    85f4:	039d0000 	.word	0x039d0000
    85f8:	62100000 	.word	0x62100000
    85fc:	62f00800 	.word	0x62f00800
    8600:	219c0800 	.word	0x219c0800
    8604:	04020000 	.word	0x04020000
    8608:	00215005 	.word	0x00215005
    860c:	05020200 	.word	0x05020200
    8610:	00000495 	.word	0x00000495
    8614:	69060102 	.word	0x69060102
    8618:	03000004 	.word	0x03000004
    861c:	00323375 	.word	0x00323375
    8620:	00452702 	.word	0x00452702
    8624:	04020000 	.word	0x04020000
    8628:	0021f107 	.word	0x0021f107
    862c:	07020200 	.word	0x07020200
    8630:	00000222 	.word	0x00000222
    8634:	00387503 	.word	0x00387503
    8638:	005d2902 	.word	0x005d2902
    863c:	01020000 	.word	0x01020000
    8640:	00046708 	.word	0x00046708
    8644:	00450400 	.word	0x00450400
    8648:	01050000 	.word	0x01050000
    864c:	007e3a02 	.word	0x007e3a02
    8650:	bd060000 	.word	0xbd060000
    8654:	0000000e 	.word	0x0000000e
    8658:	54455307 	.word	0x54455307
    865c:	08000100 	.word	0x08000100
    8660:	00003ddc 	.word	0x00003ddc
    8664:	00693a02 	.word	0x00693a02
    8668:	01050000 	.word	0x01050000
    866c:	009e3c02 	.word	0x009e3c02
    8670:	6c060000 	.word	0x6c060000
    8674:	00000024 	.word	0x00000024
    8678:	00043906 	.word	0x00043906
    867c:	08000100 	.word	0x08000100
    8680:	00002951 	.word	0x00002951
    8684:	00893c02 	.word	0x00893c02
    8688:	04090000 	.word	0x04090000
    868c:	03080a07 	.word	0x03080a07
    8690:	00d301a4 	.word	0x00d301a4
    8694:	430b0000 	.word	0x430b0000
    8698:	a5030052 	.word	0xa5030052
    869c:	00006401 	.word	0x00006401
    86a0:	00230200 	.word	0x00230200
    86a4:	5253430b 	.word	0x5253430b
    86a8:	01a60300 	.word	0x01a60300
    86ac:	00000064 	.word	0x00000064
    86b0:	00042302 	.word	0x00042302
    86b4:	3b52010c 	.word	0x3b52010c
    86b8:	52010000 	.word	0x52010000
    86bc:	00621001 	.word	0x00621001
    86c0:	00621c08 	.word	0x00621c08
    86c4:	f85d0108 	.word	0xf85d0108
    86c8:	0d000000 	.word	0x0d000000
    86cc:	00002d6e 	.word	0x00002d6e
    86d0:	009e5101 	.word	0x009e5101
    86d4:	50010000 	.word	0x50010000
    86d8:	e0010c00 	.word	0xe0010c00
    86dc:	0100003a 	.word	0x0100003a
    86e0:	621c0162 	.word	0x621c0162
    86e4:	62280800 	.word	0x62280800
    86e8:	5d010800 	.word	0x5d010800
    86ec:	0000011d 	.word	0x0000011d
    86f0:	002d6e0d 	.word	0x002d6e0d
    86f4:	9e610100 	.word	0x9e610100
    86f8:	01000000 	.word	0x01000000
    86fc:	010c0050 	.word	0x010c0050
    8700:	00003b0d 	.word	0x00003b0d
    8704:	28017b01 	.word	0x28017b01
    8708:	3c080062 	.word	0x3c080062
    870c:	01080062 	.word	0x01080062
    8710:	0001535d 	.word	0x0001535d
    8714:	3aca0e00 	.word	0x3aca0e00
    8718:	7a010000 	.word	0x7a010000
    871c:	0000003a 	.word	0x0000003a
    8720:	00003d19 	.word	0x00003d19
    8724:	002e070f 	.word	0x002e070f
    8728:	3a7c0100 	.word	0x3a7c0100
    872c:	2c000000 	.word	0x2c000000
    8730:	0000003d 	.word	0x0000003d
    8734:	3b66010c 	.word	0x3b66010c
    8738:	96010000 	.word	0x96010000
    873c:	00623c01 	.word	0x00623c01
    8740:	00624808 	.word	0x00624808
    8744:	785d0108 	.word	0x785d0108
    8748:	0d000001 	.word	0x0d000001
    874c:	00002d6e 	.word	0x00002d6e
    8750:	009e9501 	.word	0x009e9501
    8754:	50010000 	.word	0x50010000
    8758:	20011000 	.word	0x20011000
    875c:	0100003b 	.word	0x0100003b
    8760:	007e01f3 	.word	0x007e01f3
    8764:	62480000 	.word	0x62480000
    8768:	625c0800 	.word	0x625c0800
    876c:	5d010800 	.word	0x5d010800
    8770:	000001ae 	.word	0x000001ae
    8774:	003ad70e 	.word	0x003ad70e
    8778:	3af20100 	.word	0x3af20100
    877c:	4a000000 	.word	0x4a000000
    8780:	1100003d 	.word	0x1100003d
    8784:	00002f47 	.word	0x00002f47
    8788:	007ef401 	.word	0x007ef401
    878c:	12000000 	.word	0x12000000
    8790:	003aa301 	.word	0x003aa301
    8794:	01110100 	.word	0x01110100
    8798:	00625c01 	.word	0x00625c01
    879c:	00626c08 	.word	0x00626c08
    87a0:	d55d0108 	.word	0xd55d0108
    87a4:	13000001 	.word	0x13000001
    87a8:	00003ad7 	.word	0x00003ad7
    87ac:	3a011001 	.word	0x3a011001
    87b0:	01000000 	.word	0x01000000
    87b4:	01140050 	.word	0x01140050
    87b8:	00003a8e 	.word	0x00003a8e
    87bc:	6c01d901 	.word	0x6c01d901
    87c0:	a0080062 	.word	0xa0080062
    87c4:	5d080062 	.word	0x5d080062
    87c8:	1500003d 	.word	0x1500003d
    87cc:	003b3201 	.word	0x003b3201
    87d0:	01ae0100 	.word	0x01ae0100
    87d4:	080062a0 	.word	0x080062a0
    87d8:	080062d8 	.word	0x080062d8
    87dc:	00003d88 	.word	0x00003d88
    87e0:	00000231 	.word	0x00000231
    87e4:	003abc0e 	.word	0x003abc0e
    87e8:	3aad0100 	.word	0x3aad0100
    87ec:	b3000000 	.word	0xb3000000
    87f0:	0e00003d 	.word	0x0e00003d
    87f4:	00003b44 	.word	0x00003b44
    87f8:	0053ad01 	.word	0x0053ad01
    87fc:	3dc60000 	.word	0x3dc60000
    8800:	070f0000 	.word	0x070f0000
    8804:	0100002e 	.word	0x0100002e
    8808:	00003aaf 	.word	0x00003aaf
    880c:	003de400 	.word	0x003de400
    8810:	01140000 	.word	0x01140000
    8814:	00003ab1 	.word	0x00003ab1
    8818:	d8014401 	.word	0xd8014401
    881c:	f0080062 	.word	0xf0080062
    8820:	0d080062 	.word	0x0d080062
    8824:	0000003e 	.word	0x0000003e
    8828:	000008b9 	.word	0x000008b9
    882c:	24840002 	.word	0x24840002
    8830:	01040000 	.word	0x01040000
    8834:	000001c6 	.word	0x000001c6
    8838:	003ee401 	.word	0x003ee401
    883c:	00039d00 	.word	0x00039d00
    8840:	0062f000 	.word	0x0062f000
    8844:	00669408 	.word	0x00669408
    8848:	00227208 	.word	0x00227208
    884c:	05040200 	.word	0x05040200
    8850:	00002150 	.word	0x00002150
    8854:	95050202 	.word	0x95050202
    8858:	02000004 	.word	0x02000004
    885c:	04690601 	.word	0x04690601
    8860:	75030000 	.word	0x75030000
    8864:	02003233 	.word	0x02003233
    8868:	00004527 	.word	0x00004527
    886c:	07040200 	.word	0x07040200
    8870:	000021f1 	.word	0x000021f1
    8874:	22070202 	.word	0x22070202
    8878:	03000002 	.word	0x03000002
    887c:	02003875 	.word	0x02003875
    8880:	00005d29 	.word	0x00005d29
    8884:	08010200 	.word	0x08010200
    8888:	00000467 	.word	0x00000467
    888c:	00004504 	.word	0x00004504
    8890:	02010500 	.word	0x02010500
    8894:	00007e3a 	.word	0x00007e3a
    8898:	0ebd0600 	.word	0x0ebd0600
    889c:	07000000 	.word	0x07000000
    88a0:	00544553 	.word	0x00544553
    88a4:	dc080001 	.word	0xdc080001
    88a8:	0200003d 	.word	0x0200003d
    88ac:	0000693a 	.word	0x0000693a
    88b0:	3bd60800 	.word	0x3bd60800
    88b4:	3a020000 	.word	0x3a020000
    88b8:	00000069 	.word	0x00000069
    88bc:	3c020105 	.word	0x3c020105
    88c0:	000000a9 	.word	0x000000a9
    88c4:	00246c06 	.word	0x00246c06
    88c8:	39060000 	.word	0x39060000
    88cc:	01000004 	.word	0x01000004
    88d0:	29510800 	.word	0x29510800
    88d4:	3c020000 	.word	0x3c020000
    88d8:	00000094 	.word	0x00000094
    88dc:	3f020105 	.word	0x3f020105
    88e0:	000000c9 	.word	0x000000c9
    88e4:	0004d106 	.word	0x0004d106
    88e8:	8d060000 	.word	0x8d060000
    88ec:	01000004 	.word	0x01000004
    88f0:	27f40800 	.word	0x27f40800
    88f4:	3f020000 	.word	0x3f020000
    88f8:	000000b4 	.word	0x000000b4
    88fc:	0a070409 	.word	0x0a070409
    8900:	01ab0328 	.word	0x01ab0328
    8904:	00000176 	.word	0x00000176
    8908:	0052430b 	.word	0x0052430b
    890c:	6401ac03 	.word	0x6401ac03
    8910:	02000000 	.word	0x02000000
    8914:	3b0c0023 	.word	0x3b0c0023
    8918:	0300003c 	.word	0x0300003c
    891c:	006401ad 	.word	0x006401ad
    8920:	23020000 	.word	0x23020000
    8924:	49430b04 	.word	0x49430b04
    8928:	ae030052 	.word	0xae030052
    892c:	00006401 	.word	0x00006401
    8930:	08230200 	.word	0x08230200
    8934:	003cfa0c 	.word	0x003cfa0c
    8938:	01af0300 	.word	0x01af0300
    893c:	00000064 	.word	0x00000064
    8940:	0c0c2302 	.word	0x0c0c2302
    8944:	00003b77 	.word	0x00003b77
    8948:	6401b003 	.word	0x6401b003
    894c:	02000000 	.word	0x02000000
    8950:	1c0c1023 	.word	0x1c0c1023
    8954:	0300003d 	.word	0x0300003d
    8958:	006401b1 	.word	0x006401b1
    895c:	23020000 	.word	0x23020000
    8960:	3d540c14 	.word	0x3d540c14
    8964:	b2030000 	.word	0xb2030000
    8968:	00006401 	.word	0x00006401
    896c:	18230200 	.word	0x18230200
    8970:	003c4f0c 	.word	0x003c4f0c
    8974:	01b30300 	.word	0x01b30300
    8978:	00000064 	.word	0x00000064
    897c:	0c1c2302 	.word	0x0c1c2302
    8980:	00003bdf 	.word	0x00003bdf
    8984:	6401b403 	.word	0x6401b403
    8988:	02000000 	.word	0x02000000
    898c:	430b2023 	.word	0x430b2023
    8990:	03005253 	.word	0x03005253
    8994:	006401b5 	.word	0x006401b5
    8998:	23020000 	.word	0x23020000
    899c:	140d0024 	.word	0x140d0024
    89a0:	01c51a04 	.word	0x01c51a04
    89a4:	3a0e0000 	.word	0x3a0e0000
    89a8:	0400003e 	.word	0x0400003e
    89ac:	00003a1b 	.word	0x00003a1b
    89b0:	00230200 	.word	0x00230200
    89b4:	003c400e 	.word	0x003c400e
    89b8:	3a1c0400 	.word	0x3a1c0400
    89bc:	02000000 	.word	0x02000000
    89c0:	a30e0423 	.word	0xa30e0423
    89c4:	0400003e 	.word	0x0400003e
    89c8:	00003a1d 	.word	0x00003a1d
    89cc:	08230200 	.word	0x08230200
    89d0:	003e560e 	.word	0x003e560e
    89d4:	3a1e0400 	.word	0x3a1e0400
    89d8:	02000000 	.word	0x02000000
    89dc:	9c0e0c23 	.word	0x9c0e0c23
    89e0:	0400003d 	.word	0x0400003d
    89e4:	00003a1f 	.word	0x00003a1f
    89e8:	10230200 	.word	0x10230200
    89ec:	3c080800 	.word	0x3c080800
    89f0:	20040000 	.word	0x20040000
    89f4:	00000176 	.word	0x00000176
    89f8:	3dd5010f 	.word	0x3dd5010f
    89fc:	de010000 	.word	0xde010000
    8a00:	007e0103 	.word	0x007e0103
    8a04:	14010000 	.word	0x14010000
    8a08:	10000002 	.word	0x10000002
    8a0c:	00003dad 	.word	0x00003dad
    8a10:	5303dd01 	.word	0x5303dd01
    8a14:	11000000 	.word	0x11000000
    8a18:	00706d74 	.word	0x00706d74
    8a1c:	3a03df01 	.word	0x3a03df01
    8a20:	12000000 	.word	0x12000000
    8a24:	00003d33 	.word	0x00003d33
    8a28:	3a03e001 	.word	0x3a03e001
    8a2c:	12000000 	.word	0x12000000
    8a30:	00002f47 	.word	0x00002f47
    8a34:	7e03e101 	.word	0x7e03e101
    8a38:	00000000 	.word	0x00000000
    8a3c:	3c6b0113 	.word	0x3c6b0113
    8a40:	7d010000 	.word	0x7d010000
    8a44:	0062f001 	.word	0x0062f001
    8a48:	00633008 	.word	0x00633008
    8a4c:	145d0108 	.word	0x145d0108
    8a50:	003e2c01 	.word	0x003e2c01
    8a54:	01a00100 	.word	0x01a00100
    8a58:	08006330 	.word	0x08006330
    8a5c:	08006364 	.word	0x08006364
    8a60:	024c5d01 	.word	0x024c5d01
    8a64:	8a150000 	.word	0x8a150000
    8a68:	0100003e 	.word	0x0100003e
    8a6c:	00003a9f 	.word	0x00003a9f
    8a70:	00500100 	.word	0x00500100
    8a74:	3c760116 	.word	0x3c760116
    8a78:	c7010000 	.word	0xc7010000
    8a7c:	0000c901 	.word	0x0000c901
    8a80:	00636400 	.word	0x00636400
    8a84:	00639408 	.word	0x00639408
    8a88:	003e2c08 	.word	0x003e2c08
    8a8c:	0002f100 	.word	0x0002f100
    8a90:	3d5c1700 	.word	0x3d5c1700
    8a94:	c8010000 	.word	0xc8010000
    8a98:	00000064 	.word	0x00000064
    8a9c:	00003e4b 	.word	0x00003e4b
    8aa0:	002dbc18 	.word	0x002dbc18
    8aa4:	c9c90100 	.word	0xc9c90100
    8aa8:	18000000 	.word	0x18000000
    8aac:	00003e22 	.word	0x00003e22
    8ab0:	007eca01 	.word	0x007eca01
    8ab4:	d0190000 	.word	0xd0190000
    8ab8:	68000001 	.word	0x68000001
    8abc:	d8080063 	.word	0xd8080063
    8ac0:	01000001 	.word	0x01000001
    8ac4:	0002becf 	.word	0x0002becf
    8ac8:	01e31a00 	.word	0x01e31a00
    8acc:	f01b0000 	.word	0xf01b0000
    8ad0:	1c000001 	.word	0x1c000001
    8ad4:	000001ef 	.word	0x000001ef
    8ad8:	0001fb1d 	.word	0x0001fb1d
    8adc:	1c520100 	.word	0x1c520100
    8ae0:	00000207 	.word	0x00000207
    8ae4:	d01e0000 	.word	0xd01e0000
    8ae8:	82000001 	.word	0x82000001
    8aec:	8c080063 	.word	0x8c080063
    8af0:	01080063 	.word	0x01080063
    8af4:	01e31ad4 	.word	0x01e31ad4
    8af8:	821f0000 	.word	0x821f0000
    8afc:	8c080063 	.word	0x8c080063
    8b00:	1c080063 	.word	0x1c080063
    8b04:	000001ef 	.word	0x000001ef
    8b08:	0001fb20 	.word	0x0001fb20
    8b0c:	003e7600 	.word	0x003e7600
    8b10:	02071c00 	.word	0x02071c00
    8b14:	00000000 	.word	0x00000000
    8b18:	7e011400 	.word	0x7e011400
    8b1c:	0100003d 	.word	0x0100003d
    8b20:	639401ea 	.word	0x639401ea
    8b24:	63a80800 	.word	0x63a80800
    8b28:	5d010800 	.word	0x5d010800
    8b2c:	00000323 	.word	0x00000323
    8b30:	003d8815 	.word	0x003d8815
    8b34:	53e90100 	.word	0x53e90100
    8b38:	01000000 	.word	0x01000000
    8b3c:	2e072150 	.word	0x2e072150
    8b40:	eb010000 	.word	0xeb010000
    8b44:	0000003a 	.word	0x0000003a
    8b48:	22005301 	.word	0x22005301
    8b4c:	003f3e01 	.word	0x003f3e01
    8b50:	01070100 	.word	0x01070100
    8b54:	0063a801 	.word	0x0063a801
    8b58:	0063b408 	.word	0x0063b408
    8b5c:	4a5d0108 	.word	0x4a5d0108
    8b60:	23000003 	.word	0x23000003
    8b64:	00002d6e 	.word	0x00002d6e
    8b68:	a9010601 	.word	0xa9010601
    8b6c:	01000000 	.word	0x01000000
    8b70:	01220050 	.word	0x01220050
    8b74:	00003cb4 	.word	0x00003cb4
    8b78:	01012001 	.word	0x01012001
    8b7c:	080063b4 	.word	0x080063b4
    8b80:	080063c8 	.word	0x080063c8
    8b84:	03915d01 	.word	0x03915d01
    8b88:	b6240000 	.word	0xb6240000
    8b8c:	0100003d 	.word	0x0100003d
    8b90:	003a011f 	.word	0x003a011f
    8b94:	3e890000 	.word	0x3e890000
    8b98:	1a230000 	.word	0x1a230000
    8b9c:	0100003c 	.word	0x0100003c
    8ba0:	003a011f 	.word	0x003a011f
    8ba4:	51010000 	.word	0x51010000
    8ba8:	002e0725 	.word	0x002e0725
    8bac:	01210100 	.word	0x01210100
    8bb0:	0000003a 	.word	0x0000003a
    8bb4:	00003e9c 	.word	0x00003e9c
    8bb8:	fd012200 	.word	0xfd012200
    8bbc:	0100003b 	.word	0x0100003b
    8bc0:	c801013d 	.word	0xc801013d
    8bc4:	d4080063 	.word	0xd4080063
    8bc8:	01080063 	.word	0x01080063
    8bcc:	0003b85d 	.word	0x0003b85d
    8bd0:	2d6e2300 	.word	0x2d6e2300
    8bd4:	3c010000 	.word	0x3c010000
    8bd8:	0000a901 	.word	0x0000a901
    8bdc:	00500100 	.word	0x00500100
    8be0:	3dc40122 	.word	0x3dc40122
    8be4:	50010000 	.word	0x50010000
    8be8:	63d40101 	.word	0x63d40101
    8bec:	63e80800 	.word	0x63e80800
    8bf0:	5d010800 	.word	0x5d010800
    8bf4:	000003f1 	.word	0x000003f1
    8bf8:	003e9224 	.word	0x003e9224
    8bfc:	014f0100 	.word	0x014f0100
    8c00:	0000003a 	.word	0x0000003a
    8c04:	00003eba 	.word	0x00003eba
    8c08:	002e0725 	.word	0x002e0725
    8c0c:	01510100 	.word	0x01510100
    8c10:	0000003a 	.word	0x0000003a
    8c14:	00003ecd 	.word	0x00003ecd
    8c18:	e6012600 	.word	0xe6012600
    8c1c:	0100003c 	.word	0x0100003c
    8c20:	5301016e 	.word	0x5301016e
    8c24:	e8000000 	.word	0xe8000000
    8c28:	f8080063 	.word	0xf8080063
    8c2c:	01080063 	.word	0x01080063
    8c30:	2f01225d 	.word	0x2f01225d
    8c34:	0100003f 	.word	0x0100003f
    8c38:	f8010185 	.word	0xf8010185
    8c3c:	0c080063 	.word	0x0c080063
    8c40:	01080064 	.word	0x01080064
    8c44:	0004425d 	.word	0x0004425d
    8c48:	3e172400 	.word	0x3e172400
    8c4c:	84010000 	.word	0x84010000
    8c50:	00003a01 	.word	0x00003a01
    8c54:	003eeb00 	.word	0x003eeb00
    8c58:	2e072500 	.word	0x2e072500
    8c5c:	86010000 	.word	0x86010000
    8c60:	00003a01 	.word	0x00003a01
    8c64:	003efe00 	.word	0x003efe00
    8c68:	01220000 	.word	0x01220000
    8c6c:	00003d23 	.word	0x00003d23
    8c70:	0101a601 	.word	0x0101a601
    8c74:	0800640c 	.word	0x0800640c
    8c78:	08006420 	.word	0x08006420
    8c7c:	047b5d01 	.word	0x047b5d01
    8c80:	80240000 	.word	0x80240000
    8c84:	0100003b 	.word	0x0100003b
    8c88:	003a01a5 	.word	0x003a01a5
    8c8c:	3f1c0000 	.word	0x3f1c0000
    8c90:	07250000 	.word	0x07250000
    8c94:	0100002e 	.word	0x0100002e
    8c98:	003a01a7 	.word	0x003a01a7
    8c9c:	3f2f0000 	.word	0x3f2f0000
    8ca0:	22000000 	.word	0x22000000
    8ca4:	003f6601 	.word	0x003f6601
    8ca8:	01c70100 	.word	0x01c70100
    8cac:	00642001 	.word	0x00642001
    8cb0:	00643408 	.word	0x00643408
    8cb4:	b05d0108 	.word	0xb05d0108
    8cb8:	23000004 	.word	0x23000004
    8cbc:	00003b80 	.word	0x00003b80
    8cc0:	3a01c601 	.word	0x3a01c601
    8cc4:	01000000 	.word	0x01000000
    8cc8:	2e072750 	.word	0x2e072750
    8ccc:	c8010000 	.word	0xc8010000
    8cd0:	00003a01 	.word	0x00003a01
    8cd4:	00530100 	.word	0x00530100
    8cd8:	3e660122 	.word	0x3e660122
    8cdc:	ea010000 	.word	0xea010000
    8ce0:	64340101 	.word	0x64340101
    8ce4:	64500800 	.word	0x64500800
    8ce8:	5d010800 	.word	0x5d010800
    8cec:	000004e5 	.word	0x000004e5
    8cf0:	003f5123 	.word	0x003f5123
    8cf4:	01e90100 	.word	0x01e90100
    8cf8:	00000053 	.word	0x00000053
    8cfc:	6e235001 	.word	0x6e235001
    8d00:	0100002d 	.word	0x0100002d
    8d04:	00a901e9 	.word	0x00a901e9
    8d08:	51010000 	.word	0x51010000
    8d0c:	ca012200 	.word	0xca012200
    8d10:	0100003c 	.word	0x0100003c
    8d14:	50010209 	.word	0x50010209
    8d18:	5c080064 	.word	0x5c080064
    8d1c:	01080064 	.word	0x01080064
    8d20:	00050c5d 	.word	0x00050c5d
    8d24:	3df82300 	.word	0x3df82300
    8d28:	08010000 	.word	0x08010000
    8d2c:	00003a02 	.word	0x00003a02
    8d30:	00500100 	.word	0x00500100
    8d34:	3b890122 	.word	0x3b890122
    8d38:	1e010000 	.word	0x1e010000
    8d3c:	645c0102 	.word	0x645c0102
    8d40:	64700800 	.word	0x64700800
    8d44:	5d010800 	.word	0x5d010800
    8d48:	00000545 	.word	0x00000545
    8d4c:	003bf324 	.word	0x003bf324
    8d50:	021d0100 	.word	0x021d0100
    8d54:	0000003a 	.word	0x0000003a
    8d58:	00003f4d 	.word	0x00003f4d
    8d5c:	002e0725 	.word	0x002e0725
    8d60:	021f0100 	.word	0x021f0100
    8d64:	0000003a 	.word	0x0000003a
    8d68:	00003f60 	.word	0x00003f60
    8d6c:	b3012200 	.word	0xb3012200
    8d70:	0100003e 	.word	0x0100003e
    8d74:	7001023d 	.word	0x7001023d
    8d78:	90080064 	.word	0x90080064
    8d7c:	01080064 	.word	0x01080064
    8d80:	00056c5d 	.word	0x00056c5d
    8d84:	3bc72300 	.word	0x3bc72300
    8d88:	3c010000 	.word	0x3c010000
    8d8c:	00005302 	.word	0x00005302
    8d90:	00500100 	.word	0x00500100
    8d94:	3cdb0122 	.word	0x3cdb0122
    8d98:	64010000 	.word	0x64010000
    8d9c:	64900102 	.word	0x64900102
    8da0:	649c0800 	.word	0x649c0800
    8da4:	5d010800 	.word	0x5d010800
    8da8:	00000593 	.word	0x00000593
    8dac:	002d6e23 	.word	0x002d6e23
    8db0:	02630100 	.word	0x02630100
    8db4:	000000a9 	.word	0x000000a9
    8db8:	22005001 	.word	0x22005001
    8dbc:	003de701 	.word	0x003de701
    8dc0:	027a0100 	.word	0x027a0100
    8dc4:	00649c01 	.word	0x00649c01
    8dc8:	0064ac08 	.word	0x0064ac08
    8dcc:	bc5d0108 	.word	0xbc5d0108
    8dd0:	24000005 	.word	0x24000005
    8dd4:	00003c8c 	.word	0x00003c8c
    8dd8:	3a027901 	.word	0x3a027901
    8ddc:	7e000000 	.word	0x7e000000
    8de0:	0000003f 	.word	0x0000003f
    8de4:	3f060122 	.word	0x3f060122
    8de8:	8d010000 	.word	0x8d010000
    8dec:	64ac0102 	.word	0x64ac0102
    8df0:	64b80800 	.word	0x64b80800
    8df4:	5d010800 	.word	0x5d010800
    8df8:	000005e3 	.word	0x000005e3
    8dfc:	002d6e23 	.word	0x002d6e23
    8e00:	028c0100 	.word	0x028c0100
    8e04:	000000a9 	.word	0x000000a9
    8e08:	22005001 	.word	0x22005001
    8e0c:	003ed201 	.word	0x003ed201
    8e10:	029d0100 	.word	0x029d0100
    8e14:	0064b801 	.word	0x0064b801
    8e18:	00657008 	.word	0x00657008
    8e1c:	445d0108 	.word	0x445d0108
    8e20:	24000006 	.word	0x24000006
    8e24:	00003e4b 	.word	0x00003e4b
    8e28:	44029c01 	.word	0x44029c01
    8e2c:	91000006 	.word	0x91000006
    8e30:	2800003f 	.word	0x2800003f
    8e34:	00706d74 	.word	0x00706d74
    8e38:	3a029e01 	.word	0x3a029e01
    8e3c:	af000000 	.word	0xaf000000
    8e40:	2500003f 	.word	0x2500003f
    8e44:	00003cc2 	.word	0x00003cc2
    8e48:	3a029e01 	.word	0x3a029e01
    8e4c:	e3000000 	.word	0xe3000000
    8e50:	1200003f 	.word	0x1200003f
    8e54:	00003d12 	.word	0x00003d12
    8e58:	3a029e01 	.word	0x3a029e01
    8e5c:	12000000 	.word	0x12000000
    8e60:	00003c57 	.word	0x00003c57
    8e64:	3a029e01 	.word	0x3a029e01
    8e68:	00000000 	.word	0x00000000
    8e6c:	01c50429 	.word	0x01c50429
    8e70:	01220000 	.word	0x01220000
    8e74:	00003c25 	.word	0x00003c25
    8e78:	01030101 	.word	0x01030101
    8e7c:	08006570 	.word	0x08006570
    8e80:	0800658c 	.word	0x0800658c
    8e84:	067f5d01 	.word	0x067f5d01
    8e88:	58230000 	.word	0x58230000
    8e8c:	0100003f 	.word	0x0100003f
    8e90:	003a0300 	.word	0x003a0300
    8e94:	50010000 	.word	0x50010000
    8e98:	002d6e23 	.word	0x002d6e23
    8e9c:	03000100 	.word	0x03000100
    8ea0:	000000a9 	.word	0x000000a9
    8ea4:	22005101 	.word	0x22005101
    8ea8:	003e7301 	.word	0x003e7301
    8eac:	03220100 	.word	0x03220100
    8eb0:	00658c01 	.word	0x00658c01
    8eb4:	0065a808 	.word	0x0065a808
    8eb8:	b45d0108 	.word	0xb45d0108
    8ebc:	23000006 	.word	0x23000006
    8ec0:	00003be4 	.word	0x00003be4
    8ec4:	3a032101 	.word	0x3a032101
    8ec8:	01000000 	.word	0x01000000
    8ecc:	2d6e2350 	.word	0x2d6e2350
    8ed0:	21010000 	.word	0x21010000
    8ed4:	0000a903 	.word	0x0000a903
    8ed8:	00510100 	.word	0x00510100
    8edc:	3d3d0122 	.word	0x3d3d0122
    8ee0:	44010000 	.word	0x44010000
    8ee4:	65a80103 	.word	0x65a80103
    8ee8:	65c40800 	.word	0x65c40800
    8eec:	5d010800 	.word	0x5d010800
    8ef0:	000006e9 	.word	0x000006e9
    8ef4:	003d0323 	.word	0x003d0323
    8ef8:	03430100 	.word	0x03430100
    8efc:	0000003a 	.word	0x0000003a
    8f00:	6e235001 	.word	0x6e235001
    8f04:	0100002d 	.word	0x0100002d
    8f08:	00a90343 	.word	0x00a90343
    8f0c:	51010000 	.word	0x51010000
    8f10:	b0012200 	.word	0xb0012200
    8f14:	0100003b 	.word	0x0100003b
    8f18:	c4010364 	.word	0xc4010364
    8f1c:	e0080065 	.word	0xe0080065
    8f20:	01080065 	.word	0x01080065
    8f24:	00071e5d 	.word	0x00071e5d
    8f28:	3be42300 	.word	0x3be42300
    8f2c:	63010000 	.word	0x63010000
    8f30:	00003a03 	.word	0x00003a03
    8f34:	23500100 	.word	0x23500100
    8f38:	00002d6e 	.word	0x00002d6e
    8f3c:	a9036301 	.word	0xa9036301
    8f40:	01000000 	.word	0x01000000
    8f44:	01220051 	.word	0x01220051
    8f48:	00003c9d 	.word	0x00003c9d
    8f4c:	01038501 	.word	0x01038501
    8f50:	080065e0 	.word	0x080065e0
    8f54:	080065fc 	.word	0x080065fc
    8f58:	07535d01 	.word	0x07535d01
    8f5c:	03230000 	.word	0x03230000
    8f60:	0100003d 	.word	0x0100003d
    8f64:	003a0384 	.word	0x003a0384
    8f68:	50010000 	.word	0x50010000
    8f6c:	002d6e23 	.word	0x002d6e23
    8f70:	03840100 	.word	0x03840100
    8f74:	000000a9 	.word	0x000000a9
    8f78:	22005101 	.word	0x22005101
    8f7c:	003d6b01 	.word	0x003d6b01
    8f80:	039d0100 	.word	0x039d0100
    8f84:	0065fc01 	.word	0x0065fc01
    8f88:	00660808 	.word	0x00660808
    8f8c:	7a5d0108 	.word	0x7a5d0108
    8f90:	23000007 	.word	0x23000007
    8f94:	00002d6e 	.word	0x00002d6e
    8f98:	a9039c01 	.word	0xa9039c01
    8f9c:	01000000 	.word	0x01000000
    8fa0:	01220050 	.word	0x01220050
    8fa4:	00003f14 	.word	0x00003f14
    8fa8:	0103ad01 	.word	0x0103ad01
    8fac:	08006608 	.word	0x08006608
    8fb0:	08006614 	.word	0x08006614
    8fb4:	07a15d01 	.word	0x07a15d01
    8fb8:	6e230000 	.word	0x6e230000
    8fbc:	0100002d 	.word	0x0100002d
    8fc0:	00a903ac 	.word	0x00a903ac
    8fc4:	50010000 	.word	0x50010000
    8fc8:	5d012200 	.word	0x5d012200
    8fcc:	0100003c 	.word	0x0100003c
    8fd0:	140103c2 	.word	0x140103c2
    8fd4:	20080066 	.word	0x20080066
    8fd8:	01080066 	.word	0x01080066
    8fdc:	0007c85d 	.word	0x0007c85d
    8fe0:	3f492300 	.word	0x3f492300
    8fe4:	c1010000 	.word	0xc1010000
    8fe8:	00005303 	.word	0x00005303
    8fec:	00500100 	.word	0x00500100
    8ff0:	0001d02a 	.word	0x0001d02a
    8ff4:	00662000 	.word	0x00662000
    8ff8:	00666408 	.word	0x00666408
    8ffc:	fc5d0108 	.word	0xfc5d0108
    9000:	2b000007 	.word	0x2b000007
    9004:	000001e3 	.word	0x000001e3
    9008:	00004001 	.word	0x00004001
    900c:	0001ef20 	.word	0x0001ef20
    9010:	00401400 	.word	0x00401400
    9014:	01fb2000 	.word	0x01fb2000
    9018:	403d0000 	.word	0x403d0000
    901c:	071c0000 	.word	0x071c0000
    9020:	00000002 	.word	0x00000002
    9024:	3e09012c 	.word	0x3e09012c
    9028:	11010000 	.word	0x11010000
    902c:	66640104 	.word	0x66640104
    9030:	66740800 	.word	0x66740800
    9034:	5d010800 	.word	0x5d010800
    9038:	3bcf012d 	.word	0x3bcf012d
    903c:	25010000 	.word	0x25010000
    9040:	00890104 	.word	0x00890104
    9044:	66740000 	.word	0x66740000
    9048:	66880800 	.word	0x66880800
    904c:	5d010800 	.word	0x5d010800
    9050:	00000849 	.word	0x00000849
    9054:	003f5124 	.word	0x003f5124
    9058:	04240100 	.word	0x04240100
    905c:	00000053 	.word	0x00000053
    9060:	00004066 	.word	0x00004066
    9064:	002f4712 	.word	0x002f4712
    9068:	04260100 	.word	0x04260100
    906c:	00000089 	.word	0x00000089
    9070:	9a012200 	.word	0x9a012200
    9074:	0100003b 	.word	0x0100003b
    9078:	88010448 	.word	0x88010448
    907c:	94080066 	.word	0x94080066
    9080:	01080066 	.word	0x01080066
    9084:	0008705d 	.word	0x0008705d
    9088:	3f512300 	.word	0x3f512300
    908c:	47010000 	.word	0x47010000
    9090:	00005304 	.word	0x00005304
    9094:	00500100 	.word	0x00500100
    9098:	00005d2e 	.word	0x00005d2e
    909c:	00088000 	.word	0x00088000
    90a0:	00d42f00 	.word	0x00d42f00
    90a4:	000f0000 	.word	0x000f0000
    90a8:	003ec121 	.word	0x003ec121
    90ac:	916f0100 	.word	0x916f0100
    90b0:	05000008 	.word	0x05000008
    90b4:	006bb803 	.word	0x006bb803
    90b8:	08703008 	.word	0x08703008
    90bc:	5d2e0000 	.word	0x5d2e0000
    90c0:	a6000000 	.word	0xa6000000
    90c4:	2f000008 	.word	0x2f000008
    90c8:	000000d4 	.word	0x000000d4
    90cc:	76210003 	.word	0x76210003
    90d0:	0100003f 	.word	0x0100003f
    90d4:	0008b770 	.word	0x0008b770
    90d8:	c8030500 	.word	0xc8030500
    90dc:	3008006b 	.word	0x3008006b
    90e0:	00000896 	.word	0x00000896
    90e4:	0001eb00 	.word	0x0001eb00
    90e8:	1f000200 	.word	0x1f000200
    90ec:	04000027 	.word	0x04000027
    90f0:	0001c601 	.word	0x0001c601
    90f4:	3fd20100 	.word	0x3fd20100
    90f8:	039d0000 	.word	0x039d0000
    90fc:	66940000 	.word	0x66940000
    9100:	67380800 	.word	0x67380800
    9104:	242a0800 	.word	0x242a0800
    9108:	04020000 	.word	0x04020000
    910c:	00215005 	.word	0x00215005
    9110:	05020200 	.word	0x05020200
    9114:	00000495 	.word	0x00000495
    9118:	69060102 	.word	0x69060102
    911c:	03000004 	.word	0x03000004
    9120:	00323375 	.word	0x00323375
    9124:	00452702 	.word	0x00452702
    9128:	04020000 	.word	0x04020000
    912c:	0021f107 	.word	0x0021f107
    9130:	07020200 	.word	0x07020200
    9134:	00000222 	.word	0x00000222
    9138:	00387503 	.word	0x00387503
    913c:	005d2902 	.word	0x005d2902
    9140:	01020000 	.word	0x01020000
    9144:	00046708 	.word	0x00046708
    9148:	00450400 	.word	0x00450400
    914c:	64050000 	.word	0x64050000
    9150:	06000000 	.word	0x06000000
    9154:	833a0201 	.word	0x833a0201
    9158:	07000000 	.word	0x07000000
    915c:	00000ebd 	.word	0x00000ebd
    9160:	45530800 	.word	0x45530800
    9164:	00010054 	.word	0x00010054
    9168:	003ddc09 	.word	0x003ddc09
    916c:	6e3a0200 	.word	0x6e3a0200
    9170:	06000000 	.word	0x06000000
    9174:	a33c0201 	.word	0xa33c0201
    9178:	07000000 	.word	0x07000000
    917c:	0000246c 	.word	0x0000246c
    9180:	04390700 	.word	0x04390700
    9184:	00010000 	.word	0x00010000
    9188:	00295109 	.word	0x00295109
    918c:	8e3c0200 	.word	0x8e3c0200
    9190:	0a000000 	.word	0x0a000000
    9194:	100b0704 	.word	0x100b0704
    9198:	f7020303 	.word	0xf7020303
    919c:	0c000000 	.word	0x0c000000
    91a0:	00003ff8 	.word	0x00003ff8
    91a4:	64020403 	.word	0x64020403
    91a8:	02000000 	.word	0x02000000
    91ac:	e60c0023 	.word	0xe60c0023
    91b0:	0300001c 	.word	0x0300001c
    91b4:	00640205 	.word	0x00640205
    91b8:	23020000 	.word	0x23020000
    91bc:	41560d04 	.word	0x41560d04
    91c0:	0603004c 	.word	0x0603004c
    91c4:	00006402 	.word	0x00006402
    91c8:	08230200 	.word	0x08230200
    91cc:	003fcc0c 	.word	0x003fcc0c
    91d0:	02070300 	.word	0x02070300
    91d4:	00000069 	.word	0x00000069
    91d8:	000c2302 	.word	0x000c2302
    91dc:	4020010e 	.word	0x4020010e
    91e0:	2c010000 	.word	0x2c010000
    91e4:	00669401 	.word	0x00669401
    91e8:	0066b008 	.word	0x0066b008
    91ec:	1c5d0108 	.word	0x1c5d0108
    91f0:	0f000001 	.word	0x0f000001
    91f4:	00004038 	.word	0x00004038
    91f8:	003a2b01 	.word	0x003a2b01
    91fc:	50010000 	.word	0x50010000
    9200:	97010e00 	.word	0x97010e00
    9204:	0100003f 	.word	0x0100003f
    9208:	66b00143 	.word	0x66b00143
    920c:	66bc0800 	.word	0x66bc0800
    9210:	5d010800 	.word	0x5d010800
    9214:	00000141 	.word	0x00000141
    9218:	003fa20f 	.word	0x003fa20f
    921c:	3a420100 	.word	0x3a420100
    9220:	01000000 	.word	0x01000000
    9224:	010e0050 	.word	0x010e0050
    9228:	00003ffd 	.word	0x00003ffd
    922c:	bc015601 	.word	0xbc015601
    9230:	e8080066 	.word	0xe8080066
    9234:	01080066 	.word	0x01080066
    9238:	0001665d 	.word	0x0001665d
    923c:	40100f00 	.word	0x40100f00
    9240:	55010000 	.word	0x55010000
    9244:	0000003a 	.word	0x0000003a
    9248:	0e005001 	.word	0x0e005001
    924c:	00404a01 	.word	0x00404a01
    9250:	01710100 	.word	0x01710100
    9254:	080066e8 	.word	0x080066e8
    9258:	08006704 	.word	0x08006704
    925c:	018b5d01 	.word	0x018b5d01
    9260:	6e0f0000 	.word	0x6e0f0000
    9264:	0100002d 	.word	0x0100002d
    9268:	0000a370 	.word	0x0000a370
    926c:	00500100 	.word	0x00500100
    9270:	3f840110 	.word	0x3f840110
    9274:	87010000 	.word	0x87010000
    9278:	00003a01 	.word	0x00003a01
    927c:	00670400 	.word	0x00670400
    9280:	00671008 	.word	0x00671008
    9284:	115d0108 	.word	0x115d0108
    9288:	003fa901 	.word	0x003fa901
    928c:	01970100 	.word	0x01970100
    9290:	00000083 	.word	0x00000083
    9294:	08006710 	.word	0x08006710
    9298:	08006738 	.word	0x08006738
    929c:	bf125d01 	.word	0xbf125d01
    92a0:	0100003f 	.word	0x0100003f
    92a4:	00005396 	.word	0x00005396
    92a8:	00407900 	.word	0x00407900
    92ac:	3d331300 	.word	0x3d331300
    92b0:	98010000 	.word	0x98010000
    92b4:	0000003a 	.word	0x0000003a
    92b8:	00004097 	.word	0x00004097
    92bc:	706d7414 	.word	0x706d7414
    92c0:	3a980100 	.word	0x3a980100
    92c4:	15000000 	.word	0x15000000
    92c8:	00002f47 	.word	0x00002f47
    92cc:	00839901 	.word	0x00839901
    92d0:	00000000 	.word	0x00000000
    92d4:	0000094c 	.word	0x0000094c
    92d8:	28450002 	.word	0x28450002
    92dc:	01040000 	.word	0x01040000
    92e0:	000001c6 	.word	0x000001c6
    92e4:	00438101 	.word	0x00438101
    92e8:	00039d00 	.word	0x00039d00
    92ec:	00673800 	.word	0x00673800
    92f0:	006af408 	.word	0x006af408
    92f4:	0024e708 	.word	0x0024e708
    92f8:	05040200 	.word	0x05040200
    92fc:	00002150 	.word	0x00002150
    9300:	95050202 	.word	0x95050202
    9304:	02000004 	.word	0x02000004
    9308:	04690601 	.word	0x04690601
    930c:	75030000 	.word	0x75030000
    9310:	02003233 	.word	0x02003233
    9314:	00004527 	.word	0x00004527
    9318:	07040200 	.word	0x07040200
    931c:	000021f1 	.word	0x000021f1
    9320:	36317503 	.word	0x36317503
    9324:	57280200 	.word	0x57280200
    9328:	02000000 	.word	0x02000000
    932c:	02220702 	.word	0x02220702
    9330:	75030000 	.word	0x75030000
    9334:	29020038 	.word	0x29020038
    9338:	00000068 	.word	0x00000068
    933c:	67080102 	.word	0x67080102
    9340:	04000004 	.word	0x04000004
    9344:	00000057 	.word	0x00000057
    9348:	3a020105 	.word	0x3a020105
    934c:	00000089 	.word	0x00000089
    9350:	000ebd06 	.word	0x000ebd06
    9354:	53070000 	.word	0x53070000
    9358:	01005445 	.word	0x01005445
    935c:	3ddc0800 	.word	0x3ddc0800
    9360:	3a020000 	.word	0x3a020000
    9364:	00000074 	.word	0x00000074
    9368:	003bd608 	.word	0x003bd608
    936c:	743a0200 	.word	0x743a0200
    9370:	05000000 	.word	0x05000000
    9374:	b43c0201 	.word	0xb43c0201
    9378:	06000000 	.word	0x06000000
    937c:	0000246c 	.word	0x0000246c
    9380:	04390600 	.word	0x04390600
    9384:	00010000 	.word	0x00010000
    9388:	00295108 	.word	0x00295108
    938c:	9f3c0200 	.word	0x9f3c0200
    9390:	09000000 	.word	0x09000000
    9394:	1c0a0704 	.word	0x1c0a0704
    9398:	9c023903 	.word	0x9c023903
    939c:	0b000001 	.word	0x0b000001
    93a0:	03005253 	.word	0x03005253
    93a4:	006f023a 	.word	0x006f023a
    93a8:	23020000 	.word	0x23020000
    93ac:	2bb30c00 	.word	0x2bb30c00
    93b0:	3b030000 	.word	0x3b030000
    93b4:	00004c02 	.word	0x00004c02
    93b8:	02230200 	.word	0x02230200
    93bc:	0052440b 	.word	0x0052440b
    93c0:	6f023c03 	.word	0x6f023c03
    93c4:	02000000 	.word	0x02000000
    93c8:	730c0423 	.word	0x730c0423
    93cc:	0300002a 	.word	0x0300002a
    93d0:	004c023d 	.word	0x004c023d
    93d4:	23020000 	.word	0x23020000
    93d8:	52420b06 	.word	0x52420b06
    93dc:	3e030052 	.word	0x3e030052
    93e0:	00006f02 	.word	0x00006f02
    93e4:	08230200 	.word	0x08230200
    93e8:	002bbd0c 	.word	0x002bbd0c
    93ec:	023f0300 	.word	0x023f0300
    93f0:	0000004c 	.word	0x0000004c
    93f4:	0b0a2302 	.word	0x0b0a2302
    93f8:	00315243 	.word	0x00315243
    93fc:	6f024003 	.word	0x6f024003
    9400:	02000000 	.word	0x02000000
    9404:	c70c0c23 	.word	0xc70c0c23
    9408:	0300002b 	.word	0x0300002b
    940c:	004c0241 	.word	0x004c0241
    9410:	23020000 	.word	0x23020000
    9414:	52430b0e 	.word	0x52430b0e
    9418:	42030032 	.word	0x42030032
    941c:	00006f02 	.word	0x00006f02
    9420:	10230200 	.word	0x10230200
    9424:	002bd10c 	.word	0x002bd10c
    9428:	02430300 	.word	0x02430300
    942c:	0000004c 	.word	0x0000004c
    9430:	0b122302 	.word	0x0b122302
    9434:	00335243 	.word	0x00335243
    9438:	6f024403 	.word	0x6f024403
    943c:	02000000 	.word	0x02000000
    9440:	db0c1423 	.word	0xdb0c1423
    9444:	0300002b 	.word	0x0300002b
    9448:	004c0245 	.word	0x004c0245
    944c:	23020000 	.word	0x23020000
    9450:	2b370c16 	.word	0x2b370c16
    9454:	46030000 	.word	0x46030000
    9458:	00006f02 	.word	0x00006f02
    945c:	18230200 	.word	0x18230200
    9460:	002be50c 	.word	0x002be50c
    9464:	02470300 	.word	0x02470300
    9468:	0000004c 	.word	0x0000004c
    946c:	001a2302 	.word	0x001a2302
    9470:	0040ae0d 	.word	0x0040ae0d
    9474:	02480300 	.word	0x02480300
    9478:	000000c2 	.word	0x000000c2
    947c:	1b04100e 	.word	0x1b04100e
    9480:	00000205 	.word	0x00000205
    9484:	002abb0f 	.word	0x002abb0f
    9488:	3a1c0400 	.word	0x3a1c0400
    948c:	02000000 	.word	0x02000000
    9490:	9a0f0023 	.word	0x9a0f0023
    9494:	0400002a 	.word	0x0400002a
    9498:	00004c1d 	.word	0x00004c1d
    949c:	04230200 	.word	0x04230200
    94a0:	002a570f 	.word	0x002a570f
    94a4:	4c1e0400 	.word	0x4c1e0400
    94a8:	02000000 	.word	0x02000000
    94ac:	2a0f0623 	.word	0x2a0f0623
    94b0:	0400002b 	.word	0x0400002b
    94b4:	00004c1f 	.word	0x00004c1f
    94b8:	08230200 	.word	0x08230200
    94bc:	002b930f 	.word	0x002b930f
    94c0:	4c200400 	.word	0x4c200400
    94c4:	02000000 	.word	0x02000000
    94c8:	790f0a23 	.word	0x790f0a23
    94cc:	0400002b 	.word	0x0400002b
    94d0:	00004c21 	.word	0x00004c21
    94d4:	0c230200 	.word	0x0c230200
    94d8:	2c2e0800 	.word	0x2c2e0800
    94dc:	22040000 	.word	0x22040000
    94e0:	000001a8 	.word	0x000001a8
    94e4:	2604080e 	.word	0x2604080e
    94e8:	00000251 	.word	0x00000251
    94ec:	0042ac0f 	.word	0x0042ac0f
    94f0:	4c270400 	.word	0x4c270400
    94f4:	02000000 	.word	0x02000000
    94f8:	760f0023 	.word	0x760f0023
    94fc:	04000043 	.word	0x04000043
    9500:	00004c28 	.word	0x00004c28
    9504:	02230200 	.word	0x02230200
    9508:	00406a0f 	.word	0x00406a0f
    950c:	4c290400 	.word	0x4c290400
    9510:	02000000 	.word	0x02000000
    9514:	1a0f0423 	.word	0x1a0f0423
    9518:	04000041 	.word	0x04000041
    951c:	00004c2a 	.word	0x00004c2a
    9520:	06230200 	.word	0x06230200
    9524:	40bc0800 	.word	0x40bc0800
    9528:	2b040000 	.word	0x2b040000
    952c:	00000210 	.word	0x00000210
    9530:	1a05140e 	.word	0x1a05140e
    9534:	000002ab 	.word	0x000002ab
    9538:	003e3a0f 	.word	0x003e3a0f
    953c:	3a1b0500 	.word	0x3a1b0500
    9540:	02000000 	.word	0x02000000
    9544:	400f0023 	.word	0x400f0023
    9548:	0500003c 	.word	0x0500003c
    954c:	00003a1c 	.word	0x00003a1c
    9550:	04230200 	.word	0x04230200
    9554:	003ea30f 	.word	0x003ea30f
    9558:	3a1d0500 	.word	0x3a1d0500
    955c:	02000000 	.word	0x02000000
    9560:	560f0823 	.word	0x560f0823
    9564:	0500003e 	.word	0x0500003e
    9568:	00003a1e 	.word	0x00003a1e
    956c:	0c230200 	.word	0x0c230200
    9570:	003d9c0f 	.word	0x003d9c0f
    9574:	3a1f0500 	.word	0x3a1f0500
    9578:	02000000 	.word	0x02000000
    957c:	08001023 	.word	0x08001023
    9580:	00003c08 	.word	0x00003c08
    9584:	025c2005 	.word	0x025c2005
    9588:	01100000 	.word	0x01100000
    958c:	000043ae 	.word	0x000043ae
    9590:	3801e901 	.word	0x3801e901
    9594:	56080067 	.word	0x56080067
    9598:	01080067 	.word	0x01080067
    959c:	0002db5d 	.word	0x0002db5d
    95a0:	42531100 	.word	0x42531100
    95a4:	e8010000 	.word	0xe8010000
    95a8:	000002db 	.word	0x000002db
    95ac:	12005001 	.word	0x12005001
    95b0:	00020504 	.word	0x00020504
    95b4:	31011300 	.word	0x31011300
    95b8:	01000043 	.word	0x01000043
    95bc:	58010100 	.word	0x58010100
    95c0:	80080067 	.word	0x80080067
    95c4:	01080067 	.word	0x01080067
    95c8:	0003245d 	.word	0x0003245d
    95cc:	42391100 	.word	0x42391100
    95d0:	ff010000 	.word	0xff010000
    95d4:	00000324 	.word	0x00000324
    95d8:	a1145001 	.word	0xa1145001
    95dc:	01000041 	.word	0x01000041
    95e0:	00032aff 	.word	0x00032aff
    95e4:	0040b500 	.word	0x0040b500
    95e8:	2e071500 	.word	0x2e071500
    95ec:	01010000 	.word	0x01010000
    95f0:	00003a01 	.word	0x00003a01
    95f4:	00520100 	.word	0x00520100
    95f8:	019c0412 	.word	0x019c0412
    95fc:	04120000 	.word	0x04120000
    9600:	00000251 	.word	0x00000251
    9604:	41c40113 	.word	0x41c40113
    9608:	24010000 	.word	0x24010000
    960c:	67800101 	.word	0x67800101
    9610:	678e0800 	.word	0x678e0800
    9614:	5d010800 	.word	0x5d010800
    9618:	00000357 	.word	0x00000357
    961c:	0041a116 	.word	0x0041a116
    9620:	01230100 	.word	0x01230100
    9624:	0000032a 	.word	0x0000032a
    9628:	13005001 	.word	0x13005001
    962c:	0040d301 	.word	0x0040d301
    9630:	01380100 	.word	0x01380100
    9634:	00679001 	.word	0x00679001
    9638:	0067aa08 	.word	0x0067aa08
    963c:	8c5d0108 	.word	0x8c5d0108
    9640:	16000003 	.word	0x16000003
    9644:	00004239 	.word	0x00004239
    9648:	24013701 	.word	0x24013701
    964c:	01000003 	.word	0x01000003
    9650:	2d6e1650 	.word	0x2d6e1650
    9654:	37010000 	.word	0x37010000
    9658:	0000b401 	.word	0x0000b401
    965c:	00510100 	.word	0x00510100
    9660:	422a0117 	.word	0x422a0117
    9664:	63010000 	.word	0x63010000
    9668:	67ac0101 	.word	0x67ac0101
    966c:	67ea0800 	.word	0x67ea0800
    9670:	40c80800 	.word	0x40c80800
    9674:	040d0000 	.word	0x040d0000
    9678:	39180000 	.word	0x39180000
    967c:	01000042 	.word	0x01000042
    9680:	03240162 	.word	0x03240162
    9684:	40e70000 	.word	0x40e70000
    9688:	28180000 	.word	0x28180000
    968c:	01000043 	.word	0x01000043
    9690:	004c0162 	.word	0x004c0162
    9694:	40fa0000 	.word	0x40fa0000
    9698:	6e160000 	.word	0x6e160000
    969c:	0100002d 	.word	0x0100002d
    96a0:	00b40162 	.word	0x00b40162
    96a4:	52010000 	.word	0x52010000
    96a8:	0043a515 	.word	0x0043a515
    96ac:	01640100 	.word	0x01640100
    96b0:	0000003a 	.word	0x0000003a
    96b4:	73195c01 	.word	0x73195c01
    96b8:	01000042 	.word	0x01000042
    96bc:	003a0164 	.word	0x003a0164
    96c0:	63150000 	.word	0x63150000
    96c4:	01000030 	.word	0x01000030
    96c8:	003a0164 	.word	0x003a0164
    96cc:	51010000 	.word	0x51010000
    96d0:	0041da1a 	.word	0x0041da1a
    96d4:	01650100 	.word	0x01650100
    96d8:	0000003a 	.word	0x0000003a
    96dc:	00004118 	.word	0x00004118
    96e0:	0d011300 	.word	0x0d011300
    96e4:	01000041 	.word	0x01000041
    96e8:	ec01019e 	.word	0xec01019e
    96ec:	04080067 	.word	0x04080067
    96f0:	01080068 	.word	0x01080068
    96f4:	0004505d 	.word	0x0004505d
    96f8:	42391600 	.word	0x42391600
    96fc:	9d010000 	.word	0x9d010000
    9700:	00032401 	.word	0x00032401
    9704:	16500100 	.word	0x16500100
    9708:	000041b7 	.word	0x000041b7
    970c:	4c019d01 	.word	0x4c019d01
    9710:	01000000 	.word	0x01000000
    9714:	2d6e1651 	.word	0x2d6e1651
    9718:	9d010000 	.word	0x9d010000
    971c:	0000b401 	.word	0x0000b401
    9720:	00520100 	.word	0x00520100
    9724:	41f60113 	.word	0x41f60113
    9728:	bd010000 	.word	0xbd010000
    972c:	68040101 	.word	0x68040101
    9730:	681a0800 	.word	0x681a0800
    9734:	5d010800 	.word	0x5d010800
    9738:	00000485 	.word	0x00000485
    973c:	00423916 	.word	0x00423916
    9740:	01bc0100 	.word	0x01bc0100
    9744:	00000324 	.word	0x00000324
    9748:	64165001 	.word	0x64165001
    974c:	01000042 	.word	0x01000042
    9750:	005e01bc 	.word	0x005e01bc
    9754:	51010000 	.word	0x51010000
    9758:	41011300 	.word	0x41011300
    975c:	01000043 	.word	0x01000043
    9760:	1c0101d6 	.word	0x1c0101d6
    9764:	32080068 	.word	0x32080068
    9768:	01080068 	.word	0x01080068
    976c:	0004bc5d 	.word	0x0004bc5d
    9770:	42391600 	.word	0x42391600
    9774:	d5010000 	.word	0xd5010000
    9778:	00032401 	.word	0x00032401
    977c:	18500100 	.word	0x18500100
    9780:	00004100 	.word	0x00004100
    9784:	4c01d501 	.word	0x4c01d501
    9788:	41000000 	.word	0x41000000
    978c:	00000041 	.word	0x00000041
    9790:	42b80113 	.word	0x42b80113
    9794:	eb010000 	.word	0xeb010000
    9798:	68340101 	.word	0x68340101
    979c:	684e0800 	.word	0x684e0800
    97a0:	5d010800 	.word	0x5d010800
    97a4:	000004f1 	.word	0x000004f1
    97a8:	00423916 	.word	0x00423916
    97ac:	01ea0100 	.word	0x01ea0100
    97b0:	00000324 	.word	0x00000324
    97b4:	6e165001 	.word	0x6e165001
    97b8:	0100002d 	.word	0x0100002d
    97bc:	00b401ea 	.word	0x00b401ea
    97c0:	51010000 	.word	0x51010000
    97c4:	68011300 	.word	0x68011300
    97c8:	01000041 	.word	0x01000041
    97cc:	5001020b 	.word	0x5001020b
    97d0:	66080068 	.word	0x66080068
    97d4:	01080068 	.word	0x01080068
    97d8:	0005285d 	.word	0x0005285d
    97dc:	42391600 	.word	0x42391600
    97e0:	0a010000 	.word	0x0a010000
    97e4:	00032402 	.word	0x00032402
    97e8:	18500100 	.word	0x18500100
    97ec:	00004093 	.word	0x00004093
    97f0:	4c020a01 	.word	0x4c020a01
    97f4:	54000000 	.word	0x54000000
    97f8:	00000041 	.word	0x00000041
    97fc:	42de0113 	.word	0x42de0113
    9800:	20010000 	.word	0x20010000
    9804:	68680102 	.word	0x68680102
    9808:	68820800 	.word	0x68820800
    980c:	5d010800 	.word	0x5d010800
    9810:	0000055d 	.word	0x0000055d
    9814:	00423916 	.word	0x00423916
    9818:	021f0100 	.word	0x021f0100
    981c:	00000324 	.word	0x00000324
    9820:	6e165001 	.word	0x6e165001
    9824:	0100002d 	.word	0x0100002d
    9828:	00b4021f 	.word	0x00b4021f
    982c:	51010000 	.word	0x51010000
    9830:	dd011300 	.word	0xdd011300
    9834:	01000040 	.word	0x01000040
    9838:	8401023c 	.word	0x8401023c
    983c:	8c080068 	.word	0x8c080068
    9840:	01080068 	.word	0x01080068
    9844:	0005945d 	.word	0x0005945d
    9848:	42391600 	.word	0x42391600
    984c:	3b010000 	.word	0x3b010000
    9850:	00032402 	.word	0x00032402
    9854:	18500100 	.word	0x18500100
    9858:	0000330e 	.word	0x0000330e
    985c:	4c023b01 	.word	0x4c023b01
    9860:	67000000 	.word	0x67000000
    9864:	00000041 	.word	0x00000041
    9868:	4354011b 	.word	0x4354011b
    986c:	4f010000 	.word	0x4f010000
    9870:	004c0102 	.word	0x004c0102
    9874:	688c0000 	.word	0x688c0000
    9878:	68940800 	.word	0x68940800
    987c:	5d010800 	.word	0x5d010800
    9880:	000005c1 	.word	0x000005c1
    9884:	00423918 	.word	0x00423918
    9888:	024e0100 	.word	0x024e0100
    988c:	00000324 	.word	0x00000324
    9890:	0000417a 	.word	0x0000417a
    9894:	1a011300 	.word	0x1a011300
    9898:	01000042 	.word	0x01000042
    989c:	94010261 	.word	0x94010261
    98a0:	a0080068 	.word	0xa0080068
    98a4:	01080068 	.word	0x01080068
    98a8:	0005e85d 	.word	0x0005e85d
    98ac:	42391600 	.word	0x42391600
    98b0:	60010000 	.word	0x60010000
    98b4:	00032402 	.word	0x00032402
    98b8:	00500100 	.word	0x00500100
    98bc:	42070113 	.word	0x42070113
    98c0:	74010000 	.word	0x74010000
    98c4:	68a00102 	.word	0x68a00102
    98c8:	68b20800 	.word	0x68b20800
    98cc:	5d010800 	.word	0x5d010800
    98d0:	0000061d 	.word	0x0000061d
    98d4:	00423916 	.word	0x00423916
    98d8:	02730100 	.word	0x02730100
    98dc:	00000324 	.word	0x00000324
    98e0:	58165001 	.word	0x58165001
    98e4:	01000041 	.word	0x01000041
    98e8:	005e0273 	.word	0x005e0273
    98ec:	51010000 	.word	0x51010000
    98f0:	75011300 	.word	0x75011300
    98f4:	01000040 	.word	0x01000040
    98f8:	b401028a 	.word	0xb401028a
    98fc:	c6080068 	.word	0xc6080068
    9900:	01080068 	.word	0x01080068
    9904:	0006525d 	.word	0x0006525d
    9908:	42391600 	.word	0x42391600
    990c:	89010000 	.word	0x89010000
    9910:	00032402 	.word	0x00032402
    9914:	16500100 	.word	0x16500100
    9918:	00004366 	.word	0x00004366
    991c:	5e028901 	.word	0x5e028901
    9920:	01000000 	.word	0x01000000
    9924:	01130051 	.word	0x01130051
    9928:	00004240 	.word	0x00004240
    992c:	0102a001 	.word	0x0102a001
    9930:	080068c8 	.word	0x080068c8
    9934:	080068e2 	.word	0x080068e2
    9938:	06875d01 	.word	0x06875d01
    993c:	39160000 	.word	0x39160000
    9940:	01000042 	.word	0x01000042
    9944:	0324029f 	.word	0x0324029f
    9948:	50010000 	.word	0x50010000
    994c:	002d6e16 	.word	0x002d6e16
    9950:	029f0100 	.word	0x029f0100
    9954:	000000b4 	.word	0x000000b4
    9958:	13005101 	.word	0x13005101
    995c:	0042fd01 	.word	0x0042fd01
    9960:	02bd0100 	.word	0x02bd0100
    9964:	0068e401 	.word	0x0068e401
    9968:	0068fe08 	.word	0x0068fe08
    996c:	bc5d0108 	.word	0xbc5d0108
    9970:	16000006 	.word	0x16000006
    9974:	00004239 	.word	0x00004239
    9978:	2402bc01 	.word	0x2402bc01
    997c:	01000003 	.word	0x01000003
    9980:	2d6e1650 	.word	0x2d6e1650
    9984:	bc010000 	.word	0xbc010000
    9988:	0000b402 	.word	0x0000b402
    998c:	00510100 	.word	0x00510100
    9990:	40ec0113 	.word	0x40ec0113
    9994:	da010000 	.word	0xda010000
    9998:	69000102 	.word	0x69000102
    999c:	691a0800 	.word	0x691a0800
    99a0:	5d010800 	.word	0x5d010800
    99a4:	000006f1 	.word	0x000006f1
    99a8:	00423916 	.word	0x00423916
    99ac:	02d90100 	.word	0x02d90100
    99b0:	00000324 	.word	0x00000324
    99b4:	6e165001 	.word	0x6e165001
    99b8:	0100002d 	.word	0x0100002d
    99bc:	00b402d9 	.word	0x00b402d9
    99c0:	51010000 	.word	0x51010000
    99c4:	9b011300 	.word	0x9b011300
    99c8:	01000042 	.word	0x01000042
    99cc:	1c0102f9 	.word	0x1c0102f9
    99d0:	32080069 	.word	0x32080069
    99d4:	01080069 	.word	0x01080069
    99d8:	0007285d 	.word	0x0007285d
    99dc:	42391600 	.word	0x42391600
    99e0:	f8010000 	.word	0xf8010000
    99e4:	00032402 	.word	0x00032402
    99e8:	18500100 	.word	0x18500100
    99ec:	00004128 	.word	0x00004128
    99f0:	4c02f801 	.word	0x4c02f801
    99f4:	8d000000 	.word	0x8d000000
    99f8:	00000041 	.word	0x00000041
    99fc:	42d00113 	.word	0x42d00113
    9a00:	0e010000 	.word	0x0e010000
    9a04:	69340103 	.word	0x69340103
    9a08:	694e0800 	.word	0x694e0800
    9a0c:	5d010800 	.word	0x5d010800
    9a10:	0000075d 	.word	0x0000075d
    9a14:	00423916 	.word	0x00423916
    9a18:	030d0100 	.word	0x030d0100
    9a1c:	00000324 	.word	0x00000324
    9a20:	6e165001 	.word	0x6e165001
    9a24:	0100002d 	.word	0x0100002d
    9a28:	00b4030d 	.word	0x00b4030d
    9a2c:	51010000 	.word	0x51010000
    9a30:	14011b00 	.word	0x14011b00
    9a34:	01000043 	.word	0x01000043
    9a38:	89010336 	.word	0x89010336
    9a3c:	50000000 	.word	0x50000000
    9a40:	5c080069 	.word	0x5c080069
    9a44:	01080069 	.word	0x01080069
    9a48:	0007a45d 	.word	0x0007a45d
    9a4c:	42391800 	.word	0x42391800
    9a50:	35010000 	.word	0x35010000
    9a54:	00032403 	.word	0x00032403
    9a58:	0041a000 	.word	0x0041a000
    9a5c:	41891600 	.word	0x41891600
    9a60:	35010000 	.word	0x35010000
    9a64:	00004c03 	.word	0x00004c03
    9a68:	19510100 	.word	0x19510100
    9a6c:	00002f47 	.word	0x00002f47
    9a70:	89033701 	.word	0x89033701
    9a74:	00000000 	.word	0x00000000
    9a78:	42790113 	.word	0x42790113
    9a7c:	6a010000 	.word	0x6a010000
    9a80:	695c0103 	.word	0x695c0103
    9a84:	69660800 	.word	0x69660800
    9a88:	5d010800 	.word	0x5d010800
    9a8c:	000007db 	.word	0x000007db
    9a90:	00423916 	.word	0x00423916
    9a94:	03690100 	.word	0x03690100
    9a98:	00000324 	.word	0x00000324
    9a9c:	89185001 	.word	0x89185001
    9aa0:	01000041 	.word	0x01000041
    9aa4:	004c0369 	.word	0x004c0369
    9aa8:	41b30000 	.word	0x41b30000
    9aac:	1b000000 	.word	0x1b000000
    9ab0:	00428901 	.word	0x00428901
    9ab4:	038b0100 	.word	0x038b0100
    9ab8:	00009401 	.word	0x00009401
    9abc:	00696800 	.word	0x00696800
    9ac0:	0069b208 	.word	0x0069b208
    9ac4:	525d0108 	.word	0x525d0108
    9ac8:	18000008 	.word	0x18000008
    9acc:	00004239 	.word	0x00004239
    9ad0:	24038a01 	.word	0x24038a01
    9ad4:	c6000003 	.word	0xc6000003
    9ad8:	18000041 	.word	0x18000041
    9adc:	00004328 	.word	0x00004328
    9ae0:	4c038a01 	.word	0x4c038a01
    9ae4:	d9000000 	.word	0xd9000000
    9ae8:	15000041 	.word	0x15000041
    9aec:	00004272 	.word	0x00004272
    9af0:	3a038c01 	.word	0x3a038c01
    9af4:	01000000 	.word	0x01000000
    9af8:	30631a52 	.word	0x30631a52
    9afc:	8c010000 	.word	0x8c010000
    9b00:	00003a03 	.word	0x00003a03
    9b04:	00420200 	.word	0x00420200
    9b08:	43a51a00 	.word	0x43a51a00
    9b0c:	8c010000 	.word	0x8c010000
    9b10:	00003a03 	.word	0x00003a03
    9b14:	00422000 	.word	0x00422000
    9b18:	2f471900 	.word	0x2f471900
    9b1c:	8d010000 	.word	0x8d010000
    9b20:	00009403 	.word	0x00009403
    9b24:	01130000 	.word	0x01130000
    9b28:	00004140 	.word	0x00004140
    9b2c:	0103db01 	.word	0x0103db01
    9b30:	080069b4 	.word	0x080069b4
    9b34:	080069c4 	.word	0x080069c4
    9b38:	08a15d01 	.word	0x08a15d01
    9b3c:	39160000 	.word	0x39160000
    9b40:	01000042 	.word	0x01000042
    9b44:	032403da 	.word	0x032403da
    9b48:	50010000 	.word	0x50010000
    9b4c:	00432818 	.word	0x00432818
    9b50:	03da0100 	.word	0x03da0100
    9b54:	0000004c 	.word	0x0000004c
    9b58:	00004233 	.word	0x00004233
    9b5c:	00427219 	.word	0x00427219
    9b60:	03dc0100 	.word	0x03dc0100
    9b64:	0000004c 	.word	0x0000004c
    9b68:	00306319 	.word	0x00306319
    9b6c:	03dc0100 	.word	0x03dc0100
    9b70:	0000004c 	.word	0x0000004c
    9b74:	88011c00 	.word	0x88011c00
    9b78:	01000040 	.word	0x01000040
    9b7c:	69c4018d 	.word	0x69c4018d
    9b80:	6a600800 	.word	0x6a600800
    9b84:	42460800 	.word	0x42460800
    9b88:	092a0000 	.word	0x092a0000
    9b8c:	39140000 	.word	0x39140000
    9b90:	01000042 	.word	0x01000042
    9b94:	0003248c 	.word	0x0003248c
    9b98:	00427100 	.word	0x00427100
    9b9c:	42531400 	.word	0x42531400
    9ba0:	8c010000 	.word	0x8c010000
    9ba4:	000002db 	.word	0x000002db
    9ba8:	00004290 	.word	0x00004290
    9bac:	002e071d 	.word	0x002e071d
    9bb0:	3a8e0100 	.word	0x3a8e0100
    9bb4:	ae000000 	.word	0xae000000
    9bb8:	1d000042 	.word	0x1d000042
    9bbc:	00004137 	.word	0x00004137
    9bc0:	003a8e01 	.word	0x003a8e01
    9bc4:	42d70000 	.word	0x42d70000
    9bc8:	5b1e0000 	.word	0x5b1e0000
    9bcc:	01000040 	.word	0x01000040
    9bd0:	00003a8f 	.word	0x00003a8f
    9bd4:	1f510100 	.word	0x1f510100
    9bd8:	000042eb 	.word	0x000042eb
    9bdc:	003a9001 	.word	0x003a9001
    9be0:	da1e0000 	.word	0xda1e0000
    9be4:	01000041 	.word	0x01000041
    9be8:	00003a91 	.word	0x00003a91
    9bec:	1e540100 	.word	0x1e540100
    9bf0:	000041e5 	.word	0x000041e5
    9bf4:	02ab9201 	.word	0x02ab9201
    9bf8:	91020000 	.word	0x91020000
    9bfc:	0120005c 	.word	0x0120005c
    9c00:	00004194 	.word	0x00004194
    9c04:	60015b01 	.word	0x60015b01
    9c08:	f408006a 	.word	0xf408006a
    9c0c:	ea08006a 	.word	0xea08006a
    9c10:	14000042 	.word	0x14000042
    9c14:	00004239 	.word	0x00004239
    9c18:	03245a01 	.word	0x03245a01
    9c1c:	43150000 	.word	0x43150000
    9c20:	00000000 	.word	0x00000000
    9c24:	0000008e 	.word	0x0000008e
    9c28:	2a260002 	.word	0x2a260002
    9c2c:	01040000 	.word	0x01040000
    9c30:	000026e5 	.word	0x000026e5
    9c34:	08006af4 	.word	0x08006af4
    9c38:	08006b62 	.word	0x08006b62
    9c3c:	336d7473 	.word	0x336d7473
    9c40:	30316632 	.word	0x30316632
    9c44:	696c5f78 	.word	0x696c5f78
    9c48:	72732f62 	.word	0x72732f62
    9c4c:	6f632f63 	.word	0x6f632f63
    9c50:	78657472 	.word	0x78657472
    9c54:	6d5f336d 	.word	0x6d5f336d
    9c58:	6f726361 	.word	0x6f726361
    9c5c:	4300732e 	.word	0x4300732e
    9c60:	73555c3a 	.word	0x73555c3a
    9c64:	5c737265 	.word	0x5c737265
    9c68:	74736e69 	.word	0x74736e69
    9c6c:	5c6c6c61 	.word	0x5c6c6c61
    9c70:	6a6f7270 	.word	0x6a6f7270
    9c74:	5c746b65 	.word	0x5c746b65
    9c78:	6c6f6942 	.word	0x6c6f6942
    9c7c:	2d64696f 	.word	0x2d64696f
    9c80:	616d7548 	.word	0x616d7548
    9c84:	64696f6e 	.word	0x64696f6e
    9c88:	626f522d 	.word	0x626f522d
    9c8c:	685c746f 	.word	0x685c746f
    9c90:	6e616d75 	.word	0x6e616d75
    9c94:	5f64696f 	.word	0x5f64696f
    9c98:	6f635f63 	.word	0x6f635f63
    9c9c:	6f72746e 	.word	0x6f72746e
    9ca0:	72656c6c 	.word	0x72656c6c
    9ca4:	554e4700 	.word	0x554e4700
    9ca8:	20534120 	.word	0x20534120
    9cac:	38312e32 	.word	0x38312e32
    9cb0:	0030352e 	.word	0x0030352e
    9cb4:	01028001 	.word	0x01028001
    9cb8:	00020000 	.word	0x00020000
    9cbc:	00002a3a 	.word	0x00002a3a
    9cc0:	01c60104 	.word	0x01c60104
    9cc4:	f9010000 	.word	0xf9010000
    9cc8:	9d000043 	.word	0x9d000043
    9ccc:	64000003 	.word	0x64000003
    9cd0:	b808006b 	.word	0xb808006b
    9cd4:	8908006b 	.word	0x8908006b
    9cd8:	02000027 	.word	0x02000027
    9cdc:	21500504 	.word	0x21500504
    9ce0:	02020000 	.word	0x02020000
    9ce4:	00049505 	.word	0x00049505
    9ce8:	06010200 	.word	0x06010200
    9cec:	00000469 	.word	0x00000469
    9cf0:	f1070402 	.word	0xf1070402
    9cf4:	02000021 	.word	0x02000021
    9cf8:	02220702 	.word	0x02220702
    9cfc:	01020000 	.word	0x01020000
    9d00:	00046708 	.word	0x00046708
    9d04:	07040300 	.word	0x07040300
    9d08:	43ce0104 	.word	0x43ce0104
    9d0c:	92010000 	.word	0x92010000
    9d10:	006b6401 	.word	0x006b6401
    9d14:	006bb808 	.word	0x006bb808
    9d18:	00433408 	.word	0x00433408
    9d1c:	00008600 	.word	0x00008600
    9d20:	442b0500 	.word	0x442b0500
    9d24:	93010000 	.word	0x93010000
    9d28:	00000086 	.word	0x00000086
    9d2c:	0043dc06 	.word	0x0043dc06
    9d30:	86930100 	.word	0x86930100
    9d34:	53000000 	.word	0x53000000
    9d38:	00000043 	.word	0x00000043
    9d3c:	003a0407 	.word	0x003a0407
    9d40:	e4080000 	.word	0xe4080000
    9d44:	01000043 	.word	0x01000043
    9d48:	00003a19 	.word	0x00003a19
    9d4c:	08010100 	.word	0x08010100
    9d50:	000043c7 	.word	0x000043c7
    9d54:	003a1b01 	.word	0x003a1b01
    9d58:	01010000 	.word	0x01010000
    9d5c:	0043f208 	.word	0x0043f208
    9d60:	3a1d0100 	.word	0x3a1d0100
    9d64:	01000000 	.word	0x01000000
    9d68:	44320801 	.word	0x44320801
    9d6c:	20010000 	.word	0x20010000
    9d70:	0000003a 	.word	0x0000003a
    9d74:	ec080101 	.word	0xec080101
    9d78:	01000043 	.word	0x01000043
    9d7c:	00003a22 	.word	0x00003a22
    9d80:	09010100 	.word	0x09010100
    9d84:	000043bf 	.word	0x000043bf
    9d88:	01012501 	.word	0x01012501
    9d8c:	0000e80a 	.word	0x0000e80a
    9d90:	0000e600 	.word	0x0000e600
    9d94:	004f0b00 	.word	0x004f0b00
    9d98:	004c0000 	.word	0x004c0000
    9d9c:	0407010c 	.word	0x0407010c
    9da0:	000000e6 	.word	0x000000e6
    9da4:	00441e0d 	.word	0x00441e0d
    9da8:	00390100 	.word	0x00390100
    9dac:	01000001 	.word	0x01000001
    9db0:	30000305 	.word	0x30000305
    9db4:	d60e0800 	.word	0xd60e0800
    9db8:	00000000 	.word	0x00000000
    9dbc:	000000c1 	.word	0x000000c1
    9dc0:	2aef0002 	.word	0x2aef0002
    9dc4:	01040000 	.word	0x01040000
    9dc8:	000001c6 	.word	0x000001c6
    9dcc:	00446f01 	.word	0x00446f01
    9dd0:	00443800 	.word	0x00443800
	...
    9ddc:	0027e700 	.word	0x0027e700
    9de0:	07040200 	.word	0x07040200
    9de4:	000021f6 	.word	0x000021f6
    9de8:	69060102 	.word	0x69060102
    9dec:	02000004 	.word	0x02000004
    9df0:	04670801 	.word	0x04670801
    9df4:	02020000 	.word	0x02020000
    9df8:	00049505 	.word	0x00049505
    9dfc:	07020200 	.word	0x07020200
    9e00:	00000222 	.word	0x00000222
    9e04:	69050403 	.word	0x69050403
    9e08:	0200746e 	.word	0x0200746e
    9e0c:	214b0508 	.word	0x214b0508
    9e10:	08020000 	.word	0x08020000
    9e14:	0021ec07 	.word	0x0021ec07
    9e18:	05040200 	.word	0x05040200
    9e1c:	00002150 	.word	0x00002150
    9e20:	02070404 	.word	0x02070404
    9e24:	21f10704 	.word	0x21f10704
    9e28:	01050000 	.word	0x01050000
    9e2c:	006e0406 	.word	0x006e0406
    9e30:	01020000 	.word	0x01020000
    9e34:	00047008 	.word	0x00047008
    9e38:	44b90700 	.word	0x44b90700
    9e3c:	02010000 	.word	0x02010000
    9e40:	00009c06 	.word	0x00009c06
    9e44:	44c80800 	.word	0x44c80800
    9e48:	08000000 	.word	0x08000000
    9e4c:	000044ad 	.word	0x000044ad
    9e50:	44a40801 	.word	0x44a40801
    9e54:	00020000 	.word	0x00020000
    9e58:	44cd0109 	.word	0x44cd0109
    9e5c:	40010000 	.word	0x40010000
    9e60:	00004801 	.word	0x00004801
	...
    9e6c:	00436600 	.word	0x00436600
    9e70:	6e660a00 	.word	0x6e660a00
    9e74:	703d0100 	.word	0x703d0100
    9e78:	91000000 	.word	0x91000000
    9e7c:	00000043 	.word	0x00000043
    9e80:	00093600 	.word	0x00093600
    9e84:	70000200 	.word	0x70000200
    9e88:	0400002b 	.word	0x0400002b
    9e8c:	0001c601 	.word	0x0001c601
    9e90:	44e00100 	.word	0x44e00100
    9e94:	44380000 	.word	0x44380000
	...
    9ea0:	285b0000 	.word	0x285b0000
    9ea4:	04020000 	.word	0x04020000
    9ea8:	0021f607 	.word	0x0021f607
    9eac:	06010200 	.word	0x06010200
    9eb0:	00000469 	.word	0x00000469
    9eb4:	67080102 	.word	0x67080102
    9eb8:	02000004 	.word	0x02000004
    9ebc:	04950502 	.word	0x04950502
    9ec0:	02020000 	.word	0x02020000
    9ec4:	00022207 	.word	0x00022207
    9ec8:	05040300 	.word	0x05040300
    9ecc:	00746e69 	.word	0x00746e69
    9ed0:	4b050802 	.word	0x4b050802
    9ed4:	02000021 	.word	0x02000021
    9ed8:	21ec0708 	.word	0x21ec0708
    9edc:	e7040000 	.word	0xe7040000
    9ee0:	02000046 	.word	0x02000046
    9ee4:	00004807 	.word	0x00004807
    9ee8:	05040200 	.word	0x05040200
    9eec:	00002150 	.word	0x00002150
    9ef0:	00479604 	.word	0x00479604
    9ef4:	682c0300 	.word	0x682c0300
    9ef8:	05000000 	.word	0x05000000
    9efc:	0000468f 	.word	0x0000468f
    9f00:	25016304 	.word	0x25016304
    9f04:	06000000 	.word	0x06000000
    9f08:	a5470304 	.word	0xa5470304
    9f0c:	07000000 	.word	0x07000000
    9f10:	00004689 	.word	0x00004689
    9f14:	007a4803 	.word	0x007a4803
    9f18:	43070000 	.word	0x43070000
    9f1c:	03000046 	.word	0x03000046
    9f20:	0000a549 	.word	0x0000a549
    9f24:	33080000 	.word	0x33080000
    9f28:	b5000000 	.word	0xb5000000
    9f2c:	09000000 	.word	0x09000000
    9f30:	000000b5 	.word	0x000000b5
    9f34:	040a0003 	.word	0x040a0003
    9f38:	03080b07 	.word	0x03080b07
    9f3c:	0000dd44 	.word	0x0000dd44
    9f40:	47800c00 	.word	0x47800c00
    9f44:	45030000 	.word	0x45030000
    9f48:	00000048 	.word	0x00000048
    9f4c:	0c002302 	.word	0x0c002302
    9f50:	00004788 	.word	0x00004788
    9f54:	00864a03 	.word	0x00864a03
    9f58:	23020000 	.word	0x23020000
    9f5c:	1c040004 	.word	0x1c040004
    9f60:	03000047 	.word	0x03000047
    9f64:	0000b84b 	.word	0x0000b84b
    9f68:	46150400 	.word	0x46150400
    9f6c:	4f030000 	.word	0x4f030000
    9f70:	0000005d 	.word	0x0000005d
    9f74:	c904040d 	.word	0xc904040d
    9f78:	05000047 	.word	0x05000047
    9f7c:	00010015 	.word	0x00010015
    9f80:	07040200 	.word	0x07040200
    9f84:	000021f1 	.word	0x000021f1
    9f88:	0046260e 	.word	0x0046260e
    9f8c:	2d051800 	.word	0x2d051800
    9f90:	00000166 	.word	0x00000166
    9f94:	0047340c 	.word	0x0047340c
    9f98:	662e0500 	.word	0x662e0500
    9f9c:	02000001 	.word	0x02000001
    9fa0:	5f0f0023 	.word	0x5f0f0023
    9fa4:	2f05006b 	.word	0x2f05006b
    9fa8:	00000048 	.word	0x00000048
    9fac:	0c042302 	.word	0x0c042302
    9fb0:	0000476b 	.word	0x0000476b
    9fb4:	00482f05 	.word	0x00482f05
    9fb8:	23020000 	.word	0x23020000
    9fbc:	460f0c08 	.word	0x460f0c08
    9fc0:	2f050000 	.word	0x2f050000
    9fc4:	00000048 	.word	0x00000048
    9fc8:	0c0c2302 	.word	0x0c0c2302
    9fcc:	00004815 	.word	0x00004815
    9fd0:	00482f05 	.word	0x00482f05
    9fd4:	23020000 	.word	0x23020000
    9fd8:	785f0f10 	.word	0x785f0f10
    9fdc:	6c300500 	.word	0x6c300500
    9fe0:	02000001 	.word	0x02000001
    9fe4:	10001423 	.word	0x10001423
    9fe8:	00010704 	.word	0x00010704
    9fec:	00f50800 	.word	0x00f50800
    9ff0:	017c0000 	.word	0x017c0000
    9ff4:	b5090000 	.word	0xb5090000
    9ff8:	00000000 	.word	0x00000000
    9ffc:	463e0e00 	.word	0x463e0e00
    a000:	05240000 	.word	0x05240000
    a004:	00020735 	.word	0x00020735
    a008:	45720c00 	.word	0x45720c00
    a00c:	36050000 	.word	0x36050000
    a010:	00000048 	.word	0x00000048
    a014:	0c002302 	.word	0x0c002302
    a018:	000047a5 	.word	0x000047a5
    a01c:	00483705 	.word	0x00483705
    a020:	23020000 	.word	0x23020000
    a024:	45870c04 	.word	0x45870c04
    a028:	38050000 	.word	0x38050000
    a02c:	00000048 	.word	0x00000048
    a030:	0c082302 	.word	0x0c082302
    a034:	00004887 	.word	0x00004887
    a038:	00483905 	.word	0x00483905
    a03c:	23020000 	.word	0x23020000
    a040:	46ba0c0c 	.word	0x46ba0c0c
    a044:	3a050000 	.word	0x3a050000
    a048:	00000048 	.word	0x00000048
    a04c:	0c102302 	.word	0x0c102302
    a050:	000046a9 	.word	0x000046a9
    a054:	00483b05 	.word	0x00483b05
    a058:	23020000 	.word	0x23020000
    a05c:	481a0c14 	.word	0x481a0c14
    a060:	3c050000 	.word	0x3c050000
    a064:	00000048 	.word	0x00000048
    a068:	0c182302 	.word	0x0c182302
    a06c:	000046fe 	.word	0x000046fe
    a070:	00483d05 	.word	0x00483d05
    a074:	23020000 	.word	0x23020000
    a078:	48550c1c 	.word	0x48550c1c
    a07c:	3e050000 	.word	0x3e050000
    a080:	00000048 	.word	0x00000048
    a084:	00202302 	.word	0x00202302
    a088:	00459611 	.word	0x00459611
    a08c:	05010800 	.word	0x05010800
    a090:	00025047 	.word	0x00025047
    a094:	46020c00 	.word	0x46020c00
    a098:	48050000 	.word	0x48050000
    a09c:	00000250 	.word	0x00000250
    a0a0:	0c002302 	.word	0x0c002302
    a0a4:	000044d4 	.word	0x000044d4
    a0a8:	02504905 	.word	0x02504905
    a0ac:	23030000 	.word	0x23030000
    a0b0:	bb0c0180 	.word	0xbb0c0180
    a0b4:	05000047 	.word	0x05000047
    a0b8:	0000f54b 	.word	0x0000f54b
    a0bc:	80230300 	.word	0x80230300
    a0c0:	45bb0c02 	.word	0x45bb0c02
    a0c4:	4e050000 	.word	0x4e050000
    a0c8:	000000f5 	.word	0x000000f5
    a0cc:	02842303 	.word	0x02842303
    a0d0:	00f30800 	.word	0x00f30800
    a0d4:	02600000 	.word	0x02600000
    a0d8:	b5090000 	.word	0xb5090000
    a0dc:	1f000000 	.word	0x1f000000
    a0e0:	44cc1100 	.word	0x44cc1100
    a0e4:	01900000 	.word	0x01900000
    a0e8:	02a75905 	.word	0x02a75905
    a0ec:	340c0000 	.word	0x340c0000
    a0f0:	05000047 	.word	0x05000047
    a0f4:	0002a75a 	.word	0x0002a75a
    a0f8:	00230200 	.word	0x00230200
    a0fc:	00474c0c 	.word	0x00474c0c
    a100:	485b0500 	.word	0x485b0500
    a104:	02000000 	.word	0x02000000
    a108:	0a0c0423 	.word	0x0a0c0423
    a10c:	05000046 	.word	0x05000046
    a110:	0002ad5d 	.word	0x0002ad5d
    a114:	08230200 	.word	0x08230200
    a118:	0045960c 	.word	0x0045960c
    a11c:	075e0500 	.word	0x075e0500
    a120:	03000002 	.word	0x03000002
    a124:	00018823 	.word	0x00018823
    a128:	02600410 	.word	0x02600410
    a12c:	bf080000 	.word	0xbf080000
    a130:	bd000002 	.word	0xbd000002
    a134:	09000002 	.word	0x09000002
    a138:	000000b5 	.word	0x000000b5
    a13c:	0112001f 	.word	0x0112001f
    a140:	02bd0410 	.word	0x02bd0410
    a144:	080e0000 	.word	0x080e0000
    a148:	08000047 	.word	0x08000047
    a14c:	02ee6905 	.word	0x02ee6905
    a150:	810c0000 	.word	0x810c0000
    a154:	05000045 	.word	0x05000045
    a158:	0002ee6a 	.word	0x0002ee6a
    a15c:	00230200 	.word	0x00230200
    a160:	0045130c 	.word	0x0045130c
    a164:	486b0500 	.word	0x486b0500
    a168:	02000000 	.word	0x02000000
    a16c:	10000423 	.word	0x10000423
    a170:	00003304 	.word	0x00003304
    a174:	47270e00 	.word	0x47270e00
    a178:	055c0000 	.word	0x055c0000
    a17c:	000432a9 	.word	0x000432a9
    a180:	705f0f00 	.word	0x705f0f00
    a184:	eeaa0500 	.word	0xeeaa0500
    a188:	02000002 	.word	0x02000002
    a18c:	5f0f0023 	.word	0x5f0f0023
    a190:	ab050072 	.word	0xab050072
    a194:	00000048 	.word	0x00000048
    a198:	0f042302 	.word	0x0f042302
    a19c:	0500775f 	.word	0x0500775f
    a1a0:	000048ac 	.word	0x000048ac
    a1a4:	08230200 	.word	0x08230200
    a1a8:	0045b40c 	.word	0x0045b40c
    a1ac:	3aad0500 	.word	0x3aad0500
    a1b0:	02000000 	.word	0x02000000
    a1b4:	5a0c0c23 	.word	0x5a0c0c23
    a1b8:	05000046 	.word	0x05000046
    a1bc:	00003aae 	.word	0x00003aae
    a1c0:	0e230200 	.word	0x0e230200
    a1c4:	66625f0f 	.word	0x66625f0f
    a1c8:	c5af0500 	.word	0xc5af0500
    a1cc:	02000002 	.word	0x02000002
    a1d0:	4c0c1023 	.word	0x4c0c1023
    a1d4:	05000045 	.word	0x05000045
    a1d8:	000048b0 	.word	0x000048b0
    a1dc:	18230200 	.word	0x18230200
    a1e0:	0045a40c 	.word	0x0045a40c
    a1e4:	f3b70500 	.word	0xf3b70500
    a1e8:	02000000 	.word	0x02000000
    a1ec:	2e0c1c23 	.word	0x2e0c1c23
    a1f0:	05000046 	.word	0x05000046
    a1f4:	0005c1b9 	.word	0x0005c1b9
    a1f8:	20230200 	.word	0x20230200
    a1fc:	0046a20c 	.word	0x0046a20c
    a200:	f1bb0500 	.word	0xf1bb0500
    a204:	02000005 	.word	0x02000005
    a208:	900c2423 	.word	0x900c2423
    a20c:	05000047 	.word	0x05000047
    a210:	000616bd 	.word	0x000616bd
    a214:	28230200 	.word	0x28230200
    a218:	002aee0c 	.word	0x002aee0c
    a21c:	31be0500 	.word	0x31be0500
    a220:	02000006 	.word	0x02000006
    a224:	5f0f2c23 	.word	0x5f0f2c23
    a228:	05006275 	.word	0x05006275
    a22c:	0002c5c1 	.word	0x0002c5c1
    a230:	30230200 	.word	0x30230200
    a234:	70755f0f 	.word	0x70755f0f
    a238:	eec20500 	.word	0xeec20500
    a23c:	02000002 	.word	0x02000002
    a240:	5f0f3823 	.word	0x5f0f3823
    a244:	05007275 	.word	0x05007275
    a248:	000048c3 	.word	0x000048c3
    a24c:	3c230200 	.word	0x3c230200
    a250:	00457b0c 	.word	0x00457b0c
    a254:	37c60500 	.word	0x37c60500
    a258:	02000006 	.word	0x02000006
    a25c:	470c4023 	.word	0x470c4023
    a260:	05000048 	.word	0x05000048
    a264:	000647c7 	.word	0x000647c7
    a268:	43230200 	.word	0x43230200
    a26c:	626c5f0f 	.word	0x626c5f0f
    a270:	c5ca0500 	.word	0xc5ca0500
    a274:	02000002 	.word	0x02000002
    a278:	ca0c4423 	.word	0xca0c4423
    a27c:	05000045 	.word	0x05000045
    a280:	000048cd 	.word	0x000048cd
    a284:	4c230200 	.word	0x4c230200
    a288:	0045db0c 	.word	0x0045db0c
    a28c:	48ce0500 	.word	0x48ce0500
    a290:	02000000 	.word	0x02000000
    a294:	970c5023 	.word	0x970c5023
    a298:	05000048 	.word	0x05000048
    a29c:	000451d1 	.word	0x000451d1
    a2a0:	54230200 	.word	0x54230200
    a2a4:	0046960c 	.word	0x0046960c
    a2a8:	e8d50500 	.word	0xe8d50500
    a2ac:	02000000 	.word	0x02000000
    a2b0:	13005823 	.word	0x13005823
    a2b4:	00004801 	.word	0x00004801
    a2b8:	00045100 	.word	0x00045100
    a2bc:	04511400 	.word	0x04511400
    a2c0:	f3140000 	.word	0xf3140000
    a2c4:	14000000 	.word	0x14000000
    a2c8:	000005b4 	.word	0x000005b4
    a2cc:	00004814 	.word	0x00004814
    a2d0:	04100000 	.word	0x04100000
    a2d4:	00000457 	.word	0x00000457
    a2d8:	00477311 	.word	0x00477311
    a2dc:	05040000 	.word	0x05040000
    a2e0:	0005b425 	.word	0x0005b425
    a2e4:	479e1500 	.word	0x479e1500
    a2e8:	41050000 	.word	0x41050000
    a2ec:	00004802 	.word	0x00004802
    a2f0:	00230200 	.word	0x00230200
    a2f4:	0045c315 	.word	0x0045c315
    a2f8:	02460500 	.word	0x02460500
    a2fc:	000006a4 	.word	0x000006a4
    a300:	15042302 	.word	0x15042302
    a304:	0000464a 	.word	0x0000464a
    a308:	a4024605 	.word	0xa4024605
    a30c:	02000006 	.word	0x02000006
    a310:	1e150823 	.word	0x1e150823
    a314:	05000046 	.word	0x05000046
    a318:	06a40246 	.word	0x06a40246
    a31c:	23020000 	.word	0x23020000
    a320:	4747150c 	.word	0x4747150c
    a324:	48050000 	.word	0x48050000
    a328:	00004802 	.word	0x00004802
    a32c:	10230200 	.word	0x10230200
    a330:	00452115 	.word	0x00452115
    a334:	02490500 	.word	0x02490500
    a338:	000008af 	.word	0x000008af
    a33c:	15142302 	.word	0x15142302
    a340:	000047f1 	.word	0x000047f1
    a344:	48024b05 	.word	0x48024b05
    a348:	02000000 	.word	0x02000000
    a34c:	51153023 	.word	0x51153023
    a350:	05000047 	.word	0x05000047
    a354:	05e6024c 	.word	0x05e6024c
    a358:	23020000 	.word	0x23020000
    a35c:	46c31534 	.word	0x46c31534
    a360:	4e050000 	.word	0x4e050000
    a364:	00004802 	.word	0x00004802
    a368:	38230200 	.word	0x38230200
    a36c:	00476115 	.word	0x00476115
    a370:	02500500 	.word	0x02500500
    a374:	000008cb 	.word	0x000008cb
    a378:	153c2302 	.word	0x153c2302
    a37c:	00001d7c 	.word	0x00001d7c
    a380:	66025305 	.word	0x66025305
    a384:	02000001 	.word	0x02000001
    a388:	34154023 	.word	0x34154023
    a38c:	05000046 	.word	0x05000046
    a390:	00480254 	.word	0x00480254
    a394:	23020000 	.word	0x23020000
    a398:	48821544 	.word	0x48821544
    a39c:	55050000 	.word	0x55050000
    a3a0:	00016602 	.word	0x00016602
    a3a4:	48230200 	.word	0x48230200
    a3a8:	0046dd15 	.word	0x0046dd15
    a3ac:	02560500 	.word	0x02560500
    a3b0:	000008d1 	.word	0x000008d1
    a3b4:	154c2302 	.word	0x154c2302
    a3b8:	00004652 	.word	0x00004652
    a3bc:	48025905 	.word	0x48025905
    a3c0:	02000000 	.word	0x02000000
    a3c4:	d3155023 	.word	0xd3155023
    a3c8:	05000045 	.word	0x05000045
    a3cc:	05b4025a 	.word	0x05b4025a
    a3d0:	23020000 	.word	0x23020000
    a3d4:	46f91554 	.word	0x46f91554
    a3d8:	7c050000 	.word	0x7c050000
    a3dc:	00088d02 	.word	0x00088d02
    a3e0:	58230200 	.word	0x58230200
    a3e4:	0044cc15 	.word	0x0044cc15
    a3e8:	027f0500 	.word	0x027f0500
    a3ec:	000002a7 	.word	0x000002a7
    a3f0:	02c82303 	.word	0x02c82303
    a3f4:	00466715 	.word	0x00466715
    a3f8:	02800500 	.word	0x02800500
    a3fc:	00000260 	.word	0x00000260
    a400:	02cc2303 	.word	0x02cc2303
    a404:	00483d15 	.word	0x00483d15
    a408:	02830500 	.word	0x02830500
    a40c:	000008e3 	.word	0x000008e3
    a410:	05dc2303 	.word	0x05dc2303
    a414:	0045ac15 	.word	0x0045ac15
    a418:	02880500 	.word	0x02880500
    a41c:	00000663 	.word	0x00000663
    a420:	05e02303 	.word	0x05e02303
    a424:	00459115 	.word	0x00459115
    a428:	02890500 	.word	0x02890500
    a42c:	000008ef 	.word	0x000008ef
    a430:	05ec2303 	.word	0x05ec2303
    a434:	ba041000 	.word	0xba041000
    a438:	02000005 	.word	0x02000005
    a43c:	04700801 	.word	0x04700801
    a440:	04100000 	.word	0x04100000
    a444:	00000432 	.word	0x00000432
    a448:	00480113 	.word	0x00480113
    a44c:	05e60000 	.word	0x05e60000
    a450:	51140000 	.word	0x51140000
    a454:	14000004 	.word	0x14000004
    a458:	000000f3 	.word	0x000000f3
    a45c:	0005e614 	.word	0x0005e614
    a460:	00481400 	.word	0x00481400
    a464:	10000000 	.word	0x10000000
    a468:	0005ec04 	.word	0x0005ec04
    a46c:	05ba1600 	.word	0x05ba1600
    a470:	04100000 	.word	0x04100000
    a474:	000005c7 	.word	0x000005c7
    a478:	006f0113 	.word	0x006f0113
    a47c:	06160000 	.word	0x06160000
    a480:	51140000 	.word	0x51140000
    a484:	14000004 	.word	0x14000004
    a488:	000000f3 	.word	0x000000f3
    a48c:	00006f14 	.word	0x00006f14
    a490:	00481400 	.word	0x00481400
    a494:	10000000 	.word	0x10000000
    a498:	0005f704 	.word	0x0005f704
    a49c:	48011300 	.word	0x48011300
    a4a0:	31000000 	.word	0x31000000
    a4a4:	14000006 	.word	0x14000006
    a4a8:	00000451 	.word	0x00000451
    a4ac:	0000f314 	.word	0x0000f314
    a4b0:	04100000 	.word	0x04100000
    a4b4:	0000061c 	.word	0x0000061c
    a4b8:	00003308 	.word	0x00003308
    a4bc:	00064700 	.word	0x00064700
    a4c0:	00b50900 	.word	0x00b50900
    a4c4:	00020000 	.word	0x00020000
    a4c8:	00003308 	.word	0x00003308
    a4cc:	00065700 	.word	0x00065700
    a4d0:	00b50900 	.word	0x00b50900
    a4d4:	00000000 	.word	0x00000000
    a4d8:	00471505 	.word	0x00471505
    a4dc:	010e0500 	.word	0x010e0500
    a4e0:	000002f4 	.word	0x000002f4
    a4e4:	00482417 	.word	0x00482417
    a4e8:	13050c00 	.word	0x13050c00
    a4ec:	00069e01 	.word	0x00069e01
    a4f0:	47341500 	.word	0x47341500
    a4f4:	14050000 	.word	0x14050000
    a4f8:	00069e01 	.word	0x00069e01
    a4fc:	00230200 	.word	0x00230200
    a500:	00466015 	.word	0x00466015
    a504:	01150500 	.word	0x01150500
    a508:	00000048 	.word	0x00000048
    a50c:	15042302 	.word	0x15042302
    a510:	0000470f 	.word	0x0000470f
    a514:	a4011605 	.word	0xa4011605
    a518:	02000006 	.word	0x02000006
    a51c:	10000823 	.word	0x10000823
    a520:	00066304 	.word	0x00066304
    a524:	57041000 	.word	0x57041000
    a528:	17000006 	.word	0x17000006
    a52c:	00004519 	.word	0x00004519
    a530:	012e050e 	.word	0x012e050e
    a534:	000006e5 	.word	0x000006e5
    a538:	00477a15 	.word	0x00477a15
    a53c:	012f0500 	.word	0x012f0500
    a540:	000006e5 	.word	0x000006e5
    a544:	15002302 	.word	0x15002302
    a548:	0000469c 	.word	0x0000469c
    a54c:	e5013005 	.word	0xe5013005
    a550:	02000006 	.word	0x02000006
    a554:	c4150623 	.word	0xc4150623
    a558:	05000047 	.word	0x05000047
    a55c:	00410131 	.word	0x00410131
    a560:	23020000 	.word	0x23020000
    a564:	4108000c 	.word	0x4108000c
    a568:	f5000000 	.word	0xf5000000
    a56c:	09000006 	.word	0x09000006
    a570:	000000b5 	.word	0x000000b5
    a574:	d0180002 	.word	0xd0180002
    a578:	15025f05 	.word	0x15025f05
    a57c:	15000008 	.word	0x15000008
    a580:	00004808 	.word	0x00004808
    a584:	25026005 	.word	0x25026005
    a588:	02000000 	.word	0x02000000
    a58c:	ae150023 	.word	0xae150023
    a590:	05000047 	.word	0x05000047
    a594:	05b40261 	.word	0x05b40261
    a598:	23020000 	.word	0x23020000
    a59c:	467c1504 	.word	0x467c1504
    a5a0:	62050000 	.word	0x62050000
    a5a4:	00081502 	.word	0x00081502
    a5a8:	08230200 	.word	0x08230200
    a5ac:	00486015 	.word	0x00486015
    a5b0:	02630500 	.word	0x02630500
    a5b4:	0000017c 	.word	0x0000017c
    a5b8:	15242302 	.word	0x15242302
    a5bc:	000046ce 	.word	0x000046ce
    a5c0:	48026405 	.word	0x48026405
    a5c4:	02000000 	.word	0x02000000
    a5c8:	2f154823 	.word	0x2f154823
    a5cc:	05000047 	.word	0x05000047
    a5d0:	00560265 	.word	0x00560265
    a5d4:	23020000 	.word	0x23020000
    a5d8:	486f1550 	.word	0x486f1550
    a5dc:	66050000 	.word	0x66050000
    a5e0:	0006aa02 	.word	0x0006aa02
    a5e4:	58230200 	.word	0x58230200
    a5e8:	00473a15 	.word	0x00473a15
    a5ec:	02670500 	.word	0x02670500
    a5f0:	000000dd 	.word	0x000000dd
    a5f4:	15682302 	.word	0x15682302
    a5f8:	00004874 	.word	0x00004874
    a5fc:	dd026805 	.word	0xdd026805
    a600:	02000000 	.word	0x02000000
    a604:	64157023 	.word	0x64157023
    a608:	05000045 	.word	0x05000045
    a60c:	00dd0269 	.word	0x00dd0269
    a610:	23020000 	.word	0x23020000
    a614:	48331578 	.word	0x48331578
    a618:	6a050000 	.word	0x6a050000
    a61c:	00082502 	.word	0x00082502
    a620:	80230300 	.word	0x80230300
    a624:	46701501 	.word	0x46701501
    a628:	6b050000 	.word	0x6b050000
    a62c:	00083502 	.word	0x00083502
    a630:	88230300 	.word	0x88230300
    a634:	47d11501 	.word	0x47d11501
    a638:	6c050000 	.word	0x6c050000
    a63c:	00004802 	.word	0x00004802
    a640:	a0230300 	.word	0xa0230300
    a644:	45f41501 	.word	0x45f41501
    a648:	6d050000 	.word	0x6d050000
    a64c:	0000dd02 	.word	0x0000dd02
    a650:	a4230300 	.word	0xa4230300
    a654:	45551501 	.word	0x45551501
    a658:	6e050000 	.word	0x6e050000
    a65c:	0000dd02 	.word	0x0000dd02
    a660:	ac230300 	.word	0xac230300
    a664:	45e31501 	.word	0x45e31501
    a668:	6f050000 	.word	0x6f050000
    a66c:	0000dd02 	.word	0x0000dd02
    a670:	b4230300 	.word	0xb4230300
    a674:	452c1501 	.word	0x452c1501
    a678:	70050000 	.word	0x70050000
    a67c:	0000dd02 	.word	0x0000dd02
    a680:	bc230300 	.word	0xbc230300
    a684:	453b1501 	.word	0x453b1501
    a688:	71050000 	.word	0x71050000
    a68c:	0000dd02 	.word	0x0000dd02
    a690:	c4230300 	.word	0xc4230300
    a694:	ba080001 	.word	0xba080001
    a698:	25000005 	.word	0x25000005
    a69c:	09000008 	.word	0x09000008
    a6a0:	000000b5 	.word	0x000000b5
    a6a4:	ba080019 	.word	0xba080019
    a6a8:	35000005 	.word	0x35000005
    a6ac:	09000008 	.word	0x09000008
    a6b0:	000000b5 	.word	0x000000b5
    a6b4:	ba080007 	.word	0xba080007
    a6b8:	45000005 	.word	0x45000005
    a6bc:	09000008 	.word	0x09000008
    a6c0:	000000b5 	.word	0x000000b5
    a6c4:	f0180017 	.word	0xf0180017
    a6c8:	6d027705 	.word	0x6d027705
    a6cc:	15000008 	.word	0x15000008
    a6d0:	000046b3 	.word	0x000046b3
    a6d4:	6d027905 	.word	0x6d027905
    a6d8:	02000008 	.word	0x02000008
    a6dc:	2a150023 	.word	0x2a150023
    a6e0:	05000048 	.word	0x05000048
    a6e4:	087d027a 	.word	0x087d027a
    a6e8:	23020000 	.word	0x23020000
    a6ec:	ee080078 	.word	0xee080078
    a6f0:	7d000002 	.word	0x7d000002
    a6f4:	09000008 	.word	0x09000008
    a6f8:	000000b5 	.word	0x000000b5
    a6fc:	2508001d 	.word	0x2508001d
    a700:	8d000000 	.word	0x8d000000
    a704:	09000008 	.word	0x09000008
    a708:	000000b5 	.word	0x000000b5
    a70c:	f019001d 	.word	0xf019001d
    a710:	af025d05 	.word	0xaf025d05
    a714:	1a000008 	.word	0x1a000008
    a718:	00004773 	.word	0x00004773
    a71c:	f5027205 	.word	0xf5027205
    a720:	1a000006 	.word	0x1a000006
    a724:	0000484d 	.word	0x0000484d
    a728:	45027b05 	.word	0x45027b05
    a72c:	00000008 	.word	0x00000008
    a730:	0005ba08 	.word	0x0005ba08
    a734:	0008bf00 	.word	0x0008bf00
    a738:	00b50900 	.word	0x00b50900
    a73c:	00180000 	.word	0x00180000
    a740:	08cb011b 	.word	0x08cb011b
    a744:	51140000 	.word	0x51140000
    a748:	00000004 	.word	0x00000004
    a74c:	08bf0410 	.word	0x08bf0410
    a750:	04100000 	.word	0x04100000
    a754:	00000166 	.word	0x00000166
    a758:	08e3011b 	.word	0x08e3011b
    a75c:	48140000 	.word	0x48140000
    a760:	00000000 	.word	0x00000000
    a764:	08e90410 	.word	0x08e90410
    a768:	04100000 	.word	0x04100000
    a76c:	000008d7 	.word	0x000008d7
    a770:	00065708 	.word	0x00065708
    a774:	0008ff00 	.word	0x0008ff00
    a778:	00b50900 	.word	0x00b50900
    a77c:	00020000 	.word	0x00020000
    a780:	44b4011c 	.word	0x44b4011c
    a784:	3c010000 	.word	0x3c010000
    a788:	00000001 	.word	0x00000001
    a78c:	00000000 	.word	0x00000000
    a790:	265d0100 	.word	0x265d0100
    a794:	1d000009 	.word	0x1d000009
    a798:	00004803 	.word	0x00004803
    a79c:	00483a01 	.word	0x00483a01
    a7a0:	43af0000 	.word	0x43af0000
    a7a4:	1e000000 	.word	0x1e000000
    a7a8:	000047de 	.word	0x000047de
    a7ac:	34032805 	.word	0x34032805
    a7b0:	01000009 	.word	0x01000009
    a7b4:	04511601 	.word	0x04511601
    a7b8:	0000      	.short	0x0000
    a7ba:	00          	.byte	0x00
    a7bb:	36          	.byte	0x36
    a7bc:	02000009 	.word	0x02000009
    a7c0:	002ce700 	.word	0x002ce700
    a7c4:	c6010400 	.word	0xc6010400
    a7c8:	01000001 	.word	0x01000001
    a7cc:	0000489d 	.word	0x0000489d
    a7d0:	000048d1 	.word	0x000048d1
	...
    a7dc:	0000294a 	.word	0x0000294a
    a7e0:	69060102 	.word	0x69060102
    a7e4:	02000004 	.word	0x02000004
    a7e8:	04670801 	.word	0x04670801
    a7ec:	02020000 	.word	0x02020000
    a7f0:	00049505 	.word	0x00049505
    a7f4:	07020200 	.word	0x07020200
    a7f8:	00000222 	.word	0x00000222
    a7fc:	69050403 	.word	0x69050403
    a800:	0200746e 	.word	0x0200746e
    a804:	21f60704 	.word	0x21f60704
    a808:	08020000 	.word	0x08020000
    a80c:	00214b05 	.word	0x00214b05
    a810:	07080200 	.word	0x07080200
    a814:	000021ec 	.word	0x000021ec
    a818:	0046e704 	.word	0x0046e704
    a81c:	41070100 	.word	0x41070100
    a820:	02000000 	.word	0x02000000
    a824:	21500504 	.word	0x21500504
    a828:	96040000 	.word	0x96040000
    a82c:	02000047 	.word	0x02000047
    a830:	0000682c 	.word	0x0000682c
    a834:	468f0500 	.word	0x468f0500
    a838:	63030000 	.word	0x63030000
    a83c:	00004801 	.word	0x00004801
    a840:	02040600 	.word	0x02040600
    a844:	0000a547 	.word	0x0000a547
    a848:	46890700 	.word	0x46890700
    a84c:	48020000 	.word	0x48020000
    a850:	0000007a 	.word	0x0000007a
    a854:	00464307 	.word	0x00464307
    a858:	a5490200 	.word	0xa5490200
    a85c:	00000000 	.word	0x00000000
    a860:	00002c08 	.word	0x00002c08
    a864:	0000b500 	.word	0x0000b500
    a868:	00b50900 	.word	0x00b50900
    a86c:	00030000 	.word	0x00030000
    a870:	0b07040a 	.word	0x0b07040a
    a874:	dd440208 	.word	0xdd440208
    a878:	0c000000 	.word	0x0c000000
    a87c:	00004780 	.word	0x00004780
    a880:	00414502 	.word	0x00414502
    a884:	23020000 	.word	0x23020000
    a888:	47880c00 	.word	0x47880c00
    a88c:	4a020000 	.word	0x4a020000
    a890:	00000086 	.word	0x00000086
    a894:	00042302 	.word	0x00042302
    a898:	00471c04 	.word	0x00471c04
    a89c:	b84b0200 	.word	0xb84b0200
    a8a0:	04000000 	.word	0x04000000
    a8a4:	00004615 	.word	0x00004615
    a8a8:	005d4f02 	.word	0x005d4f02
    a8ac:	040d0000 	.word	0x040d0000
    a8b0:	0047c904 	.word	0x0047c904
    a8b4:	00150400 	.word	0x00150400
    a8b8:	02000001 	.word	0x02000001
    a8bc:	21f10704 	.word	0x21f10704
    a8c0:	260e0000 	.word	0x260e0000
    a8c4:	18000046 	.word	0x18000046
    a8c8:	01662d04 	.word	0x01662d04
    a8cc:	340c0000 	.word	0x340c0000
    a8d0:	04000047 	.word	0x04000047
    a8d4:	0001662e 	.word	0x0001662e
    a8d8:	00230200 	.word	0x00230200
    a8dc:	006b5f0f 	.word	0x006b5f0f
    a8e0:	00412f04 	.word	0x00412f04
    a8e4:	23020000 	.word	0x23020000
    a8e8:	476b0c04 	.word	0x476b0c04
    a8ec:	2f040000 	.word	0x2f040000
    a8f0:	00000041 	.word	0x00000041
    a8f4:	0c082302 	.word	0x0c082302
    a8f8:	0000460f 	.word	0x0000460f
    a8fc:	00412f04 	.word	0x00412f04
    a900:	23020000 	.word	0x23020000
    a904:	48150c0c 	.word	0x48150c0c
    a908:	2f040000 	.word	0x2f040000
    a90c:	00000041 	.word	0x00000041
    a910:	0f102302 	.word	0x0f102302
    a914:	0400785f 	.word	0x0400785f
    a918:	00016c30 	.word	0x00016c30
    a91c:	14230200 	.word	0x14230200
    a920:	07041000 	.word	0x07041000
    a924:	08000001 	.word	0x08000001
    a928:	000000f5 	.word	0x000000f5
    a92c:	0000017c 	.word	0x0000017c
    a930:	0000b509 	.word	0x0000b509
    a934:	0e000000 	.word	0x0e000000
    a938:	0000463e 	.word	0x0000463e
    a93c:	07350424 	.word	0x07350424
    a940:	0c000002 	.word	0x0c000002
    a944:	00004572 	.word	0x00004572
    a948:	00413604 	.word	0x00413604
    a94c:	23020000 	.word	0x23020000
    a950:	47a50c00 	.word	0x47a50c00
    a954:	37040000 	.word	0x37040000
    a958:	00000041 	.word	0x00000041
    a95c:	0c042302 	.word	0x0c042302
    a960:	00004587 	.word	0x00004587
    a964:	00413804 	.word	0x00413804
    a968:	23020000 	.word	0x23020000
    a96c:	48870c08 	.word	0x48870c08
    a970:	39040000 	.word	0x39040000
    a974:	00000041 	.word	0x00000041
    a978:	0c0c2302 	.word	0x0c0c2302
    a97c:	000046ba 	.word	0x000046ba
    a980:	00413a04 	.word	0x00413a04
    a984:	23020000 	.word	0x23020000
    a988:	46a90c10 	.word	0x46a90c10
    a98c:	3b040000 	.word	0x3b040000
    a990:	00000041 	.word	0x00000041
    a994:	0c142302 	.word	0x0c142302
    a998:	0000481a 	.word	0x0000481a
    a99c:	00413c04 	.word	0x00413c04
    a9a0:	23020000 	.word	0x23020000
    a9a4:	46fe0c18 	.word	0x46fe0c18
    a9a8:	3d040000 	.word	0x3d040000
    a9ac:	00000041 	.word	0x00000041
    a9b0:	0c1c2302 	.word	0x0c1c2302
    a9b4:	00004855 	.word	0x00004855
    a9b8:	00413e04 	.word	0x00413e04
    a9bc:	23020000 	.word	0x23020000
    a9c0:	96110020 	.word	0x96110020
    a9c4:	08000045 	.word	0x08000045
    a9c8:	50470401 	.word	0x50470401
    a9cc:	0c000002 	.word	0x0c000002
    a9d0:	00004602 	.word	0x00004602
    a9d4:	02504804 	.word	0x02504804
    a9d8:	23020000 	.word	0x23020000
    a9dc:	44d40c00 	.word	0x44d40c00
    a9e0:	49040000 	.word	0x49040000
    a9e4:	00000250 	.word	0x00000250
    a9e8:	01802303 	.word	0x01802303
    a9ec:	0047bb0c 	.word	0x0047bb0c
    a9f0:	f54b0400 	.word	0xf54b0400
    a9f4:	03000000 	.word	0x03000000
    a9f8:	0c028023 	.word	0x0c028023
    a9fc:	000045bb 	.word	0x000045bb
    aa00:	00f54e04 	.word	0x00f54e04
    aa04:	23030000 	.word	0x23030000
    aa08:	08000284 	.word	0x08000284
    aa0c:	000000f3 	.word	0x000000f3
    aa10:	00000260 	.word	0x00000260
    aa14:	0000b509 	.word	0x0000b509
    aa18:	11001f00 	.word	0x11001f00
    aa1c:	000044cc 	.word	0x000044cc
    aa20:	59040190 	.word	0x59040190
    aa24:	000002a7 	.word	0x000002a7
    aa28:	0047340c 	.word	0x0047340c
    aa2c:	a75a0400 	.word	0xa75a0400
    aa30:	02000002 	.word	0x02000002
    aa34:	4c0c0023 	.word	0x4c0c0023
    aa38:	04000047 	.word	0x04000047
    aa3c:	0000415b 	.word	0x0000415b
    aa40:	04230200 	.word	0x04230200
    aa44:	00460a0c 	.word	0x00460a0c
    aa48:	ad5d0400 	.word	0xad5d0400
    aa4c:	02000002 	.word	0x02000002
    aa50:	960c0823 	.word	0x960c0823
    aa54:	04000045 	.word	0x04000045
    aa58:	0002075e 	.word	0x0002075e
    aa5c:	88230300 	.word	0x88230300
    aa60:	04100001 	.word	0x04100001
    aa64:	00000260 	.word	0x00000260
    aa68:	0002bf08 	.word	0x0002bf08
    aa6c:	0002bd00 	.word	0x0002bd00
    aa70:	00b50900 	.word	0x00b50900
    aa74:	001f0000 	.word	0x001f0000
    aa78:	04100112 	.word	0x04100112
    aa7c:	000002bd 	.word	0x000002bd
    aa80:	0047080e 	.word	0x0047080e
    aa84:	69040800 	.word	0x69040800
    aa88:	000002ee 	.word	0x000002ee
    aa8c:	0045810c 	.word	0x0045810c
    aa90:	ee6a0400 	.word	0xee6a0400
    aa94:	02000002 	.word	0x02000002
    aa98:	130c0023 	.word	0x130c0023
    aa9c:	04000045 	.word	0x04000045
    aaa0:	0000416b 	.word	0x0000416b
    aaa4:	04230200 	.word	0x04230200
    aaa8:	2c041000 	.word	0x2c041000
    aaac:	0e000000 	.word	0x0e000000
    aab0:	00004727 	.word	0x00004727
    aab4:	32a9045c 	.word	0x32a9045c
    aab8:	0f000004 	.word	0x0f000004
    aabc:	0400705f 	.word	0x0400705f
    aac0:	0002eeaa 	.word	0x0002eeaa
    aac4:	00230200 	.word	0x00230200
    aac8:	00725f0f 	.word	0x00725f0f
    aacc:	0041ab04 	.word	0x0041ab04
    aad0:	23020000 	.word	0x23020000
    aad4:	775f0f04 	.word	0x775f0f04
    aad8:	41ac0400 	.word	0x41ac0400
    aadc:	02000000 	.word	0x02000000
    aae0:	b40c0823 	.word	0xb40c0823
    aae4:	04000045 	.word	0x04000045
    aae8:	000033ad 	.word	0x000033ad
    aaec:	0c230200 	.word	0x0c230200
    aaf0:	00465a0c 	.word	0x00465a0c
    aaf4:	33ae0400 	.word	0x33ae0400
    aaf8:	02000000 	.word	0x02000000
    aafc:	5f0f0e23 	.word	0x5f0f0e23
    ab00:	04006662 	.word	0x04006662
    ab04:	0002c5af 	.word	0x0002c5af
    ab08:	10230200 	.word	0x10230200
    ab0c:	00454c0c 	.word	0x00454c0c
    ab10:	41b00400 	.word	0x41b00400
    ab14:	02000000 	.word	0x02000000
    ab18:	a40c1823 	.word	0xa40c1823
    ab1c:	04000045 	.word	0x04000045
    ab20:	0000f3b7 	.word	0x0000f3b7
    ab24:	1c230200 	.word	0x1c230200
    ab28:	00462e0c 	.word	0x00462e0c
    ab2c:	c1b90400 	.word	0xc1b90400
    ab30:	02000005 	.word	0x02000005
    ab34:	a20c2023 	.word	0xa20c2023
    ab38:	04000046 	.word	0x04000046
    ab3c:	0005f1bb 	.word	0x0005f1bb
    ab40:	24230200 	.word	0x24230200
    ab44:	0047900c 	.word	0x0047900c
    ab48:	16bd0400 	.word	0x16bd0400
    ab4c:	02000006 	.word	0x02000006
    ab50:	ee0c2823 	.word	0xee0c2823
    ab54:	0400002a 	.word	0x0400002a
    ab58:	000631be 	.word	0x000631be
    ab5c:	2c230200 	.word	0x2c230200
    ab60:	62755f0f 	.word	0x62755f0f
    ab64:	c5c10400 	.word	0xc5c10400
    ab68:	02000002 	.word	0x02000002
    ab6c:	5f0f3023 	.word	0x5f0f3023
    ab70:	04007075 	.word	0x04007075
    ab74:	0002eec2 	.word	0x0002eec2
    ab78:	38230200 	.word	0x38230200
    ab7c:	72755f0f 	.word	0x72755f0f
    ab80:	41c30400 	.word	0x41c30400
    ab84:	02000000 	.word	0x02000000
    ab88:	7b0c3c23 	.word	0x7b0c3c23
    ab8c:	04000045 	.word	0x04000045
    ab90:	000637c6 	.word	0x000637c6
    ab94:	40230200 	.word	0x40230200
    ab98:	0048470c 	.word	0x0048470c
    ab9c:	47c70400 	.word	0x47c70400
    aba0:	02000006 	.word	0x02000006
    aba4:	5f0f4323 	.word	0x5f0f4323
    aba8:	0400626c 	.word	0x0400626c
    abac:	0002c5ca 	.word	0x0002c5ca
    abb0:	44230200 	.word	0x44230200
    abb4:	0045ca0c 	.word	0x0045ca0c
    abb8:	41cd0400 	.word	0x41cd0400
    abbc:	02000000 	.word	0x02000000
    abc0:	db0c4c23 	.word	0xdb0c4c23
    abc4:	04000045 	.word	0x04000045
    abc8:	000041ce 	.word	0x000041ce
    abcc:	50230200 	.word	0x50230200
    abd0:	0048970c 	.word	0x0048970c
    abd4:	51d10400 	.word	0x51d10400
    abd8:	02000004 	.word	0x02000004
    abdc:	960c5423 	.word	0x960c5423
    abe0:	04000046 	.word	0x04000046
    abe4:	0000e8d5 	.word	0x0000e8d5
    abe8:	58230200 	.word	0x58230200
    abec:	41011300 	.word	0x41011300
    abf0:	51000000 	.word	0x51000000
    abf4:	14000004 	.word	0x14000004
    abf8:	00000451 	.word	0x00000451
    abfc:	0000f314 	.word	0x0000f314
    ac00:	05b41400 	.word	0x05b41400
    ac04:	41140000 	.word	0x41140000
    ac08:	00000000 	.word	0x00000000
    ac0c:	04570410 	.word	0x04570410
    ac10:	73110000 	.word	0x73110000
    ac14:	00000047 	.word	0x00000047
    ac18:	b4250404 	.word	0xb4250404
    ac1c:	15000005 	.word	0x15000005
    ac20:	0000479e 	.word	0x0000479e
    ac24:	41024104 	.word	0x41024104
    ac28:	02000000 	.word	0x02000000
    ac2c:	c3150023 	.word	0xc3150023
    ac30:	04000045 	.word	0x04000045
    ac34:	06a40246 	.word	0x06a40246
    ac38:	23020000 	.word	0x23020000
    ac3c:	464a1504 	.word	0x464a1504
    ac40:	46040000 	.word	0x46040000
    ac44:	0006a402 	.word	0x0006a402
    ac48:	08230200 	.word	0x08230200
    ac4c:	00461e15 	.word	0x00461e15
    ac50:	02460400 	.word	0x02460400
    ac54:	000006a4 	.word	0x000006a4
    ac58:	150c2302 	.word	0x150c2302
    ac5c:	00004747 	.word	0x00004747
    ac60:	41024804 	.word	0x41024804
    ac64:	02000000 	.word	0x02000000
    ac68:	21151023 	.word	0x21151023
    ac6c:	04000045 	.word	0x04000045
    ac70:	08af0249 	.word	0x08af0249
    ac74:	23020000 	.word	0x23020000
    ac78:	47f11514 	.word	0x47f11514
    ac7c:	4b040000 	.word	0x4b040000
    ac80:	00004102 	.word	0x00004102
    ac84:	30230200 	.word	0x30230200
    ac88:	00475115 	.word	0x00475115
    ac8c:	024c0400 	.word	0x024c0400
    ac90:	000005e6 	.word	0x000005e6
    ac94:	15342302 	.word	0x15342302
    ac98:	000046c3 	.word	0x000046c3
    ac9c:	41024e04 	.word	0x41024e04
    aca0:	02000000 	.word	0x02000000
    aca4:	61153823 	.word	0x61153823
    aca8:	04000047 	.word	0x04000047
    acac:	08cb0250 	.word	0x08cb0250
    acb0:	23020000 	.word	0x23020000
    acb4:	1d7c153c 	.word	0x1d7c153c
    acb8:	53040000 	.word	0x53040000
    acbc:	00016602 	.word	0x00016602
    acc0:	40230200 	.word	0x40230200
    acc4:	00463415 	.word	0x00463415
    acc8:	02540400 	.word	0x02540400
    accc:	00000041 	.word	0x00000041
    acd0:	15442302 	.word	0x15442302
    acd4:	00004882 	.word	0x00004882
    acd8:	66025504 	.word	0x66025504
    acdc:	02000001 	.word	0x02000001
    ace0:	dd154823 	.word	0xdd154823
    ace4:	04000046 	.word	0x04000046
    ace8:	08d10256 	.word	0x08d10256
    acec:	23020000 	.word	0x23020000
    acf0:	4652154c 	.word	0x4652154c
    acf4:	59040000 	.word	0x59040000
    acf8:	00004102 	.word	0x00004102
    acfc:	50230200 	.word	0x50230200
    ad00:	0045d315 	.word	0x0045d315
    ad04:	025a0400 	.word	0x025a0400
    ad08:	000005b4 	.word	0x000005b4
    ad0c:	15542302 	.word	0x15542302
    ad10:	000046f9 	.word	0x000046f9
    ad14:	8d027c04 	.word	0x8d027c04
    ad18:	02000008 	.word	0x02000008
    ad1c:	cc155823 	.word	0xcc155823
    ad20:	04000044 	.word	0x04000044
    ad24:	02a7027f 	.word	0x02a7027f
    ad28:	23030000 	.word	0x23030000
    ad2c:	671502c8 	.word	0x671502c8
    ad30:	04000046 	.word	0x04000046
    ad34:	02600280 	.word	0x02600280
    ad38:	23030000 	.word	0x23030000
    ad3c:	3d1502cc 	.word	0x3d1502cc
    ad40:	04000048 	.word	0x04000048
    ad44:	08e30283 	.word	0x08e30283
    ad48:	23030000 	.word	0x23030000
    ad4c:	ac1505dc 	.word	0xac1505dc
    ad50:	04000045 	.word	0x04000045
    ad54:	06630288 	.word	0x06630288
    ad58:	23030000 	.word	0x23030000
    ad5c:	911505e0 	.word	0x911505e0
    ad60:	04000045 	.word	0x04000045
    ad64:	08ef0289 	.word	0x08ef0289
    ad68:	23030000 	.word	0x23030000
    ad6c:	100005ec 	.word	0x100005ec
    ad70:	0005ba04 	.word	0x0005ba04
    ad74:	08010200 	.word	0x08010200
    ad78:	00000470 	.word	0x00000470
    ad7c:	04320410 	.word	0x04320410
    ad80:	01130000 	.word	0x01130000
    ad84:	00000041 	.word	0x00000041
    ad88:	000005e6 	.word	0x000005e6
    ad8c:	00045114 	.word	0x00045114
    ad90:	00f31400 	.word	0x00f31400
    ad94:	e6140000 	.word	0xe6140000
    ad98:	14000005 	.word	0x14000005
    ad9c:	00000041 	.word	0x00000041
    ada0:	ec041000 	.word	0xec041000
    ada4:	16000005 	.word	0x16000005
    ada8:	000005ba 	.word	0x000005ba
    adac:	05c70410 	.word	0x05c70410
    adb0:	01130000 	.word	0x01130000
    adb4:	0000006f 	.word	0x0000006f
    adb8:	00000616 	.word	0x00000616
    adbc:	00045114 	.word	0x00045114
    adc0:	00f31400 	.word	0x00f31400
    adc4:	6f140000 	.word	0x6f140000
    adc8:	14000000 	.word	0x14000000
    adcc:	00000041 	.word	0x00000041
    add0:	f7041000 	.word	0xf7041000
    add4:	13000005 	.word	0x13000005
    add8:	00004101 	.word	0x00004101
    addc:	00063100 	.word	0x00063100
    ade0:	04511400 	.word	0x04511400
    ade4:	f3140000 	.word	0xf3140000
    ade8:	00000000 	.word	0x00000000
    adec:	061c0410 	.word	0x061c0410
    adf0:	2c080000 	.word	0x2c080000
    adf4:	47000000 	.word	0x47000000
    adf8:	09000006 	.word	0x09000006
    adfc:	000000b5 	.word	0x000000b5
    ae00:	2c080002 	.word	0x2c080002
    ae04:	57000000 	.word	0x57000000
    ae08:	09000006 	.word	0x09000006
    ae0c:	000000b5 	.word	0x000000b5
    ae10:	15050000 	.word	0x15050000
    ae14:	04000047 	.word	0x04000047
    ae18:	02f4010e 	.word	0x02f4010e
    ae1c:	24170000 	.word	0x24170000
    ae20:	0c000048 	.word	0x0c000048
    ae24:	9e011304 	.word	0x9e011304
    ae28:	15000006 	.word	0x15000006
    ae2c:	00004734 	.word	0x00004734
    ae30:	9e011404 	.word	0x9e011404
    ae34:	02000006 	.word	0x02000006
    ae38:	60150023 	.word	0x60150023
    ae3c:	04000046 	.word	0x04000046
    ae40:	00410115 	.word	0x00410115
    ae44:	23020000 	.word	0x23020000
    ae48:	470f1504 	.word	0x470f1504
    ae4c:	16040000 	.word	0x16040000
    ae50:	0006a401 	.word	0x0006a401
    ae54:	08230200 	.word	0x08230200
    ae58:	63041000 	.word	0x63041000
    ae5c:	10000006 	.word	0x10000006
    ae60:	00065704 	.word	0x00065704
    ae64:	45191700 	.word	0x45191700
    ae68:	040e0000 	.word	0x040e0000
    ae6c:	06e5012e 	.word	0x06e5012e
    ae70:	7a150000 	.word	0x7a150000
    ae74:	04000047 	.word	0x04000047
    ae78:	06e5012f 	.word	0x06e5012f
    ae7c:	23020000 	.word	0x23020000
    ae80:	469c1500 	.word	0x469c1500
    ae84:	30040000 	.word	0x30040000
    ae88:	0006e501 	.word	0x0006e501
    ae8c:	06230200 	.word	0x06230200
    ae90:	0047c415 	.word	0x0047c415
    ae94:	01310400 	.word	0x01310400
    ae98:	0000003a 	.word	0x0000003a
    ae9c:	000c2302 	.word	0x000c2302
    aea0:	00003a08 	.word	0x00003a08
    aea4:	0006f500 	.word	0x0006f500
    aea8:	00b50900 	.word	0x00b50900
    aeac:	00020000 	.word	0x00020000
    aeb0:	5f04d018 	.word	0x5f04d018
    aeb4:	00081502 	.word	0x00081502
    aeb8:	48081500 	.word	0x48081500
    aebc:	60040000 	.word	0x60040000
    aec0:	00004802 	.word	0x00004802
    aec4:	00230200 	.word	0x00230200
    aec8:	0047ae15 	.word	0x0047ae15
    aecc:	02610400 	.word	0x02610400
    aed0:	000005b4 	.word	0x000005b4
    aed4:	15042302 	.word	0x15042302
    aed8:	0000467c 	.word	0x0000467c
    aedc:	15026204 	.word	0x15026204
    aee0:	02000008 	.word	0x02000008
    aee4:	60150823 	.word	0x60150823
    aee8:	04000048 	.word	0x04000048
    aeec:	017c0263 	.word	0x017c0263
    aef0:	23020000 	.word	0x23020000
    aef4:	46ce1524 	.word	0x46ce1524
    aef8:	64040000 	.word	0x64040000
    aefc:	00004102 	.word	0x00004102
    af00:	48230200 	.word	0x48230200
    af04:	00472f15 	.word	0x00472f15
    af08:	02650400 	.word	0x02650400
    af0c:	00000056 	.word	0x00000056
    af10:	15502302 	.word	0x15502302
    af14:	0000486f 	.word	0x0000486f
    af18:	aa026604 	.word	0xaa026604
    af1c:	02000006 	.word	0x02000006
    af20:	3a155823 	.word	0x3a155823
    af24:	04000047 	.word	0x04000047
    af28:	00dd0267 	.word	0x00dd0267
    af2c:	23020000 	.word	0x23020000
    af30:	48741568 	.word	0x48741568
    af34:	68040000 	.word	0x68040000
    af38:	0000dd02 	.word	0x0000dd02
    af3c:	70230200 	.word	0x70230200
    af40:	00456415 	.word	0x00456415
    af44:	02690400 	.word	0x02690400
    af48:	000000dd 	.word	0x000000dd
    af4c:	15782302 	.word	0x15782302
    af50:	00004833 	.word	0x00004833
    af54:	25026a04 	.word	0x25026a04
    af58:	03000008 	.word	0x03000008
    af5c:	15018023 	.word	0x15018023
    af60:	00004670 	.word	0x00004670
    af64:	35026b04 	.word	0x35026b04
    af68:	03000008 	.word	0x03000008
    af6c:	15018823 	.word	0x15018823
    af70:	000047d1 	.word	0x000047d1
    af74:	41026c04 	.word	0x41026c04
    af78:	03000000 	.word	0x03000000
    af7c:	1501a023 	.word	0x1501a023
    af80:	000045f4 	.word	0x000045f4
    af84:	dd026d04 	.word	0xdd026d04
    af88:	03000000 	.word	0x03000000
    af8c:	1501a423 	.word	0x1501a423
    af90:	00004555 	.word	0x00004555
    af94:	dd026e04 	.word	0xdd026e04
    af98:	03000000 	.word	0x03000000
    af9c:	1501ac23 	.word	0x1501ac23
    afa0:	000045e3 	.word	0x000045e3
    afa4:	dd026f04 	.word	0xdd026f04
    afa8:	03000000 	.word	0x03000000
    afac:	1501b423 	.word	0x1501b423
    afb0:	0000452c 	.word	0x0000452c
    afb4:	dd027004 	.word	0xdd027004
    afb8:	03000000 	.word	0x03000000
    afbc:	1501bc23 	.word	0x1501bc23
    afc0:	0000453b 	.word	0x0000453b
    afc4:	dd027104 	.word	0xdd027104
    afc8:	03000000 	.word	0x03000000
    afcc:	0001c423 	.word	0x0001c423
    afd0:	0005ba08 	.word	0x0005ba08
    afd4:	00082500 	.word	0x00082500
    afd8:	00b50900 	.word	0x00b50900
    afdc:	00190000 	.word	0x00190000
    afe0:	0005ba08 	.word	0x0005ba08
    afe4:	00083500 	.word	0x00083500
    afe8:	00b50900 	.word	0x00b50900
    afec:	00070000 	.word	0x00070000
    aff0:	0005ba08 	.word	0x0005ba08
    aff4:	00084500 	.word	0x00084500
    aff8:	00b50900 	.word	0x00b50900
    affc:	00170000 	.word	0x00170000
    b000:	7704f018 	.word	0x7704f018
    b004:	00086d02 	.word	0x00086d02
    b008:	46b31500 	.word	0x46b31500
    b00c:	79040000 	.word	0x79040000
    b010:	00086d02 	.word	0x00086d02
    b014:	00230200 	.word	0x00230200
    b018:	00482a15 	.word	0x00482a15
    b01c:	027a0400 	.word	0x027a0400
    b020:	0000087d 	.word	0x0000087d
    b024:	00782302 	.word	0x00782302
    b028:	0002ee08 	.word	0x0002ee08
    b02c:	00087d00 	.word	0x00087d00
    b030:	00b50900 	.word	0x00b50900
    b034:	001d0000 	.word	0x001d0000
    b038:	00004808 	.word	0x00004808
    b03c:	00088d00 	.word	0x00088d00
    b040:	00b50900 	.word	0x00b50900
    b044:	001d0000 	.word	0x001d0000
    b048:	5d04f019 	.word	0x5d04f019
    b04c:	0008af02 	.word	0x0008af02
    b050:	47731a00 	.word	0x47731a00
    b054:	72040000 	.word	0x72040000
    b058:	0006f502 	.word	0x0006f502
    b05c:	484d1a00 	.word	0x484d1a00
    b060:	7b040000 	.word	0x7b040000
    b064:	00084502 	.word	0x00084502
    b068:	ba080000 	.word	0xba080000
    b06c:	bf000005 	.word	0xbf000005
    b070:	09000008 	.word	0x09000008
    b074:	000000b5 	.word	0x000000b5
    b078:	011b0018 	.word	0x011b0018
    b07c:	000008cb 	.word	0x000008cb
    b080:	00045114 	.word	0x00045114
    b084:	04100000 	.word	0x04100000
    b088:	000008bf 	.word	0x000008bf
    b08c:	01660410 	.word	0x01660410
    b090:	011b0000 	.word	0x011b0000
    b094:	000008e3 	.word	0x000008e3
    b098:	00004114 	.word	0x00004114
    b09c:	04100000 	.word	0x04100000
    b0a0:	000008e9 	.word	0x000008e9
    b0a4:	08d70410 	.word	0x08d70410
    b0a8:	57080000 	.word	0x57080000
    b0ac:	ff000006 	.word	0xff000006
    b0b0:	09000008 	.word	0x09000008
    b0b4:	000000b5 	.word	0x000000b5
    b0b8:	911c0002 	.word	0x911c0002
    b0bc:	05000048 	.word	0x05000048
    b0c0:	0004570c 	.word	0x0004570c
    b0c4:	00030500 	.word	0x00030500
    b0c8:	1d000000 	.word	0x1d000000
    b0cc:	000047e5 	.word	0x000047e5
    b0d0:	04511005 	.word	0x04511005
    b0d4:	05010000 	.word	0x05010000
    b0d8:	00000003 	.word	0x00000003
    b0dc:	47de1d00 	.word	0x47de1d00
    b0e0:	11050000 	.word	0x11050000
    b0e4:	00000934 	.word	0x00000934
    b0e8:	00030501 	.word	0x00030501
    b0ec:	16000000 	.word	0x16000000
    b0f0:	00000451 	.word	0x00000451
    b0f4:	00014200 	.word	0x00014200
    b0f8:	47000200 	.word	0x47000200
    b0fc:	0400002e 	.word	0x0400002e
    b100:	0001c601 	.word	0x0001c601
    b104:	49460100 	.word	0x49460100
    b108:	499a0000 	.word	0x499a0000
	...
    b114:	2a250000 	.word	0x2a250000
    b118:	01020000 	.word	0x01020000
    b11c:	00046906 	.word	0x00046906
    b120:	08010200 	.word	0x08010200
    b124:	00000467 	.word	0x00000467
    b128:	95050202 	.word	0x95050202
    b12c:	02000004 	.word	0x02000004
    b130:	02220702 	.word	0x02220702
    b134:	04030000 	.word	0x04030000
    b138:	746e6905 	.word	0x746e6905
    b13c:	07040200 	.word	0x07040200
    b140:	000021f6 	.word	0x000021f6
    b144:	4b050802 	.word	0x4b050802
    b148:	02000021 	.word	0x02000021
    b14c:	21ec0708 	.word	0x21ec0708
    b150:	04020000 	.word	0x04020000
    b154:	00215005 	.word	0x00215005
    b158:	07040400 	.word	0x07040400
    b15c:	00491a05 	.word	0x00491a05
    b160:	48d60200 	.word	0x48d60200
    b164:	02000000 	.word	0x02000000
    b168:	21f10704 	.word	0x21f10704
    b16c:	01020000 	.word	0x01020000
    b170:	00047008 	.word	0x00047008
    b174:	cf010600 	.word	0xcf010600
    b178:	01000049 	.word	0x01000049
    b17c:	00000132 	.word	0x00000132
    b180:	00000000 	.word	0x00000000
    b184:	43cd0000 	.word	0x43cd0000
    b188:	00b20000 	.word	0x00b20000
    b18c:	82070000 	.word	0x82070000
    b190:	01000047 	.word	0x01000047
    b194:	00006733 	.word	0x00006733
    b198:	08550100 	.word	0x08550100
    b19c:	34010069 	.word	0x34010069
    b1a0:	00000067 	.word	0x00000067
    b1a4:	06005401 	.word	0x06005401
    b1a8:	00498801 	.word	0x00498801
    b1ac:	01200100 	.word	0x01200100
	...
    b1b8:	000043ec 	.word	0x000043ec
    b1bc:	000000e4 	.word	0x000000e4
    b1c0:	00478207 	.word	0x00478207
    b1c4:	67210100 	.word	0x67210100
    b1c8:	01000000 	.word	0x01000000
    b1cc:	00690855 	.word	0x00690855
    b1d0:	00672201 	.word	0x00672201
    b1d4:	54010000 	.word	0x54010000
    b1d8:	00f10900 	.word	0x00f10900
    b1dc:	00ef0000 	.word	0x00ef0000
    b1e0:	000a0000 	.word	0x000a0000
    b1e4:	040c010b 	.word	0x040c010b
    b1e8:	000000ef 	.word	0x000000ef
    b1ec:	0049e10d 	.word	0x0049e10d
    b1f0:	e4130100 	.word	0xe4130100
    b1f4:	01000000 	.word	0x01000000
    b1f8:	49320d01 	.word	0x49320d01
    b1fc:	14010000 	.word	0x14010000
    b200:	000000e4 	.word	0x000000e4
    b204:	f70d0101 	.word	0xf70d0101
    b208:	01000049 	.word	0x01000049
    b20c:	0000e415 	.word	0x0000e415
    b210:	0d010100 	.word	0x0d010100
    b214:	00004977 	.word	0x00004977
    b218:	00e41601 	.word	0x00e41601
    b21c:	01010000 	.word	0x01010000
    b220:	0049070d 	.word	0x0049070d
    b224:	e4170100 	.word	0xe4170100
    b228:	01000000 	.word	0x01000000
    b22c:	49210d01 	.word	0x49210d01
    b230:	18010000 	.word	0x18010000
    b234:	000000e4 	.word	0x000000e4
    b238:	0a000101 	.word	0x0a000101
    b23c:	02000001 	.word	0x02000001
    b240:	002eeb00 	.word	0x002eeb00
    b244:	c6010400 	.word	0xc6010400
    b248:	01000001 	.word	0x01000001
    b24c:	00004a6f 	.word	0x00004a6f
    b250:	00004a2c 	.word	0x00004a2c
	...
    b25c:	00002acb 	.word	0x00002acb
    b260:	69050402 	.word	0x69050402
    b264:	0300746e 	.word	0x0300746e
    b268:	0000491a 	.word	0x0000491a
    b26c:	0037d602 	.word	0x0037d602
    b270:	04040000 	.word	0x04040000
    b274:	0021f607 	.word	0x0021f607
    b278:	63010500 	.word	0x63010500
    b27c:	0100004a 	.word	0x0100004a
    b280:	00d40139 	.word	0x00d40139
	...
    b28c:	440b0000 	.word	0x440b0000
    b290:	00d40000 	.word	0x00d40000
    b294:	27060000 	.word	0x27060000
    b298:	0100004a 	.word	0x0100004a
    b29c:	0000d435 	.word	0x0000d435
    b2a0:	00442a00 	.word	0x00442a00
    b2a4:	4a160600 	.word	0x4a160600
    b2a8:	35010000 	.word	0x35010000
    b2ac:	000000d6 	.word	0x000000d6
    b2b0:	00004448 	.word	0x00004448
    b2b4:	004a6a06 	.word	0x004a6a06
    b2b8:	2c350100 	.word	0x2c350100
    b2bc:	66000000 	.word	0x66000000
    b2c0:	07000044 	.word	0x07000044
    b2c4:	00747364 	.word	0x00747364
    b2c8:	00dd4701 	.word	0x00dd4701
    b2cc:	448f0000 	.word	0x448f0000
    b2d0:	73070000 	.word	0x73070000
    b2d4:	01006372 	.word	0x01006372
    b2d8:	0000ea48 	.word	0x0000ea48
    b2dc:	0044a200 	.word	0x0044a200
    b2e0:	4a1b0800 	.word	0x4a1b0800
    b2e4:	49010000 	.word	0x49010000
    b2e8:	000000f5 	.word	0x000000f5
    b2ec:	000044c0 	.word	0x000044c0
    b2f0:	004a0a08 	.word	0x004a0a08
    b2f4:	024a0100 	.word	0x024a0100
    b2f8:	e9000001 	.word	0xe9000001
    b2fc:	07000044 	.word	0x07000044
    b300:	006e656c 	.word	0x006e656c
    b304:	00254b01 	.word	0x00254b01
    b308:	45120000 	.word	0x45120000
    b30c:	09000000 	.word	0x09000000
    b310:	dc040a04 	.word	0xdc040a04
    b314:	0b000000 	.word	0x0b000000
    b318:	00e3040a 	.word	0x00e3040a
    b31c:	01040000 	.word	0x01040000
    b320:	00047008 	.word	0x00047008
    b324:	f0040a00 	.word	0xf0040a00
    b328:	0c000000 	.word	0x0c000000
    b32c:	000000e3 	.word	0x000000e3
    b330:	00fb040a 	.word	0x00fb040a
    b334:	04040000 	.word	0x04040000
    b338:	00215005 	.word	0x00215005
    b33c:	08040a00 	.word	0x08040a00
    b340:	0c000001 	.word	0x0c000001
    b344:	000000fb 	.word	0x000000fb
    b348:	00010f00 	.word	0x00010f00
    b34c:	84000200 	.word	0x84000200
    b350:	0400002f 	.word	0x0400002f
    b354:	0001c601 	.word	0x0001c601
    b358:	4ab10100 	.word	0x4ab10100
    b35c:	4a2c0000 	.word	0x4a2c0000
	...
    b368:	2ba00000 	.word	0x2ba00000
    b36c:	01020000 	.word	0x01020000
    b370:	00046906 	.word	0x00046906
    b374:	08010200 	.word	0x08010200
    b378:	00000467 	.word	0x00000467
    b37c:	95050202 	.word	0x95050202
    b380:	02000004 	.word	0x02000004
    b384:	02220702 	.word	0x02220702
    b388:	04030000 	.word	0x04030000
    b38c:	746e6905 	.word	0x746e6905
    b390:	07040200 	.word	0x07040200
    b394:	000021f6 	.word	0x000021f6
    b398:	4b050802 	.word	0x4b050802
    b39c:	02000021 	.word	0x02000021
    b3a0:	21ec0708 	.word	0x21ec0708
    b3a4:	04020000 	.word	0x04020000
    b3a8:	00215005 	.word	0x00215005
    b3ac:	07040400 	.word	0x07040400
    b3b0:	04020405 	.word	0x04020405
    b3b4:	0021f107 	.word	0x0021f107
    b3b8:	76040600 	.word	0x76040600
    b3bc:	02000000 	.word	0x02000000
    b3c0:	04700801 	.word	0x04700801
    b3c4:	1a070000 	.word	0x1a070000
    b3c8:	02000049 	.word	0x02000049
    b3cc:	000048d6 	.word	0x000048d6
    b3d0:	e6010800 	.word	0xe6010800
    b3d4:	0100004a 	.word	0x0100004a
    b3d8:	0067012f 	.word	0x0067012f
	...
    b3e4:	453b0000 	.word	0x453b0000
    b3e8:	010c0000 	.word	0x010c0000
    b3ec:	6d090000 	.word	0x6d090000
    b3f0:	672b0100 	.word	0x672b0100
    b3f4:	5a000000 	.word	0x5a000000
    b3f8:	09000045 	.word	0x09000045
    b3fc:	2b010063 	.word	0x2b010063
    b400:	00000041 	.word	0x00000041
    b404:	0000458e 	.word	0x0000458e
    b408:	01006e09 	.word	0x01006e09
    b40c:	00007d2b 	.word	0x00007d2b
    b410:	0045b700 	.word	0x0045b700
    b414:	00730a00 	.word	0x00730a00
    b418:	00703a01 	.word	0x00703a01
    b41c:	45eb0000 	.word	0x45eb0000
    b420:	690b0000 	.word	0x690b0000
    b424:	413b0100 	.word	0x413b0100
    b428:	0c000000 	.word	0x0c000000
    b42c:	00004aed 	.word	0x00004aed
    b430:	00693c01 	.word	0x00693c01
    b434:	46090000 	.word	0x46090000
    b438:	a40c0000 	.word	0xa40c0000
    b43c:	0100004a 	.word	0x0100004a
    b440:	00010c3d 	.word	0x00010c3d
    b444:	00463200 	.word	0x00463200
    b448:	00640d00 	.word	0x00640d00
    b44c:	00483e01 	.word	0x00483e01
    b450:	55010000 	.word	0x55010000
    b454:	69040600 	.word	0x69040600
    b458:	00000000 	.word	0x00000000
    b45c:	000009a1 	.word	0x000009a1
    b460:	30360002 	.word	0x30360002
    b464:	01040000 	.word	0x01040000
    b468:	000001c6 	.word	0x000001c6
    b46c:	004af401 	.word	0x004af401
    b470:	00443800 	.word	0x00443800
	...
    b47c:	002c7c00 	.word	0x002c7c00
    b480:	05040200 	.word	0x05040200
    b484:	00746e69 	.word	0x00746e69
    b488:	f6070403 	.word	0xf6070403
    b48c:	03000021 	.word	0x03000021
    b490:	04690601 	.word	0x04690601
    b494:	01030000 	.word	0x01030000
    b498:	00046708 	.word	0x00046708
    b49c:	05020300 	.word	0x05020300
    b4a0:	00000495 	.word	0x00000495
    b4a4:	22070203 	.word	0x22070203
    b4a8:	03000002 	.word	0x03000002
    b4ac:	214b0508 	.word	0x214b0508
    b4b0:	08030000 	.word	0x08030000
    b4b4:	0021ec07 	.word	0x0021ec07
    b4b8:	46e70400 	.word	0x46e70400
    b4bc:	07020000 	.word	0x07020000
    b4c0:	00000025 	.word	0x00000025
    b4c4:	50050403 	.word	0x50050403
    b4c8:	04000021 	.word	0x04000021
    b4cc:	00004796 	.word	0x00004796
    b4d0:	00682c03 	.word	0x00682c03
    b4d4:	8f050000 	.word	0x8f050000
    b4d8:	04000046 	.word	0x04000046
    b4dc:	002c0163 	.word	0x002c0163
    b4e0:	04060000 	.word	0x04060000
    b4e4:	00a54703 	.word	0x00a54703
    b4e8:	89070000 	.word	0x89070000
    b4ec:	03000046 	.word	0x03000046
    b4f0:	00007a48 	.word	0x00007a48
    b4f4:	46430700 	.word	0x46430700
    b4f8:	49030000 	.word	0x49030000
    b4fc:	000000a5 	.word	0x000000a5
    b500:	003a0800 	.word	0x003a0800
    b504:	00b50000 	.word	0x00b50000
    b508:	b5090000 	.word	0xb5090000
    b50c:	03000000 	.word	0x03000000
    b510:	07040a00 	.word	0x07040a00
    b514:	4403080b 	.word	0x4403080b
    b518:	000000dd 	.word	0x000000dd
    b51c:	0047800c 	.word	0x0047800c
    b520:	25450300 	.word	0x25450300
    b524:	02000000 	.word	0x02000000
    b528:	880c0023 	.word	0x880c0023
    b52c:	03000047 	.word	0x03000047
    b530:	0000864a 	.word	0x0000864a
    b534:	04230200 	.word	0x04230200
    b538:	471c0400 	.word	0x471c0400
    b53c:	4b030000 	.word	0x4b030000
    b540:	000000b8 	.word	0x000000b8
    b544:	00461504 	.word	0x00461504
    b548:	5d4f0300 	.word	0x5d4f0300
    b54c:	0d000000 	.word	0x0d000000
    b550:	47c90404 	.word	0x47c90404
    b554:	15050000 	.word	0x15050000
    b558:	00000100 	.word	0x00000100
    b55c:	f1070403 	.word	0xf1070403
    b560:	0e000021 	.word	0x0e000021
    b564:	00004626 	.word	0x00004626
    b568:	662d0518 	.word	0x662d0518
    b56c:	0c000001 	.word	0x0c000001
    b570:	00004734 	.word	0x00004734
    b574:	01662e05 	.word	0x01662e05
    b578:	23020000 	.word	0x23020000
    b57c:	6b5f0f00 	.word	0x6b5f0f00
    b580:	252f0500 	.word	0x252f0500
    b584:	02000000 	.word	0x02000000
    b588:	6b0c0423 	.word	0x6b0c0423
    b58c:	05000047 	.word	0x05000047
    b590:	0000252f 	.word	0x0000252f
    b594:	08230200 	.word	0x08230200
    b598:	00460f0c 	.word	0x00460f0c
    b59c:	252f0500 	.word	0x252f0500
    b5a0:	02000000 	.word	0x02000000
    b5a4:	150c0c23 	.word	0x150c0c23
    b5a8:	05000048 	.word	0x05000048
    b5ac:	0000252f 	.word	0x0000252f
    b5b0:	10230200 	.word	0x10230200
    b5b4:	00785f0f 	.word	0x00785f0f
    b5b8:	016c3005 	.word	0x016c3005
    b5bc:	23020000 	.word	0x23020000
    b5c0:	04100014 	.word	0x04100014
    b5c4:	00000107 	.word	0x00000107
    b5c8:	0000f508 	.word	0x0000f508
    b5cc:	00017c00 	.word	0x00017c00
    b5d0:	00b50900 	.word	0x00b50900
    b5d4:	00000000 	.word	0x00000000
    b5d8:	00463e0e 	.word	0x00463e0e
    b5dc:	35052400 	.word	0x35052400
    b5e0:	00000207 	.word	0x00000207
    b5e4:	0045720c 	.word	0x0045720c
    b5e8:	25360500 	.word	0x25360500
    b5ec:	02000000 	.word	0x02000000
    b5f0:	a50c0023 	.word	0xa50c0023
    b5f4:	05000047 	.word	0x05000047
    b5f8:	00002537 	.word	0x00002537
    b5fc:	04230200 	.word	0x04230200
    b600:	0045870c 	.word	0x0045870c
    b604:	25380500 	.word	0x25380500
    b608:	02000000 	.word	0x02000000
    b60c:	870c0823 	.word	0x870c0823
    b610:	05000048 	.word	0x05000048
    b614:	00002539 	.word	0x00002539
    b618:	0c230200 	.word	0x0c230200
    b61c:	0046ba0c 	.word	0x0046ba0c
    b620:	253a0500 	.word	0x253a0500
    b624:	02000000 	.word	0x02000000
    b628:	a90c1023 	.word	0xa90c1023
    b62c:	05000046 	.word	0x05000046
    b630:	0000253b 	.word	0x0000253b
    b634:	14230200 	.word	0x14230200
    b638:	00481a0c 	.word	0x00481a0c
    b63c:	253c0500 	.word	0x253c0500
    b640:	02000000 	.word	0x02000000
    b644:	fe0c1823 	.word	0xfe0c1823
    b648:	05000046 	.word	0x05000046
    b64c:	0000253d 	.word	0x0000253d
    b650:	1c230200 	.word	0x1c230200
    b654:	0048550c 	.word	0x0048550c
    b658:	253e0500 	.word	0x253e0500
    b65c:	02000000 	.word	0x02000000
    b660:	11002023 	.word	0x11002023
    b664:	00004596 	.word	0x00004596
    b668:	47050108 	.word	0x47050108
    b66c:	00000250 	.word	0x00000250
    b670:	0046020c 	.word	0x0046020c
    b674:	50480500 	.word	0x50480500
    b678:	02000002 	.word	0x02000002
    b67c:	d40c0023 	.word	0xd40c0023
    b680:	05000044 	.word	0x05000044
    b684:	00025049 	.word	0x00025049
    b688:	80230300 	.word	0x80230300
    b68c:	47bb0c01 	.word	0x47bb0c01
    b690:	4b050000 	.word	0x4b050000
    b694:	000000f5 	.word	0x000000f5
    b698:	02802303 	.word	0x02802303
    b69c:	0045bb0c 	.word	0x0045bb0c
    b6a0:	f54e0500 	.word	0xf54e0500
    b6a4:	03000000 	.word	0x03000000
    b6a8:	00028423 	.word	0x00028423
    b6ac:	0000f308 	.word	0x0000f308
    b6b0:	00026000 	.word	0x00026000
    b6b4:	00b50900 	.word	0x00b50900
    b6b8:	001f0000 	.word	0x001f0000
    b6bc:	0044cc11 	.word	0x0044cc11
    b6c0:	05019000 	.word	0x05019000
    b6c4:	0002a759 	.word	0x0002a759
    b6c8:	47340c00 	.word	0x47340c00
    b6cc:	5a050000 	.word	0x5a050000
    b6d0:	000002a7 	.word	0x000002a7
    b6d4:	0c002302 	.word	0x0c002302
    b6d8:	0000474c 	.word	0x0000474c
    b6dc:	00255b05 	.word	0x00255b05
    b6e0:	23020000 	.word	0x23020000
    b6e4:	460a0c04 	.word	0x460a0c04
    b6e8:	5d050000 	.word	0x5d050000
    b6ec:	000002ad 	.word	0x000002ad
    b6f0:	0c082302 	.word	0x0c082302
    b6f4:	00004596 	.word	0x00004596
    b6f8:	02075e05 	.word	0x02075e05
    b6fc:	23030000 	.word	0x23030000
    b700:	10000188 	.word	0x10000188
    b704:	00026004 	.word	0x00026004
    b708:	02bf0800 	.word	0x02bf0800
    b70c:	02bd0000 	.word	0x02bd0000
    b710:	b5090000 	.word	0xb5090000
    b714:	1f000000 	.word	0x1f000000
    b718:	10011200 	.word	0x10011200
    b71c:	0002bd04 	.word	0x0002bd04
    b720:	47080e00 	.word	0x47080e00
    b724:	05080000 	.word	0x05080000
    b728:	0002ee69 	.word	0x0002ee69
    b72c:	45810c00 	.word	0x45810c00
    b730:	6a050000 	.word	0x6a050000
    b734:	000002ee 	.word	0x000002ee
    b738:	0c002302 	.word	0x0c002302
    b73c:	00004513 	.word	0x00004513
    b740:	00256b05 	.word	0x00256b05
    b744:	23020000 	.word	0x23020000
    b748:	04100004 	.word	0x04100004
    b74c:	0000003a 	.word	0x0000003a
    b750:	0047270e 	.word	0x0047270e
    b754:	a9055c00 	.word	0xa9055c00
    b758:	00000432 	.word	0x00000432
    b75c:	00705f0f 	.word	0x00705f0f
    b760:	02eeaa05 	.word	0x02eeaa05
    b764:	23020000 	.word	0x23020000
    b768:	725f0f00 	.word	0x725f0f00
    b76c:	25ab0500 	.word	0x25ab0500
    b770:	02000000 	.word	0x02000000
    b774:	5f0f0423 	.word	0x5f0f0423
    b778:	ac050077 	.word	0xac050077
    b77c:	00000025 	.word	0x00000025
    b780:	0c082302 	.word	0x0c082302
    b784:	000045b4 	.word	0x000045b4
    b788:	0041ad05 	.word	0x0041ad05
    b78c:	23020000 	.word	0x23020000
    b790:	465a0c0c 	.word	0x465a0c0c
    b794:	ae050000 	.word	0xae050000
    b798:	00000041 	.word	0x00000041
    b79c:	0f0e2302 	.word	0x0f0e2302
    b7a0:	0066625f 	.word	0x0066625f
    b7a4:	02c5af05 	.word	0x02c5af05
    b7a8:	23020000 	.word	0x23020000
    b7ac:	454c0c10 	.word	0x454c0c10
    b7b0:	b0050000 	.word	0xb0050000
    b7b4:	00000025 	.word	0x00000025
    b7b8:	0c182302 	.word	0x0c182302
    b7bc:	000045a4 	.word	0x000045a4
    b7c0:	00f3b705 	.word	0x00f3b705
    b7c4:	23020000 	.word	0x23020000
    b7c8:	462e0c1c 	.word	0x462e0c1c
    b7cc:	b9050000 	.word	0xb9050000
    b7d0:	000005c1 	.word	0x000005c1
    b7d4:	0c202302 	.word	0x0c202302
    b7d8:	000046a2 	.word	0x000046a2
    b7dc:	05f1bb05 	.word	0x05f1bb05
    b7e0:	23020000 	.word	0x23020000
    b7e4:	47900c24 	.word	0x47900c24
    b7e8:	bd050000 	.word	0xbd050000
    b7ec:	00000616 	.word	0x00000616
    b7f0:	0c282302 	.word	0x0c282302
    b7f4:	00002aee 	.word	0x00002aee
    b7f8:	0631be05 	.word	0x0631be05
    b7fc:	23020000 	.word	0x23020000
    b800:	755f0f2c 	.word	0x755f0f2c
    b804:	c1050062 	.word	0xc1050062
    b808:	000002c5 	.word	0x000002c5
    b80c:	0f302302 	.word	0x0f302302
    b810:	0070755f 	.word	0x0070755f
    b814:	02eec205 	.word	0x02eec205
    b818:	23020000 	.word	0x23020000
    b81c:	755f0f38 	.word	0x755f0f38
    b820:	c3050072 	.word	0xc3050072
    b824:	00000025 	.word	0x00000025
    b828:	0c3c2302 	.word	0x0c3c2302
    b82c:	0000457b 	.word	0x0000457b
    b830:	0637c605 	.word	0x0637c605
    b834:	23020000 	.word	0x23020000
    b838:	48470c40 	.word	0x48470c40
    b83c:	c7050000 	.word	0xc7050000
    b840:	00000647 	.word	0x00000647
    b844:	0f432302 	.word	0x0f432302
    b848:	00626c5f 	.word	0x00626c5f
    b84c:	02c5ca05 	.word	0x02c5ca05
    b850:	23020000 	.word	0x23020000
    b854:	45ca0c44 	.word	0x45ca0c44
    b858:	cd050000 	.word	0xcd050000
    b85c:	00000025 	.word	0x00000025
    b860:	0c4c2302 	.word	0x0c4c2302
    b864:	000045db 	.word	0x000045db
    b868:	0025ce05 	.word	0x0025ce05
    b86c:	23020000 	.word	0x23020000
    b870:	48970c50 	.word	0x48970c50
    b874:	d1050000 	.word	0xd1050000
    b878:	00000451 	.word	0x00000451
    b87c:	0c542302 	.word	0x0c542302
    b880:	00004696 	.word	0x00004696
    b884:	00e8d505 	.word	0x00e8d505
    b888:	23020000 	.word	0x23020000
    b88c:	01130058 	.word	0x01130058
    b890:	00000025 	.word	0x00000025
    b894:	00000451 	.word	0x00000451
    b898:	00045114 	.word	0x00045114
    b89c:	00f31400 	.word	0x00f31400
    b8a0:	b4140000 	.word	0xb4140000
    b8a4:	14000005 	.word	0x14000005
    b8a8:	00000025 	.word	0x00000025
    b8ac:	57041000 	.word	0x57041000
    b8b0:	11000004 	.word	0x11000004
    b8b4:	00004773 	.word	0x00004773
    b8b8:	25050400 	.word	0x25050400
    b8bc:	000005b4 	.word	0x000005b4
    b8c0:	00479e15 	.word	0x00479e15
    b8c4:	02410500 	.word	0x02410500
    b8c8:	00000025 	.word	0x00000025
    b8cc:	15002302 	.word	0x15002302
    b8d0:	000045c3 	.word	0x000045c3
    b8d4:	a4024605 	.word	0xa4024605
    b8d8:	02000006 	.word	0x02000006
    b8dc:	4a150423 	.word	0x4a150423
    b8e0:	05000046 	.word	0x05000046
    b8e4:	06a40246 	.word	0x06a40246
    b8e8:	23020000 	.word	0x23020000
    b8ec:	461e1508 	.word	0x461e1508
    b8f0:	46050000 	.word	0x46050000
    b8f4:	0006a402 	.word	0x0006a402
    b8f8:	0c230200 	.word	0x0c230200
    b8fc:	00474715 	.word	0x00474715
    b900:	02480500 	.word	0x02480500
    b904:	00000025 	.word	0x00000025
    b908:	15102302 	.word	0x15102302
    b90c:	00004521 	.word	0x00004521
    b910:	af024905 	.word	0xaf024905
    b914:	02000008 	.word	0x02000008
    b918:	f1151423 	.word	0xf1151423
    b91c:	05000047 	.word	0x05000047
    b920:	0025024b 	.word	0x0025024b
    b924:	23020000 	.word	0x23020000
    b928:	47511530 	.word	0x47511530
    b92c:	4c050000 	.word	0x4c050000
    b930:	0005e602 	.word	0x0005e602
    b934:	34230200 	.word	0x34230200
    b938:	0046c315 	.word	0x0046c315
    b93c:	024e0500 	.word	0x024e0500
    b940:	00000025 	.word	0x00000025
    b944:	15382302 	.word	0x15382302
    b948:	00004761 	.word	0x00004761
    b94c:	cb025005 	.word	0xcb025005
    b950:	02000008 	.word	0x02000008
    b954:	7c153c23 	.word	0x7c153c23
    b958:	0500001d 	.word	0x0500001d
    b95c:	01660253 	.word	0x01660253
    b960:	23020000 	.word	0x23020000
    b964:	46341540 	.word	0x46341540
    b968:	54050000 	.word	0x54050000
    b96c:	00002502 	.word	0x00002502
    b970:	44230200 	.word	0x44230200
    b974:	00488215 	.word	0x00488215
    b978:	02550500 	.word	0x02550500
    b97c:	00000166 	.word	0x00000166
    b980:	15482302 	.word	0x15482302
    b984:	000046dd 	.word	0x000046dd
    b988:	d1025605 	.word	0xd1025605
    b98c:	02000008 	.word	0x02000008
    b990:	52154c23 	.word	0x52154c23
    b994:	05000046 	.word	0x05000046
    b998:	00250259 	.word	0x00250259
    b99c:	23020000 	.word	0x23020000
    b9a0:	45d31550 	.word	0x45d31550
    b9a4:	5a050000 	.word	0x5a050000
    b9a8:	0005b402 	.word	0x0005b402
    b9ac:	54230200 	.word	0x54230200
    b9b0:	0046f915 	.word	0x0046f915
    b9b4:	027c0500 	.word	0x027c0500
    b9b8:	0000088d 	.word	0x0000088d
    b9bc:	15582302 	.word	0x15582302
    b9c0:	000044cc 	.word	0x000044cc
    b9c4:	a7027f05 	.word	0xa7027f05
    b9c8:	03000002 	.word	0x03000002
    b9cc:	1502c823 	.word	0x1502c823
    b9d0:	00004667 	.word	0x00004667
    b9d4:	60028005 	.word	0x60028005
    b9d8:	03000002 	.word	0x03000002
    b9dc:	1502cc23 	.word	0x1502cc23
    b9e0:	0000483d 	.word	0x0000483d
    b9e4:	e3028305 	.word	0xe3028305
    b9e8:	03000008 	.word	0x03000008
    b9ec:	1505dc23 	.word	0x1505dc23
    b9f0:	000045ac 	.word	0x000045ac
    b9f4:	63028805 	.word	0x63028805
    b9f8:	03000006 	.word	0x03000006
    b9fc:	1505e023 	.word	0x1505e023
    ba00:	00004591 	.word	0x00004591
    ba04:	ef028905 	.word	0xef028905
    ba08:	03000008 	.word	0x03000008
    ba0c:	0005ec23 	.word	0x0005ec23
    ba10:	05ba0410 	.word	0x05ba0410
    ba14:	01030000 	.word	0x01030000
    ba18:	00047008 	.word	0x00047008
    ba1c:	32041000 	.word	0x32041000
    ba20:	13000004 	.word	0x13000004
    ba24:	00002501 	.word	0x00002501
    ba28:	0005e600 	.word	0x0005e600
    ba2c:	04511400 	.word	0x04511400
    ba30:	f3140000 	.word	0xf3140000
    ba34:	14000000 	.word	0x14000000
    ba38:	000005e6 	.word	0x000005e6
    ba3c:	00002514 	.word	0x00002514
    ba40:	04100000 	.word	0x04100000
    ba44:	000005ec 	.word	0x000005ec
    ba48:	0005ba16 	.word	0x0005ba16
    ba4c:	c7041000 	.word	0xc7041000
    ba50:	13000005 	.word	0x13000005
    ba54:	00006f01 	.word	0x00006f01
    ba58:	00061600 	.word	0x00061600
    ba5c:	04511400 	.word	0x04511400
    ba60:	f3140000 	.word	0xf3140000
    ba64:	14000000 	.word	0x14000000
    ba68:	0000006f 	.word	0x0000006f
    ba6c:	00002514 	.word	0x00002514
    ba70:	04100000 	.word	0x04100000
    ba74:	000005f7 	.word	0x000005f7
    ba78:	00250113 	.word	0x00250113
    ba7c:	06310000 	.word	0x06310000
    ba80:	51140000 	.word	0x51140000
    ba84:	14000004 	.word	0x14000004
    ba88:	000000f3 	.word	0x000000f3
    ba8c:	1c041000 	.word	0x1c041000
    ba90:	08000006 	.word	0x08000006
    ba94:	0000003a 	.word	0x0000003a
    ba98:	00000647 	.word	0x00000647
    ba9c:	0000b509 	.word	0x0000b509
    baa0:	08000200 	.word	0x08000200
    baa4:	0000003a 	.word	0x0000003a
    baa8:	00000657 	.word	0x00000657
    baac:	0000b509 	.word	0x0000b509
    bab0:	05000000 	.word	0x05000000
    bab4:	00004715 	.word	0x00004715
    bab8:	f4010e05 	.word	0xf4010e05
    babc:	17000002 	.word	0x17000002
    bac0:	00004824 	.word	0x00004824
    bac4:	0113050c 	.word	0x0113050c
    bac8:	0000069e 	.word	0x0000069e
    bacc:	00473415 	.word	0x00473415
    bad0:	01140500 	.word	0x01140500
    bad4:	0000069e 	.word	0x0000069e
    bad8:	15002302 	.word	0x15002302
    badc:	00004660 	.word	0x00004660
    bae0:	25011505 	.word	0x25011505
    bae4:	02000000 	.word	0x02000000
    bae8:	0f150423 	.word	0x0f150423
    baec:	05000047 	.word	0x05000047
    baf0:	06a40116 	.word	0x06a40116
    baf4:	23020000 	.word	0x23020000
    baf8:	04100008 	.word	0x04100008
    bafc:	00000663 	.word	0x00000663
    bb00:	06570410 	.word	0x06570410
    bb04:	19170000 	.word	0x19170000
    bb08:	0e000045 	.word	0x0e000045
    bb0c:	e5012e05 	.word	0xe5012e05
    bb10:	15000006 	.word	0x15000006
    bb14:	0000477a 	.word	0x0000477a
    bb18:	e5012f05 	.word	0xe5012f05
    bb1c:	02000006 	.word	0x02000006
    bb20:	9c150023 	.word	0x9c150023
    bb24:	05000046 	.word	0x05000046
    bb28:	06e50130 	.word	0x06e50130
    bb2c:	23020000 	.word	0x23020000
    bb30:	47c41506 	.word	0x47c41506
    bb34:	31050000 	.word	0x31050000
    bb38:	00004801 	.word	0x00004801
    bb3c:	0c230200 	.word	0x0c230200
    bb40:	00480800 	.word	0x00480800
    bb44:	06f50000 	.word	0x06f50000
    bb48:	b5090000 	.word	0xb5090000
    bb4c:	02000000 	.word	0x02000000
    bb50:	05d01800 	.word	0x05d01800
    bb54:	0815025f 	.word	0x0815025f
    bb58:	08150000 	.word	0x08150000
    bb5c:	05000048 	.word	0x05000048
    bb60:	002c0260 	.word	0x002c0260
    bb64:	23020000 	.word	0x23020000
    bb68:	47ae1500 	.word	0x47ae1500
    bb6c:	61050000 	.word	0x61050000
    bb70:	0005b402 	.word	0x0005b402
    bb74:	04230200 	.word	0x04230200
    bb78:	00467c15 	.word	0x00467c15
    bb7c:	02620500 	.word	0x02620500
    bb80:	00000815 	.word	0x00000815
    bb84:	15082302 	.word	0x15082302
    bb88:	00004860 	.word	0x00004860
    bb8c:	7c026305 	.word	0x7c026305
    bb90:	02000001 	.word	0x02000001
    bb94:	ce152423 	.word	0xce152423
    bb98:	05000046 	.word	0x05000046
    bb9c:	00250264 	.word	0x00250264
    bba0:	23020000 	.word	0x23020000
    bba4:	472f1548 	.word	0x472f1548
    bba8:	65050000 	.word	0x65050000
    bbac:	00005602 	.word	0x00005602
    bbb0:	50230200 	.word	0x50230200
    bbb4:	00486f15 	.word	0x00486f15
    bbb8:	02660500 	.word	0x02660500
    bbbc:	000006aa 	.word	0x000006aa
    bbc0:	15582302 	.word	0x15582302
    bbc4:	0000473a 	.word	0x0000473a
    bbc8:	dd026705 	.word	0xdd026705
    bbcc:	02000000 	.word	0x02000000
    bbd0:	74156823 	.word	0x74156823
    bbd4:	05000048 	.word	0x05000048
    bbd8:	00dd0268 	.word	0x00dd0268
    bbdc:	23020000 	.word	0x23020000
    bbe0:	45641570 	.word	0x45641570
    bbe4:	69050000 	.word	0x69050000
    bbe8:	0000dd02 	.word	0x0000dd02
    bbec:	78230200 	.word	0x78230200
    bbf0:	00483315 	.word	0x00483315
    bbf4:	026a0500 	.word	0x026a0500
    bbf8:	00000825 	.word	0x00000825
    bbfc:	01802303 	.word	0x01802303
    bc00:	00467015 	.word	0x00467015
    bc04:	026b0500 	.word	0x026b0500
    bc08:	00000835 	.word	0x00000835
    bc0c:	01882303 	.word	0x01882303
    bc10:	0047d115 	.word	0x0047d115
    bc14:	026c0500 	.word	0x026c0500
    bc18:	00000025 	.word	0x00000025
    bc1c:	01a02303 	.word	0x01a02303
    bc20:	0045f415 	.word	0x0045f415
    bc24:	026d0500 	.word	0x026d0500
    bc28:	000000dd 	.word	0x000000dd
    bc2c:	01a42303 	.word	0x01a42303
    bc30:	00455515 	.word	0x00455515
    bc34:	026e0500 	.word	0x026e0500
    bc38:	000000dd 	.word	0x000000dd
    bc3c:	01ac2303 	.word	0x01ac2303
    bc40:	0045e315 	.word	0x0045e315
    bc44:	026f0500 	.word	0x026f0500
    bc48:	000000dd 	.word	0x000000dd
    bc4c:	01b42303 	.word	0x01b42303
    bc50:	00452c15 	.word	0x00452c15
    bc54:	02700500 	.word	0x02700500
    bc58:	000000dd 	.word	0x000000dd
    bc5c:	01bc2303 	.word	0x01bc2303
    bc60:	00453b15 	.word	0x00453b15
    bc64:	02710500 	.word	0x02710500
    bc68:	000000dd 	.word	0x000000dd
    bc6c:	01c42303 	.word	0x01c42303
    bc70:	05ba0800 	.word	0x05ba0800
    bc74:	08250000 	.word	0x08250000
    bc78:	b5090000 	.word	0xb5090000
    bc7c:	19000000 	.word	0x19000000
    bc80:	05ba0800 	.word	0x05ba0800
    bc84:	08350000 	.word	0x08350000
    bc88:	b5090000 	.word	0xb5090000
    bc8c:	07000000 	.word	0x07000000
    bc90:	05ba0800 	.word	0x05ba0800
    bc94:	08450000 	.word	0x08450000
    bc98:	b5090000 	.word	0xb5090000
    bc9c:	17000000 	.word	0x17000000
    bca0:	05f01800 	.word	0x05f01800
    bca4:	086d0277 	.word	0x086d0277
    bca8:	b3150000 	.word	0xb3150000
    bcac:	05000046 	.word	0x05000046
    bcb0:	086d0279 	.word	0x086d0279
    bcb4:	23020000 	.word	0x23020000
    bcb8:	482a1500 	.word	0x482a1500
    bcbc:	7a050000 	.word	0x7a050000
    bcc0:	00087d02 	.word	0x00087d02
    bcc4:	78230200 	.word	0x78230200
    bcc8:	02ee0800 	.word	0x02ee0800
    bccc:	087d0000 	.word	0x087d0000
    bcd0:	b5090000 	.word	0xb5090000
    bcd4:	1d000000 	.word	0x1d000000
    bcd8:	002c0800 	.word	0x002c0800
    bcdc:	088d0000 	.word	0x088d0000
    bce0:	b5090000 	.word	0xb5090000
    bce4:	1d000000 	.word	0x1d000000
    bce8:	05f01900 	.word	0x05f01900
    bcec:	08af025d 	.word	0x08af025d
    bcf0:	731a0000 	.word	0x731a0000
    bcf4:	05000047 	.word	0x05000047
    bcf8:	06f50272 	.word	0x06f50272
    bcfc:	4d1a0000 	.word	0x4d1a0000
    bd00:	05000048 	.word	0x05000048
    bd04:	0845027b 	.word	0x0845027b
    bd08:	08000000 	.word	0x08000000
    bd0c:	000005ba 	.word	0x000005ba
    bd10:	000008bf 	.word	0x000008bf
    bd14:	0000b509 	.word	0x0000b509
    bd18:	1b001800 	.word	0x1b001800
    bd1c:	0008cb01 	.word	0x0008cb01
    bd20:	04511400 	.word	0x04511400
    bd24:	10000000 	.word	0x10000000
    bd28:	0008bf04 	.word	0x0008bf04
    bd2c:	66041000 	.word	0x66041000
    bd30:	1b000001 	.word	0x1b000001
    bd34:	0008e301 	.word	0x0008e301
    bd38:	00251400 	.word	0x00251400
    bd3c:	10000000 	.word	0x10000000
    bd40:	0008e904 	.word	0x0008e904
    bd44:	d7041000 	.word	0xd7041000
    bd48:	08000008 	.word	0x08000008
    bd4c:	00000657 	.word	0x00000657
    bd50:	000008ff 	.word	0x000008ff
    bd54:	0000b509 	.word	0x0000b509
    bd58:	1c000200 	.word	0x1c000200
    bd5c:	000044b9 	.word	0x000044b9
    bd60:	1e060601 	.word	0x1e060601
    bd64:	1d000009 	.word	0x1d000009
    bd68:	000044c8 	.word	0x000044c8
    bd6c:	44ad1d00 	.word	0x44ad1d00
    bd70:	1d010000 	.word	0x1d010000
    bd74:	000044a4 	.word	0x000044a4
    bd78:	011e0002 	.word	0x011e0002
    bd7c:	00004b30 	.word	0x00004b30
    bd80:	25011701 	.word	0x25011701
	...
    bd8c:	66000000 	.word	0x66000000
    bd90:	8b000046 	.word	0x8b000046
    bd94:	1f000009 	.word	0x1f000009
    bd98:	00004b2b 	.word	0x00004b2b
    bd9c:	00251101 	.word	0x00251101
    bda0:	46850000 	.word	0x46850000
    bda4:	66200000 	.word	0x66200000
    bda8:	1101006e 	.word	0x1101006e
    bdac:	000002bf 	.word	0x000002bf
    bdb0:	000046a3 	.word	0x000046a3
    bdb4:	67726120 	.word	0x67726120
    bdb8:	f3110100 	.word	0xf3110100
    bdbc:	c1000000 	.word	0xc1000000
    bdc0:	20000046 	.word	0x20000046
    bdc4:	11010064 	.word	0x11010064
    bdc8:	000000f3 	.word	0x000000f3
    bdcc:	000046df 	.word	0x000046df
    bdd0:	00459f21 	.word	0x00459f21
    bdd4:	8b180100 	.word	0x8b180100
    bdd8:	22000009 	.word	0x22000009
    bddc:	19010070 	.word	0x19010070
    bde0:	000002a7 	.word	0x000002a7
    bde4:	10005c01 	.word	0x10005c01
    bde8:	00020704 	.word	0x00020704
    bdec:	47de2300 	.word	0x47de2300
    bdf0:	28050000 	.word	0x28050000
    bdf4:	00099f03 	.word	0x00099f03
    bdf8:	16010100 	.word	0x16010100
    bdfc:	00000451 	.word	0x00000451
    be00:	0009ae00 	.word	0x0009ae00
    be04:	f2000200 	.word	0xf2000200
    be08:	04000031 	.word	0x04000031
    be0c:	0001c601 	.word	0x0001c601
    be10:	4b550100 	.word	0x4b550100
    be14:	44380000 	.word	0x44380000
	...
    be20:	2da30000 	.word	0x2da30000
    be24:	04020000 	.word	0x04020000
    be28:	0021f607 	.word	0x0021f607
    be2c:	06010200 	.word	0x06010200
    be30:	00000469 	.word	0x00000469
    be34:	67080102 	.word	0x67080102
    be38:	02000004 	.word	0x02000004
    be3c:	04950502 	.word	0x04950502
    be40:	02020000 	.word	0x02020000
    be44:	00022207 	.word	0x00022207
    be48:	05040300 	.word	0x05040300
    be4c:	00746e69 	.word	0x00746e69
    be50:	4b050802 	.word	0x4b050802
    be54:	02000021 	.word	0x02000021
    be58:	21ec0708 	.word	0x21ec0708
    be5c:	e7040000 	.word	0xe7040000
    be60:	02000046 	.word	0x02000046
    be64:	00004807 	.word	0x00004807
    be68:	05040200 	.word	0x05040200
    be6c:	00002150 	.word	0x00002150
    be70:	00479604 	.word	0x00479604
    be74:	682c0300 	.word	0x682c0300
    be78:	05000000 	.word	0x05000000
    be7c:	0000468f 	.word	0x0000468f
    be80:	25016304 	.word	0x25016304
    be84:	06000000 	.word	0x06000000
    be88:	a5470304 	.word	0xa5470304
    be8c:	07000000 	.word	0x07000000
    be90:	00004689 	.word	0x00004689
    be94:	007a4803 	.word	0x007a4803
    be98:	43070000 	.word	0x43070000
    be9c:	03000046 	.word	0x03000046
    bea0:	0000a549 	.word	0x0000a549
    bea4:	33080000 	.word	0x33080000
    bea8:	b5000000 	.word	0xb5000000
    beac:	09000000 	.word	0x09000000
    beb0:	000000b5 	.word	0x000000b5
    beb4:	040a0003 	.word	0x040a0003
    beb8:	03080b07 	.word	0x03080b07
    bebc:	0000dd44 	.word	0x0000dd44
    bec0:	47800c00 	.word	0x47800c00
    bec4:	45030000 	.word	0x45030000
    bec8:	00000048 	.word	0x00000048
    becc:	0c002302 	.word	0x0c002302
    bed0:	00004788 	.word	0x00004788
    bed4:	00864a03 	.word	0x00864a03
    bed8:	23020000 	.word	0x23020000
    bedc:	1c040004 	.word	0x1c040004
    bee0:	03000047 	.word	0x03000047
    bee4:	0000b84b 	.word	0x0000b84b
    bee8:	46150400 	.word	0x46150400
    beec:	4f030000 	.word	0x4f030000
    bef0:	0000005d 	.word	0x0000005d
    bef4:	c904040d 	.word	0xc904040d
    bef8:	05000047 	.word	0x05000047
    befc:	00010015 	.word	0x00010015
    bf00:	07040200 	.word	0x07040200
    bf04:	000021f1 	.word	0x000021f1
    bf08:	0046260e 	.word	0x0046260e
    bf0c:	2d051800 	.word	0x2d051800
    bf10:	00000166 	.word	0x00000166
    bf14:	0047340c 	.word	0x0047340c
    bf18:	662e0500 	.word	0x662e0500
    bf1c:	02000001 	.word	0x02000001
    bf20:	5f0f0023 	.word	0x5f0f0023
    bf24:	2f05006b 	.word	0x2f05006b
    bf28:	00000048 	.word	0x00000048
    bf2c:	0c042302 	.word	0x0c042302
    bf30:	0000476b 	.word	0x0000476b
    bf34:	00482f05 	.word	0x00482f05
    bf38:	23020000 	.word	0x23020000
    bf3c:	460f0c08 	.word	0x460f0c08
    bf40:	2f050000 	.word	0x2f050000
    bf44:	00000048 	.word	0x00000048
    bf48:	0c0c2302 	.word	0x0c0c2302
    bf4c:	00004815 	.word	0x00004815
    bf50:	00482f05 	.word	0x00482f05
    bf54:	23020000 	.word	0x23020000
    bf58:	785f0f10 	.word	0x785f0f10
    bf5c:	6c300500 	.word	0x6c300500
    bf60:	02000001 	.word	0x02000001
    bf64:	10001423 	.word	0x10001423
    bf68:	00010704 	.word	0x00010704
    bf6c:	00f50800 	.word	0x00f50800
    bf70:	017c0000 	.word	0x017c0000
    bf74:	b5090000 	.word	0xb5090000
    bf78:	00000000 	.word	0x00000000
    bf7c:	463e0e00 	.word	0x463e0e00
    bf80:	05240000 	.word	0x05240000
    bf84:	00020735 	.word	0x00020735
    bf88:	45720c00 	.word	0x45720c00
    bf8c:	36050000 	.word	0x36050000
    bf90:	00000048 	.word	0x00000048
    bf94:	0c002302 	.word	0x0c002302
    bf98:	000047a5 	.word	0x000047a5
    bf9c:	00483705 	.word	0x00483705
    bfa0:	23020000 	.word	0x23020000
    bfa4:	45870c04 	.word	0x45870c04
    bfa8:	38050000 	.word	0x38050000
    bfac:	00000048 	.word	0x00000048
    bfb0:	0c082302 	.word	0x0c082302
    bfb4:	00004887 	.word	0x00004887
    bfb8:	00483905 	.word	0x00483905
    bfbc:	23020000 	.word	0x23020000
    bfc0:	46ba0c0c 	.word	0x46ba0c0c
    bfc4:	3a050000 	.word	0x3a050000
    bfc8:	00000048 	.word	0x00000048
    bfcc:	0c102302 	.word	0x0c102302
    bfd0:	000046a9 	.word	0x000046a9
    bfd4:	00483b05 	.word	0x00483b05
    bfd8:	23020000 	.word	0x23020000
    bfdc:	481a0c14 	.word	0x481a0c14
    bfe0:	3c050000 	.word	0x3c050000
    bfe4:	00000048 	.word	0x00000048
    bfe8:	0c182302 	.word	0x0c182302
    bfec:	000046fe 	.word	0x000046fe
    bff0:	00483d05 	.word	0x00483d05
    bff4:	23020000 	.word	0x23020000
    bff8:	48550c1c 	.word	0x48550c1c
    bffc:	3e050000 	.word	0x3e050000
    c000:	00000048 	.word	0x00000048
    c004:	00202302 	.word	0x00202302
    c008:	00459611 	.word	0x00459611
    c00c:	05010800 	.word	0x05010800
    c010:	00025047 	.word	0x00025047
    c014:	46020c00 	.word	0x46020c00
    c018:	48050000 	.word	0x48050000
    c01c:	00000250 	.word	0x00000250
    c020:	0c002302 	.word	0x0c002302
    c024:	000044d4 	.word	0x000044d4
    c028:	02504905 	.word	0x02504905
    c02c:	23030000 	.word	0x23030000
    c030:	bb0c0180 	.word	0xbb0c0180
    c034:	05000047 	.word	0x05000047
    c038:	0000f54b 	.word	0x0000f54b
    c03c:	80230300 	.word	0x80230300
    c040:	45bb0c02 	.word	0x45bb0c02
    c044:	4e050000 	.word	0x4e050000
    c048:	000000f5 	.word	0x000000f5
    c04c:	02842303 	.word	0x02842303
    c050:	00f30800 	.word	0x00f30800
    c054:	02600000 	.word	0x02600000
    c058:	b5090000 	.word	0xb5090000
    c05c:	1f000000 	.word	0x1f000000
    c060:	44cc1100 	.word	0x44cc1100
    c064:	01900000 	.word	0x01900000
    c068:	02a75905 	.word	0x02a75905
    c06c:	340c0000 	.word	0x340c0000
    c070:	05000047 	.word	0x05000047
    c074:	0002a75a 	.word	0x0002a75a
    c078:	00230200 	.word	0x00230200
    c07c:	00474c0c 	.word	0x00474c0c
    c080:	485b0500 	.word	0x485b0500
    c084:	02000000 	.word	0x02000000
    c088:	0a0c0423 	.word	0x0a0c0423
    c08c:	05000046 	.word	0x05000046
    c090:	0002ad5d 	.word	0x0002ad5d
    c094:	08230200 	.word	0x08230200
    c098:	0045960c 	.word	0x0045960c
    c09c:	075e0500 	.word	0x075e0500
    c0a0:	03000002 	.word	0x03000002
    c0a4:	00018823 	.word	0x00018823
    c0a8:	02600410 	.word	0x02600410
    c0ac:	bf080000 	.word	0xbf080000
    c0b0:	bd000002 	.word	0xbd000002
    c0b4:	09000002 	.word	0x09000002
    c0b8:	000000b5 	.word	0x000000b5
    c0bc:	0112001f 	.word	0x0112001f
    c0c0:	02bd0410 	.word	0x02bd0410
    c0c4:	080e0000 	.word	0x080e0000
    c0c8:	08000047 	.word	0x08000047
    c0cc:	02ee6905 	.word	0x02ee6905
    c0d0:	810c0000 	.word	0x810c0000
    c0d4:	05000045 	.word	0x05000045
    c0d8:	0002ee6a 	.word	0x0002ee6a
    c0dc:	00230200 	.word	0x00230200
    c0e0:	0045130c 	.word	0x0045130c
    c0e4:	486b0500 	.word	0x486b0500
    c0e8:	02000000 	.word	0x02000000
    c0ec:	10000423 	.word	0x10000423
    c0f0:	00003304 	.word	0x00003304
    c0f4:	47270e00 	.word	0x47270e00
    c0f8:	055c0000 	.word	0x055c0000
    c0fc:	000432a9 	.word	0x000432a9
    c100:	705f0f00 	.word	0x705f0f00
    c104:	eeaa0500 	.word	0xeeaa0500
    c108:	02000002 	.word	0x02000002
    c10c:	5f0f0023 	.word	0x5f0f0023
    c110:	ab050072 	.word	0xab050072
    c114:	00000048 	.word	0x00000048
    c118:	0f042302 	.word	0x0f042302
    c11c:	0500775f 	.word	0x0500775f
    c120:	000048ac 	.word	0x000048ac
    c124:	08230200 	.word	0x08230200
    c128:	0045b40c 	.word	0x0045b40c
    c12c:	3aad0500 	.word	0x3aad0500
    c130:	02000000 	.word	0x02000000
    c134:	5a0c0c23 	.word	0x5a0c0c23
    c138:	05000046 	.word	0x05000046
    c13c:	00003aae 	.word	0x00003aae
    c140:	0e230200 	.word	0x0e230200
    c144:	66625f0f 	.word	0x66625f0f
    c148:	c5af0500 	.word	0xc5af0500
    c14c:	02000002 	.word	0x02000002
    c150:	4c0c1023 	.word	0x4c0c1023
    c154:	05000045 	.word	0x05000045
    c158:	000048b0 	.word	0x000048b0
    c15c:	18230200 	.word	0x18230200
    c160:	0045a40c 	.word	0x0045a40c
    c164:	f3b70500 	.word	0xf3b70500
    c168:	02000000 	.word	0x02000000
    c16c:	2e0c1c23 	.word	0x2e0c1c23
    c170:	05000046 	.word	0x05000046
    c174:	0005c1b9 	.word	0x0005c1b9
    c178:	20230200 	.word	0x20230200
    c17c:	0046a20c 	.word	0x0046a20c
    c180:	f1bb0500 	.word	0xf1bb0500
    c184:	02000005 	.word	0x02000005
    c188:	900c2423 	.word	0x900c2423
    c18c:	05000047 	.word	0x05000047
    c190:	000616bd 	.word	0x000616bd
    c194:	28230200 	.word	0x28230200
    c198:	002aee0c 	.word	0x002aee0c
    c19c:	31be0500 	.word	0x31be0500
    c1a0:	02000006 	.word	0x02000006
    c1a4:	5f0f2c23 	.word	0x5f0f2c23
    c1a8:	05006275 	.word	0x05006275
    c1ac:	0002c5c1 	.word	0x0002c5c1
    c1b0:	30230200 	.word	0x30230200
    c1b4:	70755f0f 	.word	0x70755f0f
    c1b8:	eec20500 	.word	0xeec20500
    c1bc:	02000002 	.word	0x02000002
    c1c0:	5f0f3823 	.word	0x5f0f3823
    c1c4:	05007275 	.word	0x05007275
    c1c8:	000048c3 	.word	0x000048c3
    c1cc:	3c230200 	.word	0x3c230200
    c1d0:	00457b0c 	.word	0x00457b0c
    c1d4:	37c60500 	.word	0x37c60500
    c1d8:	02000006 	.word	0x02000006
    c1dc:	470c4023 	.word	0x470c4023
    c1e0:	05000048 	.word	0x05000048
    c1e4:	000647c7 	.word	0x000647c7
    c1e8:	43230200 	.word	0x43230200
    c1ec:	626c5f0f 	.word	0x626c5f0f
    c1f0:	c5ca0500 	.word	0xc5ca0500
    c1f4:	02000002 	.word	0x02000002
    c1f8:	ca0c4423 	.word	0xca0c4423
    c1fc:	05000045 	.word	0x05000045
    c200:	000048cd 	.word	0x000048cd
    c204:	4c230200 	.word	0x4c230200
    c208:	0045db0c 	.word	0x0045db0c
    c20c:	48ce0500 	.word	0x48ce0500
    c210:	02000000 	.word	0x02000000
    c214:	970c5023 	.word	0x970c5023
    c218:	05000048 	.word	0x05000048
    c21c:	000451d1 	.word	0x000451d1
    c220:	54230200 	.word	0x54230200
    c224:	0046960c 	.word	0x0046960c
    c228:	e8d50500 	.word	0xe8d50500
    c22c:	02000000 	.word	0x02000000
    c230:	13005823 	.word	0x13005823
    c234:	00004801 	.word	0x00004801
    c238:	00045100 	.word	0x00045100
    c23c:	04511400 	.word	0x04511400
    c240:	f3140000 	.word	0xf3140000
    c244:	14000000 	.word	0x14000000
    c248:	000005b4 	.word	0x000005b4
    c24c:	00004814 	.word	0x00004814
    c250:	04100000 	.word	0x04100000
    c254:	00000457 	.word	0x00000457
    c258:	00477311 	.word	0x00477311
    c25c:	05040000 	.word	0x05040000
    c260:	0005b425 	.word	0x0005b425
    c264:	479e1500 	.word	0x479e1500
    c268:	41050000 	.word	0x41050000
    c26c:	00004802 	.word	0x00004802
    c270:	00230200 	.word	0x00230200
    c274:	0045c315 	.word	0x0045c315
    c278:	02460500 	.word	0x02460500
    c27c:	000006a4 	.word	0x000006a4
    c280:	15042302 	.word	0x15042302
    c284:	0000464a 	.word	0x0000464a
    c288:	a4024605 	.word	0xa4024605
    c28c:	02000006 	.word	0x02000006
    c290:	1e150823 	.word	0x1e150823
    c294:	05000046 	.word	0x05000046
    c298:	06a40246 	.word	0x06a40246
    c29c:	23020000 	.word	0x23020000
    c2a0:	4747150c 	.word	0x4747150c
    c2a4:	48050000 	.word	0x48050000
    c2a8:	00004802 	.word	0x00004802
    c2ac:	10230200 	.word	0x10230200
    c2b0:	00452115 	.word	0x00452115
    c2b4:	02490500 	.word	0x02490500
    c2b8:	000008af 	.word	0x000008af
    c2bc:	15142302 	.word	0x15142302
    c2c0:	000047f1 	.word	0x000047f1
    c2c4:	48024b05 	.word	0x48024b05
    c2c8:	02000000 	.word	0x02000000
    c2cc:	51153023 	.word	0x51153023
    c2d0:	05000047 	.word	0x05000047
    c2d4:	05e6024c 	.word	0x05e6024c
    c2d8:	23020000 	.word	0x23020000
    c2dc:	46c31534 	.word	0x46c31534
    c2e0:	4e050000 	.word	0x4e050000
    c2e4:	00004802 	.word	0x00004802
    c2e8:	38230200 	.word	0x38230200
    c2ec:	00476115 	.word	0x00476115
    c2f0:	02500500 	.word	0x02500500
    c2f4:	000008cb 	.word	0x000008cb
    c2f8:	153c2302 	.word	0x153c2302
    c2fc:	00001d7c 	.word	0x00001d7c
    c300:	66025305 	.word	0x66025305
    c304:	02000001 	.word	0x02000001
    c308:	34154023 	.word	0x34154023
    c30c:	05000046 	.word	0x05000046
    c310:	00480254 	.word	0x00480254
    c314:	23020000 	.word	0x23020000
    c318:	48821544 	.word	0x48821544
    c31c:	55050000 	.word	0x55050000
    c320:	00016602 	.word	0x00016602
    c324:	48230200 	.word	0x48230200
    c328:	0046dd15 	.word	0x0046dd15
    c32c:	02560500 	.word	0x02560500
    c330:	000008d1 	.word	0x000008d1
    c334:	154c2302 	.word	0x154c2302
    c338:	00004652 	.word	0x00004652
    c33c:	48025905 	.word	0x48025905
    c340:	02000000 	.word	0x02000000
    c344:	d3155023 	.word	0xd3155023
    c348:	05000045 	.word	0x05000045
    c34c:	05b4025a 	.word	0x05b4025a
    c350:	23020000 	.word	0x23020000
    c354:	46f91554 	.word	0x46f91554
    c358:	7c050000 	.word	0x7c050000
    c35c:	00088d02 	.word	0x00088d02
    c360:	58230200 	.word	0x58230200
    c364:	0044cc15 	.word	0x0044cc15
    c368:	027f0500 	.word	0x027f0500
    c36c:	000002a7 	.word	0x000002a7
    c370:	02c82303 	.word	0x02c82303
    c374:	00466715 	.word	0x00466715
    c378:	02800500 	.word	0x02800500
    c37c:	00000260 	.word	0x00000260
    c380:	02cc2303 	.word	0x02cc2303
    c384:	00483d15 	.word	0x00483d15
    c388:	02830500 	.word	0x02830500
    c38c:	000008e3 	.word	0x000008e3
    c390:	05dc2303 	.word	0x05dc2303
    c394:	0045ac15 	.word	0x0045ac15
    c398:	02880500 	.word	0x02880500
    c39c:	00000663 	.word	0x00000663
    c3a0:	05e02303 	.word	0x05e02303
    c3a4:	00459115 	.word	0x00459115
    c3a8:	02890500 	.word	0x02890500
    c3ac:	000008ef 	.word	0x000008ef
    c3b0:	05ec2303 	.word	0x05ec2303
    c3b4:	ba041000 	.word	0xba041000
    c3b8:	02000005 	.word	0x02000005
    c3bc:	04700801 	.word	0x04700801
    c3c0:	04100000 	.word	0x04100000
    c3c4:	00000432 	.word	0x00000432
    c3c8:	00480113 	.word	0x00480113
    c3cc:	05e60000 	.word	0x05e60000
    c3d0:	51140000 	.word	0x51140000
    c3d4:	14000004 	.word	0x14000004
    c3d8:	000000f3 	.word	0x000000f3
    c3dc:	0005e614 	.word	0x0005e614
    c3e0:	00481400 	.word	0x00481400
    c3e4:	10000000 	.word	0x10000000
    c3e8:	0005ec04 	.word	0x0005ec04
    c3ec:	05ba1600 	.word	0x05ba1600
    c3f0:	04100000 	.word	0x04100000
    c3f4:	000005c7 	.word	0x000005c7
    c3f8:	006f0113 	.word	0x006f0113
    c3fc:	06160000 	.word	0x06160000
    c400:	51140000 	.word	0x51140000
    c404:	14000004 	.word	0x14000004
    c408:	000000f3 	.word	0x000000f3
    c40c:	00006f14 	.word	0x00006f14
    c410:	00481400 	.word	0x00481400
    c414:	10000000 	.word	0x10000000
    c418:	0005f704 	.word	0x0005f704
    c41c:	48011300 	.word	0x48011300
    c420:	31000000 	.word	0x31000000
    c424:	14000006 	.word	0x14000006
    c428:	00000451 	.word	0x00000451
    c42c:	0000f314 	.word	0x0000f314
    c430:	04100000 	.word	0x04100000
    c434:	0000061c 	.word	0x0000061c
    c438:	00003308 	.word	0x00003308
    c43c:	00064700 	.word	0x00064700
    c440:	00b50900 	.word	0x00b50900
    c444:	00020000 	.word	0x00020000
    c448:	00003308 	.word	0x00003308
    c44c:	00065700 	.word	0x00065700
    c450:	00b50900 	.word	0x00b50900
    c454:	00000000 	.word	0x00000000
    c458:	00471505 	.word	0x00471505
    c45c:	010e0500 	.word	0x010e0500
    c460:	000002f4 	.word	0x000002f4
    c464:	00482417 	.word	0x00482417
    c468:	13050c00 	.word	0x13050c00
    c46c:	00069e01 	.word	0x00069e01
    c470:	47341500 	.word	0x47341500
    c474:	14050000 	.word	0x14050000
    c478:	00069e01 	.word	0x00069e01
    c47c:	00230200 	.word	0x00230200
    c480:	00466015 	.word	0x00466015
    c484:	01150500 	.word	0x01150500
    c488:	00000048 	.word	0x00000048
    c48c:	15042302 	.word	0x15042302
    c490:	0000470f 	.word	0x0000470f
    c494:	a4011605 	.word	0xa4011605
    c498:	02000006 	.word	0x02000006
    c49c:	10000823 	.word	0x10000823
    c4a0:	00066304 	.word	0x00066304
    c4a4:	57041000 	.word	0x57041000
    c4a8:	17000006 	.word	0x17000006
    c4ac:	00004519 	.word	0x00004519
    c4b0:	012e050e 	.word	0x012e050e
    c4b4:	000006e5 	.word	0x000006e5
    c4b8:	00477a15 	.word	0x00477a15
    c4bc:	012f0500 	.word	0x012f0500
    c4c0:	000006e5 	.word	0x000006e5
    c4c4:	15002302 	.word	0x15002302
    c4c8:	0000469c 	.word	0x0000469c
    c4cc:	e5013005 	.word	0xe5013005
    c4d0:	02000006 	.word	0x02000006
    c4d4:	c4150623 	.word	0xc4150623
    c4d8:	05000047 	.word	0x05000047
    c4dc:	00410131 	.word	0x00410131
    c4e0:	23020000 	.word	0x23020000
    c4e4:	4108000c 	.word	0x4108000c
    c4e8:	f5000000 	.word	0xf5000000
    c4ec:	09000006 	.word	0x09000006
    c4f0:	000000b5 	.word	0x000000b5
    c4f4:	d0180002 	.word	0xd0180002
    c4f8:	15025f05 	.word	0x15025f05
    c4fc:	15000008 	.word	0x15000008
    c500:	00004808 	.word	0x00004808
    c504:	25026005 	.word	0x25026005
    c508:	02000000 	.word	0x02000000
    c50c:	ae150023 	.word	0xae150023
    c510:	05000047 	.word	0x05000047
    c514:	05b40261 	.word	0x05b40261
    c518:	23020000 	.word	0x23020000
    c51c:	467c1504 	.word	0x467c1504
    c520:	62050000 	.word	0x62050000
    c524:	00081502 	.word	0x00081502
    c528:	08230200 	.word	0x08230200
    c52c:	00486015 	.word	0x00486015
    c530:	02630500 	.word	0x02630500
    c534:	0000017c 	.word	0x0000017c
    c538:	15242302 	.word	0x15242302
    c53c:	000046ce 	.word	0x000046ce
    c540:	48026405 	.word	0x48026405
    c544:	02000000 	.word	0x02000000
    c548:	2f154823 	.word	0x2f154823
    c54c:	05000047 	.word	0x05000047
    c550:	00560265 	.word	0x00560265
    c554:	23020000 	.word	0x23020000
    c558:	486f1550 	.word	0x486f1550
    c55c:	66050000 	.word	0x66050000
    c560:	0006aa02 	.word	0x0006aa02
    c564:	58230200 	.word	0x58230200
    c568:	00473a15 	.word	0x00473a15
    c56c:	02670500 	.word	0x02670500
    c570:	000000dd 	.word	0x000000dd
    c574:	15682302 	.word	0x15682302
    c578:	00004874 	.word	0x00004874
    c57c:	dd026805 	.word	0xdd026805
    c580:	02000000 	.word	0x02000000
    c584:	64157023 	.word	0x64157023
    c588:	05000045 	.word	0x05000045
    c58c:	00dd0269 	.word	0x00dd0269
    c590:	23020000 	.word	0x23020000
    c594:	48331578 	.word	0x48331578
    c598:	6a050000 	.word	0x6a050000
    c59c:	00082502 	.word	0x00082502
    c5a0:	80230300 	.word	0x80230300
    c5a4:	46701501 	.word	0x46701501
    c5a8:	6b050000 	.word	0x6b050000
    c5ac:	00083502 	.word	0x00083502
    c5b0:	88230300 	.word	0x88230300
    c5b4:	47d11501 	.word	0x47d11501
    c5b8:	6c050000 	.word	0x6c050000
    c5bc:	00004802 	.word	0x00004802
    c5c0:	a0230300 	.word	0xa0230300
    c5c4:	45f41501 	.word	0x45f41501
    c5c8:	6d050000 	.word	0x6d050000
    c5cc:	0000dd02 	.word	0x0000dd02
    c5d0:	a4230300 	.word	0xa4230300
    c5d4:	45551501 	.word	0x45551501
    c5d8:	6e050000 	.word	0x6e050000
    c5dc:	0000dd02 	.word	0x0000dd02
    c5e0:	ac230300 	.word	0xac230300
    c5e4:	45e31501 	.word	0x45e31501
    c5e8:	6f050000 	.word	0x6f050000
    c5ec:	0000dd02 	.word	0x0000dd02
    c5f0:	b4230300 	.word	0xb4230300
    c5f4:	452c1501 	.word	0x452c1501
    c5f8:	70050000 	.word	0x70050000
    c5fc:	0000dd02 	.word	0x0000dd02
    c600:	bc230300 	.word	0xbc230300
    c604:	453b1501 	.word	0x453b1501
    c608:	71050000 	.word	0x71050000
    c60c:	0000dd02 	.word	0x0000dd02
    c610:	c4230300 	.word	0xc4230300
    c614:	ba080001 	.word	0xba080001
    c618:	25000005 	.word	0x25000005
    c61c:	09000008 	.word	0x09000008
    c620:	000000b5 	.word	0x000000b5
    c624:	ba080019 	.word	0xba080019
    c628:	35000005 	.word	0x35000005
    c62c:	09000008 	.word	0x09000008
    c630:	000000b5 	.word	0x000000b5
    c634:	ba080007 	.word	0xba080007
    c638:	45000005 	.word	0x45000005
    c63c:	09000008 	.word	0x09000008
    c640:	000000b5 	.word	0x000000b5
    c644:	f0180017 	.word	0xf0180017
    c648:	6d027705 	.word	0x6d027705
    c64c:	15000008 	.word	0x15000008
    c650:	000046b3 	.word	0x000046b3
    c654:	6d027905 	.word	0x6d027905
    c658:	02000008 	.word	0x02000008
    c65c:	2a150023 	.word	0x2a150023
    c660:	05000048 	.word	0x05000048
    c664:	087d027a 	.word	0x087d027a
    c668:	23020000 	.word	0x23020000
    c66c:	ee080078 	.word	0xee080078
    c670:	7d000002 	.word	0x7d000002
    c674:	09000008 	.word	0x09000008
    c678:	000000b5 	.word	0x000000b5
    c67c:	2508001d 	.word	0x2508001d
    c680:	8d000000 	.word	0x8d000000
    c684:	09000008 	.word	0x09000008
    c688:	000000b5 	.word	0x000000b5
    c68c:	f019001d 	.word	0xf019001d
    c690:	af025d05 	.word	0xaf025d05
    c694:	1a000008 	.word	0x1a000008
    c698:	00004773 	.word	0x00004773
    c69c:	f5027205 	.word	0xf5027205
    c6a0:	1a000006 	.word	0x1a000006
    c6a4:	0000484d 	.word	0x0000484d
    c6a8:	45027b05 	.word	0x45027b05
    c6ac:	00000008 	.word	0x00000008
    c6b0:	0005ba08 	.word	0x0005ba08
    c6b4:	0008bf00 	.word	0x0008bf00
    c6b8:	00b50900 	.word	0x00b50900
    c6bc:	00180000 	.word	0x00180000
    c6c0:	08cb011b 	.word	0x08cb011b
    c6c4:	51140000 	.word	0x51140000
    c6c8:	00000004 	.word	0x00000004
    c6cc:	08bf0410 	.word	0x08bf0410
    c6d0:	04100000 	.word	0x04100000
    c6d4:	00000166 	.word	0x00000166
    c6d8:	08e3011b 	.word	0x08e3011b
    c6dc:	48140000 	.word	0x48140000
    c6e0:	00000000 	.word	0x00000000
    c6e4:	08e90410 	.word	0x08e90410
    c6e8:	04100000 	.word	0x04100000
    c6ec:	000008d7 	.word	0x000008d7
    c6f0:	00065708 	.word	0x00065708
    c6f4:	0008ff00 	.word	0x0008ff00
    c6f8:	00b50900 	.word	0x00b50900
    c6fc:	00020000 	.word	0x00020000
    c700:	4b44011c 	.word	0x4b44011c
    c704:	12010000 	.word	0x12010000
    c708:	00000001 	.word	0x00000001
    c70c:	00000000 	.word	0x00000000
    c710:	0046fd00 	.word	0x0046fd00
    c714:	00099200 	.word	0x00099200
    c718:	48031d00 	.word	0x48031d00
    c71c:	10010000 	.word	0x10010000
    c720:	00000048 	.word	0x00000048
    c724:	00004728 	.word	0x00004728
    c728:	0100641e 	.word	0x0100641e
    c72c:	0000f310 	.word	0x0000f310
    c730:	00477700 	.word	0x00477700
    c734:	00701f00 	.word	0x00701f00
    c738:	02a71301 	.word	0x02a71301
    c73c:	56010000 	.word	0x56010000
    c740:	004b9120 	.word	0x004b9120
    c744:	92140100 	.word	0x92140100
    c748:	20000009 	.word	0x20000009
    c74c:	0000459f 	.word	0x0000459f
    c750:	09981501 	.word	0x09981501
    c754:	6e1f0000 	.word	0x6e1f0000
    c758:	48160100 	.word	0x48160100
    c75c:	01000000 	.word	0x01000000
    c760:	00692155 	.word	0x00692155
    c764:	00481701 	.word	0x00481701
    c768:	66220000 	.word	0x66220000
    c76c:	1801006e 	.word	0x1801006e
    c770:	000002bf 	.word	0x000002bf
    c774:	00004795 	.word	0x00004795
    c778:	004b9723 	.word	0x004b9723
    c77c:	24490100 	.word	0x24490100
    c780:	00000208 	.word	0x00000208
    c784:	646e691f 	.word	0x646e691f
    c788:	48270100 	.word	0x48270100
    c78c:	01000000 	.word	0x01000000
    c790:	10000058 	.word	0x10000058
    c794:	0002a704 	.word	0x0002a704
    c798:	07041000 	.word	0x07041000
    c79c:	25000002 	.word	0x25000002
    c7a0:	000047de 	.word	0x000047de
    c7a4:	ac032805 	.word	0xac032805
    c7a8:	01000009 	.word	0x01000009
    c7ac:	04511601 	.word	0x04511601
    c7b0:	49000000 	.word	0x49000000
    c7b4:	02000000 	.word	0x02000000
    c7b8:	0033c200 	.word	0x0033c200
    c7bc:	c2010400 	.word	0xc2010400
    c7c0:	2800002e 	.word	0x2800002e
    c7c4:	63000002 	.word	0x63000002
    c7c8:	2e6e7472 	.word	0x2e6e7472
    c7cc:	006d7361 	.word	0x006d7361
    c7d0:	775c3a63 	.word	0x775c3a63
    c7d4:	72616e69 	.word	0x72616e69
    c7d8:	625c736d 	.word	0x625c736d
    c7dc:	646c6975 	.word	0x646c6975
    c7e0:	6363675c 	.word	0x6363675c
    c7e4:	6975622d 	.word	0x6975622d
    c7e8:	675c646c 	.word	0x675c646c
    c7ec:	47006363 	.word	0x47006363
    c7f0:	4120554e 	.word	0x4120554e
    c7f4:	2e322053 	.word	0x2e322053
    c7f8:	352e3831 	.word	0x352e3831
    c7fc:	80010030 	.word	0x80010030

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	10001101 	andne	r1, r0, r1, lsl #2
       4:	03065506 	movweq	r5, #25862	; 0x6506
       8:	25081b08 	strcs	r1, [r8, #-2824]
       c:	00051308 	andeq	r1, r5, r8, lsl #6
      10:	11010000 	tstne	r1, r0
      14:	11061000 	tstne	r6, r0
      18:	03011201 	movweq	r1, #4609	; 0x1201
      1c:	25081b08 	strcs	r1, [r8, #-2824]
      20:	00051308 	andeq	r1, r5, r8, lsl #6
      24:	11010000 	tstne	r1, r0
      28:	130e2501 	movwne	r2, #58625	; 0xe501
      2c:	1b0e030b 	blne	380c60 <__Stack_Size+0x380860>
      30:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
      34:	00061001 	andeq	r1, r6, r1
      38:	00240200 	eoreq	r0, r4, r0, lsl #4
      3c:	0b3e0b0b 	bleq	f82c70 <__Stack_Size+0xf82870>
      40:	00000e03 	andeq	r0, r0, r3, lsl #28
      44:	03001603 	movweq	r1, #1539	; 0x603
      48:	3b0b3a08 	blcc	2ce870 <__Stack_Size+0x2ce470>
      4c:	0013490b 	andseq	r4, r3, fp, lsl #18
      50:	00160400 	andseq	r0, r6, r0, lsl #8
      54:	0b3a0e03 	bleq	e83868 <__Stack_Size+0xe83468>
      58:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      5c:	24050000 	strcs	r0, [r5]
      60:	3e0b0b00 	fmacdcc	d0, d11, d0
      64:	0600000b 	streq	r0, [r0], -fp
      68:	0e030104 	adfeqs	f0, f3, f4
      6c:	0b3a0b0b 	bleq	e82ca0 <__Stack_Size+0xe828a0>
      70:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      74:	28070000 	stmdacs	r7, {}
      78:	1c0e0300 	stcne	3, cr0, [lr], {0}
      7c:	0800000d 	stmdaeq	r0, {r0, r2, r3}
      80:	08030028 	stmdaeq	r3, {r3, r5}
      84:	00000d1c 	andeq	r0, r0, ip, lsl sp
      88:	0b010409 	bleq	410b4 <__Stack_Size+0x40cb4>
      8c:	3b0b3a0b 	blcc	2ce8c0 <__Stack_Size+0x2ce4c0>
      90:	0013010b 	andseq	r0, r3, fp, lsl #2
      94:	01040a00 	tsteq	r4, r0, lsl #20
      98:	0b3a0b0b 	bleq	e82ccc <__Stack_Size+0xe828cc>
      9c:	1301053b 	movwne	r0, #5435	; 0x153b
      a0:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
      a4:	030c3f01 	movweq	r3, #52993	; 0xcf01
      a8:	3b0b3a0e 	blcc	2ce8e8 <__Stack_Size+0x2ce4e8>
      ac:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
      b0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
      b4:	01064001 	tsteq	r6, r1
      b8:	0c000013 	stceq	0, cr0, [r0], {19}
      bc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
      c0:	0b3b0b3a 	bleq	ec2db0 <__Stack_Size+0xec29b0>
      c4:	06021349 	streq	r1, [r2], -r9, asr #6
      c8:	340d0000 	strcc	r0, [sp]
      cc:	3a0e0300 	bcc	380cd4 <__Stack_Size+0x3808d4>
      d0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      d4:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
      d8:	0111010b 	tsteq	r1, fp, lsl #2
      dc:	00000112 	andeq	r0, r0, r2, lsl r1
      e0:	0300340f 	movweq	r3, #1039	; 0x40f
      e4:	3b0b3a08 	blcc	2ce90c <__Stack_Size+0x2ce50c>
      e8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
      ec:	1000000a 	andne	r0, r0, sl
      f0:	0b0b0024 	bleq	2c0188 <__Stack_Size+0x2bfd88>
      f4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
      f8:	01110000 	tsteq	r1, r0
      fc:	01134901 	tsteq	r3, r1, lsl #18
     100:	12000013 	andne	r0, r0, #19	; 0x13
     104:	13490021 	movtne	r0, #36897	; 0x9021
     108:	00000b2f 	andeq	r0, r0, pc, lsr #22
	ui2a(num,10,0,bf);
	}

static int a2d(char ch)
	{
	if (ch>='0' && ch<='9') 
     10c:	0b000f13 	bleq	3d60 <__Stack_Size+0x3960>
     110:	0013490b 	andseq	r4, r3, fp, lsl #18
	int num=0;
	int digit;
	while ((digit=a2d(ch))>=0) {
		if (digit>base) break;
		num=num*base+digit;
		ch=*p++;
     114:	00351400 	eorseq	r1, r5, r0, lsl #8

static int a2d(char ch)
	{
	if (ch>='0' && ch<='9') 
		return ch-'0';
	else if (ch>='a' && ch<='f')
     118:	00001349 	andeq	r1, r0, r9, asr #6
     11c:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
		return ch-'a'+10;
     120:	00052f13 	andeq	r2, r5, r3, lsl pc
     124:	00341600 	eorseq	r1, r4, r0, lsl #12
	else if (ch>='A' && ch<='F')
     128:	0b3a0e03 	bleq	e8393c <__Stack_Size+0xe8353c>
     12c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     130:	00000b1c 	andeq	r0, r0, ip, lsl fp
		return ch-'A'+10;
     134:	03003417 	movweq	r3, #1047	; 0x417
static char a2i(char ch, char** src,int base,int* nump)
	{
	char* p= *src;
	int num=0;
	int digit;
	while ((digit=a2d(ch))>=0) {
     138:	3b0b3a0e 	blcc	2ce978 <__Stack_Size+0x2ce578>
			if (ch=='l') {
				ch=*(fmt++);
				lng=1;
			}
#endif
			switch (ch) {
     13c:	3f13490b 	svccc	0x0013490b
     140:	000c3c0c 	andeq	r3, ip, ip, lsl #24
     144:	11010000 	tstne	r1, r0
     148:	130e2501 	movwne	r2, #58625	; 0xe501
     14c:	1b0e030b 	blne	380d80 <__Stack_Size+0x380980>
     150:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     154:	00061001 	andeq	r1, r6, r1
     158:	00240200 	eoreq	r0, r4, r0, lsl #4
     15c:	0b3e0b0b 	bleq	f82d90 <__Stack_Size+0xf82990>
     160:	00000e03 	andeq	r0, r0, r3, lsl #28
     164:	03001603 	movweq	r1, #1539	; 0x603
     168:	3b0b3a08 	blcc	2ce990 <__Stack_Size+0x2ce590>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
     16c:	0013490b 	andseq	r4, r3, fp, lsl #18
     170:	00240400 	eoreq	r0, r4, r0, lsl #8
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
     174:	0b3e0b0b 	bleq	f82da8 <__Stack_Size+0xf829a8>

static void i2a (int num, char * bf)
	{
	if (num<0) {
		num=-num;
		*bf++ = '-';
     178:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
     17c:	030c3f00 	movweq	r3, #52992	; 0xcf00
	*bf=0;
	}

static void i2a (int num, char * bf)
	{
	if (num<0) {
     180:	3b0b3a0e 	blcc	2ce9c0 <__Stack_Size+0x2ce5c0>
		num=-num;
		*bf++ = '-';
     184:	110c270b 	tstne	ip, fp, lsl #14
     188:	40011201 	andmi	r1, r1, r1, lsl #4
		}
	ui2a(num,10,0,bf);
     18c:	0600000a 	streq	r0, [r0], -sl
     190:	0c3f002e 	ldceq	0, cr0, [pc], #-184
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
					putchw(putp,putf,w,lz,bf);
     194:	0b3a0e03 	bleq	e839a8 <__Stack_Size+0xe835a8>
     198:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     19c:	01120111 	tsteq	r2, r1, lsl r1
     1a0:	00000a40 	andeq	r0, r0, r0, asr #20
     1a4:	3f002e07 	svccc	0x00002e07
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
     1a8:	3a0e030c 	bcc	380de0 <__Stack_Size+0x3809e0>
     1ac:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     1b0:	1201110c 	andne	r1, r1, #3	; 0x3
     1b4:	00064001 	andeq	r4, r6, r1
     1b8:	002e0800 	eoreq	r0, lr, r0, lsl #16
					putchw(putp,putf,w,lz,bf);
     1bc:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     1c0:	0b3b0b3a 	bleq	ec2eb0 <__Stack_Size+0xec2ab0>
     1c4:	01110c27 	tsteq	r1, r7, lsr #24
					break;
				case 'c' : 
					putf(putp,(char)(va_arg(va, int)));
     1c8:	06400112 	undefined
     1cc:	34090000 	strcc	r0, [r9]
     1d0:	3a0e0300 	bcc	380dd8 <__Stack_Size+0x3809d8>
					break;
				case 's' : 
					putchw(putp,putf,w,0,va_arg(va, char*));
     1d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1d8:	0a000013 	beq	22c <_Minimum_Stack_Size+0x12c>
     1dc:	13490035 	movtne	r0, #36917	; 0x9035
     1e0:	010b0000 	tsteq	fp, r0
     1e4:	01134901 	tsteq	r3, r1, lsl #18
     1e8:	0c000013 	stceq	0, cr0, [r0], {19}
					break;
				case '%' :
					putf(putp,ch);
     1ec:	13490021 	movtne	r0, #36897	; 0x9021
     1f0:	0000052f 	andeq	r0, r0, pc, lsr #10
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
     1f4:	0300340d 	movweq	r3, #1037	; 0x40d
     1f8:	3b0b3a0e 	blcc	2cea38 <__Stack_Size+0x2ce638>
					break;
				}
			}
		}
	abort:;
	}
     1fc:	1c13490b 	ldcne	9, cr4, [r3], {11}


void init_printf(void* putp,void (*putf) (void*,char))
	{
	stdout_putf=putf;
     200:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
	stdout_putp=putp;
     204:	13490021 	movtne	r0, #36897	; 0x9021
	}
     208:	00000b2f 	andeq	r0, r0, pc, lsr #22
     20c:	01110100 	tsteq	r1, r0, lsl #2
     210:	0b130e25 	bleq	4c3aac <__Stack_Size+0x4c36ac>
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
     214:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     218:	01120111 	tsteq	r2, r1, lsl r1
	}
     21c:	00000610 	andeq	r0, r0, r0, lsl r6



void tfp_sprintf(char* s,char *fmt, ...)
	{
     220:	0b002402 	bleq	9230 <__Stack_Size+0x8e30>
     224:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     228:	0300000e 	movweq	r0, #14	; 0xe
     22c:	13490026 	movtne	r0, #36902	; 0x9026
     230:	16040000 	strne	r0, [r4], -r0
	va_list va;
	va_start(va,fmt);
	tfp_format(&s,putcp,fmt,va);
     234:	3a080300 	bcc	200e3c <__Stack_Size+0x200a3c>
     238:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
     23c:	05000013 	streq	r0, [r0, #-19]
	va_list va;
	va_start(va,fmt);
	tfp_format(&s,putcp,fmt,va);
	putcp(&s,0);
	va_end(va);
	}
     240:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     244:	0b3b0b3a 	bleq	ec2f34 <__Stack_Size+0xec2b34>
     248:	00001349 	andeq	r1, r0, r9, asr #6
     24c:	0b010406 	bleq	4126c <__Stack_Size+0x40e6c>
	stdout_putf=putf;
	stdout_putp=putp;
	}

void tfp_printf(char *fmt, ...)
	{
     250:	3b0b3a0b 	blcc	2cea84 <__Stack_Size+0x2ce684>
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
     254:	0013010b 	andseq	r0, r3, fp, lsl #2
     258:	00280700 	eoreq	r0, r8, r0, lsl #14
	stdout_putf=putf;
	stdout_putp=putp;
	}

void tfp_printf(char *fmt, ...)
	{
     25c:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     260:	24080000 	strcs	r0, [r8]
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
     264:	3e0b0b00 	fmacdcc	d0, d11, d0
	va_end(va);
	}
     268:	0900000b 	stmdbeq	r0, {r0, r1, r3}
     26c:	08030028 	stmdaeq	r3, {r3, r5}
     270:	00000d1c 	andeq	r0, r0, ip, lsl sp
     274:	0301130a 	movweq	r1, #4874	; 0x130a
     278:	3a0b0b0e 	bcc	2c2eb8 <__Stack_Size+0x2c2ab8>
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
     27c:	010b3b0b 	tsteq	fp, fp, lsl #22
	dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction (INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
     280:	0b000013 	bleq	2d4 <_Minimum_Stack_Size+0x1d4>
     284:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     288:	0b3b0b3a 	bleq	ec2f78 <__Stack_Size+0xec2b78>
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
	}
	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
     28c:	0a381349 	beq	e04fb8 <__Stack_Size+0xe04bb8>
     290:	0d0c0000 	stceq	0, cr0, [ip]
     294:	3a0e0300 	bcc	380e9c <__Stack_Size+0x380a9c>
	dxl_txrx_packet();
     298:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	u16 CommStatus = dxl_get_result();
     29c:	000a3813 	andeq	r3, sl, r3, lsl r8
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
     2a0:	01010d00 	tsteq	r1, r0, lsl #26
		PrintErrorCode();
     2a4:	13011349 	movwne	r1, #4937	; 0x1349
	else
		PrintCommStatus(CommStatus);
     2a8:	210e0000 	tstcs	lr, r0
#endif
}
     2ac:	2f134900 	svccs	0x00134900
     2b0:	0f00000b 	svceq	0x0000000b
     2b4:	0e030104 	adfeqs	f0, f3, f4
     2b8:	0b3a0b0b 	bleq	e82eec <__Stack_Size+0xe82aec>
	}
	interpolating = 1;
}
/* interpolate our pose, this should be called at about 30Hz. */
#define WAIT_SLOP_FACTOR 10
int BioloidControllerEx_interpolateStep(bool fWait) {
     2bc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     2c0:	04100000 	ldreq	r0, [r0]

	if (interpolating == 0)
     2c4:	3a0b0b01 	bcc	2c2ed0 <__Stack_Size+0x2c2ad0>
		return 0;
	int i;
	int complete = poseSize;
     2c8:	01053b0b 	tsteq	r5, fp, lsl #22
	if (!fWait) {
     2cc:	11000013 	tstne	r0, r3, lsl r0
		if (getMillis() < (nextframe_ - WAIT_SLOP_FACTOR)) {
     2d0:	0b0b0024 	bleq	2c0368 <__Stack_Size+0x2bff68>
     2d4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     2d8:	2e120000 	wxorcs	wr0, wr2, wr0
			return (getMillis() - nextframe_); // We still have some time to do something...
     2dc:	030c3f01 	movweq	r3, #52993	; 0xcf01
     2e0:	3b0b3a0e 	blcc	2ceb20 <__Stack_Size+0x2ce720>
     2e4:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
#ifdef MILLIS
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	while (getMillis() < nextframe_);
     2e8:	010b2013 	tsteq	fp, r3, lsl r0
     2ec:	13000013 	movwne	r0, #19	; 0x13
     2f0:	08030005 	stmdaeq	r3, {r0, r2}
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
     2f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     2f8:	00001349 	andeq	r1, r0, r9, asr #6
     2fc:	03000514 	movweq	r0, #1300	; 0x514
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
     300:	3b0b3a0e 	blcc	2ceb40 <__Stack_Size+0x2ce740>
     304:	00134905 	andseq	r4, r3, r5, lsl #18
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     308:	00341500 	eorseq	r1, r4, r0, lsl #10
		int diff = nextpose_[i] - pose_[i];
     30c:	0b3a0803 	bleq	e82320 <__Stack_Size+0xe81f20>
     310:	1349053b 	movtne	r0, #38203	; 0x953b
     314:	0f160000 	svceq	0x00160000
     318:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     31c:	17000013 	smladne	r0, r3, r0, r0
		if (diff == 0) {
     320:	0c3f012e 	ldfeqs	f0, [pc], #-184
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
     324:	0b3a0e03 	bleq	e83b38 <__Stack_Size+0xe83738>
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
     328:	0c270b3b 	stceq	11, cr0, [r7], #-236
		int diff = nextpose_[i] - pose_[i];
		if (diff == 0) {
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
     32c:	13010b20 	movwne	r0, #6944	; 0x1b20
					pose_[i] = nextpose_[i];
     330:	05180000 	ldreq	r0, [r8]
					complete--;
     334:	3a0e0300 	bcc	380f3c <__Stack_Size+0x380b3c>
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
     338:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     33c:	19000013 	stmdbne	r0, {r0, r1, r4}
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
     340:	0c3f002e 	ldceq	0, cr0, [pc], #-184
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
     344:	0b3a0e03 	bleq	e83b58 <__Stack_Size+0xe83758>
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
     348:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     34c:	00000b20 	andeq	r0, r0, r0, lsr #22
     350:	3f002e1a 	svccc	0x00002e1a
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif

	}
	if (complete <= 0)
     354:	3a0e030c 	bcc	380f8c <__Stack_Size+0x380b8c>
		interpolating = 0;
     358:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
	BioloidControllerEx_writePose();
     35c:	000b200c 	andeq	r2, fp, ip
     360:	012e1b00 	teqeq	lr, r0, lsl #22
	return 0;
}
     364:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     368:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     36c:	0b200c27 	bleq	803410 <__Stack_Size+0x803010>
     370:	00001301 	andeq	r1, r0, r1, lsl #6
     374:	31002e1c 	tstcc	r0, ip, lsl lr
     378:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     37c:	000a4001 	andeq	r4, sl, r1
     380:	012e1d00 	teqeq	lr, r0, lsl #26
	for (i = 0; i < poseSize; i++)
		//nextpose_[i] = pgm_read_word_near(addr+1+i) << BIOLOID_SHIFT;
		nextpose_[i] = pgm_read_word_near(addr + 1 + i);
}
/* read in current servo positions to the pose. */
void BioloidControllerEx_readPose() {
     384:	01111331 	tsteq	r1, r1, lsr r3
     388:	0a400112 	beq	10007d8 <__Stack_Size+0x10003d8>
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
		//pose_[i] = dxl_read_word(id_[i],AXM_PRESENT_POSITION_L)<<BIOLOID_SHIFT;
		pose_[i] = dxl_read_word(id_[i], AXM_PRESENT_POSITION_L);
     38c:	00001301 	andeq	r1, r0, r1, lsl #6
     390:	3100051e 	tstcc	r0, lr, lsl r5
     394:	000a0213 	andeq	r0, sl, r3, lsl r2
     398:	002e1f00 	eoreq	r1, lr, r0, lsl #30
     39c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
		PrintChar(id_[i]);
		PrintString(" - ");
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
     3a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!

#ifdef DEBUG_BIOLOIDEX
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
     3a4:	01110c27 	tsteq	r1, r7, lsr #24
     3a8:	0a400112 	beq	10007f8 <__Stack_Size+0x10003f8>
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
	}
}
     3ac:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
     3b0:	030c3f00 	movweq	r3, #52992	; 0xcf00
     3b4:	3b0b3a0e 	blcc	2cebf4 <__Stack_Size+0x2ce7f4>
     3b8:	12011105 	andne	r1, r1, #1073741825	; 0x40000001
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitPosY[GaitCurrentLegNr] = -3 * g_InControlState.LegLiftHeight
				/ (3 + g_InControlState.gaitCur.HalfLiftHeight); // Easier to shift between div factor: /1 (3/3), /2 (3/6) and 3/4
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y
     3bc:	000a4001 	andeq	r4, sl, r1
				/ g_InControlState.gaitCur.LiftDivFactor;
	}

	//Optional Half heigth Rear 5 LiftedPos (5 lifted positions)
	else if (((g_InControlState.gaitCur.NrLiftedPos == 5 && (LegStep == -2)))
     3c0:	012e2100 	teqeq	lr, r0, lsl #2
     3c4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     3c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     3cc:	01110c27 	tsteq	r1, r7, lsr #24
     3d0:	0a400112 	beq	1000820 <__Stack_Size+0x1000420>
     3d4:	00001301 	andeq	r1, r0, r1, lsl #6
     3d8:	03000522 	movweq	r0, #1314	; 0x522
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = -g_InControlState.TravelLength.x / 2;
     3dc:	3b0b3a0e 	blcc	2cec1c <__Stack_Size+0x2ce81c>
     3e0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     3e4:	2300000a 	movwcs	r0, #10	; 0xa
     3e8:	0c3f012e 	ldfeqs	f0, [pc], #-184
     3ec:	0b3a0e03 	bleq	e83c00 <__Stack_Size+0xe83800>
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
     3f0:	0c270b3b 	stceq	11, cr0, [r7], #-236
     3f4:	01111349 	tsteq	r1, r9, asr #6
     3f8:	0a400112 	beq	1000848 <__Stack_Size+0x1000448>
     3fc:	00001301 	andeq	r1, r0, r1, lsl #6
     400:	03000524 	movweq	r0, #1316	; 0x524
		GaitPosZ[GaitCurrentLegNr] = -g_InControlState.TravelLength.z / 2;
     404:	3b0b3a0e 	blcc	2cec44 <__Stack_Size+0x2ce844>
     408:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     40c:	25000006 	strcs	r0, [r0, #-6]
     410:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
		GaitRotY[GaitCurrentLegNr] = -g_InControlState.TravelLength.y / 2;
     414:	0b3b0b3a 	bleq	ec3104 <__Stack_Size+0xec2d04>
     418:	0a021349 	beq	85144 <__Stack_Size+0x84d44>
     41c:	34260000 	strtcc	r0, [r6]
     420:	3a0e0300 	bcc	381028 <__Stack_Size+0x380c28>
	}

	//Optional Half heigth Front 5 LiftedPos (5 lifted positions)
	else if ((g_InControlState.gaitCur.NrLiftedPos == 5)
     424:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     428:	00060213 	andeq	r0, r6, r3, lsl r2
     42c:	00342700 	eorseq	r2, r4, r0, lsl #14
     430:	0b3a0e03 	bleq	e83c44 <__Stack_Size+0xe83844>
     434:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     438:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
			&& (LegStep == 2
					|| LegStep == -(g_InControlState.gaitCur.StepsInGait - 2))
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
     43c:	030c3f00 	movweq	r3, #52992	; 0xcf00
     440:	3b0b3a0e 	blcc	2cec80 <__Stack_Size+0x2ce880>
     444:	110c2705 	tstne	ip, r5, lsl #14
     448:	40011201 	andmi	r1, r1, r1, lsl #4
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
     44c:	29000006 	stmdbcs	r0, {r1, r2}
     450:	1331002e 	teqne	r1, #46	; 0x2e
     454:	01120111 	tsteq	r2, r1, lsl r1
     458:	00000640 	andeq	r0, r0, r0, asr #12
     45c:	3f012e2a 	svccc	0x00012e2a
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
     460:	3a0e030c 	bcc	381098 <__Stack_Size+0x380c98>
     464:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     468:	1201110c 	andne	r1, r1, #3	; 0x3
     46c:	01064001 	tsteq	r6, r1
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y / 2;
     470:	2b000013 	blcs	4c4 <__Stack_Size+0xc4>
     474:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     478:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     47c:	06021349 	streq	r1, [r2], -r9, asr #6
	}
	//_B_
	//Leg front down position //bug here?  From _A_ to _B_ there should only be one gaitstep, not 2!
	//For example, where is the case of LegStep==0+2 executed when NRLiftedPos=3?
	else if ((LegStep == g_InControlState.gaitCur.FrontDownPos
     480:	342c0000 	strtcc	r0, [ip]
     484:	3a0e0300 	bcc	38108c <__Stack_Size+0x380c8c>
     488:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     48c:	00060213 	andeq	r0, r6, r3, lsl r2
     490:	012e2d00 	teqeq	lr, r0, lsl #26
     494:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     498:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     49c:	13490c27 	movtne	r0, #39975	; 0x9c27
			|| LegStep
					== -(g_InControlState.gaitCur.StepsInGait
							- g_InControlState.gaitCur.FrontDownPos))
			&& GaitPosY[GaitCurrentLegNr] < 0) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
     4a0:	01120111 	tsteq	r2, r1, lsl r1
     4a4:	13010640 	movwne	r0, #5696	; 0x1640
     4a8:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
     4ac:	030c3f01 	movweq	r3, #52993	; 0xcf01
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
     4b0:	3b0b3a0e 	blcc	2cecf0 <__Stack_Size+0x2ce8f0>
     4b4:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
     4b8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     4bc:	010a4001 	tsteq	sl, r1
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y / 2;
     4c0:	2f000013 	svccs	0x00000013
     4c4:	08030005 	stmdaeq	r3, {r0, r2}
     4c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!
		GaitPosY[GaitCurrentLegNr] = 0;
     4cc:	06021349 	streq	r1, [r2], -r9, asr #6
     4d0:	34300000 	ldrtcc	r0, [r0]
	}

	//Move body forward
	else {
		GaitPosX[GaitCurrentLegNr] = GaitPosX[GaitCurrentLegNr]
     4d4:	3a0e0300 	bcc	3810dc <__Stack_Size+0x380cdc>
     4d8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     4dc:	000a0213 	andeq	r0, sl, r3, lsl r2
     4e0:	00343100 	eorseq	r3, r4, r0, lsl #2
     4e4:	0b3a0e03 	bleq	e83cf8 <__Stack_Size+0xe838f8>
     4e8:	1349053b 	movtne	r0, #38203	; 0x953b
				- (g_InControlState.TravelLength.x
						/ (short) g_InControlState.gaitCur.TLDivFactor);
		GaitPosY[GaitCurrentLegNr] = 0;
     4ec:	05320000 	ldreq	r0, [r2]!
     4f0:	02133100 	andseq	r3, r3, #0	; 0x0
     4f4:	33000006 	movwcc	r0, #6	; 0x6
		GaitPosZ[GaitCurrentLegNr] = GaitPosZ[GaitCurrentLegNr]
     4f8:	13310034 	teqne	r1, #52	; 0x34
     4fc:	00000602 	andeq	r0, r0, r2, lsl #12
     500:	31011d34 	tstcc	r1, r4, lsr sp
     504:	58065513 	stmdapl	r6, {r0, r1, r4, r8, sl, ip, lr}
				- (g_InControlState.TravelLength.z
						/ (short) g_InControlState.gaitCur.TLDivFactor);
		GaitRotY[GaitCurrentLegNr] = GaitRotY[GaitCurrentLegNr]
     508:	0105590b 	tsteq	r5, fp, lsl #18
     50c:	35000013 	strcc	r0, [r0, #-19]
     510:	13310005 	teqne	r1, #5	; 0x5
     514:	0b360000 	bleq	d8051c <__Stack_Size+0xd8011c>
				- (g_InControlState.TravelLength.y
						/ (short) g_InControlState.gaitCur.TLDivFactor);
	}

}
     518:	00065501 	andeq	r5, r6, r1, lsl #10
     51c:	011d3700 	tsteq	sp, r0, lsl #14
     520:	06551331 	undefined
     524:	05590b58 	ldrbeq	r0, [r9, #-2904]
     528:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
     52c:	030c3f00 	movweq	r3, #52992	; 0xcf00
     530:	3b0b3a0e 	blcc	2ced70 <__Stack_Size+0x2ce970>

}

//--------------------------------------------------------------------
//[GAIT Sequence]
void GaitSeq(void) {
     534:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
	//Check if the Gait is in motion - If not if we are going to start a motion try to align our Gaitstep to start with a good foot
	// for the direction we are about to go...

	if (fWalking || (g_InControlState.ForceGaitStepCnt != 0))
     538:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     53c:	00064001 	andeq	r4, r6, r1
     540:	012e3900 	teqeq	lr, r0, lsl #18
		TravelRequest = true;   // Is walking or was walking...
     544:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     548:	053b0b3a 	ldreq	r0, [fp, #-2874]!
	else {
		TravelRequest = (abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
     54c:	01120111 	tsteq	r2, r1, lsl r1
     550:	13010640 	movwne	r0, #5696	; 0x1640
     554:	343a0000 	ldrtcc	r0, [sl]
     558:	3a080300 	bcc	201160 <__Stack_Size+0x200d60>
     55c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     560:	00060213 	andeq	r0, r6, r3, lsl r2
     564:	00343b00 	eorseq	r3, r4, r0, lsl #22
     568:	0b3a0803 	bleq	e8257c <__Stack_Size+0xe8217c>
     56c:	1349053b 	movtne	r0, #38203	; 0x953b
     570:	00000a02 	andeq	r0, r0, r2, lsl #20
     574:	11010b3c 	tstne	r1, ip, lsr fp
     578:	00011201 	andeq	r1, r1, r1, lsl #4
     57c:	012e3d00 	teqeq	lr, r0, lsl #26
				|| (abs(g_InControlState.TravelLength.y) > cTravelDeadZone);

		if (TravelRequest) {

		} else {    //Clear values under the cTravelDeadZone
			g_InControlState.TravelLength.x = 0;
     580:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
			g_InControlState.TravelLength.z = 0;
     584:	0b3b0b3a 	bleq	ec3274 <__Stack_Size+0xec2e74>
			g_InControlState.TravelLength.y = 0; //Gait NOT in motion, return to home position
		}
	}

	//Calculate Gait sequence
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
     588:	01110c27 	tsteq	r1, r7, lsr #24
     58c:	06400112 	undefined
     590:	00001301 	andeq	r1, r0, r1, lsl #6
		Gait(LegIndex);
     594:	0300343e 	movweq	r3, #1086	; 0x43e
			g_InControlState.TravelLength.y = 0; //Gait NOT in motion, return to home position
		}
	}

	//Calculate Gait sequence
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
     598:	3b0b3a08 	blcc	2cedc0 <__Stack_Size+0x2ce9c0>
     59c:	0013490b 	andseq	r4, r3, fp, lsl #18
     5a0:	002e3f00 	eoreq	r3, lr, r0, lsl #30
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5a4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
     5a8:	0b3b0b3a 	bleq	ec3298 <__Stack_Size+0xec2e98>
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5ac:	01110c27 	tsteq	r1, r7, lsr #24
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
     5b0:	06400112 	undefined
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5b4:	1d400000 	stclne	0, cr0, [r0]
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
		g_InControlState.GaitStep = 1;
     5b8:	55133100 	ldrpl	r3, [r3, #-256]
     5bc:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}

	// If we have a force count decrement it now...
	if (g_InControlState.ForceGaitStepCnt)
     5c0:	41000005 	tstmi	r0, r5
     5c4:	0c3f012e 	ldfeqs	f0, [pc], #-184
		g_InControlState.ForceGaitStepCnt--;
     5c8:	0b3a0e03 	bleq	e83ddc <__Stack_Size+0xe839dc>
}
     5cc:	0c270b3b 	stceq	11, cr0, [r7], #-236
     5d0:	01111349 	tsteq	r1, r9, asr #6
     5d4:	06400112 	undefined
     5d8:	00001301 	andeq	r1, r0, r1, lsl #6
     5dc:	3f002e42 	svccc	0x00002e42
}
//--------------------------------------------------------------------
//[BalanceBody]
void BalanceBody(void) {

	TotalTransZ = TotalTransZ / BalanceDivFactor;
     5e0:	3a0e030c 	bcc	381218 <__Stack_Size+0x380e18>
     5e4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     5e8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     5ec:	00064001 	andeq	r4, r6, r1
     5f0:	010b4300 	tsteq	fp, r0, lsl #6
	TotalTransX = TotalTransX / BalanceDivFactor;
     5f4:	01120111 	tsteq	r2, r1, lsl r1
     5f8:	00001301 	andeq	r1, r0, r1, lsl #6
     5fc:	31001d44 	tstcc	r0, r4, asr #26
	TotalTransY = TotalTransY / BalanceDivFactor;
     600:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     604:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     608:	45000005 	strmi	r0, [r0, #-5]
     60c:	13490035 	movtne	r0, #36917	; 0x9035

	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
		TotalXBal1 += 3600;

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
     610:	21460000 	cmpcs	r6, r0
     614:	2f134900 	svccs	0x00134900
	TotalTransX = TotalTransX / BalanceDivFactor;
	TotalTransY = TotalTransY / BalanceDivFactor;

#ifndef QUADMODE // ??? on PhantomX Hex at no movment YBal1 = 1800, on Quad = 0...  Need to experiment
	if (TotalYBal1 > 0)        //Rotate balance circle by +/- 180 deg
		TotalYBal1 -= 1800;
     618:	47000005 	strmi	r0, [r0, -r5]
     61c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	else
		TotalYBal1 += 1800;
     620:	0b3b0b3a 	bleq	ec3310 <__Stack_Size+0xec2f10>
#endif

	if (TotalZBal1 < -1800) //Compensate for extreme balance positions that causes overflow
     624:	0b1c1349 	bleq	705350 <__Stack_Size+0x704f50>
     628:	34480000 	strbcc	r0, [r8]
     62c:	3a0e0300 	bcc	381234 <__Stack_Size+0x380e34>
		TotalZBal1 += 3600;
     630:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     634:	000a0213 	andeq	r0, sl, r3, lsl r2

	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
     638:	00344900 	eorseq	r4, r4, r0, lsl #18
     63c:	0b3a0e03 	bleq	e83e50 <__Stack_Size+0xe83a50>
		TotalXBal1 += 3600;
     640:	1349053b 	movtne	r0, #38203	; 0x953b
     644:	0a020c3f 	beq	83748 <__Stack_Size+0x83348>

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
     648:	344a0000 	strbcc	r0, [sl]
     64c:	3a0e0300 	bcc	381254 <__Stack_Size+0x380e54>
	TotalXBal1 = -TotalXBal1 / BalanceDivFactor;
     650:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     654:	020c3f13 	andeq	r3, ip, #76	; 0x4c
	TotalZBal1 = TotalZBal1 / BalanceDivFactor;
     658:	4b00000a 	blmi	688 <__Stack_Size+0x288>
	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
		TotalXBal1 += 3600;

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
	TotalXBal1 = -TotalXBal1 / BalanceDivFactor;
     65c:	08030034 	stmdaeq	r3, {r2, r4, r5}
     660:	0b3b0b3a 	bleq	ec3350 <__Stack_Size+0xec2f50>
	TotalZBal1 = TotalZBal1 / BalanceDivFactor;
     664:	0c3f1349 	ldceq	3, cr1, [pc], #-292
     668:	00000a02 	andeq	r0, r0, r2, lsl #20

}
     66c:	0300344c 	movweq	r3, #1100	; 0x44c
     670:	3b0b3a0e 	blcc	2ceeb0 <__Stack_Size+0x2ceab0>
     674:	3f13490b 	svccc	0x0013490b
     678:	000c3c0c 	andeq	r3, ip, ip, lsl #24
     67c:	00344d00 	eorseq	r4, r4, r0, lsl #26
     680:	0b3a0803 	bleq	e82694 <__Stack_Size+0xe82294>
     684:	1349053b 	movtne	r0, #38203	; 0x953b
     688:	0a020c3f 	beq	8378c <__Stack_Size+0x8338c>
//sin4        - Output Sinus of AngleDeg
//cos4          - Output Cosinus of AngleDeg
void GetSinCos(short AngleDeg1) {
	short ABSAngleDeg1;   //Absolute value of the Angle in Degrees, decimals = 1
	//Get the absolute value of AngleDeg
	if (AngleDeg1 < 0)
     68c:	01000000 	tsteq	r0, r0
     690:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
		ABSAngleDeg1 = AngleDeg1 * -1;
     694:	0e030b13 	vmoveq.32	d3[0], r0
     698:	01110e1b 	tsteq	r1, fp, lsl lr
	else
		ABSAngleDeg1 = AngleDeg1;

	//Shift rotation to a full circle of 360 deg -> AngleDeg // 360
	if (AngleDeg1 < 0)    //Negative values
		AngleDeg1 = 3600 - (ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600)));
     69c:	06100112 	undefined
     6a0:	24020000 	strcs	r0, [r2]
     6a4:	3e0b0b00 	fmacdcc	d0, d11, d0
     6a8:	000e030b 	andeq	r0, lr, fp, lsl #6
     6ac:	00160300 	andseq	r0, r6, r0, lsl #6
     6b0:	0b3a0803 	bleq	e826c4 <__Stack_Size+0xe822c4>
     6b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     6b8:	04040000 	streq	r0, [r4]
     6bc:	3a0b0b01 	bcc	2c32c8 <__Stack_Size+0x2c2ec8>
	else
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));

	if (AngleDeg1 >= 0 && AngleDeg1 <= 900)     // 0 to 90 deg
     6c0:	010b3b0b 	tsteq	fp, fp, lsl #22
     6c4:	05000013 	streq	r0, [r0, #-19]
			{
		sin4 = pgm_read_word(&GetSin[AngleDeg1 / 5]); // 5 is the presision (0.5) of the table
     6c8:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     6cc:	00000d1c 	andeq	r0, r0, ip, lsl sp
     6d0:	03001606 	movweq	r1, #1542	; 0x606
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
     6d4:	3b0b3a0e 	blcc	2cef14 <__Stack_Size+0x2ceb14>
     6d8:	0013490b 	andseq	r4, r3, fp, lsl #18
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));

	if (AngleDeg1 >= 0 && AngleDeg1 <= 900)     // 0 to 90 deg
			{
		sin4 = pgm_read_word(&GetSin[AngleDeg1 / 5]); // 5 is the presision (0.5) of the table
     6dc:	01130700 	tsteq	r3, r0, lsl #14
     6e0:	0b3a0b0b 	bleq	e83314 <__Stack_Size+0xe82f14>
     6e4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     6e8:	0d080000 	stceq	0, cr0, [r8]
     6ec:	3a0e0300 	bcc	3812f4 <__Stack_Size+0x380ef4>
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
     6f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6f4:	000a3813 	andeq	r3, sl, r3, lsl r8
     6f8:	000f0900 	andeq	r0, pc, r0, lsl #18
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
     6fc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     700:	240a0000 	strcs	r0, [sl]
     704:	3e0b0b00 	fmacdcc	d0, d11, d0
     708:	0008030b 	andeq	r0, r8, fp, lsl #6
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     70c:	01040b00 	tsteq	r4, r0, lsl #22
     710:	0b3a0b0b 	bleq	e83344 <__Stack_Size+0xe82f44>
     714:	1301053b 	movwne	r0, #5435	; 0x153b
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     718:	240c0000 	strcs	r0, [ip]
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     71c:	3e0b0b00 	fmacdcc	d0, d11, d0
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     720:	0d00000b 	stceq	0, cr0, [r0, #-44]
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     724:	0c3f012e 	ldfeqs	f0, [pc], #-184
     728:	0b3a0e03 	bleq	e83f3c <__Stack_Size+0xe83b3c>
     72c:	0c270b3b 	stceq	11, cr0, [r7], #-236
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     730:	01120111 	tsteq	r2, r1, lsl r1
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     734:	13010a40 	movwne	r0, #6720	; 0x1a40
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     738:	050e0000 	streq	r0, [lr]
     73c:	3a0e0300 	bcc	381344 <__Stack_Size+0x380f44>
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
     740:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     744:	000a0213 	andeq	r0, sl, r3, lsl r2
     748:	00050f00 	andeq	r0, r5, r0, lsl #30
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     74c:	0b3a0803 	bleq	e82760 <__Stack_Size+0xe82360>
     750:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     754:	00000a02 	andeq	r0, r0, r2, lsl #20
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     758:	3f012e10 	svccc	0x00012e10
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     75c:	3a0e030c 	bcc	381394 <__Stack_Size+0x380f94>
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     760:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     764:	1113490c 	tstne	r3, ip, lsl #18
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     768:	40011201 	andmi	r1, r1, r1, lsl #4
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     76c:	0013010a 	andseq	r0, r3, sl, lsl #2
     770:	00051100 	andeq	r1, r5, r0, lsl #2
     774:	0b3a0e03 	bleq	e83f88 <__Stack_Size+0xe83b88>
     778:	13490b3b 	movtne	r0, #39739	; 0x9b3b
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     77c:	00000602 	andeq	r0, r0, r2, lsl #12
     780:	03003412 	movweq	r3, #1042	; 0x412
     784:	3b0b3a08 	blcc	2cefac <__Stack_Size+0x2cebac>
     788:	0013490b 	andseq	r4, r3, fp, lsl #18
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
     78c:	00261300 	eoreq	r1, r6, r0, lsl #6
     790:	00001349 	andeq	r1, r0, r9, asr #6
     794:	03000514 	movweq	r0, #1300	; 0x514
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     798:	3b0b3a08 	blcc	2cefc0 <__Stack_Size+0x2cebc0>
     79c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     7a0:	15000006 	strne	r0, [r0, #-6]
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7a4:	08030034 	stmdaeq	r3, {r2, r4, r5}
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7a8:	0b3b0b3a 	bleq	ec3498 <__Stack_Size+0xec3098>
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7ac:	06021349 	streq	r1, [r2], -r9, asr #6
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7b0:	2e160000 	wxorcs	wr0, wr6, wr0
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7b4:	030c3f01 	movweq	r3, #52993	; 0xcf01
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7b8:	3b0b3a0e 	blcc	2ceff8 <__Stack_Size+0x2cebf8>
     7bc:	110c2705 	tstne	ip, r5, lsl #14
     7c0:	40011201 	andmi	r1, r1, r1, lsl #4
     7c4:	00130106 	andseq	r0, r3, r6, lsl #2
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7c8:	00051700 	andeq	r1, r5, r0, lsl #14
     7cc:	0b3a0803 	bleq	e827e0 <__Stack_Size+0xe823e0>
     7d0:	1349053b 	movtne	r0, #38203	; 0x953b
	//Shift rotation to a full circle of 360 deg -> AngleDeg // 360
	if (AngleDeg1 < 0)    //Negative values
		AngleDeg1 = 3600 - (ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600)));
	else
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));
     7d4:	00000a02 	andeq	r0, r0, r2, lsl #20
     7d8:	03003418 	movweq	r3, #1048	; 0x418
     7dc:	3b0b3a08 	blcc	2cf004 <__Stack_Size+0x2cec04>
     7e0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     7e4:	1900000a 	stmdbne	r0, {r1, r3}
     7e8:	0c3f012e 	ldfeqs	f0, [pc], #-184
     7ec:	0b3a0e03 	bleq	e84000 <__Stack_Size+0xe83c00>
     7f0:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     7f4:	01120111 	tsteq	r2, r1, lsl r1
     7f8:	13010a40 	movwne	r0, #6720	; 0x1a40
	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
	}
}
     7fc:	051a0000 	ldreq	r0, [sl]
     800:	3a0e0300 	bcc	381408 <__Stack_Size+0x381008>
     804:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     808:	000a0213 	andeq	r0, sl, r3, lsl r2
     80c:	012e1b00 	teqeq	lr, r0, lsl #22
//cos4        - Input Cosinus
//AngleRad4     - Output Angle in AngleRad4
long GetArcCos(short cos4) {
	boolean NegativeValue/*:1*/;    //If the the value is Negative
	//Check for negative value
	if (cos4 < 0) {
     810:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     814:	0b3b0b3a 	bleq	ec3504 <__Stack_Size+0xec3104>
     818:	01110c27 	tsteq	r1, r7, lsr #24
		cos4 = -cos4;
     81c:	06400112 	undefined
     820:	00001301 	andeq	r1, r0, r1, lsl #6
		NegativeValue = 1;
	} else
		NegativeValue = 0;

	//Limit cos4 to his maximal value
	cos4 = min(cos4, c4DEC);
     824:	0300341c 	movweq	r3, #1052	; 0x41c
     828:	3b0b3a08 	blcc	2cf050 <__Stack_Size+0x2cec50>
     82c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000

	if ((cos4 >= 0) && (cos4 < 9000)) {
     830:	1d00000a 	stcne	0, cr0, [r0, #-40]
     834:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     838:	0b3b0b3a 	bleq	ec3528 <__Stack_Size+0xec3128>
		AngleRad4 = (byte) pgm_read_byte(&GetACos[cos4 / 79]);
     83c:	0a021349 	beq	85568 <__Stack_Size+0x85168>
     840:	2e1e0000 	wxorcs	wr0, wr14, wr0
     844:	030c3f01 	movweq	r3, #52993	; 0xcf01
		AngleRad4 = ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255) ;
     848:	3b0b3a0e 	blcc	2cf088 <__Stack_Size+0x2cec88>
     84c:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
	} else if ((cos4 >= 9000) && (cos4 < 9900)) {
     850:	01064001 	tsteq	r6, r1
     854:	1f000013 	svcne	0x00000013
     858:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     85c:	0b3b0b3a 	bleq	ec354c <__Stack_Size+0xec314c>
		AngleRad4 = (byte) pgm_read_byte(&GetACos[(cos4 - 9000) / 8 + 114]);
     860:	06021349 	streq	r1, [r2], -r9, asr #6
     864:	34200000 	strtcc	r0, [r0]
     868:	3a0e0300 	bcc	381470 <__Stack_Size+0x381070>
     86c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     870:	21000013 	tstcs	r0, r3, lsl r0
     874:	0c3f012e 	ldfeqs	f0, [pc], #-184
		AngleRad4 = (long) ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255)
     878:	0b3a0e03 	bleq	e8408c <__Stack_Size+0xe83c8c>
	} else if ((cos4 >= 9900) && (cos4 <= 10000)) {
     87c:	0c270b3b 	stceq	11, cr0, [r7], #-236
     880:	01111349 	tsteq	r1, r9, asr #6
     884:	06400112 	undefined
		AngleRad4 = (byte) pgm_read_byte(&GetACos[(cos4 - 9900) / 2 + 227]);
     888:	00001301 	andeq	r1, r0, r1, lsl #6
     88c:	11010b22 	tstne	r1, r2, lsr #22
     890:	00011201 	andeq	r1, r1, r1, lsl #4
		AngleRad4 = (long) ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255)
     894:	00352300 	eorseq	r2, r5, r0, lsl #6
     898:	00001349 	andeq	r1, r0, r9, asr #6
     89c:	49010124 	stmdbmi	r1, {r2, r5, r8}
     8a0:	00130113 	andseq	r0, r3, r3, lsl r1
     8a4:	00212500 	eoreq	r2, r1, r0, lsl #10
     8a8:	052f1349 	streq	r1, [pc, #-841]!	; 567 <__Stack_Size+0x167>
     8ac:	34260000 	strtcc	r0, [r6]
	}

	//Add negative sign
	if (NegativeValue)
		AngleRad4 = 31416 - AngleRad4;
     8b0:	3a0e0300 	bcc	3814b8 <__Stack_Size+0x3810b8>
     8b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8b8:	000b1c13 	andeq	r1, fp, r3, lsl ip
     8bc:	00212700 	eoreq	r2, r1, r0, lsl #14
     8c0:	0b2f1349 	bleq	bc55ec <__Stack_Size+0xbc51ec>

	return AngleRad4;
}
     8c4:	34280000 	strtcc	r0, [r8]
     8c8:	3a0e0300 	bcc	3814d0 <__Stack_Size+0x3810d0>
     8cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8d0:	020c3f13 	andeq	r3, ip, #76	; 0x4c
     8d4:	2900000a 	stmdbcs	r0, {r1, r3}
     8d8:	08030034 	stmdaeq	r3, {r2, r4, r5}

unsigned long isqrt32(unsigned long n) //
{
     8dc:	0b3b0b3a 	bleq	ec35cc <__Stack_Size+0xec31cc>
     8e0:	0c3f1349 	ldceq	3, cr1, [pc], #-292

	root = 0;
	remainder = n;
	place = 0x40000000; // OR place = 0x4000; OR place = 0x40; - respectively

	while (place > remainder)
     8e4:	00000a02 	andeq	r0, r0, r2, lsl #20
     8e8:	01110100 	tsteq	r1, r0, lsl #2
     8ec:	0b130e25 	bleq	4c4188 <__Stack_Size+0x4c3d88>
		place = place >> 2;
	while (place) {
		if (remainder >= root + place) {
     8f0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
			remainder = remainder - root - place;
     8f4:	01120111 	tsteq	r2, r1, lsl r1
     8f8:	00000610 	andeq	r0, r0, r0, lsl r6
			root = root + (place << 1);
     8fc:	03001602 	movweq	r1, #1538	; 0x602

	while (place > remainder)
		place = place >> 2;
	while (place) {
		if (remainder >= root + place) {
			remainder = remainder - root - place;
     900:	3b0b3a08 	blcc	2cf128 <__Stack_Size+0x2ced28>
			root = root + (place << 1);
		}
		root = root >> 1;
		place = place >> 2;
     904:	0013490b 	andseq	r4, r3, fp, lsl #18
	remainder = n;
	place = 0x40000000; // OR place = 0x4000; OR place = 0x40; - respectively

	while (place > remainder)
		place = place >> 2;
	while (place) {
     908:	00240300 	eoreq	r0, r4, r0, lsl #6
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
	XYhyp2 = isqrt32(
     90c:	0b3e0b0b 	bleq	f83540 <__Stack_Size+0xf83140>
//(GETATAN2) Simplyfied ArcTan2 function based on fixed point ArcCos
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
     910:	00000e03 	andeq	r0, r0, r3, lsl #28
	XYhyp2 = isqrt32(
     914:	03001604 	movweq	r1, #1540	; 0x604
     918:	3b0b3a0e 	blcc	2cf158 <__Stack_Size+0x2ced58>
//(GETATAN2) Simplyfied ArcTan2 function based on fixed point ArcCos
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
     91c:	0013490b 	andseq	r4, r3, fp, lsl #18
	XYhyp2 = isqrt32(
     920:	00240500 	eoreq	r0, r4, r0, lsl #10
     924:	0b3e0b0b 	bleq	f83558 <__Stack_Size+0xf83158>
     928:	04060000 	streq	r0, [r6]
			((long) AtanX * AtanX * c4DEC) + ((long) AtanY * AtanY * c4DEC));
	GetArcCos(((long) AtanX * (long) c6DEC) / (long) XYhyp2);
     92c:	3a0b0b01 	bcc	2c3538 <__Stack_Size+0x2c3138>
     930:	010b3b0b 	tsteq	fp, fp, lsl #22
     934:	07000013 	smladeq	r0, r3, r0, r0
     938:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     93c:	00000d1c 	andeq	r0, r0, ip, lsl sp
     940:	3f002e08 	svccc	0x00002e08
     944:	3a0e030c 	bcc	38157c <__Stack_Size+0x38117c>

	if (AtanY < 0) // removed overhead... Atan4 = AngleRad4 * (AtanY/abs(AtanY));
     948:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
		Atan4 = -AngleRad4;
     94c:	1113490c 	tstne	r3, ip, lsl #18
	else
		Atan4 = AngleRad4;
     950:	40011201 	andmi	r1, r1, r1, lsl #4
	XYhyp2 = isqrt32(
			((long) AtanX * AtanX * c4DEC) + ((long) AtanY * AtanY * c4DEC));
	GetArcCos(((long) AtanX * (long) c6DEC) / (long) XYhyp2);

	if (AtanY < 0) // removed overhead... Atan4 = AngleRad4 * (AtanY/abs(AtanY));
		Atan4 = -AngleRad4;
     954:	0900000a 	stmdbeq	r0, {r1, r3}
	else
		Atan4 = AngleRad4;
     958:	0c3f012e 	ldfeqs	f0, [pc], #-184
     95c:	0b3a0e03 	bleq	e84170 <__Stack_Size+0xe83d70>
	return Atan4;
}
     960:	0c270b3b 	stceq	11, cr0, [r7], #-236
     964:	01111349 	tsteq	r1, r9, asr #6
     968:	0a400112 	beq	1000db8 <__Stack_Size+0x10009b8>
     96c:	00001301 	andeq	r1, r0, r1, lsl #6

}

//--------------------------------------------------------------------
//[BalCalcOneLeg]
void BalCalcOneLeg(long PosX, long PosZ, long PosY, byte BalLegNr) {
     970:	0300340a 	movweq	r3, #1034	; 0x40a
	long CPR_Y;            //Final Y value for centerpoint of rotation
	long CPR_Z;            //Final Z value for centerpoint of rotation

	long lAtan;
	//Calculating totals from center of the body to the feet
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BalLegNr]) + PosZ;
     974:	3b0b3a0e 	blcc	2cf1b4 <__Stack_Size+0x2cedb4>
     978:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	CPR_X = (short) pgm_read_word(&cOffsetX[BalLegNr]) + PosX;
     97c:	0b00000a 	bleq	9ac <__Stack_Size+0x5ac>
     980:	0c3f012e 	ldfeqs	f0, [pc], #-184
	CPR_Y = 150 + PosY; // using the value 150 to lower the centerpoint of rotation 'g_InControlState.BodyPos.y +

	TotalTransY += (long) PosY;
     984:	0b3a0e03 	bleq	e84198 <__Stack_Size+0xe83d98>
     988:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     98c:	01120111 	tsteq	r2, r1, lsl r1
	TotalTransZ += (long) CPR_Z;
     990:	13010640 	movwne	r0, #5696	; 0x1640
     994:	050c0000 	streq	r0, [ip]
     998:	3a0e0300 	bcc	3815a0 <__Stack_Size+0x3811a0>
	TotalTransX += (long) CPR_X;
     99c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     9a0:	00060213 	andeq	r0, r6, r3, lsl r2
     9a4:	00340d00 	eorseq	r0, r4, r0, lsl #26
     9a8:	0b3a0e03 	bleq	e841bc <__Stack_Size+0xe83dbc>

	lAtan = GetATan2(CPR_X, CPR_Z);
     9ac:	1349053b 	movtne	r0, #38203	; 0x953b
	TotalYBal1 += (lAtan * 1800) / 31415;
     9b0:	00000a02 	andeq	r0, r0, r2, lsl #20
     9b4:	0300340e 	movweq	r3, #1038	; 0x40e
     9b8:	3b0b3a0e 	blcc	2cf1f8 <__Stack_Size+0x2cedf8>
     9bc:	02134905 	andseq	r4, r3, #81920	; 0x14000
     9c0:	0f000006 	svceq	0x00000006
     9c4:	0c3f012e 	ldfeqs	f0, [pc], #-184
     9c8:	0b3a0e03 	bleq	e841dc <__Stack_Size+0xe83ddc>
     9cc:	0c270b3b 	stceq	11, cr0, [r7], #-236

	lAtan = GetATan2(CPR_X, CPR_Y);
     9d0:	01111349 	tsteq	r1, r9, asr #6
     9d4:	06400112 	undefined
	TotalZBal1 += ((lAtan * 1800) / 31415) - 900; //Rotate balance circle 90 deg
     9d8:	00001301 	andeq	r1, r0, r1, lsl #6
     9dc:	03000510 	movweq	r0, #1296	; 0x510
     9e0:	3b0b3a08 	blcc	2cf208 <__Stack_Size+0x2cee08>
     9e4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     9e8:	11000006 	tstne	r0, r6
     9ec:	0b0b0024 	bleq	2c0a84 <__Stack_Size+0x2c0684>
     9f0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     9f4:	34120000 	ldrcc	r0, [r2]
     9f8:	3a080300 	bcc	201600 <__Stack_Size+0x201200>
     9fc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}

	lAtan = GetATan2(CPR_Z, CPR_Y);
     a00:	000a0213 	andeq	r0, sl, r3, lsl r2
     a04:	000f1300 	andeq	r1, pc, r0, lsl #6
	TotalXBal1 += ((lAtan * 1800) / 31415) - 900; //Rotate balance circle 90 deg
     a08:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     a0c:	26140000 	ldrcs	r0, [r4], -r0
     a10:	00134900 	andseq	r4, r3, r0, lsl #18
     a14:	00341500 	eorseq	r1, r4, r0, lsl #10
     a18:	0b3a0803 	bleq	e82a2c <__Stack_Size+0xe8262c>
     a1c:	1349053b 	movtne	r0, #38203	; 0x953b
     a20:	00000a02 	andeq	r0, r0, r2, lsl #20
     a24:	49010116 	stmdbmi	r1, {r1, r2, r4, r8}

}
     a28:	00130113 	andseq	r0, r3, r3, lsl r1
     a2c:	00211700 	eoreq	r1, r1, r0, lsl #14
     a30:	0b2f1349 	bleq	bc575c <__Stack_Size+0xbc535c>
     a34:	34180000 	ldrcc	r0, [r8]
     a38:	3a080300 	bcc	201640 <__Stack_Size+0x201240>
     a3c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a40:	00060213 	andeq	r0, r6, r3, lsl r2
     a44:	00341900 	eorseq	r1, r4, r0, lsl #18
     a48:	0b3a0803 	bleq	e82a5c <__Stack_Size+0xe8265c>
     a4c:	1349053b 	movtne	r0, #38203	; 0x953b
//SinG                  - Sin buffer for BodyRotZ
//CosG               - Cos buffer for BodyRotZ
//BodyFKPosX         - Output Position X of feet with Rotation
//BodyFKPosY         - Output Position Y of feet with Rotation
//BodyFKPosZ         - Output Position Z of feet with Rotation
void BodyFK(short PosX, short PosZ, short PosY, short RotationY, byte BodyIKLeg) {
     a50:	2e1a0000 	wxorcs	wr0, wr10, wr0
     a54:	030c3f01 	movweq	r3, #52993	; 0xcf01
	short CPR_X;            //Final X value for centerpoint of rotation
	short CPR_Y;            //Final Y value for centerpoint of rotation
	short CPR_Z;            //Final Z value for centerpoint of rotation

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
     a58:	3b0b3a0e 	blcc	2cf298 <__Stack_Size+0x2cee98>
     a5c:	110c270b 	tstne	ip, fp, lsl #14
     a60:	40011201 	andmi	r1, r1, r1, lsl #4
//SinG                  - Sin buffer for BodyRotZ
//CosG               - Cos buffer for BodyRotZ
//BodyFKPosX         - Output Position X of feet with Rotation
//BodyFKPosY         - Output Position Y of feet with Rotation
//BodyFKPosZ         - Output Position Z of feet with Rotation
void BodyFK(short PosX, short PosZ, short PosY, short RotationY, byte BodyIKLeg) {
     a64:	00130106 	andseq	r0, r3, r6, lsl #2
	short CPR_X;            //Final X value for centerpoint of rotation
	short CPR_Y;            //Final Y value for centerpoint of rotation
	short CPR_Z;            //Final Z value for centerpoint of rotation

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
     a68:	00051b00 	andeq	r1, r5, r0, lsl #22
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
     a6c:	0b3a0e03 	bleq	e84280 <__Stack_Size+0xe83e80>
     a70:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     a74:	00000602 	andeq	r0, r0, r2, lsl #12

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     a78:	0300341c 	movweq	r3, #1052	; 0x41c

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BodyIKLeg]) + PosZ
     a7c:	3b0b3a0e 	blcc	2cf2bc <__Stack_Size+0x2ceebc>
     a80:	0013490b 	andseq	r4, r3, fp, lsl #18
	//Successive global rotation matrix:
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
     a84:	00341d00 	eorseq	r1, r4, r0, lsl #26
     a88:	0b3a0803 	bleq	e82a9c <__Stack_Size+0xe8269c>

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BodyIKLeg]) + PosZ
     a8c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
	//Successive global rotation matrix:
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
     a90:	00000602 	andeq	r0, r0, r2, lsl #12
     a94:	0300341e 	movweq	r3, #1054	; 0x41e
	SinG4 = sin4;
     a98:	3b0b3a08 	blcc	2cf2c0 <__Stack_Size+0x2ceec0>
	CosG4 = cos4;
     a9c:	0013490b 	andseq	r4, r3, fp, lsl #18
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
	SinG4 = sin4;
     aa0:	002e1f00 	eoreq	r1, lr, r0, lsl #30
	CosG4 = cos4;
     aa4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
	SinG4 = sin4;
     aa8:	0b3b0b3a 	bleq	ec3798 <__Stack_Size+0xec3398>
	CosG4 = cos4;

	GetSinCos(g_InControlState.BodyRot1.z + TotalZBal1);
     aac:	01110c27 	tsteq	r1, r7, lsr #24
	SinB4 = sin4;
     ab0:	06400112 	undefined
     ab4:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
	CosB4 = cos4;
     ab8:	030c3f00 	movweq	r3, #52992	; 0xcf00

	GetSinCos(g_InControlState.BodyRot1.y + (RotationY * c1DEC) + TotalYBal1);
     abc:	3b0b3a0e 	blcc	2cf2fc <__Stack_Size+0x2ceefc>
     ac0:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     ac4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     ac8:	00064001 	andeq	r4, r6, r1
     acc:	00352100 	eorseq	r2, r5, r0, lsl #2

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     ad0:	00001349 	andeq	r1, r0, r9, asr #6
     ad4:	49002122 	stmdbmi	r0, {r1, r5, r8, sp}
     ad8:	00052f13 	andeq	r2, r5, r3, lsl pc
     adc:	00342300 	eorseq	r2, r4, r0, lsl #6
     ae0:	0b3a0e03 	bleq	e842f4 <__Stack_Size+0xe83ef4>
     ae4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ae8:	00000b1c 	andeq	r0, r0, ip, lsl fp
     aec:	01110100 	tsteq	r1, r0, lsl #2
     af0:	0b130e25 	bleq	4c438c <__Stack_Size+0x4c3f8c>
     af4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     af8:	01120111 	tsteq	r2, r1, lsl r1
     afc:	00000610 	andeq	r0, r0, r0, lsl r6
     b00:	0b002402 	bleq	9b10 <__Stack_Size+0x9710>
     b04:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     b08:	0300000e 	movweq	r0, #14	; 0xe
     b0c:	08030016 	stmdaeq	r3, {r1, r2, r4}
     b10:	0b3b0b3a 	bleq	ec3800 <__Stack_Size+0xec3400>
     b14:	00001349 	andeq	r1, r0, r9, asr #6
     b18:	0b002404 	bleq	9b30 <__Stack_Size+0x9730>
     b1c:	000b3e0b 	andeq	r3, fp, fp, lsl #28
     b20:	01040500 	tsteq	r4, r0, lsl #10
     b24:	0b3a0b0b 	bleq	e83758 <__Stack_Size+0xe83358>
     b28:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     b2c:	28060000 	stmdacs	r6, {}
     b30:	1c0e0300 	stcne	3, cr0, [lr], {0}
     b34:	0700000d 	streq	r0, [r0, -sp]
     b38:	0c3f012e 	ldfeqs	f0, [pc], #-184
     b3c:	0b3a0e03 	bleq	e84350 <__Stack_Size+0xe83f50>
     b40:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     b44:	13010b20 	movwne	r0, #6944	; 0x1b20
     b48:	34080000 	strcc	r0, [r8]
     b4c:	3a080300 	bcc	201754 <__Stack_Size+0x201354>
     b50:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b54:	09000013 	stmdbeq	r0, {r0, r1, r4}
     b58:	0c3f012e 	ldfeqs	f0, [pc], #-184
     b5c:	0b3a0e03 	bleq	e84370 <__Stack_Size+0xe83f70>
     b60:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     b64:	0b201349 	bleq	805890 <__Stack_Size+0x805490>
     b68:	00001301 	andeq	r1, r0, r1, lsl #6

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     b6c:	0300050a 	movweq	r0, #1290	; 0x50a
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     b70:	3b0b3a0e 	blcc	2cf3b0 <__Stack_Size+0x2cefb0>
     b74:	00134905 	andseq	r4, r3, r5, lsl #18
     b78:	00340b00 	eorseq	r0, r4, r0, lsl #22
     b7c:	0b3a0e03 	bleq	e84390 <__Stack_Size+0xe83f90>
     b80:	1349053b 	movtne	r0, #38203	; 0x953b
     b84:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
     b88:	030c3f00 	movweq	r3, #52992	; 0xcf00
     b8c:	3b0b3a0e 	blcc	2cf3cc <__Stack_Size+0x2cefcc>
     b90:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     b94:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     b98:	000a4001 	andeq	r4, sl, r1
     b9c:	012e0d00 	teqeq	lr, r0, lsl #26
     ba0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     ba4:	0b3b0b3a 	bleq	ec3894 <__Stack_Size+0xec3494>
     ba8:	01110c27 	tsteq	r1, r7, lsr #24
     bac:	0a400112 	beq	1000ffc <__Stack_Size+0x1000bfc>
     bb0:	00001301 	andeq	r1, r0, r1, lsl #6
     bb4:	0300050e 	movweq	r0, #1294	; 0x50e
     bb8:	3b0b3a08 	blcc	2cf3e0 <__Stack_Size+0x2cefe0>
     bbc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     bc0:	0f00000a 	svceq	0x0000000a
     bc4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     bc8:	0b3b0b3a 	bleq	ec38b8 <__Stack_Size+0xec34b8>
     bcc:	0a021349 	beq	858f8 <__Stack_Size+0x854f8>
     bd0:	2e100000 	wxorcs	wr0, wr0, wr0
     bd4:	030c3f01 	movweq	r3, #52993	; 0xcf01
     bd8:	3b0b3a0e 	blcc	2cf418 <__Stack_Size+0x2cf018>
     bdc:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     be0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     be4:	010a4001 	tsteq	sl, r1
     be8:	11000013 	tstne	r0, r3, lsl r0
     bec:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     bf0:	0b3b0b3a 	bleq	ec38e0 <__Stack_Size+0xec34e0>
     bf4:	06021349 	streq	r1, [r2], -r9, asr #6
     bf8:	2e120000 	wxorcs	wr0, wr2, wr0
     bfc:	030c3f01 	movweq	r3, #52993	; 0xcf01
     c00:	3b0b3a0e 	blcc	2cf440 <__Stack_Size+0x2cf040>
     c04:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
     c08:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     c0c:	010a4001 	tsteq	sl, r1
     c10:	13000013 	movwne	r0, #19	; 0x13
     c14:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     c18:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     c1c:	06021349 	streq	r1, [r2], -r9, asr #6
     c20:	2e140000 	wxorcs	wr0, wr4, wr0
     c24:	11133101 	tstne	r3, r1, lsl #2
     c28:	40011201 	andmi	r1, r1, r1, lsl #4
     c2c:	0013010a 	andseq	r0, r3, sl, lsl #2
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * CosG4 / c4DEC
					- (long) CPR_Z * c2DEC * SinA4 / c4DEC * SinB4 / c4DEC
							* SinG4 / c4DEC
					- (long) CPR_Y * c2DEC * CosB4 / c4DEC * SinG4 / c4DEC))
			/ c2DEC;
	BodyFKPosY = ((long) CPR_Y * c2DEC
     c30:	00051500 	andeq	r1, r5, r0, lsl #10
	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     c34:	06021331 	undefined
     c38:	05160000 	ldreq	r0, [r6]
     c3c:	02133100 	andseq	r3, r3, #0	; 0x0
     c40:	1700000a 	strne	r0, [r0, -sl]
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * CosG4 / c4DEC
					- (long) CPR_Z * c2DEC * SinA4 / c4DEC * SinB4 / c4DEC
							* SinG4 / c4DEC
					- (long) CPR_Y * c2DEC * CosB4 / c4DEC * SinG4 / c4DEC))
			/ c2DEC;
	BodyFKPosY = ((long) CPR_Y * c2DEC
     c44:	13310034 	teqne	r1, #52	; 0x34
     c48:	34180000 	ldrcc	r0, [r8]
     c4c:	02133100 	andseq	r3, r3, #0	; 0x0
     c50:	19000006 	stmdbne	r0, {r1, r2}
     c54:	0c3f012e 	ldfeqs	f0, [pc], #-184
     c58:	0b3a0e03 	bleq	e8446c <__Stack_Size+0xe8406c>
     c5c:	0c270b3b 	stceq	11, cr0, [r7], #-236
     c60:	01120111 	tsteq	r2, r1, lsl r1
     c64:	13010640 	movwne	r0, #5696	; 0x1640
     c68:	341a0000 	ldrcc	r0, [sl]
     c6c:	3a080300 	bcc	201874 <__Stack_Size+0x201474>
     c70:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c74:	00060213 	andeq	r0, r6, r3, lsl r2
     c78:	00341b00 	eorseq	r1, r4, r0, lsl #22
     c7c:	0b3a0e03 	bleq	e84490 <__Stack_Size+0xe84090>
     c80:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     c84:	341c0000 	ldrcc	r0, [ip]
     c88:	3a0e0300 	bcc	381890 <__Stack_Size+0x381490>
     c8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c90:	00060213 	andeq	r0, r6, r3, lsl r2
     c94:	00341d00 	eorseq	r1, r4, r0, lsl #26
     c98:	0b3a0e03 	bleq	e844ac <__Stack_Size+0xe840ac>
     c9c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ca0:	00000a02 	andeq	r0, r0, r2, lsl #20
     ca4:	31011d1e 	tstcc	r1, lr, lsl sp
     ca8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     cac:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     cb0:	1f00000b 	svcne	0x0000000b
     cb4:	0111010b 	tsteq	r1, fp, lsl #2
     cb8:	00000112 	andeq	r0, r0, r2, lsl r1
     cbc:	3f012e20 	svccc	0x00012e20
     cc0:	3a0e030c 	bcc	3818f8 <__Stack_Size+0x3814f8>
     cc4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     cc8:	1201110c 	andne	r1, r1, #3	; 0x3
     ccc:	01064001 	tsteq	r6, r1
     cd0:	21000013 	tstcs	r0, r3, lsl r0
     cd4:	08030005 	stmdaeq	r3, {r0, r2}
     cd8:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     cdc:	06021349 	streq	r1, [r2], -r9, asr #6
     ce0:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
     ce4:	030c3f01 	movweq	r3, #52993	; 0xcf01
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * SinG4 / c4DEC
					+ (long) CPR_Z * c2DEC * CosG4 / c4DEC * SinA4 / c4DEC
							* SinB4 / c4DEC
					+ (long) CPR_Y * c2DEC * CosB4 / c4DEC * CosG4 / c4DEC))
			/ c2DEC;
}
     ce8:	3b0b3a0e 	blcc	2cf528 <__Stack_Size+0x2cf128>
     cec:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
     cf0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     cf4:	01064001 	tsteq	r6, r1
     cf8:	23000013 	movwcs	r0, #19	; 0x13
     cfc:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     d00:	01120111 	tsteq	r2, r1, lsl r1
     d04:	05590b58 	ldrbeq	r0, [r9, #-2904]
     d08:	05240000 	streq	r0, [r4]!
     d0c:	00133100 	andseq	r3, r3, r0, lsl #2
     d10:	002e2500 	eoreq	r2, lr, r0, lsl #10
     d14:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     d18:	0b3b0b3a 	bleq	ec3a08 <__Stack_Size+0xec3608>
     d1c:	01110c27 	tsteq	r1, r7, lsr #24
//FemurAngle1           - Output Angle of Femur in degrees
//TibiaAngle1           - Output Angle of Tibia in degrees
//CoxaAngle1            - Output Angle of Coxa in degrees
//--------------------------------------------------------------------
void LegIK(short IKFeetPosX, short IKFeetPosY, short IKFeetPosZ,
		byte LegIKLegNr) {
     d20:	06400112 	undefined
     d24:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
     d28:	030c3f01 	movweq	r3, #52993	; 0xcf01
	long Temp1;
	long Temp2;
	long T3;

	//Calculate IKCoxaAngle and IKFeetPosXZ
	GetATan2(IKFeetPosX, IKFeetPosZ);
     d2c:	3b0b3a0e 	blcc	2cf56c <__Stack_Size+0x2cf16c>
	CoxaAngle1[LegIKLegNr] = (((long) Atan4 * 180) / 3141)
     d30:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     d34:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     d38:	01064001 	tsteq	r6, r1
     d3c:	27000013 	smladcs	r0, r3, r0, r0
     d40:	13490035 	movtne	r0, #36917	; 0x9035
     d44:	01280000 	teqeq	r8, r0
     d48:	01134901 	tsteq	r3, r1, lsl #18
     d4c:	29000013 	stmdbcs	r0, {r0, r1, r4}
     d50:	13490021 	movtne	r0, #36897	; 0x9021
     d54:	0000052f 	andeq	r0, r0, pc, lsr #10
	//Length between the Coxa and tars [foot]
	IKFeetPosXZ = XYhyp2 / c2DEC;

	//Using GetAtan2 for solving IKA1 and IKSW
	//IKA14 - Angle between SW line and the ground in radians
	IKA14 = GetATan2(IKFeetPosY - TarsOffsetY,
     d58:	0300342a 	movweq	r3, #1066	; 0x42a
     d5c:	3b0b3a0e 	blcc	2cf59c <__Stack_Size+0x2cf19c>
     d60:	1c13490b 	ldcne	9, cr4, [r3], {11}
     d64:	2b00000b 	blcs	d98 <__Stack_Size+0x998>
     d68:	13490021 	movtne	r0, #36897	; 0x9021
     d6c:	00000b2f 	andeq	r0, r0, pc, lsr #22
     d70:	0300342c 	movweq	r3, #1068	; 0x42c

	//IKSW2 - Length between femur axis and tars
	IKSW2 = XYhyp2;

	//IKA2 - Angle of the line S>W with respect to the femur in radians
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     d74:	3b0b3a0e 	blcc	2cf5b4 <__Stack_Size+0x2cf1b4>
     d78:	3f13490b 	svccc	0x0013490b
     d7c:	000a020c 	andeq	r0, sl, ip, lsl #4
     d80:	11010000 	tstne	r1, r0
					* (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))) * c4DEC
			+ ((long) IKSW2 * IKSW2));
	Temp2 = (long) (2 * (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])) * c2DEC
			* (unsigned long) IKSW2;
	T3 = Temp1 / (Temp2 / c4DEC);
	IKA24 = GetArcCos(T3);
     d84:	130e2501 	movwne	r2, #58625	; 0xe501
     d88:	1b0e030b 	blne	3819bc <__Stack_Size+0x3815bc>
     d8c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     d90:	00061001 	andeq	r1, r6, r1
     d94:	00240200 	eoreq	r0, r4, r0, lsl #4
     d98:	0b3e0b0b 	bleq	f839cc <__Stack_Size+0xf835cc>
     d9c:	00000e03 	andeq	r0, r0, r3, lsl #28
     da0:	03001603 	movweq	r1, #1539	; 0x603
     da4:	3b0b3a08 	blcc	2cf5cc <__Stack_Size+0x2cf1cc>
     da8:	0013490b 	andseq	r4, r3, fp, lsl #18
     dac:	00160400 	andseq	r0, r6, r0, lsl #8
     db0:	0b3a0e03 	bleq	e845c4 <__Stack_Size+0xe841c4>
     db4:	13490b3b 	movtne	r0, #39739	; 0x9b3b

	FemurAngle1[LegIKLegNr] = -(long) (IKA14 + IKA24) * 180
     db8:	24050000 	strcs	r0, [r5]
     dbc:	3e0b0b00 	fmacdcc	d0, d11, d0
     dc0:	0600000b 	streq	r0, [r0], -fp
     dc4:	0c3f002e 	ldceq	0, cr0, [pc], #-184
     dc8:	0b3a0e03 	bleq	e845dc <__Stack_Size+0xe841dc>
     dcc:	0c270b3b 	stceq	11, cr0, [r7], #-236
     dd0:	01111349 	tsteq	r1, r9, asr #6
     dd4:	0a400112 	beq	1001224 <__Stack_Size+0x1000e24>
     dd8:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
			/ 3141+ 900 + CFEMURHORNOFFSET1(LegIKLegNr);  //Normal

	//IKTibiaAngle
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     ddc:	030c3f00 	movweq	r3, #52992	; 0xcf00
	Temp2 = (long) (2 * (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])) * c2DEC
			* (unsigned long) IKSW2;
	T3 = Temp1 / (Temp2 / c4DEC);
	IKA24 = GetArcCos(T3);

	FemurAngle1[LegIKLegNr] = -(long) (IKA14 + IKA24) * 180
     de0:	3b0b3a0e 	blcc	2cf620 <__Stack_Size+0x2cf220>
			/ 3141+ 900 + CFEMURHORNOFFSET1(LegIKLegNr);  //Normal

	//IKTibiaAngle
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     de4:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
     de8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
			+ ((long) (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr])
					* (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))) * c4DEC
			- ((long) IKSW2 * IKSW2));
	Temp2 = 2 * ((long) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])))
			* (long) ((byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]));
	GetArcCos(Temp1 / Temp2);
     dec:	000a4001 	andeq	r4, sl, r1
     df0:	00240800 	eoreq	r0, r4, r0, lsl #16
     df4:	0b3e0b0b 	bleq	f83a28 <__Stack_Size+0xf83628>
     df8:	00000803 	andeq	r0, r0, r3, lsl #16
     dfc:	3f012e09 	svccc	0x00012e09
     e00:	3a0e030c 	bcc	381a38 <__Stack_Size+0x381638>
     e04:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     e08:	1113490c 	tstne	r3, ip, lsl #18

	TibiaAngle1[LegIKLegNr] = -(1450 - (long) AngleRad4 * 180 / 3141
     e0c:	40011201 	andmi	r1, r1, r1, lsl #4
     e10:	00130106 	andseq	r0, r3, r6, lsl #2
     e14:	00340a00 	eorseq	r0, r4, r0, lsl #20
     e18:	0b3a0e03 	bleq	e8462c <__Stack_Size+0xe8422c>
     e1c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e20:	340b0000 	strcc	r0, [fp]
     e24:	3a080300 	bcc	201a2c <__Stack_Size+0x20162c>
     e28:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			+ CTIBIAHORNOFFSET1(LegIKLegNr)); //!!!!!!!!!!!!145 instead of 1800

	//Set the Solution quality
	if (IKSW2
     e2c:	00060213 	andeq	r0, r6, r3, lsl r2
			- ((long) IKSW2 * IKSW2));
	Temp2 = 2 * ((long) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])))
			* (long) ((byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]));
	GetArcCos(Temp1 / Temp2);

	TibiaAngle1[LegIKLegNr] = -(1450 - (long) AngleRad4 * 180 / 3141
     e30:	00050c00 	andeq	r0, r5, r0, lsl #24
			+ CTIBIAHORNOFFSET1(LegIKLegNr)); //!!!!!!!!!!!!145 instead of 1800

	//Set the Solution quality
	if (IKSW2
     e34:	0b3a0e03 	bleq	e84648 <__Stack_Size+0xe84248>
     e38:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e3c:	00000602 	andeq	r0, r0, r2, lsl #12
     e40:	0300340d 	movweq	r3, #1037	; 0x40d
     e44:	3b0b3a0e 	blcc	2cf684 <__Stack_Size+0x2cf284>
			< ((word) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
					+ (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]) - 30)
					* c2DEC))
		IKSolution = 1;
     e48:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	else {
		if (IKSW2
     e4c:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
     e50:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
				< ((word) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
						+ (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))
						* c2DEC))
			IKSolutionWarning = 1;
     e54:	0b3b0b3a 	bleq	ec3b44 <__Stack_Size+0xec3744>
     e58:	06021349 	streq	r1, [r2], -r9, asr #6
		else
			IKSolutionError = 1;
     e5c:	010f0000 	mrseq	r0, CPSR
	}

}
     e60:	01134901 	tsteq	r3, r1, lsl #18
     e64:	10000013 	andne	r0, r0, r3, lsl r0
     e68:	13490021 	movtne	r0, #36897	; 0x9021
     e6c:	00000b2f 	andeq	r0, r0, pc, lsr #22
     e70:	3f002e11 	svccc	0x00002e11
     e74:	3a0e030c 	bcc	381aac <__Stack_Size+0x3816ac>
     e78:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     e7c:	1201110c 	andne	r1, r1, #3	; 0x3
     e80:	00064001 	andeq	r4, r6, r1
     e84:	00351200 	eorseq	r1, r5, r0, lsl #4
     e88:	00001349 	andeq	r1, r0, r9, asr #6
     e8c:	49002113 	stmdbmi	r0, {r0, r1, r4, r8, sp}
     e90:	00052f13 	andeq	r2, r5, r3, lsl pc
     e94:	00341400 	eorseq	r1, r4, r0, lsl #8
     e98:	0b3a0e03 	bleq	e846ac <__Stack_Size+0xe842ac>
     e9c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ea0:	00000b1c 	andeq	r0, r0, ip, lsl fp
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ea4:	03003415 	movweq	r3, #1045	; 0x415
	if (sVal < s) {
     ea8:	3b0b3a0e 	blcc	2cf6e8 <__Stack_Size+0x2cf2e8>
     eac:	3f13490b 	svccc	0x0013490b
		return s;
	}

	s = (short) pgm_read_word(sMax);
     eb0:	000a020c 	andeq	r0, sl, ip, lsl #4
     eb4:	11010000 	tstne	r1, r0
     eb8:	130e2501 	movwne	r2, #58625	; 0xe501

		return s;
	}
	return sVal;

}
     ebc:	1b0e030b 	blne	381af0 <__Stack_Size+0x3816f0>
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     ec0:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
}

//--------------------------------------------------------------------
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
     ec4:	00061001 	andeq	r1, r6, r1
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     ec8:	00240200 	eoreq	r0, r4, r0, lsl #4
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ecc:	0b3e0b0b 	bleq	f83b00 <__Stack_Size+0xf83700>
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
     ed0:	00000e03 	andeq	r0, r0, r3, lsl #28
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ed4:	03001603 	movweq	r1, #1539	; 0x603
	if (sVal < s) {
     ed8:	3b0b3a0e 	blcc	2cf718 <__Stack_Size+0x2cf318>
     edc:	0013490b 	andseq	r4, r3, fp, lsl #18
     ee0:	00240400 	eoreq	r0, r4, r0, lsl #8
		return s;
	}

	s = (short) pgm_read_word(sMax);
     ee4:	0b3e0b0b 	bleq	f83b18 <__Stack_Size+0xf83718>
     ee8:	00000803 	andeq	r0, r0, r3, lsl #16
     eec:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
     ef0:	06000013 	undefined
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ef4:	0b0b0104 	bleq	2c130c <__Stack_Size+0x2c0f0c>
	if (sVal < s) {
     ef8:	0b3b0b3a 	bleq	ec3be8 <__Stack_Size+0xec37e8>
     efc:	00001301 	andeq	r1, r0, r1, lsl #6
     f00:	03002807 	movweq	r2, #2055	; 0x807
		return s;
	}

	s = (short) pgm_read_word(sMax);
     f04:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     f08:	01010800 	tsteq	r1, r0, lsl #16
     f0c:	13011349 	movwne	r1, #4937	; 0x1349
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     f10:	21090000 	tstcs	r9, r0
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
     f14:	2f134900 	svccs	0x00134900
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     f18:	0a00000b 	beq	f4c <__Stack_Size+0xb4c>
	if (sVal < s) {
     f1c:	0b0b0024 	bleq	2c0fb4 <__Stack_Size+0x2c0bb4>
     f20:	00000b3e 	andeq	r0, r0, lr, lsr fp
     f24:	0300340b 	movweq	r3, #1035	; 0x40b
		return s;
	}

	s = (short) pgm_read_word(sMax);
     f28:	3b0b3a0e 	blcc	2cf768 <__Stack_Size+0x2cf368>
     f2c:	3f13490b 	svccc	0x0013490b
     f30:	000a020c 	andeq	r0, sl, ip, lsl #4
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
				FemurAngle1[LegIndex], &cFemurMin1[LegIndex],
				&cFemurMax1[LegIndex]);
		TibiaAngle1[LegIndex] = CheckServoAngleBounds(s++,
     f34:	00260c00 	eoreq	r0, r6, r0, lsl #24
     f38:	00001349 	andeq	r1, r0, r9, asr #6
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     f3c:	0b000f0d 	bleq	4b78 <__Stack_Size+0x4778>
     f40:	0013490b 	andseq	r4, r3, fp, lsl #18
				TibiaAngle1[LegIndex], &cTibiaMin1[LegIndex],
				&cTibiaMax1[LegIndex]);

	}
#endif
}
     f44:	11010000 	tstne	r1, r0
     f48:	130e2501 	movwne	r2, #58625	; 0xe501
     f4c:	1b0e030b 	blne	381b80 <__Stack_Size+0x381780>
     f50:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     f54:	00061001 	andeq	r1, r6, r1
     f58:	00160200 	andseq	r0, r6, r0, lsl #4
     f5c:	0b3a0e03 	bleq	e84770 <__Stack_Size+0xe84370>
     f60:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f64:	0f030000 	svceq	0x00030000
     f68:	030b0b00 	movweq	r0, #47872	; 0xbb00
     f6c:	0400000e 	streq	r0, [r0], #-14
// SmoothControl (From Zenta) -  This function makes the body
//            rotation and translation much smoother
//--------------------------------------------------------------------
short SmoothControl(short CtrlMoveInp, short CtrlMoveOut, byte CtrlDivider) {

	if (CtrlMoveOut < (CtrlMoveInp - 4))
     f70:	0b0b000f 	bleq	2c0fb4 <__Stack_Size+0x2c0bb4>
     f74:	00001349 	andeq	r1, r0, r9, asr #6
		return CtrlMoveOut + abs((CtrlMoveOut - CtrlMoveInp) / CtrlDivider);
     f78:	27011505 	strcs	r1, [r1, -r5, lsl #10]
     f7c:	0013010c 	andseq	r0, r3, ip, lsl #2
     f80:	00050600 	andeq	r0, r5, r0, lsl #12
     f84:	00001349 	andeq	r1, r0, r9, asr #6
     f88:	0b000f07 	bleq	4bac <__Stack_Size+0x47ac>
     f8c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     f90:	0b0b0024 	bleq	2c1028 <__Stack_Size+0x2c0c28>
	else if (CtrlMoveOut > (CtrlMoveInp + 4))
     f94:	0e030b3e 	vmoveq.16	d3[0], r0
		return CtrlMoveOut - abs((CtrlMoveOut - CtrlMoveInp) / CtrlDivider);
     f98:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
     f9c:	3a080301 	bcc	201ba8 <__Stack_Size+0x2017a8>
     fa0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     fa4:	2013490c 	andscs	r4, r3, ip, lsl #18
     fa8:	0013010b 	andseq	r0, r3, fp, lsl #2
     fac:	00050a00 	andeq	r0, r5, r0, lsl #20
     fb0:	0b3a0803 	bleq	e82fc4 <__Stack_Size+0xe82bc4>

	return CtrlMoveInp;
}
     fb4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
// GetLegsXZLength -
//--------------------------------------------------------------------
word g_wLegsXZLength = 0xffff;
word GetLegsXZLength(void) {
	// Could save away or could do a little math on one leg...
	if (g_wLegsXZLength != 0xffff)
     fb8:	240b0000 	strcs	r0, [fp]
     fbc:	3e0b0b00 	fmacdcc	d0, d11, d0
     fc0:	0008030b 	andeq	r0, r8, fp, lsl #6

//--------------------------------------------------------------------
// GetLegsXZLength -
//--------------------------------------------------------------------
word g_wLegsXZLength = 0xffff;
word GetLegsXZLength(void) {
     fc4:	00050c00 	andeq	r0, r5, r0, lsl #24
	// Could save away or could do a little math on one leg...
	if (g_wLegsXZLength != 0xffff)
		return g_wLegsXZLength;

	return isqrt32((LegPosX[0] * LegPosX[0]) + (LegPosZ[0] * LegPosZ[0]));
     fc8:	0b3a0e03 	bleq	e847dc <__Stack_Size+0xe843dc>
     fcc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     fd0:	340d0000 	strcc	r0, [sp]
     fd4:	3a080300 	bcc	201bdc <__Stack_Size+0x2017dc>
     fd8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fdc:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
}
     fe0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     fe4:	0b3b0b3a 	bleq	ec3cd4 <__Stack_Size+0xec38d4>
     fe8:	00001349 	andeq	r1, r0, r9, asr #6
     fec:	00010b0f 	andeq	r0, r1, pc, lsl #22

#ifndef MAX_XZ_LEG_ADJUST
#define MAX_XZ_LEG_ADJUST   (word)(cCoxaLength[0]+cTibiaLength[0] + cFemurLength[0]/4)
#endif

void AdjustLegPositions(word XZLength1) {
     ff0:	00051000 	andeq	r1, r5, r0
     ff4:	00001331 	andeq	r1, r0, r1, lsr r3
     ff8:	03012e11 	movweq	r2, #7697	; 0x1e11
     ffc:	3b0b3a08 	blcc	2cf824 <__Stack_Size+0x2cf424>
    1000:	200c270b 	andcs	r2, ip, fp, lsl #14
		XZLength1 = MAX_XZ_LEG_ADJUST;
	if (XZLength1 < MIN_XZ_LEG_ADJUST)
		XZLength1 = MIN_XZ_LEG_ADJUST;

	// see if same length as when we came in
	if (XZLength1 == g_wLegsXZLength)
    1004:	0013010b 	andseq	r0, r3, fp, lsl #2
    1008:	012e1200 	teqeq	lr, r0, lsl #4
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		GetSinCos((short) pgm_read_word(&cCoxaAngle1[LegIndex]));

		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
    100c:	0b3a0e03 	bleq	e84820 <__Stack_Size+0xe84420>

	// see if same length as when we came in
	if (XZLength1 == g_wLegsXZLength)
		return;

	g_wLegsXZLength = XZLength1;
    1010:	0c270b3b 	stceq	11, cr0, [r7], #-236

	u8 LegIndex;
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		GetSinCos((short) pgm_read_word(&cCoxaAngle1[LegIndex]));
    1014:	13010b20 	movwne	r0, #6944	; 0x1b20
    1018:	2e130000 	wxorcs	wr0, wr3, wr0

		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
    101c:	3a0e0301 	bcc	381c28 <__Stack_Size+0x381828>
    1020:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1024:	1201110c 	andne	r1, r1, #3	; 0x3
    1028:	01064001 	tsteq	r6, r1
    102c:	14000013 	strne	r0, [r0], #-19
    1030:	08030005 	stmdaeq	r3, {r0, r2}
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
    1034:	0b3b0b3a 	bleq	ec3d24 <__Stack_Size+0xec3924>
    1038:	0a021349 	beq	85d64 <__Stack_Size+0x85964>
    103c:	05150000 	ldreq	r0, [r5]
    1040:	3a0e0300 	bcc	381c48 <__Stack_Size+0x381848>
    1044:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1048:	00060213 	andeq	r0, r6, r3, lsl r2
		return;

	g_wLegsXZLength = XZLength1;

	u8 LegIndex;
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    104c:	00051600 	andeq	r1, r5, r0, lsl #12
		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
	}

	// Make sure we cycle through one gait to have the legs all move into their new locations...
	g_InControlState.ForceGaitStepCnt = g_InControlState.gaitCur.StepsInGait;
    1050:	0b3a0803 	bleq	e83064 <__Stack_Size+0xe82c64>
    1054:	13490b3b 	movtne	r0, #39739	; 0x9b3b
}
    1058:	00000602 	andeq	r0, r0, r2, lsl #12
    105c:	03003417 	movweq	r3, #1047	; 0x417
    1060:	3b0b3a08 	blcc	2cf888 <__Stack_Size+0x2cf488>
    1064:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1068:	1800000a 	stmdane	r0, {r1, r3}
    106c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1070:	0b3b0b3a 	bleq	ec3d60 <__Stack_Size+0xec3960>
    1074:	06021349 	streq	r1, [r2], -r9, asr #6
    1078:	0b190000 	bleq	641080 <__Stack_Size+0x640c80>
		g_InControlState.aCoxaInitAngle1[LegIndex] = (short)pgm_read_word(&cCoxaAngle1[LegIndex]);
#endif
	}
	g_wLegsXZLength = 0xffff;
#endif
}
    107c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
		else if (g_InControlState.aCoxaInitAngle1[LegIndex] < -700)
		g_InControlState.aCoxaInitAngle1[LegIndex] = -700;
	}
	g_wLegsXZLength = 0xffff;
#endif
}
    1080:	1a000001 	bne	108c <__Stack_Size+0xc8c>
//     to be appropriate for the current y location of the body...
//--------------------------------------------------------------------

u8 g_iLegInitIndex = 0x00; // remember which index we are currently using...

void AdjustLegPositionsToBodyHeight() {
    1084:	0c3f012e 	ldfeqs	f0, [pc], #-184
    1088:	0b3a0e03 	bleq	e8489c <__Stack_Size+0xe8449c>
#ifdef CNT_HEX_INITS
	// Lets see which of our units we should use...
	// Note: We will also limit our body height here...
	if (g_InControlState.BodyPos.y
    108c:	0c270b3b 	stceq	11, cr0, [r7], #-236
			> (short) pgm_read_byte(&g_abHexMaxBodyY[CNT_HEX_INITS-1]))
		g_InControlState.BodyPos.y = (short) pgm_read_byte(
    1090:	01120111 	tsteq	r2, r1, lsl r1
				&g_abHexMaxBodyY[CNT_HEX_INITS-1]);

	u8 i;
	word XZLength1 = pgm_read_byte(&g_abHexIntXZ[CNT_HEX_INITS-1]);
	for (i = 0; i < (CNT_HEX_INITS - 1); i++) { // Don't need to look at last entry as we already init to assume this one...
		if (g_InControlState.BodyPos.y
    1094:	13010640 	movwne	r0, #5696	; 0x1640
    1098:	0a1b0000 	beq	6c10a0 <__Stack_Size+0x6c0ca0>
				<= (short) pgm_read_byte(&g_abHexMaxBodyY[i])) {
			XZLength1 = pgm_read_byte(&g_abHexIntXZ[i]);
			break;
		}
	}
	if (i != g_iLegInitIndex) {
    109c:	3a0e0300 	bcc	381ca4 <__Stack_Size+0x3818a4>
				&g_abHexMaxBodyY[CNT_HEX_INITS-1]);

	u8 i;
	word XZLength1 = pgm_read_byte(&g_abHexIntXZ[CNT_HEX_INITS-1]);
	for (i = 0; i < (CNT_HEX_INITS - 1); i++) { // Don't need to look at last entry as we already init to assume this one...
		if (g_InControlState.BodyPos.y
    10a0:	110b3b0b 	tstne	fp, fp, lsl #22
    10a4:	1c000001 	stcne	0, cr0, [r0], {1}
    10a8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
				<= (short) pgm_read_byte(&g_abHexMaxBodyY[i])) {
			XZLength1 = pgm_read_byte(&g_abHexIntXZ[i]);
			break;
		}
	}
	if (i != g_iLegInitIndex) {
    10ac:	01120111 	tsteq	r2, r1, lsl r1
		g_iLegInitIndex = i;  // remember the current index...
		AdjustLegPositions(XZLength1);
    10b0:	0b590b58 	bleq	1643e18 <__Stack_Size+0x1643a18>
	}
#endif // CNT_HEX_INITS
}
    10b4:	00001301 	andeq	r1, r0, r1, lsl #6
    10b8:	3100341d 	tstcc	r0, sp, lsl r4
    10bc:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
}
//--------------------------------------------------------------------
//[CHECK VOLTAGE]
//Reads the input voltage and shuts down the bot when the power drops
byte s_bLVBeepCnt;
boolean CheckVoltage() {
    10c0:	13310034 	teqne	r1, #52	; 0x34
    10c4:	00000602 	andeq	r0, r0, r2, lsl #12
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10c8:	31011d1f 	tstcc	r1, pc, lsl sp

	// BUGBUG:: if voltage is 0 it failed to retrieve don't hang program...
	//    if (!Voltage)
	//      return;

	if (!g_fLowVoltageShutdown) {
    10cc:	58065513 	stmdapl	r6, {r0, r1, r4, r8, sl, ip, lr}
boolean CheckVoltage() {
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10d0:	000b590b 	andeq	r5, fp, fp, lsl #18

	// BUGBUG:: if voltage is 0 it failed to retrieve don't hang program...
	//    if (!Voltage)
	//      return;

	if (!g_fLowVoltageShutdown) {
    10d4:	011d2000 	tsteq	sp, r0
boolean CheckVoltage() {
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10d8:	01111331 	tsteq	r1, r1, lsr r3

	if (!g_fLowVoltageShutdown) {
		/**PrintString("Voltage : ");
		Printu32d(Voltage);
		PrintString("\n");*/
		if ((Voltage < cTurnOffVol) || (Voltage >= 1999)) {
    10dc:	0b580112 	bleq	160152c <__Stack_Size+0x160112c>
    10e0:	00000b59 	andeq	r0, r0, r9, asr fp
    10e4:	31000521 	tstcc	r0, r1, lsr #10


			//Turn off
			g_InControlState.BodyPos.x = 0;
    10e8:	00060213 	andeq	r0, r6, r3, lsl r2
			g_InControlState.TravelLength.x = 0;
			g_InControlState.TravelLength.z = 0;

#ifdef OPT_SINGLELEG
			g_InControlState.TravelLength.y = 0;
			g_InControlState.SelectedLeg = 255;
    10ec:	01012200 	tsteq	r1, r0, lsl #4
    10f0:	13011349 	movwne	r1, #4937	; 0x1349
#endif
			g_fLowVoltageShutdown = 1;
    10f4:	21230000 	teqcs	r3, r0
			s_bLVBeepCnt = 0;    // how many times we beeped...
    10f8:	2f134900 	svccs	0x00134900
		if ((Voltage < cTurnOffVol) || (Voltage >= 1999)) {


			//Turn off
			g_InControlState.BodyPos.x = 0;
			g_InControlState.BodyPos.y = 0;
    10fc:	2400000b 	strcs	r0, [r0], #-11
			g_InControlState.BodyPos.z = 0;
			g_InControlState.BodyRot1.x = 0;
    1100:	0b0b0024 	bleq	2c1198 <__Stack_Size+0x2c0d98>
			g_InControlState.BodyRot1.y = 0;
			g_InControlState.BodyRot1.z = 0;
    1104:	00000b3e 	andeq	r0, r0, lr, lsr fp
			g_InControlState.TravelLength.x = 0;
			g_InControlState.TravelLength.z = 0;
    1108:	3f012e25 	svccc	0x00012e25
#ifdef OPT_SINGLELEG
			g_InControlState.TravelLength.y = 0;
			g_InControlState.SelectedLeg = 255;
#endif
			g_fLowVoltageShutdown = 1;
			s_bLVBeepCnt = 0;    // how many times we beeped...
    110c:	3a0e030c 	bcc	381d44 <__Stack_Size+0x381944>
			g_InControlState.fRobotOn = false;
    1110:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
		}
#ifdef cTurnOnVol
	} else if ((Voltage > cTurnOnVol) && (Voltage < 1999)) {
    1114:	1201110c 	andne	r1, r1, #3	; 0x3
    1118:	010a4001 	tsteq	sl, r1

		g_fLowVoltageShutdown = 0;
    111c:	26000013 	undefined
    1120:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}

#endif
	} else {
		if (s_bLVBeepCnt < 5) {
    1124:	0b3b0b3a 	bleq	ec3e14 <__Stack_Size+0xec3a14>
    1128:	0a021349 	beq	85e54 <__Stack_Size+0x85a54>
			s_bLVBeepCnt++;
    112c:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}

			//MSound( 1, 45, 2000);
			Buzzed(45, 2000);
    1130:	11133101 	tstne	r3, r1, lsl #2
    1134:	40011201 	andmi	r1, r1, r1, lsl #4
    1138:	0013010a 	andseq	r0, r3, sl, lsl #2
		}
		mDelay(2000);
    113c:	00052800 	andeq	r2, r5, r0, lsl #16
    1140:	0a021331 	beq	85e0c <__Stack_Size+0x85a0c>
    1144:	18290000 	stmdane	r9!, {}
	}
#endif

	return g_fLowVoltageShutdown;
}
    1148:	2a000000 	bcs	1150 <__Stack_Size+0xd50>
    114c:	1331001d 	teqne	r1, #29	; 0x1d
    1150:	01120111 	tsteq	r2, r1, lsl r1
    1154:	0b590b58 	bleq	1643ebc <__Stack_Size+0x1643abc>
    1158:	342b0000 	strtcc	r0, [fp]

//==============================================================================
// BackgroundProcess - Allows us to have some background processing for those
//    servo drivers that need us to do things like polling...
//==============================================================================
void BackgroundProcess(void) {
    115c:	3a0e0300 	bcc	381d64 <__Stack_Size+0x381964>
    1160:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (g_fAXSpeedControl)
    1164:	000a0213 	andeq	r0, sl, r3, lsl r2
		return;  // nothing to do in this mode...

	if (ServosEnabled) {
		//DebugToggle(A3);
		BioloidControllerEx_interpolateStep(false); // Do our background stuff...
    1168:	11010000 	tstne	r1, r0
		Battery_Monitor_Alarm();
    116c:	130e2501 	movwne	r2, #58625	; 0xe501
	}
}
    1170:	1b0e030b 	blne	381da4 <__Stack_Size+0x3819a4>
    1174:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
//Function that gets called from the main loop if the robot is not logically
//     on.  Gives us a chance to play some...
//--------------------------------------------------------------------
static u8 g_iIdleServoNum = (u8) - 1;
static u8 g_iIdleLedState = 1;  // what state to we wish to set...
void IdleTime(void) {
    1178:	00061001 	andeq	r1, r6, r1
    117c:	00240200 	eoreq	r0, r4, r0, lsl #4
	// Each time we call this set servos LED on or off...
	g_iIdleServoNum++;
    1180:	0b3e0b0b 	bleq	f83db4 <__Stack_Size+0xf839b4>
	if (g_iIdleServoNum >= NUMSERVOS) {
    1184:	00000e03 	andeq	r0, r0, r3, lsl #28
    1188:	03001603 	movweq	r1, #1539	; 0x603
		g_iIdleServoNum = 0;
    118c:	3b0b3a08 	blcc	2cf9b4 <__Stack_Size+0x2cf5b4>
		g_iIdleLedState = 1 - g_iIdleLedState;
    1190:	0013490b 	andseq	r4, r3, fp, lsl #18
    1194:	00350400 	eorseq	r0, r5, r0, lsl #8
	}
	dxl_write_byte(pgm_read_byte(&cPinTable[g_iIdleServoNum]), AXM_LED,
    1198:	00001349 	andeq	r1, r0, r9, asr #6
    119c:	0b010405 	bleq	421b8 <__Stack_Size+0x41db8>
    11a0:	3b0b3a0b 	blcc	2cf9d4 <__Stack_Size+0x2cf5d4>
    11a4:	0013010b 	andseq	r0, r3, fp, lsl #2
    11a8:	00280600 	eoreq	r0, r8, r0, lsl #12
			g_iIdleLedState);
	//ax12ReadPacket(6);  // get the response...


}
    11ac:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    11b0:	13070000 	movwne	r0, #28672	; 0x7000
    11b4:	3a0b0b01 	bcc	2c3dc0 <__Stack_Size+0x2c39c0>
    11b8:	010b3b0b 	tsteq	fp, fp, lsl #22

//--------------------------------------------------------------------
//[SetRegOnAllServos] Function that is called to set the state of one
//  register in all of the servos, like Torque on...
//--------------------------------------------------------------------
void SetRegOnAllServos(u8 bReg, u8 bVal) {
    11bc:	08000013 	stmdaeq	r0, {r0, r1, r4}
    11c0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    11c4:	0b3b0b3a 	bleq	ec3eb4 <__Stack_Size+0xec3ab4>
	 ax12write(bVal);

  }
  ax12write(0xff - (checksum % 256));
  setRX(0);*/
	 dxl_set_txpacket_id (BROADCAST_ID);
    11c8:	0a381349 	beq	e05ef4 <__Stack_Size+0xe05af4>
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    11cc:	0d090000 	stceq	0, cr0, [r9]
	dxl_set_txpacket_parameter(0,bReg);
    11d0:	3a0e0300 	bcc	381dd8 <__Stack_Size+0x3819d8>
    11d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	dxl_set_txpacket_parameter(1,2);
    11d8:	000a3813 	andeq	r3, sl, r3, lsl r8
    11dc:	00240a00 	eoreq	r0, r4, r0, lsl #20
    11e0:	0b3e0b0b 	bleq	f83e14 <__Stack_Size+0xf83a14>
  int i;
	for (i = 0; i < poseSize; i++) {
		byte id = pgm_read_byte(&cPinTable[i]);
		dxl_set_txpacket_parameter(2 + 3 * i, id);
    11e4:	130b0000 	movwne	r0, #45056	; 0xb000
    11e8:	3a0b0b01 	bcc	2c3df4 <__Stack_Size+0x2c39f4>
    11ec:	01053b0b 	tsteq	r5, fp, lsl #22
    11f0:	0c000013 	stceq	0, cr0, [r0], {19}
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
    11f4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    11f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    11fc:	0a381349 	beq	e05f28 <__Stack_Size+0xe05b28>
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
    1200:	0d0d0000 	stceq	0, cr0, [sp]
    1204:	3a0e0300 	bcc	381e0c <__Stack_Size+0x381a0c>
    1208:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	dxl_set_txpacket_parameter(1,2);
  int i;
	for (i = 0; i < poseSize; i++) {
		byte id = pgm_read_byte(&cPinTable[i]);
		dxl_set_txpacket_parameter(2 + 3 * i, id);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
    120c:	000a3813 	andeq	r3, sl, r3, lsl r8
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
    1210:	00160e00 	andseq	r0, r6, r0, lsl #28
	 dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0,bReg);
	dxl_set_txpacket_parameter(1,2);
  int i;
	for (i = 0; i < poseSize; i++) {
    1214:	0b3a0e03 	bleq	e84a28 <__Stack_Size+0xe84628>
    1218:	1349053b 	movtne	r0, #38203	; 0x953b
    121c:	040f0000 	streq	r0, [pc], #0	; 1224 <__Stack_Size+0xe24>
		dxl_set_txpacket_parameter(2 + 3 * i, id);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
	}

	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
    1220:	0b0e0301 	bleq	381e2c <__Stack_Size+0x381a2c>
    1224:	3b0b3a0b 	blcc	2cfa58 <__Stack_Size+0x2cf658>
    1228:	0013010b 	andseq	r0, r3, fp, lsl #2
#ifdef DEBUG_BIOLOIDEX
	PrintString("DriverAX12 --- SetRegOnAllServos ---\n");
#endif
	dxl_txrx_packet();
    122c:	00161000 	andseq	r1, r6, r0

	u16 CommStatus = dxl_get_result();
    1230:	0b3a0e03 	bleq	e84a44 <__Stack_Size+0xe84644>
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
    1234:	13490b3b 	movtne	r0, #39739	; 0x9b3b
		PrintErrorCode();
    1238:	13110000 	tstne	r1, #0	; 0x0
	else
		PrintCommStatus(CommStatus);
    123c:	0b0e0301 	bleq	381e48 <__Stack_Size+0x381a48>
#endif
}
    1240:	3b0b3a0b 	blcc	2cfa74 <__Stack_Size+0x2cf674>
    1244:	0013010b 	andseq	r0, r3, fp, lsl #2
    1248:	000f1200 	andeq	r1, pc, r0, lsl #4
//--------------------------------------------------------------------
//[MakeSureServosAreOn] Function that is called to handle when you are
//  transistioning from servos all off to being on.  May need to read
//  in the current pose...
//--------------------------------------------------------------------
void MakeSureServosAreOn(void) {
    124c:	13490b0b 	movtne	r0, #39691	; 0x9b0b

	if (ServosEnabled) {

		if (!g_fServosFree)
    1250:	2e130000 	wxorcs	wr0, wr3, wr0
			return;    // we are not free

		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		if (g_fAXSpeedControl) {
    1254:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1258:	3b0b3a0e 	blcc	2cfa98 <__Stack_Size+0x2cf698>

			int i;
			for (i = 0; i < NUMSERVOS; i++) {
				g_awGoalAXPos[i] = dxl_read_word(pgm_read_byte(&cPinTable[i]),
    125c:	110c270b 	tstne	ip, fp, lsl #14
    1260:	40011201 	andmi	r1, r1, r1, lsl #4
    1264:	00130106 	andseq	r0, r3, r6, lsl #2
    1268:	00051400 	andeq	r1, r5, r0, lsl #8
						AXM_PRESENT_POSITION_L);
				mDelay(25);
    126c:	0b3a0803 	bleq	e83280 <__Stack_Size+0xe82e80>
    1270:	13490b3b 	movtne	r0, #39739	; 0x9b3b

		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		if (g_fAXSpeedControl) {

			int i;
			for (i = 0; i < NUMSERVOS; i++) {
    1274:	00000602 	andeq	r0, r0, r2, lsl #12
    1278:	03000515 	movweq	r0, #1301	; 0x515
				g_awGoalAXPos[i] = dxl_read_word(pgm_read_byte(&cPinTable[i]),
						AXM_PRESENT_POSITION_L);
				mDelay(25);
			}
		} else {
			BioloidControllerEx_readPose();
    127c:	3b0b3a0e 	blcc	2cfabc <__Stack_Size+0x2cf6bc>
		}

		SetRegOnAllServos(AXM_TORQUE_ENABLE, 1);  // Use sync write to do it.
    1280:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1284:	16000006 	strne	r0, [r0], -r6

		CommanderInputController_AllowControllerInterrupts(true);
		g_fServosFree = false;
    1288:	0c3f012e 	ldfeqs	f0, [pc], #-184
	}

}
    128c:	0b3a0e03 	bleq	e84aa0 <__Stack_Size+0xe846a0>
    1290:	0c270b3b 	stceq	11, cr0, [r7], #-236
    1294:	01111349 	tsteq	r1, r9, asr #6
    1298:	06400112 	undefined
    129c:	00001301 	andeq	r1, r0, r1, lsl #6

//------------------------------------------------------------------------------------------
//[BeginServoUpdate] Does whatever preperation that is needed to starrt a move of our servos
//------------------------------------------------------------------------------------------
void BeginServoUpdate(void)    // Start the update
		{
    12a0:	11010b17 	tstne	r1, r7, lsl fp

	MakeSureServosAreOn();
    12a4:	00011201 	andeq	r1, r1, r1, lsl #4
	if (ServosEnabled) {

		if (g_fAXSpeedControl) {
    12a8:	00341800 	eorseq	r1, r4, r0, lsl #16
    12ac:	0b3a0e03 	bleq	e84ac0 <__Stack_Size+0xe846c0>

#ifdef USE_AX12_SPEED_CONTROL
			// If we are trying our own Servo control need to save away the new positions...
			byte i;
			for (i = 0; i < NUMSERVOS; i++) {
				g_awCurAXPos[i] = g_awGoalAXPos[i];
    12b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    12b4:	00000602 	andeq	r0, r0, r2, lsl #12
    12b8:	03003419 	movweq	r3, #1049	; 0x419
		if (g_fAXSpeedControl) {

#ifdef USE_AX12_SPEED_CONTROL
			// If we are trying our own Servo control need to save away the new positions...
			byte i;
			for (i = 0; i < NUMSERVOS; i++) {
    12bc:	3b0b3a0e 	blcc	2cfafc <__Stack_Size+0x2cf6fc>
				g_awCurAXPos[i] = g_awGoalAXPos[i];
			}
#endif
		} else
			BioloidControllerEx_interpolateStep(true); // Make sure we call at least once
    12c0:	0013490b 	andseq	r4, r3, fp, lsl #18
    12c4:	01011a00 	tsteq	r1, r0, lsl #20

	}
}
    12c8:	13011349 	movwne	r1, #4937	; 0x1349
    12cc:	211b0000 	tstcs	fp, r0
    12d0:	2f134900 	svccs	0x00134900
    12d4:	1c00000b 	stcne	0, cr0, [r0], {11}
}

//--------------------------------------------------------------------
//[FREE SERVOS] Frees all the servos
//--------------------------------------------------------------------
void FreeServos(void) {
    12d8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    12dc:	0b3b0b3a 	bleq	ec3fcc <__Stack_Size+0xec3bcc>

	if (!g_fServosFree) {
    12e0:	0c3f1349 	ldceq	3, cr1, [pc], #-292
		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		SetRegOnAllServos(AXM_TORQUE_ENABLE, 0);  // do this as one statement...
    12e4:	00000a02 	andeq	r0, r0, r2, lsl #20
    12e8:	01110100 	tsteq	r1, r0, lsl #2
    12ec:	0b130e25 	bleq	4c4b88 <__Stack_Size+0x4c4788>
		byte i;
		for (i = 0; i < NUMSERVOS; i++) {
			Relax(pgm_read_byte(&cPinTable[i]));
    12f0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    12f4:	01120111 	tsteq	r2, r1, lsl r1
    12f8:	00000610 	andeq	r0, r0, r0, lsl r6

	if (!g_fServosFree) {
		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		SetRegOnAllServos(AXM_TORQUE_ENABLE, 0);  // do this as one statement...
		byte i;
		for (i = 0; i < NUMSERVOS; i++) {
    12fc:	0b002402 	bleq	a30c <__Stack_Size+0x9f0c>
			Relax(pgm_read_byte(&cPinTable[i]));
		}
		CommanderInputController_AllowControllerInterrupts(true);
		g_fServosFree = true;
    1300:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
	}
}
    1304:	0300000e 	movweq	r0, #14	; 0xe
    1308:	08030016 	stmdaeq	r3, {r1, r2, r4}
    130c:	0b3b0b3a 	bleq	ec3ffc <__Stack_Size+0xec3bfc>
extern void SetRegOnAllServos(u8 bReg, u8 bVal);

//--------------------------------------------------------------------
//Init
//--------------------------------------------------------------------
void Servo_Init(void) {
    1310:	00001349 	andeq	r1, r0, r9, asr #6
	// First lets get the actual servo positions for all of our servos...
	//pinMode(0, OUTPUT);
	g_fServosFree = true;
    1314:	49003504 	stmdbmi	r0, {r2, r8, sl, ip, sp}

  poseSize = NUMSERVOS;
    1318:	05000013 	streq	r0, [r0, #-19]
    131c:	0b0b0104 	bleq	2c1734 <__Stack_Size+0x2c1334>
  BioloidControllerEx_readPose();
    1320:	0b3b0b3a 	bleq	ec4010 <__Stack_Size+0xec3c10>
#ifdef cVoltagePin
	for (byte i=0; i < 8; i++)
	GetBatteryVoltage();  // init the voltage pin
#endif

	g_fAXSpeedControl = false;
    1324:	00001301 	andeq	r1, r0, r1, lsl #6
    1328:	03002806 	movweq	r2, #2054	; 0x806



	// Added - try to speed things up later if we do a query...
	SetRegOnAllServos(AXM_RETURN_DELAY_TIME, 0); // tell servos to give us back their info as quick as they can...
    132c:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    1330:	00280700 	eoreq	r0, r8, r0, lsl #14

}
    1334:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
    1338:	04080000 	streq	r0, [r8]
    133c:	0b0e0301 	bleq	381f48 <__Stack_Size+0x381b48>
    1340:	3b0b3a0b 	blcc	2cfb74 <__Stack_Size+0x2cf774>

}

void setupPhoenix() {

	g_fShowDebugPrompt = true;
    1344:	0013010b 	andseq	r0, r3, fp, lsl #2
void readSensors(){


}

void setupPhoenix() {
    1348:	00160900 	andseq	r0, r6, r0, lsl #18

	g_fShowDebugPrompt = true;
	g_fDebugOutput = false;
    134c:	0b3a0e03 	bleq	e84b60 <__Stack_Size+0xe84760>
    1350:	13490b3b 	movtne	r0, #39739	; 0x9b3b
	//init BioloidEx
	BioloidControllerEx();
    1354:	240a0000 	strcs	r0, [sl]

	// Init our ServoDriver
	Servo_Init();
    1358:	3e0b0b00 	fmacdcc	d0, d11, d0

	mDelay(10);
    135c:	0b00000b 	bleq	1390 <__Stack_Size+0xf90>

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		LegPosX[LegIndex] = (short) pgm_read_word(&cInitPosX[LegIndex]); //Set start positions for each leg
    1360:	0b0b0113 	bleq	2c17b4 <__Stack_Size+0x2c13b4>
    1364:	053b0b3a 	ldreq	r0, [fp, #-2874]!
		LegPosY[LegIndex] = (short) pgm_read_word(&cInitPosY[LegIndex]);
    1368:	00001301 	andeq	r1, r0, r1, lsl #6
    136c:	03000d0c 	movweq	r0, #3340	; 0xd0c
		LegPosZ[LegIndex] = (short) pgm_read_word(&cInitPosZ[LegIndex]);
    1370:	3b0b3a08 	blcc	2cfb98 <__Stack_Size+0x2cf798>

	mDelay(10);

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		LegPosX[LegIndex] = (short) pgm_read_word(&cInitPosX[LegIndex]); //Set start positions for each leg
    1374:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1378:	0d00000a 	stceq	0, cr0, [r0, #-40]
		LegPosY[LegIndex] = (short) pgm_read_word(&cInitPosY[LegIndex]);
    137c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1380:	053b0b3a 	ldreq	r0, [fp, #-2874]!
		LegPosZ[LegIndex] = (short) pgm_read_word(&cInitPosZ[LegIndex]);
    1384:	0a381349 	beq	e060b0 <__Stack_Size+0xe05cb0>
    1388:	160e0000 	strne	r0, [lr], -r0
    138c:	3a0e0300 	bcc	381f94 <__Stack_Size+0x381b94>
	Servo_Init();

	mDelay(10);

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    1390:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1394:	0f000013 	svceq	0x00000013
    1398:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}

	ResetLegInitAngles();

	//Single leg control. Make sure no leg is selected
#ifdef OPT_SINGLELEG
	g_InControlState.SelectedLeg = 255; // No Leg selected
    139c:	0b3a0b0b 	bleq	e83fd0 <__Stack_Size+0xe83bd0>
    13a0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
	g_InControlState.PrevSelectedLeg = 255;
    13a4:	0d100000 	ldceq	0, cr0, [r0]
#endif
	//Body Positions
	g_InControlState.BodyPos.x = 0;
    13a8:	3a0e0300 	bcc	381fb0 <__Stack_Size+0x381bb0>
	g_InControlState.BodyPos.y = 0;
	g_InControlState.BodyPos.z = 0;
    13ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}

//Body Rotations
	g_InControlState.BodyRot1.x = 0;
	g_InControlState.BodyRot1.y = 0;
    13b0:	000a3813 	andeq	r3, sl, r3, lsl r8
	g_InControlState.BodyRot1.z = 0;
	g_InControlState.BodyRotOffset.x = 0;
    13b4:	000d1100 	andeq	r1, sp, r0, lsl #2
	g_InControlState.BodyRotOffset.y = 0; //Input Y offset value to adjust centerpoint of rotation
	g_InControlState.BodyRotOffset.z = 0;
    13b8:	0b3a0803 	bleq	e833cc <__Stack_Size+0xe82fcc>

	//Gait
	g_InControlState.GaitType = 0;
    13bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
	g_InControlState.BalanceMode = 0;
    13c0:	00000a38 	andeq	r0, r0, r8, lsr sl
	g_InControlState.LegLiftHeight = 50;
	g_InControlState.ForceGaitStepCnt = 0; // added to try to adjust starting positions depending on height...
    13c4:	0b000f12 	bleq	5014 <__Stack_Size+0x4c14>
	g_InControlState.GaitStep = 1;
    13c8:	0013490b 	andseq	r4, r3, fp, lsl #18
}

void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {
    13cc:	012e1300 	teqeq	lr, r0, lsl #6
	g_InControlState.BodyRotOffset.z = 0;

	//Gait
	g_InControlState.GaitType = 0;
	g_InControlState.BalanceMode = 0;
	g_InControlState.LegLiftHeight = 50;
    13d0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    13d4:	0b3b0b3a 	bleq	ec40c4 <__Stack_Size+0xec3cc4>
void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {

		g_InControlState.gaitCur = APG[g_InControlState.GaitType];
    13d8:	13490c27 	movtne	r0, #39975	; 0x9c27
    13dc:	01120111 	tsteq	r2, r1, lsl r1
    13e0:	13010640 	movwne	r0, #5696	; 0x1640
//==============================================================================

// If both PS2 and XBee are defined then we will become secondary to the xbee
void CommanderInputController_Init(void) {

	g_BodyYOffset = 0;
    13e4:	05140000 	ldreq	r0, [r4]
    13e8:	3a0e0300 	bcc	381ff0 <__Stack_Size+0x381bf0>
    13ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	g_BodyYShift = 0;
	//begin(XBEE_BAUD);
	GPSeq = 0;  // init to something...
    13f0:	00060213 	andeq	r0, r6, r3, lsl r2
    13f4:	01011500 	tsteq	r1, r0, lsl #10

	ControlMode = WALKMODE;
    13f8:	13011349 	movwne	r1, #4937	; 0x1349
	HeightSpeedMode = NORM_NORM;
    13fc:	21160000 	tstcs	r6, r0
	//    DoubleHeightOn = false;
	DoubleTravelOn = false;
    1400:	2f134900 	svccs	0x00134900
	bJoystickWalkMode = 0;
    1404:	1700000b 	strne	r0, [r0, -fp]
	GaitSelect();

	CommanderInputController_Init();

	// Servo Driver
	ServoMoveTime = 150;
    1408:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	g_InControlState.fRobotOn = 0;
    140c:	0b3b0b3a 	bleq	ec40fc <__Stack_Size+0xec3cfc>
	g_fLowVoltageShutdown = false;
    1410:	0c3f1349 	ldceq	3, cr1, [pc], #-292

}
    1414:	00000a02 	andeq	r0, r0, r2, lsl #20
    1418:	01110100 	tsteq	r1, r0, lsl #2
    141c:	0b130e25 	bleq	4c4cb8 <__Stack_Size+0x4c48b8>
    1420:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1424:	01120111 	tsteq	r2, r1, lsl r1
    1428:	00000610 	andeq	r0, r0, r0, lsl r6
    142c:	0b002402 	bleq	a43c <__Stack_Size+0xa03c>
    1430:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1434:	0300000e 	movweq	r0, #14	; 0xe
    1438:	08030016 	stmdaeq	r3, {r1, r2, r4}
    143c:	0b3b0b3a 	bleq	ec412c <__Stack_Size+0xec3d2c>
    1440:	00001349 	andeq	r1, r0, r9, asr #6
    1444:	49003504 	stmdbmi	r0, {r2, r8, sl, ip, sp}
    1448:	05000013 	streq	r0, [r0, #-19]
    144c:	0e030104 	adfeqs	f0, f3, f4
    1450:	0b3a0b0b 	bleq	e84084 <__Stack_Size+0xe83c84>
    1454:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1458:	28060000 	stmdacs	r6, {}
    145c:	1c0e0300 	stcne	3, cr0, [lr], {0}
    1460:	0700000d 	streq	r0, [r0, -sp]
    1464:	08030028 	stmdaeq	r3, {r3, r5}
//[CommitServoDriver Updates the positions of the servos - This outputs
//         as much of the command as we can without committing it.  This
//         allows us to once the previous update was completed to quickly
//        get the next command to start
//--------------------------------------------------------------------
void CommitServoDriver(word wMoveTime) {
    1468:	00000d1c 	andeq	r0, r0, ip, lsl sp
    146c:	03001608 	movweq	r1, #1544	; 0x608
    1470:	3b0b3a0e 	blcc	2cfcb0 <__Stack_Size+0x2cf8b0>


	CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    1474:	0013490b 	andseq	r4, r3, fp, lsl #18

      }
      ax12write(0xff - (checksum % 256));
      setRX(0);
*/
  	    dxl_set_txpacket_id (BROADCAST_ID);
    1478:	00240900 	eoreq	r0, r4, r0, lsl #18
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    147c:	0b3e0b0b 	bleq	f840b0 <__Stack_Size+0xf83cb0>
    1480:	130a0000 	movwne	r0, #40960	; 0xa000
		dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
    1484:	3a0b0b01 	bcc	2c4090 <__Stack_Size+0x2c3c90>
    1488:	01053b0b 	tsteq	r5, fp, lsl #22
		dxl_set_txpacket_parameter(1, 2);
    148c:	0b000013 	bleq	14e0 <__Stack_Size+0x10e0>
    1490:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1494:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1498:	0a381349 	beq	e061c4 <__Stack_Size+0xe05dc4>
      int i;
      word wSpeed;
		for (i = 0; i < poseSize; i++) {
			wSpeed = CalculateAX12MoveSpeed(g_awCurAXPos[i], g_awGoalAXPos[i], wMoveTime);    // What order should we store these values?
    149c:	0d0c0000 	stceq	0, cr0, [ip]
    14a0:	3a0e0300 	bcc	3820a8 <__Stack_Size+0x381ca8>
    14a4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    14a8:	000a3813 	andeq	r3, sl, r3, lsl r8
			//dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
			byte id = pgm_read_byte(&cPinTable[i]);
			dxl_set_txpacket_parameter(2 + 3 * i, id);
    14ac:	00160d00 	andseq	r0, r6, r0, lsl #26
    14b0:	0b3a0e03 	bleq	e84cc4 <__Stack_Size+0xe848c4>
    14b4:	1349053b 	movtne	r0, #38203	; 0x953b
    14b8:	130e0000 	movwne	r0, #57344	; 0xe000
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(g_awGoalAXPos[i]));
    14bc:	0b0e0301 	bleq	3820c8 <__Stack_Size+0x381cc8>
    14c0:	3b0b3a0b 	blcc	2cfcf4 <__Stack_Size+0x2cf8f4>
    14c4:	0013010b 	andseq	r0, r3, fp, lsl #2
    14c8:	000d0f00 	andeq	r0, sp, r0, lsl #30
    14cc:	0b3a0e03 	bleq	e84ce0 <__Stack_Size+0xe848e0>
			dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(g_awGoalAXPos[i]));
    14d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    14d4:	00000a38 	andeq	r0, r0, r8, lsr sl
    14d8:	03000d10 	movweq	r0, #3344	; 0xd10
    14dc:	3b0b3a08 	blcc	2cfd04 <__Stack_Size+0x2cf904>
    14e0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    14e4:	1100000a 	tstne	r0, sl
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(wSpeed));
    14e8:	0b0b000f 	bleq	2c152c <__Stack_Size+0x2c112c>
    14ec:	00001349 	andeq	r1, r0, r9, asr #6
    14f0:	3f012e12 	svccc	0x00012e12
		    dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(wSpeed));
    14f4:	3a0e030c 	bcc	38212c <__Stack_Size+0x381d2c>
    14f8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    14fc:	1201110c 	andne	r1, r1, #3	; 0x3
    1500:	01064001 	tsteq	r6, r1
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
		dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
		dxl_set_txpacket_parameter(1, 2);
      int i;
      word wSpeed;
		for (i = 0; i < poseSize; i++) {
    1504:	13000013 	movwne	r0, #19	; 0x13
    1508:	08030005 	stmdaeq	r3, {r0, r2}
    150c:	0b3b0b3a 	bleq	ec41fc <__Stack_Size+0xec3dfc>
    1510:	06021349 	streq	r1, [r2], -r9, asr #6
			dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(g_awGoalAXPos[i]));
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(wSpeed));
		    dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(wSpeed));
		}

		dxl_set_txpacket_length((4 + 1) * poseSize + 4);
    1514:	05140000 	ldreq	r0, [r4]
    1518:	3a0e0300 	bcc	382120 <__Stack_Size+0x381d20>
    151c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
#ifdef DEBUG_BIOLOIDEX
	PrintString("DriverAX12 --- CommitServoDriver ---\n");
#endif
		dxl_txrx_packet();
    1520:	00060213 	andeq	r0, r6, r3, lsl r2

			u16 CommStatus = dxl_get_result();
    1524:	01011500 	tsteq	r1, r0, lsl #10
#ifdef USING_PC_UART
			if (CommStatus == DXL_RXSUCCESS)
    1528:	13011349 	movwne	r1, #4937	; 0x1349
				PrintErrorCode();
    152c:	21160000 	tstcs	r6, r0
			else
				PrintCommStatus(CommStatus);
    1530:	2f134900 	svccs	0x00134900
    1534:	1700000b 	strne	r0, [r0, -fp]
#endif
#endif
		} else {
			BioloidControllerEx_interpolateSetup(wMoveTime);
    1538:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}

	}

	CommanderInputController_AllowControllerInterrupts(true);

}
    153c:	0b3b0b3a 	bleq	ec422c <__Stack_Size+0xec3e2c>
    1540:	0c3f1349 	ldceq	3, cr1, [pc], #-292
    1544:	00000a02 	andeq	r0, r0, r2, lsl #20
    1548:	01110100 	tsteq	r1, r0, lsl #2
    154c:	0b130e25 	bleq	4c4de8 <__Stack_Size+0x4c49e8>
    1550:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
	word wCoxaSDV;        // Coxa value in servo driver units
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    1554:	01120111 	tsteq	r2, r1, lsl r1
    1558:	00000610 	andeq	r0, r0, r0, lsl r6
    155c:	0b002402 	bleq	a56c <__Stack_Size+0xa16c>
    1560:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1564:	0300000e 	movweq	r0, #14	; 0xe


void OutputServoInfoForLeg(byte LegIndex, short sCoxaAngle1, short sFemurAngle1,
		short sTibiaAngle1)

		{
    1568:	08030016 	stmdaeq	r3, {r1, r2, r4}
	word wCoxaSDV;        // Coxa value in servo driver units
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    156c:	0b3b0b3a 	bleq	ec425c <__Stack_Size+0xec3e5c>
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
    1570:	00001349 	andeq	r1, r0, r9, asr #6
    1574:	49003504 	stmdbmi	r0, {r2, r8, sl, ip, sp}
    1578:	05000013 	streq	r0, [r0, #-19]
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    157c:	0e030104 	adfeqs	f0, f3, f4
    1580:	0b3a0b0b 	bleq	e841b4 <__Stack_Size+0xe83db4>
    1584:	13010b3b 	movwne	r0, #6971	; 0x1b3b


void OutputServoInfoForLeg(byte LegIndex, short sCoxaAngle1, short sFemurAngle1,
		short sTibiaAngle1)

		{
    1588:	28060000 	stmdacs	r6, {}
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    158c:	1c0e0300 	stcne	3, cr0, [lr], {0}
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
    1590:	0700000d 	streq	r0, [r0, -sp]
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    1594:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
#ifdef USE_AX12_SPEED_CONTROL
			// Save away the new positions...
			g_awGoalAXPos[FIRSTCOXAPIN + LegIndex] = wCoxaSDV; // What order should we store these values?
			g_awGoalAXPos[FIRSTFEMURPIN + LegIndex] = wFemurSDV;
    1598:	0b3b0b3a 	bleq	ec4288 <__Stack_Size+0xec3e88>

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
#ifdef USE_AX12_SPEED_CONTROL
			// Save away the new positions...
			g_awGoalAXPos[FIRSTCOXAPIN + LegIndex] = wCoxaSDV; // What order should we store these values?
    159c:	00001349 	andeq	r1, r0, r9, asr #6
			g_awGoalAXPos[FIRSTFEMURPIN + LegIndex] = wFemurSDV;
    15a0:	0b002408 	bleq	a5c8 <__Stack_Size+0xa1c8>
			g_awGoalAXPos[FIRSTTIBIAPIN + LegIndex] = wTibiaSDV;
    15a4:	000b3e0b 	andeq	r3, fp, fp, lsl #28
    15a8:	01130900 	tsteq	r3, r0, lsl #18
    15ac:	0b3a0b0b 	bleq	e841e0 <__Stack_Size+0xe83de0>

#endif
		} else {
			BioloidControllerEx_setNextPose(
    15b0:	1301053b 	movwne	r0, #5435	; 0x153b
    15b4:	0d0a0000 	stceq	0, cr0, [sl]
					pgm_read_byte(&cPinTable[FIRSTCOXAPIN + LegIndex]),
					wCoxaSDV);
			BioloidControllerEx_setNextPose(
    15b8:	3a080300 	bcc	2021c0 <__Stack_Size+0x201dc0>
    15bc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    15c0:	000a3813 	andeq	r3, sl, r3, lsl r8
					pgm_read_byte(&cPinTable[FIRSTFEMURPIN + LegIndex]),
					wFemurSDV);
			BioloidControllerEx_setNextPose(
    15c4:	000d0b00 	andeq	r0, sp, r0, lsl #22
    15c8:	0b3a0e03 	bleq	e84ddc <__Stack_Size+0xe849dc>
					wTibiaSDV);

		}
	}
	CommanderInputController_AllowControllerInterrupts(true); // Ok for hserial again...
}
    15cc:	1349053b 	movtne	r0, #38203	; 0x953b
    15d0:	00000a38 	andeq	r0, r0, r8, lsr sl
    15d4:	3f012e0c 	svccc	0x00012e0c
    15d8:	3a0e030c 	bcc	382210 <__Stack_Size+0x381e10>
    15dc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]

void StartUpdateServos() {
    15e0:	1201110c 	andne	r1, r1, #3	; 0x3
	byte LegIndex;

	// First call off to the init...
	BeginServoUpdate();    // Start the update
    15e4:	01064001 	tsteq	r6, r1
    15e8:	0d000013 	stceq	0, cr0, [r0, #-76]
    15ec:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}

	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		OutputServoInfoForLeg(LegIndex,
    15f0:	0b3b0b3a 	bleq	ec42e0 <__Stack_Size+0xec3ee0>
    15f4:	06021349 	streq	r1, [r2], -r9, asr #6
    15f8:	340e0000 	strcc	r0, [lr]
    15fc:	3a0e0300 	bcc	382204 <__Stack_Size+0x381e04>
    1600:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1604:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1608:	0000000c 	andeq	r0, r0, ip
    160c:	25011101 	strcs	r1, [r1, #-257]
    1610:	030b130e 	movweq	r1, #45838	; 0xb30e
    1614:	110e1b0e 	tstne	lr, lr, lsl #22
    1618:	10011201 	andne	r1, r1, r1, lsl #4
    161c:	02000006 	andeq	r0, r0, #6	; 0x6
    1620:	0b0b0024 	bleq	2c16b8 <__Stack_Size+0x2c12b8>
    1624:	0e030b3e 	vmoveq.16	d3[0], r0
    1628:	16030000 	strne	r0, [r3], -r0
    162c:	3a080300 	bcc	202234 <__Stack_Size+0x201e34>
    1630:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1634:	04000013 	streq	r0, [r0], #-19
    1638:	0b0b0024 	bleq	2c16d0 <__Stack_Size+0x2c12d0>
    163c:	00000b3e 	andeq	r0, r0, lr, lsr fp
    1640:	03010405 	movweq	r0, #5125	; 0x1405
	byte LegIndex;

	// First call off to the init...
	BeginServoUpdate();    // Start the update

	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    1644:	3a0b0b0e 	bcc	2c4284 <__Stack_Size+0x2c3e84>
				cTibiaInv[LegIndex] ?
						-TibiaAngle1[LegIndex] : TibiaAngle1[LegIndex]);

	}

}
    1648:	010b3b0b 	tsteq	fp, fp, lsl #22
    164c:	06000013 	undefined
    1650:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    1654:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1658:	03002807 	movweq	r2, #2055	; 0x807
    165c:	000d1c08 	andeq	r1, sp, r8, lsl #24
    1660:	012e0800 	teqeq	lr, r0, lsl #16
#else
word g_wLastVoltage = 0xffff;    // save the last voltage we retrieved...
byte g_bLegVoltage = 0;		// what leg did we last check?
unsigned long g_ulTimeLastBatteryVoltage;
#define VOLTAGE_REPEAT_MAX  3
word GetBatteryVoltage(void) {
    1664:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	if (interpolating && (g_wLastVoltage != 0xffff)
    1668:	0b3b0b3a 	bleq	ec4358 <__Stack_Size+0xec3f58>
    166c:	01110c27 	tsteq	r1, r7, lsr #24
    1670:	0a400112 	beq	1001ac0 <__Stack_Size+0x10016c0>
    1674:	00001301 	andeq	r1, r0, r1, lsl #6
    1678:	03000509 	movweq	r0, #1289	; 0x509
    167c:	3b0b3a0e 	blcc	2cfebc <__Stack_Size+0x2cfabc>
    1680:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1684:	0a00000a 	beq	16b4 <__Stack_Size+0x12b4>
			&& ((getMillis() - g_ulTimeLastBatteryVoltage)
					< VOLTAGE_MAX_TIME_BETWEEN_CALLS))
		return g_wLastVoltage;
    1688:	0c3f012e 	ldfeqs	f0, [pc], #-184

	register u8 bLoopCnt = VOLTAGE_REPEAT_MAX;
	do {
		register word wVoltage = dxl_read_byte(1, AXM_PRESENT_VOLTAGE);
    168c:	0b3a0e03 	bleq	e84ea0 <__Stack_Size+0xe84aa0>
    1690:	0c270b3b 	stceq	11, cr0, [r7], #-236
    1694:	01120111 	tsteq	r2, r1, lsl r1
		if (wVoltage != 0xffff) {
			g_ulTimeLastBatteryVoltage = getMillis();
    1698:	13010640 	movwne	r0, #5696	; 0x1640
			g_wLastVoltage = wVoltage * 10;
    169c:	050b0000 	streq	r0, [fp]

	register u8 bLoopCnt = VOLTAGE_REPEAT_MAX;
	do {
		register word wVoltage = dxl_read_byte(1, AXM_PRESENT_VOLTAGE);
		if (wVoltage != 0xffff) {
			g_ulTimeLastBatteryVoltage = getMillis();
    16a0:	3a0e0300 	bcc	3822a8 <__Stack_Size+0x381ea8>
			g_wLastVoltage = wVoltage * 10;
    16a4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		}
	} while (--bLoopCnt);

	return 0;

}
    16a8:	00060213 	andeq	r0, r6, r3, lsl r2
    16ac:	002e0c00 	eoreq	r0, lr, r0, lsl #24
    16b0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    16b4:	0b3b0b3a 	bleq	ec43a4 <__Stack_Size+0xec3fa4>
// ReadMsgs
//==============================================================================

/* process messages coming from Commander
 *  format = 0xFF RIGHT_H RIGHT_V LEFT_H LEFT_V BUTTONS EXT CHECKSUM */
int Commander_ReadMsgs() {
    16b8:	13490c27 	movtne	r0, #39975	; 0x9c27
	 }
	 #endif
	 */
	//while (CheckZBNewArrive() > 0) {
	while (1) {
		if (zgb_rx_check_arduino() == 1) {
    16bc:	01120111 	tsteq	r2, r1, lsl r1
    16c0:	00000a40 	andeq	r0, r0, r0, asr #20

			leftV = (signed char) (zgb_rx_data_right_V_());
    16c4:	3f002e0d 	svccc	0x00002e0d
    16c8:	3a0e030c 	bcc	382300 <__Stack_Size+0x381f00>
			leftH = (signed char) (zgb_rx_data_right_H_());
    16cc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    16d0:	1201110c 	andne	r1, r1, #3	; 0x3
			rightV = (signed char) (zgb_rx_data_left_V_());
    16d4:	00064001 	andeq	r4, r6, r1
    16d8:	00340e00 	eorseq	r0, r4, r0, lsl #28
			rightH = (signed char) (zgb_rx_data_left_H_());
    16dc:	0b3a0e03 	bleq	e84ef0 <__Stack_Size+0xe84af0>
    16e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
			buttons = zgb_rx_data_buttons();
    16e4:	0a020c3f 	beq	847e8 <__Stack_Size+0x843e8>
    16e8:	350f0000 	strcc	r0, [pc, #0]	; 16f0 <__Stack_Size+0x12f0>
			ext = zgb_rx_data_extra();
    16ec:	00134900 	andseq	r4, r3, r0, lsl #18
    16f0:	11010000 	tstne	r1, r0

	}

	return 0;

}
    16f4:	130e2501 	movwne	r2, #58625	; 0xe501
    16f8:	1b0e030b 	blne	38232c <__Stack_Size+0x381f2c>
    16fc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    1700:	00061001 	andeq	r1, r6, r1
    1704:	00240200 	eoreq	r0, r4, r0, lsl #4
    1708:	0b3e0b0b 	bleq	f8433c <__Stack_Size+0xf83f3c>
    170c:	00000e03 	andeq	r0, r0, r3, lsl #28
    1710:	03001603 	movweq	r1, #1539	; 0x603

//==============================================================================
// This is The main code to input function to read inputs from the Commander and then
//process any commands.
//==============================================================================
void CommanderInputController_ControlInput(void) {
    1714:	3b0b3a08 	blcc	2cff3c <__Stack_Size+0x2cfb3c>

	// See if we have a new command available...
	if (Commander_ReadMsgs() > 0) {
    1718:	0013490b 	andseq	r4, r3, fp, lsl #18
    171c:	00350400 	eorseq	r0, r5, r0, lsl #8
    1720:	00001349 	andeq	r1, r0, r9, asr #6
    1724:	0b010405 	bleq	42740 <__Stack_Size+0x42340>
		// If we receive a valid message than turn robot on...
		boolean fAdjustLegPositions = false;
		short sLegInitXZAdjust = 0;
		short sLegInitAngleAdjust = 0;

		if (!g_InControlState.fRobotOn) {
    1728:	3b0b3a0b 	blcc	2cff5c <__Stack_Size+0x2cfb5c>
    172c:	0013010b 	andseq	r0, r3, fp, lsl #2
			g_InControlState.fRobotOn = true;
    1730:	00280600 	eoreq	r0, r8, r0, lsl #12
    1734:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
		}

		// [SWITCH MODES]

		// Cycle through modes...
		if ((buttons & BUT_LT) && !(buttonsPrev & BUT_LT)) {
    1738:	28070000 	stmdacs	r7, {}
    173c:	1c080300 	stcne	3, cr0, [r8], {0}
    1740:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    1744:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1748:	0b3b0b3a 	bleq	ec4438 <__Stack_Size+0xec4038>
    174c:	00001349 	andeq	r1, r0, r9, asr #6

			if (++ControlMode >= MODECNT) {
    1750:	0b011309 	bleq	4637c <__Stack_Size+0x45f7c>
    1754:	3b0b3a0b 	blcc	2cff88 <__Stack_Size+0x2cfb88>
    1758:	0013010b 	andseq	r0, r3, fp, lsl #2
    175c:	000d0a00 	andeq	r0, sp, r0, lsl #20
				ControlMode = WALKMODE;    // cycled back around...
				Buzzed(50, 2000);
    1760:	0b3a0803 	bleq	e83774 <__Stack_Size+0xe83374>
    1764:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1768:	00000a38 	andeq	r0, r0, r8, lsr sl
				Buzzed(50, 3000);
    176c:	03000d0b 	movweq	r0, #3339	; 0xd0b
    1770:	3b0b3a0e 	blcc	2cffb0 <__Stack_Size+0x2cfbb0>

			} else {
				Buzzed(50, 2000);
    1774:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1778:	0c00000a 	stceq	0, cr0, [r0], {10}
    177c:	0b0b0024 	bleq	2c1814 <__Stack_Size+0x2c1414>
			}
			if (ControlMode != SINGLELEGMODE)
    1780:	00000b3e 	andeq	r0, r0, lr, lsr fp
    1784:	0b01130d 	bleq	463c0 <__Stack_Size+0x45fc0>
				g_InControlState.SelectedLeg = 255;
    1788:	3b0b3a0b 	blcc	2cffbc <__Stack_Size+0x2cfbbc>
    178c:	00130105 	andseq	r0, r3, r5, lsl #2
    1790:	000d0e00 	andeq	r0, sp, r0, lsl #28

		}

		//[Common functions]
		//Switch Balance mode on/off
		if ((buttons & BUT_L4) && !(buttonsPrev & BUT_L4)) {
    1794:	0b3a0803 	bleq	e837a8 <__Stack_Size+0xe833a8>
    1798:	1349053b 	movtne	r0, #38203	; 0x953b
    179c:	00000a38 	andeq	r0, r0, r8, lsr sl
    17a0:	03000d0f 	movweq	r0, #3343	; 0xd0f
    17a4:	3b0b3a0e 	blcc	2cffe4 <__Stack_Size+0x2cfbe4>
    17a8:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}

			g_InControlState.BalanceMode = !g_InControlState.BalanceMode;
    17ac:	1000000a 	andne	r0, r0, sl
    17b0:	0c3f012e 	ldfeqs	f0, [pc], #-184
    17b4:	0b3a0e03 	bleq	e84fc8 <__Stack_Size+0xe84bc8>
    17b8:	0111053b 	tsteq	r1, fp, lsr r5
    17bc:	06400112 	undefined
			if (g_InControlState.BalanceMode) {
    17c0:	00001301 	andeq	r1, r0, r1, lsl #6
				Buzzed(250, 1500);
    17c4:	03003411 	movweq	r3, #1041	; 0x411
    17c8:	3b0b3a0e 	blcc	2d0008 <__Stack_Size+0x2cfc08>
			} else {
				Buzzed(100, 2000);
    17cc:	00134905 	andseq	r4, r3, r5, lsl #18
    17d0:	002e1200 	eoreq	r1, lr, r0, lsl #4
				Buzzed(50, 4000);
    17d4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    17d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    17dc:	01110c27 	tsteq	r1, r7, lsr #24
			}
		}

		//Stand up, sit down
		if ((buttons & BUT_L5) && !(buttonsPrev & BUT_L5)) {
    17e0:	06400112 	undefined
    17e4:	2e130000 	wxorcs	wr0, wr3, wr0
    17e8:	030c3f01 	movweq	r3, #52993	; 0xcf01
    17ec:	3b0b3a0e 	blcc	2d002c <__Stack_Size+0x2cfc2c>
    17f0:	110c270b 	tstne	ip, fp, lsl #14
    17f4:	40011201 	andmi	r1, r1, r1, lsl #4
			if (g_BodyYOffset > 0)
    17f8:	00130106 	andseq	r0, r3, r6, lsl #2
    17fc:	00341400 	eorseq	r1, r4, r0, lsl #8
				g_BodyYOffset = 0;
    1800:	0b3a0e03 	bleq	e85014 <__Stack_Size+0xe84c14>
    1804:	13490b3b 	movtne	r0, #39739	; 0x9b3b
			else
				g_BodyYOffset = 35;
			fAdjustLegPositions = true;
			g_fDynamicLegXZLength = false;
    1808:	00000a02 	andeq	r0, r0, r2, lsl #20
		//Stand up, sit down
		if ((buttons & BUT_L5) && !(buttonsPrev & BUT_L5)) {
			if (g_BodyYOffset > 0)
				g_BodyYOffset = 0;
			else
				g_BodyYOffset = 35;
    180c:	03003415 	movweq	r3, #1045	; 0x415
			fAdjustLegPositions = true;
			g_fDynamicLegXZLength = false;
    1810:	3b0b3a0e 	blcc	2d0050 <__Stack_Size+0x2cfc50>
    1814:	0013490b 	andseq	r4, r3, fp, lsl #18

		// We will use L6 with the Right joystick to control both body offset as well as Speed...
		// We move each pass through this by a percentage of how far we are from center in each direction
		// We get feedback with height by seeing the robot move up and down.  For Speed, I put in sounds
		// which give an idea, but only for those whoes robot has a speaker
		int lx = leftH;
    1818:	002e1600 	eoreq	r1, lr, r0, lsl #12
		int ly = leftV;
		if (buttons & BUT_L6) {
    181c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}

		// We will use L6 with the Right joystick to control both body offset as well as Speed...
		// We move each pass through this by a percentage of how far we are from center in each direction
		// We get feedback with height by seeing the robot move up and down.  For Speed, I put in sounds
		// which give an idea, but only for those whoes robot has a speaker
		int lx = leftH;
    1820:	0b3b0b3a 	bleq	ec4510 <__Stack_Size+0xec4110>
    1824:	01120111 	tsteq	r2, r1, lsl r1
		int ly = leftV;
    1828:	00000640 	andeq	r0, r0, r0, asr #12
    182c:	49010117 	stmdbmi	r1, {r0, r1, r2, r4, r8}
		if (buttons & BUT_L6) {
    1830:	00130113 	andseq	r0, r3, r3, lsl r1
    1834:	00211800 	eoreq	r1, r1, r0, lsl #16
			// raise or lower the robot on the joystick up /down
			// Maybe should have Min/Max
			int delta = rightV / 25;
    1838:	052f1349 	streq	r1, [pc, #-841]!	; 14f7 <__Stack_Size+0x10f7>
    183c:	34190000 	ldrcc	r0, [r9]
    1840:	3a0e0300 	bcc	382448 <__Stack_Size+0x382048>
    1844:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1848:	000b1c13 	andeq	r1, fp, r3, lsl ip
    184c:	00211a00 	eoreq	r1, r1, r0, lsl #20
			if (delta) {
    1850:	0b2f1349 	bleq	bc657c <__Stack_Size+0xbc617c>
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
    1854:	341b0000 	ldrcc	r0, [fp]
    1858:	3a0e0300 	bcc	382460 <__Stack_Size+0x382060>
    185c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1860:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1864:	0000000c 	andeq	r0, r0, ip
    1868:	25011101 	strcs	r1, [r1, #-257]
    186c:	030b130e 	movweq	r1, #45838	; 0xb30e
    1870:	110e1b0e 	tstne	lr, lr, lsl #22
    1874:	10011201 	andne	r1, r1, r1, lsl #4
			sLegInitAngleAdjust = ly / 8;
			lx = 0;
			ly = 0;

			// Likewise for Speed control
			delta = rightH / 16;   //
    1878:	02000006 	andeq	r0, r0, #6	; 0x6
    187c:	0b0b0024 	bleq	2c1914 <__Stack_Size+0x2c1514>
    1880:	0e030b3e 	vmoveq.16	d3[0], r0
    1884:	16030000 	strne	r0, [r3], -r0
    1888:	3a080300 	bcc	202490 <__Stack_Size+0x202090>
			if ((delta < 0) && g_InControlState.SpeedControl) {
    188c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1890:	04000013 	streq	r0, [r0], #-19
    1894:	13490035 	movtne	r0, #36917	; 0x9035
				if ((word)(-delta) < g_InControlState.SpeedControl)
    1898:	04050000 	streq	r0, [r5]
					g_InControlState.SpeedControl += delta;
    189c:	3a0b0b01 	bcc	2c44a8 <__Stack_Size+0x2c40a8>
				else
					g_InControlState.SpeedControl = 0;
    18a0:	010b3b0b 	tsteq	fp, fp, lsl #22
    18a4:	06000013 	undefined

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}
			if ((delta > 0) && (g_InControlState.SpeedControl < 2000)) {
    18a8:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    18ac:	00000d1c 	andeq	r0, r0, ip, lsl sp
    18b0:	03002807 	movweq	r2, #2055	; 0x807
				g_InControlState.SpeedControl += delta;
				if (g_InControlState.SpeedControl > 2000)
    18b4:	000d1c08 	andeq	r1, sp, r8, lsl #24
					g_InControlState.SpeedControl = 0;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}
			if ((delta > 0) && (g_InControlState.SpeedControl < 2000)) {
				g_InControlState.SpeedControl += delta;
    18b8:	00240800 	eoreq	r0, r4, r0, lsl #16
				if (g_InControlState.SpeedControl > 2000)
					g_InControlState.SpeedControl = 2000;
    18bc:	0b3e0b0b 	bleq	f844f0 <__Stack_Size+0xf840f0>
    18c0:	13090000 	movwne	r0, #36864	; 0x9000

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
    18c4:	3a0b0b01 	bcc	2c44d0 <__Stack_Size+0x2c40d0>
    18c8:	01053b0b 	tsteq	r5, fp, lsl #22
    18cc:	0a000013 	beq	1920 <__Stack_Size+0x1520>
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
				fAdjustLegPositions = true;
			}

			// Also use right Horizontal to manually adjust the initial leg positions.
			sLegInitXZAdjust = lx / 10;        // play with this.
    18d0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    18d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    18d8:	0a381349 	beq	e06604 <__Stack_Size+0xe06204>
    18dc:	0d0b0000 	stceq	0, cr0, [fp]
			sLegInitAngleAdjust = ly / 8;
    18e0:	3a0e0300 	bcc	3824e8 <__Stack_Size+0x3820e8>
    18e4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    18e8:	000a3813 	andeq	r3, sl, r3, lsl r8
    18ec:	01130c00 	tsteq	r3, r0, lsl #24
					g_InControlState.SpeedControl = 2000;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}

			rightH = 0; // don't walk when adjusting the speed here...
    18f0:	0b3a0b0b 	bleq	e84524 <__Stack_Size+0xe84124>
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
				fAdjustLegPositions = true;
			}

			// Also use right Horizontal to manually adjust the initial leg positions.
			sLegInitXZAdjust = lx / 10;        // play with this.
    18f4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
					g_InControlState.SpeedControl = 2000;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}

			rightH = 0; // don't walk when adjusting the speed here...
    18f8:	0d0d0000 	stceq	0, cr0, [sp]
		}

		//[Walk functions]
		if (ControlMode == WALKMODE) {
    18fc:	3a0e0300 	bcc	382504 <__Stack_Size+0x382104>
    1900:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1904:	000a3813 	andeq	r3, sl, r3, lsl r8

			//Switch gates
			if (((buttons & BUT_R1) && !(buttonsPrev & BUT_R1))
    1908:	00160e00 	andseq	r0, r6, r0, lsl #28
    190c:	0b3a0e03 	bleq	e85120 <__Stack_Size+0xe84d20>
    1910:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1914:	040f0000 	streq	r0, [pc], #0	; 191c <__Stack_Size+0x151c>
    1918:	0b0e0301 	bleq	382524 <__Stack_Size+0x382124>
    191c:	3b0b3a0b 	blcc	2d0150 <__Stack_Size+0x2cfd50>
    1920:	0013010b 	andseq	r0, r3, fp, lsl #2
    1924:	002e1000 	eoreq	r1, lr, r0
    1928:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    192c:	0b3b0b3a 	bleq	ec461c <__Stack_Size+0xec421c>
    1930:	0b200c27 	bleq	8049d4 <__Stack_Size+0x8045d4>
    1934:	2e110000 	wxorcs	wr0, wr1, wr0
    1938:	030c3f00 	movweq	r3, #52992	; 0xcf00
    193c:	3b0b3a0e 	blcc	2d017c <__Stack_Size+0x2cfd7c>
    1940:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1944:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
    1948:	000a4001 	andeq	r4, sl, r1
					&& abs(g_InControlState.TravelLength.x) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
    194c:	012e1200 	teqeq	lr, r0, lsl #4
    1950:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
    1954:	0b3b0b3a 	bleq	ec4644 <__Stack_Size+0xec4244>
					&& abs(g_InControlState.TravelLength.x) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
    1958:	13490c27 	movtne	r0, #39975	; 0x9c27
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
					Buzzed(50, 2000);
    195c:	01120111 	tsteq	r2, r1, lsl r1
    1960:	13010a40 	movwne	r0, #6720	; 0x1a40
    1964:	34130000 	ldrcc	r0, [r3]
				} else {
					Buzzed(50, 2000);
    1968:	3a0e0300 	bcc	382570 <__Stack_Size+0x382170>
    196c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1970:	00060213 	andeq	r0, r6, r3, lsl r2
					Buzzed(50, 2250);
    1974:	002e1400 	eoreq	r1, lr, r0, lsl #8
    1978:	01111331 	tsteq	r1, r1, lsr r3
					g_InControlState.GaitType = 0;
    197c:	0a400112 	beq	1001dcc <__Stack_Size+0x10019cc>
    1980:	1d150000 	ldcne	0, cr0, [r5]
}

void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {
    1984:	11133100 	tstne	r3, r0, lsl #2
    1988:	58011201 	stmdapl	r1, {r0, r9, ip}
    198c:	000b590b 	andeq	r5, fp, fp, lsl #18

		g_InControlState.gaitCur = APG[g_InControlState.GaitType];
    1990:	012e1600 	teqeq	lr, r0, lsl #12
    1994:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1998:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    199c:	13490c27 	movtne	r0, #39975	; 0x9c27
    19a0:	01120111 	tsteq	r2, r1, lsl r1
				}
				GaitSelect();
			}

			//Double leg lift height
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    19a4:	13010640 	movwne	r0, #5696	; 0x1640
    19a8:	05170000 	ldreq	r0, [r7]
    19ac:	3a0e0300 	bcc	3825b4 <__Stack_Size+0x3821b4>
    19b0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    19b4:	00060213 	andeq	r0, r6, r3, lsl r2
				Buzzed(50, 2000);
    19b8:	00341800 	eorseq	r1, r4, r0, lsl #16
    19bc:	0b3a0803 	bleq	e839d0 <__Stack_Size+0xe835d0>
				HeightSpeedMode = (HeightSpeedMode + 1) & 0x3; // wrap around mode
    19c0:	1349053b 	movtne	r0, #38203	; 0x953b
    19c4:	00000602 	andeq	r0, r0, r2, lsl #12
    19c8:	0b000f19 	bleq	5634 <__Stack_Size+0x5234>
    19cc:	0013490b 	andseq	r4, r3, fp, lsl #18
				DoubleTravelOn = HeightSpeedMode & 0x1;
    19d0:	012e1a00 	teqeq	lr, r0, lsl #20
    19d4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
				if (HeightSpeedMode & 0x2)
    19d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    19dc:	01110c27 	tsteq	r1, r7, lsr #24
					g_InControlState.LegLiftHeight = 80;
    19e0:	0a400112 	beq	1001e30 <__Stack_Size+0x1001a30>
    19e4:	00001301 	andeq	r1, r0, r1, lsl #6
				else
					g_InControlState.LegLiftHeight = 50;
			}

			// Switch between Walk method 1 && Walk method 2
			if ((buttons & BUT_R2) && !(buttonsPrev & BUT_R2)) {
    19e8:	0300341b 	movweq	r3, #1051	; 0x41b
    19ec:	3b0b3a08 	blcc	2d0214 <__Stack_Size+0x2cfe14>
    19f0:	00134905 	andseq	r4, r3, r5, lsl #18
    19f4:	002e1c00 	eoreq	r1, lr, r0, lsl #24
    19f8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}

				if ((++bJoystickWalkMode) > 1)
    19fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1a00:	13490c27 	movtne	r0, #39975	; 0x9c27
    1a04:	01120111 	tsteq	r2, r1, lsl r1

					bJoystickWalkMode = 0;
				Buzzed(50, 2000 + bJoystickWalkMode * 250);
    1a08:	00000a40 	andeq	r0, r0, r0, asr #20
			// Switch between Walk method 1 && Walk method 2
			if ((buttons & BUT_R2) && !(buttonsPrev & BUT_R2)) {

				if ((++bJoystickWalkMode) > 1)

					bJoystickWalkMode = 0;
    1a0c:	3f012e1d 	svccc	0x00012e1d
				Buzzed(50, 2000 + bJoystickWalkMode * 250);
    1a10:	3a0e030c 	bcc	382648 <__Stack_Size+0x382248>
    1a14:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1a18:	1201110c 	andne	r1, r1, #3	; 0x3
    1a1c:	01064001 	tsteq	r6, r1
			}

			//Walking
			switch (bJoystickWalkMode) {
    1a20:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    1a24:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1a28:	053b0b3a 	ldreq	r0, [fp, #-2874]!
			case 0:
				g_InControlState.TravelLength.x = -lx;
    1a2c:	0a021349 	beq	86758 <__Stack_Size+0x86358>
    1a30:	2e1f0000 	wxorcs	wr0, wr15, wr0
    1a34:	030c3f00 	movweq	r3, #52992	; 0xcf00
				g_InControlState.TravelLength.z = -ly;
    1a38:	3b0b3a0e 	blcc	2d0278 <__Stack_Size+0x2cfe78>
				g_InControlState.TravelLength.y = -(rightH) / 4; //Right Stick Left/Right
				break;
			case 1:
				g_InControlState.TravelLength.z = (rightV); //Right Stick Up/Down
    1a3c:	110c2705 	tstne	ip, r5, lsl #14
    1a40:	40011201 	andmi	r1, r1, r1, lsl #4
    1a44:	20000006 	andcs	r0, r0, r6
				g_InControlState.TravelLength.y = -(rightH) / 4; //Right Stick Left/Right
    1a48:	0c3f002e 	ldceq	0, cr0, [pc], #-184
    1a4c:	0b3a0e03 	bleq	e85260 <__Stack_Size+0xe84e60>
    1a50:	0c270b3b 	stceq	11, cr0, [r7], #-236
    1a54:	01120111 	tsteq	r2, r1, lsl r1
    1a58:	00000640 	andeq	r0, r0, r0, asr #12
    1a5c:	3f012e21 	svccc	0x00012e21
				break;

			}

			if (!DoubleTravelOn) {  //(Double travel length)
    1a60:	3a0e030c 	bcc	382698 <__Stack_Size+0x382298>
				g_InControlState.TravelLength.x =
    1a64:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1a68:	1113490c 	tstne	r3, ip, lsl #18
    1a6c:	40011201 	andmi	r1, r1, r1, lsl #4
						g_InControlState.TravelLength.x / 2;
				g_InControlState.TravelLength.z =
    1a70:	00130106 	andseq	r0, r3, r6, lsl #2
    1a74:	00052200 	andeq	r2, r5, r0, lsl #4
    1a78:	0b3a0e03 	bleq	e8528c <__Stack_Size+0xe84e8c>
			}

		}

		//[Translate functions]
		g_BodyYShift = 0;
    1a7c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1a80:	00000602 	andeq	r0, r0, r2, lsl #12
		if (ControlMode == TRANSLATEMODE) {
    1a84:	03003423 	movweq	r3, #1059	; 0x423
    1a88:	3b0b3a0e 	blcc	2d02c8 <__Stack_Size+0x2cfec8>

		      g_InControlState.BodyPos.x =  SmoothControl(((lx)*2/3), g_InControlState.BodyPos.x, SmDiv);
    1a8c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1a90:	2400000a 	strcs	r0, [r0], #-10
    1a94:	0c3f012e 	ldfeqs	f0, [pc], #-184
    1a98:	0b3a0e03 	bleq	e852ac <__Stack_Size+0xe84eac>
    1a9c:	0c270b3b 	stceq	11, cr0, [r7], #-236
    1aa0:	01120111 	tsteq	r2, r1, lsl r1
    1aa4:	13010640 	movwne	r0, #5696	; 0x1640
    1aa8:	01250000 	teqeq	r5, r0
		      g_InControlState.BodyPos.z =  SmoothControl(((ly)*2/3), g_InControlState.BodyPos.z, SmDiv);
    1aac:	01134901 	tsteq	r3, r1, lsl #18
    1ab0:	26000013 	undefined
    1ab4:	13490021 	movtne	r0, #36897	; 0x9021
    1ab8:	0000052f 	andeq	r0, r0, pc, lsr #10
    1abc:	49002127 	stmdbmi	r0, {r0, r1, r2, r5, r8, sp}
		      g_InControlState.BodyRot1.y = SmoothControl(((rightH)*2), g_InControlState.BodyRot1.y, SmDiv);
    1ac0:	000b2f13 	andeq	r2, fp, r3, lsl pc
		//[Translate functions]
		g_BodyYShift = 0;
		if (ControlMode == TRANSLATEMODE) {

		      g_InControlState.BodyPos.x =  SmoothControl(((lx)*2/3), g_InControlState.BodyPos.x, SmDiv);
		      g_InControlState.BodyPos.z =  SmoothControl(((ly)*2/3), g_InControlState.BodyPos.z, SmDiv);
    1ac4:	00342800 	eorseq	r2, r4, r0, lsl #16
		      g_InControlState.BodyRot1.y = SmoothControl(((rightH)*2), g_InControlState.BodyRot1.y, SmDiv);
    1ac8:	0b3a0e03 	bleq	e852dc <__Stack_Size+0xe84edc>
    1acc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1ad0:	0a020c3f 	beq	84bd4 <__Stack_Size+0x847d4>
    1ad4:	34290000 	strtcc	r0, [r9]


			//      g_InControlState.BodyPos.x = (lx)/2;
			//      g_InControlState.BodyPos.z = -(ly)/3;
			//      g_InControlState.BodyRot1.y = (rightH)*2;
			g_BodyYShift = (-(rightV) / 2);
    1ad8:	3a0e0300 	bcc	3826e0 <__Stack_Size+0x3822e0>
    1adc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ae0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1ae4:	0000000c 	andeq	r0, r0, ip
    1ae8:	25011101 	strcs	r1, [r1, #-257]
    1aec:	030b130e 	movweq	r1, #45838	; 0xb30e
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
    1af0:	110e1b0e 	tstne	lr, lr, lsl #22
			g_InControlState.BodyRot1.x = (ly);
			g_InControlState.BodyRot1.y = (rightH) * 2;
    1af4:	10011201 	andne	r1, r1, r1, lsl #4
    1af8:	02000006 	andeq	r0, r0, #6	; 0x6
			g_InControlState.BodyRot1.z = (lx);
			g_BodyYShift = (-(rightV) / 2);
    1afc:	0b0b0024 	bleq	2c1b94 <__Stack_Size+0x2c1794>
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
			g_InControlState.BodyRot1.x = (ly);
			g_InControlState.BodyRot1.y = (rightH) * 2;
    1b00:	0e030b3e 	vmoveq.16	d3[0], r0
			g_BodyYShift = (-(rightV) / 2);
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
			g_InControlState.BodyRot1.x = (ly);
    1b04:	16030000 	strne	r0, [r3], -r0
			g_InControlState.BodyRot1.y = (rightH) * 2;
			g_InControlState.BodyRot1.z = (lx);
			g_BodyYShift = (-(rightV) / 2);
    1b08:	3a080300 	bcc	202710 <__Stack_Size+0x202310>
    1b0c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b10:	04000013 	streq	r0, [r0], #-19
    1b14:	13490035 	movtne	r0, #36917	; 0x9035
    1b18:	04050000 	streq	r0, [r5]
		}

		//[Single leg functions]
#ifdef OPT_SINGLELEG
		if (ControlMode == SINGLELEGMODE) {
    1b1c:	3a0b0b01 	bcc	2c4728 <__Stack_Size+0x2c4328>

			//Switch leg for single leg control
			if ((buttons & BUT_R1) && !(buttonsPrev & BUT_R1)) {
    1b20:	010b3b0b 	tsteq	fp, fp, lsl #22
    1b24:	06000013 	undefined
    1b28:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    1b2c:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1b30:	03002807 	movweq	r2, #2055	; 0x807
				Buzzed(50,2000);
    1b34:	000d1c08 	andeq	r1, sp, r8, lsl #24
    1b38:	00160800 	andseq	r0, r6, r0, lsl #16
    1b3c:	0b3a0e03 	bleq	e85350 <__Stack_Size+0xe84f50>
				if (g_InControlState.SelectedLeg < (CNT_LEGS-1)) {
    1b40:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1b44:	13090000 	movwne	r0, #36864	; 0x9000
					g_InControlState.SelectedLeg = g_InControlState.SelectedLeg + 1;
				} else {
					g_InControlState.SelectedLeg = 0;
    1b48:	3a0b0b01 	bcc	2c4754 <__Stack_Size+0x2c4354>
		if (ControlMode == SINGLELEGMODE) {

			//Switch leg for single leg control
			if ((buttons & BUT_R1) && !(buttonsPrev & BUT_R1)) {
				Buzzed(50,2000);
				if (g_InControlState.SelectedLeg < (CNT_LEGS-1)) {
    1b4c:	010b3b0b 	tsteq	fp, fp, lsl #22
					g_InControlState.SelectedLeg = g_InControlState.SelectedLeg + 1;
    1b50:	0a000013 	beq	1ba4 <__Stack_Size+0x17a4>
			   g_InControlState.SLLeg.x= (signed char)((int)((int)lx+128)/2); //Left Stick Right/Left
      		   g_InControlState.SLLeg.y= (signed char)((int)((int)rightV+128)/10); //Right Stick Up/Down
		       g_InControlState.SLLeg.z = (signed char)((int)((int)ly+128)/2); //Left Stick Up/Down

#else
			g_InControlState.SLLeg.x = lx; //Left Stick Right/Left
    1b54:	0803000d 	stmdaeq	r3, {r0, r2, r3}
			g_InControlState.SLLeg.y = rightV / 3 - 20;//Right Stick Up/Down
    1b58:	0b3b0b3a 	bleq	ec4848 <__Stack_Size+0xec4448>
    1b5c:	0a381349 	beq	e06888 <__Stack_Size+0xe06488>
    1b60:	0d0b0000 	stceq	0, cr0, [fp]
    1b64:	3a0e0300 	bcc	38276c <__Stack_Size+0x38236c>
    1b68:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			g_InControlState.SLLeg.z = ly;//Left Stick Up/Down

#endif
			// Hold single leg in place
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    1b6c:	000a3813 	andeq	r3, sl, r3, lsl r8
    1b70:	00240c00 	eoreq	r0, r4, r0, lsl #24
    1b74:	0b3e0b0b 	bleq	f847a8 <__Stack_Size+0xf843a8>
      		   g_InControlState.SLLeg.y= (signed char)((int)((int)rightV+128)/10); //Right Stick Up/Down
		       g_InControlState.SLLeg.z = (signed char)((int)((int)ly+128)/2); //Left Stick Up/Down

#else
			g_InControlState.SLLeg.x = lx; //Left Stick Right/Left
			g_InControlState.SLLeg.y = rightV / 3 - 20;//Right Stick Up/Down
    1b78:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
			g_InControlState.SLLeg.z = ly;//Left Stick Up/Down

#endif
			// Hold single leg in place
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    1b7c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1b80:	3b0b3a0e 	blcc	2d03c0 <__Stack_Size+0x2cffc0>
    1b84:	110c270b 	tstne	ip, fp, lsl #14
				Buzzed(50,2000);
    1b88:	40011201 	andmi	r1, r1, r1, lsl #4
    1b8c:	0013010a 	andseq	r0, r3, sl, lsl #2
				g_InControlState.fSLHold = !g_InControlState.fSLHold;
    1b90:	00050e00 	andeq	r0, r5, r0, lsl #28
    1b94:	0b3a0e03 	bleq	e853a8 <__Stack_Size+0xe84fa8>
    1b98:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1b9c:	00000a02 	andeq	r0, r0, r2, lsl #20
			}
		}
#endif

		//Calculate walking time delay
		g_InControlState.InputTimeDelay = 128- max(max(abs(lx), abs(ly)), abs(rightH));
    1ba0:	0300340f 	movweq	r3, #1039	; 0x40f
    1ba4:	3b0b3a0e 	blcc	2d03e4 <__Stack_Size+0x2cffe4>
    1ba8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1bac:	10000006 	andne	r0, r0, r6
    1bb0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1bb4:	0b3b0b3a 	bleq	ec48a4 <__Stack_Size+0xec44a4>
    1bb8:	00001349 	andeq	r1, r0, r9, asr #6
    1bbc:	0b000f11 	bleq	5808 <__Stack_Size+0x5408>
    1bc0:	0013490b 	andseq	r4, r3, fp, lsl #18
    1bc4:	012e1200 	teqeq	lr, r0, lsl #4
    1bc8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1bcc:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1bd0:	01110c27 	tsteq	r1, r7, lsr #24

		//Calculate g_InControlState.BodyPos.y
		g_InControlState.BodyPos.y = max(g_BodyYOffset + g_BodyYShift, 0);
    1bd4:	0a400112 	beq	1002024 <__Stack_Size+0x1001c24>
    1bd8:	00001301 	andeq	r1, r0, r1, lsl #6
    1bdc:	03000513 	movweq	r0, #1299	; 0x513
    1be0:	3b0b3a0e 	blcc	2d0420 <__Stack_Size+0x2d0020>
    1be4:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1be8:	1400000a 	strne	r0, [r0], #-10

		if (sLegInitXZAdjust || sLegInitAngleAdjust) {
    1bec:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1bf0:	053b0b3a 	ldreq	r0, [fp, #-2874]!
			// User asked for manual leg adjustment - only do when we have finished any previous adjustment

			if (!g_InControlState.ForceGaitStepCnt) {
    1bf4:	06021349 	streq	r1, [r2], -r9, asr #6
				if (sLegInitXZAdjust)
    1bf8:	34150000 	ldrcc	r0, [r5]
					g_fDynamicLegXZLength = true;
    1bfc:	3a0e0300 	bcc	382804 <__Stack_Size+0x382404>
    1c00:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}

				sLegInitXZAdjust += GetLegsXZLength(); // Add on current length to our adjustment...
    1c04:	000a0213 	andeq	r0, sl, r3, lsl r2
    1c08:	012e1600 	teqeq	lr, r0, lsl #12
				// Handle maybe change angles...
				if (sLegInitAngleAdjust)
					RotateLegInitAngles(sLegInitAngleAdjust);

				// Give system time to process previous calls
				AdjustLegPositions(sLegInitXZAdjust);
    1c0c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
			}
		}

		if (fAdjustLegPositions && !g_fDynamicLegXZLength)
    1c10:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1c14:	13490c27 	movtne	r0, #39975	; 0x9c27
    1c18:	01120111 	tsteq	r2, r1, lsl r1
			AdjustLegPositionsToBodyHeight(); // Put main workings into main program file
    1c1c:	13010a40 	movwne	r0, #6720	; 0x1a40
		// Save away the buttons state as to not process the same press twice.
		buttonsPrev = buttons;
    1c20:	34170000 	ldrcc	r0, [r7]
    1c24:	3a0e0300 	bcc	38282c <__Stack_Size+0x38242c>
		extPrev = ext;
    1c28:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c2c:	18000013 	stmdane	r0, {r0, r1, r4}
		g_ulLastMsgTime = getMillis();
    1c30:	0c3f012e 	ldfeqs	f0, [pc], #-184
    1c34:	0b3a0e03 	bleq	e85448 <__Stack_Size+0xe85048>
	} else {
		// We did not receive a valid packet.  check for a timeout to see if we should turn robot off...
		if (g_InControlState.fRobotOn) {
    1c38:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
			if ((getMillis() - g_ulLastMsgTime) > ARBOTIX_TO)
    1c3c:	01120111 	tsteq	r2, r1, lsl r1
    1c40:	13010640 	movwne	r0, #5696	; 0x1640
    1c44:	34190000 	ldrcc	r0, [r9]
    1c48:	3a0e0300 	bcc	382850 <__Stack_Size+0x382450>
    1c4c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
				CommanderTurnRobotOff();
    1c50:	00060213 	andeq	r0, r6, r3, lsl r2
		}
	}

}
    1c54:	002e1a00 	eoreq	r1, lr, r0, lsl #20
    1c58:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1c5c:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1c60:	13490c27 	movtne	r0, #39975	; 0x9c27
    1c64:	01120111 	tsteq	r2, r1, lsl r1
    1c68:	00000a40 	andeq	r0, r0, r0, asr #20
    1c6c:	3f012e1b 	svccc	0x00012e1b
    1c70:	3a0e030c 	bcc	3828a8 <__Stack_Size+0x3824a8>
    1c74:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1c78:	1113490c 	tstne	r3, ip, lsl #18
    1c7c:	40011201 	andmi	r1, r1, r1, lsl #4
    1c80:	00130106 	andseq	r0, r3, r6, lsl #2
    1c84:	012e1c00 	teqeq	lr, r0, lsl #24
    1c88:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1c8c:	0b3b0b3a 	bleq	ec497c <__Stack_Size+0xec457c>
    1c90:	01110c27 	tsteq	r1, r7, lsr #24
    1c94:	06400112 	undefined
    1c98:	051d0000 	ldreq	r0, [sp]
    1c9c:	3a0e0300 	bcc	3828a4 <__Stack_Size+0x3824a4>
    1ca0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ca4:	00060213 	andeq	r0, r6, r3, lsl r2
    1ca8:	11010000 	tstne	r1, r0
    1cac:	130e2501 	movwne	r2, #58625	; 0xe501

extern void setupPhoenix(void);
extern void readSensors(void);


int Big_main(void) {
    1cb0:	1b0e030b 	blne	3828e4 <__Stack_Size+0x3824e4>

	// Must include this line in all programs using "cm530.h/.c"
	SysInit();
    1cb4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
	setupPhoenix();
    1cb8:	00061001 	andeq	r1, r6, r1
			TotalYBal1 = 0;
			TotalZBal1 = 0;

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1cbc:	00240200 	eoreq	r0, r4, r0, lsl #4

	while (1){
		while (1) {
			//Start time
			unsigned long lTimeWaitEnd;
			lTimerStart = getMillis();
    1cc0:	0b3e0b0b 	bleq	f848f4 <__Stack_Size+0xf844f4>
    1cc4:	00000e03 	andeq	r0, r0, r3, lsl #28
    1cc8:	03001603 	movweq	r1, #1539	; 0x603
#ifdef MILLIS
			PrintString("Barebones lTimerStart ");
			Printu32d(lTimerStart);
			PrintString("\n");
#endif
			DoBackgroundProcess();
    1ccc:	3b0b3a08 	blcc	2d04f4 <__Stack_Size+0x2d00f4>
			//Read input
			CheckVoltage();        // check our voltages...
    1cd0:	0013490b 	andseq	r4, r3, fp, lsl #18
			if (!g_fLowVoltageShutdown) {
    1cd4:	00350400 	eorseq	r0, r5, r0, lsl #8
    1cd8:	00001349 	andeq	r1, r0, r9, asr #6
				CommanderInputController_ControlInput();
    1cdc:	0b010405 	bleq	42cf8 <__Stack_Size+0x428f8>
			}
			WriteOutputs();        // Write Outputs
			//Single leg control
			SingleLegControl();
    1ce0:	3b0b3a0b 	blcc	2d0514 <__Stack_Size+0x2d0114>
			DoBackgroundProcess();
    1ce4:	0013010b 	andseq	r0, r3, fp, lsl #2

			//Gait
			GaitSeq();
    1ce8:	00280600 	eoreq	r0, r8, r0, lsl #12

			DoBackgroundProcess();
    1cec:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]

			//Balance calculations
			TotalTransX = 0;     //reset values used for calculation of balance
    1cf0:	28070000 	stmdacs	r7, {}
    1cf4:	1c080300 	stcne	3, cr0, [r8], {0}
			TotalTransZ = 0;
    1cf8:	0800000d 	stmdaeq	r0, {r0, r2, r3}
			TotalTransY = 0;
    1cfc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1d00:	0b3b0b3a 	bleq	ec49f0 <__Stack_Size+0xec45f0>
			TotalXBal1 = 0;
    1d04:	00001349 	andeq	r1, r0, r9, asr #6
			TotalYBal1 = 0;
    1d08:	0b002409 	bleq	ad34 <__Stack_Size+0xa934>
    1d0c:	000b3e0b 	andeq	r3, fp, fp, lsl #28
			TotalZBal1 = 0;
    1d10:	01130a00 	tsteq	r3, r0, lsl #20

			if (g_InControlState.BalanceMode) {
    1d14:	0b3a0b0b 	bleq	e84948 <__Stack_Size+0xe84548>
    1d18:	1301053b 	movwne	r0, #5435	; 0x153b
    1d1c:	0d0b0000 	stceq	0, cr0, [fp]

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1d20:	3a080300 	bcc	202928 <__Stack_Size+0x202528>

					DoBackgroundProcess();
					BalCalcOneLeg(-LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d24:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d28:	000a3813 	andeq	r3, sl, r3, lsl r8
    1d2c:	000d0c00 	andeq	r0, sp, r0, lsl #24

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs

					DoBackgroundProcess();
    1d30:	0b3a0e03 	bleq	e85544 <__Stack_Size+0xe85144>
					BalCalcOneLeg(-LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d34:	1349053b 	movtne	r0, #38203	; 0x953b
    1d38:	00000a38 	andeq	r0, r0, r8, lsr sl
    1d3c:	3f012e0d 	svccc	0x00012e0d
    1d40:	3a0e030c 	bcc	382978 <__Stack_Size+0x382578>
    1d44:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1d48:	2013490c 	andscs	r4, r3, ip, lsl #18
    1d4c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1d50:	00340e00 	eorseq	r0, r4, r0, lsl #28
    1d54:	0b3a0e03 	bleq	e85568 <__Stack_Size+0xe85168>
    1d58:	1349053b 	movtne	r0, #38203	; 0x953b
    1d5c:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    1d60:	3a0e0301 	bcc	38296c <__Stack_Size+0x38256c>
    1d64:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1d68:	010b200c 	tsteq	fp, ip
    1d6c:	10000013 	andne	r0, r0, r3, lsl r0
			TotalYBal1 = 0;
			TotalZBal1 = 0;

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1d70:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1d74:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1d78:	00001349 	andeq	r1, r0, r9, asr #6
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
    1d7c:	3f012e11 	svccc	0x00012e11
    1d80:	3a0e030c 	bcc	3829b8 <__Stack_Size+0x3825b8>
					DoBackgroundProcess();
					BalCalcOneLeg(LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d84:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1d88:	1201110c 	andne	r1, r1, #3	; 0x3
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
					DoBackgroundProcess();
    1d8c:	010a4001 	tsteq	sl, r1
					BalCalcOneLeg(LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d90:	12000013 	andne	r0, r0, #19	; 0x13
    1d94:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1d98:	0b3b0b3a 	bleq	ec4a88 <__Stack_Size+0xec4688>
    1d9c:	06021349 	streq	r1, [r2], -r9, asr #6
    1da0:	2e130000 	wxorcs	wr0, wr3, wr0
    1da4:	030c3f00 	movweq	r3, #52992	; 0xcf00
    1da8:	3b0b3a0e 	blcc	2d05e8 <__Stack_Size+0x2d01e8>
    1dac:	110c270b 	tstne	ip, fp, lsl #14
    1db0:	40011201 	andmi	r1, r1, r1, lsl #4
    1db4:	1400000a 	strne	r0, [r0], #-10
    1db8:	0c3f002e 	ldceq	0, cr0, [pc], #-184
    1dbc:	0b3a0e03 	bleq	e855d0 <__Stack_Size+0xe851d0>
    1dc0:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
    1dc4:	01111349 	tsteq	r1, r9, asr #6
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
    1dc8:	0a400112 	beq	1002218 <__Stack_Size+0x1001e18>
    1dcc:	2e150000 	wxorcs	wr0, wr5, wr0
    1dd0:	030c3f01 	movweq	r3, #52993	; 0xcf01
							LegPosZ[LegIndex] + GaitPosZ[LegIndex],
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}
				BalanceBody();
    1dd4:	3b0b3a0e 	blcc	2d0614 <__Stack_Size+0x2d0214>
			}

			//Reset IKsolution indicators
			IKSolution = 0;
    1dd8:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
    1ddc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
			IKSolutionWarning = 0;
			IKSolutionError = 0;

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
    1de0:	010a4001 	tsteq	sl, r1
			}

			//Reset IKsolution indicators
			IKSolution = 0;
			IKSolutionWarning = 0;
			IKSolutionError = 0;
    1de4:	16000013 	undefined
    1de8:	0c3f012e 	ldfeqs	f0, [pc], #-184

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
				DoBackgroundProcess();
    1dec:	0b3a0e03 	bleq	e85600 <__Stack_Size+0xe85200>
				BodyFK(
    1df0:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
    1df4:	01120111 	tsteq	r2, r1, lsl r1
    1df8:	13010a40 	movwne	r0, #6720	; 0x1a40
    1dfc:	05170000 	ldreq	r0, [r7]
    1e00:	3a0e0300 	bcc	382a08 <__Stack_Size+0x382608>
    1e04:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e08:	000a0213 	andeq	r0, sl, r3, lsl r2
    1e0c:	00051800 	andeq	r1, r5, r0, lsl #16
    1e10:	0b3a0e03 	bleq	e85624 <__Stack_Size+0xe85224>
    1e14:	1349053b 	movtne	r0, #38203	; 0x953b
    1e18:	00000602 	andeq	r0, r0, r2, lsl #12
    1e1c:	03003419 	movweq	r3, #1049	; 0x419
    1e20:	3b0b3a0e 	blcc	2d0660 <__Stack_Size+0x2d0260>
    1e24:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1e28:	1a000006 	bne	1e48 <__Stack_Size+0x1a48>
    1e2c:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
    1e30:	01120111 	tsteq	r2, r1, lsl r1
    1e34:	13010a40 	movwne	r0, #6720	; 0x1a40
    1e38:	341b0000 	ldrcc	r0, [fp]
    1e3c:	02133100 	andseq	r3, r3, #0	; 0x0
    1e40:	1c000006 	stcne	0, cr0, [r0], {6}
    1e44:	0c3f012e 	ldfeqs	f0, [pc], #-184
    1e48:	0b3a0e03 	bleq	e8565c <__Stack_Size+0xe8525c>
    1e4c:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
						+ GaitPosZ[LegIndex] - TotalTransZ,
						LegPosY[LegIndex] + g_InControlState.BodyPos.y
						+ GaitPosY[LegIndex] - TotalTransY,
						GaitRotY[LegIndex], LegIndex);

				LegIK(
    1e50:	01111349 	tsteq	r1, r9, asr #6
    1e54:	06400112 	undefined
    1e58:	00001301 	andeq	r1, r0, r1, lsl #6
    1e5c:	31011d1d 	tstcc	r1, sp, lsl sp
    1e60:	58065513 	stmdapl	r6, {r0, r1, r4, r8, sl, ip, lr}
    1e64:	0105590b 	tsteq	r5, fp, lsl #18
    1e68:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    1e6c:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    1e70:	341f0000 	ldrcc	r0, [pc], #0	; 1e78 <__Stack_Size+0x1a78>
    1e74:	00133100 	andseq	r3, r3, r0, lsl #2
    1e78:	011d2000 	tsteq	sp, r0
    1e7c:	06551331 	undefined
    1e80:	05590b58 	ldrbeq	r0, [r9, #-2904]
    1e84:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
    1e88:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1e8c:	3b0b3a0e 	blcc	2d06cc <__Stack_Size+0x2d02cc>
    1e90:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1e94:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1e98:	01064001 	tsteq	r6, r1
    1e9c:	22000013 	andcs	r0, r0, #19	; 0x13
    1ea0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1ea4:	0b3b0b3a 	bleq	ec4b94 <__Stack_Size+0xec4794>
    1ea8:	06021349 	streq	r1, [r2], -r9, asr #6
    1eac:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
    1eb0:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1eb4:	3b0b3a0e 	blcc	2d06f4 <__Stack_Size+0x2d02f4>
    1eb8:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1ebc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1ec0:	00064001 	andeq	r4, r6, r1
			IKSolutionWarning = 0;
			IKSolutionError = 0;

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
    1ec4:	11010000 	tstne	r1, r0
    1ec8:	130e2501 	movwne	r2, #58625	; 0xe501
    1ecc:	1b0e030b 	blne	382b00 <__Stack_Size+0x382700>
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Do IK for all Left legs
			for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) {
    1ed0:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    1ed4:	00061001 	andeq	r1, r6, r1
				DoBackgroundProcess();
    1ed8:	00240200 	eoreq	r0, r4, r0, lsl #4
				BodyFK(
    1edc:	0b3e0b0b 	bleq	f84b10 <__Stack_Size+0xf84710>
    1ee0:	00000e03 	andeq	r0, r0, r3, lsl #28
    1ee4:	03001603 	movweq	r1, #1539	; 0x603
    1ee8:	3b0b3a08 	blcc	2d0710 <__Stack_Size+0x2d0310>
    1eec:	0013490b 	andseq	r4, r3, fp, lsl #18
    1ef0:	00350400 	eorseq	r0, r5, r0, lsl #8
    1ef4:	00001349 	andeq	r1, r0, r9, asr #6
    1ef8:	0b010405 	bleq	42f14 <__Stack_Size+0x42b14>
    1efc:	3b0b3a0b 	blcc	2d0730 <__Stack_Size+0x2d0330>
    1f00:	0013010b 	andseq	r0, r3, fp, lsl #2
    1f04:	00280600 	eoreq	r0, r8, r0, lsl #12
    1f08:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    1f0c:	16070000 	strne	r0, [r7], -r0
    1f10:	3a0e0300 	bcc	382b18 <__Stack_Size+0x382718>
    1f14:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f18:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1f1c:	0b0b0024 	bleq	2c1fb4 <__Stack_Size+0x2c1bb4>
    1f20:	00000b3e 	andeq	r0, r0, lr, lsr fp
    1f24:	0b011309 	bleq	46b50 <__Stack_Size+0x46750>
    1f28:	3b0b3a0b 	blcc	2d075c <__Stack_Size+0x2d035c>
    1f2c:	00130105 	andseq	r0, r3, r5, lsl #2
    1f30:	000d0a00 	andeq	r0, sp, r0, lsl #20
    1f34:	0b3a0803 	bleq	e83f48 <__Stack_Size+0xe83b48>
    1f38:	1349053b 	movtne	r0, #38203	; 0x953b
    1f3c:	00000a38 	andeq	r0, r0, r8, lsr sl
    1f40:	03000d0b 	movweq	r0, #3339	; 0xd0b
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z
						+ GaitPosZ[LegIndex] - TotalTransZ,
						LegPosY[LegIndex] + g_InControlState.BodyPos.y
						+ GaitPosY[LegIndex] - TotalTransY,
						GaitRotY[LegIndex], LegIndex);
				LegIK(
    1f44:	3b0b3a0e 	blcc	2d0784 <__Stack_Size+0x2d0384>
    1f48:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1f4c:	0c00000a 	stceq	0, cr0, [r0], {10}
    1f50:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1f54:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1f58:	00001349 	andeq	r1, r0, r9, asr #6
    1f5c:	4901010d 	stmdbmi	r1, {r0, r2, r3, r8}
    1f60:	00130113 	andseq	r0, r3, r3, lsl r1
    1f64:	00210e00 	eoreq	r0, r1, r0, lsl #28
    1f68:	0b2f1349 	bleq	bc6c94 <__Stack_Size+0xbc6894>
    1f6c:	130f0000 	movwne	r0, #61440	; 0xf000
    1f70:	3a0b0b01 	bcc	2c4b7c <__Stack_Size+0x2c477c>
    1f74:	010b3b0b 	tsteq	fp, fp, lsl #22
    1f78:	10000013 	andne	r0, r0, r3, lsl r0
    1f7c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1f80:	0b3b0b3a 	bleq	ec4c70 <__Stack_Size+0xec4870>
    1f84:	0a381349 	beq	e06cb0 <__Stack_Size+0xe068b0>
    1f88:	2e110000 	wxorcs	wr0, wr1, wr0
    1f8c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1f90:	3b0b3a0e 	blcc	2d07d0 <__Stack_Size+0x2d03d0>
    1f94:	110c270b 	tstne	ip, fp, lsl #14
    1f98:	40011201 	andmi	r1, r1, r1, lsl #4
    1f9c:	00130106 	andseq	r0, r3, r6, lsl #2
    1fa0:	00051200 	andeq	r1, r5, r0, lsl #4
    1fa4:	0b3a0e03 	bleq	e857b8 <__Stack_Size+0xe853b8>
    1fa8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1fac:	00000a02 	andeq	r0, r0, r2, lsl #20
    1fb0:	03000513 	movweq	r0, #1299	; 0x513
    1fb4:	3b0b3a0e 	blcc	2d07f4 <__Stack_Size+0x2d03f4>
    1fb8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1fbc:	14000006 	strne	r0, [r0], #-6
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Do IK for all Left legs
			for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) {
    1fc0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1fc4:	0b3b0b3a 	bleq	ec4cb4 <__Stack_Size+0xec48b4>
    1fc8:	0a021349 	beq	86cf4 <__Stack_Size+0x868f4>
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Check mechanical limits
			CheckAngles();
    1fcc:	34150000 	ldrcc	r0, [r5]

			//Drive Servos
			if (g_InControlState.fRobotOn) {
    1fd0:	3a080300 	bcc	202bd8 <__Stack_Size+0x2027d8>
    1fd4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1fd8:	00060213 	andeq	r0, r6, r3, lsl r2
				if (g_InControlState.fRobotOn && !g_InControlState.fPrev_RobotOn) {
					// MSound(3, 60, 2000, 80, 2250, 100, 2500);
					Buzzed(30, 2000);
    1fdc:	00341600 	eorseq	r1, r4, r0, lsl #12
    1fe0:	0b3a0e03 	bleq	e857f4 <__Stack_Size+0xe853f4>
    1fe4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
					Buzzed(80, 2250);
    1fe8:	0f170000 	svceq	0x00170000
    1fec:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
					Buzzed(100, 2500);
    1ff0:	18000013 	stmdane	r0, {r0, r1, r4}
    1ff4:	0c3f012e 	ldfeqs	f0, [pc], #-184
    1ff8:	0b3a0e03 	bleq	e8580c <__Stack_Size+0xe8540c>

				}

				//Calculate Servo Move time
				if ((abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
    1ffc:	0c270b3b 	stceq	11, cr0, [r7], #-236
    2000:	01120111 	tsteq	r2, r1, lsl r1
    2004:	13010a40 	movwne	r0, #6720	; 0x1a40
    2008:	2e190000 	wxorcs	wr0, wr9, wr0
    200c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    2010:	3b0b3a0e 	blcc	2d0850 <__Stack_Size+0x2d0450>
    2014:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    2018:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    201c:	010a4001 	tsteq	sl, r1
    2020:	1a000013 	bne	2074 <__Stack_Size+0x1c74>
    2024:	0c3f012e 	ldfeqs	f0, [pc], #-184
						|| (abs(g_InControlState.TravelLength.z) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.y*2) > cTravelDeadZone)) {
					ServoMoveTime = g_InControlState.gaitCur.NomGaitSpeed
    2028:	0b3a0e03 	bleq	e8583c <__Stack_Size+0xe8543c>
    202c:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
    2030:	01111349 	tsteq	r1, r9, asr #6
    2034:	0a400112 	beq	1002484 <__Stack_Size+0x1002084>
    2038:	00001301 	andeq	r1, r0, r1, lsl #6
							+ (g_InControlState.InputTimeDelay * 2)
							+ g_InControlState.SpeedControl;

					//Add aditional delay when Balance mode is on
					if (g_InControlState.BalanceMode)
    203c:	0300051b 	movweq	r0, #1307	; 0x51b

				//Calculate Servo Move time
				if ((abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.z) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.y*2) > cTravelDeadZone)) {
					ServoMoveTime = g_InControlState.gaitCur.NomGaitSpeed
    2040:	3b0b3a0e 	blcc	2d0880 <__Stack_Size+0x2d0480>
							+ (g_InControlState.InputTimeDelay * 2)
							+ g_InControlState.SpeedControl;

					//Add aditional delay when Balance mode is on
					if (g_InControlState.BalanceMode)
						ServoMoveTime = ServoMoveTime + BALANCE_DELAY;
    2044:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2048:	1c000006 	stcne	0, cr0, [r0], {6}
				} else
					//Movement speed excl. Walking
					ServoMoveTime = 200 + g_InControlState.SpeedControl;
    204c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2050:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    2054:	0a021349 	beq	86d80 <__Stack_Size+0x86980>

				// note we broke up the servo driver into start/commit that way we can output all of the servo information
				// before we wait and only have the termination information to output after the wait.  That way we hopefully
				// be more accurate with our timings...
				DoBackgroundProcess();
    2058:	341d0000 	ldrcc	r0, [sp]
				StartUpdateServos();
    205c:	3a0e0300 	bcc	382c64 <__Stack_Size+0x382864>

				// See if we need to sync our processor with the servo driver while walking to ensure the prev is completed
				//before sending the next one

				// Finding any incident of GaitPos/Rot <>0:
				for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    2060:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
					if ((GaitPosX[LegIndex] > cGPlimit)
    2064:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    2068:	0c3f012e 	ldfeqs	f0, [pc], #-184
    206c:	0b3a0e03 	bleq	e85880 <__Stack_Size+0xe85480>
    2070:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
    2074:	01120111 	tsteq	r2, r1, lsl r1
    2078:	13010a40 	movwne	r0, #6720	; 0x1a40
    207c:	341f0000 	ldrcc	r0, [pc], #0	; 2084 <__Stack_Size+0x1c84>
    2080:	3a080300 	bcc	202c88 <__Stack_Size+0x202888>
    2084:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2088:	000a0213 	andeq	r0, sl, r3, lsl r2
    208c:	00342000 	eorseq	r2, r4, r0
    2090:	0b3a0e03 	bleq	e858a4 <__Stack_Size+0xe854a4>
    2094:	1349053b 	movtne	r0, #38203	; 0x953b
    2098:	00000602 	andeq	r0, r0, r2, lsl #12
    209c:	3f012e21 	svccc	0x00012e21
							|| (GaitPosZ[LegIndex] > cGPlimit)
							|| (GaitPosZ[LegIndex] < -cGPlimit)
							|| (GaitRotY[LegIndex] > cGPlimit)
							|| (GaitRotY[LegIndex] < -cGPlimit)) {

						bExtraCycle = g_InControlState.gaitCur.NrLiftedPos + 1;	//For making sure that we are using timed move until all legs are down
    20a0:	3a0e030c 	bcc	382cd8 <__Stack_Size+0x3828d8>
    20a4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    20a8:	1201110c 	andne	r1, r1, #3	; 0x3

				// See if we need to sync our processor with the servo driver while walking to ensure the prev is completed
				//before sending the next one

				// Finding any incident of GaitPos/Rot <>0:
				for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    20ac:	01064001 	tsteq	r6, r1
    20b0:	22000013 	andcs	r0, r0, #19	; 0x13

						bExtraCycle = g_InControlState.gaitCur.NrLiftedPos + 1;	//For making sure that we are using timed move until all legs are down
						break;
					}
				}
				if (bExtraCycle > 0) {
    20b4:	08030034 	stmdaeq	r3, {r2, r4, r5}
					bExtraCycle--;
    20b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    20bc:	00001349 	andeq	r1, r0, r9, asr #6
					fWalking = !(bExtraCycle == 0);
    20c0:	3f002e23 	svccc	0x00002e23
    20c4:	3a0e030c 	bcc	382cfc <__Stack_Size+0x3828fc>

					//Get endtime and calculate wait time
					lTimeWaitEnd = lTimerStart + PrevServoMoveTime;
    20c8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    20cc:	1201110c 	andne	r1, r1, #3	; 0x3
    20d0:	00064001 	andeq	r4, r6, r1
					PrintString("\n");
#endif
					//DebugWrite(A1, HIGH);
					do {
						// Wait the appropriate time, call any background process while waiting...
						DoBackgroundProcess();
    20d4:	012e2400 	teqeq	lr, r0, lsl #8
					} while (getMillis() < lTimeWaitEnd);
    20d8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    20dc:	0b3b0b3a 	bleq	ec4dcc <__Stack_Size+0xec49cc>
					PrintString("\n");
#endif

				}
				// Only do commit if we are actually doing something...
				CommitServoDriver(ServoMoveTime);
    20e0:	01110c27 	tsteq	r1, r7, lsr #24
    20e4:	06400112 	undefined
    20e8:	01000000 	tsteq	r0, r0
			} else {
				//Turn the bot off - May need to add ajust here...
				if (g_InControlState.fPrev_RobotOn || (AllDown = 0)) {
    20ec:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
					PrintString("Barebones lTimeWaitEnd-Millis  ");
					Printu32d(getMillis);
					PrintString("\n");
#endif
				} else {
					FreeServos();
    20f0:	0e030b13 	vmoveq.32	d3[0], r0
    20f4:	01110e1b 	tsteq	r1, fp, lsl lr
				// Only do commit if we are actually doing something...
				CommitServoDriver(ServoMoveTime);
			} else {
				//Turn the bot off - May need to add ajust here...
				if (g_InControlState.fPrev_RobotOn || (AllDown = 0)) {
					ServoMoveTime = 600;
    20f8:	06100112 	undefined
    20fc:	24020000 	strcs	r0, [r2]
					StartUpdateServos();
    2100:	3e0b0b00 	fmacdcc	d0, d11, d0
					CommitServoDriver(ServoMoveTime);
    2104:	000e030b 	andeq	r0, lr, fp, lsl #6
					//MSound(3, 100, 2500, 80, 2250, 60, 2000);
					Buzzed(100, 2500);
    2108:	00160300 	andseq	r0, r6, r0, lsl #6
    210c:	0b3a0803 	bleq	e84120 <__Stack_Size+0xe83d20>
    2110:	13490b3b 	movtne	r0, #39739	; 0x9b3b
					Buzzed(80, 2250);
    2114:	35040000 	strcc	r0, [r4]
    2118:	00134900 	andseq	r4, r3, r0, lsl #18
					Buzzed(60, 2000);
    211c:	00260500 	eoreq	r0, r6, r0, lsl #10
    2120:	00001349 	andeq	r1, r0, r9, asr #6
    2124:	0b010406 	bleq	43144 <__Stack_Size+0x42d44>

					//lTimeWaitEnd = getMillis() + 600; // setup to process background stuff while we wait...
					lTimeWaitEnd = getMillis() + 600; // setup to process background stuff while we wait...
    2128:	3b0b3a0b 	blcc	2d095c <__Stack_Size+0x2d055c>
    212c:	0013010b 	andseq	r0, r3, fp, lsl #2
					Printu32d(lTimeWaitEnd);
					PrintString("\n");
#endif
					do {
						// Wait the appropriate time, call any background process while waiting...
						DoBackgroundProcess();
    2130:	00280700 	eoreq	r0, r8, r0, lsl #14
					} while (getMillis() < lTimeWaitEnd);
    2134:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    2138:	28080000 	stmdacs	r8, {}
				} else {
					FreeServos();
				}

				// Allow the Servo driver to do stuff durint our idle time
				IdleTime();
    213c:	1c080300 	stcne	3, cr0, [r8], {0}
				mDelay(20); // give a pause between times we call if nothing is happening
    2140:	0900000d 	stmdbeq	r0, {r0, r2, r3}
			}
			PrevServoMoveTime = ServoMoveTime;
    2144:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2148:	0b3b0b3a 	bleq	ec4e38 <__Stack_Size+0xec4a38>

			//Store previous g_InControlState.fRobotOn State
			if (g_InControlState.fRobotOn)
    214c:	00001349 	andeq	r1, r0, r9, asr #6
    2150:	0b00240a 	bleq	b180 <__Stack_Size+0xad80>
				g_InControlState.fPrev_RobotOn = 1;
			else
				g_InControlState.fPrev_RobotOn = 0;
    2154:	000b3e0b 	andeq	r3, fp, fp, lsl #28
    2158:	01130b00 	tsteq	r3, r0, lsl #22
    215c:	0b3a050b 	bleq	e83590 <__Stack_Size+0xe83190>
    2160:	1301053b 	movwne	r0, #5435	; 0x153b
    2164:	0d0c0000 	stceq	0, cr0, [ip]
    2168:	3a0e0300 	bcc	382d70 <__Stack_Size+0x382970>
    216c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2170:	000a3813 	andeq	r3, sl, r3, lsl r8
    2174:	000d0d00 	andeq	r0, sp, r0, lsl #26
    2178:	0b3a0803 	bleq	e8418c <__Stack_Size+0xe83d8c>
    217c:	1349053b 	movtne	r0, #38203	; 0x953b
    2180:	00000a38 	andeq	r0, r0, r8, lsr sl
    2184:	4901010e 	stmdbmi	r1, {r1, r2, r3, r8}
    2188:	00130113 	andseq	r0, r3, r3, lsl r1
    218c:	00210f00 	eoreq	r0, r1, r0, lsl #30
    2190:	0b2f1349 	bleq	bc6ebc <__Stack_Size+0xbc6abc>
    2194:	13100000 	tstne	r0, #0	; 0x0
    2198:	3a0b0b01 	bcc	2c4da4 <__Stack_Size+0x2c49a4>
    219c:	01053b0b 	tsteq	r5, fp, lsl #22
    21a0:	11000013 	tstne	r0, r3, lsl r0
    21a4:	0b0b0113 	bleq	2c25f8 <__Stack_Size+0x2c21f8>
    21a8:	0b3b0b3a 	bleq	ec4e98 <__Stack_Size+0xec4a98>
    21ac:	00001301 	andeq	r1, r0, r1, lsl #6
    21b0:	03000d12 	movweq	r0, #3346	; 0xd12
    21b4:	3b0b3a0e 	blcc	2d09f4 <__Stack_Size+0x2d05f4>
    21b8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    21bc:	1300000a 	movwne	r0, #10	; 0xa
    21c0:	0c3f012e 	ldfeqs	f0, [pc], #-184
    21c4:	0b3a0e03 	bleq	e859d8 <__Stack_Size+0xe855d8>
    21c8:	0c270b3b 	stceq	11, cr0, [r7], #-236
    21cc:	01120111 	tsteq	r2, r1, lsl r1
    21d0:	13010a40 	movwne	r0, #6720	; 0x1a40
    21d4:	34140000 	ldrcc	r0, [r4]
    21d8:	3a0e0300 	bcc	382de0 <__Stack_Size+0x3829e0>
    21dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    21e0:	000a0213 	andeq	r0, sl, r3, lsl r2
    21e4:	00341500 	eorseq	r1, r4, r0, lsl #10
    21e8:	0b3a0e03 	bleq	e859fc <__Stack_Size+0xe855fc>
    21ec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    21f0:	05160000 	ldreq	r0, [r6]
    21f4:	3a0e0300 	bcc	382dfc <__Stack_Size+0x3829fc>
    21f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    21fc:	00060213 	andeq	r0, r6, r3, lsl r2
    2200:	012e1700 	teqeq	lr, r0, lsl #14
    2204:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    2208:	0b3b0b3a 	bleq	ec4ef8 <__Stack_Size+0xec4af8>
    220c:	01110c27 	tsteq	r1, r7, lsr #24
    2210:	06400112 	undefined
    2214:	00001301 	andeq	r1, r0, r1, lsl #6
    2218:	03003418 	movweq	r3, #1048	; 0x418
    221c:	3b0b3a0e 	blcc	2d0a5c <__Stack_Size+0x2d065c>
    2220:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2224:	19000006 	stmdbne	r0, {r1, r2}
    2228:	0b0b000f 	bleq	2c226c <__Stack_Size+0x2c1e6c>
    222c:	00001349 	andeq	r1, r0, r9, asr #6
    2230:	0300051a 	movweq	r0, #1306	; 0x51a
    2234:	3b0b3a0e 	blcc	2d0a74 <__Stack_Size+0x2d0674>
    2238:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    223c:	1b00000a 	blne	226c <__Stack_Size+0x1e6c>
    2240:	0c3f002e 	ldceq	0, cr0, [pc], #-184
    2244:	0b3a0e03 	bleq	e85a58 <__Stack_Size+0xe85658>
    2248:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
    224c:	01111349 	tsteq	r1, r9, asr #6
    2250:	0a400112 	beq	10026a0 <__Stack_Size+0x10022a0>
    2254:	2e1c0000 	wxorcs	wr0, wr12, wr0
    2258:	030c3f01 	movweq	r3, #52993	; 0xcf01
    225c:	3b0b3a0e 	blcc	2d0a9c <__Stack_Size+0x2d069c>
    2260:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
    2264:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2268:	010a4001 	tsteq	sl, r1
    226c:	1d000013 	stcne	0, cr0, [r0, #-76]
    2270:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2274:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    2278:	06021349 	streq	r1, [r2], -r9, asr #6
    227c:	341e0000 	ldrcc	r0, [lr]
    2280:	3a0e0300 	bcc	382e88 <__Stack_Size+0x382a88>
    2284:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2288:	1f000013 	svcne	0x00000013
    228c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2290:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    2294:	0a021349 	beq	86fc0 <__Stack_Size+0x86bc0>
    2298:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    229c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    22a0:	3b0b3a0e 	blcc	2d0ae0 <__Stack_Size+0x2d06e0>
    22a4:	110c2705 	tstne	ip, r5, lsl #14
    22a8:	40011201 	andmi	r1, r1, r1, lsl #4
    22ac:	0013010a 	andseq	r0, r3, sl, lsl #2
    22b0:	00052100 	andeq	r2, r5, r0, lsl #2
    22b4:	0b3a0e03 	bleq	e85ac8 <__Stack_Size+0xe856c8>
    22b8:	1349053b 	movtne	r0, #38203	; 0x953b
    22bc:	00000a02 	andeq	r0, r0, r2, lsl #20
    22c0:	3f002e22 	svccc	0x00002e22
    22c4:	3a0e030c 	bcc	382efc <__Stack_Size+0x382afc>
    22c8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    22cc:	1201110c 	andne	r1, r1, #3	; 0x3
    22d0:	000a4001 	andeq	r4, sl, r1
    22d4:	00342300 	eorseq	r2, r4, r0, lsl #6
    22d8:	0b3a0e03 	bleq	e85aec <__Stack_Size+0xe856ec>
    22dc:	1349053b 	movtne	r0, #38203	; 0x953b
    22e0:	00000a02 	andeq	r0, r0, r2, lsl #20
    22e4:	3f012e24 	svccc	0x00012e24
    22e8:	3a0e030c 	bcc	382f20 <__Stack_Size+0x382b20>
    22ec:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    22f0:	1201110c 	andne	r1, r1, #3	; 0x3
    22f4:	01064001 	tsteq	r6, r1
    22f8:	25000013 	strcs	r0, [r0, #-19]
    22fc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2300:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    2304:	06021349 	streq	r1, [r2], -r9, asr #6
    2308:	34260000 	strtcc	r0, [r6]
    230c:	3a080300 	bcc	202f14 <__Stack_Size+0x202b14>
    2310:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2314:	27000013 	smladcs	r0, r3, r0, r0
    2318:	0c3f002e 	ldceq	0, cr0, [pc], #-184
    231c:	0b3a0e03 	bleq	e85b30 <__Stack_Size+0xe85730>
    2320:	0c270b3b 	stceq	11, cr0, [r7], #-236
    2324:	01111349 	tsteq	r1, r9, asr #6
    2328:	06400112 	undefined
    232c:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
    2330:	030c3f00 	movweq	r3, #52992	; 0xcf00
    2334:	3b0b3a0e 	blcc	2d0b74 <__Stack_Size+0x2d0774>
    2338:	110c270b 	tstne	ip, fp, lsl #14
    233c:	40011201 	andmi	r1, r1, r1, lsl #4
    2340:	00000006 	andeq	r0, r0, r6
    2344:	25011101 	strcs	r1, [r1, #-257]
    2348:	030b130e 	movweq	r1, #45838	; 0xb30e
    234c:	110e1b0e 	tstne	lr, lr, lsl #22
    2350:	10011201 	andne	r1, r1, r1, lsl #4
    2354:	02000006 	andeq	r0, r0, #6	; 0x6
    2358:	0b0b0024 	bleq	2c23f0 <__Stack_Size+0x2c1ff0>
    235c:	0e030b3e 	vmoveq.16	d3[0], r0
    2360:	16030000 	strne	r0, [r3], -r0
    2364:	3a080300 	bcc	202f6c <__Stack_Size+0x202b6c>
    2368:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    236c:	04000013 	streq	r0, [r0], #-19
    2370:	13490035 	movtne	r0, #36917	; 0x9035
    2374:	04050000 	streq	r0, [r5]
    2378:	3a0b0b01 	bcc	2c4f84 <__Stack_Size+0x2c4b84>
    237c:	010b3b0b 	tsteq	fp, fp, lsl #22
    2380:	06000013 	undefined
    2384:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    2388:	00000d1c 	andeq	r0, r0, ip, lsl sp
    238c:	03002807 	movweq	r2, #2055	; 0x807
    2390:	000d1c08 	andeq	r1, sp, r8, lsl #24
    2394:	00160800 	andseq	r0, r6, r0, lsl #16
    2398:	0b3a0e03 	bleq	e85bac <__Stack_Size+0xe857ac>
    239c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    23a0:	24090000 	strcs	r0, [r9]
    23a4:	3e0b0b00 	fmacdcc	d0, d11, d0
    23a8:	0a00000b 	beq	23dc <__Stack_Size+0x1fdc>
    23ac:	0b0b0113 	bleq	2c2800 <__Stack_Size+0x2c2400>
    23b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    23b4:	00001301 	andeq	r1, r0, r1, lsl #6
    23b8:	03000d0b 	movweq	r0, #3339	; 0xd0b
    23bc:	3b0b3a08 	blcc	2d0be4 <__Stack_Size+0x2d07e4>
    23c0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    23c4:	0c00000a 	stceq	0, cr0, [r0], {10}
    23c8:	0c3f012e 	ldfeqs	f0, [pc], #-184
    23cc:	0b3a0e03 	bleq	e85be0 <__Stack_Size+0xe857e0>
    23d0:	0c270b3b 	stceq	11, cr0, [r7], #-236
    23d4:	01120111 	tsteq	r2, r1, lsl r1
    23d8:	13010a40 	movwne	r0, #6720	; 0x1a40
    23dc:	050d0000 	streq	r0, [sp]
    23e0:	3a0e0300 	bcc	382fe8 <__Stack_Size+0x382be8>
    23e4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    23e8:	000a0213 	andeq	r0, sl, r3, lsl r2
    23ec:	00050e00 	andeq	r0, r5, r0, lsl #28
    23f0:	0b3a0e03 	bleq	e85c04 <__Stack_Size+0xe85804>
    23f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    23f8:	00000602 	andeq	r0, r0, r2, lsl #12
    23fc:	0300340f 	movweq	r3, #1039	; 0x40f
    2400:	3b0b3a0e 	blcc	2d0c40 <__Stack_Size+0x2d0840>
    2404:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2408:	10000006 	andne	r0, r0, r6
    240c:	0c3f012e 	ldfeqs	f0, [pc], #-184
    2410:	0b3a0e03 	bleq	e85c24 <__Stack_Size+0xe85824>
    2414:	0c270b3b 	stceq	11, cr0, [r7], #-236
    2418:	01111349 	tsteq	r1, r9, asr #6
    241c:	0a400112 	beq	100286c <__Stack_Size+0x100246c>
    2420:	00001301 	andeq	r1, r0, r1, lsl #6
    2424:	03003411 	movweq	r3, #1041	; 0x411
    2428:	3b0b3a0e 	blcc	2d0c68 <__Stack_Size+0x2d0868>
    242c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2430:	012e1200 	teqeq	lr, r0, lsl #4
    2434:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    2438:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    243c:	01110c27 	tsteq	r1, r7, lsr #24
    2440:	0a400112 	beq	1002890 <__Stack_Size+0x1002490>
    2444:	00001301 	andeq	r1, r0, r1, lsl #6
    2448:	03000513 	movweq	r0, #1299	; 0x513
    244c:	3b0b3a0e 	blcc	2d0c8c <__Stack_Size+0x2d088c>
    2450:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2454:	1400000a 	strne	r0, [r0], #-10
    2458:	0c3f002e 	ldceq	0, cr0, [pc], #-184
    245c:	0b3a0e03 	bleq	e85c70 <__Stack_Size+0xe85870>
    2460:	0c270b3b 	stceq	11, cr0, [r7], #-236
    2464:	01120111 	tsteq	r2, r1, lsl r1
    2468:	00000640 	andeq	r0, r0, r0, asr #12
    246c:	3f012e15 	svccc	0x00012e15
    2470:	3a0e030c 	bcc	3830a8 <__Stack_Size+0x382ca8>
    2474:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2478:	1201110c 	andne	r1, r1, #3	; 0x3
    247c:	01064001 	tsteq	r6, r1
    2480:	00000013 	andeq	r0, r0, r3, lsl r0
    2484:	25011101 	strcs	r1, [r1, #-257]
    2488:	030b130e 	movweq	r1, #45838	; 0xb30e
    248c:	110e1b0e 	tstne	lr, lr, lsl #22
    2490:	10011201 	andne	r1, r1, r1, lsl #4
    2494:	02000006 	andeq	r0, r0, #6	; 0x6
    2498:	0b0b0024 	bleq	2c2530 <__Stack_Size+0x2c2130>
    249c:	0e030b3e 	vmoveq.16	d3[0], r0
    24a0:	16030000 	strne	r0, [r3], -r0
    24a4:	3a080300 	bcc	2030ac <__Stack_Size+0x202cac>
    24a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    24ac:	04000013 	streq	r0, [r0], #-19
    24b0:	13490035 	movtne	r0, #36917	; 0x9035
    24b4:	04050000 	streq	r0, [r5]
    24b8:	3a0b0b01 	bcc	2c50c4 <__Stack_Size+0x2c4cc4>
    24bc:	010b3b0b 	tsteq	fp, fp, lsl #22
    24c0:	06000013 	undefined
    24c4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    24c8:	00000d1c 	andeq	r0, r0, ip, lsl sp
    24cc:	03002807 	movweq	r2, #2055	; 0x807
    24d0:	000d1c08 	andeq	r1, sp, r8, lsl #24
    24d4:	00160800 	andseq	r0, r6, r0, lsl #16
    24d8:	0b3a0e03 	bleq	e85cec <__Stack_Size+0xe858ec>
    24dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    24e0:	24090000 	strcs	r0, [r9]
    24e4:	3e0b0b00 	fmacdcc	d0, d11, d0
    24e8:	0a00000b 	beq	251c <__Stack_Size+0x211c>
    24ec:	0b0b0113 	bleq	2c2940 <__Stack_Size+0x2c2540>
    24f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    24f4:	00001301 	andeq	r1, r0, r1, lsl #6
    24f8:	03000d0b 	movweq	r0, #3339	; 0xd0b
    24fc:	3b0b3a08 	blcc	2d0d24 <__Stack_Size+0x2d0924>
    2500:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    2504:	0c00000a 	stceq	0, cr0, [r0], {10}
    2508:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    250c:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    2510:	0a381349 	beq	e0723c <__Stack_Size+0xe06e3c>
    2514:	130d0000 	movwne	r0, #53248	; 0xd000
    2518:	3a0b0b01 	bcc	2c5124 <__Stack_Size+0x2c4d24>
    251c:	010b3b0b 	tsteq	fp, fp, lsl #22
    2520:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    2524:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2528:	0b3b0b3a 	bleq	ec5218 <__Stack_Size+0xec4e18>
    252c:	0a381349 	beq	e07258 <__Stack_Size+0xe06e58>
    2530:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    2534:	030c3f01 	movweq	r3, #52993	; 0xcf01
    2538:	3b0b3a0e 	blcc	2d0d78 <__Stack_Size+0x2d0978>
    253c:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
    2540:	010b2013 	tsteq	fp, r3, lsl r0
    2544:	10000013 	andne	r0, r0, r3, lsl r0
    2548:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    254c:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    2550:	00001349 	andeq	r1, r0, r9, asr #6
    2554:	03003411 	movweq	r3, #1041	; 0x411
    2558:	3b0b3a08 	blcc	2d0d80 <__Stack_Size+0x2d0980>
    255c:	00134905 	andseq	r4, r3, r5, lsl #18
    2560:	00341200 	eorseq	r1, r4, r0, lsl #4
    2564:	0b3a0e03 	bleq	e85d78 <__Stack_Size+0xe85978>
    2568:	1349053b 	movtne	r0, #38203	; 0x953b
    256c:	2e130000 	wxorcs	wr0, wr3, wr0
    2570:	030c3f00 	movweq	r3, #52992	; 0xcf00
    2574:	3b0b3a0e 	blcc	2d0db4 <__Stack_Size+0x2d09b4>
    2578:	110c270b 	tstne	ip, fp, lsl #14
    257c:	40011201 	andmi	r1, r1, r1, lsl #4
    2580:	1400000a 	strne	r0, [r0], #-10
    2584:	0c3f012e 	ldfeqs	f0, [pc], #-184
    2588:	0b3a0e03 	bleq	e85d9c <__Stack_Size+0xe8599c>
    258c:	0c270b3b 	stceq	11, cr0, [r7], #-236
    2590:	01120111 	tsteq	r2, r1, lsl r1
    2594:	13010a40 	movwne	r0, #6720	; 0x1a40
    2598:	05150000 	ldreq	r0, [r5]
    259c:	3a0e0300 	bcc	3831a4 <__Stack_Size+0x382da4>
    25a0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    25a4:	000a0213 	andeq	r0, sl, r3, lsl r2
    25a8:	012e1600 	teqeq	lr, r0, lsl #12
    25ac:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    25b0:	0b3b0b3a 	bleq	ec52a0 <__Stack_Size+0xec4ea0>
    25b4:	13490c27 	movtne	r0, #39975	; 0x9c27
    25b8:	01120111 	tsteq	r2, r1, lsl r1
    25bc:	13010640 	movwne	r0, #5696	; 0x1640
    25c0:	34170000 	ldrcc	r0, [r7]
    25c4:	3a0e0300 	bcc	3831cc <__Stack_Size+0x382dcc>
    25c8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    25cc:	00060213 	andeq	r0, r6, r3, lsl r2
    25d0:	00341800 	eorseq	r1, r4, r0, lsl #16
    25d4:	0b3a0e03 	bleq	e85de8 <__Stack_Size+0xe859e8>
    25d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    25dc:	1d190000 	ldcne	0, cr0, [r9]
    25e0:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    25e4:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    25e8:	010b590b 	tsteq	fp, fp, lsl #18
    25ec:	1a000013 	bne	2640 <__Stack_Size+0x2240>
    25f0:	13310005 	teqne	r1, #5	; 0x5
    25f4:	0b1b0000 	bleq	6c25fc <__Stack_Size+0x6c21fc>
    25f8:	00065501 	andeq	r5, r6, r1, lsl #10
    25fc:	00341c00 	eorseq	r1, r4, r0, lsl #24
    2600:	00001331 	andeq	r1, r0, r1, lsr r3
    2604:	3100341d 	tstcc	r0, sp, lsl r4
    2608:	000a0213 	andeq	r0, sl, r3, lsl r2
    260c:	011d1e00 	tsteq	sp, r0, lsl #28
    2610:	01111331 	tsteq	r1, r1, lsr r3
    2614:	0b580112 	bleq	1602a64 <__Stack_Size+0x1602664>
    2618:	00000b59 	andeq	r0, r0, r9, asr fp
    261c:	11010b1f 	tstne	r1, pc, lsl fp
    2620:	00011201 	andeq	r1, r1, r1, lsl #4
    2624:	00342000 	eorseq	r2, r4, r0
    2628:	06021331 	undefined
    262c:	34210000 	strtcc	r0, [r1]
    2630:	3a0e0300 	bcc	383238 <__Stack_Size+0x382e38>
    2634:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2638:	000a0213 	andeq	r0, sl, r3, lsl r2
    263c:	012e2200 	teqeq	lr, r0, lsl #4
    2640:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    2644:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    2648:	01110c27 	tsteq	r1, r7, lsr #24
    264c:	0a400112 	beq	1002a9c <__Stack_Size+0x100269c>
    2650:	00001301 	andeq	r1, r0, r1, lsl #6
    2654:	03000523 	movweq	r0, #1315	; 0x523
    2658:	3b0b3a0e 	blcc	2d0e98 <__Stack_Size+0x2d0a98>
    265c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2660:	2400000a 	strcs	r0, [r0], #-10
    2664:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2668:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    266c:	06021349 	streq	r1, [r2], -r9, asr #6
    2670:	34250000 	strtcc	r0, [r5]
    2674:	3a0e0300 	bcc	38327c <__Stack_Size+0x382e7c>
    2678:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    267c:	00060213 	andeq	r0, r6, r3, lsl r2
    2680:	002e2600 	eoreq	r2, lr, r0, lsl #12
    2684:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    2688:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    268c:	13490c27 	movtne	r0, #39975	; 0x9c27
    2690:	01120111 	tsteq	r2, r1, lsl r1
    2694:	00000a40 	andeq	r0, r0, r0, asr #20
    2698:	03003427 	movweq	r3, #1063	; 0x427
    269c:	3b0b3a0e 	blcc	2d0edc <__Stack_Size+0x2d0adc>
    26a0:	02134905 	andseq	r4, r3, #81920	; 0x14000
    26a4:	2800000a 	stmdacs	r0, {r1, r3}
    26a8:	08030034 	stmdaeq	r3, {r2, r4, r5}
    26ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    26b0:	06021349 	streq	r1, [r2], -r9, asr #6
    26b4:	0f290000 	svceq	0x00290000
    26b8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    26bc:	2a000013 	bcs	2710 <__Stack_Size+0x2310>
    26c0:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
    26c4:	01120111 	tsteq	r2, r1, lsl r1
    26c8:	13010a40 	movwne	r0, #6720	; 0x1a40
    26cc:	052b0000 	streq	r0, [fp]!
    26d0:	02133100 	andseq	r3, r3, #0	; 0x0
    26d4:	2c000006 	stccs	0, cr0, [r0], {6}
    26d8:	0c3f002e 	ldceq	0, cr0, [pc], #-184
    26dc:	0b3a0e03 	bleq	e85ef0 <__Stack_Size+0xe85af0>
    26e0:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
    26e4:	01120111 	tsteq	r2, r1, lsl r1
    26e8:	00000a40 	andeq	r0, r0, r0, asr #20
    26ec:	3f012e2d 	svccc	0x00012e2d
    26f0:	3a0e030c 	bcc	383328 <__Stack_Size+0x382f28>
    26f4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    26f8:	1113490c 	tstne	r3, ip, lsl #18
    26fc:	40011201 	andmi	r1, r1, r1, lsl #4
    2700:	0013010a 	andseq	r0, r3, sl, lsl #2
    2704:	01012e00 	tsteq	r1, r0, lsl #28
    2708:	13011349 	movwne	r1, #4937	; 0x1349
    270c:	212f0000 	teqcs	pc, r0
    2710:	2f134900 	svccs	0x00134900
    2714:	3000000b 	andcc	r0, r0, fp
    2718:	13490026 	movtne	r0, #36902	; 0x9026
    271c:	01000000 	tsteq	r0, r0
    2720:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2724:	0e030b13 	vmoveq.32	d3[0], r0
    2728:	01110e1b 	tsteq	r1, fp, lsl lr
    272c:	06100112 	undefined
    2730:	24020000 	strcs	r0, [r2]
    2734:	3e0b0b00 	fmacdcc	d0, d11, d0
    2738:	000e030b 	andeq	r0, lr, fp, lsl #6
    273c:	00160300 	andseq	r0, r6, r0, lsl #6
    2740:	0b3a0803 	bleq	e84754 <__Stack_Size+0xe84354>
    2744:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2748:	35040000 	strcc	r0, [r4]
    274c:	00134900 	andseq	r4, r3, r0, lsl #18
    2750:	00260500 	eoreq	r0, r6, r0, lsl #10
    2754:	00001349 	andeq	r1, r0, r9, asr #6
    2758:	0b010406 	bleq	43778 <__Stack_Size+0x43378>
    275c:	3b0b3a0b 	blcc	2d0f90 <__Stack_Size+0x2d0b90>
    2760:	0013010b 	andseq	r0, r3, fp, lsl #2
    2764:	00280700 	eoreq	r0, r8, r0, lsl #14
    2768:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    276c:	28080000 	stmdacs	r8, {}
    2770:	1c080300 	stcne	3, cr0, [r8], {0}
    2774:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    2778:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    277c:	0b3b0b3a 	bleq	ec546c <__Stack_Size+0xec506c>
    2780:	00001349 	andeq	r1, r0, r9, asr #6
    2784:	0b00240a 	bleq	b7b4 <__Stack_Size+0xb3b4>
    2788:	000b3e0b 	andeq	r3, fp, fp, lsl #28
    278c:	01130b00 	tsteq	r3, r0, lsl #22
    2790:	0b3a0b0b 	bleq	e853c4 <__Stack_Size+0xe84fc4>
    2794:	1301053b 	movwne	r0, #5435	; 0x153b
    2798:	0d0c0000 	stceq	0, cr0, [ip]
    279c:	3a0e0300 	bcc	3833a4 <__Stack_Size+0x382fa4>
    27a0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    27a4:	000a3813 	andeq	r3, sl, r3, lsl r8
    27a8:	000d0d00 	andeq	r0, sp, r0, lsl #26
    27ac:	0b3a0803 	bleq	e847c0 <__Stack_Size+0xe843c0>
    27b0:	1349053b 	movtne	r0, #38203	; 0x953b
    27b4:	00000a38 	andeq	r0, r0, r8, lsr sl
    27b8:	3f012e0e 	svccc	0x00012e0e
    27bc:	3a0e030c 	bcc	3833f4 <__Stack_Size+0x382ff4>
    27c0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    27c4:	1201110c 	andne	r1, r1, #3	; 0x3
    27c8:	010a4001 	tsteq	sl, r1
    27cc:	0f000013 	svceq	0x00000013
    27d0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    27d4:	0b3b0b3a 	bleq	ec54c4 <__Stack_Size+0xec50c4>
    27d8:	0a021349 	beq	87504 <__Stack_Size+0x87104>
    27dc:	2e100000 	wxorcs	wr0, wr0, wr0
    27e0:	030c3f00 	movweq	r3, #52992	; 0xcf00
    27e4:	3b0b3a0e 	blcc	2d1024 <__Stack_Size+0x2d0c24>
    27e8:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    27ec:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    27f0:	000a4001 	andeq	r4, sl, r1
    27f4:	012e1100 	teqeq	lr, r0, lsl #2
    27f8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    27fc:	0b3b0b3a 	bleq	ec54ec <__Stack_Size+0xec50ec>
    2800:	13490c27 	movtne	r0, #39975	; 0x9c27
    2804:	01120111 	tsteq	r2, r1, lsl r1
    2808:	00000a40 	andeq	r0, r0, r0, asr #20
    280c:	03000512 	movweq	r0, #1298	; 0x512
    2810:	3b0b3a0e 	blcc	2d1050 <__Stack_Size+0x2d0c50>
    2814:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2818:	13000006 	movwne	r0, #6	; 0x6
    281c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2820:	0b3b0b3a 	bleq	ec5510 <__Stack_Size+0xec5110>
    2824:	06021349 	streq	r1, [r2], -r9, asr #6
    2828:	34140000 	ldrcc	r0, [r4]
    282c:	3a080300 	bcc	203434 <__Stack_Size+0x203034>
    2830:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2834:	15000013 	strne	r0, [r0, #-19]
    2838:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    283c:	0b3b0b3a 	bleq	ec552c <__Stack_Size+0xec512c>
    2840:	00001349 	andeq	r1, r0, r9, asr #6
    2844:	01110100 	tsteq	r1, r0, lsl #2
    2848:	0b130e25 	bleq	4c60e4 <__Stack_Size+0x4c5ce4>
    284c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2850:	01120111 	tsteq	r2, r1, lsl r1
    2854:	00000610 	andeq	r0, r0, r0, lsl r6
    2858:	0b002402 	bleq	b868 <__Stack_Size+0xb468>
    285c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2860:	0300000e 	movweq	r0, #14	; 0xe
    2864:	08030016 	stmdaeq	r3, {r1, r2, r4}
    2868:	0b3b0b3a 	bleq	ec5558 <__Stack_Size+0xec5158>
    286c:	00001349 	andeq	r1, r0, r9, asr #6
    2870:	49003504 	stmdbmi	r0, {r2, r8, sl, ip, sp}
    2874:	05000013 	streq	r0, [r0, #-19]
    2878:	0b0b0104 	bleq	2c2c90 <__Stack_Size+0x2c2890>
    287c:	0b3b0b3a 	bleq	ec556c <__Stack_Size+0xec516c>
    2880:	00001301 	andeq	r1, r0, r1, lsl #6
    2884:	03002806 	movweq	r2, #2054	; 0x806
    2888:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    288c:	00280700 	eoreq	r0, r8, r0, lsl #14
    2890:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
    2894:	16080000 	strne	r0, [r8], -r0
    2898:	3a0e0300 	bcc	3834a0 <__Stack_Size+0x3830a0>
    289c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    28a0:	09000013 	stmdbeq	r0, {r0, r1, r4}
    28a4:	0b0b0024 	bleq	2c293c <__Stack_Size+0x2c253c>
    28a8:	00000b3e 	andeq	r0, r0, lr, lsr fp
    28ac:	0b01130a 	bleq	474dc <__Stack_Size+0x470dc>
    28b0:	3b0b3a0b 	blcc	2d10e4 <__Stack_Size+0x2d0ce4>
    28b4:	00130105 	andseq	r0, r3, r5, lsl #2
    28b8:	000d0b00 	andeq	r0, sp, r0, lsl #22
    28bc:	0b3a0803 	bleq	e848d0 <__Stack_Size+0xe844d0>
    28c0:	1349053b 	movtne	r0, #38203	; 0x953b
    28c4:	00000a38 	andeq	r0, r0, r8, lsr sl
    28c8:	03000d0c 	movweq	r0, #3340	; 0xd0c
    28cc:	3b0b3a0e 	blcc	2d110c <__Stack_Size+0x2d0d0c>
    28d0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    28d4:	0d00000a 	stceq	0, cr0, [r0, #-40]
    28d8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    28dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    28e0:	00001349 	andeq	r1, r0, r9, asr #6
    28e4:	0b01130e 	bleq	47524 <__Stack_Size+0x47124>
    28e8:	3b0b3a0b 	blcc	2d111c <__Stack_Size+0x2d0d1c>
    28ec:	0013010b 	andseq	r0, r3, fp, lsl #2
    28f0:	000d0f00 	andeq	r0, sp, r0, lsl #30
    28f4:	0b3a0e03 	bleq	e86108 <__Stack_Size+0xe85d08>
    28f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    28fc:	00000a38 	andeq	r0, r0, r8, lsr sl
    2900:	3f012e10 	svccc	0x00012e10
    2904:	3a0e030c 	bcc	38353c <__Stack_Size+0x38313c>
    2908:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    290c:	1201110c 	andne	r1, r1, #3	; 0x3
    2910:	010a4001 	tsteq	sl, r1
    2914:	11000013 	tstne	r0, r3, lsl r0
    2918:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    291c:	0b3b0b3a 	bleq	ec560c <__Stack_Size+0xec520c>
    2920:	0a021349 	beq	8764c <__Stack_Size+0x8724c>
    2924:	0f120000 	svceq	0x00120000
    2928:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    292c:	13000013 	movwne	r0, #19	; 0x13
    2930:	0c3f012e 	ldfeqs	f0, [pc], #-184
    2934:	0b3a0e03 	bleq	e86148 <__Stack_Size+0xe85d48>
    2938:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
    293c:	01120111 	tsteq	r2, r1, lsl r1
    2940:	13010a40 	movwne	r0, #6720	; 0x1a40
    2944:	05140000 	ldreq	r0, [r4]
    2948:	3a0e0300 	bcc	383550 <__Stack_Size+0x383150>
    294c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2950:	00060213 	andeq	r0, r6, r3, lsl r2
    2954:	00341500 	eorseq	r1, r4, r0, lsl #10
    2958:	0b3a0e03 	bleq	e8616c <__Stack_Size+0xe85d6c>
    295c:	1349053b 	movtne	r0, #38203	; 0x953b
    2960:	00000a02 	andeq	r0, r0, r2, lsl #20
    2964:	03000516 	movweq	r0, #1302	; 0x516
    2968:	3b0b3a0e 	blcc	2d11a8 <__Stack_Size+0x2d0da8>
    296c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2970:	1700000a 	strne	r0, [r0, -sl]
    2974:	0c3f012e 	ldfeqs	f0, [pc], #-184
    2978:	0b3a0e03 	bleq	e8618c <__Stack_Size+0xe85d8c>
    297c:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
    2980:	01120111 	tsteq	r2, r1, lsl r1
    2984:	13010640 	movwne	r0, #5696	; 0x1640
    2988:	05180000 	ldreq	r0, [r8]
    298c:	3a0e0300 	bcc	383594 <__Stack_Size+0x383194>
    2990:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2994:	00060213 	andeq	r0, r6, r3, lsl r2
    2998:	00341900 	eorseq	r1, r4, r0, lsl #18
    299c:	0b3a0e03 	bleq	e861b0 <__Stack_Size+0xe85db0>
    29a0:	1349053b 	movtne	r0, #38203	; 0x953b
    29a4:	341a0000 	ldrcc	r0, [sl]
    29a8:	3a0e0300 	bcc	3835b0 <__Stack_Size+0x3831b0>
    29ac:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    29b0:	00060213 	andeq	r0, r6, r3, lsl r2
    29b4:	012e1b00 	teqeq	lr, r0, lsl #22
    29b8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    29bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    29c0:	13490c27 	movtne	r0, #39975	; 0x9c27
    29c4:	01120111 	tsteq	r2, r1, lsl r1
    29c8:	13010a40 	movwne	r0, #6720	; 0x1a40
    29cc:	2e1c0000 	wxorcs	wr0, wr12, wr0
    29d0:	030c3f01 	movweq	r3, #52993	; 0xcf01
    29d4:	3b0b3a0e 	blcc	2d1214 <__Stack_Size+0x2d0e14>
    29d8:	110c270b 	tstne	ip, fp, lsl #14
    29dc:	40011201 	andmi	r1, r1, r1, lsl #4
    29e0:	00130106 	andseq	r0, r3, r6, lsl #2
    29e4:	00341d00 	eorseq	r1, r4, r0, lsl #26
    29e8:	0b3a0e03 	bleq	e861fc <__Stack_Size+0xe85dfc>
    29ec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    29f0:	00000602 	andeq	r0, r0, r2, lsl #12
    29f4:	0300341e 	movweq	r3, #1054	; 0x41e
    29f8:	3b0b3a0e 	blcc	2d1238 <__Stack_Size+0x2d0e38>
    29fc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2a00:	1f00000a 	svcne	0x0000000a
    2a04:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2a08:	0b3b0b3a 	bleq	ec56f8 <__Stack_Size+0xec52f8>
    2a0c:	00001349 	andeq	r1, r0, r9, asr #6
    2a10:	3f012e20 	svccc	0x00012e20
    2a14:	3a0e030c 	bcc	38364c <__Stack_Size+0x38324c>
    2a18:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2a1c:	1201110c 	andne	r1, r1, #3	; 0x3
    2a20:	00064001 	andeq	r4, r6, r1
    2a24:	11010000 	tstne	r1, r0
    2a28:	11061000 	tstne	r6, r0
    2a2c:	03011201 	movweq	r1, #4609	; 0x1201
    2a30:	25081b08 	strcs	r1, [r8, #-2824]
    2a34:	00051308 	andeq	r1, r5, r8, lsl #6
    2a38:	11010000 	tstne	r1, r0
    2a3c:	130e2501 	movwne	r2, #58625	; 0xe501
    2a40:	1b0e030b 	blne	383674 <__Stack_Size+0x383274>
    2a44:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    2a48:	00061001 	andeq	r1, r6, r1
    2a4c:	00240200 	eoreq	r0, r4, r0, lsl #4
    2a50:	0b3e0b0b 	bleq	f85684 <__Stack_Size+0xf85284>
    2a54:	00000e03 	andeq	r0, r0, r3, lsl #28
    2a58:	0b002403 	bleq	ba6c <__Stack_Size+0xb66c>
    2a5c:	000b3e0b 	andeq	r3, fp, fp, lsl #28
    2a60:	012e0400 	teqeq	lr, r0, lsl #8
    2a64:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    2a68:	0b3b0b3a 	bleq	ec5758 <__Stack_Size+0xec5358>
    2a6c:	01110c27 	tsteq	r1, r7, lsr #24
    2a70:	06400112 	undefined
    2a74:	00001301 	andeq	r1, r0, r1, lsl #6
    2a78:	03003405 	movweq	r3, #1029	; 0x405
    2a7c:	3b0b3a0e 	blcc	2d12bc <__Stack_Size+0x2d0ebc>
    2a80:	0013490b 	andseq	r4, r3, fp, lsl #18
    2a84:	00340600 	eorseq	r0, r4, r0, lsl #12
    2a88:	0b3a0e03 	bleq	e8629c <__Stack_Size+0xe85e9c>
    2a8c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2a90:	00000602 	andeq	r0, r0, r2, lsl #12
    2a94:	0b000f07 	bleq	66b8 <__Stack_Size+0x62b8>
    2a98:	0013490b 	andseq	r4, r3, fp, lsl #18
    2a9c:	00340800 	eorseq	r0, r4, r0, lsl #16
    2aa0:	0b3a0e03 	bleq	e862b4 <__Stack_Size+0xe85eb4>
    2aa4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2aa8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252
    2aac:	34090000 	strcc	r0, [r9]
    2ab0:	3a0e0300 	bcc	3836b8 <__Stack_Size+0x3832b8>
    2ab4:	3f0b3b0b 	svccc	0x000b3b0b
    2ab8:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    2abc:	01010a00 	tsteq	r1, r0, lsl #20
    2ac0:	13011349 	movwne	r1, #4937	; 0x1349
    2ac4:	210b0000 	tstcs	fp, r0
    2ac8:	2f134900 	svccs	0x00134900
    2acc:	0c00000b 	stceq	0, cr0, [r0], {11}
    2ad0:	0c270015 	stceq	0, cr0, [r7], #-84
    2ad4:	340d0000 	strcc	r0, [sp]
    2ad8:	3a0e0300 	bcc	3836e0 <__Stack_Size+0x3832e0>
    2adc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ae0:	020c3f13 	andeq	r3, ip, #76	; 0x4c
    2ae4:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
    2ae8:	13490026 	movtne	r0, #36902	; 0x9026
    2aec:	01000000 	tsteq	r0, r0
    2af0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2af4:	0e030b13 	vmoveq.32	d3[0], r0
    2af8:	01110e1b 	tsteq	r1, fp, lsl lr
    2afc:	06100112 	undefined
    2b00:	24020000 	strcs	r0, [r2]
    2b04:	3e0b0b00 	fmacdcc	d0, d11, d0
    2b08:	000e030b 	andeq	r0, lr, fp, lsl #6
    2b0c:	00240300 	eoreq	r0, r4, r0, lsl #6
    2b10:	0b3e0b0b 	bleq	f85744 <__Stack_Size+0xf85344>
    2b14:	00000803 	andeq	r0, r0, r3, lsl #16
    2b18:	0b002404 	bleq	bb30 <__Stack_Size+0xb730>
    2b1c:	000b3e0b 	andeq	r3, fp, fp, lsl #28
    2b20:	00150500 	andseq	r0, r5, r0, lsl #10
    2b24:	00000c27 	andeq	r0, r0, r7, lsr #24
    2b28:	0b000f06 	bleq	6748 <__Stack_Size+0x6348>
    2b2c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2b30:	01040700 	tsteq	r4, r0, lsl #14
    2b34:	0b0b0e03 	bleq	2c6348 <__Stack_Size+0x2c5f48>
    2b38:	0b3b0b3a 	bleq	ec5828 <__Stack_Size+0xec5428>
    2b3c:	00001301 	andeq	r1, r0, r1, lsl #6
    2b40:	03002808 	movweq	r2, #2056	; 0x808
    2b44:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    2b48:	012e0900 	teqeq	lr, r0, lsl #18
    2b4c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    2b50:	0b3b0b3a 	bleq	ec5840 <__Stack_Size+0xec5440>
    2b54:	13490c27 	movtne	r0, #39975	; 0x9c27
    2b58:	01120111 	tsteq	r2, r1, lsl r1
    2b5c:	00000640 	andeq	r0, r0, r0, asr #12
    2b60:	0300050a 	movweq	r0, #1290	; 0x50a
    2b64:	3b0b3a08 	blcc	2d138c <__Stack_Size+0x2d0f8c>
    2b68:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2b6c:	00000006 	andeq	r0, r0, r6
    2b70:	25011101 	strcs	r1, [r1, #-257]
    2b74:	030b130e 	movweq	r1, #45838	; 0xb30e
    2b78:	110e1b0e 	tstne	lr, lr, lsl #22
    2b7c:	10011201 	andne	r1, r1, r1, lsl #4
    2b80:	02000006 	andeq	r0, r0, #6	; 0x6
    2b84:	0b0b0024 	bleq	2c2c1c <__Stack_Size+0x2c281c>
    2b88:	0e030b3e 	vmoveq.16	d3[0], r0
    2b8c:	24030000 	strcs	r0, [r3]
    2b90:	3e0b0b00 	fmacdcc	d0, d11, d0
    2b94:	0008030b 	andeq	r0, r8, fp, lsl #6
    2b98:	00160400 	andseq	r0, r6, r0, lsl #8
    2b9c:	0b3a0e03 	bleq	e863b0 <__Stack_Size+0xe85fb0>
    2ba0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2ba4:	16050000 	strne	r0, [r5], -r0
    2ba8:	3a0e0300 	bcc	3837b0 <__Stack_Size+0x3833b0>
    2bac:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2bb0:	06000013 	undefined
    2bb4:	0b0b0117 	bleq	2c3018 <__Stack_Size+0x2c2c18>
    2bb8:	0b3b0b3a 	bleq	ec58a8 <__Stack_Size+0xec54a8>
    2bbc:	00001301 	andeq	r1, r0, r1, lsl #6
    2bc0:	03000d07 	movweq	r0, #3335	; 0xd07
    2bc4:	3b0b3a0e 	blcc	2d1404 <__Stack_Size+0x2d1004>
    2bc8:	0013490b 	andseq	r4, r3, fp, lsl #18
    2bcc:	01010800 	tsteq	r1, r0, lsl #16
    2bd0:	13011349 	movwne	r1, #4937	; 0x1349
    2bd4:	21090000 	tstcs	r9, r0
    2bd8:	2f134900 	svccs	0x00134900
    2bdc:	0a00000b 	beq	2c10 <__Stack_Size+0x2810>
    2be0:	0b0b0024 	bleq	2c2c78 <__Stack_Size+0x2c2878>
    2be4:	00000b3e 	andeq	r0, r0, lr, lsr fp
    2be8:	0b01130b 	bleq	4781c <__Stack_Size+0x4741c>
    2bec:	3b0b3a0b 	blcc	2d1420 <__Stack_Size+0x2d1020>
    2bf0:	0013010b 	andseq	r0, r3, fp, lsl #2
    2bf4:	000d0c00 	andeq	r0, sp, r0, lsl #24
    2bf8:	0b3a0e03 	bleq	e8640c <__Stack_Size+0xe8600c>
    2bfc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2c00:	00000a38 	andeq	r0, r0, r8, lsr sl
    2c04:	0b000f0d 	bleq	6840 <__Stack_Size+0x6440>
    2c08:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    2c0c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2c10:	0b3a0b0b 	bleq	e85844 <__Stack_Size+0xe85444>
    2c14:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2c18:	0d0f0000 	stceq	0, cr0, [pc]
    2c1c:	3a080300 	bcc	203824 <__Stack_Size+0x203424>
    2c20:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c24:	000a3813 	andeq	r3, sl, r3, lsl r8
    2c28:	000f1000 	andeq	r1, pc, r0
    2c2c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2c30:	13110000 	tstne	r1, #0	; 0x0
    2c34:	0b0e0301 	bleq	383840 <__Stack_Size+0x383440>
    2c38:	3b0b3a05 	blcc	2d1454 <__Stack_Size+0x2d1054>
    2c3c:	0013010b 	andseq	r0, r3, fp, lsl #2
    2c40:	00151200 	andseq	r1, r5, r0, lsl #4
    2c44:	00000c27 	andeq	r0, r0, r7, lsr #24
    2c48:	27011513 	smladcs	r1, r3, r5, r1
    2c4c:	0113490c 	tsteq	r3, ip, lsl #18
    2c50:	14000013 	strne	r0, [r0], #-19
    2c54:	13490005 	movtne	r0, #36869	; 0x9005
    2c58:	0d150000 	ldceq	0, cr0, [r5]
    2c5c:	3a0e0300 	bcc	383864 <__Stack_Size+0x383464>
    2c60:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c64:	000a3813 	andeq	r3, sl, r3, lsl r8
    2c68:	00261600 	eoreq	r1, r6, r0, lsl #12
    2c6c:	00001349 	andeq	r1, r0, r9, asr #6
    2c70:	03011317 	movweq	r1, #4887	; 0x1317
    2c74:	3a0b0b0e 	bcc	2c58b4 <__Stack_Size+0x2c54b4>
    2c78:	01053b0b 	tsteq	r5, fp, lsl #22
    2c7c:	18000013 	stmdane	r0, {r0, r1, r4}
    2c80:	0b0b0113 	bleq	2c30d4 <__Stack_Size+0x2c2cd4>
    2c84:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    2c88:	00001301 	andeq	r1, r0, r1, lsl #6
    2c8c:	0b011719 	bleq	488f8 <__Stack_Size+0x484f8>
    2c90:	3b0b3a0b 	blcc	2d14c4 <__Stack_Size+0x2d10c4>
    2c94:	00130105 	andseq	r0, r3, r5, lsl #2
    2c98:	000d1a00 	andeq	r1, sp, r0, lsl #20
    2c9c:	0b3a0e03 	bleq	e864b0 <__Stack_Size+0xe860b0>
    2ca0:	1349053b 	movtne	r0, #38203	; 0x953b
    2ca4:	151b0000 	ldrne	r0, [fp]
    2ca8:	010c2701 	tsteq	ip, r1, lsl #14
    2cac:	1c000013 	stcne	0, cr0, [r0], {19}
    2cb0:	0c3f012e 	ldfeqs	f0, [pc], #-184
    2cb4:	0b3a0e03 	bleq	e864c8 <__Stack_Size+0xe860c8>
    2cb8:	0c270b3b 	stceq	11, cr0, [r7], #-236
    2cbc:	01120111 	tsteq	r2, r1, lsl r1
    2cc0:	13010a40 	movwne	r0, #6720	; 0x1a40
    2cc4:	051d0000 	ldreq	r0, [sp]
    2cc8:	3a0e0300 	bcc	3838d0 <__Stack_Size+0x3834d0>
    2ccc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2cd0:	00060213 	andeq	r0, r6, r3, lsl r2
    2cd4:	00341e00 	eorseq	r1, r4, r0, lsl #28
    2cd8:	0b3a0e03 	bleq	e864ec <__Stack_Size+0xe860ec>
    2cdc:	1349053b 	movtne	r0, #38203	; 0x953b
    2ce0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252
    2ce4:	01000000 	tsteq	r0, r0
    2ce8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2cec:	0e030b13 	vmoveq.32	d3[0], r0
    2cf0:	01110e1b 	tsteq	r1, fp, lsl lr
    2cf4:	06100112 	undefined
    2cf8:	24020000 	strcs	r0, [r2]
    2cfc:	3e0b0b00 	fmacdcc	d0, d11, d0
    2d00:	000e030b 	andeq	r0, lr, fp, lsl #6
    2d04:	00240300 	eoreq	r0, r4, r0, lsl #6
    2d08:	0b3e0b0b 	bleq	f8593c <__Stack_Size+0xf8553c>
    2d0c:	00000803 	andeq	r0, r0, r3, lsl #16
    2d10:	03001604 	movweq	r1, #1540	; 0x604
    2d14:	3b0b3a0e 	blcc	2d1554 <__Stack_Size+0x2d1154>
    2d18:	0013490b 	andseq	r4, r3, fp, lsl #18
    2d1c:	00160500 	andseq	r0, r6, r0, lsl #10
    2d20:	0b3a0e03 	bleq	e86534 <__Stack_Size+0xe86134>
    2d24:	1349053b 	movtne	r0, #38203	; 0x953b
    2d28:	17060000 	strne	r0, [r6, -r0]
    2d2c:	3a0b0b01 	bcc	2c5938 <__Stack_Size+0x2c5538>
    2d30:	010b3b0b 	tsteq	fp, fp, lsl #22
    2d34:	07000013 	smladeq	r0, r3, r0, r0
    2d38:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2d3c:	0b3b0b3a 	bleq	ec5a2c <__Stack_Size+0xec562c>
    2d40:	00001349 	andeq	r1, r0, r9, asr #6
    2d44:	49010108 	stmdbmi	r1, {r3, r8}
    2d48:	00130113 	andseq	r0, r3, r3, lsl r1
    2d4c:	00210900 	eoreq	r0, r1, r0, lsl #18
    2d50:	0b2f1349 	bleq	bc7a7c <__Stack_Size+0xbc767c>
    2d54:	240a0000 	strcs	r0, [sl]
    2d58:	3e0b0b00 	fmacdcc	d0, d11, d0
    2d5c:	0b00000b 	bleq	2d90 <__Stack_Size+0x2990>
    2d60:	0b0b0113 	bleq	2c31b4 <__Stack_Size+0x2c2db4>
    2d64:	0b3b0b3a 	bleq	ec5a54 <__Stack_Size+0xec5654>
    2d68:	00001301 	andeq	r1, r0, r1, lsl #6
    2d6c:	03000d0c 	movweq	r0, #3340	; 0xd0c
    2d70:	3b0b3a0e 	blcc	2d15b0 <__Stack_Size+0x2d11b0>
    2d74:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2d78:	0d00000a 	stceq	0, cr0, [r0, #-40]
    2d7c:	0b0b000f 	bleq	2c2dc0 <__Stack_Size+0x2c29c0>
    2d80:	130e0000 	movwne	r0, #57344	; 0xe000
    2d84:	0b0e0301 	bleq	383990 <__Stack_Size+0x383590>
    2d88:	3b0b3a0b 	blcc	2d15bc <__Stack_Size+0x2d11bc>
    2d8c:	0013010b 	andseq	r0, r3, fp, lsl #2
    2d90:	000d0f00 	andeq	r0, sp, r0, lsl #30
    2d94:	0b3a0803 	bleq	e84da8 <__Stack_Size+0xe849a8>
    2d98:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2d9c:	00000a38 	andeq	r0, r0, r8, lsr sl
    2da0:	0b000f10 	bleq	69e8 <__Stack_Size+0x65e8>
    2da4:	0013490b 	andseq	r4, r3, fp, lsl #18
    2da8:	01131100 	tsteq	r3, r0, lsl #2
    2dac:	050b0e03 	streq	r0, [fp, #-3587]
    2db0:	0b3b0b3a 	bleq	ec5aa0 <__Stack_Size+0xec56a0>
    2db4:	00001301 	andeq	r1, r0, r1, lsl #6
    2db8:	27001512 	smladcs	r0, r2, r5, r1
    2dbc:	1300000c 	movwne	r0, #12	; 0xc
    2dc0:	0c270115 	stfeqs	f0, [r7], #-84
    2dc4:	13011349 	movwne	r1, #4937	; 0x1349
    2dc8:	05140000 	ldreq	r0, [r4]
    2dcc:	00134900 	andseq	r4, r3, r0, lsl #18
    2dd0:	000d1500 	andeq	r1, sp, r0, lsl #10
    2dd4:	0b3a0e03 	bleq	e865e8 <__Stack_Size+0xe861e8>
    2dd8:	1349053b 	movtne	r0, #38203	; 0x953b
    2ddc:	00000a38 	andeq	r0, r0, r8, lsr sl
    2de0:	49002616 	stmdbmi	r0, {r1, r2, r4, r9, sl, sp}
    2de4:	17000013 	smladne	r0, r3, r0, r0
    2de8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2dec:	0b3a0b0b 	bleq	e85a20 <__Stack_Size+0xe85620>
    2df0:	1301053b 	movwne	r0, #5435	; 0x153b
    2df4:	13180000 	tstne	r8, #0	; 0x0
    2df8:	3a0b0b01 	bcc	2c5a04 <__Stack_Size+0x2c5604>
    2dfc:	01053b0b 	tsteq	r5, fp, lsl #22
    2e00:	19000013 	stmdbne	r0, {r0, r1, r4}
    2e04:	0b0b0117 	bleq	2c3268 <__Stack_Size+0x2c2e68>
    2e08:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    2e0c:	00001301 	andeq	r1, r0, r1, lsl #6
    2e10:	03000d1a 	movweq	r0, #3354	; 0xd1a
    2e14:	3b0b3a0e 	blcc	2d1654 <__Stack_Size+0x2d1254>
    2e18:	00134905 	andseq	r4, r3, r5, lsl #18
    2e1c:	01151b00 	tsteq	r5, r0, lsl #22
    2e20:	13010c27 	movwne	r0, #7207	; 0x1c27
    2e24:	341c0000 	ldrcc	r0, [ip]
    2e28:	3a0e0300 	bcc	383a30 <__Stack_Size+0x383630>
    2e2c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2e30:	000a0213 	andeq	r0, sl, r3, lsl r2
    2e34:	00341d00 	eorseq	r1, r4, r0, lsl #26
    2e38:	0b3a0e03 	bleq	e8664c <__Stack_Size+0xe8624c>
    2e3c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2e40:	0a020c3f 	beq	85f44 <__Stack_Size+0x85b44>
    2e44:	01000000 	tsteq	r0, r0
    2e48:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2e4c:	0e030b13 	vmoveq.32	d3[0], r0
    2e50:	01110e1b 	tsteq	r1, fp, lsl lr
    2e54:	06100112 	undefined
    2e58:	24020000 	strcs	r0, [r2]
    2e5c:	3e0b0b00 	fmacdcc	d0, d11, d0
    2e60:	000e030b 	andeq	r0, lr, fp, lsl #6
    2e64:	00240300 	eoreq	r0, r4, r0, lsl #6
    2e68:	0b3e0b0b 	bleq	f85a9c <__Stack_Size+0xf8569c>
    2e6c:	00000803 	andeq	r0, r0, r3, lsl #16
    2e70:	0b002404 	bleq	be88 <__Stack_Size+0xba88>
    2e74:	000b3e0b 	andeq	r3, fp, fp, lsl #28
    2e78:	00160500 	andseq	r0, r6, r0, lsl #10
    2e7c:	0b3a0e03 	bleq	e86690 <__Stack_Size+0xe86290>
    2e80:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2e84:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    2e88:	030c3f01 	movweq	r3, #52993	; 0xcf01
    2e8c:	3b0b3a0e 	blcc	2d16cc <__Stack_Size+0x2d12cc>
    2e90:	110c270b 	tstne	ip, fp, lsl #14
    2e94:	40011201 	andmi	r1, r1, r1, lsl #4
    2e98:	00130106 	andseq	r0, r3, r6, lsl #2
    2e9c:	00340700 	eorseq	r0, r4, r0, lsl #14
    2ea0:	0b3a0e03 	bleq	e866b4 <__Stack_Size+0xe862b4>
    2ea4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2ea8:	00000a02 	andeq	r0, r0, r2, lsl #20
    2eac:	03003408 	movweq	r3, #1032	; 0x408
    2eb0:	3b0b3a08 	blcc	2d16d8 <__Stack_Size+0x2d12d8>
    2eb4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2eb8:	0900000a 	stmdbeq	r0, {r1, r3}
    2ebc:	13490101 	movtne	r0, #37121	; 0x9101
    2ec0:	00001301 	andeq	r1, r0, r1, lsl #6
    2ec4:	0000210a 	andeq	r2, r0, sl, lsl #2
    2ec8:	00150b00 	andseq	r0, r5, r0, lsl #22
    2ecc:	00000c27 	andeq	r0, r0, r7, lsr #24
    2ed0:	0b000f0c 	bleq	6b08 <__Stack_Size+0x6708>
    2ed4:	0013490b 	andseq	r4, r3, fp, lsl #18
    2ed8:	00340d00 	eorseq	r0, r4, r0, lsl #26
    2edc:	0b3a0e03 	bleq	e866f0 <__Stack_Size+0xe862f0>
    2ee0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2ee4:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252
    2ee8:	01000000 	tsteq	r0, r0
    2eec:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2ef0:	0e030b13 	vmoveq.32	d3[0], r0
    2ef4:	01110e1b 	tsteq	r1, fp, lsl lr
    2ef8:	06100112 	undefined
    2efc:	24020000 	strcs	r0, [r2]
    2f00:	3e0b0b00 	fmacdcc	d0, d11, d0
    2f04:	0008030b 	andeq	r0, r8, fp, lsl #6
    2f08:	00160300 	andseq	r0, r6, r0, lsl #6
    2f0c:	0b3a0e03 	bleq	e86720 <__Stack_Size+0xe86320>
    2f10:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2f14:	24040000 	strcs	r0, [r4]
    2f18:	3e0b0b00 	fmacdcc	d0, d11, d0
    2f1c:	000e030b 	andeq	r0, lr, fp, lsl #6
    2f20:	012e0500 	teqeq	lr, r0, lsl #10
    2f24:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    2f28:	0b3b0b3a 	bleq	ec5c18 <__Stack_Size+0xec5818>
    2f2c:	13490c27 	movtne	r0, #39975	; 0x9c27
    2f30:	01120111 	tsteq	r2, r1, lsl r1
    2f34:	13010640 	movwne	r0, #5696	; 0x1640
    2f38:	05060000 	streq	r0, [r6]
    2f3c:	3a0e0300 	bcc	383b44 <__Stack_Size+0x383744>
    2f40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2f44:	00060213 	andeq	r0, r6, r3, lsl r2
    2f48:	00340700 	eorseq	r0, r4, r0, lsl #14
    2f4c:	0b3a0803 	bleq	e84f60 <__Stack_Size+0xe84b60>
    2f50:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2f54:	00000602 	andeq	r0, r0, r2, lsl #12
    2f58:	03003408 	movweq	r3, #1032	; 0x408
    2f5c:	3b0b3a0e 	blcc	2d179c <__Stack_Size+0x2d139c>
    2f60:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2f64:	09000006 	stmdbeq	r0, {r1, r2}
    2f68:	0b0b000f 	bleq	2c2fac <__Stack_Size+0x2c2bac>
    2f6c:	0f0a0000 	svceq	0x000a0000
    2f70:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2f74:	0b000013 	bleq	2fc8 <__Stack_Size+0x2bc8>
    2f78:	00000026 	andeq	r0, r0, r6, lsr #32
    2f7c:	4900260c 	stmdbmi	r0, {r2, r3, r9, sl, sp}
    2f80:	00000013 	andeq	r0, r0, r3, lsl r0
    2f84:	25011101 	strcs	r1, [r1, #-257]
    2f88:	030b130e 	movweq	r1, #45838	; 0xb30e
    2f8c:	110e1b0e 	tstne	lr, lr, lsl #22
    2f90:	10011201 	andne	r1, r1, r1, lsl #4
    2f94:	02000006 	andeq	r0, r0, #6	; 0x6
    2f98:	0b0b0024 	bleq	2c3030 <__Stack_Size+0x2c2c30>
    2f9c:	0e030b3e 	vmoveq.16	d3[0], r0
    2fa0:	24030000 	strcs	r0, [r3]
    2fa4:	3e0b0b00 	fmacdcc	d0, d11, d0
    2fa8:	0008030b 	andeq	r0, r8, fp, lsl #6
    2fac:	00240400 	eoreq	r0, r4, r0, lsl #8
    2fb0:	0b3e0b0b 	bleq	f85be4 <__Stack_Size+0xf857e4>
    2fb4:	0f050000 	svceq	0x00050000
    2fb8:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2fbc:	000f0600 	andeq	r0, pc, r0, lsl #12
    2fc0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2fc4:	16070000 	strne	r0, [r7], -r0
    2fc8:	3a0e0300 	bcc	383bd0 <__Stack_Size+0x3837d0>
    2fcc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2fd0:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2fd4:	0c3f012e 	ldfeqs	f0, [pc], #-184
    2fd8:	0b3a0e03 	bleq	e867ec <__Stack_Size+0xe863ec>
    2fdc:	0c270b3b 	stceq	11, cr0, [r7], #-236
    2fe0:	01111349 	tsteq	r1, r9, asr #6
    2fe4:	06400112 	undefined
    2fe8:	00001301 	andeq	r1, r0, r1, lsl #6
    2fec:	03000509 	movweq	r0, #1289	; 0x509
    2ff0:	3b0b3a08 	blcc	2d1818 <__Stack_Size+0x2d1418>
    2ff4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2ff8:	0a000006 	beq	3018 <__Stack_Size+0x2c18>
    2ffc:	08030034 	stmdaeq	r3, {r2, r4, r5}
    3000:	0b3b0b3a 	bleq	ec5cf0 <__Stack_Size+0xec58f0>
    3004:	06021349 	streq	r1, [r2], -r9, asr #6
    3008:	340b0000 	strcc	r0, [fp]
    300c:	3a080300 	bcc	203c14 <__Stack_Size+0x203814>
    3010:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3014:	0c000013 	stceq	0, cr0, [r0], {19}
    3018:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    301c:	0b3b0b3a 	bleq	ec5d0c <__Stack_Size+0xec590c>
    3020:	06021349 	streq	r1, [r2], -r9, asr #6
    3024:	340d0000 	strcc	r0, [sp]
    3028:	3a080300 	bcc	203c30 <__Stack_Size+0x203830>
    302c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3030:	000a0213 	andeq	r0, sl, r3, lsl r2
    3034:	11010000 	tstne	r1, r0
    3038:	130e2501 	movwne	r2, #58625	; 0xe501
    303c:	1b0e030b 	blne	383c70 <__Stack_Size+0x383870>
    3040:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    3044:	00061001 	andeq	r1, r6, r1
    3048:	00240200 	eoreq	r0, r4, r0, lsl #4
    304c:	0b3e0b0b 	bleq	f85c80 <__Stack_Size+0xf85880>
    3050:	00000803 	andeq	r0, r0, r3, lsl #16
    3054:	0b002403 	bleq	c068 <__Stack_Size+0xbc68>
    3058:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    305c:	0400000e 	streq	r0, [r0], #-14
    3060:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3064:	0b3b0b3a 	bleq	ec5d54 <__Stack_Size+0xec5954>
    3068:	00001349 	andeq	r1, r0, r9, asr #6
    306c:	03001605 	movweq	r1, #1541	; 0x605
    3070:	3b0b3a0e 	blcc	2d18b0 <__Stack_Size+0x2d14b0>
    3074:	00134905 	andseq	r4, r3, r5, lsl #18
    3078:	01170600 	tsteq	r7, r0, lsl #12
    307c:	0b3a0b0b 	bleq	e85cb0 <__Stack_Size+0xe858b0>
    3080:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    3084:	0d070000 	stceq	0, cr0, [r7]
    3088:	3a0e0300 	bcc	383c90 <__Stack_Size+0x383890>
    308c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3090:	08000013 	stmdaeq	r0, {r0, r1, r4}
    3094:	13490101 	movtne	r0, #37121	; 0x9101
    3098:	00001301 	andeq	r1, r0, r1, lsl #6
    309c:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
    30a0:	000b2f13 	andeq	r2, fp, r3, lsl pc
    30a4:	00240a00 	eoreq	r0, r4, r0, lsl #20
    30a8:	0b3e0b0b 	bleq	f85cdc <__Stack_Size+0xf858dc>
    30ac:	130b0000 	movwne	r0, #45056	; 0xb000
    30b0:	3a0b0b01 	bcc	2c5cbc <__Stack_Size+0x2c58bc>
    30b4:	010b3b0b 	tsteq	fp, fp, lsl #22
    30b8:	0c000013 	stceq	0, cr0, [r0], {19}
    30bc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    30c0:	0b3b0b3a 	bleq	ec5db0 <__Stack_Size+0xec59b0>
    30c4:	0a381349 	beq	e07df0 <__Stack_Size+0xe079f0>
    30c8:	0f0d0000 	svceq	0x000d0000
    30cc:	000b0b00 	andeq	r0, fp, r0, lsl #22
    30d0:	01130e00 	tsteq	r3, r0, lsl #28
    30d4:	0b0b0e03 	bleq	2c68e8 <__Stack_Size+0x2c64e8>
    30d8:	0b3b0b3a 	bleq	ec5dc8 <__Stack_Size+0xec59c8>
    30dc:	00001301 	andeq	r1, r0, r1, lsl #6
    30e0:	03000d0f 	movweq	r0, #3343	; 0xd0f
    30e4:	3b0b3a08 	blcc	2d190c <__Stack_Size+0x2d150c>
    30e8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    30ec:	1000000a 	andne	r0, r0, sl
    30f0:	0b0b000f 	bleq	2c3134 <__Stack_Size+0x2c2d34>
    30f4:	00001349 	andeq	r1, r0, r9, asr #6
    30f8:	03011311 	movweq	r1, #4881	; 0x1311
    30fc:	3a050b0e 	bcc	145d3c <__Stack_Size+0x14593c>
    3100:	010b3b0b 	tsteq	fp, fp, lsl #22
    3104:	12000013 	andne	r0, r0, #19	; 0x13
    3108:	0c270015 	stceq	0, cr0, [r7], #-84
    310c:	15130000 	ldrne	r0, [r3]
    3110:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
    3114:	00130113 	andseq	r0, r3, r3, lsl r1
    3118:	00051400 	andeq	r1, r5, r0, lsl #8
    311c:	00001349 	andeq	r1, r0, r9, asr #6
    3120:	03000d15 	movweq	r0, #3349	; 0xd15
    3124:	3b0b3a0e 	blcc	2d1964 <__Stack_Size+0x2d1564>
    3128:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    312c:	1600000a 	strne	r0, [r0], -sl
    3130:	13490026 	movtne	r0, #36902	; 0x9026
    3134:	13170000 	tstne	r7, #0	; 0x0
    3138:	0b0e0301 	bleq	383d44 <__Stack_Size+0x383944>
    313c:	3b0b3a0b 	blcc	2d1970 <__Stack_Size+0x2d1570>
    3140:	00130105 	andseq	r0, r3, r5, lsl #2
    3144:	01131800 	tsteq	r3, r0, lsl #16
    3148:	0b3a0b0b 	bleq	e85d7c <__Stack_Size+0xe8597c>
    314c:	1301053b 	movwne	r0, #5435	; 0x153b
    3150:	17190000 	ldrne	r0, [r9, -r0]
    3154:	3a0b0b01 	bcc	2c5d60 <__Stack_Size+0x2c5960>
    3158:	01053b0b 	tsteq	r5, fp, lsl #22
    315c:	1a000013 	bne	31b0 <__Stack_Size+0x2db0>
    3160:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3164:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    3168:	00001349 	andeq	r1, r0, r9, asr #6
    316c:	2701151b 	smladcs	r1, fp, r5, r1
    3170:	0013010c 	andseq	r0, r3, ip, lsl #2
    3174:	01041c00 	tsteq	r4, r0, lsl #24
    3178:	0b0b0e03 	bleq	2c698c <__Stack_Size+0x2c658c>
    317c:	0b3b0b3a 	bleq	ec5e6c <__Stack_Size+0xec5a6c>
    3180:	00001301 	andeq	r1, r0, r1, lsl #6
    3184:	0300281d 	movweq	r2, #2077	; 0x81d
    3188:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    318c:	012e1e00 	teqeq	lr, r0, lsl #28
    3190:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    3194:	0b3b0b3a 	bleq	ec5e84 <__Stack_Size+0xec5a84>
    3198:	13490c27 	movtne	r0, #39975	; 0x9c27
    319c:	01120111 	tsteq	r2, r1, lsl r1
    31a0:	13010640 	movwne	r0, #5696	; 0x1640
    31a4:	051f0000 	ldreq	r0, [pc, #0]	; 31ac <__Stack_Size+0x2dac>
    31a8:	3a0e0300 	bcc	383db0 <__Stack_Size+0x3839b0>
    31ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    31b0:	00060213 	andeq	r0, r6, r3, lsl r2
    31b4:	00052000 	andeq	r2, r5, r0
    31b8:	0b3a0803 	bleq	e851cc <__Stack_Size+0xe84dcc>
    31bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    31c0:	00000602 	andeq	r0, r0, r2, lsl #12
    31c4:	03003421 	movweq	r3, #1057	; 0x421
    31c8:	3b0b3a0e 	blcc	2d1a08 <__Stack_Size+0x2d1608>
    31cc:	0013490b 	andseq	r4, r3, fp, lsl #18
    31d0:	00342200 	eorseq	r2, r4, r0, lsl #4
    31d4:	0b3a0803 	bleq	e851e8 <__Stack_Size+0xe84de8>
    31d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    31dc:	00000a02 	andeq	r0, r0, r2, lsl #20
    31e0:	03003423 	movweq	r3, #1059	; 0x423
    31e4:	3b0b3a0e 	blcc	2d1a24 <__Stack_Size+0x2d1624>
    31e8:	3f134905 	svccc	0x00134905
    31ec:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    31f0:	11010000 	tstne	r1, r0
    31f4:	130e2501 	movwne	r2, #58625	; 0xe501
    31f8:	1b0e030b 	blne	383e2c <__Stack_Size+0x383a2c>
    31fc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    3200:	00061001 	andeq	r1, r6, r1
    3204:	00240200 	eoreq	r0, r4, r0, lsl #4
    3208:	0b3e0b0b 	bleq	f85e3c <__Stack_Size+0xf85a3c>
    320c:	00000e03 	andeq	r0, r0, r3, lsl #28
    3210:	0b002403 	bleq	c224 <__Stack_Size+0xbe24>
    3214:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3218:	04000008 	streq	r0, [r0], #-8
    321c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3220:	0b3b0b3a 	bleq	ec5f10 <__Stack_Size+0xec5b10>
    3224:	00001349 	andeq	r1, r0, r9, asr #6
    3228:	03001605 	movweq	r1, #1541	; 0x605
    322c:	3b0b3a0e 	blcc	2d1a6c <__Stack_Size+0x2d166c>
    3230:	00134905 	andseq	r4, r3, r5, lsl #18
    3234:	01170600 	tsteq	r7, r0, lsl #12
    3238:	0b3a0b0b 	bleq	e85e6c <__Stack_Size+0xe85a6c>
    323c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    3240:	0d070000 	stceq	0, cr0, [r7]
    3244:	3a0e0300 	bcc	383e4c <__Stack_Size+0x383a4c>
    3248:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    324c:	08000013 	stmdaeq	r0, {r0, r1, r4}
    3250:	13490101 	movtne	r0, #37121	; 0x9101
    3254:	00001301 	andeq	r1, r0, r1, lsl #6
    3258:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
    325c:	000b2f13 	andeq	r2, fp, r3, lsl pc
    3260:	00240a00 	eoreq	r0, r4, r0, lsl #20
    3264:	0b3e0b0b 	bleq	f85e98 <__Stack_Size+0xf85a98>
    3268:	130b0000 	movwne	r0, #45056	; 0xb000
    326c:	3a0b0b01 	bcc	2c5e78 <__Stack_Size+0x2c5a78>
    3270:	010b3b0b 	tsteq	fp, fp, lsl #22
    3274:	0c000013 	stceq	0, cr0, [r0], {19}
    3278:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    327c:	0b3b0b3a 	bleq	ec5f6c <__Stack_Size+0xec5b6c>
    3280:	0a381349 	beq	e07fac <__Stack_Size+0xe07bac>
    3284:	0f0d0000 	svceq	0x000d0000
    3288:	000b0b00 	andeq	r0, fp, r0, lsl #22
    328c:	01130e00 	tsteq	r3, r0, lsl #28
    3290:	0b0b0e03 	bleq	2c6aa4 <__Stack_Size+0x2c66a4>
    3294:	0b3b0b3a 	bleq	ec5f84 <__Stack_Size+0xec5b84>
    3298:	00001301 	andeq	r1, r0, r1, lsl #6
    329c:	03000d0f 	movweq	r0, #3343	; 0xd0f
    32a0:	3b0b3a08 	blcc	2d1ac8 <__Stack_Size+0x2d16c8>
    32a4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    32a8:	1000000a 	andne	r0, r0, sl
    32ac:	0b0b000f 	bleq	2c32f0 <__Stack_Size+0x2c2ef0>
    32b0:	00001349 	andeq	r1, r0, r9, asr #6
    32b4:	03011311 	movweq	r1, #4881	; 0x1311
    32b8:	3a050b0e 	bcc	145ef8 <__Stack_Size+0x145af8>
    32bc:	010b3b0b 	tsteq	fp, fp, lsl #22
    32c0:	12000013 	andne	r0, r0, #19	; 0x13
    32c4:	0c270015 	stceq	0, cr0, [r7], #-84
    32c8:	15130000 	ldrne	r0, [r3]
    32cc:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
    32d0:	00130113 	andseq	r0, r3, r3, lsl r1
    32d4:	00051400 	andeq	r1, r5, r0, lsl #8
    32d8:	00001349 	andeq	r1, r0, r9, asr #6
    32dc:	03000d15 	movweq	r0, #3349	; 0xd15
    32e0:	3b0b3a0e 	blcc	2d1b20 <__Stack_Size+0x2d1720>
    32e4:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    32e8:	1600000a 	strne	r0, [r0], -sl
    32ec:	13490026 	movtne	r0, #36902	; 0x9026
    32f0:	13170000 	tstne	r7, #0	; 0x0
    32f4:	0b0e0301 	bleq	383f00 <__Stack_Size+0x383b00>
    32f8:	3b0b3a0b 	blcc	2d1b2c <__Stack_Size+0x2d172c>
    32fc:	00130105 	andseq	r0, r3, r5, lsl #2
    3300:	01131800 	tsteq	r3, r0, lsl #16
    3304:	0b3a0b0b 	bleq	e85f38 <__Stack_Size+0xe85b38>
    3308:	1301053b 	movwne	r0, #5435	; 0x153b
    330c:	17190000 	ldrne	r0, [r9, -r0]
    3310:	3a0b0b01 	bcc	2c5f1c <__Stack_Size+0x2c5b1c>
    3314:	01053b0b 	tsteq	r5, fp, lsl #22
    3318:	1a000013 	bne	336c <__Stack_Size+0x2f6c>
    331c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3320:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    3324:	00001349 	andeq	r1, r0, r9, asr #6
    3328:	2701151b 	smladcs	r1, fp, r5, r1
    332c:	0013010c 	andseq	r0, r3, ip, lsl #2
    3330:	012e1c00 	teqeq	lr, r0, lsl #24
    3334:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    3338:	0b3b0b3a 	bleq	ec6028 <__Stack_Size+0xec5c28>
    333c:	01110c27 	tsteq	r1, r7, lsr #24
    3340:	06400112 	undefined
    3344:	00001301 	andeq	r1, r0, r1, lsl #6
    3348:	0300051d 	movweq	r0, #1309	; 0x51d
    334c:	3b0b3a0e 	blcc	2d1b8c <__Stack_Size+0x2d178c>
    3350:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3354:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    3358:	08030005 	stmdaeq	r3, {r0, r2}
    335c:	0b3b0b3a 	bleq	ec604c <__Stack_Size+0xec5c4c>
    3360:	06021349 	streq	r1, [r2], -r9, asr #6
    3364:	341f0000 	ldrcc	r0, [pc], #0	; 336c <__Stack_Size+0x2f6c>
    3368:	3a080300 	bcc	203f70 <__Stack_Size+0x203b70>
    336c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3370:	000a0213 	andeq	r0, sl, r3, lsl r2
    3374:	00342000 	eorseq	r2, r4, r0
    3378:	0b3a0e03 	bleq	e86b8c <__Stack_Size+0xe8678c>
    337c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3380:	34210000 	strtcc	r0, [r1]
    3384:	3a080300 	bcc	203f8c <__Stack_Size+0x203b8c>
    3388:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    338c:	22000013 	andcs	r0, r0, #19	; 0x13
    3390:	08030034 	stmdaeq	r3, {r2, r4, r5}
    3394:	0b3b0b3a 	bleq	ec6084 <__Stack_Size+0xec5c84>
    3398:	06021349 	streq	r1, [r2], -r9, asr #6
    339c:	0a230000 	beq	8c33a4 <__Stack_Size+0x8c2fa4>
    33a0:	3a0e0300 	bcc	383fa8 <__Stack_Size+0x383ba8>
    33a4:	000b3b0b 	andeq	r3, fp, fp, lsl #22
    33a8:	010b2400 	tsteq	fp, r0, lsl #8
    33ac:	00000655 	andeq	r0, r0, r5, asr r6
    33b0:	03003425 	movweq	r3, #1061	; 0x425
    33b4:	3b0b3a0e 	blcc	2d1bf4 <__Stack_Size+0x2d17f4>
    33b8:	3f134905 	svccc	0x00134905
    33bc:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    33c0:	11010000 	tstne	r1, r0
    33c4:	55061000 	strpl	r1, [r6]
    33c8:	1b080306 	blne	203fe8 <__Stack_Size+0x203be8>
    33cc:	13082508 	movwne	r2, #34056	; 0x8508
    33d0:	00000005 	andeq	r0, r0, r5

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000045 	andeq	r0, r0, r5, asr #32
       4:	001f0002 	andseq	r0, pc, r2
       8:	01020000 	tsteq	r2, r0
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	tsteq	r0, r0
      18:	00010000 	andeq	r0, r1, r0
      1c:	69747263 	ldmdbvs	r4!, {r0, r1, r5, r6, r9, ip, sp, lr}^
      20:	6d73612e 	ldfvse	f6, [r3, #-184]!
      24:	00000000 	andeq	r0, r0, r0
      28:	02050000 	andeq	r0, r5, #0	; 0x0
      2c:	00000000 	andeq	r0, r0, r0
      30:	0100cc03 	tsteq	r0, r3, lsl #24
      34:	01000602 	tsteq	r0, r2, lsl #12
      38:	02050001 	andeq	r0, r5, #1	; 0x1
      3c:	00000000 	andeq	r0, r0, r0
      40:	0100d703 	tsteq	r0, r3, lsl #14
      44:	01000602 	tsteq	r0, r2, lsl #12
      48:	00009601 	andeq	r9, r0, r1, lsl #12
      4c:	40000200 	andmi	r0, r0, r0, lsl #4
      50:	02000000 	andeq	r0, r0, #0	; 0x0
      54:	0d0efb01 	vstreq	d15, [lr, #-4]
      58:	01010100 	tsteq	r1, r0, lsl #2
      5c:	00000001 	andeq	r0, r0, r1
      60:	01000001 	tsteq	r0, r1
      64:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
      68:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
      6c:	2f2e2e2f 	svccs	0x002e2e2f
      70:	2d636367 	stclcs	3, cr6, [r3, #-412]!
      74:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
      78:	696c2f30 	stmdbvs	ip!, {r4, r5, r8, r9, sl, fp, sp}^
      7c:	6f6c6762 	svcvs	0x006c6762
      80:	612f7373 	teqvs	pc, r3, ror r3
      84:	00006d72 	andeq	r6, r0, r2, ror sp
      88:	30747263 	rsbscc	r7, r4, r3, ror #4
      8c:	0100532e 	tsteq	r0, lr, lsr #6
      90:	00000000 	andeq	r0, r0, r0
      94:	00000205 	andeq	r0, r0, r5, lsl #4
      98:	d2030000 	andle	r0, r3, #0	; 0x0
      9c:	2f2f0100 	svccs	0x002f0100
      a0:	2f2f2f33 	svccs	0x002f2f33
      a4:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
      a8:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
      ac:	2f302f2f 	svccs	0x00302f2f
      b0:	2f2f302f 	svccs	0x002f302f
      b4:	2f302f2f 	svccs	0x00302f2f
      b8:	09032f30 	stmdbeq	r3, {r4, r5, r8, r9, sl, fp, sp}
      bc:	2f2f322e 	svccs	0x002f322e
      c0:	032f2f30 	teqeq	pc, #192	; 0xc0
      c4:	2f342e0e 	svccs	0x00342e0e
      c8:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
      cc:	2f2f2f2f 	svccs	0x002f2f2f
      d0:	f9032f30 	undefined instruction 0xf9032f30
      d4:	2f2f2e00 	svccs	0x002f2e00
      d8:	2f2f2f2f 	svccs	0x002f2f2f
      dc:	10023030 	andne	r3, r2, r0, lsr r0
      e0:	37010100 	strcc	r0, [r1, -r0, lsl #2]
      e4:	02000001 	andeq	r0, r0, #1	; 0x1
      e8:	0000a800 	andeq	sl, r0, r0, lsl #16
      ec:	fb010200 	blx	408f6 <__Stack_Size+0x404f6>
      f0:	01000d0e 	tsteq	r0, lr, lsl #26
      f4:	00010101 	andeq	r0, r1, r1, lsl #2
      f8:	00010000 	andeq	r0, r1, r0
      fc:	50410100 	subpl	r0, r1, r0, lsl #2
     100:	72732f50 	rsbsvc	r2, r3, #320	; 0x140
     104:	74730063 	ldrbtvc	r0, [r3], #-99
     108:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
	ui2a(num,10,0,bf);
	}

static int a2d(char ch)
	{
	if (ch>='0' && ch<='9') 
     10c:	5f783031 	svcpl	0x00783031
     110:	2f62696c 	svccs	0x0062696c
	int num=0;
	int digit;
	while ((digit=a2d(ch))>=0) {
		if (digit>base) break;
		num=num*base+digit;
		ch=*p++;
     114:	00636e69 	rsbeq	r6, r3, r9, ror #28

static int a2d(char ch)
	{
	if (ch>='0' && ch<='9') 
		return ch-'0';
	else if (ch>='a' && ch<='f')
     118:	33354d43 	teqcc	r5, #4288	; 0x10c0
     11c:	57485f30 	smlaldxpl	r5, r8, r0, pc
		return ch-'a'+10;
     120:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     124:	616d0000 	cmnvs	sp, r0
	else if (ch>='A' && ch<='F')
     128:	632e6e69 	teqvs	lr, #1680	; 0x690
     12c:	00000100 	andeq	r0, r0, r0, lsl #2
     130:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
		return ch-'A'+10;
     134:	30316632 	eorscc	r6, r1, r2, lsr r6
static char a2i(char ch, char** src,int base,int* nump)
	{
	char* p= *src;
	int num=0;
	int digit;
	while ((digit=a2d(ch))>=0) {
     138:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
			if (ch=='l') {
				ch=*(fmt++);
				lng=1;
			}
#endif
			switch (ch) {
     13c:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     140:	00000200 	andeq	r0, r0, r0, lsl #4
     144:	616e7964 	cmnvs	lr, r4, ror #18
     148:	6578696d 	ldrbvs	r6, [r8, #-2413]!
     14c:	64615f6c 	strbtvs	r5, [r1], #-3948
     150:	73657264 	cmnvc	r5, #1073741830	; 0x40000006
     154:	61745f73 	cmnvs	r4, r3, ror pc
     158:	73656c62 	cmnvc	r5, #25088	; 0x6200
     15c:	0300682e 	movweq	r6, #2094	; 0x82e
     160:	656c0000 	strbvs	r0, [ip]!
     164:	00682e64 	rsbeq	r2, r8, r4, ror #28
     168:	61000003 	tstvs	r0, r3
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
     16c:	682e6364 	stmdavs	lr!, {r2, r5, r6, r8, r9, sp, lr}
     170:	00000300 	andeq	r0, r0, r0, lsl #6
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
     174:	74747562 	ldrbtvc	r7, [r4], #-1378

static void i2a (int num, char * bf)
	{
	if (num<0) {
		num=-num;
		*bf++ = '-';
     178:	682e6e6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
     17c:	00000300 	andeq	r0, r0, r0, lsl #6
	*bf=0;
	}

static void i2a (int num, char * bf)
	{
	if (num<0) {
     180:	2e63696d 	cdpcs	9, 6, cr6, cr3, cr13, {3}
		num=-num;
		*bf++ = '-';
     184:	00030068 	andeq	r0, r3, r8, rrx
     188:	61737500 	cmnvs	r3, r0, lsl #10
		}
	ui2a(num,10,0,bf);
     18c:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
     190:	00000300 	andeq	r0, r0, r0, lsl #6
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
					putchw(putp,putf,w,lz,bf);
     194:	02050000 	andeq	r0, r5, #0	; 0x0
     198:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
     19c:	31011503 	tstcc	r1, r3, lsl #10
     1a0:	3d4f3d34 	stclcc	13, cr3, [pc, #-208]
     1a4:	3e303e75 	mrccc	14, 1, r3, cr0, cr5, {3}
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
     1a8:	03201003 	teqeq	r0, #3	; 0x3
     1ac:	413d2070 	teqmi	sp, r0, ror r0
     1b0:	3e414b3e 	vmovcc.8	d1[1], r4
     1b4:	2f3f443d 	svccs	0x003f443d
     1b8:	4b4b3d2f 	blmi	12cf67c <__Stack_Size+0x12cf27c>
					putchw(putp,putf,w,lz,bf);
     1bc:	2f303e4b 	svccs	0x00303e4b
     1c0:	4b4b4b3d 	blmi	12d2ebc <__Stack_Size+0x12d2abc>
     1c4:	4b69315b 	blmi	1a4c738 <__Stack_Size+0x1a4c338>
					break;
				case 'c' : 
					putf(putp,(char)(va_arg(va, int)));
     1c8:	3f3d3d4e 	svccc	0x003d3d4e
     1cc:	3e3d3159 	mrccc	1, 1, r3, cr13, cr9, {2}
     1d0:	3d3e673d 	ldccc	7, cr6, [lr, #-244]!
					break;
				case 's' : 
					putchw(putp,putf,w,0,va_arg(va, char*));
     1d4:	22242c22 	eorcs	r2, r4, #8704	; 0x2200
     1d8:	2c22242c 	cfstrscs	mvf2, [r2], #-176
     1dc:	242c2224 	strtcs	r2, [ip], #-548
     1e0:	30242c3e 	eorcc	r2, r4, lr, lsr ip
     1e4:	033c5803 	teqeq	ip, #196608	; 0x30000
     1e8:	5503202b 	strpl	r2, [r3, #-43]
					break;
				case '%' :
					putf(putp,ch);
     1ec:	202b0320 	eorcs	r0, fp, r0, lsr #6
     1f0:	4c03682f 	stcmi	8, cr6, [r3], {47}
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
     1f4:	2e37034a 	cdpcs	3, 3, cr0, cr7, cr10, {2}
     1f8:	2f303d3d 	svccs	0x00303d3d
					break;
				}
			}
		}
	abort:;
	}
     1fc:	3d2f5a3d 	fstmdbscc	pc!, {s10-s70}


void init_printf(void* putp,void (*putf) (void*,char))
	{
	stdout_putf=putf;
     200:	3d593d5a 	ldclcc	13, cr3, [r9, #-360]
	stdout_putp=putp;
     204:	5a753d59 	bpl	1d4f770 <__Stack_Size+0x1d4f370>
	}
     208:	304b314b 	subcc	r3, fp, fp, asr #2
     20c:	304b304b 	subcc	r3, fp, fp, asr #32
     210:	3d4b4d4b 	stclcc	13, cr4, [fp, #-300]
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
     214:	09037a4b 	stmdbeq	r3, {r0, r1, r3, r6, r9, fp, ip, sp, lr}
     218:	004a023c 	subeq	r0, sl, ip, lsr r2
	}
     21c:	01940101 	orrseq	r0, r4, r1, lsl #2



void tfp_sprintf(char* s,char *fmt, ...)
	{
     220:	00020000 	andeq	r0, r2, r0
     224:	0000006b 	andeq	r0, r0, fp, rrx
     228:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     22c:	0101000d 	tsteq	r1, sp
     230:	00000101 	andeq	r0, r0, r1, lsl #2
	va_list va;
	va_start(va,fmt);
	tfp_format(&s,putcp,fmt,va);
     234:	00000100 	andeq	r0, r0, r0, lsl #2
     238:	50504101 	subspl	r4, r0, r1, lsl #2
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
     23c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
	va_list va;
	va_start(va,fmt);
	tfp_format(&s,putcp,fmt,va);
	putcp(&s,0);
	va_end(va);
	}
     240:	6d747300 	ldclvs	3, cr7, [r4]
     244:	31663233 	cmncc	r6, r3, lsr r2
     248:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
     24c:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
	stdout_putf=putf;
	stdout_putp=putp;
	}

void tfp_printf(char *fmt, ...)
	{
     250:	4300636e 	movwmi	r6, #878	; 0x36e
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
     254:	3033354d 	eorscc	r3, r3, sp, asr #10
     258:	2f57485f 	svccs	0x0057485f
	stdout_putf=putf;
	stdout_putp=putp;
	}

void tfp_printf(char *fmt, ...)
	{
     25c:	00636e69 	rsbeq	r6, r3, r9, ror #28
     260:	6d747300 	ldclvs	3, cr7, [r4]
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
     264:	31663233 	cmncc	r6, r3, lsr r2
	va_end(va);
	}
     268:	695f7830 	ldmdbvs	pc, {r4, r5, fp, ip, sp, lr}^
     26c:	00632e74 	rsbeq	r2, r3, r4, ror lr
     270:	73000001 	movwvc	r0, #1	; 0x1
     274:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     278:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
     27c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
	dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction (INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
     280:	00682e65 	rsbeq	r2, r8, r5, ror #28
     284:	75000002 	strvc	r0, [r0, #-2]
     288:	74726173 	ldrbtvc	r6, [r2], #-371
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
	}
	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
     28c:	0300682e 	movweq	r6, #2094	; 0x82e
     290:	00000000 	andeq	r0, r0, r0
     294:	343c0205 	ldrtcc	r0, [ip], #-517
	dxl_txrx_packet();
     298:	27030800 	strcs	r0, [r3, -r0, lsl #16]
	u16 CommStatus = dxl_get_result();
     29c:	0a031301 	beq	c4ea8 <__Stack_Size+0xc4aa8>
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
     2a0:	2e0f032e 	cdpcs	3, 0, cr0, cr15, cr14, {1}
		PrintErrorCode();
     2a4:	032e0f03 	teqeq	lr, #12	; 0xc
	else
		PrintCommStatus(CommStatus);
     2a8:	0f032e0f 	svceq	0x00032e0f
#endif
}
     2ac:	0a03132e 	beq	c4f6c <__Stack_Size+0xc4b6c>
     2b0:	0a03132e 	beq	c4f70 <__Stack_Size+0xc4b70>
     2b4:	1603132e 	strne	r1, [r3], -lr, lsr #6
     2b8:	0a03132e 	beq	c4f78 <__Stack_Size+0xc4b78>
	}
	interpolating = 1;
}
/* interpolate our pose, this should be called at about 30Hz. */
#define WAIT_SLOP_FACTOR 10
int BioloidControllerEx_interpolateStep(bool fWait) {
     2bc:	0a03132e 	beq	c4f7c <__Stack_Size+0xc4b7c>
     2c0:	0a03132e 	beq	c4f80 <__Stack_Size+0xc4b80>

	if (interpolating == 0)
     2c4:	0a03132e 	beq	c4f84 <__Stack_Size+0xc4b84>
		return 0;
	int i;
	int complete = poseSize;
     2c8:	0a03132e 	beq	c4f88 <__Stack_Size+0xc4b88>
	if (!fWait) {
     2cc:	0a03132e 	beq	c4f8c <__Stack_Size+0xc4b8c>
		if (getMillis() < (nextframe_ - WAIT_SLOP_FACTOR)) {
     2d0:	0a03132e 	beq	c4f90 <__Stack_Size+0xc4b90>
     2d4:	0a03132e 	beq	c4f94 <__Stack_Size+0xc4b94>
     2d8:	0a03132e 	beq	c4f98 <__Stack_Size+0xc4b98>
			return (getMillis() - nextframe_); // We still have some time to do something...
     2dc:	0a03132e 	beq	c4f9c <__Stack_Size+0xc4b9c>
     2e0:	0a03132e 	beq	c4fa0 <__Stack_Size+0xc4ba0>
     2e4:	0a03132e 	beq	c4fa4 <__Stack_Size+0xc4ba4>
#ifdef MILLIS
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	while (getMillis() < nextframe_);
     2e8:	0a03132e 	beq	c4fa8 <__Stack_Size+0xc4ba8>
     2ec:	0a03132e 	beq	c4fac <__Stack_Size+0xc4bac>
     2f0:	0a03132e 	beq	c4fb0 <__Stack_Size+0xc4bb0>
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
     2f4:	0a03132e 	beq	c4fb4 <__Stack_Size+0xc4bb4>
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     2f8:	0a03132e 	beq	c4fb8 <__Stack_Size+0xc4bb8>
     2fc:	0b03132e 	bleq	c4fbc <__Stack_Size+0xc4bbc>
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
     300:	0b03132e 	bleq	c4fc0 <__Stack_Size+0xc4bc0>
     304:	0b03132e 	bleq	c4fc4 <__Stack_Size+0xc4bc4>
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     308:	0a03132e 	beq	c4fc8 <__Stack_Size+0xc4bc8>
		int diff = nextpose_[i] - pose_[i];
     30c:	0a03132e 	beq	c4fcc <__Stack_Size+0xc4bcc>
     310:	0a03132e 	beq	c4fd0 <__Stack_Size+0xc4bd0>
     314:	0a03132e 	beq	c4fd4 <__Stack_Size+0xc4bd4>
     318:	0b03132e 	bleq	c4fd8 <__Stack_Size+0xc4bd8>
     31c:	0b03132e 	bleq	c4fdc <__Stack_Size+0xc4bdc>
		if (diff == 0) {
     320:	0a03132e 	beq	c4fe0 <__Stack_Size+0xc4be0>
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
     324:	0a03132e 	beq	c4fe4 <__Stack_Size+0xc4be4>
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
     328:	0a03142e 	beq	c53e8 <__Stack_Size+0xc4fe8>
		int diff = nextpose_[i] - pose_[i];
		if (diff == 0) {
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
     32c:	0a03132e 	beq	c4fec <__Stack_Size+0xc4bec>
					pose_[i] = nextpose_[i];
     330:	0a03132e 	beq	c4ff0 <__Stack_Size+0xc4bf0>
					complete--;
     334:	0a03132e 	beq	c4ff4 <__Stack_Size+0xc4bf4>
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
     338:	0a03132e 	beq	c4ff8 <__Stack_Size+0xc4bf8>
     33c:	0a03132e 	beq	c4ffc <__Stack_Size+0xc4bfc>
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
     340:	0a03132e 	beq	c5000 <__Stack_Size+0xc4c00>
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
     344:	0a03132e 	beq	c5004 <__Stack_Size+0xc4c04>
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
     348:	1803132e 	stmdane	r3, {r1, r2, r3, r5, r8, r9, ip}
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     34c:	1803132e 	stmdane	r3, {r1, r2, r3, r5, r8, r9, ip}
     350:	0a03132e 	beq	c5010 <__Stack_Size+0xc4c10>
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif

	}
	if (complete <= 0)
     354:	0a03132e 	beq	c5014 <__Stack_Size+0xc4c14>
		interpolating = 0;
     358:	0a03132e 	beq	c5018 <__Stack_Size+0xc4c18>
	BioloidControllerEx_writePose();
     35c:	0b03132e 	bleq	c501c <__Stack_Size+0xc4c1c>
     360:	0b03132e 	bleq	c5020 <__Stack_Size+0xc4c20>
	return 0;
}
     364:	0a03132e 	beq	c5024 <__Stack_Size+0xc4c24>
     368:	0a03132e 	beq	c5028 <__Stack_Size+0xc4c28>
     36c:	0a03132e 	beq	c502c <__Stack_Size+0xc4c2c>
     370:	0a03132e 	beq	c5030 <__Stack_Size+0xc4c30>
     374:	0a03132e 	beq	c5034 <__Stack_Size+0xc4c34>
     378:	0a03132e 	beq	c5038 <__Stack_Size+0xc4c38>
     37c:	0a03132e 	beq	c503c <__Stack_Size+0xc4c3c>
     380:	1803132e 	stmdane	r3, {r1, r2, r3, r5, r8, r9, ip}
	for (i = 0; i < poseSize; i++)
		//nextpose_[i] = pgm_read_word_near(addr+1+i) << BIOLOID_SHIFT;
		nextpose_[i] = pgm_read_word_near(addr + 1 + i);
}
/* read in current servo positions to the pose. */
void BioloidControllerEx_readPose() {
     384:	0a03132e 	beq	c5044 <__Stack_Size+0xc4c44>
     388:	0a03132e 	beq	c5048 <__Stack_Size+0xc4c48>
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
		//pose_[i] = dxl_read_word(id_[i],AXM_PRESENT_POSITION_L)<<BIOLOID_SHIFT;
		pose_[i] = dxl_read_word(id_[i], AXM_PRESENT_POSITION_L);
     38c:	0a03132e 	beq	c504c <__Stack_Size+0xc4c4c>
     390:	0a03132e 	beq	c5050 <__Stack_Size+0xc4c50>
     394:	0b03132e 	bleq	c5054 <__Stack_Size+0xc4c54>
     398:	b903132e 	stmdblt	r3, {r1, r2, r3, r5, r8, r9, ip}
     39c:	30302e7f 	eorscc	r2, r0, pc, ror lr
		PrintChar(id_[i]);
		PrintString(" - ");
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
     3a0:	2e7edd03 	cdpcs	13, 7, cr13, cr14, cr3, {0}

#ifdef DEBUG_BIOLOIDEX
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
     3a4:	63033030 	movwvs	r3, #12336	; 0x3030
     3a8:	0330302e 	teqeq	r0, #46	; 0x2e
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
	}
}
     3ac:	2f2e7cd3 	svccs	0x002e7cd3
     3b0:	0002022f 	andeq	r0, r2, pc, lsr #4
     3b4:	067c0101 	ldrbteq	r0, [ip], -r1, lsl #2
     3b8:	00020000 	andeq	r0, r2, r0
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitPosY[GaitCurrentLegNr] = -3 * g_InControlState.LegLiftHeight
				/ (3 + g_InControlState.gaitCur.HalfLiftHeight); // Easier to shift between div factor: /1 (3/3), /2 (3/6) and 3/4
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y
     3bc:	000000f4 	strdeq	r0, [r0], -r4
				/ g_InControlState.gaitCur.LiftDivFactor;
	}

	//Optional Half heigth Rear 5 LiftedPos (5 lifted positions)
	else if (((g_InControlState.gaitCur.NrLiftedPos == 5 && (LegStep == -2)))
     3c0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     3c4:	0101000d 	tsteq	r1, sp
     3c8:	00000101 	andeq	r0, r0, r1, lsl #2
     3cc:	00000100 	andeq	r0, r0, r0, lsl #2
     3d0:	50504101 	subspl	r4, r0, r1, lsl #2
     3d4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     3d8:	50504100 	subspl	r4, r0, r0, lsl #2
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = -g_InControlState.TravelLength.x / 2;
     3dc:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     3e0:	6d747300 	ldclvs	3, cr7, [r4]
     3e4:	31663233 	cmncc	r6, r3, lsr r2
     3e8:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
     3ec:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
     3f0:	4300636e 	movwmi	r6, #878	; 0x36e
     3f4:	3033354d 	eorscc	r3, r3, sp, asr #10
     3f8:	2f57485f 	svccs	0x0057485f
     3fc:	00636e69 	rsbeq	r6, r3, r9, ror #28
     400:	6f685000 	svcvs	0x00685000
		GaitPosZ[GaitCurrentLegNr] = -g_InControlState.TravelLength.z / 2;
     404:	78696e65 	stmdavc	r9!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     408:	706e495f 	rsbvc	r4, lr, pc, asr r9
     40c:	435f7475 	cmpmi	pc, #1962934272	; 0x75000000
     410:	616d6d6f 	cmnvs	sp, pc, ror #26
		GaitRotY[GaitCurrentLegNr] = -g_InControlState.TravelLength.y / 2;
     414:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
     418:	0100682e 	tsteq	r0, lr, lsr #16
     41c:	68500000 	ldmdavs	r0, {}^
     420:	696e656f 	stmdbvs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, sp, lr}^
	}

	//Optional Half heigth Front 5 LiftedPos (5 lifted positions)
	else if ((g_InControlState.gaitCur.NrLiftedPos == 5)
     424:	72445f78 	subvc	r5, r4, #480	; 0x1e0
     428:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     42c:	3158415f 	cmpcc	r8, pc, asr r1
     430:	00682e32 	rsbeq	r2, r8, r2, lsr lr
     434:	42000001 	andmi	r0, r0, #1	; 0x1
     438:	6d5f6769 	ldclvs	7, cr6, [pc, #-420]
			&& (LegStep == 2
					|| LegStep == -(g_InControlState.gaitCur.StepsInGait - 2))
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
     43c:	2e6e6961 	cdpcs	9, 6, cr6, cr14, cr1, {3}
     440:	00020063 	andeq	r0, r2, r3, rrx
     444:	6d747300 	ldclvs	3, cr7, [r4]
     448:	31663233 	cmncc	r6, r3, lsr r2
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
     44c:	745f7830 	ldrbvc	r7, [pc], #2096	; 454 <__Stack_Size+0x54>
     450:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     454:	00030068 	andeq	r0, r3, r8, rrx
     458:	72697700 	rsbvc	r7, r9, #0	; 0x0
     45c:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
     460:	00010068 	andeq	r0, r1, r8, rrx
     464:	6f685000 	svcvs	0x00685000
     468:	78696e65 	stmdavc	r9!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     46c:	0100682e 	tsteq	r0, lr, lsr #16
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y / 2;
     470:	79640000 	stmdbvc	r4!, {}^
     474:	696d616e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, sp, lr}^
     478:	5f6c6578 	svcpl	0x006c6578
     47c:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
	}
	//_B_
	//Leg front down position //bug here?  From _A_ to _B_ there should only be one gaitstep, not 2!
	//For example, where is the case of LegStep==0+2 executed when NRLiftedPos=3?
	else if ((LegStep == g_InControlState.gaitCur.FrontDownPos
     480:	5f737365 	svcpl	0x00737365
     484:	6c626174 	stfvse	f6, [r2], #-464
     488:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     48c:	00000400 	andeq	r0, r0, r0, lsl #8
     490:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
     494:	00682e74 	rsbeq	r2, r8, r4, ror lr
     498:	42000004 	andmi	r0, r0, #4	; 0x4
     49c:	6f6c6f69 	svcvs	0x006c6f69
			|| LegStep
					== -(g_InControlState.gaitCur.StepsInGait
							- g_InControlState.gaitCur.FrontDownPos))
			&& GaitPosY[GaitCurrentLegNr] < 0) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
     4a0:	78456469 	stmdavc	r5, {r0, r3, r5, r6, sl, sp, lr}^
     4a4:	0100682e 	tsteq	r0, lr, lsr #16
     4a8:	64610000 	strbtvs	r0, [r1]
     4ac:	00682e63 	rsbeq	r2, r8, r3, ror #28
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
     4b0:	00000004 	andeq	r0, r0, r4
     4b4:	00020500 	andeq	r0, r2, r0, lsl #10
     4b8:	03000000 	movweq	r0, #0	; 0x0
     4bc:	140101b4 	strne	r0, [r1], #-436
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y / 2;
     4c0:	22211f4b 	eorcs	r1, r1, #300	; 0x12c
     4c4:	2f302f30 	svccs	0x00302f30
     4c8:	0314eb2f 	tsteq	r4, #48128	; 0xbc00
		GaitPosY[GaitCurrentLegNr] = 0;
     4cc:	032e028d 	teqeq	lr, #-805306360	; 0xd0000008
     4d0:	034b010c 	movteq	r0, #45324	; 0xb10c
	}

	//Move body forward
	else {
		GaitPosX[GaitCurrentLegNr] = GaitPosX[GaitCurrentLegNr]
     4d4:	0a032076 	beq	c86b4 <__Stack_Size+0xc82b4>
     4d8:	7403222e 	strvc	r2, [r3], #-558
     4dc:	2121212e 	teqcs	r1, lr, lsr #2
     4e0:	21212121 	teqcs	r1, r1, lsr #2
     4e4:	22302421 	eorscs	r2, r0, #553648128	; 0x21000000
     4e8:	9e20032f 	cdpls	3, 2, cr0, cr0, cr15, {1}
				- (g_InControlState.TravelLength.x
						/ (short) g_InControlState.gaitCur.TLDivFactor);
		GaitPosY[GaitCurrentLegNr] = 0;
     4ec:	04143314 	ldreq	r3, [r4], #-788
     4f0:	7de70302 	stclvc	3, cr0, [r7, #8]!
     4f4:	3e21172e 	cdpcc	7, 2, cr1, cr1, cr14, {1}
		GaitPosZ[GaitCurrentLegNr] = GaitPosZ[GaitCurrentLegNr]
     4f8:	40697628 	rsbmi	r7, r9, r8, lsr #12
     4fc:	b5030304 	strlt	r0, [r3, #-772]
     500:	03152003 	tsteq	r5, #3	; 0x3
     504:	142e00d1 	strtne	r0, [lr], #-209
				- (g_InControlState.TravelLength.z
						/ (short) g_InControlState.gaitCur.TLDivFactor);
		GaitRotY[GaitCurrentLegNr] = GaitRotY[GaitCurrentLegNr]
     508:	162e3f03 	strtne	r3, [lr], -r3, lsl #30
     50c:	0a032462 	beq	c969c <__Stack_Size+0xc929c>
     510:	03012602 	movweq	r2, #5634	; 0x1602
     514:	0a032e76 	beq	cbef4 <__Stack_Size+0xcbaf4>
				- (g_InControlState.TravelLength.y
						/ (short) g_InControlState.gaitCur.TLDivFactor);
	}

}
     518:	2e760320 	cdpcs	3, 7, cr0, cr6, cr0, {1}
     51c:	03200a03 	teqeq	r0, #12288	; 0x3000
     520:	0a032076 	beq	c8700 <__Stack_Size+0xc8300>
     524:	21672120 	cmncs	r7, r0, lsr #2
     528:	69502a32 	ldmdbvs	r0, {r1, r4, r5, r9, fp, sp}^
     52c:	6a311d31 	bvs	c479f8 <__Stack_Size+0xc475f8>
     530:	a393934c 	orrsge	r9, r3, #805306369	; 0x30000001

}

//--------------------------------------------------------------------
//[GAIT Sequence]
void GaitSeq(void) {
     534:	2c3d2f22 	ldccs	15, cr2, [sp], #-136
	//Check if the Gait is in motion - If not if we are going to start a motion try to align our Gaitstep to start with a good foot
	// for the direction we are about to go...

	if (fWalking || (g_InControlState.ForceGaitStepCnt != 0))
     538:	50714b4b 	rsbspl	r4, r1, fp, asr #22
     53c:	5a085b4b 	bpl	217270 <__Stack_Size+0x216e70>
     540:	30235523 	eorcc	r5, r3, r3, lsr #10
		TravelRequest = true;   // Is walking or was walking...
     544:	82290394 	eorhi	r0, r9, #1342177282	; 0x50000002
     548:	87241c24 	strhi	r1, [r4, -r4, lsr #24]!
	else {
		TravelRequest = (abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
     54c:	4b182d02 	blmi	60b95c <__Stack_Size+0x60b55c>
     550:	084d3d83 	stmdaeq	sp, {r0, r1, r7, r8, sl, fp, ip, sp}^
     554:	84d8ae5e 	ldrbhi	sl, [r8], #3678
     558:	d892cc4f 	ldmle	r2, {r0, r1, r2, r3, r6, sl, fp, lr, pc}
     55c:	9fca4f68 	svcls	0x00ca4f68
     560:	cc78919f 	ldfgtp	f1, [r8], #-636
     564:	87759f83 	ldrbhi	r9, [r5, -r3, lsl #31]!
     568:	75831708 	strvc	r1, [r3, #1800]
     56c:	21bd4f75 	undefined instruction 0x21bd4f75
     570:	95853d1f 	strls	r3, [r5, #3359]
     574:	d67ef803 	ldrbtle	pc, [lr], -r3, lsl #16
     578:	084c7524 	stmdaeq	ip, {r2, r5, r8, sl, ip, sp, lr}^
     57c:	212f2386 	smlawbcs	pc, r6, r3, r2
				|| (abs(g_InControlState.TravelLength.y) > cTravelDeadZone);

		if (TravelRequest) {

		} else {    //Clear values under the cTravelDeadZone
			g_InControlState.TravelLength.x = 0;
     580:	6b2d5925 	blvs	b56a1c <__Stack_Size+0xb5661c>
			g_InControlState.TravelLength.z = 0;
     584:	1f2f2d3d 	svcne	0x002f2d3d
			g_InControlState.TravelLength.y = 0; //Gait NOT in motion, return to home position
		}
	}

	//Calculate Gait sequence
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
     588:	4b3f212f 	blmi	fc8a4c <__Stack_Size+0xfc864c>
     58c:	0186033d 	orreq	r0, r6, sp, lsr r3
     590:	221e149e 	andscs	r1, lr, #-1644167168	; 0x9e000000
		Gait(LegIndex);
     594:	2f1f4b75 	svccs	0x001f4b75
			g_InControlState.TravelLength.y = 0; //Gait NOT in motion, return to home position
		}
	}

	//Calculate Gait sequence
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
     598:	035b211f 	cmpeq	fp, #-1073741817	; 0xc0000007
     59c:	7303200d 	movwvc	r2, #12301	; 0x300d
     5a0:	200d0320 	andcs	r0, sp, r0, lsr #6
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5a4:	21207303 	teqcs	r0, r3, lsl #6
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
     5a8:	03273f3e 	teqeq	r7, #248	; 0xf8
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5ac:	4c3d2079 	ldcmi	0, cr2, [sp], #-484
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
     5b0:	4b594d4b 	blmi	1653ae4 <__Stack_Size+0x16536e4>
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5b4:	211f2f1f 	tstcs	pc, pc, lsl pc
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
		g_InControlState.GaitStep = 1;
     5b8:	1d15f85a 	ldcne	8, cr15, [r5, #-360]
     5bc:	08422f23 	stmdaeq	r2, {r0, r1, r5, r8, r9, sl, fp, sp}^

	// If we have a force count decrement it now...
	if (g_InControlState.ForceGaitStepCnt)
     5c0:	2d595a25 	fldscs	s11, [r9, #-148]
     5c4:	1f752d21 	svcne	0x00752d21
		g_InControlState.ForceGaitStepCnt--;
     5c8:	6784692f 	strvs	r6, [r4, pc, lsr #18]
}
     5cc:	752d212d 	strvc	r2, [sp, #-301]!
     5d0:	68592f1f 	ldmdavs	r9, {r0, r1, r2, r3, r4, r8, r9, sl, fp, sp}^
     5d4:	1f2f2d67 	svcne	0x002f2d67
     5d8:	1f592d3d 	svcne	0x00592d3d
     5dc:	67689321 	strbvs	r9, [r8, -r1, lsr #6]!
}
//--------------------------------------------------------------------
//[BalanceBody]
void BalanceBody(void) {

	TotalTransZ = TotalTransZ / BalanceDivFactor;
     5e0:	3d1f2f2d 	ldccc	15, cr2, [pc, #-180]
     5e4:	211f592d 	tstcs	pc, sp, lsr #18
     5e8:	03746b03 	cmneq	r4, #3072	; 0xc00
     5ec:	b22e0817 	eorlt	r0, lr, #1507328	; 0x170000
     5f0:	3d231d15 	stccc	13, cr1, [r3, #-84]!
	TotalTransX = TotalTransX / BalanceDivFactor;
     5f4:	75676850 	strbvc	r6, [r7, #-2128]!
     5f8:	752f211f 	strvc	r2, [pc, #-287]!	; 4e1 <__Stack_Size+0xe1>
     5fc:	67752fbb 	undefined
	TotalTransY = TotalTransY / BalanceDivFactor;
     600:	21b0211f 	lslscs	r2, pc, r1
     604:	0301cb93 	movweq	ip, #7059	; 0x1b93
     608:	5b1f3c0a 	blpl	7cf638 <__Stack_Size+0x7cf238>
     60c:	312d3d3d 	teqcc	sp, sp, lsr sp

	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
		TotalXBal1 += 3600;

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
     610:	207a0321 	rsbscs	r0, sl, r1, lsr #6
     614:	282e0903 	stmdacs	lr!, {r0, r1, r8, fp}
	TotalTransX = TotalTransX / BalanceDivFactor;
	TotalTransY = TotalTransY / BalanceDivFactor;

#ifndef QUADMODE // ??? on PhantomX Hex at no movment YBal1 = 1800, on Quad = 0...  Need to experiment
	if (TotalYBal1 > 0)        //Rotate balance circle by +/- 180 deg
		TotalYBal1 -= 1800;
     618:	2d212d13 	stccs	13, cr2, [r1, #-76]!
     61c:	2d212d21 	stccs	13, cr2, [r1, #-132]!
	else
		TotalYBal1 += 1800;
     620:	21d84c21 	bicscs	r4, r8, r1, lsr #24
#endif

	if (TotalZBal1 < -1800) //Compensate for extreme balance positions that causes overflow
     624:	4c302c30 	ldcmi	12, cr2, [r0], #-192
     628:	907ed803 	rsbsls	sp, lr, r3, lsl #16
     62c:	20790335 	rsbscs	r0, r9, r5, lsr r3
		TotalZBal1 += 3600;
     630:	211f2f27 	tstcs	pc, r7, lsr #30
     634:	25231d31 	strcs	r1, [r3, #-3377]!

	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
     638:	03262f1b 	teqeq	r6, #108	; 0x6c
     63c:	0326207a 	teqeq	r6, #122	; 0x7a
		TotalXBal1 += 3600;
     640:	222f207a 	eorcs	r2, pc, #122	; 0x7a
     644:	221e221e 	andscs	r2, lr, #-536870911	; 0xe0000001

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
     648:	e63d221e 	undefined
     64c:	4b3e084b 	blmi	f82780 <__Stack_Size+0xf82380>
	TotalXBal1 = -TotalXBal1 / BalanceDivFactor;
     650:	a1031408 	tstge	r3, r8, lsl #8
     654:	033c0801 	teqeq	ip, #65536	; 0x10000
	TotalZBal1 = TotalZBal1 / BalanceDivFactor;
     658:	7403200c 	strvc	r2, [r3], #-12
	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
		TotalXBal1 += 3600;

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
	TotalXBal1 = -TotalXBal1 / BalanceDivFactor;
     65c:	0c032020 	stceq	0, cr2, [r3], {32}
     660:	20740320 	rsbscs	r0, r4, r0, lsr #6
	TotalZBal1 = TotalZBal1 / BalanceDivFactor;
     664:	03200c03 	teqeq	r0, #768	; 0x300
     668:	0c032074 	stceq	0, cr2, [r3], {116}

}
     66c:	20740320 	rsbscs	r0, r4, r0, lsr #6
     670:	3e2e0c03 	cdpcc	12, 2, cr0, cr14, cr3, {0}
     674:	033d221e 	teqeq	sp, #-536870911	; 0xe0000001
     678:	6a032016 	bvs	c86d8 <__Stack_Size+0xc82d8>
     67c:	78036020 	stmdavc	r3, {r5, sp, lr}
     680:	78032820 	stmdavc	r3, {r5, fp, sp}
     684:	1d4e282e 	stclne	8, cr2, [lr, #-184]
     688:	1d221e23 	stcne	14, cr1, [r2, #-140]!
//sin4        - Output Sinus of AngleDeg
//cos4          - Output Cosinus of AngleDeg
void GetSinCos(short AngleDeg1) {
	short ABSAngleDeg1;   //Absolute value of the Angle in Degrees, decimals = 1
	//Get the absolute value of AngleDeg
	if (AngleDeg1 < 0)
     68c:	1d221e23 	stcne	14, cr1, [r2, #-140]!
     690:	232f2221 	teqcs	pc, #268435458	; 0x10000002
		ABSAngleDeg1 = AngleDeg1 * -1;
     694:	221e231d 	andscs	r2, lr, #1946157056	; 0x74000000
     698:	0288222c 	addeq	r2, r8, #-1073741822	; 0xc0000002
	else
		ABSAngleDeg1 = AngleDeg1;

	//Shift rotation to a full circle of 360 deg -> AngleDeg // 360
	if (AngleDeg1 < 0)    //Negative values
		AngleDeg1 = 3600 - (ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600)));
     69c:	241c164a 	ldrcs	r1, [ip], #-1610
     6a0:	0903242a 	stmdbeq	r3, {r1, r3, r5, sl, sp}
     6a4:	03016102 	movweq	r6, #4354	; 0x1102
     6a8:	09032e77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp}
     6ac:	02090374 	andeq	r0, r9, #-805306367	; 0xd0000001
     6b0:	0f030152 	svceq	0x00030152
     6b4:	0e03ba08 	fmacseq	s22, s6, s16
     6b8:	2072033c 	rsbscs	r0, r2, ip, lsr r3
     6bc:	2f200e03 	svccs	0x00200e03
	else
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));

	if (AngleDeg1 >= 0 && AngleDeg1 <= 900)     // 0 to 90 deg
     6c0:	207803fa 	ldrshtcs	r0, [r8], #-58
     6c4:	20780328 	rsbscs	r0, r8, r8, lsr #6
			{
		sin4 = pgm_read_word(&GetSin[AngleDeg1 / 5]); // 5 is the presision (0.5) of the table
     6c8:	0323ce36 	teqeq	r3, #864	; 0x360
     6cc:	09035877 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, fp, ip, lr}
     6d0:	1ee63620 	cdpne	6, 14, cr3, cr6, cr0, {1}
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
     6d4:	1c2408a0 	stcne	8, cr0, [r4], #-640
     6d8:	79033532 	stmdbvc	r3, {r1, r4, r5, r8, sl, ip, sp}
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));

	if (AngleDeg1 >= 0 && AngleDeg1 <= 900)     // 0 to 90 deg
			{
		sin4 = pgm_read_word(&GetSin[AngleDeg1 / 5]); // 5 is the presision (0.5) of the table
     6dc:	f6f42720 	undefined instruction 0xf6f42720
     6e0:	3ea2322a 	cdpcc	2, 10, cr3, cr2, cr10, {1}
     6e4:	023f3e4e 	eorseq	r3, pc, #1248	; 0x4e0
     6e8:	1c161822 	ldcne	8, cr1, [r6], {34}
     6ec:	337b4025 	cmncc	fp, #37	; 0x25
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
     6f0:	2f232b15 	svccs	0x00232b15
     6f4:	25206b03 	strcs	r6, [r0, #-2819]!
     6f8:	03201203 	teqeq	r0, #805306368	; 0x30000000
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
     6fc:	5c2f2e69 	stcpl	14, cr2, [pc], #-420
     700:	20150361 	andscs	r0, r5, r1, ror #6
     704:	2f2e6b03 	svccs	0x002e6b03
     708:	17036f5c 	smlsdne	r3, ip, pc, r6
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     70c:	2e690320 	cdpcs	3, 6, cr0, cr9, cr0, {1}
     710:	15036a2f 	strne	r6, [r3, #-2607]
     714:	3c7a0374 	ldclcc	3, cr0, [sl], #-464
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     718:	08580c03 	ldmdaeq	r8, {r0, r1, sl, fp}^
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     71c:	d73d145e 	undefined
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     720:	1434d93d 	ldrtne	sp, [r4], #-2365
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     724:	2248221e 	subcs	r2, r8, #-536870911	; 0xe0000001
     728:	0e03bb23 	fmacdeq	d11, d3, d19
     72c:	78032882 	stmdavc	r3, {r1, r7, fp, sp}
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     730:	78034420 	stmdavc	r3, {r5, sl, lr}
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     734:	78035220 	stmdavc	r3, {r5, r9, ip, lr}
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     738:	0a032820 	beq	ca7c0 <__Stack_Size+0xca3c0>
     73c:	78032120 	stmdavc	r3, {r5, r8, sp}
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
     740:	bb4c3320 	bllt	130d3c8 <__Stack_Size+0x130cfc8>
     744:	2e0903b5 	mcrcs	3, 0, r0, cr9, cr5, {5}
     748:	03270859 	teqeq	r7, #5832704	; 0x590000
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     74c:	0333010b 	teqeq	r3, #-1073741822	; 0xc0000002
     750:	09030113 	stmdbeq	r3, {r0, r1, r4, r8}
     754:	241c242e 	ldrcs	r2, [ip], #-1070
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     758:	0326343e 	teqeq	r6, #1040187392	; 0x3e000000
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     75c:	0334207a 	teqeq	r4, #122	; 0x7a
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     760:	2f6c207a 	svccs	0x006c207a
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     764:	f1033121 	undefined instruction 0xf1033121
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     768:	1b256679 	blne	95a154 <__Stack_Size+0x959d54>
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     76c:	7a033425 	bvc	cd808 <__Stack_Size+0xcd408>
     770:	7a03342e 	bvc	cd830 <__Stack_Size+0xcd430>
     774:	6a24342e 	bvs	90d834 <__Stack_Size+0x90d434>
     778:	4c200b03 	stcmi	11, cr0, [r0], #-12
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     77c:	2072033d 	rsbscs	r0, r2, sp, lsr r3
     780:	21212121 	teqcs	r1, r1, lsr #2
     784:	23212121 	teqcs	r1, #1073741832	; 0x40000008
     788:	5a312124 	bpl	c48c20 <__Stack_Size+0xc48820>
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
     78c:	5a314b4e 	bpl	c534cc <__Stack_Size+0xc530cc>
     790:	0302046b 	movweq	r0, #9323	; 0x246b
     794:	21ac7d8c 	undefined instruction 0x21ac7d8c
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     798:	3d33211f 	ldfccs	f2, [r3, #-124]!
     79c:	4a440330 	bmi	1101464 <__Stack_Size+0x1101064>
     7a0:	3d221e22 	stccc	14, cr1, [r2, #-136]!
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7a4:	2f21211f 	svccs	0x0021211f
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7a8:	dd03955a 	cfstr32le	mvfx9, [r3, #-360]
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7ac:	1503907e 	strne	r9, [r3, #-126]
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7b0:	206b033c 	rsbcs	r0, fp, ip, lsr r3
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7b4:	2f201503 	svccs	0x00201503
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7b8:	756a4b3d 	strbvc	r4, [sl, #-2877]!
     7bc:	2a216575 	bcs	859d98 <__Stack_Size+0x859998>
     7c0:	30306a6d 	eorscc	r6, r0, sp, ror #20
     7c4:	03303e2f 	teqeq	r0, #752	; 0x2f0
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7c8:	246600fc 	strbtcs	r0, [r6], #-252
     7cc:	242a4040 	strtcs	r4, [sl], #-64
     7d0:	2b231d68 	blcs	8c7d78 <__Stack_Size+0x8c7978>
	//Shift rotation to a full circle of 360 deg -> AngleDeg // 360
	if (AngleDeg1 < 0)    //Negative values
		AngleDeg1 = 3600 - (ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600)));
	else
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));
     7d4:	3f4d3142 	svccc	0x004d3142
     7d8:	9e7dd203 	cdpls	2, 7, cr13, cr13, cr3, {0}
     7dc:	03423130 	movteq	r3, #8496	; 0x2130
     7e0:	3b262e7a 	blcc	98c1d0 <__Stack_Size+0x98bdd0>
     7e4:	db033f41 	blle	d04f0 <__Stack_Size+0xd00f0>
     7e8:	1e229001 	cdpne	0, 2, cr9, cr2, cr1, {0}
     7ec:	1d4d3022 	stclne	0, cr3, [sp, #-136]
     7f0:	3e326523 	cdpcc	5, 3, cr6, cr2, cr3, {1}
     7f4:	667dba03 	ldrbtvs	fp, [sp], -r3, lsl #20
     7f8:	26373e23 	ldrtcs	r3, [r7], -r3, lsr #28
	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
	}
}
     7fc:	044c4135 	strbeq	r4, [ip], #-309
     800:	04d50303 	ldrbeq	r0, [r5], #771
     804:	222c1490 	eorcs	r1, ip, #-1879048192	; 0x90000000
     808:	30313e21 	eorscc	r3, r1, r1, lsr #28
     80c:	2f241c40 	svccs	0x00241c40
//cos4        - Input Cosinus
//AngleRad4     - Output Angle in AngleRad4
long GetArcCos(short cos4) {
	boolean NegativeValue/*:1*/;    //If the the value is Negative
	//Check for negative value
	if (cos4 < 0) {
     810:	4b4b2c3d 	blmi	12cb90c <__Stack_Size+0x12cb50c>
     814:	3c0a0371 	stccc	3, cr0, [sl], {113}
     818:	03207603 	teqeq	r0, #3145728	; 0x300000
		cos4 = -cos4;
     81c:	314b200a 	cmpcc	fp, sl
     820:	2123212f 	teqcs	r3, pc, lsr #2
		NegativeValue = 1;
	} else
		NegativeValue = 0;

	//Limit cos4 to his maximal value
	cos4 = min(cos4, c4DEC);
     824:	21212121 	teqcs	r1, r1, lsr #2
     828:	2f302f23 	svccs	0x00302f23
     82c:	3c01a203 	sfmcc	f2, 1, [r1], {3}

	if ((cos4 >= 0) && (cos4 < 9000)) {
     830:	207edc03 	rsbscs	sp, lr, r3, lsl #24
     834:	2e01a403 	cdpcs	4, 0, cr10, cr1, cr3, {0}
     838:	207edc03 	rsbscs	sp, lr, r3, lsl #24
		AngleRad4 = (byte) pgm_read_byte(&GetACos[cos4 / 79]);
     83c:	2001a403 	andcs	sl, r1, r3, lsl #8
     840:	03010422 	movweq	r0, #5154	; 0x1422
     844:	4b587a99 	blmi	161f2b0 <__Stack_Size+0x161eeb0>
		AngleRad4 = ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255) ;
     848:	0422211f 	strteq	r2, [r2], #-287
     84c:	04c60303 	strbeq	r0, [r6], #771
	} else if ((cos4 >= 9000) && (cos4 < 9900)) {
     850:	03010420 	movweq	r0, #5152	; 0x1420
     854:	22207bba 	eorcs	r7, r0, #190464	; 0x2e800
     858:	042f302f 	strteq	r3, [pc], #47	; 860 <__Stack_Size+0x460>
     85c:	04c00303 	strbeq	r0, [r0], #771
		AngleRad4 = (byte) pgm_read_byte(&GetACos[(cos4 - 9000) / 8 + 114]);
     860:	302f2f2e 	eorcc	r2, pc, lr, lsr #30
     864:	cd030204 	sfmgt	f0, 4, [r3, #-16]
     868:	012b027c 	teqeq	fp, ip, ror r2
     86c:	1b251b25 	blne	947508 <__Stack_Size+0x947108>
     870:	2e1d0325 	cdpcs	3, 1, cr0, cr13, cr5, {1}
     874:	944b3d3d 	strbls	r3, [fp], #-3389
		AngleRad4 = (long) ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255)
     878:	59232b77 	stmdbpl	r3!, {r0, r1, r2, r4, r5, r6, r8, r9, fp, sp}
	} else if ((cos4 >= 9900) && (cos4 <= 10000)) {
     87c:	3b211fad 	blcc	848738 <__Stack_Size+0x848338>
     880:	3d1f2121 	ldfccs	f2, [pc, #-132]
     884:	82780375 	rsbshi	r0, r8, #-738197503	; 0xd4000001
		AngleRad4 = (byte) pgm_read_byte(&GetACos[(cos4 - 9900) / 2 + 227]);
     888:	6a740b03 	bvs	1d0349c <__Stack_Size+0x1d0309c>
     88c:	3e2f3030 	mcrcc	0, 1, r3, cr15, cr0, {1}
     890:	b5034340 	strlt	r4, [r3, #-832]
		AngleRad4 = (long) ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255)
     894:	0318ba7e 	tsteq	r8, #516096	; 0x7e000
     898:	59263c7a 	stmdbpl	r6!, {r1, r3, r4, r5, r6, sl, fp, ip, sp}
     89c:	26207903 	strtcs	r7, [r0], -r3, lsl #18
     8a0:	3e1e302f 	cdpcc	0, 1, cr3, cr14, cr15, {1}
     8a4:	03747703 	cmneq	r4, #786432	; 0xc0000
     8a8:	1b232009 	blne	8c88d4 <__Stack_Size+0x8c84d4>
     8ac:	21213133 	teqcs	r1, r3, lsr r1
	}

	//Add negative sign
	if (NegativeValue)
		AngleRad4 = 31416 - AngleRad4;
     8b0:	5c2f2f1e 	stcpl	15, cr2, [pc], #-120
     8b4:	311d3f5b 	tstcc	sp, fp, asr pc
     8b8:	03030451 	movweq	r0, #13393	; 0x3451
     8bc:	329e0495 	addscc	r0, lr, #-1795162112	; 0x95000000
     8c0:	02241c6a 	eoreq	r1, r4, #27136	; 0x6a00

	return AngleRad4;
}
     8c4:	0c031028 	stceq	0, cr1, [r3], {40}
     8c8:	0302042e 	movweq	r0, #9262	; 0x242e
     8cc:	21d67b81 	bicscs	r7, r6, r1, lsl #23
     8d0:	5a272bf5 	bpl	9cb8ac <__Stack_Size+0x9cb4ac>
     8d4:	43212d3d 	teqmi	r1, #3904	; 0xf40
     8d8:	f1030104 	undefined instruction 0xf1030104

unsigned long isqrt32(unsigned long n) //
{
     8dc:	39038202 	stmdbcc	r3, {r1, r9, pc}
     8e0:	4b4b4c2e 	blmi	12d39a0 <__Stack_Size+0x12d35a0>

	root = 0;
	remainder = n;
	place = 0x40000000; // OR place = 0x4000; OR place = 0x40; - respectively

	while (place > remainder)
     8e4:	034b4b4b 	movteq	r4, #47947	; 0xbb4b
     8e8:	db034a19 	blle	d3154 <__Stack_Size+0xd2d54>
     8ec:	7a31f27c 	bvc	c7d2e4 <__Stack_Size+0xc7cee4>
		place = place >> 2;
	while (place) {
		if (remainder >= root + place) {
     8f0:	83bc4359 	undefined instruction 0x83bc4359
			remainder = remainder - root - place;
     8f4:	2f213b21 	svccs	0x00213b21
     8f8:	7a4b5a4d 	bvc	12d7234 <__Stack_Size+0x12d6e34>
			root = root + (place << 1);
     8fc:	4c219fbc 	stcmi	15, cr9, [r1], #-752

	while (place > remainder)
		place = place >> 2;
	while (place) {
		if (remainder >= root + place) {
			remainder = remainder - root - place;
     900:	59bb5d59 	ldmibpl	fp!, {r0, r3, r4, r6, r8, sl, fp, ip, lr}
			root = root + (place << 1);
		}
		root = root >> 1;
		place = place >> 2;
     904:	302c223e 	eorcc	r2, ip, lr, lsr r2
	remainder = n;
	place = 0x40000000; // OR place = 0x4000; OR place = 0x40; - respectively

	while (place > remainder)
		place = place >> 2;
	while (place) {
     908:	3d2c3051 	stccc	0, cr3, [ip, #-324]!
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
	XYhyp2 = isqrt32(
     90c:	21bb5b4b 	undefined instruction 0x21bb5b4b
//(GETATAN2) Simplyfied ArcTan2 function based on fixed point ArcCos
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
     910:	20080b03 	andcs	r0, r8, r3, lsl #22
	XYhyp2 = isqrt32(
     914:	303d59ad 	eorscc	r5, sp, sp, lsr #19
     918:	2d216740 	stccs	7, cr6, [r1, #-256]!
//(GETATAN2) Simplyfied ArcTan2 function based on fixed point ArcCos
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
     91c:	6c034c22 	stcvs	12, cr4, [r3], {34}
	XYhyp2 = isqrt32(
     920:	16037574 	undefined
     924:	2e690382 	cdpcs	3, 6, cr0, cr9, cr2, {4}
     928:	402e1703 	eormi	r1, lr, r3, lsl #14
			((long) AtanX * AtanX * c4DEC) + ((long) AtanY * AtanY * c4DEC));
	GetArcCos(((long) AtanX * (long) c6DEC) / (long) XYhyp2);
     92c:	21ea085b 	mvncs	r0, fp, asr r8
     930:	2f1f2f1f 	svccs	0x001f2f1f
     934:	68212f1f 	stmdavs	r1!, {r0, r1, r2, r3, r4, r8, r9, sl, fp, sp}
     938:	03045959 	movweq	r5, #18777	; 0x4959
     93c:	3c04db03 	stccc	11, cr13, [r4], {3}
     940:	03010476 	movweq	r0, #5238	; 0x1476
     944:	9f907ba9 	svcls	0x00907ba9

	if (AtanY < 0) // removed overhead... Atan4 = AngleRad4 * (AtanY/abs(AtanY));
     948:	4b4b7559 	blmi	12ddeb4 <__Stack_Size+0x12ddab4>
		Atan4 = -AngleRad4;
     94c:	24221e30 	strtcs	r1, [r2], #-3632
	else
		Atan4 = AngleRad4;
     950:	2f1f69a0 	svccs	0x001f69a0
	XYhyp2 = isqrt32(
			((long) AtanX * AtanX * c4DEC) + ((long) AtanY * AtanY * c4DEC));
	GetArcCos(((long) AtanX * (long) c6DEC) / (long) XYhyp2);

	if (AtanY < 0) // removed overhead... Atan4 = AngleRad4 * (AtanY/abs(AtanY));
		Atan4 = -AngleRad4;
     954:	40596894 	ldrbmi	r6, [r9], #-132
	else
		Atan4 = AngleRad4;
     958:	683dbf59 	ldmdavs	sp!, {r0, r3, r4, r6, r8, r9, sl, fp, ip, sp, pc}
     95c:	f34c4b5f 	undefined instruction 0xf34c4b5f
	return Atan4;
}
     960:	882f1fad 	stmdahi	pc!, {r0, r2, r3, r5, r7, r8, r9, sl, fp, ip}
     964:	264a7a03 	strbcs	r7, [sl], -r3, lsl #20
     968:	26587a03 	ldrbcs	r7, [r8], -r3, lsl #20
     96c:	211f3032 	tstcs	pc, r2, lsr r0

}

//--------------------------------------------------------------------
//[BalCalcOneLeg]
void BalCalcOneLeg(long PosX, long PosZ, long PosY, byte BalLegNr) {
     970:	1e2f1e30 	mcrne	14, 1, r1, cr15, cr0, {1}
	long CPR_Y;            //Final Y value for centerpoint of rotation
	long CPR_Z;            //Final Z value for centerpoint of rotation

	long lAtan;
	//Calculating totals from center of the body to the feet
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BalLegNr]) + PosZ;
     974:	31a32122 	undefined instruction 0x31a32122
     978:	394d599f 	stmdbcc	sp, {r0, r1, r2, r3, r4, r7, r8, fp, ip, lr}^
	CPR_X = (short) pgm_read_word(&cOffsetX[BalLegNr]) + PosX;
     97c:	3c100321 	ldccc	3, cr0, [r0], {33}
     980:	3d211f2f 	stccc	15, cr1, [r1, #-188]!
	CPR_Y = 150 + PosY; // using the value 150 to lower the centerpoint of rotation 'g_InControlState.BodyPos.y +

	TotalTransY += (long) PosY;
     984:	251b4f1f 	ldrcs	r4, [fp, #-3871]
     988:	2529251b 	strcs	r2, [r9, #-1307]!
     98c:	08885967 	stmeq	r8, {r0, r1, r2, r5, r6, r8, fp, ip, lr}
	TotalTransZ += (long) CPR_Z;
     990:	3d4dae93 	stclcc	14, cr10, [sp, #-588]
     994:	40503e2f 	subsmi	r3, r0, pc, lsr #28
     998:	4b4b3059 	blmi	12ccb04 <__Stack_Size+0x12cc704>
	TotalTransX += (long) CPR_X;
     99c:	32912f5b 	addscc	r2, r1, #364	; 0x16c
     9a0:	0a030304 	beq	c15b8 <__Stack_Size+0xc11b8>
     9a4:	31012f02 	tstcc	r1, r2, lsl #30
     9a8:	2e27032f 	cdpcs	3, 2, cr0, cr7, cr15, {1}

	lAtan = GetATan2(CPR_X, CPR_Z);
     9ac:	5e2e6003 	cdppl	0, 2, cr6, cr14, cr3, {0}
	TotalYBal1 += (lAtan * 1800) / 31415;
     9b0:	324b2f30 	subcc	r2, fp, #192	; 0xc0
     9b4:	3130312f 	teqcc	r0, pc, lsr #2
     9b8:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!
     9bc:	23683e3d 	cmncs	r8, #976	; 0x3d0
     9c0:	c5082f73 	strgt	r2, [r8, #-3955]
     9c4:	3e660a03 	fmulscc	s1, s12, s6
     9c8:	aa082f57 	bge	20c72c <__Stack_Size+0x20c32c>
     9cc:	253d326e 	ldrcs	r3, [sp, #-622]!

	lAtan = GetATan2(CPR_X, CPR_Y);
     9d0:	0326211b 	teqeq	r6, #-1073741818	; 0xc0000006
     9d4:	2f33207a 	svccs	0x0033207a
	TotalZBal1 += ((lAtan * 1800) / 31415) - 900; //Rotate balance circle 90 deg
     9d8:	30020903 	andcc	r0, r2, r3, lsl #18
     9dc:	02750301 	rsbseq	r0, r5, #67108864	; 0x4000000
     9e0:	15030139 	strne	r0, [r3, #-313]
     9e4:	022f4b66 	eoreq	r4, pc, #104448	; 0x19800
     9e8:	76031a34 	undefined
     9ec:	03013e02 	movweq	r3, #7682	; 0x1e02
     9f0:	59317414 	ldmdbpl	r1!, {r2, r4, sl, ip, sp, lr}
     9f4:	5d595922 	ldclpl	9, cr5, [r9, #-136]
     9f8:	29a36908 	stmibcs	r3!, {r3, r8, fp, sp, lr}
     9fc:	5d4d2125 	stfple	f2, [sp, #-148]

	lAtan = GetATan2(CPR_Z, CPR_Y);
     a00:	083d342f 	ldmdaeq	sp!, {r0, r1, r2, r3, r5, sl, ip, sp}
     a04:	207903a5 	rsbscs	r0, r9, r5, lsr #7
	TotalXBal1 += ((lAtan * 1800) / 31415) - 900; //Rotate balance circle 90 deg
     a08:	77036727 	strvc	r6, [r3, -r7, lsr #14]
     a0c:	3c0c0320 	stccc	3, cr0, [ip], {32}
     a10:	035b3d3d 	cmpeq	fp, #3904	; 0xf40
     a14:	032f6609 	teqeq	pc, #9437184	; 0x900000
     a18:	035b4a0a 	cmpeq	fp, #40960	; 0xa000
     a1c:	66033c1b 	undefined
     a20:	3e2f4b3c 	vmovcc.16	d15[2], r4
     a24:	525b5959 	subspl	r5, fp, #1458176	; 0x164000

}
     a28:	4a0c032f 	bmi	3016ec <__Stack_Size+0x3012ec>
     a2c:	3d4d3e2f 	stclcc	14, cr3, [sp, #-188]
     a30:	003c0222 	eorseq	r0, ip, r2, lsr #4
     a34:	017f0101 	cmneq	pc, r1, lsl #2
     a38:	00020000 	andeq	r0, r2, r0
     a3c:	0000009d 	muleq	r0, sp, r0
     a40:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     a44:	0101000d 	tsteq	r1, sp
     a48:	00000101 	andeq	r0, r0, r1, lsl #2
     a4c:	00000100 	andeq	r0, r0, r0, lsl #2
//SinG                  - Sin buffer for BodyRotZ
//CosG               - Cos buffer for BodyRotZ
//BodyFKPosX         - Output Position X of feet with Rotation
//BodyFKPosY         - Output Position Y of feet with Rotation
//BodyFKPosZ         - Output Position Z of feet with Rotation
void BodyFK(short PosX, short PosZ, short PosY, short RotationY, byte BodyIKLeg) {
     a50:	50504101 	subspl	r4, r0, r1, lsl #2
     a54:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
	short CPR_X;            //Final X value for centerpoint of rotation
	short CPR_Y;            //Final Y value for centerpoint of rotation
	short CPR_Z;            //Final Z value for centerpoint of rotation

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
     a58:	6d747300 	ldclvs	3, cr7, [r4]
     a5c:	31663233 	cmncc	r6, r3, lsr r2
     a60:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
//SinG                  - Sin buffer for BodyRotZ
//CosG               - Cos buffer for BodyRotZ
//BodyFKPosX         - Output Position X of feet with Rotation
//BodyFKPosY         - Output Position Y of feet with Rotation
//BodyFKPosZ         - Output Position Z of feet with Rotation
void BodyFK(short PosX, short PosZ, short PosY, short RotationY, byte BodyIKLeg) {
     a64:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
	short CPR_X;            //Final X value for centerpoint of rotation
	short CPR_Y;            //Final Y value for centerpoint of rotation
	short CPR_Z;            //Final Z value for centerpoint of rotation

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
     a68:	4100636e 	tstmi	r0, lr, ror #6
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
     a6c:	692f5050 	stmdbvs	pc!, {r4, r6, ip, lr}
     a70:	4300636e 	movwmi	r6, #878	; 0x36e
     a74:	3033354d 	eorscc	r3, r3, sp, asr #10

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     a78:	2f57485f 	svccs	0x0057485f

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BodyIKLeg]) + PosZ
     a7c:	00636e69 	rsbeq	r6, r3, r9, ror #28
     a80:	6f694200 	svcvs	0x00694200
	//Successive global rotation matrix:
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
     a84:	64696f6c 	strbtvs	r6, [r9], #-3948
     a88:	632e7845 	teqvs	lr, #4521984	; 0x450000

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BodyIKLeg]) + PosZ
     a8c:	00000100 	andeq	r0, r0, r0, lsl #2
	//Successive global rotation matrix:
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
     a90:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     a94:	30316632 	eorscc	r6, r1, r2, lsr r6
	SinG4 = sin4;
     a98:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
	CosG4 = cos4;
     a9c:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
	SinG4 = sin4;
     aa0:	00000200 	andeq	r0, r0, r0, lsl #4
	CosG4 = cos4;
     aa4:	6c6f6942 	stclvs	9, cr6, [pc], #-264
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
	SinG4 = sin4;
     aa8:	4564696f 	strbmi	r6, [r4, #-2415]!
	CosG4 = cos4;

	GetSinCos(g_InControlState.BodyRot1.z + TotalZBal1);
     aac:	00682e78 	rsbeq	r2, r8, r8, ror lr
	SinB4 = sin4;
     ab0:	64000003 	strvs	r0, [r0], #-3
     ab4:	6d616e79 	stclvs	14, cr6, [r1, #-484]!
	CosB4 = cos4;
     ab8:	6c657869 	stclvs	8, cr7, [r5], #-420

	GetSinCos(g_InControlState.BodyRot1.y + (RotationY * c1DEC) + TotalYBal1);
     abc:	6464615f 	strbtvs	r6, [r4], #-351
     ac0:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     ac4:	6261745f 	rsbvs	r7, r1, #1593835520	; 0x5f000000
     ac8:	2e73656c 	cdpcs	5, 7, cr6, cr3, cr12, {3}
     acc:	00040068 	andeq	r0, r4, r8, rrx

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     ad0:	61737500 	cmnvs	r3, r0, lsl #10
     ad4:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
     ad8:	00000400 	andeq	r0, r0, r0, lsl #8
     adc:	02050000 	andeq	r0, r5, #0	; 0x0
     ae0:	00000000 	andeq	r0, r0, r0
     ae4:	0100cd03 	tsteq	r0, r3, lsl #26
     ae8:	014b2f13 	cmpeq	fp, r3, lsl pc
     aec:	4d144d30 	ldcmi	13, cr4, [r4, #-192]
     af0:	3164302c 	cmncc	r4, ip, lsr #32
     af4:	66019503 	strvs	r9, [r1], -r3, lsl #10
     af8:	2f221e14 	svccs	0x00221e14
     afc:	845e4776 	ldrbhi	r4, [lr], #-1910
     b00:	2f221e14 	svccs	0x00221e14
     b04:	845e4776 	ldrbhi	r4, [lr], #-1910
     b08:	3d221e14 	stccc	14, cr1, [r2, #-80]!
     b0c:	7743475a 	smlsldvc	r4, r3, sl, r7
     b10:	034c3e13 	movteq	r3, #52755	; 0xce13
     b14:	22587ef8 	subscs	r7, r8, #3968	; 0xf80
     b18:	03200c03 	teqeq	r0, #768	; 0x300
     b1c:	034b2074 	movteq	r2, #45172	; 0xb074
     b20:	76033c0a 	strvc	r3, [r3], -sl, lsl #24
     b24:	2e0b0320 	cdpcs	3, 0, cr0, cr11, cr0, {1}
     b28:	03207503 	teqeq	r0, #12582912	; 0xc00000
     b2c:	3d75200a 	ldclcc	0, cr2, [r5, #-40]!
     b30:	0f03623e 	svceq	0x0003623e
     b34:	8d033d4a 	stchi	13, cr3, [r3, #-296]
     b38:	0328e47f 	teqeq	r8, #2130706432	; 0x7f000000
     b3c:	4c282078 	stcmi	0, cr2, [r8], #-480
     b40:	213a3d21 	teqcs	sl, r1, lsr #26
     b44:	3d5d2b2f 	vldrcc	d18, [sp, #-188]
     b48:	e4530350 	ldrb	r0, [r3], #-848
     b4c:	2c200b03 	stccs	11, cr0, [r0], #-12
     b50:	2e760321 	cdpcs	3, 7, cr0, cr6, cr1, {1}
     b54:	2d2e0a03 	fstmdbscs	lr!, {s0-s2}
     b58:	392f1f4c 	stmdbcc	pc!, {r2, r3, r6, r8, r9, sl, fp, ip}
     b5c:	503d3d33 	eorspl	r3, sp, r3, lsr sp
     b60:	22d63e03 	sbcscs	r3, r6, #48	; 0x30
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     b64:	3d2f221e 	sfmcc	f2, 4, [pc, #-120]!
     b68:	212d6b4b 	teqcs	sp, fp, asr #22

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     b6c:	1f2f2f1f 	svcne	0x002f2f1f
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     b70:	2165752f 	cmncs	r5, pc, lsr #10
     b74:	2f676d29 	svccs	0x00676d29
     b78:	303e2f30 	eorscc	r2, lr, r0, lsr pc
     b7c:	22822403 	addcs	r2, r2, #50331648	; 0x3000000
     b80:	2f3f221e 	svccs	0x003f221e
     b84:	6d607521 	cfstr64vs	mvdx7, [r0, #-132]!
     b88:	20790343 	rsbscs	r0, r9, r3, asr #6
     b8c:	20790327 	rsbscs	r0, r9, r7, lsr #6
     b90:	31913d51 	orrscc	r3, r1, r1, asr sp
     b94:	212a3221 	teqcs	sl, r1, lsr #4
     b98:	384e322f 	stmdacc	lr, {r0, r1, r2, r3, r5, r9, ip, sp}^
     b9c:	2e700324 	cdpcs	3, 7, cr0, cr0, cr4, {1}
     ba0:	2f4a1e03 	svccs	0x004a1e03
     ba4:	f0033e3d 	undefined instruction 0xf0033e3d
     ba8:	4312087e 	tstmi	r2, #8257536	; 0x7e0000
     bac:	76039822 	strvc	r9, [r3], -r2, lsr #16
     bb0:	4a0c033c 	bmi	3018a8 <__Stack_Size+0x3014a8>
     bb4:	01000802 	tsteq	r0, r2, lsl #16
     bb8:	00021f01 	andeq	r1, r2, r1, lsl #30
     bbc:	83000200 	movwhi	r0, #512	; 0x200
     bc0:	02000000 	andeq	r0, r0, #0	; 0x0
     bc4:	0d0efb01 	vstreq	d15, [lr, #-4]
     bc8:	01010100 	tsteq	r1, r0, lsl #2
     bcc:	00000001 	andeq	r0, r0, r1
     bd0:	01000001 	tsteq	r0, r1
     bd4:	2f505041 	svccs	0x00505041
     bd8:	00637273 	rsbeq	r7, r3, r3, ror r2
     bdc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     be0:	30316632 	eorscc	r6, r1, r2, lsr r6
     be4:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     be8:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
     bec:	4d430063 	stclmi	0, cr0, [r3, #-396]
     bf0:	5f303335 	svcpl	0x00303335
     bf4:	692f5748 	stmdbvs	pc!, {r3, r6, r8, r9, sl, ip, lr}
     bf8:	0000636e 	andeq	r6, r0, lr, ror #6
     bfc:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
     c00:	632e6c61 	teqvs	lr, #24832	; 0x6100
     c04:	00000100 	andeq	r0, r0, r0, lsl #2
     c08:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     c0c:	30316632 	eorscc	r6, r1, r2, lsr r6
     c10:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     c14:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     c18:	00000200 	andeq	r0, r0, r0, lsl #4
     c1c:	616e7964 	cmnvs	lr, r4, ror #18
     c20:	6578696d 	ldrbvs	r6, [r8, #-2413]!
     c24:	64615f6c 	strbtvs	r5, [r1], #-3948
     c28:	73657264 	cmnvc	r5, #1073741830	; 0x40000006
     c2c:	61745f73 	cmnvs	r4, r3, ror pc
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * CosG4 / c4DEC
					- (long) CPR_Z * c2DEC * SinA4 / c4DEC * SinB4 / c4DEC
							* SinG4 / c4DEC
					- (long) CPR_Y * c2DEC * CosB4 / c4DEC * SinG4 / c4DEC))
			/ c2DEC;
	BodyFKPosY = ((long) CPR_Y * c2DEC
     c30:	73656c62 	cmnvc	r5, #25088	; 0x6200
	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     c34:	0300682e 	movweq	r6, #2094	; 0x82e
     c38:	73750000 	cmnvc	r5, #0	; 0x0
     c3c:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
     c40:	00030068 	andeq	r0, r3, r8, rrx
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * CosG4 / c4DEC
					- (long) CPR_Z * c2DEC * SinA4 / c4DEC * SinB4 / c4DEC
							* SinG4 / c4DEC
					- (long) CPR_Y * c2DEC * CosB4 / c4DEC * SinG4 / c4DEC))
			/ c2DEC;
	BodyFKPosY = ((long) CPR_Y * c2DEC
     c44:	05000000 	streq	r0, [r0]
     c48:	00357002 	eorseq	r7, r5, r2
     c4c:	010d0308 	tsteq	sp, r8, lsl #6
     c50:	16597813 	undefined
     c54:	034c4b94 	movteq	r4, #52116	; 0xcb94
     c58:	247403ce 	ldrbtcs	r0, [r4], #-974
     c5c:	2224201c 	eorcs	r2, r4, #28	; 0x1c
     c60:	223d6b2f 	eorscs	r6, sp, #48128	; 0xbc00
     c64:	2f1f5a85 	svccs	0x001f5a85
     c68:	03587603 	cmpeq	r8, #3145728	; 0x300000
     c6c:	03674a0d 	cmneq	r7, #53248	; 0xd000
     c70:	03276642 	teqeq	r7, #69206016	; 0x4200000
     c74:	27202079 	undefined
     c78:	3d1f974c 	ldccc	7, cr9, [pc, #-304]
     c7c:	69875984 	stmibvs	r7, {r2, r7, r8, fp, ip, lr}
     c80:	3c71034b 	ldclcc	3, cr0, [r1], #-300
     c84:	2f4a1203 	svccs	0x004a1203
     c88:	035a211f 	cmpeq	sl, #-1073741817	; 0xc0000007
     c8c:	274a7fb9 	undefined
     c90:	20207903 	eorcs	r7, r0, r3, lsl #18
     c94:	3d964c27 	ldccc	12, cr4, [r6, #156]
     c98:	5b795984 	blpl	1e572b0 <__Stack_Size+0x1e56eb0>
     c9c:	033c7203 	teqeq	ip, #805306368	; 0x30000000
     ca0:	1f2f6612 	svcne	0x002f6612
     ca4:	bf035a21 	svclt	0x00035a21
     ca8:	033c587f 	teqeq	ip, #8323072	; 0x7f0000
     cac:	222f3c09 	eorcs	r3, pc, #2304	; 0x900
     cb0:	034b3187 	movteq	r3, #45447	; 0xb187
     cb4:	12033c72 	andne	r3, r3, #29184	; 0x7200
     cb8:	4c2f1f4a 	stcmi	15, cr1, [pc], #-296
     cbc:	3c744703 	ldclcc	7, cr4, [r4], #-12
     cc0:	87222f52 	undefined
     cc4:	72034b31 	andvc	r4, r3, #50176	; 0xc400
     cc8:	4a11033c 	bmi	4419c0 <__Stack_Size+0x4415c0>
     ccc:	5a211f2f 	bpl	848990 <__Stack_Size+0x848590>
     cd0:	144a5a03 	strbne	r5, [sl], #-2563
     cd4:	2348221e 	movtcs	r2, #33310	; 0x821e
     cd8:	833d232b 	teqhi	sp, #-1409286144	; 0xac000000
     cdc:	594b211f 	stmdbpl	fp, {r0, r1, r2, r3, r4, r8, sp}^
     ce0:	7dce03ad 	stclvc	3, cr0, [lr, #692]
     ce4:	201f1374 	andscs	r1, pc, r4, ror r3
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * SinG4 / c4DEC
					+ (long) CPR_Z * c2DEC * CosG4 / c4DEC * SinA4 / c4DEC
							* SinB4 / c4DEC
					+ (long) CPR_Y * c2DEC * CosB4 / c4DEC * CosG4 / c4DEC))
			/ c2DEC;
}
     ce8:	3d212a25 	fstmdbscc	r1!, {s4-s40}
     cec:	9a033222 	bls	cd57c <__Stack_Size+0xcd17c>
     cf0:	2f2f2e01 	svccs	0x002f2e01
     cf4:	2e7ee703 	cdpcs	7, 7, cr14, cr14, cr3, {0}
     cf8:	403b313c 	eorsmi	r3, fp, ip, lsr r1
     cfc:	3c028403 	cfstrscc	mvf8, [r2], {3}
     d00:	2f221e22 	svccs	0x00221e22
     d04:	1f2f3e3d 	svcne	0x002f3e3d
     d08:	4b3e212f 	blmi	f891cc <__Stack_Size+0xf88dcc>
     d0c:	3e212f1f 	mcrcc	15, 1, r2, cr1, cr15, {0}
     d10:	3c55034c 	mrrccc	3, 4, r0, r5, cr12
     d14:	2f221e22 	svccs	0x00221e22
     d18:	1f2f3e3d 	svcne	0x002f3e3d
     d1c:	4b3e212f 	blmi	f891e0 <__Stack_Size+0xf88de0>
//FemurAngle1           - Output Angle of Femur in degrees
//TibiaAngle1           - Output Angle of Tibia in degrees
//CoxaAngle1            - Output Angle of Coxa in degrees
//--------------------------------------------------------------------
void LegIK(short IKFeetPosX, short IKFeetPosY, short IKFeetPosZ,
		byte LegIKLegNr) {
     d20:	3e212f1f 	mcrcc	15, 1, r2, cr1, cr15, {0}
     d24:	212f1f4b 	teqcs	pc, fp, asr #30
     d28:	2f1f4b3e 	svccs	0x001f4b3e
	long Temp1;
	long Temp2;
	long T3;

	//Calculate IKCoxaAngle and IKFeetPosXZ
	GetATan2(IKFeetPosX, IKFeetPosZ);
     d2c:	034c3e21 	movteq	r3, #52769	; 0xce21
	CoxaAngle1[LegIKLegNr] = (((long) Atan4 * 180) / 3141)
     d30:	09033c42 	stmdbeq	r3, {r1, r6, sl, fp, ip, sp}
     d34:	09032f2e 	stmdbeq	r3, {r1, r2, r3, r5, r8, r9, sl, fp, sp}
     d38:	2e760320 	cdpcs	3, 7, cr0, cr6, cr0, {1}
     d3c:	312f2f32 	teqcc	pc, r2, lsr pc
     d40:	3c7a0359 	ldclcc	3, cr0, [sl], #-356
     d44:	3d764d36 	ldclcc	13, cr4, [r6, #-216]!
     d48:	033a1d21 	teqeq	sl, #2112	; 0x840
     d4c:	033e4a0a 	teqeq	lr, #40960	; 0xa000
     d50:	03747fbf 	cmneq	r4, #764	; 0x2fc
     d54:	75033c0b 	strvc	r3, [r3, #-3083]
	//Length between the Coxa and tars [foot]
	IKFeetPosXZ = XYhyp2 / c2DEC;

	//Using GetAtan2 for solving IKA1 and IKSW
	//IKA14 - Angle between SW line and the ground in radians
	IKA14 = GetATan2(IKFeetPosY - TarsOffsetY,
     d58:	200a032e 	andcs	r0, sl, lr, lsr #6
     d5c:	59312f2a 	ldmdbpl	r1!, {r1, r3, r5, r8, r9, sl, fp, sp}
     d60:	364a7a03 	strbcc	r7, [sl], -r3, lsl #20
     d64:	213d764d 	teqcs	sp, sp, asr #12
     d68:	0a033a1d 	beq	cf5e4 <__Stack_Size+0xcf1e4>
     d6c:	56034c4a 	strpl	r4, [r3], -sl, asr #24
     d70:	032f2f66 	teqeq	pc, #408	; 0x198

	//IKSW2 - Length between femur axis and tars
	IKSW2 = XYhyp2;

	//IKA2 - Angle of the line S>W with respect to the femur in radians
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     d74:	2d132e42 	ldccs	14, cr2, [r3, #-264]
     d78:	3e212120 	sufccsp	f2, f1, f0
     d7c:	3e3d3e3d 	mrccc	14, 1, r3, cr13, cr13, {1}
     d80:	3f3d3e3d 	svccc	0x003d3e3d
					* (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))) * c4DEC
			+ ((long) IKSW2 * IKSW2));
	Temp2 = (long) (2 * (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])) * c2DEC
			* (unsigned long) IKSW2;
	T3 = Temp1 / (Temp2 / c4DEC);
	IKA24 = GetArcCos(T3);
     d84:	3e3d3e3d 	mrccc	14, 1, r3, cr13, cr13, {1}
     d88:	2308403d 	movwcs	r4, #32829	; 0x803d
     d8c:	4b211f21 	blmi	848a18 <__Stack_Size+0x848618>
     d90:	593e593e 	ldmdbpl	lr!, {r1, r2, r3, r4, r5, r8, fp, ip, lr}
     d94:	593e593e 	ldmdbpl	lr!, {r1, r2, r3, r4, r5, r8, fp, ip, lr}
     d98:	593e593e 	ldmdbpl	lr!, {r1, r2, r3, r4, r5, r8, fp, ip, lr}
     d9c:	7fad033d 	svcvc	0x00ad033d
     da0:	3d4020f2 	stclcc	0, cr2, [r0, #-968]
     da4:	33233d76 	teqcc	r3, #7552	; 0x1d80
     da8:	2121812f 	teqcs	r1, pc, lsr #2
     dac:	6a034023 	bvs	d0e40 <__Stack_Size+0xd0a40>
     db0:	4a1a033c 	bmi	681aa8 <__Stack_Size+0x6816a8>
     db4:	3c00c803 	stccc	8, cr12, [r0], {3}

	FemurAngle1[LegIKLegNr] = -(long) (IKA14 + IKA24) * 180
     db8:	e1032f2f 	tst	r3, pc, lsr #30
     dbc:	1d232e7e 	stcne	14, cr2, [r3, #-504]!
     dc0:	5b762f23 	blpl	1d8ca54 <__Stack_Size+0x1d8c654>
     dc4:	89034030 	stmdbhi	r3, {r4, r5, lr}
     dc8:	2f2f2e01 	svccs	0x002f2e01
     dcc:	2e7ecc03 	cdpcs	12, 7, cr12, cr14, cr3, {0}
     dd0:	76032f2f 	strvc	r2, [r3], -pc, lsr #30
     dd4:	025c2f2e 	subseq	r2, ip, #184	; 0xb8
     dd8:	01010002 	tsteq	r1, r2
			/ 3141+ 900 + CFEMURHORNOFFSET1(LegIKLegNr);  //Normal

	//IKTibiaAngle
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     ddc:	000001be 	strheq	r0, [r0], -lr
	Temp2 = (long) (2 * (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])) * c2DEC
			* (unsigned long) IKSW2;
	T3 = Temp1 / (Temp2 / c4DEC);
	IKA24 = GetArcCos(T3);

	FemurAngle1[LegIKLegNr] = -(long) (IKA14 + IKA24) * 180
     de0:	00860002 	addeq	r0, r6, r2
			/ 3141+ 900 + CFEMURHORNOFFSET1(LegIKLegNr);  //Normal

	//IKTibiaAngle
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     de4:	01020000 	tsteq	r2, r0
     de8:	000d0efb 	strdeq	r0, [sp], -fp
			+ ((long) (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr])
					* (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))) * c4DEC
			- ((long) IKSW2 * IKSW2));
	Temp2 = 2 * ((long) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])))
			* (long) ((byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]));
	GetArcCos(Temp1 / Temp2);
     dec:	01010101 	tsteq	r1, r1, lsl #2
     df0:	01000000 	tsteq	r0, r0
     df4:	41010000 	tstmi	r1, r0
     df8:	732f5050 	teqvc	pc, #80	; 0x50
     dfc:	73006372 	movwvc	r6, #882	; 0x372
     e00:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     e04:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     e08:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00

	TibiaAngle1[LegIKLegNr] = -(1450 - (long) AngleRad4 * 180 / 3141
     e0c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     e10:	354d4300 	strbcc	r4, [sp, #-768]
     e14:	485f3033 	ldmdami	pc, {r0, r1, r4, r5, ip, sp}^
     e18:	6e692f57 	mcrvs	15, 3, r2, cr9, cr7, {2}
     e1c:	64000063 	strvs	r0, [r0], #-99
     e20:	6d616e79 	stclvs	14, cr6, [r1, #-484]!
     e24:	6c657869 	stclvs	8, cr7, [r5], #-420
     e28:	0100632e 	tsteq	r0, lr, lsr #6
			+ CTIBIAHORNOFFSET1(LegIKLegNr)); //!!!!!!!!!!!!145 instead of 1800

	//Set the Solution quality
	if (IKSW2
     e2c:	74730000 	ldrbtvc	r0, [r3]
			- ((long) IKSW2 * IKSW2));
	Temp2 = 2 * ((long) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])))
			* (long) ((byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]));
	GetArcCos(Temp1 / Temp2);

	TibiaAngle1[LegIKLegNr] = -(1450 - (long) AngleRad4 * 180 / 3141
     e30:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
			+ CTIBIAHORNOFFSET1(LegIKLegNr)); //!!!!!!!!!!!!145 instead of 1800

	//Set the Solution quality
	if (IKSW2
     e34:	5f783031 	svcpl	0x00783031
     e38:	65707974 	ldrbvs	r7, [r0, #-2420]!
     e3c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     e40:	79640000 	stmdbvc	r4!, {}^
     e44:	696d616e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, sp, lr}^
			< ((word) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
					+ (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]) - 30)
					* c2DEC))
		IKSolution = 1;
     e48:	5f6c6578 	svcpl	0x006c6578
	else {
		if (IKSW2
     e4c:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
     e50:	5f737365 	svcpl	0x00737365
				< ((word) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
						+ (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))
						* c2DEC))
			IKSolutionWarning = 1;
     e54:	6c626174 	stfvse	f6, [r2], #-464
     e58:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
		else
			IKSolutionError = 1;
     e5c:	00000300 	andeq	r0, r0, r0, lsl #6
	}

}
     e60:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
     e64:	00682e74 	rsbeq	r2, r8, r4, ror lr
     e68:	00000003 	andeq	r0, r0, r3
     e6c:	28020500 	stmdacs	r2, {r8, sl}
     e70:	0308003c 	movweq	r0, #32828	; 0x803c
     e74:	130101da 	movwne	r0, #4570	; 0x11da
     e78:	2f133f3d 	svccs	0x00133f3d
     e7c:	4d2f134d 	stcmi	3, cr1, [pc, #-308]!
     e80:	133f3d13 	teqne	pc, #1216	; 0x4c0
     e84:	cf134d2f 	svcgt	0x00134d2f
     e88:	2f77135b 	svccs	0x0077135b
     e8c:	3d77135b 	ldclcc	3, cr1, [r7, #-364]!
     e90:	233f1669 	teqcs	pc, #110100480	; 0x6900000
     e94:	01232301 	teqeq	r3, r1, lsl #6
     e98:	00d30323 	sbcseq	r0, r3, r3, lsr #6
     e9c:	4c2f1320 	stcmi	3, cr1, [pc], #-128
     ea0:	3b21211e 	blcc	849320 <__Stack_Size+0x848f20>
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ea4:	e503765c 	str	r7, [r3, #-1628]
	if (sVal < s) {
     ea8:	1c244a7d 	stcne	10, cr4, [r4], #-500
     eac:	6c304d24 	ldcvs	13, cr4, [r0], #-144
		return s;
	}

	s = (short) pgm_read_word(sMax);
     eb0:	a13f3d4b 	teqge	pc, fp, asr #26
     eb4:	1f211f2f 	svcne	0x00211f2f
     eb8:	0b032121 	bleq	c9344 <__Stack_Size+0xc8f44>

		return s;
	}
	return sVal;

}
     ebc:	211d234a 	tstcs	sp, sl, asr #6
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     ec0:	7303311f 	movwvc	r3, #12575	; 0x311f
}

//--------------------------------------------------------------------
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
     ec4:	523e3d3c 	eorspl	r3, lr, #3840	; 0xf00
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     ec8:	2f526384 	svccs	0x00526384
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ecc:	404d812f 	submi	r8, sp, pc, lsr #2
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
     ed0:	4e4b677a 	mcrmi	7, 2, r6, cr11, cr10, {3}
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ed4:	21211f3d 	teqcs	r1, sp, lsr pc
	if (sVal < s) {
     ed8:	211f2f68 	tstcs	pc, r8, ror #30
     edc:	0327211f 	teqeq	r7, #-1073741817	; 0xc0000007
     ee0:	575f667a 	undefined
		return s;
	}

	s = (short) pgm_read_word(sMax);
     ee4:	263b914e 	ldrtcs	r9, [fp], -lr, asr #2
     ee8:	eb032f3d 	bl	ccbe4 <__Stack_Size+0xcc7e4>
     eec:	2925d67e 	stmdbcs	r5!, {r1, r2, r3, r4, r5, r6, r9, sl, ip, lr, pc}
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
     ef0:	221e4f25 	andscs	r4, lr, #148	; 0x94
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ef4:	1e22302c 	cdpne	0, 2, cr3, cr2, cr12, {1}
	if (sVal < s) {
     ef8:	ec5d3d22 	mrrc	13, 2, r3, sp, cr2
     efc:	214b4059 	qdaddcs	r4, r9, fp
     f00:	5a4c5759 	bpl	1316c6c <__Stack_Size+0x131686c>
		return s;
	}

	s = (short) pgm_read_word(sMax);
     f04:	1f2f3193 	svcne	0x002f3193
     f08:	672f3e2f 	strvs	r3, [pc, -pc, lsr #28]!
     f0c:	3e4c3d4e 	cdpcc	13, 4, cr3, cr12, cr14, {2}
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     f10:	00de034b 	sbcseq	r0, lr, fp, asr #6
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
     f14:	03302290 	teqeq	r0, #9	; 0x9
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     f18:	2f5801b4 	svccs	0x005801b4
	if (sVal < s) {
     f1c:	21211e4c 	teqcs	r1, ip, asr #28
     f20:	d4035c3b 	strle	r5, [r3], #-3131
     f24:	2f1e747e 	svccs	0x001e747e
		return s;
	}

	s = (short) pgm_read_word(sMax);
     f28:	8e03523d 	mcrhi	2, 0, r5, cr3, cr13, {1}
     f2c:	1f2f6601 	svcne	0x002f6601
     f30:	31213f21 	teqcc	r1, r1, lsr #30
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
				FemurAngle1[LegIndex], &cFemurMin1[LegIndex],
				&cFemurMax1[LegIndex]);
		TibiaAngle1[LegIndex] = CheckServoAngleBounds(s++,
     f34:	21221b3d 	teqcs	r2, sp, lsr fp
     f38:	032f2230 	teqeq	pc, #3	; 0x3
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     f3c:	1f217460 	svcne	0x00217460
     f40:	30213f21 	eorcc	r3, r1, r1, lsr #30
				TibiaAngle1[LegIndex], &cTibiaMin1[LegIndex],
				&cTibiaMax1[LegIndex]);

	}
#endif
}
     f44:	24222a21 	strtcs	r2, [r2], #-2593
     f48:	7fb40330 	svcvc	0x00b40330
     f4c:	cf033074 	svcgt	0x00033074
     f50:	61034a00 	tstvs	r3, r0, lsl #20
     f54:	211f2fac 	tstcs	pc, ip, lsr #31
     f58:	1c31213f 	ldfnes	f2, [r1], #-252
     f5c:	222f2122 	eorcs	r2, pc, #-2147483640	; 0x80000008
     f60:	6632032f 	ldrtvs	r0, [r2], -pc, lsr #6
     f64:	03200903 	teqeq	r0, #49152	; 0xc000
     f68:	09032077 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, sp}
     f6c:	a6033d20 	strge	r3, [r3], -r0, lsr #26
// SmoothControl (From Zenta) -  This function makes the body
//            rotation and translation much smoother
//--------------------------------------------------------------------
short SmoothControl(short CtrlMoveInp, short CtrlMoveOut, byte CtrlDivider) {

	if (CtrlMoveOut < (CtrlMoveInp - 4))
     f70:	1f212e7f 	svcne	0x00212e7f
     f74:	30213f21 	eorcc	r3, r1, r1, lsr #30
		return CtrlMoveOut + abs((CtrlMoveOut - CtrlMoveInp) / CtrlDivider);
     f78:	24222a2f 	strtcs	r2, [r2], #-2607
     f7c:	032f7730 	teqeq	pc, #12582912	; 0xc00000
     f80:	1f219e64 	svcne	0x00219e64
     f84:	2f213f21 	svccs	0x00213f21
     f88:	2f22221e 	svccs	0x0022221e
     f8c:	667df303 	ldrbtvs	pc, [sp], -r3, lsl #6
     f90:	73032f2f 	movwvc	r2, #16175	; 0x3f2f
	else if (CtrlMoveOut > (CtrlMoveInp + 4))
     f94:	4b3f2f2e 	blmi	fccc54 <__Stack_Size+0xfcc854>
		return CtrlMoveOut - abs((CtrlMoveOut - CtrlMoveInp) / CtrlDivider);
     f98:	0007024d 	andeq	r0, r7, sp, asr #4
     f9c:	012d0101 	teqeq	sp, r1, lsl #2
     fa0:	00020000 	andeq	r0, r2, r0
     fa4:	00000065 	andeq	r0, r0, r5, rrx
     fa8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     fac:	0101000d 	tsteq	r1, sp
     fb0:	00000101 	andeq	r0, r0, r1, lsl #2

	return CtrlMoveInp;
}
     fb4:	00000100 	andeq	r0, r0, r0, lsl #2
// GetLegsXZLength -
//--------------------------------------------------------------------
word g_wLegsXZLength = 0xffff;
word GetLegsXZLength(void) {
	// Could save away or could do a little math on one leg...
	if (g_wLegsXZLength != 0xffff)
     fb8:	50504101 	subspl	r4, r0, r1, lsl #2
     fbc:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     fc0:	6d747300 	ldclvs	3, cr7, [r4]

//--------------------------------------------------------------------
// GetLegsXZLength -
//--------------------------------------------------------------------
word g_wLegsXZLength = 0xffff;
word GetLegsXZLength(void) {
     fc4:	31663233 	cmncc	r6, r3, lsr r2
	// Could save away or could do a little math on one leg...
	if (g_wLegsXZLength != 0xffff)
		return g_wLegsXZLength;

	return isqrt32((LegPosX[0] * LegPosX[0]) + (LegPosZ[0] * LegPosZ[0]));
     fc8:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
     fcc:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
     fd0:	4300636e 	movwmi	r6, #878	; 0x36e
     fd4:	3033354d 	eorscc	r3, r3, sp, asr #10
     fd8:	2f57485f 	svccs	0x0057485f
     fdc:	00636e69 	rsbeq	r6, r3, r9, ror #28
}
     fe0:	67697a00 	strbvs	r7, [r9, -r0, lsl #20]!
     fe4:	2e656562 	cdpcs	5, 6, cr6, cr5, cr2, {3}
     fe8:	00010063 	andeq	r0, r1, r3, rrx
     fec:	6d747300 	ldclvs	3, cr7, [r4]

#ifndef MAX_XZ_LEG_ADJUST
#define MAX_XZ_LEG_ADJUST   (word)(cCoxaLength[0]+cTibiaLength[0] + cFemurLength[0]/4)
#endif

void AdjustLegPositions(word XZLength1) {
     ff0:	31663233 	cmncc	r6, r3, lsr r2
     ff4:	745f7830 	ldrbvc	r7, [pc], #2096	; ffc <__Stack_Size+0xbfc>
     ff8:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     ffc:	00020068 	andeq	r0, r2, r8, rrx
    1000:	61737500 	cmnvs	r3, r0, lsl #10
		XZLength1 = MAX_XZ_LEG_ADJUST;
	if (XZLength1 < MIN_XZ_LEG_ADJUST)
		XZLength1 = MIN_XZ_LEG_ADJUST;

	// see if same length as when we came in
	if (XZLength1 == g_wLegsXZLength)
    1004:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
    1008:	00000300 	andeq	r0, r0, r0, lsl #6
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		GetSinCos((short) pgm_read_word(&cCoxaAngle1[LegIndex]));

		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
    100c:	02050000 	andeq	r0, r5, #0	; 0x0

	// see if same length as when we came in
	if (XZLength1 == g_wLegsXZLength)
		return;

	g_wLegsXZLength = XZLength1;
    1010:	08004158 	stmdaeq	r0, {r3, r4, r6, r8, lr}

	u8 LegIndex;
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		GetSinCos((short) pgm_read_word(&cCoxaAngle1[LegIndex]));
    1014:	01018b03 	tsteq	r1, r3, lsl #22
    1018:	fe035a13 	mcr2	10, 0, r5, cr3, cr3, {0}

		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
    101c:	31015800 	tstcc	r1, r0, lsl #16
    1020:	4d31014d 	ldfmis	f0, [r1, #-308]!
    1024:	014d3101 	cmpeq	sp, r1, lsl #2
    1028:	31014d31 	tstcc	r1, r1, lsr sp
    102c:	5b3f134d 	blpl	fc5d68 <__Stack_Size+0xfc5968>
    1030:	013f3f01 	teqeq	pc, r1, lsl #30
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
    1034:	3f013f3f 	svccc	0x00013f3f
    1038:	3e3f013f 	mrccc	1, 1, r0, cr15, cr15, {1}
    103c:	c5037813 	strgt	r7, [r3, #-2067]
    1040:	6e27587e 	mcrvs	8, 1, r5, cr7, cr14, {3}
    1044:	79407650 	stmdbvc	r0, {r4, r6, r9, sl, ip, sp, lr}^
    1048:	305a3a22 	subscc	r3, sl, r2, lsr #20
		return;

	g_wLegsXZLength = XZLength1;

	u8 LegIndex;
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    104c:	2e79033d 	mrccs	3, 3, r0, cr9, cr13, {1}
		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
	}

	// Make sure we cycle through one gait to have the legs all move into their new locations...
	g_InControlState.ForceGaitStepCnt = g_InControlState.gaitCur.StepsInGait;
    1050:	222e0c03 	eorcs	r0, lr, #768	; 0x300
    1054:	63436831 	movtvs	r6, #14385	; 0x3831
}
    1058:	034d4f4f 	movteq	r4, #57167	; 0xdf4f
    105c:	1f2f740f 	svcne	0x002f740f
    1060:	212d2121 	teqcs	sp, r1, lsr #2
    1064:	212f1f21 	teqcs	pc, r1, lsr #30
    1068:	1503211f 	strne	r2, [r3, #-287]
    106c:	3c6b0320 	stclcc	3, cr0, [fp], #-128
    1070:	2e140321 	cdpcs	3, 1, cr0, cr4, cr1, {1}
    1074:	03206c03 	teqeq	r0, #768	; 0x300
    1078:	40772014 	rsbsmi	r2, r7, r4, lsl r0
		g_InControlState.aCoxaInitAngle1[LegIndex] = (short)pgm_read_word(&cCoxaAngle1[LegIndex]);
#endif
	}
	g_wLegsXZLength = 0xffff;
#endif
}
    107c:	033d313d 	teqeq	sp, #1073741839	; 0x4000000f
		else if (g_InControlState.aCoxaInitAngle1[LegIndex] < -700)
		g_InControlState.aCoxaInitAngle1[LegIndex] = -700;
	}
	g_wLegsXZLength = 0xffff;
#endif
}
    1080:	2e087eb8 	mcrcs	14, 0, r7, cr8, cr8, {5}
//     to be appropriate for the current y location of the body...
//--------------------------------------------------------------------

u8 g_iLegInitIndex = 0x00; // remember which index we are currently using...

void AdjustLegPositionsToBodyHeight() {
    1084:	5c251b25 	stcpl	11, cr1, [r5], #-148
    1088:	7840764c 	stmdavc	r0, {r2, r3, r6, r9, sl, ip, sp, lr}^
#ifdef CNT_HEX_INITS
	// Lets see which of our units we should use...
	// Note: We will also limit our body height here...
	if (g_InControlState.BodyPos.y
    108c:	305a3a22 	subscc	r3, sl, r2, lsr #20
			> (short) pgm_read_byte(&g_abHexMaxBodyY[CNT_HEX_INITS-1]))
		g_InControlState.BodyPos.y = (short) pgm_read_byte(
    1090:	2e79033d 	mrccs	3, 3, r0, cr9, cr13, {1}
				&g_abHexMaxBodyY[CNT_HEX_INITS-1]);

	u8 i;
	word XZLength1 = pgm_read_byte(&g_abHexIntXZ[CNT_HEX_INITS-1]);
	for (i = 0; i < (CNT_HEX_INITS - 1); i++) { // Don't need to look at last entry as we already init to assume this one...
		if (g_InControlState.BodyPos.y
    1094:	222e0c03 	eorcs	r0, lr, #768	; 0x300
    1098:	64426731 	strbvs	r6, [r2], #-1841
				<= (short) pgm_read_byte(&g_abHexMaxBodyY[i])) {
			XZLength1 = pgm_read_byte(&g_abHexIntXZ[i]);
			break;
		}
	}
	if (i != g_iLegInitIndex) {
    109c:	774c4f4e 	strbvc	r4, [ip, -lr, asr #30]
				&g_abHexMaxBodyY[CNT_HEX_INITS-1]);

	u8 i;
	word XZLength1 = pgm_read_byte(&g_abHexIntXZ[CNT_HEX_INITS-1]);
	for (i = 0; i < (CNT_HEX_INITS - 1); i++) { // Don't need to look at last entry as we already init to assume this one...
		if (g_InControlState.BodyPos.y
    10a0:	404b7777 	submi	r7, fp, r7, ror r7
    10a4:	033d313d 	teqeq	sp, #1073741839	; 0x4000000f
    10a8:	22ac7fa5 	adccs	r7, ip, #660	; 0x294
				<= (short) pgm_read_byte(&g_abHexMaxBodyY[i])) {
			XZLength1 = pgm_read_byte(&g_abHexIntXZ[i]);
			break;
		}
	}
	if (i != g_iLegInitIndex) {
    10ac:	2a26231e 	bcs	989d2c <__Stack_Size+0x98992c>
		g_iLegInitIndex = i;  // remember the current index...
		AdjustLegPositions(XZLength1);
    10b0:	2d302933 	ldccs	9, cr2, [r0, #-204]!
	}
#endif // CNT_HEX_INITS
}
    10b4:	03303022 	teqeq	r0, #34	; 0x22
    10b8:	32303c7a 	eorscc	r3, r0, #31232	; 0x7a00
    10bc:	2e6a036a 	cdpcs	3, 6, cr0, cr10, cr10, {3}
}
//--------------------------------------------------------------------
//[CHECK VOLTAGE]
//Reads the input voltage and shuts down the bot when the power drops
byte s_bLVBeepCnt;
boolean CheckVoltage() {
    10c0:	72032f2f 	andvc	r2, r3, #188	; 0xbc
    10c4:	3d3f2f2e 	ldccc	15, cr2, [pc, #-184]!
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10c8:	09023e4b 	stmdbeq	r2, {r0, r1, r3, r6, r9, sl, fp, ip, sp}

	// BUGBUG:: if voltage is 0 it failed to retrieve don't hang program...
	//    if (!Voltage)
	//      return;

	if (!g_fLowVoltageShutdown) {
    10cc:	a2010100 	andge	r0, r1, #0	; 0x0
boolean CheckVoltage() {
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10d0:	02000000 	andeq	r0, r0, #0	; 0x0

	// BUGBUG:: if voltage is 0 it failed to retrieve don't hang program...
	//    if (!Voltage)
	//      return;

	if (!g_fLowVoltageShutdown) {
    10d4:	00009c00 	andeq	r9, r0, r0, lsl #24
boolean CheckVoltage() {
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10d8:	fb010200 	blx	418e2 <__Stack_Size+0x414e2>

	if (!g_fLowVoltageShutdown) {
		/**PrintString("Voltage : ");
		Printu32d(Voltage);
		PrintString("\n");*/
		if ((Voltage < cTurnOffVol) || (Voltage >= 1999)) {
    10dc:	01000d0e 	tsteq	r0, lr, lsl #26
    10e0:	00010101 	andeq	r0, r1, r1, lsl #2
    10e4:	00010000 	andeq	r0, r1, r0


			//Turn off
			g_InControlState.BodyPos.x = 0;
    10e8:	3a630100 	bcc	18c14f0 <__Stack_Size+0x18c10f0>
			g_InControlState.TravelLength.x = 0;
			g_InControlState.TravelLength.z = 0;

#ifdef OPT_SINGLELEG
			g_InControlState.TravelLength.y = 0;
			g_InControlState.SelectedLeg = 255;
    10ec:	6e69772f 	cdpvs	7, 6, cr7, cr9, cr15, {1}
    10f0:	2f6d7261 	svccs	0x006d7261
#endif
			g_fLowVoltageShutdown = 1;
    10f4:	2f62696c 	svccs	0x0062696c
			s_bLVBeepCnt = 0;    // how many times we beeped...
    10f8:	2f636367 	svccs	0x00636367
		if ((Voltage < cTurnOffVol) || (Voltage >= 1999)) {


			//Turn off
			g_InControlState.BodyPos.x = 0;
			g_InControlState.BodyPos.y = 0;
    10fc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
			g_InControlState.BodyPos.z = 0;
			g_InControlState.BodyRot1.x = 0;
    1100:	72612f2e 	rsbvc	r2, r1, #184	; 0xb8
			g_InControlState.BodyRot1.y = 0;
			g_InControlState.BodyRot1.z = 0;
    1104:	61652d6d 	cmnvs	r5, sp, ror #26
			g_InControlState.TravelLength.x = 0;
			g_InControlState.TravelLength.z = 0;
    1108:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}
#ifdef OPT_SINGLELEG
			g_InControlState.TravelLength.y = 0;
			g_InControlState.SelectedLeg = 255;
#endif
			g_fLowVoltageShutdown = 1;
			s_bLVBeepCnt = 0;    // how many times we beeped...
    110c:	756c636e 	strbvc	r6, [ip, #-878]!
			g_InControlState.fRobotOn = false;
    1110:	73006564 	movwvc	r6, #1380	; 0x564
		}
#ifdef cTurnOnVol
	} else if ((Voltage > cTurnOnVol) && (Voltage < 1999)) {
    1114:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    1118:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}

		g_fLowVoltageShutdown = 0;
    111c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1120:	636e692f 	cmnvs	lr, #770048	; 0xbc000

#endif
	} else {
		if (s_bLVBeepCnt < 5) {
    1124:	50504100 	subspl	r4, r0, r0, lsl #2
    1128:	636e692f 	cmnvs	lr, #770048	; 0xbc000
			s_bLVBeepCnt++;
    112c:	50504100 	subspl	r4, r0, r0, lsl #2

			//MSound( 1, 45, 2000);
			Buzzed(45, 2000);
    1130:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1134:	74730000 	ldrbtvc	r0, [r3]
    1138:	746e6964 	strbtvc	r6, [lr], #-2404
		}
		mDelay(2000);
    113c:	0100682e 	tsteq	r0, lr, lsr #16
    1140:	74730000 	ldrbtvc	r0, [r3]
    1144:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
	}
#endif

	return g_fLowVoltageShutdown;
}
    1148:	5f783031 	svcpl	0x00783031
    114c:	65707974 	ldrbvs	r7, [r0, #-2420]!
    1150:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1154:	79740000 	ldmdbvc	r4!, {}^
    1158:	65646570 	strbvs	r6, [r4, #-1392]!

//==============================================================================
// BackgroundProcess - Allows us to have some background processing for those
//    servo drivers that need us to do things like polling...
//==============================================================================
void BackgroundProcess(void) {
    115c:	682e7366 	stmdavs	lr!, {r1, r2, r5, r6, r8, r9, ip, sp, lr}
    1160:	00000300 	andeq	r0, r0, r0, lsl #6
	if (g_fAXSpeedControl)
    1164:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
		return;  // nothing to do in this mode...

	if (ServosEnabled) {
		//DebugToggle(A3);
		BioloidControllerEx_interpolateStep(false); // Do our background stuff...
    1168:	61646c61 	cmnvs	r4, r1, ror #24
		Battery_Monitor_Alarm();
    116c:	632e6174 	teqvs	lr, #29	; 0x1d
	}
}
    1170:	00000400 	andeq	r0, r0, r0, lsl #8
    1174:	0000f700 	andeq	pc, r0, r0, lsl #14
//Function that gets called from the main loop if the robot is not logically
//     on.  Gives us a chance to play some...
//--------------------------------------------------------------------
static u8 g_iIdleServoNum = (u8) - 1;
static u8 g_iIdleLedState = 1;  // what state to we wish to set...
void IdleTime(void) {
    1178:	63000200 	movwvs	r0, #512	; 0x200
    117c:	02000000 	andeq	r0, r0, #0	; 0x0
	// Each time we call this set servos LED on or off...
	g_iIdleServoNum++;
    1180:	0d0efb01 	vstreq	d15, [lr, #-4]
	if (g_iIdleServoNum >= NUMSERVOS) {
    1184:	01010100 	tsteq	r1, r0, lsl #2
    1188:	00000001 	andeq	r0, r0, r1
		g_iIdleServoNum = 0;
    118c:	01000001 	tsteq	r0, r1
		g_iIdleLedState = 1 - g_iIdleLedState;
    1190:	2f505041 	svccs	0x00505041
    1194:	00637273 	rsbeq	r7, r3, r3, ror r2
	}
	dxl_write_byte(pgm_read_byte(&cPinTable[g_iIdleServoNum]), AXM_LED,
    1198:	775c3a63 	ldrbvc	r3, [ip, -r3, ror #20]
    119c:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
    11a0:	69625c6d 	stmdbvs	r2!, {r0, r2, r3, r5, r6, sl, fp, ip, lr}^
    11a4:	2e2e5c6e 	cdpcs	12, 2, cr5, cr14, cr14, {3}
    11a8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
			g_iIdleLedState);
	//ax12ReadPacket(6);  // get the response...


}
    11ac:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    11b0:	6d72612f 	ldfvse	f6, [r2, #-188]!
    11b4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    11b8:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}

//--------------------------------------------------------------------
//[SetRegOnAllServos] Function that is called to set the state of one
//  register in all of the servos, like Torque on...
//--------------------------------------------------------------------
void SetRegOnAllServos(u8 bReg, u8 bVal) {
    11bc:	2f302e33 	svccs	0x00302e33
    11c0:	6c636e69 	stclvs	14, cr6, [r3], #-420
    11c4:	00656475 	rsbeq	r6, r5, r5, ror r4
	 ax12write(bVal);

  }
  ax12write(0xff - (checksum % 256));
  setRX(0);*/
	 dxl_set_txpacket_id (BROADCAST_ID);
    11c8:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    11cc:	2e66746e 	cdpcs	4, 6, cr7, cr6, cr14, {3}
	dxl_set_txpacket_parameter(0,bReg);
    11d0:	00010063 	andeq	r0, r1, r3, rrx
    11d4:	64747300 	ldrbtvs	r7, [r4], #-768
	dxl_set_txpacket_parameter(1,2);
    11d8:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    11dc:	00020068 	andeq	r0, r2, r8, rrx
    11e0:	05000000 	streq	r0, [r0]
  int i;
	for (i = 0; i < poseSize; i++) {
		byte id = pgm_read_byte(&cPinTable[i]);
		dxl_set_txpacket_parameter(2 + 3 * i, id);
    11e4:	00000002 	andeq	r0, r0, r2
    11e8:	00c80300 	sbceq	r0, r8, r0, lsl #6
    11ec:	2d5c2001 	ldclcs	0, cr2, [ip, #-4]
    11f0:	2f8f3169 	svccs	0x008f3169
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
    11f4:	561cbb4b 	ldrpl	fp, [ip], -fp, asr #22
    11f8:	212e0903 	teqcs	lr, r3, lsl #18
    11fc:	3c2e2603 	stccc	6, cr2, [lr], #-12
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
    1200:	931f6a21 	tstls	pc, #135168	; 0x21000
    1204:	5a2d4d49 	bpl	b54730 <__Stack_Size+0xb54330>
    1208:	215e2e3f 	cmpcs	lr, pc, lsr lr
	dxl_set_txpacket_parameter(1,2);
  int i;
	for (i = 0; i < poseSize; i++) {
		byte id = pgm_read_byte(&cPinTable[i]);
		dxl_set_txpacket_parameter(2 + 3 * i, id);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
    120c:	2f362d21 	svccs	0x00362d21
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
    1210:	55034d4b 	strpl	r4, [r3, #-3403]
	 dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0,bReg);
	dxl_set_txpacket_parameter(1,2);
  int i;
	for (i = 0; i < poseSize; i++) {
    1214:	2d2f2fac 	stccs	15, cr2, [pc, #-688]!
    1218:	032e7003 	teqeq	lr, #3	; 0x3
    121c:	6f034a11 	svcvs	0x00034a11
		dxl_set_txpacket_parameter(2 + 3 * i, id);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
	}

	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
    1220:	3b4b2220 	blcc	12c9aa8 <__Stack_Size+0x12c96a8>
    1224:	09035922 	stmdbeq	r3, {r1, r5, r8, fp, ip, lr}
    1228:	2e35032e 	cdpcs	3, 3, cr0, cr5, cr14, {1}
#ifdef DEBUG_BIOLOIDEX
	PrintString("DriverAX12 --- SetRegOnAllServos ---\n");
#endif
	dxl_txrx_packet();
    122c:	74080903 	strvc	r0, [r8], #-2307

	u16 CommStatus = dxl_get_result();
    1230:	03580a03 	cmpeq	r8, #12288	; 0x3000
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
    1234:	22207fa1 	eorcs	r7, r0, #644	; 0x284
		PrintErrorCode();
    1238:	3e212148 	sufccsm	f2, f1, #0.0
	else
		PrintCommStatus(CommStatus);
    123c:	4a00dc03 	bmi	38250 <__Stack_Size+0x37e50>
#endif
}
    1240:	09032165 	stmdbeq	r3, {r0, r2, r5, r6, r8, sp}
    1244:	69779f3c 	ldmdbvs	r7!, {r2, r3, r4, r5, r8, r9, sl, fp, ip, pc}^
    1248:	4a4203af 	bmi	108210c <__Stack_Size+0x1081d0c>
//--------------------------------------------------------------------
//[MakeSureServosAreOn] Function that is called to handle when you are
//  transistioning from servos all off to being on.  May need to read
//  in the current pose...
//--------------------------------------------------------------------
void MakeSureServosAreOn(void) {
    124c:	4a00c503 	bmi	32660 <__Stack_Size+0x32260>

	if (ServosEnabled) {

		if (!g_fServosFree)
    1250:	2f2f1340 	svccs	0x002f1340
			return;    // we are not free

		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		if (g_fAXSpeedControl) {
    1254:	13660b03 	cmnne	r6, #3072	; 0xc00
    1258:	693c334b 	ldmdbvs	ip!, {r0, r1, r3, r6, r8, r9, ip, sp}

			int i;
			for (i = 0; i < NUMSERVOS; i++) {
				g_awGoalAXPos[i] = dxl_read_word(pgm_read_byte(&cPinTable[i]),
    125c:	034a7703 	movteq	r7, #42755	; 0xa703
    1260:	6b033c0c 	blvs	d0298 <__Stack_Size+0xcfe98>
    1264:	231d3182 	tstcs	sp, #-2147483616	; 0x80000020
    1268:	023e3f2b 	eorseq	r3, lr, #172	; 0xac
						AXM_PRESENT_POSITION_L);
				mDelay(25);
    126c:	0101000a 	tsteq	r1, sl
    1270:	000000df 	ldrdeq	r0, [r0], -pc

		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		if (g_fAXSpeedControl) {

			int i;
			for (i = 0; i < NUMSERVOS; i++) {
    1274:	00890002 	addeq	r0, r9, r2
    1278:	01020000 	tsteq	r2, r0
				g_awGoalAXPos[i] = dxl_read_word(pgm_read_byte(&cPinTable[i]),
						AXM_PRESENT_POSITION_L);
				mDelay(25);
			}
		} else {
			BioloidControllerEx_readPose();
    127c:	000d0efb 	strdeq	r0, [sp], -fp
		}

		SetRegOnAllServos(AXM_TORQUE_ENABLE, 1);  // Use sync write to do it.
    1280:	01010101 	tsteq	r1, r1, lsl #2
    1284:	01000000 	tsteq	r0, r0

		CommanderInputController_AllowControllerInterrupts(true);
		g_fServosFree = false;
    1288:	43010000 	movwmi	r0, #4096	; 0x1000
	}

}
    128c:	3033354d 	eorscc	r3, r3, sp, asr #10
    1290:	2f57485f 	svccs	0x0057485f
    1294:	00637273 	rsbeq	r7, r3, r3, ror r2
    1298:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    129c:	30316632 	eorscc	r6, r1, r2, lsr r6

//------------------------------------------------------------------------------------------
//[BeginServoUpdate] Does whatever preperation that is needed to starrt a move of our servos
//------------------------------------------------------------------------------------------
void BeginServoUpdate(void)    // Start the update
		{
    12a0:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^

	MakeSureServosAreOn();
    12a4:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
	if (ServosEnabled) {

		if (g_fAXSpeedControl) {
    12a8:	4d430063 	stclmi	0, cr0, [r3, #-396]
    12ac:	5f303335 	svcpl	0x00303335

#ifdef USE_AX12_SPEED_CONTROL
			// If we are trying our own Servo control need to save away the new positions...
			byte i;
			for (i = 0; i < NUMSERVOS; i++) {
				g_awCurAXPos[i] = g_awGoalAXPos[i];
    12b0:	692f5748 	stmdbvs	pc!, {r3, r6, r8, r9, sl, ip, lr}
    12b4:	0000636e 	andeq	r6, r0, lr, ror #6
    12b8:	2e636461 	cdpcs	4, 6, cr6, cr3, cr1, {3}
		if (g_fAXSpeedControl) {

#ifdef USE_AX12_SPEED_CONTROL
			// If we are trying our own Servo control need to save away the new positions...
			byte i;
			for (i = 0; i < NUMSERVOS; i++) {
    12bc:	00010063 	andeq	r0, r1, r3, rrx
				g_awCurAXPos[i] = g_awGoalAXPos[i];
			}
#endif
		} else
			BioloidControllerEx_interpolateStep(true); // Make sure we call at least once
    12c0:	6d747300 	ldclvs	3, cr7, [r4]
    12c4:	31663233 	cmncc	r6, r3, lsr r2

	}
}
    12c8:	745f7830 	ldrbvc	r7, [pc], #2096	; 12d0 <__Stack_Size+0xed0>
    12cc:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    12d0:	00020068 	andeq	r0, r2, r8, rrx
    12d4:	6d747300 	ldclvs	3, cr7, [r4]
}

//--------------------------------------------------------------------
//[FREE SERVOS] Frees all the servos
//--------------------------------------------------------------------
void FreeServos(void) {
    12d8:	31663233 	cmncc	r6, r3, lsr r2
    12dc:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]

	if (!g_fServosFree) {
    12e0:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		SetRegOnAllServos(AXM_TORQUE_ENABLE, 0);  // do this as one statement...
    12e4:	00000200 	andeq	r0, r0, r0, lsl #4
    12e8:	2e636461 	cdpcs	4, 6, cr6, cr3, cr1, {3}
    12ec:	00030068 	andeq	r0, r3, r8, rrx
		byte i;
		for (i = 0; i < NUMSERVOS; i++) {
			Relax(pgm_read_byte(&cPinTable[i]));
    12f0:	73797300 	cmnvc	r9, #0	; 0x0
    12f4:	5f6d6574 	svcpl	0x006d6574
    12f8:	74696e69 	strbtvc	r6, [r9], #-3689

	if (!g_fServosFree) {
		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		SetRegOnAllServos(AXM_TORQUE_ENABLE, 0);  // do this as one statement...
		byte i;
		for (i = 0; i < NUMSERVOS; i++) {
    12fc:	0300682e 	movweq	r6, #2094	; 0x82e
			Relax(pgm_read_byte(&cPinTable[i]));
		}
		CommanderInputController_AllowControllerInterrupts(true);
		g_fServosFree = true;
    1300:	00000000 	andeq	r0, r0, r0
	}
}
    1304:	44980205 	ldrmi	r0, [r8], #517
    1308:	1c030800 	stcne	8, cr0, [r3], {0}
    130c:	76214b01 	strtvc	r4, [r1], -r1, lsl #22
extern void SetRegOnAllServos(u8 bReg, u8 bVal);

//--------------------------------------------------------------------
//Init
//--------------------------------------------------------------------
void Servo_Init(void) {
    1310:	a0214e67 	eorge	r4, r1, r7, ror #28
	// First lets get the actual servo positions for all of our servos...
	//pinMode(0, OUTPUT);
	g_fServosFree = true;
    1314:	a0581203 	subsge	r1, r8, r3, lsl #4

  poseSize = NUMSERVOS;
    1318:	5811034b 	ldmdapl	r1, {r0, r1, r3, r6, r8, r9}
    131c:	3e4c4ba0 	fmacdcc	d20, d28, d16
  BioloidControllerEx_readPose();
    1320:	323d4b22 	eorscc	r4, sp, #34816	; 0x8800
#ifdef cVoltagePin
	for (byte i=0; i < 8; i++)
	GetBatteryVoltage();  // init the voltage pin
#endif

	g_fAXSpeedControl = false;
    1324:	5c5b3d4b 	mrrcpl	13, 4, r3, fp, cr11
    1328:	3d4b3d68 	stclcc	13, cr3, [fp, #-416]



	// Added - try to speed things up later if we do a query...
	SetRegOnAllServos(AXM_RETURN_DELAY_TIME, 0); // tell servos to give us back their info as quick as they can...
    132c:	5a231d3f 	bpl	8c8830 <__Stack_Size+0x8c8430>
    1330:	82130341 	andshi	r0, r3, #67108865	; 0x4000001

}
    1334:	36211f21 	strtcc	r1, [r1], -r1, lsr #30
    1338:	5967594b 	stmdbpl	r7!, {r0, r1, r3, r6, r8, fp, ip, lr}^
    133c:	3c5b036e 	mrrccc	3, 6, r0, fp, cr14
    1340:	231c2f23 	tstcs	ip, #140	; 0x8c

}

void setupPhoenix() {

	g_fShowDebugPrompt = true;
    1344:	4c2f1f2f 	stcmi	15, cr1, [pc], #-188
void readSensors(){


}

void setupPhoenix() {
    1348:	221e3e3d 	andscs	r3, lr, #976	; 0x3d0

	g_fShowDebugPrompt = true;
	g_fDebugOutput = false;
    134c:	02024d3d 	andeq	r4, r2, #3904	; 0xf40
    1350:	a8010100 	stmdage	r1, {r8}
	//init BioloidEx
	BioloidControllerEx();
    1354:	02000000 	andeq	r0, r0, #0	; 0x0

	// Init our ServoDriver
	Servo_Init();
    1358:	00008f00 	andeq	r8, r0, r0, lsl #30

	mDelay(10);
    135c:	fb010200 	blx	41b66 <__Stack_Size+0x41766>

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		LegPosX[LegIndex] = (short) pgm_read_word(&cInitPosX[LegIndex]); //Set start positions for each leg
    1360:	01000d0e 	tsteq	r0, lr, lsl #26
    1364:	00010101 	andeq	r0, r1, r1, lsl #2
		LegPosY[LegIndex] = (short) pgm_read_word(&cInitPosY[LegIndex]);
    1368:	00010000 	andeq	r0, r1, r0
    136c:	4d430100 	stfmie	f0, [r3]
		LegPosZ[LegIndex] = (short) pgm_read_word(&cInitPosZ[LegIndex]);
    1370:	5f303335 	svcpl	0x00303335

	mDelay(10);

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		LegPosX[LegIndex] = (short) pgm_read_word(&cInitPosX[LegIndex]); //Set start positions for each leg
    1374:	732f5748 	teqvc	pc, #18874368	; 0x1200000
    1378:	73006372 	movwvc	r6, #882	; 0x372
		LegPosY[LegIndex] = (short) pgm_read_word(&cInitPosY[LegIndex]);
    137c:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    1380:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
		LegPosZ[LegIndex] = (short) pgm_read_word(&cInitPosZ[LegIndex]);
    1384:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1388:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    138c:	354d4300 	strbcc	r4, [sp, #-768]
	Servo_Init();

	mDelay(10);

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    1390:	485f3033 	ldmdami	pc, {r0, r1, r4, r5, ip, sp}^
    1394:	6e692f57 	mcrvs	15, 3, r2, cr9, cr7, {2}
    1398:	62000063 	andvs	r0, r0, #99	; 0x63

	ResetLegInitAngles();

	//Single leg control. Make sure no leg is selected
#ifdef OPT_SINGLELEG
	g_InControlState.SelectedLeg = 255; // No Leg selected
    139c:	6f747475 	svcvs	0x00747475
    13a0:	00632e6e 	rsbeq	r2, r3, lr, ror #28
	g_InControlState.PrevSelectedLeg = 255;
    13a4:	73000001 	movwvc	r0, #1	; 0x1
#endif
	//Body Positions
	g_InControlState.BodyPos.x = 0;
    13a8:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
	g_InControlState.BodyPos.y = 0;
	g_InControlState.BodyPos.z = 0;
    13ac:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}

//Body Rotations
	g_InControlState.BodyRot1.x = 0;
	g_InControlState.BodyRot1.y = 0;
    13b0:	7079745f 	rsbsvc	r7, r9, pc, asr r4
	g_InControlState.BodyRot1.z = 0;
	g_InControlState.BodyRotOffset.x = 0;
    13b4:	00682e65 	rsbeq	r2, r8, r5, ror #28
	g_InControlState.BodyRotOffset.y = 0; //Input Y offset value to adjust centerpoint of rotation
	g_InControlState.BodyRotOffset.z = 0;
    13b8:	73000002 	movwvc	r0, #2	; 0x2

	//Gait
	g_InControlState.GaitType = 0;
    13bc:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
	g_InControlState.BalanceMode = 0;
    13c0:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
	g_InControlState.LegLiftHeight = 50;
	g_InControlState.ForceGaitStepCnt = 0; // added to try to adjust starting positions depending on height...
    13c4:	70616d5f 	rsbvc	r6, r1, pc, asr sp
	g_InControlState.GaitStep = 1;
    13c8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
}

void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {
    13cc:	75620000 	strbvc	r0, [r2]!
	g_InControlState.BodyRotOffset.z = 0;

	//Gait
	g_InControlState.GaitType = 0;
	g_InControlState.BalanceMode = 0;
	g_InControlState.LegLiftHeight = 50;
    13d0:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    13d4:	0300682e 	movweq	r6, #2094	; 0x82e
void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {

		g_InControlState.gaitCur = APG[g_InControlState.GaitType];
    13d8:	79730000 	ldmdbvc	r3!, {}^
    13dc:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
    13e0:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
//==============================================================================

// If both PS2 and XBee are defined then we will become secondary to the xbee
void CommanderInputController_Init(void) {

	g_BodyYOffset = 0;
    13e4:	00682e74 	rsbeq	r2, r8, r4, ror lr
    13e8:	00000003 	andeq	r0, r0, r3
    13ec:	38020500 	stmdacc	r2, {r8, sl}
	g_BodyYShift = 0;
	//begin(XBEE_BAUD);
	GPSeq = 0;  // init to something...
    13f0:	03080046 	movweq	r0, #32838	; 0x8046
    13f4:	1f210110 	svcne	0x00210110

	ControlMode = WALKMODE;
    13f8:	0402af21 	streq	sl, [r2], #-3873
	HeightSpeedMode = NORM_NORM;
    13fc:	a2010100 	andge	r0, r1, #0	; 0x0
	//    DoubleHeightOn = false;
	DoubleTravelOn = false;
    1400:	02000000 	andeq	r0, r0, #0	; 0x0
	bJoystickWalkMode = 0;
    1404:	00008900 	andeq	r8, r0, r0, lsl #18
	GaitSelect();

	CommanderInputController_Init();

	// Servo Driver
	ServoMoveTime = 150;
    1408:	fb010200 	blx	41c12 <__Stack_Size+0x41812>
	g_InControlState.fRobotOn = 0;
    140c:	01000d0e 	tsteq	r0, lr, lsl #26
	g_fLowVoltageShutdown = false;
    1410:	00010101 	andeq	r0, r1, r1, lsl #2

}
    1414:	00010000 	andeq	r0, r1, r0
    1418:	4d430100 	stfmie	f0, [r3]
    141c:	5f303335 	svcpl	0x00303335
    1420:	732f5748 	teqvc	pc, #18874368	; 0x1200000
    1424:	73006372 	movwvc	r6, #882	; 0x372
    1428:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    142c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1430:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1434:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1438:	354d4300 	strbcc	r4, [sp, #-768]
    143c:	485f3033 	ldmdami	pc, {r0, r1, r4, r5, ip, sp}^
    1440:	6e692f57 	mcrvs	15, 3, r2, cr9, cr7, {2}
    1444:	6c000063 	stcvs	0, cr0, [r0], {99}
    1448:	632e6465 	teqvs	lr, #1694498816	; 0x65000000
    144c:	00000100 	andeq	r0, r0, r0, lsl #2
    1450:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1454:	30316632 	eorscc	r6, r1, r2, lsr r6
    1458:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    145c:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    1460:	00000200 	andeq	r0, r0, r0, lsl #4
    1464:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
//[CommitServoDriver Updates the positions of the servos - This outputs
//         as much of the command as we can without committing it.  This
//         allows us to once the previous update was completed to quickly
//        get the next command to start
//--------------------------------------------------------------------
void CommitServoDriver(word wMoveTime) {
    1468:	30316632 	eorscc	r6, r1, r2, lsr r6
    146c:	616d5f78 	smcvs	54776
    1470:	00682e70 	rsbeq	r2, r8, r0, ror lr


	CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    1474:	6c000002 	stcvs	0, cr0, [r0], {2}

      }
      ax12write(0xff - (checksum % 256));
      setRX(0);
*/
  	    dxl_set_txpacket_id (BROADCAST_ID);
    1478:	682e6465 	stmdavs	lr!, {r0, r2, r5, r6, sl, sp, lr}
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    147c:	00000300 	andeq	r0, r0, r0, lsl #6
    1480:	74737973 	ldrbtvc	r7, [r3], #-2419
		dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
    1484:	695f6d65 	ldmdbvs	pc, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    1488:	2e74696e 	cdpcs	9, 7, cr6, cr4, cr14, {3}
		dxl_set_txpacket_parameter(1, 2);
    148c:	00030068 	andeq	r0, r3, r8, rrx
    1490:	05000000 	streq	r0, [r0]
    1494:	00465c02 	subeq	r5, r6, r2, lsl #24
    1498:	01120308 	tsteq	r2, r8, lsl #6
      int i;
      word wSpeed;
		for (i = 0; i < poseSize; i++) {
			wSpeed = CalculateAX12MoveSpeed(g_awCurAXPos[i], g_awGoalAXPos[i], wMoveTime);    // What order should we store these values?
    149c:	6776214b 	ldrbvs	r2, [r6, -fp, asr #2]!
    14a0:	01000402 	tsteq	r0, r2, lsl #8
    14a4:	0000ae01 	andeq	sl, r0, r1, lsl #28
    14a8:	89000200 	stmdbhi	r0, {r9}
			//dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
			byte id = pgm_read_byte(&cPinTable[i]);
			dxl_set_txpacket_parameter(2 + 3 * i, id);
    14ac:	02000000 	andeq	r0, r0, #0	; 0x0
    14b0:	0d0efb01 	vstreq	d15, [lr, #-4]
    14b4:	01010100 	tsteq	r1, r0, lsl #2
    14b8:	00000001 	andeq	r0, r0, r1
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(g_awGoalAXPos[i]));
    14bc:	01000001 	tsteq	r0, r1
    14c0:	33354d43 	teqcc	r5, #4288	; 0x10c0
    14c4:	57485f30 	smlaldxpl	r5, r8, r0, pc
    14c8:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    14cc:	6d747300 	ldclvs	3, cr7, [r4]
			dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(g_awGoalAXPos[i]));
    14d0:	31663233 	cmncc	r6, r3, lsr r2
    14d4:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    14d8:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
    14dc:	4300636e 	movwmi	r6, #878	; 0x36e
    14e0:	3033354d 	eorscc	r3, r3, sp, asr #10
    14e4:	2f57485f 	svccs	0x0057485f
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(wSpeed));
    14e8:	00636e69 	rsbeq	r6, r3, r9, ror #28
    14ec:	63696d00 	cmnvs	r9, #0	; 0x0
    14f0:	0100632e 	tsteq	r0, lr, lsr #6
		    dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(wSpeed));
    14f4:	74730000 	ldrbtvc	r0, [r3]
    14f8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    14fc:	5f783031 	svcpl	0x00783031
    1500:	65707974 	ldrbvs	r7, [r0, #-2420]!
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
		dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
		dxl_set_txpacket_parameter(1, 2);
      int i;
      word wSpeed;
		for (i = 0; i < poseSize; i++) {
    1504:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1508:	74730000 	ldrbtvc	r0, [r3]
    150c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1510:	5f783031 	svcpl	0x00783031
			dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(g_awGoalAXPos[i]));
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(wSpeed));
		    dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(wSpeed));
		}

		dxl_set_txpacket_length((4 + 1) * poseSize + 4);
    1514:	2e70616d 	rpwcssz	f6, f0, #5.0
    1518:	00020068 	andeq	r0, r2, r8, rrx
    151c:	63696d00 	cmnvs	r9, #0	; 0x0
#ifdef DEBUG_BIOLOIDEX
	PrintString("DriverAX12 --- CommitServoDriver ---\n");
#endif
		dxl_txrx_packet();
    1520:	0300682e 	movweq	r6, #2094	; 0x82e

			u16 CommStatus = dxl_get_result();
    1524:	79730000 	ldmdbvc	r3!, {}^
#ifdef USING_PC_UART
			if (CommStatus == DXL_RXSUCCESS)
    1528:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
				PrintErrorCode();
    152c:	6e75665f 	mrcvs	6, 3, r6, cr5, cr15, {2}
			else
				PrintCommStatus(CommStatus);
    1530:	00682e63 	rsbeq	r2, r8, r3, ror #28
    1534:	00000003 	andeq	r0, r0, r3
#endif
#endif
		} else {
			BioloidControllerEx_interpolateSetup(wMoveTime);
    1538:	88020500 	stmdahi	r2, {r8, sl}

	}

	CommanderInputController_AllowControllerInterrupts(true);

}
    153c:	03080046 	movweq	r0, #32838	; 0x8046
    1540:	032e010d 	teqeq	lr, #1073741827	; 0x40000003
    1544:	3e1f2010 	mrccc	0, 0, r2, cr15, cr0, {0}
    1548:	384b3d4b 	stmdacc	fp, {r0, r1, r3, r6, r8, sl, fp, ip, sp}^
    154c:	1f216942 	svcne	0x00216942
    1550:	02022f21 	andeq	r2, r2, #132	; 0x84
	word wCoxaSDV;        // Coxa value in servo driver units
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    1554:	ee010100 	adfs	f0, f1, f0
    1558:	02000000 	andeq	r0, r0, #0	; 0x0
    155c:	00006d00 	andeq	r6, r0, r0, lsl #26
    1560:	fb010200 	blx	41d6a <__Stack_Size+0x4196a>
    1564:	01000d0e 	tsteq	r0, lr, lsl #26


void OutputServoInfoForLeg(byte LegIndex, short sCoxaAngle1, short sFemurAngle1,
		short sTibiaAngle1)

		{
    1568:	00010101 	andeq	r0, r1, r1, lsl #2
	word wCoxaSDV;        // Coxa value in servo driver units
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    156c:	00010000 	andeq	r0, r1, r0
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
    1570:	4d430100 	stfmie	f0, [r3]
    1574:	5f303335 	svcpl	0x00303335
    1578:	732f5748 	teqvc	pc, #18874368	; 0x1200000
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    157c:	73006372 	movwvc	r6, #882	; 0x372
    1580:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    1584:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}


void OutputServoInfoForLeg(byte LegIndex, short sCoxaAngle1, short sFemurAngle1,
		short sTibiaAngle1)

		{
    1588:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    158c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
    1590:	354d4300 	strbcc	r4, [sp, #-768]
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    1594:	485f3033 	ldmdami	pc, {r0, r1, r4, r5, ip, sp}^
#ifdef USE_AX12_SPEED_CONTROL
			// Save away the new positions...
			g_awGoalAXPos[FIRSTCOXAPIN + LegIndex] = wCoxaSDV; // What order should we store these values?
			g_awGoalAXPos[FIRSTFEMURPIN + LegIndex] = wFemurSDV;
    1598:	6e692f57 	mcrvs	15, 3, r2, cr9, cr7, {2}

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
#ifdef USE_AX12_SPEED_CONTROL
			// Save away the new positions...
			g_awGoalAXPos[FIRSTCOXAPIN + LegIndex] = wCoxaSDV; // What order should we store these values?
    159c:	73000063 	movwvc	r0, #99	; 0x63
			g_awGoalAXPos[FIRSTFEMURPIN + LegIndex] = wFemurSDV;
    15a0:	65747379 	ldrbvs	r7, [r4, #-889]!
			g_awGoalAXPos[FIRSTTIBIAPIN + LegIndex] = wTibiaSDV;
    15a4:	75665f6d 	strbvc	r5, [r6, #-3949]!
    15a8:	632e636e 	teqvs	lr, #-1207959551	; 0xb8000001
    15ac:	00000100 	andeq	r0, r0, r0, lsl #2

#endif
		} else {
			BioloidControllerEx_setNextPose(
    15b0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    15b4:	30316632 	eorscc	r6, r1, r2, lsr r6
					pgm_read_byte(&cPinTable[FIRSTCOXAPIN + LegIndex]),
					wCoxaSDV);
			BioloidControllerEx_setNextPose(
    15b8:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    15bc:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    15c0:	00000200 	andeq	r0, r0, r0, lsl #4
					pgm_read_byte(&cPinTable[FIRSTFEMURPIN + LegIndex]),
					wFemurSDV);
			BioloidControllerEx_setNextPose(
    15c4:	2e64656c 	cdpcs	5, 6, cr6, cr4, cr12, {3}
    15c8:	00030068 	andeq	r0, r3, r8, rrx
					wTibiaSDV);

		}
	}
	CommanderInputController_AllowControllerInterrupts(true); // Ok for hserial again...
}
    15cc:	05000000 	streq	r0, [r0]
    15d0:	0046d402 	subeq	sp, r6, r2, lsl #8
    15d4:	012c0308 	teqeq	ip, r8, lsl #6
    15d8:	0d033d13 	stceq	13, cr3, [r3, #-76]
    15dc:	335a3d58 	cmpcc	sl, #5632	; 0x1600

void StartUpdateServos() {
    15e0:	3e251b25 	fmuldcc	d1, d5, d21
	byte LegIndex;

	// First call off to the init...
	BeginServoUpdate();    // Start the update
    15e4:	21825d03 	orrcs	r5, r2, r3, lsl #26
    15e8:	033d2149 	teqeq	sp, #1073741842	; 0x40000012
    15ec:	3d133c3c 	ldccc	12, cr3, [r3, #-240]

	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		OutputServoInfoForLeg(LegIndex,
    15f0:	5b325d60 	blpl	c98b78 <__Stack_Size+0xc98778>
    15f4:	0e033d13 	mcreq	13, 0, r3, cr3, cr3, {0}
    15f8:	335a3d58 	cmpcc	sl, #5632	; 0x1600
    15fc:	3d138532 	cfldr32cc	mvfx8, [r3, #-200]
    1600:	3d580e03 	ldclcc	14, cr0, [r8, #-12]
    1604:	8532335a 	ldrhi	r3, [r2, #-858]!
    1608:	14696715 	strbtne	r6, [r9], #-1813
    160c:	4b3f221e 	blmi	fc9e8c <__Stack_Size+0xfc9a8c>
    1610:	5c3d2f4b 	ldcpl	15, cr2, [sp], #-300
    1614:	3e4e424b 	cdpcc	2, 4, cr4, cr14, cr11, {2}
    1618:	214b2f59 	cmpcs	fp, r9, asr pc
    161c:	4b4e2f1f 	blmi	138d2a0 <__Stack_Size+0x138cea0>
    1620:	5c3d2f4b 	ldcpl	15, cr2, [sp], #-300
    1624:	3d2f4b4b 	fstmdbxcc	pc!, {d4-d40}
    1628:	2f4b4b5c 	svccs	0x004b4b5c
    162c:	5816033d 	ldmdapl	r6, {r0, r2, r3, r4, r5, r8, r9}
    1630:	f27ec103 	vrhadd.s<illegal width 64>	d28, d14, d3
    1634:	2f211f21 	svccs	0x00211f21
    1638:	4a0a0360 	bmi	2823c0 <__Stack_Size+0x281fc0>
    163c:	25207603 	strcs	r7, [r0, #-1539]!
    1640:	2f251b25 	svccs	0x00251b25
	byte LegIndex;

	// First call off to the init...
	BeginServoUpdate();    // Start the update

	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    1644:	01000702 	tsteq	r0, r2, lsl #14
				cTibiaInv[LegIndex] ?
						-TibiaAngle1[LegIndex] : TibiaAngle1[LegIndex]);

	}

}
    1648:	0001ed01 	andeq	lr, r1, r1, lsl #26
    164c:	ce000200 	cdpgt	2, 0, cr0, cr0, cr0, {0}
    1650:	02000000 	andeq	r0, r0, #0	; 0x0
    1654:	0d0efb01 	vstreq	d15, [lr, #-4]
    1658:	01010100 	tsteq	r1, r0, lsl #2
    165c:	00000001 	andeq	r0, r0, r1
    1660:	01000001 	tsteq	r0, r1
#else
word g_wLastVoltage = 0xffff;    // save the last voltage we retrieved...
byte g_bLegVoltage = 0;		// what leg did we last check?
unsigned long g_ulTimeLastBatteryVoltage;
#define VOLTAGE_REPEAT_MAX  3
word GetBatteryVoltage(void) {
    1664:	33354d43 	teqcc	r5, #4288	; 0x10c0
	if (interpolating && (g_wLastVoltage != 0xffff)
    1668:	57485f30 	smlaldxpl	r5, r8, r0, pc
    166c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1670:	6d747300 	ldclvs	3, cr7, [r4]
    1674:	31663233 	cmncc	r6, r3, lsr r2
    1678:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    167c:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
    1680:	4300636e 	movwmi	r6, #878	; 0x36e
    1684:	3033354d 	eorscc	r3, r3, sp, asr #10
			&& ((getMillis() - g_ulTimeLastBatteryVoltage)
					< VOLTAGE_MAX_TIME_BETWEEN_CALLS))
		return g_wLastVoltage;
    1688:	2f57485f 	svccs	0x0057485f

	register u8 bLoopCnt = VOLTAGE_REPEAT_MAX;
	do {
		register word wVoltage = dxl_read_byte(1, AXM_PRESENT_VOLTAGE);
    168c:	00636e69 	rsbeq	r6, r3, r9, ror #28
    1690:	73797300 	cmnvc	r9, #0	; 0x0
    1694:	5f6d6574 	svcpl	0x006d6574
		if (wVoltage != 0xffff) {
			g_ulTimeLastBatteryVoltage = getMillis();
    1698:	74696e69 	strbtvc	r6, [r9], #-3689
			g_wLastVoltage = wVoltage * 10;
    169c:	0100632e 	tsteq	r0, lr, lsr #6

	register u8 bLoopCnt = VOLTAGE_REPEAT_MAX;
	do {
		register word wVoltage = dxl_read_byte(1, AXM_PRESENT_VOLTAGE);
		if (wVoltage != 0xffff) {
			g_ulTimeLastBatteryVoltage = getMillis();
    16a0:	74730000 	ldrbtvc	r0, [r3]
			g_wLastVoltage = wVoltage * 10;
    16a4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
		}
	} while (--bLoopCnt);

	return 0;

}
    16a8:	5f783031 	svcpl	0x00783031
    16ac:	65707974 	ldrbvs	r7, [r0, #-2420]!
    16b0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    16b4:	74730000 	ldrbtvc	r0, [r3]
// ReadMsgs
//==============================================================================

/* process messages coming from Commander
 *  format = 0xFF RIGHT_H RIGHT_V LEFT_H LEFT_V BUTTONS EXT CHECKSUM */
int Commander_ReadMsgs() {
    16b8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
	 }
	 #endif
	 */
	//while (CheckZBNewArrive() > 0) {
	while (1) {
		if (zgb_rx_check_arduino() == 1) {
    16bc:	5f783031 	svcpl	0x00783031
    16c0:	2e70616d 	rpwcssz	f6, f0, #5.0

			leftV = (signed char) (zgb_rx_data_right_V_());
    16c4:	00020068 	andeq	r0, r2, r8, rrx
    16c8:	6d747300 	ldclvs	3, cr7, [r4]
			leftH = (signed char) (zgb_rx_data_right_H_());
    16cc:	31663233 	cmncc	r6, r3, lsr r2
    16d0:	675f7830 	smmlarvs	pc, r0, r8, r7
			rightV = (signed char) (zgb_rx_data_left_V_());
    16d4:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
    16d8:	00020068 	andeq	r0, r2, r8, rrx
			rightH = (signed char) (zgb_rx_data_left_H_());
    16dc:	6d747300 	ldclvs	3, cr7, [r4]
    16e0:	31663233 	cmncc	r6, r3, lsr r2
			buttons = zgb_rx_data_buttons();
    16e4:	6e5f7830 	mrcvs	8, 2, r7, cr15, cr0, {1}
    16e8:	2e636976 	mcrcs	9, 3, r6, cr3, cr6, {3}
			ext = zgb_rx_data_extra();
    16ec:	00020068 	andeq	r0, r2, r8, rrx
    16f0:	6d747300 	ldclvs	3, cr7, [r4]

	}

	return 0;

}
    16f4:	31663233 	cmncc	r6, r3, lsr r2
    16f8:	615f7830 	cmpvs	pc, r0, lsr r8
    16fc:	682e6364 	stmdavs	lr!, {r2, r5, r6, r8, r9, sp, lr}
    1700:	00000200 	andeq	r0, r0, r0, lsl #4
    1704:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
    1708:	00682e74 	rsbeq	r2, r8, r4, ror lr
    170c:	73000003 	movwvc	r0, #3	; 0x3
    1710:	65747379 	ldrbvs	r7, [r4, #-889]!

//==============================================================================
// This is The main code to input function to read inputs from the Commander and then
//process any commands.
//==============================================================================
void CommanderInputController_ControlInput(void) {
    1714:	75665f6d 	strbvc	r5, [r6, #-3949]!

	// See if we have a new command available...
	if (Commander_ReadMsgs() > 0) {
    1718:	682e636e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}
    171c:	00000300 	andeq	r0, r0, r0, lsl #6
    1720:	02050000 	andeq	r0, r5, #0	; 0x0
    1724:	08004910 	stmdaeq	r0, {r4, r8, fp, lr}
		// If we receive a valid message than turn robot on...
		boolean fAdjustLegPositions = false;
		short sLegInitXZAdjust = 0;
		short sLegInitAngleAdjust = 0;

		if (!g_InControlState.fRobotOn) {
    1728:	0102ce03 	tsteq	r2, r3, lsl #28
    172c:	2f241c24 	svccs	0x00241c24
			g_InControlState.fRobotOn = true;
    1730:	3d4e3d4e 	stclcc	13, cr3, [lr, #-312]
    1734:	9055034d 	subsls	r0, r5, sp, asr #6
		}

		// [SWITCH MODES]

		// Cycle through modes...
		if ((buttons & BUT_LT) && !(buttonsPrev & BUT_LT)) {
    1738:	03200903 	teqeq	r0, #49152	; 0xc000
    173c:	09032077 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, sp}
    1740:	3f3f3420 	svccc	0x003f3420
    1744:	7fa5033d 	svcvc	0x00a5033d
    1748:	254d314a 	strbcs	r3, [sp, #-330]
    174c:	292c321e 	stmdbcs	ip!, {r1, r2, r3, r4, r9, ip, sp}

			if (++ControlMode >= MODECNT) {
    1750:	212f2f21 	teqcs	pc, r1, lsr #30
    1754:	2c223523 	cfstr32cs	mvfx3, [r2], #-140
    1758:	2f2f2129 	svccs	0x002f2129
    175c:	6e322321 	cdpvs	3, 3, cr2, cr2, cr1, {1}
				ControlMode = WALKMODE;    // cycled back around...
				Buzzed(50, 2000);
    1760:	3d4e4b6d 	vstrcc	d20, [lr, #-436]
    1764:	675d675b 	undefined
    1768:	755c675b 	ldrbvc	r6, [ip, #-1883]
				Buzzed(50, 3000);
    176c:	7ee1034b 	cdpvc	3, 14, cr0, cr1, cr11, {2}
    1770:	03273074 	teqeq	r7, #116	; 0x74

			} else {
				Buzzed(50, 2000);
    1774:	1b252079 	blne	949960 <__Stack_Size+0x949560>
    1778:	2a321d34 	bcs	c88c50 <__Stack_Size+0xc88850>
    177c:	302f2f30 	eorcc	r2, pc, r0, lsr pc
			}
			if (ControlMode != SINGLELEGMODE)
    1780:	2f2f2b31 	svccs	0x002f2b31
    1784:	1f4c302f 	svcne	0x004c302f
				g_InControlState.SelectedLeg = 255;
    1788:	302f1f2f 	eorcc	r1, pc, pc, lsr #30
    178c:	03361f4c 	teqeq	r6, #304	; 0x130
    1790:	2f1f2e79 	svccs	0x001f2e79

		}

		//[Common functions]
		//Switch Balance mode on/off
		if ((buttons & BUT_L4) && !(buttonsPrev & BUT_L4)) {
    1794:	302a3231 	eorcc	r3, sl, r1, lsr r2
    1798:	31302f2f 	teqcc	r0, pc, lsr #30
    179c:	2f2f2f2b 	svccs	0x002f2f2b
    17a0:	2f1f4c30 	svccs	0x001f4c30
    17a4:	4d302f1f 	ldcmi	15, cr2, [r0, #-124]!
    17a8:	2d1f2f1f 	ldccs	15, cr2, [pc, #-124]

			g_InControlState.BalanceMode = !g_InControlState.BalanceMode;
    17ac:	1f4c3030 	svcne	0x004c3030
    17b0:	2e790336 	mrccs	3, 3, r0, cr9, cr6, {1}
    17b4:	32312f1f 	eorscc	r2, r1, #124	; 0x7c
    17b8:	2f2f302a 	svccs	0x002f302a
    17bc:	2f2b3130 	svccs	0x002b3130
			if (g_InControlState.BalanceMode) {
    17c0:	31302f2f 	teqcc	r0, pc, lsr #30
				Buzzed(250, 1500);
    17c4:	2f2f2f2b 	svccs	0x002f2f2b
    17c8:	2f1f4d30 	svccs	0x001f4d30
			} else {
				Buzzed(100, 2000);
    17cc:	30302d1f 	eorscc	r2, r0, pc, lsl sp
    17d0:	1f2f1f4c 	svcne	0x002f1f4c
				Buzzed(50, 4000);
    17d4:	1f4c302f 	svcne	0x004c302f
    17d8:	302f1f2f 	eorcc	r1, pc, pc, lsr #30
    17dc:	1f2f1f4c 	svcne	0x002f1f4c
			}
		}

		//Stand up, sit down
		if ((buttons & BUT_L5) && !(buttonsPrev & BUT_L5)) {
    17e0:	2c30312f 	ldfcss	f3, [r0], #-188
    17e4:	4b302f2f 	blmi	c0d4a8 <__Stack_Size+0xc0d0a8>
    17e8:	7f80034b 	svcvc	0x0080034b
    17ec:	78032890 	stmdavc	r3, {r4, r7, fp, sp}
    17f0:	0c03282e 	stceq	8, cr2, [r3], {46}
    17f4:	2079034a 	rsbscs	r0, r9, sl, asr #6
			if (g_BodyYOffset > 0)
    17f8:	23211e4f 	teqcs	r1, #1264	; 0x4f0
    17fc:	2f2f2f1c 	svccs	0x002f2f1c
				g_BodyYOffset = 0;
    1800:	1e40312f 	dvfnesp	f3, f0, #10.0
    1804:	312f303b 	teqcc	pc, fp, lsr r0
			else
				g_BodyYOffset = 35;
			fAdjustLegPositions = true;
			g_fDynamicLegXZLength = false;
    1808:	2f1f1e40 	svccs	0x001f1e40
		//Stand up, sit down
		if ((buttons & BUT_L5) && !(buttonsPrev & BUT_L5)) {
			if (g_BodyYOffset > 0)
				g_BodyYOffset = 0;
			else
				g_BodyYOffset = 35;
    180c:	032f2f2f 	teqeq	pc, #188	; 0xbc
			fAdjustLegPositions = true;
			g_fDynamicLegXZLength = false;
    1810:	313c7f98 	ldrbcc	r7, [ip, -r8]!
    1814:	30304d31 	eorscc	r4, r0, r1, lsr sp

		// We will use L6 with the Right joystick to control both body offset as well as Speed...
		// We move each pass through this by a percentage of how far we are from center in each direction
		// We get feedback with height by seeing the robot move up and down.  For Speed, I put in sounds
		// which give an idea, but only for those whoes robot has a speaker
		int lx = leftH;
    1818:	3f3f3f3f 	svccc	0x003f3f3f
		int ly = leftV;
		if (buttons & BUT_L6) {
    181c:	5c3f694d 	ldcpl	9, cr6, [pc], #-308

		// We will use L6 with the Right joystick to control both body offset as well as Speed...
		// We move each pass through this by a percentage of how far we are from center in each direction
		// We get feedback with height by seeing the robot move up and down.  For Speed, I put in sounds
		// which give an idea, but only for those whoes robot has a speaker
		int lx = leftH;
    1820:	5c5e513f 	ldfple	f5, [lr], {63}
    1824:	033d5b5c 	teqeq	sp, #94208	; 0x17000
		int ly = leftV;
    1828:	232e7fa5 	teqcs	lr, #660	; 0x294
    182c:	3123232b 	teqcc	r3, fp, lsr #6
		if (buttons & BUT_L6) {
    1830:	31313131 	teqcc	r1, r1, lsr r1
    1834:	0005022f 	andeq	r0, r5, pc, lsr #4
			// raise or lower the robot on the joystick up /down
			// Maybe should have Min/Max
			int delta = rightV / 25;
    1838:	02080101 	andeq	r0, r8, #1073741824	; 0x40000000
    183c:	00020000 	andeq	r0, r2, r0
    1840:	000000ab 	andeq	r0, r0, fp, lsr #1
    1844:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1848:	0101000d 	tsteq	r1, sp
    184c:	00000101 	andeq	r0, r0, r1, lsl #2
			if (delta) {
    1850:	00000100 	andeq	r0, r0, r0, lsl #2
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
    1854:	354d4301 	strbcc	r4, [sp, #-769]
    1858:	485f3033 	ldmdami	pc, {r0, r1, r4, r5, ip, sp}^
    185c:	72732f57 	rsbsvc	r2, r3, #348	; 0x15c
    1860:	74730063 	ldrbtvc	r0, [r3], #-99
    1864:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1868:	5f783031 	svcpl	0x00783031
    186c:	2f62696c 	svccs	0x0062696c
    1870:	00636e69 	rsbeq	r6, r3, r9, ror #28
    1874:	33354d43 	teqcc	r5, #4288	; 0x10c0
			sLegInitAngleAdjust = ly / 8;
			lx = 0;
			ly = 0;

			// Likewise for Speed control
			delta = rightH / 16;   //
    1878:	57485f30 	smlaldxpl	r5, r8, r0, pc
    187c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1880:	73750000 	cmnvc	r5, #0	; 0x0
    1884:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    1888:	00010063 	andeq	r0, r1, r3, rrx
			if ((delta < 0) && g_InControlState.SpeedControl) {
    188c:	6d747300 	ldclvs	3, cr7, [r4]
    1890:	31663233 	cmncc	r6, r3, lsr r2
    1894:	745f7830 	ldrbvc	r7, [pc], #2096	; 189c <__Stack_Size+0x149c>
				if ((word)(-delta) < g_InControlState.SpeedControl)
    1898:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
					g_InControlState.SpeedControl += delta;
    189c:	00020068 	andeq	r0, r2, r8, rrx
				else
					g_InControlState.SpeedControl = 0;
    18a0:	6d747300 	ldclvs	3, cr7, [r4]
    18a4:	31663233 	cmncc	r6, r3, lsr r2

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}
			if ((delta > 0) && (g_InControlState.SpeedControl < 2000)) {
    18a8:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]
    18ac:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
    18b0:	00000200 	andeq	r0, r0, r0, lsl #4
				g_InControlState.SpeedControl += delta;
				if (g_InControlState.SpeedControl > 2000)
    18b4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
					g_InControlState.SpeedControl = 0;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}
			if ((delta > 0) && (g_InControlState.SpeedControl < 2000)) {
				g_InControlState.SpeedControl += delta;
    18b8:	30316632 	eorscc	r6, r1, r2, lsr r6
				if (g_InControlState.SpeedControl > 2000)
					g_InControlState.SpeedControl = 2000;
    18bc:	73755f78 	cmnvc	r5, #480	; 0x1e0
    18c0:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
    18c4:	00020068 	andeq	r0, r2, r8, rrx
    18c8:	61737500 	cmnvs	r3, r0, lsl #10
    18cc:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
				fAdjustLegPositions = true;
			}

			// Also use right Horizontal to manually adjust the initial leg positions.
			sLegInitXZAdjust = lx / 10;        // play with this.
    18d0:	00000300 	andeq	r0, r0, r0, lsl #6
    18d4:	74737973 	ldrbtvc	r7, [r3], #-2419
    18d8:	665f6d65 	ldrbvs	r6, [pc], -r5, ror #26
    18dc:	2e636e75 	mcrcs	14, 3, r6, cr3, cr5, {3}
			sLegInitAngleAdjust = ly / 8;
    18e0:	00030068 	andeq	r0, r3, r8, rrx
    18e4:	64656c00 	strbtvs	r6, [r5], #-3072
    18e8:	0300682e 	movweq	r6, #2094	; 0x82e
    18ec:	00000000 	andeq	r0, r0, r0
					g_InControlState.SpeedControl = 2000;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}

			rightH = 0; // don't walk when adjusting the speed here...
    18f0:	4d640205 	sfmmi	f0, 2, [r4, #-20]!
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
				fAdjustLegPositions = true;
			}

			// Also use right Horizontal to manually adjust the initial leg positions.
			sLegInitXZAdjust = lx / 10;        // play with this.
    18f4:	c5030800 	strgt	r0, [r3, #-2048]
					g_InControlState.SpeedControl = 2000;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}

			rightH = 0; // don't walk when adjusting the speed here...
    18f8:	6a130100 	bvs	4c1d00 <__Stack_Size+0x4c1900>
		}

		//[Walk functions]
		if (ControlMode == WALKMODE) {
    18fc:	134a0f03 	movtne	r0, #44803	; 0xaf03
    1900:	3f4b8485 	svccc	0x004b8485
    1904:	5b851378 	blpl	fe1466ec <SCS_BASE+0x1e1386ec>

			//Switch gates
			if (((buttons & BUT_R1) && !(buttonsPrev & BUT_R1))
    1908:	13742e03 	cmnne	r4, #48	; 0x30
    190c:	136a2f4b 	cmnne	sl, #300	; 0x12c
    1910:	3d667903 	stclcc	9, cr7, [r6, #-12]!
    1914:	4b3c0b03 	blmi	f04528 <__Stack_Size+0xf04128>
    1918:	d5037576 	strle	r7, [r3, #-1398]
    191c:	24586601 	ldrbcs	r6, [r8], #-1537
    1920:	5a2a2222 	bpl	a8a1b0 <__Stack_Size+0xa89db0>
    1924:	212d2175 	teqcs	sp, r5, ror r1
    1928:	034a7a03 	movteq	r7, #43523	; 0xaa03
    192c:	d5033c0d 	strle	r3, [r3, #-3085]
    1930:	1c169000 	ldcne	0, cr9, [r6], {0}
    1934:	2d2f1f24 	stccs	15, cr1, [pc, #-144]!
    1938:	032f4b30 	teqeq	pc, #49152	; 0xc000
    193c:	23587419 	cmpcs	r8, #419430400	; 0x19000000
    1940:	593a2121 	ldmdbpl	sl!, {r0, r5, r8, sp}
    1944:	2f2d2183 	svccs	0x002d2183
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
    1948:	3c0a0354 	stccc	3, cr0, [sl], {84}
					&& abs(g_InControlState.TravelLength.x) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
    194c:	4d6a1398 	stclmi	3, cr1, [sl, #-608]!
    1950:	67221e22 	strvs	r1, [r2, -r2, lsr #28]!
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
    1954:	3d244640 	stccc	6, cr4, [r4, #-256]!
					&& abs(g_InControlState.TravelLength.x) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
    1958:	673f3d68 	ldrvs	r3, [pc, -r8, ror #26]!
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
					Buzzed(50, 2000);
    195c:	033d594b 	teqeq	sp, #1228800	; 0x12c000
    1960:	2d219e61 	stccs	14, cr9, [r1, #-388]!
    1964:	59033d21 	stmdbpl	r3, {r0, r5, r8, sl, fp, ip, sp}
				} else {
					Buzzed(50, 2000);
    1968:	4c4e203c 	mcrrmi	0, 3, r2, lr, cr12
    196c:	4c6a4b4c 	stclmi	11, cr4, [sl], #-304
    1970:	03587303 	cmpeq	r8, #201326592	; 0xc000000
					Buzzed(50, 2250);
    1974:	5d033c11 	stcpl	12, cr3, [r3, #-68]
    1978:	221e2274 	andscs	r2, lr, #1073741831	; 0x40000007
					g_InControlState.GaitType = 0;
    197c:	7f84033d 	svcvc	0x0084033d
    1980:	221e224a 	andscs	r2, lr, #-1610612732	; 0xa0000004
}

void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {
    1984:	ca03593f 	bgt	d7e88 <__Stack_Size+0xd7a88>
    1988:	1e22747d 	mcrne	4, 1, r7, cr2, cr13, {3}
    198c:	8a033d22 	bhi	d0e1c <__Stack_Size+0xd0a1c>

		g_InControlState.gaitCur = APG[g_InControlState.GaitType];
    1990:	232e4a03 	teqcs	lr, #12288	; 0x3000
    1994:	7903283e 	stmdbvc	r3, {r1, r2, r3, r4, r5, fp, sp}
    1998:	2f2f4b20 	svccs	0x002f4b20
    199c:	2f4c1e32 	svccs	0x004c1e32
    19a0:	03694d3e 	cmneq	r9, #3968	; 0xf80
				}
				GaitSelect();
			}

			//Double leg lift height
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    19a4:	16034a6d 	strne	r4, [r3], -sp, ror #20
    19a8:	7eea0320 	cdpvc	3, 14, cr0, cr10, cr0, {1}
    19ac:	3e232e58 	mcrcc	14, 1, r2, cr3, cr8, {2}
    19b0:	207a0327 	rsbscs	r0, sl, r7, lsr #6
    19b4:	312f2f4b 	teqcc	pc, fp, asr #30
				Buzzed(50, 2000);
    19b8:	3e2f4c1e 	mcrcc	12, 1, r4, cr15, cr14, {0}
    19bc:	034e694d 	movteq	r6, #59725	; 0xe94d
				HeightSpeedMode = (HeightSpeedMode + 1) & 0x3; // wrap around mode
    19c0:	1903586a 	stmdbne	r3, {r1, r3, r5, r6, fp, ip, lr}
    19c4:	7db60320 	ldcvc	3, cr0, [r6, #128]!
    19c8:	3e232e82 	cdpcc	14, 2, cr2, cr3, cr2, {4}
    19cc:	207a0327 	rsbscs	r0, sl, r7, lsr #6
				DoubleTravelOn = HeightSpeedMode & 0x1;
    19d0:	312f2f4b 	teqcc	pc, fp, asr #30
    19d4:	3e2f4c1e 	mcrcc	12, 1, r4, cr15, cr14, {0}
				if (HeightSpeedMode & 0x2)
    19d8:	6e03694d 	cdpvs	9, 0, cr6, cr3, cr13, {2}
    19dc:	2017034a 	andscs	r0, r7, sl, asr #6
					g_InControlState.LegLiftHeight = 80;
    19e0:	5802e203 	stmdapl	r2, {r0, r1, r9, sp, lr, pc}
    19e4:	3d4b7622 	stclcc	6, cr7, [fp, #-136]
				else
					g_InControlState.LegLiftHeight = 50;
			}

			// Switch between Walk method 1 && Walk method 2
			if ((buttons & BUT_R2) && !(buttonsPrev & BUT_R2)) {
    19e8:	0b03304e 	bleq	cdb28 <__Stack_Size+0xcd728>
    19ec:	2e750320 	cdpcs	3, 7, cr0, cr5, cr0, {1}
    19f0:	30200b03 	eorcc	r0, r0, r3, lsl #22
    19f4:	312f5c5a 	teqcc	pc, sl, asr ip
    19f8:	304b4b67 	subcc	r4, fp, r7, ror #22

				if ((++bJoystickWalkMode) > 1)
    19fc:	7fb3034b 	svcvc	0x00b3034b
    1a00:	4c4e20ac 	mcrrmi	0, 10, r2, lr, cr12
    1a04:	7903684b 	stmdbvc	r3, {r0, r1, r3, r6, fp, sp, lr}

					bJoystickWalkMode = 0;
				Buzzed(50, 2000 + bJoystickWalkMode * 250);
    1a08:	3c0b0358 	stccc	3, cr0, [fp], {88}
			// Switch between Walk method 1 && Walk method 2
			if ((buttons & BUT_R2) && !(buttonsPrev & BUT_R2)) {

				if ((++bJoystickWalkMode) > 1)

					bJoystickWalkMode = 0;
    1a0c:	587df403 	ldmdapl	sp!, {r0, r1, sl, ip, sp, lr, pc}^
				Buzzed(50, 2000 + bJoystickWalkMode * 250);
    1a10:	3d4b7622 	stclcc	6, cr7, [fp, #-136]
    1a14:	0a03304c 	beq	cdb4c <__Stack_Size+0xcd74c>
    1a18:	2e760320 	cdpcs	3, 7, cr0, cr6, cr0, {1}
    1a1c:	30200a03 	eorcc	r0, r0, r3, lsl #20
			}

			//Walking
			switch (bJoystickWalkMode) {
    1a20:	3f3d6a76 	svccc	0x003d6a76
    1a24:	3e594b67 	fnmscdcc	d20, d9, d23
    1a28:	ba19034b 	blt	64275c <__Stack_Size+0x64235c>
			case 0:
				g_InControlState.TravelLength.x = -lx;
    1a2c:	9b032f2f 	blls	cd6f0 <__Stack_Size+0xcd2f0>
    1a30:	21202e7f 	teqcs	r0, pc, ror lr
    1a34:	4b301e30 	blmi	c092fc <__Stack_Size+0xc08efc>
				g_InControlState.TravelLength.z = -ly;
    1a38:	69034b68 	stmdbvs	r3, {r3, r5, r6, r8, r9, fp, lr}
				g_InControlState.TravelLength.y = -(rightH) / 4; //Right Stick Left/Right
				break;
			case 1:
				g_InControlState.TravelLength.z = (rightV); //Right Stick Up/Down
    1a3c:	221e303c 	andscs	r3, lr, #60	; 0x3c
    1a40:	0002024b 	andeq	r0, r2, fp, asr #4
    1a44:	020d0101 	andeq	r0, sp, #1073741824	; 0x40000000
				g_InControlState.TravelLength.y = -(rightH) / 4; //Right Stick Left/Right
    1a48:	00020000 	andeq	r0, r2, r0
    1a4c:	00000084 	andeq	r0, r0, r4, lsl #1
    1a50:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1a54:	0101000d 	tsteq	r1, sp
    1a58:	00000101 	andeq	r0, r0, r1, lsl #2
    1a5c:	00000100 	andeq	r0, r0, r0, lsl #2
				break;

			}

			if (!DoubleTravelOn) {  //(Double travel length)
    1a60:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
				g_InControlState.TravelLength.x =
    1a64:	31663233 	cmncc	r6, r3, lsr r2
    1a68:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    1a6c:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
						g_InControlState.TravelLength.x / 2;
				g_InControlState.TravelLength.z =
    1a70:	73006372 	movwvc	r6, #882	; 0x372
    1a74:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    1a78:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
			}

		}

		//[Translate functions]
		g_BodyYShift = 0;
    1a7c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1a80:	636e692f 	cmnvs	lr, #770048	; 0xbc000
		if (ControlMode == TRANSLATEMODE) {
    1a84:	74730000 	ldrbtvc	r0, [r3]
    1a88:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6

		      g_InControlState.BodyPos.x =  SmoothControl(((lx)*2/3), g_InControlState.BodyPos.x, SmDiv);
    1a8c:	5f783031 	svcpl	0x00783031
    1a90:	2e636461 	cdpcs	4, 6, cr6, cr3, cr1, {3}
    1a94:	00010063 	andeq	r0, r1, r3, rrx
    1a98:	6d747300 	ldclvs	3, cr7, [r4]
    1a9c:	31663233 	cmncc	r6, r3, lsr r2
    1aa0:	745f7830 	ldrbvc	r7, [pc], #2096	; 1aa8 <__Stack_Size+0x16a8>
    1aa4:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    1aa8:	00020068 	andeq	r0, r2, r8, rrx
		      g_InControlState.BodyPos.z =  SmoothControl(((ly)*2/3), g_InControlState.BodyPos.z, SmDiv);
    1aac:	6d747300 	ldclvs	3, cr7, [r4]
    1ab0:	31663233 	cmncc	r6, r3, lsr r2
    1ab4:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]
    1ab8:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
    1abc:	00000200 	andeq	r0, r0, r0, lsl #4
		      g_InControlState.BodyRot1.y = SmoothControl(((rightH)*2), g_InControlState.BodyRot1.y, SmDiv);
    1ac0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
		//[Translate functions]
		g_BodyYShift = 0;
		if (ControlMode == TRANSLATEMODE) {

		      g_InControlState.BodyPos.x =  SmoothControl(((lx)*2/3), g_InControlState.BodyPos.x, SmDiv);
		      g_InControlState.BodyPos.z =  SmoothControl(((ly)*2/3), g_InControlState.BodyPos.z, SmDiv);
    1ac4:	30316632 	eorscc	r6, r1, r2, lsr r6
		      g_InControlState.BodyRot1.y = SmoothControl(((rightH)*2), g_InControlState.BodyRot1.y, SmDiv);
    1ac8:	64615f78 	strbtvs	r5, [r1], #-3960
    1acc:	00682e63 	rsbeq	r2, r8, r3, ror #28
    1ad0:	00000002 	andeq	r0, r0, r2
    1ad4:	48020500 	stmdami	r2, {r8, sl}


			//      g_InControlState.BodyPos.x = (lx)/2;
			//      g_InControlState.BodyPos.z = -(ly)/3;
			//      g_InControlState.BodyRot1.y = (rightH)*2;
			g_BodyYShift = (-(rightV) / 2);
    1ad8:	03080053 	movweq	r0, #32851	; 0x8053
    1adc:	030101ae 	movweq	r0, #4526	; 0x11ae
    1ae0:	9226010f 	eorls	r0, r6, #-1073741821	; 0xc0000003
    1ae4:	03200b03 	teqeq	r0, #3072	; 0xc00
    1ae8:	85352e79 	ldrhi	r2, [r5, #-3705]!
    1aec:	03200a03 	teqeq	r0, #12288	; 0x3000
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
    1af0:	1c26207a 	stcne	0, cr2, [r6], #-488
			g_InControlState.BodyRot1.x = (ly);
			g_InControlState.BodyRot1.y = (rightH) * 2;
    1af4:	03213e32 	teqeq	r1, #800	; 0x320
    1af8:	31153c0b 	tstcc	r5, fp, lsl #24
			g_InControlState.BodyRot1.z = (lx);
			g_BodyYShift = (-(rightV) / 2);
    1afc:	23232323 	teqcs	r3, #-1946157056	; 0x8c000000
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
			g_InControlState.BodyRot1.x = (ly);
			g_InControlState.BodyRot1.y = (rightH) * 2;
    1b00:	2e0c032f 	cdpcs	3, 0, cr0, cr12, cr15, {1}
			g_BodyYShift = (-(rightV) / 2);
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
			g_InControlState.BodyRot1.x = (ly);
    1b04:	4c4f2317 	mcrrmi	3, 1, r2, pc, cr7
			g_InControlState.BodyRot1.y = (rightH) * 2;
			g_InControlState.BodyRot1.z = (lx);
			g_BodyYShift = (-(rightV) / 2);
    1b08:	17200d03 	strne	r0, [r0, -r3, lsl #26]!
    1b0c:	034c4f23 	movteq	r4, #53027	; 0xcf23
    1b10:	09032012 	stmdbeq	r3, {r1, r4, sp}
    1b14:	4f232201 	svcmi	0x00232201
    1b18:	2e0a034c 	cdpcs	3, 0, cr0, cr10, cr12, {2}
		}

		//[Single leg functions]
#ifdef OPT_SINGLELEG
		if (ControlMode == SINGLELEGMODE) {
    1b1c:	0a034b17 	beq	d4780 <__Stack_Size+0xd4380>

			//Switch leg for single leg control
			if ((buttons & BUT_R1) && !(buttonsPrev & BUT_R1)) {
    1b20:	0d03192e 	stceq	9, cr1, [r3, #-184]
    1b24:	2e0a034a 	cdpcs	3, 0, cr0, cr10, cr10, {2}
    1b28:	0a034b17 	beq	d478c <__Stack_Size+0xd438c>
    1b2c:	0d03192e 	stceq	9, cr1, [r3, #-184]
    1b30:	2e0c034a 	cdpcs	3, 0, cr0, cr12, cr10, {2}
				Buzzed(50,2000);
    1b34:	4c502417 	cfldrdmi	mvd2, [r0], {23}
    1b38:	19200a03 	stmdbne	r0!, {r0, r1, r9, fp}
    1b3c:	034a0d03 	movteq	r0, #44291	; 0xad03
				if (g_InControlState.SelectedLeg < (CNT_LEGS-1)) {
    1b40:	09032e0d 	stmdbeq	r3, {r0, r2, r3, r9, sl, fp, sp}
    1b44:	311d2501 	tstcc	sp, r1, lsl #10
					g_InControlState.SelectedLeg = g_InControlState.SelectedLeg + 1;
				} else {
					g_InControlState.SelectedLeg = 0;
    1b48:	0e032130 	flteqsp	f3, r2
		if (ControlMode == SINGLELEGMODE) {

			//Switch leg for single leg control
			if ((buttons & BUT_R1) && !(buttonsPrev & BUT_R1)) {
				Buzzed(50,2000);
				if (g_InControlState.SelectedLeg < (CNT_LEGS-1)) {
    1b4c:	4f231720 	svcmi	0x00231720
					g_InControlState.SelectedLeg = g_InControlState.SelectedLeg + 1;
    1b50:	202c034c 	eorcs	r0, ip, ip, asr #6
			   g_InControlState.SLLeg.x= (signed char)((int)((int)lx+128)/2); //Left Stick Right/Left
      		   g_InControlState.SLLeg.y= (signed char)((int)((int)rightV+128)/10); //Right Stick Up/Down
		       g_InControlState.SLLeg.z = (signed char)((int)((int)ly+128)/2); //Left Stick Up/Down

#else
			g_InControlState.SLLeg.x = lx; //Left Stick Right/Left
    1b54:	03010a03 	movweq	r0, #6659	; 0x1a03
			g_InControlState.SLLeg.y = rightV / 3 - 20;//Right Stick Up/Down
    1b58:	03202076 	teqeq	r0, #118	; 0x76
    1b5c:	3025580a 	eorcc	r5, r5, sl, lsl #16
    1b60:	2e780332 	mrccs	3, 3, r0, cr8, cr2, {1}
    1b64:	35223224 	strcc	r3, [r2, #-548]!
    1b68:	78033222 	stmdavc	r3, {r1, r5, r9, ip, sp}
			g_InControlState.SLLeg.z = ly;//Left Stick Up/Down

#endif
			// Hold single leg in place
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    1b6c:	2232242e 	eorscs	r2, r2, #771751936	; 0x2e000000
    1b70:	323e4123 	eorscc	r4, lr, #-1073741816	; 0xc0000008
    1b74:	242e7803 	strtcs	r7, [lr], #-2051
      		   g_InControlState.SLLeg.y= (signed char)((int)((int)rightV+128)/10); //Right Stick Up/Down
		       g_InControlState.SLLeg.z = (signed char)((int)((int)ly+128)/2); //Left Stick Up/Down

#else
			g_InControlState.SLLeg.x = lx; //Left Stick Right/Left
			g_InControlState.SLLeg.y = rightV / 3 - 20;//Right Stick Up/Down
    1b78:	5d312232 	lfmpl	f2, 4, [r1, #-200]!
			g_InControlState.SLLeg.z = ly;//Left Stick Up/Down

#endif
			// Hold single leg in place
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    1b7c:	78033230 	stmdavc	r3, {r4, r5, r9, ip, sp}
    1b80:	2232242e 	eorscs	r2, r2, #771751936	; 0x2e000000
    1b84:	03323036 	teqeq	r2, #54	; 0x36
				Buzzed(50,2000);
    1b88:	32242e78 	eorcc	r2, r4, #1920	; 0x780
    1b8c:	0d032222 	sfmeq	f2, 4, [r3, #-136]
				g_InControlState.fSLHold = !g_InControlState.fSLHold;
    1b90:	4f23172e 	svcmi	0x0023172e
    1b94:	200a034c 	andcs	r0, sl, ip, asr #6
    1b98:	09032f17 	stmdbeq	r3, {r0, r1, r2, r4, r8, r9, sl, fp, sp}
    1b9c:	032f142e 	teqeq	pc, #771751936	; 0x2e000000
			}
		}
#endif

		//Calculate walking time delay
		g_InControlState.InputTimeDelay = 128- max(max(abs(lx), abs(ly)), abs(rightH));
    1ba0:	23174a0e 	tstcs	r7, #57344	; 0xe000
    1ba4:	0e034c4f 	cdpeq	12, 0, cr4, cr3, cr15, {2}
    1ba8:	4f231720 	svcmi	0x00231720
    1bac:	2029034c 	eorcs	r0, r9, ip, asr #6
    1bb0:	2230221a 	eorscs	r2, r0, #-1610612735	; 0xa0000001
    1bb4:	200e0321 	andcs	r0, lr, r1, lsr #6
    1bb8:	4c4f2317 	mcrrmi	3, 1, r2, pc, cr7
    1bbc:	17200e03 	strne	r0, [r0, -r3, lsl #28]!
    1bc0:	034c5024 	movteq	r5, #49188	; 0xc024
    1bc4:	0319200a 	tsteq	r9, #10	; 0xa
    1bc8:	2c034a0d 	stccs	10, cr4, [r3], {13}
    1bcc:	010a032e 	tsteq	sl, lr, lsr #6
    1bd0:	20207603 	eorcs	r7, r0, r3, lsl #12

		//Calculate g_InControlState.BodyPos.y
		g_InControlState.BodyPos.y = max(g_BodyYOffset + g_BodyYShift, 0);
    1bd4:	25580a03 	ldrbcs	r0, [r8, #-2563]
    1bd8:	78033230 	stmdavc	r3, {r4, r5, r9, ip, sp}
    1bdc:	2232242e 	eorscs	r2, r2, #771751936	; 0x2e000000
    1be0:	03322235 	teqeq	r2, #1342177283	; 0x50000003
    1be4:	32242e78 	eorcc	r2, r4, #1920	; 0x780
    1be8:	1e262522 	cfsh64ne	mvdx2, mvdx6, #18

		if (sLegInitXZAdjust || sLegInitAngleAdjust) {
    1bec:	322a2492 	eorcc	r2, sl, #-1845493760	; 0x92000000
    1bf0:	0c032122 	stfeqs	f2, [r3], {34}
			// User asked for manual leg adjustment - only do when we have finished any previous adjustment

			if (!g_InControlState.ForceGaitStepCnt) {
    1bf4:	0109032e 	tsteq	r9, lr, lsr #6
				if (sLegInitXZAdjust)
    1bf8:	30311d25 	eorscc	r1, r1, r5, lsr #26
					g_fDynamicLegXZLength = true;
    1bfc:	20130321 	andscs	r0, r3, r1, lsr #6
    1c00:	10032127 	andne	r2, r3, r7, lsr #2

				sLegInitXZAdjust += GetLegsXZLength(); // Add on current length to our adjustment...
    1c04:	3d26202e 	stccc	0, cr2, [r6, #-184]!
    1c08:	1a3c1b03 	bne	f0881c <__Stack_Size+0xf0841c>
				// Handle maybe change angles...
				if (sLegInitAngleAdjust)
					RotateLegInitAngles(sLegInitAngleAdjust);

				// Give system time to process previous calls
				AdjustLegPositions(sLegInitXZAdjust);
    1c0c:	21224c22 	teqcs	r2, r2, lsr #24
			}
		}

		if (fAdjustLegPositions && !g_fDynamicLegXZLength)
    1c10:	19200f03 	stmdbne	r0!, {r0, r1, r8, r9, sl, fp}
    1c14:	1f032122 	svcne	0x00032122
    1c18:	30221a2e 	eorcc	r1, r2, lr, lsr #20
			AdjustLegPositionsToBodyHeight(); // Put main workings into main program file
    1c1c:	0b032122 	bleq	ca0ac <__Stack_Size+0xc9cac>
		// Save away the buttons state as to not process the same press twice.
		buttonsPrev = buttons;
    1c20:	5d231620 	stcpl	6, cr1, [r3, #-128]!
    1c24:	3c11035a 	ldccc	3, cr0, [r1], {90}
		extPrev = ext;
    1c28:	580d031a 	stmdapl	sp, {r1, r3, r4, r8, r9}
    1c2c:	18201103 	stmdane	r0!, {r0, r1, r8, ip}
		g_ulLastMsgTime = getMillis();
    1c30:	200f033d 	andcs	r0, pc, sp, lsr r3
    1c34:	23010c03 	movwcs	r0, #7171	; 0x1c03
	} else {
		// We did not receive a valid packet.  check for a timeout to see if we should turn robot off...
		if (g_InControlState.fRobotOn) {
    1c38:	03ac0d03 	undefined instruction 0x03ac0d03
			if ((getMillis() - g_ulLastMsgTime) > ARBOTIX_TO)
    1c3c:	0b032e0f 	bleq	cd480 <__Stack_Size+0xcd080>
    1c40:	8b033d01 	blhi	d104c <__Stack_Size+0xd0c4c>
    1c44:	1c242076 	stcne	0, cr2, [r4], #-472
    1c48:	94241c24 	strtls	r1, [r4], #-3108
    1c4c:	415a415a 	cmpmi	sl, sl, asr r1
				CommanderTurnRobotOff();
    1c50:	04025e5a 	streq	r5, [r2], #-3674
		}
	}

}
    1c54:	1f010100 	svcne	0x00010100
    1c58:	02000002 	andeq	r0, r0, #2	; 0x2
    1c5c:	00008800 	andeq	r8, r0, r0, lsl #16
    1c60:	fb010200 	blx	4246a <__Stack_Size+0x4206a>
    1c64:	01000d0e 	tsteq	r0, lr, lsl #26
    1c68:	00010101 	andeq	r0, r1, r1, lsl #2
    1c6c:	00010000 	andeq	r0, r1, r0
    1c70:	74730100 	ldrbtvc	r0, [r3], #-256
    1c74:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1c78:	5f783031 	svcpl	0x00783031
    1c7c:	2f62696c 	svccs	0x0062696c
    1c80:	00637273 	rsbeq	r7, r3, r3, ror r2
    1c84:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1c88:	30316632 	eorscc	r6, r1, r2, lsr r6
    1c8c:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1c90:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
    1c94:	73000063 	movwvc	r0, #99	; 0x63
    1c98:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    1c9c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1ca0:	616c665f 	cmnvs	ip, pc, asr r6
    1ca4:	632e6873 	teqvs	lr, #7536640	; 0x730000
    1ca8:	00000100 	andeq	r0, r0, r0, lsl #2
    1cac:	336d7473 	cmncc	sp, #1929379840	; 0x73000000

extern void setupPhoenix(void);
extern void readSensors(void);


int Big_main(void) {
    1cb0:	30316632 	eorscc	r6, r1, r2, lsr r6

	// Must include this line in all programs using "cm530.h/.c"
	SysInit();
    1cb4:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
	setupPhoenix();
    1cb8:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
			TotalYBal1 = 0;
			TotalZBal1 = 0;

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1cbc:	00000200 	andeq	r0, r0, r0, lsl #4

	while (1){
		while (1) {
			//Start time
			unsigned long lTimeWaitEnd;
			lTimerStart = getMillis();
    1cc0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1cc4:	30316632 	eorscc	r6, r1, r2, lsr r6
    1cc8:	616d5f78 	smcvs	54776
#ifdef MILLIS
			PrintString("Barebones lTimerStart ");
			Printu32d(lTimerStart);
			PrintString("\n");
#endif
			DoBackgroundProcess();
    1ccc:	00682e70 	rsbeq	r2, r8, r0, ror lr
			//Read input
			CheckVoltage();        // check our voltages...
    1cd0:	73000002 	movwvc	r0, #2	; 0x2
			if (!g_fLowVoltageShutdown) {
    1cd4:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    1cd8:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
				CommanderInputController_ControlInput();
    1cdc:	616c665f 	cmnvs	ip, pc, asr r6
			}
			WriteOutputs();        // Write Outputs
			//Single leg control
			SingleLegControl();
    1ce0:	682e6873 	stmdavs	lr!, {r0, r1, r4, r5, r6, fp, sp, lr}
			DoBackgroundProcess();
    1ce4:	00000200 	andeq	r0, r0, r0, lsl #4

			//Gait
			GaitSeq();
    1ce8:	02050000 	andeq	r0, r5, #0	; 0x0

			DoBackgroundProcess();
    1cec:	080056dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, ip, lr}

			//Balance calculations
			TotalTransX = 0;     //reset values used for calculation of balance
    1cf0:	0100d603 	tsteq	r0, r3, lsl #12
    1cf4:	033d5917 	teqeq	sp, #376832	; 0x5c000
			TotalTransZ = 0;
    1cf8:	59174a0d 	ldmdbpl	r7, {r0, r2, r3, r9, fp, lr}
			TotalTransY = 0;
    1cfc:	4a0d033d 	bmi	3429f8 <__Stack_Size+0x3425f8>
    1d00:	033d5917 	teqeq	sp, #376832	; 0x5c000
			TotalXBal1 = 0;
    1d04:	3d144a0b 	fldscc	s8, [r4, #-44]
			TotalYBal1 = 0;
    1d08:	660a033d 	undefined
    1d0c:	f5035914 	undefined instruction 0xf5035914
			TotalZBal1 = 0;
    1d10:	3d143c03 	ldccc	12, cr3, [r4, #-12]

			if (g_InControlState.BalanceMode) {
    1d14:	143c0a03 	ldrtne	r0, [ip], #-2563
    1d18:	4a0b032f 	bmi	2c29dc <__Stack_Size+0x2c25dc>
    1d1c:	58090315 	stmdapl	r9, {r0, r2, r4, r8, r9}

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1d20:	153c0a03 	ldrne	r0, [ip, #-2563]!

					DoBackgroundProcess();
					BalCalcOneLeg(-LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d24:	03580a03 	cmpeq	r8, #12288	; 0x3000
    1d28:	23173c0e 	tstcs	r7, #3584	; 0xe00
    1d2c:	10035a5d 	andne	r5, r3, sp, asr sl

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs

					DoBackgroundProcess();
    1d30:	0330183c 	teqeq	r0, #3932160	; 0x3c0000
					BalCalcOneLeg(-LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d34:	0b03580b 	bleq	d7d68 <__Stack_Size+0xd7968>
    1d38:	3c0f0366 	stccc	3, cr0, [pc], {102}
    1d3c:	0b032f17 	bleq	cd9a0 <__Stack_Size+0xcd5a0>
    1d40:	6c7a154a 	cfldr64vs	mvdx1, [sl], #-296
    1d44:	03660c03 	cmneq	r6, #768	; 0x300
    1d48:	5c033c0c 	stcpl	12, cr3, [r3], {12}
    1d4c:	20240320 	eorcs	r0, r4, r0, lsr #6
    1d50:	03205c03 	teqeq	r0, #768	; 0x300
    1d54:	5c032024 	stcpl	0, cr2, [r3], {36}
    1d58:	036c5e20 	cmneq	ip, #512	; 0x200
    1d5c:	03227438 	teqeq	r2, #939524096	; 0x38000000
    1d60:	6c907fba 	ldcvs	15, cr7, [r0], {186}
    1d64:	6623036c 	strtvs	r0, [r3], -ip, ror #6
    1d68:	032e5103 	teqeq	lr, #-1073741824	; 0xc0000000
    1d6c:	222000c4 	eorcs	r0, r0, #196	; 0xc4
			TotalYBal1 = 0;
			TotalZBal1 = 0;

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1d70:	a52e6503 	strge	r6, [lr, #-1283]!
    1d74:	7def0343 	stclvc	3, cr0, [pc, #268]!
    1d78:	2009034a 	andcs	r0, r9, sl, asr #6
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
    1d7c:	032e7703 	teqeq	lr, #786432	; 0xc0000
    1d80:	03212009 	teqeq	r1, #9	; 0x9
					DoBackgroundProcess();
					BalCalcOneLeg(LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d84:	0a032e76 	beq	cd764 <__Stack_Size+0xcd364>
    1d88:	73032320 	movwvc	r2, #13088	; 0x3320
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
					DoBackgroundProcess();
    1d8c:	2e0d0320 	cdpcs	3, 0, cr0, cr13, cr0, {1}
					BalCalcOneLeg(LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d90:	1e223130 	mcrne	1, 1, r3, cr2, cr0, {1}
    1d94:	233e773e 	teqcs	lr, #16252928	; 0xf80000
    1d98:	7f8e036b 	svcvc	0x008e036b
    1d9c:	314c4282 	smlalbbcc	r4, ip, r2, r2
    1da0:	2e790335 	mrccs	3, 3, r0, cr9, cr5, {1}
    1da4:	1c243e21 	stcne	14, cr3, [r4], #-132
    1da8:	31304d3d 	teqcc	r0, sp, lsr sp
    1dac:	4e224c69 	cdpmi	12, 2, cr4, cr2, cr9, {3}
    1db0:	87314c4e 	ldrhi	r4, [r1, -lr, asr #24]!
    1db4:	f8036c23 	undefined instruction 0xf8036c23
    1db8:	0320827e 	teqeq	r0, #-536870905	; 0xe0000007
    1dbc:	313e200f 	teqcc	lr, pc
    1dc0:	032e7403 	teqeq	lr, #50331648	; 0x3000000
    1dc4:	3d212e0c 	stccc	14, cr2, [r1, #-48]!
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
    1dc8:	03207303 	teqeq	r0, #201326592	; 0xc000000
    1dcc:	1e30200d 	cdpne	0, 3, cr2, cr0, cr13, {0}
    1dd0:	1d232222 	sfmne	f2, 4, [r3, #-136]!
							LegPosZ[LegIndex] + GaitPosZ[LegIndex],
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}
				BalanceBody();
    1dd4:	2e6d0323 	cdpcs	3, 6, cr0, cr13, cr3, {1}
			}

			//Reset IKsolution indicators
			IKSolution = 0;
    1dd8:	a03c1503 	eorsge	r1, ip, r3, lsl #10
    1ddc:	03231d23 	teqeq	r3, #2240	; 0x8c0
			IKSolutionWarning = 0;
			IKSolutionError = 0;

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
    1de0:	1c032e67 	stcne	14, cr2, [r3], {103}
			}

			//Reset IKsolution indicators
			IKSolution = 0;
			IKSolutionWarning = 0;
			IKSolutionError = 0;
    1de4:	1d23a03c 	stcne	0, cr10, [r3, #-240]!
    1de8:	2e600323 	cdpcs	3, 6, cr0, cr0, cr3, {1}

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
				DoBackgroundProcess();
    1dec:	a0202303 	eorge	r2, r0, r3, lsl #6
				BodyFK(
    1df0:	31231d23 	teqcc	r3, r3, lsr #26
    1df4:	90038723 	andls	r8, r3, r3, lsr #14
    1df8:	2620827f 	undefined
    1dfc:	26207a03 	strtcs	r7, [r0], -r3, lsl #20
    1e00:	03363130 	teqeq	r6, #12	; 0xc
    1e04:	3f212078 	svccc	0x00212078
    1e08:	2330234b 	teqcs	r0, #738197505	; 0x2c000001
    1e0c:	7fbb036b 	svcvc	0x00bb036b
    1e10:	03272058 	teqeq	r7, #88	; 0x58
    1e14:	30272079 	eorcc	r2, r7, r9, ror r0
    1e18:	4c1c2431 	cfldrsmi	mvf2, [ip], {49}
    1e1c:	6b233022 	blvs	8cdeac <__Stack_Size+0x8cdaac>
    1e20:	4a7fab03 	bmi	1feca34 <__Stack_Size+0x1fec634>
    1e24:	79032720 	stmdbvc	r3, {r5, r8, r9, sl, sp}
    1e28:	32302720 	eorscc	r2, r0, #8388608	; 0x800000
    1e2c:	314c1b25 	cmpcc	ip, r5, lsr #22
    1e30:	03313230 	teqeq	r1, #3	; 0x3
    1e34:	6c233c0a 	stcvs	12, cr3, [r3], #-40
    1e38:	4a7f9303 	bmi	1fe6a4c <__Stack_Size+0x1fe664c>
    1e3c:	36314c24 	ldrtcc	r4, [r1], -r4, lsr #24
    1e40:	212e7803 	teqcs	lr, r3, lsl #16
    1e44:	3d1c243f 	cfldrscc	mvf2, [ip, #-252]
    1e48:	6931304d 	ldmdbvs	r1!, {r0, r2, r3, r6, ip, sp}
    1e4c:	233f2b23 	teqcs	pc, #35840	; 0x8c00
						+ GaitPosZ[LegIndex] - TotalTransZ,
						LegPosY[LegIndex] + g_InControlState.BodyPos.y
						+ GaitPosY[LegIndex] - TotalTransY,
						GaitRotY[LegIndex], LegIndex);

				LegIK(
    1e50:	0a03231d 	beq	caacc <__Stack_Size+0xca6cc>
    1e54:	036c232e 	cmneq	ip, #-1207959552	; 0xb8000000
    1e58:	24827fab 	strcs	r7, [r2], #4011
    1e5c:	234b314c 	movtcs	r3, #45388	; 0xb14c
    1e60:	233e3f2b 	teqcs	lr, #172	; 0xac
    1e64:	3c42036b 	mcrrcc	3, 6, r0, r2, cr11
    1e68:	25314c43 	ldrcs	r4, [r1, #-3139]!
    1e6c:	3d1b2529 	cfldr32cc	mvfx2, [fp, #-164]
    1e70:	23304d21 	teqcs	r0, #2112	; 0x840
    1e74:	0005026b 	andeq	r0, r5, fp, ror #4
    1e78:	01740101 	cmneq	r4, r1, lsl #2
    1e7c:	00020000 	andeq	r0, r2, r0
    1e80:	00000086 	andeq	r0, r0, r6, lsl #1
    1e84:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1e88:	0101000d 	tsteq	r1, sp
    1e8c:	00000101 	andeq	r0, r0, r1, lsl #2
    1e90:	00000100 	andeq	r0, r0, r0, lsl #2
    1e94:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
    1e98:	31663233 	cmncc	r6, r3, lsr r2
    1e9c:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    1ea0:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    1ea4:	73006372 	movwvc	r6, #882	; 0x372
    1ea8:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    1eac:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1eb0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1eb4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1eb8:	74730000 	ldrbtvc	r0, [r3]
    1ebc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1ec0:	5f783031 	svcpl	0x00783031
			IKSolutionWarning = 0;
			IKSolutionError = 0;

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
    1ec4:	6f697067 	svcvs	0x00697067
    1ec8:	0100632e 	tsteq	r0, lr, lsr #6
    1ecc:	74730000 	ldrbtvc	r0, [r3]
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Do IK for all Left legs
			for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) {
    1ed0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1ed4:	5f783031 	svcpl	0x00783031
				DoBackgroundProcess();
    1ed8:	65707974 	ldrbvs	r7, [r0, #-2420]!
				BodyFK(
    1edc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1ee0:	74730000 	ldrbtvc	r0, [r3]
    1ee4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1ee8:	5f783031 	svcpl	0x00783031
    1eec:	2e70616d 	rpwcssz	f6, f0, #5.0
    1ef0:	00020068 	andeq	r0, r2, r8, rrx
    1ef4:	6d747300 	ldclvs	3, cr7, [r4]
    1ef8:	31663233 	cmncc	r6, r3, lsr r2
    1efc:	675f7830 	smmlarvs	pc, r0, r8, r7
    1f00:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
    1f04:	00020068 	andeq	r0, r2, r8, rrx
    1f08:	05000000 	streq	r0, [r0]
    1f0c:	005c0402 	subseq	r0, ip, r2, lsl #8
    1f10:	00fc0308 	rscseq	r0, ip, r8, lsl #6
    1f14:	200a0301 	andcs	r0, sl, r1, lsl #6
    1f18:	03200c03 	teqeq	r0, #768	; 0x300
    1f1c:	03332076 	teqeq	r3, #118	; 0x76
    1f20:	33352e79 	teqcc	r5, #1936	; 0x790
    1f24:	032e6a03 	teqeq	lr, #12288	; 0x3000
    1f28:	32222016 	eorcc	r2, r2, #22	; 0x16
    1f2c:	2132303e 	teqcs	r2, lr, lsr r0
    1f30:	23312b31 	teqcs	r1, #50176	; 0xc400
    1f34:	28207a03 	stmdacs	r0!, {r0, r1, r9, fp, ip, sp, lr}
    1f38:	0322273a 	teqeq	r2, #15204352	; 0xe80000
    1f3c:	1f033c66 	svcne	0x00033c66
    1f40:	3130253c 	teqcc	r0, ip, lsr r5
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z
						+ GaitPosZ[LegIndex] - TotalTransZ,
						LegPosY[LegIndex] + g_InControlState.BodyPos.y
						+ GaitPosY[LegIndex] - TotalTransY,
						GaitRotY[LegIndex], LegIndex);
				LegIK(
    1f44:	21322f5a 	teqcs	r2, sl, asr pc
    1f48:	23312b31 	teqcs	r1, #50176	; 0xc400
    1f4c:	28207a03 	stmdacs	r0!, {r0, r1, r9, fp, ip, sp, lr}
    1f50:	0322253a 	teqeq	r2, #243269632	; 0xe800000
    1f54:	1b033c69 	blne	d1100 <__Stack_Size+0xd0d00>
    1f58:	0b03223c 	bleq	ca850 <__Stack_Size+0xca450>
    1f5c:	2f3d143c 	svccs	0x003d143c
    1f60:	200c032f 	andcs	r0, ip, pc, lsr #6
    1f64:	58090319 	stmdapl	r9, {r0, r3, r4, r8, r9}
    1f68:	16200a03 	strtne	r0, [r0], -r3, lsl #20
    1f6c:	2e0c032f 	cdpcs	3, 0, cr0, cr12, cr15, {1}
    1f70:	58090319 	stmdapl	r9, {r0, r3, r4, r8, r9}
    1f74:	16200a03 	strtne	r0, [r0], -r3, lsl #20
    1f78:	2e0d032f 	cdpcs	3, 0, cr0, cr13, cr15, {1}
    1f7c:	0d032117 	stfeqs	f2, [r3, #-92]
    1f80:	03211720 	teqeq	r1, #8388608	; 0x800000
    1f84:	22182010 	andscs	r2, r8, #16	; 0x10
    1f88:	0c032232 	sfmeq	f2, 4, [r3], {50}
    1f8c:	0321162e 	teqeq	r1, #48234496	; 0x2e00000
    1f90:	3019200d 	andscc	r2, r9, sp
    1f94:	22222222 	eorcs	r2, r2, #536870914	; 0x20000002
    1f98:	200f0321 	andcs	r0, pc, r1, lsr #6
    1f9c:	312c3019 	teqcc	ip, r9, lsl r0
    1fa0:	2f22302d 	svccs	0x0022302d
    1fa4:	163c0b03 	ldrtne	r0, [ip], -r3, lsl #22
    1fa8:	4a26032f 	bmi	982c6c <__Stack_Size+0x98286c>
    1fac:	2c200c03 	stccs	12, cr0, [r0], #-12
    1fb0:	27207603 	strcs	r7, [r0, -r3, lsl #12]!
    1fb4:	33292223 	teqcc	r9, #805306370	; 0x30000002
    1fb8:	4c2f1f23 	stcmi	15, cr1, [pc], #-140
    1fbc:	31676b3f 	cmncc	r7, pc, lsr fp
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Do IK for all Left legs
			for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) {
    1fc0:	032f5b22 	teqeq	pc, #34816	; 0x8800
    1fc4:	3e274a0f 	fmulscc	s8, s14, s30
    1fc8:	599f1f2f 	ldmibpl	pc, {r0, r1, r2, r3, r5, r8, r9, sl, fp, ip}
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Check mechanical limits
			CheckAngles();
    1fcc:	4a7ca703 	bmi	1f2bbe0 <__Stack_Size+0x1f2b7e0>

			//Drive Servos
			if (g_InControlState.fRobotOn) {
    1fd0:	2f212d21 	svccs	0x00212d21
    1fd4:	2e45034b 	cdpcs	3, 4, cr0, cr5, cr11, {2}
    1fd8:	1c241c24 	stcne	12, cr1, [r4], #-144
				if (g_InControlState.fRobotOn && !g_InControlState.fPrev_RobotOn) {
					// MSound(3, 60, 2000, 80, 2250, 100, 2500);
					Buzzed(30, 2000);
    1fdc:	4ba10824 	blmi	fe844074 <SCS_BASE+0x1e836074>
    1fe0:	4b324b32 	blmi	c94cb0 <__Stack_Size+0xc948b0>
    1fe4:	4b324b32 	blmi	c94cb4 <__Stack_Size+0xc948b4>
					Buzzed(80, 2250);
    1fe8:	59324b32 	ldmdbpl	r2!, {r1, r4, r5, r8, r9, fp, lr}
    1fec:	0006025e 	andeq	r0, r6, lr, asr r2
					Buzzed(100, 2500);
    1ff0:	01a60101 	undefined instruction 0x01a60101
    1ff4:	00020000 	andeq	r0, r2, r0
    1ff8:	00000086 	andeq	r0, r0, r6, lsl #1

				}

				//Calculate Servo Move time
				if ((abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
    1ffc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    2000:	0101000d 	tsteq	r1, sp
    2004:	00000101 	andeq	r0, r0, r1, lsl #2
    2008:	00000100 	andeq	r0, r0, r0, lsl #2
    200c:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
    2010:	31663233 	cmncc	r6, r3, lsr r2
    2014:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    2018:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    201c:	73006372 	movwvc	r6, #882	; 0x372
    2020:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    2024:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
						|| (abs(g_InControlState.TravelLength.z) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.y*2) > cTravelDeadZone)) {
					ServoMoveTime = g_InControlState.gaitCur.NomGaitSpeed
    2028:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    202c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    2030:	74730000 	ldrbtvc	r0, [r3]
    2034:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2038:	5f783031 	svcpl	0x00783031
							+ (g_InControlState.InputTimeDelay * 2)
							+ g_InControlState.SpeedControl;

					//Add aditional delay when Balance mode is on
					if (g_InControlState.BalanceMode)
    203c:	6369766e 	cmnvs	r9, #115343360	; 0x6e00000

				//Calculate Servo Move time
				if ((abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.z) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.y*2) > cTravelDeadZone)) {
					ServoMoveTime = g_InControlState.gaitCur.NomGaitSpeed
    2040:	0100632e 	tsteq	r0, lr, lsr #6
							+ (g_InControlState.InputTimeDelay * 2)
							+ g_InControlState.SpeedControl;

					//Add aditional delay when Balance mode is on
					if (g_InControlState.BalanceMode)
						ServoMoveTime = ServoMoveTime + BALANCE_DELAY;
    2044:	74730000 	ldrbtvc	r0, [r3]
    2048:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
				} else
					//Movement speed excl. Walking
					ServoMoveTime = 200 + g_InControlState.SpeedControl;
    204c:	5f783031 	svcpl	0x00783031
    2050:	65707974 	ldrbvs	r7, [r0, #-2420]!
    2054:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000

				// note we broke up the servo driver into start/commit that way we can output all of the servo information
				// before we wait and only have the termination information to output after the wait.  That way we hopefully
				// be more accurate with our timings...
				DoBackgroundProcess();
    2058:	74730000 	ldrbtvc	r0, [r3]
				StartUpdateServos();
    205c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6

				// See if we need to sync our processor with the servo driver while walking to ensure the prev is completed
				//before sending the next one

				// Finding any incident of GaitPos/Rot <>0:
				for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    2060:	5f783031 	svcpl	0x00783031
					if ((GaitPosX[LegIndex] > cGPlimit)
    2064:	2e70616d 	rpwcssz	f6, f0, #5.0
    2068:	00020068 	andeq	r0, r2, r8, rrx
    206c:	6d747300 	ldclvs	3, cr7, [r4]
    2070:	31663233 	cmncc	r6, r3, lsr r2
    2074:	6e5f7830 	mrcvs	8, 2, r7, cr15, cr0, {1}
    2078:	2e636976 	mcrcs	9, 3, r6, cr3, cr6, {3}
    207c:	00020068 	andeq	r0, r2, r8, rrx
    2080:	05000000 	streq	r0, [r0]
    2084:	005e8c02 	subseq	r8, lr, r2, lsl #24
    2088:	01240308 	teqeq	r4, r8, lsl #6
    208c:	352d3d15 	strcc	r3, [sp, #-3349]!
    2090:	2f207a03 	svccs	0x00207a03
    2094:	241c322f 	ldrcs	r3, [ip], #-559
    2098:	242c302c 	strtcs	r3, [ip], #-44
    209c:	153c0b03 	ldrne	r0, [ip, #-2819]!
							|| (GaitPosZ[LegIndex] > cGPlimit)
							|| (GaitPosZ[LegIndex] < -cGPlimit)
							|| (GaitRotY[LegIndex] > cGPlimit)
							|| (GaitRotY[LegIndex] < -cGPlimit)) {

						bExtraCycle = g_InControlState.gaitCur.NrLiftedPos + 1;	//For making sure that we are using timed move until all legs are down
    20a0:	2f211e3e 	svccs	0x00211e3e
    20a4:	3e232121 	sufccsp	f2, f3, f1
    20a8:	21212f21 	teqcs	r1, r1, lsr #30

				// See if we need to sync our processor with the servo driver while walking to ensure the prev is completed
				//before sending the next one

				// Finding any incident of GaitPos/Rot <>0:
				for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    20ac:	17661603 	strbne	r1, [r6, -r3, lsl #12]!
    20b0:	4a0d0367 	bmi	342e54 <__Stack_Size+0x342a54>

						bExtraCycle = g_InControlState.gaitCur.NrLiftedPos + 1;	//For making sure that we are using timed move until all legs are down
						break;
					}
				}
				if (bExtraCycle > 0) {
    20b4:	3f200a03 	svccc	0x00200a03
					bExtraCycle--;
    20b8:	0a031c24 	beq	c9150 <__Stack_Size+0xc8d50>
    20bc:	20760320 	rsbscs	r0, r6, r0, lsr #6
					fWalking = !(bExtraCycle == 0);
    20c0:	2b3f3d5c 	blcs	fd1638 <__Stack_Size+0xfd1238>
    20c4:	2b241f31 	blcs	909d90 <__Stack_Size+0x909990>

					//Get endtime and calculate wait time
					lTimeWaitEnd = lTimerStart + PrevServoMoveTime;
    20c8:	301e6a22 	andscc	r6, lr, r2, lsr #20
    20cc:	93883122 	orrls	r3, r8, #-2147483640	; 0x80000008
    20d0:	14580b03 	ldrbne	r0, [r8], #-2819
					PrintString("\n");
#endif
					//DebugWrite(A1, HIGH);
					do {
						// Wait the appropriate time, call any background process while waiting...
						DoBackgroundProcess();
    20d4:	2121212f 	teqcs	r1, pc, lsr #2
					} while (getMillis() < lTimeWaitEnd);
    20d8:	2000d703 	andcs	sp, r0, r3, lsl #14
    20dc:	0b036713 	bleq	dbd30 <__Stack_Size+0xdb930>
					PrintString("\n");
#endif

				}
				// Only do commit if we are actually doing something...
				CommitServoDriver(ServoMoveTime);
    20e0:	034c1966 	movteq	r1, #51558	; 0xc966
    20e4:	0a039e09 	beq	e9910 <__Stack_Size+0xe9510>
    20e8:	032f164a 	teqeq	pc, #77594624	; 0x4a00000
			} else {
				//Turn the bot off - May need to add ajust here...
				if (g_InControlState.fPrev_RobotOn || (AllDown = 0)) {
    20ec:	91164a0a 	tstls	r6, sl, lsl #20
					PrintString("Barebones lTimeWaitEnd-Millis  ");
					Printu32d(getMillis);
					PrintString("\n");
#endif
				} else {
					FreeServos();
    20f0:	133c0b03 	teqne	ip, #3072	; 0xc00
    20f4:	4a0b034b 	bmi	2c2e28 <__Stack_Size+0x2c2a28>
				// Only do commit if we are actually doing something...
				CommitServoDriver(ServoMoveTime);
			} else {
				//Turn the bot off - May need to add ajust here...
				if (g_InControlState.fPrev_RobotOn || (AllDown = 0)) {
					ServoMoveTime = 600;
    20f8:	09034c19 	stmdbeq	r3, {r0, r3, r4, sl, fp, lr}
    20fc:	4a0b039e 	bmi	2c2f7c <__Stack_Size+0x2c2b7c>
					StartUpdateServos();
    2100:	10032f13 	andne	r2, r3, r3, lsl pc
					CommitServoDriver(ServoMoveTime);
    2104:	0375174a 	cmneq	r5, #19398656	; 0x1280000
					//MSound(3, 100, 2500, 80, 2250, 60, 2000);
					Buzzed(100, 2500);
    2108:	3d133c0a 	ldccc	12, cr3, [r3, #-40]
    210c:	13580a03 	cmpne	r8, #12288	; 0x3000
    2110:	5811033d 	ldmdapl	r1, {r0, r2, r3, r4, r5, r8, r9}
					Buzzed(80, 2250);
    2114:	5a5c2217 	bpl	170a978 <__Stack_Size+0x170a578>
    2118:	193c1103 	ldmdbne	ip!, {r0, r1, r8, ip}
					Buzzed(60, 2000);
    211c:	5a5c225a 	bpl	170aa8c <__Stack_Size+0x170a68c>
    2120:	034a1803 	movteq	r1, #43011	; 0xa803
    2124:	4b782009 	blmi	1e0a150 <__Stack_Size+0x1e09d50>

					//lTimeWaitEnd = getMillis() + 600; // setup to process background stuff while we wait...
					lTimeWaitEnd = getMillis() + 600; // setup to process background stuff while we wait...
    2128:	033f3169 	teqeq	pc, #1073741850	; 0x4000001a
    212c:	03282e79 	teqeq	r8, #1936	; 0x790
					Printu32d(lTimeWaitEnd);
					PrintString("\n");
#endif
					do {
						// Wait the appropriate time, call any background process while waiting...
						DoBackgroundProcess();
    2130:	7525207a 	strvc	r2, [r5, #-122]!
					} while (getMillis() < lTimeWaitEnd);
    2134:	4a100359 	bmi	402ea0 <__Stack_Size+0x402aa0>
    2138:	034c2319 	movteq	r2, #49945	; 0xc319
				} else {
					FreeServos();
				}

				// Allow the Servo driver to do stuff durint our idle time
				IdleTime();
    213c:	0f03820b 	svceq	0x0003820b
				mDelay(20); // give a pause between times we call if nothing is happening
    2140:	0109033c 	tsteq	r9, ip, lsr r3
			}
			PrevServoMoveTime = ServoMoveTime;
    2144:	4a0e0383 	bmi	382f58 <__Stack_Size+0x382b58>
    2148:	91010903 	tstls	r1, r3, lsl #18

			//Store previous g_InControlState.fRobotOn State
			if (g_InControlState.fRobotOn)
    214c:	033c1403 	teqeq	ip, #50331648	; 0x3000000
    2150:	035a010a 	cmpeq	sl, #-2147483646	; 0x80000002
				g_InControlState.fPrev_RobotOn = 1;
			else
				g_InControlState.fPrev_RobotOn = 0;
    2154:	1103820b 	tstne	r3, fp, lsl #4
    2158:	3e23193c 	mcrcc	9, 1, r1, cr3, cr12, {1}
    215c:	7803303e 	stmdavc	r3, {r1, r2, r3, r4, r5, ip, sp}
    2160:	78032858 	stmdavc	r3, {r3, r4, r6, fp, sp}
    2164:	224b3620 	subcs	r3, fp, #33554432	; 0x2000000
    2168:	03314140 	teqeq	r1, #16	; 0x10
    216c:	09033c0f 	stmdbeq	r3, {r0, r1, r2, r3, sl, fp, ip, sp}
    2170:	1c323001 	ldcne	0, cr3, [r2], #-4
    2174:	8d032324 	stchi	3, cr2, [r3, #-144]
    2178:	2f2f3c7c 	svccs	0x002f3c7c
    217c:	242e6f03 	strtcs	r6, [lr], #-3843
    2180:	032f241c 	teqeq	pc, #469762048	; 0x1c000000
    2184:	2f2f3c6d 	svccs	0x002f3c6d
    2188:	2f2e7203 	svccs	0x002e7203
    218c:	2e72032f 	cdpcs	3, 7, cr0, cr2, cr15, {1}
    2190:	72032f2f 	andvc	r2, r3, #188	; 0xbc
    2194:	022f2f2e 	eoreq	r2, pc, #184	; 0xb8
    2198:	01010002 	tsteq	r1, r2
    219c:	000000d2 	ldrdeq	r0, [r0], -r2
    21a0:	00710002 	rsbseq	r0, r1, r2
    21a4:	01020000 	tsteq	r2, r0
    21a8:	000d0efb 	strdeq	r0, [sp], -fp
    21ac:	01010101 	tsteq	r1, r1, lsl #2
    21b0:	01000000 	tsteq	r0, r0
    21b4:	73010000 	movwvc	r0, #4096	; 0x1000
    21b8:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    21bc:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    21c0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    21c4:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    21c8:	6d747300 	ldclvs	3, cr7, [r4]
    21cc:	31663233 	cmncc	r6, r3, lsr r2
    21d0:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    21d4:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
    21d8:	0000636e 	andeq	r6, r0, lr, ror #6
    21dc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    21e0:	30316632 	eorscc	r6, r1, r2, lsr r6
    21e4:	77705f78 	undefined
    21e8:	00632e72 	rsbeq	r2, r3, r2, ror lr
    21ec:	73000001 	movwvc	r0, #1	; 0x1
    21f0:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    21f4:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    21f8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    21fc:	00682e65 	rsbeq	r2, r8, r5, ror #28
    2200:	73000002 	movwvc	r0, #2	; 0x2
    2204:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    2208:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    220c:	70616d5f 	rsbvc	r6, r1, pc, asr sp
    2210:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2214:	00000000 	andeq	r0, r0, r0
    2218:	62100205 	andsvs	r0, r0, #1342177280	; 0x50000000
    221c:	d1030800 	tstle	r3, r0, lsl #16
    2220:	2f160100 	svccs	0x00160100
    2224:	164a0b03 	strbne	r0, [sl], -r3, lsl #22
    2228:	4a14032f 	bmi	502eec <__Stack_Size+0x502aec>
    222c:	23313118 	teqcs	r1, #6	; 0x6
    2230:	4a0b0321 	bmi	2c2ebc <__Stack_Size+0x2c2abc>
    2234:	d8032f16 	stmdale	r3, {r1, r2, r4, r8, r9, sl, fp, sp}
    2238:	03184a00 	tsteq	r8, #0	; 0x0
    223c:	0d03660b 	stceq	6, cr6, [r3, #-44]
    2240:	0359164a 	cmpeq	r9, #77594624	; 0x4a00000
    2244:	1e143c43 	cdpne	12, 1, cr3, cr4, cr3, {2}
    2248:	3f221e22 	svccc	0x00221e22
    224c:	032f934d 	teqeq	pc, #872415233	; 0x34000001
    2250:	031a4a49 	tsteq	sl, #299008	; 0x49000
    2254:	03282078 	teqeq	r8, #120	; 0x78
    2258:	0b032078 	bleq	ca440 <__Stack_Size+0xca040>
    225c:	23233120 	teqcs	r3, #8	; 0x8
    2260:	233f1d69 	teqcs	pc, #6720	; 0x1a40
    2264:	f5033041 	undefined instruction 0xf5033041
    2268:	67214a7e 	undefined
    226c:	0001024b 	andeq	r0, r1, fp, asr #4
    2270:	01b40101 	undefined instruction 0x01b40101
    2274:	00020000 	andeq	r0, r2, r0
    2278:	00000084 	andeq	r0, r0, r4, lsl #1
    227c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    2280:	0101000d 	tsteq	r1, sp
    2284:	00000101 	andeq	r0, r0, r1, lsl #2
    2288:	00000100 	andeq	r0, r0, r0, lsl #2
    228c:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
    2290:	31663233 	cmncc	r6, r3, lsr r2
    2294:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    2298:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    229c:	73006372 	movwvc	r6, #882	; 0x372
    22a0:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    22a4:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    22a8:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    22ac:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    22b0:	74730000 	ldrbtvc	r0, [r3]
    22b4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    22b8:	5f783031 	svcpl	0x00783031
    22bc:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
    22c0:	00010063 	andeq	r0, r1, r3, rrx
    22c4:	6d747300 	ldclvs	3, cr7, [r4]
    22c8:	31663233 	cmncc	r6, r3, lsr r2
    22cc:	745f7830 	ldrbvc	r7, [pc], #2096	; 22d4 <__Stack_Size+0x1ed4>
    22d0:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    22d4:	00020068 	andeq	r0, r2, r8, rrx
    22d8:	6d747300 	ldclvs	3, cr7, [r4]
    22dc:	31663233 	cmncc	r6, r3, lsr r2
    22e0:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]
    22e4:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
    22e8:	00000200 	andeq	r0, r0, r0, lsl #4
    22ec:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    22f0:	30316632 	eorscc	r6, r1, r2, lsr r6
    22f4:	63725f78 	cmnvs	r2, #480	; 0x1e0
    22f8:	00682e63 	rsbeq	r2, r8, r3, ror #28
    22fc:	00000002 	andeq	r0, r0, r2
    2300:	f0020500 	undefined instruction 0xf0020500
    2304:	03080062 	movweq	r0, #32866	; 0x8062
    2308:	140100fc 	strne	r0, [r1], #-252
    230c:	4d695b5b 	fstmdbxmi	r9!, {d21-d65}
    2310:	11032f4d 	tstne	r3, sp, asr #30
    2314:	03261866 	teqeq	r6, #6684672	; 0x660000
    2318:	4d4d2e7a 	stclmi	14, cr2, [sp, #-488]
    231c:	0350415c 	cmpeq	r0, #23	; 0x17
    2320:	03213c0c 	teqeq	r1, #3072	; 0xc00
    2324:	032006a3 	teqeq	r0, #170917888	; 0xa300000
    2328:	032079dd 	teqeq	r0, #3620864	; 0x374000
    232c:	032006a3 	teqeq	r0, #170917888	; 0xa300000
    2330:	2f2079e5 	svccs	0x002079e5
    2334:	9a03212d 	bls	ca7f0 <__Stack_Size+0xca3f0>
    2338:	f3035806 	vsub.i8	d5, d3, d6
    233c:	0c035879 	stceq	8, cr5, [r3], {121}
    2340:	3131184a 	teqcc	r1, sl, asr #16
    2344:	0d032131 	stfeqs	f2, [r3, #-196]
    2348:	032f163c 	teqeq	pc, #62914560	; 0x3c00000
    234c:	34194a14 	ldrcc	r4, [r9], #-2580
    2350:	0c03214d 	stfeqs	f2, [r3], {77}
    2354:	032f163c 	teqeq	pc, #62914560	; 0x3c00000
    2358:	31184a0e 	tstcc	r8, lr, lsl #20
    235c:	03212331 	teqeq	r1, #-1006632960	; 0xc4000000
    2360:	4b134a0e 	blmi	4d4ba0 <__Stack_Size+0x4d47a0>
    2364:	184a1503 	stmdane	sl, {r0, r1, r8, sl, ip}^
    2368:	21233131 	teqcs	r3, r1, lsr r1
    236c:	184a1103 	stmdane	sl, {r0, r1, r8, ip}^
    2370:	21233131 	teqcs	r3, r1, lsr r1
    2374:	184a1103 	stmdane	sl, {r0, r1, r8, ip}^
    2378:	21313131 	teqcs	r1, r1, lsr r1
    237c:	173c1303 	ldrne	r1, [ip, -r3, lsl #6]!
    2380:	035a5d23 	cmpeq	sl, #2240	; 0x8c0
    2384:	2f163c10 	svccs	0x00163c10
    2388:	184a1003 	stmdane	sl, {r0, r1, ip}^
    238c:	21233131 	teqcs	r3, r1, lsr r1
    2390:	184a0f03 	stmdane	sl, {r0, r1, r8, r9, sl, fp}^
    2394:	207a0334 	rsbscs	r0, sl, r4, lsr r3
    2398:	032a2723 	teqeq	sl, #9175040	; 0x8c0000
    239c:	03343c09 	teqeq	r4, #2304	; 0x900
    23a0:	2f164a0c 	svccs	0x00164a0c
    23a4:	174a1103 	strbne	r1, [sl, -r3, lsl #2]
    23a8:	4a0d034b 	bmi	3430dc <__Stack_Size+0x342cdc>
    23ac:	0b032f16 	bleq	ce00c <__Stack_Size+0xcdc0c>
    23b0:	241c164a 	ldrcs	r1, [ip], #-1610
    23b4:	660c0322 	strvs	r0, [ip], -r2, lsr #6
    23b8:	30224c21 	eorcc	r4, r2, r1, lsr #24
    23bc:	7869273a 	stmdavc	r9!, {r1, r3, r4, r5, r8, r9, sl, sp}^
    23c0:	7a03267a 	bvc	cbdb0 <__Stack_Size+0xcb9b0>
    23c4:	1b253420 	blne	94f44c <__Stack_Size+0x94f04c>
    23c8:	69417733 	stmdbvs	r1, {r0, r1, r4, r5, r8, r9, sl, ip, sp, lr}^
    23cc:	78033641 	stmdavc	r3, {r0, r6, r9, sl, ip, sp}
    23d0:	67413f20 	strbvs	r3, [r1, -r0, lsr #30]
    23d4:	17901503 	ldrne	r1, [r0, r3, lsl #10]
    23d8:	035a5c22 	cmpeq	sl, #8704	; 0x2200
    23dc:	22173c14 	andscs	r3, r7, #5120	; 0x1400
    23e0:	15035a5c 	strne	r5, [r3, #-2652]
    23e4:	5c22173c 	stcpl	7, cr1, [r2], #-240
    23e8:	3c13035a 	ldccc	3, cr0, [r3], {90}
    23ec:	5a5c2217 	bpl	170ac50 <__Stack_Size+0x170a850>
    23f0:	173c1403 	ldrne	r1, [ip, -r3, lsl #8]!
    23f4:	035a5c22 	cmpeq	sl, #8704	; 0x2200
    23f8:	2f163c0b 	svccs	0x00163c0b
    23fc:	164a0b03 	strbne	r0, [sl], -r3, lsl #22
    2400:	4a10032f 	bmi	4030c4 <__Stack_Size+0x402cc4>
    2404:	16032f17 	undefined
    2408:	0109034a 	tsteq	r9, sl, asr #6
    240c:	30923022 	addscc	r3, r2, r2, lsr #32
    2410:	82110394 	andshi	r0, r1, #1342177282	; 0x50000002
    2414:	143c0d03 	ldrtne	r0, [ip], #-3331
    2418:	3c110359 	ldccc	3, cr0, [r1], {89}
    241c:	660b0319 	undefined
    2420:	184a1103 	stmdane	sl, {r0, r1, r8, ip}^
    2424:	0004022f 	andeq	r0, r4, pc, lsr #4
    2428:	00b90101 	adcseq	r0, r9, r1, lsl #2
    242c:	00020000 	andeq	r0, r2, r0
    2430:	00000075 	andeq	r0, r0, r5, ror r0
    2434:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    2438:	0101000d 	tsteq	r1, sp
    243c:	00000101 	andeq	r0, r0, r1, lsl #2
    2440:	00000100 	andeq	r0, r0, r0, lsl #2
    2444:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
    2448:	31663233 	cmncc	r6, r3, lsr r2
    244c:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    2450:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    2454:	73006372 	movwvc	r6, #882	; 0x372
    2458:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    245c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    2460:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    2464:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    2468:	74730000 	ldrbtvc	r0, [r3]
    246c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2470:	5f783031 	svcpl	0x00783031
    2474:	74737973 	ldrbtvc	r7, [r3], #-2419
    2478:	2e6b6369 	cdpcs	3, 6, cr6, cr11, cr9, {3}
    247c:	00010063 	andeq	r0, r1, r3, rrx
    2480:	6d747300 	ldclvs	3, cr7, [r4]
    2484:	31663233 	cmncc	r6, r3, lsr r2
    2488:	745f7830 	ldrbvc	r7, [pc], #2096	; 2490 <__Stack_Size+0x2090>
    248c:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    2490:	00020068 	andeq	r0, r2, r8, rrx
    2494:	6d747300 	ldclvs	3, cr7, [r4]
    2498:	31663233 	cmncc	r6, r3, lsr r2
    249c:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]
    24a0:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
    24a4:	00000200 	andeq	r0, r0, r0, lsl #4
    24a8:	02050000 	andeq	r0, r5, #0	; 0x0
    24ac:	08006694 	stmdaeq	r0, {r2, r4, r7, r9, sl, sp, lr}
    24b0:	16012b03 	strne	r2, [r1], -r3, lsl #22
    24b4:	035a4e30 	cmpeq	sl, #768	; 0x300
    24b8:	2f163c0b 	svccs	0x00163c0b
    24bc:	164a0e03 	strbne	r0, [sl], -r3, lsl #28
    24c0:	6a3e4c30 	bvs	f95588 <__Stack_Size+0xf95188>
    24c4:	4a0b033e 	bmi	2c31c4 <__Stack_Size+0x2c2dc4>
    24c8:	5a5c2216 	bpl	170ad28 <__Stack_Size+0x170a928>
    24cc:	133c0a03 	teqne	ip, #12288	; 0x3000
    24d0:	4a0e032f 	bmi	383194 <__Stack_Size+0x382d94>
    24d4:	03010a03 	movweq	r0, #6659	; 0x1a03
    24d8:	0a032e76 	beq	cdeb8 <__Stack_Size+0xcdab8>
    24dc:	03782220 	cmneq	r8, #2	; 0x2
    24e0:	0402580c 	streq	r5, [r2], #-2060
    24e4:	fa010100 	blx	428ec <__Stack_Size+0x424ec>
    24e8:	02000001 	andeq	r0, r0, #1	; 0x1
    24ec:	00009b00 	andeq	r9, r0, r0, lsl #22
    24f0:	fb010200 	blx	42cfa <__Stack_Size+0x428fa>
    24f4:	01000d0e 	tsteq	r0, lr, lsl #26
    24f8:	00010101 	andeq	r0, r1, r1, lsl #2
    24fc:	00010000 	andeq	r0, r1, r0
    2500:	74730100 	ldrbtvc	r0, [r3], #-256
    2504:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2508:	5f783031 	svcpl	0x00783031
    250c:	2f62696c 	svccs	0x0062696c
    2510:	00637273 	rsbeq	r7, r3, r3, ror r2
    2514:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2518:	30316632 	eorscc	r6, r1, r2, lsr r6
    251c:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2520:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
    2524:	73000063 	movwvc	r0, #99	; 0x63
    2528:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    252c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    2530:	6173755f 	cmnvs	r3, pc, asr r5
    2534:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
    2538:	00000100 	andeq	r0, r0, r0, lsl #2
    253c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2540:	30316632 	eorscc	r6, r1, r2, lsr r6
    2544:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2548:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    254c:	00000200 	andeq	r0, r0, r0, lsl #4
    2550:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2554:	30316632 	eorscc	r6, r1, r2, lsr r6
    2558:	616d5f78 	smcvs	54776
    255c:	00682e70 	rsbeq	r2, r8, r0, ror lr
    2560:	73000002 	movwvc	r0, #2	; 0x2
    2564:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    2568:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    256c:	6173755f 	cmnvs	r3, pc, asr r5
    2570:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
    2574:	00000200 	andeq	r0, r0, r0, lsl #4
    2578:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    257c:	30316632 	eorscc	r6, r1, r2, lsr r6
    2580:	63725f78 	cmnvs	r2, #480	; 0x1e0
    2584:	00682e63 	rsbeq	r2, r8, r3, ror #28
    2588:	00000002 	andeq	r0, r0, r2
    258c:	38020500 	stmdacc	r2, {r8, sl}
    2590:	03080067 	movweq	r0, #32871	; 0x8067
    2594:	140101e8 	strne	r0, [r1], #-488
    2598:	21213d3d 	teqcs	r1, sp, lsr sp
    259c:	0f033d3d 	svceq	0x00033d3d
    25a0:	0118032e 	tsteq	r8, lr, lsr #6
    25a4:	033c7303 	teqeq	ip, #201326592	; 0xc000000
    25a8:	7503200d 	strvc	r2, [r3, #-13]
    25ac:	2e0b0358 	mcrcs	3, 0, r0, cr11, cr8, {2}
    25b0:	032e7503 	teqeq	lr, #12582912	; 0xc00000
    25b4:	7503200b 	strvc	r2, [r3, #-11]
    25b8:	200b0320 	andcs	r0, fp, r0, lsr #6
    25bc:	200b033d 	andcs	r0, fp, sp, lsr r3
    25c0:	21213d14 	teqcs	r1, r4, lsl sp
    25c4:	2e0e0321 	cdpcs	3, 0, cr0, cr14, cr1, {1}
    25c8:	685d2317 	ldmdavs	sp, {r0, r1, r2, r4, r8, r9, sp}^
    25cc:	032e1c03 	teqeq	lr, #768	; 0x300
    25d0:	0341010d 	movteq	r0, #4365	; 0x110d
    25d4:	12033c6e 	andne	r3, r3, #28160	; 0x6e00
    25d8:	6c033020 	stcvs	0, cr3, [r3], {32}
    25dc:	2014032e 	andscs	r0, r4, lr, lsr #6
    25e0:	323e3022 	eorscc	r3, lr, #34	; 0x22
    25e4:	4c402222 	sfmmi	f2, 2, [r0], {34}
    25e8:	183c1303 	ldmdane	ip!, {r0, r1, r8, r9, ip}
    25ec:	035a5e24 	cmpeq	sl, #576	; 0x240
    25f0:	6818200d 	ldmdavs	r8, {r0, r2, r3, sp}
    25f4:	2e10034b 	cdpcs	3, 1, cr0, cr0, cr11, {2}
    25f8:	034b6717 	movteq	r6, #46871	; 0xb717
    25fc:	23172e0e 	tstcs	r7, #224	; 0xe0
    2600:	1103685d 	tstne	r3, sp, asr r8
    2604:	4b67172e 	blmi	19c82c4 <__Stack_Size+0x19c7ec4>
    2608:	172e0e03 	strne	r0, [lr, -r3, lsl #28]!
    260c:	03685d23 	cmneq	r8, #2240	; 0x8c0
    2610:	3d182e0d 	ldccc	14, cr2, [r8, #-52]
    2614:	17200c03 	strne	r0, [r0, -r3, lsl #24]!
    2618:	200c033d 	andcs	r0, ip, sp, lsr r3
    261c:	0d035917 	stceq	9, cr5, [r3, #-92]
    2620:	593e1720 	ldmdbpl	lr!, {r5, r8, r9, sl, ip}
    2624:	172e0e03 	strne	r0, [lr, -r3, lsl #28]!
    2628:	0e034b4c 	fnmacdeq	d4, d3, d12
    262c:	5d23172e 	stcpl	7, cr1, [r3, #-184]!
    2630:	2e0e0368 	cdpcs	3, 0, cr0, cr14, cr8, {3}
    2634:	685d2317 	ldmdavs	sp, {r0, r1, r2, r4, r8, r9, sp}^
    2638:	172e0e03 	strne	r0, [lr, -r3, lsl #28]!
    263c:	03685d23 	cmneq	r8, #2240	; 0x8c0
    2640:	67172e10 	undefined
    2644:	2e0e034b 	cdpcs	3, 0, cr0, cr14, cr11, {2}
    2648:	685d2317 	ldmdavs	sp, {r0, r1, r2, r4, r8, r9, sp}^
    264c:	1a2e1903 	bne	b88a60 <__Stack_Size+0xb88660>
    2650:	03580903 	cmpeq	r8, #49152	; 0xc000
    2654:	4b182023 	blmi	60a6e8 <__Stack_Size+0x60a2e8>
    2658:	032e1a03 	teqeq	lr, #12288	; 0x3000
    265c:	5a41010a 	bpl	1042a8c <__Stack_Size+0x104268c>
    2660:	30242c30 	eorcc	r2, r4, r0, lsr ip
    2664:	303d4f32 	eorscc	r4, sp, r2, lsr pc
    2668:	039e0a03 	orrseq	r0, lr, #12288	; 0x3000
    266c:	0b032e23 	bleq	cdf00 <__Stack_Size+0xcdb00>
    2670:	a6037501 	strge	r7, [r3], -r1, lsl #10
    2674:	15032079 	strne	r2, [r3, #-121]
    2678:	20090301 	andcs	r0, r9, r1, lsl #6
    267c:	51207903 	teqpl	r0, r3, lsl #18
    2680:	205f0331 	subscs	r0, pc, r1, lsr r3
    2684:	03202d03 	teqeq	r0, #192	; 0xc0
    2688:	2d032053 	stccs	0, cr2, [r3, #-332]
    268c:	20760320 	rsbscs	r0, r6, r0, lsr #6
    2690:	032e0a03 	teqeq	lr, #12288	; 0x3000
    2694:	0a032e76 	beq	ce074 <__Stack_Size+0xcdc74>
    2698:	2076032e 	rsbscs	r0, r6, lr, lsr #6
    269c:	3f2e0a03 	svccc	0x002e0a03
    26a0:	03200903 	teqeq	r0, #49152	; 0xc000
    26a4:	4e032079 	mcrmi	0, 0, r2, cr3, cr9, {3}
    26a8:	2039034a 	eorscs	r0, r9, sl, asr #6
    26ac:	03204703 	teqeq	r0, #786432	; 0xc0000
    26b0:	47032039 	smladxmi	r3, r9, r0, r2
    26b4:	20120320 	andscs	r0, r2, r0, lsr #6
    26b8:	3d202b03 	fstmdbxcc	r0!, {d2}
    26bc:	03200b03 	teqeq	r0, #3072	; 0xc00
    26c0:	32222075 	eorcc	r2, r2, #117	; 0x75
    26c4:	1c328324 	ldcne	3, cr8, [r2], #-144
    26c8:	034b9332 	movteq	r9, #45874	; 0xb332
    26cc:	24667efd 	strbtcs	r7, [r6], #-3837
    26d0:	241c241c 	ldrcs	r2, [ip], #-1052
    26d4:	6a592308 	bvs	164b2fc <__Stack_Size+0x164aefc>
    26d8:	40594059 	subsmi	r4, r9, r9, asr r0
    26dc:	5e594059 	mrcpl	0, 2, r4, cr9, cr9, {2}
    26e0:	01000602 	tsteq	r0, r2, lsl #12
    26e4:	0000a001 	andeq	sl, r0, r1
    26e8:	39000200 	stmdbcc	r0, {r9}
    26ec:	02000000 	andeq	r0, r0, #0	; 0x0
    26f0:	0d0efb01 	vstreq	d15, [lr, #-4]
    26f4:	01010100 	tsteq	r1, r0, lsl #2
    26f8:	00000001 	andeq	r0, r0, r1
    26fc:	01000001 	tsteq	r0, r1
    2700:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2704:	30316632 	eorscc	r6, r1, r2, lsr r6
    2708:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    270c:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    2710:	63000063 	movwvs	r0, #99	; 0x63
    2714:	6574726f 	ldrbvs	r7, [r4, #-623]!
    2718:	5f336d78 	svcpl	0x00336d78
    271c:	7263616d 	rsbvc	r6, r3, #1073741851	; 0x4000001b
    2720:	00732e6f 	rsbseq	r2, r3, pc, ror #28
    2724:	00000001 	andeq	r0, r0, r1
    2728:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
    272c:	0308006a 	movweq	r0, #32874	; 0x806a
    2730:	03210134 	teqeq	r1, #13	; 0xd
    2734:	0321200b 	teqeq	r1, #11	; 0xb
    2738:	0321200b 	teqeq	r1, #11	; 0xb
    273c:	032f200b 	teqeq	pc, #11	; 0xb
    2740:	032f200b 	teqeq	pc, #11	; 0xb
    2744:	032f200b 	teqeq	pc, #11	; 0xb
    2748:	0321200b 	teqeq	r1, #11	; 0xb
    274c:	032f200b 	teqeq	pc, #11	; 0xb
    2750:	2f2f200b 	svccs	0x002f200b
    2754:	2f200a03 	svccs	0x00200a03
    2758:	2f200b03 	svccs	0x00200b03
    275c:	2f200b03 	svccs	0x00200b03
    2760:	2f200b03 	svccs	0x00200b03
    2764:	21200a03 	teqcs	r0, r3, lsl #20
    2768:	21200b03 	teqcs	r0, r3, lsl #22
    276c:	21200b03 	teqcs	r0, r3, lsl #22
    2770:	21200b03 	teqcs	r0, r3, lsl #22
    2774:	2f200b03 	svccs	0x00200b03
    2778:	2f200b03 	svccs	0x00200b03
    277c:	21200a03 	teqcs	r0, r3, lsl #20
    2780:	21200b03 	teqcs	r0, r3, lsl #22
    2784:	01000102 	tsteq	r0, r2, lsl #2
    2788:	00005a01 	andeq	r5, r0, r1, lsl #20
    278c:	3b000200 	blcc	2f94 <__Stack_Size+0x2b94>
    2790:	02000000 	andeq	r0, r0, #0	; 0x0
    2794:	0d0efb01 	vstreq	d15, [lr, #-4]
    2798:	01010100 	tsteq	r1, r0, lsl #2
    279c:	00000001 	andeq	r0, r0, r1
    27a0:	01000001 	tsteq	r0, r1
    27a4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    27a8:	30316632 	eorscc	r6, r1, r2, lsr r6
    27ac:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    27b0:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    27b4:	73000063 	movwvc	r0, #99	; 0x63
    27b8:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    27bc:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    27c0:	6365765f 	cmnvs	r5, #99614720	; 0x5f00000
    27c4:	2e726f74 	mrccs	15, 3, r6, cr2, cr4, {3}
    27c8:	00010063 	andeq	r0, r1, r3, rrx
    27cc:	05000000 	streq	r0, [r0]
    27d0:	006b6402 	rsbeq	r6, fp, r2, lsl #8
    27d4:	01910308 	orrseq	r0, r1, r8, lsl #6
    27d8:	3e275801 	cdpcc	8, 2, cr5, cr7, cr1, {0}
    27dc:	48226056 	stmdami	r2!, {r1, r2, r4, r6, sp, lr}
    27e0:	0e022f36 	mcreq	15, 0, r2, cr2, cr6, {1}
    27e4:	70010100 	andvc	r0, r1, r0, lsl #2
    27e8:	02000000 	andeq	r0, r0, #0	; 0x0
    27ec:	00005700 	andeq	r5, r0, r0, lsl #14
    27f0:	fb010200 	blx	42ffa <__Stack_Size+0x42bfa>
    27f4:	01000d0e 	tsteq	r0, lr, lsl #26
    27f8:	00010101 	andeq	r0, r1, r1, lsl #2
    27fc:	00010000 	andeq	r0, r1, r0
    2800:	2e2e0100 	sufcse	f0, f6, f0
    2804:	2f2e2e2f 	svccs	0x002e2e2f
    2808:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    280c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2810:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    2814:	332e342d 	teqcc	lr, #754974720	; 0x2d000000
    2818:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    281c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2820:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    2824:	732f6362 	teqvc	pc, #-2013265919	; 0x88000001
    2828:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    282c:	61000062 	tstvs	r0, r2, rrx
    2830:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    2834:	00632e74 	rsbeq	r2, r3, r4, ror lr
    2838:	61000001 	tstvs	r0, r1
    283c:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    2840:	00682e74 	rsbeq	r2, r8, r4, ror lr
    2844:	00000001 	andeq	r0, r0, r1
    2848:	00020500 	andeq	r0, r2, r0, lsl #10
    284c:	03000000 	movweq	r0, #0	; 0x0
    2850:	2d4b013f 	stfcse	f0, [fp, #-252]
    2854:	0602672f 	streq	r6, [r2], -pc, lsr #14
    2858:	eb010100 	bl	42c60 <__Stack_Size+0x42860>
    285c:	02000000 	andeq	r0, r0, #0	; 0x0
    2860:	0000d000 	andeq	sp, r0, r0
    2864:	fb010200 	blx	4306e <__Stack_Size+0x42c6e>
    2868:	01000d0e 	tsteq	r0, lr, lsl #26
    286c:	00010101 	andeq	r0, r1, r1, lsl #2
    2870:	00010000 	andeq	r0, r1, r0
    2874:	2e2e0100 	sufcse	f0, f6, f0
    2878:	2f2e2e2f 	svccs	0x002e2e2f
    287c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2880:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2884:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    2888:	332e342d 	teqcc	lr, #754974720	; 0x2d000000
    288c:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    2890:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2894:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    2898:	732f6362 	teqvc	pc, #-2013265919	; 0x88000001
    289c:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    28a0:	3a630062 	bcc	18c2a30 <__Stack_Size+0x18c2630>
    28a4:	6e69772f 	cdpvs	7, 6, cr7, cr9, cr15, {1}
    28a8:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    28ac:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    28b0:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
    28b4:	342d6363 	strtcc	r6, [sp], #-867
    28b8:	302e332e 	eorcc	r3, lr, lr, lsr #6
    28bc:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    28c0:	2f62696c 	svccs	0x0062696c
    28c4:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    28c8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    28cc:	6564756c 	strbvs	r7, [r4, #-1388]!
    28d0:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    28d4:	2f3a6300 	svccs	0x003a6300
    28d8:	616e6977 	smcvs	59031
    28dc:	2f736d72 	svccs	0x00736d72
    28e0:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    28e4:	63672f64 	cmnvs	r7, #400	; 0x190
    28e8:	75622d63 	strbvc	r2, [r2, #-3427]!
    28ec:	2f646c69 	svccs	0x00646c69
    28f0:	2f636367 	svccs	0x00636367
    28f4:	6c636e69 	stclvs	14, cr6, [r3], #-420
    28f8:	00656475 	rsbeq	r6, r5, r5, ror r4
    28fc:	69786500 	ldmdbvs	r8!, {r8, sl, sp, lr}^
    2900:	00632e74 	rsbeq	r2, r3, r4, ror lr
    2904:	6c000001 	stcvs	0, cr0, [r0], {1}
    2908:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    290c:	00020068 	andeq	r0, r2, r8, rrx
    2910:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    2914:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    2918:	00020068 	andeq	r0, r2, r8, rrx
    291c:	64747300 	ldrbtvs	r7, [r4], #-768
    2920:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    2924:	00030068 	andeq	r0, r3, r8, rrx
    2928:	65657200 	strbvs	r7, [r5, #-512]!
    292c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    2930:	00000200 	andeq	r0, r0, r0, lsl #4
    2934:	02050000 	andeq	r0, r5, #0	; 0x0
    2938:	00000000 	andeq	r0, r0, r0
    293c:	13013b03 	movwne	r3, #6915	; 0x1b03
    2940:	83302f2d 	teqhi	r0, #180	; 0xb4
    2944:	0006024b 	andeq	r0, r6, fp, asr #4
    2948:	00d70101 	sbcseq	r0, r7, r1, lsl #2
    294c:	00020000 	andeq	r0, r2, r0
    2950:	000000d1 	ldrdeq	r0, [r0], -r1
    2954:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    2958:	0101000d 	tsteq	r1, sp
    295c:	00000101 	andeq	r0, r0, r1, lsl #2
    2960:	00000100 	andeq	r0, r0, r0, lsl #2
    2964:	2f3a6301 	svccs	0x003a6301
    2968:	616e6977 	smcvs	59031
    296c:	2f736d72 	svccs	0x00736d72
    2970:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    2974:	63672f64 	cmnvs	r7, #400	; 0x190
    2978:	2e342d63 	cdpcs	13, 3, cr2, cr4, cr3, {3}
    297c:	2f302e33 	svccs	0x00302e33
    2980:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    2984:	6c2f6269 	sfmvs	f6, 4, [pc], #-420
    2988:	2f636269 	svccs	0x00636269
    298c:	6c636e69 	stclvs	14, cr6, [r3], #-420
    2990:	2f656475 	svccs	0x00656475
    2994:	00737973 	rsbseq	r7, r3, r3, ror r9
    2998:	772f3a63 	strvc	r3, [pc, -r3, ror #20]!
    299c:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
    29a0:	622f736d 	eorvs	r7, pc, #-1275068415	; 0xb4000001
    29a4:	646c6975 	strbtvs	r6, [ip], #-2421
    29a8:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    29ac:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
    29b0:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
    29b4:	692f6363 	stmdbvs	pc!, {r0, r1, r5, r6, r8, r9, sp, lr}
    29b8:	756c636e 	strbvc	r6, [ip, #-878]!
    29bc:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
    29c0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    29c4:	2f2e2e2f 	svccs	0x002e2e2f
    29c8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    29cc:	63672f2e 	cmnvs	r7, #184	; 0xb8
    29d0:	2e342d63 	cdpcs	13, 3, cr2, cr4, cr3, {3}
    29d4:	2f302e33 	svccs	0x00302e33
    29d8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    29dc:	6c2f6269 	sfmvs	f6, 4, [pc], #-420
    29e0:	2f636269 	svccs	0x00636269
    29e4:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    29e8:	6c000074 	stcvs	0, cr0, [r0], {116}
    29ec:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    29f0:	00010068 	andeq	r0, r1, r8, rrx
    29f4:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    29f8:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    29fc:	00010068 	andeq	r0, r1, r8, rrx
    2a00:	64747300 	ldrbtvs	r7, [r4], #-768
    2a04:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    2a08:	00020068 	andeq	r0, r2, r8, rrx
    2a0c:	65657200 	strbvs	r7, [r5, #-512]!
    2a10:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    2a14:	00000100 	andeq	r0, r0, r0, lsl #2
    2a18:	75706d69 	ldrbvc	r6, [r0, #-3433]!
    2a1c:	632e6572 	teqvs	lr, #478150656	; 0x1c800000
    2a20:	00000300 	andeq	r0, r0, r0, lsl #6
    2a24:	0000a200 	andeq	sl, r0, r0, lsl #4
    2a28:	7a000200 	bvc	3230 <__Stack_Size+0x2e30>
    2a2c:	02000000 	andeq	r0, r0, #0	; 0x0
    2a30:	0d0efb01 	vstreq	d15, [lr, #-4]
    2a34:	01010100 	tsteq	r1, r0, lsl #2
    2a38:	00000001 	andeq	r0, r0, r1
    2a3c:	01000001 	tsteq	r0, r1
    2a40:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2a44:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2a48:	2f2e2e2f 	svccs	0x002e2e2f
    2a4c:	672f2e2e 	strvs	r2, [pc, -lr, lsr #28]!
    2a50:	342d6363 	strtcc	r6, [sp], #-867
    2a54:	302e332e 	eorcc	r3, lr, lr, lsr #6
    2a58:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    2a5c:	2f62696c 	svccs	0x0062696c
    2a60:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    2a64:	73696d2f 	cmnvc	r9, #3008	; 0xbc0
    2a68:	3a630063 	bcc	18c2bfc <__Stack_Size+0x18c27fc>
    2a6c:	6e69772f 	cdpvs	7, 6, cr7, cr9, cr15, {1}
    2a70:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    2a74:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    2a78:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
    2a7c:	622d6363 	eorvs	r6, sp, #-1946157055	; 0x8c000001
    2a80:	646c6975 	strbtvs	r6, [ip], #-2421
    2a84:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    2a88:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    2a8c:	6564756c 	strbvs	r7, [r4, #-1388]!
    2a90:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
    2a94:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
    2a98:	00000100 	andeq	r0, r0, r0, lsl #2
    2a9c:	64647473 	strbtvs	r7, [r4], #-1139
    2aa0:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    2aa4:	00000200 	andeq	r0, r0, r0, lsl #4
    2aa8:	02050000 	andeq	r0, r5, #0	; 0x0
    2aac:	00000000 	andeq	r0, r0, r0
    2ab0:	32013103 	andcc	r3, r1, #-1073741824	; 0xc0000000
    2ab4:	69656767 	stmdbvs	r5!, {r0, r1, r2, r5, r6, r8, r9, sl, sp, lr}^
    2ab8:	8265032f 	rsbhi	r0, r5, #-1140850688	; 0xbc000000
    2abc:	65676732 	strbvs	r6, [r7, #-1842]!
    2ac0:	67673069 	strbvs	r3, [r7, -r9, rrx]!
    2ac4:	0c026865 	stceq	8, cr6, [r2], {101}
    2ac8:	d1010100 	tstle	r1, r0, lsl #2
    2acc:	02000000 	andeq	r0, r0, #0	; 0x0
    2ad0:	00007e00 	andeq	r7, r0, r0, lsl #28
    2ad4:	fb010200 	blx	432de <__Stack_Size+0x42ede>
    2ad8:	01000d0e 	tsteq	r0, lr, lsl #26
    2adc:	00010101 	andeq	r0, r1, r1, lsl #2
    2ae0:	00010000 	andeq	r0, r1, r0
    2ae4:	2e2e0100 	sufcse	f0, f6, f0
    2ae8:	2f2e2e2f 	svccs	0x002e2e2f
    2aec:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2af0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2af4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    2af8:	332e342d 	teqcc	lr, #754974720	; 0x2d000000
    2afc:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    2b00:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2b04:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    2b08:	732f6362 	teqvc	pc, #-2013265919	; 0x88000001
    2b0c:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    2b10:	3a630067 	bcc	18c2cb4 <__Stack_Size+0x18c28b4>
    2b14:	6e69772f 	cdpvs	7, 6, cr7, cr9, cr15, {1}
    2b18:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    2b1c:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    2b20:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
    2b24:	622d6363 	eorvs	r6, sp, #-1946157055	; 0x8c000001
    2b28:	646c6975 	strbtvs	r6, [ip], #-2421
    2b2c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    2b30:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    2b34:	6564756c 	strbvs	r7, [r4, #-1388]!
    2b38:	656d0000 	strbvs	r0, [sp]!
    2b3c:	7970636d 	ldmdbvc	r0!, {r0, r2, r3, r5, r6, r8, r9, sp, lr}^
    2b40:	0100632e 	tsteq	r0, lr, lsr #6
    2b44:	74730000 	ldrbtvc	r0, [r3]
    2b48:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    2b4c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2b50:	00000000 	andeq	r0, r0, r0
    2b54:	00000205 	andeq	r0, r0, r5, lsl #4
    2b58:	38030000 	stmdacc	r3, {}
    2b5c:	2e160301 	cdpcs	3, 1, cr0, cr6, cr1, {0}
    2b60:	032e6a03 	teqeq	lr, #12288	; 0x3000
    2b64:	71034a0f 	tstvc	r3, pc, lsl #20
    2b68:	2e12032e 	cdpcs	3, 1, cr0, cr2, cr14, {1}
    2b6c:	821b0332 	andshi	r0, fp, #-939524096	; 0xc8000000
    2b70:	034f6567 	movteq	r6, #62823	; 0xf567
    2b74:	4b6b6663 	blmi	1adc508 <__Stack_Size+0x1adc108>
    2b78:	4a60034b 	bmi	18038ac <__Stack_Size+0x18034ac>
    2b7c:	292e2103 	stmdbcs	lr!, {r0, r1, r8, sp}
    2b80:	2e5f0333 	mrccs	3, 2, r0, cr15, cr3, {1}
    2b84:	034a1c03 	movteq	r1, #44035	; 0xac03
    2b88:	26032e64 	strcs	r2, [r3], -r4, ror #28
    2b8c:	2e5a039e 	mrccs	3, 2, r0, cr10, cr14, {4}
    2b90:	4c4a2603 	mcrrmi	6, 0, r2, sl, cr3
    2b94:	665a0364 	ldrbvs	r0, [sl], -r4, ror #6
    2b98:	02d62e03 	sbcseq	r2, r6, #48	; 0x30
    2b9c:	01010004 	tsteq	r1, r4
    2ba0:	000000d8 	ldrdeq	r0, [r0], -r8
    2ba4:	007e0002 	rsbseq	r0, lr, r2
    2ba8:	01020000 	tsteq	r2, r0
    2bac:	000d0efb 	strdeq	r0, [sp], -fp
    2bb0:	01010101 	tsteq	r1, r1, lsl #2
    2bb4:	01000000 	tsteq	r0, r0
    2bb8:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    2bbc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2bc0:	2f2e2e2f 	svccs	0x002e2e2f
    2bc4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2bc8:	63672f2e 	cmnvs	r7, #184	; 0xb8
    2bcc:	2e342d63 	cdpcs	13, 3, cr2, cr4, cr3, {3}
    2bd0:	2f302e33 	svccs	0x00302e33
    2bd4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    2bd8:	6c2f6269 	sfmvs	f6, 4, [pc], #-420
    2bdc:	2f636269 	svccs	0x00636269
    2be0:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    2be4:	6300676e 	movwvs	r6, #1902	; 0x76e
    2be8:	69772f3a 	ldmdbvs	r7!, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
    2bec:	6d72616e 	ldfvse	f6, [r2, #-440]!
    2bf0:	75622f73 	strbvc	r2, [r2, #-3955]!
    2bf4:	2f646c69 	svccs	0x00646c69
    2bf8:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    2bfc:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    2c00:	63672f64 	cmnvs	r7, #400	; 0x190
    2c04:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    2c08:	64756c63 	ldrbtvs	r6, [r5], #-3171
    2c0c:	6d000065 	stcvs	0, cr0, [r0, #-404]
    2c10:	65736d65 	ldrbvs	r6, [r3, #-3429]!
    2c14:	00632e74 	rsbeq	r2, r3, r4, ror lr
    2c18:	73000001 	movwvc	r0, #1	; 0x1
    2c1c:	65646474 	strbvs	r6, [r4, #-1140]!
    2c20:	00682e66 	rsbeq	r2, r8, r6, ror #28
    2c24:	00000002 	andeq	r0, r0, r2
    2c28:	00020500 	andeq	r0, r2, r0, lsl #10
    2c2c:	03000000 	movweq	r0, #0	; 0x0
    2c30:	1203012e 	andne	r0, r3, #-2147483637	; 0x8000000b
    2c34:	2e6e0301 	cdpcs	3, 6, cr0, cr14, cr1, {0}
    2c38:	032e0b03 	teqeq	lr, #3072	; 0xc00
    2c3c:	0f032e75 	svceq	0x00032e75
    2c40:	1303312e 	movwne	r3, #12590	; 0x312e
    2c44:	2e760366 	cdpcs	3, 7, cr0, cr6, cr6, {3}
    2c48:	2e09032f 	cdpcs	3, 0, cr0, cr9, cr15, {1}
    2c4c:	2e7a036c 	cdpcs	3, 7, cr0, cr10, cr12, {3}
    2c50:	2f2f2f30 	svccs	0x002f2f30
    2c54:	032e5603 	teqeq	lr, #3145728	; 0x300000
    2c58:	5b032e25 	blpl	ce4f4 <__Stack_Size+0xce0f4>
    2c5c:	822e032e 	eorhi	r0, lr, #-1207959552	; 0xb8000000
    2c60:	032e5203 	teqeq	lr, #805306368	; 0x30000000
    2c64:	77032e2e 	strvc	r2, [r3, -lr, lsr #28]
    2c68:	2e0b032e 	cdpcs	3, 0, cr0, cr11, cr14, {1}
    2c6c:	66520348 	ldrbvs	r0, [r2], -r8, asr #6
    2c70:	319e3403 	orrscc	r3, lr, r3, lsl #8
    2c74:	02514884 	subseq	r4, r1, #8650752	; 0x840000
    2c78:	01010006 	tsteq	r1, r6
    2c7c:	00000123 	andeq	r0, r0, r3, lsr #2
    2c80:	00e00002 	rsceq	r0, r0, r2
    2c84:	01020000 	tsteq	r2, r0
    2c88:	000d0efb 	strdeq	r0, [sp], -fp
    2c8c:	01010101 	tsteq	r1, r1, lsl #2
    2c90:	01000000 	tsteq	r0, r0
    2c94:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    2c98:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2c9c:	2f2e2e2f 	svccs	0x002e2e2f
    2ca0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2ca4:	63672f2e 	cmnvs	r7, #184	; 0xb8
    2ca8:	2e342d63 	cdpcs	13, 3, cr2, cr4, cr3, {3}
    2cac:	2f302e33 	svccs	0x00302e33
    2cb0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    2cb4:	6c2f6269 	sfmvs	f6, 4, [pc], #-420
    2cb8:	2f636269 	svccs	0x00636269
    2cbc:	6c647473 	cfstrdvs	mvd7, [r4], #-460
    2cc0:	63006269 	movwvs	r6, #617	; 0x269
    2cc4:	69772f3a 	ldmdbvs	r7!, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
    2cc8:	6d72616e 	ldfvse	f6, [r2, #-440]!
    2ccc:	75622f73 	strbvc	r2, [r2, #-3955]!
    2cd0:	2f646c69 	svccs	0x00646c69
    2cd4:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    2cd8:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    2cdc:	656e2f30 	strbvs	r2, [lr, #-3888]!
    2ce0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2ce4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    2ce8:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    2cec:	64756c63 	ldrbtvs	r6, [r5], #-3171
    2cf0:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    2cf4:	3a630073 	bcc	18c2ec8 <__Stack_Size+0x18c2ac8>
    2cf8:	6e69772f 	cdpvs	7, 6, cr7, cr9, cr15, {1}
    2cfc:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    2d00:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    2d04:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
    2d08:	622d6363 	eorvs	r6, sp, #-1946157055	; 0x8c000001
    2d0c:	646c6975 	strbtvs	r6, [ip], #-2421
    2d10:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    2d14:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    2d18:	6564756c 	strbvs	r7, [r4, #-1388]!
    2d1c:	5f5f0000 	svcpl	0x005f0000
    2d20:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    2d24:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
    2d28:	00000100 	andeq	r0, r0, r0, lsl #2
    2d2c:	6b636f6c 	blvs	18deae4 <__Stack_Size+0x18de6e4>
    2d30:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2d34:	745f0000 	ldrbvc	r0, [pc], #0	; 2d3c <__Stack_Size+0x293c>
    2d38:	73657079 	cmnvc	r5, #121	; 0x79
    2d3c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2d40:	74730000 	ldrbtvc	r0, [r3]
    2d44:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    2d48:	0300682e 	movweq	r6, #2094	; 0x82e
    2d4c:	65720000 	ldrbvs	r0, [r2]!
    2d50:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    2d54:	00020068 	andeq	r0, r2, r8, rrx
    2d58:	65746100 	ldrbvs	r6, [r4, #-256]!
    2d5c:	2e746978 	mrccs	9, 3, r6, cr4, cr8, {3}
    2d60:	00010068 	andeq	r0, r1, r8, rrx
    2d64:	05000000 	streq	r0, [r0]
    2d68:	00000002 	andeq	r0, r0, r2
    2d6c:	01160300 	tsteq	r6, r0, lsl #6
    2d70:	03010a03 	movweq	r0, #6659	; 0x1a03
    2d74:	0a032e76 	beq	ce754 <__Stack_Size+0xce354>
    2d78:	032f4b2e 	teqeq	pc, #47104	; 0xb800
    2d7c:	0d032e74 	stceq	14, cr2, [r3, #-464]
    2d80:	032f2d2e 	teqeq	pc, #2944	; 0xb80
    2d84:	0d032e73 	stceq	14, cr2, [r3, #-460]
    2d88:	4a170366 	bmi	5c3b28 <__Stack_Size+0x5c3728>
    2d8c:	a34a1b03 	movtge	r1, #43779	; 0xab03
    2d90:	4c4a7603 	mcrrmi	6, 0, r7, sl, cr3
    2d94:	322d2f2b 	eorcc	r2, sp, #172	; 0xac
    2d98:	2c302f2b 	ldccs	15, cr2, [r0], #-172
    2d9c:	0602312d 	streq	r3, [r2], -sp, lsr #2
    2da0:	1b010100 	blne	431a8 <__Stack_Size+0x42da8>
    2da4:	02000001 	andeq	r0, r0, #1	; 0x1
    2da8:	0000d900 	andeq	sp, r0, r0, lsl #18
    2dac:	fb010200 	blx	435b6 <__Stack_Size+0x431b6>
    2db0:	01000d0e 	tsteq	r0, lr, lsl #26
    2db4:	00010101 	andeq	r0, r1, r1, lsl #2
    2db8:	00010000 	andeq	r0, r1, r0
    2dbc:	2e2e0100 	sufcse	f0, f6, f0
    2dc0:	2f2e2e2f 	svccs	0x002e2e2f
    2dc4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2dc8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2dcc:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    2dd0:	332e342d 	teqcc	lr, #754974720	; 0x2d000000
    2dd4:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    2dd8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2ddc:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    2de0:	732f6362 	teqvc	pc, #-2013265919	; 0x88000001
    2de4:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    2de8:	3a630062 	bcc	18c2f78 <__Stack_Size+0x18c2b78>
    2dec:	6e69772f 	cdpvs	7, 6, cr7, cr9, cr15, {1}
    2df0:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    2df4:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    2df8:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
    2dfc:	342d6363 	strtcc	r6, [sp], #-867
    2e00:	302e332e 	eorcc	r3, lr, lr, lsr #6
    2e04:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    2e08:	2f62696c 	svccs	0x0062696c
    2e0c:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    2e10:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    2e14:	6564756c 	strbvs	r7, [r4, #-1388]!
    2e18:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    2e1c:	2f3a6300 	svccs	0x003a6300
    2e20:	616e6977 	smcvs	59031
    2e24:	2f736d72 	svccs	0x00736d72
    2e28:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    2e2c:	63672f64 	cmnvs	r7, #400	; 0x190
    2e30:	75622d63 	strbvc	r2, [r2, #-3427]!
    2e34:	2f646c69 	svccs	0x00646c69
    2e38:	2f636367 	svccs	0x00636367
    2e3c:	6c636e69 	stclvs	14, cr6, [r3], #-420
    2e40:	00656475 	rsbeq	r6, r5, r5, ror r4
    2e44:	635f5f00 	cmpvs	pc, #0	; 0x0
    2e48:	5f6c6c61 	svcpl	0x006c6c61
    2e4c:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    2e50:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
    2e54:	00000100 	andeq	r0, r0, r0, lsl #2
    2e58:	6b636f6c 	blvs	18dec10 <__Stack_Size+0x18de810>
    2e5c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2e60:	745f0000 	ldrbvc	r0, [pc], #0	; 2e68 <__Stack_Size+0x2a68>
    2e64:	73657079 	cmnvc	r5, #121	; 0x79
    2e68:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2e6c:	74730000 	ldrbtvc	r0, [r3]
    2e70:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    2e74:	0300682e 	movweq	r6, #2094	; 0x82e
    2e78:	65720000 	ldrbvs	r0, [r2]!
    2e7c:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    2e80:	00020068 	andeq	r0, r2, r8, rrx
    2e84:	05000000 	streq	r0, [r0]
    2e88:	00000002 	andeq	r0, r0, r2
    2e8c:	01110300 	tsteq	r1, r0, lsl #6
    2e90:	032e0a03 	teqeq	lr, #12288	; 0x3000
    2e94:	034a4a76 	movteq	r4, #43638	; 0xaa76
    2e98:	77034a2c 	strvc	r4, [r3, -ip, lsr #20]
    2e9c:	2e69032e 	cdpcs	3, 6, cr0, cr9, cr14, {1}
    2ea0:	7903c151 	stmdbvc	r3, {r0, r4, r6, r8, lr, pc}
    2ea4:	663e039e 	undefined
    2ea8:	2d664f03 	stclcs	15, cr4, [r6, #-12]!
    2eac:	31304b2f 	teqcc	r0, pc, lsr #22
    2eb0:	30316350 	eorscc	r6, r1, r0, asr r3
    2eb4:	77038967 	strvc	r8, [r3, -r7, ror #18]
    2eb8:	4a09039e 	bmi	243d38 <__Stack_Size+0x243938>
    2ebc:	000a02d1 	ldrdeq	r0, [sl], -r1
    2ec0:	00450101 	subeq	r0, r5, r1, lsl #2
    2ec4:	00020000 	andeq	r0, r2, r0
    2ec8:	0000001f 	andeq	r0, r0, pc, lsl r0
    2ecc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    2ed0:	0101000d 	tsteq	r1, sp
    2ed4:	00000101 	andeq	r0, r0, r1, lsl #2
    2ed8:	00000100 	andeq	r0, r0, r0, lsl #2
    2edc:	72630001 	rsbvc	r0, r3, #1	; 0x1
    2ee0:	612e6e74 	teqvs	lr, r4, ror lr
    2ee4:	00006d73 	andeq	r6, r0, r3, ror sp
    2ee8:	00000000 	andeq	r0, r0, r0
    2eec:	00000205 	andeq	r0, r0, r5, lsl #4
    2ef0:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
    2ef4:	06020100 	streq	r0, [r2], -r0, lsl #2
    2ef8:	00010100 	andeq	r0, r1, r0, lsl #2
    2efc:	00000205 	andeq	r0, r0, r5, lsl #4
    2f00:	d2030000 	andle	r0, r3, #0	; 0x0
    2f04:	06020100 	streq	r0, [r2], -r0, lsl #2
    2f08:	Address 0x00002f08 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 	undefined instruction 0xffffffff
       8:	7c010001 	stcvc	0, cr0, [r1], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000001c 	andeq	r0, r0, ip, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
      1c:	00000308 	andeq	r0, r0, r8, lsl #6
      20:	42140e42 	andsmi	r0, r4, #1056	; 0x420
      24:	018e180e 	orreq	r1, lr, lr, lsl #16
      28:	03860287 	orreq	r0, r6, #1879048200	; 0x70000008
      2c:	05840485 	streq	r0, [r4, #1157]
      30:	0000000c 	.word	0x0000000c
      34:	ffffffff 	.word	0xffffffff
      38:	7c010001 	.word	0x7c010001
      3c:	000d0c0e 	.word	0x000d0c0e
      40:	0000000c 	.word	0x0000000c
      44:	00000030 	.word	0x00000030
      48:	0800343c 	.word	0x0800343c
      4c:	00000002 	.word	0x00000002
      50:	0000000c 	.word	0x0000000c
      54:	00000030 	.word	0x00000030
      58:	08003440 	.word	0x08003440
      5c:	00000002 	.word	0x00000002
      60:	0000000c 	.word	0x0000000c
      64:	00000030 	.word	0x00000030
      68:	08003444 	.word	0x08003444
      6c:	00000002 	.word	0x00000002
      70:	0000000c 	.word	0x0000000c
      74:	00000030 	.word	0x00000030
      78:	08003448 	.word	0x08003448
      7c:	00000002 	.word	0x00000002
      80:	0000000c 	.word	0x0000000c
      84:	00000030 	.word	0x00000030
      88:	0800344c 	.word	0x0800344c
      8c:	00000002 	.word	0x00000002
      90:	0000000c 	.word	0x0000000c
      94:	00000030 	.word	0x00000030
      98:	08003450 	.word	0x08003450
      9c:	00000002 	.word	0x00000002
      a0:	0000000c 	.word	0x0000000c
      a4:	00000030 	.word	0x00000030
      a8:	08003454 	.word	0x08003454
      ac:	00000002 	.word	0x00000002
      b0:	0000000c 	.word	0x0000000c
      b4:	00000030 	.word	0x00000030
      b8:	08003458 	.word	0x08003458
      bc:	00000002 	.word	0x00000002
      c0:	0000000c 	.word	0x0000000c
      c4:	00000030 	.word	0x00000030
      c8:	0800345c 	.word	0x0800345c
      cc:	00000002 	.word	0x00000002
      d0:	0000000c 	.word	0x0000000c
      d4:	00000030 	.word	0x00000030
      d8:	08003460 	.word	0x08003460
      dc:	00000002 	.word	0x00000002
      e0:	0000000c 	.word	0x0000000c
      e4:	00000030 	.word	0x00000030
      e8:	08003464 	.word	0x08003464
      ec:	00000002 	.word	0x00000002
      f0:	0000000c 	.word	0x0000000c
      f4:	00000030 	.word	0x00000030
      f8:	08003468 	.word	0x08003468
      fc:	00000002 	.word	0x00000002
     100:	0000000c 	.word	0x0000000c
     104:	00000030 	.word	0x00000030
     108:	0800346c 	.word	0x0800346c
	ui2a(num,10,0,bf);
	}

static int a2d(char ch)
	{
	if (ch>='0' && ch<='9') 
     10c:	00000002 	.word	0x00000002
     110:	0000000c 	.word	0x0000000c
	int num=0;
	int digit;
	while ((digit=a2d(ch))>=0) {
		if (digit>base) break;
		num=num*base+digit;
		ch=*p++;
     114:	00000030 	.word	0x00000030

static int a2d(char ch)
	{
	if (ch>='0' && ch<='9') 
		return ch-'0';
	else if (ch>='a' && ch<='f')
     118:	08003470 	.word	0x08003470
     11c:	00000002 	.word	0x00000002
		return ch-'a'+10;
     120:	0000000c 	.word	0x0000000c
     124:	00000030 	.word	0x00000030
	else if (ch>='A' && ch<='F')
     128:	08003474 	.word	0x08003474
     12c:	00000002 	.word	0x00000002
     130:	0000000c 	.word	0x0000000c
		return ch-'A'+10;
     134:	00000030 	.word	0x00000030
static char a2i(char ch, char** src,int base,int* nump)
	{
	char* p= *src;
	int num=0;
	int digit;
	while ((digit=a2d(ch))>=0) {
     138:	08003478 	.word	0x08003478
			if (ch=='l') {
				ch=*(fmt++);
				lng=1;
			}
#endif
			switch (ch) {
     13c:	00000002 	.word	0x00000002
     140:	0000000c 	.word	0x0000000c
     144:	00000030 	.word	0x00000030
     148:	0800347c 	.word	0x0800347c
     14c:	00000002 	.word	0x00000002
     150:	0000000c 	.word	0x0000000c
     154:	00000030 	.word	0x00000030
     158:	08003480 	.word	0x08003480
     15c:	00000002 	.word	0x00000002
     160:	0000000c 	.word	0x0000000c
     164:	00000030 	.word	0x00000030
     168:	08003484 	.word	0x08003484
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
     16c:	00000002 	.word	0x00000002
     170:	0000000c 	.word	0x0000000c
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
     174:	00000030 	.word	0x00000030

static void i2a (int num, char * bf)
	{
	if (num<0) {
		num=-num;
		*bf++ = '-';
     178:	08003488 	.word	0x08003488
     17c:	00000002 	.word	0x00000002
	*bf=0;
	}

static void i2a (int num, char * bf)
	{
	if (num<0) {
     180:	0000000c 	.word	0x0000000c
		num=-num;
		*bf++ = '-';
     184:	00000030 	.word	0x00000030
     188:	0800348c 	.word	0x0800348c
		}
	ui2a(num,10,0,bf);
     18c:	00000002 	.word	0x00000002
     190:	0000000c 	.word	0x0000000c
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
					putchw(putp,putf,w,lz,bf);
     194:	00000030 	.word	0x00000030
     198:	08003490 	.word	0x08003490
     19c:	00000002 	.word	0x00000002
     1a0:	0000000c 	.word	0x0000000c
     1a4:	00000030 	.word	0x00000030
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
     1a8:	08003494 	.word	0x08003494
     1ac:	00000002 	.word	0x00000002
     1b0:	0000000c 	.word	0x0000000c
     1b4:	00000030 	.word	0x00000030
     1b8:	08003498 	.word	0x08003498
					putchw(putp,putf,w,lz,bf);
     1bc:	00000002 	.word	0x00000002
     1c0:	0000000c 	.word	0x0000000c
     1c4:	00000030 	.word	0x00000030
					break;
				case 'c' : 
					putf(putp,(char)(va_arg(va, int)));
     1c8:	0800349c 	.word	0x0800349c
     1cc:	00000002 	.word	0x00000002
     1d0:	0000000c 	.word	0x0000000c
					break;
				case 's' : 
					putchw(putp,putf,w,0,va_arg(va, char*));
     1d4:	00000030 	.word	0x00000030
     1d8:	080034a0 	.word	0x080034a0
     1dc:	00000002 	.word	0x00000002
     1e0:	0000000c 	.word	0x0000000c
     1e4:	00000030 	.word	0x00000030
     1e8:	080034a4 	.word	0x080034a4
					break;
				case '%' :
					putf(putp,ch);
     1ec:	00000002 	.word	0x00000002
     1f0:	0000000c 	.word	0x0000000c
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
     1f4:	00000030 	.word	0x00000030
     1f8:	080034a8 	.word	0x080034a8
					break;
				}
			}
		}
	abort:;
	}
     1fc:	00000002 	.word	0x00000002


void init_printf(void* putp,void (*putf) (void*,char))
	{
	stdout_putf=putf;
     200:	0000000c 	.word	0x0000000c
	stdout_putp=putp;
     204:	00000030 	.word	0x00000030
	}
     208:	080034ac 	.word	0x080034ac
     20c:	00000002 	.word	0x00000002
     210:	0000000c 	.word	0x0000000c
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
     214:	00000030 	.word	0x00000030
     218:	080034b0 	.word	0x080034b0
	}
     21c:	00000002 	.word	0x00000002



void tfp_sprintf(char* s,char *fmt, ...)
	{
     220:	0000000c 	.word	0x0000000c
     224:	00000030 	.word	0x00000030
     228:	080034b4 	.word	0x080034b4
     22c:	00000002 	.word	0x00000002
     230:	0000000c 	.word	0x0000000c
	va_list va;
	va_start(va,fmt);
	tfp_format(&s,putcp,fmt,va);
     234:	00000030 	.word	0x00000030
     238:	080034b8 	.word	0x080034b8
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
     23c:	00000002 	.word	0x00000002
	va_list va;
	va_start(va,fmt);
	tfp_format(&s,putcp,fmt,va);
	putcp(&s,0);
	va_end(va);
	}
     240:	0000000c 	.word	0x0000000c
     244:	00000030 	.word	0x00000030
     248:	080034bc 	.word	0x080034bc
     24c:	00000002 	.word	0x00000002
	stdout_putf=putf;
	stdout_putp=putp;
	}

void tfp_printf(char *fmt, ...)
	{
     250:	0000000c 	.word	0x0000000c
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
     254:	00000030 	.word	0x00000030
     258:	080034c0 	.word	0x080034c0
	stdout_putf=putf;
	stdout_putp=putp;
	}

void tfp_printf(char *fmt, ...)
	{
     25c:	00000002 	.word	0x00000002
     260:	0000000c 	.word	0x0000000c
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
     264:	00000030 	.word	0x00000030
	va_end(va);
	}
     268:	080034c4 	.word	0x080034c4
     26c:	00000002 	.word	0x00000002
     270:	0000000c 	.word	0x0000000c
     274:	00000030 	.word	0x00000030
     278:	080034c8 	.word	0x080034c8
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
     27c:	00000002 	.word	0x00000002
	dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction (INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
     280:	0000000c 	.word	0x0000000c
     284:	00000030 	.word	0x00000030
     288:	080034cc 	.word	0x080034cc
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
	}
	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
     28c:	00000002 	.word	0x00000002
     290:	0000000c 	.word	0x0000000c
     294:	00000030 	.word	0x00000030
	dxl_txrx_packet();
     298:	080034d0 	.word	0x080034d0
	u16 CommStatus = dxl_get_result();
     29c:	00000002 	.word	0x00000002
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
     2a0:	0000000c 	.word	0x0000000c
		PrintErrorCode();
     2a4:	00000030 	.word	0x00000030
	else
		PrintCommStatus(CommStatus);
     2a8:	080034d4 	.word	0x080034d4
#endif
}
     2ac:	00000002 	.word	0x00000002
     2b0:	0000000c 	.word	0x0000000c
     2b4:	00000030 	.word	0x00000030
     2b8:	080034d8 	.word	0x080034d8
	}
	interpolating = 1;
}
/* interpolate our pose, this should be called at about 30Hz. */
#define WAIT_SLOP_FACTOR 10
int BioloidControllerEx_interpolateStep(bool fWait) {
     2bc:	00000002 	.word	0x00000002
     2c0:	0000000c 	.word	0x0000000c

	if (interpolating == 0)
     2c4:	00000030 	.word	0x00000030
		return 0;
	int i;
	int complete = poseSize;
     2c8:	080034dc 	.word	0x080034dc
	if (!fWait) {
     2cc:	00000002 	.word	0x00000002
		if (getMillis() < (nextframe_ - WAIT_SLOP_FACTOR)) {
     2d0:	0000000c 	.word	0x0000000c
     2d4:	00000030 	.word	0x00000030
     2d8:	080034e0 	.word	0x080034e0
			return (getMillis() - nextframe_); // We still have some time to do something...
     2dc:	00000002 	.word	0x00000002
     2e0:	0000000c 	.word	0x0000000c
     2e4:	00000030 	.word	0x00000030
#ifdef MILLIS
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	while (getMillis() < nextframe_);
     2e8:	080034e4 	.word	0x080034e4
     2ec:	00000002 	.word	0x00000002
     2f0:	0000000c 	.word	0x0000000c
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
     2f4:	00000030 	.word	0x00000030
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     2f8:	080034e8 	.word	0x080034e8
     2fc:	00000002 	.word	0x00000002
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
     300:	0000000c 	.word	0x0000000c
     304:	00000030 	.word	0x00000030
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     308:	080034ec 	.word	0x080034ec
		int diff = nextpose_[i] - pose_[i];
     30c:	00000002 	.word	0x00000002
     310:	0000000c 	.word	0x0000000c
     314:	00000030 	.word	0x00000030
     318:	080034f0 	.word	0x080034f0
     31c:	00000002 	.word	0x00000002
		if (diff == 0) {
     320:	0000000c 	.word	0x0000000c
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
     324:	00000030 	.word	0x00000030
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
     328:	080034f4 	.word	0x080034f4
		int diff = nextpose_[i] - pose_[i];
		if (diff == 0) {
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
     32c:	00000002 	.word	0x00000002
					pose_[i] = nextpose_[i];
     330:	0000000c 	.word	0x0000000c
					complete--;
     334:	00000030 	.word	0x00000030
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
     338:	080034f8 	.word	0x080034f8
     33c:	00000002 	.word	0x00000002
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
     340:	0000000c 	.word	0x0000000c
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
     344:	00000030 	.word	0x00000030
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
     348:	080034fc 	.word	0x080034fc
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     34c:	00000002 	.word	0x00000002
     350:	0000000c 	.word	0x0000000c
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif

	}
	if (complete <= 0)
     354:	00000030 	.word	0x00000030
		interpolating = 0;
     358:	08003500 	.word	0x08003500
	BioloidControllerEx_writePose();
     35c:	00000002 	.word	0x00000002
     360:	0000000c 	.word	0x0000000c
	return 0;
}
     364:	00000030 	.word	0x00000030
     368:	08003504 	.word	0x08003504
     36c:	00000002 	.word	0x00000002
     370:	0000000c 	.word	0x0000000c
     374:	00000030 	.word	0x00000030
     378:	08003508 	.word	0x08003508
     37c:	00000002 	.word	0x00000002
     380:	0000000c 	.word	0x0000000c
	for (i = 0; i < poseSize; i++)
		//nextpose_[i] = pgm_read_word_near(addr+1+i) << BIOLOID_SHIFT;
		nextpose_[i] = pgm_read_word_near(addr + 1 + i);
}
/* read in current servo positions to the pose. */
void BioloidControllerEx_readPose() {
     384:	00000030 	.word	0x00000030
     388:	0800350c 	.word	0x0800350c
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
		//pose_[i] = dxl_read_word(id_[i],AXM_PRESENT_POSITION_L)<<BIOLOID_SHIFT;
		pose_[i] = dxl_read_word(id_[i], AXM_PRESENT_POSITION_L);
     38c:	00000002 	.word	0x00000002
     390:	0000000c 	.word	0x0000000c
     394:	00000030 	.word	0x00000030
     398:	08003510 	.word	0x08003510
     39c:	00000002 	.word	0x00000002
		PrintChar(id_[i]);
		PrintString(" - ");
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
     3a0:	0000000c 	.word	0x0000000c

#ifdef DEBUG_BIOLOIDEX
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
     3a4:	00000030 	.word	0x00000030
     3a8:	08003514 	.word	0x08003514
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
	}
}
     3ac:	00000002 	.word	0x00000002
     3b0:	0000000c 	.word	0x0000000c
     3b4:	00000030 	.word	0x00000030
     3b8:	08003518 	.word	0x08003518
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitPosY[GaitCurrentLegNr] = -3 * g_InControlState.LegLiftHeight
				/ (3 + g_InControlState.gaitCur.HalfLiftHeight); // Easier to shift between div factor: /1 (3/3), /2 (3/6) and 3/4
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y
     3bc:	00000002 	.word	0x00000002
				/ g_InControlState.gaitCur.LiftDivFactor;
	}

	//Optional Half heigth Rear 5 LiftedPos (5 lifted positions)
	else if (((g_InControlState.gaitCur.NrLiftedPos == 5 && (LegStep == -2)))
     3c0:	0000000c 	.word	0x0000000c
     3c4:	00000030 	.word	0x00000030
     3c8:	0800351c 	.word	0x0800351c
     3cc:	00000002 	.word	0x00000002
     3d0:	0000000c 	.word	0x0000000c
     3d4:	00000030 	.word	0x00000030
     3d8:	08003520 	.word	0x08003520
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = -g_InControlState.TravelLength.x / 2;
     3dc:	00000002 	.word	0x00000002
     3e0:	0000000c 	.word	0x0000000c
     3e4:	00000030 	.word	0x00000030
     3e8:	08003524 	.word	0x08003524
     3ec:	00000002 	.word	0x00000002
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
     3f0:	0000000c 	.word	0x0000000c
     3f4:	00000030 	.word	0x00000030
     3f8:	08003528 	.word	0x08003528
     3fc:	00000002 	.word	0x00000002
     400:	0000000c 	.word	0x0000000c
		GaitPosZ[GaitCurrentLegNr] = -g_InControlState.TravelLength.z / 2;
     404:	00000030 	.word	0x00000030
     408:	0800352c 	.word	0x0800352c
     40c:	00000002 	.word	0x00000002
     410:	0000000c 	.word	0x0000000c
		GaitRotY[GaitCurrentLegNr] = -g_InControlState.TravelLength.y / 2;
     414:	00000030 	.word	0x00000030
     418:	08003530 	.word	0x08003530
     41c:	00000002 	.word	0x00000002
     420:	0000000c 	.word	0x0000000c
	}

	//Optional Half heigth Front 5 LiftedPos (5 lifted positions)
	else if ((g_InControlState.gaitCur.NrLiftedPos == 5)
     424:	00000030 	.word	0x00000030
     428:	08003534 	.word	0x08003534
     42c:	00000002 	.word	0x00000002
     430:	0000000c 	.word	0x0000000c
     434:	00000030 	.word	0x00000030
     438:	08003538 	.word	0x08003538
			&& (LegStep == 2
					|| LegStep == -(g_InControlState.gaitCur.StepsInGait - 2))
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
     43c:	00000002 	.word	0x00000002
     440:	0000000c 	.word	0x0000000c
     444:	00000030 	.word	0x00000030
     448:	0800353c 	.word	0x0800353c
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
     44c:	00000002 	.word	0x00000002
     450:	00000014 	.word	0x00000014
     454:	00000030 	.word	0x00000030
     458:	08003540 	.word	0x08003540
     45c:	0000000c 	.word	0x0000000c
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
     460:	42040e42 	.word	0x42040e42
     464:	018e080e 	.word	0x018e080e
     468:	00000014 	.word	0x00000014
     46c:	00000030 	.word	0x00000030
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y / 2;
     470:	0800354c 	.word	0x0800354c
     474:	0000000c 	.word	0x0000000c
     478:	42040e42 	.word	0x42040e42
     47c:	018e080e 	.word	0x018e080e
	}
	//_B_
	//Leg front down position //bug here?  From _A_ to _B_ there should only be one gaitstep, not 2!
	//For example, where is the case of LegStep==0+2 executed when NRLiftedPos=3?
	else if ((LegStep == g_InControlState.gaitCur.FrontDownPos
     480:	00000014 	.word	0x00000014
     484:	00000030 	.word	0x00000030
     488:	08003558 	.word	0x08003558
     48c:	0000000c 	.word	0x0000000c
     490:	42040e42 	.word	0x42040e42
     494:	018e080e 	.word	0x018e080e
     498:	00000014 	.word	0x00000014
     49c:	00000030 	.word	0x00000030
			|| LegStep
					== -(g_InControlState.gaitCur.StepsInGait
							- g_InControlState.gaitCur.FrontDownPos))
			&& GaitPosY[GaitCurrentLegNr] < 0) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
     4a0:	08003564 	.word	0x08003564
     4a4:	0000000c 	.word	0x0000000c
     4a8:	42040e42 	.word	0x42040e42
     4ac:	018e080e 	.word	0x018e080e
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
     4b0:	0000000c 	.word	0x0000000c
     4b4:	ffffffff 	.word	0xffffffff
     4b8:	7c010001 	.word	0x7c010001
     4bc:	000d0c0e 	.word	0x000d0c0e
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y / 2;
     4c0:	0000000c 	.word	0x0000000c
     4c4:	000004b0 	.word	0x000004b0
     4c8:	00000000 	.word	0x00000000
		GaitPosY[GaitCurrentLegNr] = 0;
     4cc:	00000040 	.word	0x00000040
     4d0:	0000000c 	.word	0x0000000c
	}

	//Move body forward
	else {
		GaitPosX[GaitCurrentLegNr] = GaitPosX[GaitCurrentLegNr]
     4d4:	000004b0 	.word	0x000004b0
     4d8:	00000000 	.word	0x00000000
     4dc:	00000002 	.word	0x00000002
     4e0:	0000000c 	.word	0x0000000c
     4e4:	000004b0 	.word	0x000004b0
     4e8:	00000000 	.word	0x00000000
				- (g_InControlState.TravelLength.x
						/ (short) g_InControlState.gaitCur.TLDivFactor);
		GaitPosY[GaitCurrentLegNr] = 0;
     4ec:	00000044 	.word	0x00000044
     4f0:	0000000c 	.word	0x0000000c
     4f4:	000004b0 	.word	0x000004b0
		GaitPosZ[GaitCurrentLegNr] = GaitPosZ[GaitCurrentLegNr]
     4f8:	00000000 	.word	0x00000000
     4fc:	00000002 	.word	0x00000002
     500:	0000000c 	.word	0x0000000c
     504:	000004b0 	.word	0x000004b0
				- (g_InControlState.TravelLength.z
						/ (short) g_InControlState.gaitCur.TLDivFactor);
		GaitRotY[GaitCurrentLegNr] = GaitRotY[GaitCurrentLegNr]
     508:	00000000 	.word	0x00000000
     50c:	00000002 	.word	0x00000002
     510:	0000000c 	.word	0x0000000c
     514:	000004b0 	.word	0x000004b0
				- (g_InControlState.TravelLength.y
						/ (short) g_InControlState.gaitCur.TLDivFactor);
	}

}
     518:	00000000 	.word	0x00000000
     51c:	0000002c 	.word	0x0000002c
     520:	0000000c 	.word	0x0000000c
     524:	000004b0 	.word	0x000004b0
     528:	00000000 	.word	0x00000000
     52c:	00000002 	.word	0x00000002
     530:	0000000c 	.word	0x0000000c

}

//--------------------------------------------------------------------
//[GAIT Sequence]
void GaitSeq(void) {
     534:	000004b0 	.word	0x000004b0
	//Check if the Gait is in motion - If not if we are going to start a motion try to align our Gaitstep to start with a good foot
	// for the direction we are about to go...

	if (fWalking || (g_InControlState.ForceGaitStepCnt != 0))
     538:	00000000 	.word	0x00000000
     53c:	00000002 	.word	0x00000002
     540:	00000018 	.word	0x00000018
		TravelRequest = true;   // Is walking or was walking...
     544:	000004b0 	.word	0x000004b0
     548:	00000000 	.word	0x00000000
	else {
		TravelRequest = (abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
     54c:	00000160 	.word	0x00000160
     550:	8e0c0e4e 	.word	0x8e0c0e4e
     554:	84028501 	.word	0x84028501
     558:	00000003 	.word	0x00000003
     55c:	00000014 	.word	0x00000014
     560:	000004b0 	.word	0x000004b0
     564:	00000000 	.word	0x00000000
     568:	00000034 	.word	0x00000034
     56c:	4c040e42 	.word	0x4c040e42
     570:	018e080e 	.word	0x018e080e
     574:	00000018 	.word	0x00000018
     578:	000004b0 	.word	0x000004b0
     57c:	00000000 	.word	0x00000000
				|| (abs(g_InControlState.TravelLength.y) > cTravelDeadZone);

		if (TravelRequest) {

		} else {    //Clear values under the cTravelDeadZone
			g_InControlState.TravelLength.x = 0;
     580:	000002dc 	.word	0x000002dc
			g_InControlState.TravelLength.z = 0;
     584:	8e0c0e42 	.word	0x8e0c0e42
			g_InControlState.TravelLength.y = 0; //Gait NOT in motion, return to home position
		}
	}

	//Calculate Gait sequence
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
     588:	84028501 	.word	0x84028501
     58c:	00000003 	.word	0x00000003
     590:	00000014 	.word	0x00000014
		Gait(LegIndex);
     594:	000004b0 	.word	0x000004b0
			g_InControlState.TravelLength.y = 0; //Gait NOT in motion, return to home position
		}
	}

	//Calculate Gait sequence
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
     598:	00000000 	.word	0x00000000
     59c:	000000ac 	.word	0x000000ac
     5a0:	8e080e42 	.word	0x8e080e42
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5a4:	00028401 	.word	0x00028401
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
     5a8:	00000018 	.word	0x00000018
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5ac:	000004b0 	.word	0x000004b0
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
     5b0:	00000000 	.word	0x00000000
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5b4:	000000ac 	.word	0x000000ac
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
		g_InControlState.GaitStep = 1;
     5b8:	8e0c0e44 	.word	0x8e0c0e44
     5bc:	84028501 	.word	0x84028501

	// If we have a force count decrement it now...
	if (g_InControlState.ForceGaitStepCnt)
     5c0:	00000003 	.word	0x00000003
     5c4:	00000018 	.word	0x00000018
		g_InControlState.ForceGaitStepCnt--;
     5c8:	000004b0 	.word	0x000004b0
}
     5cc:	00000000 	.word	0x00000000
     5d0:	00000184 	.word	0x00000184
     5d4:	8e100e44 	.word	0x8e100e44
     5d8:	85028601 	.word	0x85028601
     5dc:	00048403 	.word	0x00048403
}
//--------------------------------------------------------------------
//[BalanceBody]
void BalanceBody(void) {

	TotalTransZ = TotalTransZ / BalanceDivFactor;
     5e0:	00000014 	.word	0x00000014
     5e4:	000004b0 	.word	0x000004b0
     5e8:	00000000 	.word	0x00000000
     5ec:	000000cc 	.word	0x000000cc
     5f0:	8e080e44 	.word	0x8e080e44
	TotalTransX = TotalTransX / BalanceDivFactor;
     5f4:	00028401 	.word	0x00028401
     5f8:	0000000c 	.word	0x0000000c
     5fc:	000004b0 	.word	0x000004b0
	TotalTransY = TotalTransY / BalanceDivFactor;
     600:	00000000 	.word	0x00000000
     604:	00000030 	.word	0x00000030
     608:	00000018 	.word	0x00000018
     60c:	000004b0 	.word	0x000004b0

	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
		TotalXBal1 += 3600;

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
     610:	00000000 	.word	0x00000000
     614:	00000064 	.word	0x00000064
	TotalTransX = TotalTransX / BalanceDivFactor;
	TotalTransY = TotalTransY / BalanceDivFactor;

#ifndef QUADMODE // ??? on PhantomX Hex at no movment YBal1 = 1800, on Quad = 0...  Need to experiment
	if (TotalYBal1 > 0)        //Rotate balance circle by +/- 180 deg
		TotalYBal1 -= 1800;
     618:	8e0c0e46 	.word	0x8e0c0e46
     61c:	84028501 	.word	0x84028501
	else
		TotalYBal1 += 1800;
     620:	100e4c03 	.word	0x100e4c03
#endif

	if (TotalZBal1 < -1800) //Compensate for extreme balance positions that causes overflow
     624:	0000001c 	.word	0x0000001c
     628:	000004b0 	.word	0x000004b0
     62c:	00000000 	.word	0x00000000
		TotalZBal1 += 3600;
     630:	000000e0 	.word	0x000000e0
     634:	8e140e42 	.word	0x8e140e42

	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
     638:	86028701 	.word	0x86028701
     63c:	84048503 	.word	0x84048503
		TotalXBal1 += 3600;
     640:	180e4605 	.word	0x180e4605
     644:	0000001c 	.word	0x0000001c

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
     648:	000004b0 	.word	0x000004b0
     64c:	00000000 	.word	0x00000000
	TotalXBal1 = -TotalXBal1 / BalanceDivFactor;
     650:	000002d0 	.word	0x000002d0
     654:	8e140e42 	.word	0x8e140e42
	TotalZBal1 = TotalZBal1 / BalanceDivFactor;
     658:	86028701 	.word	0x86028701
	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
		TotalXBal1 += 3600;

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
	TotalXBal1 = -TotalXBal1 / BalanceDivFactor;
     65c:	84048503 	.word	0x84048503
     660:	480e4405 	.word	0x480e4405
	TotalZBal1 = TotalZBal1 / BalanceDivFactor;
     664:	0000001c 	.word	0x0000001c
     668:	000004b0 	.word	0x000004b0

}
     66c:	00000000 	.word	0x00000000
     670:	00000184 	.word	0x00000184
     674:	8e140e42 	.word	0x8e140e42
     678:	86028701 	.word	0x86028701
     67c:	84048503 	.word	0x84048503
     680:	200e4405 	.word	0x200e4405
     684:	0000000c 	.word	0x0000000c
     688:	000004b0 	.word	0x000004b0
//sin4        - Output Sinus of AngleDeg
//cos4          - Output Cosinus of AngleDeg
void GetSinCos(short AngleDeg1) {
	short ABSAngleDeg1;   //Absolute value of the Angle in Degrees, decimals = 1
	//Get the absolute value of AngleDeg
	if (AngleDeg1 < 0)
     68c:	00000000 	.word	0x00000000
     690:	0000001a 	.word	0x0000001a
		ABSAngleDeg1 = AngleDeg1 * -1;
     694:	0000001c 	.word	0x0000001c
     698:	000004b0 	.word	0x000004b0
	else
		ABSAngleDeg1 = AngleDeg1;

	//Shift rotation to a full circle of 360 deg -> AngleDeg // 360
	if (AngleDeg1 < 0)    //Negative values
		AngleDeg1 = 3600 - (ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600)));
     69c:	00000000 	.word	0x00000000
     6a0:	000000b0 	.word	0x000000b0
     6a4:	8e140e46 	.word	0x8e140e46
     6a8:	86028701 	.word	0x86028701
     6ac:	84048503 	.word	0x84048503
     6b0:	00000005 	.word	0x00000005
     6b4:	0000000c 	.word	0x0000000c
     6b8:	000004b0 	.word	0x000004b0
     6bc:	00000000 	.word	0x00000000
	else
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));

	if (AngleDeg1 >= 0 && AngleDeg1 <= 900)     // 0 to 90 deg
     6c0:	00000046 	.word	0x00000046
     6c4:	00000014 	.word	0x00000014
			{
		sin4 = pgm_read_word(&GetSin[AngleDeg1 / 5]); // 5 is the presision (0.5) of the table
     6c8:	000004b0 	.word	0x000004b0
     6cc:	00000000 	.word	0x00000000
     6d0:	00000038 	.word	0x00000038
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
     6d4:	4a040e44 	.word	0x4a040e44
     6d8:	018e080e 	.word	0x018e080e
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));

	if (AngleDeg1 >= 0 && AngleDeg1 <= 900)     // 0 to 90 deg
			{
		sin4 = pgm_read_word(&GetSin[AngleDeg1 / 5]); // 5 is the presision (0.5) of the table
     6dc:	0000001c 	.word	0x0000001c
     6e0:	000004b0 	.word	0x000004b0
     6e4:	00000000 	.word	0x00000000
     6e8:	0000008c 	.word	0x0000008c
     6ec:	8e140e42 	.word	0x8e140e42
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
     6f0:	86028701 	.word	0x86028701
     6f4:	84048503 	.word	0x84048503
     6f8:	180e5605 	.word	0x180e5605
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
     6fc:	0000000c 	.word	0x0000000c
     700:	000004b0 	.word	0x000004b0
     704:	00000000 	.word	0x00000000
     708:	00000002 	.word	0x00000002
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     70c:	0000000c 	.word	0x0000000c
     710:	000004b0 	.word	0x000004b0
     714:	00000000 	.word	0x00000000
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     718:	00000002 	.word	0x00000002
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     71c:	00000014 	.word	0x00000014
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     720:	000004b0 	.word	0x000004b0
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     724:	00000000 	.word	0x00000000
     728:	0000003c 	.word	0x0000003c
     72c:	44040e42 	.word	0x44040e42
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     730:	018e080e 	.word	0x018e080e
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     734:	00000014 	.word	0x00000014
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     738:	000004b0 	.word	0x000004b0
     73c:	00000000 	.word	0x00000000
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
     740:	0000009c 	.word	0x0000009c
     744:	44040e42 	.word	0x44040e42
     748:	018e080e 	.word	0x018e080e
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     74c:	00000014 	.word	0x00000014
     750:	000004b0 	.word	0x000004b0
     754:	00000000 	.word	0x00000000
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     758:	0000001c 	.word	0x0000001c
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     75c:	44040e42 	.word	0x44040e42
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     760:	018e080e 	.word	0x018e080e
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     764:	00000014 	.word	0x00000014
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     768:	000004b0 	.word	0x000004b0
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     76c:	00000000 	.word	0x00000000
     770:	00000044 	.word	0x00000044
     774:	44040e42 	.word	0x44040e42
     778:	018e080e 	.word	0x018e080e
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     77c:	0000001c 	.word	0x0000001c
     780:	000004b0 	.word	0x000004b0
     784:	00000000 	.word	0x00000000
     788:	00000090 	.word	0x00000090
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
     78c:	8e140e42 	.word	0x8e140e42
     790:	86028701 	.word	0x86028701
     794:	84048503 	.word	0x84048503
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     798:	180e4405 	.word	0x180e4405
     79c:	00000018 	.word	0x00000018
     7a0:	000004b0 	.word	0x000004b0
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7a4:	00000000 	.word	0x00000000
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7a8:	00000054 	.word	0x00000054
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7ac:	8e100e42 	.word	0x8e100e42
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7b0:	85028601 	.word	0x85028601
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7b4:	00048403 	.word	0x00048403
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7b8:	00000014 	.word	0x00000014
     7bc:	000004b0 	.word	0x000004b0
     7c0:	00000000 	.word	0x00000000
     7c4:	00000038 	.word	0x00000038
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7c8:	42040e42 	.word	0x42040e42
     7cc:	018e080e 	.word	0x018e080e
     7d0:	00000018 	.word	0x00000018
	//Shift rotation to a full circle of 360 deg -> AngleDeg // 360
	if (AngleDeg1 < 0)    //Negative values
		AngleDeg1 = 3600 - (ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600)));
	else
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));
     7d4:	000004b0 	.word	0x000004b0
     7d8:	00000000 	.word	0x00000000
     7dc:	00000038 	.word	0x00000038
     7e0:	440c0e42 	.word	0x440c0e42
     7e4:	018e100e 	.word	0x018e100e
     7e8:	03840285 	.word	0x03840285
     7ec:	00000014 	.word	0x00000014
     7f0:	000004b0 	.word	0x000004b0
     7f4:	00000000 	.word	0x00000000
     7f8:	00000034 	.word	0x00000034
	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
	}
}
     7fc:	4e040e42 	.word	0x4e040e42
     800:	018e080e 	.word	0x018e080e
     804:	00000014 	.word	0x00000014
     808:	000004b0 	.word	0x000004b0
     80c:	00000000 	.word	0x00000000
//cos4        - Input Cosinus
//AngleRad4     - Output Angle in AngleRad4
long GetArcCos(short cos4) {
	boolean NegativeValue/*:1*/;    //If the the value is Negative
	//Check for negative value
	if (cos4 < 0) {
     810:	00000124 	.word	0x00000124
     814:	8e080e46 	.word	0x8e080e46
     818:	00028401 	.word	0x00028401
		cos4 = -cos4;
     81c:	0000001c 	.word	0x0000001c
     820:	000004b0 	.word	0x000004b0
		NegativeValue = 1;
	} else
		NegativeValue = 0;

	//Limit cos4 to his maximal value
	cos4 = min(cos4, c4DEC);
     824:	00000000 	.word	0x00000000
     828:	000000ec 	.word	0x000000ec
     82c:	44140e42 	.word	0x44140e42

	if ((cos4 >= 0) && (cos4 < 9000)) {
     830:	018e200e 	.word	0x018e200e
     834:	03860287 	.word	0x03860287
     838:	05840485 	.word	0x05840485
		AngleRad4 = (byte) pgm_read_byte(&GetACos[cos4 / 79]);
     83c:	0000001c 	.word	0x0000001c
     840:	000004b0 	.word	0x000004b0
     844:	00000000 	.word	0x00000000
		AngleRad4 = ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255) ;
     848:	0000008c 	.word	0x0000008c
     84c:	8e140e48 	.word	0x8e140e48
	} else if ((cos4 >= 9000) && (cos4 < 9900)) {
     850:	86028701 	.word	0x86028701
     854:	84048503 	.word	0x84048503
     858:	200e6e05 	.word	0x200e6e05
     85c:	0000001c 	.word	0x0000001c
		AngleRad4 = (byte) pgm_read_byte(&GetACos[(cos4 - 9000) / 8 + 114]);
     860:	000004b0 	.word	0x000004b0
     864:	00000000 	.word	0x00000000
     868:	00000084 	.word	0x00000084
     86c:	42140e42 	.word	0x42140e42
     870:	018e180e 	.word	0x018e180e
     874:	03860287 	.word	0x03860287
		AngleRad4 = (long) ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255)
     878:	05840485 	.word	0x05840485
	} else if ((cos4 >= 9900) && (cos4 <= 10000)) {
     87c:	00000014 	.word	0x00000014
     880:	000004b0 	.word	0x000004b0
     884:	00000000 	.word	0x00000000
		AngleRad4 = (byte) pgm_read_byte(&GetACos[(cos4 - 9900) / 2 + 227]);
     888:	00000054 	.word	0x00000054
     88c:	8e080e42 	.word	0x8e080e42
     890:	00028401 	.word	0x00028401
		AngleRad4 = (long) ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255)
     894:	00000014 	.word	0x00000014
     898:	000004b0 	.word	0x000004b0
     89c:	00000000 	.word	0x00000000
     8a0:	0000005c 	.word	0x0000005c
     8a4:	42040e42 	.word	0x42040e42
     8a8:	018e080e 	.word	0x018e080e
     8ac:	0000001c 	.word	0x0000001c
	}

	//Add negative sign
	if (NegativeValue)
		AngleRad4 = 31416 - AngleRad4;
     8b0:	000004b0 	.word	0x000004b0
     8b4:	00000000 	.word	0x00000000
     8b8:	0000059c 	.word	0x0000059c
     8bc:	42140e42 	.word	0x42140e42
     8c0:	018e280e 	.word	0x018e280e

	return AngleRad4;
}
     8c4:	03860287 	.word	0x03860287
     8c8:	05840485 	.word	0x05840485
     8cc:	0000001c 	.word	0x0000001c
     8d0:	000004b0 	.word	0x000004b0
     8d4:	00000000 	.word	0x00000000
     8d8:	0000051c 	.word	0x0000051c

unsigned long isqrt32(unsigned long n) //
{
     8dc:	42140e42 	.word	0x42140e42
     8e0:	018e200e 	.word	0x018e200e

	root = 0;
	remainder = n;
	place = 0x40000000; // OR place = 0x4000; OR place = 0x40; - respectively

	while (place > remainder)
     8e4:	03860287 	.word	0x03860287
     8e8:	05840485 	.word	0x05840485
     8ec:	0000000c 	.word	0x0000000c
		place = place >> 2;
	while (place) {
		if (remainder >= root + place) {
     8f0:	ffffffff 	.word	0xffffffff
			remainder = remainder - root - place;
     8f4:	7c010001 	.word	0x7c010001
     8f8:	000d0c0e 	.word	0x000d0c0e
			root = root + (place << 1);
     8fc:	0000000c 	.word	0x0000000c

	while (place > remainder)
		place = place >> 2;
	while (place) {
		if (remainder >= root + place) {
			remainder = remainder - root - place;
     900:	000008ec 	.word	0x000008ec
			root = root + (place << 1);
		}
		root = root >> 1;
		place = place >> 2;
     904:	00000000 	.word	0x00000000
	remainder = n;
	place = 0x40000000; // OR place = 0x4000; OR place = 0x40; - respectively

	while (place > remainder)
		place = place >> 2;
	while (place) {
     908:	0000000c 	.word	0x0000000c
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
	XYhyp2 = isqrt32(
     90c:	0000000c 	.word	0x0000000c
//(GETATAN2) Simplyfied ArcTan2 function based on fixed point ArcCos
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
     910:	000008ec 	.word	0x000008ec
	XYhyp2 = isqrt32(
     914:	00000000 	.word	0x00000000
     918:	0000000c 	.word	0x0000000c
//(GETATAN2) Simplyfied ArcTan2 function based on fixed point ArcCos
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
     91c:	0000000c 	.word	0x0000000c
	XYhyp2 = isqrt32(
     920:	000008ec 	.word	0x000008ec
     924:	00000000 	.word	0x00000000
     928:	0000002c 	.word	0x0000002c
			((long) AtanX * AtanX * c4DEC) + ((long) AtanY * AtanY * c4DEC));
	GetArcCos(((long) AtanX * (long) c6DEC) / (long) XYhyp2);
     92c:	0000000c 	.word	0x0000000c
     930:	000008ec 	.word	0x000008ec
     934:	00000000 	.word	0x00000000
     938:	00000038 	.word	0x00000038
     93c:	0000000c 	.word	0x0000000c
     940:	000008ec 	.word	0x000008ec
     944:	00000000 	.word	0x00000000

	if (AtanY < 0) // removed overhead... Atan4 = AngleRad4 * (AtanY/abs(AtanY));
     948:	00000038 	.word	0x00000038
		Atan4 = -AngleRad4;
     94c:	00000014 	.word	0x00000014
	else
		Atan4 = AngleRad4;
     950:	000008ec 	.word	0x000008ec
	XYhyp2 = isqrt32(
			((long) AtanX * AtanX * c4DEC) + ((long) AtanY * AtanY * c4DEC));
	GetArcCos(((long) AtanX * (long) c6DEC) / (long) XYhyp2);

	if (AtanY < 0) // removed overhead... Atan4 = AngleRad4 * (AtanY/abs(AtanY));
		Atan4 = -AngleRad4;
     954:	00000000 	.word	0x00000000
	else
		Atan4 = AngleRad4;
     958:	00000030 	.word	0x00000030
     95c:	8e080e44 	.word	0x8e080e44
	return Atan4;
}
     960:	00028401 	.word	0x00028401
     964:	0000000c 	.word	0x0000000c
     968:	000008ec 	.word	0x000008ec
     96c:	00000000 	.word	0x00000000

}

//--------------------------------------------------------------------
//[BalCalcOneLeg]
void BalCalcOneLeg(long PosX, long PosZ, long PosY, byte BalLegNr) {
     970:	00000018 	.word	0x00000018
	long CPR_Y;            //Final Y value for centerpoint of rotation
	long CPR_Z;            //Final Z value for centerpoint of rotation

	long lAtan;
	//Calculating totals from center of the body to the feet
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BalLegNr]) + PosZ;
     974:	00000018 	.word	0x00000018
     978:	000008ec 	.word	0x000008ec
	CPR_X = (short) pgm_read_word(&cOffsetX[BalLegNr]) + PosX;
     97c:	00000000 	.word	0x00000000
     980:	00000070 	.word	0x00000070
	CPR_Y = 150 + PosY; // using the value 150 to lower the centerpoint of rotation 'g_InControlState.BodyPos.y +

	TotalTransY += (long) PosY;
     984:	8e100e42 	.word	0x8e100e42
     988:	85028601 	.word	0x85028601
     98c:	00048403 	.word	0x00048403
	TotalTransZ += (long) CPR_Z;
     990:	00000018 	.word	0x00000018
     994:	000008ec 	.word	0x000008ec
     998:	00000000 	.word	0x00000000
	TotalTransX += (long) CPR_X;
     99c:	0000005c 	.word	0x0000005c
     9a0:	440c0e42 	.word	0x440c0e42
     9a4:	018e100e 	.word	0x018e100e
     9a8:	03840285 	.word	0x03840285

	lAtan = GetATan2(CPR_X, CPR_Z);
     9ac:	00000014 	.word	0x00000014
	TotalYBal1 += (lAtan * 1800) / 31415;
     9b0:	000008ec 	.word	0x000008ec
     9b4:	00000000 	.word	0x00000000
     9b8:	0000005c 	.word	0x0000005c
     9bc:	8e080e42 	.word	0x8e080e42
     9c0:	00028401 	.word	0x00028401
     9c4:	0000001c 	.word	0x0000001c
     9c8:	000008ec 	.word	0x000008ec
     9cc:	00000000 	.word	0x00000000

	lAtan = GetATan2(CPR_X, CPR_Y);
     9d0:	00000098 	.word	0x00000098
     9d4:	44140e42 	.word	0x44140e42
	TotalZBal1 += ((lAtan * 1800) / 31415) - 900; //Rotate balance circle 90 deg
     9d8:	018e180e 	.word	0x018e180e
     9dc:	03860287 	.word	0x03860287
     9e0:	05840485 	.word	0x05840485
     9e4:	0000001c 	.word	0x0000001c
     9e8:	000008ec 	.word	0x000008ec
     9ec:	00000000 	.word	0x00000000
     9f0:	000000c8 	.word	0x000000c8
     9f4:	44140e42 	.word	0x44140e42
     9f8:	018e180e 	.word	0x018e180e
     9fc:	03860287 	.word	0x03860287

	lAtan = GetATan2(CPR_Z, CPR_Y);
     a00:	05840485 	.word	0x05840485
     a04:	0000001c 	.word	0x0000001c
	TotalXBal1 += ((lAtan * 1800) / 31415) - 900; //Rotate balance circle 90 deg
     a08:	000008ec 	.word	0x000008ec
     a0c:	00000000 	.word	0x00000000
     a10:	00000038 	.word	0x00000038
     a14:	8e140e42 	.word	0x8e140e42
     a18:	86028701 	.word	0x86028701
     a1c:	84048503 	.word	0x84048503
     a20:	180e4405 	.word	0x180e4405
     a24:	0000000c 	.word	0x0000000c

}
     a28:	ffffffff 	.word	0xffffffff
     a2c:	7c010001 	.word	0x7c010001
     a30:	000d0c0e 	.word	0x000d0c0e
     a34:	0000000c 	.word	0x0000000c
     a38:	00000a24 	.word	0x00000a24
     a3c:	08003570 	.word	0x08003570
     a40:	00000018 	.word	0x00000018
     a44:	0000000c 	.word	0x0000000c
     a48:	00000a24 	.word	0x00000a24
     a4c:	08003588 	.word	0x08003588
//SinG                  - Sin buffer for BodyRotZ
//CosG               - Cos buffer for BodyRotZ
//BodyFKPosX         - Output Position X of feet with Rotation
//BodyFKPosY         - Output Position Y of feet with Rotation
//BodyFKPosZ         - Output Position Z of feet with Rotation
void BodyFK(short PosX, short PosZ, short PosY, short RotationY, byte BodyIKLeg) {
     a50:	00000030 	.word	0x00000030
     a54:	0000001c 	.word	0x0000001c
	short CPR_X;            //Final X value for centerpoint of rotation
	short CPR_Y;            //Final Y value for centerpoint of rotation
	short CPR_Z;            //Final Z value for centerpoint of rotation

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
     a58:	00000a24 	.word	0x00000a24
     a5c:	080035b8 	.word	0x080035b8
     a60:	0000006c 	.word	0x0000006c
//SinG                  - Sin buffer for BodyRotZ
//CosG               - Cos buffer for BodyRotZ
//BodyFKPosX         - Output Position X of feet with Rotation
//BodyFKPosY         - Output Position Y of feet with Rotation
//BodyFKPosZ         - Output Position Z of feet with Rotation
void BodyFK(short PosX, short PosZ, short PosY, short RotationY, byte BodyIKLeg) {
     a64:	44140e42 	.word	0x44140e42
	short CPR_X;            //Final X value for centerpoint of rotation
	short CPR_Y;            //Final Y value for centerpoint of rotation
	short CPR_Z;            //Final Z value for centerpoint of rotation

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
     a68:	018e200e 	.word	0x018e200e
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
     a6c:	03860287 	.word	0x03860287
     a70:	05840485 	.word	0x05840485
     a74:	0000001c 	.word	0x0000001c

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     a78:	00000a24 	.word	0x00000a24

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BodyIKLeg]) + PosZ
     a7c:	08003624 	.word	0x08003624
     a80:	00000090 	.word	0x00000090
	//Successive global rotation matrix:
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
     a84:	44140e42 	.word	0x44140e42
     a88:	018e200e 	.word	0x018e200e

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BodyIKLeg]) + PosZ
     a8c:	03860287 	.word	0x03860287
	//Successive global rotation matrix:
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
     a90:	05840485 	.word	0x05840485
     a94:	0000001c 	.word	0x0000001c
	SinG4 = sin4;
     a98:	00000a24 	.word	0x00000a24
	CosG4 = cos4;
     a9c:	080036b4 	.word	0x080036b4
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
	SinG4 = sin4;
     aa0:	00000088 	.word	0x00000088
	CosG4 = cos4;
     aa4:	44140e42 	.word	0x44140e42
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
	SinG4 = sin4;
     aa8:	018e200e 	.word	0x018e200e
	CosG4 = cos4;

	GetSinCos(g_InControlState.BodyRot1.z + TotalZBal1);
     aac:	03860287 	.word	0x03860287
	SinB4 = sin4;
     ab0:	05840485 	.word	0x05840485
     ab4:	0000001c 	.word	0x0000001c
	CosB4 = cos4;
     ab8:	00000a24 	.word	0x00000a24

	GetSinCos(g_InControlState.BodyRot1.y + (RotationY * c1DEC) + TotalYBal1);
     abc:	0800373c 	.word	0x0800373c
     ac0:	00000058 	.word	0x00000058
     ac4:	8e140e42 	.word	0x8e140e42
     ac8:	86028701 	.word	0x86028701
     acc:	84048503 	.word	0x84048503

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     ad0:	200e4405 	.word	0x200e4405
     ad4:	0000001c 	.word	0x0000001c
     ad8:	00000a24 	.word	0x00000a24
     adc:	08003794 	.word	0x08003794
     ae0:	00000058 	.word	0x00000058
     ae4:	8e140e42 	.word	0x8e140e42
     ae8:	86028701 	.word	0x86028701
     aec:	84048503 	.word	0x84048503
     af0:	200e4405 	.word	0x200e4405
     af4:	00000018 	.word	0x00000018
     af8:	00000a24 	.word	0x00000a24
     afc:	080037ec 	.word	0x080037ec
     b00:	00000064 	.word	0x00000064
     b04:	8e0c0e44 	.word	0x8e0c0e44
     b08:	84028501 	.word	0x84028501
     b0c:	100e5003 	.word	0x100e5003
     b10:	00000014 	.word	0x00000014
     b14:	00000a24 	.word	0x00000a24
     b18:	08003850 	.word	0x08003850
     b1c:	0000001c 	.word	0x0000001c
     b20:	8e080e44 	.word	0x8e080e44
     b24:	00028401 	.word	0x00028401
     b28:	00000014 	.word	0x00000014
     b2c:	00000a24 	.word	0x00000a24
     b30:	0800386c 	.word	0x0800386c
     b34:	0000000c 	.word	0x0000000c
     b38:	42040e42 	.word	0x42040e42
     b3c:	018e080e 	.word	0x018e080e
     b40:	00000018 	.word	0x00000018
     b44:	00000a24 	.word	0x00000a24
     b48:	08003878 	.word	0x08003878
     b4c:	0000001c 	.word	0x0000001c
     b50:	8e0c0e42 	.word	0x8e0c0e42
     b54:	84028501 	.word	0x84028501
     b58:	100e4403 	.word	0x100e4403
     b5c:	00000014 	.word	0x00000014
     b60:	00000a24 	.word	0x00000a24
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     b64:	08003894 	.word	0x08003894
     b68:	0000004a 	.word	0x0000004a

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     b6c:	44040e42 	.word	0x44040e42
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     b70:	018e100e 	.word	0x018e100e
     b74:	00000014 	.word	0x00000014
     b78:	00000a24 	.word	0x00000a24
     b7c:	080038e0 	.word	0x080038e0
     b80:	00000076 	.word	0x00000076
     b84:	44040e42 	.word	0x44040e42
     b88:	018e100e 	.word	0x018e100e
     b8c:	00000014 	.word	0x00000014
     b90:	00000a24 	.word	0x00000a24
     b94:	08003958 	.word	0x08003958
     b98:	00000074 	.word	0x00000074
     b9c:	42040e42 	.word	0x42040e42
     ba0:	018e180e 	.word	0x018e180e
     ba4:	00000014 	.word	0x00000014
     ba8:	00000a24 	.word	0x00000a24
     bac:	080039cc 	.word	0x080039cc
     bb0:	00000070 	.word	0x00000070
     bb4:	44040e42 	.word	0x44040e42
     bb8:	018e180e 	.word	0x018e180e
     bbc:	00000014 	.word	0x00000014
     bc0:	00000a24 	.word	0x00000a24
     bc4:	08003a3c 	.word	0x08003a3c
     bc8:	0000000c 	.word	0x0000000c
     bcc:	42040e42 	.word	0x42040e42
     bd0:	018e080e 	.word	0x018e080e
     bd4:	00000014 	.word	0x00000014
     bd8:	00000a24 	.word	0x00000a24
     bdc:	08003a48 	.word	0x08003a48
     be0:	00000088 	.word	0x00000088
     be4:	8e080e46 	.word	0x8e080e46
     be8:	00028401 	.word	0x00028401
     bec:	00000014 	.word	0x00000014
     bf0:	00000a24 	.word	0x00000a24
     bf4:	08003ad0 	.word	0x08003ad0
     bf8:	00000094 	.word	0x00000094
     bfc:	44040e42 	.word	0x44040e42
     c00:	018e080e 	.word	0x018e080e
     c04:	00000018 	.word	0x00000018
     c08:	00000a24 	.word	0x00000a24
     c0c:	08003b64 	.word	0x08003b64
     c10:	0000005a 	.word	0x0000005a
     c14:	8e100e42 	.word	0x8e100e42
     c18:	85028601 	.word	0x85028601
     c1c:	00048403 	.word	0x00048403
     c20:	00000014 	.word	0x00000014
     c24:	00000a24 	.word	0x00000a24
     c28:	08003bc0 	.word	0x08003bc0
     c2c:	0000000c 	.word	0x0000000c
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * CosG4 / c4DEC
					- (long) CPR_Z * c2DEC * SinA4 / c4DEC * SinB4 / c4DEC
							* SinG4 / c4DEC
					- (long) CPR_Y * c2DEC * CosB4 / c4DEC * SinG4 / c4DEC))
			/ c2DEC;
	BodyFKPosY = ((long) CPR_Y * c2DEC
     c30:	42040e42 	.word	0x42040e42
	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     c34:	018e080e 	.word	0x018e080e
     c38:	00000014 	.word	0x00000014
     c3c:	00000a24 	.word	0x00000a24
     c40:	08003bcc 	.word	0x08003bcc
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * CosG4 / c4DEC
					- (long) CPR_Z * c2DEC * SinA4 / c4DEC * SinB4 / c4DEC
							* SinG4 / c4DEC
					- (long) CPR_Y * c2DEC * CosB4 / c4DEC * SinG4 / c4DEC))
			/ c2DEC;
	BodyFKPosY = ((long) CPR_Y * c2DEC
     c44:	00000030 	.word	0x00000030
     c48:	44040e42 	.word	0x44040e42
     c4c:	018e080e 	.word	0x018e080e
     c50:	00000014 	.word	0x00000014
     c54:	00000a24 	.word	0x00000a24
     c58:	08003bfc 	.word	0x08003bfc
     c5c:	0000000c 	.word	0x0000000c
     c60:	42040e42 	.word	0x42040e42
     c64:	018e080e 	.word	0x018e080e
     c68:	00000014 	.word	0x00000014
     c6c:	00000a24 	.word	0x00000a24
     c70:	08003c08 	.word	0x08003c08
     c74:	0000000c 	.word	0x0000000c
     c78:	42040e42 	.word	0x42040e42
     c7c:	018e080e 	.word	0x018e080e
     c80:	00000014 	.word	0x00000014
     c84:	00000a24 	.word	0x00000a24
     c88:	08003c14 	.word	0x08003c14
     c8c:	00000012 	.word	0x00000012
     c90:	42040e42 	.word	0x42040e42
     c94:	018e080e 	.word	0x018e080e
     c98:	0000000c 	.word	0x0000000c
     c9c:	ffffffff 	.word	0xffffffff
     ca0:	7c010001 	.word	0x7c010001
     ca4:	000d0c0e 	.word	0x000d0c0e
     ca8:	0000000c 	.word	0x0000000c
     cac:	00000c98 	.word	0x00000c98
     cb0:	08003c28 	.word	0x08003c28
     cb4:	0000000c 	.word	0x0000000c
     cb8:	0000000c 	.word	0x0000000c
     cbc:	00000c98 	.word	0x00000c98
     cc0:	08003c34 	.word	0x08003c34
     cc4:	0000000c 	.word	0x0000000c
     cc8:	0000000c 	.word	0x0000000c
     ccc:	00000c98 	.word	0x00000c98
     cd0:	08003c40 	.word	0x08003c40
     cd4:	0000000c 	.word	0x0000000c
     cd8:	0000000c 	.word	0x0000000c
     cdc:	00000c98 	.word	0x00000c98
     ce0:	08003c4c 	.word	0x08003c4c
     ce4:	0000000c 	.word	0x0000000c
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * SinG4 / c4DEC
					+ (long) CPR_Z * c2DEC * CosG4 / c4DEC * SinA4 / c4DEC
							* SinB4 / c4DEC
					+ (long) CPR_Y * c2DEC * CosB4 / c4DEC * CosG4 / c4DEC))
			/ c2DEC;
}
     ce8:	0000000c 	.word	0x0000000c
     cec:	00000c98 	.word	0x00000c98
     cf0:	08003c58 	.word	0x08003c58
     cf4:	0000000c 	.word	0x0000000c
     cf8:	0000000c 	.word	0x0000000c
     cfc:	00000c98 	.word	0x00000c98
     d00:	08003c64 	.word	0x08003c64
     d04:	00000024 	.word	0x00000024
     d08:	0000000c 	.word	0x0000000c
     d0c:	00000c98 	.word	0x00000c98
     d10:	08003c88 	.word	0x08003c88
     d14:	0000001c 	.word	0x0000001c
     d18:	0000000c 	.word	0x0000000c
     d1c:	00000c98 	.word	0x00000c98
//FemurAngle1           - Output Angle of Femur in degrees
//TibiaAngle1           - Output Angle of Tibia in degrees
//CoxaAngle1            - Output Angle of Coxa in degrees
//--------------------------------------------------------------------
void LegIK(short IKFeetPosX, short IKFeetPosY, short IKFeetPosZ,
		byte LegIKLegNr) {
     d20:	08003ca4 	.word	0x08003ca4
     d24:	00000020 	.word	0x00000020
     d28:	0000000c 	.word	0x0000000c
	long Temp1;
	long Temp2;
	long T3;

	//Calculate IKCoxaAngle and IKFeetPosXZ
	GetATan2(IKFeetPosX, IKFeetPosZ);
     d2c:	00000c98 	.word	0x00000c98
	CoxaAngle1[LegIKLegNr] = (((long) Atan4 * 180) / 3141)
     d30:	08003cc4 	.word	0x08003cc4
     d34:	00000008 	.word	0x00000008
     d38:	0000000c 	.word	0x0000000c
     d3c:	00000c98 	.word	0x00000c98
     d40:	08003ccc 	.word	0x08003ccc
     d44:	00000004 	.word	0x00000004
     d48:	0000000c 	.word	0x0000000c
     d4c:	00000c98 	.word	0x00000c98
     d50:	08003cd0 	.word	0x08003cd0
     d54:	00000004 	.word	0x00000004
	//Length between the Coxa and tars [foot]
	IKFeetPosXZ = XYhyp2 / c2DEC;

	//Using GetAtan2 for solving IKA1 and IKSW
	//IKA14 - Angle between SW line and the ground in radians
	IKA14 = GetATan2(IKFeetPosY - TarsOffsetY,
     d58:	0000000c 	.word	0x0000000c
     d5c:	00000c98 	.word	0x00000c98
     d60:	08003cd4 	.word	0x08003cd4
     d64:	00000038 	.word	0x00000038
     d68:	00000018 	.word	0x00000018
     d6c:	00000c98 	.word	0x00000c98
     d70:	08003d0c 	.word	0x08003d0c

	//IKSW2 - Length between femur axis and tars
	IKSW2 = XYhyp2;

	//IKA2 - Angle of the line S>W with respect to the femur in radians
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     d74:	00000184 	.word	0x00000184
     d78:	440c0e42 	.word	0x440c0e42
     d7c:	018e100e 	.word	0x018e100e
     d80:	03840285 	.word	0x03840285
					* (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))) * c4DEC
			+ ((long) IKSW2 * IKSW2));
	Temp2 = (long) (2 * (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])) * c2DEC
			* (unsigned long) IKSW2;
	T3 = Temp1 / (Temp2 / c4DEC);
	IKA24 = GetArcCos(T3);
     d84:	00000018 	.word	0x00000018
     d88:	00000c98 	.word	0x00000c98
     d8c:	08003e90 	.word	0x08003e90
     d90:	000000fc 	.word	0x000000fc
     d94:	460c0e42 	.word	0x460c0e42
     d98:	018e100e 	.word	0x018e100e
     d9c:	03840285 	.word	0x03840285
     da0:	00000014 	.word	0x00000014
     da4:	00000c98 	.word	0x00000c98
     da8:	08003f8c 	.word	0x08003f8c
     dac:	00000060 	.word	0x00000060
     db0:	8e080e42 	.word	0x8e080e42
     db4:	00028401 	.word	0x00028401

	FemurAngle1[LegIKLegNr] = -(long) (IKA14 + IKA24) * 180
     db8:	00000014 	.word	0x00000014
     dbc:	00000c98 	.word	0x00000c98
     dc0:	08003fec 	.word	0x08003fec
     dc4:	00000038 	.word	0x00000038
     dc8:	46040e42 	.word	0x46040e42
     dcc:	018e080e 	.word	0x018e080e
     dd0:	00000014 	.word	0x00000014
     dd4:	00000c98 	.word	0x00000c98
     dd8:	08004024 	.word	0x08004024
			/ 3141+ 900 + CFEMURHORNOFFSET1(LegIKLegNr);  //Normal

	//IKTibiaAngle
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     ddc:	00000050 	.word	0x00000050
	Temp2 = (long) (2 * (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])) * c2DEC
			* (unsigned long) IKSW2;
	T3 = Temp1 / (Temp2 / c4DEC);
	IKA24 = GetArcCos(T3);

	FemurAngle1[LegIKLegNr] = -(long) (IKA14 + IKA24) * 180
     de0:	44040e42 	.word	0x44040e42
			/ 3141+ 900 + CFEMURHORNOFFSET1(LegIKLegNr);  //Normal

	//IKTibiaAngle
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     de4:	018e080e 	.word	0x018e080e
     de8:	00000014 	.word	0x00000014
			+ ((long) (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr])
					* (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))) * c4DEC
			- ((long) IKSW2 * IKSW2));
	Temp2 = 2 * ((long) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])))
			* (long) ((byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]));
	GetArcCos(Temp1 / Temp2);
     dec:	00000c98 	.word	0x00000c98
     df0:	08004074 	.word	0x08004074
     df4:	00000030 	.word	0x00000030
     df8:	46040e42 	.word	0x46040e42
     dfc:	018e080e 	.word	0x018e080e
     e00:	00000014 	.word	0x00000014
     e04:	00000c98 	.word	0x00000c98
     e08:	080040a4 	.word	0x080040a4

	TibiaAngle1[LegIKLegNr] = -(1450 - (long) AngleRad4 * 180 / 3141
     e0c:	00000010 	.word	0x00000010
     e10:	44040e42 	.word	0x44040e42
     e14:	018e080e 	.word	0x018e080e
     e18:	00000014 	.word	0x00000014
     e1c:	00000c98 	.word	0x00000c98
     e20:	080040b4 	.word	0x080040b4
     e24:	00000048 	.word	0x00000048
     e28:	44040e42 	.word	0x44040e42
			+ CTIBIAHORNOFFSET1(LegIKLegNr)); //!!!!!!!!!!!!145 instead of 1800

	//Set the Solution quality
	if (IKSW2
     e2c:	018e080e 	.word	0x018e080e
			- ((long) IKSW2 * IKSW2));
	Temp2 = 2 * ((long) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])))
			* (long) ((byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]));
	GetArcCos(Temp1 / Temp2);

	TibiaAngle1[LegIKLegNr] = -(1450 - (long) AngleRad4 * 180 / 3141
     e30:	00000014 	.word	0x00000014
			+ CTIBIAHORNOFFSET1(LegIKLegNr)); //!!!!!!!!!!!!145 instead of 1800

	//Set the Solution quality
	if (IKSW2
     e34:	00000c98 	.word	0x00000c98
     e38:	080040fc 	.word	0x080040fc
     e3c:	00000028 	.word	0x00000028
     e40:	44040e42 	.word	0x44040e42
     e44:	018e080e 	.word	0x018e080e
			< ((word) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
					+ (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]) - 30)
					* c2DEC))
		IKSolution = 1;
     e48:	00000014 	.word	0x00000014
	else {
		if (IKSW2
     e4c:	00000c98 	.word	0x00000c98
     e50:	08004124 	.word	0x08004124
				< ((word) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
						+ (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))
						* c2DEC))
			IKSolutionWarning = 1;
     e54:	0000000c 	.word	0x0000000c
     e58:	42040e42 	.word	0x42040e42
		else
			IKSolutionError = 1;
     e5c:	018e080e 	.word	0x018e080e
	}

}
     e60:	00000014 	.word	0x00000014
     e64:	00000c98 	.word	0x00000c98
     e68:	08004130 	.word	0x08004130
     e6c:	00000028 	.word	0x00000028
     e70:	42040e42 	.word	0x42040e42
     e74:	018e080e 	.word	0x018e080e
     e78:	0000000c 	.word	0x0000000c
     e7c:	ffffffff 	.word	0xffffffff
     e80:	7c010001 	.word	0x7c010001
     e84:	000d0c0e 	.word	0x000d0c0e
     e88:	0000000c 	.word	0x0000000c
     e8c:	00000e78 	.word	0x00000e78
     e90:	08004158 	.word	0x08004158
     e94:	00000014 	.word	0x00000014
     e98:	0000000c 	.word	0x0000000c
     e9c:	00000e78 	.word	0x00000e78
     ea0:	0800416c 	.word	0x0800416c
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ea4:	0000000c 	.word	0x0000000c
	if (sVal < s) {
     ea8:	0000000c 	.word	0x0000000c
     eac:	00000e78 	.word	0x00000e78
		return s;
	}

	s = (short) pgm_read_word(sMax);
     eb0:	08004178 	.word	0x08004178
     eb4:	0000000c 	.word	0x0000000c
     eb8:	0000000c 	.word	0x0000000c

		return s;
	}
	return sVal;

}
     ebc:	00000e78 	.word	0x00000e78
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     ec0:	08004184 	.word	0x08004184
}

//--------------------------------------------------------------------
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
     ec4:	0000000c 	.word	0x0000000c
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     ec8:	0000000c 	.word	0x0000000c
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ecc:	00000e78 	.word	0x00000e78
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
     ed0:	08004190 	.word	0x08004190
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ed4:	0000000c 	.word	0x0000000c
	if (sVal < s) {
     ed8:	0000000c 	.word	0x0000000c
     edc:	00000e78 	.word	0x00000e78
     ee0:	0800419c 	.word	0x0800419c
		return s;
	}

	s = (short) pgm_read_word(sMax);
     ee4:	0000000c 	.word	0x0000000c
     ee8:	0000000c 	.word	0x0000000c
     eec:	00000e78 	.word	0x00000e78
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
     ef0:	080041a8 	.word	0x080041a8
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ef4:	00000010 	.word	0x00000010
	if (sVal < s) {
     ef8:	0000000c 	.word	0x0000000c
     efc:	00000e78 	.word	0x00000e78
     f00:	080041b8 	.word	0x080041b8
		return s;
	}

	s = (short) pgm_read_word(sMax);
     f04:	0000000c 	.word	0x0000000c
     f08:	0000000c 	.word	0x0000000c
     f0c:	00000e78 	.word	0x00000e78
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     f10:	080041c4 	.word	0x080041c4
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
     f14:	0000000c 	.word	0x0000000c
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     f18:	0000000c 	.word	0x0000000c
	if (sVal < s) {
     f1c:	00000e78 	.word	0x00000e78
     f20:	080041d0 	.word	0x080041d0
     f24:	0000000c 	.word	0x0000000c
		return s;
	}

	s = (short) pgm_read_word(sMax);
     f28:	0000000c 	.word	0x0000000c
     f2c:	00000e78 	.word	0x00000e78
     f30:	080041dc 	.word	0x080041dc
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
				FemurAngle1[LegIndex], &cFemurMin1[LegIndex],
				&cFemurMax1[LegIndex]);
		TibiaAngle1[LegIndex] = CheckServoAngleBounds(s++,
     f34:	0000000c 	.word	0x0000000c
     f38:	0000000c 	.word	0x0000000c
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     f3c:	00000e78 	.word	0x00000e78
     f40:	080041e8 	.word	0x080041e8
				TibiaAngle1[LegIndex], &cTibiaMin1[LegIndex],
				&cTibiaMax1[LegIndex]);

	}
#endif
}
     f44:	00000018 	.word	0x00000018
     f48:	00000018 	.word	0x00000018
     f4c:	00000e78 	.word	0x00000e78
     f50:	08004200 	.word	0x08004200
     f54:	00000120 	.word	0x00000120
     f58:	8e100e42 	.word	0x8e100e42
     f5c:	85028601 	.word	0x85028601
     f60:	00048403 	.word	0x00048403
     f64:	00000018 	.word	0x00000018
     f68:	00000e78 	.word	0x00000e78
     f6c:	08004320 	.word	0x08004320
// SmoothControl (From Zenta) -  This function makes the body
//            rotation and translation much smoother
//--------------------------------------------------------------------
short SmoothControl(short CtrlMoveInp, short CtrlMoveOut, byte CtrlDivider) {

	if (CtrlMoveOut < (CtrlMoveInp - 4))
     f70:	000000f8 	.word	0x000000f8
     f74:	440c0e42 	.word	0x440c0e42
		return CtrlMoveOut + abs((CtrlMoveOut - CtrlMoveInp) / CtrlDivider);
     f78:	018e100e 	.word	0x018e100e
     f7c:	03840285 	.word	0x03840285
     f80:	00000014 	.word	0x00000014
     f84:	00000e78 	.word	0x00000e78
     f88:	08004418 	.word	0x08004418
     f8c:	00000044 	.word	0x00000044
     f90:	44040e42 	.word	0x44040e42
	else if (CtrlMoveOut > (CtrlMoveInp + 4))
     f94:	018e100e 	.word	0x018e100e
		return CtrlMoveOut - abs((CtrlMoveOut - CtrlMoveInp) / CtrlDivider);
     f98:	00000014 	.word	0x00000014
     f9c:	00000e78 	.word	0x00000e78
     fa0:	0800445c 	.word	0x0800445c
     fa4:	0000000c 	.word	0x0000000c
     fa8:	42040e42 	.word	0x42040e42
     fac:	018e080e 	.word	0x018e080e
     fb0:	00000014 	.word	0x00000014

	return CtrlMoveInp;
}
     fb4:	00000e78 	.word	0x00000e78
// GetLegsXZLength -
//--------------------------------------------------------------------
word g_wLegsXZLength = 0xffff;
word GetLegsXZLength(void) {
	// Could save away or could do a little math on one leg...
	if (g_wLegsXZLength != 0xffff)
     fb8:	08004468 	.word	0x08004468
     fbc:	00000030 	.word	0x00000030
     fc0:	42040e42 	.word	0x42040e42

//--------------------------------------------------------------------
// GetLegsXZLength -
//--------------------------------------------------------------------
word g_wLegsXZLength = 0xffff;
word GetLegsXZLength(void) {
     fc4:	018e080e 	.word	0x018e080e
	// Could save away or could do a little math on one leg...
	if (g_wLegsXZLength != 0xffff)
		return g_wLegsXZLength;

	return isqrt32((LegPosX[0] * LegPosX[0]) + (LegPosZ[0] * LegPosZ[0]));
     fc8:	0000000c 	.word	0x0000000c
     fcc:	ffffffff 	.word	0xffffffff
     fd0:	7c010001 	.word	0x7c010001
     fd4:	000d0c0e 	.word	0x000d0c0e
     fd8:	0000001c 	.word	0x0000001c
     fdc:	00000fc8 	.word	0x00000fc8
}
     fe0:	00000000 	.word	0x00000000
     fe4:	0000006a 	.word	0x0000006a
     fe8:	8e140e42 	.word	0x8e140e42
     fec:	86028701 	.word	0x86028701

#ifndef MAX_XZ_LEG_ADJUST
#define MAX_XZ_LEG_ADJUST   (word)(cCoxaLength[0]+cTibiaLength[0] + cFemurLength[0]/4)
#endif

void AdjustLegPositions(word XZLength1) {
     ff0:	84048503 	.word	0x84048503
     ff4:	00000005 	.word	0x00000005
     ff8:	0000001c 	.word	0x0000001c
     ffc:	00000fc8 	.word	0x00000fc8
    1000:	00000000 	.word	0x00000000
		XZLength1 = MAX_XZ_LEG_ADJUST;
	if (XZLength1 < MIN_XZ_LEG_ADJUST)
		XZLength1 = MIN_XZ_LEG_ADJUST;

	// see if same length as when we came in
	if (XZLength1 == g_wLegsXZLength)
    1004:	0000004a 	.word	0x0000004a
    1008:	8e140e42 	.word	0x8e140e42
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		GetSinCos((short) pgm_read_word(&cCoxaAngle1[LegIndex]));

		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
    100c:	86028701 	.word	0x86028701

	// see if same length as when we came in
	if (XZLength1 == g_wLegsXZLength)
		return;

	g_wLegsXZLength = XZLength1;
    1010:	84048503 	.word	0x84048503

	u8 LegIndex;
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		GetSinCos((short) pgm_read_word(&cCoxaAngle1[LegIndex]));
    1014:	180e4405 	.word	0x180e4405
    1018:	0000001c 	.word	0x0000001c

		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
    101c:	00000fc8 	.word	0x00000fc8
    1020:	00000000 	.word	0x00000000
    1024:	00000146 	.word	0x00000146
    1028:	42140e42 	.word	0x42140e42
    102c:	018e400e 	.word	0x018e400e
    1030:	03860287 	.word	0x03860287
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
    1034:	05840485 	.word	0x05840485
    1038:	0000000c 	.word	0x0000000c
    103c:	00000fc8 	.word	0x00000fc8
    1040:	00000000 	.word	0x00000000
    1044:	00000014 	.word	0x00000014
    1048:	0000000c 	.word	0x0000000c
		return;

	g_wLegsXZLength = XZLength1;

	u8 LegIndex;
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    104c:	00000fc8 	.word	0x00000fc8
		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
	}

	// Make sure we cycle through one gait to have the legs all move into their new locations...
	g_InControlState.ForceGaitStepCnt = g_InControlState.gaitCur.StepsInGait;
    1050:	00000000 	.word	0x00000000
    1054:	0000000a 	.word	0x0000000a
}
    1058:	00000020 	.word	0x00000020
    105c:	00000fc8 	.word	0x00000fc8
    1060:	00000000 	.word	0x00000000
    1064:	00000030 	.word	0x00000030
    1068:	420c0e42 	.word	0x420c0e42
    106c:	0e42100e 	.word	0x0e42100e
    1070:	83048e18 	.word	0x83048e18
    1074:	81028201 	.word	0x81028201
    1078:	00000003 	.word	0x00000003
		g_InControlState.aCoxaInitAngle1[LegIndex] = (short)pgm_read_word(&cCoxaAngle1[LegIndex]);
#endif
	}
	g_wLegsXZLength = 0xffff;
#endif
}
    107c:	00000020 	.word	0x00000020
		else if (g_InControlState.aCoxaInitAngle1[LegIndex] < -700)
		g_InControlState.aCoxaInitAngle1[LegIndex] = -700;
	}
	g_wLegsXZLength = 0xffff;
#endif
}
    1080:	00000fc8 	.word	0x00000fc8
//     to be appropriate for the current y location of the body...
//--------------------------------------------------------------------

u8 g_iLegInitIndex = 0x00; // remember which index we are currently using...

void AdjustLegPositionsToBodyHeight() {
    1084:	00000000 	.word	0x00000000
    1088:	0000002c 	.word	0x0000002c
#ifdef CNT_HEX_INITS
	// Lets see which of our units we should use...
	// Note: We will also limit our body height here...
	if (g_InControlState.BodyPos.y
    108c:	42100e42 	.word	0x42100e42
			> (short) pgm_read_byte(&g_abHexMaxBodyY[CNT_HEX_INITS-1]))
		g_InControlState.BodyPos.y = (short) pgm_read_byte(
    1090:	058e140e 	.word	0x058e140e
				&g_abHexMaxBodyY[CNT_HEX_INITS-1]);

	u8 i;
	word XZLength1 = pgm_read_byte(&g_abHexIntXZ[CNT_HEX_INITS-1]);
	for (i = 0; i < (CNT_HEX_INITS - 1); i++) { // Don't need to look at last entry as we already init to assume this one...
		if (g_InControlState.BodyPos.y
    1094:	02820183 	.word	0x02820183
    1098:	04800381 	.word	0x04800381
				<= (short) pgm_read_byte(&g_abHexMaxBodyY[i])) {
			XZLength1 = pgm_read_byte(&g_abHexIntXZ[i]);
			break;
		}
	}
	if (i != g_iLegInitIndex) {
    109c:	00180e44 	.word	0x00180e44
				&g_abHexMaxBodyY[CNT_HEX_INITS-1]);

	u8 i;
	word XZLength1 = pgm_read_byte(&g_abHexIntXZ[CNT_HEX_INITS-1]);
	for (i = 0; i < (CNT_HEX_INITS - 1); i++) { // Don't need to look at last entry as we already init to assume this one...
		if (g_InControlState.BodyPos.y
    10a0:	0000000c 	.word	0x0000000c
    10a4:	ffffffff 	.word	0xffffffff
    10a8:	7c010001 	.word	0x7c010001
				<= (short) pgm_read_byte(&g_abHexMaxBodyY[i])) {
			XZLength1 = pgm_read_byte(&g_abHexIntXZ[i]);
			break;
		}
	}
	if (i != g_iLegInitIndex) {
    10ac:	000d0c0e 	.word	0x000d0c0e
		g_iLegInitIndex = i;  // remember the current index...
		AdjustLegPositions(XZLength1);
    10b0:	00000014 	.word	0x00000014
	}
#endif // CNT_HEX_INITS
}
    10b4:	000010a0 	.word	0x000010a0
    10b8:	08004498 	.word	0x08004498
    10bc:	0000002c 	.word	0x0000002c
}
//--------------------------------------------------------------------
//[CHECK VOLTAGE]
//Reads the input voltage and shuts down the bot when the power drops
byte s_bLVBeepCnt;
boolean CheckVoltage() {
    10c0:	44040e42 	.word	0x44040e42
    10c4:	018e080e 	.word	0x018e080e
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10c8:	00000014 	.word	0x00000014

	// BUGBUG:: if voltage is 0 it failed to retrieve don't hang program...
	//    if (!Voltage)
	//      return;

	if (!g_fLowVoltageShutdown) {
    10cc:	000010a0 	.word	0x000010a0
boolean CheckVoltage() {
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10d0:	080044c4 	.word	0x080044c4

	// BUGBUG:: if voltage is 0 it failed to retrieve don't hang program...
	//    if (!Voltage)
	//      return;

	if (!g_fLowVoltageShutdown) {
    10d4:	000000f0 	.word	0x000000f0
boolean CheckVoltage() {
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10d8:	8e080e42 	.word	0x8e080e42

	if (!g_fLowVoltageShutdown) {
		/**PrintString("Voltage : ");
		Printu32d(Voltage);
		PrintString("\n");*/
		if ((Voltage < cTurnOffVol) || (Voltage >= 1999)) {
    10dc:	00028401 	.word	0x00028401
    10e0:	00000014 	.word	0x00000014
    10e4:	000010a0 	.word	0x000010a0


			//Turn off
			g_InControlState.BodyPos.x = 0;
    10e8:	080045b4 	.word	0x080045b4
			g_InControlState.TravelLength.x = 0;
			g_InControlState.TravelLength.z = 0;

#ifdef OPT_SINGLELEG
			g_InControlState.TravelLength.y = 0;
			g_InControlState.SelectedLeg = 255;
    10ec:	00000042 	.word	0x00000042
    10f0:	44040e42 	.word	0x44040e42
#endif
			g_fLowVoltageShutdown = 1;
    10f4:	018e080e 	.word	0x018e080e
			s_bLVBeepCnt = 0;    // how many times we beeped...
    10f8:	00000018 	.word	0x00000018
		if ((Voltage < cTurnOffVol) || (Voltage >= 1999)) {


			//Turn off
			g_InControlState.BodyPos.x = 0;
			g_InControlState.BodyPos.y = 0;
    10fc:	000010a0 	.word	0x000010a0
			g_InControlState.BodyPos.z = 0;
			g_InControlState.BodyRot1.x = 0;
    1100:	080045f8 	.word	0x080045f8
			g_InControlState.BodyRot1.y = 0;
			g_InControlState.BodyRot1.z = 0;
    1104:	0000003e 	.word	0x0000003e
			g_InControlState.TravelLength.x = 0;
			g_InControlState.TravelLength.z = 0;
    1108:	8e100e42 	.word	0x8e100e42
#ifdef OPT_SINGLELEG
			g_InControlState.TravelLength.y = 0;
			g_InControlState.SelectedLeg = 255;
#endif
			g_fLowVoltageShutdown = 1;
			s_bLVBeepCnt = 0;    // how many times we beeped...
    110c:	85028601 	.word	0x85028601
			g_InControlState.fRobotOn = false;
    1110:	00048403 	.word	0x00048403
		}
#ifdef cTurnOnVol
	} else if ((Voltage > cTurnOnVol) && (Voltage < 1999)) {
    1114:	000c      	.short	0x000c
    1116:	0000      	.short	0x0000
    1118:	ffffffff 	.word	0xffffffff

		g_fLowVoltageShutdown = 0;
    111c:	7c010001 	.word	0x7c010001
    1120:	000d0c0e 	.word	0x000d0c0e

#endif
	} else {
		if (s_bLVBeepCnt < 5) {
    1124:	00000014 	.word	0x00000014
    1128:	00001114 	.word	0x00001114
			s_bLVBeepCnt++;
    112c:	08004638 	.word	0x08004638

			//MSound( 1, 45, 2000);
			Buzzed(45, 2000);
    1130:	00000024 	.word	0x00000024
    1134:	44040e42 	.word	0x44040e42
    1138:	018e080e 	.word	0x018e080e
		}
		mDelay(2000);
    113c:	0000000c 	.word	0x0000000c
    1140:	ffffffff 	.word	0xffffffff
    1144:	7c010001 	.word	0x7c010001
	}
#endif

	return g_fLowVoltageShutdown;
}
    1148:	000d0c0e 	.word	0x000d0c0e
    114c:	00000014 	.word	0x00000014
    1150:	0000113c 	.word	0x0000113c
    1154:	0800465c 	.word	0x0800465c
    1158:	0000002c 	.word	0x0000002c

//==============================================================================
// BackgroundProcess - Allows us to have some background processing for those
//    servo drivers that need us to do things like polling...
//==============================================================================
void BackgroundProcess(void) {
    115c:	44040e42 	.word	0x44040e42
    1160:	018e080e 	.word	0x018e080e
	if (g_fAXSpeedControl)
    1164:	0000000c 	.word	0x0000000c
		return;  // nothing to do in this mode...

	if (ServosEnabled) {
		//DebugToggle(A3);
		BioloidControllerEx_interpolateStep(false); // Do our background stuff...
    1168:	ffffffff 	.word	0xffffffff
		Battery_Monitor_Alarm();
    116c:	7c010001 	.word	0x7c010001
	}
}
    1170:	000d0c0e 	.word	0x000d0c0e
    1174:	00000018 	.word	0x00000018
//Function that gets called from the main loop if the robot is not logically
//     on.  Gives us a chance to play some...
//--------------------------------------------------------------------
static u8 g_iIdleServoNum = (u8) - 1;
static u8 g_iIdleLedState = 1;  // what state to we wish to set...
void IdleTime(void) {
    1178:	00001164 	.word	0x00001164
    117c:	08004688 	.word	0x08004688
	// Each time we call this set servos LED on or off...
	g_iIdleServoNum++;
    1180:	0000003c 	.word	0x0000003c
	if (g_iIdleServoNum >= NUMSERVOS) {
    1184:	420c0e42 	.word	0x420c0e42
    1188:	018e100e 	.word	0x018e100e
		g_iIdleServoNum = 0;
    118c:	03840285 	.word	0x03840285
		g_iIdleLedState = 1 - g_iIdleLedState;
    1190:	00000014 	.word	0x00000014
    1194:	00001164 	.word	0x00001164
	}
	dxl_write_byte(pgm_read_byte(&cPinTable[g_iIdleServoNum]), AXM_LED,
    1198:	080046c4 	.word	0x080046c4
    119c:	0000000e 	.word	0x0000000e
    11a0:	44040e42 	.word	0x44040e42
    11a4:	018e080e 	.word	0x018e080e
    11a8:	0000000c 	.word	0x0000000c
			g_iIdleLedState);
	//ax12ReadPacket(6);  // get the response...


}
    11ac:	ffffffff 	.word	0xffffffff
    11b0:	7c010001 	.word	0x7c010001
    11b4:	000d0c0e 	.word	0x000d0c0e
    11b8:	0000000c 	.word	0x0000000c

//--------------------------------------------------------------------
//[SetRegOnAllServos] Function that is called to set the state of one
//  register in all of the servos, like Torque on...
//--------------------------------------------------------------------
void SetRegOnAllServos(u8 bReg, u8 bVal) {
    11bc:	000011a8 	.word	0x000011a8
    11c0:	080046d4 	.word	0x080046d4
    11c4:	00000040 	.word	0x00000040
	 ax12write(bVal);

  }
  ax12write(0xff - (checksum % 256));
  setRX(0);*/
	 dxl_set_txpacket_id (BROADCAST_ID);
    11c8:	00000014 	.word	0x00000014
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    11cc:	000011a8 	.word	0x000011a8
	dxl_set_txpacket_parameter(0,bReg);
    11d0:	08004714 	.word	0x08004714
    11d4:	00000016 	.word	0x00000016
	dxl_set_txpacket_parameter(1,2);
    11d8:	4a040e42 	.word	0x4a040e42
    11dc:	018e080e 	.word	0x018e080e
    11e0:	0000000c 	.word	0x0000000c
  int i;
	for (i = 0; i < poseSize; i++) {
		byte id = pgm_read_byte(&cPinTable[i]);
		dxl_set_txpacket_parameter(2 + 3 * i, id);
    11e4:	000011a8 	.word	0x000011a8
    11e8:	0800472c 	.word	0x0800472c
    11ec:	00000028 	.word	0x00000028
    11f0:	0000000c 	.word	0x0000000c
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
    11f4:	000011a8 	.word	0x000011a8
    11f8:	08004754 	.word	0x08004754
    11fc:	00000038 	.word	0x00000038
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
    1200:	0000000c 	.word	0x0000000c
    1204:	000011a8 	.word	0x000011a8
    1208:	0800478c 	.word	0x0800478c
	dxl_set_txpacket_parameter(1,2);
  int i;
	for (i = 0; i < poseSize; i++) {
		byte id = pgm_read_byte(&cPinTable[i]);
		dxl_set_txpacket_parameter(2 + 3 * i, id);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
    120c:	00000038 	.word	0x00000038
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
    1210:	0000000c 	.word	0x0000000c
	 dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0,bReg);
	dxl_set_txpacket_parameter(1,2);
  int i;
	for (i = 0; i < poseSize; i++) {
    1214:	000011a8 	.word	0x000011a8
    1218:	080047c4 	.word	0x080047c4
    121c:	00000018 	.word	0x00000018
		dxl_set_txpacket_parameter(2 + 3 * i, id);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
	}

	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
    1220:	00000014 	.word	0x00000014
    1224:	000011a8 	.word	0x000011a8
    1228:	080047dc 	.word	0x080047dc
#ifdef DEBUG_BIOLOIDEX
	PrintString("DriverAX12 --- SetRegOnAllServos ---\n");
#endif
	dxl_txrx_packet();
    122c:	000000fc 	.word	0x000000fc

	u16 CommStatus = dxl_get_result();
    1230:	8e080e44 	.word	0x8e080e44
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
    1234:	00028401 	.word	0x00028401
		PrintErrorCode();
    1238:	00000014 	.word	0x00000014
	else
		PrintCommStatus(CommStatus);
    123c:	000011a8 	.word	0x000011a8
#endif
}
    1240:	080048d8 	.word	0x080048d8
    1244:	00000038 	.word	0x00000038
    1248:	44040e42 	.word	0x44040e42
//--------------------------------------------------------------------
//[MakeSureServosAreOn] Function that is called to handle when you are
//  transistioning from servos all off to being on.  May need to read
//  in the current pose...
//--------------------------------------------------------------------
void MakeSureServosAreOn(void) {
    124c:	018e080e 	.word	0x018e080e

	if (ServosEnabled) {

		if (!g_fServosFree)
    1250:	0000000c 	.word	0x0000000c
			return;    // we are not free

		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		if (g_fAXSpeedControl) {
    1254:	ffffffff 	.word	0xffffffff
    1258:	7c010001 	.word	0x7c010001

			int i;
			for (i = 0; i < NUMSERVOS; i++) {
				g_awGoalAXPos[i] = dxl_read_word(pgm_read_byte(&cPinTable[i]),
    125c:	000d0c0e 	.word	0x000d0c0e
    1260:	00000014 	.word	0x00000014
    1264:	00001250 	.word	0x00001250
    1268:	08004910 	.word	0x08004910
						AXM_PRESENT_POSITION_L);
				mDelay(25);
    126c:	00000040 	.word	0x00000040
    1270:	44040e42 	.word	0x44040e42

		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		if (g_fAXSpeedControl) {

			int i;
			for (i = 0; i < NUMSERVOS; i++) {
    1274:	018e080e 	.word	0x018e080e
    1278:	00000014 	.word	0x00000014
				g_awGoalAXPos[i] = dxl_read_word(pgm_read_byte(&cPinTable[i]),
						AXM_PRESENT_POSITION_L);
				mDelay(25);
			}
		} else {
			BioloidControllerEx_readPose();
    127c:	00001250 	.word	0x00001250
		}

		SetRegOnAllServos(AXM_TORQUE_ENABLE, 1);  // Use sync write to do it.
    1280:	08004950 	.word	0x08004950
    1284:	00000024 	.word	0x00000024

		CommanderInputController_AllowControllerInterrupts(true);
		g_fServosFree = false;
    1288:	44040e42 	.word	0x44040e42
	}

}
    128c:	018e080e 	.word	0x018e080e
    1290:	0000001c 	.word	0x0000001c
    1294:	00001250 	.word	0x00001250
    1298:	08004974 	.word	0x08004974
    129c:	000000e8 	.word	0x000000e8

//------------------------------------------------------------------------------------------
//[BeginServoUpdate] Does whatever preperation that is needed to starrt a move of our servos
//------------------------------------------------------------------------------------------
void BeginServoUpdate(void)    // Start the update
		{
    12a0:	42100e42 	.word	0x42100e42

	MakeSureServosAreOn();
    12a4:	018e280e 	.word	0x018e280e
	if (ServosEnabled) {

		if (g_fAXSpeedControl) {
    12a8:	03850286 	.word	0x03850286
    12ac:	00000484 	.word	0x00000484

#ifdef USE_AX12_SPEED_CONTROL
			// If we are trying our own Servo control need to save away the new positions...
			byte i;
			for (i = 0; i < NUMSERVOS; i++) {
				g_awCurAXPos[i] = g_awGoalAXPos[i];
    12b0:	0000001c 	.word	0x0000001c
    12b4:	00001250 	.word	0x00001250
    12b8:	08004a5c 	.word	0x08004a5c
		if (g_fAXSpeedControl) {

#ifdef USE_AX12_SPEED_CONTROL
			// If we are trying our own Servo control need to save away the new positions...
			byte i;
			for (i = 0; i < NUMSERVOS; i++) {
    12bc:	000001d8 	.word	0x000001d8
				g_awCurAXPos[i] = g_awGoalAXPos[i];
			}
#endif
		} else
			BioloidControllerEx_interpolateStep(true); // Make sure we call at least once
    12c0:	42140e42 	.word	0x42140e42
    12c4:	018e200e 	.word	0x018e200e

	}
}
    12c8:	03860287 	.word	0x03860287
    12cc:	05840485 	.word	0x05840485
    12d0:	0000001c 	.word	0x0000001c
    12d4:	00001250 	.word	0x00001250
}

//--------------------------------------------------------------------
//[FREE SERVOS] Frees all the servos
//--------------------------------------------------------------------
void FreeServos(void) {
    12d8:	08004c34 	.word	0x08004c34
    12dc:	0000006e 	.word	0x0000006e

	if (!g_fServosFree) {
    12e0:	46100e42 	.word	0x46100e42
		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		SetRegOnAllServos(AXM_TORQUE_ENABLE, 0);  // do this as one statement...
    12e4:	018e180e 	.word	0x018e180e
    12e8:	03850286 	.word	0x03850286
    12ec:	00000484 	.word	0x00000484
		byte i;
		for (i = 0; i < NUMSERVOS; i++) {
			Relax(pgm_read_byte(&cPinTable[i]));
    12f0:	00000014 	.word	0x00000014
    12f4:	00001250 	.word	0x00001250
    12f8:	08004ca4 	.word	0x08004ca4

	if (!g_fServosFree) {
		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		SetRegOnAllServos(AXM_TORQUE_ENABLE, 0);  // do this as one statement...
		byte i;
		for (i = 0; i < NUMSERVOS; i++) {
    12fc:	00000094 	.word	0x00000094
			Relax(pgm_read_byte(&cPinTable[i]));
		}
		CommanderInputController_AllowControllerInterrupts(true);
		g_fServosFree = true;
    1300:	42040e42 	.word	0x42040e42
	}
}
    1304:	018e080e 	.word	0x018e080e
    1308:	00000014 	.word	0x00000014
    130c:	00001250 	.word	0x00001250
extern void SetRegOnAllServos(u8 bReg, u8 bVal);

//--------------------------------------------------------------------
//Init
//--------------------------------------------------------------------
void Servo_Init(void) {
    1310:	08004d38 	.word	0x08004d38
	// First lets get the actual servo positions for all of our servos...
	//pinMode(0, OUTPUT);
	g_fServosFree = true;
    1314:	0000002c 	.word	0x0000002c

  poseSize = NUMSERVOS;
    1318:	46040e42 	.word	0x46040e42
    131c:	018e080e 	.word	0x018e080e
  BioloidControllerEx_readPose();
    1320:	0000000c 	.word	0x0000000c
#ifdef cVoltagePin
	for (byte i=0; i < 8; i++)
	GetBatteryVoltage();  // init the voltage pin
#endif

	g_fAXSpeedControl = false;
    1324:	ffffffff 	.word	0xffffffff
    1328:	7c010001 	.word	0x7c010001



	// Added - try to speed things up later if we do a query...
	SetRegOnAllServos(AXM_RETURN_DELAY_TIME, 0); // tell servos to give us back their info as quick as they can...
    132c:	000d0c0e 	.word	0x000d0c0e
    1330:	0000000c 	.word	0x0000000c

}
    1334:	00001320 	.word	0x00001320
    1338:	08004d64 	.word	0x08004d64
    133c:	00000014 	.word	0x00000014
    1340:	0000000c 	.word	0x0000000c

}

void setupPhoenix() {

	g_fShowDebugPrompt = true;
    1344:	00001320 	.word	0x00001320
void readSensors(){


}

void setupPhoenix() {
    1348:	08004d78 	.word	0x08004d78

	g_fShowDebugPrompt = true;
	g_fDebugOutput = false;
    134c:	0000003c 	.word	0x0000003c
    1350:	0000000c 	.word	0x0000000c
	//init BioloidEx
	BioloidControllerEx();
    1354:	00001320 	.word	0x00001320

	// Init our ServoDriver
	Servo_Init();
    1358:	08004db4 	.word	0x08004db4

	mDelay(10);
    135c:	00000028 	.word	0x00000028

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		LegPosX[LegIndex] = (short) pgm_read_word(&cInitPosX[LegIndex]); //Set start positions for each leg
    1360:	0000000c 	.word	0x0000000c
    1364:	00001320 	.word	0x00001320
		LegPosY[LegIndex] = (short) pgm_read_word(&cInitPosY[LegIndex]);
    1368:	08004ddc 	.word	0x08004ddc
    136c:	00000018 	.word	0x00000018
		LegPosZ[LegIndex] = (short) pgm_read_word(&cInitPosZ[LegIndex]);
    1370:	0000000c 	.word	0x0000000c

	mDelay(10);

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		LegPosX[LegIndex] = (short) pgm_read_word(&cInitPosX[LegIndex]); //Set start positions for each leg
    1374:	00001320 	.word	0x00001320
    1378:	08004df4 	.word	0x08004df4
		LegPosY[LegIndex] = (short) pgm_read_word(&cInitPosY[LegIndex]);
    137c:	00000048 	.word	0x00000048
    1380:	0000001c 	.word	0x0000001c
		LegPosZ[LegIndex] = (short) pgm_read_word(&cInitPosZ[LegIndex]);
    1384:	00001320 	.word	0x00001320
    1388:	08004e3c 	.word	0x08004e3c
    138c:	00000054 	.word	0x00000054
	Servo_Init();

	mDelay(10);

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    1390:	8e140e42 	.word	0x8e140e42
    1394:	86028701 	.word	0x86028701
    1398:	84048503 	.word	0x84048503

	ResetLegInitAngles();

	//Single leg control. Make sure no leg is selected
#ifdef OPT_SINGLELEG
	g_InControlState.SelectedLeg = 255; // No Leg selected
    139c:	200e4805 	.word	0x200e4805
    13a0:	0000000c 	.word	0x0000000c
	g_InControlState.PrevSelectedLeg = 255;
    13a4:	00001320 	.word	0x00001320
#endif
	//Body Positions
	g_InControlState.BodyPos.x = 0;
    13a8:	08004e90 	.word	0x08004e90
	g_InControlState.BodyPos.y = 0;
	g_InControlState.BodyPos.z = 0;
    13ac:	0000002c 	.word	0x0000002c

//Body Rotations
	g_InControlState.BodyRot1.x = 0;
	g_InControlState.BodyRot1.y = 0;
    13b0:	0000001c 	.word	0x0000001c
	g_InControlState.BodyRot1.z = 0;
	g_InControlState.BodyRotOffset.x = 0;
    13b4:	00001320 	.word	0x00001320
	g_InControlState.BodyRotOffset.y = 0; //Input Y offset value to adjust centerpoint of rotation
	g_InControlState.BodyRotOffset.z = 0;
    13b8:	08004ebc 	.word	0x08004ebc

	//Gait
	g_InControlState.GaitType = 0;
    13bc:	0000005c 	.word	0x0000005c
	g_InControlState.BalanceMode = 0;
    13c0:	8e140e42 	.word	0x8e140e42
	g_InControlState.LegLiftHeight = 50;
	g_InControlState.ForceGaitStepCnt = 0; // added to try to adjust starting positions depending on height...
    13c4:	86028701 	.word	0x86028701
	g_InControlState.GaitStep = 1;
    13c8:	84048503 	.word	0x84048503
}

void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {
    13cc:	200e4805 	.word	0x200e4805
	g_InControlState.BodyRotOffset.z = 0;

	//Gait
	g_InControlState.GaitType = 0;
	g_InControlState.BalanceMode = 0;
	g_InControlState.LegLiftHeight = 50;
    13d0:	0000000c 	.word	0x0000000c
    13d4:	00001320 	.word	0x00001320
void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {

		g_InControlState.gaitCur = APG[g_InControlState.GaitType];
    13d8:	08004f18 	.word	0x08004f18
    13dc:	00000014 	.word	0x00000014
    13e0:	00000014 	.word	0x00000014
//==============================================================================

// If both PS2 and XBee are defined then we will become secondary to the xbee
void CommanderInputController_Init(void) {

	g_BodyYOffset = 0;
    13e4:	00001320 	.word	0x00001320
    13e8:	08004f2c 	.word	0x08004f2c
    13ec:	00000078 	.word	0x00000078
	g_BodyYShift = 0;
	//begin(XBEE_BAUD);
	GPSeq = 0;  // init to something...
    13f0:	44040e42 	.word	0x44040e42
    13f4:	018e080e 	.word	0x018e080e

	ControlMode = WALKMODE;
    13f8:	00000014 	.word	0x00000014
	HeightSpeedMode = NORM_NORM;
    13fc:	00001320 	.word	0x00001320
	//    DoubleHeightOn = false;
	DoubleTravelOn = false;
    1400:	08004fa4 	.word	0x08004fa4
	bJoystickWalkMode = 0;
    1404:	00000012 	.word	0x00000012
	GaitSelect();

	CommanderInputController_Init();

	// Servo Driver
	ServoMoveTime = 150;
    1408:	46040e42 	.word	0x46040e42
	g_InControlState.fRobotOn = 0;
    140c:	018e080e 	.word	0x018e080e
	g_fLowVoltageShutdown = false;
    1410:	00000018 	.word	0x00000018

}
    1414:	00001320 	.word	0x00001320
    1418:	08004fb8 	.word	0x08004fb8
    141c:	00000054 	.word	0x00000054
    1420:	8e100e42 	.word	0x8e100e42
    1424:	85028601 	.word	0x85028601
    1428:	00048403 	.word	0x00048403
    142c:	00000014 	.word	0x00000014
    1430:	00001320 	.word	0x00001320
    1434:	0800500c 	.word	0x0800500c
    1438:	00000014 	.word	0x00000014
    143c:	44040e42 	.word	0x44040e42
    1440:	018e080e 	.word	0x018e080e
    1444:	00000014 	.word	0x00000014
    1448:	00001320 	.word	0x00001320
    144c:	08005020 	.word	0x08005020
    1450:	00000024 	.word	0x00000024
    1454:	44040e42 	.word	0x44040e42
    1458:	018e080e 	.word	0x018e080e
    145c:	00000014 	.word	0x00000014
    1460:	00001320 	.word	0x00001320
    1464:	08005044 	.word	0x08005044
//[CommitServoDriver Updates the positions of the servos - This outputs
//         as much of the command as we can without committing it.  This
//         allows us to once the previous update was completed to quickly
//        get the next command to start
//--------------------------------------------------------------------
void CommitServoDriver(word wMoveTime) {
    1468:	00000014 	.word	0x00000014
    146c:	44040e42 	.word	0x44040e42
    1470:	018e080e 	.word	0x018e080e


	CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    1474:	00000018 	.word	0x00000018

      }
      ax12write(0xff - (checksum % 256));
      setRX(0);
*/
  	    dxl_set_txpacket_id (BROADCAST_ID);
    1478:	00001320 	.word	0x00001320
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    147c:	08005058 	.word	0x08005058
    1480:	00000060 	.word	0x00000060
		dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
    1484:	420c0e42 	.word	0x420c0e42
    1488:	018e200e 	.word	0x018e200e
		dxl_set_txpacket_parameter(1, 2);
    148c:	03840285 	.word	0x03840285
    1490:	00000018 	.word	0x00000018
    1494:	00001320 	.word	0x00001320
    1498:	080050b8 	.word	0x080050b8
      int i;
      word wSpeed;
		for (i = 0; i < poseSize; i++) {
			wSpeed = CalculateAX12MoveSpeed(g_awCurAXPos[i], g_awGoalAXPos[i], wMoveTime);    // What order should we store these values?
    149c:	00000070 	.word	0x00000070
    14a0:	420c0e42 	.word	0x420c0e42
    14a4:	018e200e 	.word	0x018e200e
    14a8:	03840285 	.word	0x03840285
			//dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
			byte id = pgm_read_byte(&cPinTable[i]);
			dxl_set_txpacket_parameter(2 + 3 * i, id);
    14ac:	00000018 	.word	0x00000018
    14b0:	00001320 	.word	0x00001320
    14b4:	08005128 	.word	0x08005128
    14b8:	00000060 	.word	0x00000060
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(g_awGoalAXPos[i]));
    14bc:	420c0e42 	.word	0x420c0e42
    14c0:	018e200e 	.word	0x018e200e
    14c4:	03840285 	.word	0x03840285
    14c8:	00000014 	.word	0x00000014
    14cc:	00001320 	.word	0x00001320
			dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(g_awGoalAXPos[i]));
    14d0:	08005188 	.word	0x08005188
    14d4:	00000090 	.word	0x00000090
    14d8:	8e080e42 	.word	0x8e080e42
    14dc:	00028401 	.word	0x00028401
    14e0:	00000018 	.word	0x00000018
    14e4:	00001320 	.word	0x00001320
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(wSpeed));
    14e8:	08005218 	.word	0x08005218
    14ec:	00000040 	.word	0x00000040
    14f0:	8e100e42 	.word	0x8e100e42
		    dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(wSpeed));
    14f4:	85028601 	.word	0x85028601
    14f8:	00048403 	.word	0x00048403
    14fc:	00000014 	.word	0x00000014
    1500:	00001320 	.word	0x00001320
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
		dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
		dxl_set_txpacket_parameter(1, 2);
      int i;
      word wSpeed;
		for (i = 0; i < poseSize; i++) {
    1504:	08005258 	.word	0x08005258
    1508:	000000a0 	.word	0x000000a0
    150c:	8e080e42 	.word	0x8e080e42
    1510:	00028401 	.word	0x00028401
			dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(g_awGoalAXPos[i]));
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(wSpeed));
		    dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(wSpeed));
		}

		dxl_set_txpacket_length((4 + 1) * poseSize + 4);
    1514:	00000014 	.word	0x00000014
    1518:	00001320 	.word	0x00001320
    151c:	080052f8 	.word	0x080052f8
#ifdef DEBUG_BIOLOIDEX
	PrintString("DriverAX12 --- CommitServoDriver ---\n");
#endif
		dxl_txrx_packet();
    1520:	0000000c 	.word	0x0000000c

			u16 CommStatus = dxl_get_result();
    1524:	42040e42 	.word	0x42040e42
#ifdef USING_PC_UART
			if (CommStatus == DXL_RXSUCCESS)
    1528:	018e080e 	.word	0x018e080e
				PrintErrorCode();
    152c:	00000014 	.word	0x00000014
			else
				PrintCommStatus(CommStatus);
    1530:	00001320 	.word	0x00001320
    1534:	08005304 	.word	0x08005304
#endif
#endif
		} else {
			BioloidControllerEx_interpolateSetup(wMoveTime);
    1538:	00000030 	.word	0x00000030

	}

	CommanderInputController_AllowControllerInterrupts(true);

}
    153c:	8e080e42 	.word	0x8e080e42
    1540:	00028401 	.word	0x00028401
    1544:	00000014 	.word	0x00000014
    1548:	00001320 	.word	0x00001320
    154c:	08005334 	.word	0x08005334
    1550:	00000014 	.word	0x00000014
	word wCoxaSDV;        // Coxa value in servo driver units
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    1554:	46040e42 	.word	0x46040e42
    1558:	018e080e 	.word	0x018e080e
    155c:	0000000c 	.word	0x0000000c
    1560:	ffffffff 	.word	0xffffffff
    1564:	7c010001 	.word	0x7c010001


void OutputServoInfoForLeg(byte LegIndex, short sCoxaAngle1, short sFemurAngle1,
		short sTibiaAngle1)

		{
    1568:	000d0c0e 	.word	0x000d0c0e
	word wCoxaSDV;        // Coxa value in servo driver units
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    156c:	0000000c 	.word	0x0000000c
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
    1570:	0000155c 	.word	0x0000155c
    1574:	08005348 	.word	0x08005348
    1578:	00000048 	.word	0x00000048
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    157c:	0000000c 	.word	0x0000000c
    1580:	0000155c 	.word	0x0000155c
    1584:	08005390 	.word	0x08005390


void OutputServoInfoForLeg(byte LegIndex, short sCoxaAngle1, short sFemurAngle1,
		short sTibiaAngle1)

		{
    1588:	00000012 	.word	0x00000012
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    158c:	0000000c 	.word	0x0000000c
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
    1590:	0000155c 	.word	0x0000155c
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    1594:	080053a4 	.word	0x080053a4
#ifdef USE_AX12_SPEED_CONTROL
			// Save away the new positions...
			g_awGoalAXPos[FIRSTCOXAPIN + LegIndex] = wCoxaSDV; // What order should we store these values?
			g_awGoalAXPos[FIRSTFEMURPIN + LegIndex] = wFemurSDV;
    1598:	00000014 	.word	0x00000014

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
#ifdef USE_AX12_SPEED_CONTROL
			// Save away the new positions...
			g_awGoalAXPos[FIRSTCOXAPIN + LegIndex] = wCoxaSDV; // What order should we store these values?
    159c:	0000000c 	.word	0x0000000c
			g_awGoalAXPos[FIRSTFEMURPIN + LegIndex] = wFemurSDV;
    15a0:	0000155c 	.word	0x0000155c
			g_awGoalAXPos[FIRSTTIBIAPIN + LegIndex] = wTibiaSDV;
    15a4:	080053b8 	.word	0x080053b8
    15a8:	00000014 	.word	0x00000014
    15ac:	0000000c 	.word	0x0000000c

#endif
		} else {
			BioloidControllerEx_setNextPose(
    15b0:	0000155c 	.word	0x0000155c
    15b4:	080053cc 	.word	0x080053cc
					pgm_read_byte(&cPinTable[FIRSTCOXAPIN + LegIndex]),
					wCoxaSDV);
			BioloidControllerEx_setNextPose(
    15b8:	00000016 	.word	0x00000016
    15bc:	0000000c 	.word	0x0000000c
    15c0:	0000155c 	.word	0x0000155c
					pgm_read_byte(&cPinTable[FIRSTFEMURPIN + LegIndex]),
					wFemurSDV);
			BioloidControllerEx_setNextPose(
    15c4:	080053e4 	.word	0x080053e4
    15c8:	0000000a 	.word	0x0000000a
					wTibiaSDV);

		}
	}
	CommanderInputController_AllowControllerInterrupts(true); // Ok for hserial again...
}
    15cc:	0000000c 	.word	0x0000000c
    15d0:	0000155c 	.word	0x0000155c
    15d4:	080053f0 	.word	0x080053f0
    15d8:	0000000a 	.word	0x0000000a
    15dc:	0000000c 	.word	0x0000000c

void StartUpdateServos() {
    15e0:	0000155c 	.word	0x0000155c
	byte LegIndex;

	// First call off to the init...
	BeginServoUpdate();    // Start the update
    15e4:	080053fc 	.word	0x080053fc
    15e8:	0000000a 	.word	0x0000000a
    15ec:	0000000c 	.word	0x0000000c

	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		OutputServoInfoForLeg(LegIndex,
    15f0:	0000155c 	.word	0x0000155c
    15f4:	08005408 	.word	0x08005408
    15f8:	0000000a 	.word	0x0000000a
    15fc:	0000000c 	.word	0x0000000c
    1600:	0000155c 	.word	0x0000155c
    1604:	08005414 	.word	0x08005414
    1608:	00000014 	.word	0x00000014
    160c:	0000000c 	.word	0x0000000c
    1610:	0000155c 	.word	0x0000155c
    1614:	08005428 	.word	0x08005428
    1618:	0000000a 	.word	0x0000000a
    161c:	0000000c 	.word	0x0000000c
    1620:	0000155c 	.word	0x0000155c
    1624:	08005434 	.word	0x08005434
    1628:	00000010 	.word	0x00000010
    162c:	0000000c 	.word	0x0000000c
    1630:	0000155c 	.word	0x0000155c
    1634:	08005444 	.word	0x08005444
    1638:	00000014 	.word	0x00000014
    163c:	00000018 	.word	0x00000018
    1640:	0000155c 	.word	0x0000155c
	byte LegIndex;

	// First call off to the init...
	BeginServoUpdate();    // Start the update

	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    1644:	08005458 	.word	0x08005458
				cTibiaInv[LegIndex] ?
						-TibiaAngle1[LegIndex] : TibiaAngle1[LegIndex]);

	}

}
    1648:	00000096 	.word	0x00000096
    164c:	8e0c0e44 	.word	0x8e0c0e44
    1650:	84028501 	.word	0x84028501
    1654:	00000003 	.word	0x00000003
    1658:	0000000c 	.word	0x0000000c
    165c:	0000155c 	.word	0x0000155c
    1660:	080054f0 	.word	0x080054f0
#else
word g_wLastVoltage = 0xffff;    // save the last voltage we retrieved...
byte g_bLegVoltage = 0;		// what leg did we last check?
unsigned long g_ulTimeLastBatteryVoltage;
#define VOLTAGE_REPEAT_MAX  3
word GetBatteryVoltage(void) {
    1664:	00000014 	.word	0x00000014
	if (interpolating && (g_wLastVoltage != 0xffff)
    1668:	0000000c 	.word	0x0000000c
    166c:	0000155c 	.word	0x0000155c
    1670:	08005504 	.word	0x08005504
    1674:	00000006 	.word	0x00000006
    1678:	0000000c 	.word	0x0000000c
    167c:	0000155c 	.word	0x0000155c
    1680:	0800550c 	.word	0x0800550c
    1684:	0000000c 	.word	0x0000000c
			&& ((getMillis() - g_ulTimeLastBatteryVoltage)
					< VOLTAGE_MAX_TIME_BETWEEN_CALLS))
		return g_wLastVoltage;
    1688:	0000000c 	.word	0x0000000c

	register u8 bLoopCnt = VOLTAGE_REPEAT_MAX;
	do {
		register word wVoltage = dxl_read_byte(1, AXM_PRESENT_VOLTAGE);
    168c:	0000155c 	.word	0x0000155c
    1690:	08005518 	.word	0x08005518
    1694:	00000014 	.word	0x00000014
		if (wVoltage != 0xffff) {
			g_ulTimeLastBatteryVoltage = getMillis();
    1698:	0000000c 	.word	0x0000000c
			g_wLastVoltage = wVoltage * 10;
    169c:	0000155c 	.word	0x0000155c

	register u8 bLoopCnt = VOLTAGE_REPEAT_MAX;
	do {
		register word wVoltage = dxl_read_byte(1, AXM_PRESENT_VOLTAGE);
		if (wVoltage != 0xffff) {
			g_ulTimeLastBatteryVoltage = getMillis();
    16a0:	0800552c 	.word	0x0800552c
			g_wLastVoltage = wVoltage * 10;
    16a4:	00000014 	.word	0x00000014
		}
	} while (--bLoopCnt);

	return 0;

}
    16a8:	0000000c 	.word	0x0000000c
    16ac:	0000155c 	.word	0x0000155c
    16b0:	08005540 	.word	0x08005540
    16b4:	0000000c 	.word	0x0000000c
// ReadMsgs
//==============================================================================

/* process messages coming from Commander
 *  format = 0xFF RIGHT_H RIGHT_V LEFT_H LEFT_V BUTTONS EXT CHECKSUM */
int Commander_ReadMsgs() {
    16b8:	0000000c 	.word	0x0000000c
	 }
	 #endif
	 */
	//while (CheckZBNewArrive() > 0) {
	while (1) {
		if (zgb_rx_check_arduino() == 1) {
    16bc:	0000155c 	.word	0x0000155c
    16c0:	0800554c 	.word	0x0800554c

			leftV = (signed char) (zgb_rx_data_right_V_());
    16c4:	00000014 	.word	0x00000014
    16c8:	0000000c 	.word	0x0000000c
			leftH = (signed char) (zgb_rx_data_right_H_());
    16cc:	0000155c 	.word	0x0000155c
    16d0:	08005560 	.word	0x08005560
			rightV = (signed char) (zgb_rx_data_left_V_());
    16d4:	00000014 	.word	0x00000014
    16d8:	0000000c 	.word	0x0000000c
			rightH = (signed char) (zgb_rx_data_left_H_());
    16dc:	0000155c 	.word	0x0000155c
    16e0:	08005574 	.word	0x08005574
			buttons = zgb_rx_data_buttons();
    16e4:	0000000a 	.word	0x0000000a
    16e8:	00000018 	.word	0x00000018
			ext = zgb_rx_data_extra();
    16ec:	0000155c 	.word	0x0000155c
    16f0:	08005580 	.word	0x08005580

	}

	return 0;

}
    16f4:	00000062 	.word	0x00000062
    16f8:	8e0c0e44 	.word	0x8e0c0e44
    16fc:	84028501 	.word	0x84028501
    1700:	00000003 	.word	0x00000003
    1704:	0000000c 	.word	0x0000000c
    1708:	0000155c 	.word	0x0000155c
    170c:	080055e4 	.word	0x080055e4
    1710:	00000010 	.word	0x00000010

//==============================================================================
// This is The main code to input function to read inputs from the Commander and then
//process any commands.
//==============================================================================
void CommanderInputController_ControlInput(void) {
    1714:	00000010 	.word	0x00000010

	// See if we have a new command available...
	if (Commander_ReadMsgs() > 0) {
    1718:	0000155c 	.word	0x0000155c
    171c:	080055f4 	.word	0x080055f4
    1720:	00000008 	.word	0x00000008
    1724:	00080e42 	.word	0x00080e42
		// If we receive a valid message than turn robot on...
		boolean fAdjustLegPositions = false;
		short sLegInitXZAdjust = 0;
		short sLegInitAngleAdjust = 0;

		if (!g_InControlState.fRobotOn) {
    1728:	00000010 	.word	0x00000010
    172c:	0000155c 	.word	0x0000155c
			g_InControlState.fRobotOn = true;
    1730:	080055fc 	.word	0x080055fc
    1734:	0000000e 	.word	0x0000000e
		}

		// [SWITCH MODES]

		// Cycle through modes...
		if ((buttons & BUT_LT) && !(buttonsPrev & BUT_LT)) {
    1738:	00080e42 	.word	0x00080e42
    173c:	0000000c 	.word	0x0000000c
    1740:	0000155c 	.word	0x0000155c
    1744:	0800560c 	.word	0x0800560c
    1748:	00000010 	.word	0x00000010
    174c:	0000000c 	.word	0x0000000c

			if (++ControlMode >= MODECNT) {
    1750:	0000155c 	.word	0x0000155c
    1754:	0800561c 	.word	0x0800561c
    1758:	00000006 	.word	0x00000006
    175c:	0000000c 	.word	0x0000000c
				ControlMode = WALKMODE;    // cycled back around...
				Buzzed(50, 2000);
    1760:	0000155c 	.word	0x0000155c
    1764:	08005624 	.word	0x08005624
    1768:	0000000c 	.word	0x0000000c
				Buzzed(50, 3000);
    176c:	0000000c 	.word	0x0000000c
    1770:	0000155c 	.word	0x0000155c

			} else {
				Buzzed(50, 2000);
    1774:	08005630 	.word	0x08005630
    1778:	0000001c 	.word	0x0000001c
    177c:	0000000c 	.word	0x0000000c
			}
			if (ControlMode != SINGLELEGMODE)
    1780:	0000155c 	.word	0x0000155c
    1784:	0800564c 	.word	0x0800564c
				g_InControlState.SelectedLeg = 255;
    1788:	0000000c 	.word	0x0000000c
    178c:	0000000c 	.word	0x0000000c
    1790:	0000155c 	.word	0x0000155c

		}

		//[Common functions]
		//Switch Balance mode on/off
		if ((buttons & BUT_L4) && !(buttonsPrev & BUT_L4)) {
    1794:	08005658 	.word	0x08005658
    1798:	00000008 	.word	0x00000008
    179c:	0000000c 	.word	0x0000000c
    17a0:	0000155c 	.word	0x0000155c
    17a4:	08005660 	.word	0x08005660
    17a8:	0000001a 	.word	0x0000001a

			g_InControlState.BalanceMode = !g_InControlState.BalanceMode;
    17ac:	0000000c 	.word	0x0000000c
    17b0:	0000155c 	.word	0x0000155c
    17b4:	0800567c 	.word	0x0800567c
    17b8:	00000008 	.word	0x00000008
    17bc:	00000014 	.word	0x00000014
			if (g_InControlState.BalanceMode) {
    17c0:	0000155c 	.word	0x0000155c
				Buzzed(250, 1500);
    17c4:	08005684 	.word	0x08005684
    17c8:	00000058 	.word	0x00000058
			} else {
				Buzzed(100, 2000);
    17cc:	44040e42 	.word	0x44040e42
    17d0:	018e100e 	.word	0x018e100e
				Buzzed(50, 4000);
    17d4:	0000000c 	.word	0x0000000c
    17d8:	ffffffff 	.word	0xffffffff
    17dc:	7c010001 	.word	0x7c010001
			}
		}

		//Stand up, sit down
		if ((buttons & BUT_L5) && !(buttonsPrev & BUT_L5)) {
    17e0:	000d0c0e 	.word	0x000d0c0e
    17e4:	0000000c 	.word	0x0000000c
    17e8:	000017d4 	.word	0x000017d4
    17ec:	080056dc 	.word	0x080056dc
    17f0:	00000018 	.word	0x00000018
    17f4:	0000000c 	.word	0x0000000c
			if (g_BodyYOffset > 0)
    17f8:	000017d4 	.word	0x000017d4
    17fc:	080056f4 	.word	0x080056f4
				g_BodyYOffset = 0;
    1800:	00000018 	.word	0x00000018
    1804:	0000000c 	.word	0x0000000c
			else
				g_BodyYOffset = 35;
			fAdjustLegPositions = true;
			g_fDynamicLegXZLength = false;
    1808:	000017d4 	.word	0x000017d4
		//Stand up, sit down
		if ((buttons & BUT_L5) && !(buttonsPrev & BUT_L5)) {
			if (g_BodyYOffset > 0)
				g_BodyYOffset = 0;
			else
				g_BodyYOffset = 35;
    180c:	0800570c 	.word	0x0800570c
			fAdjustLegPositions = true;
			g_fDynamicLegXZLength = false;
    1810:	00000018 	.word	0x00000018
    1814:	0000000c 	.word	0x0000000c

		// We will use L6 with the Right joystick to control both body offset as well as Speed...
		// We move each pass through this by a percentage of how far we are from center in each direction
		// We get feedback with height by seeing the robot move up and down.  For Speed, I put in sounds
		// which give an idea, but only for those whoes robot has a speaker
		int lx = leftH;
    1818:	000017d4 	.word	0x000017d4
		int ly = leftV;
		if (buttons & BUT_L6) {
    181c:	08005724 	.word	0x08005724

		// We will use L6 with the Right joystick to control both body offset as well as Speed...
		// We move each pass through this by a percentage of how far we are from center in each direction
		// We get feedback with height by seeing the robot move up and down.  For Speed, I put in sounds
		// which give an idea, but only for those whoes robot has a speaker
		int lx = leftH;
    1820:	00000018 	.word	0x00000018
    1824:	0000000c 	.word	0x0000000c
		int ly = leftV;
    1828:	000017d4 	.word	0x000017d4
    182c:	0800573c 	.word	0x0800573c
		if (buttons & BUT_L6) {
    1830:	00000010 	.word	0x00000010
    1834:	0000000c 	.word	0x0000000c
			// raise or lower the robot on the joystick up /down
			// Maybe should have Min/Max
			int delta = rightV / 25;
    1838:	000017d4 	.word	0x000017d4
    183c:	0800574c 	.word	0x0800574c
    1840:	0000000c 	.word	0x0000000c
    1844:	0000000c 	.word	0x0000000c
    1848:	000017d4 	.word	0x000017d4
    184c:	08005758 	.word	0x08005758
			if (delta) {
    1850:	0000000c 	.word	0x0000000c
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
    1854:	0000000c 	.word	0x0000000c
    1858:	000017d4 	.word	0x000017d4
    185c:	08005764 	.word	0x08005764
    1860:	00000010 	.word	0x00000010
    1864:	0000000c 	.word	0x0000000c
    1868:	000017d4 	.word	0x000017d4
    186c:	08005774 	.word	0x08005774
    1870:	00000010 	.word	0x00000010
    1874:	0000000c 	.word	0x0000000c
			sLegInitAngleAdjust = ly / 8;
			lx = 0;
			ly = 0;

			// Likewise for Speed control
			delta = rightH / 16;   //
    1878:	000017d4 	.word	0x000017d4
    187c:	08005784 	.word	0x08005784
    1880:	0000001c 	.word	0x0000001c
    1884:	0000000c 	.word	0x0000000c
    1888:	000017d4 	.word	0x000017d4
			if ((delta < 0) && g_InControlState.SpeedControl) {
    188c:	080057a0 	.word	0x080057a0
    1890:	00000020 	.word	0x00000020
    1894:	0000000c 	.word	0x0000000c
				if ((word)(-delta) < g_InControlState.SpeedControl)
    1898:	000017d4 	.word	0x000017d4
					g_InControlState.SpeedControl += delta;
    189c:	080057c0 	.word	0x080057c0
				else
					g_InControlState.SpeedControl = 0;
    18a0:	0000000c 	.word	0x0000000c
    18a4:	0000000c 	.word	0x0000000c

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}
			if ((delta > 0) && (g_InControlState.SpeedControl < 2000)) {
    18a8:	000017d4 	.word	0x000017d4
    18ac:	080057cc 	.word	0x080057cc
    18b0:	0000002c 	.word	0x0000002c
				g_InControlState.SpeedControl += delta;
				if (g_InControlState.SpeedControl > 2000)
    18b4:	00000018 	.word	0x00000018
					g_InControlState.SpeedControl = 0;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}
			if ((delta > 0) && (g_InControlState.SpeedControl < 2000)) {
				g_InControlState.SpeedControl += delta;
    18b8:	000017d4 	.word	0x000017d4
				if (g_InControlState.SpeedControl > 2000)
					g_InControlState.SpeedControl = 2000;
    18bc:	080057f8 	.word	0x080057f8
    18c0:	00000094 	.word	0x00000094

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
    18c4:	44080e42 	.word	0x44080e42
    18c8:	018e100e 	.word	0x018e100e
    18cc:	00000284 	.word	0x00000284
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
				fAdjustLegPositions = true;
			}

			// Also use right Horizontal to manually adjust the initial leg positions.
			sLegInitXZAdjust = lx / 10;        // play with this.
    18d0:	0000001c 	.word	0x0000001c
    18d4:	000017d4 	.word	0x000017d4
    18d8:	0800588c 	.word	0x0800588c
    18dc:	0000005c 	.word	0x0000005c
			sLegInitAngleAdjust = ly / 8;
    18e0:	8e140e42 	.word	0x8e140e42
    18e4:	86028701 	.word	0x86028701
    18e8:	84048503 	.word	0x84048503
    18ec:	180e4605 	.word	0x180e4605
					g_InControlState.SpeedControl = 2000;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}

			rightH = 0; // don't walk when adjusting the speed here...
    18f0:	00000018 	.word	0x00000018
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
				fAdjustLegPositions = true;
			}

			// Also use right Horizontal to manually adjust the initial leg positions.
			sLegInitXZAdjust = lx / 10;        // play with this.
    18f4:	000017d4 	.word	0x000017d4
					g_InControlState.SpeedControl = 2000;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}

			rightH = 0; // don't walk when adjusting the speed here...
    18f8:	080058e8 	.word	0x080058e8
		}

		//[Walk functions]
		if (ControlMode == WALKMODE) {
    18fc:	0000009c 	.word	0x0000009c
    1900:	8e0c0e42 	.word	0x8e0c0e42
    1904:	84028501 	.word	0x84028501

			//Switch gates
			if (((buttons & BUT_R1) && !(buttonsPrev & BUT_R1))
    1908:	100e4403 	.word	0x100e4403
    190c:	00000014 	.word	0x00000014
    1910:	000017d4 	.word	0x000017d4
    1914:	08005984 	.word	0x08005984
    1918:	000000c0 	.word	0x000000c0
    191c:	8e080e42 	.word	0x8e080e42
    1920:	00028401 	.word	0x00028401
    1924:	00000018 	.word	0x00000018
    1928:	000017d4 	.word	0x000017d4
    192c:	08005a44 	.word	0x08005a44
    1930:	00000044 	.word	0x00000044
    1934:	8e100e42 	.word	0x8e100e42
    1938:	85028601 	.word	0x85028601
    193c:	00048403 	.word	0x00048403
    1940:	00000018 	.word	0x00000018
    1944:	000017d4 	.word	0x000017d4
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
    1948:	08005a88 	.word	0x08005a88
					&& abs(g_InControlState.TravelLength.x) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
    194c:	00000038 	.word	0x00000038
    1950:	8e100e42 	.word	0x8e100e42
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
    1954:	85028601 	.word	0x85028601
					&& abs(g_InControlState.TravelLength.x) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
    1958:	00048403 	.word	0x00048403
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
					Buzzed(50, 2000);
    195c:	00000018 	.word	0x00000018
    1960:	000017d4 	.word	0x000017d4
    1964:	08005ac0 	.word	0x08005ac0
				} else {
					Buzzed(50, 2000);
    1968:	00000048 	.word	0x00000048
    196c:	8e100e42 	.word	0x8e100e42
    1970:	85028601 	.word	0x85028601
					Buzzed(50, 2250);
    1974:	00048403 	.word	0x00048403
    1978:	00000014 	.word	0x00000014
					g_InControlState.GaitType = 0;
    197c:	000017d4 	.word	0x000017d4
    1980:	08005b08 	.word	0x08005b08
}

void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {
    1984:	00000078 	.word	0x00000078
    1988:	8e080e42 	.word	0x8e080e42
    198c:	00028401 	.word	0x00028401

		g_InControlState.gaitCur = APG[g_InControlState.GaitType];
    1990:	00000014 	.word	0x00000014
    1994:	000017d4 	.word	0x000017d4
    1998:	08005b80 	.word	0x08005b80
    199c:	0000003c 	.word	0x0000003c
    19a0:	8e080e42 	.word	0x8e080e42
				}
				GaitSelect();
			}

			//Double leg lift height
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    19a4:	00028401 	.word	0x00028401
    19a8:	00000018 	.word	0x00000018
    19ac:	000017d4 	.word	0x000017d4
    19b0:	08005bbc 	.word	0x08005bbc
    19b4:	00000048 	.word	0x00000048
				Buzzed(50, 2000);
    19b8:	8e0c0e42 	.word	0x8e0c0e42
    19bc:	84028501 	.word	0x84028501
				HeightSpeedMode = (HeightSpeedMode + 1) & 0x3; // wrap around mode
    19c0:	100e4403 	.word	0x100e4403
    19c4:	0000000c 	.word	0x0000000c
    19c8:	ffffffff 	.word	0xffffffff
    19cc:	7c010001 	.word	0x7c010001
				DoubleTravelOn = HeightSpeedMode & 0x1;
    19d0:	000d0c0e 	.word	0x000d0c0e
    19d4:	0000001c 	.word	0x0000001c
				if (HeightSpeedMode & 0x2)
    19d8:	000019c4 	.word	0x000019c4
    19dc:	08005c04 	.word	0x08005c04
					g_InControlState.LegLiftHeight = 80;
    19e0:	000000a6 	.word	0x000000a6
    19e4:	8e140e42 	.word	0x8e140e42
				else
					g_InControlState.LegLiftHeight = 50;
			}

			// Switch between Walk method 1 && Walk method 2
			if ((buttons & BUT_R2) && !(buttonsPrev & BUT_R2)) {
    19e8:	86028701 	.word	0x86028701
    19ec:	84048503 	.word	0x84048503
    19f0:	200e5a05 	.word	0x200e5a05
    19f4:	0000000c 	.word	0x0000000c
    19f8:	000019c4 	.word	0x000019c4

				if ((++bJoystickWalkMode) > 1)
    19fc:	08005cac 	.word	0x08005cac
    1a00:	00000010 	.word	0x00000010
    1a04:	0000000c 	.word	0x0000000c

					bJoystickWalkMode = 0;
				Buzzed(50, 2000 + bJoystickWalkMode * 250);
    1a08:	000019c4 	.word	0x000019c4
			// Switch between Walk method 1 && Walk method 2
			if ((buttons & BUT_R2) && !(buttonsPrev & BUT_R2)) {

				if ((++bJoystickWalkMode) > 1)

					bJoystickWalkMode = 0;
    1a0c:	08005cbc 	.word	0x08005cbc
				Buzzed(50, 2000 + bJoystickWalkMode * 250);
    1a10:	0000000c 	.word	0x0000000c
    1a14:	0000000c 	.word	0x0000000c
    1a18:	000019c4 	.word	0x000019c4
    1a1c:	08005cc8 	.word	0x08005cc8
			}

			//Walking
			switch (bJoystickWalkMode) {
    1a20:	00000006 	.word	0x00000006
    1a24:	0000000c 	.word	0x0000000c
    1a28:	000019c4 	.word	0x000019c4
			case 0:
				g_InControlState.TravelLength.x = -lx;
    1a2c:	08005cd0 	.word	0x08005cd0
    1a30:	0000000c 	.word	0x0000000c
    1a34:	0000000c 	.word	0x0000000c
				g_InControlState.TravelLength.z = -ly;
    1a38:	000019c4 	.word	0x000019c4
				g_InControlState.TravelLength.y = -(rightH) / 4; //Right Stick Left/Right
				break;
			case 1:
				g_InControlState.TravelLength.z = (rightV); //Right Stick Up/Down
    1a3c:	08005cdc 	.word	0x08005cdc
    1a40:	00000006 	.word	0x00000006
    1a44:	0000000c 	.word	0x0000000c
				g_InControlState.TravelLength.y = -(rightH) / 4; //Right Stick Left/Right
    1a48:	000019c4 	.word	0x000019c4
    1a4c:	08005ce4 	.word	0x08005ce4
    1a50:	00000004 	.word	0x00000004
    1a54:	0000000c 	.word	0x0000000c
    1a58:	000019c4 	.word	0x000019c4
    1a5c:	08005ce8 	.word	0x08005ce8
				break;

			}

			if (!DoubleTravelOn) {  //(Double travel length)
    1a60:	00000004 	.word	0x00000004
				g_InControlState.TravelLength.x =
    1a64:	0000000c 	.word	0x0000000c
    1a68:	000019c4 	.word	0x000019c4
    1a6c:	08005cec 	.word	0x08005cec
						g_InControlState.TravelLength.x / 2;
				g_InControlState.TravelLength.z =
    1a70:	0000000a 	.word	0x0000000a
    1a74:	0000000c 	.word	0x0000000c
    1a78:	000019c4 	.word	0x000019c4
			}

		}

		//[Translate functions]
		g_BodyYShift = 0;
    1a7c:	08005cf8 	.word	0x08005cf8
    1a80:	00000004 	.word	0x00000004
		if (ControlMode == TRANSLATEMODE) {
    1a84:	0000000c 	.word	0x0000000c
    1a88:	000019c4 	.word	0x000019c4

		      g_InControlState.BodyPos.x =  SmoothControl(((lx)*2/3), g_InControlState.BodyPos.x, SmDiv);
    1a8c:	08005cfc 	.word	0x08005cfc
    1a90:	00000010 	.word	0x00000010
    1a94:	0000000c 	.word	0x0000000c
    1a98:	000019c4 	.word	0x000019c4
    1a9c:	08005d0c 	.word	0x08005d0c
    1aa0:	00000020 	.word	0x00000020
    1aa4:	0000000c 	.word	0x0000000c
    1aa8:	000019c4 	.word	0x000019c4
		      g_InControlState.BodyPos.z =  SmoothControl(((ly)*2/3), g_InControlState.BodyPos.z, SmDiv);
    1aac:	08005d2c 	.word	0x08005d2c
    1ab0:	0000000c 	.word	0x0000000c
    1ab4:	00000018 	.word	0x00000018
    1ab8:	000019c4 	.word	0x000019c4
    1abc:	08005d38 	.word	0x08005d38
		      g_InControlState.BodyRot1.y = SmoothControl(((rightH)*2), g_InControlState.BodyRot1.y, SmDiv);
    1ac0:	00000060 	.word	0x00000060
		//[Translate functions]
		g_BodyYShift = 0;
		if (ControlMode == TRANSLATEMODE) {

		      g_InControlState.BodyPos.x =  SmoothControl(((lx)*2/3), g_InControlState.BodyPos.x, SmDiv);
		      g_InControlState.BodyPos.z =  SmoothControl(((ly)*2/3), g_InControlState.BodyPos.z, SmDiv);
    1ac4:	8e0c0e42 	.word	0x8e0c0e42
		      g_InControlState.BodyRot1.y = SmoothControl(((rightH)*2), g_InControlState.BodyRot1.y, SmDiv);
    1ac8:	84028501 	.word	0x84028501
    1acc:	00000003 	.word	0x00000003
    1ad0:	00000014 	.word	0x00000014
    1ad4:	000019c4 	.word	0x000019c4


			//      g_InControlState.BodyPos.x = (lx)/2;
			//      g_InControlState.BodyPos.z = -(ly)/3;
			//      g_InControlState.BodyRot1.y = (rightH)*2;
			g_BodyYShift = (-(rightV) / 2);
    1ad8:	08005d98 	.word	0x08005d98
    1adc:	00000034 	.word	0x00000034
    1ae0:	8e080e42 	.word	0x8e080e42
    1ae4:	00028401 	.word	0x00028401
    1ae8:	00000014 	.word	0x00000014
    1aec:	000019c4 	.word	0x000019c4
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
    1af0:	08005dcc 	.word	0x08005dcc
			g_InControlState.BodyRot1.x = (ly);
			g_InControlState.BodyRot1.y = (rightH) * 2;
    1af4:	00000018 	.word	0x00000018
    1af8:	46040e42 	.word	0x46040e42
			g_InControlState.BodyRot1.z = (lx);
			g_BodyYShift = (-(rightV) / 2);
    1afc:	018e080e 	.word	0x018e080e
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
			g_InControlState.BodyRot1.x = (ly);
			g_InControlState.BodyRot1.y = (rightH) * 2;
    1b00:	00000014 	.word	0x00000014
			g_BodyYShift = (-(rightV) / 2);
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
			g_InControlState.BodyRot1.x = (ly);
    1b04:	000019c4 	.word	0x000019c4
			g_InControlState.BodyRot1.y = (rightH) * 2;
			g_InControlState.BodyRot1.z = (lx);
			g_BodyYShift = (-(rightV) / 2);
    1b08:	08005de4 	.word	0x08005de4
    1b0c:	000000a8 	.word	0x000000a8
    1b10:	44040e42 	.word	0x44040e42
    1b14:	018e100e 	.word	0x018e100e
    1b18:	0000000c 	.word	0x0000000c
		}

		//[Single leg functions]
#ifdef OPT_SINGLELEG
		if (ControlMode == SINGLELEGMODE) {
    1b1c:	ffffffff 	.word	0xffffffff

			//Switch leg for single leg control
			if ((buttons & BUT_R1) && !(buttonsPrev & BUT_R1)) {
    1b20:	7c010001 	.word	0x7c010001
    1b24:	000d0c0e 	.word	0x000d0c0e
    1b28:	0000000c 	.word	0x0000000c
    1b2c:	00001b18 	.word	0x00001b18
    1b30:	08005e8c 	.word	0x08005e8c
				Buzzed(50,2000);
    1b34:	00000034 	.word	0x00000034
    1b38:	0000000c 	.word	0x0000000c
    1b3c:	00001b18 	.word	0x00001b18
				if (g_InControlState.SelectedLeg < (CNT_LEGS-1)) {
    1b40:	08005ec0 	.word	0x08005ec0
    1b44:	00000030 	.word	0x00000030
					g_InControlState.SelectedLeg = g_InControlState.SelectedLeg + 1;
				} else {
					g_InControlState.SelectedLeg = 0;
    1b48:	0000000c 	.word	0x0000000c
		if (ControlMode == SINGLELEGMODE) {

			//Switch leg for single leg control
			if ((buttons & BUT_R1) && !(buttonsPrev & BUT_R1)) {
				Buzzed(50,2000);
				if (g_InControlState.SelectedLeg < (CNT_LEGS-1)) {
    1b4c:	00001b18 	.word	0x00001b18
					g_InControlState.SelectedLeg = g_InControlState.SelectedLeg + 1;
    1b50:	08005ef0 	.word	0x08005ef0
			   g_InControlState.SLLeg.x= (signed char)((int)((int)lx+128)/2); //Left Stick Right/Left
      		   g_InControlState.SLLeg.y= (signed char)((int)((int)rightV+128)/10); //Right Stick Up/Down
		       g_InControlState.SLLeg.z = (signed char)((int)((int)ly+128)/2); //Left Stick Up/Down

#else
			g_InControlState.SLLeg.x = lx; //Left Stick Right/Left
    1b54:	00000014 	.word	0x00000014
			g_InControlState.SLLeg.y = rightV / 3 - 20;//Right Stick Up/Down
    1b58:	00000018 	.word	0x00000018
    1b5c:	00001b18 	.word	0x00001b18
    1b60:	08005f04 	.word	0x08005f04
    1b64:	0000007c 	.word	0x0000007c
    1b68:	8e0c0e42 	.word	0x8e0c0e42
			g_InControlState.SLLeg.z = ly;//Left Stick Up/Down

#endif
			// Hold single leg in place
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    1b6c:	84028501 	.word	0x84028501
    1b70:	00000003 	.word	0x00000003
    1b74:	0000000c 	.word	0x0000000c
      		   g_InControlState.SLLeg.y= (signed char)((int)((int)rightV+128)/10); //Right Stick Up/Down
		       g_InControlState.SLLeg.z = (signed char)((int)((int)ly+128)/2); //Left Stick Up/Down

#else
			g_InControlState.SLLeg.x = lx; //Left Stick Right/Left
			g_InControlState.SLLeg.y = rightV / 3 - 20;//Right Stick Up/Down
    1b78:	00001b18 	.word	0x00001b18
			g_InControlState.SLLeg.z = ly;//Left Stick Up/Down

#endif
			// Hold single leg in place
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    1b7c:	08005f80 	.word	0x08005f80
    1b80:	0000000c 	.word	0x0000000c
    1b84:	0000000c 	.word	0x0000000c
				Buzzed(50,2000);
    1b88:	00001b18 	.word	0x00001b18
    1b8c:	08005f8c 	.word	0x08005f8c
				g_InControlState.fSLHold = !g_InControlState.fSLHold;
    1b90:	00000018 	.word	0x00000018
    1b94:	0000000c 	.word	0x0000000c
    1b98:	00001b18 	.word	0x00001b18
    1b9c:	08005fa4 	.word	0x08005fa4
			}
		}
#endif

		//Calculate walking time delay
		g_InControlState.InputTimeDelay = 128- max(max(abs(lx), abs(ly)), abs(rightH));
    1ba0:	00000024 	.word	0x00000024
    1ba4:	0000000c 	.word	0x0000000c
    1ba8:	00001b18 	.word	0x00001b18
    1bac:	08005fc8 	.word	0x08005fc8
    1bb0:	0000000c 	.word	0x0000000c
    1bb4:	0000000c 	.word	0x0000000c
    1bb8:	00001b18 	.word	0x00001b18
    1bbc:	08005fd4 	.word	0x08005fd4
    1bc0:	00000018 	.word	0x00000018
    1bc4:	0000000c 	.word	0x0000000c
    1bc8:	00001b18 	.word	0x00001b18
    1bcc:	08005fec 	.word	0x08005fec
    1bd0:	00000010 	.word	0x00000010

		//Calculate g_InControlState.BodyPos.y
		g_InControlState.BodyPos.y = max(g_BodyYOffset + g_BodyYShift, 0);
    1bd4:	0000000c 	.word	0x0000000c
    1bd8:	00001b18 	.word	0x00001b18
    1bdc:	08005ffc 	.word	0x08005ffc
    1be0:	00000024 	.word	0x00000024
    1be4:	0000000c 	.word	0x0000000c
    1be8:	00001b18 	.word	0x00001b18

		if (sLegInitXZAdjust || sLegInitAngleAdjust) {
    1bec:	08006020 	.word	0x08006020
    1bf0:	0000000c 	.word	0x0000000c
			// User asked for manual leg adjustment - only do when we have finished any previous adjustment

			if (!g_InControlState.ForceGaitStepCnt) {
    1bf4:	0000000c 	.word	0x0000000c
				if (sLegInitXZAdjust)
    1bf8:	00001b18 	.word	0x00001b18
					g_fDynamicLegXZLength = true;
    1bfc:	0800602c 	.word	0x0800602c
    1c00:	00000014 	.word	0x00000014

				sLegInitXZAdjust += GetLegsXZLength(); // Add on current length to our adjustment...
    1c04:	0000000c 	.word	0x0000000c
    1c08:	00001b18 	.word	0x00001b18
				// Handle maybe change angles...
				if (sLegInitAngleAdjust)
					RotateLegInitAngles(sLegInitAngleAdjust);

				// Give system time to process previous calls
				AdjustLegPositions(sLegInitXZAdjust);
    1c0c:	08006040 	.word	0x08006040
			}
		}

		if (fAdjustLegPositions && !g_fDynamicLegXZLength)
    1c10:	00000010 	.word	0x00000010
    1c14:	0000000c 	.word	0x0000000c
    1c18:	00001b18 	.word	0x00001b18
			AdjustLegPositionsToBodyHeight(); // Put main workings into main program file
    1c1c:	08006050 	.word	0x08006050
		// Save away the buttons state as to not process the same press twice.
		buttonsPrev = buttons;
    1c20:	00000010 	.word	0x00000010
    1c24:	0000000c 	.word	0x0000000c
		extPrev = ext;
    1c28:	00001b18 	.word	0x00001b18
    1c2c:	08006060 	.word	0x08006060
		g_ulLastMsgTime = getMillis();
    1c30:	0000001c 	.word	0x0000001c
    1c34:	0000000c 	.word	0x0000000c
	} else {
		// We did not receive a valid packet.  check for a timeout to see if we should turn robot off...
		if (g_InControlState.fRobotOn) {
    1c38:	00001b18 	.word	0x00001b18
			if ((getMillis() - g_ulLastMsgTime) > ARBOTIX_TO)
    1c3c:	0800607c 	.word	0x0800607c
    1c40:	00000028 	.word	0x00000028
    1c44:	00000014 	.word	0x00000014
    1c48:	00001b18 	.word	0x00001b18
    1c4c:	080060a4 	.word	0x080060a4
				CommanderTurnRobotOff();
    1c50:	00000058 	.word	0x00000058
		}
	}

}
    1c54:	8e080e42 	.word	0x8e080e42
    1c58:	00028401 	.word	0x00028401
    1c5c:	0000000c 	.word	0x0000000c
    1c60:	00001b18 	.word	0x00001b18
    1c64:	080060fc 	.word	0x080060fc
    1c68:	00000020 	.word	0x00000020
    1c6c:	0000000c 	.word	0x0000000c
    1c70:	00001b18 	.word	0x00001b18
    1c74:	0800611c 	.word	0x0800611c
    1c78:	00000018 	.word	0x00000018
    1c7c:	0000000c 	.word	0x0000000c
    1c80:	00001b18 	.word	0x00001b18
    1c84:	08006134 	.word	0x08006134
    1c88:	00000018 	.word	0x00000018
    1c8c:	0000000c 	.word	0x0000000c
    1c90:	00001b18 	.word	0x00001b18
    1c94:	0800614c 	.word	0x0800614c
    1c98:	00000020 	.word	0x00000020
    1c9c:	0000000c 	.word	0x0000000c
    1ca0:	00001b18 	.word	0x00001b18
    1ca4:	0800616c 	.word	0x0800616c
    1ca8:	00000044 	.word	0x00000044
    1cac:	0000000c 	.word	0x0000000c

extern void setupPhoenix(void);
extern void readSensors(void);


int Big_main(void) {
    1cb0:	00001b18 	.word	0x00001b18

	// Must include this line in all programs using "cm530.h/.c"
	SysInit();
    1cb4:	080061b0 	.word	0x080061b0
	setupPhoenix();
    1cb8:	00000014 	.word	0x00000014
			TotalYBal1 = 0;
			TotalZBal1 = 0;

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1cbc:	00000014 	.word	0x00000014

	while (1){
		while (1) {
			//Start time
			unsigned long lTimeWaitEnd;
			lTimerStart = getMillis();
    1cc0:	00001b18 	.word	0x00001b18
    1cc4:	080061c4 	.word	0x080061c4
    1cc8:	0000000c 	.word	0x0000000c
#ifdef MILLIS
			PrintString("Barebones lTimerStart ");
			Printu32d(lTimerStart);
			PrintString("\n");
#endif
			DoBackgroundProcess();
    1ccc:	42040e42 	.word	0x42040e42
			//Read input
			CheckVoltage();        // check our voltages...
    1cd0:	018e080e 	.word	0x018e080e
			if (!g_fLowVoltageShutdown) {
    1cd4:	00000014 	.word	0x00000014
    1cd8:	00001b18 	.word	0x00001b18
				CommanderInputController_ControlInput();
    1cdc:	080061d0 	.word	0x080061d0
			}
			WriteOutputs();        // Write Outputs
			//Single leg control
			SingleLegControl();
    1ce0:	0000000e 	.word	0x0000000e
			DoBackgroundProcess();
    1ce4:	44040e42 	.word	0x44040e42

			//Gait
			GaitSeq();
    1ce8:	018e080e 	.word	0x018e080e

			DoBackgroundProcess();
    1cec:	00000014 	.word	0x00000014

			//Balance calculations
			TotalTransX = 0;     //reset values used for calculation of balance
    1cf0:	00001b18 	.word	0x00001b18
    1cf4:	080061e0 	.word	0x080061e0
			TotalTransZ = 0;
    1cf8:	0000000c 	.word	0x0000000c
			TotalTransY = 0;
    1cfc:	42040e42 	.word	0x42040e42
    1d00:	018e080e 	.word	0x018e080e
			TotalXBal1 = 0;
    1d04:	00000014 	.word	0x00000014
			TotalYBal1 = 0;
    1d08:	00001b18 	.word	0x00001b18
    1d0c:	080061ec 	.word	0x080061ec
			TotalZBal1 = 0;
    1d10:	0000000c 	.word	0x0000000c

			if (g_InControlState.BalanceMode) {
    1d14:	42040e42 	.word	0x42040e42
    1d18:	018e080e 	.word	0x018e080e
    1d1c:	00000014 	.word	0x00000014

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1d20:	00001b18 	.word	0x00001b18

					DoBackgroundProcess();
					BalCalcOneLeg(-LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d24:	080061f8 	.word	0x080061f8
    1d28:	0000000c 	.word	0x0000000c
    1d2c:	42040e42 	.word	0x42040e42

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs

					DoBackgroundProcess();
    1d30:	018e080e 	.word	0x018e080e
					BalCalcOneLeg(-LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d34:	00000014 	.word	0x00000014
    1d38:	00001b18 	.word	0x00001b18
    1d3c:	08006204 	.word	0x08006204
    1d40:	0000000c 	.word	0x0000000c
    1d44:	42040e42 	.word	0x42040e42
    1d48:	018e080e 	.word	0x018e080e
    1d4c:	0000000c 	.word	0x0000000c
    1d50:	ffffffff 	.word	0xffffffff
    1d54:	7c010001 	.word	0x7c010001
    1d58:	000d0c0e 	.word	0x000d0c0e
    1d5c:	0000000c 	.word	0x0000000c
    1d60:	00001d4c 	.word	0x00001d4c
    1d64:	08006210 	.word	0x08006210
    1d68:	0000000c 	.word	0x0000000c
    1d6c:	0000000c 	.word	0x0000000c
			TotalYBal1 = 0;
			TotalZBal1 = 0;

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1d70:	00001d4c 	.word	0x00001d4c
    1d74:	0800621c 	.word	0x0800621c
    1d78:	0000000c 	.word	0x0000000c
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
    1d7c:	0000000c 	.word	0x0000000c
    1d80:	00001d4c 	.word	0x00001d4c
					DoBackgroundProcess();
					BalCalcOneLeg(LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d84:	08006228 	.word	0x08006228
    1d88:	00000014 	.word	0x00000014
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
					DoBackgroundProcess();
    1d8c:	0000000c 	.word	0x0000000c
					BalCalcOneLeg(LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d90:	00001d4c 	.word	0x00001d4c
    1d94:	0800623c 	.word	0x0800623c
    1d98:	0000000c 	.word	0x0000000c
    1d9c:	0000000c 	.word	0x0000000c
    1da0:	00001d4c 	.word	0x00001d4c
    1da4:	08006248 	.word	0x08006248
    1da8:	00000014 	.word	0x00000014
    1dac:	0000000c 	.word	0x0000000c
    1db0:	00001d4c 	.word	0x00001d4c
    1db4:	0800625c 	.word	0x0800625c
    1db8:	00000010 	.word	0x00000010
    1dbc:	00000014 	.word	0x00000014
    1dc0:	00001d4c 	.word	0x00001d4c
    1dc4:	0800626c 	.word	0x0800626c
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
    1dc8:	00000034 	.word	0x00000034
    1dcc:	44040e44 	.word	0x44040e44
    1dd0:	018e080e 	.word	0x018e080e
							LegPosZ[LegIndex] + GaitPosZ[LegIndex],
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}
				BalanceBody();
    1dd4:	00000014 	.word	0x00000014
			}

			//Reset IKsolution indicators
			IKSolution = 0;
    1dd8:	00001d4c 	.word	0x00001d4c
    1ddc:	080062a0 	.word	0x080062a0
			IKSolutionWarning = 0;
			IKSolutionError = 0;

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
    1de0:	00000038 	.word	0x00000038
			}

			//Reset IKsolution indicators
			IKSolution = 0;
			IKSolutionWarning = 0;
			IKSolutionError = 0;
    1de4:	44040e44 	.word	0x44040e44
    1de8:	018e080e 	.word	0x018e080e

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
				DoBackgroundProcess();
    1dec:	00000014 	.word	0x00000014
				BodyFK(
    1df0:	00001d4c 	.word	0x00001d4c
    1df4:	080062d8 	.word	0x080062d8
    1df8:	00000018 	.word	0x00000018
    1dfc:	8e080e42 	.word	0x8e080e42
    1e00:	00028401 	.word	0x00028401
    1e04:	0000000c 	.word	0x0000000c
    1e08:	ffffffff 	.word	0xffffffff
    1e0c:	7c010001 	.word	0x7c010001
    1e10:	000d0c0e 	.word	0x000d0c0e
    1e14:	0000000c 	.word	0x0000000c
    1e18:	00001e04 	.word	0x00001e04
    1e1c:	080062f0 	.word	0x080062f0
    1e20:	00000040 	.word	0x00000040
    1e24:	0000000c 	.word	0x0000000c
    1e28:	00001e04 	.word	0x00001e04
    1e2c:	08006330 	.word	0x08006330
    1e30:	00000034 	.word	0x00000034
    1e34:	00000010 	.word	0x00000010
    1e38:	00001e04 	.word	0x00001e04
    1e3c:	08006364 	.word	0x08006364
    1e40:	00000030 	.word	0x00000030
    1e44:	00080e42 	.word	0x00080e42
    1e48:	0000000c 	.word	0x0000000c
    1e4c:	00001e04 	.word	0x00001e04
						+ GaitPosZ[LegIndex] - TotalTransZ,
						LegPosY[LegIndex] + g_InControlState.BodyPos.y
						+ GaitPosY[LegIndex] - TotalTransY,
						GaitRotY[LegIndex], LegIndex);

				LegIK(
    1e50:	08006394 	.word	0x08006394
    1e54:	00000014 	.word	0x00000014
    1e58:	0000000c 	.word	0x0000000c
    1e5c:	00001e04 	.word	0x00001e04
    1e60:	080063a8 	.word	0x080063a8
    1e64:	0000000c 	.word	0x0000000c
    1e68:	0000000c 	.word	0x0000000c
    1e6c:	00001e04 	.word	0x00001e04
    1e70:	080063b4 	.word	0x080063b4
    1e74:	00000014 	.word	0x00000014
    1e78:	0000000c 	.word	0x0000000c
    1e7c:	00001e04 	.word	0x00001e04
    1e80:	080063c8 	.word	0x080063c8
    1e84:	0000000c 	.word	0x0000000c
    1e88:	0000000c 	.word	0x0000000c
    1e8c:	00001e04 	.word	0x00001e04
    1e90:	080063d4 	.word	0x080063d4
    1e94:	00000014 	.word	0x00000014
    1e98:	0000000c 	.word	0x0000000c
    1e9c:	00001e04 	.word	0x00001e04
    1ea0:	080063e8 	.word	0x080063e8
    1ea4:	00000010 	.word	0x00000010
    1ea8:	0000000c 	.word	0x0000000c
    1eac:	00001e04 	.word	0x00001e04
    1eb0:	080063f8 	.word	0x080063f8
    1eb4:	00000014 	.word	0x00000014
    1eb8:	0000000c 	.word	0x0000000c
    1ebc:	00001e04 	.word	0x00001e04
    1ec0:	0800640c 	.word	0x0800640c
			IKSolutionWarning = 0;
			IKSolutionError = 0;

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
    1ec4:	00000014 	.word	0x00000014
    1ec8:	0000000c 	.word	0x0000000c
    1ecc:	00001e04 	.word	0x00001e04
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Do IK for all Left legs
			for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) {
    1ed0:	08006420 	.word	0x08006420
    1ed4:	00000014 	.word	0x00000014
				DoBackgroundProcess();
    1ed8:	0000000c 	.word	0x0000000c
				BodyFK(
    1edc:	00001e04 	.word	0x00001e04
    1ee0:	08006434 	.word	0x08006434
    1ee4:	0000001c 	.word	0x0000001c
    1ee8:	0000000c 	.word	0x0000000c
    1eec:	00001e04 	.word	0x00001e04
    1ef0:	08006450 	.word	0x08006450
    1ef4:	0000000c 	.word	0x0000000c
    1ef8:	0000000c 	.word	0x0000000c
    1efc:	00001e04 	.word	0x00001e04
    1f00:	0800645c 	.word	0x0800645c
    1f04:	00000014 	.word	0x00000014
    1f08:	0000000c 	.word	0x0000000c
    1f0c:	00001e04 	.word	0x00001e04
    1f10:	08006470 	.word	0x08006470
    1f14:	00000020 	.word	0x00000020
    1f18:	0000000c 	.word	0x0000000c
    1f1c:	00001e04 	.word	0x00001e04
    1f20:	08006490 	.word	0x08006490
    1f24:	0000000c 	.word	0x0000000c
    1f28:	0000000c 	.word	0x0000000c
    1f2c:	00001e04 	.word	0x00001e04
    1f30:	0800649c 	.word	0x0800649c
    1f34:	00000010 	.word	0x00000010
    1f38:	0000000c 	.word	0x0000000c
    1f3c:	00001e04 	.word	0x00001e04
    1f40:	080064ac 	.word	0x080064ac
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z
						+ GaitPosZ[LegIndex] - TotalTransZ,
						LegPosY[LegIndex] + g_InControlState.BodyPos.y
						+ GaitPosY[LegIndex] - TotalTransY,
						GaitRotY[LegIndex], LegIndex);
				LegIK(
    1f44:	0000000c 	.word	0x0000000c
    1f48:	0000000c 	.word	0x0000000c
    1f4c:	00001e04 	.word	0x00001e04
    1f50:	080064b8 	.word	0x080064b8
    1f54:	000000b8 	.word	0x000000b8
    1f58:	0000000c 	.word	0x0000000c
    1f5c:	00001e04 	.word	0x00001e04
    1f60:	08006570 	.word	0x08006570
    1f64:	0000001c 	.word	0x0000001c
    1f68:	0000000c 	.word	0x0000000c
    1f6c:	00001e04 	.word	0x00001e04
    1f70:	0800658c 	.word	0x0800658c
    1f74:	0000001c 	.word	0x0000001c
    1f78:	0000000c 	.word	0x0000000c
    1f7c:	00001e04 	.word	0x00001e04
    1f80:	080065a8 	.word	0x080065a8
    1f84:	0000001c 	.word	0x0000001c
    1f88:	0000000c 	.word	0x0000000c
    1f8c:	00001e04 	.word	0x00001e04
    1f90:	080065c4 	.word	0x080065c4
    1f94:	0000001c 	.word	0x0000001c
    1f98:	0000000c 	.word	0x0000000c
    1f9c:	00001e04 	.word	0x00001e04
    1fa0:	080065e0 	.word	0x080065e0
    1fa4:	0000001c 	.word	0x0000001c
    1fa8:	0000000c 	.word	0x0000000c
    1fac:	00001e04 	.word	0x00001e04
    1fb0:	080065fc 	.word	0x080065fc
    1fb4:	0000000c 	.word	0x0000000c
    1fb8:	0000000c 	.word	0x0000000c
    1fbc:	00001e04 	.word	0x00001e04
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Do IK for all Left legs
			for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) {
    1fc0:	08006608 	.word	0x08006608
    1fc4:	0000000c 	.word	0x0000000c
    1fc8:	0000000c 	.word	0x0000000c
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Check mechanical limits
			CheckAngles();
    1fcc:	00001e04 	.word	0x00001e04

			//Drive Servos
			if (g_InControlState.fRobotOn) {
    1fd0:	08006614 	.word	0x08006614
    1fd4:	0000000c 	.word	0x0000000c
    1fd8:	0000000c 	.word	0x0000000c
				if (g_InControlState.fRobotOn && !g_InControlState.fPrev_RobotOn) {
					// MSound(3, 60, 2000, 80, 2250, 100, 2500);
					Buzzed(30, 2000);
    1fdc:	00001e04 	.word	0x00001e04
    1fe0:	08006620 	.word	0x08006620
    1fe4:	00000044 	.word	0x00000044
					Buzzed(80, 2250);
    1fe8:	0000000c 	.word	0x0000000c
    1fec:	00001e04 	.word	0x00001e04
					Buzzed(100, 2500);
    1ff0:	08006664 	.word	0x08006664
    1ff4:	00000010 	.word	0x00000010
    1ff8:	0000000c 	.word	0x0000000c

				}

				//Calculate Servo Move time
				if ((abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
    1ffc:	00001e04 	.word	0x00001e04
    2000:	08006674 	.word	0x08006674
    2004:	00000014 	.word	0x00000014
    2008:	0000000c 	.word	0x0000000c
    200c:	00001e04 	.word	0x00001e04
    2010:	08006688 	.word	0x08006688
    2014:	0000000c 	.word	0x0000000c
    2018:	0000000c 	.word	0x0000000c
    201c:	ffffffff 	.word	0xffffffff
    2020:	7c010001 	.word	0x7c010001
    2024:	000d0c0e 	.word	0x000d0c0e
						|| (abs(g_InControlState.TravelLength.z) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.y*2) > cTravelDeadZone)) {
					ServoMoveTime = g_InControlState.gaitCur.NomGaitSpeed
    2028:	0000000c 	.word	0x0000000c
    202c:	00002018 	.word	0x00002018
    2030:	08006694 	.word	0x08006694
    2034:	0000001c 	.word	0x0000001c
    2038:	0000000c 	.word	0x0000000c
							+ (g_InControlState.InputTimeDelay * 2)
							+ g_InControlState.SpeedControl;

					//Add aditional delay when Balance mode is on
					if (g_InControlState.BalanceMode)
    203c:	00002018 	.word	0x00002018

				//Calculate Servo Move time
				if ((abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.z) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.y*2) > cTravelDeadZone)) {
					ServoMoveTime = g_InControlState.gaitCur.NomGaitSpeed
    2040:	080066b0 	.word	0x080066b0
							+ (g_InControlState.InputTimeDelay * 2)
							+ g_InControlState.SpeedControl;

					//Add aditional delay when Balance mode is on
					if (g_InControlState.BalanceMode)
						ServoMoveTime = ServoMoveTime + BALANCE_DELAY;
    2044:	0000000c 	.word	0x0000000c
    2048:	0000000c 	.word	0x0000000c
				} else
					//Movement speed excl. Walking
					ServoMoveTime = 200 + g_InControlState.SpeedControl;
    204c:	00002018 	.word	0x00002018
    2050:	080066bc 	.word	0x080066bc
    2054:	0000002c 	.word	0x0000002c

				// note we broke up the servo driver into start/commit that way we can output all of the servo information
				// before we wait and only have the termination information to output after the wait.  That way we hopefully
				// be more accurate with our timings...
				DoBackgroundProcess();
    2058:	0000000c 	.word	0x0000000c
				StartUpdateServos();
    205c:	00002018 	.word	0x00002018

				// See if we need to sync our processor with the servo driver while walking to ensure the prev is completed
				//before sending the next one

				// Finding any incident of GaitPos/Rot <>0:
				for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    2060:	080066e8 	.word	0x080066e8
					if ((GaitPosX[LegIndex] > cGPlimit)
    2064:	0000001c 	.word	0x0000001c
    2068:	0000000c 	.word	0x0000000c
    206c:	00002018 	.word	0x00002018
    2070:	08006704 	.word	0x08006704
    2074:	0000000c 	.word	0x0000000c
    2078:	0000000c 	.word	0x0000000c
    207c:	00002018 	.word	0x00002018
    2080:	08006710 	.word	0x08006710
    2084:	00000028 	.word	0x00000028
    2088:	0000000c 	.word	0x0000000c
    208c:	ffffffff 	.word	0xffffffff
    2090:	7c010001 	.word	0x7c010001
    2094:	000d0c0e 	.word	0x000d0c0e
    2098:	0000000c 	.word	0x0000000c
    209c:	00002088 	.word	0x00002088
							|| (GaitPosZ[LegIndex] > cGPlimit)
							|| (GaitPosZ[LegIndex] < -cGPlimit)
							|| (GaitRotY[LegIndex] > cGPlimit)
							|| (GaitRotY[LegIndex] < -cGPlimit)) {

						bExtraCycle = g_InControlState.gaitCur.NrLiftedPos + 1;	//For making sure that we are using timed move until all legs are down
    20a0:	08006738 	.word	0x08006738
    20a4:	0000001e 	.word	0x0000001e
    20a8:	0000000c 	.word	0x0000000c

				// See if we need to sync our processor with the servo driver while walking to ensure the prev is completed
				//before sending the next one

				// Finding any incident of GaitPos/Rot <>0:
				for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    20ac:	00002088 	.word	0x00002088
    20b0:	08006758 	.word	0x08006758

						bExtraCycle = g_InControlState.gaitCur.NrLiftedPos + 1;	//For making sure that we are using timed move until all legs are down
						break;
					}
				}
				if (bExtraCycle > 0) {
    20b4:	00000028 	.word	0x00000028
					bExtraCycle--;
    20b8:	0000000c 	.word	0x0000000c
    20bc:	00002088 	.word	0x00002088
					fWalking = !(bExtraCycle == 0);
    20c0:	08006780 	.word	0x08006780
    20c4:	0000000e 	.word	0x0000000e

					//Get endtime and calculate wait time
					lTimeWaitEnd = lTimerStart + PrevServoMoveTime;
    20c8:	0000000c 	.word	0x0000000c
    20cc:	00002088 	.word	0x00002088
    20d0:	08006790 	.word	0x08006790
					PrintString("\n");
#endif
					//DebugWrite(A1, HIGH);
					do {
						// Wait the appropriate time, call any background process while waiting...
						DoBackgroundProcess();
    20d4:	0000001a 	.word	0x0000001a
					} while (getMillis() < lTimeWaitEnd);
    20d8:	00000010 	.word	0x00000010
    20dc:	00002088 	.word	0x00002088
					PrintString("\n");
#endif

				}
				// Only do commit if we are actually doing something...
				CommitServoDriver(ServoMoveTime);
    20e0:	080067ac 	.word	0x080067ac
    20e4:	0000003e 	.word	0x0000003e
    20e8:	00080e4e 	.word	0x00080e4e
			} else {
				//Turn the bot off - May need to add ajust here...
				if (g_InControlState.fPrev_RobotOn || (AllDown = 0)) {
    20ec:	0000000c 	.word	0x0000000c
					PrintString("Barebones lTimeWaitEnd-Millis  ");
					Printu32d(getMillis);
					PrintString("\n");
#endif
				} else {
					FreeServos();
    20f0:	00002088 	.word	0x00002088
    20f4:	080067ec 	.word	0x080067ec
				// Only do commit if we are actually doing something...
				CommitServoDriver(ServoMoveTime);
			} else {
				//Turn the bot off - May need to add ajust here...
				if (g_InControlState.fPrev_RobotOn || (AllDown = 0)) {
					ServoMoveTime = 600;
    20f8:	00000018 	.word	0x00000018
    20fc:	0000000c 	.word	0x0000000c
					StartUpdateServos();
    2100:	00002088 	.word	0x00002088
					CommitServoDriver(ServoMoveTime);
    2104:	08006804 	.word	0x08006804
					//MSound(3, 100, 2500, 80, 2250, 60, 2000);
					Buzzed(100, 2500);
    2108:	00000016 	.word	0x00000016
    210c:	0000000c 	.word	0x0000000c
    2110:	00002088 	.word	0x00002088
					Buzzed(80, 2250);
    2114:	0800681c 	.word	0x0800681c
    2118:	00000016 	.word	0x00000016
					Buzzed(60, 2000);
    211c:	0000000c 	.word	0x0000000c
    2120:	00002088 	.word	0x00002088
    2124:	08006834 	.word	0x08006834

					//lTimeWaitEnd = getMillis() + 600; // setup to process background stuff while we wait...
					lTimeWaitEnd = getMillis() + 600; // setup to process background stuff while we wait...
    2128:	0000001a 	.word	0x0000001a
    212c:	0000000c 	.word	0x0000000c
					Printu32d(lTimeWaitEnd);
					PrintString("\n");
#endif
					do {
						// Wait the appropriate time, call any background process while waiting...
						DoBackgroundProcess();
    2130:	00002088 	.word	0x00002088
					} while (getMillis() < lTimeWaitEnd);
    2134:	08006850 	.word	0x08006850
    2138:	00000016 	.word	0x00000016
				} else {
					FreeServos();
				}

				// Allow the Servo driver to do stuff durint our idle time
				IdleTime();
    213c:	0000000c 	.word	0x0000000c
				mDelay(20); // give a pause between times we call if nothing is happening
    2140:	00002088 	.word	0x00002088
			}
			PrevServoMoveTime = ServoMoveTime;
    2144:	08006868 	.word	0x08006868
    2148:	0000001a 	.word	0x0000001a

			//Store previous g_InControlState.fRobotOn State
			if (g_InControlState.fRobotOn)
    214c:	0000000c 	.word	0x0000000c
    2150:	00002088 	.word	0x00002088
				g_InControlState.fPrev_RobotOn = 1;
			else
				g_InControlState.fPrev_RobotOn = 0;
    2154:	08006884 	.word	0x08006884
    2158:	00000008 	.word	0x00000008
    215c:	0000000c 	.word	0x0000000c
    2160:	00002088 	.word	0x00002088
    2164:	0800688c 	.word	0x0800688c
    2168:	00000008 	.word	0x00000008
    216c:	0000000c 	.word	0x0000000c
    2170:	00002088 	.word	0x00002088
    2174:	08006894 	.word	0x08006894
    2178:	0000000c 	.word	0x0000000c
    217c:	0000000c 	.word	0x0000000c
    2180:	00002088 	.word	0x00002088
    2184:	080068a0 	.word	0x080068a0
    2188:	00000012 	.word	0x00000012
    218c:	0000000c 	.word	0x0000000c
    2190:	00002088 	.word	0x00002088
    2194:	080068b4 	.word	0x080068b4
    2198:	00000012 	.word	0x00000012
    219c:	0000000c 	.word	0x0000000c
    21a0:	00002088 	.word	0x00002088
    21a4:	080068c8 	.word	0x080068c8
    21a8:	0000001a 	.word	0x0000001a
    21ac:	0000000c 	.word	0x0000000c
    21b0:	00002088 	.word	0x00002088
    21b4:	080068e4 	.word	0x080068e4
    21b8:	0000001a 	.word	0x0000001a
    21bc:	0000000c 	.word	0x0000000c
    21c0:	00002088 	.word	0x00002088
    21c4:	08006900 	.word	0x08006900
    21c8:	0000001a 	.word	0x0000001a
    21cc:	0000000c 	.word	0x0000000c
    21d0:	00002088 	.word	0x00002088
    21d4:	0800691c 	.word	0x0800691c
    21d8:	00000016 	.word	0x00000016
    21dc:	0000000c 	.word	0x0000000c
    21e0:	00002088 	.word	0x00002088
    21e4:	08006934 	.word	0x08006934
    21e8:	0000001a 	.word	0x0000001a
    21ec:	0000000c 	.word	0x0000000c
    21f0:	00002088 	.word	0x00002088
    21f4:	08006950 	.word	0x08006950
    21f8:	0000000c 	.word	0x0000000c
    21fc:	0000000c 	.word	0x0000000c
    2200:	00002088 	.word	0x00002088
    2204:	0800695c 	.word	0x0800695c
    2208:	0000000a 	.word	0x0000000a
    220c:	0000000c 	.word	0x0000000c
    2210:	00002088 	.word	0x00002088
    2214:	08006968 	.word	0x08006968
    2218:	0000004a 	.word	0x0000004a
    221c:	0000000c 	.word	0x0000000c
    2220:	00002088 	.word	0x00002088
    2224:	080069b4 	.word	0x080069b4
    2228:	00000010 	.word	0x00000010
    222c:	0000001c 	.word	0x0000001c
    2230:	00002088 	.word	0x00002088
    2234:	080069c4 	.word	0x080069c4
    2238:	0000009c 	.word	0x0000009c
    223c:	8e100e54 	.word	0x8e100e54
    2240:	85028601 	.word	0x85028601
    2244:	6c048403 	.word	0x6c048403
    2248:	0000300e 	.word	0x0000300e
    224c:	00000014 	.word	0x00000014
    2250:	00002088 	.word	0x00002088
    2254:	08006a60 	.word	0x08006a60
    2258:	00000094 	.word	0x00000094
    225c:	44040e42 	.word	0x44040e42
    2260:	018e100e 	.word	0x018e100e
    2264:	0000000c 	.word	0x0000000c
    2268:	ffffffff 	.word	0xffffffff
    226c:	7c010001 	.word	0x7c010001
    2270:	000d0c0e 	.word	0x000d0c0e
    2274:	00000018 	.word	0x00000018
    2278:	00002264 	.word	0x00002264
    227c:	08006b64 	.word	0x08006b64
    2280:	00000054 	.word	0x00000054
    2284:	000d0946 	.word	0x000d0946
    2288:	8e080e44 	.word	0x8e080e44
    228c:	00028d01 	.word	0x00028d01
    2290:	0000000c 	.word	0x0000000c
    2294:	ffffffff 	.word	0xffffffff
    2298:	7c010001 	.word	0x7c010001
    229c:	000d0c0e 	.word	0x000d0c0e
    22a0:	00000014 	.word	0x00000014
    22a4:	00002290 	.word	0x00002290
    22a8:	00000000 	.word	0x00000000
    22ac:	00000028 	.word	0x00000028
    22b0:	4c040e44 	.word	0x4c040e44
    22b4:	018e080e 	.word	0x018e080e
    22b8:	0000000c 	.word	0x0000000c
    22bc:	ffffffff 	.word	0xffffffff
    22c0:	7c010001 	.word	0x7c010001
    22c4:	000d0c0e 	.word	0x000d0c0e
    22c8:	0000000c 	.word	0x0000000c
    22cc:	000022b8 	.word	0x000022b8
    22d0:	00000000 	.word	0x00000000
    22d4:	00000030 	.word	0x00000030
    22d8:	0000000c 	.word	0x0000000c
    22dc:	ffffffff 	.word	0xffffffff
    22e0:	7c010001 	.word	0x7c010001
    22e4:	000d0c0e 	.word	0x000d0c0e
    22e8:	00000018 	.word	0x00000018
    22ec:	000022d8 	.word	0x000022d8
    22f0:	00000000 	.word	0x00000000
    22f4:	00000048 	.word	0x00000048
    22f8:	8e100e44 	.word	0x8e100e44
    22fc:	85028601 	.word	0x85028601
    2300:	00048403 	.word	0x00048403
    2304:	00000018 	.word	0x00000018
    2308:	000022d8 	.word	0x000022d8
    230c:	00000000 	.word	0x00000000
    2310:	00000080 	.word	0x00000080
    2314:	8e100e44 	.word	0x8e100e44
    2318:	85028601 	.word	0x85028601
    231c:	00048403 	.word	0x00048403
    2320:	0000000c 	.word	0x0000000c
    2324:	ffffffff 	.word	0xffffffff
    2328:	7c010001 	.word	0x7c010001
    232c:	000d0c0e 	.word	0x000d0c0e
    2330:	00000018 	.word	0x00000018
    2334:	00002320 	.word	0x00002320
    2338:	00000000 	.word	0x00000000
    233c:	000000fc 	.word	0x000000fc
    2340:	860c0e44 	.word	0x860c0e44
    2344:	84028501 	.word	0x84028501
    2348:	00000003 	.word	0x00000003
    234c:	0000000c 	.word	0x0000000c
    2350:	ffffffff 	.word	0xffffffff
    2354:	7c010001 	.word	0x7c010001
    2358:	000d0c0e 	.word	0x000d0c0e
    235c:	00000014 	.word	0x00000014
    2360:	0000234c 	.word	0x0000234c
    2364:	00000000 	.word	0x00000000
    2368:	000000d0 	.word	0x000000d0
    236c:	85080e48 	.word	0x85080e48
    2370:	00028401 	.word	0x00028401
    2374:	0000000c 	.word	0x0000000c
    2378:	ffffffff 	.word	0xffffffff
    237c:	7c010001 	.word	0x7c010001
    2380:	000d0c0e 	.word	0x000d0c0e
    2384:	0000001c 	.word	0x0000001c
    2388:	00002374 	.word	0x00002374
    238c:	00000000 	.word	0x00000000
    2390:	0000009c 	.word	0x0000009c
    2394:	88140e48 	.word	0x88140e48
    2398:	86028701 	.word	0x86028701
    239c:	84048503 	.word	0x84048503
    23a0:	00000005 	.word	0x00000005
    23a4:	0000000c 	.word	0x0000000c
    23a8:	ffffffff 	.word	0xffffffff
    23ac:	7c010001 	.word	0x7c010001
    23b0:	000d0c0e 	.word	0x000d0c0e
    23b4:	00000024 	.word	0x00000024
    23b8:	000023a4 	.word	0x000023a4
    23bc:	00000000 	.word	0x00000000
    23c0:	0000010c 	.word	0x0000010c
    23c4:	8e240e44 	.word	0x8e240e44
    23c8:	8a028b01 	.word	0x8a028b01
    23cc:	88048903 	.word	0x88048903
    23d0:	86068705 	.word	0x86068705
    23d4:	84088507 	.word	0x84088507
    23d8:	300e4c09 	.word	0x300e4c09

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	5446454c 	strbpl	r4, [r6], #-1356
       4:	75614200 	strbvc	r4, [r1, #-512]!
       8:	74617264 	strbtvc	r7, [r1], #-612
       c:	495a5f65 	ldmdbmi	sl, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
      10:	58410047 	stmdapl	r1, {r0, r1, r2, r6}^
      14:	52505f4d 	subspl	r5, r0, #308	; 0x134
      18:	4e455345 	cdpmi	3, 4, cr5, cr5, cr5, {2}
      1c:	4f565f54 	svcmi	0x00565f54
      20:	4741544c 	strbmi	r5, [r1, -ip, asr #8]
      24:	58440045 	stmdapl	r4, {r0, r2, r6}^
      28:	58525f4c 	ldmdapl	r2, {r2, r3, r6, r8, r9, sl, fp, ip, lr}^
      2c:	454d4954 	strbmi	r4, [sp, #-2388]
      30:	0054554f 	subseq	r5, r4, pc, asr #10
      34:	5f4d5841 	svcpl	0x004d5841
      38:	5245504f 	subpl	r5, r5, #79	; 0x4f
      3c:	4e495441 	cdpmi	4, 4, cr5, cr9, cr1, {2}
      40:	4f4d5f47 	svcmi	0x004d5f47
      44:	41004544 	tstmi	r0, r4, asr #10
      48:	732f5050 	teqvc	pc, #80	; 0x50
      4c:	6d2f6372 	stcvs	3, cr6, [pc, #-456]!
      50:	2e6e6961 	cdpcs	9, 6, cr6, cr14, cr1, {3}
      54:	61420063 	cmpvs	r2, r3, rrx
      58:	61726475 	cmnvs	r2, r5, ror r4
      5c:	505f6574 	subspl	r6, pc, r4, ror r5
      60:	50005543 	andpl	r5, r0, r3, asr #10
      64:	52474f52 	subpl	r4, r7, #328	; 0x148
      68:	41004d41 	tstmi	r0, r1, asr #26
      6c:	4c5f4d58 	mrrcmi	13, 5, r4, pc, cr8
      70:	41004445 	tstmi	r0, r5, asr #8
      74:	435f4d58 	cmpmi	pc, #5632	; 0x1600
      78:	4f435f57 	svcmi	0x00435f57
      7c:	494c504d 	stmdbmi	ip, {r0, r2, r3, r6, ip, lr}^
      80:	45434e41 	strbmi	r4, [r3, #-3649]
      84:	52414d5f 	subpl	r4, r1, #6080	; 0x17c0
      88:	004e4947 	subeq	r4, lr, r7, asr #18
      8c:	5f4d5841 	svcpl	0x004d5841
      90:	54415453 	strbpl	r5, [r1], #-1107
      94:	525f5355 	subspl	r5, pc, #1409286145	; 0x54000001
      98:	52555445 	subspl	r5, r5, #1157627904	; 0x45000000
      9c:	454c5f4e 	strbmi	r5, [ip, #-3918]
      a0:	004c4556 	subeq	r4, ip, r6, asr r5
      a4:	74616477 	strbtvc	r6, [r1], #-1143
      a8:	75620061 	strbvc	r0, [r2, #-97]!
      ac:	64657a7a 	strbtvs	r7, [r5], #-2682
      b0:	746f6e5f 	strbtvc	r6, [pc], #3679	; b8 <_Minimum_Stack_Size-0x48>
      b4:	00655f65 	rsbeq	r5, r5, r5, ror #30
      b8:	5f4d5841 	svcpl	0x004d5841
      bc:	44554142 	ldrbmi	r4, [r5], #-322
      c0:	5441525f 	strbpl	r5, [r1], #-607
      c4:	58410045 	stmdapl	r1, {r0, r2, r6}^
      c8:	45525f4d 	ldrbmi	r5, [r2, #-3917]
      cc:	4e525554 	mrcmi	5, 2, r5, cr2, cr4, {2}
      d0:	4c45445f 	cfstrdmi	mvd4, [r5], {95}
      d4:	545f5941 	ldrbpl	r5, [pc], #2369	; dc <_Minimum_Stack_Size-0x24>
      d8:	00454d49 	subeq	r4, r5, r9, asr #26
      dc:	45544f4e 	ldrbmi	r4, [r4, #-3918]
      e0:	0073465f 	rsbseq	r4, r3, pc, asr r6
      e4:	524f5045 	subpl	r5, pc, #69	; 0x45
      e8:	00413354 	subeq	r3, r1, r4, asr r3
      ec:	5a706267 	bpl	1c18a90 <__Stack_Size+0x1c18690>
      f0:	75426769 	strbvc	r6, [r2, #-1897]
      f4:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
      f8:	44626700 	strbtmi	r6, [r2], #-1792
      fc:	65526c78 	ldrbvs	r6, [r2, #-3192]
     100:	41006461 	tstmi	r0, r1, ror #8
     104:	485f4d58 	ldmdami	pc, {r3, r4, r6, r8, sl, fp, lr}^
     108:	45484749 	strbmi	r4, [r8, #-1865]
	ui2a(num,10,0,bf);
	}

static int a2d(char ch)
	{
	if (ch>='0' && ch<='9') 
     10c:	4c5f5453 	cfldrdmi	mvd5, [pc], {83}
     110:	54494d49 	strbpl	r4, [r9], #-3401
	int num=0;
	int digit;
	while ((digit=a2d(ch))>=0) {
		if (digit>base) break;
		num=num*base+digit;
		ch=*p++;
     114:	4c4f565f 	mcrrmi	6, 5, r5, pc, cr15

static int a2d(char ch)
	{
	if (ch>='0' && ch<='9') 
		return ch-'0';
	else if (ch>='a' && ch<='f')
     118:	45474154 	strbmi	r4, [r7, #-340]
     11c:	4d584100 	ldfmie	f4, [r8]
		return ch-'a'+10;
     120:	4552505f 	ldrbmi	r5, [r2, #-95]
     124:	544e4553 	strbpl	r4, [lr], #-1363
	else if (ch>='A' && ch<='F')
     128:	4d45545f 	cfstrdmi	mvd5, [r5, #-380]
     12c:	41524550 	cmpmi	r2, r0, asr r5
     130:	45525554 	ldrbmi	r5, [r2, #-1364]
		return ch-'A'+10;
     134:	4c584400 	cfldrdmi	mvd4, [r8], {0}
static char a2i(char ch, char** src,int base,int* nump)
	{
	char* p= *src;
	int num=0;
	int digit;
	while ((digit=a2d(ch))>=0) {
     138:	4358525f 	cmpmi	r8, #-268435451	; 0xf0000005
			if (ch=='l') {
				ch=*(fmt++);
				lng=1;
			}
#endif
			switch (ch) {
     13c:	4b434548 	blmi	10d1664 <__Stack_Size+0x10d1264>
     140:	004d5553 	subeq	r5, sp, r3, asr r5
     144:	5f4c5844 	svcpl	0x004c5844
     148:	5f444142 	svcpl	0x00444142
     14c:	54534e49 	ldrbpl	r4, [r3], #-3657
     150:	544f4e00 	strbpl	r4, [pc], #3584	; 158 <_Minimum_Stack_Size+0x58>
     154:	62475f45 	subvs	r5, r7, #276	; 0x114
     158:	4d584100 	ldfmie	f4, [r8]
     15c:	4e55505f 	mrcmi	0, 2, r5, cr5, cr15, {2}
     160:	485f4843 	ldmdami	pc, {r0, r1, r6, fp, lr}^
     164:	4d584100 	ldfmie	f4, [r8]
     168:	4e55505f 	mrcmi	0, 2, r5, cr5, cr15, {2}
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
     16c:	4c5f4843 	mrrcmi	8, 4, r4, pc, cr3
     170:	6f504500 	svcvs	0x00504500
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
     174:	5f417472 	svcpl	0x00417472

static void i2a (int num, char * bf)
	{
	if (num<0) {
		num=-num;
		*bf++ = '-';
     178:	4f4e0065 	svcmi	0x004e0065
     17c:	475f4554 	undefined
	*bf=0;
	}

static void i2a (int num, char * bf)
	{
	if (num<0) {
     180:	50450073 	subpl	r0, r5, r3, ror r0
		num=-num;
		*bf++ = '-';
     184:	3454524f 	ldrbcc	r5, [r4], #-591
     188:	58410041 	stmdapl	r1, {r0, r6}^
		}
	ui2a(num,10,0,bf);
     18c:	43435f4d 	movtmi	r5, #16205	; 0x3f4d
     190:	4e415f57 	mcrmi	15, 2, r5, cr1, cr7, {2}
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
					putchw(putp,putf,w,lz,bf);
     194:	5f454c47 	svcpl	0x00454c47
     198:	494d494c 	stmdbmi	sp, {r2, r3, r6, r8, fp, lr}^
     19c:	00485f54 	subeq	r5, r8, r4, asr pc
     1a0:	5f4d5841 	svcpl	0x004d5841
     1a4:	5f574343 	svcpl	0x00574343
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
     1a8:	4c474e41 	mcrrmi	14, 4, r4, r7, cr1
     1ac:	494c5f45 	stmdbmi	ip, {r0, r2, r6, r8, r9, sl, fp, ip, lr}^
     1b0:	5f54494d 	svcpl	0x0054494d
     1b4:	6552004c 	ldrbvs	r0, [r2, #-76]
     1b8:	76696563 	strbtvc	r6, [r9], -r3, ror #10
					putchw(putp,putf,w,lz,bf);
     1bc:	6f436465 	svcvs	0x00436465
     1c0:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
     1c4:	4e470064 	cdpmi	0, 4, cr0, cr7, cr4, {3}
					break;
				case 'c' : 
					putf(putp,(char)(va_arg(va, int)));
     1c8:	20432055 	subcs	r2, r3, r5, asr r0
     1cc:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
     1d0:	58410030 	stmdapl	r1, {r4, r5}^
					break;
				case 's' : 
					putchw(putp,putf,w,0,va_arg(va, char*));
     1d4:	43435f4d 	movtmi	r5, #16205	; 0x3f4d
     1d8:	4f435f57 	svcmi	0x00435f57
     1dc:	494c504d 	stmdbmi	ip, {r0, r2, r3, r6, ip, lr}^
     1e0:	45434e41 	strbmi	r4, [r3, #-3649]
     1e4:	4f4c535f 	svcmi	0x004c535f
     1e8:	41004550 	tstmi	r0, r0, asr r5
					break;
				case '%' :
					putf(putp,ch);
     1ec:	4c5f4d58 	mrrcmi	13, 5, r4, pc, cr8
     1f0:	004b434f 	subeq	r4, fp, pc, asr #6
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
     1f4:	5f4d5841 	svcpl	0x004d5841
     1f8:	53554150 	cmppl	r5, #20	; 0x14
					break;
				}
			}
		}
	abort:;
	}
     1fc:	49545f45 	ldmdbmi	r4, {r0, r2, r6, r8, r9, sl, fp, ip, lr}^


void init_printf(void* putp,void (*putf) (void*,char))
	{
	stdout_putf=putf;
     200:	4400454d 	strmi	r4, [r0], #-1357
	stdout_putp=putp;
     204:	4e5f4c58 	mrcmi	12, 2, r4, cr15, cr8, {2}
	}
     208:	5f4c4c55 	svcpl	0x004c4c55
     20c:	41544144 	cmpmi	r4, r4, asr #2
     210:	4f504500 	svcmi	0x00504500
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
     214:	41355452 	teqmi	r5, r2, asr r4
     218:	74754200 	ldrbtvc	r4, [r5], #-512
	}
     21c:	5f6e6f74 	svcpl	0x006e6f74



void tfp_sprintf(char* s,char *fmt, ...)
	{
     220:	68730065 	ldmdavs	r3!, {r0, r2, r5, r6}^
     224:	2074726f 	rsbscs	r7, r4, pc, ror #4
     228:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     22c:	64656e67 	strbtvs	r6, [r5], #-3687
     230:	746e6920 	strbtvc	r6, [lr], #-2336
	va_list va;
	va_start(va,fmt);
	tfp_format(&s,putcp,fmt,va);
     234:	544f4e00 	strbpl	r4, [pc], #3584	; 23c <_Minimum_Stack_Size+0x13c>
     238:	00415f45 	subeq	r5, r1, r5, asr #30
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
     23c:	45544f4e 	ldrbmi	r4, [r4, #-3918]
	va_list va;
	va_start(va,fmt);
	tfp_format(&s,putcp,fmt,va);
	putcp(&s,0);
	va_end(va);
	}
     240:	4e00425f 	mcrmi	2, 0, r4, cr0, cr15, {2}
     244:	5f45544f 	svcpl	0x0045544f
     248:	42560044 	subsmi	r0, r6, #68	; 0x44
     24c:	4e005355 	mcrmi	3, 0, r5, cr0, cr5, {2}
	stdout_putf=putf;
	stdout_putp=putp;
	}

void tfp_printf(char *fmt, ...)
	{
     250:	5f45544f 	svcpl	0x0045544f
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
     254:	4f4e0046 	svcmi	0x004e0046
     258:	475f4554 	undefined
	stdout_putf=putf;
	stdout_putp=putp;
	}

void tfp_printf(char *fmt, ...)
	{
     25c:	544f4e00 	strbpl	r4, [pc], #3584	; 264 <_Minimum_Stack_Size+0x164>
     260:	62415f45 	subvs	r5, r1, #276	; 0x114
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
     264:	50626700 	rsbpl	r6, r2, r0, lsl #14
	va_end(va);
	}
     268:	72577563 	subsvc	r7, r7, #415236096	; 0x18c00000
     26c:	00657469 	rsbeq	r7, r5, r9, ror #8
     270:	5f4d5841 	svcpl	0x004d5841
     274:	4e004449 	cdpmi	4, 0, cr4, cr0, cr9, {2}
     278:	5f45544f 	svcpl	0x0045544f
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
     27c:	41007341 	tstmi	r0, r1, asr #6
	dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction (INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
     280:	4d5f4d58 	ldclmi	13, cr4, [pc, #-352]
     284:	4c45444f 	cfstrdmi	mvd4, [r5], {79}
     288:	4d554e5f 	ldclmi	14, cr4, [r5, #-380]
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
	}
	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
     28c:	5f524542 	svcpl	0x00524542
     290:	58410048 	stmdapl	r1, {r3, r6}^
     294:	4f4d5f4d 	svcmi	0x004d5f4d
	dxl_txrx_packet();
     298:	5f4c4544 	svcpl	0x004c4544
	u16 CommStatus = dxl_get_result();
     29c:	424d554e 	submi	r5, sp, #327155712	; 0x13800000
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
     2a0:	4c5f5245 	lfmmi	f5, 2, [pc], {69}
		PrintErrorCode();
     2a4:	4c584400 	cfldrdmi	mvd4, [r8], {0}
	else
		PrintCommStatus(CommStatus);
     2a8:	4c58525f 	lfmmi	f5, 2, [r8], {95}
#endif
}
     2ac:	54474e45 	strbpl	r4, [r7], #-3653
     2b0:	62670048 	rsbvs	r0, r7, #72	; 0x48
     2b4:	6c784470 	cfldrdvs	mvd4, [r8], #-448
     2b8:	66667542 	strbtvs	r7, [r6], -r2, asr #10
	}
	interpolating = 1;
}
/* interpolate our pose, this should be called at about 30Hz. */
#define WAIT_SLOP_FACTOR 10
int BioloidControllerEx_interpolateStep(bool fWait) {
     2bc:	41007265 	tstmi	r0, r5, ror #4
     2c0:	435f4d58 	cmpmi	pc, #5632	; 0x1600

	if (interpolating == 0)
     2c4:	435f5743 	cmpmi	pc, #17563648	; 0x10c0000
		return 0;
	int i;
	int complete = poseSize;
     2c8:	4c504d4f 	mrrcmi	13, 4, r4, r0, cr15
	if (!fWait) {
     2cc:	434e4149 	movtmi	r4, #57673	; 0xe149
		if (getMillis() < (nextframe_ - WAIT_SLOP_FACTOR)) {
     2d0:	414d5f45 	cmpmi	sp, r5, asr #30
     2d4:	4e494752 	mcrmi	7, 2, r4, cr9, cr2, {2}
     2d8:	4d584100 	ldfmie	f4, [r8]
			return (getMillis() - nextframe_); // We still have some time to do something...
     2dc:	58414d5f 	stmdapl	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
     2e0:	524f545f 	subpl	r5, pc, #1593835520	; 0x5f000000
     2e4:	5f455551 	svcpl	0x00455551
#ifdef MILLIS
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	while (getMillis() < nextframe_);
     2e8:	58410048 	stmdapl	r1, {r3, r6}^
     2ec:	414d5f4d 	cmpmi	sp, sp, asr #30
     2f0:	4f545f58 	svcmi	0x00545f58
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
     2f4:	45555152 	ldrbmi	r5, [r5, #-338]
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     2f8:	41004c5f 	tstmi	r0, pc, asr ip
     2fc:	555f4d58 	ldrbpl	r4, [pc, #-3416]	; fffff5ac <SCS_BASE+0x1fff15ac>
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
     300:	41435f50 	cmpmi	r3, r0, asr pc
     304:	5242494c 	subpl	r4, r2, #1245184	; 0x130000
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     308:	4f495441 	svcmi	0x00495441
		int diff = nextpose_[i] - pose_[i];
     30c:	00485f4e 	subeq	r5, r8, lr, asr #30
     310:	5f4c5844 	svcpl	0x004c5844
     314:	41465854 	cmpmi	r6, r4, asr r8
     318:	45004c49 	strmi	r4, [r0, #-3145]
     31c:	54524f50 	ldrbpl	r4, [r2], #-3920
		if (diff == 0) {
     320:	41004136 	tstmi	r0, r6, lsr r1
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
     324:	555f4d58 	ldrbpl	r4, [pc, #-3416]	; fffff5d4 <SCS_BASE+0x1fff15d4>
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
     328:	41435f50 	cmpmi	r3, r0, asr pc
		int diff = nextpose_[i] - pose_[i];
		if (diff == 0) {
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
     32c:	5242494c 	subpl	r4, r2, #1245184	; 0x130000
					pose_[i] = nextpose_[i];
     330:	4f495441 	svcmi	0x00495441
					complete--;
     334:	004c5f4e 	subeq	r5, ip, lr, asr #30
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
     338:	5f4d5841 	svcpl	0x004d5841
     33c:	49564f4d 	ldmdbmi	r6, {r0, r2, r3, r6, r8, r9, sl, fp, lr}^
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
     340:	4100474e 	tstmi	r0, lr, asr #14
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
     344:	505f4d58 	subspl	r4, pc, r8, asr sp
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
     348:	45534552 	ldrbmi	r4, [r3, #-1362]
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     34c:	505f544e 	subspl	r5, pc, lr, asr #8
     350:	5449534f 	strbpl	r5, [r9], #-847
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif

	}
	if (complete <= 0)
     354:	5f4e4f49 	svcpl	0x004e4f49
		interpolating = 0;
     358:	58410048 	stmdapl	r1, {r3, r6}^
	BioloidControllerEx_writePose();
     35c:	52505f4d 	subspl	r5, r0, #308	; 0x134
     360:	4e455345 	cdpmi	3, 4, cr5, cr5, cr5, {2}
	return 0;
}
     364:	4f505f54 	svcmi	0x00505f54
     368:	49544953 	ldmdbmi	r4, {r0, r1, r4, r6, r8, fp, lr}^
     36c:	4c5f4e4f 	mrrcmi	14, 4, r4, pc, cr15
     370:	574f5000 	strbpl	r5, [pc, -r0]
     374:	4e005245 	cdpmi	2, 0, cr5, cr0, cr5, {2}
     378:	5f45544f 	svcpl	0x0045544f
     37c:	4e006242 	cdpmi	2, 0, cr6, cr0, cr2, {2}
     380:	5f45544f 	svcpl	0x0045544f
	for (i = 0; i < poseSize; i++)
		//nextpose_[i] = pgm_read_word_near(addr+1+i) << BIOLOID_SHIFT;
		nextpose_[i] = pgm_read_word_near(addr + 1 + i);
}
/* read in current servo positions to the pose. */
void BioloidControllerEx_readPose() {
     384:	54530043 	ldrbpl	r0, [r3], #-67
     388:	00545241 	subseq	r5, r4, r1, asr #4
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
		//pose_[i] = dxl_read_word(id_[i],AXM_PRESENT_POSITION_L)<<BIOLOID_SHIFT;
		pose_[i] = dxl_read_word(id_[i], AXM_PRESENT_POSITION_L);
     38c:	45544f4e 	ldrbmi	r4, [r4, #-3918]
     390:	6700455f 	smlsdvs	r0, pc, r5, r4
     394:	67695a62 	strbvs	r5, [r9, -r2, ror #20]!
     398:	64616552 	strbtvs	r6, [r1], #-1362
     39c:	5c3a4300 	ldcpl	3, cr4, [sl]
		PrintChar(id_[i]);
		PrintString(" - ");
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
     3a0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001

#ifdef DEBUG_BIOLOIDEX
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
     3a4:	6e695c73 	mcrvs	12, 3, r5, cr9, cr3, {3}
     3a8:	6c617473 	cfstrdvs	mvd7, [r1], #-460
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
	}
}
     3ac:	72705c6c 	rsbsvc	r5, r0, #27648	; 0x6c00
     3b0:	6b656a6f 	blvs	195ad74 <__Stack_Size+0x195a974>
     3b4:	69425c74 	stmdbvs	r2, {r2, r4, r5, r6, sl, fp, ip, lr}^
     3b8:	696f6c6f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitPosY[GaitCurrentLegNr] = -3 * g_InControlState.LegLiftHeight
				/ (3 + g_InControlState.gaitCur.HalfLiftHeight); // Easier to shift between div factor: /1 (3/3), /2 (3/6) and 3/4
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y
     3bc:	75482d64 	strbvc	r2, [r8, #-3428]
				/ g_InControlState.gaitCur.LiftDivFactor;
	}

	//Optional Half heigth Rear 5 LiftedPos (5 lifted positions)
	else if (((g_InControlState.gaitCur.NrLiftedPos == 5 && (LegStep == -2)))
     3c0:	6f6e616d 	svcvs	0x006e616d
     3c4:	522d6469 	eorpl	r6, sp, #1761607680	; 0x69000000
     3c8:	746f626f 	strbtvc	r6, [pc], #623	; 3d0 <_Minimum_Stack_Size+0x2d0>
     3cc:	6d75685c 	ldclvs	8, cr6, [r5, #-368]!
     3d0:	696f6e61 	stmdbvs	pc!, {r0, r5, r6, r9, sl, fp, sp, lr}^
     3d4:	5f635f64 	svcpl	0x00635f64
     3d8:	746e6f63 	strbtvc	r6, [lr], #-3939
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = -g_InControlState.TravelLength.x / 2;
     3dc:	6c6c6f72 	stclvs	15, cr6, [ip], #-456
     3e0:	41007265 	tstmi	r0, r5, ror #4
     3e4:	545f4d58 	ldrbpl	r4, [pc], #3416	; 3ec <_Minimum_Stack_Size+0x2ec>
     3e8:	5551524f 	ldrbpl	r5, [r1, #-591]
     3ec:	494c5f45 	stmdbmi	ip, {r0, r2, r6, r8, r9, sl, fp, ip, lr}^
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
     3f0:	5f54494d 	svcpl	0x0054494d
     3f4:	62670048 	rsbvs	r0, r7, #72	; 0x48
     3f8:	52756350 	rsbspl	r6, r5, #1073741825	; 0x40000001
     3fc:	00646165 	rsbeq	r6, r4, r5, ror #2
     400:	5f4d5841 	svcpl	0x004d5841
		GaitPosZ[GaitCurrentLegNr] = -g_InControlState.TravelLength.z / 2;
     404:	51524f54 	cmppl	r2, r4, asr pc
     408:	4c5f4555 	cfldr64mi	mvdx4, [pc], {85}
     40c:	54494d49 	strbpl	r4, [r9], #-3401
     410:	41004c5f 	tstmi	r0, pc, asr ip
		GaitRotY[GaitCurrentLegNr] = -g_InControlState.TravelLength.y / 2;
     414:	525f4d58 	subspl	r4, pc, #5632	; 0x1600
     418:	53494745 	movtpl	r4, #38725	; 0x9745
     41c:	45524554 	ldrbmi	r4, [r2, #-1364]
     420:	4e495f44 	cdpmi	15, 4, cr5, cr9, cr4, {2}
	}

	//Optional Half heigth Front 5 LiftedPos (5 lifted positions)
	else if ((g_InControlState.gaitCur.NrLiftedPos == 5)
     424:	55525453 	ldrbpl	r5, [r2, #-1107]
     428:	4f495443 	svcmi	0x00495443
     42c:	5841004e 	stmdapl	r1, {r1, r2, r3, r6}^
     430:	4f545f4d 	svcmi	0x00545f4d
     434:	45555152 	ldrbmi	r5, [r5, #-338]
     438:	414e455f 	cmpmi	lr, pc, asr r5
			&& (LegStep == 2
					|| LegStep == -(g_InControlState.gaitCur.StepsInGait - 2))
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
     43c:	00454c42 	subeq	r4, r5, r2, asr #24
     440:	5f4d5841 	svcpl	0x004d5841
     444:	45574f4c 	ldrbmi	r4, [r7, #-3916]
     448:	4c5f5453 	cfldrdmi	mvd5, [pc], {83}
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
     44c:	54494d49 	strbpl	r4, [r9], #-3401
     450:	4c4f565f 	mcrrmi	6, 5, r5, pc, cr15
     454:	45474154 	strbmi	r4, [r7, #-340]
     458:	4c584400 	cfldrdmi	mvd4, [r8], {0}
     45c:	5758525f 	undefined
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
     460:	49544941 	ldmdbmi	r4, {r0, r6, r8, fp, lr}^
     464:	7500474e 	strvc	r4, [r0, #-1870]
     468:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     46c:	2064656e 	rsbcs	r6, r4, lr, ror #10
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y / 2;
     470:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     474:	414c5000 	cmpmi	ip, r0
     478:	62670059 	rsbvs	r0, r7, #89	; 0x59
     47c:	75635070 	strbvc	r5, [r3, #-112]!
	}
	//_B_
	//Leg front down position //bug here?  From _A_ to _B_ there should only be one gaitstep, not 2!
	//For example, where is the case of LegStep==0+2 executed when NRLiftedPos=3?
	else if ((LegStep == g_InControlState.gaitCur.FrontDownPos
     480:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     484:	44007265 	strmi	r7, [r0], #-613
     488:	525f4c58 	subspl	r4, pc, #22528	; 0x5800
     48c:	43555358 	cmpmi	r5, #1610612737	; 0x60000001
     490:	53534543 	cmppl	r3, #281018368	; 0x10c00000
     494:	6f687300 	svcvs	0x00687300
     498:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
     49c:	4100746e 	tstmi	r0, lr, ror #8
			|| LegStep
					== -(g_InControlState.gaitCur.StepsInGait
							- g_InControlState.gaitCur.FrontDownPos))
			&& GaitPosY[GaitCurrentLegNr] < 0) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
     4a0:	485f4d58 	ldmdami	pc, {r3, r4, r6, r8, sl, fp, lr}^
     4a4:	45484749 	strbmi	r4, [r8, #-1865]
     4a8:	4c5f5453 	cfldrdmi	mvd5, [pc], {83}
     4ac:	54494d49 	strbpl	r4, [r9], #-3401
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
     4b0:	4d45545f 	cfstrdmi	mvd5, [r5, #-380]
     4b4:	41524550 	cmpmi	r2, r0, asr r5
     4b8:	45525554 	ldrbmi	r5, [r2, #-1364]
     4bc:	4d584100 	ldfmie	f4, [r8]
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y / 2;
     4c0:	414c415f 	cmpmi	ip, pc, asr r1
     4c4:	4c5f4d52 	mrrcmi	13, 5, r4, pc, cr2
     4c8:	44004445 	strmi	r4, [r0], #-1093
		GaitPosY[GaitCurrentLegNr] = 0;
     4cc:	545f4c58 	ldrbpl	r4, [pc], #3160	; 4d4 <__Stack_Size+0xd4>
     4d0:	52524558 	subspl	r4, r2, #369098752	; 0x16000000
	}

	//Move body forward
	else {
		GaitPosX[GaitCurrentLegNr] = GaitPosX[GaitCurrentLegNr]
     4d4:	7400524f 	strvc	r5, [r0], #-591
     4d8:	6f43706d 	svcvs	0x0043706d
     4dc:	52006d6d 	andpl	r6, r0, #6976	; 0x1b40
     4e0:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     4e4:	44646576 	strbtmi	r6, [r4], #-1398
     4e8:	00617461 	rsbeq	r7, r1, r1, ror #8
				- (g_InControlState.TravelLength.x
						/ (short) g_InControlState.gaitCur.TLDivFactor);
		GaitPosY[GaitCurrentLegNr] = 0;
     4ec:	45544f4e 	ldrbmi	r4, [r4, #-3918]
     4f0:	0073435f 	rsbseq	r4, r3, pc, asr r3
     4f4:	5f44454c 	svcpl	0x0044454c
		GaitPosZ[GaitCurrentLegNr] = GaitPosZ[GaitCurrentLegNr]
     4f8:	58410065 	stmdapl	r1, {r0, r2, r5, r6}^
     4fc:	4f445f4d 	svcmi	0x00445f4d
     500:	435f4e57 	cmpmi	pc, #1392	; 0x570
     504:	42494c41 	submi	r4, r9, #16640	; 0x4100
				- (g_InControlState.TravelLength.z
						/ (short) g_InControlState.gaitCur.TLDivFactor);
		GaitRotY[GaitCurrentLegNr] = GaitRotY[GaitCurrentLegNr]
     508:	49544152 	ldmdbmi	r4, {r1, r4, r6, r8, lr}^
     50c:	485f4e4f 	ldmdami	pc, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
     510:	4d584100 	ldfmie	f4, [r8]
     514:	574f445f 	smlsldpl	r4, pc, pc, r4
				- (g_InControlState.TravelLength.y
						/ (short) g_InControlState.gaitCur.TLDivFactor);
	}

}
     518:	41435f4e 	cmpmi	r3, lr, asr #30
     51c:	5242494c 	subpl	r4, r2, #1245184	; 0x130000
     520:	4f495441 	svcmi	0x00495441
     524:	004c5f4e 	subeq	r5, ip, lr, asr #30
     528:	48474952 	stmdami	r7, {r1, r4, r6, r8, fp, lr}^
     52c:	64700054 	ldrbtvs	r0, [r0], #-84
     530:	00617461 	rsbeq	r7, r1, r1, ror #8

}

//--------------------------------------------------------------------
//[GAIT Sequence]
void GaitSeq(void) {
     534:	6f426552 	svcvs	0x00426552
	//Check if the Gait is in motion - If not if we are going to start a motion try to align our Gaitstep to start with a good foot
	// for the direction we are about to go...

	if (fWalking || (g_InControlState.ForceGaitStepCnt != 0))
     538:	6f54746f 	svcvs	0x0054746f
     53c:	746f6f42 	strbtvc	r6, [pc], #3906	; 544 <__Stack_Size+0x144>
     540:	64616f4c 	strbtvs	r6, [r1], #-3916
		TravelRequest = true;   // Is walking or was walking...
     544:	41007265 	tstmi	r0, r5, ror #4
     548:	505f4d58 	subspl	r4, pc, r8, asr sp
	else {
		TravelRequest = (abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
     54c:	45534552 	ldrbmi	r4, [r3, #-1362]
     550:	535f544e 	cmppl	pc, #1308622848	; 0x4e000000
     554:	44454550 	strbmi	r4, [r5], #-1360
     558:	4100485f 	tstmi	r0, pc, asr r8
     55c:	505f4d58 	subspl	r4, pc, r8, asr sp
     560:	45534552 	ldrbmi	r4, [r3, #-1362]
     564:	535f544e 	cmppl	pc, #1308622848	; 0x4e000000
     568:	44454550 	strbmi	r4, [r5], #-1360
     56c:	4e004c5f 	mcrmi	12, 0, r4, cr0, cr15, {2}
     570:	5f45544f 	svcpl	0x0045544f
     574:	41006244 	tstmi	r0, r4, asr #4
     578:	435f4d58 	cmpmi	pc, #5632	; 0x1600
     57c:	4e415f57 	mcrmi	15, 2, r5, cr1, cr7, {2}
				|| (abs(g_InControlState.TravelLength.y) > cTravelDeadZone);

		if (TravelRequest) {

		} else {    //Clear values under the cTravelDeadZone
			g_InControlState.TravelLength.x = 0;
     580:	5f454c47 	svcpl	0x00454c47
			g_InControlState.TravelLength.z = 0;
     584:	494d494c 	stmdbmi	sp, {r2, r3, r6, r8, fp, lr}^
			g_InControlState.TravelLength.y = 0; //Gait NOT in motion, return to home position
		}
	}

	//Calculate Gait sequence
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
     588:	00485f54 	subeq	r5, r8, r4, asr pc
     58c:	5f4c5844 	svcpl	0x004c5844
     590:	5f444142 	svcpl	0x00444142
		Gait(LegIndex);
     594:	41004449 	tstmi	r0, r9, asr #8
			g_InControlState.TravelLength.y = 0; //Gait NOT in motion, return to home position
		}
	}

	//Calculate Gait sequence
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
     598:	435f4d58 	cmpmi	pc, #5632	; 0x1600
     59c:	4e415f57 	mcrmi	15, 2, r5, cr1, cr7, {2}
     5a0:	5f454c47 	svcpl	0x00454c47
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5a4:	494d494c 	stmdbmi	sp, {r2, r3, r6, r8, fp, lr}^
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
     5a8:	004c5f54 	subeq	r5, ip, r4, asr pc
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5ac:	45544f4e 	ldrbmi	r4, [r4, #-3918]
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
     5b0:	0073445f 	rsbseq	r4, r3, pc, asr r4
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5b4:	524f5045 	subpl	r5, pc, #69	; 0x45
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
		g_InControlState.GaitStep = 1;
     5b8:	00413154 	subeq	r3, r1, r4, asr r1
     5bc:	5f4d5841 	svcpl	0x004d5841

	// If we have a force count decrement it now...
	if (g_InControlState.ForceGaitStepCnt)
     5c0:	4d524946 	ldclmi	9, cr4, [r2, #-280]
     5c4:	45524157 	ldrbmi	r4, [r2, #-343]
		g_InControlState.ForceGaitStepCnt--;
     5c8:	5245565f 	subpl	r5, r5, #99614720	; 0x5f00000
}
     5cc:	4e4f4953 	mcrmi	9, 2, r4, cr15, cr3, {2}
     5d0:	4d584100 	ldfmie	f4, [r8]
     5d4:	564f4d5f 	undefined
     5d8:	5f474e49 	svcpl	0x00474e49
     5dc:	45455053 	strbmi	r5, [r5, #-83]
}
//--------------------------------------------------------------------
//[BalanceBody]
void BalanceBody(void) {

	TotalTransZ = TotalTransZ / BalanceDivFactor;
     5e0:	00485f44 	subeq	r5, r8, r4, asr #30
     5e4:	78446267 	stmdavc	r4, {r0, r1, r2, r5, r6, r9, sp, lr}^
     5e8:	6972576c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, ip, lr}^
     5ec:	41006574 	tstmi	r0, r4, ror r5
     5f0:	4d5f4d58 	ldclmi	13, cr4, [pc, #-352]
	TotalTransX = TotalTransX / BalanceDivFactor;
     5f4:	4e49564f 	cdpmi	6, 4, cr5, cr9, cr15, {2}
     5f8:	50535f47 	subspl	r5, r3, r7, asr #30
     5fc:	5f444545 	svcpl	0x00444545
	TotalTransY = TotalTransY / BalanceDivFactor;
     600:	5841004c 	stmdapl	r1, {r2, r3, r6}^
     604:	4c415f4d 	mcrrmi	15, 4, r5, r1, cr13
     608:	5f4d5241 	svcpl	0x004d5241
     60c:	54554853 	ldrbpl	r4, [r5], #-2131

	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
		TotalXBal1 += 3600;

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
     610:	4e574f44 	cdpmi	15, 5, cr4, cr7, cr4, {2}
     614:	5a626700 	bpl	189a21c <__Stack_Size+0x1899e1c>
	TotalTransX = TotalTransX / BalanceDivFactor;
	TotalTransY = TotalTransY / BalanceDivFactor;

#ifndef QUADMODE // ??? on PhantomX Hex at no movment YBal1 = 1800, on Quad = 0...  Need to experiment
	if (TotalYBal1 > 0)        //Rotate balance circle by +/- 180 deg
		TotalYBal1 -= 1800;
     618:	72576769 	subsvc	r6, r7, #27525120	; 0x1a40000
     61c:	00657469 	rsbeq	r7, r5, r9, ror #8
	else
		TotalYBal1 += 1800;
     620:	5f4d5841 	svcpl	0x004d5841
#endif

	if (TotalZBal1 < -1800) //Compensate for extreme balance positions that causes overflow
     624:	4c414f47 	mcrrmi	15, 4, r4, r1, cr7
     628:	534f505f 	movtpl	r5, #61535	; 0xf05f
     62c:	4f495449 	svcmi	0x00495449
		TotalZBal1 += 3600;
     630:	00485f4e 	subeq	r5, r8, lr, asr #30
     634:	5f4d5841 	svcpl	0x004d5841

	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
     638:	54535953 	ldrbpl	r5, [r3], #-2387
     63c:	445f4d45 	ldrbmi	r4, [pc], #3397	; 644 <__Stack_Size+0x244>
		TotalXBal1 += 3600;
     640:	32415441 	subcc	r5, r1, #1090519040	; 0x41000000
     644:	4d584100 	ldfmie	f4, [r8]

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
     648:	414f475f 	cmpmi	pc, pc, asr r7
     64c:	4f505f4c 	svcmi	0x00505f4c
	TotalXBal1 = -TotalXBal1 / BalanceDivFactor;
     650:	49544953 	ldmdbmi	r4, {r0, r1, r4, r6, r8, fp, lr}^
     654:	4c5f4e4f 	mrrcmi	14, 4, r4, pc, cr15
	TotalZBal1 = TotalZBal1 / BalanceDivFactor;
     658:	72657000 	rsbvc	r7, r5, #0	; 0x0
	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
		TotalXBal1 += 3600;

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
	TotalXBal1 = -TotalXBal1 / BalanceDivFactor;
     65c:	00726f72 	rsbseq	r6, r2, r2, ror pc
     660:	5f4d5841 	svcpl	0x004d5841
	TotalZBal1 = TotalZBal1 / BalanceDivFactor;
     664:	435f5743 	cmpmi	pc, #17563648	; 0x10c0000
     668:	4c504d4f 	mrrcmi	13, 4, r4, r0, cr15

}
     66c:	434e4149 	movtmi	r4, #57673	; 0xe149
     670:	4c535f45 	mrrcmi	15, 4, r5, r3, cr5
     674:	0045504f 	subeq	r5, r5, pc, asr #32
     678:	45544f4e 	ldrbmi	r4, [r4, #-3918]
     67c:	0062455f 	rsbeq	r4, r2, pc, asr r5
     680:	5f4c5844 	svcpl	0x004c5844
     684:	55535854 	ldrbpl	r5, [r3, #-2132]
     688:	53454343 	movtpl	r4, #21315	; 0x5343
//sin4        - Output Sinus of AngleDeg
//cos4          - Output Cosinus of AngleDeg
void GetSinCos(short AngleDeg1) {
	short ABSAngleDeg1;   //Absolute value of the Angle in Degrees, decimals = 1
	//Get the absolute value of AngleDeg
	if (AngleDeg1 < 0)
     68c:	58440053 	stmdapl	r4, {r0, r1, r4, r6}^
     690:	58525f4c 	ldmdapl	r2, {r2, r3, r6, r8, r9, sl, fp, ip, lr}^
		ABSAngleDeg1 = AngleDeg1 * -1;
     694:	4c494146 	stfmie	f4, [r9], {70}
     698:	75614200 	strbvc	r4, [r1, #-512]!
	else
		ABSAngleDeg1 = AngleDeg1;

	//Shift rotation to a full circle of 360 deg -> AngleDeg // 360
	if (AngleDeg1 < 0)    //Negative values
		AngleDeg1 = 3600 - (ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600)));
     69c:	74617264 	strbtvc	r7, [r1], #-612
     6a0:	58445f65 	stmdapl	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     6a4:	5045004c 	subpl	r0, r5, ip, asr #32
     6a8:	3254524f 	subscc	r5, r4, #-268435452	; 0xf0000004
     6ac:	58410041 	stmdapl	r1, {r0, r6}^
     6b0:	52505f4d 	subspl	r5, r0, #308	; 0x134
     6b4:	4e455345 	cdpmi	3, 4, cr5, cr5, cr5, {2}
     6b8:	4f4c5f54 	svcmi	0x004c5f54
     6bc:	485f4441 	ldmdami	pc, {r0, r6, sl, lr}^
	else
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));

	if (AngleDeg1 >= 0 && AngleDeg1 <= 900)     // 0 to 90 deg
     6c0:	4c584400 	cfldrdmi	mvd4, [r8], {0}
     6c4:	4c554e5f 	mrrcmi	14, 5, r4, r5, cr15
			{
		sin4 = pgm_read_word(&GetSin[AngleDeg1 / 5]); // 5 is the presision (0.5) of the table
     6c8:	49535f4c 	ldmdbmi	r3, {r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     6cc:	4100455a 	tstmi	r0, sl, asr r5
     6d0:	505f4d58 	subspl	r4, pc, r8, asr sp
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
     6d4:	45534552 	ldrbmi	r4, [r3, #-1362]
     6d8:	4c5f544e 	cfldrdmi	mvd5, [pc], {78}
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));

	if (AngleDeg1 >= 0 && AngleDeg1 <= 900)     // 0 to 90 deg
			{
		sin4 = pgm_read_word(&GetSin[AngleDeg1 / 5]); // 5 is the presision (0.5) of the table
     6dc:	5f44414f 	svcpl	0x0044414f
     6e0:	3249004c 	subcc	r0, r9, #76	; 0x4c
     6e4:	455f3143 	ldrbmi	r3, [pc, #-323]	; 5a9 <__Stack_Size+0x1a9>
     6e8:	52495f52 	subpl	r5, r9, #328	; 0x148
     6ec:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
     6f0:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     6f4:	414d4400 	cmpmi	sp, r0, lsl #8
     6f8:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
     6fc:	656e6e61 	strbvs	r6, [lr, #-3681]!
     700:	495f346c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, ip, sp}^
     704:	61485152 	cmpvs	r8, r2, asr r1
     708:	656c646e 	strbvs	r6, [ip, #-1134]!
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     70c:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     710:	425f314d 	subsmi	r3, pc, #1073741843	; 0x40000013
     714:	495f4b52 	ldmdbmi	pc, {r1, r4, r6, r8, r9, fp, lr}^
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     718:	61485152 	cmpvs	r8, r2, asr r1
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     71c:	656c646e 	strbvs	r6, [ip, #-1134]!
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     720:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     724:	545f314d 	ldrbpl	r3, [pc], #333	; 72c <__Stack_Size+0x32c>
     728:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
     72c:	495f4d4f 	ldmdbmi	pc, {r0, r1, r2, r3, r6, r8, sl, fp, lr}^
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     730:	61485152 	cmpvs	r8, r2, asr r1
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     734:	656c646e 	strbvs	r6, [ip, #-1134]!
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     738:	41540072 	cmpmi	r4, r2, ror r0
     73c:	5245504d 	subpl	r5, r5, #77	; 0x4d
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
     740:	5152495f 	cmppl	r2, pc, asr r9
     744:	646e6148 	strbtvs	r6, [lr], #-328
     748:	0072656c 	rsbseq	r6, r2, ip, ror #10
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     74c:	67617355 	undefined
     750:	75614665 	strbvc	r4, [r1, #-1637]!
     754:	7845746c 	stmdavc	r5, {r2, r3, r5, r6, sl, ip, sp, lr}^
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     758:	74706563 	ldrbtvc	r6, [r0], #-1379
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     75c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     760:	31414d44 	cmpcc	r1, r4, asr #26
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     764:	6168435f 	cmnvs	r8, pc, asr r3
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     768:	6c656e6e 	stclvs	14, cr6, [r5], #-440
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     76c:	52495f35 	subpl	r5, r9, #212	; 0xd4
     770:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     774:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     778:	4d495400 	cfstrdmi	mvd5, [r9]
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     77c:	52495f32 	subpl	r5, r9, #200	; 0xc8
     780:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     784:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     788:	43545200 	cmpmi	r4, #0	; 0x0
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
     78c:	5152495f 	cmppl	r2, pc, asr r9
     790:	646e6148 	strbtvs	r6, [lr], #-328
     794:	0072656c 	rsbseq	r6, r2, ip, ror #10
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     798:	334d4954 	movtcc	r4, #55636	; 0xd954
     79c:	5152495f 	cmppl	r2, pc, asr r9
     7a0:	646e6148 	strbtvs	r6, [lr], #-328
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7a4:	0072656c 	rsbseq	r6, r2, ip, ror #10
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7a8:	434d5346 	movtmi	r5, #54086	; 0xd346
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7ac:	5152495f 	cmppl	r2, pc, asr r9
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7b0:	646e6148 	strbtvs	r6, [lr], #-328
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7b4:	0072656c 	rsbseq	r6, r2, ip, ror #10
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7b8:	344d4954 	strbcc	r4, [sp], #-2388
     7bc:	5152495f 	cmppl	r2, pc, asr r9
     7c0:	646e6148 	strbtvs	r6, [lr], #-328
     7c4:	0072656c 	rsbseq	r6, r2, ip, ror #10
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7c8:	57425355 	smlsldpl	r5, r2, r5, r3
     7cc:	55656b61 	strbpl	r6, [r5, #-2913]!
     7d0:	52495f70 	subpl	r5, r9, #448	; 0x1c0
	//Shift rotation to a full circle of 360 deg -> AngleDeg // 360
	if (AngleDeg1 < 0)    //Negative values
		AngleDeg1 = 3600 - (ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600)));
	else
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));
     7d4:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     7d8:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     7dc:	4d495400 	cfstrdmi	mvd5, [r9]
     7e0:	52495f35 	subpl	r5, r9, #212	; 0xd4
     7e4:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     7e8:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     7ec:	494d4e00 	stmdbmi	sp, {r9, sl, fp, lr}^
     7f0:	65637845 	strbvs	r7, [r3, #-2117]!
     7f4:	6f697470 	svcvs	0x00697470
     7f8:	5053006e 	subspl	r0, r3, lr, rrx
	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
	}
}
     7fc:	495f3149 	ldmdbmi	pc, {r0, r3, r6, r8, ip, sp}^
     800:	61485152 	cmpvs	r8, r2, asr r1
     804:	656c646e 	strbvs	r6, [ip, #-1134]!
     808:	75420072 	strbvc	r0, [r2, #-114]
     80c:	75614673 	strbvc	r4, [r1, #-1651]!
//cos4        - Input Cosinus
//AngleRad4     - Output Angle in AngleRad4
long GetArcCos(short cos4) {
	boolean NegativeValue/*:1*/;    //If the the value is Negative
	//Check for negative value
	if (cos4 < 0) {
     810:	7845746c 	stmdavc	r5, {r2, r3, r5, r6, sl, ip, sp, lr}^
     814:	74706563 	ldrbtvc	r6, [r0], #-1379
     818:	006e6f69 	rsbeq	r6, lr, r9, ror #30
		cos4 = -cos4;
     81c:	32495053 	subcc	r5, r9, #83	; 0x53
     820:	5152495f 	cmppl	r2, pc, asr r9
		NegativeValue = 1;
	} else
		NegativeValue = 0;

	//Limit cos4 to his maximal value
	cos4 = min(cos4, c4DEC);
     824:	646e6148 	strbtvs	r6, [lr], #-328
     828:	0072656c 	rsbseq	r6, r2, ip, ror #10
     82c:	5f425355 	svcpl	0x00425355

	if ((cos4 >= 0) && (cos4 < 9000)) {
     830:	435f5048 	cmpmi	pc, #72	; 0x48
     834:	545f4e41 	ldrbpl	r4, [pc], #3649	; 83c <__Stack_Size+0x43c>
     838:	52495f58 	subpl	r5, r9, #352	; 0x160
		AngleRad4 = (byte) pgm_read_byte(&GetACos[cos4 / 79]);
     83c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     840:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     844:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
		AngleRad4 = ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255) ;
     848:	52495f33 	subpl	r5, r9, #204	; 0xcc
     84c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
	} else if ((cos4 >= 9000) && (cos4 < 9900)) {
     850:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     854:	4d495400 	cfstrdmi	mvd5, [r9]
     858:	43435f31 	movtmi	r5, #16177	; 0x3f31
     85c:	5152495f 	cmppl	r2, pc, asr r9
		AngleRad4 = (byte) pgm_read_byte(&GetACos[(cos4 - 9000) / 8 + 114]);
     860:	646e6148 	strbtvs	r6, [lr], #-328
     864:	0072656c 	rsbseq	r6, r2, ip, ror #10
     868:	33434441 	movtcc	r4, #13377	; 0x3441
     86c:	5152495f 	cmppl	r2, pc, asr r9
     870:	646e6148 	strbtvs	r6, [lr], #-328
     874:	0072656c 	rsbseq	r6, r2, ip, ror #10
		AngleRad4 = (long) ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255)
     878:	31434441 	cmpcc	r3, r1, asr #8
	} else if ((cos4 >= 9900) && (cos4 <= 10000)) {
     87c:	495f325f 	ldmdbmi	pc, {r0, r1, r2, r3, r4, r6, r9, ip, sp}^
     880:	61485152 	cmpvs	r8, r2, asr r1
     884:	656c646e 	strbvs	r6, [ip, #-1134]!
		AngleRad4 = (byte) pgm_read_byte(&GetACos[(cos4 - 9900) / 2 + 227]);
     888:	41550072 	cmpmi	r5, r2, ror r0
     88c:	5f355452 	svcpl	0x00355452
     890:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
		AngleRad4 = (long) ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255)
     894:	6c646e61 	stclvs	14, cr6, [r4], #-388
     898:	44007265 	strmi	r7, [r0], #-613
     89c:	5f32414d 	svcpl	0x0032414d
     8a0:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     8a4:	316c656e 	cmncc	ip, lr, ror #10
     8a8:	5152495f 	cmppl	r2, pc, asr r9
     8ac:	646e6148 	strbtvs	r6, [lr], #-328
	}

	//Add negative sign
	if (NegativeValue)
		AngleRad4 = 31416 - AngleRad4;
     8b0:	0072656c 	rsbseq	r6, r2, ip, ror #10
     8b4:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
     8b8:	5f56455f 	svcpl	0x0056455f
     8bc:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     8c0:	6c646e61 	stclvs	14, cr6, [r4], #-388

	return AngleRad4;
}
     8c4:	44007265 	strmi	r7, [r0], #-613
     8c8:	5f32414d 	svcpl	0x0032414d
     8cc:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     8d0:	326c656e 	rsbcc	r6, ip, #461373440	; 0x1b800000
     8d4:	5152495f 	cmppl	r2, pc, asr r9
     8d8:	646e6148 	strbtvs	r6, [lr], #-328

unsigned long isqrt32(unsigned long n) //
{
     8dc:	0072656c 	rsbseq	r6, r2, ip, ror #10
     8e0:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^

	root = 0;
	remainder = n;
	place = 0x40000000; // OR place = 0x4000; OR place = 0x40; - respectively

	while (place > remainder)
     8e4:	52495f31 	subpl	r5, r9, #196	; 0xc4
     8e8:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     8ec:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
		place = place >> 2;
	while (place) {
		if (remainder >= root + place) {
     8f0:	414d4400 	cmpmi	sp, r0, lsl #8
			remainder = remainder - root - place;
     8f4:	68435f32 	stmdavs	r3, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     8f8:	656e6e61 	strbvs	r6, [lr, #-3681]!
			root = root + (place << 1);
     8fc:	495f336c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, r9, ip, sp}^

	while (place > remainder)
		place = place >> 2;
	while (place) {
		if (remainder >= root + place) {
			remainder = remainder - root - place;
     900:	61485152 	cmpvs	r8, r2, asr r1
			root = root + (place << 1);
		}
		root = root >> 1;
		place = place >> 2;
     904:	656c646e 	strbvs	r6, [ip, #-1134]!
	remainder = n;
	place = 0x40000000; // OR place = 0x4000; OR place = 0x40; - respectively

	while (place > remainder)
		place = place >> 2;
	while (place) {
     908:	56500072 	undefined
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
	XYhyp2 = isqrt32(
     90c:	52495f44 	subpl	r5, r9, #272	; 0x110
//(GETATAN2) Simplyfied ArcTan2 function based on fixed point ArcCos
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
     910:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
	XYhyp2 = isqrt32(
     914:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     918:	49445300 	stmdbmi	r4, {r8, r9, ip, lr}^
//(GETATAN2) Simplyfied ArcTan2 function based on fixed point ArcCos
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
     91c:	52495f4f 	subpl	r5, r9, #316	; 0x13c
	XYhyp2 = isqrt32(
     920:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     924:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     928:	42535500 	subsmi	r5, r3, #0	; 0x0
			((long) AtanX * AtanX * c4DEC) + ((long) AtanY * AtanY * c4DEC));
	GetArcCos(((long) AtanX * (long) c6DEC) / (long) XYhyp2);
     92c:	5f504c5f 	svcpl	0x00504c5f
     930:	5f4e4143 	svcpl	0x004e4143
     934:	5f305852 	svcpl	0x00305852
     938:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     93c:	6c646e61 	stclvs	14, cr6, [r4], #-388
     940:	53007265 	movwpl	r7, #613	; 0x265
     944:	61484356 	cmpvs	r8, r6, asr r3

	if (AtanY < 0) // removed overhead... Atan4 = AngleRad4 * (AtanY/abs(AtanY));
     948:	656c646e 	strbvs	r6, [ip, #-1134]!
		Atan4 = -AngleRad4;
     94c:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
	else
		Atan4 = AngleRad4;
     950:	5f334954 	svcpl	0x00334954
	XYhyp2 = isqrt32(
			((long) AtanX * AtanX * c4DEC) + ((long) AtanY * AtanY * c4DEC));
	GetArcCos(((long) AtanX * (long) c6DEC) / (long) XYhyp2);

	if (AtanY < 0) // removed overhead... Atan4 = AngleRad4 * (AtanY/abs(AtanY));
		Atan4 = -AngleRad4;
     954:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
	else
		Atan4 = AngleRad4;
     958:	6c646e61 	stclvs	14, cr6, [r4], #-388
     95c:	45007265 	strmi	r7, [r0, #-613]
	return Atan4;
}
     960:	39495458 	stmdbcc	r9, {r3, r4, r6, sl, ip, lr}^
     964:	495f355f 	ldmdbmi	pc, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp}^
     968:	61485152 	cmpvs	r8, r2, asr r1
     96c:	656c646e 	strbvs	r6, [ip, #-1134]!

}

//--------------------------------------------------------------------
//[BalCalcOneLeg]
void BalCalcOneLeg(long PosX, long PosZ, long PosY, byte BalLegNr) {
     970:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
	long CPR_Y;            //Final Y value for centerpoint of rotation
	long CPR_Z;            //Final Z value for centerpoint of rotation

	long lAtan;
	//Calculating totals from center of the body to the feet
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BalLegNr]) + PosZ;
     974:	545f384d 	ldrbpl	r3, [pc], #2125	; 97c <__Stack_Size+0x57c>
     978:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
	CPR_X = (short) pgm_read_word(&cOffsetX[BalLegNr]) + PosX;
     97c:	495f4d4f 	ldmdbmi	pc, {r0, r1, r2, r3, r6, r8, sl, fp, lr}^
     980:	61485152 	cmpvs	r8, r2, asr r1
	CPR_Y = 150 + PosY; // using the value 150 to lower the centerpoint of rotation 'g_InControlState.BodyPos.y +

	TotalTransY += (long) PosY;
     984:	656c646e 	strbvs	r6, [ip, #-1134]!
     988:	41430072 	cmpmi	r3, r2, ror r0
     98c:	58525f4e 	ldmdapl	r2, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
	TotalTransZ += (long) CPR_Z;
     990:	52495f31 	subpl	r5, r9, #196	; 0xc4
     994:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     998:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
	TotalTransX += (long) CPR_X;
     99c:	54584500 	ldrbpl	r4, [r8], #-1280
     9a0:	495f3449 	ldmdbmi	pc, {r0, r3, r6, sl, ip, sp}^
     9a4:	61485152 	cmpvs	r8, r2, asr r1
     9a8:	656c646e 	strbvs	r6, [ip, #-1134]!

	lAtan = GetATan2(CPR_X, CPR_Z);
     9ac:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
	TotalYBal1 += (lAtan * 1800) / 31415;
     9b0:	5f304954 	svcpl	0x00304954
     9b4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     9b8:	6c646e61 	stclvs	14, cr6, [r4], #-388
     9bc:	54007265 	strpl	r7, [r0], #-613
     9c0:	5f314d49 	svcpl	0x00314d49
     9c4:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^
     9c8:	61485152 	cmpvs	r8, r2, asr r1
     9cc:	656c646e 	strbvs	r6, [ip, #-1134]!

	lAtan = GetATan2(CPR_X, CPR_Y);
     9d0:	61480072 	cmpvs	r8, r2, ror r0
     9d4:	61466472 	cmpvs	r6, r2, ror r4
	TotalZBal1 += ((lAtan * 1800) / 31415) - 900; //Rotate balance circle 90 deg
     9d8:	45746c75 	ldrbmi	r6, [r4, #-3189]!
     9dc:	70656378 	rsbvc	r6, r5, r8, ror r3
     9e0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     9e4:	43435200 	movtmi	r5, #12800	; 0x3200
     9e8:	5152495f 	cmppl	r2, pc, asr r9
     9ec:	646e6148 	strbtvs	r6, [lr], #-328
     9f0:	0072656c 	rsbseq	r6, r2, ip, ror #10
     9f4:	31414d44 	cmpcc	r1, r4, asr #26
     9f8:	6168435f 	cmnvs	r8, pc, asr r3
     9fc:	6c656e6e 	stclvs	14, cr6, [r5], #-440

	lAtan = GetATan2(CPR_Z, CPR_Y);
     a00:	52495f36 	subpl	r5, r9, #216	; 0xd8
     a04:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
	TotalXBal1 += ((lAtan * 1800) / 31415) - 900; //Rotate balance circle 90 deg
     a08:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     a0c:	62654400 	rsbvs	r4, r5, #0	; 0x0
     a10:	6f4d6775 	svcvs	0x004d6775
     a14:	6f74696e 	svcvs	0x0074696e
     a18:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     a1c:	435f384d 	cmpmi	pc, #5046272	; 0x4d0000
     a20:	52495f43 	subpl	r5, r9, #268	; 0x10c
     a24:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}

}
     a28:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     a2c:	50504100 	subspl	r4, r0, r0, lsl #2
     a30:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     a34:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!
     a38:	31663233 	cmncc	r6, r3, lsr r2
     a3c:	695f7830 	ldmdbvs	pc, {r4, r5, fp, ip, sp, lr}^
     a40:	00632e74 	rsbeq	r2, r3, r4, ror lr
     a44:	47445757 	smlsldmi	r5, r4, r7, r7
     a48:	5152495f 	cmppl	r2, pc, asr r9
     a4c:	646e6148 	strbtvs	r6, [lr], #-328
//SinG                  - Sin buffer for BodyRotZ
//CosG               - Cos buffer for BodyRotZ
//BodyFKPosX         - Output Position X of feet with Rotation
//BodyFKPosY         - Output Position Y of feet with Rotation
//BodyFKPosZ         - Output Position Z of feet with Rotation
void BodyFK(short PosX, short PosZ, short PosY, short RotationY, byte BodyIKLeg) {
     a50:	0072656c 	rsbseq	r6, r2, ip, ror #10
     a54:	31414d44 	cmpcc	r1, r4, asr #26
	short CPR_X;            //Final X value for centerpoint of rotation
	short CPR_Y;            //Final Y value for centerpoint of rotation
	short CPR_Z;            //Final Z value for centerpoint of rotation

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
     a58:	6168435f 	cmnvs	r8, pc, asr r3
     a5c:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     a60:	52495f37 	subpl	r5, r9, #220	; 0xdc
//SinG                  - Sin buffer for BodyRotZ
//CosG               - Cos buffer for BodyRotZ
//BodyFKPosX         - Output Position X of feet with Rotation
//BodyFKPosY         - Output Position Y of feet with Rotation
//BodyFKPosZ         - Output Position Z of feet with Rotation
void BodyFK(short PosX, short PosZ, short PosY, short RotationY, byte BodyIKLeg) {
     a64:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
	short CPR_X;            //Final X value for centerpoint of rotation
	short CPR_Y;            //Final Y value for centerpoint of rotation
	short CPR_Z;            //Final Z value for centerpoint of rotation

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
     a68:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
     a6c:	43324900 	teqmi	r2, #0	; 0x0
     a70:	56455f31 	undefined
     a74:	5152495f 	cmppl	r2, pc, asr r9

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     a78:	646e6148 	strbtvs	r6, [lr], #-328

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BodyIKLeg]) + PosZ
     a7c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     a80:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
	//Successive global rotation matrix:
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
     a84:	4b52425f 	blmi	1491408 <__Stack_Size+0x1491008>
     a88:	5152495f 	cmppl	r2, pc, asr r9

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BodyIKLeg]) + PosZ
     a8c:	646e6148 	strbtvs	r6, [lr], #-328
	//Successive global rotation matrix:
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
     a90:	0072656c 	rsbseq	r6, r2, ip, ror #10
     a94:	53414c46 	movtpl	r4, #7238	; 0x1c46
	SinG4 = sin4;
     a98:	52495f48 	subpl	r5, r9, #288	; 0x120
	CosG4 = cos4;
     a9c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
	SinG4 = sin4;
     aa0:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
	CosG4 = cos4;
     aa4:	52415500 	subpl	r5, r1, #0	; 0x0
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
	SinG4 = sin4;
     aa8:	495f3454 	ldmdbmi	pc, {r2, r4, r6, sl, ip, sp}^
	CosG4 = cos4;

	GetSinCos(g_InControlState.BodyRot1.z + TotalZBal1);
     aac:	61485152 	cmpvs	r8, r2, asr r1
	SinB4 = sin4;
     ab0:	656c646e 	strbvs	r6, [ip, #-1134]!
     ab4:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
	CosB4 = cos4;
     ab8:	495f364d 	ldmdbmi	pc, {r0, r2, r3, r6, r9, sl, ip, sp}^

	GetSinCos(g_InControlState.BodyRot1.y + (RotationY * c1DEC) + TotalYBal1);
     abc:	61485152 	cmpvs	r8, r2, asr r1
     ac0:	656c646e 	strbvs	r6, [ip, #-1134]!
     ac4:	54520072 	ldrbpl	r0, [r2], #-114
     ac8:	616c4143 	cmnvs	ip, r3, asr #2
     acc:	495f6d72 	ldmdbmi	pc, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     ad0:	61485152 	cmpvs	r8, r2, asr r1
     ad4:	656c646e 	strbvs	r6, [ip, #-1134]!
     ad8:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     adc:	495f374d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, sl, ip, sp}^
     ae0:	61485152 	cmpvs	r8, r2, asr r1
     ae4:	656c646e 	strbvs	r6, [ip, #-1134]!
     ae8:	32490072 	subcc	r0, r9, #114	; 0x72
     aec:	455f3243 	ldrbmi	r3, [pc, #-579]	; 8b1 <__Stack_Size+0x4b1>
     af0:	52495f52 	subpl	r5, r9, #328	; 0x148
     af4:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     af8:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     afc:	41535500 	cmpmi	r3, r0, lsl #10
     b00:	5f315452 	svcpl	0x00315452
     b04:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     b08:	6c646e61 	stclvs	14, cr6, [r4], #-388
     b0c:	44007265 	strmi	r7, [r0], #-613
     b10:	5f32414d 	svcpl	0x0032414d
     b14:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     b18:	346c656e 	strbtcc	r6, [ip], #-1390
     b1c:	495f355f 	ldmdbmi	pc, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp}^
     b20:	61485152 	cmpvs	r8, r2, asr r1
     b24:	656c646e 	strbvs	r6, [ip, #-1134]!
     b28:	65500072 	ldrbvs	r0, [r0, #-114]
     b2c:	5653646e 	ldrbpl	r6, [r3], -lr, ror #8
     b30:	49540043 	ldmdbmi	r4, {r0, r1, r6}^
     b34:	555f384d 	ldrbpl	r3, [pc, #-2125]	; 2ef <_Minimum_Stack_Size+0x1ef>
     b38:	52495f50 	subpl	r5, r9, #320	; 0x140
     b3c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     b40:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     b44:	41535500 	cmpmi	r3, r0, lsl #10
     b48:	5f325452 	svcpl	0x00325452
     b4c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     b50:	6c646e61 	stclvs	14, cr6, [r4], #-388
     b54:	55007265 	strpl	r7, [r0, #-613]
     b58:	54524153 	ldrbpl	r4, [r2], #-339
     b5c:	52495f33 	subpl	r5, r9, #204	; 0xcc
     b60:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     b64:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     b68:	73795300 	cmnvc	r9, #0	; 0x0

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     b6c:	6b636954 	blvs	18db0c4 <__Stack_Size+0x18dacc4>
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     b70:	646e6148 	strbtvs	r6, [lr], #-328
     b74:	0072656c 	rsbseq	r6, r2, ip, ror #10
     b78:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     b7c:	315f3531 	cmpcc	pc, r1, lsr r5
     b80:	52495f30 	subpl	r5, r9, #192	; 0xc0
     b84:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     b88:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     b8c:	414d4400 	cmpmi	sp, r0, lsl #8
     b90:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     b94:	656e6e61 	strbvs	r6, [lr, #-3681]!
     b98:	495f316c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, ip, sp}^
     b9c:	61485152 	cmpvs	r8, r2, asr r1
     ba0:	656c646e 	strbvs	r6, [ip, #-1134]!
     ba4:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
     ba8:	5f324954 	svcpl	0x00324954
     bac:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     bb0:	6c646e61 	stclvs	14, cr6, [r4], #-388
     bb4:	44007265 	strmi	r7, [r0], #-613
     bb8:	5f31414d 	svcpl	0x0031414d
     bbc:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     bc0:	326c656e 	rsbcc	r6, ip, #461373440	; 0x1b800000
     bc4:	5152495f 	cmppl	r2, pc, asr r9
     bc8:	646e6148 	strbtvs	r6, [lr], #-328
     bcc:	0072656c 	rsbseq	r6, r2, ip, ror #10
     bd0:	5f4e4143 	svcpl	0x004e4143
     bd4:	5f454353 	svcpl	0x00454353
     bd8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     bdc:	6c646e61 	stclvs	14, cr6, [r4], #-388
     be0:	44007265 	strmi	r7, [r0], #-613
     be4:	5f31414d 	svcpl	0x0031414d
     be8:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     bec:	336c656e 	cmncc	ip, #461373440	; 0x1b800000
     bf0:	5152495f 	cmppl	r2, pc, asr r9
     bf4:	646e6148 	strbtvs	r6, [lr], #-328
     bf8:	0072656c 	rsbseq	r6, r2, ip, ror #10
     bfc:	4d6d654d 	cfstr64mi	mvdx6, [sp, #-308]!
     c00:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
     c04:	63784565 	cmnvs	r8, #423624704	; 0x19400000
     c08:	69747065 	ldmdbvs	r4!, {r0, r2, r5, r6, ip, sp, lr}^
     c0c:	62006e6f 	andvs	r6, r0, #1776	; 0x6f0
     c10:	00647561 	rsbeq	r7, r4, r1, ror #10
     c14:	4967654c 	stmdbmi	r7!, {r2, r3, r6, r8, sl, sp, lr}^
     c18:	6843004b 	stmdavs	r3, {r0, r1, r3, r6}^
     c1c:	566b6365 	strbtpl	r6, [fp], -r5, ror #6
     c20:	61746c6f 	cmnvs	r4, pc, ror #24
     c24:	67006567 	strvs	r6, [r0, -r7, ror #10]
     c28:	5047735f 	subpl	r7, r7, pc, asr r3
     c2c:	6f434d53 	svcvs	0x00434d53
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * CosG4 / c4DEC
					- (long) CPR_Z * c2DEC * SinA4 / c4DEC * SinB4 / c4DEC
							* SinG4 / c4DEC
					- (long) CPR_Y * c2DEC * CosB4 / c4DEC * SinG4 / c4DEC))
			/ c2DEC;
	BodyFKPosY = ((long) CPR_Y * c2DEC
     c30:	6f72746e 	svcvs	0x0072746e
	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     c34:	72656c6c 	rsbvc	r6, r5, #27648	; 0x6c00
     c38:	6f526600 	svcvs	0x00526600
     c3c:	55746f62 	ldrbpl	r6, [r4, #-3938]!
     c40:	64697370 	strbtvs	r7, [r9], #-880
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * CosG4 / c4DEC
					- (long) CPR_Z * c2DEC * SinA4 / c4DEC * SinB4 / c4DEC
							* SinG4 / c4DEC
					- (long) CPR_Y * c2DEC * CosB4 / c4DEC * SinG4 / c4DEC))
			/ c2DEC;
	BodyFKPosY = ((long) CPR_Y * c2DEC
     c44:	776f4465 	strbvc	r4, [pc, -r5, ror #8]!
     c48:	6572506e 	ldrbvs	r5, [r2, #-110]!
     c4c:	4e490076 	mcrmi	0, 2, r0, cr9, cr6, {3}
     c50:	525f5453 	subspl	r5, pc, #1392508928	; 0x53000000
     c54:	5f444145 	svcpl	0x00444145
     c58:	44495247 	strbmi	r5, [r9], #-583
     c5c:	74654700 	strbtvc	r4, [r5], #-1792
     c60:	6e615441 	cdpvs	4, 6, cr5, cr1, cr1, {2}
     c64:	74430032 	strbvc	r0, [r3], #-50
     c68:	6f4d6c72 	svcvs	0x004d6c72
     c6c:	754f6576 	strbvc	r6, [pc, #-1398]	; 6fe <__Stack_Size+0x2fe>
     c70:	546c0074 	strbtpl	r0, [ip], #-116
     c74:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     c78:	00646e45 	rsbeq	r6, r4, r5, asr #28
     c7c:	416e6953 	cmnmi	lr, r3, asr r9
     c80:	654c0034 	strbvs	r0, [ip, #-52]
     c84:	736f5067 	cmnvc	pc, #103	; 0x67
     c88:	654c0058 	strbvs	r0, [ip, #-88]
     c8c:	736f5067 	cmnvc	pc, #103	; 0x67
     c90:	654c0059 	strbvs	r0, [ip, #-89]
     c94:	736f5067 	cmnvc	pc, #103	; 0x67
     c98:	6f43005a 	svcvs	0x0043005a
     c9c:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
     ca0:	5f726564 	svcpl	0x00726564
     ca4:	64616552 	strbtvs	r6, [r1], #-1362
     ca8:	7367734d 	cmnvc	r7, #872415233	; 0x34000001
     cac:	6f6f7200 	svcvs	0x006f7200
     cb0:	43630074 	cmnmi	r3, #116	; 0x74
     cb4:	4161786f 	cmnmi	r1, pc, ror #16
     cb8:	656c676e 	strbvs	r6, [ip, #-1902]!
     cbc:	56730031 	undefined
     cc0:	4d006c61 	stcmi	12, cr6, [r0, #-388]
     cc4:	4345444f 	movtmi	r4, #21583	; 0x544f
     cc8:	4100544e 	tstmi	r0, lr, asr #8
     ccc:	6f446c6c 	svcvs	0x00446c6c
     cd0:	67006e77 	smlsdxvs	r0, r7, lr, r6
     cd4:	4c6c755f 	cfstr64mi	mvdx7, [ip], #-380
     cd8:	4d747361 	ldclmi	3, cr7, [r4, #-388]!
     cdc:	69546773 	ldmdbvs	r4, {r0, r1, r4, r5, r6, r8, r9, sl, sp, lr}^
     ce0:	7200656d 	andvc	r6, r0, #457179136	; 0x1b400000
     ce4:	74686769 	strbtvc	r6, [r8], #-1897
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * SinG4 / c4DEC
					+ (long) CPR_Z * c2DEC * CosG4 / c4DEC * SinA4 / c4DEC
							* SinB4 / c4DEC
					+ (long) CPR_Y * c2DEC * CosB4 / c4DEC * CosG4 / c4DEC))
			/ c2DEC;
}
     ce8:	5f670048 	svcpl	0x00670048
     cec:	6c644969 	stclvs	9, cr4, [r4], #-420
     cf0:	64654c65 	strbtvs	r4, [r5], #-3173
     cf4:	74617453 	strbtvc	r7, [r1], #-1107
     cf8:	6e490065 	cdpvs	0, 4, cr0, cr9, cr5, {3}
     cfc:	54747570 	ldrbtpl	r7, [r4], #-1392
     d00:	44656d69 	strbtmi	r6, [r5], #-3433
     d04:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     d08:	67697200 	strbvs	r7, [r9, -r0, lsl #4]!
     d0c:	00567468 	subseq	r7, r6, r8, ror #8
     d10:	65535047 	ldrbvs	r5, [r3, #-71]
     d14:	5f670071 	svcpl	0x00670071
     d18:	626f5266 	rsbvs	r5, pc, #1610612742	; 0x60000006
     d1c:	7055746f 	subsvc	r7, r5, pc, ror #8
//FemurAngle1           - Output Angle of Femur in degrees
//TibiaAngle1           - Output Angle of Tibia in degrees
//CoxaAngle1            - Output Angle of Coxa in degrees
//--------------------------------------------------------------------
void LegIK(short IKFeetPosX, short IKFeetPosY, short IKFeetPosZ,
		byte LegIKLegNr) {
     d20:	65646973 	strbvs	r6, [r4, #-2419]!
     d24:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
     d28:	646f4200 	strbtvs	r4, [pc], #512	; d30 <__Stack_Size+0x930>
	long Temp1;
	long Temp2;
	long T3;

	//Calculate IKCoxaAngle and IKFeetPosXZ
	GetATan2(IKFeetPosX, IKFeetPosZ);
     d2c:	4c4b4979 	mcrrmi	9, 7, r4, fp, cr9
	CoxaAngle1[LegIKLegNr] = (((long) Atan4 * 180) / 3141)
     d30:	53006765 	movwpl	r6, #1893	; 0x765
     d34:	34426e69 	strbcc	r6, [r2], #-3689
     d38:	4f485000 	svcmi	0x00485000
     d3c:	58494e45 	stmdapl	r9, {r0, r2, r6, r9, sl, fp, lr}^
     d40:	54494147 	strbpl	r4, [r9], #-327
     d44:	534b4900 	movtpl	r4, #47360	; 0xb900
     d48:	74756c6f 	ldrbtvc	r6, [r5], #-3183
     d4c:	576e6f69 	strbpl	r6, [lr, -r9, ror #30]!
     d50:	696e7261 	stmdbvs	lr!, {r0, r5, r6, r9, ip, sp, lr}^
     d54:	4900676e 	stmdbmi	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
	//Length between the Coxa and tars [foot]
	IKFeetPosXZ = XYhyp2 / c2DEC;

	//Using GetAtan2 for solving IKA1 and IKSW
	//IKA14 - Angle between SW line and the ground in radians
	IKA14 = GetATan2(IKFeetPosY - TarsOffsetY,
     d58:	5f54534e 	svcpl	0x0054534e
     d5c:	5f574152 	svcpl	0x00574152
     d60:	504d4153 	subpl	r4, sp, r3, asr r1
     d64:	4700454c 	strmi	r4, [r0, -ip, asr #10]
     d68:	54746961 	ldrbtpl	r6, [r4], #-2401
     d6c:	00657079 	rsbeq	r7, r5, r9, ror r0
     d70:	4967654c 	stmdbmi	r7!, {r2, r3, r6, r8, sl, sp, lr}^

	//IKSW2 - Length between femur axis and tars
	IKSW2 = XYhyp2;

	//IKA2 - Angle of the line S>W with respect to the femur in radians
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     d74:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
     d78:	6f436300 	svcvs	0x00436300
     d7c:	694d6178 	stmdbvs	sp, {r3, r4, r5, r6, r8, sp, lr}^
     d80:	4900316e 	stmdbmi	r0, {r1, r2, r3, r5, r6, r8, ip, sp}
					* (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))) * c4DEC
			+ ((long) IKSW2 * IKSW2));
	Temp2 = (long) (2 * (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])) * c2DEC
			* (unsigned long) IKSW2;
	T3 = Temp1 / (Temp2 / c4DEC);
	IKA24 = GetArcCos(T3);
     d84:	6c6f534b 	stclvs	3, cr5, [pc], #-300
     d88:	6f697475 	svcvs	0x00697475
     d8c:	654c006e 	strbvs	r0, [ip, #-110]
     d90:	65745367 	ldrbvs	r5, [r4, #-871]!
     d94:	4e490070 	mcrmi	0, 2, r0, cr9, cr0, {3}
     d98:	535f5453 	cmppl	pc, #1392508928	; 0x53000000
     d9c:	4c504d41 	mrrcmi	13, 4, r4, r0, cr1
     da0:	41465f45 	cmpmi	r6, r5, asr #30
     da4:	52005453 	andpl	r5, r0, #1392508928	; 0x53000000
     da8:	5441544f 	strbpl	r5, [r1], #-1103
     dac:	444f4d45 	strbmi	r4, [pc], #3397	; db4 <__Stack_Size+0x9b4>
     db0:	5f670045 	svcpl	0x00670045
     db4:	72655366 	rsbvc	r5, r5, #-1744830463	; 0x98000001

	FemurAngle1[LegIKLegNr] = -(long) (IKA14 + IKA24) * 180
     db8:	46736f76 	uhsub16mi	r6, r3, r6
     dbc:	00656572 	rsbeq	r6, r5, r2, ror r5
     dc0:	63656843 	cmnvs	r5, #4390912	; 0x430000
     dc4:	676e416b 	strbvs	r4, [lr, -fp, ror #2]!
     dc8:	0073656c 	rsbseq	r6, r3, ip, ror #10
     dcc:	76617254 	undefined
     dd0:	65526c65 	ldrbvs	r6, [r2, #-3173]
     dd4:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     dd8:	45620074 	strbmi	r0, [r2, #-116]!
			/ 3141+ 900 + CFEMURHORNOFFSET1(LegIKLegNr);  //Normal

	//IKTibiaAngle
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     ddc:	61727478 	cmnvs	r2, r8, ror r4
	Temp2 = (long) (2 * (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])) * c2DEC
			* (unsigned long) IKSW2;
	T3 = Temp1 / (Temp2 / c4DEC);
	IKA24 = GetArcCos(T3);

	FemurAngle1[LegIKLegNr] = -(long) (IKA14 + IKA24) * 180
     de0:	6c637943 	stclvs	9, cr7, [r3], #-268
			/ 3141+ 900 + CFEMURHORNOFFSET1(LegIKLegNr);  //Normal

	//IKTibiaAngle
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     de4:	6f420065 	svcvs	0x00420065
     de8:	4b467964 	blmi	119f380 <__Stack_Size+0x119ef80>
			+ ((long) (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr])
					* (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))) * c4DEC
			- ((long) IKSW2 * IKSW2));
	Temp2 = 2 * ((long) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])))
			* (long) ((byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]));
	GetArcCos(Temp1 / Temp2);
     dec:	6c617600 	stclvs	6, cr7, [r1]
     df0:	4c540073 	mrrcmi	0, 7, r0, r4, cr3
     df4:	46766944 	ldrbtmi	r6, [r6], -r4, asr #18
     df8:	6f746361 	svcvs	0x00746361
     dfc:	6f430072 	svcvs	0x00430072
     e00:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
     e04:	5f726564 	svcpl	0x00726564
     e08:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!

	TibiaAngle1[LegIKLegNr] = -(1450 - (long) AngleRad4 * 180 / 3141
     e0c:	65646e61 	strbvs	r6, [r4, #-3681]!
     e10:	61420072 	cmpvs	r2, r2, ror r0
     e14:	636e616c 	cmnvs	lr, #27	; 0x1b
     e18:	646f4d65 	strbtvs	r4, [pc], #3429	; e20 <__Stack_Size+0xa20>
     e1c:	5f670065 	svcpl	0x00670065
     e20:	69546c75 	ldmdbvs	r4, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
     e24:	614c656d 	cmpvs	ip, sp, ror #10
     e28:	61427473 	cmpvs	r2, r3, ror r4
			+ CTIBIAHORNOFFSET1(LegIKLegNr)); //!!!!!!!!!!!!145 instead of 1800

	//Set the Solution quality
	if (IKSW2
     e2c:	72657474 	rsbvc	r7, r5, #1946157056	; 0x74000000
			- ((long) IKSW2 * IKSW2));
	Temp2 = 2 * ((long) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])))
			* (long) ((byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]));
	GetArcCos(Temp1 / Temp2);

	TibiaAngle1[LegIKLegNr] = -(1450 - (long) AngleRad4 * 180 / 3141
     e30:	6c6f5679 	stclvs	6, cr5, [pc], #-484
			+ CTIBIAHORNOFFSET1(LegIKLegNr)); //!!!!!!!!!!!!145 instead of 1800

	//Set the Solution quality
	if (IKSW2
     e34:	65676174 	strbvs	r6, [r7, #-372]!
     e38:	69614700 	stmdbvs	r1!, {r8, r9, sl, lr}^
     e3c:	736f5074 	cmnvc	pc, #116	; 0x74
     e40:	61470059 	qdaddvs	r0, r9, r7
     e44:	6f507469 	svcvs	0x00507469
			< ((word) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
					+ (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]) - 30)
					* c2DEC))
		IKSolution = 1;
     e48:	49005a73 	stmdbmi	r0, {r0, r1, r4, r5, r6, r9, fp, ip, lr}
	else {
		if (IKSW2
     e4c:	5f54534e 	svcpl	0x0054534e
     e50:	49544341 	ldmdbmi	r4, {r0, r6, r8, r9, lr}^
				< ((word) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
						+ (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))
						* c2DEC))
			IKSolutionWarning = 1;
     e54:	4e004e4f 	cdpmi	14, 0, cr4, cr0, cr15, {2}
     e58:	5f4d524f 	svcpl	0x004d524f
		else
			IKSolutionError = 1;
     e5c:	474e4f4c 	strbmi	r4, [lr, -ip, asr #30]
	}

}
     e60:	74654700 	strbtvc	r4, [r5], #-1792
     e64:	006e6953 	rsbeq	r6, lr, r3, asr r9
     e68:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!
     e6c:	65646e61 	strbvs	r6, [r4, #-3681]!
     e70:	706e4972 	rsbvc	r4, lr, r2, ror r9
     e74:	6f437475 	svcvs	0x00437475
     e78:	6f72746e 	svcvs	0x0072746e
     e7c:	72656c6c 	rsbvc	r6, r5, #27648	; 0x6c00
     e80:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     e84:	56620074 	undefined
     e88:	43006c61 	movwmi	r6, #3169	; 0xc61
     e8c:	75636c61 	strbvc	r6, [r3, #-3169]!
     e90:	6574616c 	ldrbvs	r6, [r4, #-364]!
     e94:	32315841 	eorscc	r5, r1, #4259840	; 0x410000
     e98:	65766f4d 	ldrbvs	r6, [r6, #-3917]!
     e9c:	65657053 	strbvs	r7, [r5, #-83]!
     ea0:	5f670064 	svcpl	0x00670064
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ea4:	79646f42 	stmdbvc	r4!, {r1, r6, r8, r9, sl, fp, sp, lr}^
	if (sVal < s) {
     ea8:	66664f59 	uqsubaddxvs	r4, r6, r9
     eac:	00746573 	rsbseq	r6, r4, r3, ror r5
		return s;
	}

	s = (short) pgm_read_word(sMax);
     eb0:	54534e49 	ldrbpl	r4, [r3], #-3657
     eb4:	4749445f 	smlsldmi	r4, r9, pc, r4
     eb8:	4c415449 	cfstrdmi	mvd5, [r1], {73}

		return s;
	}
	return sVal;

}
     ebc:	5345525f 	movtpl	r5, #21087	; 0x525f
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     ec0:	49005445 	stmdbmi	r0, {r0, r2, r6, sl, ip, lr}
}

//--------------------------------------------------------------------
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
     ec4:	5f54534e 	svcpl	0x0054534e
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     ec8:	5f474552 	svcpl	0x00474552
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ecc:	54495257 	strbpl	r5, [r9], #-599
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
     ed0:	4c620045 	stclmi	0, cr0, [r2], #-276
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ed4:	43706f6f 	cmnmi	r0, #444	; 0x1bc
	if (sVal < s) {
     ed8:	4700746e 	strmi	r7, [r0, -lr, ror #8]
     edc:	52746961 	rsbspl	r6, r4, #1589248	; 0x184000
     ee0:	0059746f 	subseq	r7, r9, pc, ror #8
		return s;
	}

	s = (short) pgm_read_word(sMax);
     ee4:	79646f42 	stmdbvc	r4!, {r1, r6, r8, r9, sl, fp, sp, lr}^
     ee8:	4f746f52 	svcmi	0x00746f52
     eec:	65736666 	ldrbvs	r6, [r3, #-1638]!
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
     ef0:	6f520074 	svcvs	0x00520074
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ef4:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
	if (sVal < s) {
     ef8:	00596e6f 	subseq	r6, r9, pc, ror #28
     efc:	6c6f6f62 	stclvs	15, cr6, [pc], #-392
     f00:	006e6165 	rsbeq	r6, lr, r5, ror #2
		return s;
	}

	s = (short) pgm_read_word(sMax);
     f04:	74697257 	strbtvc	r7, [r9], #-599
     f08:	74754f65 	ldrbtvc	r4, [r5], #-3941
     f0c:	73747570 	cmnvc	r4, #469762048	; 0x1c000000
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     f10:	6f435f00 	svcvs	0x00435f00
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
     f14:	3364726f 	cmncc	r4, #-268435450	; 0xf0000006
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     f18:	6f540044 	svcvs	0x00540044
	if (sVal < s) {
     f1c:	5a6c6174 	bpl	1b194f4 <__Stack_Size+0x1b190f4>
     f20:	316c6142 	cmncc	ip, r2, asr #2
     f24:	6d6f4300 	stclvs	3, cr4, [pc]
		return s;
	}

	s = (short) pgm_read_word(sMax);
     f28:	646e616d 	strbtvs	r6, [lr], #-365
     f2c:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
     f30:	43747570 	cmnmi	r4, #469762048	; 0x1c000000
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
				FemurAngle1[LegIndex], &cFemurMin1[LegIndex],
				&cFemurMax1[LegIndex]);
		TibiaAngle1[LegIndex] = CheckServoAngleBounds(s++,
     f34:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     f38:	656c6c6f 	strbvs	r6, [ip, #-3183]!
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     f3c:	6c415f72 	mcrrvs	15, 7, r5, r1, cr2
     f40:	43776f6c 	cmnmi	r7, #432	; 0x1b0
				TibiaAngle1[LegIndex], &cTibiaMin1[LegIndex],
				&cTibiaMax1[LegIndex]);

	}
#endif
}
     f44:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     f48:	656c6c6f 	strbvs	r6, [ip, #-3183]!
     f4c:	746e4972 	strbtvc	r4, [lr], #-2418
     f50:	75727265 	ldrbvc	r7, [r2, #-613]!
     f54:	00737470 	rsbseq	r7, r3, r0, ror r4
     f58:	74696147 	strbtvc	r6, [r9], #-327
     f5c:	70657453 	rsbvc	r7, r5, r3, asr r4
     f60:	6f6f6200 	svcvs	0x006f6200
     f64:	6f63006c 	svcvs	0x0063006c
     f68:	49003473 	stmdbmi	r0, {r0, r1, r4, r5, r6, sl, ip, sp}
     f6c:	5f54534e 	svcpl	0x0054534e
// SmoothControl (From Zenta) -  This function makes the body
//            rotation and translation much smoother
//--------------------------------------------------------------------
short SmoothControl(short CtrlMoveInp, short CtrlMoveOut, byte CtrlDivider) {

	if (CtrlMoveOut < (CtrlMoveInp - 4))
     f70:	474e4950 	smlsldmi	r4, lr, r0, r9
     f74:	6d655400 	cfstrdvs	mvd5, [r5]
		return CtrlMoveOut + abs((CtrlMoveOut - CtrlMoveInp) / CtrlDivider);
     f78:	54003170 	strpl	r3, [r0], #-368
     f7c:	32706d65 	rsbscc	r6, r0, #6464	; 0x1940
     f80:	69654800 	stmdbvs	r5!, {fp, lr}^
     f84:	53746867 	cmnpl	r4, #6750208	; 0x670000
     f88:	64656570 	strbtvs	r6, [r5], #-1392
     f8c:	65646f4d 	strbvs	r6, [r4, #-3917]!
     f90:	4c724e00 	ldclmi	14, cr4, [r2]
	else if (CtrlMoveOut > (CtrlMoveInp + 4))
     f94:	65746669 	ldrbvs	r6, [r4, #-1641]!
		return CtrlMoveOut - abs((CtrlMoveOut - CtrlMoveInp) / CtrlDivider);
     f98:	736f5064 	cmnvc	pc, #100	; 0x64
     f9c:	66656c00 	strbtvs	r6, [r5], -r0, lsl #24
     fa0:	41004874 	tstmi	r0, r4, ror r8
     fa4:	6e415342 	cdpvs	3, 4, cr5, cr1, cr2, {2}
     fa8:	44656c67 	strbtmi	r6, [r5], #-3175
     fac:	00316765 	eorseq	r6, r1, r5, ror #14
     fb0:	76617254 	undefined

	return CtrlMoveInp;
}
     fb4:	654c6c65 	strbvs	r6, [ip, #-3173]
// GetLegsXZLength -
//--------------------------------------------------------------------
word g_wLegsXZLength = 0xffff;
word GetLegsXZLength(void) {
	// Could save away or could do a little math on one leg...
	if (g_wLegsXZLength != 0xffff)
     fb8:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     fbc:	66656c00 	strbtvs	r6, [r5], -r0, lsl #24
     fc0:	43005674 	movwmi	r5, #1652	; 0x674

//--------------------------------------------------------------------
// GetLegsXZLength -
//--------------------------------------------------------------------
word g_wLegsXZLength = 0xffff;
word GetLegsXZLength(void) {
     fc4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
	// Could save away or could do a little math on one leg...
	if (g_wLegsXZLength != 0xffff)
		return g_wLegsXZLength;

	return isqrt32((LegPosX[0] * LegPosX[0]) + (LegPosZ[0] * LegPosZ[0]));
     fc8:	6f4d6c6f 	svcvs	0x004d6c6f
     fcc:	42006564 	andmi	r6, r0, #419430400	; 0x19000000
     fd0:	61436c61 	cmpvs	r3, r1, ror #24
     fd4:	6e4f636c 	cdpvs	3, 4, cr6, cr15, cr12, {3}
     fd8:	67654c65 	strbvs	r4, [r5, -r5, ror #24]!
     fdc:	6e697300 	cdpvs	3, 6, cr7, cr9, cr0, {0}
}
     fe0:	69530034 	ldmdbvs	r3, {r2, r4, r5}^
     fe4:	0034476e 	eorseq	r4, r4, lr, ror #14
     fe8:	6d654663 	stclvs	6, cr4, [r5, #-396]!
     fec:	614d7275 	cmpvs	sp, r5, ror r2

#ifndef MAX_XZ_LEG_ADJUST
#define MAX_XZ_LEG_ADJUST   (word)(cCoxaLength[0]+cTibiaLength[0] + cFemurLength[0]/4)
#endif

void AdjustLegPositions(word XZLength1) {
     ff0:	41003178 	tstmi	r0, r8, ror r1
     ff4:	346e6174 	strbtcc	r6, [lr], #-372
     ff8:	74416c00 	strbvc	r6, [r1], #-3072
     ffc:	43006e61 	movwmi	r6, #3681	; 0xe61
    1000:	595f5250 	ldmdbpl	pc, {r4, r6, r9, ip, lr}^
		XZLength1 = MAX_XZ_LEG_ADJUST;
	if (XZLength1 < MIN_XZ_LEG_ADJUST)
		XZLength1 = MIN_XZ_LEG_ADJUST;

	// see if same length as when we came in
	if (XZLength1 == g_wLegsXZLength)
    1004:	52504300 	subspl	r4, r0, #0	; 0x0
    1008:	62005a5f 	andvs	r5, r0, #389120	; 0x5f000
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		GetSinCos((short) pgm_read_word(&cCoxaAngle1[LegIndex]));

		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
    100c:	6f747475 	svcvs	0x00747475

	// see if same length as when we came in
	if (XZLength1 == g_wLegsXZLength)
		return;

	g_wLegsXZLength = XZLength1;
    1010:	7250736e 	subsvc	r7, r0, #-1207959551	; 0xb8000001

	u8 LegIndex;
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		GetSinCos((short) pgm_read_word(&cCoxaAngle1[LegIndex]));
    1014:	67007665 	strvs	r7, [r0, -r5, ror #12]
    1018:	6544665f 	strbvs	r6, [r4, #-1631]

		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
    101c:	4f677562 	svcmi	0x00677562
    1020:	75707475 	ldrbvc	r7, [r0, #-1141]!
    1024:	57660074 	undefined
    1028:	696b6c61 	stmdbvs	fp!, {r0, r5, r6, sl, fp, sp, lr}^
    102c:	7700676e 	strvc	r6, [r0, -lr, ror #14]
    1030:	50727543 	rsbspl	r7, r2, r3, asr #10
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
    1034:	4100736f 	tstmi	r0, pc, ror #6
    1038:	656c676e 	strbvs	r6, [ip, #-1902]!
    103c:	34646152 	strbtcc	r6, [r4], #-338
    1040:	61744100 	cmnvs	r4, r0, lsl #2
    1044:	4100586e 	tstmi	r0, lr, ror #16
    1048:	596e6174 	stmdbpl	lr!, {r2, r4, r5, r6, r8, sp, lr}^
		return;

	g_wLegsXZLength = XZLength1;

	u8 LegIndex;
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    104c:	6f436300 	svcvs	0x00436300
		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
	}

	// Make sure we cycle through one gait to have the legs all move into their new locations...
	g_InControlState.ForceGaitStepCnt = g_InControlState.gaitCur.StepsInGait;
    1050:	6e496178 	mcrvs	1, 2, r6, cr9, cr8, {3}
    1054:	49630076 	stmdbmi	r3!, {r1, r2, r4, r5, r6}^
}
    1058:	5074696e 	rsbspl	r6, r4, lr, ror #18
    105c:	0058736f 	subseq	r7, r8, pc, ror #6
    1060:	696e4963 	stmdbvs	lr!, {r0, r1, r5, r6, r8, fp, lr}^
    1064:	736f5074 	cmnvc	pc, #116	; 0x74
    1068:	49630059 	stmdbmi	r3!, {r0, r3, r4, r6}^
    106c:	5074696e 	rsbspl	r6, r4, lr, ror #18
    1070:	005a736f 	subseq	r7, sl, pc, ror #6
    1074:	4d524f4e 	ldclmi	15, cr4, [r2, #-312]
    1078:	524f4e5f 	subpl	r4, pc, #1520	; 0x5f0
		g_InControlState.aCoxaInitAngle1[LegIndex] = (short)pgm_read_word(&cCoxaAngle1[LegIndex]);
#endif
	}
	g_wLegsXZLength = 0xffff;
#endif
}
    107c:	5f67004d 	svcpl	0x0067004d
		else if (g_InControlState.aCoxaInitAngle1[LegIndex] < -700)
		g_InControlState.aCoxaInitAngle1[LegIndex] = -700;
	}
	g_wLegsXZLength = 0xffff;
#endif
}
    1080:	75437761 	strbvc	r7, [r3, #-1889]
//     to be appropriate for the current y location of the body...
//--------------------------------------------------------------------

u8 g_iLegInitIndex = 0x00; // remember which index we are currently using...

void AdjustLegPositionsToBodyHeight() {
    1084:	50584172 	subspl	r4, r8, r2, ror r1
    1088:	4600736f 	strmi	r7, [r0], -pc, ror #6
#ifdef CNT_HEX_INITS
	// Lets see which of our units we should use...
	// Note: We will also limit our body height here...
	if (g_InControlState.BodyPos.y
    108c:	746e6f72 	strbtvc	r6, [lr], #-3954
			> (short) pgm_read_byte(&g_abHexMaxBodyY[CNT_HEX_INITS-1]))
		g_InControlState.BodyPos.y = (short) pgm_read_byte(
    1090:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
				&g_abHexMaxBodyY[CNT_HEX_INITS-1]);

	u8 i;
	word XZLength1 = pgm_read_byte(&g_abHexIntXZ[CNT_HEX_INITS-1]);
	for (i = 0; i < (CNT_HEX_INITS - 1); i++) { // Don't need to look at last entry as we already init to assume this one...
		if (g_InControlState.BodyPos.y
    1094:	00736f50 	rsbseq	r6, r3, r0, asr pc
    1098:	69676542 	stmdbvs	r7!, {r1, r6, r8, sl, sp, lr}^
				<= (short) pgm_read_byte(&g_abHexMaxBodyY[i])) {
			XZLength1 = pgm_read_byte(&g_abHexIntXZ[i]);
			break;
		}
	}
	if (i != g_iLegInitIndex) {
    109c:	7265536e 	rsbvc	r5, r5, #-1207959551	; 0xb8000001
				&g_abHexMaxBodyY[CNT_HEX_INITS-1]);

	u8 i;
	word XZLength1 = pgm_read_byte(&g_abHexIntXZ[CNT_HEX_INITS-1]);
	for (i = 0; i < (CNT_HEX_INITS - 1); i++) { // Don't need to look at last entry as we already init to assume this one...
		if (g_InControlState.BodyPos.y
    10a0:	70556f76 	subsvc	r6, r5, r6, ror pc
    10a4:	65746164 	ldrbvs	r6, [r4, #-356]!
    10a8:	69616700 	stmdbvs	r1!, {r8, r9, sl, sp, lr}^
				<= (short) pgm_read_byte(&g_abHexMaxBodyY[i])) {
			XZLength1 = pgm_read_byte(&g_abHexIntXZ[i]);
			break;
		}
	}
	if (i != g_iLegInitIndex) {
    10ac:	72754374 	rsbsvc	r4, r5, #-805306367	; 0xd0000001
		g_iLegInitIndex = i;  // remember the current index...
		AdjustLegPositions(XZLength1);
    10b0:	6f437300 	svcvs	0x00437300
	}
#endif // CNT_HEX_INITS
}
    10b4:	6e416178 	mcrvs	1, 2, r6, cr1, cr8, {3}
    10b8:	31656c67 	cmncc	r5, r7, ror #24
    10bc:	534e4900 	movtpl	r4, #59648	; 0xe900
}
//--------------------------------------------------------------------
//[CHECK VOLTAGE]
//Reads the input voltage and shuts down the bot when the power drops
byte s_bLVBeepCnt;
boolean CheckVoltage() {
    10c0:	45525f54 	ldrbmi	r5, [r2, #-3924]
    10c4:	00544553 	subseq	r4, r4, r3, asr r5
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10c8:	42746547 	rsbsmi	r6, r4, #297795584	; 0x11c00000

	// BUGBUG:: if voltage is 0 it failed to retrieve don't hang program...
	//    if (!Voltage)
	//      return;

	if (!g_fLowVoltageShutdown) {
    10cc:	65747461 	ldrbvs	r7, [r4, #-1121]!
boolean CheckVoltage() {
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10d0:	6f567972 	svcvs	0x00567972

	// BUGBUG:: if voltage is 0 it failed to retrieve don't hang program...
	//    if (!Voltage)
	//      return;

	if (!g_fLowVoltageShutdown) {
    10d4:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
boolean CheckVoltage() {
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10d8:	505f0065 	subspl	r0, pc, r5, rrx

	if (!g_fLowVoltageShutdown) {
		/**PrintString("Voltage : ");
		Printu32d(Voltage);
		PrintString("\n");*/
		if ((Voltage < cTurnOffVol) || (Voltage >= 1999)) {
    10dc:	6e656f68 	cdpvs	15, 6, cr6, cr5, cr8, {3}
    10e0:	61477869 	cmpvs	r7, r9, ror #16
    10e4:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}


			//Turn off
			g_InControlState.BodyPos.x = 0;
    10e8:	5f54534e 	svcpl	0x0054534e
			g_InControlState.TravelLength.x = 0;
			g_InControlState.TravelLength.z = 0;

#ifdef OPT_SINGLELEG
			g_InControlState.TravelLength.y = 0;
			g_InControlState.SelectedLeg = 255;
    10ec:	5f504143 	svcpl	0x00504143
    10f0:	44495247 	strbmi	r5, [r9], #-583
#endif
			g_fLowVoltageShutdown = 1;
    10f4:	534e4900 	movtpl	r4, #59648	; 0xe900
			s_bLVBeepCnt = 0;    // how many times we beeped...
    10f8:	59535f54 	ldmdbpl	r3, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
		if ((Voltage < cTurnOffVol) || (Voltage >= 1999)) {


			//Turn off
			g_InControlState.BodyPos.x = 0;
			g_InControlState.BodyPos.y = 0;
    10fc:	525f434e 	subspl	r4, pc, #939524097	; 0x38000001
			g_InControlState.BodyPos.z = 0;
			g_InControlState.BodyRot1.x = 0;
    1100:	575f4745 	ldrbpl	r4, [pc, -r5, asr #14]
			g_InControlState.BodyRot1.y = 0;
			g_InControlState.BodyRot1.z = 0;
    1104:	45544952 	ldrbmi	r4, [r4, #-2386]
			g_InControlState.TravelLength.x = 0;
			g_InControlState.TravelLength.z = 0;
    1108:	695f6700 	ldmdbvs	pc, {r8, r9, sl, sp, lr}^
#ifdef OPT_SINGLELEG
			g_InControlState.TravelLength.y = 0;
			g_InControlState.SelectedLeg = 255;
#endif
			g_fLowVoltageShutdown = 1;
			s_bLVBeepCnt = 0;    // how many times we beeped...
    110c:	656c6449 	strbvs	r6, [ip, #-1097]!
			g_InControlState.fRobotOn = false;
    1110:	76726553 	undefined
		}
#ifdef cTurnOnVol
	} else if ((Voltage > cTurnOnVol) && (Voltage < 1999)) {
    1114:	6d754e6f 	ldclvs	14, cr4, [r5, #-444]!
    1118:	70537700 	subsvc	r7, r3, r0, lsl #14

		g_fLowVoltageShutdown = 0;
    111c:	00646565 	rsbeq	r6, r4, r5, ror #10
    1120:	45665f67 	strbmi	r5, [r6, #-3943]!

#endif
	} else {
		if (s_bLVBeepCnt < 5) {
    1124:	6c62616e 	stfvse	f6, [r2], #-440
    1128:	72655365 	rsbvc	r5, r5, #-1811939327	; 0x94000001
			s_bLVBeepCnt++;
    112c:	00736f76 	rsbseq	r6, r3, r6, ror pc

			//MSound( 1, 45, 2000);
			Buzzed(45, 2000);
    1130:	61746f54 	cmnvs	r4, r4, asr pc
    1134:	6142596c 	cmpvs	r2, ip, ror #18
    1138:	5800316c 	stmdapl	r0, {r2, r3, r5, r6, r8, ip, sp}
		}
		mDelay(2000);
    113c:	6e654c5a 	mcrvs	12, 3, r4, cr5, cr10, {2}
    1140:	31687467 	cmncc	r8, r7, ror #8
    1144:	73655200 	cmnvc	r5, #0	; 0x0
	}
#endif

	return g_fLowVoltageShutdown;
}
    1148:	654c7465 	strbvs	r7, [ip, #-1125]
    114c:	696e4967 	stmdbvs	lr!, {r0, r1, r2, r5, r6, r8, fp, lr}^
    1150:	676e4174 	undefined
    1154:	0073656c 	rsbseq	r6, r3, ip, ror #10
    1158:	54534e49 	ldrbpl	r4, [r3], #-3657

//==============================================================================
// BackgroundProcess - Allows us to have some background processing for those
//    servo drivers that need us to do things like polling...
//==============================================================================
void BackgroundProcess(void) {
    115c:	5f44525f 	svcpl	0x0044525f
    1160:	544c4946 	strbpl	r4, [ip], #-2374
	if (g_fAXSpeedControl)
    1164:	49005248 	stmdbmi	r0, {r3, r6, r9, ip, lr}
		return;  // nothing to do in this mode...

	if (ServosEnabled) {
		//DebugToggle(A3);
		BioloidControllerEx_interpolateStep(false); // Do our background stuff...
    1168:	6c6f534b 	stclvs	3, cr5, [pc], #-300
		Battery_Monitor_Alarm();
    116c:	6f697475 	svcvs	0x00697475
	}
}
    1170:	7272456e 	rsbsvc	r4, r2, #461373440	; 0x1b800000
    1174:	6300726f 	movwvs	r7, #623	; 0x26f
//Function that gets called from the main loop if the robot is not logically
//     on.  Gives us a chance to play some...
//--------------------------------------------------------------------
static u8 g_iIdleServoNum = (u8) - 1;
static u8 g_iIdleLedState = 1;  // what state to we wish to set...
void IdleTime(void) {
    1178:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    117c:	00587465 	subseq	r7, r8, r5, ror #8
	// Each time we call this set servos LED on or off...
	g_iIdleServoNum++;
    1180:	66664f63 	strbtvs	r4, [r6], -r3, ror #30
	if (g_iIdleServoNum >= NUMSERVOS) {
    1184:	5a746573 	bpl	1d1a758 <__Stack_Size+0x1d1a358>
    1188:	47494800 	strbmi	r4, [r9, -r0, lsl #16]
		g_iIdleServoNum = 0;
    118c:	4f4c5f48 	svcmi	0x004c5f48
		g_iIdleLedState = 1 - g_iIdleLedState;
    1190:	4e00474e 	cdpmi	7, 0, cr4, cr0, cr14, {2}
    1194:	74616765 	strbtvc	r6, [r1], #-1893
	}
	dxl_write_byte(pgm_read_byte(&cPinTable[g_iIdleServoNum]), AXM_LED,
    1198:	56657669 	strbtpl	r7, [r5], -r9, ror #12
    119c:	65756c61 	ldrbvs	r6, [r5, #-3169]!
    11a0:	534e4900 	movtpl	r4, #59648	; 0xe900
    11a4:	45525f54 	ldrbmi	r5, [r2, #-3924]
    11a8:	445f4441 	ldrbmi	r4, [pc], #1089	; 11b0 <__Stack_Size+0xdb0>
			g_iIdleLedState);
	//ax12ReadPacket(6);  // get the response...


}
    11ac:	00415441 	subeq	r5, r1, r1, asr #8
    11b0:	41746547 	cmnmi	r4, r7, asr #10
    11b4:	00736f43 	rsbseq	r6, r3, r3, asr #30
    11b8:	54534e49 	ldrbpl	r4, [r3], #-3657

//--------------------------------------------------------------------
//[SetRegOnAllServos] Function that is called to set the state of one
//  register in all of the servos, like Torque on...
//--------------------------------------------------------------------
void SetRegOnAllServos(u8 bReg, u8 bVal) {
    11bc:	4e59535f 	mrcmi	3, 2, r5, cr9, cr15, {2}
    11c0:	45525f43 	ldrbmi	r5, [r2, #-3907]
    11c4:	67004441 	strvs	r4, [r0, -r1, asr #8]
	 ax12write(bVal);

  }
  ax12write(0xff - (checksum % 256));
  setRX(0);*/
	 dxl_set_txpacket_id (BROADCAST_ID);
    11c8:	6f4c665f 	svcvs	0x004c665f
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    11cc:	6c6f5677 	stclvs	6, cr5, [pc], #-476
	dxl_set_txpacket_parameter(0,bReg);
    11d0:	65676174 	strbvs	r6, [r7, #-372]!
    11d4:	74756853 	ldrbtvc	r6, [r5], #-2131
	dxl_set_txpacket_parameter(1,2);
    11d8:	6e776f64 	cdpvs	15, 7, cr6, cr7, cr4, {3}
    11dc:	65526200 	ldrbvs	r6, [r2, #-512]
    11e0:	4e430067 	cdpmi	0, 4, cr0, cr3, cr7, {3}
  int i;
	for (i = 0; i < poseSize; i++) {
		byte id = pgm_read_byte(&cPinTable[i]);
		dxl_set_txpacket_parameter(2 + 3 * i, id);
    11e4:	454c5f54 	strbmi	r5, [ip, #-3924]
    11e8:	47005347 	strmi	r5, [r0, -r7, asr #6]
    11ec:	43746961 	cmnmi	r4, #1589248	; 0x184000
    11f0:	65727275 	ldrbvs	r7, [r2, #-629]!
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
    11f4:	654c746e 	strbvs	r7, [ip, #-1134]
    11f8:	00724e67 	rsbseq	r4, r2, r7, ror #28
    11fc:	61746f52 	cmnvs	r4, r2, asr pc
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
    1200:	654c6574 	strbvs	r6, [ip, #-1396]
    1204:	696e4967 	stmdbvs	lr!, {r0, r1, r2, r5, r6, r8, fp, lr}^
    1208:	676e4174 	undefined
	dxl_set_txpacket_parameter(1,2);
  int i;
	for (i = 0; i < poseSize; i++) {
		byte id = pgm_read_byte(&cPinTable[i]);
		dxl_set_txpacket_parameter(2 + 3 * i, id);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
    120c:	0073656c 	rsbseq	r6, r3, ip, ror #10
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
    1210:	76657250 	undefined
	 dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0,bReg);
	dxl_set_txpacket_parameter(1,2);
  int i;
	for (i = 0; i < poseSize; i++) {
    1214:	76726553 	undefined
    1218:	766f4d6f 	strbtvc	r4, [pc], -pc, ror #26
    121c:	6d695465 	cfstrdvs	mvd5, [r9, #-404]!
		dxl_set_txpacket_parameter(2 + 3 * i, id);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
	}

	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
    1220:	6f420065 	svcvs	0x00420065
    1224:	6f507964 	svcvs	0x00507964
    1228:	61420073 	cmpvs	r2, r3, ror r0
#ifdef DEBUG_BIOLOIDEX
	PrintString("DriverAX12 --- SetRegOnAllServos ---\n");
#endif
	dxl_txrx_packet();
    122c:	72676b63 	rsbvc	r6, r7, #101376	; 0x18c00

	u16 CommStatus = dxl_get_result();
    1230:	646e756f 	strbtvs	r7, [lr], #-1391
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
    1234:	636f7250 	cmnvs	pc, #5	; 0x5
		PrintErrorCode();
    1238:	00737365 	rsbseq	r7, r3, r5, ror #6
	else
		PrintCommStatus(CommStatus);
    123c:	796f4a62 	stmdbvc	pc!, {r1, r5, r6, r9, fp, lr}^
#endif
}
    1240:	63697473 	cmnvs	r9, #1929379840	; 0x73000000
    1244:	6c61576b 	stclvs	7, cr5, [r1], #-428
    1248:	646f4d6b 	strbtvs	r4, [pc], #3435	; 1250 <__Stack_Size+0xe50>
//--------------------------------------------------------------------
//[MakeSureServosAreOn] Function that is called to handle when you are
//  transistioning from servos all off to being on.  May need to read
//  in the current pose...
//--------------------------------------------------------------------
void MakeSureServosAreOn(void) {
    124c:	61480065 	cmpvs	r8, r5, rrx

	if (ServosEnabled) {

		if (!g_fServosFree)
    1250:	694c666c 	stmdbvs	ip, {r2, r3, r5, r6, r9, sl, sp, lr}^
			return;    // we are not free

		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		if (g_fAXSpeedControl) {
    1254:	65487466 	strbvs	r7, [r8, #-1126]
    1258:	74686769 	strbtvc	r6, [r8], #-1897

			int i;
			for (i = 0; i < NUMSERVOS; i++) {
				g_awGoalAXPos[i] = dxl_read_word(pgm_read_byte(&cPinTable[i]),
    125c:	694d7300 	stmdbvs	sp, {r8, r9, ip, sp, lr}^
    1260:	4e49006e 	cdpmi	0, 4, cr0, cr9, cr14, {3}
    1264:	575f5453 	undefined
    1268:	45525f52 	ldrbmi	r5, [r2, #-3922]
						AXM_PRESENT_POSITION_L);
				mDelay(25);
    126c:	52485447 	subpl	r5, r8, #1191182336	; 0x47000000
    1270:	74655300 	strbtvc	r5, [r5], #-768

		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		if (g_fAXSpeedControl) {

			int i;
			for (i = 0; i < NUMSERVOS; i++) {
    1274:	4f676552 	svcmi	0x00676552
    1278:	6c6c416e 	stfvse	f4, [ip], #-440
				g_awGoalAXPos[i] = dxl_read_word(pgm_read_byte(&cPinTable[i]),
						AXM_PRESENT_POSITION_L);
				mDelay(25);
			}
		} else {
			BioloidControllerEx_readPose();
    127c:	76726553 	undefined
		}

		SetRegOnAllServos(AXM_TORQUE_ENABLE, 1);  // Use sync write to do it.
    1280:	4700736f 	strmi	r7, [r0, -pc, ror #6]
    1284:	50746961 	rsbspl	r6, r4, r1, ror #18

		CommanderInputController_AllowControllerInterrupts(true);
		g_fServosFree = false;
    1288:	0058736f 	subseq	r7, r8, pc, ror #6
	}

}
    128c:	79646f42 	stmdbvc	r4!, {r1, r6, r8, r9, sl, fp, sp, lr}^
    1290:	31746f52 	cmncc	r4, r2, asr pc
    1294:	52504300 	subspl	r4, r0, #0	; 0x0
    1298:	6300585f 	movwvs	r5, #2143	; 0x85f
    129c:	69626954 	stmdbvs	r2!, {r2, r4, r6, r8, fp, sp, lr}^

//------------------------------------------------------------------------------------------
//[BeginServoUpdate] Does whatever preperation that is needed to starrt a move of our servos
//------------------------------------------------------------------------------------------
void BeginServoUpdate(void)    // Start the update
		{
    12a0:	6e694d61 	cdpvs	13, 6, cr4, cr9, cr1, {3}

	MakeSureServosAreOn();
    12a4:	5f670031 	svcpl	0x00670031
	if (ServosEnabled) {

		if (g_fAXSpeedControl) {
    12a8:	67654c62 	strbvs	r4, [r5, -r2, ror #24]!
    12ac:	746c6f56 	strbtvc	r6, [ip], #-3926

#ifdef USE_AX12_SPEED_CONTROL
			// If we are trying our own Servo control need to save away the new positions...
			byte i;
			for (i = 0; i < NUMSERVOS; i++) {
				g_awCurAXPos[i] = g_awGoalAXPos[i];
    12b0:	00656761 	rsbeq	r6, r5, r1, ror #14
    12b4:	6d654663 	stclvs	6, cr4, [r5, #-396]!
    12b8:	654c7275 	strbvs	r7, [ip, #-629]
		if (g_fAXSpeedControl) {

#ifdef USE_AX12_SPEED_CONTROL
			// If we are trying our own Servo control need to save away the new positions...
			byte i;
			for (i = 0; i < NUMSERVOS; i++) {
    12bc:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
				g_awCurAXPos[i] = g_awGoalAXPos[i];
			}
#endif
		} else
			BioloidControllerEx_interpolateStep(true); // Make sure we call at least once
    12c0:	756f4400 	strbvc	r4, [pc, #-1024]!	; ec8 <__Stack_Size+0xac8>
    12c4:	54656c62 	strbtpl	r6, [r5], #-3170

	}
}
    12c8:	65766172 	ldrbvs	r6, [r6, #-370]!
    12cc:	006e4f6c 	rsbeq	r4, lr, ip, ror #30
    12d0:	4f434e49 	svcmi	0x00434e49
    12d4:	4f52544e 	svcmi	0x0052544e
}

//--------------------------------------------------------------------
//[FREE SERVOS] Frees all the servos
//--------------------------------------------------------------------
void FreeServos(void) {
    12d8:	4154534c 	cmpmi	r4, ip, asr #6
    12dc:	63004554 	movwvs	r4, #1364	; 0x554

	if (!g_fServosFree) {
    12e0:	756d6546 	strbvc	r6, [sp, #-1350]!
		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		SetRegOnAllServos(AXM_TORQUE_ENABLE, 0);  // do this as one statement...
    12e4:	6e694d72 	mcrvs	13, 3, r4, cr9, cr2, {3}
    12e8:	4d730031 	ldclmi	0, cr0, [r3, #-196]!
    12ec:	4e007861 	cdpmi	8, 0, cr7, cr0, cr1, {3}
		byte i;
		for (i = 0; i < NUMSERVOS; i++) {
			Relax(pgm_read_byte(&cPinTable[i]));
    12f0:	61476d6f 	cmpvs	r7, pc, ror #26
    12f4:	70537469 	subsvc	r7, r3, r9, ror #8
    12f8:	00646565 	rsbeq	r6, r4, r5, ror #10

	if (!g_fServosFree) {
		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		SetRegOnAllServos(AXM_TORQUE_ENABLE, 0);  // do this as one statement...
		byte i;
		for (i = 0; i < NUMSERVOS; i++) {
    12fc:	4967654c 	stmdbmi	r7!, {r2, r3, r6, r8, sl, sp, lr}^
			Relax(pgm_read_byte(&cPinTable[i]));
		}
		CommanderInputController_AllowControllerInterrupts(true);
		g_fServosFree = true;
    1300:	67654c4b 	strbvs	r4, [r5, -fp, asr #24]!
	}
}
    1304:	4800724e 	stmdami	r0, {r1, r2, r3, r6, r9, ip, sp, lr}
    1308:	5f484749 	svcpl	0x00484749
    130c:	4d524f4e 	ldclmi	15, cr4, [r2, #-312]
extern void SetRegOnAllServos(u8 bReg, u8 bVal);

//--------------------------------------------------------------------
//Init
//--------------------------------------------------------------------
void Servo_Init(void) {
    1310:	65745300 	ldrbvs	r5, [r4, #-768]!
	// First lets get the actual servo positions for all of our servos...
	//pinMode(0, OUTPUT);
	g_fServosFree = true;
    1314:	6e497370 	mcrvs	3, 2, r7, cr9, cr0, {3}

  poseSize = NUMSERVOS;
    1318:	74696147 	strbtvc	r6, [r9], #-327
    131c:	775f6700 	ldrbvc	r6, [pc, -r0, lsl #14]
  BioloidControllerEx_readPose();
    1320:	7367654c 	cmnvc	r7, #318767104	; 0x13000000
#ifdef cVoltagePin
	for (byte i=0; i < 8; i++)
	GetBatteryVoltage();  // init the voltage pin
#endif

	g_fAXSpeedControl = false;
    1324:	654c5a58 	strbvs	r5, [ip, #-2648]
    1328:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^



	// Added - try to speed things up later if we do a query...
	SetRegOnAllServos(AXM_RETURN_DELAY_TIME, 0); // tell servos to give us back their info as quick as they can...
    132c:	6e695300 	cdpvs	3, 6, cr5, cr9, cr0, {0}
    1330:	4c656c67 	stclmi	12, cr6, [r5], #-412

}
    1334:	6f436765 	svcvs	0x00436765
    1338:	6f72746e 	svcvs	0x0072746e
    133c:	6547006c 	strbvs	r0, [r7, #-108]
    1340:	6e695374 	mcrvs	3, 3, r5, cr9, cr4, {3}

}

void setupPhoenix() {

	g_fShowDebugPrompt = true;
    1344:	00736f43 	rsbseq	r6, r3, r3, asr #30
void readSensors(){


}

void setupPhoenix() {
    1348:	5f676942 	svcpl	0x00676942

	g_fShowDebugPrompt = true;
	g_fDebugOutput = false;
    134c:	6e69616d 	powvsez	f6, f1, #5.0
    1350:	72744300 	rsbsvc	r4, r4, #0	; 0x0
	//init BioloidEx
	BioloidControllerEx();
    1354:	766f4d6c 	strbtvc	r4, [pc], -ip, ror #26

	// Init our ServoDriver
	Servo_Init();
    1358:	706e4965 	rsbvc	r4, lr, r5, ror #18

	mDelay(10);
    135c:	654c7300 	strbvs	r7, [ip, #-768]

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		LegPosX[LegIndex] = (short) pgm_read_word(&cInitPosX[LegIndex]); //Set start positions for each leg
    1360:	696e4967 	stmdbvs	lr!, {r0, r1, r2, r5, r6, r8, fp, lr}^
    1364:	676e4174 	undefined
		LegPosY[LegIndex] = (short) pgm_read_word(&cInitPosY[LegIndex]);
    1368:	6441656c 	strbvs	r6, [r1], #-1388
    136c:	7473756a 	ldrbtvc	r7, [r3], #-1386
		LegPosZ[LegIndex] = (short) pgm_read_word(&cInitPosZ[LegIndex]);
    1370:	61745300 	cmnvs	r4, r0, lsl #6

	mDelay(10);

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		LegPosX[LegIndex] = (short) pgm_read_word(&cInitPosX[LegIndex]); //Set start positions for each leg
    1374:	70557472 	subsvc	r7, r5, r2, ror r4
    1378:	65746164 	ldrbvs	r6, [r4, #-356]!
		LegPosY[LegIndex] = (short) pgm_read_word(&cInitPosY[LegIndex]);
    137c:	76726553 	undefined
    1380:	4300736f 	movwmi	r7, #879	; 0x36f
		LegPosZ[LegIndex] = (short) pgm_read_word(&cInitPosZ[LegIndex]);
    1384:	3441736f 	strbcc	r7, [r1], #-879
    1388:	6c614200 	sfmvs	f4, 2, [r1]
    138c:	65636e61 	strbvs	r6, [r3, #-3681]!
	Servo_Init();

	mDelay(10);

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    1390:	79646f42 	stmdbvc	r4!, {r1, r6, r8, r9, sl, fp, sp, lr}^
    1394:	74654700 	strbtvc	r4, [r5], #-1792
    1398:	43637241 	cmnmi	r3, #268435460	; 0x10000004

	ResetLegInitAngles();

	//Single leg control. Make sure no leg is selected
#ifdef OPT_SINGLELEG
	g_InControlState.SelectedLeg = 255; // No Leg selected
    139c:	6700736f 	strvs	r7, [r0, -pc, ror #6]
    13a0:	5841665f 	stmdapl	r1, {r0, r1, r2, r3, r4, r6, r9, sl, sp, lr}^
	g_InControlState.PrevSelectedLeg = 255;
    13a4:	65657053 	strbvs	r7, [r5, #-83]!
#endif
	//Body Positions
	g_InControlState.BodyPos.x = 0;
    13a8:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
	g_InControlState.BodyPos.y = 0;
	g_InControlState.BodyPos.z = 0;
    13ac:	6c6f7274 	sfmvs	f7, 2, [pc], #-464

//Body Rotations
	g_InControlState.BodyRot1.x = 0;
	g_InControlState.BodyRot1.y = 0;
    13b0:	61657200 	cmnvs	r5, r0, lsl #4
	g_InControlState.BodyRot1.z = 0;
	g_InControlState.BodyRotOffset.x = 0;
    13b4:	6e655364 	cdpvs	3, 6, cr5, cr5, cr4, {3}
	g_InControlState.BodyRotOffset.y = 0; //Input Y offset value to adjust centerpoint of rotation
	g_InControlState.BodyRotOffset.z = 0;
    13b8:	73726f73 	cmnvc	r2, #460	; 0x1cc

	//Gait
	g_InControlState.GaitType = 0;
    13bc:	6f437700 	svcvs	0x00437700
	g_InControlState.BalanceMode = 0;
    13c0:	44536178 	ldrbmi	r6, [r3], #-376
	g_InControlState.LegLiftHeight = 50;
	g_InControlState.ForceGaitStepCnt = 0; // added to try to adjust starting positions depending on height...
    13c4:	6c700056 	ldclvs	0, cr0, [r0], #-344
	g_InControlState.GaitStep = 1;
    13c8:	00656361 	rsbeq	r6, r5, r1, ror #6
}

void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {
    13cc:	4c695f67 	stclmi	15, cr5, [r9], #-412
	g_InControlState.BodyRotOffset.z = 0;

	//Gait
	g_InControlState.GaitType = 0;
	g_InControlState.BalanceMode = 0;
	g_InControlState.LegLiftHeight = 50;
    13d0:	6e496765 	cdpvs	7, 4, cr6, cr9, cr5, {3}
    13d4:	6e497469 	cdpvs	4, 4, cr7, cr9, cr9, {3}
void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {

		g_InControlState.gaitCur = APG[g_InControlState.GaitType];
    13d8:	00786564 	rsbseq	r6, r8, r4, ror #10
    13dc:	6d654663 	stclvs	6, cr4, [r5, #-396]!
    13e0:	6e497275 	mcrvs	2, 2, r7, cr9, cr5, {3}
//==============================================================================

// If both PS2 and XBee are defined then we will become secondary to the xbee
void CommanderInputController_Init(void) {

	g_BodyYOffset = 0;
    13e4:	6f430076 	svcvs	0x00430076
    13e8:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
    13ec:	5f726564 	svcpl	0x00726564
	g_BodyYShift = 0;
	//begin(XBEE_BAUD);
	GPSeq = 0;  // init to something...
    13f0:	69676562 	stmdbvs	r7!, {r1, r5, r6, r8, sl, sp, lr}^
    13f4:	6f54006e 	svcvs	0x0054006e

	ControlMode = WALKMODE;
    13f8:	586c6174 	stmdapl	ip!, {r2, r4, r5, r6, r8, sp, lr}^
	HeightSpeedMode = NORM_NORM;
    13fc:	316c6142 	cmncc	ip, r2, asr #2
	//    DoubleHeightOn = false;
	DoubleTravelOn = false;
    1400:	736f4300 	cmnvc	pc, #0	; 0x0
	bJoystickWalkMode = 0;
    1404:	46003442 	strmi	r3, [r0], -r2, asr #8
	GaitSelect();

	CommanderInputController_Init();

	// Servo Driver
	ServoMoveTime = 150;
    1408:	45534c41 	ldrbmi	r4, [r3, #-3137]
	g_InControlState.fRobotOn = 0;
    140c:	6f436300 	svcvs	0x00436300
	g_fLowVoltageShutdown = false;
    1410:	654c6178 	strbvs	r6, [ip, #-376]

}
    1414:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1418:	72506600 	subsvc	r6, r0, #0	; 0x0
    141c:	525f7665 	subspl	r7, pc, #105906176	; 0x6500000
    1420:	746f626f 	strbtvc	r6, [pc], #623	; 1428 <__Stack_Size+0x1028>
    1424:	43006e4f 	movwmi	r6, #3663	; 0xe4f
    1428:	446c7274 	strbtmi	r7, [ip], #-628
    142c:	64697669 	strbtvs	r7, [r9], #-1641
    1430:	67007265 	strvs	r7, [r0, -r5, ror #4]
    1434:	646f425f 	strbtvs	r4, [pc], #607	; 143c <__Stack_Size+0x103c>
    1438:	68535979 	ldmdavs	r3, {r0, r3, r4, r5, r6, r8, fp, ip, lr}^
    143c:	00746669 	rsbseq	r6, r4, r9, ror #12
    1440:	54534e49 	ldrbpl	r4, [r3], #-3657
    1444:	4952575f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    1448:	445f4554 	ldrbmi	r4, [pc], #1364	; 1450 <__Stack_Size+0x1050>
    144c:	00415441 	subeq	r5, r1, r1, asr #8
    1450:	63656863 	cmnvs	r5, #6488064	; 0x630000
    1454:	6d75736b 	ldclvs	3, cr7, [r5, #-428]!
    1458:	65467700 	strbvs	r7, [r6, #-1792]
    145c:	5372756d 	cmnpl	r2, #457179136	; 0x1b400000
    1460:	46005644 	strmi	r5, [r0], -r4, asr #12
    1464:	53656572 	cmnpl	r5, #478150656	; 0x1c800000
//[CommitServoDriver Updates the positions of the servos - This outputs
//         as much of the command as we can without committing it.  This
//         allows us to once the previous update was completed to quickly
//        get the next command to start
//--------------------------------------------------------------------
void CommitServoDriver(word wMoveTime) {
    1468:	6f767265 	svcvs	0x00767265
    146c:	5f670073 	svcpl	0x00670073
    1470:	73614c77 	cmnvc	r1, #30464	; 0x7700


	CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    1474:	6c6f5674 	stclvs	6, cr5, [pc], #-464

      }
      ax12write(0xff - (checksum % 256));
      setRX(0);
*/
  	    dxl_set_txpacket_id (BROADCAST_ID);
    1478:	65676174 	strbvs	r6, [r7, #-372]!
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    147c:	534e4900 	movtpl	r4, #59648	; 0xe900
    1480:	554c5f54 	strbpl	r5, [ip, #-3924]
		dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
    1484:	414d5f54 	cmpmi	sp, r4, asr pc
    1488:	4547414e 	strbmi	r4, [r7, #-334]
		dxl_set_txpacket_parameter(1, 2);
    148c:	69547700 	ldmdbvs	r4, {r8, r9, sl, ip, sp, lr}^
    1490:	4100656d 	tstmi	r0, sp, ror #10
    1494:	732f5050 	teqvc	pc, #80	; 0x50
    1498:	422f6372 	eormi	r6, pc, #-939524095	; 0xc8000001
      int i;
      word wSpeed;
		for (i = 0; i < poseSize; i++) {
			wSpeed = CalculateAX12MoveSpeed(g_awCurAXPos[i], g_awGoalAXPos[i], wMoveTime);    // What order should we store these values?
    149c:	6d5f6769 	ldclvs	7, cr6, [pc, #-420]
    14a0:	2e6e6961 	cdpcs	9, 6, cr6, cr14, cr1, {3}
    14a4:	546c0063 	strbtpl	r0, [ip], #-99
    14a8:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
			//dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
			byte id = pgm_read_byte(&cPinTable[i]);
			dxl_set_txpacket_parameter(2 + 3 * i, id);
    14ac:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    14b0:	64490074 	strbvs	r0, [r9], #-116
    14b4:	6954656c 	ldmdbvs	r4, {r2, r3, r5, r6, r8, sl, sp, lr}^
    14b8:	7300656d 	movwvc	r6, #1389	; 0x56d
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(g_awGoalAXPos[i]));
    14bc:	69626954 	stmdbvs	r2!, {r2, r4, r6, r8, fp, sp, lr}^
    14c0:	676e4161 	strbvs	r4, [lr, -r1, ror #2]!
    14c4:	0031656c 	eorseq	r6, r1, ip, ror #10
    14c8:	65464b49 	strbvs	r4, [r6, #-2889]
    14cc:	6f507465 	svcvs	0x00507465
			dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(g_awGoalAXPos[i]));
    14d0:	49005873 	stmdbmi	r0, {r0, r1, r4, r5, r6, fp, ip, lr}
    14d4:	6565464b 	strbvs	r4, [r5, #-1611]!
    14d8:	736f5074 	cmnvc	pc, #116	; 0x74
    14dc:	4b490059 	blmi	1241648 <__Stack_Size+0x1241248>
    14e0:	74656546 	strbtvc	r6, [r5], #-1350
    14e4:	5a736f50 	bpl	1cdd22c <__Stack_Size+0x1cdce2c>
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(wSpeed));
    14e8:	74786500 	ldrbtvc	r6, [r8], #-1280
    14ec:	76657250 	undefined
    14f0:	6c656400 	cfstrdvs	mvd6, [r5]
		    dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(wSpeed));
    14f4:	47006174 	smlsdxmi	r0, r4, r1, r6
    14f8:	654c7465 	strbvs	r7, [ip, #-1125]
    14fc:	5a587367 	bpl	161e2a0 <__Stack_Size+0x161dea0>
    1500:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
		dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
		dxl_set_txpacket_parameter(1, 2);
      int i;
      word wSpeed;
		for (i = 0; i < poseSize; i++) {
    1504:	43006874 	movwmi	r6, #2164	; 0x874
    1508:	44524f4f 	ldrbmi	r4, [r2], #-3919
    150c:	66004433 	undefined
    1510:	6f746361 	svcvs	0x00746361
			dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(g_awGoalAXPos[i]));
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(wSpeed));
		    dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(wSpeed));
		}

		dxl_set_txpacket_length((4 + 1) * poseSize + 4);
    1514:	4e490072 	mcrmi	0, 2, r0, cr9, cr2, {3}
    1518:	575f5453 	undefined
    151c:	49465f52 	stmdbmi	r6, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
#ifdef DEBUG_BIOLOIDEX
	PrintString("DriverAX12 --- CommitServoDriver ---\n");
#endif
		dxl_txrx_packet();
    1520:	5248544c 	subpl	r5, r8, #1275068416	; 0x4c000000

			u16 CommStatus = dxl_get_result();
    1524:	6f526600 	svcvs	0x00526600
#ifdef USING_PC_UART
			if (CommStatus == DXL_RXSUCCESS)
    1528:	4f746f62 	svcmi	0x00746f62
				PrintErrorCode();
    152c:	694c006e 	stmdbvs	ip, {r1, r2, r3, r5, r6}^
			else
				PrintCommStatus(CommStatus);
    1530:	69447466 	stmdbvs	r4, {r1, r2, r5, r6, sl, ip, sp, lr}^
    1534:	63614676 	cmnvs	r1, #123731968	; 0x7600000
#endif
#endif
		} else {
			BioloidControllerEx_interpolateSetup(wMoveTime);
    1538:	00726f74 	rsbseq	r6, r2, r4, ror pc

	}

	CommanderInputController_AllowControllerInterrupts(true);

}
    153c:	656b614d 	strbvs	r6, [fp, #-333]!
    1540:	65727553 	ldrbvs	r7, [r2, #-1363]!
    1544:	76726553 	undefined
    1548:	7241736f 	subvc	r7, r1, #-1140850687	; 0xbc000001
    154c:	006e4f65 	rsbeq	r4, lr, r5, ror #30
    1550:	79685958 	stmdbvc	r8!, {r3, r4, r6, r8, fp, ip, lr}^
	word wCoxaSDV;        // Coxa value in servo driver units
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    1554:	54003270 	strpl	r3, [r0], #-624
    1558:	6c61746f 	cfstrdvs	mvd7, [r1], #-444
    155c:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    1560:	54005873 	strpl	r5, [r0], #-2163
    1564:	6c61746f 	cfstrdvs	mvd7, [r1], #-444


void OutputServoInfoForLeg(byte LegIndex, short sCoxaAngle1, short sFemurAngle1,
		short sTibiaAngle1)

		{
    1568:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
	word wCoxaSDV;        // Coxa value in servo driver units
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    156c:	54005973 	strpl	r5, [r0], #-2419
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
    1570:	6c61746f 	cfstrdvs	mvd7, [r1], #-444
    1574:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    1578:	49005a73 	stmdbmi	r0, {r0, r1, r4, r5, r6, r9, fp, ip, lr}
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    157c:	3257534b 	subscc	r5, r7, #738197505	; 0x2c000001
    1580:	615f6700 	cmpvs	pc, r0, lsl #14
    1584:	78654862 	stmdavc	r5!, {r1, r5, r6, fp, lr}^


void OutputServoInfoForLeg(byte LegIndex, short sCoxaAngle1, short sFemurAngle1,
		short sTibiaAngle1)

		{
    1588:	58746e49 	ldmdapl	r4!, {r0, r3, r6, r9, sl, fp, sp, lr}^
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    158c:	6441005a 	strbvs	r0, [r1], #-90
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
    1590:	7473756a 	ldrbtvc	r7, [r3], #-1386
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    1594:	5067654c 	rsbpl	r6, r7, ip, asr #10
#ifdef USE_AX12_SPEED_CONTROL
			// Save away the new positions...
			g_awGoalAXPos[FIRSTCOXAPIN + LegIndex] = wCoxaSDV; // What order should we store these values?
			g_awGoalAXPos[FIRSTFEMURPIN + LegIndex] = wFemurSDV;
    1598:	7469736f 	strbtvc	r7, [r9], #-879

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
#ifdef USE_AX12_SPEED_CONTROL
			// Save away the new positions...
			g_awGoalAXPos[FIRSTCOXAPIN + LegIndex] = wCoxaSDV; // What order should we store these values?
    159c:	736e6f69 	cmnvc	lr, #420	; 0x1a4
			g_awGoalAXPos[FIRSTFEMURPIN + LegIndex] = wFemurSDV;
    15a0:	6f426f54 	svcvs	0x00426f54
			g_awGoalAXPos[FIRSTTIBIAPIN + LegIndex] = wTibiaSDV;
    15a4:	65487964 	strbvs	r7, [r8, #-2404]
    15a8:	74686769 	strbtvc	r6, [r8], #-1897
    15ac:	495f6700 	ldmdbmi	pc, {r8, r9, sl, sp, lr}^

#endif
		} else {
			BioloidControllerEx_setNextPose(
    15b0:	6e6f436e 	cdpvs	3, 6, cr4, cr15, cr14, {3}
    15b4:	6c6f7274 	sfmvs	f7, 2, [pc], #-464
					pgm_read_byte(&cPinTable[FIRSTCOXAPIN + LegIndex]),
					wCoxaSDV);
			BioloidControllerEx_setNextPose(
    15b8:	74617453 	strbtvc	r7, [r1], #-1107
    15bc:	6f430065 	svcvs	0x00430065
    15c0:	74696d6d 	strbtvc	r6, [r9], #-3437
					pgm_read_byte(&cPinTable[FIRSTFEMURPIN + LegIndex]),
					wFemurSDV);
			BioloidControllerEx_setNextPose(
    15c4:	76726553 	undefined
    15c8:	6972446f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r6, sl, lr}^
					wTibiaSDV);

		}
	}
	CommanderInputController_AllowControllerInterrupts(true); // Ok for hserial again...
}
    15cc:	00726576 	rsbseq	r6, r2, r6, ror r5
    15d0:	616f4777 	smcvs	62583
    15d4:	736f506c 	cmnvc	pc, #108	; 0x6c
    15d8:	74754f00 	ldrbtvc	r4, [r5], #-3840
    15dc:	53747570 	cmnpl	r4, #469762048	; 0x1c000000

void StartUpdateServos() {
    15e0:	6f767265 	svcvs	0x00767265
	byte LegIndex;

	// First call off to the init...
	BeginServoUpdate();    // Start the update
    15e4:	6f666e49 	svcvs	0x00666e49
    15e8:	4c726f46 	ldclmi	15, cr6, [r2], #-280
    15ec:	49006765 	stmdbmi	r0, {r0, r2, r5, r6, r8, r9, sl, sp, lr}

	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		OutputServoInfoForLeg(LegIndex,
    15f0:	5f54534e 	svcpl	0x0054534e
    15f4:	5f504143 	svcpl	0x00504143
    15f8:	49474552 	stmdbmi	r7, {r1, r4, r6, r8, sl, lr}^
    15fc:	53004e4f 	movwpl	r4, #3663	; 0xe4f
    1600:	6f767265 	svcvs	0x00767265
    1604:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1608:	56770074 	undefined
    160c:	61746c6f 	cmnvs	r4, pc, ror #24
    1610:	66006567 	strvs	r6, [r0], -r7, ror #10
    1614:	6f6c6c41 	svcvs	0x006c6c41
    1618:	65730077 	ldrbvs	r0, [r3, #-119]!
    161c:	50707574 	rsbspl	r7, r0, r4, ror r5
    1620:	6e656f68 	cdpvs	15, 6, cr6, cr5, cr8, {3}
    1624:	4c007869 	stcmi	8, cr7, [r0], {105}
    1628:	694c6765 	stmdbvs	ip, {r0, r2, r5, r6, r8, r9, sl, sp, lr}^
    162c:	65487466 	strbvs	r7, [r8, #-1126]
    1630:	74686769 	strbtvc	r6, [r8], #-1897
    1634:	69614700 	stmdbvs	r1!, {r8, r9, sl, lr}^
    1638:	71655374 	smcvc	21812
    163c:	4c4c5300 	mcrrmi	3, 0, r5, ip, cr0
    1640:	49006765 	stmdbmi	r0, {r0, r2, r5, r6, r8, r9, sl, sp, lr}
	byte LegIndex;

	// First call off to the init...
	BeginServoUpdate();    // Start the update

	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    1644:	5f54534e 	svcpl	0x0054534e
				cTibiaInv[LegIndex] ?
						-TibiaAngle1[LegIndex] : TibiaAngle1[LegIndex]);

	}

}
    1648:	434e5953 	movtmi	r5, #59731	; 0xe953
    164c:	4952575f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    1650:	43004554 	movwmi	r4, #1364	; 0x554
    1654:	616d6d6f 	cmnvs	sp, pc, ror #26
    1658:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
    165c:	75706e49 	ldrbvc	r6, [r0, #-3657]!
    1660:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
#else
word g_wLastVoltage = 0xffff;    // save the last voltage we retrieved...
byte g_bLegVoltage = 0;		// what leg did we last check?
unsigned long g_ulTimeLastBatteryVoltage;
#define VOLTAGE_REPEAT_MAX  3
word GetBatteryVoltage(void) {
    1664:	6c6f7274 	sfmvs	f7, 2, [pc], #-464
	if (interpolating && (g_wLastVoltage != 0xffff)
    1668:	5f72656c 	svcpl	0x0072656c
    166c:	746e6f43 	strbtvc	r6, [lr], #-3907
    1670:	496c6f72 	stmdbmi	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    1674:	7475706e 	ldrbtvc	r7, [r5], #-110
    1678:	736f4300 	cmnvc	pc, #0	; 0x0
    167c:	46003447 	strmi	r3, [r0], -r7, asr #8
    1680:	6563726f 	strbvs	r7, [r3, #-623]!
    1684:	74696147 	strbtvc	r6, [r9], #-327
			&& ((getMillis() - g_ulTimeLastBatteryVoltage)
					< VOLTAGE_MAX_TIME_BETWEEN_CALLS))
		return g_wLastVoltage;
    1688:	70657453 	rsbvc	r7, r5, r3, asr r4

	register u8 bLoopCnt = VOLTAGE_REPEAT_MAX;
	do {
		register word wVoltage = dxl_read_byte(1, AXM_PRESENT_VOLTAGE);
    168c:	00746e43 	rsbseq	r6, r4, r3, asr #28
    1690:	6a644166 	bvs	1911c30 <__Stack_Size+0x1911830>
    1694:	4c747375 	ldclmi	3, cr7, [r4], #-468
		if (wVoltage != 0xffff) {
			g_ulTimeLastBatteryVoltage = getMillis();
    1698:	6f506765 	svcvs	0x00506765
			g_wLastVoltage = wVoltage * 10;
    169c:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^

	register u8 bLoopCnt = VOLTAGE_REPEAT_MAX;
	do {
		register word wVoltage = dxl_read_byte(1, AXM_PRESENT_VOLTAGE);
		if (wVoltage != 0xffff) {
			g_ulTimeLastBatteryVoltage = getMillis();
    16a0:	00736e6f 	rsbseq	r6, r3, pc, ror #28
			g_wLastVoltage = wVoltage * 10;
    16a4:	6f6f6d53 	svcvs	0x006f6d53
		}
	} while (--bLoopCnt);

	return 0;

}
    16a8:	6f436874 	svcvs	0x00436874
    16ac:	6f72746e 	svcvs	0x0072746e
    16b0:	4157006c 	cmpmi	r7, ip, rrx
    16b4:	4f4d4b4c 	svcmi	0x004d4b4c
// ReadMsgs
//==============================================================================

/* process messages coming from Commander
 *  format = 0xFF RIGHT_H RIGHT_V LEFT_H LEFT_V BUTTONS EXT CHECKSUM */
int Commander_ReadMsgs() {
    16b8:	49004544 	stmdbmi	r0, {r2, r6, r8, sl, lr}
	 }
	 #endif
	 */
	//while (CheckZBNewArrive() > 0) {
	while (1) {
		if (zgb_rx_check_arduino() == 1) {
    16bc:	5f54534e 	svcpl	0x0054534e
    16c0:	4b4c5542 	blmi	1316bd0 <__Stack_Size+0x13167d0>

			leftV = (signed char) (zgb_rx_data_right_V_());
    16c4:	4145525f 	cmpmi	r5, pc, asr r2
    16c8:	546c0044 	strbtpl	r0, [ip], #-68
			leftH = (signed char) (zgb_rx_data_right_H_());
    16cc:	57656d69 	strbpl	r6, [r5, -r9, ror #26]!
    16d0:	45746961 	ldrbmi	r6, [r4, #-2401]!
			rightV = (signed char) (zgb_rx_data_left_V_());
    16d4:	4700646e 	strmi	r6, [r0, -lr, ror #8]
    16d8:	53746961 	cmnpl	r4, #1589248	; 0x184000
			rightH = (signed char) (zgb_rx_data_left_H_());
    16dc:	63656c65 	cmnvs	r5, #25856	; 0x6500
    16e0:	61420074 	cmpvs	r2, r4, ror r0
			buttons = zgb_rx_data_buttons();
    16e4:	67654c6c 	strbvs	r4, [r5, -ip, ror #24]!
    16e8:	6300724e 	movwvs	r7, #590	; 0x24e
			ext = zgb_rx_data_extra();
    16ec:	61786f43 	cmnvs	r8, r3, asr #30
    16f0:	3178614d 	cmncc	r8, sp, asr #2

	}

	return 0;

}
    16f4:	534e4900 	movtpl	r4, #59648	; 0xe900
    16f8:	59535f54 	ldmdbpl	r3, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    16fc:	4d455453 	cfstrdmi	mvd5, [r5, #-332]
    1700:	4145525f 	cmpmi	r5, pc, asr r2
    1704:	61470044 	cmpvs	r7, r4, asr #32
    1708:	654c7469 	strbvs	r7, [ip, #-1129]
    170c:	00724e67 	rsbseq	r4, r2, r7, ror #28
    1710:	45555254 	ldrbmi	r5, [r5, #-596]

//==============================================================================
// This is The main code to input function to read inputs from the Commander and then
//process any commands.
//==============================================================================
void CommanderInputController_ControlInput(void) {
    1714:	534e4900 	movtpl	r4, #59648	; 0xe900

	// See if we have a new command available...
	if (Commander_ReadMsgs() > 0) {
    1718:	44525f54 	ldrbmi	r5, [r2], #-3924
    171c:	4745525f 	smlsldmi	r5, r5, pc, r2
    1720:	00524854 	subseq	r4, r2, r4, asr r8
    1724:	65746e69 	ldrbvs	r6, [r4, #-3689]!
		// If we receive a valid message than turn robot on...
		boolean fAdjustLegPositions = false;
		short sLegInitXZAdjust = 0;
		short sLegInitAngleAdjust = 0;

		if (!g_InControlState.fRobotOn) {
    1728:	6c6f7072 	stclvs	0, cr7, [pc], #-456
    172c:	6e697461 	cdpvs	4, 6, cr7, cr9, cr1, {3}
			g_InControlState.fRobotOn = true;
    1730:	44690067 	strbtmi	r0, [r9], #-103
    1734:	61746c65 	cmnvs	r4, r5, ror #24
		}

		// [SWITCH MODES]

		// Cycle through modes...
		if ((buttons & BUT_LT) && !(buttonsPrev & BUT_LT)) {
    1738:	6c676e41 	stclvs	14, cr6, [r7], #-260
    173c:	5f670065 	svcpl	0x00670065
    1740:	6f685366 	svcvs	0x00685366
    1744:	62654477 	rsbvs	r4, r5, #1996488704	; 0x77000000
    1748:	72506775 	subsvc	r6, r0, #30670848	; 0x1d40000
    174c:	74706d6f 	ldrbtvc	r6, [r0], #-3439

			if (++ControlMode >= MODECNT) {
    1750:	534e4900 	movtpl	r4, #59648	; 0xe900
    1754:	59535f54 	ldmdbpl	r3, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    1758:	4d455453 	cfstrdmi	mvd5, [r5, #-332]
    175c:	4952575f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
				ControlMode = WALKMODE;    // cycled back around...
				Buzzed(50, 2000);
    1760:	43004554 	movwmi	r4, #1364	; 0x554
    1764:	616d6d6f 	cmnvs	sp, pc, ror #26
    1768:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
				Buzzed(50, 3000);
    176c:	6e727554 	mrcvs	5, 3, r7, cr2, cr4, {2}
    1770:	6f626f52 	svcvs	0x00626f52

			} else {
				Buzzed(50, 2000);
    1774:	66664f74 	uqsub16vs	r4, r6, r4
    1778:	4c536600 	mrrcmi	6, 0, r6, r3, cr0
    177c:	646c6f48 	strbtvs	r6, [ip], #-3912
			}
			if (ControlMode != SINGLELEGMODE)
    1780:	414b4900 	cmpmi	fp, r0, lsl #18
    1784:	69003431 	stmdbvs	r0, {r0, r4, r5, sl, ip, sp}
				g_InControlState.SelectedLeg = 255;
    1788:	74727173 	ldrbtvc	r7, [r2], #-371
    178c:	70003233 	andvc	r3, r0, r3, lsr r2
    1790:	5365736f 	cmnpl	r5, #-1140850687	; 0xbc000001

		}

		//[Common functions]
		//Switch Balance mode on/off
		if ((buttons & BUT_L4) && !(buttonsPrev & BUT_L4)) {
    1794:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1798:	63656843 	cmnvs	r5, #4390912	; 0x430000
    179c:	7265536b 	rsbvc	r5, r5, #-1409286143	; 0xac000001
    17a0:	6e416f76 	mcrvs	15, 2, r6, cr1, cr6, {3}
    17a4:	42656c67 	rsbmi	r6, r5, #26368	; 0x6700
    17a8:	646e756f 	strbtvs	r7, [lr], #-1391

			g_InControlState.BalanceMode = !g_InControlState.BalanceMode;
    17ac:	4b490073 	blmi	1241980 <__Stack_Size+0x1241580>
    17b0:	74656546 	strbtvc	r6, [r5], #-1350
    17b4:	58736f50 	ldmdapl	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    17b8:	4d77005a 	ldclmi	0, cr0, [r7, #-360]!
    17bc:	5465766f 	strbtpl	r7, [r5], #-1647
			if (g_InControlState.BalanceMode) {
    17c0:	00656d69 	rsbeq	r6, r5, r9, ror #26
				Buzzed(250, 1500);
    17c4:	76657250 	undefined
    17c8:	656c6553 	strbvs	r6, [ip, #-1363]!
			} else {
				Buzzed(100, 2000);
    17cc:	64657463 	strbtvs	r7, [r5], #-1123
    17d0:	0067654c 	rsbeq	r6, r7, ip, asr #10
				Buzzed(50, 4000);
    17d4:	62695463 	rsbvs	r5, r9, #1660944384	; 0x63000000
    17d8:	6e496169 	dvfvsez	f6, f1, #1.0
    17dc:	54770076 	ldrbtpl	r0, [r7], #-118
			}
		}

		//Stand up, sit down
		if ((buttons & BUT_L5) && !(buttonsPrev & BUT_L5)) {
    17e0:	65766172 	ldrbvs	r6, [r6, #-370]!
    17e4:	4b49006c 	blmi	124199c <__Stack_Size+0x124159c>
    17e8:	00343241 	eorseq	r3, r4, r1, asr #4
    17ec:	5f4d554e 	svcpl	0x004d554e
    17f0:	54494147 	strbpl	r4, [r9], #-327
    17f4:	50630053 	rsbpl	r0, r3, r3, asr r0
			if (g_BodyYOffset > 0)
    17f8:	61546e69 	cmpvs	r4, r9, ror #28
    17fc:	00656c62 	rsbeq	r6, r5, r2, ror #24
				g_BodyYOffset = 0;
    1800:	4e415254 	mcrmi	2, 2, r5, cr1, cr4, {2}
    1804:	54414c53 	strbpl	r4, [r1], #-3155
			else
				g_BodyYOffset = 35;
			fAdjustLegPositions = true;
			g_fDynamicLegXZLength = false;
    1808:	444f4d45 	strbmi	r4, [pc], #3397	; 1810 <__Stack_Size+0x1410>
		//Stand up, sit down
		if ((buttons & BUT_L5) && !(buttonsPrev & BUT_L5)) {
			if (g_BodyYOffset > 0)
				g_BodyYOffset = 0;
			else
				g_BodyYOffset = 35;
    180c:	54630045 	strbtpl	r0, [r3], #-69
			fAdjustLegPositions = true;
			g_fDynamicLegXZLength = false;
    1810:	61696269 	cmnvs	r9, r9, ror #4
    1814:	3178614d 	cmncc	r8, sp, asr #2

		// We will use L6 with the Right joystick to control both body offset as well as Speed...
		// We move each pass through this by a percentage of how far we are from center in each direction
		// We get feedback with height by seeing the robot move up and down.  For Speed, I put in sounds
		// which give an idea, but only for those whoes robot has a speaker
		int lx = leftH;
    1818:	69547700 	ldmdbvs	r4, {r8, r9, sl, ip, sp, lr}^
		int ly = leftV;
		if (buttons & BUT_L6) {
    181c:	53616962 	cmnpl	r1, #1605632	; 0x188000

		// We will use L6 with the Right joystick to control both body offset as well as Speed...
		// We move each pass through this by a percentage of how far we are from center in each direction
		// We get feedback with height by seeing the robot move up and down.  For Speed, I put in sounds
		// which give an idea, but only for those whoes robot has a speaker
		int lx = leftH;
    1820:	67005644 	strvs	r5, [r0, -r4, asr #12]
    1824:	7944665f 	stmdbvc	r4, {r0, r1, r2, r3, r4, r6, r9, sl, sp, lr}^
		int ly = leftV;
    1828:	696d616e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, sp, lr}^
    182c:	67654c63 	strbvs	r4, [r5, -r3, ror #24]!
		if (buttons & BUT_L6) {
    1830:	654c5a58 	strbvs	r5, [ip, #-2648]
    1834:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
			// raise or lower the robot on the joystick up /down
			// Maybe should have Min/Max
			int delta = rightV / 25;
    1838:	69546300 	ldmdbvs	r4, {r8, r9, sp, lr}^
    183c:	4c616962 	stclmi	9, cr6, [r1], #-392
    1840:	74676e65 	strbtvc	r6, [r7], #-3685
    1844:	5f670068 	svcpl	0x00670068
    1848:	65486261 	strbvs	r6, [r8, #-609]
    184c:	78614d78 	stmdavc	r1!, {r3, r4, r5, r6, r8, sl, fp, lr}^
			if (delta) {
    1850:	79646f42 	stmdbvc	r4!, {r1, r6, r8, r9, sl, fp, sp, lr}^
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
    1854:	79430059 	stmdbvc	r3, {r0, r3, r4, r6}^
    1858:	54656c63 	strbtpl	r6, [r5], #-3171
    185c:	00656d69 	rsbeq	r6, r5, r9, ror #26
    1860:	474e4953 	smlsldmi	r4, lr, r3, r9
    1864:	454c454c 	strbmi	r4, [ip, #-1356]
    1868:	444f4d47 	strbmi	r4, [pc], #3399	; 1870 <__Stack_Size+0x1470>
    186c:	4c730045 	ldclmi	0, cr0, [r3], #-276
    1870:	6e496765 	cdpvs	7, 4, cr6, cr9, cr5, {3}
    1874:	5a587469 	bpl	161ea20 <__Stack_Size+0x161e620>
			sLegInitAngleAdjust = ly / 8;
			lx = 0;
			ly = 0;

			// Likewise for Speed control
			delta = rightH / 16;   //
    1878:	756a6441 	strbvc	r6, [sl, #-1089]!
    187c:	73007473 	movwvc	r7, #1139	; 0x473
    1880:	564c625f 	undefined
    1884:	70656542 	rsbvc	r6, r5, r2, asr #10
    1888:	00746e43 	rsbseq	r6, r4, r3, asr #28
			if ((delta < 0) && g_InControlState.SpeedControl) {
    188c:	77615f67 	strbvc	r5, [r1, -r7, ror #30]!
    1890:	6c616f47 	stclvs	15, cr6, [r1], #-284
    1894:	6f505841 	svcvs	0x00505841
				if ((word)(-delta) < g_InControlState.SpeedControl)
    1898:	46730073 	undefined
					g_InControlState.SpeedControl += delta;
    189c:	72756d65 	rsbsvc	r6, r5, #6464	; 0x1940
				else
					g_InControlState.SpeedControl = 0;
    18a0:	6c676e41 	stclvs	14, cr6, [r7], #-260
    18a4:	72003165 	andvc	r3, r0, #1073741849	; 0x40000019

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}
			if ((delta > 0) && (g_InControlState.SpeedControl < 2000)) {
    18a8:	69616d65 	stmdbvs	r1!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    18ac:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
    18b0:	646f4200 	strbtvs	r4, [pc], #512	; 18b8 <__Stack_Size+0x14b8>
				g_InControlState.SpeedControl += delta;
				if (g_InControlState.SpeedControl > 2000)
    18b4:	504b4679 	subpl	r4, fp, r9, ror r6
					g_InControlState.SpeedControl = 0;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}
			if ((delta > 0) && (g_InControlState.SpeedControl < 2000)) {
				g_InControlState.SpeedControl += delta;
    18b8:	0058736f 	subseq	r7, r8, pc, ror #6
				if (g_InControlState.SpeedControl > 2000)
					g_InControlState.SpeedControl = 2000;
    18bc:	79646f42 	stmdbvc	r4!, {r1, r6, r8, r9, sl, fp, sp, lr}^
    18c0:	6f504b46 	svcvs	0x00504b46

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
    18c4:	42005973 	andmi	r5, r0, #1884160	; 0x1cc000
    18c8:	4679646f 	ldrbtmi	r6, [r9], -pc, ror #8
    18cc:	736f504b 	cmnvc	pc, #75	; 0x4b
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
				fAdjustLegPositions = true;
			}

			// Also use right Horizontal to manually adjust the initial leg positions.
			sLegInitXZAdjust = lx / 10;        // play with this.
    18d0:	6942005a 	stmdbvs	r2, {r1, r3, r4, r6}^
    18d4:	696f6c6f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
    18d8:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    18dc:	6c6f7274 	sfmvs	f7, 2, [pc], #-464
			sLegInitAngleAdjust = ly / 8;
    18e0:	4572656c 	ldrbmi	r6, [r2, #-1388]!
    18e4:	65735f78 	ldrbvs	r5, [r3, #-3960]!
    18e8:	78654e74 	stmdavc	r5!, {r2, r4, r5, r6, r9, sl, fp, lr}^
    18ec:	736f5074 	cmnvc	pc, #116	; 0x74
					g_InControlState.SpeedControl = 2000;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}

			rightH = 0; // don't walk when adjusting the speed here...
    18f0:	49794265 	ldmdbmi	r9!, {r0, r2, r5, r6, r9, lr}^
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
				fAdjustLegPositions = true;
			}

			// Also use right Horizontal to manually adjust the initial leg positions.
			sLegInitXZAdjust = lx / 10;        // play with this.
    18f4:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
					g_InControlState.SpeedControl = 2000;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}

			rightH = 0; // don't walk when adjusting the speed here...
    18f8:	61726600 	cmnvs	r2, r0, lsl #12
		}

		//[Walk functions]
		if (ControlMode == WALKMODE) {
    18fc:	654c656d 	strbvs	r6, [ip, #-1389]
    1900:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1904:	61727400 	cmnvs	r2, r0, lsl #8

			//Switch gates
			if (((buttons & BUT_R1) && !(buttonsPrev & BUT_R1))
    1908:	7469736e 	strbtvc	r7, [r9], #-878
    190c:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    1910:	66696400 	strbtvs	r6, [r9], -r0, lsl #8
    1914:	57660066 	strbpl	r0, [r6, -r6, rrx]!
    1918:	00746961 	rsbseq	r6, r4, r1, ror #18
    191c:	6c6f6942 	stclvs	9, cr6, [pc], #-264
    1920:	4364696f 	cmnmi	r4, #1818624	; 0x1bc000
    1924:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    1928:	656c6c6f 	strbvs	r6, [ip, #-3183]!
    192c:	5f784572 	svcpl	0x00784572
    1930:	49746573 	ldmdbmi	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    1934:	69420064 	stmdbvs	r2, {r2, r5, r6}^
    1938:	696f6c6f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
    193c:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    1940:	6c6f7274 	sfmvs	f7, 2, [pc], #-464
    1944:	4572656c 	ldrbmi	r6, [r2, #-1388]!
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
    1948:	65675f78 	strbvs	r5, [r7, #-3960]!
					&& abs(g_InControlState.TravelLength.x) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
    194c:	72754374 	rsbsvc	r4, r5, #-805306367	; 0xd0000001
    1950:	65736f50 	ldrbvs	r6, [r3, #-3920]!
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
    1954:	6f694200 	svcvs	0x00694200
					&& abs(g_InControlState.TravelLength.x) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
    1958:	64696f6c 	strbtvs	r6, [r9], #-3948
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
					Buzzed(50, 2000);
    195c:	7465535f 	strbtvc	r5, [r5], #-863
    1960:	74007075 	strvc	r7, [r0], #-117
    1964:	00706d65 	rsbseq	r6, r0, r5, ror #26
				} else {
					Buzzed(50, 2000);
    1968:	6c6f6942 	stclvs	9, cr6, [pc], #-264
    196c:	4364696f 	cmnmi	r4, #1818624	; 0x1bc000
    1970:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
					Buzzed(50, 2250);
    1974:	656c6c6f 	strbvs	r6, [ip, #-3183]!
    1978:	5f784572 	svcpl	0x00784572
					g_InControlState.GaitType = 0;
    197c:	4e746567 	cdpmi	5, 7, cr6, cr4, cr7, {3}
    1980:	50747865 	rsbspl	r7, r4, r5, ror #16
}

void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {
    1984:	0065736f 	rsbeq	r7, r5, pc, ror #6
    1988:	6e617274 	mcrvs	2, 3, r7, cr1, cr4, {3}
    198c:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^

		g_InControlState.gaitCur = APG[g_InControlState.GaitType];
    1990:	745f6e6f 	ldrbvc	r6, [pc], #3695	; 1998 <__Stack_Size+0x1598>
    1994:	65707300 	ldrbvs	r7, [r0, #-768]!
    1998:	005f6465 	subseq	r6, pc, r5, ror #8
    199c:	6c6f6942 	stclvs	9, cr6, [pc], #-264
    19a0:	4364696f 	cmnmi	r4, #1818624	; 0x1bc000
				}
				GaitSelect();
			}

			//Double leg lift height
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    19a4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    19a8:	656c6c6f 	strbvs	r6, [ip, #-3183]!
    19ac:	5f784572 	svcpl	0x00784572
    19b0:	74697277 	strbtvc	r7, [r9], #-631
    19b4:	736f5065 	cmnvc	pc, #101	; 0x65
				Buzzed(50, 2000);
    19b8:	50410065 	subpl	r0, r1, r5, rrx
    19bc:	72732f50 	rsbsvc	r2, r3, #320	; 0x140
				HeightSpeedMode = (HeightSpeedMode + 1) & 0x3; // wrap around mode
    19c0:	69422f63 	stmdbvs	r2, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    19c4:	696f6c6f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
    19c8:	2e784564 	cdpcs	5, 7, cr4, cr8, cr4, {3}
    19cc:	69420063 	stmdbvs	r2, {r0, r1, r5, r6}^
				DoubleTravelOn = HeightSpeedMode & 0x1;
    19d0:	696f6c6f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
    19d4:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
				if (HeightSpeedMode & 0x2)
    19d8:	6c6f7274 	sfmvs	f7, 2, [pc], #-464
    19dc:	4572656c 	ldrbmi	r6, [r2, #-1388]!
					g_InControlState.LegLiftHeight = 80;
    19e0:	6f6c5f78 	svcvs	0x006c5f78
    19e4:	6f506461 	svcvs	0x00506461
				else
					g_InControlState.LegLiftHeight = 50;
			}

			// Switch between Walk method 1 && Walk method 2
			if ((buttons & BUT_R2) && !(buttonsPrev & BUT_R2)) {
    19e8:	42006573 	andmi	r6, r0, #482344960	; 0x1cc00000
    19ec:	6f6c6f69 	svcvs	0x006c6f69
    19f0:	6f436469 	svcvs	0x00436469
    19f4:	6f72746e 	svcvs	0x0072746e
    19f8:	72656c6c 	rsbvc	r6, r5, #27648	; 0x6c00

				if ((++bJoystickWalkMode) > 1)
    19fc:	735f7845 	cmpvc	pc, #4521984	; 0x450000
    1a00:	654e7465 	strbvs	r7, [lr, #-1125]
    1a04:	6f507478 	svcvs	0x00507478

					bJoystickWalkMode = 0;
				Buzzed(50, 2000 + bJoystickWalkMode * 250);
    1a08:	73006573 	movwvc	r6, #1395	; 0x573
			// Switch between Walk method 1 && Walk method 2
			if ((buttons & BUT_R2) && !(buttonsPrev & BUT_R2)) {

				if ((++bJoystickWalkMode) > 1)

					bJoystickWalkMode = 0;
    1a0c:	65757165 	ldrbvs	r7, [r5, #-357]!
				Buzzed(50, 2000 + bJoystickWalkMode * 250);
    1a10:	0065636e 	rsbeq	r6, r5, lr, ror #6
    1a14:	6c6f6942 	stclvs	9, cr6, [pc], #-264
    1a18:	4364696f 	cmnmi	r4, #1818624	; 0x1bc000
    1a1c:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
			}

			//Walking
			switch (bJoystickWalkMode) {
    1a20:	656c6c6f 	strbvs	r6, [ip, #-3183]!
    1a24:	5f784572 	svcpl	0x00784572
    1a28:	64616572 	strbtvs	r6, [r1], #-1394
			case 0:
				g_InControlState.TravelLength.x = -lx;
    1a2c:	65736f50 	ldrbvs	r6, [r3, #-3920]!
    1a30:	78656e00 	stmdavc	r5!, {r9, sl, fp, sp, lr}^
    1a34:	736f7074 	cmnvc	pc, #116	; 0x74
				g_InControlState.TravelLength.z = -ly;
    1a38:	74005f65 	strvc	r5, [r0], #-3941
				g_InControlState.TravelLength.y = -(rightH) / 4; //Right Stick Left/Right
				break;
			case 1:
				g_InControlState.TravelLength.z = (rightV); //Right Stick Up/Down
    1a3c:	00656d69 	rsbeq	r6, r5, r9, ror #26
    1a40:	6c6f6942 	stclvs	9, cr6, [pc], #-264
    1a44:	4364696f 	cmnmi	r4, #1818624	; 0x1bc000
				g_InControlState.TravelLength.y = -(rightH) / 4; //Right Stick Left/Right
    1a48:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    1a4c:	656c6c6f 	strbvs	r6, [ip, #-3183]!
    1a50:	5f784572 	svcpl	0x00784572
    1a54:	49746567 	ldmdbmi	r4!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^
    1a58:	6e690064 	cdpvs	0, 6, cr0, cr9, cr4, {3}
    1a5c:	00786564 	rsbseq	r6, r8, r4, ror #10
				break;

			}

			if (!DoubleTravelOn) {  //(Double travel length)
    1a60:	6c6f6942 	stclvs	9, cr6, [pc], #-264
				g_InControlState.TravelLength.x =
    1a64:	4364696f 	cmnmi	r4, #1818624	; 0x1bc000
    1a68:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    1a6c:	656c6c6f 	strbvs	r6, [ip, #-3183]!
						g_InControlState.TravelLength.x / 2;
				g_InControlState.TravelLength.z =
    1a70:	5f784572 	svcpl	0x00784572
    1a74:	65746e69 	ldrbvs	r6, [r4, #-3689]!
    1a78:	6c6f7072 	stclvs	0, cr7, [pc], #-456
			}

		}

		//[Translate functions]
		g_BodyYShift = 0;
    1a7c:	53657461 	cmnpl	r5, #1627389952	; 0x61000000
    1a80:	70757465 	rsbsvc	r7, r5, r5, ror #8
		if (ControlMode == TRANSLATEMODE) {
    1a84:	6e757200 	cdpvs	2, 7, cr7, cr5, cr0, {0}
    1a88:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!

		      g_InControlState.BodyPos.x =  SmoothControl(((lx)*2/3), g_InControlState.BodyPos.x, SmDiv);
    1a8c:	00716553 	rsbseq	r6, r1, r3, asr r5
    1a90:	7478656e 	ldrbtvc	r6, [r8], #-1390
    1a94:	6d617266 	sfmvs	f7, 2, [r1, #-408]!
    1a98:	73005f65 	movwvc	r5, #3941	; 0xf65
    1a9c:	6f767265 	svcvs	0x00767265
    1aa0:	746e635f 	strbtvc	r6, [lr], #-863
    1aa4:	6f694200 	svcvs	0x00694200
    1aa8:	64696f6c 	strbtvs	r6, [r9], #-3948
		      g_InControlState.BodyPos.z =  SmoothControl(((ly)*2/3), g_InControlState.BodyPos.z, SmDiv);
    1aac:	746e6f43 	strbtvc	r6, [lr], #-3907
    1ab0:	6c6c6f72 	stclvs	15, cr6, [ip], #-456
    1ab4:	78457265 	stmdavc	r5, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1ab8:	6f694200 	svcvs	0x00694200
    1abc:	64696f6c 	strbtvs	r6, [r9], #-3948
		      g_InControlState.BodyRot1.y = SmoothControl(((rightH)*2), g_InControlState.BodyRot1.y, SmDiv);
    1ac0:	746e6f43 	strbtvc	r6, [lr], #-3907
		//[Translate functions]
		g_BodyYShift = 0;
		if (ControlMode == TRANSLATEMODE) {

		      g_InControlState.BodyPos.x =  SmoothControl(((lx)*2/3), g_InControlState.BodyPos.x, SmDiv);
		      g_InControlState.BodyPos.z =  SmoothControl(((ly)*2/3), g_InControlState.BodyPos.z, SmDiv);
    1ac4:	6c6c6f72 	stclvs	15, cr6, [ip], #-456
		      g_InControlState.BodyRot1.y = SmoothControl(((rightH)*2), g_InControlState.BodyRot1.y, SmDiv);
    1ac8:	78457265 	stmdavc	r5, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1acc:	746e695f 	strbtvc	r6, [lr], #-2399
    1ad0:	6f707265 	svcvs	0x00707265
    1ad4:	6574616c 	ldrbvs	r6, [r4, #-364]!


			//      g_InControlState.BodyPos.x = (lx)/2;
			//      g_InControlState.BodyPos.z = -(ly)/3;
			//      g_InControlState.BodyRot1.y = (rightH)*2;
			g_BodyYShift = (-(rightV) / 2);
    1ad8:	70657453 	rsbvc	r7, r5, r3, asr r4
    1adc:	6d6f6300 	stclvs	3, cr6, [pc]
    1ae0:	74656c70 	strbtvc	r6, [r5], #-3184
    1ae4:	72660065 	rsbvc	r0, r6, #101	; 0x65
    1ae8:	73656d61 	cmnvc	r5, #6208	; 0x1840
    1aec:	69725000 	ldmdbvs	r2!, {ip, lr}^
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
    1af0:	3175746e 	cmncc	r5, lr, ror #8
			g_InControlState.BodyRot1.x = (ly);
			g_InControlState.BodyRot1.y = (rightH) * 2;
    1af4:	77006836 	smladxvc	r0, r6, r8, r6
    1af8:	61746144 	cmnvs	r4, r4, asr #2
			g_InControlState.BodyRot1.z = (lx);
			g_BodyYShift = (-(rightV) / 2);
    1afc:	44785400 	ldrbtmi	r5, [r8], #-1024
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
			g_InControlState.BodyRot1.x = (ly);
			g_InControlState.BodyRot1.y = (rightH) * 2;
    1b00:	6365445f 	cmnvs	r5, #1593835520	; 0x5f000000
			g_BodyYShift = (-(rightV) / 2);
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
			g_InControlState.BodyRot1.x = (ly);
    1b04:	3233535f 	eorscc	r5, r3, #2080374785	; 0x7c000001
			g_InControlState.BodyRot1.y = (rightH) * 2;
			g_InControlState.BodyRot1.z = (lx);
			g_BodyYShift = (-(rightV) / 2);
    1b08:	74654700 	strbtvc	r4, [r5], #-1792
    1b0c:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
    1b10:	7000676e 	andvc	r6, r0, lr, ror #14
    1b14:	695f7563 	ldmdbvs	pc, {r0, r1, r5, r6, r8, sl, ip, sp, lr}^
    1b18:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
		}

		//[Single leg functions]
#ifdef OPT_SINGLELEG
		if (ControlMode == SINGLELEGMODE) {
    1b1c:	7a696c61 	bvc	1a5cca8 <__Stack_Size+0x1a5c8a8>

			//Switch leg for single leg control
			if ((buttons & BUT_R1) && !(buttonsPrev & BUT_R1)) {
    1b20:	52450065 	subpl	r0, r5, #101	; 0x65
    1b24:	54494252 	strbpl	r4, [r9], #-594
    1b28:	4548435f 	strbmi	r4, [r8, #-863]
    1b2c:	55534b43 	ldrbpl	r4, [r3, #-2883]
    1b30:	5245004d 	subpl	r0, r5, #77	; 0x4d
				Buzzed(50,2000);
    1b34:	54494252 	strbpl	r4, [r9], #-594
    1b38:	45564f5f 	ldrbmi	r4, [r6, #-3935]
    1b3c:	41454852 	cmpmi	r5, r2, asr r8
				if (g_InControlState.SelectedLeg < (CNT_LEGS-1)) {
    1b40:	74730054 	ldrbtvc	r0, [r3], #-84
    1b44:	65675f64 	strbvs	r5, [r7, #-3940]!
					g_InControlState.SelectedLeg = g_InControlState.SelectedLeg + 1;
				} else {
					g_InControlState.SelectedLeg = 0;
    1b48:	62007374 	andvs	r7, r0, #-805306367	; 0xd0000001
		if (ControlMode == SINGLELEGMODE) {

			//Switch leg for single leg control
			if ((buttons & BUT_R1) && !(buttonsPrev & BUT_R1)) {
				Buzzed(50,2000);
				if (g_InControlState.SelectedLeg < (CNT_LEGS-1)) {
    1b4c:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
					g_InControlState.SelectedLeg = g_InControlState.SelectedLeg + 1;
    1b50:	63700074 	cmnvs	r0, #116	; 0x74
			   g_InControlState.SLLeg.x= (signed char)((int)((int)lx+128)/2); //Left Stick Right/Left
      		   g_InControlState.SLLeg.y= (signed char)((int)((int)rightV+128)/10); //Right Stick Up/Down
		       g_InControlState.SLLeg.z = (signed char)((int)((int)ly+128)/2); //Left Stick Up/Down

#else
			g_InControlState.SLLeg.x = lx; //Left Stick Right/Left
    1b54:	65745f75 	ldrbvs	r5, [r4, #-3957]!
			g_InControlState.SLLeg.y = rightV / 3 - 20;//Right Stick Up/Down
    1b58:	6e696d72 	mcrvs	13, 3, r6, cr9, cr2, {3}
    1b5c:	00657461 	rsbeq	r7, r5, r1, ror #8
    1b60:	5f447854 	svcpl	0x00447854
    1b64:	5f636544 	svcpl	0x00636544
    1b68:	00323355 	eorseq	r3, r2, r5, asr r3
			g_InControlState.SLLeg.z = ly;//Left Stick Up/Down

#endif
			// Hold single leg in place
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    1b6c:	69725062 	ldmdbvs	r2!, {r1, r5, r6, ip, lr}^
    1b70:	6465746e 	strbtvs	r7, [r5], #-1134
    1b74:	69725000 	ldmdbvs	r2!, {ip, lr}^
      		   g_InControlState.SLLeg.y= (signed char)((int)((int)rightV+128)/10); //Right Stick Up/Down
		       g_InControlState.SLLeg.z = (signed char)((int)((int)ly+128)/2); //Left Stick Up/Down

#else
			g_InControlState.SLLeg.x = lx; //Left Stick Right/Left
			g_InControlState.SLLeg.y = rightV / 3 - 20;//Right Stick Up/Down
    1b78:	7245746e 	subvc	r7, r5, #1845493760	; 0x6e000000
			g_InControlState.SLLeg.z = ly;//Left Stick Up/Down

#endif
			// Hold single leg in place
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    1b7c:	43726f72 	cmnmi	r2, #456	; 0x1c8
    1b80:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1b84:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
				Buzzed(50,2000);
    1b88:	00726168 	rsbseq	r6, r2, r8, ror #2
    1b8c:	6d754e6c 	ldclvs	14, cr4, [r5, #-432]!
				g_InControlState.fSLHold = !g_InControlState.fSLHold;
    1b90:	44785400 	ldrbtmi	r5, [r8], #-1024
    1b94:	6365445f 	cmnvs	r5, #1593835520	; 0x5f000000
    1b98:	3631555f 	undefined
    1b9c:	52524500 	subspl	r4, r2, #0	; 0x0
			}
		}
#endif

		//Calculate walking time delay
		g_InControlState.InputTimeDelay = 128- max(max(abs(lx), abs(ly)), abs(rightH));
    1ba0:	5f544942 	svcpl	0x00544942
    1ba4:	4c474e41 	mcrrmi	14, 4, r4, r7, cr1
    1ba8:	52450045 	subpl	r0, r5, #69	; 0x45
    1bac:	54494252 	strbpl	r4, [r9], #-594
    1bb0:	534e495f 	movtpl	r4, #59743	; 0xe95f
    1bb4:	43555254 	cmpmi	r5, #1073741829	; 0x40000005
    1bb8:	4e4f4954 	mcrmi	9, 2, r4, cr15, cr4, {2}
    1bbc:	6d546c00 	ldclvs	12, cr6, [r4]
    1bc0:	74730070 	ldrbtvc	r0, [r3], #-112
    1bc4:	75705f64 	ldrbvc	r5, [r0, #-3940]!
    1bc8:	61686374 	smcvs	34356
    1bcc:	72500072 	subsvc	r0, r0, #114	; 0x72
    1bd0:	53746e69 	cmnpl	r4, #1680	; 0x690

		//Calculate g_InControlState.BodyPos.y
		g_InControlState.BodyPos.y = max(g_BodyYOffset + g_BodyYShift, 0);
    1bd4:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    1bd8:	72500067 	subsvc	r0, r0, #103	; 0x67
    1bdc:	73746e69 	cmnvc	r4, #1680	; 0x690
    1be0:	00643233 	rsbeq	r3, r4, r3, lsr r2
    1be4:	6e6f4c6c 	cdpvs	12, 6, cr4, cr15, cr12, {3}
    1be8:	78540067 	ldmdavc	r4, {r0, r1, r2, r5, r6}^

		if (sLegInitXZAdjust || sLegInitAngleAdjust) {
    1bec:	65445f44 	strbvs	r5, [r4, #-3908]
    1bf0:	31535f63 	cmpcc	r3, r3, ror #30
			// User asked for manual leg adjustment - only do when we have finished any previous adjustment

			if (!g_InControlState.ForceGaitStepCnt) {
    1bf4:	61620036 	cmnvs	r2, r6, lsr r0
				if (sLegInitXZAdjust)
    1bf8:	61726475 	cmnvs	r2, r5, ror r4
					g_fDynamicLegXZLength = true;
    1bfc:	45006574 	strmi	r6, [r0, #-1396]
    1c00:	49425252 	stmdbmi	r2, {r1, r4, r6, r9, ip, lr}^

				sLegInitXZAdjust += GetLegsXZLength(); // Add on current length to our adjustment...
    1c04:	4f565f54 	svcmi	0x00565f54
    1c08:	4741544c 	strbmi	r5, [r1, -ip, asr #8]
				// Handle maybe change angles...
				if (sLegInitAngleAdjust)
					RotateLegInitAngles(sLegInitAngleAdjust);

				// Give system time to process previous calls
				AdjustLegPositions(sLegInitXZAdjust);
    1c0c:	68430045 	stmdavs	r3, {r0, r2, r6}^
			}
		}

		if (fAdjustLegPositions && !g_fDynamicLegXZLength)
    1c10:	506b6365 	rsbpl	r6, fp, r5, ror #6
    1c14:	77654e43 	strbvc	r4, [r5, -r3, asr #28]!
    1c18:	69727241 	ldmdbvs	r2!, {r0, r6, r9, ip, sp, lr}^
			AdjustLegPositionsToBodyHeight(); // Put main workings into main program file
    1c1c:	50006576 	andpl	r6, r0, r6, ror r5
		// Save away the buttons state as to not process the same press twice.
		buttonsPrev = buttons;
    1c20:	746e6972 	strbtvc	r6, [lr], #-2418
    1c24:	72616843 	rsbvc	r6, r1, #4390912	; 0x430000
		extPrev = ext;
    1c28:	69447700 	stmdbvs	r4, {r8, r9, sl, ip, sp, lr}^
    1c2c:	00746967 	rsbseq	r6, r4, r7, ror #18
		g_ulLastMsgTime = getMillis();
    1c30:	6d754e77 	ldclvs	14, cr4, [r5, #-476]!
    1c34:	69725000 	ldmdbvs	r2!, {ip, lr}^
	} else {
		// We did not receive a valid packet.  check for a timeout to see if we should turn robot off...
		if (g_InControlState.fRobotOn) {
    1c38:	6f43746e 	svcvs	0x0043746e
			if ((getMillis() - g_ulLastMsgTime) > ARBOTIX_TO)
    1c3c:	74536d6d 	ldrbvc	r6, [r3], #-3437
    1c40:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1c44:	754e6c00 	strbvc	r6, [lr, #-3072]
    1c48:	7300536d 	movwvc	r5, #877	; 0x36d
    1c4c:	705f6474 	subsvc	r6, pc, r4, ror r4
				CommanderTurnRobotOff();
    1c50:	00737475 	rsbseq	r7, r3, r5, ror r4
		}
	}

}
    1c54:	5f447854 	svcpl	0x00447854
    1c58:	5f636544 	svcpl	0x00636544
    1c5c:	62003853 	andvs	r3, r0, #5439488	; 0x530000
    1c60:	706d6554 	rsbvc	r6, sp, r4, asr r5
    1c64:	754e6200 	strbvc	r6, [lr, #-512]
    1c68:	7473006d 	ldrbtvc	r0, [r3], #-109
    1c6c:	65675f64 	strbvs	r5, [r7, #-3940]!
    1c70:	61686374 	smcvs	34356
    1c74:	446c0072 	strbtmi	r0, [ip], #-114
    1c78:	74696769 	strbtvc	r6, [r9], #-1897
    1c7c:	69725000 	ldmdbvs	r2!, {ip, lr}^
    1c80:	3375746e 	cmncc	r5, #1845493760	; 0x6e000000
    1c84:	50006432 	andpl	r6, r0, r2, lsr r4
    1c88:	746e6972 	strbtvc	r6, [lr], #-2418
    1c8c:	00683875 	rsbeq	r3, r8, r5, ror r8
    1c90:	2f505041 	svccs	0x00505041
    1c94:	2f637273 	svccs	0x00637273
    1c98:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    1c9c:	632e6c61 	teqvs	lr, #24832	; 0x6100
    1ca0:	44785400 	ldrbtmi	r5, [r8], #-1024
    1ca4:	6365445f 	cmnvs	r5, #1593835520	; 0x5f000000
    1ca8:	0038555f 	eorseq	r5, r8, pc, asr r5
    1cac:	42447852 	submi	r7, r4, #5373952	; 0x520000

extern void setupPhoenix(void);
extern void readSensors(void);


int Big_main(void) {
    1cb0:	5f657479 	svcpl	0x00657479

	// Must include this line in all programs using "cm530.h/.c"
	SysInit();
    1cb4:	62004350 	andvs	r4, r0, #1073741825	; 0x40000001
	setupPhoenix();
    1cb8:	756e694d 	strbvc	r6, [lr, #-2381]!
			TotalYBal1 = 0;
			TotalZBal1 = 0;

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1cbc:	54770073 	ldrbtpl	r0, [r7], #-115

	while (1){
		while (1) {
			//Start time
			unsigned long lTimeWaitEnd;
			lTimerStart = getMillis();
    1cc0:	4500706d 	strmi	r7, [r0, #-109]
    1cc4:	49425252 	stmdbmi	r2, {r1, r4, r6, r9, ip, lr}^
    1cc8:	41525f54 	cmpmi	r2, r4, asr pc
#ifdef MILLIS
			PrintString("Barebones lTimerStart ");
			Printu32d(lTimerStart);
			PrintString("\n");
#endif
			DoBackgroundProcess();
    1ccc:	0045474e 	subeq	r4, r5, lr, asr #14
			//Read input
			CheckVoltage();        // check our voltages...
    1cd0:	706d5462 	rsbvc	r5, sp, r2, ror #8
			if (!g_fLowVoltageShutdown) {
    1cd4:	79426200 	stmdbvc	r2, {r9, sp, lr}^
    1cd8:	45006574 	strmi	r6, [r0, #-1396]
				CommanderInputController_ControlInput();
    1cdc:	49425252 	stmdbmi	r2, {r1, r4, r6, r9, ip, lr}^
			}
			WriteOutputs();        // Write Outputs
			//Single leg control
			SingleLegControl();
    1ce0:	564f5f54 	undefined
			DoBackgroundProcess();
    1ce4:	4f4c5245 	svcmi	0x004c5245

			//Gait
			GaitSeq();
    1ce8:	64004441 	strvs	r4, [r0], #-1089

			DoBackgroundProcess();
    1cec:	735f6c78 	cmpvc	pc, #30720	; 0x7800

			//Balance calculations
			TotalTransX = 0;     //reset values used for calculation of balance
    1cf0:	745f7465 	ldrbvc	r7, [pc], #1125	; 1cf8 <__Stack_Size+0x18f8>
    1cf4:	63617078 	cmnvs	r1, #120	; 0x78
			TotalTransZ = 0;
    1cf8:	5f74656b 	svcpl	0x0074656b
			TotalTransY = 0;
    1cfc:	61726170 	cmnvs	r2, r0, ror r1
    1d00:	6574656d 	ldrbvs	r6, [r4, #-1389]!
			TotalXBal1 = 0;
    1d04:	58440072 	stmdapl	r4, {r1, r4, r5, r6}^
			TotalYBal1 = 0;
    1d08:	4b505f4c 	blmi	1419a40 <__Stack_Size+0x1419640>
    1d0c:	454c5f54 	strbmi	r5, [ip, #-3924]
			TotalZBal1 = 0;
    1d10:	7864004e 	stmdavc	r4!, {r1, r2, r3, r6}^

			if (g_InControlState.BalanceMode) {
    1d14:	65725f6c 	ldrbvs	r5, [r2, #-3948]!
    1d18:	775f6461 	ldrbvc	r6, [pc, -r1, ror #8]
    1d1c:	0064726f 	rsbeq	r7, r4, pc, ror #4

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1d20:	6e496267 	cdpvs	2, 4, cr6, cr9, cr7, {3}

					DoBackgroundProcess();
					BalCalcOneLeg(-LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d24:	75727473 	ldrbvc	r7, [r2, #-1139]!
    1d28:	6f697463 	svcvs	0x00697463
    1d2c:	6361506e 	cmnvs	r1, #110	; 0x6e

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs

					DoBackgroundProcess();
    1d30:	0074656b 	rsbseq	r6, r4, fp, ror #10
					BalCalcOneLeg(-LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d34:	5f6c7864 	svcpl	0x006c7864
    1d38:	705f7874 	subsvc	r7, pc, r4, ror r8
    1d3c:	656b6361 	strbvs	r6, [fp, #-865]!
    1d40:	78640074 	stmdavc	r4!, {r2, r4, r5, r6}^
    1d44:	65745f6c 	ldrbvs	r5, [r4, #-3948]!
    1d48:	6e696d72 	mcrvs	13, 3, r6, cr9, cr2, {3}
    1d4c:	00657461 	rsbeq	r7, r5, r1, ror #8
    1d50:	5f6c7864 	svcpl	0x006c7864
    1d54:	5f746567 	svcpl	0x00746567
    1d58:	61707872 	cmnvs	r0, r2, ror r8
    1d5c:	74656b63 	strbtvc	r6, [r5], #-2915
    1d60:	6e656c5f 	mcrvs	12, 3, r6, cr5, cr15, {2}
    1d64:	00687467 	rsbeq	r7, r8, r7, ror #8
    1d68:	5f4c5844 	svcpl	0x004c5844
    1d6c:	5f544b50 	svcpl	0x00544b50
			TotalYBal1 = 0;
			TotalZBal1 = 0;

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1d70:	54534e49 	ldrbpl	r4, [r3], #-3657
    1d74:	6c786400 	cfldrdvs	mvd6, [r8]
    1d78:	7465675f 	strbtvc	r6, [r5], #-1887
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
    1d7c:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
    1d80:	00746c75 	rsbseq	r6, r4, r5, ror ip
					DoBackgroundProcess();
					BalCalcOneLeg(LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d84:	5f6c7864 	svcpl	0x006c7864
    1d88:	5f746573 	svcpl	0x00746573
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
					DoBackgroundProcess();
    1d8c:	61707874 	cmnvs	r0, r4, ror r8
					BalCalcOneLeg(LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d90:	74656b63 	strbtvc	r6, [r5], #-2915
    1d94:	0064695f 	rsbeq	r6, r4, pc, asr r9
    1d98:	5f4c5844 	svcpl	0x004c5844
    1d9c:	5f544b50 	svcpl	0x00544b50
    1da0:	41524150 	cmpmi	r2, r0, asr r1
    1da4:	6c786400 	cfldrdvs	mvd6, [r8]
    1da8:	7465675f 	strbtvc	r6, [r5], #-1887
    1dac:	7078725f 	rsbsvc	r7, r8, pc, asr r2
    1db0:	656b6361 	strbvs	r6, [fp, #-865]!
    1db4:	72655f74 	rsbvc	r5, r5, #464	; 0x1d0
    1db8:	00726f72 	rsbseq	r6, r2, r2, ror pc
    1dbc:	62727265 	rsbsvs	r7, r2, #1342177286	; 0x50000006
    1dc0:	67007469 	strvs	r7, [r0, -r9, ror #8]
    1dc4:	47785262 	ldrbmi	r5, [r8, -r2, ror #4]!
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
    1dc8:	654c7465 	strbvs	r7, [ip, #-1125]
    1dcc:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1dd0:	4c584400 	cfldrdmi	mvd4, [r8], {0}
							LegPosZ[LegIndex] + GaitPosZ[LegIndex],
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}
				BalanceBody();
    1dd4:	544b505f 	strbpl	r5, [fp], #-95
			}

			//Reset IKsolution indicators
			IKSolution = 0;
    1dd8:	0044495f 	subeq	r4, r4, pc, asr r9
    1ddc:	6f436267 	svcvs	0x00436267
			IKSolutionWarning = 0;
			IKSolutionError = 0;

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
    1de0:	74536d6d 	ldrbvc	r6, [r3], #-3437
			}

			//Reset IKsolution indicators
			IKSolution = 0;
			IKSolutionWarning = 0;
			IKSolutionError = 0;
    1de4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1de8:	6c786400 	cfldrdvs	mvd6, [r8]

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
				DoBackgroundProcess();
    1dec:	6e69705f 	mcrvs	0, 3, r7, cr9, cr15, {2}
				BodyFK(
    1df0:	78640067 	stmdavc	r4!, {r0, r1, r2, r5, r6}^
    1df4:	65735f6c 	ldrbvs	r5, [r3, #-3948]!
    1df8:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1dfc:	6b636170 	blvs	18da3c4 <__Stack_Size+0x18d9fc4>
    1e00:	695f7465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1e04:	7274736e 	rsbsvc	r7, r4, #-1207959551	; 0xb8000001
    1e08:	69746375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    1e0c:	67006e6f 	strvs	r6, [r0, -pc, ror #28]
    1e10:	50785262 	rsbspl	r5, r8, r2, ror #4
    1e14:	656b6361 	strbvs	r6, [fp, #-865]!
    1e18:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    1e1c:	00687467 	rsbeq	r7, r8, r7, ror #8
    1e20:	5f6c7864 	svcpl	0x006c7864
    1e24:	5f746573 	svcpl	0x00746573
    1e28:	61707874 	cmnvs	r0, r4, ror r8
    1e2c:	74656b63 	strbtvc	r6, [r5], #-2915
    1e30:	6e656c5f 	mcrvs	12, 3, r6, cr5, cr15, {2}
    1e34:	00687467 	rsbeq	r7, r8, r7, ror #8
    1e38:	6c616552 	cfstr64vs	mvdx6, [r1], #-328
    1e3c:	754e7854 	strbvc	r7, [lr, #-2132]
    1e40:	7479426d 	ldrbtvc	r4, [r9], #-621
    1e44:	526e0065 	rsbpl	r0, lr, #101	; 0x65
    1e48:	00646165 	rsbeq	r6, r4, r5, ror #2
    1e4c:	5f6c7864 	svcpl	0x006c7864
						+ GaitPosZ[LegIndex] - TotalTransZ,
						LegPosY[LegIndex] + g_InControlState.BodyPos.y
						+ GaitPosY[LegIndex] - TotalTransY,
						GaitRotY[LegIndex], LegIndex);

				LegIK(
    1e50:	5f746567 	svcpl	0x00746567
    1e54:	61707872 	cmnvs	r0, r2, ror r8
    1e58:	74656b63 	strbtvc	r6, [r5], #-2915
    1e5c:	7261705f 	rsbvc	r7, r1, #95	; 0x5f
    1e60:	74656d61 	strbtvc	r6, [r5], #-3425
    1e64:	64007265 	strvs	r7, [r0], #-613
    1e68:	6d5f6c78 	ldclvs	12, cr6, [pc, #-480]
    1e6c:	77656b61 	strbvc	r6, [r5, -r1, ror #22]!
    1e70:	0064726f 	rsbeq	r7, r4, pc, ror #4
    1e74:	5f6c7864 	svcpl	0x006c7864
    1e78:	5f746567 	svcpl	0x00746567
    1e7c:	68676968 	stmdavs	r7!, {r3, r5, r6, r8, fp, sp, lr}^
    1e80:	65747962 	ldrbvs	r7, [r4, #-2402]!
    1e84:	6c786400 	cfldrdvs	mvd6, [r8]
    1e88:	5f78725f 	svcpl	0x0078725f
    1e8c:	6b636170 	blvs	18da454 <__Stack_Size+0x18da054>
    1e90:	64007465 	strvs	r7, [r0], #-1125
    1e94:	675f6c78 	undefined
    1e98:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}
    1e9c:	7962776f 	stmdbvc	r2!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    1ea0:	44006574 	strmi	r6, [r0], #-1396
    1ea4:	505f4c58 	subspl	r4, pc, r8, asr ip
    1ea8:	455f544b 	ldrbmi	r5, [pc, #-1099]	; 1a65 <__Stack_Size+0x1665>
    1eac:	64005252 	strvs	r5, [r0], #-594
    1eb0:	745f6c78 	ldrbvc	r6, [pc], #3192	; 1eb8 <__Stack_Size+0x1ab8>
    1eb4:	5f787278 	svcpl	0x00787278
    1eb8:	6b636170 	blvs	18da480 <__Stack_Size+0x18da080>
    1ebc:	41007465 	tstmi	r0, r5, ror #8
    1ec0:	732f5050 	teqvc	pc, #80	; 0x50
			IKSolutionWarning = 0;
			IKSolutionError = 0;

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
    1ec4:	642f6372 	strtvs	r6, [pc], #882	; 1ecc <__Stack_Size+0x1acc>
    1ec8:	6d616e79 	stclvs	14, cr6, [r1, #-484]!
    1ecc:	6c657869 	stclvs	8, cr7, [r5], #-420
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Do IK for all Left legs
			for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) {
    1ed0:	6700632e 	strvs	r6, [r0, -lr, lsr #6]
    1ed4:	61745362 	cmnvs	r4, r2, ror #6
				DoBackgroundProcess();
    1ed8:	50737574 	rsbspl	r7, r3, r4, ror r5
				BodyFK(
    1edc:	656b6361 	strbvs	r6, [fp, #-865]!
    1ee0:	78640074 	stmdavc	r4!, {r2, r4, r5, r6}^
    1ee4:	6e695f6c 	cdpvs	15, 6, cr5, cr9, cr12, {3}
    1ee8:	61697469 	cmnvs	r9, r9, ror #8
    1eec:	657a696c 	ldrbvs	r6, [sl, #-2412]!
    1ef0:	6c786400 	cfldrdvs	mvd6, [r8]
    1ef4:	656c635f 	strbvs	r6, [ip, #-863]!
    1ef8:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
    1efc:	70746174 	rsbsvc	r6, r4, r4, ror r1
    1f00:	6400746b 	strvs	r7, [r0], #-1131
    1f04:	775f6c78 	undefined
    1f08:	65746972 	ldrbvs	r6, [r4, #-2418]!
    1f0c:	7479625f 	ldrbtvc	r6, [r9], #-607
    1f10:	78640065 	stmdavc	r4!, {r0, r2, r5, r6}^
    1f14:	61635f6c 	cmnvs	r3, ip, ror #30
    1f18:	72757470 	rsbsvc	r7, r5, #1879048192	; 0x70000000
    1f1c:	78640065 	stmdavc	r4!, {r0, r2, r5, r6}^
    1f20:	72775f6c 	rsbsvc	r5, r7, #432	; 0x1b0
    1f24:	5f657469 	svcpl	0x00657469
    1f28:	64726f77 	ldrbtvs	r6, [r2], #-3959
    1f2c:	42696700 	rsbmi	r6, r9, #0	; 0x0
    1f30:	73557375 	cmpvc	r5, #-738197503	; 0xd4000001
    1f34:	00676e69 	rsbeq	r6, r7, r9, ror #28
    1f38:	5f6c7864 	svcpl	0x006c7864
    1f3c:	64616572 	strbtvs	r6, [r1], #-1394
    1f40:	7479625f 	ldrbtvc	r6, [r9], #-607
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z
						+ GaitPosZ[LegIndex] - TotalTransZ,
						LegPosY[LegIndex] + g_InControlState.BodyPos.y
						+ GaitPosY[LegIndex] - TotalTransY,
						GaitRotY[LegIndex], LegIndex);
				LegIK(
    1f44:	677a0065 	ldrbvs	r0, [sl, -r5, rrx]!
    1f48:	78725f62 	ldmdavc	r2!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    1f4c:	6568635f 	strbvs	r6, [r8, #-863]!
    1f50:	41006b63 	tstmi	r0, r3, ror #22
    1f54:	732f5050 	teqvc	pc, #80	; 0x50
    1f58:	7a2f6372 	bvc	bdad28 <__Stack_Size+0xbda928>
    1f5c:	65626769 	strbvs	r6, [r2, #-1897]!
    1f60:	00632e65 	rsbeq	r2, r3, r5, ror #28
    1f64:	5f62677a 	svcpl	0x0062677a
    1f68:	74696e69 	strbtvc	r6, [r9], #-3689
    1f6c:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    1f70:	7a00657a 	bvc	1b560 <__Stack_Size+0x1b160>
    1f74:	725f6267 	subsvc	r6, pc, #1879048198	; 0x70000006
    1f78:	61645f78 	smcvs	17912
    1f7c:	725f6174 	subsvc	r6, pc, #29	; 0x1d
    1f80:	74686769 	strbtvc	r6, [r8], #-1897
    1f84:	6700485f 	smlsdvs	r0, pc, r8, r4
    1f88:	76635262 	strbtvc	r5, [r3], -r2, ror #4
    1f8c:	6b636150 	blvs	18da4d4 <__Stack_Size+0x18da0d4>
    1f90:	52007465 	andpl	r7, r0, #1694498816	; 0x65000000
    1f94:	754e7663 	strbvc	r7, [lr, #-1635]
    1f98:	677a006d 	ldrbvs	r0, [sl, -sp, rrx]!
    1f9c:	78725f62 	ldmdavc	r2!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    1fa0:	7461645f 	strbtvc	r6, [r1], #-1119
    1fa4:	69725f61 	ldmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    1fa8:	5f746867 	svcpl	0x00746867
    1fac:	6e530056 	mrcvs	0, 2, r0, cr3, cr6, {2}
    1fb0:	63615064 	cmnvs	r1, #100	; 0x64
    1fb4:	0074656b 	rsbseq	r6, r4, fp, ror #10
    1fb8:	5f62677a 	svcpl	0x0062677a
    1fbc:	645f7872 	ldrbvs	r7, [pc], #2162	; 1fc4 <__Stack_Size+0x1bc4>
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Do IK for all Left legs
			for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) {
    1fc0:	5f617461 	svcpl	0x00617461
    1fc4:	72747865 	rsbsvc	r7, r4, #6619136	; 0x650000
    1fc8:	677a0061 	ldrbvs	r0, [sl, -r1, rrx]!
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Check mechanical limits
			CheckAngles();
    1fcc:	78725f62 	ldmdavc	r2!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^

			//Drive Servos
			if (g_InControlState.fRobotOn) {
    1fd0:	7461645f 	strbtvc	r6, [r1], #-1119
    1fd4:	656c5f61 	strbvs	r5, [ip, #-3937]!
    1fd8:	485f7466 	ldmdami	pc, {r1, r2, r5, r6, sl, ip, sp, lr}^
				if (g_InControlState.fRobotOn && !g_InControlState.fPrev_RobotOn) {
					// MSound(3, 60, 2000, 80, 2250, 100, 2500);
					Buzzed(30, 2000);
    1fdc:	7767005f 	undefined
    1fe0:	44766352 	ldrbtmi	r6, [r6], #-850
    1fe4:	00617461 	rsbeq	r7, r1, r1, ror #8
					Buzzed(80, 2250);
    1fe8:	74747562 	ldrbtvc	r7, [r4], #-1378
    1fec:	5f736e6f 	svcpl	0x00736e6f
					Buzzed(100, 2500);
    1ff0:	62677a00 	rsbvs	r7, r7, #0	; 0x0
    1ff4:	5f78725f 	svcpl	0x0078725f
    1ff8:	61746164 	cmnvs	r4, r4, ror #2

				}

				//Calculate Servo Move time
				if ((abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
    1ffc:	62677a00 	rsbvs	r7, r7, #0	; 0x0
    2000:	5f78725f 	svcpl	0x0078725f
    2004:	61746164 	cmnvs	r4, r4, ror #2
    2008:	6769725f 	undefined
    200c:	485f7468 	ldmdami	pc, {r3, r5, r6, sl, ip, sp, lr}^
    2010:	677a005f 	undefined
    2014:	78725f62 	ldmdavc	r2!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    2018:	6568635f 	strbvs	r6, [r8, #-863]!
    201c:	615f6b63 	cmpvs	pc, r3, ror #22
    2020:	69756472 	ldmdbvs	r5!, {r1, r4, r5, r6, sl, sp, lr}^
    2024:	67006f6e 	strvs	r6, [r0, -lr, ror #30]
						|| (abs(g_InControlState.TravelLength.z) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.y*2) > cTravelDeadZone)) {
					ServoMoveTime = g_InControlState.gaitCur.NomGaitSpeed
    2028:	76635262 	strbtvc	r5, [r3], -r2, ror #4
    202c:	6b636150 	blvs	18da574 <__Stack_Size+0x18da174>
    2030:	754e7465 	strbvc	r7, [lr, #-1125]
    2034:	677a006d 	ldrbvs	r0, [sl, -sp, rrx]!
    2038:	78745f62 	ldmdavc	r4!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
							+ (g_InControlState.InputTimeDelay * 2)
							+ g_InControlState.SpeedControl;

					//Add aditional delay when Balance mode is on
					if (g_InControlState.BalanceMode)
    203c:	7461645f 	strbtvc	r6, [r1], #-1119

				//Calculate Servo Move time
				if ((abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.z) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.y*2) > cTravelDeadZone)) {
					ServoMoveTime = g_InControlState.gaitCur.NomGaitSpeed
    2040:	677a0061 	ldrbvs	r0, [sl, -r1, rrx]!
							+ (g_InControlState.InputTimeDelay * 2)
							+ g_InControlState.SpeedControl;

					//Add aditional delay when Balance mode is on
					if (g_InControlState.BalanceMode)
						ServoMoveTime = ServoMoveTime + BALANCE_DELAY;
    2044:	65745f62 	ldrbvs	r5, [r4, #-3938]!
    2048:	6e696d72 	mcrvs	13, 3, r6, cr9, cr2, {3}
				} else
					//Movement speed excl. Walking
					ServoMoveTime = 200 + g_InControlState.SpeedControl;
    204c:	00657461 	rsbeq	r7, r5, r1, ror #8
    2050:	5f62677a 	svcpl	0x0062677a
    2054:	645f7872 	ldrbvs	r7, [pc], #2162	; 205c <__Stack_Size+0x1c5c>

				// note we broke up the servo driver into start/commit that way we can output all of the servo information
				// before we wait and only have the termination information to output after the wait.  That way we hopefully
				// be more accurate with our timings...
				DoBackgroundProcess();
    2058:	5f617461 	svcpl	0x00617461
				StartUpdateServos();
    205c:	7466656c 	strbtvc	r6, [r6], #-1388

				// See if we need to sync our processor with the servo driver while walking to ensure the prev is completed
				//before sending the next one

				// Finding any incident of GaitPos/Rot <>0:
				for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    2060:	005f565f 	subseq	r5, pc, pc, asr r6
					if ((GaitPosX[LegIndex] > cGPlimit)
    2064:	63656843 	cmnvs	r5, #4390912	; 0x430000
    2068:	4e425a6b 	fnmacsmi	s11, s4, s23
    206c:	72417765 	subvc	r7, r1, #26476544	; 0x1940000
    2070:	65766972 	ldrbvs	r6, [r6, #-2418]!
    2074:	62677a00 	rsbvs	r7, r7, #0	; 0x0
    2078:	5f78725f 	svcpl	0x0078725f
    207c:	61746164 	cmnvs	r4, r4, ror #2
    2080:	66656c5f 	undefined
    2084:	00485f74 	subeq	r5, r8, r4, ror pc
    2088:	5f62677a 	svcpl	0x0062677a
    208c:	645f7872 	ldrbvs	r7, [pc], #2162	; 2094 <__Stack_Size+0x1c94>
    2090:	5f617461 	svcpl	0x00617461
    2094:	74747562 	ldrbtvc	r7, [r4], #-1378
    2098:	00736e6f 	rsbseq	r6, r3, pc, ror #28
    209c:	5f62677a 	svcpl	0x0062677a
							|| (GaitPosZ[LegIndex] > cGPlimit)
							|| (GaitPosZ[LegIndex] < -cGPlimit)
							|| (GaitRotY[LegIndex] > cGPlimit)
							|| (GaitRotY[LegIndex] < -cGPlimit)) {

						bExtraCycle = g_InControlState.gaitCur.NrLiftedPos + 1;	//For making sure that we are using timed move until all legs are down
    20a0:	645f7872 	ldrbvs	r7, [pc], #2162	; 20a8 <__Stack_Size+0x1ca8>
    20a4:	5f617461 	svcpl	0x00617461
    20a8:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^

				// See if we need to sync our processor with the servo driver while walking to ensure the prev is completed
				//before sending the next one

				// Finding any incident of GaitPos/Rot <>0:
				for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    20ac:	5f565f74 	svcpl	0x00565f74
    20b0:	62677a00 	rsbvs	r7, r7, #0	; 0x0

						bExtraCycle = g_InControlState.gaitCur.NrLiftedPos + 1;	//For making sure that we are using timed move until all legs are down
						break;
					}
				}
				if (bExtraCycle > 0) {
    20b4:	5f78725f 	svcpl	0x0078725f
					bExtraCycle--;
    20b8:	61746164 	cmnvs	r4, r4, ror #2
    20bc:	66656c5f 	undefined
					fWalking = !(bExtraCycle == 0);
    20c0:	00565f74 	subseq	r5, r6, r4, ror pc
    20c4:	63526267 	cmpvs	r2, #1879048198	; 0x70000006

					//Get endtime and calculate wait time
					lTimeWaitEnd = lTimerStart + PrevServoMoveTime;
    20c8:	616c4676 	smcvs	50278
    20cc:	62670067 	rsbvs	r0, r7, #103	; 0x67
    20d0:	50766352 	rsbspl	r6, r6, r2, asr r3
					PrintString("\n");
#endif
					//DebugWrite(A1, HIGH);
					do {
						// Wait the appropriate time, call any background process while waiting...
						DoBackgroundProcess();
    20d4:	656b6361 	strbvs	r6, [fp, #-865]!
					} while (getMillis() < lTimeWaitEnd);
    20d8:	64724174 	ldrbtvs	r4, [r2], #-372
    20dc:	6f6e6975 	svcvs	0x006e6975
					PrintString("\n");
#endif

				}
				// Only do commit if we are actually doing something...
				CommitServoDriver(ServoMoveTime);
    20e0:	616c6600 	cmnvs	ip, r0, lsl #12
    20e4:	65725f67 	ldrbvs	r5, [r2, #-3943]!
    20e8:	76696563 	strbtvc	r6, [r9], -r3, ror #10
			} else {
				//Turn the bot off - May need to add ajust here...
				if (g_InControlState.fPrev_RobotOn || (AllDown = 0)) {
    20ec:	65725f65 	ldrbvs	r5, [r2, #-3941]!
					PrintString("Barebones lTimeWaitEnd-Millis  ");
					Printu32d(getMillis);
					PrintString("\n");
#endif
				} else {
					FreeServos();
    20f0:	00796461 	rsbseq	r6, r9, r1, ror #8
    20f4:	32315841 	eorscc	r5, r1, #4259840	; 0x410000
				// Only do commit if we are actually doing something...
				CommitServoDriver(ServoMoveTime);
			} else {
				//Turn the bot off - May need to add ajust here...
				if (g_InControlState.fPrev_RobotOn || (AllDown = 0)) {
					ServoMoveTime = 600;
    20f8:	5344495f 	movtpl	r4, #18783	; 0x495f
    20fc:	63646100 	cmnvs	r4, #0	; 0x0
					StartUpdateServos();
    2100:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
					CommitServoDriver(ServoMoveTime);
    2104:	5f726f73 	svcpl	0x00726f73
					//MSound(3, 100, 2500, 80, 2250, 60, 2000);
					Buzzed(100, 2500);
    2108:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    210c:	7500656c 	strvc	r6, [r0, #-1388]
    2110:	31746e69 	cmncc	r4, r9, ror #28
					Buzzed(80, 2250);
    2114:	69750036 	ldmdbvs	r5!, {r1, r2, r4, r5}^
    2118:	5f38746e 	svcpl	0x0038746e
					Buzzed(60, 2000);
    211c:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
    2120:	0038746e 	eorseq	r7, r8, lr, ror #8
    2124:	7a7a7562 	bvc	1e9f6b4 <__Stack_Size+0x1e9f2b4>

					//lTimeWaitEnd = getMillis() + 600; // setup to process background stuff while we wait...
					lTimeWaitEnd = getMillis() + 600; // setup to process background stuff while we wait...
    2128:	69467265 	stmdbvs	r6, {r0, r2, r5, r6, r9, ip, sp, lr}^
    212c:	6873696e 	ldmdavs	r3!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
					Printu32d(lTimeWaitEnd);
					PrintString("\n");
#endif
					do {
						// Wait the appropriate time, call any background process while waiting...
						DoBackgroundProcess();
    2130:	70006465 	andvc	r6, r0, r5, ror #8
					} while (getMillis() < lTimeWaitEnd);
    2134:	735f6469 	cmpvc	pc, #1761607680	; 0x69000000
    2138:	6f707465 	svcvs	0x00707465
				} else {
					FreeServos();
				}

				// Allow the Servo driver to do stuff durint our idle time
				IdleTime();
    213c:	00746e69 	rsbseq	r6, r4, r9, ror #28
				mDelay(20); // give a pause between times we call if nothing is happening
    2140:	32315841 	eorscc	r5, r1, #4259840	; 0x410000
			}
			PrevServoMoveTime = ServoMoveTime;
    2144:	76726553 	undefined
    2148:	6c00736f 	stcvs	3, cr7, [r0], {111}

			//Store previous g_InControlState.fRobotOn State
			if (g_InControlState.fRobotOn)
    214c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
    2150:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
				g_InControlState.fPrev_RobotOn = 1;
			else
				g_InControlState.fPrev_RobotOn = 0;
    2154:	746e6920 	strbtvc	r6, [lr], #-2336
    2158:	63646100 	cmnvs	r4, #0	; 0x0
    215c:	6363615f 	cmnvs	r3, #-1073741801	; 0xc0000017
    2160:	5f796c65 	svcpl	0x00796c65
    2164:	746e6563 	strbtvc	r6, [lr], #-1379
    2168:	41007265 	tstmi	r0, r5, ror #4
    216c:	732f5050 	teqvc	pc, #80	; 0x50
    2170:	672f6372 	undefined
    2174:	61626f6c 	cmnvs	r2, ip, ror #30
    2178:	7461646c 	strbtvc	r6, [r1], #-1132
    217c:	00632e61 	rsbeq	r2, r3, r1, ror #28
    2180:	5f636461 	svcpl	0x00636461
    2184:	736e6573 	cmnvc	lr, #482344960	; 0x1cc00000
    2188:	765f726f 	ldrbvc	r7, [pc], -pc, ror #4
    218c:	61006c61 	tstvs	r0, r1, ror #24
    2190:	625f6364 	subsvs	r6, pc, #-1879048191	; 0x90000001
    2194:	65747461 	ldrbvs	r7, [r4, #-1121]!
    2198:	765f7972 	undefined
    219c:	61006c61 	tstvs	r0, r1, ror #24
    21a0:	675f6364 	ldrbvs	r6, [pc, -r4, ror #6]
    21a4:	786f7279 	stmdavc	pc!, {r0, r3, r4, r5, r6, r9, ip, sp, lr}^
    21a8:	6e65635f 	mcrvs	3, 3, r6, cr5, cr15, {2}
    21ac:	00726574 	rsbseq	r6, r2, r4, ror r5
    21b0:	5f636461 	svcpl	0x00636461
    21b4:	72746c75 	rsbsvc	r6, r4, #29952	; 0x7500
    21b8:	6e6f7361 	cdpvs	3, 6, cr7, cr15, cr1, {3}
    21bc:	645f6369 	ldrbvs	r6, [pc], #873	; 21c4 <__Stack_Size+0x1dc4>
    21c0:	61747369 	cmnvs	r4, r9, ror #6
    21c4:	0065636e 	rsbeq	r6, r5, lr, ror #6
    21c8:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    21cc:	5f746e65 	svcpl	0x00746e65
    21d0:	70657473 	rsbvc	r7, r5, r3, ror r4
    21d4:	64697000 	strbtvs	r7, [r9]
    21d8:	74756f5f 	ldrbtvc	r6, [r5], #-3935
    21dc:	00747570 	rsbseq	r7, r4, r0, ror r5
    21e0:	5f77656e 	svcpl	0x0077656e
    21e4:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!
    21e8:	00646e61 	rsbeq	r6, r4, r1, ror #28
    21ec:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
    21f0:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
    21f4:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
    21f8:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    21fc:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
    2200:	7500746e 	strvc	r7, [r0, #-1134]
    2204:	31746e69 	cmncc	r4, r9, ror #28
    2208:	00745f36 	rsbseq	r5, r4, r6, lsr pc
    220c:	555c3a43 	ldrbpl	r3, [ip, #-2627]
    2210:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    2214:	736e695c 	cmnvc	lr, #1507328	; 0x170000
    2218:	6c6c6174 	stfvse	f6, [ip], #-464
    221c:	6f72705c 	svcvs	0x0072705c
    2220:	746b656a 	strbtvc	r6, [fp], #-1386
    2224:	6568545c 	strbvs	r5, [r8, #-1116]!
    2228:	5f736973 	svcpl	0x00736973
    222c:	6c6f6942 	stclvs	9, cr6, [pc], #-264
    2230:	5c64696f 	stclpl	9, cr6, [r4], #-444
    2234:	616d7568 	cmnvs	sp, r8, ror #10
    2238:	64696f6e 	strbtvs	r6, [r9], #-3950
    223c:	635f635f 	cmpvs	pc, #2080374785	; 0x7c000001
    2240:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    2244:	656c6c6f 	strbvs	r6, [ip, #-3183]!
    2248:	64610072 	strbtvs	r0, [r1], #-114
    224c:	63615f63 	cmnvs	r1, #396	; 0x18c
    2250:	786c6563 	stmdavc	ip!, {r0, r1, r5, r6, r8, sl, sp, lr}^
    2254:	63646100 	cmnvs	r4, #0	; 0x0
    2258:	6363615f 	cmnvs	r3, #-1073741801	; 0xc0000017
    225c:	00796c65 	rsbseq	r6, r9, r5, ror #24
    2260:	5f636461 	svcpl	0x00636461
    2264:	5f736d64 	svcpl	0x00736d64
    2268:	74736964 	ldrbtvc	r6, [r3], #-2404
    226c:	65636e61 	strbvs	r6, [r3, #-3681]!
    2270:	63646100 	cmnvs	r4, #0	; 0x0
    2274:	7279675f 	rsbsvc	r6, r9, #24903680	; 0x17c0000
    2278:	635f796f 	cmpvs	pc, #1818624	; 0x1bc000
    227c:	65746e65 	ldrbvs	r6, [r4, #-3685]!
    2280:	6f6d0072 	svcvs	0x006d0072
    2284:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    2288:	6574735f 	ldrbvs	r7, [r4, #-863]!
    228c:	65735f70 	ldrbvs	r5, [r3, #-3952]!
    2290:	736f7672 	cmnvc	pc, #119537664	; 0x7200000
    2294:	766f6d5f 	undefined
    2298:	00676e69 	rsbeq	r6, r7, r9, ror #28
    229c:	7478656e 	ldrbtvc	r6, [r8], #-1390
    22a0:	746f6d5f 	strbtvc	r6, [pc], #3423	; 22a8 <__Stack_Size+0x1ea8>
    22a4:	5f6e6f69 	svcpl	0x006e6f69
    22a8:	65676170 	strbvs	r6, [r7, #-368]!
    22ac:	746f6d00 	strbtvc	r6, [pc], #3328	; 22b4 <__Stack_Size+0x1eb4>
    22b0:	5f6e6f69 	svcpl	0x006e6f69
    22b4:	76726573 	undefined
    22b8:	6d5f736f 	ldclvs	3, cr7, [pc, #-444]
    22bc:	6e69766f 	cdpvs	6, 6, cr7, cr9, cr15, {3}
    22c0:	69700067 	ldmdbvs	r0!, {r0, r1, r2, r5, r6}^
    22c4:	6e755f64 	cdpvs	15, 7, cr5, cr5, cr4, {3}
    22c8:	6c616373 	stclvs	3, cr6, [r1], #-460
    22cc:	6f5f6465 	svcvs	0x005f6465
    22d0:	75707475 	ldrbvc	r7, [r0, #-1141]!
    22d4:	616d0074 	smcvs	53252
    22d8:	5f726f6a 	svcpl	0x00726f6a
    22dc:	72616c61 	rsbvc	r6, r1, #24832	; 0x6100
    22e0:	6970006d 	ldmdbvs	r0!, {r0, r2, r3, r5, r6}^
    22e4:	6e695f64 	cdpvs	15, 6, cr5, cr9, cr4, {3}
    22e8:	00747570 	rsbseq	r7, r4, r0, ror r5
    22ec:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    22f0:	5f746e65 	svcpl	0x00746e65
    22f4:	69746f6d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    22f8:	705f6e6f 	subsvc	r6, pc, pc, ror #28
    22fc:	00656761 	rsbeq	r6, r5, r1, ror #14
    2300:	7a7a7562 	bvc	1e9f890 <__Stack_Size+0x1e9f490>
    2304:	65537265 	ldrbvs	r7, [r3, #-613]
    2308:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    230c:	6c006563 	cfstr32vs	mvfx6, [r0], {99}
    2310:	5f747361 	svcpl	0x00747361
    2314:	6c6f6962 	stclvs	9, cr6, [pc], #-392
    2318:	5f64696f 	svcpl	0x0064696f
    231c:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!
    2320:	00646e61 	rsbeq	r6, r4, r1, ror #28
    2324:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    2328:	5f746e65 	svcpl	0x00746e65
    232c:	65736f70 	ldrbvs	r6, [r3, #-3952]!
    2330:	63646100 	cmnvs	r4, #0	; 0x0
    2334:	6363615f 	cmnvs	r3, #-1073741801	; 0xc0000017
    2338:	5f786c65 	svcpl	0x00786c65
    233c:	746e6563 	strbtvc	r6, [lr], #-1379
    2340:	70007265 	andvc	r7, r0, r5, ror #4
    2344:	68637475 	stmdavs	r3!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
    2348:	75700077 	ldrbvc	r0, [r0, #-119]!
    234c:	00666374 	rsbeq	r6, r6, r4, ror r3
    2350:	2f505041 	svccs	0x00505041
    2354:	2f637273 	svccs	0x00637273
    2358:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    235c:	632e6674 	teqvs	lr, #121634816	; 0x7400000
    2360:	625f5f00 	subsvs	r5, pc, #0	; 0x0
    2364:	746c6975 	strbtvc	r6, [ip], #-2421
    2368:	765f6e69 	ldrbvc	r6, [pc], -r9, ror #28
    236c:	696c5f61 	stmdbvs	ip!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    2370:	70007473 	andvc	r7, r0, r3, ror r4
    2374:	70637475 	rsbvc	r7, r3, r5, ror r4
    2378:	6d756e00 	ldclvs	14, cr6, [r5]
    237c:	66740070 	undefined
    2380:	72705f70 	rsbsvc	r5, r0, #448	; 0x1c0
    2384:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
    2388:	70667400 	rsbvc	r7, r6, r0, lsl #8
    238c:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
    2390:	0074616d 	rsbseq	r6, r4, sp, ror #2
    2394:	6f647473 	svcvs	0x00647473
    2398:	705f7475 	subsvc	r7, pc, r5, ror r4
    239c:	00667475 	rsbeq	r7, r6, r5, ror r4
    23a0:	5f706674 	svcpl	0x00706674
    23a4:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
    23a8:	0066746e 	rsbeq	r7, r6, lr, ror #8
    23ac:	69676964 	stmdbvs	r7!, {r2, r5, r6, r8, fp, sp, lr}^
    23b0:	74730074 	ldrbtvc	r0, [r3], #-116
    23b4:	74756f64 	ldrbtvc	r6, [r5], #-3940
    23b8:	7475705f 	ldrbtvc	r7, [r5], #-95
    23bc:	5f5f0070 	svcpl	0x005f0070
    23c0:	63756e67 	cmnvs	r5, #1648	; 0x670
    23c4:	5f61765f 	svcpl	0x0061765f
    23c8:	7473696c 	ldrbtvc	r6, [r3], #-2412
    23cc:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
    23d0:	72705f74 	rsbsvc	r5, r0, #464	; 0x1d0
    23d4:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
    23d8:	6f626100 	svcvs	0x00626100
    23dc:	75007472 	strvc	r7, [r0, #-1138]
    23e0:	00613269 	rsbeq	r3, r1, r9, ror #4
    23e4:	4f495047 	svcmi	0x00495047
    23e8:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    23ec:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    23f0:	61655200 	cmnvs	r5, r0, lsl #4
    23f4:	00524964 	subseq	r4, r2, r4, ror #18
    23f8:	3252444a 	subscc	r4, r2, #1241513984	; 0x4a000000
    23fc:	52444a00 	subpl	r4, r4, #0	; 0x0
    2400:	444a0033 	strbmi	r0, [sl], #-51
    2404:	42003452 	andmi	r3, r0, #1375731712	; 0x52000000
    2408:	65747461 	ldrbvs	r7, [r4, #-1121]!
    240c:	4d5f7972 	ldclmi	9, cr7, [pc, #-456]
    2410:	74696e6f 	strbtvc	r6, [r9], #-3695
    2414:	415f726f 	cmpmi	pc, pc, ror #4
    2418:	6d72616c 	ldfvse	f6, [r2, #-432]!
    241c:	4f504500 	svcmi	0x00504500
    2420:	35325452 	ldrcc	r5, [r2, #-1106]!
    2424:	4f504500 	svcmi	0x00504500
    2428:	31325452 	teqcc	r2, r2, asr r4
    242c:	74655300 	strbtvc	r5, [r5], #-768
    2430:	726f5045 	rsbvc	r5, pc, #69	; 0x45
    2434:	534a0074 	movtpl	r0, #41076	; 0xa074
    2438:	45005251 	strmi	r5, [r0, #-593]
    243c:	74726f50 	ldrbtvc	r6, [r2], #-3920
    2440:	00655f44 	rsbeq	r5, r5, r4, asr #30
    2444:	746c6f76 	strbtvc	r6, [ip], #-3958
    2448:	4f504500 	svcmi	0x00504500
    244c:	31365452 	teqcc	r6, r2, asr r4
    2450:	354d4300 	strbcc	r4, [sp, #-768]
    2454:	485f3033 	ldmdami	pc, {r0, r1, r4, r5, ip, sp}^
    2458:	72732f57 	rsbsvc	r2, r3, #348	; 0x15c
    245c:	64612f63 	strbtvs	r2, [r1], #-3939
    2460:	00632e63 	rsbeq	r2, r3, r3, ror #28
    2464:	524f5045 	subpl	r5, pc, #69	; 0x45
    2468:	00353654 	eorseq	r3, r5, r4, asr r6
    246c:	41534944 	cmpmi	r3, r4, asr #18
    2470:	00454c42 	subeq	r4, r5, r2, asr #24
    2474:	3152444a 	cmpcc	r2, sl, asr #8
    2478:	52534200 	subspl	r4, r3, #0	; 0x0
    247c:	50450052 	subpl	r0, r5, r2, asr r0
    2480:	3354524f 	cmpcc	r4, #-268435452	; 0xf0000004
    2484:	4f4a0031 	svcmi	0x004a0031
    2488:	00315246 	eorseq	r5, r1, r6, asr #4
    248c:	52464f4a 	subpl	r4, r6, #296	; 0x128
    2490:	50450032 	subpl	r0, r5, r2, lsr r0
    2494:	3354524f 	cmpcc	r4, #-268435452	; 0xf0000004
    2498:	61450035 	cmpvs	r5, r5, lsr r0
    249c:	50457973 	subpl	r7, r5, r3, ror r9
    24a0:	0074726f 	rsbseq	r7, r4, pc, ror #4
    24a4:	726f5045 	rsbvc	r5, pc, #69	; 0x45
    24a8:	745f4474 	ldrbvc	r4, [pc], #1140	; 24b0 <__Stack_Size+0x20b0>
    24ac:	464f4a00 	strbmi	r4, [pc], -r0, lsl #20
    24b0:	45003352 	strmi	r3, [r0, #-850]
    24b4:	54524f50 	ldrbpl	r4, [r2], #-3920
    24b8:	4a003531 	bmi	f984 <__Stack_Size+0xf584>
    24bc:	3452464f 	ldrbcc	r4, [r2], #-1615
    24c0:	61655200 	cmnvs	r5, r0, lsl #4
    24c4:	616e4164 	cmnvs	lr, r4, ror #2
    24c8:	00676f6c 	rsbeq	r6, r7, ip, ror #30
    24cc:	524f5045 	subpl	r5, pc, #69	; 0x45
    24d0:	00313454 	eorseq	r3, r1, r4, asr r4
    24d4:	524f5045 	subpl	r5, pc, #69	; 0x45
    24d8:	00353454 	eorseq	r3, r5, r4, asr r4
    24dc:	74726f70 	ldrbtvc	r6, [r2], #-3952
    24e0:	6f504500 	svcvs	0x00504500
    24e4:	5f417472 	svcpl	0x00417472
    24e8:	51530074 	cmppl	r3, r4, ror r0
    24ec:	53003152 	movwpl	r3, #338	; 0x152
    24f0:	00325251 	eorseq	r5, r2, r1, asr r2
    24f4:	33525153 	cmpcc	r2, #-1073741804	; 0xc0000014
    24f8:	4f504500 	svcmi	0x00504500
    24fc:	31315452 	teqcc	r1, r2, asr r4
    2500:	73614500 	cmnvc	r1, #0	; 0x0
    2504:	726f5079 	rsbvc	r5, pc, #121	; 0x79
    2508:	00735f74 	rsbseq	r5, r3, r4, ror pc
    250c:	79736145 	ldmdbvc	r3!, {r0, r2, r6, r8, sp, lr}^
    2510:	74726f50 	ldrbtvc	r6, [r2], #-3920
    2514:	5300745f 	movwpl	r7, #1119	; 0x45f
    2518:	3152504d 	cmpcc	r2, sp, asr #32
    251c:	504d5300 	subpl	r5, sp, r0, lsl #6
    2520:	4c003252 	sfmmi	f3, 4, [r0], {82}
    2524:	00524b43 	subseq	r4, r2, r3, asr #22
    2528:	524f5045 	subpl	r5, pc, #69	; 0x45
    252c:	00313554 	eorseq	r3, r1, r4, asr r5
    2530:	524f5045 	subpl	r5, pc, #69	; 0x45
    2534:	00353554 	eorseq	r3, r5, r4, asr r5
    2538:	74747542 	ldrbtvc	r7, [r4], #-1346
    253c:	745f6e6f 	ldrbvc	r6, [pc], #3695	; 2544 <__Stack_Size+0x2144>
    2540:	73614500 	cmnvc	r1, #0	; 0x0
    2544:	74754279 	ldrbtvc	r4, [r5], #-633
    2548:	006e6f74 	rsbeq	r6, lr, r4, ror pc
    254c:	64616552 	strbtvs	r6, [r1], #-1362
    2550:	74747542 	ldrbtvc	r7, [r4], #-1346
    2554:	43006e6f 	movwmi	r6, #3695	; 0xe6f
    2558:	3033354d 	eorscc	r3, r3, sp, asr #10
    255c:	2f57485f 	svccs	0x0057485f
    2560:	2f637273 	svccs	0x00637273
    2564:	74747562 	ldrbtvc	r7, [r4], #-1378
    2568:	632e6e6f 	teqvs	lr, #1776	; 0x6f0
    256c:	74756200 	ldrbtvc	r6, [r5], #-512
    2570:	006e6f74 	rsbeq	r6, lr, r4, ror pc
    2574:	33354d43 	teqcc	r5, #4288	; 0x10c0
    2578:	57485f30 	smlaldxpl	r5, r8, r0, pc
    257c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    2580:	64656c2f 	strbtvs	r6, [r5], #-3119
    2584:	4c00632e 	stcmi	3, cr6, [r0], {46}
    2588:	745f4445 	ldrbvc	r4, [pc], #1093	; 2590 <__Stack_Size+0x2190>
    258c:	74655300 	strbtvc	r5, [r5], #-768
    2590:	0044454c 	subeq	r4, r4, ip, asr #10
    2594:	79736145 	ldmdbvc	r3!, {r0, r2, r6, r8, sp, lr}^
    2598:	0044454c 	subeq	r4, r4, ip, asr #10
    259c:	65746f6e 	ldrbvs	r6, [r4, #-3950]!
    25a0:	6e6f7400 	cdpvs	4, 6, cr7, cr15, cr0, {0}
    25a4:	75620065 	strbvc	r0, [r2, #-101]!
    25a8:	64657a7a 	strbtvs	r7, [r5], #-2682
    25ac:	746f6e5f 	strbtvc	r6, [pc], #3679	; 25b4 <__Stack_Size+0x21b4>
    25b0:	00745f65 	rsbseq	r5, r4, r5, ror #30
    25b4:	6e656c6d 	cdpvs	12, 6, cr6, cr5, cr13, {3}
    25b8:	00687467 	rsbeq	r7, r8, r7, ror #8
    25bc:	6174636f 	cmnvs	r4, pc, ror #6
    25c0:	50006576 	andpl	r6, r0, r6, ror r5
    25c4:	4e79616c 	rpwmiez	f6, f1, #4.0
    25c8:	0065746f 	rsbeq	r7, r5, pc, ror #8
    25cc:	75426c67 	strbvc	r6, [r2, #-3175]
    25d0:	72657a7a 	rsbvc	r7, r5, #499712	; 0x7a000
    25d4:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    25d8:	00726574 	rsbseq	r6, r2, r4, ror r5
    25dc:	7a7a7542 	bvc	1e9faec <__Stack_Size+0x1e9f6ec>
    25e0:	43006465 	movwmi	r6, #1125	; 0x465
    25e4:	3033354d 	eorscc	r3, r3, sp, asr #10
    25e8:	2f57485f 	svccs	0x0057485f
    25ec:	2f637273 	svccs	0x00637273
    25f0:	2e63696d 	cdpcs	9, 6, cr6, cr3, cr13, {3}
    25f4:	546e0063 	strbtpl	r0, [lr], #-99
    25f8:	00656d69 	rsbeq	r6, r5, r9, ror #26
    25fc:	6c65446d 	cfstrdvs	mvd4, [r5], #-436
    2600:	43007961 	movwmi	r7, #2401	; 0x961
    2604:	3033354d 	eorscc	r3, r3, sp, asr #10
    2608:	2f57485f 	svccs	0x0057485f
    260c:	2f637273 	svccs	0x00637273
    2610:	74737973 	ldrbtvc	r7, [r3], #-2419
    2614:	665f6d65 	ldrbvs	r6, [pc], -r5, ror #26
    2618:	2e636e75 	mcrcs	14, 3, r6, cr3, cr5, {3}
    261c:	65670063 	strbvs	r0, [r7, #-99]!
    2620:	6c694d74 	stclvs	13, cr4, [r9], #-464
    2624:	0073696c 	rsbseq	r6, r3, ip, ror #18
    2628:	6f436c67 	svcvs	0x00436c67
    262c:	64746e75 	ldrbtvs	r6, [r4], #-3701
    2630:	436e776f 	cmnmi	lr, #29097984	; 0x1bc0000
    2634:	746e756f 	strbtvc	r7, [lr], #-1391
    2638:	53007265 	movwpl	r7, #613	; 0x265
    263c:	74726174 	ldrbtvc	r6, [r2], #-372
    2640:	656d6954 	strbvs	r6, [sp, #-2388]!
    2644:	446c6700 	strbtmi	r6, [ip], #-1792
    2648:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    264c:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    2650:	00726574 	rsbseq	r6, r2, r4, ror r5
    2654:	63506c67 	cmpvs	r0, #26368	; 0x6700
    2658:	6d695475 	cfstrdvs	mvd5, [r9, #-468]!
    265c:	74756f65 	ldrbtvc	r6, [r5], #-3941
    2660:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    2664:	00726574 	rsbseq	r6, r2, r4, ror r5
    2668:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    266c:	756f4374 	strbvc	r4, [pc, #-884]!	; 2300 <__Stack_Size+0x1f00>
    2670:	6f64746e 	svcvs	0x0064746e
    2674:	75006e77 	strvc	r6, [r0, #-3703]
    2678:	616c6544 	cmnvs	ip, r4, asr #10
    267c:	736d0079 	cmnvc	sp, #121	; 0x79
    2680:	6c6c694d 	stclvs	9, cr6, [ip], #-308
    2684:	73007369 	movwvc	r7, #873	; 0x369
    2688:	74726174 	ldrbtvc	r6, [r2], #-372
    268c:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!
    2690:	74756f65 	ldrbtvc	r6, [r5], #-3941
    2694:	6c78645f 	cfldrdvs	mvd6, [r8], #-380
    2698:	52534900 	subspl	r4, r3, #0	; 0x0
    269c:	6c65445f 	cfstrdvs	mvd4, [r5], #-380
    26a0:	425f7961 	subsmi	r7, pc, #1589248	; 0x184000
    26a4:	00657361 	rsbeq	r7, r5, r1, ror #6
    26a8:	78446c67 	stmdavc	r4, {r0, r1, r2, r5, r6, sl, fp, sp, lr}^
    26ac:	6d69546c 	cfstrdvs	mvd5, [r9, #-432]!
    26b0:	74756f65 	ldrbtvc	r6, [r5], #-3941
    26b4:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    26b8:	00726574 	rsbseq	r6, r2, r4, ror r5
    26bc:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    26c0:	6f635f74 	svcvs	0x00635f74
    26c4:	64746e75 	ldrbtvs	r6, [r4], #-3701
    26c8:	5f6e776f 	svcpl	0x006e776f
    26cc:	7a7a7562 	bvc	1e9fc5c <__Stack_Size+0x1e9f85c>
    26d0:	73007265 	movwvc	r7, #613	; 0x265
    26d4:	74726174 	ldrbtvc	r6, [r2], #-372
    26d8:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!
    26dc:	74756f65 	ldrbtvc	r6, [r5], #-3941
    26e0:	7563705f 	strbvc	r7, [r3, #-95]!
    26e4:	43626700 	cmnmi	r2, #0	; 0x0
    26e8:	746e756f 	strbtvc	r7, [lr], #-1391
    26ec:	6f437265 	svcvs	0x00437265
    26f0:	00746e75 	rsbseq	r6, r4, r5, ror lr
    26f4:	4f495047 	svcmi	0x00495047
    26f8:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    26fc:	43444100 	movtmi	r4, #16640	; 0x4100
    2700:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2704:	72745374 	rsbsvc	r5, r4, #-805306367	; 0xd0000001
    2708:	75746375 	ldrbvc	r6, [r4, #-885]!
    270c:	4e006572 	cfrshl64mi	mvdx0, mvdx2, r6
    2710:	5f434956 	svcpl	0x00434956
    2714:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    2718:	6e6e6168 	powvsez	f6, f6, #0.0
    271c:	6d436c65 	stclvs	12, cr6, [r3, #-404]
    2720:	44410064 	strbmi	r0, [r1], #-100
    2724:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    2728:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    272c:	65446570 	strbvs	r6, [r4, #-1392]
    2730:	50470066 	subpl	r0, r7, r6, rrx
    2734:	6f4d4f49 	svcvs	0x004d4f49
    2738:	545f6564 	ldrbpl	r6, [pc], #1380	; 2740 <__Stack_Size+0x2340>
    273c:	44657079 	strbtmi	r7, [r5], #-121
    2740:	43006665 	movwmi	r6, #1637	; 0x665
    2744:	3033354d 	eorscc	r3, r3, sp, asr #10
    2748:	2f57485f 	svccs	0x0057485f
    274c:	2f637273 	svccs	0x00637273
    2750:	74737973 	ldrbtvc	r7, [r3], #-2419
    2754:	695f6d65 	ldmdbvs	pc, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    2758:	2e74696e 	cdpcs	9, 7, cr6, cr4, cr14, {3}
    275c:	44410063 	strbmi	r0, [r1], #-99
    2760:	63535f43 	cmpvs	r3, #268	; 0x10c
    2764:	6f436e61 	svcvs	0x00436e61
    2768:	6f4d766e 	svcvs	0x004d766e
    276c:	47006564 	strmi	r6, [r0, -r4, ror #10]
    2770:	5f4f4950 	svcpl	0x004f4950
    2774:	65657053 	strbvs	r7, [r5, #-83]!
    2778:	79530064 	ldmdbvc	r3, {r2, r5, r6}^
    277c:	696e4973 	stmdbvs	lr!, {r0, r1, r4, r5, r6, r8, fp, lr}^
    2780:	564e0074 	undefined
    2784:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^
    2788:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    278c:	656e6e61 	strbvs	r6, [lr, #-3681]!
    2790:	6275536c 	rsbsvs	r5, r5, #-1342177279	; 0xb0000001
    2794:	6f697250 	svcvs	0x00697250
    2798:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    279c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    27a0:	6f4d5f4f 	svcvs	0x004d5f4f
    27a4:	4f5f6564 	svcmi	0x005f6564
    27a8:	4f5f7475 	svcmi	0x005f7475
    27ac:	50470044 	subpl	r0, r7, r4, asr #32
    27b0:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]
    27b4:	5f65646f 	svcpl	0x0065646f
    27b8:	505f4641 	subspl	r4, pc, r1, asr #12
    27bc:	53480050 	movtpl	r0, #32848	; 0x8050
    27c0:	61745345 	cmnvs	r4, r5, asr #6
    27c4:	70557472 	subsvc	r7, r5, r2, ror r4
    27c8:	74617453 	strbtvc	r7, [r1], #-1107
    27cc:	4e007375 	mcrmi	3, 0, r7, cr0, cr5, {3}
    27d0:	5f434956 	svcpl	0x00434956
    27d4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    27d8:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
    27dc:	6f697461 	svcvs	0x00697461
    27e0:	4352006e 	cmpmi	r2, #110	; 0x6e
    27e4:	6f435f43 	svcvs	0x00435f43
    27e8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    27ec:	74617275 	strbtvc	r7, [r1], #-629
    27f0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    27f4:	6f727245 	svcvs	0x00727245
    27f8:	61745372 	cmnvs	r4, r2, ror r3
    27fc:	00737574 	rsbseq	r7, r3, r4, ror r5
    2800:	4f495047 	svcmi	0x00495047
    2804:	6570535f 	ldrbvs	r5, [r0, #-863]!
    2808:	315f6465 	cmpcc	pc, r5, ror #8
    280c:	7a484d30 	bvc	1215cd4 <__Stack_Size+0x12158d4>
    2810:	43444100 	movtmi	r4, #16640	; 0x4100
    2814:	646f4d5f 	strbtvs	r4, [pc], #3423	; 281c <__Stack_Size+0x241c>
    2818:	50470065 	subpl	r0, r7, r5, rrx
    281c:	535f4f49 	cmppl	pc, #292	; 0x124
    2820:	64656570 	strbtvs	r6, [r5], #-1392
    2824:	484d325f 	stmdami	sp, {r0, r1, r2, r3, r4, r6, r9, ip, sp}^
    2828:	5047007a 	subpl	r0, r7, sl, ror r0
    282c:	435f4f49 	cmpmi	pc, #292	; 0x124
    2830:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2834:	61727567 	cmnvs	r2, r7, ror #10
    2838:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    283c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    2840:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
    2844:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2848:	65446570 	strbvs	r6, [r4, #-1392]
    284c:	44410066 	strbmi	r0, [r1], #-102
    2850:	624e5f43 	subvs	r5, lr, #268	; 0x10c
    2854:	43664f72 	cmnmi	r6, #456	; 0x1c8
    2858:	6e6e6168 	powvsez	f6, f6, #0.0
    285c:	41006c65 	tstmi	r0, r5, ror #24
    2860:	445f4344 	ldrbmi	r4, [pc], #836	; 2868 <__Stack_Size+0x2468>
    2864:	41617461 	cmnmi	r1, r1, ror #8
    2868:	6e67696c 	cdpvs	9, 6, cr6, cr7, cr12, {3}
    286c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    2870:	6f4d5f4f 	svcvs	0x004d5f4f
    2874:	495f6564 	ldmdbmi	pc, {r2, r5, r6, r8, sl, sp, lr}^
    2878:	47004450 	smlsdmi	r0, r0, r4, r4
    287c:	5f4f4950 	svcpl	0x004f4950
    2880:	65657053 	strbvs	r7, [r5, #-83]!
    2884:	30355f64 	eorscc	r5, r5, r4, ror #30
    2888:	007a484d 	rsbseq	r4, sl, sp, asr #16
    288c:	4349564e 	movtmi	r5, #38478	; 0x964e
    2890:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2894:	72745374 	rsbsvc	r5, r4, #-805306367	; 0xd0000001
    2898:	75746375 	ldrbvc	r6, [r4, #-885]!
    289c:	41006572 	tstmi	r0, r2, ror r5
    28a0:	435f4344 	cmpmi	pc, #268435457	; 0x10000001
    28a4:	69746e6f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    28a8:	756f756e 	strbvc	r7, [pc, #-1390]!	; 2342 <__Stack_Size+0x1f42>
    28ac:	6e6f4373 	mcrvs	3, 3, r4, cr15, cr3, {3}
    28b0:	646f4d76 	strbtvs	r4, [pc], #3446	; 28b8 <__Stack_Size+0x24b8>
    28b4:	564e0065 	strbpl	r0, [lr], -r5, rrx
    28b8:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^
    28bc:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    28c0:	656e6e61 	strbvs	r6, [lr, #-3681]!
    28c4:	4441006c 	strbmi	r0, [r1], #-108
    28c8:	6f435f43 	svcvs	0x00435f43
    28cc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    28d0:	74617275 	strbtvc	r7, [r1], #-629
    28d4:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    28d8:	4f495047 	svcmi	0x00495047
    28dc:	646f4d5f 	strbtvs	r4, [pc], #3423	; 28e4 <__Stack_Size+0x24e4>
    28e0:	50495f65 	subpl	r5, r9, r5, ror #30
    28e4:	44410055 	strbmi	r0, [r1], #-85
    28e8:	78455f43 	stmdavc	r5, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    28ec:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    28f0:	72546c61 	subsvc	r6, r4, #24832	; 0x6100
    28f4:	6f436769 	svcvs	0x00436769
    28f8:	4700766e 	strmi	r7, [r0, -lr, ror #12]
    28fc:	5f4f4950 	svcpl	0x004f4950
    2900:	65646f4d 	strbvs	r6, [r4, #-3917]!
    2904:	4e49415f 	mcrmi	1, 2, r4, cr9, cr15, {2}
    2908:	41535500 	cmpmi	r3, r0, lsl #10
    290c:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    2910:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2914:	61727567 	cmnvs	r2, r7, ror #10
    2918:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    291c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    2920:	52495f43 	subpl	r5, r9, #268	; 0x10c
    2924:	61684351 	cmnvs	r8, r1, asr r3
    2928:	6c656e6e 	stclvs	14, cr6, [r5], #-440
    292c:	65657250 	strbvs	r7, [r5, #-592]!
    2930:	6974706d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    2934:	72506e6f 	subsvc	r6, r0, #1776	; 0x6f0
    2938:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    293c:	47007974 	smlsdxmi	r0, r4, r9, r7
    2940:	534f4950 	movtpl	r4, #63824	; 0xf950
    2944:	64656570 	strbtvs	r6, [r5], #-1392
    2948:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    294c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    2950:	6e754600 	cdpvs	6, 7, cr4, cr5, cr0, {0}
    2954:	6f697463 	svcvs	0x00697463
    2958:	536c616e 	cmnpl	ip, #-2147483621	; 0x8000001b
    295c:	65746174 	ldrbvs	r6, [r4, #-372]!
    2960:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    2964:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    2968:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    296c:	65446570 	strbvs	r6, [r4, #-1392]
    2970:	50470066 	subpl	r0, r7, r6, rrx
    2974:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]
    2978:	5f65646f 	svcpl	0x0065646f
    297c:	5f74754f 	svcpl	0x0074754f
    2980:	47005050 	smlsdmi	r0, r0, r0, r5
    2984:	5f4f4950 	svcpl	0x004f4950
    2988:	74696e49 	strbtvc	r6, [r9], #-3657
    298c:	75727453 	ldrbvc	r7, [r2, #-1107]!
    2990:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
    2994:	79530065 	ldmdbvc	r3, {r0, r2, r5, r6}^
    2998:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    299c:	6f435f6b 	svcvs	0x00435f6b
    29a0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    29a4:	74617275 	strbtvc	r7, [r1], #-629
    29a8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    29ac:	4f495047 	svcmi	0x00495047
    29b0:	646f4d5f 	strbtvs	r4, [pc], #3423	; 29b8 <__Stack_Size+0x25b8>
    29b4:	4e495f65 	cdpmi	15, 4, cr5, cr9, cr5, {3}
    29b8:	4f4c465f 	svcmi	0x004c465f
    29bc:	4e495441 	cdpmi	4, 4, cr5, cr9, cr1, {2}
    29c0:	50470047 	subpl	r0, r7, r7, asr #32
    29c4:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]
    29c8:	5f65646f 	svcpl	0x0065646f
    29cc:	4f5f4641 	svcmi	0x005f4641
    29d0:	50470044 	subpl	r0, r7, r4, asr #32
    29d4:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]
    29d8:	0065646f 	rsbeq	r6, r5, pc, ror #8
    29dc:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    29e0:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
    29e4:	74537469 	ldrbvc	r7, [r3], #-1129
    29e8:	74637572 	strbtvc	r7, [r3], #-1394
    29ec:	00657275 	rsbeq	r7, r5, r5, ror r2
    29f0:	5f447852 	svcpl	0x00447852
    29f4:	5f4c5844 	svcpl	0x004c5844
    29f8:	65746e49 	ldrbvs	r6, [r4, #-3657]!
    29fc:	70757272 	rsbsvc	r7, r5, r2, ror r2
    2a00:	63700074 	cmnvs	r0, #116	; 0x74
    2a04:	61685f75 	smcvs	34293
    2a08:	65735f6c 	ldrbvs	r5, [r3, #-3948]!
    2a0c:	69745f74 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2a10:	756f656d 	strbvc	r6, [pc, #-1389]!	; 24ab <__Stack_Size+0x20ab>
    2a14:	78640074 	stmdavc	r4!, {r2, r4, r5, r6}^
    2a18:	61685f6c 	cmnvs	r8, ip, ror #30
    2a1c:	78745f6c 	ldmdavc	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    2a20:	6c786400 	cfldrdvs	mvd6, [r8]
    2a24:	6c61685f 	stclvs	8, cr6, [r1], #-380
    2a28:	6f6c635f 	svcvs	0x006c635f
    2a2c:	70006573 	andvc	r6, r0, r3, ror r5
    2a30:	6b636150 	blvs	18daf78 <__Stack_Size+0x18dab78>
    2a34:	52007465 	andpl	r7, r0, #1694498816	; 0x65000000
    2a38:	505f4478 	subspl	r4, pc, r8, ror r4
    2a3c:	495f5543 	ldmdbmi	pc, {r0, r1, r6, r8, sl, ip, lr}^
    2a40:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2a44:	74707572 	ldrbtvc	r7, [r0], #-1394
    2a48:	75637000 	strbvc	r7, [r3]!
    2a4c:	7475705f 	ldrbtvc	r7, [r5], #-95
    2a50:	6575715f 	ldrbvs	r7, [r5, #-351]!
    2a54:	55006575 	strpl	r6, [r0, #-1397]
    2a58:	54524153 	ldrbpl	r4, [r2], #-339
    2a5c:	6f74535f 	svcvs	0x0074535f
    2a60:	74694270 	strbtvc	r4, [r9], #-624
    2a64:	63700073 	cmnvs	r0, #115	; 0x73
    2a68:	75705f75 	ldrbvc	r5, [r0, #-3957]!
    2a6c:	79625f74 	stmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2a70:	52006574 	andpl	r6, r0, #486539264	; 0x1d000000
    2a74:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    2a78:	31444556 	cmpcc	r4, r6, asr r5
    2a7c:	75637000 	strbvc	r7, [r3]!
    2a80:	6565705f 	strbvs	r7, [r5, #-95]!
    2a84:	75715f6b 	ldrbvc	r5, [r1, #-3947]!
    2a88:	00657565 	rsbeq	r7, r5, r5, ror #10
    2a8c:	5f756370 	svcpl	0x00756370
    2a90:	5f6c6168 	svcpl	0x006c6168
    2a94:	736f6c63 	cmnvc	pc, #25344	; 0x6300
    2a98:	53550065 	cmppl	r5, #101	; 0x65
    2a9c:	5f545241 	svcpl	0x00545241
    2aa0:	64726f57 	ldrbtvs	r6, [r2], #-3927
    2aa4:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    2aa8:	70006874 	andvc	r6, r0, r4, ror r8
    2aac:	685f7563 	ldmdavs	pc, {r0, r1, r5, r6, r8, sl, ip, sp, lr}^
    2ab0:	745f6c61 	ldrbvc	r6, [pc], #3169	; 2ab8 <__Stack_Size+0x26b8>
    2ab4:	6f656d69 	svcvs	0x00656d69
    2ab8:	55007475 	strpl	r7, [r0, #-1141]
    2abc:	54524153 	ldrbpl	r4, [r2], #-339
    2ac0:	7561425f 	strbvc	r4, [r1, #-607]!
    2ac4:	74615264 	strbtvc	r5, [r1], #-612
    2ac8:	63700065 	cmnvs	r0, #101	; 0x65
    2acc:	65675f75 	strbvs	r5, [r7, #-3957]!
    2ad0:	73715f74 	cmnvc	r1, #464	; 0x1d0
    2ad4:	65746174 	ldrbvs	r6, [r4, #-372]!
    2ad8:	75637000 	strbvc	r7, [r3]!
    2adc:	7465675f 	strbtvc	r6, [r5], #-1887
    2ae0:	6575715f 	ldrbvs	r7, [r5, #-351]!
    2ae4:	7a006575 	bvc	1c0c0 <__Stack_Size+0x1bcc0>
    2ae8:	685f6267 	ldmdavs	pc, {r0, r1, r2, r5, r6, r9, sp, lr}^
    2aec:	635f6c61 	cmpvs	pc, #24832	; 0x6100
    2af0:	65736f6c 	ldrbvs	r6, [r3, #-3948]!
    2af4:	62677a00 	rsbvs	r7, r7, #0	; 0x0
    2af8:	6c61685f 	stclvs	8, cr6, [r1], #-380
    2afc:	0078745f 	rsbseq	r7, r8, pc, asr r4
    2b00:	526d754e 	rsbpl	r7, sp, #327155712	; 0x13800000
    2b04:	79427663 	stmdbvc	r2, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
    2b08:	52006574 	andpl	r6, r0, #486539264	; 0x1d000000
    2b0c:	5a5f4478 	bpl	17d3cf4 <__Stack_Size+0x17d38f4>
    2b10:	495f4749 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, lr}^
    2b14:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2b18:	74707572 	ldrbtvc	r7, [r0], #-1394
    2b1c:	62677a00 	rsbvs	r7, r7, #0	; 0x0
    2b20:	6c61685f 	stclvs	8, cr6, [r1], #-380
    2b24:	65706f5f 	ldrbvs	r6, [r0, #-3935]!
    2b28:	5355006e 	cmppl	r5, #110	; 0x6e
    2b2c:	5f545241 	svcpl	0x00545241
    2b30:	69726150 	ldmdbvs	r2!, {r4, r6, r8, sp, lr}^
    2b34:	47007974 	smlsdxmi	r0, r4, r9, r7
    2b38:	00525054 	subseq	r5, r2, r4, asr r0
    2b3c:	5f6c7864 	svcpl	0x006c7864
    2b40:	5f6c6168 	svcpl	0x006c6168
    2b44:	61656c63 	cmnvs	r5, r3, ror #24
    2b48:	78640072 	stmdavc	r4!, {r1, r4, r5, r6}^
    2b4c:	61685f6c 	cmnvs	r8, ip, ror #30
    2b50:	706f5f6c 	rsbvc	r5, pc, ip, ror #30
    2b54:	64006e65 	strvs	r6, [r0], #-3685
    2b58:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^
    2b5c:	725f6c61 	subsvc	r6, pc, #24832	; 0x6100
    2b60:	756e0078 	strbvc	r0, [lr, #-120]!
    2b64:	6361506d 	cmnvs	r1, #109	; 0x6d
    2b68:	0074656b 	rsbseq	r6, r4, fp, ror #10
    2b6c:	5f756370 	svcpl	0x00756370
    2b70:	5f6c6168 	svcpl	0x006c6168
    2b74:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
    2b78:	41535500 	cmpmi	r3, r0, lsl #10
    2b7c:	485f5452 	ldmdami	pc, {r1, r4, r6, sl, ip, lr}^
    2b80:	77647261 	strbvc	r7, [r4, -r1, ror #4]!
    2b84:	46657261 	strbtmi	r7, [r5], -r1, ror #4
    2b88:	43776f6c 	cmnmi	r7, #432	; 0x1b0
    2b8c:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    2b90:	55006c6f 	strpl	r6, [r0, #-3183]
    2b94:	54524153 	ldrbpl	r4, [r2], #-339
    2b98:	646f4d5f 	strbtvs	r4, [pc], #3423	; 2ba0 <__Stack_Size+0x27a0>
    2b9c:	4d430065 	stclmi	0, cr0, [r3, #-404]
    2ba0:	5f303335 	svcpl	0x00303335
    2ba4:	732f5748 	teqvc	pc, #18874368	; 0x1200000
    2ba8:	752f6372 	strvc	r6, [pc, #-882]!	; 283e <__Stack_Size+0x243e>
    2bac:	74726173 	ldrbtvc	r6, [r2], #-371
    2bb0:	5200632e 	andpl	r6, r0, #-1207959552	; 0xb8000000
    2bb4:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    2bb8:	30444556 	subcc	r4, r4, r6, asr r5
    2bbc:	53455200 	movtpl	r5, #20992	; 0x5200
    2bc0:	45565245 	ldrbmi	r5, [r6, #-581]
    2bc4:	52003244 	andpl	r3, r0, #1073741828	; 0x40000004
    2bc8:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    2bcc:	33444556 	movtcc	r4, #17750	; 0x4556
    2bd0:	53455200 	movtpl	r5, #20992	; 0x5200
    2bd4:	45565245 	ldrbmi	r5, [r6, #-581]
    2bd8:	52003444 	andpl	r3, r0, #1140850688	; 0x44000000
    2bdc:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    2be0:	35444556 	strbcc	r4, [r4, #-1366]
    2be4:	53455200 	movtpl	r5, #20992	; 0x5200
    2be8:	45565245 	ldrbmi	r5, [r6, #-581]
    2bec:	70003644 	andvc	r3, r0, r4, asr #12
    2bf0:	635f7563 	cmpvs	pc, #415236096	; 0x18c00000
    2bf4:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    2bf8:	6575715f 	ldrbvs	r7, [r5, #-351]!
    2bfc:	64006575 	strvs	r6, [r0], #-1397
    2c00:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^
    2c04:	745f6c61 	ldrbvc	r6, [pc], #3169	; 2c0c <__Stack_Size+0x280c>
    2c08:	6f656d69 	svcvs	0x00656d69
    2c0c:	64007475 	strvs	r7, [r0], #-1141
    2c10:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^
    2c14:	735f6c61 	cmpvc	pc, #24832	; 0x6100
    2c18:	745f7465 	ldrbvc	r7, [pc], #1125	; 2c20 <__Stack_Size+0x2820>
    2c1c:	6f656d69 	svcvs	0x00656d69
    2c20:	7a007475 	bvc	1fdfc <__Stack_Size+0x1f9fc>
    2c24:	685f6267 	ldmdavs	pc, {r0, r1, r2, r5, r6, r9, sp, lr}^
    2c28:	725f6c61 	subsvc	r6, pc, #24832	; 0x6100
    2c2c:	53550078 	cmppl	r5, #120	; 0x78
    2c30:	5f545241 	svcpl	0x00545241
    2c34:	74696e49 	strbtvc	r6, [r9], #-3657
    2c38:	65707954 	ldrbvs	r7, [r0, #-2388]!
    2c3c:	00666544 	rsbeq	r6, r6, r4, asr #10
    2c40:	64785462 	ldrbtvs	r5, [r8], #-1122
    2c44:	61746144 	cmnvs	r4, r4, asr #2
    2c48:	43444100 	movtmi	r4, #16640	; 0x4100
    2c4c:	6d740078 	ldclvs	0, cr0, [r4, #-480]!
    2c50:	67657270 	undefined
    2c54:	44410031 	strbmi	r0, [r1], #-49
    2c58:	6e415f43 	cdpvs	15, 4, cr5, cr1, cr3, {2}
    2c5c:	676f6c61 	strbvs	r6, [pc, -r1, ror #24]!
    2c60:	63746157 	cmnvs	r4, #-1073741803	; 0xc0000015
    2c64:	676f6468 	strbvs	r6, [pc, -r8, ror #8]!
    2c68:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2c6c:	5f434441 	svcpl	0x00434441
    2c70:	6f435449 	svcvs	0x00435449
    2c74:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2c78:	43444100 	movtmi	r4, #16640	; 0x4100
    2c7c:	7465475f 	strbtvc	r4, [r5], #-1887
    2c80:	74666f53 	strbtvc	r6, [r6], #-3923
    2c84:	65726177 	ldrbvs	r6, [r2, #-375]!
    2c88:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    2c8c:	6a6e4974 	bvs	1b95264 <__Stack_Size+0x1b94e64>
    2c90:	65746365 	ldrbvs	r6, [r4, #-869]!
    2c94:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    2c98:	646d4376 	strbtvs	r4, [sp], #-886
    2c9c:	74617453 	strbtvc	r7, [r1], #-1107
    2ca0:	4c007375 	stcmi	3, cr7, [r0], {117}
    2ca4:	6854776f 	ldmdavs	r4, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    2ca8:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    2cac:	00646c6f 	rsbeq	r6, r4, pc, ror #24
    2cb0:	5f434441 	svcpl	0x00434441
    2cb4:	61656c43 	cmnvs	r5, r3, asr #24
    2cb8:	616c4672 	smcvs	50274
    2cbc:	44410067 	strbmi	r0, [r1], #-103
    2cc0:	65475f43 	strbvs	r5, [r7, #-3907]
    2cc4:	53544974 	cmppl	r4, #1900544	; 0x1d0000
    2cc8:	75746174 	ldrbvc	r6, [r4, #-372]!
    2ccc:	74730073 	ldrbtvc	r0, [r3], #-115
    2cd0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2cd4:	5f783031 	svcpl	0x00783031
    2cd8:	2f62696c 	svccs	0x0062696c
    2cdc:	2f637273 	svccs	0x00637273
    2ce0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2ce4:	30316632 	eorscc	r6, r1, r2, lsr r6
    2ce8:	64615f78 	strbtvs	r5, [r1], #-3960
    2cec:	00632e63 	rsbeq	r2, r3, r3, ror #28
    2cf0:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    2cf4:	41007265 	tstmi	r0, r5, ror #4
    2cf8:	435f4344 	cmpmi	pc, #268435457	; 0x10000001
    2cfc:	4100646d 	tstmi	r0, sp, ror #8
    2d00:	495f4344 	ldmdbmi	pc, {r2, r6, r8, r9, lr}^
    2d04:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    2d08:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    2d0c:	44410074 	strbmi	r0, [r1], #-116
    2d10:	6e415f43 	cdpvs	15, 4, cr5, cr1, cr3, {2}
    2d14:	676f6c61 	strbvs	r6, [pc, -r1, ror #24]!
    2d18:	63746157 	cmnvs	r4, #-1073741803	; 0xc0000015
    2d1c:	676f6468 	strbvs	r6, [pc, -r8, ror #8]!
    2d20:	65726854 	ldrbvs	r6, [r2, #-2132]!
    2d24:	6c6f6873 	stclvs	8, cr6, [pc], #-460
    2d28:	6f437364 	svcvs	0x00437364
    2d2c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2d30:	43444100 	movtmi	r4, #16640	; 0x4100
    2d34:	656c435f 	strbvs	r4, [ip, #-863]!
    2d38:	54497261 	strbpl	r7, [r9], #-609
    2d3c:	646e6550 	strbtvs	r6, [lr], #-1360
    2d40:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    2d44:	41007469 	tstmi	r0, r9, ror #8
    2d48:	475f4344 	ldrbmi	r4, [pc, -r4, asr #6]
    2d4c:	65527465 	ldrbvs	r7, [r2, #-1125]
    2d50:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    2d54:	62696c61 	rsbvs	r6, r9, #24832	; 0x6100
    2d58:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    2d5c:	74536e6f 	ldrbvc	r6, [r3], #-3695
    2d60:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2d64:	43444100 	movtmi	r4, #16640	; 0x4100
    2d68:	414c465f 	cmpmi	ip, pc, asr r6
    2d6c:	654e0047 	strbvs	r0, [lr, #-71]
    2d70:	61745377 	cmnvs	r4, r7, ror r3
    2d74:	41006574 	tstmi	r0, r4, ror r5
    2d78:	415f4344 	cmpmi	pc, r4, asr #6
    2d7c:	6f6c616e 	svcvs	0x006c616e
    2d80:	74615767 	strbtvc	r5, [r1], #-1895
    2d84:	6f646863 	svcvs	0x00646863
    2d88:	6e695367 	cdpvs	3, 6, cr5, cr9, cr7, {3}
    2d8c:	43656c67 	cmnmi	r5, #26368	; 0x6700
    2d90:	6e6e6168 	powvsez	f6, f6, #0.0
    2d94:	6f436c65 	svcvs	0x00436c65
    2d98:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2d9c:	43444100 	movtmi	r4, #16640	; 0x4100
    2da0:	6765525f 	undefined
    2da4:	72616c75 	rsbvc	r6, r1, #29952	; 0x7500
    2da8:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    2dac:	436c656e 	cmnmi	ip, #461373440	; 0x1b800000
    2db0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2db4:	6e650067 	cdpvs	0, 6, cr0, cr5, cr7, {3}
    2db8:	656c6261 	strbvs	r6, [ip, #-609]!
    2dbc:	74617473 	strbtvc	r7, [r1], #-1139
    2dc0:	48007375 	stmdami	r0, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}
    2dc4:	54686769 	strbtpl	r6, [r8], #-1897
    2dc8:	73657268 	cmnvc	r5, #-2147483642	; 0x80000006
    2dcc:	646c6f68 	strbtvs	r6, [ip], #-3944
    2dd0:	43444100 	movtmi	r4, #16640	; 0x4100
    2dd4:	7369445f 	cmnvc	r9, #1593835520	; 0x5f000000
    2dd8:	646f4d63 	strbtvs	r4, [pc], #3427	; 2de0 <__Stack_Size+0x29e0>
    2ddc:	61684365 	cmnvs	r8, r5, ror #6
    2de0:	6c656e6e 	stclvs	14, cr6, [r5], #-440
    2de4:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    2de8:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    2dec:	00676966 	rsbeq	r6, r7, r6, ror #18
    2df0:	5f434441 	svcpl	0x00434441
    2df4:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    2df8:	65766e6f 	ldrbvs	r6, [r6, #-3695]!
    2dfc:	6f697372 	svcvs	0x00697372
    2e00:	6c61566e 	stclvs	6, cr5, [r1], #-440
    2e04:	74006575 	strvc	r6, [r0], #-1397
    2e08:	6572706d 	ldrbvs	r7, [r2, #-109]!
    2e0c:	61520067 	cmpvs	r2, r7, rrx
    2e10:	41006b6e 	tstmi	r0, lr, ror #22
    2e14:	415f4344 	cmpmi	pc, r4, asr #6
    2e18:	496f7475 	stmdbmi	pc!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
    2e1c:	63656a6e 	cmnvs	r5, #450560	; 0x6e000
    2e20:	43646574 	cmnmi	r4, #486539264	; 0x1d000000
    2e24:	43766e6f 	cmnmi	r6, #1776	; 0x6f0
    2e28:	4100646d 	tstmi	r0, sp, ror #8
    2e2c:	455f4344 	ldrbmi	r4, [pc, #-836]	; 2af0 <__Stack_Size+0x26f0>
    2e30:	72657478 	rsbvc	r7, r5, #2013265920	; 0x78000000
    2e34:	546c616e 	strbtpl	r6, [ip], #-366
    2e38:	43676972 	cmnmi	r7, #1867776	; 0x1c8000
    2e3c:	43766e6f 	cmnmi	r6, #1776	; 0x6f0
    2e40:	4100646d 	tstmi	r0, sp, ror #8
    2e44:	475f4344 	ldrbmi	r4, [pc, -r4, asr #6]
    2e48:	6f537465 	svcvs	0x00537465
    2e4c:	61777466 	cmnvs	r7, r6, ror #8
    2e50:	74536572 	ldrbvc	r6, [r3], #-1394
    2e54:	43747261 	cmnmi	r4, #268435462	; 0x10000006
    2e58:	53766e6f 	cmnpl	r6, #1776	; 0x6f0
    2e5c:	75746174 	ldrbvc	r6, [r4, #-372]!
    2e60:	44410073 	strbmi	r0, [r1], #-115
    2e64:	65535f43 	ldrbvs	r5, [r3, #-3907]
    2e68:	6a6e4974 	bvs	1b95440 <__Stack_Size+0x1b95040>
    2e6c:	65746365 	ldrbvs	r6, [r4, #-869]!
    2e70:	66664f64 	strbtvs	r4, [r6], -r4, ror #30
    2e74:	00746573 	rsbseq	r6, r4, r3, ror r5
    2e78:	5f434441 	svcpl	0x00434441
    2e7c:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    2e80:	41007469 	tstmi	r0, r9, ror #8
    2e84:	455f4344 	ldrbmi	r4, [pc, #-836]	; 2b48 <__Stack_Size+0x2748>
    2e88:	72657478 	rsbvc	r7, r5, #2013265920	; 0x78000000
    2e8c:	546c616e 	strbtpl	r6, [ip], #-366
    2e90:	49676972 	stmdbmi	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2e94:	63656a6e 	cmnvs	r5, #450560	; 0x6e000
    2e98:	43646574 	cmnmi	r4, #486539264	; 0x1d000000
    2e9c:	43766e6f 	cmnmi	r6, #1776	; 0x6f0
    2ea0:	4100646d 	tstmi	r0, sp, ror #8
    2ea4:	495f4344 	ldmdbmi	pc, {r2, r6, r8, r9, lr}^
    2ea8:	63656a6e 	cmnvs	r5, #450560	; 0x6e000
    2eac:	44646574 	strbtmi	r6, [r4], #-1396
    2eb0:	4d637369 	stclmi	3, cr7, [r3, #-420]!
    2eb4:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    2eb8:	4100646d 	tstmi	r0, sp, ror #8
    2ebc:	455f4344 	ldrbmi	r4, [pc, #-836]	; 2b80 <__Stack_Size+0x2780>
    2ec0:	72657478 	rsbvc	r7, r5, #2013265920	; 0x78000000
    2ec4:	546c616e 	strbtpl	r6, [ip], #-366
    2ec8:	49676972 	stmdbmi	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2ecc:	63656a6e 	cmnvs	r5, #450560	; 0x6e000
    2ed0:	43646574 	cmnmi	r4, #486539264	; 0x1d000000
    2ed4:	43766e6f 	cmnmi	r6, #1776	; 0x6f0
    2ed8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2edc:	44410067 	strbmi	r0, [r1], #-103
    2ee0:	65475f43 	strbvs	r5, [r7, #-3907]
    2ee4:	6a6e4974 	bvs	1b954bc <__Stack_Size+0x1b950bc>
    2ee8:	65746365 	ldrbvs	r6, [r4, #-869]!
    2eec:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    2ef0:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    2ef4:	566e6f69 	strbtpl	r6, [lr], -r9, ror #30
    2ef8:	65756c61 	ldrbvs	r6, [r5, #-3169]!
    2efc:	43444100 	movtmi	r4, #16640	; 0x4100
    2f00:	6168435f 	cmnvs	r8, pc, asr r3
    2f04:	6c656e6e 	stclvs	14, cr6, [r5], #-440
    2f08:	43444100 	movtmi	r4, #16640	; 0x4100
    2f0c:	6174535f 	cmnvs	r4, pc, asr r3
    2f10:	61437472 	cmpvs	r3, r2, ror r4
    2f14:	7262696c 	rsbvc	r6, r2, #1769472	; 0x1b0000
    2f18:	6f697461 	svcvs	0x00697461
    2f1c:	6d74006e 	ldclvs	0, cr0, [r4, #-440]!
    2f20:	67657270 	undefined
    2f24:	6d740032 	ldclvs	0, cr0, [r4, #-200]!
    2f28:	67657270 	undefined
    2f2c:	44410033 	strbmi	r0, [r1], #-51
    2f30:	65475f43 	strbvs	r5, [r7, #-3907]
    2f34:	6c614374 	stclvs	3, cr4, [r1], #-464
    2f38:	61726269 	cmnvs	r2, r9, ror #4
    2f3c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    2f40:	74617453 	strbtvc	r7, [r1], #-1107
    2f44:	62007375 	andvs	r7, r0, #-738197503	; 0xd4000001
    2f48:	74737469 	ldrbtvc	r7, [r3], #-1129
    2f4c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2f50:	43444100 	movtmi	r4, #16640	; 0x4100
    2f54:	666f535f 	undefined
    2f58:	72617774 	rsbvc	r7, r1, #30408704	; 0x1d00000
    2f5c:	61745365 	cmnvs	r4, r5, ror #6
    2f60:	6f437472 	svcvs	0x00437472
    2f64:	6d43766e 	stclvs	6, cr7, [r3, #-440]
    2f68:	44410064 	strbmi	r0, [r1], #-100
    2f6c:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    2f70:	7463656a 	strbtvc	r6, [r3], #-1386
    2f74:	65536465 	ldrbvs	r6, [r3, #-1125]
    2f78:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    2f7c:	4c726563 	cfldr64mi	mvdx6, [r2], #-396
    2f80:	74676e65 	strbtvc	r6, [r7], #-3685
    2f84:	6e6f4368 	cdpvs	3, 6, cr4, cr15, cr8, {3}
    2f88:	00676966 	rsbeq	r6, r7, r6, ror #18
    2f8c:	5f434441 	svcpl	0x00434441
    2f90:	6c616e41 	stclvs	14, cr6, [r1], #-260
    2f94:	6157676f 	cmpvs	r7, pc, ror #14
    2f98:	64686374 	strbtvs	r6, [r8], #-884
    2f9c:	4100676f 	tstmi	r0, pc, ror #14
    2fa0:	495f4344 	ldmdbmi	pc, {r2, r6, r8, r9, lr}^
    2fa4:	63656a6e 	cmnvs	r5, #450560	; 0x6e000
    2fa8:	43646574 	cmnmi	r4, #486539264	; 0x1d000000
    2fac:	6e6e6168 	powvsez	f6, f6, #0.0
    2fb0:	6f436c65 	svcvs	0x00436c65
    2fb4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2fb8:	43444100 	movtmi	r4, #16640	; 0x4100
    2fbc:	6d61535f 	stclvs	3, cr5, [r1, #-380]!
    2fc0:	54656c70 	strbtpl	r6, [r5], #-3184
    2fc4:	00656d69 	rsbeq	r6, r5, r9, ror #26
    2fc8:	5f434441 	svcpl	0x00434441
    2fcc:	75727453 	ldrbvc	r7, [r2, #-1107]!
    2fd0:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    2fd4:	41007469 	tstmi	r0, r9, ror #8
    2fd8:	535f4344 	cmppl	pc, #268435457	; 0x10000001
    2fdc:	7774666f 	ldrbvc	r6, [r4, -pc, ror #12]!
    2fe0:	53657261 	cmnpl	r5, #268435462	; 0x10000006
    2fe4:	74726174 	ldrbtvc	r6, [r2], #-372
    2fe8:	656a6e49 	strbvs	r6, [sl, #-3657]!
    2fec:	64657463 	strbtvs	r7, [r5], #-1123
    2ff0:	766e6f43 	strbtvc	r6, [lr], -r3, asr #30
    2ff4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2ff8:	5f434441 	svcpl	0x00434441
    2ffc:	656a6e49 	strbvs	r6, [sl, #-3657]!
    3000:	64657463 	strbtvs	r7, [r5], #-1123
    3004:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    3008:	006c656e 	rsbeq	r6, ip, lr, ror #10
    300c:	5f434441 	svcpl	0x00434441
    3010:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    3014:	5367616c 	cmnpl	r7, #27	; 0x1b
    3018:	75746174 	ldrbvc	r6, [r4, #-372]!
    301c:	44410073 	strbmi	r0, [r1], #-115
    3020:	65545f43 	ldrbvs	r5, [r4, #-3907]
    3024:	6553706d 	ldrbvs	r7, [r3, #-109]
    3028:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
    302c:	66657256 	undefined
    3030:	43746e69 	cmnmi	r4, #1680	; 0x690
    3034:	4100646d 	tstmi	r0, sp, ror #8
    3038:	445f4344 	ldrbmi	r4, [pc], #836	; 3040 <__Stack_Size+0x2c40>
    303c:	4d637369 	stclmi	3, cr7, [r3, #-420]!
    3040:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    3044:	4100646d 	tstmi	r0, sp, ror #8
    3048:	525f4344 	subspl	r4, pc, #268435457	; 0x10000001
    304c:	74657365 	strbtvc	r7, [r5], #-869
    3050:	696c6143 	stmdbvs	ip!, {r0, r1, r6, r8, sp, lr}^
    3054:	74617262 	strbtvc	r7, [r1], #-610
    3058:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    305c:	5f434441 	svcpl	0x00434441
    3060:	69005449 	stmdbvs	r0, {r0, r3, r6, sl, ip, lr}
    3064:	73616d74 	cmnvc	r1, #7424	; 0x1d00
    3068:	4441006b 	strbmi	r0, [r1], #-107
    306c:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    3070:	65446570 	strbvs	r6, [r4, #-1392]
    3074:	44410066 	strbmi	r0, [r1], #-102
    3078:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    307c:	41007469 	tstmi	r0, r9, ror #8
    3080:	455f4344 	ldrbmi	r4, [pc, #-836]	; 2d44 <__Stack_Size+0x2944>
    3084:	72657478 	rsbvc	r7, r5, #2013265920	; 0x78000000
    3088:	546c616e 	strbtpl	r6, [ip], #-366
    308c:	49676972 	stmdbmi	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    3090:	63656a6e 	cmnvs	r5, #450560	; 0x6e000
    3094:	766e6f43 	strbtvc	r6, [lr], -r3, asr #30
    3098:	43444100 	movtmi	r4, #16640	; 0x4100
    309c:	414d445f 	cmpmi	sp, pc, asr r4
    30a0:	00646d43 	rsbeq	r6, r4, r3, asr #26
    30a4:	5f434441 	svcpl	0x00434441
    30a8:	44746547 	ldrbtmi	r6, [r4], #-1351
    30ac:	4d6c6175 	stfmie	f6, [ip, #-468]!
    30b0:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    30b4:	65766e6f 	ldrbvs	r6, [r6, #-3695]!
    30b8:	6f697372 	svcvs	0x00697372
    30bc:	6c61566e 	stclvs	6, cr5, [r1], #-440
    30c0:	46006575 	undefined
    30c4:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    30c8:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    30cc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    30d0:	424f0067 	submi	r0, pc, #103	; 0x67
    30d4:	4457495f 	ldrbmi	r4, [r7], #-2399
    30d8:	52570047 	subspl	r0, r7, #71	; 0x47
    30dc:	445f3250 	ldrbmi	r3, [pc], #592	; 30e4 <__Stack_Size+0x2ce4>
    30e0:	00617461 	rsbeq	r7, r1, r1, ror #8
    30e4:	535f424f 	cmppl	pc, #-268435452	; 0xf0000004
    30e8:	00504f54 	subseq	r4, r0, r4, asr pc
    30ec:	53414c46 	movtpl	r4, #7238	; 0x1c46
    30f0:	72455f48 	subvc	r5, r5, #288	; 0x120
    30f4:	4f657361 	svcmi	0x00657361
    30f8:	6f697470 	svcvs	0x00697470
    30fc:	7479426e 	ldrbtvc	r4, [r9], #-622
    3100:	72007365 	andvc	r7, r0, #-1811939327	; 0x94000001
    3104:	6f646165 	svcvs	0x00646165
    3108:	74737475 	ldrbtvc	r7, [r3], #-1141
    310c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    3110:	414c4600 	cmpmi	ip, r0, lsl #12
    3114:	455f4853 	ldrbmi	r4, [pc, #-2131]	; 28c9 <__Stack_Size+0x24c9>
    3118:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
    311c:	5052575f 	subspl	r5, r2, pc, asr r7
    3120:	414c4600 	cmpmi	ip, r0, lsl #12
    3124:	455f4853 	ldrbmi	r4, [pc, #-2131]	; 28d9 <__Stack_Size+0x24d9>
    3128:	65736172 	ldrbvs	r6, [r3, #-370]!
    312c:	65676150 	strbvs	r6, [r7, #-336]!
    3130:	414c4600 	cmpmi	ip, r0, lsl #12
    3134:	4c5f4853 	mrrcmi	8, 5, r4, pc, cr3
    3138:	6e657461 	cdpvs	4, 6, cr7, cr5, cr1, {3}
    313c:	46007963 	strmi	r7, [r0], -r3, ror #18
    3140:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    3144:	7465475f 	strbtvc	r4, [r5], #-1887
    3148:	66657250 	undefined
    314c:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    3150:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    3154:	74537265 	ldrbvc	r7, [r3], #-613
    3158:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    315c:	6c656400 	cfstrdvs	mvd6, [r5]
    3160:	57007961 	strpl	r7, [r0, -r1, ror #18]
    3164:	00525052 	subseq	r5, r2, r2, asr r0
    3168:	53414c46 	movtpl	r4, #7238	; 0x1c46
    316c:	6e555f48 	cdpvs	15, 5, cr5, cr5, cr8, {2}
    3170:	6b636f6c 	blvs	18def28 <__Stack_Size+0x18deb28>
    3174:	414c4600 	cmpmi	ip, r0, lsl #12
    3178:	455f4853 	ldrbmi	r4, [pc, #-2131]	; 292d <__Stack_Size+0x252d>
    317c:	65736172 	ldrbvs	r6, [r3, #-370]!
    3180:	506c6c41 	rsbpl	r6, ip, r1, asr #24
    3184:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    3188:	414c4600 	cmpmi	ip, r0, lsl #12
    318c:	535f4853 	cmppl	pc, #5439488	; 0x530000
    3190:	75746174 	ldrbvc	r6, [r4, #-372]!
    3194:	52570073 	subspl	r0, r7, #115	; 0x73
    3198:	57003050 	smlsdpl	r0, r0, r0, r3
    319c:	00315052 	eorseq	r5, r1, r2, asr r0
    31a0:	32505257 	subscc	r5, r0, #1879048197	; 0x70000005
    31a4:	50525700 	subspl	r5, r2, r0, lsl #14
    31a8:	4c460033 	mcrrmi	0, 3, r0, r6, cr3
    31ac:	5f485341 	svcpl	0x00485341
    31b0:	57746547 	ldrbpl	r6, [r4, -r7, asr #10]!
    31b4:	65746972 	ldrbvs	r6, [r4, #-2418]!
    31b8:	746f7250 	strbtvc	r7, [pc], #592	; 31c0 <__Stack_Size+0x2dc0>
    31bc:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    31c0:	704f6e6f 	subvc	r6, pc, pc, ror #28
    31c4:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    31c8:	65747942 	ldrbvs	r7, [r4, #-2370]!
    31cc:	54504f00 	ldrbpl	r4, [r0], #-3840
    31d0:	5259454b 	subspl	r4, r9, #314572800	; 0x12c00000
    31d4:	414c4600 	cmpmi	ip, r0, lsl #12
    31d8:	555f4853 	ldrbpl	r4, [pc, #-2131]	; 298d <__Stack_Size+0x258d>
    31dc:	4f726573 	svcmi	0x00726573
    31e0:	6f697470 	svcvs	0x00697470
    31e4:	7479426e 	ldrbtvc	r4, [r9], #-622
    31e8:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    31ec:	00676966 	rsbeq	r6, r7, r6, ror #18
    31f0:	53414c46 	movtpl	r4, #7238	; 0x1c46
    31f4:	65525f48 	ldrbvs	r5, [r2, #-3912]
    31f8:	754f6461 	strbvc	r6, [pc, #-1121]	; 2d9f <__Stack_Size+0x299f>
    31fc:	6f725074 	svcvs	0x00725074
    3200:	74636574 	strbtvc	r6, [r3], #-1396
    3204:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    3208:	73616c66 	cmnvc	r1, #26112	; 0x6600
    320c:	61747368 	cmnvs	r4, r8, ror #6
    3210:	00737574 	rsbseq	r7, r3, r4, ror r5
    3214:	65676150 	strbvs	r6, [r7, #-336]!
    3218:	6464415f 	strbtvs	r4, [r4], #-351
    321c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    3220:	414c4600 	cmpmi	ip, r0, lsl #12
    3224:	455f4853 	ldrbmi	r4, [pc, #-2131]	; 29d9 <__Stack_Size+0x25d9>
    3228:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
    322c:	0047505f 	subeq	r5, r7, pc, asr r0
    3230:	53414c46 	movtpl	r4, #7238	; 0x1c46
    3234:	6f4c5f48 	svcvs	0x004c5f48
    3238:	57006b63 	strpl	r6, [r0, -r3, ror #22]
    323c:	5f335052 	svcpl	0x00335052
    3240:	61746144 	cmnvs	r4, r4, asr #2
    3244:	6d747300 	ldclvs	3, cr7, [r4]
    3248:	31663233 	cmncc	r6, r3, lsr r2
    324c:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    3250:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    3254:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    3258:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    325c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    3260:	616c665f 	cmnvs	ip, pc, asr r6
    3264:	632e6873 	teqvs	lr, #7536640	; 0x730000
    3268:	414c4600 	cmpmi	ip, r0, lsl #12
    326c:	505f4853 	subspl	r4, pc, r3, asr r8
    3270:	65666572 	strbvs	r6, [r6, #-1394]!
    3274:	42686374 	rsbmi	r6, r8, #-805306367	; 0xd0000001
    3278:	65666675 	strbvs	r6, [r6, #-1653]!
    327c:	646d4372 	strbtvs	r4, [sp], #-882
    3280:	414c4600 	cmpmi	ip, r0, lsl #12
    3284:	475f4853 	undefined
    3288:	6c467465 	cfstrdvs	mvd7, [r6], {101}
    328c:	74536761 	ldrbvc	r6, [r3], #-1889
    3290:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    3294:	414c4600 	cmpmi	ip, r0, lsl #12
    3298:	435f4853 	cmpmi	pc, #5439488	; 0x530000
    329c:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    32a0:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    32a4:	414c4600 	cmpmi	ip, r0, lsl #12
    32a8:	435f4853 	cmpmi	pc, #5439488	; 0x530000
    32ac:	4c504d4f 	mrrcmi	13, 4, r4, r0, cr15
    32b0:	00455445 	subeq	r5, r5, r5, asr #8
    32b4:	53414c46 	movtpl	r4, #7238	; 0x1c46
    32b8:	55425f48 	strbpl	r5, [r2, #-3912]
    32bc:	57005953 	smlsdpl	r0, r3, r9, r5
    32c0:	5f315052 	svcpl	0x00315052
    32c4:	61746144 	cmnvs	r4, r4, asr #2
    32c8:	414c4600 	cmpmi	ip, r0, lsl #12
    32cc:	545f4853 	ldrbpl	r4, [pc], #2131	; 32d4 <__Stack_Size+0x2ed4>
    32d0:	4f454d49 	svcmi	0x00454d49
    32d4:	54005455 	strpl	r5, [r0], #-1109
    32d8:	6f656d69 	svcvs	0x00656d69
    32dc:	46007475 	undefined
    32e0:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    32e4:	7465475f 	strbtvc	r4, [r5], #-1887
    32e8:	64616552 	strbtvs	r6, [r1], #-1362
    32ec:	5074754f 	rsbspl	r7, r4, pc, asr #10
    32f0:	65746f72 	ldrbvs	r6, [r4, #-3954]!
    32f4:	6f697463 	svcvs	0x00697463
    32f8:	6174536e 	cmnvs	r4, lr, ror #6
    32fc:	00737574 	rsbseq	r7, r3, r4, ror r5
    3300:	535f424f 	cmppl	pc, #-268435452	; 0xf0000004
    3304:	59424454 	stmdbpl	r2, {r2, r4, r6, sl, lr}^
    3308:	50525700 	subspl	r5, r2, r0, lsl #14
    330c:	61445f30 	cmpvs	r4, r0, lsr pc
    3310:	46006174 	undefined
    3314:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    3318:	6c61485f 	stclvs	8, cr4, [r1], #-380
    331c:	63794366 	cmnvs	r9, #-1744830463	; 0x98000001
    3320:	6341656c 	movtvs	r6, #5484	; 0x156c
    3324:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    3328:	414c4600 	cmpmi	ip, r0, lsl #12
    332c:	475f4853 	undefined
    3330:	74537465 	ldrbvc	r7, [r3], #-1125
    3334:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    3338:	414c4600 	cmpmi	ip, r0, lsl #12
    333c:	455f4853 	ldrbmi	r4, [pc, #-2131]	; 2af1 <__Stack_Size+0x26f1>
    3340:	6c62616e 	stfvse	f6, [r2], #-440
    3344:	69725765 	ldmdbvs	r2!, {r0, r2, r5, r6, r8, r9, sl, ip, lr}^
    3348:	72506574 	subsvc	r6, r0, #486539264	; 0x1d000000
    334c:	6365746f 	cmnvs	r5, #1862270976	; 0x6f000000
    3350:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    3354:	414c4600 	cmpmi	ip, r0, lsl #12
    3358:	535f4853 	cmppl	pc, #5439488	; 0x530000
    335c:	614c7465 	cmpvs	ip, r5, ror #8
    3360:	636e6574 	cmnvs	lr, #486539264	; 0x1d000000
    3364:	4c460079 	mcrrmi	0, 7, r0, r6, cr9
    3368:	5f485341 	svcpl	0x00485341
    336c:	666c6148 	strbtvs	r6, [ip], -r8, asr #2
    3370:	6c637943 	stclvs	9, cr7, [r3], #-268
    3374:	63634165 	cmnvs	r3, #1073741849	; 0x40000019
    3378:	43737365 	cmnmi	r3, #-1811939327	; 0x94000001
    337c:	4600646d 	strmi	r6, [r0], -sp, ror #8
    3380:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    3384:	6f72505f 	svcvs	0x0072505f
    3388:	6d617267 	sfmvs	f7, 2, [r1, #-412]!
    338c:	6974704f 	ldmdbvs	r4!, {r0, r1, r2, r3, r6, ip, sp, lr}^
    3390:	79426e6f 	stmdbvc	r2, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3394:	61446574 	cmpvs	r4, r4, ror r5
    3398:	46006174 	undefined
    339c:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    33a0:	7465475f 	strbtvc	r4, [r5], #-1887
    33a4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    33a8:	6974704f 	ldmdbvs	r4!, {r0, r1, r2, r3, r6, ip, sp, lr}^
    33ac:	79426e6f 	stmdbvc	r2, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    33b0:	46006574 	undefined
    33b4:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    33b8:	6f72505f 	svcvs	0x0072505f
    33bc:	6d617267 	sfmvs	f7, 2, [r1, #-412]!
    33c0:	666c6148 	strbtvs	r6, [ip], -r8, asr #2
    33c4:	64726f57 	ldrbtvs	r6, [r2], #-3927
    33c8:	414c4600 	cmpmi	ip, r0, lsl #12
    33cc:	465f4853 	undefined
    33d0:	0047414c 	subeq	r4, r7, ip, asr #2
    33d4:	52455355 	subpl	r5, r5, #1409286145	; 0x54000001
    33d8:	74614400 	strbtvc	r4, [r1], #-1024
    33dc:	44003061 	strmi	r3, [r0], #-97
    33e0:	31617461 	cmncc	r1, r1, ror #8
    33e4:	414c4600 	cmpmi	ip, r0, lsl #12
    33e8:	505f4853 	subspl	r4, pc, r3, asr r8
    33ec:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    33f0:	414c4600 	cmpmi	ip, r0, lsl #12
    33f4:	495f4853 	ldmdbmi	pc, {r0, r1, r4, r6, fp, lr}^
    33f8:	4c460054 	mcrrmi	0, 5, r0, r6, cr4
    33fc:	5f485341 	svcpl	0x00485341
    3400:	676f7250 	undefined
    3404:	576d6172 	undefined
    3408:	0064726f 	rsbeq	r7, r4, pc, ror #4
    340c:	45534552 	ldrbmi	r4, [r3, #-1362]
    3410:	44455652 	strbmi	r5, [r5], #-1618
    3414:	414c4600 	cmpmi	ip, r0, lsl #12
    3418:	575f4853 	undefined
    341c:	46746961 	ldrbtmi	r6, [r4], -r1, ror #18
    3420:	614c726f 	cmpvs	ip, pc, ror #4
    3424:	704f7473 	subvc	r7, pc, r3, ror r4
    3428:	74617265 	strbtvc	r7, [r1], #-613
    342c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    3430:	53414c46 	movtpl	r4, #7238	; 0x1c46
    3434:	72505f48 	subsvc	r5, r0, #288	; 0x120
    3438:	74656665 	strbtvc	r6, [r5], #-1637
    343c:	75426863 	strbvc	r6, [r2, #-2147]
    3440:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    3444:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    3448:	00736f70 	rsbseq	r6, r3, r0, ror pc
    344c:	5f746942 	svcpl	0x00746942
    3450:	00544553 	subseq	r4, r4, r3, asr r5
    3454:	4f495047 	svcmi	0x00495047
    3458:	6165525f 	cmnvs	r5, pc, asr r2
    345c:	74754f64 	ldrbtvc	r4, [r5], #-3940
    3460:	44747570 	ldrbtmi	r7, [r4], #-1392
    3464:	00617461 	rsbeq	r7, r1, r1, ror #8
    3468:	4f495047 	svcmi	0x00495047
    346c:	6576455f 	ldrbvs	r4, [r6, #-1375]!
    3470:	754f746e 	strbvc	r7, [pc, #-1134]	; 300a <__Stack_Size+0x2c0a>
    3474:	74757074 	ldrbtvc	r7, [r5], #-116
    3478:	00646d43 	rsbeq	r6, r4, r3, asr #26
    347c:	4f495047 	svcmi	0x00495047
    3480:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    3484:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    3488:	0074696e 	rsbseq	r6, r4, lr, ror #18
    348c:	56746942 	ldrbtpl	r6, [r4], -r2, asr #18
    3490:	42006c61 	andmi	r6, r0, #24832	; 0x6100
    3494:	525f7469 	subspl	r7, pc, #1761607680	; 0x69000000
    3498:	54455345 	strbpl	r5, [r5], #-837
    349c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    34a0:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
    34a4:	42657469 	rsbmi	r7, r5, #1761607680	; 0x69000000
    34a8:	47007469 	strmi	r7, [r0, -r9, ror #8]
    34ac:	5f4f4950 	svcpl	0x004f4950
    34b0:	42746553 	rsbsmi	r6, r4, #348127232	; 0x14c00000
    34b4:	00737469 	rsbseq	r7, r3, r9, ror #8
    34b8:	4f495047 	svcmi	0x00495047
    34bc:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    34c0:	58450074 	stmdapl	r5, {r2, r4, r5, r6}^
    34c4:	52434954 	subpl	r4, r3, #1376256	; 0x150000
    34c8:	6d747300 	ldclvs	3, cr7, [r4]
    34cc:	31663233 	cmncc	r6, r3, lsr r2
    34d0:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    34d4:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    34d8:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    34dc:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    34e0:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    34e4:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
    34e8:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    34ec:	6d6e6970 	stclvs	9, cr6, [lr, #-448]!
    34f0:	006b7361 	rsbeq	r7, fp, r1, ror #6
    34f4:	4f495047 	svcmi	0x00495047
    34f8:	726f505f 	rsbvc	r5, pc, #95	; 0x5f
    34fc:	756f5374 	strbvc	r5, [pc, #-884]!	; 3190 <__Stack_Size+0x2d90>
    3500:	00656372 	rsbeq	r6, r5, r2, ror r3
    3504:	4f495047 	svcmi	0x00495047
    3508:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    350c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    3510:	4f495047 	svcmi	0x00495047
    3514:	6576455f 	ldrbvs	r4, [r6, #-1375]!
    3518:	754f746e 	strbvc	r7, [pc, #-1134]	; 30b2 <__Stack_Size+0x2cb2>
    351c:	74757074 	ldrbtvc	r7, [r5], #-116
    3520:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3524:	47006769 	strmi	r6, [r0, -r9, ror #14]
    3528:	5f4f4950 	svcpl	0x004f4950
    352c:	616d6552 	cmnvs	sp, r2, asr r5
    3530:	50470070 	subpl	r0, r7, r0, ror r0
    3534:	525f4f49 	subspl	r4, pc, #292	; 0x124
    3538:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    353c:	7475706e 	ldrbtvc	r7, [r5], #-110
    3540:	61746144 	cmnvs	r4, r4, asr #2
    3544:	00746942 	rsbseq	r6, r4, r2, asr #18
    3548:	4f495047 	svcmi	0x00495047
    354c:	7365525f 	cmnvc	r5, #-268435451	; 0xf0000005
    3550:	69427465 	stmdbvs	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
    3554:	50007374 	andpl	r7, r0, r4, ror r3
    3558:	5674726f 	ldrbtpl	r7, [r4], -pc, ror #4
    355c:	63006c61 	movwvs	r6, #3169	; 0xc61
    3560:	65727275 	ldrbvs	r7, [r2, #-629]!
    3564:	6f6d746e 	svcvs	0x006d746e
    3568:	47006564 	strmi	r6, [r0, -r4, ror #10]
    356c:	5f4f4950 	svcpl	0x004f4950
    3570:	526e6950 	rsbpl	r6, lr, #1310720	; 0x140000
    3574:	70616d65 	rsbvc	r6, r1, r5, ror #26
    3578:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    357c:	47006769 	strmi	r6, [r0, -r9, ror #14]
    3580:	5f4f4950 	svcpl	0x004f4950
    3584:	536e6950 	cmnpl	lr, #1310720	; 0x140000
    3588:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    358c:	50470065 	subpl	r0, r7, r5, rrx
    3590:	525f4f49 	subspl	r4, pc, #292	; 0x124
    3594:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    3598:	7475706e 	ldrbtvc	r7, [r5], #-110
    359c:	61746144 	cmnvs	r4, r4, asr #2
    35a0:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    35a4:	6b73616d 	blvs	1cdbb60 <__Stack_Size+0x1cdb760>
    35a8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    35ac:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    35b0:	636f4c6e 	cmnvs	pc, #28160	; 0x6e00
    35b4:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
    35b8:	00676966 	rsbeq	r6, r7, r6, ror #18
    35bc:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    35c0:	70746e65 	rsbsvc	r6, r4, r5, ror #28
    35c4:	47006e69 	strmi	r6, [r0, -r9, ror #28]
    35c8:	5f4f4950 	svcpl	0x004f4950
    35cc:	74697257 	strbtvc	r7, [r9], #-599
    35d0:	6d740065 	ldclvs	0, cr0, [r4, #-404]!
    35d4:	47003170 	smlsdxmi	r0, r0, r1, r3
    35d8:	5f4f4950 	svcpl	0x004f4950
    35dc:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    35e0:	656e694c 	strbvs	r6, [lr, #-2380]!
    35e4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    35e8:	42006769 	andmi	r6, r0, #27525120	; 0x1a40000
    35ec:	63417469 	movtvs	r7, #5225	; 0x1469
    35f0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    35f4:	50414d00 	subpl	r4, r1, r0, lsl #26
    35f8:	50470052 	subpl	r0, r7, r2, asr r0
    35fc:	00784f49 	rsbseq	r4, r8, r9, asr #30
    3600:	4f495047 	svcmi	0x00495047
    3604:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    3608:	72745374 	rsbsvc	r5, r4, #-805306367	; 0xd0000001
    360c:	00746375 	rsbseq	r6, r4, r5, ror r3
    3610:	52435645 	subpl	r5, r3, #72351744	; 0x4500000
    3614:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    3618:	65525f4f 	ldrbvs	r5, [r2, #-3919]
    361c:	754f6461 	strbvc	r6, [pc, #-1121]	; 31c3 <__Stack_Size+0x2dc3>
    3620:	74757074 	ldrbtvc	r7, [r5], #-116
    3624:	61746144 	cmnvs	r4, r4, asr #2
    3628:	00746942 	rsbseq	r6, r4, r2, asr #18
    362c:	4f495047 	svcmi	0x00495047
    3630:	4946415f 	stmdbmi	r6, {r0, r1, r2, r3, r4, r6, r8, lr}^
    3634:	4965444f 	stmdbmi	r5!, {r0, r1, r2, r3, r6, sl, lr}^
    3638:	0074696e 	rsbseq	r6, r4, lr, ror #18
    363c:	52424149 	subpl	r4, r2, #1073741842	; 0x40000012
    3640:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    3644:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    3648:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    364c:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    3650:	656e6e61 	strbvs	r6, [lr, #-3681]!
    3654:	6e65506c 	cdpvs	0, 6, cr5, cr5, cr12, {3}
    3658:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    365c:	00746942 	rsbseq	r6, r4, r2, asr #18
    3660:	4349564e 	movtmi	r5, #38478	; 0x964e
    3664:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    3668:	72745374 	rsbsvc	r5, r4, #-805306367	; 0xd0000001
    366c:	00746375 	rsbseq	r6, r4, r5, ror r3
    3670:	4349564e 	movtmi	r5, #38478	; 0x964e
    3674:	7465475f 	strbtvc	r4, [r5], #-1887
    3678:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    367c:	50746e65 	rsbspl	r6, r4, r5, ror #28
    3680:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    3684:	5249676e 	subpl	r6, r9, #28835840	; 0x1b80000
    3688:	61684351 	cmnvs	r8, r1, asr r3
    368c:	6c656e6e 	stclvs	14, cr6, [r5], #-440
    3690:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    3694:	65475f43 	strbvs	r5, [r7, #-3907]
    3698:	75614674 	strbvc	r4, [r1, #-1652]!
    369c:	6441746c 	strbvs	r7, [r1], #-1132
    36a0:	73657264 	cmnvc	r5, #1073741830	; 0x40000006
    36a4:	79530073 	ldmdbvc	r3, {r0, r1, r4, r5, r6}^
    36a8:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
    36ac:	646e6148 	strbtvs	r6, [lr], #-328
    36b0:	5372656c 	cmnpl	r2, #452984832	; 0x1b000000
    36b4:	72506275 	subsvc	r6, r0, #1342177287	; 0x50000007
    36b8:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    36bc:	4e007974 	mcrmi	9, 0, r7, cr0, cr4, {3}
    36c0:	5f434956 	svcpl	0x00434956
    36c4:	50544553 	subspl	r4, r4, r3, asr r5
    36c8:	414d4952 	cmpmi	sp, r2, asr r9
    36cc:	4e004b53 	mcrmi	11, 0, r4, cr0, cr3, {2}
    36d0:	5f434956 	svcpl	0x00434956
    36d4:	656e6547 	strbvs	r6, [lr, #-1351]!
    36d8:	65746172 	ldrbvs	r6, [r4, #-370]!
    36dc:	74737953 	ldrbtvc	r7, [r3], #-2387
    36e0:	65526d65 	ldrbvs	r6, [r2, #-3429]
    36e4:	00746573 	rsbseq	r6, r4, r3, ror r5
    36e8:	70706d74 	rsbsvc	r6, r0, r4, ror sp
    36ec:	4e006572 	cfrshl64mi	mvdx0, mvdx2, r6
    36f0:	5f434956 	svcpl	0x00434956
    36f4:	45534552 	ldrbmi	r4, [r3, #-1362]
    36f8:	49525054 	ldmdbmi	r2, {r2, r4, r6, ip, lr}^
    36fc:	4b53414d 	blmi	14d3c38 <__Stack_Size+0x14d3838>
    3700:	75616600 	strbvc	r6, [r1, #-1536]!
    3704:	6461746c 	strbtvs	r7, [r1], #-1132
    3708:	73657264 	cmnvc	r5, #1073741830	; 0x40000006
    370c:	564e0073 	undefined
    3710:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    3714:	65747379 	ldrbvs	r7, [r4, #-889]!
    3718:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    371c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    3720:	6f697250 	svcvs	0x00697250
    3724:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    3728:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    372c:	73006769 	movwvc	r6, #1897	; 0x769
    3730:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    3734:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    3738:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    373c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    3740:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!
    3744:	31663233 	cmncc	r6, r3, lsr r2
    3748:	6e5f7830 	mrcvs	8, 2, r7, cr15, cr0, {1}
    374c:	2e636976 	mcrcs	9, 3, r6, cr3, cr6, {3}
    3750:	564e0063 	strbpl	r0, [lr], -r3, rrx
    3754:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    3758:	50437465 	subpl	r7, r3, r5, ror #8
    375c:	00444955 	subeq	r4, r4, r5, asr r9
    3760:	4349564e 	movtmi	r5, #38478	; 0x964e
    3764:	6972505f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, lr}^
    3768:	7469726f 	strbtvc	r7, [r9], #-623
    376c:	6f724779 	svcvs	0x00724779
    3770:	4e007075 	mcrmi	0, 0, r7, cr0, cr5, {3}
    3774:	5f434956 	svcpl	0x00434956
    3778:	45534552 	ldrbmi	r4, [r3, #-1362]
    377c:	55414654 	strbpl	r4, [r1, #-1620]
    3780:	414d544c 	cmpmi	sp, ip, asr #8
    3784:	4e004b53 	mcrmi	11, 0, r4, cr0, cr3, {2}
    3788:	5f434956 	svcpl	0x00434956
    378c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    3790:	65727275 	ldrbvs	r7, [r2, #-629]!
    3794:	6341746e 	movtvs	r7, #5230	; 0x146e
    3798:	65766974 	ldrbvs	r6, [r6, #-2420]!
    379c:	646e6148 	strbtvs	r6, [lr], #-328
    37a0:	0072656c 	rsbseq	r6, r2, ip, ror #10
    37a4:	74737953 	ldrbtvc	r7, [r3], #-2387
    37a8:	61486d65 	cmpvs	r8, r5, ror #26
    37ac:	656c646e 	strbvs	r6, [ip, #-1134]!
    37b0:	43490072 	movtmi	r0, #36978	; 0x9072
    37b4:	52005253 	andpl	r5, r0, #805306373	; 0x30000005
    37b8:	56524553 	undefined
    37bc:	00314445 	eorseq	r4, r1, r5, asr #8
    37c0:	4349564e 	movtmi	r5, #38478	; 0x964e
    37c4:	6e65475f 	mcrvs	7, 3, r4, cr5, cr15, {2}
    37c8:	74617265 	strbtvc	r7, [r1], #-613
    37cc:	726f4365 	rsbvc	r4, pc, #-1811939327	; 0x94000001
    37d0:	73655265 	cmnvc	r5, #1342177286	; 0x50000006
    37d4:	4e007465 	cdpmi	4, 0, cr7, cr0, cr5, {3}
    37d8:	5f434956 	svcpl	0x00434956
    37dc:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    37e0:	65747379 	ldrbvs	r7, [r4, #-889]!
    37e4:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    37e8:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    37ec:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    37f0:	69426576 	stmdbvs	r2, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    37f4:	61745374 	cmnvs	r4, r4, ror r3
    37f8:	00737574 	rsbseq	r7, r3, r4, ror r5
    37fc:	4349564e 	movtmi	r5, #38478	; 0x964e
    3800:	5341425f 	movtpl	r4, #4703	; 0x125f
    3804:	49525045 	ldmdbmi	r2, {r0, r2, r6, ip, lr}^
    3808:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
    380c:	42004749 	andmi	r4, r0, #19136512	; 0x1240000
    3810:	00524146 	subseq	r4, r2, r6, asr #2
    3814:	4349564e 	movtmi	r5, #38478	; 0x964e
    3818:	7465535f 	strbtvc	r5, [r5], #-863
    381c:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    3820:	6e6e6168 	powvsez	f6, f6, #0.0
    3824:	65506c65 	ldrbvs	r6, [r0, #-3173]
    3828:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    382c:	74694267 	strbtvc	r4, [r9], #-615
    3830:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    3834:	00736f70 	rsbseq	r6, r3, r0, ror pc
    3838:	52534643 	subspl	r4, r3, #70254592	; 0x4300000
    383c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    3840:	65535f43 	ldrbvs	r5, [r3, #-3907]
    3844:	73795374 	cmnvc	r9, #-805306367	; 0xd0000001
    3848:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    384c:	6c646e61 	stclvs	14, cr6, [r4], #-388
    3850:	65507265 	ldrbvs	r7, [r0, #-613]
    3854:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    3858:	74694267 	strbtvc	r4, [r9], #-615
    385c:	52494100 	subpl	r4, r9, #0	; 0x0
    3860:	4e005243 	cdpmi	2, 0, cr5, cr0, cr3, {2}
    3864:	5f434956 	svcpl	0x00434956
    3868:	56746553 	undefined
    386c:	6f746365 	svcvs	0x00746365
    3870:	62615472 	rsbvs	r5, r1, #1912602624	; 0x72000000
    3874:	4900656c 	stmdbmi	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
    3878:	00525043 	subseq	r5, r2, r3, asr #32
    387c:	4349564e 	movtmi	r5, #38478	; 0x964e
    3880:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    3884:	48530074 	ldmdami	r3, {r2, r4, r5, r6}^
    3888:	53005250 	movwpl	r5, #592	; 0x250
    388c:	52534348 	subspl	r4, r3, #536870913	; 0x20000001
    3890:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    3894:	65475f43 	strbvs	r5, [r7, #-3907]
    3898:	53414274 	movtpl	r4, #4724	; 0x1274
    389c:	49525045 	ldmdbmi	r2, {r0, r2, r6, ip, lr}^
    38a0:	464d4d00 	strbmi	r4, [sp], -r0, lsl #26
    38a4:	74005241 	strvc	r5, [r0], #-577
    38a8:	7573706d 	ldrbvc	r7, [r3, #-109]!
    38ac:	564e0062 	strbpl	r0, [lr], -r2, rrx
    38b0:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    38b4:	65747379 	ldrbvs	r7, [r4, #-889]!
    38b8:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    38bc:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    38c0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    38c4:	4e006769 	cdpmi	7, 0, cr6, cr0, cr9, {3}
    38c8:	5f434956 	svcpl	0x00434956
    38cc:	74737953 	ldrbtvc	r7, [r3], #-2387
    38d0:	504c6d65 	subpl	r6, ip, r5, ror #26
    38d4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    38d8:	4e006769 	cdpmi	7, 0, cr6, cr0, cr9, {3}
    38dc:	5f434956 	svcpl	0x00434956
    38e0:	75727453 	ldrbvc	r7, [r2, #-1107]!
    38e4:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    38e8:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    38ec:	00524543 	subseq	r4, r2, r3, asr #10
    38f0:	70706d74 	rsbsvc	r6, r0, r4, ror sp
    38f4:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    38f8:	00797469 	rsbseq	r7, r9, r9, ror #8
    38fc:	524f5456 	subpl	r5, pc, #1442840576	; 0x56000000
    3900:	50534900 	subspl	r4, r3, r0, lsl #18
    3904:	46440052 	undefined
    3908:	48005253 	stmdami	r0, {r0, r1, r4, r6, r9, ip, lr}
    390c:	00525346 	subseq	r5, r2, r6, asr #6
    3910:	4349564e 	movtmi	r5, #38478	; 0x964e
    3914:	5445535f 	strbpl	r5, [r5], #-863
    3918:	4c554146 	ldfmie	f4, [r5], {70}
    391c:	53414d54 	movtpl	r4, #7508	; 0x1d54
    3920:	4641004b 	strbmi	r0, [r1], -fp, asr #32
    3924:	49005253 	stmdbmi	r0, {r0, r1, r4, r6, r9, ip, lr}
    3928:	00524553 	subseq	r4, r2, r3, asr r5
    392c:	4349564e 	movtmi	r5, #38478	; 0x964e
    3930:	7465475f 	strbtvc	r4, [r5], #-1887
    3934:	6c756146 	ldfvse	f6, [r5], #-280
    3938:	6e614874 	mcrvs	8, 3, r4, cr1, cr4, {3}
    393c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    3940:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    3944:	00736563 	rsbseq	r6, r3, r3, ror #10
    3948:	32706d74 	rsbscc	r6, r0, #7424	; 0x1d00
    394c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    3950:	65475f43 	strbvs	r5, [r7, #-3907]
    3954:	73795374 	cmnvc	r9, #-805306367	; 0xd0000001
    3958:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    395c:	6c646e61 	stclvs	14, cr6, [r4], #-388
    3960:	65507265 	ldrbvs	r7, [r0, #-613]
    3964:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    3968:	74694267 	strbtvc	r4, [r9], #-615
    396c:	74617453 	strbtvc	r7, [r1], #-1107
    3970:	4e007375 	mcrmi	3, 0, r7, cr0, cr5, {3}
    3974:	5f434956 	svcpl	0x00434956
    3978:	61656c43 	cmnvs	r5, r3, asr #24
    397c:	73795372 	cmnvc	r9, #-939524095	; 0xc8000001
    3980:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    3984:	6c646e61 	stclvs	14, cr6, [r4], #-388
    3988:	65507265 	ldrbvs	r7, [r0, #-613]
    398c:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    3990:	74694267 	strbtvc	r4, [r9], #-615
    3994:	75616600 	strbvc	r6, [r1, #-1536]!
    3998:	6f73746c 	svcvs	0x0073746c
    399c:	65637275 	strbvs	r7, [r3, #-629]!
    39a0:	79530073 	ldmdbvc	r3, {r0, r1, r4, r5, r6}^
    39a4:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
    39a8:	646e6148 	strbtvs	r6, [lr], #-328
    39ac:	5072656c 	rsbspl	r6, r2, ip, ror #10
    39b0:	6d656572 	cfstr64vs	mvdx6, [r5, #-456]!
    39b4:	6f697470 	svcvs	0x00697470
    39b8:	6972506e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, ip, lr}^
    39bc:	7469726f 	strbtvc	r7, [r9], #-623
    39c0:	564e0079 	undefined
    39c4:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    39c8:	52497465 	subpl	r7, r9, #1694498816	; 0x65000000
    39cc:	61684351 	cmnvs	r8, r1, asr r3
    39d0:	6c656e6e 	stclvs	14, cr6, [r5], #-440
    39d4:	646e6550 	strbtvs	r6, [lr], #-1360
    39d8:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    39dc:	74537469 	ldrbvc	r7, [r3], #-1129
    39e0:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    39e4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    39e8:	43535f43 	cmpmi	r3, #268	; 0x10c
    39ec:	49654442 	stmdbmi	r5!, {r1, r6, sl, lr}^
    39f0:	0074696e 	rsbseq	r6, r4, lr, ror #18
    39f4:	5077654e 	rsbspl	r6, r7, lr, asr #10
    39f8:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    39fc:	00797469 	rsbseq	r7, r9, r9, ror #8
    3a00:	4349564e 	movtmi	r5, #38478	; 0x964e
    3a04:	6365565f 	cmnvs	r5, #99614720	; 0x5f00000
    3a08:	62615474 	rsbvs	r5, r1, #1946157056	; 0x74000000
    3a0c:	74636100 	strbtvc	r6, [r3], #-256
    3a10:	69657669 	stmdbvs	r5!, {r0, r3, r5, r6, r9, sl, ip, sp, lr}^
    3a14:	74737172 	ldrbtvc	r7, [r3], #-370
    3a18:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    3a1c:	6e616800 	cdpvs	8, 6, cr6, cr1, cr0, {0}
    3a20:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    3a24:	6b73616d 	blvs	1cdbfe0 <__Stack_Size+0x1cdbbe0>
    3a28:	776f4c00 	strbvc	r4, [pc, -r0, lsl #24]!
    3a2c:	65776f50 	ldrbvs	r6, [r7, #-3920]!
    3a30:	646f4d72 	strbtvs	r4, [pc], #3442	; 3a38 <__Stack_Size+0x3638>
    3a34:	564e0065 	strbpl	r0, [lr], -r5, rrx
    3a38:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    3a3c:	52497465 	subpl	r7, r9, #1694498816	; 0x65000000
    3a40:	61684351 	cmnvs	r8, r1, asr r3
    3a44:	6c656e6e 	stclvs	14, cr6, [r5], #-440
    3a48:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    3a4c:	69426576 	stmdbvs	r2, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    3a50:	61745374 	cmnvs	r4, r4, ror r3
    3a54:	00737574 	rsbseq	r7, r3, r4, ror r5
    3a58:	4349564e 	movtmi	r5, #38478	; 0x964e
    3a5c:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    3a60:	0074696e 	rsbseq	r6, r4, lr, ror #18
    3a64:	4349564e 	movtmi	r5, #38478	; 0x964e
    3a68:	6972505f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, lr}^
    3a6c:	7469726f 	strbtvc	r7, [r9], #-623
    3a70:	6f724779 	svcvs	0x00724779
    3a74:	6f437075 	svcvs	0x00437075
    3a78:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3a7c:	6e657000 	cdpvs	0, 6, cr7, cr5, cr0, {0}
    3a80:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    3a84:	73717269 	cmnvc	r1, #-1879048186	; 0x90000006
    3a88:	75746174 	ldrbvc	r6, [r4, #-372]!
    3a8c:	57500073 	undefined
    3a90:	6e455f52 	mcrvs	15, 2, r5, cr5, cr2, {2}
    3a94:	53726574 	cmnpl	r2, #486539264	; 0x1d000000
    3a98:	444e4154 	strbmi	r4, [lr], #-340
    3a9c:	6f4d5942 	svcvs	0x004d5942
    3aa0:	50006564 	andpl	r6, r0, r4, ror #10
    3aa4:	435f5257 	cmpmi	pc, #1879048197	; 0x70000005
    3aa8:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    3aac:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    3ab0:	52575000 	subspl	r5, r7, #0	; 0x0
    3ab4:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    3ab8:	0074696e 	rsbseq	r6, r4, lr, ror #18
    3abc:	5f525750 	svcpl	0x00525750
    3ac0:	75676552 	strbvc	r6, [r7, #-1362]!
    3ac4:	6f74616c 	svcvs	0x0074616c
    3ac8:	57500072 	undefined
    3acc:	56505f52 	usubaddxpl	r5, r0, r2
    3ad0:	76654c44 	strbtvc	r4, [r5], -r4, asr #24
    3ad4:	50006c65 	andpl	r6, r0, r5, ror #24
    3ad8:	465f5257 	undefined
    3adc:	0047414c 	subeq	r4, r7, ip, asr #2
    3ae0:	5f525750 	svcpl	0x00525750
    3ae4:	43445650 	movtmi	r5, #18000	; 0x4650
    3ae8:	7300646d 	movwvc	r6, #1133	; 0x46d
    3aec:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    3af0:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    3af4:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    3af8:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    3afc:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!
    3b00:	31663233 	cmncc	r6, r3, lsr r2
    3b04:	705f7830 	subsvc	r7, pc, r0, lsr r8
    3b08:	632e7277 	teqvs	lr, #1879048199	; 0x70000007
    3b0c:	52575000 	subspl	r5, r7, #0	; 0x0
    3b10:	4456505f 	ldrbmi	r5, [r6], #-95
    3b14:	6576654c 	ldrbvs	r6, [r6, #-1356]!
    3b18:	6e6f436c 	cdpvs	3, 6, cr4, cr15, cr12, {3}
    3b1c:	00676966 	rsbeq	r6, r7, r6, ror #18
    3b20:	5f525750 	svcpl	0x00525750
    3b24:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    3b28:	5367616c 	cmnpl	r7, #27	; 0x1b
    3b2c:	75746174 	ldrbvc	r6, [r4, #-372]!
    3b30:	57500073 	undefined
    3b34:	6e455f52 	mcrvs	15, 2, r5, cr5, cr2, {2}
    3b38:	53726574 	cmnpl	r2, #486539264	; 0x1d000000
    3b3c:	4d504f54 	ldclmi	15, cr4, [r0, #-336]
    3b40:	0065646f 	rsbeq	r6, r5, pc, ror #8
    3b44:	5f525750 	svcpl	0x00525750
    3b48:	504f5453 	subpl	r5, pc, r3, asr r4
    3b4c:	72746e45 	rsbsvc	r6, r4, #1104	; 0x450
    3b50:	57500079 	undefined
    3b54:	61425f52 	cmpvs	r2, r2, asr pc
    3b58:	70756b63 	rsbsvc	r6, r5, r3, ror #22
    3b5c:	65636341 	strbvs	r6, [r3, #-833]!
    3b60:	6d437373 	stclvs	3, cr7, [r3, #-460]
    3b64:	57500064 	ldrbpl	r0, [r0, -r4, rrx]
    3b68:	61575f52 	cmpvs	r7, r2, asr pc
    3b6c:	7055656b 	subsvc	r6, r5, fp, ror #10
    3b70:	436e6950 	cmnmi	lr, #1310720	; 0x140000
    3b74:	4100646d 	tstmi	r0, sp, ror #8
    3b78:	52314250 	eorspl	r4, r1, #5	; 0x5
    3b7c:	00525453 	subseq	r5, r2, r3, asr r4
    3b80:	5f434352 	svcpl	0x00434352
    3b84:	4b4c4348 	blmi	13148ac <__Stack_Size+0x13144ac>
    3b88:	43435200 	movtmi	r5, #12800	; 0x3200
    3b8c:	4344415f 	movtmi	r4, #16735	; 0x415f
    3b90:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    3b94:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3b98:	43520067 	cmpmi	r2, #103	; 0x67
    3b9c:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    3ba0:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    3ba4:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
    3ba8:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    3bac:	00746942 	rsbseq	r6, r4, r2, asr #18
    3bb0:	5f434352 	svcpl	0x00434352
    3bb4:	32425041 	subcc	r5, r2, #65	; 0x41
    3bb8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3bbc:	65526870 	ldrbvs	r6, [r2, #-2160]
    3bc0:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    3bc4:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    3bc8:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3
    3bcc:	52004553 	andpl	r4, r0, #348127232	; 0x14c00000
    3bd0:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    3bd4:	54497465 	strbpl	r7, [r9], #-1125
    3bd8:	74617453 	strbtvc	r7, [r1], #-1107
    3bdc:	42007375 	andmi	r7, r0, #-738197503	; 0xd4000001
    3be0:	00524344 	subseq	r4, r2, r4, asr #6
    3be4:	5f434352 	svcpl	0x00434352
    3be8:	32425041 	subcc	r5, r2, #65	; 0x41
    3bec:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3bf0:	52006870 	andpl	r6, r0, #7340032	; 0x700000
    3bf4:	505f4343 	subspl	r4, pc, r3, asr #6
    3bf8:	324b4c43 	subcc	r4, fp, #17152	; 0x4300
    3bfc:	43435200 	movtmi	r5, #12800	; 0x3200
    3c00:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    3c04:	00646d43 	rsbeq	r6, r4, r3, asr #26
    3c08:	5f434352 	svcpl	0x00434352
    3c0c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    3c10:	7954736b 	ldmdbvc	r4, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}^
    3c14:	65446570 	strbvs	r6, [r4, #-1392]
    3c18:	43520066 	cmpmi	r2, #102	; 0x66
    3c1c:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    3c20:	6c754d4c 	ldclvs	13, cr4, [r5], #-304
    3c24:	43435200 	movtmi	r5, #12800	; 0x3200
    3c28:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    3c2c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3c30:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    3c34:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    3c38:	4300646d 	movwmi	r6, #1133	; 0x46d
    3c3c:	00524746 	subseq	r4, r2, r6, asr #14
    3c40:	4b4c4348 	blmi	1314968 <__Stack_Size+0x1314568>
    3c44:	6572465f 	ldrbvs	r4, [r2, #-1631]!
    3c48:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    3c4c:	41007963 	tstmi	r0, r3, ror #18
    3c50:	45314250 	ldrmi	r4, [r1, #-592]!
    3c54:	7000524e 	andvc	r5, r0, lr, asr #4
    3c58:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    3c5c:	43435200 	movtmi	r5, #12800	; 0x3200
    3c60:	4f434d5f 	svcmi	0x00434d5f
    3c64:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3c68:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    3c6c:	445f4343 	ldrbmi	r4, [pc], #835	; 3c74 <__Stack_Size+0x3874>
    3c70:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    3c74:	43520074 	cmpmi	r2, #116	; 0x74
    3c78:	61575f43 	cmpvs	r7, r3, asr #30
    3c7c:	6f467469 	svcvs	0x00467469
    3c80:	45534872 	ldrbmi	r4, [r3, #-2162]
    3c84:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    3c88:	00705574 	rsbseq	r5, r0, r4, ror r5
    3c8c:	5f434352 	svcpl	0x00434352
    3c90:	43435452 	movtmi	r5, #13394	; 0x3452
    3c94:	6f534b4c 	svcvs	0x00534b4c
    3c98:	65637275 	strbvs	r7, [r3, #-629]!
    3c9c:	43435200 	movtmi	r5, #12800	; 0x3200
    3ca0:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    3ca4:	72655031 	rsbvc	r5, r5, #49	; 0x31
    3ca8:	52687069 	rsbpl	r7, r8, #105	; 0x69
    3cac:	74657365 	strbtvc	r7, [r5], #-869
    3cb0:	00646d43 	rsbeq	r6, r4, r3, asr #26
    3cb4:	5f434352 	svcpl	0x00434352
    3cb8:	434c4c50 	movtmi	r4, #52304	; 0xcc50
    3cbc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3cc0:	6c700067 	ldclvs	0, cr0, [r0], #-412
    3cc4:	6c756d6c 	ldclvs	13, cr6, [r5], #-432
    3cc8:	4352006c 	cmpmi	r2, #108	; 0x6c
    3ccc:	53555f43 	cmppl	r5, #268	; 0x10c
    3cd0:	4b4c4342 	blmi	13149e0 <__Stack_Size+0x13145e0>
    3cd4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3cd8:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    3cdc:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3
    3ce0:	6d434953 	stclvs	9, cr4, [r3, #-332]
    3ce4:	43520064 	cmpmi	r2, #100	; 0x64
    3ce8:	65475f43 	strbvs	r5, [r7, #-3907]
    3cec:	53595374 	cmppl	r9, #-805306367	; 0xd0000001
    3cf0:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    3cf4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    3cf8:	50410065 	subpl	r0, r1, r5, rrx
    3cfc:	53523242 	cmppl	r2, #536870916	; 0x20000004
    3d00:	52005254 	andpl	r5, r0, #1073741829	; 0x40000005
    3d04:	415f4343 	cmpmi	pc, r3, asr #6
    3d08:	50314250 	eorspl	r4, r1, r0, asr r2
    3d0c:	70697265 	rsbvc	r7, r9, r5, ror #4
    3d10:	6c700068 	ldclvs	0, cr0, [r0], #-416
    3d14:	756f736c 	strbvc	r7, [pc, #-876]!	; 39b0 <__Stack_Size+0x35b0>
    3d18:	00656372 	rsbeq	r6, r5, r2, ror r3
    3d1c:	45424841 	strbmi	r4, [r2, #-2113]
    3d20:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
    3d24:	505f4343 	subspl	r4, pc, r3, asr #6
    3d28:	314b4c43 	cmpcc	fp, r3, asr #24
    3d2c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3d30:	73006769 	movwvc	r6, #1897	; 0x769
    3d34:	75746174 	ldrbvc	r6, [r4, #-372]!
    3d38:	67657273 	undefined
    3d3c:	43435200 	movtmi	r5, #12800	; 0x3200
    3d40:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    3d44:	72655031 	rsbvc	r5, r5, #49	; 0x31
    3d48:	43687069 	cmnmi	r8, #105	; 0x69
    3d4c:	6b636f6c 	blvs	18dfb04 <__Stack_Size+0x18df704>
    3d50:	00646d43 	rsbeq	r6, r4, r3, asr #26
    3d54:	32425041 	subcc	r5, r2, #65	; 0x41
    3d58:	00524e45 	subseq	r4, r2, r5, asr #28
    3d5c:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    3d60:	43705574 	cmnmi	r0, #486539264	; 0x1d000000
    3d64:	746e756f 	strbtvc	r7, [lr], #-1391
    3d68:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
    3d6c:	425f4343 	subsmi	r4, pc, #201326593	; 0xc000001
    3d70:	756b6361 	strbvc	r6, [fp, #-865]!
    3d74:	73655270 	cmnvc	r5, #7	; 0x7
    3d78:	6d437465 	cfstrdvs	mvd7, [r3, #-404]
    3d7c:	43520064 	cmpmi	r2, #100	; 0x64
    3d80:	64415f43 	strbvs	r5, [r1], #-3907
    3d84:	7473756a 	ldrbtvc	r7, [r3], #-1386
    3d88:	43495348 	movtmi	r5, #37704	; 0x9348
    3d8c:	62696c61 	rsbvs	r6, r9, #24832	; 0x6100
    3d90:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    3d94:	61566e6f 	cmpvs	r6, pc, ror #28
    3d98:	0065756c 	rsbeq	r7, r5, ip, ror #10
    3d9c:	43434441 	movtmi	r4, #13377	; 0x3441
    3da0:	465f4b4c 	ldrbmi	r4, [pc], -ip, asr #22
    3da4:	75716572 	ldrbvc	r6, [r1, #-1394]!
    3da8:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    3dac:	43435200 	movtmi	r5, #12800	; 0x3200
    3db0:	414c465f 	cmpmi	ip, pc, asr r6
    3db4:	43520047 	cmpmi	r2, #71	; 0x47
    3db8:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    3dbc:	756f534c 	strbvc	r5, [pc, #-844]!	; 3a78 <__Stack_Size+0x3678>
    3dc0:	00656372 	rsbeq	r6, r5, r2, ror r3
    3dc4:	5f434352 	svcpl	0x00434352
    3dc8:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    3dcc:	6f434b4c 	svcvs	0x00434b4c
    3dd0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3dd4:	43435200 	movtmi	r5, #12800	; 0x3200
    3dd8:	7465475f 	strbtvc	r4, [r5], #-1887
    3ddc:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    3de0:	74617453 	strbtvc	r7, [r1], #-1107
    3de4:	52007375 	andpl	r7, r0, #-738197503	; 0xd4000001
    3de8:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
    3dec:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
    3df0:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    3df4:	00676966 	rsbeq	r6, r7, r6, ror #18
    3df8:	5f434352 	svcpl	0x00434352
    3dfc:	43425355 	movtmi	r5, #9045	; 0x2355
    3e00:	6f534b4c 	svcvs	0x00534b4c
    3e04:	65637275 	strbvs	r7, [r3, #-629]!
    3e08:	43435200 	movtmi	r5, #12800	; 0x3200
    3e0c:	656c435f 	strbvs	r4, [ip, #-863]!
    3e10:	6c467261 	sfmvs	f7, 2, [r6], {97}
    3e14:	52006761 	andpl	r6, r0, #25427968	; 0x1840000
    3e18:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    3e1c:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    3e20:	5348004b 	movtpl	r0, #32843	; 0x804b
    3e24:	61745345 	cmnvs	r4, r5, asr #6
    3e28:	00737574 	rsbseq	r7, r3, r4, ror r5
    3e2c:	5f434352 	svcpl	0x00434352
    3e30:	43455348 	movtmi	r5, #21320	; 0x5348
    3e34:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3e38:	59530067 	ldmdbpl	r3, {r0, r1, r2, r5, r6}^
    3e3c:	4b4c4353 	blmi	1314b90 <__Stack_Size+0x1314790>
    3e40:	6572465f 	ldrbvs	r4, [r2, #-1631]!
    3e44:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    3e48:	52007963 	andpl	r7, r0, #1622016	; 0x18c000
    3e4c:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    3e50:	6b636f6c 	blvs	18dfc08 <__Stack_Size+0x18df808>
    3e54:	43500073 	cmpmi	r0, #115	; 0x73
    3e58:	5f324b4c 	svcpl	0x00324b4c
    3e5c:	71657246 	cmnvc	r5, r6, asr #4
    3e60:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    3e64:	43520079 	cmpmi	r2, #121	; 0x79
    3e68:	54495f43 	strbpl	r5, [r9], #-3907
    3e6c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3e70:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    3e74:	415f4343 	cmpmi	pc, r3, asr #6
    3e78:	50324250 	eorspl	r4, r2, r0, asr r2
    3e7c:	70697265 	rsbvc	r7, r9, r5, ror #4
    3e80:	6f6c4368 	svcvs	0x006c4368
    3e84:	6d436b63 	vstrvs	d22, [r3, #-396]
    3e88:	43520064 	cmpmi	r2, #100	; 0x64
    3e8c:	53485f43 	movtpl	r5, #36675	; 0x8f43
    3e90:	43520045 	cmpmi	r2, #69	; 0x45
    3e94:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    3e98:	4b4c4353 	blmi	1314bec <__Stack_Size+0x13147ec>
    3e9c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    3ea0:	50006563 	andpl	r6, r0, r3, ror #10
    3ea4:	314b4c43 	cmpcc	fp, r3, asr #24
    3ea8:	6572465f 	ldrbvs	r4, [r2, #-1631]!
    3eac:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    3eb0:	52007963 	andpl	r7, r0, #1622016	; 0x18c000
    3eb4:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3
    3eb8:	6f434553 	svcvs	0x00434553
    3ebc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3ec0:	42504100 	subsmi	r4, r0, #0	; 0x0
    3ec4:	50424841 	subpl	r4, r2, r1, asr #16
    3ec8:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    3ecc:	6c626154 	stfvse	f6, [r2], #-336
    3ed0:	43520065 	cmpmi	r2, #101	; 0x65
    3ed4:	65475f43 	strbvs	r5, [r7, #-3907]
    3ed8:	6f6c4374 	svcvs	0x006c4374
    3edc:	46736b63 	ldrbtmi	r6, [r3], -r3, ror #22
    3ee0:	00716572 	rsbseq	r6, r1, r2, ror r5
    3ee4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3ee8:	30316632 	eorscc	r6, r1, r2, lsr r6
    3eec:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3ef0:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    3ef4:	74732f63 	ldrbtvc	r2, [r3], #-3939
    3ef8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3efc:	5f783031 	svcpl	0x00783031
    3f00:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
    3f04:	43520063 	cmpmi	r2, #99	; 0x63
    3f08:	54525f43 	ldrbpl	r5, [r2], #-3907
    3f0c:	4b4c4343 	blmi	1314c20 <__Stack_Size+0x1314820>
    3f10:	00646d43 	rsbeq	r6, r4, r3, asr #26
    3f14:	5f434352 	svcpl	0x00434352
    3f18:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    3f1c:	6365536b 	cmnvs	r5, #-1409286143	; 0xac000001
    3f20:	74697275 	strbtvc	r7, [r9], #-629
    3f24:	73795379 	cmnvc	r9, #-469762047	; 0xe4000001
    3f28:	436d6574 	cmnmi	sp, #486539264	; 0x1d000000
    3f2c:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    3f30:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^
    3f34:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    3f38:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3f3c:	43520067 	cmpmi	r2, #103	; 0x67
    3f40:	53485f43 	movtpl	r5, #36675	; 0x8f43
    3f44:	646d4349 	strbtvs	r4, [sp], #-841
    3f48:	43435200 	movtmi	r5, #12800	; 0x3200
    3f4c:	4f434d5f 	svcmi	0x00434d5f
    3f50:	43435200 	movtmi	r5, #12800	; 0x3200
    3f54:	0054495f 	subseq	r4, r4, pc, asr r9
    3f58:	5f434352 	svcpl	0x00434352
    3f5c:	50424841 	subpl	r4, r2, r1, asr #16
    3f60:	70697265 	rsbvc	r7, r9, r5, ror #4
    3f64:	43520068 	cmpmi	r2, #104	; 0x68
    3f68:	43505f43 	cmpmi	r0, #268	; 0x10c
    3f6c:	43324b4c 	teqmi	r2, #77824	; 0x13000
    3f70:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3f74:	44410067 	strbmi	r0, [r1], #-103
    3f78:	65725043 	ldrbvs	r5, [r2, #-67]!
    3f7c:	61546373 	cmpvs	r4, r3, ror r3
    3f80:	00656c62 	rsbeq	r6, r5, r2, ror #24
    3f84:	54737953 	ldrbtpl	r7, [r3], #-2387
    3f88:	5f6b6369 	svcpl	0x006b6369
    3f8c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    3f90:	746e756f 	strbtvc	r7, [lr], #-1391
    3f94:	53007265 	movwpl	r7, #613	; 0x265
    3f98:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    3f9c:	535f6b63 	cmppl	pc, #101376	; 0x18c00
    3fa0:	65527465 	ldrbvs	r7, [r2, #-1125]
    3fa4:	64616f6c 	strbtvs	r6, [r1], #-3948
    3fa8:	73795300 	cmnvc	r9, #0	; 0x0
    3fac:	6b636954 	blvs	18de504 <__Stack_Size+0x18de104>
    3fb0:	7465475f 	strbtvc	r4, [r5], #-1887
    3fb4:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    3fb8:	74617453 	strbtvc	r7, [r1], #-1107
    3fbc:	53007375 	movwpl	r7, #885	; 0x375
    3fc0:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    3fc4:	465f6b63 	ldrbmi	r6, [pc], -r3, ror #22
    3fc8:	0047414c 	subeq	r4, r7, ip, asr #2
    3fcc:	494c4143 	stmdbmi	ip, {r0, r1, r6, r8, lr}^
    3fd0:	74730042 	ldrbtvc	r0, [r3], #-66
    3fd4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3fd8:	5f783031 	svcpl	0x00783031
    3fdc:	2f62696c 	svccs	0x0062696c
    3fe0:	2f637273 	svccs	0x00637273
    3fe4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3fe8:	30316632 	eorscc	r6, r1, r2, lsr r6
    3fec:	79735f78 	ldmdbvc	r3!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3ff0:	63697473 	cmnvs	r9, #1929379840	; 0x73000000
    3ff4:	00632e6b 	rsbeq	r2, r3, fp, ror #28
    3ff8:	4c525443 	cfldrdmi	mvd5, [r2], {67}
    3ffc:	73795300 	cmnvc	r9, #0	; 0x0
    4000:	6b636954 	blvs	18de558 <__Stack_Size+0x18de158>
    4004:	756f435f 	strbvc	r4, [pc, #-863]!	; 3cad <__Stack_Size+0x38ad>
    4008:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    400c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    4010:	54737953 	ldrbtpl	r7, [r3], #-2387
    4014:	5f6b6369 	svcpl	0x006b6369
    4018:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    401c:	00726574 	rsbseq	r6, r2, r4, ror r5
    4020:	54737953 	ldrbtpl	r7, [r3], #-2387
    4024:	5f6b6369 	svcpl	0x006b6369
    4028:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    402c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    4030:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    4034:	00676966 	rsbeq	r6, r7, r6, ror #18
    4038:	54737953 	ldrbtpl	r7, [r3], #-2387
    403c:	5f6b6369 	svcpl	0x006b6369
    4040:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    4044:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    4048:	79530065 	ldmdbvc	r3, {r0, r2, r5, r6}^
    404c:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    4050:	54495f6b 	strbpl	r5, [r9], #-3947
    4054:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    4058:	69006769 	stmdbvs	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    405c:	6765746e 	strbvs	r7, [r5, -lr, ror #8]!
    4060:	69647265 	stmdbvs	r4!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    4064:	65646976 	strbvs	r6, [r4, #-2422]!
    4068:	53550072 	cmppl	r5, #114	; 0x72
    406c:	5f545241 	svcpl	0x00545241
    4070:	41485043 	cmpmi	r8, r3, asr #32
    4074:	41535500 	cmpmi	r3, r0, lsl #10
    4078:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    407c:	72507465 	subsvc	r7, r0, #1694498816	; 0x65000000
    4080:	61637365 	cmnvs	r3, r5, ror #6
    4084:	0072656c 	rsbseq	r6, r2, ip, ror #10
    4088:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    408c:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
    4090:	55007469 	strpl	r7, [r0, #-1129]
    4094:	54524153 	ldrbpl	r4, [r2], #-339
    4098:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    409c:	61657242 	cmnvs	r5, r2, asr #4
    40a0:	7465446b 	strbtvc	r4, [r5], #-1131
    40a4:	4c746365 	ldclmi	3, cr6, [r4], #-404
    40a8:	74676e65 	strbtvc	r6, [r7], #-3685
    40ac:	53550068 	cmppl	r5, #104	; 0x68
    40b0:	5f545241 	svcpl	0x00545241
    40b4:	65707954 	ldrbvs	r7, [r0, #-2388]!
    40b8:	00666544 	rsbeq	r6, r6, r4, asr #10
    40bc:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    40c0:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    40c4:	496b636f 	stmdbmi	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    40c8:	5474696e 	ldrbtpl	r6, [r4], #-2414
    40cc:	44657079 	strbtmi	r7, [r5], #-121
    40d0:	55006665 	strpl	r6, [r0, #-1637]
    40d4:	54524153 	ldrbpl	r4, [r2], #-339
    40d8:	646d435f 	strbtvs	r4, [sp], #-863
    40dc:	41535500 	cmpmi	r3, r0, lsl #10
    40e0:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    40e4:	44646e65 	strbtmi	r6, [r4], #-3685
    40e8:	00617461 	rsbeq	r7, r1, r1, ror #8
    40ec:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    40f0:	61485f54 	cmpvs	r8, r4, asr pc
    40f4:	7544666c 	strbvc	r6, [r4, #-1644]
    40f8:	78656c70 	stmdavc	r5!, {r4, r5, r6, sl, fp, sp, lr}^
    40fc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    4100:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    4104:	61575f54 	cmpvs	r7, r4, asr pc
    4108:	7055656b 	subsvc	r6, r5, fp, ror #10
    410c:	41535500 	cmpmi	r3, r0, lsl #10
    4110:	445f5452 	ldrbmi	r5, [pc], #1106	; 4118 <__Stack_Size+0x3d18>
    4114:	6d43414d 	stfvse	f4, [r3, #-308]
    4118:	53550064 	cmppl	r5, #100	; 0x64
    411c:	5f545241 	svcpl	0x00545241
    4120:	7473614c 	ldrbtvc	r6, [r3], #-332
    4124:	00746942 	rsbseq	r6, r4, r2, asr #18
    4128:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    412c:	72495f54 	subvc	r5, r9, #336	; 0x150
    4130:	6f4d4144 	svcvs	0x004d4144
    4134:	61006564 	tstvs	r0, r4, ror #10
    4138:	6c636270 	sfmvs	f6, 2, [r3], #-448
    413c:	006b636f 	rsbeq	r6, fp, pc, ror #6
    4140:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    4144:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    4148:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    414c:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
    4150:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    4154:	00746942 	rsbseq	r6, r4, r2, asr #18
    4158:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    415c:	75475f54 	strbvc	r5, [r7, #-3924]
    4160:	54647261 	strbtpl	r7, [r4], #-609
    4164:	00656d69 	rsbeq	r6, r5, r9, ror #26
    4168:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    416c:	494c5f54 	stmdbmi	ip, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    4170:	6572424e 	ldrbvs	r4, [r2, #-590]!
    4174:	65446b61 	strbvs	r6, [r4, #-2913]
    4178:	74636574 	strbtvc	r6, [r3], #-1396
    417c:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    4180:	6f436874 	svcvs	0x00436874
    4184:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    4188:	41535500 	cmpmi	r3, r0, lsl #10
    418c:	465f5452 	undefined
    4190:	0047414c 	subeq	r4, r7, ip, asr #2
    4194:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    4198:	65445f54 	strbvs	r5, [r4, #-3924]
    419c:	74696e49 	strbtvc	r6, [r9], #-3657
    41a0:	41535500 	cmpmi	r3, r0, lsl #10
    41a4:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    41a8:	6b636f6c 	blvs	18dff60 <__Stack_Size+0x18dfb60>
    41ac:	74696e49 	strbtvc	r6, [r9], #-3657
    41b0:	75727453 	ldrbvc	r7, [r2, #-1107]!
    41b4:	55007463 	strpl	r7, [r0, #-1123]
    41b8:	54524153 	ldrbpl	r4, [r2], #-339
    41bc:	414d445f 	cmpmi	sp, pc, asr r4
    41c0:	00716552 	rsbseq	r6, r1, r2, asr r5
    41c4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    41c8:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    41cc:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    41d0:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    41d4:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    41d8:	73750074 	cmnvc	r5, #116	; 0x74
    41dc:	78747261 	ldmdavc	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    41e0:	65736162 	ldrbvs	r6, [r3, #-354]!
    41e4:	43435200 	movtmi	r5, #12800	; 0x3200
    41e8:	6f6c435f 	svcvs	0x006c435f
    41ec:	53736b63 	cmnpl	r3, #101376	; 0x18c00
    41f0:	75746174 	ldrbvc	r6, [r4, #-372]!
    41f4:	53550073 	cmppl	r5, #115	; 0x73
    41f8:	5f545241 	svcpl	0x00545241
    41fc:	41746553 	cmnmi	r4, r3, asr r5
    4200:	65726464 	ldrbvs	r6, [r2, #-1124]!
    4204:	55007373 	strpl	r7, [r0, #-883]
    4208:	54524153 	ldrbpl	r4, [r2], #-339
    420c:	7465535f 	strbtvc	r5, [r5], #-863
    4210:	72617547 	rsbvc	r7, r1, #297795584	; 0x11c00000
    4214:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!
    4218:	53550065 	cmppl	r5, #101	; 0x65
    421c:	5f545241 	svcpl	0x00545241
    4220:	646e6553 	strbtvs	r6, [lr], #-1363
    4224:	61657242 	cmnvs	r5, r2, asr #4
    4228:	5355006b 	cmppl	r5, #107	; 0x6b
    422c:	5f545241 	svcpl	0x00545241
    4230:	6f435449 	svcvs	0x00435449
    4234:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    4238:	41535500 	cmpmi	r3, r0, lsl #10
    423c:	00785452 	rsbseq	r5, r8, r2, asr r4
    4240:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    4244:	6d535f54 	ldclvs	15, cr5, [r3, #-336]
    4248:	43747261 	cmnmi	r4, #268435462	; 0x10000006
    424c:	43647261 	cmnmi	r4, #268435462	; 0x10000006
    4250:	5500646d 	strpl	r6, [r0, #-1133]
    4254:	54524153 	ldrbpl	r4, [r2], #-339
    4258:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    425c:	72745374 	rsbsvc	r5, r4, #-805306367	; 0xd0000001
    4260:	00746375 	rsbseq	r6, r4, r5, ror r3
    4264:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    4268:	64415f54 	strbvs	r5, [r1], #-3924
    426c:	73657264 	cmnvc	r5, #1073741830	; 0x40000006
    4270:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
    4274:	736f7074 	cmnvc	pc, #116	; 0x74
    4278:	41535500 	cmpmi	r3, r0, lsl #10
    427c:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    4280:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    4284:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    4288:	41535500 	cmpmi	r3, r0, lsl #10
    428c:	475f5452 	undefined
    4290:	54497465 	strbpl	r7, [r9], #-1125
    4294:	74617453 	strbtvc	r7, [r1], #-1107
    4298:	55007375 	strpl	r7, [r0, #-885]
    429c:	54524153 	ldrbpl	r4, [r2], #-339
    42a0:	4472495f 	ldrbtmi	r4, [r2], #-2399
    42a4:	6e6f4341 	cdpvs	3, 6, cr4, cr15, cr1, {2}
    42a8:	00676966 	rsbeq	r6, r7, r6, ror #18
    42ac:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    42b0:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    42b4:	006b636f 	rsbeq	r6, fp, pc, ror #6
    42b8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    42bc:	65525f54 	ldrbvs	r5, [r2, #-3924]
    42c0:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    42c4:	61577265 	cmpvs	r7, r5, ror #4
    42c8:	7055656b 	subsvc	r6, r5, fp, ror #10
    42cc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    42d0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    42d4:	72495f54 	subvc	r5, r9, #336	; 0x150
    42d8:	6d434144 	stfvse	f4, [r3, #-272]
    42dc:	53550064 	cmppl	r5, #100	; 0x64
    42e0:	5f545241 	svcpl	0x00545241
    42e4:	434e494c 	movtmi	r4, #59724	; 0xe94c
    42e8:	6600646d 	strvs	r6, [r0], -sp, ror #8
    42ec:	74636172 	strbtvc	r6, [r3], #-370
    42f0:	616e6f69 	cmnvs	lr, r9, ror #30
    42f4:	7669646c 	strbtvc	r6, [r9], -ip, ror #8
    42f8:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
    42fc:	41535500 	cmpmi	r3, r0, lsl #10
    4300:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    4304:	7472616d 	ldrbtvc	r6, [r2], #-365
    4308:	64726143 	ldrbtvs	r6, [r2], #-323
    430c:	4b43414e 	blmi	10d484c <__Stack_Size+0x10d444c>
    4310:	00646d43 	rsbeq	r6, r4, r3, asr #26
    4314:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    4318:	65475f54 	strbvs	r5, [r7, #-3924]
    431c:	616c4674 	smcvs	50276
    4320:	61745367 	cmnvs	r4, r7, ror #6
    4324:	00737574 	rsbseq	r7, r3, r4, ror r5
    4328:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    432c:	54495f54 	strbpl	r5, [r9], #-3924
    4330:	41535500 	cmpmi	r3, r0, lsl #10
    4334:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    4338:	6b636f6c 	blvs	18e00f0 <__Stack_Size+0x18dfcf0>
    433c:	74696e49 	strbtvc	r6, [r9], #-3657
    4340:	41535500 	cmpmi	r3, r0, lsl #10
    4344:	575f5452 	undefined
    4348:	55656b61 	strbpl	r6, [r5, #-2913]!
    434c:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
    4350:	00676966 	rsbeq	r6, r7, r6, ror #18
    4354:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    4358:	65525f54 	ldrbvs	r5, [r2, #-3924]
    435c:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    4360:	74614465 	strbtvc	r4, [r1], #-1125
    4364:	53550061 	cmppl	r5, #97	; 0x61
    4368:	5f545241 	svcpl	0x00545241
    436c:	73657250 	cmnvc	r5, #5	; 0x5
    4370:	656c6163 	strbvs	r6, [ip, #-355]!
    4374:	53550072 	cmppl	r5, #114	; 0x72
    4378:	5f545241 	svcpl	0x00545241
    437c:	4c4f5043 	mcrrmi	0, 4, r5, pc, cr3
    4380:	6d747300 	ldclvs	3, cr7, [r4]
    4384:	31663233 	cmncc	r6, r3, lsr r2
    4388:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    438c:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    4390:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    4394:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    4398:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    439c:	6173755f 	cmnvs	r3, pc, asr r5
    43a0:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
    43a4:	61737500 	cmnvs	r3, r0, lsl #10
    43a8:	65727472 	ldrbvs	r7, [r2, #-1138]!
    43ac:	53550067 	cmppl	r5, #103	; 0x67
    43b0:	5f545241 	svcpl	0x00545241
    43b4:	75727453 	ldrbvc	r7, [r2, #-1107]!
    43b8:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    43bc:	5f007469 	svcpl	0x00007469
    43c0:	61747365 	cmnvs	r4, r5, ror #6
    43c4:	5f006b63 	svcpl	0x00006b63
    43c8:	74616473 	strbtvc	r6, [r1], #-1139
    43cc:	65520061 	ldrbvs	r0, [r2, #-97]
    43d0:	5f746573 	svcpl	0x00746573
    43d4:	646e6148 	strbtvs	r6, [lr], #-328
    43d8:	0072656c 	rsbseq	r6, r2, ip, ror #10
    43dc:	446c7570 	strbtmi	r7, [ip], #-1392
    43e0:	00747365 	rsbseq	r7, r4, r5, ror #6
    43e4:	6469735f 	strbtvs	r7, [r9], #-863
    43e8:	00617461 	rsbeq	r7, r1, r1, ror #8
    43ec:	7362655f 	cmnvc	r2, #398458880	; 0x17c00000
    43f0:	655f0073 	ldrbvs	r0, [pc, #-115]	; 4385 <__Stack_Size+0x3f85>
    43f4:	61746164 	cmnvs	r4, r4, ror #2
    43f8:	6d747300 	ldclvs	3, cr7, [r4]
    43fc:	31663233 	cmncc	r6, r3, lsr r2
    4400:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    4404:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    4408:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    440c:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    4410:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    4414:	6365765f 	cmnvs	r5, #99614720	; 0x5f00000
    4418:	2e726f74 	mrccs	15, 3, r6, cr2, cr4, {3}
    441c:	5f670063 	svcpl	0x00670063
    4420:	566e6670 	undefined
    4424:	6f746365 	svcvs	0x00746365
    4428:	70007372 	andvc	r7, r0, r2, ror r3
    442c:	72536c75 	subsvc	r6, r3, #29952	; 0x7500
    4430:	735f0063 	cmpvc	pc, #99	; 0x63
    4434:	00737362 	rsbseq	r7, r3, r2, ror #6
    4438:	775c3a63 	ldrbvc	r3, [ip, -r3, ror #20]
    443c:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
    4440:	625c736d 	subsvs	r7, ip, #-1275068415	; 0xb4000001
    4444:	646c6975 	strbtvs	r6, [ip], #-2421
    4448:	6363675c 	cmnvs	r3, #24117248	; 0x1700000
    444c:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
    4450:	615c646c 	cmpvs	ip, ip, ror #8
    4454:	652d6d72 	strvs	r6, [sp, #-3442]!
    4458:	5c696261 	sfmpl	f6, 2, [r9], #-388
    445c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    4460:	6c5c6269 	lfmvs	f6, 2, [ip], {105}
    4464:	5c636269 	sfmpl	f6, 2, [r3], #-420
    4468:	6c647473 	cfstrdvs	mvd7, [r4], #-460
    446c:	2e006269 	cdpcs	2, 0, cr6, cr0, cr9, {3}
    4470:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4474:	2f2e2e2f 	svccs	0x002e2e2f
    4478:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    447c:	63672f2e 	cmnvs	r7, #184	; 0xb8
    4480:	2e342d63 	cdpcs	13, 3, cr2, cr4, cr3, {3}
    4484:	2f302e33 	svccs	0x00302e33
    4488:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    448c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420
    4490:	2f636269 	svccs	0x00636269
    4494:	6c647473 	cfstrdvs	mvd7, [r4], #-460
    4498:	612f6269 	teqvs	pc, r9, ror #4
    449c:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    44a0:	00632e74 	rsbeq	r2, r3, r4, ror lr
    44a4:	74655f5f 	strbtvc	r5, [r5], #-3935
    44a8:	6178635f 	cmnvs	r8, pc, asr r3
    44ac:	655f5f00 	ldrbvs	r5, [pc, #-3840]	; 35b4 <__Stack_Size+0x31b4>
    44b0:	6e6f5f74 	mcrvs	15, 3, r5, cr15, cr4, {3}
    44b4:	74697865 	strbtvc	r7, [r9], #-2149
    44b8:	615f5f00 	cmpvs	pc, r0, lsl #30
    44bc:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    44c0:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    44c4:	00736570 	rsbseq	r6, r3, r0, ror r5
    44c8:	74655f5f 	strbtvc	r5, [r5], #-3935
    44cc:	6574615f 	ldrbvs	r6, [r4, #-351]!
    44d0:	00746978 	rsbseq	r6, r4, r8, ror r9
    44d4:	6f73645f 	svcvs	0x0073645f
    44d8:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
    44dc:	00656c64 	rsbeq	r6, r5, r4, ror #24
    44e0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    44e4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    44e8:	2f2e2e2f 	svccs	0x002e2e2f
    44ec:	672f2e2e 	strvs	r2, [pc, -lr, lsr #28]!
    44f0:	342d6363 	strtcc	r6, [sp], #-867
    44f4:	302e332e 	eorcc	r3, lr, lr, lsr #6
    44f8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    44fc:	2f62696c 	svccs	0x0062696c
    4500:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    4504:	6474732f 	ldrbtvs	r7, [r4], #-815
    4508:	2f62696c 	svccs	0x0062696c
    450c:	74697865 	strbtvc	r7, [r9], #-2149
    4510:	5f00632e 	svcpl	0x0000632e
    4514:	657a6973 	ldrbvs	r6, [sl, #-2419]!
    4518:	61725f00 	cmnvs	r2, r0, lsl #30
    451c:	3834646e 	ldmdacc	r4!, {r1, r2, r3, r5, r6, sl, sp, lr}
    4520:	6d655f00 	stclvs	15, cr5, [r5]
    4524:	65677265 	strbvs	r7, [r7, #-613]!
    4528:	0079636e 	rsbseq	r6, r9, lr, ror #6
    452c:	7263775f 	rsbvc	r7, r3, #24903680	; 0x17c0000
    4530:	626d6f74 	rsbvs	r6, sp, #464	; 0x1d0
    4534:	6174735f 	cmnvs	r4, pc, asr r3
    4538:	5f006574 	svcpl	0x00006574
    453c:	72736377 	rsbsvc	r6, r3, #-603979775	; 0xdc000001
    4540:	626d6f74 	rsbvs	r6, sp, #464	; 0x1d0
    4544:	74735f73 	ldrbtvc	r5, [r3], #-3955
    4548:	00657461 	rsbeq	r7, r5, r1, ror #8
    454c:	66626c5f 	undefined
    4550:	657a6973 	ldrbvs	r6, [sl, #-2419]!
    4554:	626d5f00 	rsbvs	r5, sp, #0	; 0x0
    4558:	776f7472 	undefined
    455c:	74735f63 	ldrbtvc	r5, [r3], #-3939
    4560:	00657461 	rsbeq	r7, r5, r1, ror #8
    4564:	7463775f 	strbtvc	r7, [r3], #-1887
    4568:	5f626d6f 	svcpl	0x00626d6f
    456c:	74617473 	strbtvc	r7, [r1], #-1139
    4570:	5f5f0065 	svcpl	0x005f0065
    4574:	735f6d74 	cmpvc	pc, #7424	; 0x1d00
    4578:	5f006365 	svcpl	0x00006365
    457c:	66756275 	undefined
    4580:	61625f00 	cmnvs	r2, r0, lsl #30
    4584:	5f006573 	svcpl	0x00006573
    4588:	5f6d745f 	svcpl	0x006d745f
    458c:	72756f68 	rsbsvc	r6, r5, #416	; 0x1a0
    4590:	735f5f00 	cmpvc	pc, #0	; 0x0
    4594:	6f5f0066 	svcvs	0x005f0066
    4598:	78655f6e 	stmdavc	r5!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    459c:	615f7469 	cmpvs	pc, r9, ror #8
    45a0:	00736772 	rsbseq	r6, r3, r2, ror r7
    45a4:	6f6f635f 	svcvs	0x006f635f
    45a8:	0065696b 	rsbeq	r6, r5, fp, ror #18
    45ac:	67735f5f 	undefined
    45b0:	0065756c 	rsbeq	r7, r5, ip, ror #10
    45b4:	616c665f 	cmnvs	ip, pc, asr r6
    45b8:	5f007367 	svcpl	0x00007367
    45bc:	635f7369 	cmpvs	pc, #-1543503871	; 0xa4000001
    45c0:	5f006178 	svcpl	0x00006178
    45c4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    45c8:	625f006e 	subsvs	r0, pc, #110	; 0x6e
    45cc:	69736b6c 	ldmdbvs	r3!, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^
    45d0:	5f00657a 	svcpl	0x0000657a
    45d4:	62747663 	rsbsvs	r7, r4, #103809024	; 0x6300000
    45d8:	5f006675 	svcpl	0x00006675
    45dc:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
    45e0:	5f007465 	svcpl	0x00007465
    45e4:	7273626d 	rsbsvc	r6, r3, #-805306362	; 0xd0000006
    45e8:	63776f74 	cmnvs	r7, #464	; 0x1d0
    45ec:	74735f73 	ldrbtvc	r5, [r3], #-3955
    45f0:	00657461 	rsbeq	r7, r5, r1, ror #8
    45f4:	72626d5f 	rsbvc	r6, r2, #6080	; 0x17c0
    45f8:	5f6e656c 	svcpl	0x006e656c
    45fc:	74617473 	strbtvc	r7, [r1], #-1139
    4600:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
    4604:	6772616e 	ldrbvs	r6, [r2, -lr, ror #2]!
    4608:	665f0073 	undefined
    460c:	5f00736e 	svcpl	0x0000736e
    4610:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    4614:	6c665f00 	stclvs	15, cr5, [r6]
    4618:	5f6b636f 	svcpl	0x006b636f
    461c:	735f0074 	cmpvc	pc, #116	; 0x74
    4620:	72656474 	rsbvc	r6, r5, #1946157056	; 0x74000000
    4624:	425f0072 	subsmi	r0, pc, #114	; 0x72
    4628:	6e696769 	cdpvs	7, 6, cr6, cr9, cr9, {3}
    462c:	725f0074 	subsvc	r0, pc, #116	; 0x74
    4630:	00646165 	rsbeq	r6, r4, r5, ror #2
    4634:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
    4638:	5f746c75 	svcpl	0x00746c75
    463c:	5f5f006b 	svcpl	0x005f006b
    4640:	5f006d74 	svcpl	0x00006d74
    4644:	6863775f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    4648:	735f0062 	cmpvc	pc, #98	; 0x62
    464c:	756f6474 	strbvc	r6, [pc, #-1140]!	; 41e0 <__Stack_Size+0x3de0>
    4650:	635f0074 	cmpvs	pc, #116	; 0x74
    4654:	656c7476 	strbvs	r7, [ip, #-1142]!
    4658:	665f006e 	ldrbvs	r0, [pc], -lr, rrx
    465c:	00656c69 	rsbeq	r6, r5, r9, ror #24
    4660:	6f696e5f 	svcvs	0x00696e5f
    4664:	5f007362 	svcpl	0x00007362
    4668:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    466c:	00307469 	eorseq	r7, r0, r9, ror #8
    4670:	6769735f 	undefined
    4674:	5f6c616e 	svcpl	0x006c616e
    4678:	00667562 	rsbeq	r7, r6, r2, ror #10
    467c:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
    4680:	656d6974 	strbvs	r6, [sp, #-2420]!
    4684:	6675625f 	undefined
    4688:	775f5f00 	ldrbvc	r5, [pc, -r0, lsl #30]
    468c:	77006863 	strvc	r6, [r0, -r3, ror #16]
    4690:	5f746e69 	svcpl	0x00746e69
    4694:	6c5f0074 	mrrcvs	0, 7, r0, pc, cr4
    4698:	006b636f 	rsbeq	r6, fp, pc, ror #6
    469c:	6c756d5f 	ldclvs	13, cr6, [r5], #-380
    46a0:	775f0074 	undefined
    46a4:	65746972 	ldrbvs	r6, [r4, #-2418]!
    46a8:	745f5f00 	ldrbvc	r5, [pc], #3840	; 46b0 <__Stack_Size+0x42b0>
    46ac:	65795f6d 	ldrbvs	r5, [r9, #-3949]!
    46b0:	5f007261 	svcpl	0x00007261
    46b4:	7478656e 	ldrbtvc	r6, [r8], #-1390
    46b8:	5f5f0066 	svcpl	0x005f0066
    46bc:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]
    46c0:	5f006e6f 	svcpl	0x00006e6f
    46c4:	6964735f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
    46c8:	696e6964 	stmdbvs	lr!, {r2, r5, r6, r8, fp, sp, lr}^
    46cc:	675f0074 	undefined
    46d0:	616d6d61 	cmnvs	sp, r1, ror #26
    46d4:	6769735f 	undefined
    46d8:	6d61676e 	stclvs	7, cr6, [r1, #-440]!
    46dc:	72665f00 	rsbvc	r5, r6, #0	; 0x0
    46e0:	696c6565 	stmdbvs	ip!, {r0, r2, r5, r6, r8, sl, sp, lr}^
    46e4:	5f007473 	svcpl	0x00007473
    46e8:	4b434f4c 	blmi	10d8420 <__Stack_Size+0x10d8020>
    46ec:	4345525f 	movtmi	r5, #21087	; 0x525f
    46f0:	49535255 	ldmdbmi	r3, {r0, r2, r4, r6, r9, ip, lr}^
    46f4:	545f4556 	ldrbpl	r4, [pc], #1366	; 46fc <__Stack_Size+0x42fc>
    46f8:	656e5f00 	strbvs	r5, [lr, #-3840]!
    46fc:	5f5f0077 	svcpl	0x005f0077
    4700:	795f6d74 	ldmdbvc	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    4704:	00796164 	rsbseq	r6, r9, r4, ror #2
    4708:	62735f5f 	rsbsvs	r5, r3, #380	; 0x17c
    470c:	5f006675 	svcpl	0x00006675
    4710:	73626f69 	cmnvc	r2, #420	; 0x1a4
    4714:	465f5f00 	ldrbmi	r5, [pc], -r0, lsl #30
    4718:	00454c49 	subeq	r4, r5, r9, asr #24
    471c:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
    4720:	65746174 	ldrbvs	r6, [r4, #-372]!
    4724:	5f00745f 	svcpl	0x0000745f
    4728:	4946735f 	stmdbmi	r6, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
    472c:	5f00454c 	svcpl	0x0000454c
    4730:	646e6172 	strbtvs	r6, [lr], #-370
    4734:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
    4738:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]
    473c:	6e656c62 	cdpvs	12, 6, cr6, cr5, cr2, {3}
    4740:	6174735f 	cmnvs	r4, pc, asr r3
    4744:	5f006574 	svcpl	0x00006574
    4748:	00636e69 	rsbeq	r6, r3, r9, ror #28
    474c:	646e695f 	strbtvs	r6, [lr], #-2399
    4750:	75635f00 	strbvc	r5, [r3, #-3840]!
    4754:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    4758:	6f6c5f74 	svcvs	0x006c5f74
    475c:	656c6163 	strbvs	r6, [ip, #-355]!
    4760:	635f5f00 	cmpvs	pc, #0	; 0x0
    4764:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
    4768:	5f007075 	svcpl	0x00007075
    476c:	7778616d 	ldrbvc	r6, [r8, -sp, ror #2]!
    4770:	5f007364 	svcpl	0x00007364
    4774:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    4778:	735f0074 	cmpvc	pc, #116	; 0x74
    477c:	00646565 	rsbeq	r6, r4, r5, ror #10
    4780:	6f635f5f 	svcvs	0x00635f5f
    4784:	00746e75 	rsbseq	r6, r4, r5, ror lr
    4788:	61765f5f 	cmnvs	r6, pc, asr pc
    478c:	0065756c 	rsbeq	r7, r5, ip, ror #10
    4790:	6565735f 	strbvs	r7, [r5, #-863]!
    4794:	665f006b 	ldrbvs	r0, [pc], -fp, rrx
    4798:	5f736f70 	svcpl	0x00736f70
    479c:	655f0074 	ldrbvs	r0, [pc, #-116]	; 4730 <__Stack_Size+0x4330>
    47a0:	6f6e7272 	svcvs	0x006e7272
    47a4:	745f5f00 	ldrbvc	r5, [pc], #3840	; 47ac <__Stack_Size+0x43ac>
    47a8:	696d5f6d 	stmdbvs	sp!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    47ac:	735f006e 	cmpvc	pc, #110	; 0x6e
    47b0:	6f747274 	svcvs	0x00747274
    47b4:	616c5f6b 	cmnvs	ip, fp, ror #30
    47b8:	5f007473 	svcpl	0x00007473
    47bc:	79746e66 	ldmdbvc	r4!, {r1, r2, r5, r6, r9, sl, fp, sp, lr}^
    47c0:	00736570 	rsbseq	r6, r3, r0, ror r5
    47c4:	6464615f 	strbtvs	r6, [r4], #-351
    47c8:	555f5f00 	ldrbpl	r5, [pc, #-3840]	; 38d0 <__Stack_Size+0x34d0>
    47cc:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
    47d0:	65675f00 	strbvs	r5, [r7, #-3840]!
    47d4:	74616474 	strbtvc	r6, [r1], #-1140
    47d8:	72655f65 	rsbvc	r5, r5, #404	; 0x194
    47dc:	675f0072 	undefined
    47e0:	61626f6c 	cmnvs	r2, ip, ror #30
    47e4:	6d695f6c 	stclvs	15, cr5, [r9, #-432]!
    47e8:	65727570 	ldrbvs	r7, [r2, #-1392]!
    47ec:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
    47f0:	75635f00 	strbvc	r5, [r3, #-3840]!
    47f4:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    47f8:	61635f74 	smcvs	13812
    47fc:	6f676574 	svcvs	0x00676574
    4800:	63007972 	movwvs	r7, #2418	; 0x972
    4804:	0065646f 	rsbeq	r6, r5, pc, ror #8
    4808:	756e755f 	strbvc	r7, [lr, #-1375]!
    480c:	5f646573 	svcpl	0x00646573
    4810:	646e6172 	strbtvs	r6, [lr], #-370
    4814:	64775f00 	ldrbtvs	r5, [r7], #-3840
    4818:	5f5f0073 	svcpl	0x005f0073
    481c:	775f6d74 	undefined
    4820:	00796164 	rsbseq	r6, r9, r4, ror #2
    4824:	756c675f 	strbvc	r6, [ip, #-1887]!
    4828:	6e5f0065 	cdpvs	0, 5, cr0, cr15, cr5, {3}
    482c:	6c6c616d 	stfvse	f6, [ip], #-436
    4830:	5f00636f 	svcpl	0x0000636f
    4834:	6134366c 	teqvs	r4, ip, ror #12
    4838:	6675625f 	undefined
    483c:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
    4840:	75665f67 	strbvc	r5, [r6, #-3943]!
    4844:	5f00636e 	svcpl	0x0000636e
    4848:	6675626e 	ldrbtvs	r6, [r5], -lr, ror #4
    484c:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
    4850:	64657375 	strbtvs	r7, [r5], #-885
    4854:	745f5f00 	ldrbvc	r5, [pc], #3840	; 485c <__Stack_Size+0x445c>
    4858:	73695f6d 	cmnvc	r9, #436	; 0x1b4
    485c:	00747364 	rsbseq	r7, r4, r4, ror #6
    4860:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    4864:	69746c61 	ldmdbvs	r4!, {r0, r5, r6, sl, fp, sp, lr}^
    4868:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
    486c:	5f006675 	svcpl	0x00006675
    4870:	00383472 	eorseq	r3, r8, r2, ror r4
    4874:	74626d5f 	strbtvc	r6, [r2], #-3423
    4878:	5f63776f 	svcpl	0x0063776f
    487c:	74617473 	strbtvc	r7, [r1], #-1139
    4880:	705f0065 	subsvc	r0, pc, r5, rrx
    4884:	5f007335 	svcpl	0x00007335
    4888:	5f6d745f 	svcpl	0x006d745f
    488c:	7961646d 	stmdbvc	r1!, {r0, r2, r3, r5, r6, sl, sp, lr}^
    4890:	706d6900 	rsbvc	r6, sp, r0, lsl #18
    4894:	5f657275 	svcpl	0x00657275
    4898:	61746164 	cmnvs	r4, r4, ror #2
    489c:	2f2e2e00 	svccs	0x002e2e00
    48a0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    48a4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    48a8:	2f2e2e2f 	svccs	0x002e2e2f
    48ac:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    48b0:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    48b4:	656e2f30 	strbvs	r2, [lr, #-3888]!
    48b8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    48bc:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    48c0:	65722f63 	ldrbvs	r2, [r2, #-3939]!
    48c4:	2f746e65 	svccs	0x00746e65
    48c8:	75706d69 	ldrbvc	r6, [r0, #-3433]!
    48cc:	632e6572 	teqvs	lr, #478150656	; 0x1c800000
    48d0:	5c3a6300 	ldcpl	3, cr6, [sl]
    48d4:	616e6977 	smcvs	59031
    48d8:	5c736d72 	ldclpl	13, cr6, [r3], #-456
    48dc:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    48e0:	63675c64 	cmnvs	r7, #25600	; 0x6400
    48e4:	75622d63 	strbvc	r2, [r2, #-3427]!
    48e8:	5c646c69 	stclpl	12, cr6, [r4], #-420
    48ec:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!
    48f0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    48f4:	77656e5c 	undefined
    48f8:	5c62696c 	stclpl	9, cr6, [r2], #-432
    48fc:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    4900:	6565725c 	strbvs	r7, [r5, #-604]!
    4904:	5f00746e 	svcpl	0x0000746e
    4908:	6e69665f 	mcrvs	6, 3, r6, cr9, cr15, {2}
    490c:	72615f69 	rsbvc	r5, r1, #420	; 0x1a4
    4910:	5f796172 	svcpl	0x00796172
    4914:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    4918:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
    491c:	745f657a 	ldrbvc	r6, [pc], #1402	; 4924 <__Stack_Size+0x4524>
    4920:	665f5f00 	ldrbvs	r5, [pc], -r0, lsl #30
    4924:	5f696e69 	svcpl	0x00696e69
    4928:	61727261 	cmnvs	r2, r1, ror #4
    492c:	6e655f79 	mcrvs	15, 3, r5, cr5, cr9, {3}
    4930:	5f5f0064 	svcpl	0x005f0064
    4934:	69657270 	stmdbvs	r5!, {r4, r5, r6, r9, ip, sp, lr}^
    4938:	5f74696e 	svcpl	0x0074696e
    493c:	61727261 	cmnvs	r2, r1, ror #4
    4940:	6e655f79 	mcrvs	15, 3, r5, cr5, cr9, {3}
    4944:	2e2e0064 	cdpcs	0, 2, cr0, cr14, cr4, {3}
    4948:	2f2e2e2f 	svccs	0x002e2e2f
    494c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4950:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4954:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    4958:	332e342d 	teqcc	lr, #754974720	; 0x2d000000
    495c:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    4960:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4964:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4968:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!
    496c:	2f637369 	svccs	0x00637369
    4970:	74696e69 	strbtvc	r6, [r9], #-3689
    4974:	5f00632e 	svcpl	0x0000632e
    4978:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    497c:	72615f74 	rsbvc	r5, r1, #464	; 0x1d0
    4980:	5f796172 	svcpl	0x00796172
    4984:	00646e65 	rsbeq	r6, r4, r5, ror #28
    4988:	696c5f5f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    498c:	695f6362 	ldmdbvs	pc, {r1, r5, r6, r8, r9, sp, lr}^
    4990:	5f74696e 	svcpl	0x0074696e
    4994:	61727261 	cmnvs	r2, r1, ror #4
    4998:	3a630079 	bcc	18c4b84 <__Stack_Size+0x18c4784>
    499c:	6e69775c 	mcrvs	7, 3, r7, cr9, cr12, {2}
    49a0:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    49a4:	6975625c 	ldmdbvs	r5!, {r2, r3, r4, r6, r9, sp, lr}^
    49a8:	675c646c 	ldrbvs	r6, [ip, -ip, ror #8]
    49ac:	622d6363 	eorvs	r6, sp, #-1946157055	; 0x8c000001
    49b0:	646c6975 	strbtvs	r6, [ip], #-2421
    49b4:	6d72615c 	ldfvse	f6, [r2, #-368]!
    49b8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    49bc:	656e5c69 	strbvs	r5, [lr, #-3177]!
    49c0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    49c4:	62696c5c 	rsbvs	r6, r9, #23552	; 0x5c00
    49c8:	696d5c63 	stmdbvs	sp!, {r0, r1, r5, r6, sl, fp, ip, lr}^
    49cc:	5f006373 	svcpl	0x00006373
    49d0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    49d4:	69665f63 	stmdbvs	r6!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    49d8:	615f696e 	cmpvs	pc, lr, ror #18
    49dc:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
    49e0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    49e4:	6e696572 	mcrvs	5, 3, r6, cr9, cr2, {3}
    49e8:	615f7469 	cmpvs	pc, r9, ror #8
    49ec:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
    49f0:	6174735f 	cmnvs	r4, pc, asr r3
    49f4:	5f007472 	svcpl	0x00007472
    49f8:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    49fc:	72615f74 	rsbvc	r5, r1, #464	; 0x1d0
    4a00:	5f796172 	svcpl	0x00796172
    4a04:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    4a08:	6c610074 	stclvs	0, cr0, [r1], #-464
    4a0c:	656e6769 	strbvs	r6, [lr, #-1897]!
    4a10:	72735f64 	rsbsvc	r5, r3, #400	; 0x190
    4a14:	72730063 	rsbsvc	r0, r3, #99	; 0x63
    4a18:	61003063 	tstvs	r0, r3, rrx
    4a1c:	6e67696c 	cdpvs	9, 6, cr6, cr7, cr12, {3}
    4a20:	645f6465 	ldrbvs	r6, [pc], #1125	; 4a28 <__Stack_Size+0x4628>
    4a24:	64007473 	strvs	r7, [r0], #-1139
    4a28:	00307473 	eorseq	r7, r0, r3, ror r4
    4a2c:	775c3a63 	ldrbvc	r3, [ip, -r3, ror #20]
    4a30:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
    4a34:	625c736d 	subsvs	r7, ip, #-1275068415	; 0xb4000001
    4a38:	646c6975 	strbtvs	r6, [ip], #-2421
    4a3c:	6363675c 	cmnvs	r3, #24117248	; 0x1700000
    4a40:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
    4a44:	615c646c 	cmpvs	ip, ip, ror #8
    4a48:	652d6d72 	strvs	r6, [sp, #-3442]!
    4a4c:	5c696261 	sfmpl	f6, 2, [r9], #-388
    4a50:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    4a54:	6c5c6269 	lfmvs	f6, 2, [ip], {105}
    4a58:	5c636269 	sfmpl	f6, 2, [r3], #-420
    4a5c:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4a60:	6d00676e 	stcvs	7, cr6, [r0, #-440]
    4a64:	70636d65 	rsbvc	r6, r3, r5, ror #26
    4a68:	656c0079 	strbvs	r0, [ip, #-121]!
    4a6c:	2e00306e 	cdpcs	0, 0, cr3, cr0, cr14, {3}
    4a70:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4a74:	2f2e2e2f 	svccs	0x002e2e2f
    4a78:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4a7c:	63672f2e 	cmnvs	r7, #184	; 0xb8
    4a80:	2e342d63 	cdpcs	13, 3, cr2, cr4, cr3, {3}
    4a84:	2f302e33 	svccs	0x00302e33
    4a88:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    4a8c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420
    4a90:	2f636269 	svccs	0x00636269
    4a94:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4a98:	6d2f676e 	stcvs	7, cr6, [pc, #-440]!
    4a9c:	70636d65 	rsbvc	r6, r3, r5, ror #26
    4aa0:	00632e79 	rsbeq	r2, r3, r9, ror lr
    4aa4:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    4aa8:	5f64656e 	svcpl	0x0064656e
    4aac:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
    4ab0:	2f2e2e00 	svccs	0x002e2e00
    4ab4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4ab8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4abc:	2f2e2e2f 	svccs	0x002e2e2f
    4ac0:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    4ac4:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    4ac8:	656e2f30 	strbvs	r2, [lr, #-3888]!
    4acc:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4ad0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4ad4:	74732f63 	ldrbtvc	r2, [r3], #-3939
    4ad8:	676e6972 	undefined
    4adc:	6d656d2f 	stclvs	13, cr6, [r5, #-188]!
    4ae0:	2e746573 	mrccs	5, 3, r6, cr4, cr3, {3}
    4ae4:	656d0063 	strbvs	r0, [sp, #-99]!
    4ae8:	7465736d 	strbtvc	r7, [r5], #-877
    4aec:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    4af0:	00726566 	rsbseq	r6, r2, r6, ror #10
    4af4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4af8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4afc:	2f2e2e2f 	svccs	0x002e2e2f
    4b00:	672f2e2e 	strvs	r2, [pc, -lr, lsr #28]!
    4b04:	342d6363 	strtcc	r6, [sp], #-867
    4b08:	302e332e 	eorcc	r3, lr, lr, lsr #6
    4b0c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4b10:	2f62696c 	svccs	0x0062696c
    4b14:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    4b18:	6474732f 	ldrbtvs	r7, [r4], #-815
    4b1c:	2f62696c 	svccs	0x0062696c
    4b20:	74615f5f 	strbtvc	r5, [r1], #-3935
    4b24:	74697865 	strbtvc	r7, [r9], #-2149
    4b28:	7400632e 	strvc	r6, [r0], #-814
    4b2c:	00657079 	rsbeq	r7, r5, r9, ror r0
    4b30:	65725f5f 	ldrbvs	r5, [r2, #-3935]!
    4b34:	74736967 	ldrbtvc	r6, [r3], #-2407
    4b38:	655f7265 	ldrbvs	r7, [pc, #-613]	; 48db <__Stack_Size+0x44db>
    4b3c:	70746978 	rsbsvc	r6, r4, r8, ror r9
    4b40:	00636f72 	rsbeq	r6, r3, r2, ror pc
    4b44:	61635f5f 	cmnvs	r3, pc, asr pc
    4b48:	655f6c6c 	ldrbvs	r6, [pc, #-3180]	; 3ee4 <__Stack_Size+0x3ae4>
    4b4c:	70746978 	rsbsvc	r6, r4, r8, ror r9
    4b50:	73636f72 	cmnvc	r3, #456	; 0x1c8
    4b54:	2f2e2e00 	svccs	0x002e2e00
    4b58:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4b5c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4b60:	2f2e2e2f 	svccs	0x002e2e2f
    4b64:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    4b68:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    4b6c:	656e2f30 	strbvs	r2, [lr, #-3888]!
    4b70:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4b74:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4b78:	74732f63 	ldrbtvc	r2, [r3], #-3939
    4b7c:	62696c64 	rsbvs	r6, r9, #25600	; 0x6400
    4b80:	635f5f2f 	cmpvs	pc, #188	; 0xbc
    4b84:	5f6c6c61 	svcpl	0x006c6c61
    4b88:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    4b8c:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
    4b90:	73616c00 	cmnvc	r1, #0	; 0x0
    4b94:	72007074 	andvc	r7, r0, #116	; 0x74
    4b98:	61747365 	cmnvs	r4, r5, ror #6
    4b9c:	Address 0x00004b9c is out of bounds.


Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000000 	andeq	r0, r0, r0
       4:	00000002 	andeq	r0, r0, r2
       8:	025d0001 	subseq	r0, sp, #1	; 0x1
       c:	04000000 	streq	r0, [r0]
      10:	02000000 	andeq	r0, r0, #0	; 0x0
      14:	04147d00 	ldreq	r7, [r4], #-3328
      18:	08000000 	stmdaeq	r0, {}
      1c:	02000003 	andeq	r0, r0, #3	; 0x3
      20:	00187d00 	andseq	r7, r8, r0, lsl #26
      24:	00000000 	andeq	r0, r0, r0
      28:	76000000 	strvc	r0, [r0], -r0
      2c:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
      30:	01000000 	tsteq	r0, r0
      34:	00a25000 	adceq	r5, r2, r0
      38:	00aa0000 	adceq	r0, sl, r0
      3c:	00010000 	andeq	r0, r1, r0
      40:	0000d250 	andeq	sp, r0, r0, asr r2
      44:	0000d800 	andeq	sp, r0, r0, lsl #16
      48:	50000100 	andpl	r0, r0, r0, lsl #2
      4c:	000001a4 	andeq	r0, r0, r4, lsr #3
      50:	000001aa 	andeq	r0, r0, sl, lsr #3
      54:	b8500001 	ldmdalt	r0, {r0}^
      58:	be000001 	cdplt	0, 0, cr0, cr0, cr1, {0}
      5c:	01000001 	tsteq	r0, r1
      60:	020a5000 	andeq	r5, sl, #0	; 0x0
      64:	020c0000 	andeq	r0, ip, #0	; 0x0
      68:	00010000 	andeq	r0, r1, r0
      6c:	00000050 	andeq	r0, r0, r0, asr r0
      70:	00000000 	andeq	r0, r0, r0
      74:	00013800 	andeq	r3, r1, r0, lsl #16
      78:	00013c00 	andeq	r3, r1, r0, lsl #24
      7c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
      88:	00000104 	.word	0x00000104
      8c:	00000106 	.word	0x00000106
      90:	065d0001 	.word	0x065d0001
      94:	08000001 	.word	0x08000001
      98:	02000001 	.word	0x02000001
      9c:	08047d00 	.word	0x08047d00
      a0:	10000001 	.word	0x10000001
      a4:	02000001 	.word	0x02000001
      a8:	00087d00 	.word	0x00087d00
      ac:	00000000 	.word	0x00000000
      b0:	10000000 	.word	0x10000000
      b4:	12000001 	.word	0x12000001
      b8:	01000001 	.word	0x01000001
      bc:	01125d00 	.word	0x01125d00
      c0:	01140000 	.word	0x01140000
      c4:	00020000 	.word	0x00020000
      c8:	0114047d 	.word	0x0114047d
      cc:	011c0000 	.word	0x011c0000
      d0:	00020000 	.word	0x00020000
      d4:	0000087d 	.word	0x0000087d
      d8:	00000000 	.word	0x00000000
      dc:	011c0000 	.word	0x011c0000
      e0:	011e0000 	.word	0x011e0000
      e4:	00010000 	.word	0x00010000
      e8:	00011e5d 	.word	0x00011e5d
      ec:	00012000 	.word	0x00012000
      f0:	7d000200 	.word	0x7d000200
      f4:	00012004 	.word	0x00012004
      f8:	00012800 	.word	0x00012800
      fc:	7d000200 	.word	0x7d000200
     100:	00000008 	.word	0x00000008
     104:	00000000 	.word	0x00000000
     108:	00012800 	.word	0x00012800
	ui2a(num,10,0,bf);
	}

static int a2d(char ch)
	{
	if (ch>='0' && ch<='9') 
     10c:	00012a00 	.word	0x00012a00
     110:	5d000100 	.word	0x5d000100
	int num=0;
	int digit;
	while ((digit=a2d(ch))>=0) {
		if (digit>base) break;
		num=num*base+digit;
		ch=*p++;
     114:	0000012a 	.word	0x0000012a

static int a2d(char ch)
	{
	if (ch>='0' && ch<='9') 
		return ch-'0';
	else if (ch>='a' && ch<='f')
     118:	0000012c 	.word	0x0000012c
     11c:	047d0002 	.word	0x047d0002
		return ch-'a'+10;
     120:	0000012c 	.word	0x0000012c
     124:	00000134 	.word	0x00000134
	else if (ch>='A' && ch<='F')
     128:	087d0002 	.word	0x087d0002
	...
		return ch-'A'+10;
     134:	00000090 	.word	0x00000090
static char a2i(char ch, char** src,int base,int* nump)
	{
	char* p= *src;
	int num=0;
	int digit;
	while ((digit=a2d(ch))>=0) {
     138:	00000098 	.word	0x00000098
			if (ch=='l') {
				ch=*(fmt++);
				lng=1;
			}
#endif
			switch (ch) {
     13c:	9a500001 	.word	0x9a500001
     140:	bc000000 	.word	0xbc000000
     144:	01000000 	.word	0x01000000
     148:	00005000 	.word	0x00005000
     14c:	00000000 	.word	0x00000000
     150:	00980000 	.word	0x00980000
     154:	00a80000 	.word	0x00a80000
     158:	00010000 	.word	0x00010000
     15c:	00000050 	.word	0x00000050
     160:	00000000 	.word	0x00000000
     164:	0000a800 	.word	0x0000a800
     168:	0000ba00 	.word	0x0000ba00
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
     16c:	50000100 	.word	0x50000100
	...

static void i2a (int num, char * bf)
	{
	if (num<0) {
		num=-num;
		*bf++ = '-';
     178:	000000c4 	.word	0x000000c4
     17c:	000000d2 	.word	0x000000d2
	*bf=0;
	}

static void i2a (int num, char * bf)
	{
	if (num<0) {
     180:	d25d0001 	.word	0xd25d0001
		num=-num;
		*bf++ = '-';
     184:	24000000 	.word	0x24000000
     188:	02000002 	.word	0x02000002
		}
	ui2a(num,10,0,bf);
     18c:	000c7d00 	.word	0x000c7d00
     190:	00000000 	.word	0x00000000
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
					putchw(putp,putf,w,lz,bf);
     194:	24000000 	.word	0x24000000
     198:	26000002 	.word	0x26000002
     19c:	01000002 	.word	0x01000002
     1a0:	02265d00 	.word	0x02265d00
     1a4:	02320000 	.word	0x02320000
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
     1a8:	00020000 	.word	0x00020000
     1ac:	0232047d 	.word	0x0232047d
     1b0:	02580000 	.word	0x02580000
     1b4:	00020000 	.word	0x00020000
     1b8:	0000087d 	.word	0x0000087d
					putchw(putp,putf,w,lz,bf);
     1bc:	00000000 	.word	0x00000000
     1c0:	02580000 	.word	0x02580000
     1c4:	025a0000 	.word	0x025a0000
					break;
				case 'c' : 
					putf(putp,(char)(va_arg(va, int)));
     1c8:	00010000 	.word	0x00010000
     1cc:	00025a5d 	.word	0x00025a5d
     1d0:	00053400 	.word	0x00053400
					break;
				case 's' : 
					putchw(putp,putf,w,0,va_arg(va, char*));
     1d4:	7d000200 	.word	0x7d000200
     1d8:	0000000c 	.word	0x0000000c
     1dc:	00000000 	.word	0x00000000
     1e0:	00025800 	.word	0x00025800
     1e4:	00026200 	.word	0x00026200
     1e8:	50000100 	.word	0x50000100
	...
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
     1f4:	0000026e 	.word	0x0000026e
     1f8:	00000308 	.word	0x00000308
					break;
				}
			}
		}
	abort:;
	}
     1fc:	08500001 	.word	0x08500001


void init_printf(void* putp,void (*putf) (void*,char))
	{
	stdout_putf=putf;
     200:	1e000003 	.word	0x1e000003
	stdout_putp=putp;
     204:	01000003 	.word	0x01000003
	}
     208:	031e5200 	.word	0x031e5200
     20c:	03240000 	.word	0x03240000
     210:	00010000 	.word	0x00010000
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
     214:	00036450 	.word	0x00036450
     218:	00036a00 	.word	0x00036a00
	}
     21c:	50000100 	.word	0x50000100



void tfp_sprintf(char* s,char *fmt, ...)
	{
     220:	0000036a 	.word	0x0000036a
     224:	00000382 	.word	0x00000382
     228:	c0520001 	.word	0xc0520001
     22c:	c2000003 	.word	0xc2000003
     230:	01000003 	.word	0x01000003
	va_list va;
	va_start(va,fmt);
	tfp_format(&s,putcp,fmt,va);
     234:	03c25200 	.word	0x03c25200
     238:	03cc0000 	.word	0x03cc0000
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
     23c:	00010000 	.word	0x00010000
	va_list va;
	va_start(va,fmt);
	tfp_format(&s,putcp,fmt,va);
	putcp(&s,0);
	va_end(va);
	}
     240:	00042853 	.word	0x00042853
     244:	00044000 	.word	0x00044000
     248:	50000100 	.word	0x50000100
     24c:	0000047e 	.word	0x0000047e
	stdout_putf=putf;
	stdout_putp=putp;
	}

void tfp_printf(char *fmt, ...)
	{
     250:	00000482 	.word	0x00000482
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
     254:	82520001 	.word	0x82520001
     258:	a2000004 	.word	0xa2000004
	stdout_putf=putf;
	stdout_putp=putp;
	}

void tfp_printf(char *fmt, ...)
	{
     25c:	01000004 	.word	0x01000004
     260:	04d45100 	.word	0x04d45100
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
     264:	04d80000 	.word	0x04d80000
	va_end(va);
	}
     268:	00010000 	.word	0x00010000
     26c:	00051851 	.word	0x00051851
     270:	00053400 	.word	0x00053400
     274:	50000100 	.word	0x50000100
	...
	dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction (INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
     280:	00000534 	.word	0x00000534
     284:	00000536 	.word	0x00000536
     288:	365d0001 	.word	0x365d0001
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
	}
	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
     28c:	e0000005 	.word	0xe0000005
     290:	02000005 	.word	0x02000005
     294:	00087d00 	.word	0x00087d00
	dxl_txrx_packet();
     298:	00000000 	.word	0x00000000
	u16 CommStatus = dxl_get_result();
     29c:	e0000000 	.word	0xe0000000
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
     2a0:	e4000005 	.word	0xe4000005
		PrintErrorCode();
     2a4:	01000005 	.word	0x01000005
	else
		PrintCommStatus(CommStatus);
     2a8:	05e45d00 	.word	0x05e45d00
#endif
}
     2ac:	068c0000 	.word	0x068c0000
     2b0:	00020000 	.word	0x00020000
     2b4:	00000c7d 	.word	0x00000c7d
     2b8:	00000000 	.word	0x00000000
	}
	interpolating = 1;
}
/* interpolate our pose, this should be called at about 30Hz. */
#define WAIT_SLOP_FACTOR 10
int BioloidControllerEx_interpolateStep(bool fWait) {
     2bc:	068c0000 	.word	0x068c0000
     2c0:	06900000 	.word	0x06900000

	if (interpolating == 0)
     2c4:	00010000 	.word	0x00010000
		return 0;
	int i;
	int complete = poseSize;
     2c8:	0006905d 	.word	0x0006905d
	if (!fWait) {
     2cc:	00081000 	.word	0x00081000
		if (getMillis() < (nextframe_ - WAIT_SLOP_FACTOR)) {
     2d0:	7d000200 	.word	0x7d000200
     2d4:	00000010 	.word	0x00000010
     2d8:	00000000 	.word	0x00000000
			return (getMillis() - nextframe_); // We still have some time to do something...
     2dc:	00068c00 	.word	0x00068c00
     2e0:	0006a000 	.word	0x0006a000
     2e4:	50000100 	.word	0x50000100
#ifdef MILLIS
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	while (getMillis() < nextframe_);
     2e8:	000006be 	.word	0x000006be
     2ec:	000006ca 	.word	0x000006ca
     2f0:	ca500001 	.word	0xca500001
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
     2f4:	d6000006 	.word	0xd6000006
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     2f8:	01000006 	.word	0x01000006
     2fc:	06fc5200 	.word	0x06fc5200
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
     300:	07100000 	.word	0x07100000
     304:	00010000 	.word	0x00010000
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     308:	00074050 	.word	0x00074050
		int diff = nextpose_[i] - pose_[i];
     30c:	00075800 	.word	0x00075800
     310:	50000100 	.word	0x50000100
     314:	0000078c 	.word	0x0000078c
     318:	000007a4 	.word	0x000007a4
     31c:	d4500001 	.word	0xd4500001
		if (diff == 0) {
     320:	10000007 	.word	0x10000007
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
     324:	01000008 	.word	0x01000008
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
     328:	00005000 	.word	0x00005000
		int diff = nextpose_[i] - pose_[i];
		if (diff == 0) {
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
     32c:	00000000 	.word	0x00000000
					pose_[i] = nextpose_[i];
     330:	069a0000 	.word	0x069a0000
					complete--;
     334:	06aa0000 	.word	0x06aa0000
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
     338:	00010000 	.word	0x00010000
     33c:	00000051 	.word	0x00000051
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
     340:	00000000 	.word	0x00000000
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
     344:	00081000 	.word	0x00081000
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
     348:	00081400 	.word	0x00081400
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     34c:	5d000100 	.word	0x5d000100
     350:	00000814 	.word	0x00000814
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif

	}
	if (complete <= 0)
     354:	000008dc 	.word	0x000008dc
		interpolating = 0;
     358:	087d0002 	.word	0x087d0002
	...
	BioloidControllerEx_writePose();
	return 0;
}
     364:	00000810 	.word	0x00000810
     368:	0000083e 	.word	0x0000083e
     36c:	3e500001 	.word	0x3e500001
     370:	44000008 	.word	0x44000008
     374:	01000008 	.word	0x01000008
     378:	08505100 	.word	0x08505100
     37c:	08600000 	.word	0x08600000
     380:	00010000 	.word	0x00010000
	for (i = 0; i < poseSize; i++)
		//nextpose_[i] = pgm_read_word_near(addr+1+i) << BIOLOID_SHIFT;
		nextpose_[i] = pgm_read_word_near(addr + 1 + i);
}
/* read in current servo positions to the pose. */
void BioloidControllerEx_readPose() {
     384:	00086050 	.word	0x00086050
     388:	00086800 	.word	0x00086800
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
		//pose_[i] = dxl_read_word(id_[i],AXM_PRESENT_POSITION_L)<<BIOLOID_SHIFT;
		pose_[i] = dxl_read_word(id_[i], AXM_PRESENT_POSITION_L);
     38c:	52000100 	.word	0x52000100
     390:	0000087a 	.word	0x0000087a
     394:	0000088a 	.word	0x0000088a
     398:	8a500001 	.word	0x8a500001
     39c:	8e000008 	.word	0x8e000008
		PrintChar(id_[i]);
		PrintString(" - ");
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
     3a0:	01000008 	.word	0x01000008

#ifdef DEBUG_BIOLOIDEX
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
     3a4:	08ae5300 	.word	0x08ae5300
     3a8:	08c20000 	.word	0x08c20000
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
	}
}
     3ac:	00010000 	.word	0x00010000
     3b0:	00000050 	.word	0x00000050
     3b4:	00000000 	.word	0x00000000
     3b8:	00081800 	.word	0x00081800
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitPosY[GaitCurrentLegNr] = -3 * g_InControlState.LegLiftHeight
				/ (3 + g_InControlState.gaitCur.HalfLiftHeight); // Easier to shift between div factor: /1 (3/3), /2 (3/6) and 3/4
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y
     3bc:	00081a00 	.word	0x00081a00
				/ g_InControlState.gaitCur.LiftDivFactor;
	}

	//Optional Half heigth Rear 5 LiftedPos (5 lifted positions)
	else if (((g_InControlState.gaitCur.NrLiftedPos == 5 && (LegStep == -2)))
     3c0:	54000100 	.word	0x54000100
     3c4:	00000822 	.word	0x00000822
     3c8:	000008dc 	.word	0x000008dc
     3cc:	00540001 	.word	0x00540001
     3d0:	00000000 	.word	0x00000000
     3d4:	dc000000 	.word	0xdc000000
     3d8:	ec000008 	.word	0xec000008
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = -g_InControlState.TravelLength.x / 2;
     3dc:	01000008 	.word	0x01000008
     3e0:	00005000 	.word	0x00005000
     3e4:	00000000 	.word	0x00000000
     3e8:	090c0000 	.word	0x090c0000
     3ec:	09120000 	.word	0x09120000
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
     3f0:	00010000 	.word	0x00010000
     3f4:	0009125d 	.word	0x0009125d
     3f8:	00091e00 	.word	0x00091e00
     3fc:	7d000200 	.word	0x7d000200
     400:	00091e0c 	.word	0x00091e0c
		GaitPosZ[GaitCurrentLegNr] = -g_InControlState.TravelLength.z / 2;
     404:	00097000 	.word	0x00097000
     408:	7d000200 	.word	0x7d000200
     40c:	00000010 	.word	0x00000010
     410:	00000000 	.word	0x00000000
		GaitRotY[GaitCurrentLegNr] = -g_InControlState.TravelLength.y / 2;
     414:	00090c00 	.word	0x00090c00
     418:	00091c00 	.word	0x00091c00
     41c:	50000100 	.word	0x50000100
     420:	0000091c 	.word	0x0000091c
	}

	//Optional Half heigth Front 5 LiftedPos (5 lifted positions)
	else if ((g_InControlState.gaitCur.NrLiftedPos == 5)
     424:	00000938 	.word	0x00000938
     428:	00540001 	.word	0x00540001
     42c:	00000000 	.word	0x00000000
     430:	0c000000 	.word	0x0c000000
     434:	28000009 	.word	0x28000009
     438:	01000009 	.word	0x01000009
			&& (LegStep == 2
					|| LegStep == -(g_InControlState.gaitCur.StepsInGait - 2))
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
     43c:	09285100 	.word	0x09285100
     440:	09700000 	.word	0x09700000
     444:	00010000 	.word	0x00010000
     448:	00000055 	.word	0x00000055
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
     44c:	00000000 	.word	0x00000000
     450:	00097000 	.word	0x00097000
     454:	00097200 	.word	0x00097200
     458:	5d000100 	.word	0x5d000100
     45c:	00000972 	.word	0x00000972
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
     460:	00000978 	.word	0x00000978
     464:	147d0002 	.word	0x147d0002
     468:	00000978 	.word	0x00000978
     46c:	00000a50 	.word	0x00000a50
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y / 2;
     470:	187d0002 	.word	0x187d0002
	...
     47c:	00000970 	.word	0x00000970
	}
	//_B_
	//Leg front down position //bug here?  From _A_ to _B_ there should only be one gaitstep, not 2!
	//For example, where is the case of LegStep==0+2 executed when NRLiftedPos=3?
	else if ((LegStep == g_InControlState.gaitCur.FrontDownPos
     480:	000009ac 	.word	0x000009ac
     484:	00500001 	.word	0x00500001
     488:	00000000 	.word	0x00000000
     48c:	70000000 	.word	0x70000000
     490:	a4000009 	.word	0xa4000009
     494:	01000009 	.word	0x01000009
     498:	00005100 	.word	0x00005100
     49c:	00000000 	.word	0x00000000
			|| LegStep
					== -(g_InControlState.gaitCur.StepsInGait
							- g_InControlState.gaitCur.FrontDownPos))
			&& GaitPosY[GaitCurrentLegNr] < 0) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
     4a0:	09700000 	.word	0x09700000
     4a4:	09760000 	.word	0x09760000
     4a8:	00010000 	.word	0x00010000
     4ac:	00097652 	.word	0x00097652
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
     4b0:	00099400 	.word	0x00099400
     4b4:	56000100 	.word	0x56000100
	...
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y / 2;
     4c0:	00000970 	.word	0x00000970
     4c4:	0000098a 	.word	0x0000098a
     4c8:	00530001 	.word	0x00530001
		GaitPosY[GaitCurrentLegNr] = 0;
     4cc:	00000000 	.word	0x00000000
     4d0:	88000000 	.word	0x88000000
	}

	//Move body forward
	else {
		GaitPosX[GaitCurrentLegNr] = GaitPosX[GaitCurrentLegNr]
     4d4:	a8000009 	.word	0xa8000009
     4d8:	01000009 	.word	0x01000009
     4dc:	00005400 	.word	0x00005400
     4e0:	00000000 	.word	0x00000000
     4e4:	09800000 	.word	0x09800000
     4e8:	09a00000 	.word	0x09a00000
				- (g_InControlState.TravelLength.x
						/ (short) g_InControlState.gaitCur.TLDivFactor);
		GaitPosY[GaitCurrentLegNr] = 0;
     4ec:	00010000 	.word	0x00010000
     4f0:	00000055 	.word	0x00000055
     4f4:	00000000 	.word	0x00000000
		GaitPosZ[GaitCurrentLegNr] = GaitPosZ[GaitCurrentLegNr]
     4f8:	000a5000 	.word	0x000a5000
     4fc:	000a5200 	.word	0x000a5200
     500:	5d000100 	.word	0x5d000100
     504:	00000a52 	.word	0x00000a52
				- (g_InControlState.TravelLength.z
						/ (short) g_InControlState.gaitCur.TLDivFactor);
		GaitRotY[GaitCurrentLegNr] = GaitRotY[GaitCurrentLegNr]
     508:	00000a56 	.word	0x00000a56
     50c:	147d0002 	.word	0x147d0002
     510:	00000a56 	.word	0x00000a56
     514:	00000d20 	.word	0x00000d20
				- (g_InControlState.TravelLength.y
						/ (short) g_InControlState.gaitCur.TLDivFactor);
	}

}
     518:	c87d0003 	.word	0xc87d0003
	...
     524:	000a5000 	.word	0x000a5000
     528:	000a6000 	.word	0x000a6000
     52c:	50000100 	.word	0x50000100
	...
//[GAIT Sequence]
void GaitSeq(void) {
	//Check if the Gait is in motion - If not if we are going to start a motion try to align our Gaitstep to start with a good foot
	// for the direction we are about to go...

	if (fWalking || (g_InControlState.ForceGaitStepCnt != 0))
     538:	00000a50 	.word	0x00000a50
     53c:	00000a7c 	.word	0x00000a7c
     540:	00510001 	.word	0x00510001
		TravelRequest = true;   // Is walking or was walking...
     544:	00000000 	.word	0x00000000
     548:	50000000 	.word	0x50000000
	else {
		TravelRequest = (abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
     54c:	6600000a 	.word	0x6600000a
     550:	0100000a 	.word	0x0100000a
     554:	0a665200 	.word	0x0a665200
     558:	0a8a0000 	.word	0x0a8a0000
     55c:	00010000 	.word	0x00010000
     560:	00000050 	.word	0x00000050
     564:	00000000 	.word	0x00000000
     568:	000a5000 	.word	0x000a5000
     56c:	000a5a00 	.word	0x000a5a00
     570:	53000100 	.word	0x53000100
     574:	00000a5a 	.word	0x00000a5a
     578:	00000d20 	.word	0x00000d20
     57c:	047d0002 	.word	0x047d0002
	...
			g_InControlState.TravelLength.y = 0; //Gait NOT in motion, return to home position
		}
	}

	//Calculate Gait sequence
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
     588:	00000a50 	.word	0x00000a50
     58c:	00000a66 	.word	0x00000a66
     590:	00910002 	.word	0x00910002
		Gait(LegIndex);
     594:	00000a66 	.word	0x00000a66
			g_InControlState.TravelLength.y = 0; //Gait NOT in motion, return to home position
		}
	}

	//Calculate Gait sequence
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
     598:	00000a96 	.word	0x00000a96
     59c:	00520001 	.word	0x00520001
     5a0:	00000000 	.word	0x00000000
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5a4:	b6000000 	.word	0xb6000000
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
     5a8:	d400000a 	.word	0xd400000a
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5ac:	0100000a 	.word	0x0100000a
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
     5b0:	00005700 	.word	0x00005700
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5b4:	00000000 	.word	0x00000000
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
		g_InControlState.GaitStep = 1;
     5b8:	0ac00000 	.word	0x0ac00000
     5bc:	0b040000 	.word	0x0b040000

	// If we have a force count decrement it now...
	if (g_InControlState.ForceGaitStepCnt)
     5c0:	00010000 	.word	0x00010000
     5c4:	00000056 	.word	0x00000056
		g_InControlState.ForceGaitStepCnt--;
     5c8:	00000000 	.word	0x00000000
}
     5cc:	000a7000 	.word	0x000a7000
     5d0:	000aec00 	.word	0x000aec00
     5d4:	54000100 	.word	0x54000100
	...
}
//--------------------------------------------------------------------
//[BalanceBody]
void BalanceBody(void) {

	TotalTransZ = TotalTransZ / BalanceDivFactor;
     5e0:	00000a76 	.word	0x00000a76
     5e4:	00000ad6 	.word	0x00000ad6
     5e8:	287d0002 	.word	0x287d0002
     5ec:	00000ad6 	.word	0x00000ad6
     5f0:	00000adc 	.word	0x00000adc
	TotalTransX = TotalTransX / BalanceDivFactor;
     5f4:	00520001 	.word	0x00520001
     5f8:	00000000 	.word	0x00000000
     5fc:	8e000000 	.word	0x8e000000
	TotalTransY = TotalTransY / BalanceDivFactor;
     600:	e400000a 	.word	0xe400000a
     604:	0200000a 	.word	0x0200000a
     608:	e42c7d00 	.word	0xe42c7d00
     60c:	f000000a 	.word	0xf000000a

	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
		TotalXBal1 += 3600;

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
     610:	0100000a 	.word	0x0100000a
     614:	00005100 	.word	0x00005100
	TotalTransX = TotalTransX / BalanceDivFactor;
	TotalTransY = TotalTransY / BalanceDivFactor;

#ifndef QUADMODE // ??? on PhantomX Hex at no movment YBal1 = 1800, on Quad = 0...  Need to experiment
	if (TotalYBal1 > 0)        //Rotate balance circle by +/- 180 deg
		TotalYBal1 -= 1800;
     618:	00000000 	.word	0x00000000
     61c:	0d200000 	.word	0x0d200000
	else
		TotalYBal1 += 1800;
     620:	0d220000 	.word	0x0d220000
#endif

	if (TotalZBal1 < -1800) //Compensate for extreme balance positions that causes overflow
     624:	00010000 	.word	0x00010000
     628:	000d225d 	.word	0x000d225d
     62c:	000d2600 	.word	0x000d2600
		TotalZBal1 += 3600;
     630:	7d000200 	.word	0x7d000200
     634:	000d2614 	.word	0x000d2614

	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
     638:	000ea400 	.word	0x000ea400
     63c:	7d000200 	.word	0x7d000200
		TotalXBal1 += 3600;
     640:	00000020 	.word	0x00000020
     644:	00000000 	.word	0x00000000

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
     648:	000d2000 	.word	0x000d2000
     64c:	000d2e00 	.word	0x000d2e00
	TotalXBal1 = -TotalXBal1 / BalanceDivFactor;
     650:	50000100 	.word	0x50000100
	...
     65c:	00000d20 	.word	0x00000d20
     660:	00000d28 	.word	0x00000d28
	TotalZBal1 = TotalZBal1 / BalanceDivFactor;
     664:	28510001 	.word	0x28510001
     668:	8000000d 	.word	0x8000000d

}
     66c:	0100000d 	.word	0x0100000d
     670:	00005500 	.word	0x00005500
     674:	00000000 	.word	0x00000000
     678:	0d200000 	.word	0x0d200000
     67c:	0d2e0000 	.word	0x0d2e0000
     680:	00010000 	.word	0x00010000
     684:	00000052 	.word	0x00000052
     688:	00000000 	.word	0x00000000
//sin4        - Output Sinus of AngleDeg
//cos4          - Output Cosinus of AngleDeg
void GetSinCos(short AngleDeg1) {
	short ABSAngleDeg1;   //Absolute value of the Angle in Degrees, decimals = 1
	//Get the absolute value of AngleDeg
	if (AngleDeg1 < 0)
     68c:	000d2000 	.word	0x000d2000
     690:	000d2e00 	.word	0x000d2e00
		ABSAngleDeg1 = AngleDeg1 * -1;
     694:	53000100 	.word	0x53000100
     698:	00000d2e 	.word	0x00000d2e
	else
		ABSAngleDeg1 = AngleDeg1;

	//Shift rotation to a full circle of 360 deg -> AngleDeg // 360
	if (AngleDeg1 < 0)    //Negative values
		AngleDeg1 = 3600 - (ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600)));
     69c:	00000ea4 	.word	0x00000ea4
     6a0:	00560001 	.word	0x00560001
     6a4:	00000000 	.word	0x00000000
     6a8:	a4000000 	.word	0xa4000000
     6ac:	a600000e 	.word	0xa600000e
     6b0:	0100000e 	.word	0x0100000e
     6b4:	00005000 	.word	0x00005000
     6b8:	00000000 	.word	0x00000000
     6bc:	0ea40000 	.word	0x0ea40000
	else
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));

	if (AngleDeg1 >= 0 && AngleDeg1 <= 900)     // 0 to 90 deg
     6c0:	0eaa0000 	.word	0x0eaa0000
     6c4:	00010000 	.word	0x00010000
			{
		sin4 = pgm_read_word(&GetSin[AngleDeg1 / 5]); // 5 is the presision (0.5) of the table
     6c8:	000eaa53 	.word	0x000eaa53
     6cc:	000ebe00 	.word	0x000ebe00
     6d0:	5c000100 	.word	0x5c000100
	...
     6dc:	00000ea6 	.word	0x00000ea6
     6e0:	00000eaa 	.word	0x00000eaa
     6e4:	aa500001 	.word	0xaa500001
     6e8:	b800000e 	.word	0xb800000e
     6ec:	0100000e 	.word	0x0100000e
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
     6f0:	0eba5300 	.word	0x0eba5300
     6f4:	0ebc0000 	.word	0x0ebc0000
     6f8:	00010000 	.word	0x00010000
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
     6fc:	000ebc53 	.word	0x000ebc53
     700:	000ebc00 	.word	0x000ebc00
     704:	50000100 	.word	0x50000100
	...
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     710:	00000ec0 	.word	0x00000ec0
     714:	00000ec6 	.word	0x00000ec6
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     718:	c65d0001 	.word	0xc65d0001
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     71c:	7000000e 	.word	0x7000000e
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     720:	0200000f 	.word	0x0200000f
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     724:	00147d00 	.word	0x00147d00
     728:	00000000 	.word	0x00000000
     72c:	d8000000 	.word	0xd8000000
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     730:	dc00000e 	.word	0xdc00000e
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     734:	0100000e 	.word	0x0100000e
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     738:	0edc5000 	.word	0x0edc5000
     73c:	0ede0000 	.word	0x0ede0000
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
     740:	00010000 	.word	0x00010000
     744:	000ede5c 	.word	0x000ede5c
     748:	000eec00 	.word	0x000eec00
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     74c:	53000100 	.word	0x53000100
     750:	00000eec 	.word	0x00000eec
     754:	00000eee 	.word	0x00000eee
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     758:	ee5c0001 	.word	0xee5c0001
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     75c:	f000000e 	.word	0xf000000e
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     760:	0100000e 	.word	0x0100000e
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     764:	0ef05300 	.word	0x0ef05300
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     768:	0ef80000 	.word	0x0ef80000
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     76c:	00010000 	.word	0x00010000
     770:	000ef850 	.word	0x000ef850
     774:	000efc00 	.word	0x000efc00
     778:	5c000100 	.word	0x5c000100
	...
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     784:	00000ef8 	.word	0x00000ef8
     788:	00000efc 	.word	0x00000efc
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
     78c:	fc500001 	.word	0xfc500001
     790:	fe00000e 	.word	0xfe00000e
     794:	0100000e 	.word	0x0100000e
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     798:	0efe5c00 	.word	0x0efe5c00
     79c:	0f040000 	.word	0x0f040000
     7a0:	00010000 	.word	0x00010000
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7a4:	000f0453 	.word	0x000f0453
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7a8:	000f0800 	.word	0x000f0800
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7ac:	5c000100 	.word	0x5c000100
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7b0:	00000f08 	.word	0x00000f08
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7b4:	00000f0e 	.word	0x00000f0e
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7b8:	0e530001 	.word	0x0e530001
     7bc:	1000000f 	.word	0x1000000f
     7c0:	0100000f 	.word	0x0100000f
     7c4:	0f105c00 	.word	0x0f105c00
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7c8:	0f120000 	.word	0x0f120000
     7cc:	00010000 	.word	0x00010000
     7d0:	000f1253 	.word	0x000f1253
	//Shift rotation to a full circle of 360 deg -> AngleDeg // 360
	if (AngleDeg1 < 0)    //Negative values
		AngleDeg1 = 3600 - (ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600)));
	else
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));
     7d4:	000f1a00 	.word	0x000f1a00
     7d8:	50000100 	.word	0x50000100
     7dc:	00000f1a 	.word	0x00000f1a
     7e0:	00000f20 	.word	0x00000f20
     7e4:	005c0001 	.word	0x005c0001
     7e8:	00000000 	.word	0x00000000
     7ec:	d4000000 	.word	0xd4000000
     7f0:	d800000e 	.word	0xd800000e
     7f4:	0100000e 	.word	0x0100000e
     7f8:	0ed85000 	.word	0x0ed85000
	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
	}
}
     7fc:	0edc0000 	.word	0x0edc0000
     800:	00010000 	.word	0x00010000
     804:	000f1a5c 	.word	0x000f1a5c
     808:	000f2000 	.word	0x000f2000
     80c:	50000100 	.word	0x50000100
//cos4        - Input Cosinus
//AngleRad4     - Output Angle in AngleRad4
long GetArcCos(short cos4) {
	boolean NegativeValue/*:1*/;    //If the the value is Negative
	//Check for negative value
	if (cos4 < 0) {
     810:	00000f20 	.word	0x00000f20
     814:	00000f22 	.word	0x00000f22
     818:	225c0001 	.word	0x225c0001
		cos4 = -cos4;
     81c:	2800000f 	.word	0x2800000f
     820:	0100000f 	.word	0x0100000f
		NegativeValue = 1;
	} else
		NegativeValue = 0;

	//Limit cos4 to his maximal value
	cos4 = min(cos4, c4DEC);
     824:	0f285300 	.word	0x0f285300
     828:	0f2c0000 	.word	0x0f2c0000
     82c:	00010000 	.word	0x00010000

	if ((cos4 >= 0) && (cos4 < 9000)) {
     830:	000f2c5c 	.word	0x000f2c5c
     834:	000f3200 	.word	0x000f3200
     838:	53000100 	.word	0x53000100
		AngleRad4 = (byte) pgm_read_byte(&GetACos[cos4 / 79]);
     83c:	00000f32 	.word	0x00000f32
     840:	00000f34 	.word	0x00000f34
     844:	345c0001 	.word	0x345c0001
		AngleRad4 = ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255) ;
     848:	3600000f 	.word	0x3600000f
     84c:	0100000f 	.word	0x0100000f
	} else if ((cos4 >= 9000) && (cos4 < 9900)) {
     850:	0f365300 	.word	0x0f365300
     854:	0f700000 	.word	0x0f700000
     858:	00010000 	.word	0x00010000
     85c:	00000050 	.word	0x00000050
		AngleRad4 = (byte) pgm_read_byte(&GetACos[(cos4 - 9000) / 8 + 114]);
     860:	00000000 	.word	0x00000000
     864:	000f7000 	.word	0x000f7000
     868:	000f8c00 	.word	0x000f8c00
     86c:	50000100 	.word	0x50000100
     870:	00000f92 	.word	0x00000f92
     874:	00000fae 	.word	0x00000fae
		AngleRad4 = (long) ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255)
     878:	b4500001 	.word	0xb4500001
	} else if ((cos4 >= 9900) && (cos4 <= 10000)) {
     87c:	b400000f 	.word	0xb400000f
     880:	0100000f 	.word	0x0100000f
     884:	00005000 	.word	0x00005000
		AngleRad4 = (byte) pgm_read_byte(&GetACos[(cos4 - 9900) / 2 + 227]);
     888:	00000000 	.word	0x00000000
     88c:	0fb80000 	.word	0x0fb80000
     890:	0fbc0000 	.word	0x0fbc0000
		AngleRad4 = (long) ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255)
     894:	00010000 	.word	0x00010000
     898:	000fbc5d 	.word	0x000fbc5d
     89c:	000fc600 	.word	0x000fc600
     8a0:	7d000200 	.word	0x7d000200
     8a4:	000fc604 	.word	0x000fc604
     8a8:	000ff000 	.word	0x000ff000
     8ac:	7d000200 	.word	0x7d000200
	}

	//Add negative sign
	if (NegativeValue)
		AngleRad4 = 31416 - AngleRad4;
     8b0:	00000008 	.word	0x00000008
     8b4:	00000000 	.word	0x00000000
     8b8:	000ff000 	.word	0x000ff000
     8bc:	000ff200 	.word	0x000ff200
     8c0:	5d000100 	.word	0x5d000100

	return AngleRad4;
}
     8c4:	00000ff2 	.word	0x00000ff2
     8c8:	00001008 	.word	0x00001008
     8cc:	147d0002 	.word	0x147d0002
     8d0:	00001008 	.word	0x00001008
     8d4:	0000107c 	.word	0x0000107c
     8d8:	187d0002 	.word	0x187d0002
	...

	root = 0;
	remainder = n;
	place = 0x40000000; // OR place = 0x4000; OR place = 0x40; - respectively

	while (place > remainder)
     8e4:	00000ff0 	.word	0x00000ff0
     8e8:	00001004 	.word	0x00001004
     8ec:	04500001 	.word	0x04500001
		place = place >> 2;
	while (place) {
		if (remainder >= root + place) {
     8f0:	7c000010 	.word	0x7c000010
			remainder = remainder - root - place;
     8f4:	01000010 	.word	0x01000010
     8f8:	00005500 	.word	0x00005500
			root = root + (place << 1);
     8fc:	00000000 	.word	0x00000000

	while (place > remainder)
		place = place >> 2;
	while (place) {
		if (remainder >= root + place) {
			remainder = remainder - root - place;
     900:	10840000 	.word	0x10840000
			root = root + (place << 1);
		}
		root = root >> 1;
		place = place >> 2;
     904:	10860000 	.word	0x10860000
	remainder = n;
	place = 0x40000000; // OR place = 0x4000; OR place = 0x40; - respectively

	while (place > remainder)
		place = place >> 2;
	while (place) {
     908:	00010000 	.word	0x00010000
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
	XYhyp2 = isqrt32(
     90c:	0010865d 	.word	0x0010865d
//(GETATAN2) Simplyfied ArcTan2 function based on fixed point ArcCos
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
     910:	00108a00 	.word	0x00108a00
	XYhyp2 = isqrt32(
     914:	7d000200 	.word	0x7d000200
     918:	00108a04 	.word	0x00108a04
//(GETATAN2) Simplyfied ArcTan2 function based on fixed point ArcCos
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
     91c:	0010c000 	.word	0x0010c000
	XYhyp2 = isqrt32(
     920:	7d000200 	.word	0x7d000200
     924:	00000008 	.word	0x00000008
     928:	00000000 	.word	0x00000000
			((long) AtanX * AtanX * c4DEC) + ((long) AtanY * AtanY * c4DEC));
	GetArcCos(((long) AtanX * (long) c6DEC) / (long) XYhyp2);
     92c:	0010a400 	.word	0x0010a400
     930:	0010b400 	.word	0x0010b400
     934:	52000100 	.word	0x52000100
     938:	000010b4 	.word	0x000010b4
     93c:	000010c0 	.word	0x000010c0
     940:	00520001 	.word	0x00520001
     944:	00000000 	.word	0x00000000

	if (AtanY < 0) // removed overhead... Atan4 = AngleRad4 * (AtanY/abs(AtanY));
     948:	aa000000 	.word	0xaa000000
		Atan4 = -AngleRad4;
     94c:	b4000010 	.word	0xb4000010
	else
		Atan4 = AngleRad4;
     950:	01000010 	.word	0x01000010
	XYhyp2 = isqrt32(
			((long) AtanX * AtanX * c4DEC) + ((long) AtanY * AtanY * c4DEC));
	GetArcCos(((long) AtanX * (long) c6DEC) / (long) XYhyp2);

	if (AtanY < 0) // removed overhead... Atan4 = AngleRad4 * (AtanY/abs(AtanY));
		Atan4 = -AngleRad4;
     954:	10b45000 	.word	0x10b45000
	else
		Atan4 = AngleRad4;
     958:	10c00000 	.word	0x10c00000
     95c:	00010000 	.word	0x00010000
	return Atan4;
}
     960:	00000050 	.word	0x00000050
     964:	00000000 	.word	0x00000000
     968:	0010c000 	.word	0x0010c000
     96c:	0010c200 	.word	0x0010c200

}

//--------------------------------------------------------------------
//[BalCalcOneLeg]
void BalCalcOneLeg(long PosX, long PosZ, long PosY, byte BalLegNr) {
     970:	5d000100 	.word	0x5d000100
	long CPR_Y;            //Final Y value for centerpoint of rotation
	long CPR_Z;            //Final Z value for centerpoint of rotation

	long lAtan;
	//Calculating totals from center of the body to the feet
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BalLegNr]) + PosZ;
     974:	000010c2 	.word	0x000010c2
     978:	000010c6 	.word	0x000010c6
	CPR_X = (short) pgm_read_word(&cOffsetX[BalLegNr]) + PosX;
     97c:	047d0002 	.word	0x047d0002
     980:	000010c6 	.word	0x000010c6
	CPR_Y = 150 + PosY; // using the value 150 to lower the centerpoint of rotation 'g_InControlState.BodyPos.y +

	TotalTransY += (long) PosY;
     984:	0000115c 	.word	0x0000115c
     988:	087d0002 	.word	0x087d0002
	...
	TotalTransZ += (long) CPR_Z;
     994:	0000115c 	.word	0x0000115c
     998:	0000115e 	.word	0x0000115e
	TotalTransX += (long) CPR_X;
     99c:	5e5d0001 	.word	0x5e5d0001
     9a0:	62000011 	.word	0x62000011
     9a4:	02000011 	.word	0x02000011
     9a8:	62047d00 	.word	0x62047d00

	lAtan = GetATan2(CPR_X, CPR_Z);
     9ac:	78000011 	.word	0x78000011
	TotalYBal1 += (lAtan * 1800) / 31415;
     9b0:	02000011 	.word	0x02000011
     9b4:	00087d00 	.word	0x00087d00
     9b8:	00000000 	.word	0x00000000
     9bc:	78000000 	.word	0x78000000
     9c0:	7a000011 	.word	0x7a000011
     9c4:	01000011 	.word	0x01000011
     9c8:	117a5d00 	.word	0x117a5d00
     9cc:	117e0000 	.word	0x117e0000

	lAtan = GetATan2(CPR_X, CPR_Y);
     9d0:	00020000 	.word	0x00020000
     9d4:	117e047d 	.word	0x117e047d
	TotalZBal1 += ((lAtan * 1800) / 31415) - 900; //Rotate balance circle 90 deg
     9d8:	11bc0000 	.word	0x11bc0000
     9dc:	00020000 	.word	0x00020000
     9e0:	0000087d 	.word	0x0000087d
     9e4:	00000000 	.word	0x00000000
     9e8:	11bc0000 	.word	0x11bc0000
     9ec:	11be0000 	.word	0x11be0000
     9f0:	00010000 	.word	0x00010000
     9f4:	0011be5d 	.word	0x0011be5d
     9f8:	0011c200 	.word	0x0011c200
     9fc:	7d000200 	.word	0x7d000200

	lAtan = GetATan2(CPR_Z, CPR_Y);
     a00:	0011c214 	.word	0x0011c214
     a04:	00124c00 	.word	0x00124c00
	TotalXBal1 += ((lAtan * 1800) / 31415) - 900; //Rotate balance circle 90 deg
     a08:	7d000200 	.word	0x7d000200
     a0c:	00000018 	.word	0x00000018
     a10:	00000000 	.word	0x00000000
     a14:	0011bc00 	.word	0x0011bc00
     a18:	0011c400 	.word	0x0011c400
     a1c:	50000100 	.word	0x50000100
     a20:	000011c4 	.word	0x000011c4
     a24:	000011e4 	.word	0x000011e4

}
     a28:	00540001 	.word	0x00540001
     a2c:	00000000 	.word	0x00000000
     a30:	bc000000 	.word	0xbc000000
     a34:	ca000011 	.word	0xca000011
     a38:	01000011 	.word	0x01000011
     a3c:	11ca5100 	.word	0x11ca5100
     a40:	124c0000 	.word	0x124c0000
     a44:	00010000 	.word	0x00010000
     a48:	00000056 	.word	0x00000056
     a4c:	00000000 	.word	0x00000000
//SinG                  - Sin buffer for BodyRotZ
//CosG               - Cos buffer for BodyRotZ
//BodyFKPosX         - Output Position X of feet with Rotation
//BodyFKPosY         - Output Position Y of feet with Rotation
//BodyFKPosZ         - Output Position Z of feet with Rotation
void BodyFK(short PosX, short PosZ, short PosY, short RotationY, byte BodyIKLeg) {
     a50:	00124c00 	.word	0x00124c00
     a54:	00124e00 	.word	0x00124e00
	short CPR_X;            //Final X value for centerpoint of rotation
	short CPR_Y;            //Final Y value for centerpoint of rotation
	short CPR_Z;            //Final Z value for centerpoint of rotation

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
     a58:	5d000100 	.word	0x5d000100
     a5c:	0000124e 	.word	0x0000124e
     a60:	000012a0 	.word	0x000012a0
//SinG                  - Sin buffer for BodyRotZ
//CosG               - Cos buffer for BodyRotZ
//BodyFKPosX         - Output Position X of feet with Rotation
//BodyFKPosY         - Output Position Y of feet with Rotation
//BodyFKPosZ         - Output Position Z of feet with Rotation
void BodyFK(short PosX, short PosZ, short PosY, short RotationY, byte BodyIKLeg) {
     a64:	107d0002 	.word	0x107d0002
	...
	short CPR_Z;            //Final Z value for centerpoint of rotation

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
     a70:	00001260 	.word	0x00001260
     a74:	0000127a 	.word	0x0000127a

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     a78:	7e540001 	.word	0x7e540001

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BodyIKLeg]) + PosZ
     a7c:	a0000012 	.word	0xa0000012
     a80:	01000012 	.word	0x01000012
	//Successive global rotation matrix:
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
     a84:	00005400 	.word	0x00005400
     a88:	00000000 	.word	0x00000000

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BodyIKLeg]) + PosZ
     a8c:	12a00000 	.word	0x12a00000
	//Successive global rotation matrix:
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
     a90:	12a20000 	.word	0x12a20000
     a94:	00010000 	.word	0x00010000
	SinG4 = sin4;
     a98:	0012a25d 	.word	0x0012a25d
	CosG4 = cos4;
     a9c:	0012a400 	.word	0x0012a400
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
	SinG4 = sin4;
     aa0:	7d000200 	.word	0x7d000200
	CosG4 = cos4;
     aa4:	0012a404 	.word	0x0012a404
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
	SinG4 = sin4;
     aa8:	0012d800 	.word	0x0012d800
	CosG4 = cos4;

	GetSinCos(g_InControlState.BodyRot1.z + TotalZBal1);
     aac:	7d000200 	.word	0x7d000200
	SinB4 = sin4;
     ab0:	00000008 	.word	0x00000008
     ab4:	00000000 	.word	0x00000000
	CosB4 = cos4;
     ab8:	0012d800 	.word	0x0012d800

	GetSinCos(g_InControlState.BodyRot1.y + (RotationY * c1DEC) + TotalYBal1);
     abc:	0012da00 	.word	0x0012da00
     ac0:	5d000100 	.word	0x5d000100
     ac4:	000012da 	.word	0x000012da
     ac8:	000012de 	.word	0x000012de
     acc:	0c7d0002 	.word	0x0c7d0002

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     ad0:	000012de 	.word	0x000012de
     ad4:	00001310 	.word	0x00001310
     ad8:	107d0002 	.word	0x107d0002
	...
     ae4:	00001310 	.word	0x00001310
     ae8:	00001312 	.word	0x00001312
     aec:	125d0001 	.word	0x125d0001
     af0:	20000013 	.word	0x20000013
     af4:	02000013 	.word	0x02000013
     af8:	20047d00 	.word	0x20047d00
     afc:	44000013 	.word	0x44000013
     b00:	02000013 	.word	0x02000013
     b04:	00087d00 	.word	0x00087d00
     b08:	00000000 	.word	0x00000000
     b0c:	44000000 	.word	0x44000000
     b10:	4a000013 	.word	0x4a000013
     b14:	01000013 	.word	0x01000013
     b18:	134a5d00 	.word	0x134a5d00
     b1c:	14680000 	.word	0x14680000
     b20:	00020000 	.word	0x00020000
     b24:	0000087d 	.word	0x0000087d
     b28:	00000000 	.word	0x00000000
     b2c:	14680000 	.word	0x14680000
     b30:	146a0000 	.word	0x146a0000
     b34:	00010000 	.word	0x00010000
     b38:	00146a5d 	.word	0x00146a5d
     b3c:	00146e00 	.word	0x00146e00
     b40:	7d000200 	.word	0x7d000200
     b44:	00146e14 	.word	0x00146e14
     b48:	00155400 	.word	0x00155400
     b4c:	7d000200 	.word	0x7d000200
     b50:	00000020 	.word	0x00000020
     b54:	00000000 	.word	0x00000000
     b58:	00146800 	.word	0x00146800
     b5c:	00147600 	.word	0x00147600
     b60:	50000100 	.word	0x50000100
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     b64:	00001476 	.word	0x00001476
     b68:	0000153c 	.word	0x0000153c

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     b6c:	007d0002 	.word	0x007d0002
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     b70:	0000153c 	.word	0x0000153c
     b74:	00001554 	.word	0x00001554
     b78:	74910002 	.word	0x74910002
	...
     b84:	00001496 	.word	0x00001496
     b88:	0000149c 	.word	0x0000149c
     b8c:	047d0002 	.word	0x047d0002
     b90:	0000149c 	.word	0x0000149c
     b94:	000014c4 	.word	0x000014c4
     b98:	78910002 	.word	0x78910002
     b9c:	000014c4 	.word	0x000014c4
     ba0:	00001512 	.word	0x00001512
     ba4:	047d0002 	.word	0x047d0002
     ba8:	00001512 	.word	0x00001512
     bac:	00001536 	.word	0x00001536
     bb0:	78910002 	.word	0x78910002
     bb4:	0000153c 	.word	0x0000153c
     bb8:	00001554 	.word	0x00001554
     bbc:	78910002 	.word	0x78910002
	...
     bc8:	000014b0 	.word	0x000014b0
     bcc:	000014e0 	.word	0x000014e0
     bd0:	00550001 	.word	0x00550001
     bd4:	00000000 	.word	0x00000000
     bd8:	54000000 	.word	0x54000000
     bdc:	5c000015 	.word	0x5c000015
     be0:	01000015 	.word	0x01000015
     be4:	155c5d00 	.word	0x155c5d00
     be8:	158a0000 	.word	0x158a0000
     bec:	00020000 	.word	0x00020000
     bf0:	158a147d 	.word	0x158a147d
     bf4:	15e00000 	.word	0x15e00000
     bf8:	00020000 	.word	0x00020000
     bfc:	0000207d 	.word	0x0000207d
     c00:	00000000 	.word	0x00000000
     c04:	15540000 	.word	0x15540000
     c08:	15720000 	.word	0x15720000
     c0c:	00010000 	.word	0x00010000
     c10:	00157250 	.word	0x00157250
     c14:	0015e000 	.word	0x0015e000
     c18:	56000100 	.word	0x56000100
	...
     c24:	00001554 	.word	0x00001554
     c28:	0000155a 	.word	0x0000155a
     c2c:	00510001 	.word	0x00510001
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * CosG4 / c4DEC
					- (long) CPR_Z * c2DEC * SinA4 / c4DEC * SinB4 / c4DEC
							* SinG4 / c4DEC
					- (long) CPR_Y * c2DEC * CosB4 / c4DEC * SinG4 / c4DEC))
			/ c2DEC;
	BodyFKPosY = ((long) CPR_Y * c2DEC
     c30:	00000000 	.word	0x00000000
	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     c34:	54000000 	.word	0x54000000
     c38:	68000015 	.word	0x68000015
     c3c:	01000015 	.word	0x01000015
     c40:	00005200 	.word	0x00005200
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * CosG4 / c4DEC
					- (long) CPR_Z * c2DEC * SinA4 / c4DEC * SinB4 / c4DEC
							* SinG4 / c4DEC
					- (long) CPR_Y * c2DEC * CosB4 / c4DEC * SinG4 / c4DEC))
			/ c2DEC;
	BodyFKPosY = ((long) CPR_Y * c2DEC
     c44:	00000000 	.word	0x00000000
     c48:	15540000 	.word	0x15540000
     c4c:	15740000 	.word	0x15740000
     c50:	00010000 	.word	0x00010000
     c54:	00000053 	.word	0x00000053
     c58:	00000000 	.word	0x00000000
     c5c:	0015e000 	.word	0x0015e000
     c60:	0015e200 	.word	0x0015e200
     c64:	5d000100 	.word	0x5d000100
     c68:	000015e2 	.word	0x000015e2
     c6c:	000015e4 	.word	0x000015e4
     c70:	147d0002 	.word	0x147d0002
     c74:	000015e4 	.word	0x000015e4
     c78:	00001664 	.word	0x00001664
     c7c:	187d0002 	.word	0x187d0002
	...
     c88:	000015f4 	.word	0x000015f4
     c8c:	00001642 	.word	0x00001642
     c90:	00500001 	.word	0x00500001
     c94:	00000000 	.word	0x00000000
     c98:	64000000 	.word	0x64000000
     c9c:	66000016 	.word	0x66000016
     ca0:	01000016 	.word	0x01000016
     ca4:	16665d00 	.word	0x16665d00
     ca8:	16b80000 	.word	0x16b80000
     cac:	00020000 	.word	0x00020000
     cb0:	0000087d 	.word	0x0000087d
     cb4:	00000000 	.word	0x00000000
     cb8:	16b80000 	.word	0x16b80000
     cbc:	16ba0000 	.word	0x16ba0000
     cc0:	00010000 	.word	0x00010000
     cc4:	0016ba5d 	.word	0x0016ba5d
     cc8:	0016bc00 	.word	0x0016bc00
     ccc:	7d000200 	.word	0x7d000200
     cd0:	0016bc04 	.word	0x0016bc04
     cd4:	00171400 	.word	0x00171400
     cd8:	7d000200 	.word	0x7d000200
     cdc:	00000008 	.word	0x00000008
     ce0:	00000000 	.word	0x00000000
     ce4:	00171400 	.word	0x00171400
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * SinG4 / c4DEC
					+ (long) CPR_Z * c2DEC * CosG4 / c4DEC * SinA4 / c4DEC
							* SinB4 / c4DEC
					+ (long) CPR_Y * c2DEC * CosB4 / c4DEC * CosG4 / c4DEC))
			/ c2DEC;
}
     ce8:	00171600 	.word	0x00171600
     cec:	5d000100 	.word	0x5d000100
     cf0:	00001716 	.word	0x00001716
     cf4:	00001718 	.word	0x00001718
     cf8:	147d0002 	.word	0x147d0002
     cfc:	00001718 	.word	0x00001718
     d00:	00001cb0 	.word	0x00001cb0
     d04:	287d0002 	.word	0x287d0002
	...
     d10:	0000172e 	.word	0x0000172e
     d14:	00001730 	.word	0x00001730
     d18:	007d0002 	.word	0x007d0002
     d1c:	00001736 	.word	0x00001736
//FemurAngle1           - Output Angle of Femur in degrees
//TibiaAngle1           - Output Angle of Tibia in degrees
//CoxaAngle1            - Output Angle of Coxa in degrees
//--------------------------------------------------------------------
void LegIK(short IKFeetPosX, short IKFeetPosY, short IKFeetPosZ,
		byte LegIKLegNr) {
     d20:	00001c14 	.word	0x00001c14
     d24:	007d0002 	.word	0x007d0002
     d28:	00001c14 	.word	0x00001c14
	long Temp1;
	long Temp2;
	long T3;

	//Calculate IKCoxaAngle and IKFeetPosXZ
	GetATan2(IKFeetPosX, IKFeetPosZ);
     d2c:	00001c38 	.word	0x00001c38
	CoxaAngle1[LegIKLegNr] = (((long) Atan4 * 180) / 3141)
     d30:	6c910002 	.word	0x6c910002
     d34:	00001c52 	.word	0x00001c52
     d38:	00001cb0 	.word	0x00001cb0
     d3c:	6c910002 	.word	0x6c910002
	...
     d48:	00001834 	.word	0x00001834
     d4c:	00001838 	.word	0x00001838
     d50:	047d0002 	.word	0x047d0002
     d54:	000018f6 	.word	0x000018f6
	//Length between the Coxa and tars [foot]
	IKFeetPosXZ = XYhyp2 / c2DEC;

	//Using GetAtan2 for solving IKA1 and IKSW
	//IKA14 - Angle between SW line and the ground in radians
	IKA14 = GetATan2(IKFeetPosY - TarsOffsetY,
     d58:	00001bf2 	.word	0x00001bf2
     d5c:	047d0002 	.word	0x047d0002
     d60:	00001bf2 	.word	0x00001bf2
     d64:	00001c38 	.word	0x00001c38
     d68:	70910002 	.word	0x70910002
     d6c:	00001c52 	.word	0x00001c52
     d70:	00001cb0 	.word	0x00001cb0

	//IKSW2 - Length between femur axis and tars
	IKSW2 = XYhyp2;

	//IKA2 - Angle of the line S>W with respect to the femur in radians
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     d74:	70910002 	.word	0x70910002
	...
     d80:	00001836 	.word	0x00001836
					* (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))) * c4DEC
			+ ((long) IKSW2 * IKSW2));
	Temp2 = (long) (2 * (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])) * c2DEC
			* (unsigned long) IKSW2;
	T3 = Temp1 / (Temp2 / c4DEC);
	IKA24 = GetArcCos(T3);
     d84:	00001838 	.word	0x00001838
     d88:	087d0002 	.word	0x087d0002
     d8c:	000018ee 	.word	0x000018ee
     d90:	00001bf2 	.word	0x00001bf2
     d94:	087d0002 	.word	0x087d0002
     d98:	00001bf2 	.word	0x00001bf2
     d9c:	00001c38 	.word	0x00001c38
     da0:	74910002 	.word	0x74910002
     da4:	00001c52 	.word	0x00001c52
     da8:	00001cb0 	.word	0x00001cb0
     dac:	74910002 	.word	0x74910002
	...

	FemurAngle1[LegIKLegNr] = -(long) (IKA14 + IKA24) * 180
     db8:	00001826 	.word	0x00001826
     dbc:	00001b7c 	.word	0x00001b7c
     dc0:	0c7d0002 	.word	0x0c7d0002
     dc4:	00001b7c 	.word	0x00001b7c
     dc8:	00001ba0 	.word	0x00001ba0
     dcc:	78910002 	.word	0x78910002
     dd0:	00001ba0 	.word	0x00001ba0
     dd4:	00001bf2 	.word	0x00001bf2
     dd8:	0c7d0002 	.word	0x0c7d0002
			/ 3141+ 900 + CFEMURHORNOFFSET1(LegIKLegNr);  //Normal

	//IKTibiaAngle
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     ddc:	00001bf2 	.word	0x00001bf2
	Temp2 = (long) (2 * (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])) * c2DEC
			* (unsigned long) IKSW2;
	T3 = Temp1 / (Temp2 / c4DEC);
	IKA24 = GetArcCos(T3);

	FemurAngle1[LegIKLegNr] = -(long) (IKA14 + IKA24) * 180
     de0:	00001c38 	.word	0x00001c38
			/ 3141+ 900 + CFEMURHORNOFFSET1(LegIKLegNr);  //Normal

	//IKTibiaAngle
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     de4:	78910002 	.word	0x78910002
     de8:	00001c52 	.word	0x00001c52
			+ ((long) (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr])
					* (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))) * c4DEC
			- ((long) IKSW2 * IKSW2));
	Temp2 = 2 * ((long) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])))
			* (long) ((byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]));
	GetArcCos(Temp1 / Temp2);
     dec:	00001cb0 	.word	0x00001cb0
     df0:	78910002 	.word	0x78910002
	...
     dfc:	0000182e 	.word	0x0000182e
     e00:	000018e8 	.word	0x000018e8
     e04:	e8570001 	.word	0xe8570001
     e08:	ea000018 	.word	0xea000018

	TibiaAngle1[LegIKLegNr] = -(1450 - (long) AngleRad4 * 180 / 3141
     e0c:	01000018 	.word	0x01000018
     e10:	18fc5300 	.word	0x18fc5300
     e14:	1c380000 	.word	0x1c380000
     e18:	00010000 	.word	0x00010000
     e1c:	001c5257 	.word	0x001c5257
     e20:	001cb000 	.word	0x001cb000
     e24:	57000100 	.word	0x57000100
	...
     e30:	00001850 	.word	0x00001850
			+ CTIBIAHORNOFFSET1(LegIKLegNr)); //!!!!!!!!!!!!145 instead of 1800

	//Set the Solution quality
	if (IKSW2
     e34:	0000185c 	.word	0x0000185c
     e38:	76510001 	.word	0x76510001
     e3c:	c8000018 	.word	0xc8000018
     e40:	01000018 	.word	0x01000018
     e44:	18d05100 	.word	0x18d05100
			< ((word) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
					+ (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]) - 30)
					* c2DEC))
		IKSolution = 1;
     e48:	18d20000 	.word	0x18d20000
	else {
		if (IKSW2
     e4c:	00010000 	.word	0x00010000
     e50:	00000051 	.word	0x00000051
				< ((word) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
						+ (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))
						* c2DEC))
			IKSolutionWarning = 1;
     e54:	00000000 	.word	0x00000000
     e58:	001cb000 	.word	0x001cb000
		else
			IKSolutionError = 1;
     e5c:	001cb200 	.word	0x001cb200
	}

}
     e60:	5d000100 	.word	0x5d000100
     e64:	00001cb2 	.word	0x00001cb2
     e68:	00001cb4 	.word	0x00001cb4
     e6c:	147d0002 	.word	0x147d0002
     e70:	00001cb4 	.word	0x00001cb4
     e74:	000021cc 	.word	0x000021cc
     e78:	207d0002 	.word	0x207d0002
	...
     e84:	00001cc0 	.word	0x00001cc0
     e88:	00001d2e 	.word	0x00001d2e
     e8c:	d8540001 	.word	0xd8540001
     e90:	fc00001d 	.word	0xfc00001d
     e94:	0100001d 	.word	0x0100001d
     e98:	1ec85400 	.word	0x1ec85400
     e9c:	1ed60000 	.word	0x1ed60000
     ea0:	00010000 	.word	0x00010000
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ea4:	001fc454 	.word	0x001fc454
	if (sVal < s) {
     ea8:	001fc800 	.word	0x001fc800
     eac:	54000100 	.word	0x54000100
		return s;
	}

	s = (short) pgm_read_word(sMax);
     eb0:	000020d4 	.word	0x000020d4
     eb4:	000020ea 	.word	0x000020ea
     eb8:	2e540001 	.word	0x2e540001

		return s;
	}
	return sVal;

}
     ebc:	cc000021 	.word	0xcc000021
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     ec0:	01000021 	.word	0x01000021
}

//--------------------------------------------------------------------
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
     ec4:	00005400 	.word	0x00005400
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     ec8:	00000000 	.word	0x00000000
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ecc:	000c0000 	.word	0x000c0000
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
     ed0:	00100000 	.word	0x00100000
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ed4:	00010000 	.word	0x00010000
	if (sVal < s) {
     ed8:	00000050 	.word	0x00000050
     edc:	00000000 	.word	0x00000000
     ee0:	00004400 	.word	0x00004400
		return s;
	}

	s = (short) pgm_read_word(sMax);
     ee4:	00004c00 	.word	0x00004c00
     ee8:	50000100 	.word	0x50000100
     eec:	0000004c 	.word	0x0000004c
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
     ef0:	0000007c 	.word	0x0000007c
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ef4:	00510001 	.word	0x00510001
	if (sVal < s) {
     ef8:	00000000 	.word	0x00000000
     efc:	4c000000 	.word	0x4c000000
     f00:	60000000 	.word	0x60000000
		return s;
	}

	s = (short) pgm_read_word(sMax);
     f04:	01000000 	.word	0x01000000
     f08:	00625000 	.word	0x00625000
     f0c:	006c0000 	.word	0x006c0000
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     f10:	00010000 	.word	0x00010000
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
     f14:	00000050 	.word	0x00000050
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     f18:	00000000 	.word	0x00000000
	if (sVal < s) {
     f1c:	00007c00 	.word	0x00007c00
     f20:	00008400 	.word	0x00008400
     f24:	50000100 	.word	0x50000100
		return s;
	}

	s = (short) pgm_read_word(sMax);
     f28:	00000084 	.word	0x00000084
     f2c:	000000b4 	.word	0x000000b4
     f30:	00510001 	.word	0x00510001
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
				FemurAngle1[LegIndex], &cFemurMin1[LegIndex],
				&cFemurMax1[LegIndex]);
		TibiaAngle1[LegIndex] = CheckServoAngleBounds(s++,
     f34:	00000000 	.word	0x00000000
     f38:	84000000 	.word	0x84000000
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     f3c:	98000000 	.word	0x98000000
     f40:	01000000 	.word	0x01000000
				TibiaAngle1[LegIndex], &cTibiaMin1[LegIndex],
				&cTibiaMax1[LegIndex]);

	}
#endif
}
     f44:	009a5000 	.word	0x009a5000
     f48:	00a40000 	.word	0x00a40000
     f4c:	00010000 	.word	0x00010000
     f50:	00000050 	.word	0x00000050
     f54:	00000000 	.word	0x00000000
     f58:	0000b400 	.word	0x0000b400
     f5c:	0000b800 	.word	0x0000b800
     f60:	5d000100 	.word	0x5d000100
     f64:	000000b8 	.word	0x000000b8
     f68:	000000e4 	.word	0x000000e4
     f6c:	087d0002 	.word	0x087d0002
	...
//            rotation and translation much smoother
//--------------------------------------------------------------------
short SmoothControl(short CtrlMoveInp, short CtrlMoveOut, byte CtrlDivider) {

	if (CtrlMoveOut < (CtrlMoveInp - 4))
		return CtrlMoveOut + abs((CtrlMoveOut - CtrlMoveInp) / CtrlDivider);
     f78:	000000fc 	.word	0x000000fc
     f7c:	000000fe 	.word	0x000000fe
     f80:	fe5d0001 	.word	0xfe5d0001
     f84:	6c000000 	.word	0x6c000000
     f88:	02000001 	.word	0x02000001
     f8c:	00107d00 	.word	0x00107d00
     f90:	00000000 	.word	0x00000000
	else if (CtrlMoveOut > (CtrlMoveInp + 4))
     f94:	fc000000 	.word	0xfc000000
		return CtrlMoveOut - abs((CtrlMoveOut - CtrlMoveInp) / CtrlDivider);
     f98:	08000000 	.word	0x08000000
     f9c:	01000001 	.word	0x01000001
     fa0:	00005000 	.word	0x00005000
     fa4:	00000000 	.word	0x00000000
     fa8:	016c0000 	.word	0x016c0000
     fac:	016e0000 	.word	0x016e0000
     fb0:	00010000 	.word	0x00010000

	return CtrlMoveInp;
}
     fb4:	00016e5d 	.word	0x00016e5d
// GetLegsXZLength -
//--------------------------------------------------------------------
word g_wLegsXZLength = 0xffff;
word GetLegsXZLength(void) {
	// Could save away or could do a little math on one leg...
	if (g_wLegsXZLength != 0xffff)
     fb8:	00017200 	.word	0x00017200
     fbc:	7d000200 	.word	0x7d000200
     fc0:	0001720c 	.word	0x0001720c

//--------------------------------------------------------------------
// GetLegsXZLength -
//--------------------------------------------------------------------
word g_wLegsXZLength = 0xffff;
word GetLegsXZLength(void) {
     fc4:	0001c800 	.word	0x0001c800
	// Could save away or could do a little math on one leg...
	if (g_wLegsXZLength != 0xffff)
		return g_wLegsXZLength;

	return isqrt32((LegPosX[0] * LegPosX[0]) + (LegPosZ[0] * LegPosZ[0]));
     fc8:	7d000200 	.word	0x7d000200
     fcc:	00000010 	.word	0x00000010
     fd0:	00000000 	.word	0x00000000
     fd4:	00016c00 	.word	0x00016c00
     fd8:	0001a600 	.word	0x0001a600
     fdc:	50000100 	.word	0x50000100
	...
}
     fe8:	00000176 	.word	0x00000176
     fec:	000001a0 	.word	0x000001a0

#ifndef MAX_XZ_LEG_ADJUST
#define MAX_XZ_LEG_ADJUST   (word)(cCoxaLength[0]+cTibiaLength[0] + cFemurLength[0]/4)
#endif

void AdjustLegPositions(word XZLength1) {
     ff0:	00520001 	.word	0x00520001
     ff4:	00000000 	.word	0x00000000
     ff8:	c8000000 	.word	0xc8000000
     ffc:	ca000001 	.word	0xca000001
    1000:	01000001 	.word	0x01000001
		XZLength1 = MAX_XZ_LEG_ADJUST;
	if (XZLength1 < MIN_XZ_LEG_ADJUST)
		XZLength1 = MIN_XZ_LEG_ADJUST;

	// see if same length as when we came in
	if (XZLength1 == g_wLegsXZLength)
    1004:	01ca5d00 	.word	0x01ca5d00
    1008:	02240000 	.word	0x02240000
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		GetSinCos((short) pgm_read_word(&cCoxaAngle1[LegIndex]));

		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
    100c:	00020000 	.word	0x00020000

	// see if same length as when we came in
	if (XZLength1 == g_wLegsXZLength)
		return;

	g_wLegsXZLength = XZLength1;
    1010:	0000087d 	.word	0x0000087d

	u8 LegIndex;
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		GetSinCos((short) pgm_read_word(&cCoxaAngle1[LegIndex]));
    1014:	00000000 	.word	0x00000000
    1018:	02240000 	.word	0x02240000

		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
    101c:	02260000 	.word	0x02260000
    1020:	00010000 	.word	0x00010000
    1024:	0002265d 	.word	0x0002265d
    1028:	00022a00 	.word	0x00022a00
    102c:	7d000200 	.word	0x7d000200
    1030:	00022a14 	.word	0x00022a14
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
    1034:	0002bc00 	.word	0x0002bc00
    1038:	7d000200 	.word	0x7d000200
    103c:	00000018 	.word	0x00000018
    1040:	00000000 	.word	0x00000000
    1044:	00025400 	.word	0x00025400
    1048:	00025a00 	.word	0x00025a00
		return;

	g_wLegsXZLength = XZLength1;

	u8 LegIndex;
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    104c:	54000100 	.word	0x54000100
	...
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
	}

	// Make sure we cycle through one gait to have the legs all move into their new locations...
	g_InControlState.ForceGaitStepCnt = g_InControlState.gaitCur.StepsInGait;
}
    1058:	000002bc 	.word	0x000002bc
    105c:	000002be 	.word	0x000002be
    1060:	be5d0001 	.word	0xbe5d0001
    1064:	c2000002 	.word	0xc2000002
    1068:	02000002 	.word	0x02000002
    106c:	c2147d00 	.word	0xc2147d00
    1070:	84000002 	.word	0x84000002
    1074:	02000003 	.word	0x02000003
    1078:	00187d00 	.word	0x00187d00
		g_InControlState.aCoxaInitAngle1[LegIndex] = (short)pgm_read_word(&cCoxaAngle1[LegIndex]);
#endif
	}
	g_wLegsXZLength = 0xffff;
#endif
}
    107c:	00000000 	.word	0x00000000
		else if (g_InControlState.aCoxaInitAngle1[LegIndex] < -700)
		g_InControlState.aCoxaInitAngle1[LegIndex] = -700;
	}
	g_wLegsXZLength = 0xffff;
#endif
}
    1080:	bc000000 	.word	0xbc000000
//     to be appropriate for the current y location of the body...
//--------------------------------------------------------------------

u8 g_iLegInitIndex = 0x00; // remember which index we are currently using...

void AdjustLegPositionsToBodyHeight() {
    1084:	d2000002 	.word	0xd2000002
    1088:	01000002 	.word	0x01000002
#ifdef CNT_HEX_INITS
	// Lets see which of our units we should use...
	// Note: We will also limit our body height here...
	if (g_InControlState.BodyPos.y
    108c:	02e65000 	.word	0x02e65000
			> (short) pgm_read_byte(&g_abHexMaxBodyY[CNT_HEX_INITS-1]))
		g_InControlState.BodyPos.y = (short) pgm_read_byte(
    1090:	02ec0000 	.word	0x02ec0000
				&g_abHexMaxBodyY[CNT_HEX_INITS-1]);

	u8 i;
	word XZLength1 = pgm_read_byte(&g_abHexIntXZ[CNT_HEX_INITS-1]);
	for (i = 0; i < (CNT_HEX_INITS - 1); i++) { // Don't need to look at last entry as we already init to assume this one...
		if (g_InControlState.BodyPos.y
    1094:	00010000 	.word	0x00010000
    1098:	00036050 	.word	0x00036050
				<= (short) pgm_read_byte(&g_abHexMaxBodyY[i])) {
			XZLength1 = pgm_read_byte(&g_abHexIntXZ[i]);
			break;
		}
	}
	if (i != g_iLegInitIndex) {
    109c:	00036200 	.word	0x00036200
				&g_abHexMaxBodyY[CNT_HEX_INITS-1]);

	u8 i;
	word XZLength1 = pgm_read_byte(&g_abHexIntXZ[CNT_HEX_INITS-1]);
	for (i = 0; i < (CNT_HEX_INITS - 1); i++) { // Don't need to look at last entry as we already init to assume this one...
		if (g_InControlState.BodyPos.y
    10a0:	50000100 	.word	0x50000100
	...
				<= (short) pgm_read_byte(&g_abHexMaxBodyY[i])) {
			XZLength1 = pgm_read_byte(&g_abHexIntXZ[i]);
			break;
		}
	}
	if (i != g_iLegInitIndex) {
    10ac:	0000030c 	.word	0x0000030c
		g_iLegInitIndex = i;  // remember the current index...
		AdjustLegPositions(XZLength1);
    10b0:	0000030e 	.word	0x0000030e
	}
#endif // CNT_HEX_INITS
}
    10b4:	1e530001 	.word	0x1e530001
    10b8:	2c000003 	.word	0x2c000003
    10bc:	01000003 	.word	0x01000003
}
//--------------------------------------------------------------------
//[CHECK VOLTAGE]
//Reads the input voltage and shuts down the bot when the power drops
byte s_bLVBeepCnt;
boolean CheckVoltage() {
    10c0:	03325300 	.word	0x03325300
    10c4:	033c0000 	.word	0x033c0000
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10c8:	00010000 	.word	0x00010000

	// BUGBUG:: if voltage is 0 it failed to retrieve don't hang program...
	//    if (!Voltage)
	//      return;

	if (!g_fLowVoltageShutdown) {
    10cc:	00034a53 	.word	0x00034a53
boolean CheckVoltage() {
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10d0:	00035800 	.word	0x00035800

	// BUGBUG:: if voltage is 0 it failed to retrieve don't hang program...
	//    if (!Voltage)
	//      return;

	if (!g_fLowVoltageShutdown) {
    10d4:	53000100 	.word	0x53000100
boolean CheckVoltage() {
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10d8:	0000035c 	.word	0x0000035c

	if (!g_fLowVoltageShutdown) {
		/**PrintString("Voltage : ");
		Printu32d(Voltage);
		PrintString("\n");*/
		if ((Voltage < cTurnOffVol) || (Voltage >= 1999)) {
    10dc:	00000360 	.word	0x00000360
    10e0:	00530001 	.word	0x00530001
    10e4:	00000000 	.word	0x00000000


			//Turn off
			g_InControlState.BodyPos.x = 0;
    10e8:	84000000 	.word	0x84000000
			g_InControlState.TravelLength.x = 0;
			g_InControlState.TravelLength.z = 0;

#ifdef OPT_SINGLELEG
			g_InControlState.TravelLength.y = 0;
			g_InControlState.SelectedLeg = 255;
    10ec:	86000003 	.word	0x86000003
    10f0:	01000003 	.word	0x01000003
#endif
			g_fLowVoltageShutdown = 1;
    10f4:	03865d00 	.word	0x03865d00
			s_bLVBeepCnt = 0;    // how many times we beeped...
    10f8:	038a0000 	.word	0x038a0000
		if ((Voltage < cTurnOffVol) || (Voltage >= 1999)) {


			//Turn off
			g_InControlState.BodyPos.x = 0;
			g_InControlState.BodyPos.y = 0;
    10fc:	00020000 	.word	0x00020000
			g_InControlState.BodyPos.z = 0;
			g_InControlState.BodyRot1.x = 0;
    1100:	038a147d 	.word	0x038a147d
			g_InControlState.BodyRot1.y = 0;
			g_InControlState.BodyRot1.z = 0;
    1104:	03bc0000 	.word	0x03bc0000
			g_InControlState.TravelLength.x = 0;
			g_InControlState.TravelLength.z = 0;
    1108:	00020000 	.word	0x00020000
#ifdef OPT_SINGLELEG
			g_InControlState.TravelLength.y = 0;
			g_InControlState.SelectedLeg = 255;
#endif
			g_fLowVoltageShutdown = 1;
			s_bLVBeepCnt = 0;    // how many times we beeped...
    110c:	0000187d 	.word	0x0000187d
			g_InControlState.fRobotOn = false;
    1110:	00000000 	.word	0x00000000
		}
#ifdef cTurnOnVol
	} else if ((Voltage > cTurnOnVol) && (Voltage < 1999)) {
    1114:	0000      	.short	0x0000
    1116:	0048      	.short	0x0048
    1118:	004a0000 	.word	0x004a0000

		g_fLowVoltageShutdown = 0;
    111c:	00010000 	.word	0x00010000
    1120:	00004a5d 	.word	0x00004a5d

#endif
	} else {
		if (s_bLVBeepCnt < 5) {
    1124:	00004e00 	.word	0x00004e00
    1128:	7d000200 	.word	0x7d000200
			s_bLVBeepCnt++;
    112c:	00004e14 	.word	0x00004e14

			//MSound( 1, 45, 2000);
			Buzzed(45, 2000);
    1130:	0000b400 	.word	0x0000b400
    1134:	7d000200 	.word	0x7d000200
    1138:	00000020 	.word	0x00000020
		}
		mDelay(2000);
    113c:	00000000 	.word	0x00000000
    1140:	00004800 	.word	0x00004800
    1144:	00005200 	.word	0x00005200
	}
#endif

	return g_fLowVoltageShutdown;
}
    1148:	50000100 	.word	0x50000100
    114c:	00000052 	.word	0x00000052
    1150:	000000b4 	.word	0x000000b4
    1154:	00540001 	.word	0x00540001
    1158:	00000000 	.word	0x00000000

//==============================================================================
// BackgroundProcess - Allows us to have some background processing for those
//    servo drivers that need us to do things like polling...
//==============================================================================
void BackgroundProcess(void) {
    115c:	62000000 	.word	0x62000000
    1160:	7e000000 	.word	0x7e000000
	if (g_fAXSpeedControl)
    1164:	02000000 	.word	0x02000000
		return;  // nothing to do in this mode...

	if (ServosEnabled) {
		//DebugToggle(A3);
		BioloidControllerEx_interpolateStep(false); // Do our background stuff...
    1168:	7e047d00 	.word	0x7e047d00
		Battery_Monitor_Alarm();
    116c:	84000000 	.word	0x84000000
	}
}
    1170:	02000000 	.word	0x02000000
    1174:	84789100 	.word	0x84789100
//Function that gets called from the main loop if the robot is not logically
//     on.  Gives us a chance to play some...
//--------------------------------------------------------------------
static u8 g_iIdleServoNum = (u8) - 1;
static u8 g_iIdleLedState = 1;  // what state to we wish to set...
void IdleTime(void) {
    1178:	b4000000 	.word	0xb4000000
    117c:	02000000 	.word	0x02000000
	// Each time we call this set servos LED on or off...
	g_iIdleServoNum++;
    1180:	00047d00 	.word	0x00047d00
	if (g_iIdleServoNum >= NUMSERVOS) {
    1184:	00000000 	.word	0x00000000
    1188:	b4000000 	.word	0xb4000000
		g_iIdleServoNum = 0;
    118c:	b6000000 	.word	0xb6000000
		g_iIdleLedState = 1 - g_iIdleLedState;
    1190:	01000000 	.word	0x01000000
    1194:	00b65d00 	.word	0x00b65d00
	}
	dxl_write_byte(pgm_read_byte(&cPinTable[g_iIdleServoNum]), AXM_LED,
    1198:	00ba0000 	.word	0x00ba0000
    119c:	00020000 	.word	0x00020000
    11a0:	00ba147d 	.word	0x00ba147d
    11a4:	01440000 	.word	0x01440000
    11a8:	00020000 	.word	0x00020000
			g_iIdleLedState);
	//ax12ReadPacket(6);  // get the response...


}
    11ac:	0000207d 	.word	0x0000207d
    11b0:	00000000 	.word	0x00000000
    11b4:	00b40000 	.word	0x00b40000
    11b8:	00be0000 	.word	0x00be0000

//--------------------------------------------------------------------
//[SetRegOnAllServos] Function that is called to set the state of one
//  register in all of the servos, like Torque on...
//--------------------------------------------------------------------
void SetRegOnAllServos(u8 bReg, u8 bVal) {
    11bc:	00010000 	.word	0x00010000
    11c0:	0000be50 	.word	0x0000be50
    11c4:	00014400 	.word	0x00014400
	 ax12write(bVal);

  }
  ax12write(0xff - (checksum % 256));
  setRX(0);*/
	 dxl_set_txpacket_id (BROADCAST_ID);
    11c8:	55000100 	.word	0x55000100
	...
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0,bReg);
    11d4:	000000d2 	.word	0x000000d2
	dxl_set_txpacket_parameter(1,2);
    11d8:	000000ee 	.word	0x000000ee
    11dc:	007d0002 	.word	0x007d0002
    11e0:	000000ee 	.word	0x000000ee
  int i;
	for (i = 0; i < poseSize; i++) {
		byte id = pgm_read_byte(&cPinTable[i]);
		dxl_set_txpacket_parameter(2 + 3 * i, id);
    11e4:	00000106 	.word	0x00000106
    11e8:	74910002 	.word	0x74910002
    11ec:	00000106 	.word	0x00000106
    11f0:	00000108 	.word	0x00000108
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
    11f4:	007d0002 	.word	0x007d0002
    11f8:	00000108 	.word	0x00000108
    11fc:	00000122 	.word	0x00000122
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
    1200:	74910002 	.word	0x74910002
    1204:	00000122 	.word	0x00000122
    1208:	00000144 	.word	0x00000144
	dxl_set_txpacket_parameter(1,2);
  int i;
	for (i = 0; i < poseSize; i++) {
		byte id = pgm_read_byte(&cPinTable[i]);
		dxl_set_txpacket_parameter(2 + 3 * i, id);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
    120c:	007d0002 	.word	0x007d0002
	...
	 dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0,bReg);
	dxl_set_txpacket_parameter(1,2);
  int i;
	for (i = 0; i < poseSize; i++) {
    1218:	000000c2 	.word	0x000000c2
    121c:	000000c4 	.word	0x000000c4
		dxl_set_txpacket_parameter(2 + 3 * i, id);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
	}

	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
    1220:	047d0002 	.word	0x047d0002
    1224:	000000ce 	.word	0x000000ce
    1228:	000000f2 	.word	0x000000f2
#ifdef DEBUG_BIOLOIDEX
	PrintString("DriverAX12 --- SetRegOnAllServos ---\n");
#endif
	dxl_txrx_packet();
    122c:	047d0002 	.word	0x047d0002

	u16 CommStatus = dxl_get_result();
    1230:	000000f2 	.word	0x000000f2
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
    1234:	00000108 	.word	0x00000108
		PrintErrorCode();
    1238:	78910002 	.word	0x78910002
	else
		PrintCommStatus(CommStatus);
    123c:	00000108 	.word	0x00000108
#endif
}
    1240:	00000144 	.word	0x00000144
    1244:	047d0002 	.word	0x047d0002
	...
//--------------------------------------------------------------------
void MakeSureServosAreOn(void) {

	if (ServosEnabled) {

		if (!g_fServosFree)
    1250:	00000144 	.word	0x00000144
			return;    // we are not free

		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		if (g_fAXSpeedControl) {
    1254:	00000146 	.word	0x00000146
    1258:	465d0001 	.word	0x465d0001

			int i;
			for (i = 0; i < NUMSERVOS; i++) {
				g_awGoalAXPos[i] = dxl_read_word(pgm_read_byte(&cPinTable[i]),
    125c:	4a000001 	.word	0x4a000001
    1260:	02000001 	.word	0x02000001
    1264:	4a147d00 	.word	0x4a147d00
    1268:	cc000001 	.word	0xcc000001
						AXM_PRESENT_POSITION_L);
				mDelay(25);
    126c:	02000001 	.word	0x02000001
    1270:	00207d00 	.word	0x00207d00

		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		if (g_fAXSpeedControl) {

			int i;
			for (i = 0; i < NUMSERVOS; i++) {
    1274:	00000000 	.word	0x00000000
    1278:	44000000 	.word	0x44000000
				g_awGoalAXPos[i] = dxl_read_word(pgm_read_byte(&cPinTable[i]),
						AXM_PRESENT_POSITION_L);
				mDelay(25);
			}
		} else {
			BioloidControllerEx_readPose();
    127c:	4e000001 	.word	0x4e000001
		}

		SetRegOnAllServos(AXM_TORQUE_ENABLE, 1);  // Use sync write to do it.
    1280:	01000001 	.word	0x01000001
    1284:	014e5000 	.word	0x014e5000

		CommanderInputController_AllowControllerInterrupts(true);
		g_fServosFree = false;
    1288:	01cc0000 	.word	0x01cc0000
	}

}
    128c:	00010000 	.word	0x00010000
    1290:	00000055 	.word	0x00000055
    1294:	00000000 	.word	0x00000000
    1298:	00015200 	.word	0x00015200
    129c:	00015400 	.word	0x00015400

//------------------------------------------------------------------------------------------
//[BeginServoUpdate] Does whatever preperation that is needed to starrt a move of our servos
//------------------------------------------------------------------------------------------
void BeginServoUpdate(void)    // Start the update
		{
    12a0:	7d000200 	.word	0x7d000200

	MakeSureServosAreOn();
    12a4:	00015e04 	.word	0x00015e04
	if (ServosEnabled) {

		if (g_fAXSpeedControl) {
    12a8:	00018000 	.word	0x00018000
    12ac:	7d000200 	.word	0x7d000200

#ifdef USE_AX12_SPEED_CONTROL
			// If we are trying our own Servo control need to save away the new positions...
			byte i;
			for (i = 0; i < NUMSERVOS; i++) {
				g_awCurAXPos[i] = g_awGoalAXPos[i];
    12b0:	00018004 	.word	0x00018004
    12b4:	00019400 	.word	0x00019400
    12b8:	91000200 	.word	0x91000200
		if (g_fAXSpeedControl) {

#ifdef USE_AX12_SPEED_CONTROL
			// If we are trying our own Servo control need to save away the new positions...
			byte i;
			for (i = 0; i < NUMSERVOS; i++) {
    12bc:	00019478 	.word	0x00019478
				g_awCurAXPos[i] = g_awGoalAXPos[i];
			}
#endif
		} else
			BioloidControllerEx_interpolateStep(true); // Make sure we call at least once
    12c0:	0001cc00 	.word	0x0001cc00
    12c4:	7d000200 	.word	0x7d000200

	}
}
    12c8:	00000004 	.word	0x00000004
    12cc:	00000000 	.word	0x00000000
    12d0:	0001cc00 	.word	0x0001cc00
    12d4:	0001ce00 	.word	0x0001ce00
}

//--------------------------------------------------------------------
//[FREE SERVOS] Frees all the servos
//--------------------------------------------------------------------
void FreeServos(void) {
    12d8:	5d000100 	.word	0x5d000100
    12dc:	000001ce 	.word	0x000001ce

	if (!g_fServosFree) {
    12e0:	000001d2 	.word	0x000001d2
		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		SetRegOnAllServos(AXM_TORQUE_ENABLE, 0);  // do this as one statement...
    12e4:	147d0002 	.word	0x147d0002
    12e8:	000001d2 	.word	0x000001d2
    12ec:	00000224 	.word	0x00000224
		byte i;
		for (i = 0; i < NUMSERVOS; i++) {
			Relax(pgm_read_byte(&cPinTable[i]));
    12f0:	207d0002 	.word	0x207d0002
	...

	if (!g_fServosFree) {
		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		SetRegOnAllServos(AXM_TORQUE_ENABLE, 0);  // do this as one statement...
		byte i;
		for (i = 0; i < NUMSERVOS; i++) {
    12fc:	000001cc 	.word	0x000001cc
			Relax(pgm_read_byte(&cPinTable[i]));
		}
		CommanderInputController_AllowControllerInterrupts(true);
		g_fServosFree = true;
    1300:	000001d8 	.word	0x000001d8
	}
}
    1304:	d8500001 	.word	0xd8500001
    1308:	24000001 	.word	0x24000001
    130c:	01000002 	.word	0x01000002
extern void SetRegOnAllServos(u8 bReg, u8 bVal);

//--------------------------------------------------------------------
//Init
//--------------------------------------------------------------------
void Servo_Init(void) {
    1310:	00005700 	.word	0x00005700
	// First lets get the actual servo positions for all of our servos...
	//pinMode(0, OUTPUT);
	g_fServosFree = true;
    1314:	00000000 	.word	0x00000000

  poseSize = NUMSERVOS;
    1318:	01d80000 	.word	0x01d80000
    131c:	01f20000 	.word	0x01f20000
  BioloidControllerEx_readPose();
    1320:	00020000 	.word	0x00020000
#ifdef cVoltagePin
	for (byte i=0; i < 8; i++)
	GetBatteryVoltage();  // init the voltage pin
#endif

	g_fAXSpeedControl = false;
    1324:	01f2047d 	.word	0x01f2047d
    1328:	02000000 	.word	0x02000000



	// Added - try to speed things up later if we do a query...
	SetRegOnAllServos(AXM_RETURN_DELAY_TIME, 0); // tell servos to give us back their info as quick as they can...
    132c:	00020000 	.word	0x00020000
    1330:	02007891 	.word	0x02007891

}
    1334:	02240000 	.word	0x02240000
    1338:	00020000 	.word	0x00020000
    133c:	0000047d 	.word	0x0000047d
    1340:	00000000 	.word	0x00000000

}

void setupPhoenix() {

	g_fShowDebugPrompt = true;
    1344:	02240000 	.word	0x02240000
void readSensors(){


}

void setupPhoenix() {
    1348:	02260000 	.word	0x02260000

	g_fShowDebugPrompt = true;
	g_fDebugOutput = false;
    134c:	00010000 	.word	0x00010000
    1350:	0002265d 	.word	0x0002265d
	//init BioloidEx
	BioloidControllerEx();
    1354:	00022a00 	.word	0x00022a00

	// Init our ServoDriver
	Servo_Init();
    1358:	7d000200 	.word	0x7d000200

	mDelay(10);
    135c:	00022a14 	.word	0x00022a14

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		LegPosX[LegIndex] = (short) pgm_read_word(&cInitPosX[LegIndex]); //Set start positions for each leg
    1360:	00027c00 	.word	0x00027c00
    1364:	7d000200 	.word	0x7d000200
		LegPosY[LegIndex] = (short) pgm_read_word(&cInitPosY[LegIndex]);
    1368:	00000020 	.word	0x00000020
    136c:	00000000 	.word	0x00000000
		LegPosZ[LegIndex] = (short) pgm_read_word(&cInitPosZ[LegIndex]);
    1370:	00022400 	.word	0x00022400

	mDelay(10);

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		LegPosX[LegIndex] = (short) pgm_read_word(&cInitPosX[LegIndex]); //Set start positions for each leg
    1374:	00023200 	.word	0x00023200
    1378:	50000100 	.word	0x50000100
		LegPosY[LegIndex] = (short) pgm_read_word(&cInitPosY[LegIndex]);
    137c:	00000232 	.word	0x00000232
    1380:	0000027c 	.word	0x0000027c
		LegPosZ[LegIndex] = (short) pgm_read_word(&cInitPosZ[LegIndex]);
    1384:	00570001 	.word	0x00570001
    1388:	00000000 	.word	0x00000000
    138c:	2e000000 	.word	0x2e000000
	Servo_Init();

	mDelay(10);

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    1390:	4c000002 	.word	0x4c000002
    1394:	02000002 	.word	0x02000002
    1398:	4c047d00 	.word	0x4c047d00

	ResetLegInitAngles();

	//Single leg control. Make sure no leg is selected
#ifdef OPT_SINGLELEG
	g_InControlState.SelectedLeg = 255; // No Leg selected
    139c:	5a000002 	.word	0x5a000002
    13a0:	02000002 	.word	0x02000002
	g_InControlState.PrevSelectedLeg = 255;
    13a4:	5a789100 	.word	0x5a789100
#endif
	//Body Positions
	g_InControlState.BodyPos.x = 0;
    13a8:	7c000002 	.word	0x7c000002
	g_InControlState.BodyPos.y = 0;
	g_InControlState.BodyPos.z = 0;
    13ac:	02000002 	.word	0x02000002

//Body Rotations
	g_InControlState.BodyRot1.x = 0;
	g_InControlState.BodyRot1.y = 0;
    13b0:	00047d00 	.word	0x00047d00
	g_InControlState.BodyRot1.z = 0;
	g_InControlState.BodyRotOffset.x = 0;
    13b4:	00000000 	.word	0x00000000
	g_InControlState.BodyRotOffset.y = 0; //Input Y offset value to adjust centerpoint of rotation
	g_InControlState.BodyRotOffset.z = 0;
    13b8:	7c000000 	.word	0x7c000000

	//Gait
	g_InControlState.GaitType = 0;
    13bc:	80000002 	.word	0x80000002
	g_InControlState.BalanceMode = 0;
    13c0:	01000002 	.word	0x01000002
	g_InControlState.LegLiftHeight = 50;
	g_InControlState.ForceGaitStepCnt = 0; // added to try to adjust starting positions depending on height...
    13c4:	02805d00 	.word	0x02805d00
	g_InControlState.GaitStep = 1;
    13c8:	02900000 	.word	0x02900000
}

void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {
    13cc:	00020000 	.word	0x00020000
	g_InControlState.BodyRotOffset.z = 0;

	//Gait
	g_InControlState.GaitType = 0;
	g_InControlState.BalanceMode = 0;
	g_InControlState.LegLiftHeight = 50;
    13d0:	02900c7d 	.word	0x02900c7d
    13d4:	02e00000 	.word	0x02e00000
void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {

		g_InControlState.gaitCur = APG[g_InControlState.GaitType];
    13d8:	00020000 	.word	0x00020000
    13dc:	0000107d 	.word	0x0000107d
    13e0:	00000000 	.word	0x00000000
//==============================================================================

// If both PS2 and XBee are defined then we will become secondary to the xbee
void CommanderInputController_Init(void) {

	g_BodyYOffset = 0;
    13e4:	027c0000 	.word	0x027c0000
    13e8:	028e0000 	.word	0x028e0000
    13ec:	00010000 	.word	0x00010000
	g_BodyYShift = 0;
	//begin(XBEE_BAUD);
	GPSeq = 0;  // init to something...
    13f0:	00028e50 	.word	0x00028e50
    13f4:	0002a600 	.word	0x0002a600

	ControlMode = WALKMODE;
    13f8:	55000100 	.word	0x55000100
	HeightSpeedMode = NORM_NORM;
    13fc:	000002aa 	.word	0x000002aa
	//    DoubleHeightOn = false;
	DoubleTravelOn = false;
    1400:	000002c2 	.word	0x000002c2
	bJoystickWalkMode = 0;
    1404:	00550001 	.word	0x00550001
	GaitSelect();

	CommanderInputController_Init();

	// Servo Driver
	ServoMoveTime = 150;
    1408:	00000000 	.word	0x00000000
	g_InControlState.fRobotOn = 0;
    140c:	88000000 	.word	0x88000000
	g_fLowVoltageShutdown = false;
    1410:	a2000002 	.word	0xa2000002

}
    1414:	01000002 	.word	0x01000002
    1418:	02b25400 	.word	0x02b25400
    141c:	02c60000 	.word	0x02c60000
    1420:	00010000 	.word	0x00010000
    1424:	00000054 	.word	0x00000054
    1428:	00000000 	.word	0x00000000
    142c:	0002e000 	.word	0x0002e000
    1430:	0002e400 	.word	0x0002e400
    1434:	5d000100 	.word	0x5d000100
    1438:	000002e4 	.word	0x000002e4
    143c:	000002fc 	.word	0x000002fc
    1440:	087d0002 	.word	0x087d0002
	...
    144c:	000002e0 	.word	0x000002e0
    1450:	000002ee 	.word	0x000002ee
    1454:	ee500001 	.word	0xee500001
    1458:	fc000002 	.word	0xfc000002
    145c:	01000002 	.word	0x01000002
    1460:	00005400 	.word	0x00005400
    1464:	00000000 	.word	0x00000000
//[CommitServoDriver Updates the positions of the servos - This outputs
//         as much of the command as we can without committing it.  This
//         allows us to once the previous update was completed to quickly
//        get the next command to start
//--------------------------------------------------------------------
void CommitServoDriver(word wMoveTime) {
    1468:	02fc0000 	.word	0x02fc0000
    146c:	02fe0000 	.word	0x02fe0000
    1470:	00010000 	.word	0x00010000


	CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    1474:	0002fe5d 	.word	0x0002fe5d

      }
      ax12write(0xff - (checksum % 256));
      setRX(0);
*/
  	    dxl_set_txpacket_id (BROADCAST_ID);
    1478:	00030000 	.word	0x00030000
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    147c:	7d000200 	.word	0x7d000200
    1480:	00030004 	.word	0x00030004
		dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
    1484:	00030800 	.word	0x00030800
    1488:	7d000200 	.word	0x7d000200
		dxl_set_txpacket_parameter(1, 2);
    148c:	00000008 	.word	0x00000008
    1490:	00000000 	.word	0x00000000
    1494:	0002fc00 	.word	0x0002fc00
    1498:	00030400 	.word	0x00030400
      int i;
      word wSpeed;
		for (i = 0; i < poseSize; i++) {
			wSpeed = CalculateAX12MoveSpeed(g_awCurAXPos[i], g_awGoalAXPos[i], wMoveTime);    // What order should we store these values?
    149c:	50000100 	.word	0x50000100
	...
    14a8:	00000308 	.word	0x00000308
			//dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
			byte id = pgm_read_byte(&cPinTable[i]);
			dxl_set_txpacket_parameter(2 + 3 * i, id);
    14ac:	0000030a 	.word	0x0000030a
    14b0:	0a5d0001 	.word	0x0a5d0001
    14b4:	0e000003 	.word	0x0e000003
    14b8:	02000003 	.word	0x02000003
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(g_awGoalAXPos[i]));
    14bc:	0e0c7d00 	.word	0x0e0c7d00
    14c0:	24000003 	.word	0x24000003
    14c4:	02000003 	.word	0x02000003
    14c8:	00107d00 	.word	0x00107d00
    14cc:	00000000 	.word	0x00000000
			dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(g_awGoalAXPos[i]));
    14d0:	08000000 	.word	0x08000000
    14d4:	12000003 	.word	0x12000003
    14d8:	01000003 	.word	0x01000003
    14dc:	03125000 	.word	0x03125000
    14e0:	03240000 	.word	0x03240000
    14e4:	00010000 	.word	0x00010000
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(wSpeed));
    14e8:	00000055 	.word	0x00000055
    14ec:	00000000 	.word	0x00000000
    14f0:	00032400 	.word	0x00032400
		    dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(wSpeed));
    14f4:	00032600 	.word	0x00032600
    14f8:	5d000100 	.word	0x5d000100
    14fc:	00000326 	.word	0x00000326
    1500:	0000032a 	.word	0x0000032a
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
		dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
		dxl_set_txpacket_parameter(1, 2);
      int i;
      word wSpeed;
		for (i = 0; i < poseSize; i++) {
    1504:	047d0002 	.word	0x047d0002
    1508:	0000032a 	.word	0x0000032a
    150c:	0000036e 	.word	0x0000036e
    1510:	107d0002 	.word	0x107d0002
	...
			dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(g_awGoalAXPos[i]));
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(wSpeed));
		    dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(wSpeed));
		}

		dxl_set_txpacket_length((4 + 1) * poseSize + 4);
    151c:	00000324 	.word	0x00000324
#ifdef DEBUG_BIOLOIDEX
	PrintString("DriverAX12 --- CommitServoDriver ---\n");
#endif
		dxl_txrx_packet();
    1520:	00000354 	.word	0x00000354

			u16 CommStatus = dxl_get_result();
    1524:	00500001 	.word	0x00500001
#ifdef USING_PC_UART
			if (CommStatus == DXL_RXSUCCESS)
    1528:	00000000 	.word	0x00000000
				PrintErrorCode();
    152c:	70000000 	.word	0x70000000
			else
				PrintCommStatus(CommStatus);
    1530:	72000003 	.word	0x72000003
    1534:	01000003 	.word	0x01000003
#endif
#endif
		} else {
			BioloidControllerEx_interpolateSetup(wMoveTime);
    1538:	03725d00 	.word	0x03725d00

	}

	CommanderInputController_AllowControllerInterrupts(true);

}
    153c:	03760000 	.word	0x03760000
    1540:	00020000 	.word	0x00020000
    1544:	0376047d 	.word	0x0376047d
    1548:	03e60000 	.word	0x03e60000
    154c:	00020000 	.word	0x00020000
    1550:	0000107d 	.word	0x0000107d
	word wCoxaSDV;        // Coxa value in servo driver units
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    1554:	00000000 	.word	0x00000000
    1558:	03700000 	.word	0x03700000
    155c:	03cc0000 	.word	0x03cc0000
    1560:	00010000 	.word	0x00010000
    1564:	00000050 	.word	0x00000050


void OutputServoInfoForLeg(byte LegIndex, short sCoxaAngle1, short sFemurAngle1,
		short sTibiaAngle1)

		{
    1568:	00000000 	.word	0x00000000
	word wCoxaSDV;        // Coxa value in servo driver units
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    156c:	0003e800 	.word	0x0003e800
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
    1570:	0003ea00 	.word	0x0003ea00
    1574:	5d000100 	.word	0x5d000100
    1578:	000003ea 	.word	0x000003ea
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    157c:	000003ec 	.word	0x000003ec
    1580:	047d0002 	.word	0x047d0002
    1584:	000003ec 	.word	0x000003ec


void OutputServoInfoForLeg(byte LegIndex, short sCoxaAngle1, short sFemurAngle1,
		short sTibiaAngle1)

		{
    1588:	0000045c 	.word	0x0000045c
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    158c:	187d0002 	.word	0x187d0002
	...
#ifdef USE_AX12_SPEED_CONTROL
			// Save away the new positions...
			g_awGoalAXPos[FIRSTCOXAPIN + LegIndex] = wCoxaSDV; // What order should we store these values?
			g_awGoalAXPos[FIRSTFEMURPIN + LegIndex] = wFemurSDV;
    1598:	000003e8 	.word	0x000003e8

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
#ifdef USE_AX12_SPEED_CONTROL
			// Save away the new positions...
			g_awGoalAXPos[FIRSTCOXAPIN + LegIndex] = wCoxaSDV; // What order should we store these values?
    159c:	00000406 	.word	0x00000406
			g_awGoalAXPos[FIRSTFEMURPIN + LegIndex] = wFemurSDV;
    15a0:	00500001 	.word	0x00500001
			g_awGoalAXPos[FIRSTTIBIAPIN + LegIndex] = wTibiaSDV;
    15a4:	00000000 	.word	0x00000000
    15a8:	02000000 	.word	0x02000000
    15ac:	0a000004 	.word	0x0a000004

#endif
		} else {
			BioloidControllerEx_setNextPose(
    15b0:	01000004 	.word	0x01000004
    15b4:	00005300 	.word	0x00005300
					pgm_read_byte(&cPinTable[FIRSTCOXAPIN + LegIndex]),
					wCoxaSDV);
			BioloidControllerEx_setNextPose(
    15b8:	00000000 	.word	0x00000000
    15bc:	04020000 	.word	0x04020000
    15c0:	04260000 	.word	0x04260000
					pgm_read_byte(&cPinTable[FIRSTFEMURPIN + LegIndex]),
					wFemurSDV);
			BioloidControllerEx_setNextPose(
    15c4:	00010000 	.word	0x00010000
    15c8:	00000050 	.word	0x00000050
					wTibiaSDV);

		}
	}
	CommanderInputController_AllowControllerInterrupts(true); // Ok for hserial again...
}
    15cc:	00000000 	.word	0x00000000
    15d0:	0003f200 	.word	0x0003f200
    15d4:	00041400 	.word	0x00041400
    15d8:	52000100 	.word	0x52000100
    15dc:	00000416 	.word	0x00000416

void StartUpdateServos() {
    15e0:	00000430 	.word	0x00000430
	byte LegIndex;

	// First call off to the init...
	BeginServoUpdate();    // Start the update
    15e4:	40520001 	.word	0x40520001
    15e8:	4e000004 	.word	0x4e000004
    15ec:	01000004 	.word	0x01000004

	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		OutputServoInfoForLeg(LegIndex,
    15f0:	00005200 	.word	0x00005200
    15f4:	00000000 	.word	0x00000000
    15f8:	04220000 	.word	0x04220000
    15fc:	044e0000 	.word	0x044e0000
    1600:	00010000 	.word	0x00010000
    1604:	00000051 	.word	0x00000051
    1608:	00000000 	.word	0x00000000
    160c:	00045c00 	.word	0x00045c00
    1610:	00045e00 	.word	0x00045e00
    1614:	5d000100 	.word	0x5d000100
    1618:	0000045e 	.word	0x0000045e
    161c:	00000462 	.word	0x00000462
    1620:	047d0002 	.word	0x047d0002
    1624:	00000462 	.word	0x00000462
    1628:	000004cc 	.word	0x000004cc
    162c:	187d0002 	.word	0x187d0002
	...
    1638:	0000045c 	.word	0x0000045c
    163c:	00000496 	.word	0x00000496
    1640:	00500001 	.word	0x00500001
	byte LegIndex;

	// First call off to the init...
	BeginServoUpdate();    // Start the update

	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    1644:	00000000 	.word	0x00000000
				cTibiaInv[LegIndex] ?
						-TibiaAngle1[LegIndex] : TibiaAngle1[LegIndex]);

	}

}
    1648:	60000000 	.word	0x60000000
    164c:	82000004 	.word	0x82000004
    1650:	01000004 	.word	0x01000004
    1654:	04865200 	.word	0x04865200
    1658:	04a00000 	.word	0x04a00000
    165c:	00010000 	.word	0x00010000
    1660:	0004b052 	.word	0x0004b052
#else
word g_wLastVoltage = 0xffff;    // save the last voltage we retrieved...
byte g_bLegVoltage = 0;		// what leg did we last check?
unsigned long g_ulTimeLastBatteryVoltage;
#define VOLTAGE_REPEAT_MAX  3
word GetBatteryVoltage(void) {
    1664:	0004c000 	.word	0x0004c000
	if (interpolating && (g_wLastVoltage != 0xffff)
    1668:	52000100 	.word	0x52000100
	...
    1674:	00000492 	.word	0x00000492
    1678:	000004c0 	.word	0x000004c0
    167c:	00510001 	.word	0x00510001
    1680:	00000000 	.word	0x00000000
    1684:	cc000000 	.word	0xcc000000
			&& ((getMillis() - g_ulTimeLastBatteryVoltage)
					< VOLTAGE_MAX_TIME_BETWEEN_CALLS))
		return g_wLastVoltage;
    1688:	ce000004 	.word	0xce000004

	register u8 bLoopCnt = VOLTAGE_REPEAT_MAX;
	do {
		register word wVoltage = dxl_read_byte(1, AXM_PRESENT_VOLTAGE);
    168c:	01000004 	.word	0x01000004
    1690:	04ce5d00 	.word	0x04ce5d00
    1694:	04d00000 	.word	0x04d00000
		if (wVoltage != 0xffff) {
			g_ulTimeLastBatteryVoltage = getMillis();
    1698:	00020000 	.word	0x00020000
			g_wLastVoltage = wVoltage * 10;
    169c:	04d0047d 	.word	0x04d0047d

	register u8 bLoopCnt = VOLTAGE_REPEAT_MAX;
	do {
		register word wVoltage = dxl_read_byte(1, AXM_PRESENT_VOLTAGE);
		if (wVoltage != 0xffff) {
			g_ulTimeLastBatteryVoltage = getMillis();
    16a0:	04d80000 	.word	0x04d80000
			g_wLastVoltage = wVoltage * 10;
    16a4:	00020000 	.word	0x00020000
		}
	} while (--bLoopCnt);

	return 0;

}
    16a8:	0000087d 	.word	0x0000087d
    16ac:	00000000 	.word	0x00000000
    16b0:	04cc0000 	.word	0x04cc0000
    16b4:	04d40000 	.word	0x04d40000
// ReadMsgs
//==============================================================================

/* process messages coming from Commander
 *  format = 0xFF RIGHT_H RIGHT_V LEFT_H LEFT_V BUTTONS EXT CHECKSUM */
int Commander_ReadMsgs() {
    16b8:	00010000 	.word	0x00010000
	 }
	 #endif
	 */
	//while (CheckZBNewArrive() > 0) {
	while (1) {
		if (zgb_rx_check_arduino() == 1) {
    16bc:	00000050 	.word	0x00000050
    16c0:	00000000 	.word	0x00000000

			leftV = (signed char) (zgb_rx_data_right_V_());
    16c4:	0004d800 	.word	0x0004d800
    16c8:	0004de00 	.word	0x0004de00
			leftH = (signed char) (zgb_rx_data_right_H_());
    16cc:	5d000100 	.word	0x5d000100
    16d0:	000004de 	.word	0x000004de
			rightV = (signed char) (zgb_rx_data_left_V_());
    16d4:	00000560 	.word	0x00000560
    16d8:	087d0002 	.word	0x087d0002
	...
			rightH = (signed char) (zgb_rx_data_left_H_());
			buttons = zgb_rx_data_buttons();
    16e4:	000004d8 	.word	0x000004d8
    16e8:	000004dc 	.word	0x000004dc
			ext = zgb_rx_data_extra();
    16ec:	e0500001 	.word	0xe0500001
    16f0:	e4000004 	.word	0xe4000004

	}

	return 0;

}
    16f4:	01000004 	.word	0x01000004
    16f8:	04e85000 	.word	0x04e85000
    16fc:	04f00000 	.word	0x04f00000
    1700:	00010000 	.word	0x00010000
    1704:	0004f450 	.word	0x0004f450
    1708:	0004fc00 	.word	0x0004fc00
    170c:	50000100 	.word	0x50000100
    1710:	00000500 	.word	0x00000500

//==============================================================================
// This is The main code to input function to read inputs from the Commander and then
//process any commands.
//==============================================================================
void CommanderInputController_ControlInput(void) {
    1714:	00000508 	.word	0x00000508

	// See if we have a new command available...
	if (Commander_ReadMsgs() > 0) {
    1718:	0c500001 	.word	0x0c500001
    171c:	14000005 	.word	0x14000005
    1720:	01000005 	.word	0x01000005
    1724:	05185000 	.word	0x05185000
		// If we receive a valid message than turn robot on...
		boolean fAdjustLegPositions = false;
		short sLegInitXZAdjust = 0;
		short sLegInitAngleAdjust = 0;

		if (!g_InControlState.fRobotOn) {
    1728:	05200000 	.word	0x05200000
    172c:	00010000 	.word	0x00010000
			g_InControlState.fRobotOn = true;
    1730:	00052450 	.word	0x00052450
    1734:	00052c00 	.word	0x00052c00
		}

		// [SWITCH MODES]

		// Cycle through modes...
		if ((buttons & BUT_LT) && !(buttonsPrev & BUT_LT)) {
    1738:	50000100 	.word	0x50000100
    173c:	00000530 	.word	0x00000530
    1740:	00000538 	.word	0x00000538
    1744:	3c500001 	.word	0x3c500001
    1748:	60000005 	.word	0x60000005
    174c:	01000005 	.word	0x01000005

			if (++ControlMode >= MODECNT) {
    1750:	00005000 	.word	0x00005000
    1754:	00000000 	.word	0x00000000
    1758:	05600000 	.word	0x05600000
    175c:	05620000 	.word	0x05620000
				ControlMode = WALKMODE;    // cycled back around...
				Buzzed(50, 2000);
    1760:	00010000 	.word	0x00010000
    1764:	0005625d 	.word	0x0005625d
    1768:	00056600 	.word	0x00056600
				Buzzed(50, 3000);
    176c:	7d000200 	.word	0x7d000200
    1770:	00056604 	.word	0x00056604

			} else {
				Buzzed(50, 2000);
    1774:	0005f400 	.word	0x0005f400
    1778:	7d000200 	.word	0x7d000200
    177c:	00000008 	.word	0x00000008
			}
			if (ControlMode != SINGLELEGMODE)
    1780:	00000000 	.word	0x00000000
    1784:	0005f400 	.word	0x0005f400
				g_InControlState.SelectedLeg = 255;
    1788:	0005f600 	.word	0x0005f600
    178c:	5d000100 	.word	0x5d000100
    1790:	000005f6 	.word	0x000005f6

		}

		//[Common functions]
		//Switch Balance mode on/off
		if ((buttons & BUT_L4) && !(buttonsPrev & BUT_L4)) {
    1794:	0000064e 	.word	0x0000064e
    1798:	107d0002 	.word	0x107d0002
	...
    17a4:	000005f4 	.word	0x000005f4
    17a8:	000005fc 	.word	0x000005fc

			g_InControlState.BalanceMode = !g_InControlState.BalanceMode;
    17ac:	fc500001 	.word	0xfc500001
    17b0:	4e000005 	.word	0x4e000005
    17b4:	01000006 	.word	0x01000006
    17b8:	00005500 	.word	0x00005500
    17bc:	00000000 	.word	0x00000000
			if (g_InControlState.BalanceMode) {
    17c0:	06500000 	.word	0x06500000
				Buzzed(250, 1500);
    17c4:	06520000 	.word	0x06520000
    17c8:	00010000 	.word	0x00010000
			} else {
				Buzzed(100, 2000);
    17cc:	0006525d 	.word	0x0006525d
    17d0:	00065400 	.word	0x00065400
				Buzzed(50, 4000);
    17d4:	7d000200 	.word	0x7d000200
    17d8:	00065404 	.word	0x00065404
    17dc:	00065c00 	.word	0x00065c00
			}
		}

		//Stand up, sit down
		if ((buttons & BUT_L5) && !(buttonsPrev & BUT_L5)) {
    17e0:	7d000200 	.word	0x7d000200
    17e4:	00000008 	.word	0x00000008
    17e8:	00000000 	.word	0x00000000
    17ec:	00065000 	.word	0x00065000
    17f0:	00065800 	.word	0x00065800
    17f4:	50000100 	.word	0x50000100
	...
			if (g_BodyYOffset > 0)
				g_BodyYOffset = 0;
    1800:	0000065c 	.word	0x0000065c
    1804:	0000065e 	.word	0x0000065e
			else
				g_BodyYOffset = 35;
			fAdjustLegPositions = true;
			g_fDynamicLegXZLength = false;
    1808:	5e5d0001 	.word	0x5e5d0001
		//Stand up, sit down
		if ((buttons & BUT_L5) && !(buttonsPrev & BUT_L5)) {
			if (g_BodyYOffset > 0)
				g_BodyYOffset = 0;
			else
				g_BodyYOffset = 35;
    180c:	62000006 	.word	0x62000006
			fAdjustLegPositions = true;
			g_fDynamicLegXZLength = false;
    1810:	02000006 	.word	0x02000006
    1814:	62047d00 	.word	0x62047d00

		// We will use L6 with the Right joystick to control both body offset as well as Speed...
		// We move each pass through this by a percentage of how far we are from center in each direction
		// We get feedback with height by seeing the robot move up and down.  For Speed, I put in sounds
		// which give an idea, but only for those whoes robot has a speaker
		int lx = leftH;
    1818:	8c000006 	.word	0x8c000006
		int ly = leftV;
		if (buttons & BUT_L6) {
    181c:	02000006 	.word	0x02000006

		// We will use L6 with the Right joystick to control both body offset as well as Speed...
		// We move each pass through this by a percentage of how far we are from center in each direction
		// We get feedback with height by seeing the robot move up and down.  For Speed, I put in sounds
		// which give an idea, but only for those whoes robot has a speaker
		int lx = leftH;
    1820:	00087d00 	.word	0x00087d00
    1824:	00000000 	.word	0x00000000
		int ly = leftV;
    1828:	8c000000 	.word	0x8c000000
    182c:	8e000006 	.word	0x8e000006
		if (buttons & BUT_L6) {
    1830:	01000006 	.word	0x01000006
    1834:	068e5d00 	.word	0x068e5d00
			// raise or lower the robot on the joystick up /down
			// Maybe should have Min/Max
			int delta = rightV / 25;
    1838:	06900000 	.word	0x06900000
    183c:	00020000 	.word	0x00020000
    1840:	0690047d 	.word	0x0690047d
    1844:	06980000 	.word	0x06980000
    1848:	00020000 	.word	0x00020000
    184c:	0000087d 	.word	0x0000087d
			if (delta) {
    1850:	00000000 	.word	0x00000000
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
    1854:	06980000 	.word	0x06980000
    1858:	069a0000 	.word	0x069a0000
    185c:	00010000 	.word	0x00010000
    1860:	00069a5d 	.word	0x00069a5d
    1864:	00069c00 	.word	0x00069c00
    1868:	7d000200 	.word	0x7d000200
    186c:	00069c04 	.word	0x00069c04
    1870:	0006a400 	.word	0x0006a400
    1874:	7d000200 	.word	0x7d000200
			sLegInitAngleAdjust = ly / 8;
			lx = 0;
			ly = 0;

			// Likewise for Speed control
			delta = rightH / 16;   //
    1878:	00000008 	.word	0x00000008
    187c:	00000000 	.word	0x00000000
    1880:	0006a400 	.word	0x0006a400
    1884:	0006a600 	.word	0x0006a600
    1888:	5d000100 	.word	0x5d000100
			if ((delta < 0) && g_InControlState.SpeedControl) {
    188c:	000006a6 	.word	0x000006a6
    1890:	000006a8 	.word	0x000006a8
    1894:	047d0002 	.word	0x047d0002
				if ((word)(-delta) < g_InControlState.SpeedControl)
    1898:	000006a8 	.word	0x000006a8
					g_InControlState.SpeedControl += delta;
    189c:	000006b6 	.word	0x000006b6
				else
					g_InControlState.SpeedControl = 0;
    18a0:	087d0002 	.word	0x087d0002
	...

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}
			if ((delta > 0) && (g_InControlState.SpeedControl < 2000)) {
    18ac:	000006a4 	.word	0x000006a4
    18b0:	000006ac 	.word	0x000006ac
				g_InControlState.SpeedControl += delta;
				if (g_InControlState.SpeedControl > 2000)
    18b4:	00500001 	.word	0x00500001
					g_InControlState.SpeedControl = 0;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}
			if ((delta > 0) && (g_InControlState.SpeedControl < 2000)) {
				g_InControlState.SpeedControl += delta;
    18b8:	00000000 	.word	0x00000000
				if (g_InControlState.SpeedControl > 2000)
					g_InControlState.SpeedControl = 2000;
    18bc:	3c000000 	.word	0x3c000000
    18c0:	48000000 	.word	0x48000000

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
    18c4:	01000000 	.word	0x01000000
    18c8:	004a5000 	.word	0x004a5000
    18cc:	00560000 	.word	0x00560000
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
				fAdjustLegPositions = true;
			}

			// Also use right Horizontal to manually adjust the initial leg positions.
			sLegInitXZAdjust = lx / 10;        // play with this.
    18d0:	00010000 	.word	0x00010000
    18d4:	00000050 	.word	0x00000050
    18d8:	00000000 	.word	0x00000000
    18dc:	00007c00 	.word	0x00007c00
			sLegInitAngleAdjust = ly / 8;
    18e0:	00008800 	.word	0x00008800
    18e4:	50000100 	.word	0x50000100
    18e8:	0000008a 	.word	0x0000008a
    18ec:	00000090 	.word	0x00000090
					g_InControlState.SpeedControl = 2000;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}

			rightH = 0; // don't walk when adjusting the speed here...
    18f0:	00500001 	.word	0x00500001
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
				fAdjustLegPositions = true;
			}

			// Also use right Horizontal to manually adjust the initial leg positions.
			sLegInitXZAdjust = lx / 10;        // play with this.
    18f4:	00000000 	.word	0x00000000
					g_InControlState.SpeedControl = 2000;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}

			rightH = 0; // don't walk when adjusting the speed here...
    18f8:	9c000000 	.word	0x9c000000
		}

		//[Walk functions]
		if (ControlMode == WALKMODE) {
    18fc:	a0000000 	.word	0xa0000000
    1900:	01000000 	.word	0x01000000
    1904:	00005000 	.word	0x00005000

			//Switch gates
			if (((buttons & BUT_R1) && !(buttonsPrev & BUT_R1))
    1908:	00000000 	.word	0x00000000
    190c:	00a40000 	.word	0x00a40000
    1910:	00a60000 	.word	0x00a60000
    1914:	00010000 	.word	0x00010000
    1918:	00000050 	.word	0x00000050
    191c:	00000000 	.word	0x00000000
    1920:	0000a800 	.word	0x0000a800
    1924:	0000aa00 	.word	0x0000aa00
    1928:	50000100 	.word	0x50000100
	...
    1934:	000000bc 	.word	0x000000bc
    1938:	000000c6 	.word	0x000000c6
    193c:	c8530001 	.word	0xc8530001
    1940:	ce000000 	.word	0xce000000
    1944:	01000000 	.word	0x01000000
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
    1948:	00dc5300 	.word	0x00dc5300
					&& abs(g_InControlState.TravelLength.x) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
    194c:	00e40000 	.word	0x00e40000
    1950:	00010000 	.word	0x00010000
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
    1954:	00000053 	.word	0x00000053
					&& abs(g_InControlState.TravelLength.x) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
    1958:	00000000 	.word	0x00000000
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
					Buzzed(50, 2000);
    195c:	0000b000 	.word	0x0000b000
    1960:	0000be00 	.word	0x0000be00
    1964:	51000100 	.word	0x51000100
				} else {
					Buzzed(50, 2000);
    1968:	000000ce 	.word	0x000000ce
    196c:	000000e4 	.word	0x000000e4
    1970:	00510001 	.word	0x00510001
					Buzzed(50, 2250);
    1974:	00000000 	.word	0x00000000
    1978:	e4000000 	.word	0xe4000000
					g_InControlState.GaitType = 0;
    197c:	e6000000 	.word	0xe6000000
    1980:	01000000 	.word	0x01000000
}

void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {
    1984:	00e65d00 	.word	0x00e65d00
    1988:	00ea0000 	.word	0x00ea0000
    198c:	00020000 	.word	0x00020000

		g_InControlState.gaitCur = APG[g_InControlState.GaitType];
    1990:	00ea0c7d 	.word	0x00ea0c7d
    1994:	02680000 	.word	0x02680000
    1998:	00020000 	.word	0x00020000
    199c:	0000107d 	.word	0x0000107d
    19a0:	00000000 	.word	0x00000000
				}
				GaitSelect();
			}

			//Double leg lift height
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    19a4:	01440000 	.word	0x01440000
    19a8:	01520000 	.word	0x01520000
    19ac:	00010000 	.word	0x00010000
    19b0:	00016650 	.word	0x00016650
    19b4:	0001c200 	.word	0x0001c200
				Buzzed(50, 2000);
    19b8:	50000100 	.word	0x50000100
    19bc:	00000204 	.word	0x00000204
				HeightSpeedMode = (HeightSpeedMode + 1) & 0x3; // wrap around mode
    19c0:	0000020c 	.word	0x0000020c
    19c4:	0c510001 	.word	0x0c510001
    19c8:	16000002 	.word	0x16000002
    19cc:	01000002 	.word	0x01000002
				DoubleTravelOn = HeightSpeedMode & 0x1;
    19d0:	02165000 	.word	0x02165000
    19d4:	02380000 	.word	0x02380000
				if (HeightSpeedMode & 0x2)
    19d8:	00010000 	.word	0x00010000
    19dc:	00024c51 	.word	0x00024c51
					g_InControlState.LegLiftHeight = 80;
    19e0:	00026800 	.word	0x00026800
    19e4:	50000100 	.word	0x50000100
	...
				else
					g_InControlState.LegLiftHeight = 50;
			}

			// Switch between Walk method 1 && Walk method 2
			if ((buttons & BUT_R2) && !(buttonsPrev & BUT_R2)) {
    19f0:	0000018e 	.word	0x0000018e
    19f4:	000001e0 	.word	0x000001e0
    19f8:	0c510001 	.word	0x0c510001

				if ((++bJoystickWalkMode) > 1)
    19fc:	16000002 	.word	0x16000002
    1a00:	01000002 	.word	0x01000002
    1a04:	024c5100 	.word	0x024c5100

					bJoystickWalkMode = 0;
				Buzzed(50, 2000 + bJoystickWalkMode * 250);
    1a08:	02680000 	.word	0x02680000
			// Switch between Walk method 1 && Walk method 2
			if ((buttons & BUT_R2) && !(buttonsPrev & BUT_R2)) {

				if ((++bJoystickWalkMode) > 1)

					bJoystickWalkMode = 0;
    1a0c:	00010000 	.word	0x00010000
				Buzzed(50, 2000 + bJoystickWalkMode * 250);
    1a10:	00000051 	.word	0x00000051
    1a14:	00000000 	.word	0x00000000
    1a18:	00020800 	.word	0x00020800
    1a1c:	00020c00 	.word	0x00020c00
			}

			//Walking
			switch (bJoystickWalkMode) {
    1a20:	52000100 	.word	0x52000100
    1a24:	00000216 	.word	0x00000216
    1a28:	0000022e 	.word	0x0000022e
			case 0:
				g_InControlState.TravelLength.x = -lx;
    1a2c:	00520001 	.word	0x00520001
    1a30:	00000000 	.word	0x00000000
    1a34:	68000000 	.word	0x68000000
				g_InControlState.TravelLength.z = -ly;
    1a38:	6a000002 	.word	0x6a000002
				g_InControlState.TravelLength.y = -(rightH) / 4; //Right Stick Left/Right
				break;
			case 1:
				g_InControlState.TravelLength.z = (rightV); //Right Stick Up/Down
    1a3c:	01000002 	.word	0x01000002
    1a40:	026a5d00 	.word	0x026a5d00
    1a44:	02700000 	.word	0x02700000
				g_InControlState.TravelLength.y = -(rightH) / 4; //Right Stick Left/Right
    1a48:	00020000 	.word	0x00020000
    1a4c:	02700c7d 	.word	0x02700c7d
    1a50:	03640000 	.word	0x03640000
    1a54:	00020000 	.word	0x00020000
    1a58:	0000107d 	.word	0x0000107d
    1a5c:	00000000 	.word	0x00000000
				break;

			}

			if (!DoubleTravelOn) {  //(Double travel length)
    1a60:	02d80000 	.word	0x02d80000
				g_InControlState.TravelLength.x =
    1a64:	030e0000 	.word	0x030e0000
    1a68:	00010000 	.word	0x00010000
    1a6c:	00030e51 	.word	0x00030e51
						g_InControlState.TravelLength.x / 2;
				g_InControlState.TravelLength.z =
    1a70:	00031a00 	.word	0x00031a00
    1a74:	51000100 	.word	0x51000100
	...
			}

		}

		//[Translate functions]
		g_BodyYShift = 0;
    1a80:	000002da 	.word	0x000002da
		if (ControlMode == TRANSLATEMODE) {
    1a84:	0000030e 	.word	0x0000030e
    1a88:	0e500001 	.word	0x0e500001

		      g_InControlState.BodyPos.x =  SmoothControl(((lx)*2/3), g_InControlState.BodyPos.x, SmDiv);
    1a8c:	14000003 	.word	0x14000003
    1a90:	01000003 	.word	0x01000003
    1a94:	00005000 	.word	0x00005000
    1a98:	00000000 	.word	0x00000000
    1a9c:	03640000 	.word	0x03640000
    1aa0:	03660000 	.word	0x03660000
    1aa4:	00010000 	.word	0x00010000
    1aa8:	0003665d 	.word	0x0003665d
		      g_InControlState.BodyPos.z =  SmoothControl(((ly)*2/3), g_InControlState.BodyPos.z, SmDiv);
    1aac:	0003c400 	.word	0x0003c400
    1ab0:	7d000200 	.word	0x7d000200
    1ab4:	00000008 	.word	0x00000008
    1ab8:	00000000 	.word	0x00000000
    1abc:	00038400 	.word	0x00038400
		      g_InControlState.BodyRot1.y = SmoothControl(((rightH)*2), g_InControlState.BodyRot1.y, SmDiv);
    1ac0:	00038e00 	.word	0x00038e00
		//[Translate functions]
		g_BodyYShift = 0;
		if (ControlMode == TRANSLATEMODE) {

		      g_InControlState.BodyPos.x =  SmoothControl(((lx)*2/3), g_InControlState.BodyPos.x, SmDiv);
		      g_InControlState.BodyPos.z =  SmoothControl(((ly)*2/3), g_InControlState.BodyPos.z, SmDiv);
    1ac4:	53000100 	.word	0x53000100
		      g_InControlState.BodyRot1.y = SmoothControl(((rightH)*2), g_InControlState.BodyRot1.y, SmDiv);
    1ac8:	00000390 	.word	0x00000390
    1acc:	00000396 	.word	0x00000396
    1ad0:	a4530001 	.word	0xa4530001
    1ad4:	aa000003 	.word	0xaa000003


			//      g_InControlState.BodyPos.x = (lx)/2;
			//      g_InControlState.BodyPos.z = -(ly)/3;
			//      g_InControlState.BodyRot1.y = (rightH)*2;
			g_BodyYShift = (-(rightV) / 2);
    1ad8:	01000003 	.word	0x01000003
    1adc:	00005300 	.word	0x00005300
    1ae0:	00000000 	.word	0x00000000
    1ae4:	03780000 	.word	0x03780000
    1ae8:	03860000 	.word	0x03860000
    1aec:	00010000 	.word	0x00010000
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
    1af0:	00039651 	.word	0x00039651
			g_InControlState.BodyRot1.x = (ly);
			g_InControlState.BodyRot1.y = (rightH) * 2;
    1af4:	0003aa00 	.word	0x0003aa00
    1af8:	51000100 	.word	0x51000100
	...
			g_BodyYShift = (-(rightV) / 2);
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
			g_InControlState.BodyRot1.x = (ly);
    1b04:	000003c4 	.word	0x000003c4
			g_InControlState.BodyRot1.y = (rightH) * 2;
			g_InControlState.BodyRot1.z = (lx);
			g_BodyYShift = (-(rightV) / 2);
    1b08:	000003c6 	.word	0x000003c6
    1b0c:	c65d0001 	.word	0xc65d0001
    1b10:	cc000003 	.word	0xcc000003
    1b14:	02000003 	.word	0x02000003
    1b18:	cc047d00 	.word	0xcc047d00
		}

		//[Single leg functions]
#ifdef OPT_SINGLELEG
		if (ControlMode == SINGLELEGMODE) {
    1b1c:	fc000003 	.word	0xfc000003

			//Switch leg for single leg control
			if ((buttons & BUT_R1) && !(buttonsPrev & BUT_R1)) {
    1b20:	02000003 	.word	0x02000003
    1b24:	00087d00 	.word	0x00087d00
    1b28:	00000000 	.word	0x00000000
    1b2c:	c4000000 	.word	0xc4000000
    1b30:	ee000003 	.word	0xee000003
				Buzzed(50,2000);
    1b34:	01000003 	.word	0x01000003
    1b38:	00005000 	.word	0x00005000
    1b3c:	00000000 	.word	0x00000000
				if (g_InControlState.SelectedLeg < (CNT_LEGS-1)) {
    1b40:	03c40000 	.word	0x03c40000
    1b44:	03ee0000 	.word	0x03ee0000
					g_InControlState.SelectedLeg = g_InControlState.SelectedLeg + 1;
				} else {
					g_InControlState.SelectedLeg = 0;
    1b48:	00010000 	.word	0x00010000
		if (ControlMode == SINGLELEGMODE) {

			//Switch leg for single leg control
			if ((buttons & BUT_R1) && !(buttonsPrev & BUT_R1)) {
				Buzzed(50,2000);
				if (g_InControlState.SelectedLeg < (CNT_LEGS-1)) {
    1b4c:	00000051 	.word	0x00000051
					g_InControlState.SelectedLeg = g_InControlState.SelectedLeg + 1;
    1b50:	00000000 	.word	0x00000000
			   g_InControlState.SLLeg.x= (signed char)((int)((int)lx+128)/2); //Left Stick Right/Left
      		   g_InControlState.SLLeg.y= (signed char)((int)((int)rightV+128)/10); //Right Stick Up/Down
		       g_InControlState.SLLeg.z = (signed char)((int)((int)ly+128)/2); //Left Stick Up/Down

#else
			g_InControlState.SLLeg.x = lx; //Left Stick Right/Left
    1b54:	0003c400 	.word	0x0003c400
			g_InControlState.SLLeg.y = rightV / 3 - 20;//Right Stick Up/Down
    1b58:	0003ca00 	.word	0x0003ca00
    1b5c:	52000100 	.word	0x52000100
    1b60:	000003ca 	.word	0x000003ca
    1b64:	000003ee 	.word	0x000003ee
    1b68:	005c0001 	.word	0x005c0001
			g_InControlState.SLLeg.z = ly;//Left Stick Up/Down

#endif
			// Hold single leg in place
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    1b6c:	00000000 	.word	0x00000000
    1b70:	fc000000 	.word	0xfc000000
    1b74:	fe000003 	.word	0xfe000003
      		   g_InControlState.SLLeg.y= (signed char)((int)((int)rightV+128)/10); //Right Stick Up/Down
		       g_InControlState.SLLeg.z = (signed char)((int)((int)ly+128)/2); //Left Stick Up/Down

#else
			g_InControlState.SLLeg.x = lx; //Left Stick Right/Left
			g_InControlState.SLLeg.y = rightV / 3 - 20;//Right Stick Up/Down
    1b78:	01000003 	.word	0x01000003
			g_InControlState.SLLeg.z = ly;//Left Stick Up/Down

#endif
			// Hold single leg in place
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    1b7c:	03fe5d00 	.word	0x03fe5d00
    1b80:	04020000 	.word	0x04020000
    1b84:	00020000 	.word	0x00020000
				Buzzed(50,2000);
    1b88:	0402047d 	.word	0x0402047d
    1b8c:	044c0000 	.word	0x044c0000
				g_InControlState.fSLHold = !g_InControlState.fSLHold;
    1b90:	00020000 	.word	0x00020000
    1b94:	0000087d 	.word	0x0000087d
    1b98:	00000000 	.word	0x00000000
    1b9c:	03fc0000 	.word	0x03fc0000
			}
		}
#endif

		//Calculate walking time delay
		g_InControlState.InputTimeDelay = 128- max(max(abs(lx), abs(ly)), abs(rightH));
    1ba0:	041c0000 	.word	0x041c0000
    1ba4:	00010000 	.word	0x00010000
    1ba8:	00000050 	.word	0x00000050
    1bac:	00000000 	.word	0x00000000
    1bb0:	0003fc00 	.word	0x0003fc00
    1bb4:	00041c00 	.word	0x00041c00
    1bb8:	51000100 	.word	0x51000100
	...
    1bc4:	00000428 	.word	0x00000428
    1bc8:	0000042a 	.word	0x0000042a
    1bcc:	2e500001 	.word	0x2e500001
    1bd0:	36000004 	.word	0x36000004

		//Calculate g_InControlState.BodyPos.y
		g_InControlState.BodyPos.y = max(g_BodyYOffset + g_BodyYShift, 0);
    1bd4:	01000004 	.word	0x01000004
    1bd8:	04365200 	.word	0x04365200
    1bdc:	04360000 	.word	0x04360000
    1be0:	00010000 	.word	0x00010000
    1be4:	00000050 	.word	0x00000050
    1be8:	00000000 	.word	0x00000000

		if (sLegInitXZAdjust || sLegInitAngleAdjust) {
    1bec:	00044c00 	.word	0x00044c00
    1bf0:	00044e00 	.word	0x00044e00
			// User asked for manual leg adjustment - only do when we have finished any previous adjustment

			if (!g_InControlState.ForceGaitStepCnt) {
    1bf4:	5d000100 	.word	0x5d000100
				if (sLegInitXZAdjust)
    1bf8:	0000044e 	.word	0x0000044e
					g_fDynamicLegXZLength = true;
    1bfc:	00000454 	.word	0x00000454
    1c00:	047d0002 	.word	0x047d0002

				sLegInitXZAdjust += GetLegsXZLength(); // Add on current length to our adjustment...
    1c04:	00000454 	.word	0x00000454
    1c08:	0000047c 	.word	0x0000047c
				// Handle maybe change angles...
				if (sLegInitAngleAdjust)
					RotateLegInitAngles(sLegInitAngleAdjust);

				// Give system time to process previous calls
				AdjustLegPositions(sLegInitXZAdjust);
    1c0c:	087d0002 	.word	0x087d0002
	...
			}
		}

		if (fAdjustLegPositions && !g_fDynamicLegXZLength)
    1c18:	0000044c 	.word	0x0000044c
			AdjustLegPositionsToBodyHeight(); // Put main workings into main program file
    1c1c:	00000470 	.word	0x00000470
		// Save away the buttons state as to not process the same press twice.
		buttonsPrev = buttons;
    1c20:	00500001 	.word	0x00500001
    1c24:	00000000 	.word	0x00000000
		extPrev = ext;
    1c28:	4c000000 	.word	0x4c000000
    1c2c:	70000004 	.word	0x70000004
		g_ulLastMsgTime = getMillis();
    1c30:	01000004 	.word	0x01000004
    1c34:	00005100 	.word	0x00005100
	} else {
		// We did not receive a valid packet.  check for a timeout to see if we should turn robot off...
		if (g_InControlState.fRobotOn) {
    1c38:	00000000 	.word	0x00000000
			if ((getMillis() - g_ulLastMsgTime) > ARBOTIX_TO)
    1c3c:	044c0000 	.word	0x044c0000
    1c40:	04520000 	.word	0x04520000
    1c44:	00010000 	.word	0x00010000
    1c48:	00045252 	.word	0x00045252
    1c4c:	00047000 	.word	0x00047000
				CommanderTurnRobotOff();
    1c50:	5c000100 	.word	0x5c000100
	...
		}
	}

}
    1c5c:	0000047c 	.word	0x0000047c
    1c60:	0000047e 	.word	0x0000047e
    1c64:	7e5d0001 	.word	0x7e5d0001
    1c68:	82000004 	.word	0x82000004
    1c6c:	02000004 	.word	0x02000004
    1c70:	82047d00 	.word	0x82047d00
    1c74:	8c000004 	.word	0x8c000004
    1c78:	02000004 	.word	0x02000004
    1c7c:	00087d00 	.word	0x00087d00
    1c80:	00000000 	.word	0x00000000
    1c84:	7c000000 	.word	0x7c000000
    1c88:	88000004 	.word	0x88000004
    1c8c:	01000004 	.word	0x01000004
    1c90:	00005000 	.word	0x00005000
    1c94:	00000000 	.word	0x00000000
    1c98:	048c0000 	.word	0x048c0000
    1c9c:	048e0000 	.word	0x048e0000
    1ca0:	00010000 	.word	0x00010000
    1ca4:	00048e5d 	.word	0x00048e5d
    1ca8:	00049200 	.word	0x00049200
    1cac:	7d000200 	.word	0x7d000200

extern void setupPhoenix(void);
extern void readSensors(void);


int Big_main(void) {
    1cb0:	00049204 	.word	0x00049204

	// Must include this line in all programs using "cm530.h/.c"
	SysInit();
    1cb4:	0004d400 	.word	0x0004d400
	setupPhoenix();
    1cb8:	7d000200 	.word	0x7d000200
			TotalYBal1 = 0;
			TotalZBal1 = 0;

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1cbc:	00000008 	.word	0x00000008

	while (1){
		while (1) {
			//Start time
			unsigned long lTimeWaitEnd;
			lTimerStart = getMillis();
    1cc0:	00000000 	.word	0x00000000
    1cc4:	00048c00 	.word	0x00048c00
    1cc8:	0004ae00 	.word	0x0004ae00
#ifdef MILLIS
			PrintString("Barebones lTimerStart ");
			Printu32d(lTimerStart);
			PrintString("\n");
#endif
			DoBackgroundProcess();
    1ccc:	50000100 	.word	0x50000100
	...
			//Read input
			CheckVoltage();        // check our voltages...
			if (!g_fLowVoltageShutdown) {
    1cd8:	0000048c 	.word	0x0000048c
				CommanderInputController_ControlInput();
    1cdc:	000004ae 	.word	0x000004ae
			}
			WriteOutputs();        // Write Outputs
			//Single leg control
			SingleLegControl();
    1ce0:	00510001 	.word	0x00510001
			DoBackgroundProcess();
    1ce4:	00000000 	.word	0x00000000

			//Gait
			GaitSeq();
    1ce8:	d4000000 	.word	0xd4000000

			DoBackgroundProcess();
    1cec:	d6000004 	.word	0xd6000004

			//Balance calculations
			TotalTransX = 0;     //reset values used for calculation of balance
    1cf0:	01000004 	.word	0x01000004
    1cf4:	04d65d00 	.word	0x04d65d00
			TotalTransZ = 0;
    1cf8:	04da0000 	.word	0x04da0000
			TotalTransY = 0;
    1cfc:	00020000 	.word	0x00020000
    1d00:	04da047d 	.word	0x04da047d
			TotalXBal1 = 0;
    1d04:	04fc0000 	.word	0x04fc0000
			TotalYBal1 = 0;
    1d08:	00020000 	.word	0x00020000
    1d0c:	0000087d 	.word	0x0000087d
			TotalZBal1 = 0;
    1d10:	00000000 	.word	0x00000000

			if (g_InControlState.BalanceMode) {
    1d14:	04d40000 	.word	0x04d40000
    1d18:	04f00000 	.word	0x04f00000
    1d1c:	00010000 	.word	0x00010000

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1d20:	00000050 	.word	0x00000050

					DoBackgroundProcess();
					BalCalcOneLeg(-LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d24:	00000000 	.word	0x00000000
    1d28:	0004fc00 	.word	0x0004fc00
    1d2c:	0004fe00 	.word	0x0004fe00

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs

					DoBackgroundProcess();
    1d30:	5d000100 	.word	0x5d000100
					BalCalcOneLeg(-LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d34:	000004fe 	.word	0x000004fe
    1d38:	00000500 	.word	0x00000500
    1d3c:	047d0002 	.word	0x047d0002
    1d40:	00000500 	.word	0x00000500
    1d44:	00000508 	.word	0x00000508
    1d48:	087d0002 	.word	0x087d0002
	...
    1d54:	00000508 	.word	0x00000508
    1d58:	0000050a 	.word	0x0000050a
    1d5c:	0a5d0001 	.word	0x0a5d0001
    1d60:	0c000005 	.word	0x0c000005
    1d64:	02000005 	.word	0x02000005
    1d68:	0c047d00 	.word	0x0c047d00
    1d6c:	30000005 	.word	0x30000005
			TotalYBal1 = 0;
			TotalZBal1 = 0;

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1d70:	02000005 	.word	0x02000005
    1d74:	00087d00 	.word	0x00087d00
    1d78:	00000000 	.word	0x00000000
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
    1d7c:	08000000 	.word	0x08000000
    1d80:	10000005 	.word	0x10000005
					DoBackgroundProcess();
					BalCalcOneLeg(LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d84:	01000005 	.word	0x01000005
    1d88:	00005000 	.word	0x00005000
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
					DoBackgroundProcess();
    1d8c:	00000000 	.word	0x00000000
					BalCalcOneLeg(LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d90:	00a80000 	.word	0x00a80000
    1d94:	00aa0000 	.word	0x00aa0000
    1d98:	00010000 	.word	0x00010000
    1d9c:	0000aa5d 	.word	0x0000aa5d
    1da0:	0001c800 	.word	0x0001c800
    1da4:	7d000200 	.word	0x7d000200
    1da8:	00000010 	.word	0x00000010
    1dac:	00000000 	.word	0x00000000
    1db0:	0000e800 	.word	0x0000e800
    1db4:	00016a00 	.word	0x00016a00
    1db8:	50000100 	.word	0x50000100
    1dbc:	00000192 	.word	0x00000192
    1dc0:	000001a2 	.word	0x000001a2
    1dc4:	00500001 	.word	0x00500001
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
    1dc8:	00000000 	.word	0x00000000
    1dcc:	1c000000 	.word	0x1c000000
    1dd0:	78000001 	.word	0x78000001
							LegPosZ[LegIndex] + GaitPosZ[LegIndex],
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}
				BalanceBody();
    1dd4:	01000001 	.word	0x01000001
			}

			//Reset IKsolution indicators
			IKSolution = 0;
    1dd8:	01925100 	.word	0x01925100
    1ddc:	01c80000 	.word	0x01c80000
			IKSolutionWarning = 0;
			IKSolutionError = 0;

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
    1de0:	00010000 	.word	0x00010000
			}

			//Reset IKsolution indicators
			IKSolution = 0;
			IKSolutionWarning = 0;
			IKSolutionError = 0;
    1de4:	00000051 	.word	0x00000051
    1de8:	00000000 	.word	0x00000000

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
				DoBackgroundProcess();
    1dec:	0001c800 	.word	0x0001c800
				BodyFK(
    1df0:	0001ca00 	.word	0x0001ca00
    1df4:	5d000100 	.word	0x5d000100
    1df8:	000001ca 	.word	0x000001ca
    1dfc:	000001ce 	.word	0x000001ce
    1e00:	0c7d0002 	.word	0x0c7d0002
    1e04:	000001ce 	.word	0x000001ce
    1e08:	000002c0 	.word	0x000002c0
    1e0c:	107d0002 	.word	0x107d0002
	...
    1e18:	0000020a 	.word	0x0000020a
    1e1c:	00000274 	.word	0x00000274
    1e20:	9a500001 	.word	0x9a500001
    1e24:	aa000002 	.word	0xaa000002
    1e28:	01000002 	.word	0x01000002
    1e2c:	00005000 	.word	0x00005000
    1e30:	00000000 	.word	0x00000000
    1e34:	023e0000 	.word	0x023e0000
    1e38:	02820000 	.word	0x02820000
    1e3c:	00010000 	.word	0x00010000
    1e40:	00029a51 	.word	0x00029a51
    1e44:	0002c000 	.word	0x0002c000
    1e48:	51000100 	.word	0x51000100
	...
						+ GaitPosZ[LegIndex] - TotalTransZ,
						LegPosY[LegIndex] + g_InControlState.BodyPos.y
						+ GaitPosY[LegIndex] - TotalTransY,
						GaitRotY[LegIndex], LegIndex);

				LegIK(
    1e54:	000002c0 	.word	0x000002c0
    1e58:	000002c2 	.word	0x000002c2
    1e5c:	c25d0001 	.word	0xc25d0001
    1e60:	c6000002 	.word	0xc6000002
    1e64:	02000002 	.word	0x02000002
    1e68:	c6047d00 	.word	0xc6047d00
    1e6c:	04000002 	.word	0x04000002
    1e70:	02000003 	.word	0x02000003
    1e74:	00107d00 	.word	0x00107d00
    1e78:	00000000 	.word	0x00000000
    1e7c:	c0000000 	.word	0xc0000000
    1e80:	c8000002 	.word	0xc8000002
    1e84:	01000002 	.word	0x01000002
    1e88:	00005000 	.word	0x00005000
    1e8c:	00000000 	.word	0x00000000
    1e90:	02c40000 	.word	0x02c40000
    1e94:	02e20000 	.word	0x02e20000
    1e98:	00010000 	.word	0x00010000
    1e9c:	00000052 	.word	0x00000052
    1ea0:	00000000 	.word	0x00000000
    1ea4:	0002c800 	.word	0x0002c800
    1ea8:	0002d400 	.word	0x0002d400
    1eac:	50000100 	.word	0x50000100
	...
    1eb8:	00000304 	.word	0x00000304
    1ebc:	00000306 	.word	0x00000306
    1ec0:	065d0001 	.word	0x065d0001
			IKSolutionWarning = 0;
			IKSolutionError = 0;

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
    1ec4:	08000003 	.word	0x08000003
    1ec8:	02000003 	.word	0x02000003
    1ecc:	08047d00 	.word	0x08047d00
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Do IK for all Left legs
			for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) {
    1ed0:	10000003 	.word	0x10000003
    1ed4:	02000003 	.word	0x02000003
				DoBackgroundProcess();
    1ed8:	00087d00 	.word	0x00087d00
				BodyFK(
    1edc:	00000000 	.word	0x00000000
    1ee0:	10000000 	.word	0x10000000
    1ee4:	12000003 	.word	0x12000003
    1ee8:	01000003 	.word	0x01000003
    1eec:	03125d00 	.word	0x03125d00
    1ef0:	03140000 	.word	0x03140000
    1ef4:	00020000 	.word	0x00020000
    1ef8:	0314047d 	.word	0x0314047d
    1efc:	03400000 	.word	0x03400000
    1f00:	00020000 	.word	0x00020000
    1f04:	0000087d 	.word	0x0000087d
    1f08:	00000000 	.word	0x00000000
    1f0c:	03100000 	.word	0x03100000
    1f10:	03180000 	.word	0x03180000
    1f14:	00010000 	.word	0x00010000
    1f18:	00000050 	.word	0x00000050
	...
    1f24:	00000200 	.word	0x00000200
    1f28:	5d000100 	.word	0x5d000100
    1f2c:	00000002 	.word	0x00000002
    1f30:	0000006a 	.word	0x0000006a
    1f34:	147d0002 	.word	0x147d0002
	...
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z
						+ GaitPosZ[LegIndex] - TotalTransZ,
						LegPosY[LegIndex] + g_InControlState.BodyPos.y
						+ GaitPosY[LegIndex] - TotalTransY,
						GaitRotY[LegIndex], LegIndex);
				LegIK(
    1f44:	0000000c 	.word	0x0000000c
    1f48:	0c510001 	.word	0x0c510001
    1f4c:	6a000000 	.word	0x6a000000
    1f50:	01000000 	.word	0x01000000
    1f54:	00005400 	.word	0x00005400
	...
    1f60:	000a0000 	.word	0x000a0000
    1f64:	00010000 	.word	0x00010000
    1f68:	00000a52 	.word	0x00000a52
    1f6c:	00006a00 	.word	0x00006a00
    1f70:	57000100 	.word	0x57000100
	...
    1f80:	0000000c 	.word	0x0000000c
    1f84:	0c530001 	.word	0x0c530001
    1f88:	6a000000 	.word	0x6a000000
    1f8c:	01000000 	.word	0x01000000
    1f90:	00005500 	.word	0x00005500
    1f94:	00000000 	.word	0x00000000
    1f98:	000a0000 	.word	0x000a0000
    1f9c:	00360000 	.word	0x00360000
    1fa0:	00010000 	.word	0x00010000
    1fa4:	00003652 	.word	0x00003652
    1fa8:	00006200 	.word	0x00006200
    1fac:	56000100 	.word	0x56000100
    1fb0:	00000062 	.word	0x00000062
    1fb4:	0000006a 	.word	0x0000006a
    1fb8:	00520001 	.word	0x00520001
    1fbc:	00000000 	.word	0x00000000
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Do IK for all Left legs
			for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) {
    1fc0:	6c000000 	.word	0x6c000000
    1fc4:	6e000000 	.word	0x6e000000
    1fc8:	01000000 	.word	0x01000000
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Check mechanical limits
			CheckAngles();
    1fcc:	006e5d00 	.word	0x006e5d00

			//Drive Servos
			if (g_InControlState.fRobotOn) {
    1fd0:	00720000 	.word	0x00720000
    1fd4:	00020000 	.word	0x00020000
    1fd8:	0072147d 	.word	0x0072147d
				if (g_InControlState.fRobotOn && !g_InControlState.fPrev_RobotOn) {
					// MSound(3, 60, 2000, 80, 2250, 100, 2500);
					Buzzed(30, 2000);
    1fdc:	00b60000 	.word	0x00b60000
    1fe0:	00020000 	.word	0x00020000
    1fe4:	0000187d 	.word	0x0000187d
					Buzzed(80, 2250);
    1fe8:	00000000 	.word	0x00000000
    1fec:	006c0000 	.word	0x006c0000
					Buzzed(100, 2500);
    1ff0:	00800000 	.word	0x00800000
    1ff4:	00010000 	.word	0x00010000
    1ff8:	00008050 	.word	0x00008050

				}

				//Calculate Servo Move time
				if ((abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
    1ffc:	0000b600 	.word	0x0000b600
    2000:	57000100 	.word	0x57000100
	...
    200c:	0000006c 	.word	0x0000006c
    2010:	0000007e 	.word	0x0000007e
    2014:	7e510001 	.word	0x7e510001
    2018:	b6000000 	.word	0xb6000000
    201c:	01000000 	.word	0x01000000
    2020:	00005600 	.word	0x00005600
    2024:	00000000 	.word	0x00000000
						|| (abs(g_InControlState.TravelLength.z) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.y*2) > cTravelDeadZone)) {
					ServoMoveTime = g_InControlState.gaitCur.NomGaitSpeed
    2028:	006c0000 	.word	0x006c0000
    202c:	009a0000 	.word	0x009a0000
    2030:	00010000 	.word	0x00010000
    2034:	00009c52 	.word	0x00009c52
    2038:	0000a800 	.word	0x0000a800
							+ (g_InControlState.InputTimeDelay * 2)
							+ g_InControlState.SpeedControl;

					//Add aditional delay when Balance mode is on
					if (g_InControlState.BalanceMode)
    203c:	52000100 	.word	0x52000100

				//Calculate Servo Move time
				if ((abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.z) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.y*2) > cTravelDeadZone)) {
					ServoMoveTime = g_InControlState.gaitCur.NomGaitSpeed
    2040:	000000a8 	.word	0x000000a8
							+ (g_InControlState.InputTimeDelay * 2)
							+ g_InControlState.SpeedControl;

					//Add aditional delay when Balance mode is on
					if (g_InControlState.BalanceMode)
						ServoMoveTime = ServoMoveTime + BALANCE_DELAY;
    2044:	000000b6 	.word	0x000000b6
    2048:	00520001 	.word	0x00520001
				} else
					//Movement speed excl. Walking
					ServoMoveTime = 200 + g_InControlState.SpeedControl;
    204c:	00000000 	.word	0x00000000
    2050:	6c000000 	.word	0x6c000000
    2054:	80000000 	.word	0x80000000

				// note we broke up the servo driver into start/commit that way we can output all of the servo information
				// before we wait and only have the termination information to output after the wait.  That way we hopefully
				// be more accurate with our timings...
				DoBackgroundProcess();
    2058:	01000000 	.word	0x01000000
				StartUpdateServos();
    205c:	00825300 	.word	0x00825300

				// See if we need to sync our processor with the servo driver while walking to ensure the prev is completed
				//before sending the next one

				// Finding any incident of GaitPos/Rot <>0:
				for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    2060:	00860000 	.word	0x00860000
					if ((GaitPosX[LegIndex] > cGPlimit)
    2064:	00010000 	.word	0x00010000
    2068:	00000053 	.word	0x00000053
    206c:	00000000 	.word	0x00000000
    2070:	00006c00 	.word	0x00006c00
    2074:	00008000 	.word	0x00008000
    2078:	91000200 	.word	0x91000200
    207c:	00008000 	.word	0x00008000
    2080:	00008200 	.word	0x00008200
    2084:	91000200 	.word	0x91000200
    2088:	00008214 	.word	0x00008214
    208c:	00008800 	.word	0x00008800
    2090:	91000200 	.word	0x91000200
    2094:	00008800 	.word	0x00008800
    2098:	0000b600 	.word	0x0000b600
    209c:	91000200 	.word	0x91000200
							|| (GaitPosZ[LegIndex] > cGPlimit)
							|| (GaitPosZ[LegIndex] < -cGPlimit)
							|| (GaitRotY[LegIndex] > cGPlimit)
							|| (GaitRotY[LegIndex] < -cGPlimit)) {

						bExtraCycle = g_InControlState.gaitCur.NrLiftedPos + 1;	//For making sure that we are using timed move until all legs are down
    20a0:	00000014 	.word	0x00000014
    20a4:	00000000 	.word	0x00000000
    20a8:	0000a400 	.word	0x0000a400

				// See if we need to sync our processor with the servo driver while walking to ensure the prev is completed
				//before sending the next one

				// Finding any incident of GaitPos/Rot <>0:
				for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    20ac:	0000a800 	.word	0x0000a800
    20b0:	51000100 	.word	0x51000100

						bExtraCycle = g_InControlState.gaitCur.NrLiftedPos + 1;	//For making sure that we are using timed move until all legs are down
						break;
					}
				}
				if (bExtraCycle > 0) {
    20b4:	000000ac 	.word	0x000000ac
					bExtraCycle--;
    20b8:	000000b6 	.word	0x000000b6
    20bc:	00510001 	.word	0x00510001
					fWalking = !(bExtraCycle == 0);
    20c0:	00000000 	.word	0x00000000
    20c4:	b8000000 	.word	0xb8000000

					//Get endtime and calculate wait time
					lTimeWaitEnd = lTimerStart + PrevServoMoveTime;
    20c8:	ba000000 	.word	0xba000000
    20cc:	01000000 	.word	0x01000000
    20d0:	00ba5d00 	.word	0x00ba5d00
					PrintString("\n");
#endif
					//DebugWrite(A1, HIGH);
					do {
						// Wait the appropriate time, call any background process while waiting...
						DoBackgroundProcess();
    20d4:	00bc0000 	.word	0x00bc0000
					} while (getMillis() < lTimeWaitEnd);
    20d8:	00020000 	.word	0x00020000
    20dc:	00bc147d 	.word	0x00bc147d
					PrintString("\n");
#endif

				}
				// Only do commit if we are actually doing something...
				CommitServoDriver(ServoMoveTime);
    20e0:	01fe0000 	.word	0x01fe0000
    20e4:	00030000 	.word	0x00030000
    20e8:	0000c07d 	.word	0x0000c07d
			} else {
				//Turn the bot off - May need to add ajust here...
				if (g_InControlState.fPrev_RobotOn || (AllDown = 0)) {
    20ec:	00000000 	.word	0x00000000
					PrintString("Barebones lTimeWaitEnd-Millis  ");
					Printu32d(getMillis);
					PrintString("\n");
#endif
				} else {
					FreeServos();
    20f0:	b8000000 	.word	0xb8000000
    20f4:	c6000000 	.word	0xc6000000
				// Only do commit if we are actually doing something...
				CommitServoDriver(ServoMoveTime);
			} else {
				//Turn the bot off - May need to add ajust here...
				if (g_InControlState.fPrev_RobotOn || (AllDown = 0)) {
					ServoMoveTime = 600;
    20f8:	01000000 	.word	0x01000000
    20fc:	00c65000 	.word	0x00c65000
					StartUpdateServos();
    2100:	00d20000 	.word	0x00d20000
					CommitServoDriver(ServoMoveTime);
    2104:	00020000 	.word	0x00020000
					//MSound(3, 100, 2500, 80, 2250, 60, 2000);
					Buzzed(100, 2500);
    2108:	00d2107d 	.word	0x00d2107d
    210c:	00f60000 	.word	0x00f60000
    2110:	00010000 	.word	0x00010000
					Buzzed(80, 2250);
    2114:	0000f650 	.word	0x0000f650
    2118:	0001e200 	.word	0x0001e200
					Buzzed(60, 2000);
    211c:	91000200 	.word	0x91000200
    2120:	0001e264 	.word	0x0001e264
    2124:	0001e600 	.word	0x0001e600

					//lTimeWaitEnd = getMillis() + 600; // setup to process background stuff while we wait...
					lTimeWaitEnd = getMillis() + 600; // setup to process background stuff while we wait...
    2128:	50000100 	.word	0x50000100
    212c:	000001e6 	.word	0x000001e6
					Printu32d(lTimeWaitEnd);
					PrintString("\n");
#endif
					do {
						// Wait the appropriate time, call any background process while waiting...
						DoBackgroundProcess();
    2130:	000001ee 	.word	0x000001ee
					} while (getMillis() < lTimeWaitEnd);
    2134:	64910002 	.word	0x64910002
    2138:	000001ee 	.word	0x000001ee
				} else {
					FreeServos();
				}

				// Allow the Servo driver to do stuff durint our idle time
				IdleTime();
    213c:	000001f2 	.word	0x000001f2
				mDelay(20); // give a pause between times we call if nothing is happening
    2140:	f2500001 	.word	0xf2500001
			}
			PrevServoMoveTime = ServoMoveTime;
    2144:	fe000001 	.word	0xfe000001
    2148:	02000001 	.word	0x02000001

			//Store previous g_InControlState.fRobotOn State
			if (g_InControlState.fRobotOn)
    214c:	00107d00 	.word	0x00107d00
    2150:	00000000 	.word	0x00000000
				g_InControlState.fPrev_RobotOn = 1;
			else
				g_InControlState.fPrev_RobotOn = 0;
    2154:	b8000000 	.word	0xb8000000
    2158:	c6000000 	.word	0xc6000000
    215c:	01000000 	.word	0x01000000
    2160:	00c65100 	.word	0x00c65100
    2164:	01e20000 	.word	0x01e20000
    2168:	00020000 	.word	0x00020000
    216c:	01e20c7d 	.word	0x01e20c7d
    2170:	01e60000 	.word	0x01e60000
    2174:	00010000 	.word	0x00010000
    2178:	0001e651 	.word	0x0001e651
    217c:	0001ea00 	.word	0x0001ea00
    2180:	91000200 	.word	0x91000200
    2184:	0001ea60 	.word	0x0001ea60
    2188:	0001fe00 	.word	0x0001fe00
    218c:	7d000200 	.word	0x7d000200
    2190:	0000000c 	.word	0x0000000c
    2194:	00000000 	.word	0x00000000
    2198:	0000b800 	.word	0x0000b800
    219c:	0000c600 	.word	0x0000c600
    21a0:	52000100 	.word	0x52000100
    21a4:	000000c6 	.word	0x000000c6
    21a8:	000001fe 	.word	0x000001fe
    21ac:	00570001 	.word	0x00570001
    21b0:	00000000 	.word	0x00000000
    21b4:	b8000000 	.word	0xb8000000
    21b8:	c6000000 	.word	0xc6000000
    21bc:	01000000 	.word	0x01000000
    21c0:	00c65300 	.word	0x00c65300
    21c4:	016c0000 	.word	0x016c0000
    21c8:	00010000 	.word	0x00010000
    21cc:	00016c55 	.word	0x00016c55
    21d0:	00017400 	.word	0x00017400
    21d4:	54000100 	.word	0x54000100
    21d8:	00000174 	.word	0x00000174
    21dc:	000001aa 	.word	0x000001aa
    21e0:	aa550001 	.word	0xaa550001
    21e4:	c8000001 	.word	0xc8000001
    21e8:	01000001 	.word	0x01000001
    21ec:	01c85400 	.word	0x01c85400
    21f0:	01d00000 	.word	0x01d00000
    21f4:	00010000 	.word	0x00010000
    21f8:	0001d055 	.word	0x0001d055
    21fc:	0001d400 	.word	0x0001d400
    2200:	54000100 	.word	0x54000100
    2204:	000001d4 	.word	0x000001d4
    2208:	000001de 	.word	0x000001de
    220c:	de550001 	.word	0xde550001
    2210:	ea000001 	.word	0xea000001
    2214:	01000001 	.word	0x01000001
    2218:	01ea5400 	.word	0x01ea5400
    221c:	01fe0000 	.word	0x01fe0000
    2220:	00010000 	.word	0x00010000
    2224:	00000055 	.word	0x00000055
    2228:	00000000 	.word	0x00000000
    222c:	0000c600 	.word	0x0000c600
    2230:	0000d600 	.word	0x0000d600
    2234:	51000100 	.word	0x51000100
    2238:	000000d6 	.word	0x000000d6
    223c:	00000172 	.word	0x00000172
    2240:	74520001 	.word	0x74520001
    2244:	8e000001 	.word	0x8e000001
    2248:	01000001 	.word	0x01000001
    224c:	01a65200 	.word	0x01a65200
    2250:	01b20000 	.word	0x01b20000
    2254:	00010000 	.word	0x00010000
    2258:	0001c852 	.word	0x0001c852
    225c:	0001d200 	.word	0x0001d200
    2260:	52000100 	.word	0x52000100
    2264:	000001d4 	.word	0x000001d4
    2268:	000001e0 	.word	0x000001e0
    226c:	ea520001 	.word	0xea520001
    2270:	f2000001 	.word	0xf2000001
    2274:	01000001 	.word	0x01000001
    2278:	01f25200 	.word	0x01f25200
    227c:	01f40000 	.word	0x01f40000
    2280:	00010000 	.word	0x00010000
    2284:	0001f452 	.word	0x0001f452
    2288:	0001fe00 	.word	0x0001fe00
    228c:	51000100 	.word	0x51000100
	...
    2298:	000000c6 	.word	0x000000c6
    229c:	000001e2 	.word	0x000001e2
    22a0:	e2560001 	.word	0xe2560001
    22a4:	e6000001 	.word	0xe6000001
    22a8:	01000001 	.word	0x01000001
    22ac:	01e65200 	.word	0x01e65200
    22b0:	01fe0000 	.word	0x01fe0000
    22b4:	00010000 	.word	0x00010000
    22b8:	00000056 	.word	0x00000056
    22bc:	00000000 	.word	0x00000000
    22c0:	0000fa00 	.word	0x0000fa00
    22c4:	00011000 	.word	0x00011000
    22c8:	51000100 	.word	0x51000100
    22cc:	00000126 	.word	0x00000126
    22d0:	00000170 	.word	0x00000170
    22d4:	74510001 	.word	0x74510001
    22d8:	8c000001 	.word	0x8c000001
    22dc:	01000001 	.word	0x01000001
    22e0:	01a65100 	.word	0x01a65100
    22e4:	01b40000 	.word	0x01b40000
    22e8:	00010000 	.word	0x00010000
    22ec:	0001c851 	.word	0x0001c851
    22f0:	0001ca00 	.word	0x0001ca00
    22f4:	51000100 	.word	0x51000100
    22f8:	000001d4 	.word	0x000001d4
    22fc:	000001da 	.word	0x000001da
    2300:	ea510001 	.word	0xea510001
    2304:	ee000001 	.word	0xee000001
    2308:	01000001 	.word	0x01000001
    230c:	01f25100 	.word	0x01f25100
    2310:	01f40000 	.word	0x01f40000
    2314:	00010000 	.word	0x00010000
    2318:	0001fa51 	.word	0x0001fa51
    231c:	0001fe00 	.word	0x0001fe00
    2320:	51000100 	.word	0x51000100
	...
    232c:	00000182 	.word	0x00000182
    2330:	00000192 	.word	0x00000192
    2334:	00530001 	.word	0x00530001
    2338:	00000000 	.word	0x00000000
    233c:	76000000 	.word	0x76000000
    2340:	92000001 	.word	0x92000001
    2344:	01000001 	.word	0x01000001
    2348:	00005000 	.word	0x00005000
    234c:	00000000 	.word	0x00000000
    2350:	02200000 	.word	0x02200000
    2354:	02220000 	.word	0x02220000
    2358:	00010000 	.word	0x00010000
    235c:	0002225d 	.word	0x0002225d
    2360:	00022400 	.word	0x00022400
    2364:	7d000200 	.word	0x7d000200
    2368:	0002240c 	.word	0x0002240c
    236c:	00022600 	.word	0x00022600
    2370:	7d000200 	.word	0x7d000200
    2374:	00022610 	.word	0x00022610
    2378:	00025000 	.word	0x00025000
    237c:	7d000200 	.word	0x7d000200
    2380:	00000018 	.word	0x00000018
    2384:	00000000 	.word	0x00000000
    2388:	00022000 	.word	0x00022000
    238c:	00023400 	.word	0x00023400
    2390:	50000100 	.word	0x50000100
    2394:	00000234 	.word	0x00000234
    2398:	00000250 	.word	0x00000250
    239c:	7c710002 	.word	0x7c710002
	...
    23a8:	00000250 	.word	0x00000250
    23ac:	00000252 	.word	0x00000252
    23b0:	525d0001 	.word	0x525d0001
    23b4:	54000002 	.word	0x54000002
    23b8:	02000002 	.word	0x02000002
    23bc:	54107d00 	.word	0x54107d00
    23c0:	58000002 	.word	0x58000002
    23c4:	02000002 	.word	0x02000002
    23c8:	58147d00 	.word	0x58147d00
    23cc:	7c000002 	.word	0x7c000002
    23d0:	02000002 	.word	0x02000002
    23d4:	00187d00 	.word	0x00187d00
	...
    23e0:	02000000 	.word	0x02000000
    23e4:	01000000 	.word	0x01000000
    23e8:	00025d00 	.word	0x00025d00
    23ec:	00060000 	.word	0x00060000
    23f0:	00020000 	.word	0x00020000
    23f4:	0006047d 	.word	0x0006047d
    23f8:	002c0000 	.word	0x002c0000
    23fc:	00020000 	.word	0x00020000
    2400:	0000087d 	.word	0x0000087d
	...
    240c:	000e0000 	.word	0x000e0000
    2410:	00010000 	.word	0x00010000
    2414:	00001850 	.word	0x00001850
    2418:	00001c00 	.word	0x00001c00
    241c:	50000100 	.word	0x50000100
	...
    242c:	00000012 	.word	0x00000012
    2430:	18510001 	.word	0x18510001
    2434:	20000000 	.word	0x20000000
    2438:	01000000 	.word	0x01000000
    243c:	00005100 	.word	0x00005100
    2440:	00000000 	.word	0x00000000
    2444:	002c0000 	.word	0x002c0000
    2448:	002e0000 	.word	0x002e0000
    244c:	00010000 	.word	0x00010000
    2450:	00002e5d 	.word	0x00002e5d
    2454:	00011c00 	.word	0x00011c00
    2458:	7d000200 	.word	0x7d000200
    245c:	00000008 	.word	0x00000008
    2460:	00000000 	.word	0x00000000
    2464:	00002c00 	.word	0x00002c00
    2468:	00004400 	.word	0x00004400
    246c:	50000100 	.word	0x50000100
    2470:	0000004c 	.word	0x0000004c
    2474:	00000062 	.word	0x00000062
    2478:	72500001 	.word	0x72500001
    247c:	88000000 	.word	0x88000000
    2480:	01000000 	.word	0x01000000
    2484:	00c85000 	.word	0x00c85000
    2488:	00da0000 	.word	0x00da0000
    248c:	00010000 	.word	0x00010000
    2490:	00010c50 	.word	0x00010c50
    2494:	00010e00 	.word	0x00010e00
    2498:	50000100 	.word	0x50000100
	...
    24a4:	000000c6 	.word	0x000000c6
    24a8:	000000c8 	.word	0x000000c8
    24ac:	d0540001 	.word	0xd0540001
    24b0:	1c000000 	.word	0x1c000000
    24b4:	01000001 	.word	0x01000001
    24b8:	00005400 	.word	0x00005400
    24bc:	00000000 	.word	0x00000000
    24c0:	011c0000 	.word	0x011c0000
    24c4:	011e0000 	.word	0x011e0000
    24c8:	00010000 	.word	0x00010000
    24cc:	00011e5d 	.word	0x00011e5d
    24d0:	00012200 	.word	0x00012200
    24d4:	7d000200 	.word	0x7d000200
    24d8:	00012204 	.word	0x00012204
    24dc:	00015e00 	.word	0x00015e00
    24e0:	7d000200 	.word	0x7d000200
    24e4:	00000008 	.word	0x00000008
    24e8:	00000000 	.word	0x00000000
    24ec:	00016000 	.word	0x00016000
    24f0:	00016200 	.word	0x00016200
    24f4:	5d000100 	.word	0x5d000100
    24f8:	00000162 	.word	0x00000162
    24fc:	0000019e 	.word	0x0000019e
    2500:	107d0002 	.word	0x107d0002
	...
    250c:	00000160 	.word	0x00000160
    2510:	0000016e 	.word	0x0000016e
    2514:	6e500001 	.word	0x6e500001
    2518:	8c000001 	.word	0x8c000001
    251c:	01000001 	.word	0x01000001
    2520:	00005500 	.word	0x00005500
	...
    252c:	00020000 	.word	0x00020000
    2530:	00010000 	.word	0x00010000
    2534:	0000025d 	.word	0x0000025d
    2538:	00000600 	.word	0x00000600
    253c:	7d000200 	.word	0x7d000200
    2540:	00000604 	.word	0x00000604
    2544:	00002400 	.word	0x00002400
    2548:	7d000200 	.word	0x7d000200
    254c:	00000008 	.word	0x00000008
	...
    2558:	00001200 	.word	0x00001200
    255c:	50000100 	.word	0x50000100
	...
    256c:	00000002 	.word	0x00000002
    2570:	025d0001 	.word	0x025d0001
    2574:	06000000 	.word	0x06000000
    2578:	02000000 	.word	0x02000000
    257c:	06047d00 	.word	0x06047d00
    2580:	2c000000 	.word	0x2c000000
    2584:	02000000 	.word	0x02000000
    2588:	00087d00 	.word	0x00087d00
	...
    2594:	0e000000 	.word	0x0e000000
    2598:	01000000 	.word	0x01000000
    259c:	00185000 	.word	0x00185000
    25a0:	001c0000 	.word	0x001c0000
    25a4:	00010000 	.word	0x00010000
    25a8:	00000050 	.word	0x00000050
	...
    25b4:	00001200 	.word	0x00001200
    25b8:	51000100 	.word	0x51000100
    25bc:	00000018 	.word	0x00000018
    25c0:	00000020 	.word	0x00000020
    25c4:	00510001 	.word	0x00510001
	...
    25d0:	02000000 	.word	0x02000000
    25d4:	01000000 	.word	0x01000000
    25d8:	00025d00 	.word	0x00025d00
    25dc:	00040000 	.word	0x00040000
    25e0:	00020000 	.word	0x00020000
    25e4:	00040c7d 	.word	0x00040c7d
    25e8:	003c0000 	.word	0x003c0000
    25ec:	00020000 	.word	0x00020000
    25f0:	0000107d 	.word	0x0000107d
	...
    25fc:	000c0000 	.word	0x000c0000
    2600:	00010000 	.word	0x00010000
    2604:	00000050 	.word	0x00000050
	...
    2610:	00000c00 	.word	0x00000c00
    2614:	51000100 	.word	0x51000100
    2618:	0000000c 	.word	0x0000000c
    261c:	0000003c 	.word	0x0000003c
    2620:	00540001 	.word	0x00540001
    2624:	00000000 	.word	0x00000000
    2628:	3c000000 	.word	0x3c000000
    262c:	3e000000 	.word	0x3e000000
    2630:	01000000 	.word	0x01000000
    2634:	003e5d00 	.word	0x003e5d00
    2638:	00420000 	.word	0x00420000
    263c:	00020000 	.word	0x00020000
    2640:	0042047d 	.word	0x0042047d
    2644:	004a0000 	.word	0x004a0000
    2648:	00020000 	.word	0x00020000
    264c:	0000087d 	.word	0x0000087d
    2650:	00000000 	.word	0x00000000
    2654:	003c0000 	.word	0x003c0000
    2658:	00460000 	.word	0x00460000
    265c:	00010000 	.word	0x00010000
    2660:	00000050 	.word	0x00000050
    2664:	00000000 	.word	0x00000000
    2668:	00003c00 	.word	0x00003c00
    266c:	00004000 	.word	0x00004000
    2670:	51000100 	.word	0x51000100
	...
    267c:	0000003c 	.word	0x0000003c
    2680:	00000046 	.word	0x00000046
    2684:	00520001 	.word	0x00520001
    2688:	00000000 	.word	0x00000000
    268c:	40000000 	.word	0x40000000
    2690:	42000000 	.word	0x42000000
    2694:	01000000 	.word	0x01000000
    2698:	00425d00 	.word	0x00425d00
    269c:	004c0000 	.word	0x004c0000
    26a0:	00020000 	.word	0x00020000
    26a4:	004c047d 	.word	0x004c047d
    26a8:	00560000 	.word	0x00560000
    26ac:	00020000 	.word	0x00020000
    26b0:	0000087d 	.word	0x0000087d
    26b4:	00000000 	.word	0x00000000
    26b8:	00400000 	.word	0x00400000
    26bc:	004a0000 	.word	0x004a0000
    26c0:	00010000 	.word	0x00010000
    26c4:	00000050 	.word	0x00000050
    26c8:	00000000 	.word	0x00000000
    26cc:	00010800 	.word	0x00010800
    26d0:	00010c00 	.word	0x00010c00
    26d4:	5d000100 	.word	0x5d000100
    26d8:	0000010c 	.word	0x0000010c
    26dc:	00000204 	.word	0x00000204
    26e0:	087d0002 	.word	0x087d0002
	...
    26ec:	00000204 	.word	0x00000204
    26f0:	00000206 	.word	0x00000206
    26f4:	065d0001 	.word	0x065d0001
    26f8:	0a000002 	.word	0x0a000002
    26fc:	02000002 	.word	0x02000002
    2700:	0a047d00 	.word	0x0a047d00
    2704:	3c000002 	.word	0x3c000002
    2708:	02000002 	.word	0x02000002
    270c:	00087d00 	.word	0x00087d00
    2710:	00000000 	.word	0x00000000
    2714:	04000000 	.word	0x04000000
    2718:	22000002 	.word	0x22000002
    271c:	01000002 	.word	0x01000002
    2720:	00005000 	.word	0x00005000
	...
    272c:	00020000 	.word	0x00020000
    2730:	00010000 	.word	0x00010000
    2734:	0000025d 	.word	0x0000025d
    2738:	00000600 	.word	0x00000600
    273c:	7d000200 	.word	0x7d000200
    2740:	00000604 	.word	0x00000604
    2744:	00004000 	.word	0x00004000
    2748:	7d000200 	.word	0x7d000200
    274c:	00000008 	.word	0x00000008
    2750:	00000000 	.word	0x00000000
    2754:	00004000 	.word	0x00004000
    2758:	00004200 	.word	0x00004200
    275c:	5d000100 	.word	0x5d000100
    2760:	00000042 	.word	0x00000042
    2764:	00000046 	.word	0x00000046
    2768:	047d0002 	.word	0x047d0002
    276c:	00000046 	.word	0x00000046
    2770:	00000064 	.word	0x00000064
    2774:	087d0002 	.word	0x087d0002
	...
    2780:	00000064 	.word	0x00000064
    2784:	00000066 	.word	0x00000066
    2788:	665d0001 	.word	0x665d0001
    278c:	68000000 	.word	0x68000000
    2790:	02000000 	.word	0x02000000
    2794:	68107d00 	.word	0x68107d00
    2798:	4c000000 	.word	0x4c000000
    279c:	02000001 	.word	0x02000001
    27a0:	00287d00 	.word	0x00287d00
    27a4:	00000000 	.word	0x00000000
    27a8:	4c000000 	.word	0x4c000000
    27ac:	4e000001 	.word	0x4e000001
    27b0:	01000001 	.word	0x01000001
    27b4:	014e5d00 	.word	0x014e5d00
    27b8:	01500000 	.word	0x01500000
    27bc:	00020000 	.word	0x00020000
    27c0:	0150147d 	.word	0x0150147d
    27c4:	03240000 	.word	0x03240000
    27c8:	00020000 	.word	0x00020000
    27cc:	0000207d 	.word	0x0000207d
    27d0:	00000000 	.word	0x00000000
    27d4:	03240000 	.word	0x03240000
    27d8:	03260000 	.word	0x03260000
    27dc:	00010000 	.word	0x00010000
    27e0:	0003265d 	.word	0x0003265d
    27e4:	00032c00 	.word	0x00032c00
    27e8:	7d000200 	.word	0x7d000200
    27ec:	00032c10 	.word	0x00032c10
    27f0:	00039200 	.word	0x00039200
    27f4:	7d000200 	.word	0x7d000200
    27f8:	00000018 	.word	0x00000018
    27fc:	00000000 	.word	0x00000000
    2800:	00039400 	.word	0x00039400
    2804:	00039600 	.word	0x00039600
    2808:	5d000100 	.word	0x5d000100
    280c:	00000396 	.word	0x00000396
    2810:	00000398 	.word	0x00000398
    2814:	047d0002 	.word	0x047d0002
    2818:	00000398 	.word	0x00000398
    281c:	00000428 	.word	0x00000428
    2820:	087d0002 	.word	0x087d0002
	...
    282c:	00000428 	.word	0x00000428
    2830:	0000042a 	.word	0x0000042a
    2834:	2a5d0001 	.word	0x2a5d0001
    2838:	30000004 	.word	0x30000004
    283c:	02000004 	.word	0x02000004
    2840:	30047d00 	.word	0x30047d00
    2844:	54000004 	.word	0x54000004
    2848:	02000004 	.word	0x02000004
    284c:	00087d00 	.word	0x00087d00
    2850:	00000000 	.word	0x00000000
    2854:	0000      	.short	0x0000
    2856:	00          	.byte	0x00
    2857:	22          	.byte	0x22
    2858:	24000000 	.word	0x24000000
    285c:	01000000 	.word	0x01000000
    2860:	00345000 	.word	0x00345000
    2864:	00420000 	.word	0x00420000
    2868:	00010000 	.word	0x00010000
    286c:	00000050 	.word	0x00000050
    2870:	00000000 	.word	0x00000000
    2874:	00005e00 	.word	0x00005e00
    2878:	00006000 	.word	0x00006000
    287c:	50000100 	.word	0x50000100
    2880:	0000006a 	.word	0x0000006a
    2884:	0000006a 	.word	0x0000006a
    2888:	00500001 	.word	0x00500001
    288c:	00000000 	.word	0x00000000
    2890:	d8000000 	.word	0xd8000000
    2894:	da000000 	.word	0xda000000
    2898:	01000000 	.word	0x01000000
    289c:	00da5d00 	.word	0x00da5d00
    28a0:	00e20000 	.word	0x00e20000
    28a4:	00020000 	.word	0x00020000
    28a8:	00e2147d 	.word	0x00e2147d
    28ac:	012c0000 	.word	0x012c0000
    28b0:	00020000 	.word	0x00020000
    28b4:	0000207d 	.word	0x0000207d
    28b8:	00000000 	.word	0x00000000
    28bc:	00d80000 	.word	0x00d80000
    28c0:	00ec0000 	.word	0x00ec0000
    28c4:	00010000 	.word	0x00010000
    28c8:	0000ec50 	.word	0x0000ec50
    28cc:	00012c00 	.word	0x00012c00
    28d0:	55000100 	.word	0x55000100
	...
    28dc:	000000d8 	.word	0x000000d8
    28e0:	000000e6 	.word	0x000000e6
    28e4:	e6510001 	.word	0xe6510001
    28e8:	2c000000 	.word	0x2c000000
    28ec:	01000001 	.word	0x01000001
    28f0:	00005400 	.word	0x00005400
    28f4:	00000000 	.word	0x00000000
    28f8:	00ec0000 	.word	0x00ec0000
    28fc:	011a0000 	.word	0x011a0000
    2900:	00010000 	.word	0x00010000
    2904:	00000050 	.word	0x00000050
    2908:	00000000 	.word	0x00000000
    290c:	00015800 	.word	0x00015800
    2910:	00015a00 	.word	0x00015a00
    2914:	5d000100 	.word	0x5d000100
    2918:	0000015a 	.word	0x0000015a
    291c:	00000162 	.word	0x00000162
    2920:	147d0002 	.word	0x147d0002
    2924:	00000162 	.word	0x00000162
    2928:	000001b4 	.word	0x000001b4
    292c:	207d0002 	.word	0x207d0002
	...
    2938:	00000158 	.word	0x00000158
    293c:	0000016e 	.word	0x0000016e
    2940:	6e500001 	.word	0x6e500001
    2944:	b4000001 	.word	0xb4000001
    2948:	01000001 	.word	0x01000001
    294c:	00005500 	.word	0x00005500
    2950:	00000000 	.word	0x00000000
    2954:	01580000 	.word	0x01580000
    2958:	01660000 	.word	0x01660000
    295c:	00010000 	.word	0x00010000
    2960:	00016651 	.word	0x00016651
    2964:	0001b400 	.word	0x0001b400
    2968:	54000100 	.word	0x54000100
	...
    2974:	0000016e 	.word	0x0000016e
    2978:	000001a2 	.word	0x000001a2
    297c:	00500001 	.word	0x00500001
    2980:	00000000 	.word	0x00000000
    2984:	c8000000 	.word	0xc8000000
    2988:	ca000001 	.word	0xca000001
    298c:	01000001 	.word	0x01000001
    2990:	01ca5d00 	.word	0x01ca5d00
    2994:	01ce0000 	.word	0x01ce0000
    2998:	00020000 	.word	0x00020000
    299c:	01ce047d 	.word	0x01ce047d
    29a0:	02400000 	.word	0x02400000
    29a4:	00020000 	.word	0x00020000
    29a8:	0000087d 	.word	0x0000087d
    29ac:	00000000 	.word	0x00000000
    29b0:	02400000 	.word	0x02400000
    29b4:	02420000 	.word	0x02420000
    29b8:	00010000 	.word	0x00010000
    29bc:	0002425d 	.word	0x0002425d
    29c0:	00024800 	.word	0x00024800
    29c4:	7d000200 	.word	0x7d000200
    29c8:	00024804 	.word	0x00024804
    29cc:	00025200 	.word	0x00025200
    29d0:	7d000200 	.word	0x7d000200
    29d4:	00000008 	.word	0x00000008
    29d8:	00000000 	.word	0x00000000
    29dc:	00024000 	.word	0x00024000
    29e0:	00024600 	.word	0x00024600
    29e4:	50000100 	.word	0x50000100
	...
    29f0:	00000254 	.word	0x00000254
    29f4:	00000256 	.word	0x00000256
    29f8:	565d0001 	.word	0x565d0001
    29fc:	a8000002 	.word	0xa8000002
    2a00:	02000002 	.word	0x02000002
    2a04:	00107d00 	.word	0x00107d00
    2a08:	00000000 	.word	0x00000000
    2a0c:	54000000 	.word	0x54000000
    2a10:	5e000002 	.word	0x5e000002
    2a14:	01000002 	.word	0x01000002
    2a18:	025e5000 	.word	0x025e5000
    2a1c:	02a80000 	.word	0x02a80000
    2a20:	00010000 	.word	0x00010000
    2a24:	00000056 	.word	0x00000056
    2a28:	00000000 	.word	0x00000000
    2a2c:	00025400 	.word	0x00025400
    2a30:	00025e00 	.word	0x00025e00
    2a34:	51000100 	.word	0x51000100
    2a38:	0000025e 	.word	0x0000025e
    2a3c:	000002a8 	.word	0x000002a8
    2a40:	00550001 	.word	0x00550001
    2a44:	00000000 	.word	0x00000000
    2a48:	a8000000 	.word	0xa8000000
    2a4c:	aa000002 	.word	0xaa000002
    2a50:	01000002 	.word	0x01000002
    2a54:	02aa5d00 	.word	0x02aa5d00
    2a58:	02ae0000 	.word	0x02ae0000
    2a5c:	00020000 	.word	0x00020000
    2a60:	02ae047d 	.word	0x02ae047d
    2a64:	02bc0000 	.word	0x02bc0000
    2a68:	00020000 	.word	0x00020000
    2a6c:	0000087d 	.word	0x0000087d
    2a70:	00000000 	.word	0x00000000
    2a74:	02bc0000 	.word	0x02bc0000
    2a78:	02be0000 	.word	0x02be0000
    2a7c:	00010000 	.word	0x00010000
    2a80:	0002be5d 	.word	0x0002be5d
    2a84:	0002c200 	.word	0x0002c200
    2a88:	7d000200 	.word	0x7d000200
    2a8c:	0002c204 	.word	0x0002c204
    2a90:	0002e000 	.word	0x0002e000
    2a94:	7d000200 	.word	0x7d000200
    2a98:	00000008 	.word	0x00000008
    2a9c:	00000000 	.word	0x00000000
    2aa0:	0002e000 	.word	0x0002e000
    2aa4:	0002e200 	.word	0x0002e200
    2aa8:	5d000100 	.word	0x5d000100
    2aac:	000002e2 	.word	0x000002e2
    2ab0:	000002e6 	.word	0x000002e6
    2ab4:	047d0002 	.word	0x047d0002
    2ab8:	000002e6 	.word	0x000002e6
    2abc:	000002f4 	.word	0x000002f4
    2ac0:	087d0002 	.word	0x087d0002
	...
    2acc:	000002f4 	.word	0x000002f4
    2ad0:	000002f6 	.word	0x000002f6
    2ad4:	f65d0001 	.word	0xf65d0001
    2ad8:	f8000002 	.word	0xf8000002
    2adc:	02000002 	.word	0x02000002
    2ae0:	f80c7d00 	.word	0xf80c7d00
    2ae4:	54000002 	.word	0x54000002
    2ae8:	02000003 	.word	0x02000003
    2aec:	00207d00 	.word	0x00207d00
    2af0:	00000000 	.word	0x00000000
    2af4:	f4000000 	.word	0xf4000000
    2af8:	fc000002 	.word	0xfc000002
    2afc:	01000002 	.word	0x01000002
    2b00:	02fc5000 	.word	0x02fc5000
    2b04:	03040000 	.word	0x03040000
    2b08:	00010000 	.word	0x00010000
    2b0c:	00000054 	.word	0x00000054
    2b10:	00000000 	.word	0x00000000
    2b14:	00035400 	.word	0x00035400
    2b18:	00035600 	.word	0x00035600
    2b1c:	5d000100 	.word	0x5d000100
    2b20:	00000356 	.word	0x00000356
    2b24:	00000358 	.word	0x00000358
    2b28:	0c7d0002 	.word	0x0c7d0002
    2b2c:	00000358 	.word	0x00000358
    2b30:	000003c4 	.word	0x000003c4
    2b34:	207d0002 	.word	0x207d0002
	...
    2b40:	00000354 	.word	0x00000354
    2b44:	0000035c 	.word	0x0000035c
    2b48:	5c500001 	.word	0x5c500001
    2b4c:	64000003 	.word	0x64000003
    2b50:	01000003 	.word	0x01000003
    2b54:	00005400 	.word	0x00005400
    2b58:	00000000 	.word	0x00000000
    2b5c:	03c40000 	.word	0x03c40000
    2b60:	03c60000 	.word	0x03c60000
    2b64:	00010000 	.word	0x00010000
    2b68:	0003c65d 	.word	0x0003c65d
    2b6c:	0003c800 	.word	0x0003c800
    2b70:	7d000200 	.word	0x7d000200
    2b74:	0003c80c 	.word	0x0003c80c
    2b78:	00042400 	.word	0x00042400
    2b7c:	7d000200 	.word	0x7d000200
    2b80:	00000020 	.word	0x00000020
    2b84:	00000000 	.word	0x00000000
    2b88:	0003c400 	.word	0x0003c400
    2b8c:	0003cc00 	.word	0x0003cc00
    2b90:	50000100 	.word	0x50000100
    2b94:	000003cc 	.word	0x000003cc
    2b98:	000003d4 	.word	0x000003d4
    2b9c:	00540001 	.word	0x00540001
    2ba0:	00000000 	.word	0x00000000
    2ba4:	24000000 	.word	0x24000000
    2ba8:	26000004 	.word	0x26000004
    2bac:	01000004 	.word	0x01000004
    2bb0:	04265d00 	.word	0x04265d00
    2bb4:	04b40000 	.word	0x04b40000
    2bb8:	00020000 	.word	0x00020000
    2bbc:	0000087d 	.word	0x0000087d
    2bc0:	00000000 	.word	0x00000000
    2bc4:	04b40000 	.word	0x04b40000
    2bc8:	04b60000 	.word	0x04b60000
    2bcc:	00010000 	.word	0x00010000
    2bd0:	0004b65d 	.word	0x0004b65d
    2bd4:	0004f400 	.word	0x0004f400
    2bd8:	7d000200 	.word	0x7d000200
    2bdc:	00000010 	.word	0x00000010
    2be0:	00000000 	.word	0x00000000
    2be4:	0004b400 	.word	0x0004b400
    2be8:	0004be00 	.word	0x0004be00
    2bec:	50000100 	.word	0x50000100
    2bf0:	000004be 	.word	0x000004be
    2bf4:	000004f4 	.word	0x000004f4
    2bf8:	00560001 	.word	0x00560001
    2bfc:	00000000 	.word	0x00000000
    2c00:	b4000000 	.word	0xb4000000
    2c04:	be000004 	.word	0xbe000004
    2c08:	01000004 	.word	0x01000004
    2c0c:	04be5100 	.word	0x04be5100
    2c10:	04f40000 	.word	0x04f40000
    2c14:	00010000 	.word	0x00010000
    2c18:	00000055 	.word	0x00000055
    2c1c:	00000000 	.word	0x00000000
    2c20:	0004f400 	.word	0x0004f400
    2c24:	0004f600 	.word	0x0004f600
    2c28:	5d000100 	.word	0x5d000100
    2c2c:	000004f6 	.word	0x000004f6
    2c30:	00000594 	.word	0x00000594
    2c34:	087d0002 	.word	0x087d0002
	...
    2c40:	00000594 	.word	0x00000594
    2c44:	00000596 	.word	0x00000596
    2c48:	965d0001 	.word	0x965d0001
    2c4c:	98000005 	.word	0x98000005
    2c50:	02000005 	.word	0x02000005
    2c54:	98047d00 	.word	0x98047d00
    2c58:	a0000005 	.word	0xa0000005
    2c5c:	02000005 	.word	0x02000005
    2c60:	00087d00 	.word	0x00087d00
    2c64:	00000000 	.word	0x00000000
    2c68:	a0000000 	.word	0xa0000000
    2c6c:	a2000005 	.word	0xa2000005
    2c70:	01000005 	.word	0x01000005
    2c74:	05a25d00 	.word	0x05a25d00
    2c78:	05d00000 	.word	0x05d00000
    2c7c:	00020000 	.word	0x00020000
    2c80:	0000087d 	.word	0x0000087d
    2c84:	00000000 	.word	0x00000000
    2c88:	05a00000 	.word	0x05a00000
    2c8c:	05a80000 	.word	0x05a80000
    2c90:	00010000 	.word	0x00010000
    2c94:	0005a850 	.word	0x0005a850
    2c98:	0005d000 	.word	0x0005d000
    2c9c:	54000100 	.word	0x54000100
	...
    2ca8:	000005d0 	.word	0x000005d0
    2cac:	000005d2 	.word	0x000005d2
    2cb0:	d25d0001 	.word	0xd25d0001
    2cb4:	d8000005 	.word	0xd8000005
    2cb8:	02000005 	.word	0x02000005
    2cbc:	d8047d00 	.word	0xd8047d00
    2cc0:	e4000005 	.word	0xe4000005
    2cc4:	02000005 	.word	0x02000005
    2cc8:	00087d00 	.word	0x00087d00
    2ccc:	00000000 	.word	0x00000000
    2cd0:	d0000000 	.word	0xd0000000
    2cd4:	d6000005 	.word	0xd6000005
    2cd8:	01000005 	.word	0x01000005
    2cdc:	05d65000 	.word	0x05d65000
    2ce0:	05e00000 	.word	0x05e00000
    2ce4:	00010000 	.word	0x00010000
    2ce8:	00000053 	.word	0x00000053
    2cec:	00000000 	.word	0x00000000
    2cf0:	00000200 	.word	0x00000200
    2cf4:	00000800 	.word	0x00000800
    2cf8:	53000100 	.word	0x53000100
    2cfc:	00000014 	.word	0x00000014
    2d00:	00000018 	.word	0x00000018
    2d04:	1e530001 	.word	0x1e530001
    2d08:	2e000000 	.word	0x2e000000
    2d0c:	01000000 	.word	0x01000000
    2d10:	002e5c00 	.word	0x002e5c00
    2d14:	00480000 	.word	0x00480000
    2d18:	00010000 	.word	0x00010000
    2d1c:	00000052 	.word	0x00000052
    2d20:	00000000 	.word	0x00000000
    2d24:	00008400 	.word	0x00008400
    2d28:	00008600 	.word	0x00008600
    2d2c:	51000100 	.word	0x51000100
	...
    2d38:	000000a8 	.word	0x000000a8
    2d3c:	000000aa 	.word	0x000000aa
    2d40:	00500001 	.word	0x00500001
    2d44:	00000000 	.word	0x00000000
    2d48:	c0000000 	.word	0xc0000000
    2d4c:	c2000000 	.word	0xc2000000
    2d50:	01000000 	.word	0x01000000
    2d54:	00005000 	.word	0x00005000
    2d58:	00000000 	.word	0x00000000
    2d5c:	00e00000 	.word	0x00e00000
    2d60:	00e20000 	.word	0x00e20000
    2d64:	00010000 	.word	0x00010000
    2d68:	00000050 	.word	0x00000050
    2d6c:	00000000 	.word	0x00000000
    2d70:	0000ec00 	.word	0x0000ec00
    2d74:	0000f000 	.word	0x0000f000
    2d78:	51000100 	.word	0x51000100
	...
    2d84:	00000110 	.word	0x00000110
    2d88:	00000114 	.word	0x00000114
    2d8c:	145d0001 	.word	0x145d0001
    2d90:	a6000001 	.word	0xa6000001
    2d94:	02000001 	.word	0x02000001
    2d98:	000c7d00 	.word	0x000c7d00
    2d9c:	00000000 	.word	0x00000000
    2da0:	10000000 	.word	0x10000000
    2da4:	2e000001 	.word	0x2e000001
    2da8:	01000001 	.word	0x01000001
    2dac:	012e5100 	.word	0x012e5100
    2db0:	01380000 	.word	0x01380000
    2db4:	00010000 	.word	0x00010000
    2db8:	00013854 	.word	0x00013854
    2dbc:	00014400 	.word	0x00014400
    2dc0:	51000100 	.word	0x51000100
    2dc4:	00000144 	.word	0x00000144
    2dc8:	000001a6 	.word	0x000001a6
    2dcc:	00540001 	.word	0x00540001
    2dd0:	00000000 	.word	0x00000000
    2dd4:	10000000 	.word	0x10000000
    2dd8:	1e000001 	.word	0x1e000001
    2ddc:	01000001 	.word	0x01000001
    2de0:	011e5200 	.word	0x011e5200
    2de4:	01a60000 	.word	0x01a60000
    2de8:	00010000 	.word	0x00010000
    2dec:	0000005c 	.word	0x0000005c
    2df0:	00000000 	.word	0x00000000
    2df4:	00011000 	.word	0x00011000
    2df8:	00012000 	.word	0x00012000
    2dfc:	53000100 	.word	0x53000100
    2e00:	00000120 	.word	0x00000120
    2e04:	000001a6 	.word	0x000001a6
    2e08:	00550001 	.word	0x00550001
    2e0c:	00000000 	.word	0x00000000
    2e10:	2e000000 	.word	0x2e000000
    2e14:	38000001 	.word	0x38000001
    2e18:	01000001 	.word	0x01000001
    2e1c:	01445100 	.word	0x01445100
    2e20:	01a60000 	.word	0x01a60000
    2e24:	00010000 	.word	0x00010000
    2e28:	00000051 	.word	0x00000051
    2e2c:	00000000 	.word	0x00000000
    2e30:	0001bc00 	.word	0x0001bc00
    2e34:	0001be00 	.word	0x0001be00
    2e38:	50000100 	.word	0x50000100
	...
    2e44:	000001f8 	.word	0x000001f8
    2e48:	00000200 	.word	0x00000200
    2e4c:	00510001 	.word	0x00510001
    2e50:	00000000 	.word	0x00000000
    2e54:	fa000000 	.word	0xfa000000
    2e58:	00000001 	.word	0x00000001
    2e5c:	01000002 	.word	0x01000002
    2e60:	02005300 	.word	0x02005300
    2e64:	02040000 	.word	0x02040000
    2e68:	00010000 	.word	0x00010000
    2e6c:	00000051 	.word	0x00000051
    2e70:	00000000 	.word	0x00000000
    2e74:	00022c00 	.word	0x00022c00
    2e78:	00022e00 	.word	0x00022e00
    2e7c:	50000100 	.word	0x50000100
	...
    2e88:	00000238 	.word	0x00000238
    2e8c:	0000023c 	.word	0x0000023c
    2e90:	3c5d0001 	.word	0x3c5d0001
    2e94:	9a000002 	.word	0x9a000002
    2e98:	02000002 	.word	0x02000002
    2e9c:	000c7d00 	.word	0x000c7d00
    2ea0:	00000000 	.word	0x00000000
    2ea4:	38000000 	.word	0x38000000
    2ea8:	56000002 	.word	0x56000002
    2eac:	01000002 	.word	0x01000002
    2eb0:	02565100 	.word	0x02565100
    2eb4:	02600000 	.word	0x02600000
    2eb8:	00010000 	.word	0x00010000
    2ebc:	0002605c 	.word	0x0002605c
    2ec0:	00026c00 	.word	0x00026c00
    2ec4:	51000100 	.word	0x51000100
    2ec8:	0000026c 	.word	0x0000026c
    2ecc:	0000029a 	.word	0x0000029a
    2ed0:	005c0001 	.word	0x005c0001
    2ed4:	00000000 	.word	0x00000000
    2ed8:	38000000 	.word	0x38000000
    2edc:	46000002 	.word	0x46000002
    2ee0:	01000002 	.word	0x01000002
    2ee4:	02465200 	.word	0x02465200
    2ee8:	029a0000 	.word	0x029a0000
    2eec:	00010000 	.word	0x00010000
    2ef0:	00000055 	.word	0x00000055
    2ef4:	00000000 	.word	0x00000000
    2ef8:	00023800 	.word	0x00023800
    2efc:	00024800 	.word	0x00024800
    2f00:	53000100 	.word	0x53000100
    2f04:	00000248 	.word	0x00000248
    2f08:	0000029a 	.word	0x0000029a
    2f0c:	00540001 	.word	0x00540001
    2f10:	00000000 	.word	0x00000000
    2f14:	56000000 	.word	0x56000000
    2f18:	60000002 	.word	0x60000002
    2f1c:	01000002 	.word	0x01000002
    2f20:	026c5100 	.word	0x026c5100
    2f24:	02760000 	.word	0x02760000
    2f28:	00010000 	.word	0x00010000
    2f2c:	00027651 	.word	0x00027651
    2f30:	00029a00 	.word	0x00029a00
    2f34:	53000100 	.word	0x53000100
	...
    2f40:	0000029c 	.word	0x0000029c
    2f44:	000002a0 	.word	0x000002a0
    2f48:	00510001 	.word	0x00510001
    2f4c:	00000000 	.word	0x00000000
    2f50:	ac000000 	.word	0xac000000
    2f54:	ae000002 	.word	0xae000002
    2f58:	01000002 	.word	0x01000002
    2f5c:	02ae5d00 	.word	0x02ae5d00
    2f60:	02b40000 	.word	0x02b40000
    2f64:	00020000 	.word	0x00020000
    2f68:	0000087d 	.word	0x0000087d
    2f6c:	00000000 	.word	0x00000000
    2f70:	02ac0000 	.word	0x02ac0000
    2f74:	02b00000 	.word	0x02b00000
    2f78:	00010000 	.word	0x00010000
    2f7c:	00000050 	.word	0x00000050
    2f80:	00000000 	.word	0x00000000
    2f84:	0002b400 	.word	0x0002b400
    2f88:	0002b600 	.word	0x0002b600
    2f8c:	5d000100 	.word	0x5d000100
    2f90:	000002b6 	.word	0x000002b6
    2f94:	000002c2 	.word	0x000002c2
    2f98:	087d0002 	.word	0x087d0002
	...
    2fa4:	000002b4 	.word	0x000002b4
    2fa8:	000002b8 	.word	0x000002b8
    2fac:	00500001 	.word	0x00500001
    2fb0:	00000000 	.word	0x00000000
    2fb4:	c4000000 	.word	0xc4000000
    2fb8:	d0000002 	.word	0xd0000002
    2fbc:	01000002 	.word	0x01000002
    2fc0:	00005100 	.word	0x00005100
    2fc4:	00000000 	.word	0x00000000
    2fc8:	02c60000 	.word	0x02c60000
    2fcc:	02d00000 	.word	0x02d00000
    2fd0:	00010000 	.word	0x00010000
    2fd4:	0002d053 	.word	0x0002d053
    2fd8:	0002d400 	.word	0x0002d400
    2fdc:	51000100 	.word	0x51000100
	...
    2fe8:	000002dc 	.word	0x000002dc
    2fec:	000002e4 	.word	0x000002e4
    2ff0:	00510001 	.word	0x00510001
    2ff4:	00000000 	.word	0x00000000
    2ff8:	de000000 	.word	0xde000000
    2ffc:	e4000002 	.word	0xe4000002
    3000:	01000002 	.word	0x01000002
    3004:	02e45300 	.word	0x02e45300
    3008:	02e80000 	.word	0x02e80000
    300c:	00010000 	.word	0x00010000
    3010:	00000051 	.word	0x00000051
    3014:	00000000 	.word	0x00000000
    3018:	00030400 	.word	0x00030400
    301c:	00030e00 	.word	0x00030e00
    3020:	50000100 	.word	0x50000100
	...
    302c:	00000310 	.word	0x00000310
    3030:	00000314 	.word	0x00000314
    3034:	00510001 	.word	0x00510001
    3038:	00000000 	.word	0x00000000
    303c:	18000000 	.word	0x18000000
    3040:	24000003 	.word	0x24000003
    3044:	01000003 	.word	0x01000003
    3048:	03265000 	.word	0x03265000
    304c:	03300000 	.word	0x03300000
    3050:	00010000 	.word	0x00010000
    3054:	00000050 	.word	0x00000050
    3058:	00000000 	.word	0x00000000
    305c:	00031800 	.word	0x00031800
    3060:	00032800 	.word	0x00032800
    3064:	51000100 	.word	0x51000100
    3068:	00000328 	.word	0x00000328
    306c:	00000332 	.word	0x00000332
    3070:	00530001 	.word	0x00530001
    3074:	00000000 	.word	0x00000000
    3078:	24000000 	.word	0x24000000
    307c:	26000003 	.word	0x26000003
    3080:	01000003 	.word	0x01000003
    3084:	03305000 	.word	0x03305000
    3088:	03300000 	.word	0x03300000
    308c:	00010000 	.word	0x00010000
    3090:	00000050 	.word	0x00000050
    3094:	00000000 	.word	0x00000000
    3098:	00033400 	.word	0x00033400
    309c:	00033800 	.word	0x00033800
    30a0:	51000100 	.word	0x51000100
	...
    30ac:	0000033c 	.word	0x0000033c
    30b0:	0000033e 	.word	0x0000033e
    30b4:	3e5d0001 	.word	0x3e5d0001
    30b8:	42000003 	.word	0x42000003
    30bc:	02000003 	.word	0x02000003
    30c0:	42047d00 	.word	0x42047d00
    30c4:	94000003 	.word	0x94000003
    30c8:	02000003 	.word	0x02000003
    30cc:	00107d00 	.word	0x00107d00
    30d0:	00000000 	.word	0x00000000
    30d4:	3c000000 	.word	0x3c000000
    30d8:	44000003 	.word	0x44000003
    30dc:	01000003 	.word	0x01000003
    30e0:	03465000 	.word	0x03465000
    30e4:	03940000 	.word	0x03940000
    30e8:	00020000 	.word	0x00020000
    30ec:	0000047d 	.word	0x0000047d
	...
    30f8:	000e0000 	.word	0x000e0000
    30fc:	00010000 	.word	0x00010000
    3100:	00000050 	.word	0x00000050
    3104:	00000000 	.word	0x00000000
    3108:	00001800 	.word	0x00001800
    310c:	00002600 	.word	0x00002600
    3110:	50000100 	.word	0x50000100
	...
    311c:	00000030 	.word	0x00000030
    3120:	0000003e 	.word	0x0000003e
    3124:	00500001 	.word	0x00500001
    3128:	00000000 	.word	0x00000000
    312c:	c4000000 	.word	0xc4000000
    3130:	d0000000 	.word	0xd0000000
    3134:	01000000 	.word	0x01000000
    3138:	00d25000 	.word	0x00d25000
    313c:	00de0000 	.word	0x00de0000
    3140:	00010000 	.word	0x00010000
    3144:	00000050 	.word	0x00000050
    3148:	00000000 	.word	0x00000000
    314c:	0000d000 	.word	0x0000d000
    3150:	0000d200 	.word	0x0000d200
    3154:	50000100 	.word	0x50000100
    3158:	000000de 	.word	0x000000de
    315c:	000000de 	.word	0x000000de
    3160:	00500001 	.word	0x00500001
    3164:	00000000 	.word	0x00000000
    3168:	fc000000 	.word	0xfc000000
    316c:	fe000000 	.word	0xfe000000
    3170:	01000000 	.word	0x01000000
    3174:	01085000 	.word	0x01085000
    3178:	010a0000 	.word	0x010a0000
    317c:	00010000 	.word	0x00010000
    3180:	00011650 	.word	0x00011650
    3184:	00011600 	.word	0x00011600
    3188:	50000100 	.word	0x50000100
	...
    3194:	0000011c 	.word	0x0000011c
    3198:	0000011e 	.word	0x0000011e
    319c:	1e5d0001 	.word	0x1e5d0001
    31a0:	22000001 	.word	0x22000001
    31a4:	02000001 	.word	0x02000001
    31a8:	22087d00 	.word	0x22087d00
    31ac:	b0000001 	.word	0xb0000001
    31b0:	02000001 	.word	0x02000001
    31b4:	00107d00 	.word	0x00107d00
    31b8:	00000000 	.word	0x00000000
    31bc:	1c000000 	.word	0x1c000000
    31c0:	2c000001 	.word	0x2c000001
    31c4:	01000001 	.word	0x01000001
    31c8:	012c5000 	.word	0x012c5000
    31cc:	01b00000 	.word	0x01b00000
    31d0:	00010000 	.word	0x00010000
    31d4:	00000051 	.word	0x00000051
    31d8:	00000000 	.word	0x00000000
    31dc:	00012e00 	.word	0x00012e00
    31e0:	00013000 	.word	0x00013000
    31e4:	50000100 	.word	0x50000100
    31e8:	0000013a 	.word	0x0000013a
    31ec:	0000013c 	.word	0x0000013c
    31f0:	48500001 	.word	0x48500001
    31f4:	a8000001 	.word	0xa8000001
    31f8:	01000001 	.word	0x01000001
    31fc:	00005000 	.word	0x00005000
    3200:	00000000 	.word	0x00000000
    3204:	014a0000 	.word	0x014a0000
    3208:	014c0000 	.word	0x014c0000
    320c:	00020000 	.word	0x00020000
    3210:	014c7c91 	.word	0x014c7c91
    3214:	01520000 	.word	0x01520000
    3218:	00020000 	.word	0x00020000
    321c:	0152047d 	.word	0x0152047d
    3220:	01580000 	.word	0x01580000
    3224:	00020000 	.word	0x00020000
    3228:	01587c91 	.word	0x01587c91
    322c:	015e0000 	.word	0x015e0000
    3230:	00020000 	.word	0x00020000
    3234:	015e047d 	.word	0x015e047d
    3238:	01860000 	.word	0x01860000
    323c:	00020000 	.word	0x00020000
    3240:	018e7c91 	.word	0x018e7c91
    3244:	01b00000 	.word	0x01b00000
    3248:	00020000 	.word	0x00020000
    324c:	00007c91 	.word	0x00007c91
    3250:	00000000 	.word	0x00000000
    3254:	01b00000 	.word	0x01b00000
    3258:	01b20000 	.word	0x01b20000
    325c:	00010000 	.word	0x00010000
    3260:	0001b25d 	.word	0x0001b25d
    3264:	0001b800 	.word	0x0001b800
    3268:	7d000200 	.word	0x7d000200
    326c:	0001b814 	.word	0x0001b814
    3270:	00020c00 	.word	0x00020c00
    3274:	7d000200 	.word	0x7d000200
    3278:	00000018 	.word	0x00000018
    327c:	00000000 	.word	0x00000000
    3280:	0001b000 	.word	0x0001b000
    3284:	0001c400 	.word	0x0001c400
    3288:	50000100 	.word	0x50000100
    328c:	000001c4 	.word	0x000001c4
    3290:	0000020c 	.word	0x0000020c
    3294:	00550001 	.word	0x00550001
    3298:	00000000 	.word	0x00000000
    329c:	b0000000 	.word	0xb0000000
    32a0:	cc000001 	.word	0xcc000001
    32a4:	01000001 	.word	0x01000001
    32a8:	01cc5100 	.word	0x01cc5100
    32ac:	020c0000 	.word	0x020c0000
    32b0:	00010000 	.word	0x00010000
    32b4:	00000056 	.word	0x00000056
    32b8:	00000000 	.word	0x00000000
    32bc:	0001b000 	.word	0x0001b000
    32c0:	0001cc00 	.word	0x0001cc00
    32c4:	52000100 	.word	0x52000100
    32c8:	000001cc 	.word	0x000001cc
    32cc:	0000020c 	.word	0x0000020c
    32d0:	00570001 	.word	0x00570001
    32d4:	00000000 	.word	0x00000000
    32d8:	ce000000 	.word	0xce000000
    32dc:	ea000001 	.word	0xea000001
    32e0:	01000001 	.word	0x01000001
    32e4:	01f05000 	.word	0x01f05000
    32e8:	01fc0000 	.word	0x01fc0000
    32ec:	00010000 	.word	0x00010000
    32f0:	00000050 	.word	0x00000050
    32f4:	00000000 	.word	0x00000000
    32f8:	00020c00 	.word	0x00020c00
    32fc:	00020e00 	.word	0x00020e00
    3300:	5d000100 	.word	0x5d000100
    3304:	0000020e 	.word	0x0000020e
    3308:	00000212 	.word	0x00000212
    330c:	0c7d0002 	.word	0x0c7d0002
    3310:	00000212 	.word	0x00000212
    3314:	000002a8 	.word	0x000002a8
    3318:	107d0002 	.word	0x107d0002
	...
    3324:	0000020c 	.word	0x0000020c
    3328:	00000216 	.word	0x00000216
    332c:	16500001 	.word	0x16500001
    3330:	a8000002 	.word	0xa8000002
    3334:	01000002 	.word	0x01000002
    3338:	00005500 	.word	0x00005500
    333c:	00000000 	.word	0x00000000
    3340:	021c0000 	.word	0x021c0000
    3344:	02260000 	.word	0x02260000
    3348:	00010000 	.word	0x00010000
    334c:	00024650 	.word	0x00024650
    3350:	00027200 	.word	0x00027200
    3354:	50000100 	.word	0x50000100
    3358:	00000278 	.word	0x00000278
    335c:	00000298 	.word	0x00000298
    3360:	00500001 	.word	0x00500001
    3364:	00000000 	.word	0x00000000
    3368:	a8000000 	.word	0xa8000000
    336c:	aa000002 	.word	0xaa000002
    3370:	01000002 	.word	0x01000002
    3374:	02aa5d00 	.word	0x02aa5d00
    3378:	03680000 	.word	0x03680000
    337c:	00020000 	.word	0x00020000
    3380:	0000087d 	.word	0x0000087d
    3384:	00000000 	.word	0x00000000
    3388:	02a80000 	.word	0x02a80000
    338c:	02ae0000 	.word	0x02ae0000
    3390:	00010000 	.word	0x00010000
    3394:	0002ae50 	.word	0x0002ae50
    3398:	00036800 	.word	0x00036800
    339c:	54000100 	.word	0x54000100
	...
    33a8:	000002ca 	.word	0x000002ca
    33ac:	000002de 	.word	0x000002de
    33b0:	de510001 	.word	0xde510001
    33b4:	02000002 	.word	0x02000002
    33b8:	01000003 	.word	0x01000003
    33bc:	03025100 	.word	0x03025100
    33c0:	03260000 	.word	0x03260000
    33c4:	00010000 	.word	0x00010000
    33c8:	00032651 	.word	0x00032651
    33cc:	00034600 	.word	0x00034600
    33d0:	51000100 	.word	0x51000100
    33d4:	00000346 	.word	0x00000346
    33d8:	0000034c 	.word	0x0000034c
    33dc:	00510001 	.word	0x00510001
    33e0:	00000000 	.word	0x00000000
    33e4:	e4000000 	.word	0xe4000000
    33e8:	02000002 	.word	0x02000002
    33ec:	01000003 	.word	0x01000003
    33f0:	03025200 	.word	0x03025200
    33f4:	03080000 	.word	0x03080000
    33f8:	00010000 	.word	0x00010000
    33fc:	00000052 	.word	0x00000052
    3400:	00000000 	.word	0x00000000
    3404:	00030800 	.word	0x00030800
    3408:	00032600 	.word	0x00032600
    340c:	52000100 	.word	0x52000100
    3410:	00000326 	.word	0x00000326
    3414:	00000328 	.word	0x00000328
    3418:	00520001 	.word	0x00520001
    341c:	00000000 	.word	0x00000000
    3420:	28000000 	.word	0x28000000
    3424:	46000003 	.word	0x46000003
    3428:	01000003 	.word	0x01000003
    342c:	03465200 	.word	0x03465200
    3430:	03520000 	.word	0x03520000
    3434:	00010000 	.word	0x00010000
    3438:	00000052 	.word	0x00000052
    343c:	00000000 	.word	0x00000000
    3440:	0002b400 	.word	0x0002b400
    3444:	0002d800 	.word	0x0002d800
    3448:	50000100 	.word	0x50000100
    344c:	000002de 	.word	0x000002de
    3450:	000002fc 	.word	0x000002fc
    3454:	02500001 	.word	0x02500001
    3458:	20000003 	.word	0x20000003
    345c:	01000003 	.word	0x01000003
    3460:	03265000 	.word	0x03265000
    3464:	03400000 	.word	0x03400000
    3468:	00010000 	.word	0x00010000
    346c:	00034650 	.word	0x00034650
    3470:	00035800 	.word	0x00035800
    3474:	50000100 	.word	0x50000100
	...
    3480:	00000368 	.word	0x00000368
    3484:	0000036a 	.word	0x0000036a
    3488:	6a5d0001 	.word	0x6a5d0001
    348c:	ac000003 	.word	0xac000003
    3490:	02000003 	.word	0x02000003
    3494:	00107d00 	.word	0x00107d00
    3498:	00000000 	.word	0x00000000
    349c:	68000000 	.word	0x68000000
    34a0:	6e000003 	.word	0x6e000003
    34a4:	01000003 	.word	0x01000003
    34a8:	036e5000 	.word	0x036e5000
    34ac:	03ac0000 	.word	0x03ac0000
    34b0:	00010000 	.word	0x00010000
    34b4:	00000056 	.word	0x00000056
    34b8:	00000000 	.word	0x00000000
    34bc:	00036800 	.word	0x00036800
    34c0:	00037400 	.word	0x00037400
    34c4:	51000100 	.word	0x51000100
    34c8:	00000374 	.word	0x00000374
    34cc:	000003ac 	.word	0x000003ac
    34d0:	00550001 	.word	0x00550001
    34d4:	00000000 	.word	0x00000000
    34d8:	76000000 	.word	0x76000000
    34dc:	7e000003 	.word	0x7e000003
    34e0:	01000003 	.word	0x01000003
    34e4:	03965000 	.word	0x03965000
    34e8:	03a20000 	.word	0x03a20000
    34ec:	00010000 	.word	0x00010000
    34f0:	00000050 	.word	0x00000050
    34f4:	00000000 	.word	0x00000000
    34f8:	0003ac00 	.word	0x0003ac00
    34fc:	0003ae00 	.word	0x0003ae00
    3500:	5d000100 	.word	0x5d000100
    3504:	000003ae 	.word	0x000003ae
    3508:	000003e4 	.word	0x000003e4
    350c:	107d0002 	.word	0x107d0002
	...
    3518:	000003ac 	.word	0x000003ac
    351c:	000003b2 	.word	0x000003b2
    3520:	b2500001 	.word	0xb2500001
    3524:	e4000003 	.word	0xe4000003
    3528:	01000003 	.word	0x01000003
    352c:	00005600 	.word	0x00005600
    3530:	00000000 	.word	0x00000000
    3534:	03ac0000 	.word	0x03ac0000
    3538:	03b80000 	.word	0x03b80000
    353c:	00010000 	.word	0x00010000
    3540:	0003b851 	.word	0x0003b851
    3544:	0003e400 	.word	0x0003e400
    3548:	55000100 	.word	0x55000100
	...
    3554:	000003ba 	.word	0x000003ba
    3558:	000003c0 	.word	0x000003c0
    355c:	d0500001 	.word	0xd0500001
    3560:	dc000003 	.word	0xdc000003
    3564:	01000003 	.word	0x01000003
    3568:	00005000 	.word	0x00005000
    356c:	00000000 	.word	0x00000000
    3570:	03e40000 	.word	0x03e40000
    3574:	03e60000 	.word	0x03e60000
    3578:	00010000 	.word	0x00010000
    357c:	0003e65d 	.word	0x0003e65d
    3580:	00042c00 	.word	0x00042c00
    3584:	7d000200 	.word	0x7d000200
    3588:	00000010 	.word	0x00000010
    358c:	00000000 	.word	0x00000000
    3590:	0003e400 	.word	0x0003e400
    3594:	0003ea00 	.word	0x0003ea00
    3598:	50000100 	.word	0x50000100
    359c:	000003ea 	.word	0x000003ea
    35a0:	0000042c 	.word	0x0000042c
    35a4:	00560001 	.word	0x00560001
    35a8:	00000000 	.word	0x00000000
    35ac:	e4000000 	.word	0xe4000000
    35b0:	f0000003 	.word	0xf0000003
    35b4:	01000003 	.word	0x01000003
    35b8:	03f05100 	.word	0x03f05100
    35bc:	042c0000 	.word	0x042c0000
    35c0:	00010000 	.word	0x00010000
    35c4:	00000055 	.word	0x00000055
    35c8:	00000000 	.word	0x00000000
    35cc:	0003f200 	.word	0x0003f200
    35d0:	0003f800 	.word	0x0003f800
    35d4:	50000100 	.word	0x50000100
    35d8:	0000040a 	.word	0x0000040a
    35dc:	00000412 	.word	0x00000412
    35e0:	16500001 	.word	0x16500001
    35e4:	24000004 	.word	0x24000004
    35e8:	01000004 	.word	0x01000004
    35ec:	00005000 	.word	0x00005000
    35f0:	00000000 	.word	0x00000000
    35f4:	042c0000 	.word	0x042c0000
    35f8:	042e0000 	.word	0x042e0000
    35fc:	00010000 	.word	0x00010000
    3600:	00042e5d 	.word	0x00042e5d
    3604:	0004a400 	.word	0x0004a400
    3608:	7d000200 	.word	0x7d000200
    360c:	00000008 	.word	0x00000008
    3610:	00000000 	.word	0x00000000
    3614:	00043800 	.word	0x00043800
    3618:	00044200 	.word	0x00044200
    361c:	50000100 	.word	0x50000100
    3620:	00000462 	.word	0x00000462
    3624:	00000480 	.word	0x00000480
    3628:	86500001 	.word	0x86500001
    362c:	94000004 	.word	0x94000004
    3630:	01000004 	.word	0x01000004
    3634:	00005000 	.word	0x00005000
    3638:	00000000 	.word	0x00000000
    363c:	04a40000 	.word	0x04a40000
    3640:	04a60000 	.word	0x04a60000
    3644:	00010000 	.word	0x00010000
    3648:	0004a65d 	.word	0x0004a65d
    364c:	0004e000 	.word	0x0004e000
    3650:	7d000200 	.word	0x7d000200
    3654:	00000008 	.word	0x00000008
    3658:	00000000 	.word	0x00000000
    365c:	0004b000 	.word	0x0004b000
    3660:	0004c000 	.word	0x0004c000
    3664:	50000100 	.word	0x50000100
    3668:	000004ce 	.word	0x000004ce
    366c:	000004da 	.word	0x000004da
    3670:	00500001 	.word	0x00500001
    3674:	00000000 	.word	0x00000000
    3678:	e0000000 	.word	0xe0000000
    367c:	e2000004 	.word	0xe2000004
    3680:	01000004 	.word	0x01000004
    3684:	04e25d00 	.word	0x04e25d00
    3688:	04e60000 	.word	0x04e60000
    368c:	00020000 	.word	0x00020000
    3690:	04e60c7d 	.word	0x04e60c7d
    3694:	05280000 	.word	0x05280000
    3698:	00020000 	.word	0x00020000
    369c:	0000107d 	.word	0x0000107d
    36a0:	00000000 	.word	0x00000000
    36a4:	04e00000 	.word	0x04e00000
    36a8:	04ea0000 	.word	0x04ea0000
    36ac:	00010000 	.word	0x00010000
    36b0:	0004ea50 	.word	0x0004ea50
    36b4:	00052800 	.word	0x00052800
    36b8:	55000100 	.word	0x55000100
	...
    36c4:	000004f0 	.word	0x000004f0
    36c8:	000004f8 	.word	0x000004f8
    36cc:	12500001 	.word	0x12500001
    36d0:	1e000005 	.word	0x1e000005
    36d4:	01000005 	.word	0x01000005
    36d8:	00005000 	.word	0x00005000
	...
    36e4:	00020000 	.word	0x00020000
    36e8:	00010000 	.word	0x00010000
    36ec:	0000025d 	.word	0x0000025d
    36f0:	00001c00 	.word	0x00001c00
    36f4:	7d000200 	.word	0x7d000200
    36f8:	00001c14 	.word	0x00001c14
    36fc:	0000a600 	.word	0x0000a600
    3700:	7d000200 	.word	0x7d000200
    3704:	00000020 	.word	0x00000020
	...
    3710:	00002200 	.word	0x00002200
    3714:	51000100 	.word	0x51000100
    3718:	0000005c 	.word	0x0000005c
    371c:	00000064 	.word	0x00000064
    3720:	a2510001 	.word	0xa2510001
    3724:	a6000000 	.word	0xa6000000
    3728:	01000000 	.word	0x01000000
    372c:	00005100 	.word	0x00005100
    3730:	00000000 	.word	0x00000000
    3734:	00220000 	.word	0x00220000
    3738:	00340000 	.word	0x00340000
    373c:	00010000 	.word	0x00010000
    3740:	00005453 	.word	0x00005453
    3744:	00006a00 	.word	0x00006a00
    3748:	53000100 	.word	0x53000100
    374c:	0000006e 	.word	0x0000006e
    3750:	0000007a 	.word	0x0000007a
    3754:	9a530001 	.word	0x9a530001
    3758:	a6000000 	.word	0xa6000000
    375c:	01000000 	.word	0x01000000
    3760:	00005300 	.word	0x00005300
    3764:	00000000 	.word	0x00000000
    3768:	00b80000 	.word	0x00b80000
    376c:	00c20000 	.word	0x00c20000
    3770:	00010000 	.word	0x00010000
    3774:	00000050 	.word	0x00000050
    3778:	00000000 	.word	0x00000000
    377c:	0000c400 	.word	0x0000c400
    3780:	0000c600 	.word	0x0000c600
    3784:	50000100 	.word	0x50000100
	...
    3790:	000000cc 	.word	0x000000cc
    3794:	000000d6 	.word	0x000000d6
    3798:	00500001 	.word	0x00500001
    379c:	00000000 	.word	0x00000000
    37a0:	d8000000 	.word	0xd8000000
    37a4:	da000000 	.word	0xda000000
    37a8:	01000000 	.word	0x01000000
    37ac:	00005000 	.word	0x00005000
    37b0:	00000000 	.word	0x00000000
    37b4:	01080000 	.word	0x01080000
    37b8:	01180000 	.word	0x01180000
    37bc:	00010000 	.word	0x00010000
    37c0:	00000051 	.word	0x00000051
    37c4:	00000000 	.word	0x00000000
    37c8:	00011000 	.word	0x00011000
    37cc:	00011400 	.word	0x00011400
    37d0:	53000100 	.word	0x53000100
    37d4:	00000114 	.word	0x00000114
    37d8:	00000118 	.word	0x00000118
    37dc:	18520001 	.word	0x18520001
    37e0:	1c000001 	.word	0x1c000001
    37e4:	01000001 	.word	0x01000001
    37e8:	011c5100 	.word	0x011c5100
    37ec:	011e0000 	.word	0x011e0000
    37f0:	00010000 	.word	0x00010000
    37f4:	00011e53 	.word	0x00011e53
    37f8:	00012800 	.word	0x00012800
    37fc:	51000100 	.word	0x51000100
	...
    3808:	00000134 	.word	0x00000134
    380c:	00000136 	.word	0x00000136
    3810:	365d0001 	.word	0x365d0001
    3814:	94000001 	.word	0x94000001
    3818:	02000001 	.word	0x02000001
    381c:	000c7d00 	.word	0x000c7d00
    3820:	00000000 	.word	0x00000000
    3824:	34000000 	.word	0x34000000
    3828:	40000001 	.word	0x40000001
    382c:	01000001 	.word	0x01000001
    3830:	01405100 	.word	0x01405100
    3834:	01940000 	.word	0x01940000
    3838:	00010000 	.word	0x00010000
    383c:	00000055 	.word	0x00000055
    3840:	00000000 	.word	0x00000000
    3844:	00014a00 	.word	0x00014a00
    3848:	00015200 	.word	0x00015200
    384c:	5c000100 	.word	0x5c000100
    3850:	00000152 	.word	0x00000152
    3854:	0000015a 	.word	0x0000015a
    3858:	5a520001 	.word	0x5a520001
    385c:	78000001 	.word	0x78000001
    3860:	01000001 	.word	0x01000001
    3864:	01785c00 	.word	0x01785c00
    3868:	017c0000 	.word	0x017c0000
    386c:	00010000 	.word	0x00010000
    3870:	00017c53 	.word	0x00017c53
    3874:	00019400 	.word	0x00019400
    3878:	52000100 	.word	0x52000100
	...
    3884:	00000194 	.word	0x00000194
    3888:	00000196 	.word	0x00000196
    388c:	965d0001 	.word	0x965d0001
    3890:	c8000001 	.word	0xc8000001
    3894:	02000001 	.word	0x02000001
    3898:	00087d00 	.word	0x00087d00
    389c:	00000000 	.word	0x00000000
    38a0:	94000000 	.word	0x94000000
    38a4:	a2000001 	.word	0xa2000001
    38a8:	01000001 	.word	0x01000001
    38ac:	00005000 	.word	0x00005000
    38b0:	00000000 	.word	0x00000000
    38b4:	01940000 	.word	0x01940000
    38b8:	01a80000 	.word	0x01a80000
    38bc:	00010000 	.word	0x00010000
    38c0:	00000051 	.word	0x00000051
    38c4:	00000000 	.word	0x00000000
    38c8:	0001c800 	.word	0x0001c800
    38cc:	0001ca00 	.word	0x0001ca00
    38d0:	5d000100 	.word	0x5d000100
    38d4:	000001ca 	.word	0x000001ca
    38d8:	000001d0 	.word	0x000001d0
    38dc:	047d0002 	.word	0x047d0002
    38e0:	000001d0 	.word	0x000001d0
    38e4:	000001e0 	.word	0x000001e0
    38e8:	087d0002 	.word	0x087d0002
	...
    38f4:	000001e0 	.word	0x000001e0
    38f8:	000001e2 	.word	0x000001e2
    38fc:	e25d0001 	.word	0xe25d0001
    3900:	e6000001 	.word	0xe6000001
    3904:	02000001 	.word	0x02000001
    3908:	e6047d00 	.word	0xe6047d00
    390c:	88000001 	.word	0x88000001
    3910:	02000002 	.word	0x02000002
    3914:	00107d00 	.word	0x00107d00
    3918:	00000000 	.word	0x00000000
    391c:	e0000000 	.word	0xe0000000
    3920:	e8000001 	.word	0xe8000001
    3924:	01000001 	.word	0x01000001
    3928:	01ea5000 	.word	0x01ea5000
    392c:	02880000 	.word	0x02880000
    3930:	00020000 	.word	0x00020000
    3934:	0000047d 	.word	0x0000047d
    3938:	00000000 	.word	0x00000000
    393c:	0000      	.short	0x0000
    393e:	0064      	.short	0x0064
    3940:	00680000 	.word	0x00680000
    3944:	00010000 	.word	0x00010000
    3948:	00000050 	.word	0x00000050
    394c:	00000000 	.word	0x00000000
    3950:	00007800 	.word	0x00007800
    3954:	00007a00 	.word	0x00007a00
    3958:	5d000100 	.word	0x5d000100
    395c:	0000007a 	.word	0x0000007a
    3960:	000000f4 	.word	0x000000f4
    3964:	0c7d0002 	.word	0x0c7d0002
	...
    3970:	00000078 	.word	0x00000078
    3974:	000000a2 	.word	0x000000a2
    3978:	d8500001 	.word	0xd8500001
    397c:	f4000000 	.word	0xf4000000
    3980:	01000000 	.word	0x01000000
    3984:	00005000 	.word	0x00005000
    3988:	00000000 	.word	0x00000000
    398c:	00920000 	.word	0x00920000
    3990:	00980000 	.word	0x00980000
    3994:	00010000 	.word	0x00010000
    3998:	00009852 	.word	0x00009852
    399c:	0000a600 	.word	0x0000a600
    39a0:	51000100 	.word	0x51000100
    39a4:	000000a6 	.word	0x000000a6
    39a8:	000000be 	.word	0x000000be
    39ac:	00530001 	.word	0x00530001
    39b0:	00000000 	.word	0x00000000
    39b4:	bc000000 	.word	0xbc000000
    39b8:	c4000000 	.word	0xc4000000
    39bc:	01000000 	.word	0x01000000
    39c0:	00c45100 	.word	0x00c45100
    39c4:	00ce0000 	.word	0x00ce0000
    39c8:	00010000 	.word	0x00010000
    39cc:	00000053 	.word	0x00000053
    39d0:	00000000 	.word	0x00000000
    39d4:	0000ae00 	.word	0x0000ae00
    39d8:	0000cc00 	.word	0x0000cc00
    39dc:	52000100 	.word	0x52000100
	...
    39e8:	00000118 	.word	0x00000118
    39ec:	00000122 	.word	0x00000122
    39f0:	00500001 	.word	0x00500001
    39f4:	00000000 	.word	0x00000000
    39f8:	48000000 	.word	0x48000000
    39fc:	50000001 	.word	0x50000001
    3a00:	01000001 	.word	0x01000001
    3a04:	00005000 	.word	0x00005000
    3a08:	00000000 	.word	0x00000000
    3a0c:	01700000 	.word	0x01700000
    3a10:	017a0000 	.word	0x017a0000
    3a14:	00010000 	.word	0x00010000
    3a18:	00000050 	.word	0x00000050
    3a1c:	00000000 	.word	0x00000000
    3a20:	0001a000 	.word	0x0001a000
    3a24:	0001a400 	.word	0x0001a400
    3a28:	51000100 	.word	0x51000100
	...
    3a34:	000001f0 	.word	0x000001f0
    3a38:	000001f4 	.word	0x000001f4
    3a3c:	00500001 	.word	0x00500001
    3a40:	00000000 	.word	0x00000000
    3a44:	18000000 	.word	0x18000000
    3a48:	1a000002 	.word	0x1a000002
    3a4c:	01000002 	.word	0x01000002
    3a50:	021a5d00 	.word	0x021a5d00
    3a54:	02700000 	.word	0x02700000
    3a58:	00020000 	.word	0x00020000
    3a5c:	0000087d 	.word	0x0000087d
    3a60:	00000000 	.word	0x00000000
    3a64:	02180000 	.word	0x02180000
    3a68:	02420000 	.word	0x02420000
    3a6c:	00010000 	.word	0x00010000
    3a70:	00000050 	.word	0x00000050
    3a74:	00000000 	.word	0x00000000
    3a78:	00021800 	.word	0x00021800
    3a7c:	00023000 	.word	0x00023000
    3a80:	51000100 	.word	0x51000100
	...
    3a8c:	00000218 	.word	0x00000218
    3a90:	0000023a 	.word	0x0000023a
    3a94:	00520001 	.word	0x00520001
    3a98:	00000000 	.word	0x00000000
    3a9c:	40000000 	.word	0x40000000
    3aa0:	52000002 	.word	0x52000002
    3aa4:	01000002 	.word	0x01000002
    3aa8:	00005100 	.word	0x00005100
    3aac:	00000000 	.word	0x00000000
    3ab0:	02280000 	.word	0x02280000
    3ab4:	02300000 	.word	0x02300000
    3ab8:	00010000 	.word	0x00010000
    3abc:	00023053 	.word	0x00023053
    3ac0:	00023c00 	.word	0x00023c00
    3ac4:	51000100 	.word	0x51000100
    3ac8:	0000023c 	.word	0x0000023c
    3acc:	0000024e 	.word	0x0000024e
    3ad0:	00520001 	.word	0x00520001
    3ad4:	00000000 	.word	0x00000000
    3ad8:	70000000 	.word	0x70000000
    3adc:	72000002 	.word	0x72000002
    3ae0:	01000002 	.word	0x01000002
    3ae4:	00005000 	.word	0x00005000
    3ae8:	00000000 	.word	0x00000000
    3aec:	02720000 	.word	0x02720000
    3af0:	02760000 	.word	0x02760000
    3af4:	00010000 	.word	0x00010000
    3af8:	00027a50 	.word	0x00027a50
    3afc:	00029000 	.word	0x00029000
    3b00:	53000100 	.word	0x53000100
	...
    3b0c:	00000290 	.word	0x00000290
    3b10:	00000294 	.word	0x00000294
    3b14:	00500001 	.word	0x00500001
    3b18:	00000000 	.word	0x00000000
    3b1c:	a8000000 	.word	0xa8000000
    3b20:	ac000002 	.word	0xac000002
    3b24:	01000002 	.word	0x01000002
    3b28:	00005000 	.word	0x00005000
    3b2c:	00000000 	.word	0x00000000
    3b30:	02c00000 	.word	0x02c00000
    3b34:	02c20000 	.word	0x02c20000
    3b38:	00010000 	.word	0x00010000
    3b3c:	00000050 	.word	0x00000050
    3b40:	00000000 	.word	0x00000000
    3b44:	0002e000 	.word	0x0002e000
    3b48:	0002ec00 	.word	0x0002ec00
    3b4c:	50000100 	.word	0x50000100
    3b50:	000002ee 	.word	0x000002ee
    3b54:	0000030c 	.word	0x0000030c
    3b58:	1a500001 	.word	0x1a500001
    3b5c:	1e000003 	.word	0x1e000003
    3b60:	01000003 	.word	0x01000003
    3b64:	00005000 	.word	0x00005000
    3b68:	00000000 	.word	0x00000000
    3b6c:	02ec0000 	.word	0x02ec0000
    3b70:	02ee0000 	.word	0x02ee0000
    3b74:	00010000 	.word	0x00010000
    3b78:	00030c50 	.word	0x00030c50
    3b7c:	00031a00 	.word	0x00031a00
    3b80:	50000100 	.word	0x50000100
    3b84:	0000031e 	.word	0x0000031e
    3b88:	0000031e 	.word	0x0000031e
    3b8c:	00500001 	.word	0x00500001
    3b90:	00000000 	.word	0x00000000
    3b94:	e6000000 	.word	0xe6000000
    3b98:	ea000002 	.word	0xea000002
    3b9c:	01000002 	.word	0x01000002
    3ba0:	02ee5300 	.word	0x02ee5300
    3ba4:	02f60000 	.word	0x02f60000
    3ba8:	00010000 	.word	0x00010000
    3bac:	00031a53 	.word	0x00031a53
    3bb0:	00031c00 	.word	0x00031c00
    3bb4:	53000100 	.word	0x53000100
	...
    3bc0:	00000304 	.word	0x00000304
    3bc4:	0000031a 	.word	0x0000031a
    3bc8:	1e520001 	.word	0x1e520001
    3bcc:	24000003 	.word	0x24000003
    3bd0:	01000003 	.word	0x01000003
    3bd4:	00005200 	.word	0x00005200
    3bd8:	00000000 	.word	0x00000000
    3bdc:	03240000 	.word	0x03240000
    3be0:	03300000 	.word	0x03300000
    3be4:	00010000 	.word	0x00010000
    3be8:	00000050 	.word	0x00000050
    3bec:	00000000 	.word	0x00000000
    3bf0:	00033000 	.word	0x00033000
    3bf4:	00033200 	.word	0x00033200
    3bf8:	50000100 	.word	0x50000100
	...
    3c04:	00000338 	.word	0x00000338
    3c08:	0000033a 	.word	0x0000033a
    3c0c:	3a5d0001 	.word	0x3a5d0001
    3c10:	3c000003 	.word	0x3c000003
    3c14:	02000003 	.word	0x02000003
    3c18:	3c047d00 	.word	0x3c047d00
    3c1c:	44000003 	.word	0x44000003
    3c20:	02000003 	.word	0x02000003
    3c24:	00087d00 	.word	0x00087d00
    3c28:	00000000 	.word	0x00000000
    3c2c:	44000000 	.word	0x44000000
    3c30:	46000003 	.word	0x46000003
    3c34:	01000003 	.word	0x01000003
    3c38:	03465d00 	.word	0x03465d00
    3c3c:	034a0000 	.word	0x034a0000
    3c40:	00020000 	.word	0x00020000
    3c44:	034a047d 	.word	0x034a047d
    3c48:	03520000 	.word	0x03520000
    3c4c:	00020000 	.word	0x00020000
    3c50:	0000087d 	.word	0x0000087d
    3c54:	00000000 	.word	0x00000000
    3c58:	03440000 	.word	0x03440000
    3c5c:	03480000 	.word	0x03480000
    3c60:	00010000 	.word	0x00010000
    3c64:	00000050 	.word	0x00000050
    3c68:	00000000 	.word	0x00000000
    3c6c:	00035400 	.word	0x00035400
    3c70:	00035600 	.word	0x00035600
    3c74:	5d000100 	.word	0x5d000100
    3c78:	00000356 	.word	0x00000356
    3c7c:	00000358 	.word	0x00000358
    3c80:	047d0002 	.word	0x047d0002
    3c84:	00000358 	.word	0x00000358
    3c88:	00000360 	.word	0x00000360
    3c8c:	087d0002 	.word	0x087d0002
	...
    3c98:	00000360 	.word	0x00000360
    3c9c:	00000362 	.word	0x00000362
    3ca0:	625d0001 	.word	0x625d0001
    3ca4:	64000003 	.word	0x64000003
    3ca8:	02000003 	.word	0x02000003
    3cac:	64047d00 	.word	0x64047d00
    3cb0:	6c000003 	.word	0x6c000003
    3cb4:	02000003 	.word	0x02000003
    3cb8:	00087d00 	.word	0x00087d00
    3cbc:	00000000 	.word	0x00000000
    3cc0:	6c000000 	.word	0x6c000000
    3cc4:	6e000003 	.word	0x6e000003
    3cc8:	01000003 	.word	0x01000003
    3ccc:	036e5d00 	.word	0x036e5d00
    3cd0:	03700000 	.word	0x03700000
    3cd4:	00020000 	.word	0x00020000
    3cd8:	0370047d 	.word	0x0370047d
    3cdc:	03780000 	.word	0x03780000
    3ce0:	00020000 	.word	0x00020000
    3ce4:	0000087d 	.word	0x0000087d
    3ce8:	00000000 	.word	0x00000000
    3cec:	03780000 	.word	0x03780000
    3cf0:	037a0000 	.word	0x037a0000
    3cf4:	00010000 	.word	0x00010000
    3cf8:	00037a5d 	.word	0x00037a5d
    3cfc:	00037c00 	.word	0x00037c00
    3d00:	7d000200 	.word	0x7d000200
    3d04:	00037c04 	.word	0x00037c04
    3d08:	00038400 	.word	0x00038400
    3d0c:	7d000200 	.word	0x7d000200
    3d10:	00000008 	.word	0x00000008
    3d14:	00000000 	.word	0x00000000
    3d18:	00          	.byte	0x00
    3d19:	18          	.byte	0x18
    3d1a:	0000      	.short	0x0000
    3d1c:	00002200 	.word	0x00002200
    3d20:	50000100 	.word	0x50000100
	...
    3d2c:	0000001c 	.word	0x0000001c
    3d30:	00000022 	.word	0x00000022
    3d34:	22530001 	.word	0x22530001
    3d38:	2c000000 	.word	0x2c000000
    3d3c:	01000000 	.word	0x01000000
    3d40:	00005000 	.word	0x00005000
    3d44:	00000000 	.word	0x00000000
    3d48:	00380000 	.word	0x00380000
    3d4c:	00440000 	.word	0x00440000
    3d50:	00010000 	.word	0x00010000
    3d54:	00000050 	.word	0x00000050
    3d58:	00000000 	.word	0x00000000
    3d5c:	00005c00 	.word	0x00005c00
    3d60:	00006000 	.word	0x00006000
    3d64:	5d000100 	.word	0x5d000100
    3d68:	00000060 	.word	0x00000060
    3d6c:	00000064 	.word	0x00000064
    3d70:	047d0002 	.word	0x047d0002
    3d74:	00000064 	.word	0x00000064
    3d78:	00000090 	.word	0x00000090
    3d7c:	087d0002 	.word	0x087d0002
	...
    3d88:	00000090 	.word	0x00000090
    3d8c:	00000094 	.word	0x00000094
    3d90:	945d0001 	.word	0x945d0001
    3d94:	98000000 	.word	0x98000000
    3d98:	02000000 	.word	0x02000000
    3d9c:	98047d00 	.word	0x98047d00
    3da0:	c8000000 	.word	0xc8000000
    3da4:	02000000 	.word	0x02000000
    3da8:	00087d00 	.word	0x00087d00
    3dac:	00000000 	.word	0x00000000
    3db0:	90000000 	.word	0x90000000
    3db4:	9e000000 	.word	0x9e000000
    3db8:	01000000 	.word	0x01000000
    3dbc:	00005000 	.word	0x00005000
    3dc0:	00000000 	.word	0x00000000
    3dc4:	00900000 	.word	0x00900000
    3dc8:	00ba0000 	.word	0x00ba0000
    3dcc:	00010000 	.word	0x00010000
    3dd0:	0000bc51 	.word	0x0000bc51
    3dd4:	0000c000 	.word	0x0000c000
    3dd8:	51000100 	.word	0x51000100
	...
    3de4:	00000096 	.word	0x00000096
    3de8:	0000009e 	.word	0x0000009e
    3dec:	9e530001 	.word	0x9e530001
    3df0:	ba000000 	.word	0xba000000
    3df4:	01000000 	.word	0x01000000
    3df8:	00bc5000 	.word	0x00bc5000
    3dfc:	00c00000 	.word	0x00c00000
    3e00:	00010000 	.word	0x00010000
    3e04:	00000050 	.word	0x00000050
    3e08:	00000000 	.word	0x00000000
    3e0c:	0000c800 	.word	0x0000c800
    3e10:	0000ca00 	.word	0x0000ca00
    3e14:	5d000100 	.word	0x5d000100
    3e18:	000000ca 	.word	0x000000ca
    3e1c:	000000e0 	.word	0x000000e0
    3e20:	087d0002 	.word	0x087d0002
	...
    3e2c:	00000074 	.word	0x00000074
    3e30:	00000076 	.word	0x00000076
    3e34:	765d0001 	.word	0x765d0001
    3e38:	a4000000 	.word	0xa4000000
    3e3c:	02000000 	.word	0x02000000
    3e40:	00087d00 	.word	0x00087d00
    3e44:	00000000 	.word	0x00000000
    3e48:	7c000000 	.word	0x7c000000
    3e4c:	82000000 	.word	0x82000000
    3e50:	02000000 	.word	0x02000000
    3e54:	82047d00 	.word	0x82047d00
    3e58:	8a000000 	.word	0x8a000000
    3e5c:	01000000 	.word	0x01000000
    3e60:	008a5300 	.word	0x008a5300
    3e64:	00a40000 	.word	0x00a40000
    3e68:	00020000 	.word	0x00020000
    3e6c:	0000047d 	.word	0x0000047d
    3e70:	00000000 	.word	0x00000000
    3e74:	00960000 	.word	0x00960000
    3e78:	00980000 	.word	0x00980000
    3e7c:	00010000 	.word	0x00010000
    3e80:	00000050 	.word	0x00000050
    3e84:	00000000 	.word	0x00000000
    3e88:	0000c400 	.word	0x0000c400
    3e8c:	0000ce00 	.word	0x0000ce00
    3e90:	50000100 	.word	0x50000100
	...
    3e9c:	000000c8 	.word	0x000000c8
    3ea0:	000000cc 	.word	0x000000cc
    3ea4:	d0530001 	.word	0xd0530001
    3ea8:	d8000000 	.word	0xd8000000
    3eac:	01000000 	.word	0x01000000
    3eb0:	00005000 	.word	0x00005000
    3eb4:	00000000 	.word	0x00000000
    3eb8:	00e40000 	.word	0x00e40000
    3ebc:	00ee0000 	.word	0x00ee0000
    3ec0:	00010000 	.word	0x00010000
    3ec4:	00000050 	.word	0x00000050
    3ec8:	00000000 	.word	0x00000000
    3ecc:	0000e800 	.word	0x0000e800
    3ed0:	0000ee00 	.word	0x0000ee00
    3ed4:	53000100 	.word	0x53000100
    3ed8:	000000ee 	.word	0x000000ee
    3edc:	000000f8 	.word	0x000000f8
    3ee0:	00500001 	.word	0x00500001
    3ee4:	00000000 	.word	0x00000000
    3ee8:	08000000 	.word	0x08000000
    3eec:	12000001 	.word	0x12000001
    3ef0:	01000001 	.word	0x01000001
    3ef4:	00005000 	.word	0x00005000
    3ef8:	00000000 	.word	0x00000000
    3efc:	010c0000 	.word	0x010c0000
    3f00:	01120000 	.word	0x01120000
    3f04:	00010000 	.word	0x00010000
    3f08:	00011253 	.word	0x00011253
    3f0c:	00011c00 	.word	0x00011c00
    3f10:	50000100 	.word	0x50000100
	...
    3f1c:	0000011c 	.word	0x0000011c
    3f20:	00000126 	.word	0x00000126
    3f24:	00500001 	.word	0x00500001
    3f28:	00000000 	.word	0x00000000
    3f2c:	20000000 	.word	0x20000000
    3f30:	26000001 	.word	0x26000001
    3f34:	01000001 	.word	0x01000001
    3f38:	01265300 	.word	0x01265300
    3f3c:	01300000 	.word	0x01300000
    3f40:	00010000 	.word	0x00010000
    3f44:	00000050 	.word	0x00000050
    3f48:	00000000 	.word	0x00000000
    3f4c:	00016c00 	.word	0x00016c00
    3f50:	00017600 	.word	0x00017600
    3f54:	50000100 	.word	0x50000100
	...
    3f60:	00000170 	.word	0x00000170
    3f64:	00000176 	.word	0x00000176
    3f68:	76530001 	.word	0x76530001
    3f6c:	80000001 	.word	0x80000001
    3f70:	01000001 	.word	0x01000001
    3f74:	00005000 	.word	0x00005000
    3f78:	00000000 	.word	0x00000000
    3f7c:	01ac0000 	.word	0x01ac0000
    3f80:	01b20000 	.word	0x01b20000
    3f84:	00010000 	.word	0x00010000
    3f88:	00000050 	.word	0x00000050
    3f8c:	00000000 	.word	0x00000000
    3f90:	0001c800 	.word	0x0001c800
    3f94:	0001d600 	.word	0x0001d600
    3f98:	50000100 	.word	0x50000100
    3f9c:	000001d6 	.word	0x000001d6
    3fa0:	00000280 	.word	0x00000280
    3fa4:	005c0001 	.word	0x005c0001
    3fa8:	00000000 	.word	0x00000000
    3fac:	2a000000 	.word	0x2a000000
    3fb0:	2c000002 	.word	0x2c000002
    3fb4:	01000002 	.word	0x01000002
    3fb8:	023e5300 	.word	0x023e5300
    3fbc:	02400000 	.word	0x02400000
    3fc0:	00010000 	.word	0x00010000
    3fc4:	00025053 	.word	0x00025053
    3fc8:	00025200 	.word	0x00025200
    3fcc:	53000100 	.word	0x53000100
    3fd0:	00000262 	.word	0x00000262
    3fd4:	00000264 	.word	0x00000264
    3fd8:	00530001 	.word	0x00530001
    3fdc:	00000000 	.word	0x00000000
    3fe0:	e4000000 	.word	0xe4000000
    3fe4:	1a000001 	.word	0x1a000001
    3fe8:	01000002 	.word	0x01000002
    3fec:	021c5200 	.word	0x021c5200
    3ff0:	02260000 	.word	0x02260000
    3ff4:	00010000 	.word	0x00010000
    3ff8:	00000052 	.word	0x00000052
    3ffc:	00000000 	.word	0x00000000
    4000:	00033000 	.word	0x00033000
    4004:	00036600 	.word	0x00036600
    4008:	50000100 	.word	0x50000100
	...
    4014:	00000332 	.word	0x00000332
    4018:	0000033a 	.word	0x0000033a
    401c:	48530001 	.word	0x48530001
    4020:	50000003 	.word	0x50000003
    4024:	01000003 	.word	0x01000003
    4028:	035e5300 	.word	0x035e5300
    402c:	03600000 	.word	0x03600000
    4030:	00010000 	.word	0x00010000
    4034:	00000053 	.word	0x00000053
    4038:	00000000 	.word	0x00000000
    403c:	00034600 	.word	0x00034600
    4040:	00034800 	.word	0x00034800
    4044:	53000100 	.word	0x53000100
    4048:	0000035c 	.word	0x0000035c
    404c:	0000035e 	.word	0x0000035e
    4050:	62530001 	.word	0x62530001
    4054:	74000003 	.word	0x74000003
    4058:	01000003 	.word	0x01000003
    405c:	00005300 	.word	0x00005300
    4060:	00000000 	.word	0x00000000
    4064:	03840000 	.word	0x03840000
    4068:	03900000 	.word	0x03900000
    406c:	00010000 	.word	0x00010000
    4070:	00000050 	.word	0x00000050
    4074:	00000000 	.word	0x00000000
    4078:	00007c00 	.word	0x00007c00
    407c:	00008400 	.word	0x00008400
    4080:	50000100 	.word	0x50000100
    4084:	00000084 	.word	0x00000084
    4088:	000000a4 	.word	0x000000a4
    408c:	00520001 	.word	0x00520001
    4090:	00000000 	.word	0x00000000
    4094:	90000000 	.word	0x90000000
    4098:	92000000 	.word	0x92000000
    409c:	01000000 	.word	0x01000000
    40a0:	00965000 	.word	0x00965000
    40a4:	00980000 	.word	0x00980000
    40a8:	00010000 	.word	0x00010000
    40ac:	00000050 	.word	0x00000050
    40b0:	00000000 	.word	0x00000000
    40b4:	00002000 	.word	0x00002000
    40b8:	00003200 	.word	0x00003200
    40bc:	51000100 	.word	0x51000100
	...
    40c8:	00000074 	.word	0x00000074
    40cc:	00000082 	.word	0x00000082
    40d0:	825d0001 	.word	0x825d0001
    40d4:	b2000000 	.word	0xb2000000
    40d8:	02000000 	.word	0x02000000
    40dc:	00087d00 	.word	0x00087d00
    40e0:	00000000 	.word	0x00000000
    40e4:	74000000 	.word	0x74000000
    40e8:	8c000000 	.word	0x8c000000
    40ec:	01000000 	.word	0x01000000
    40f0:	00005000 	.word	0x00005000
    40f4:	00000000 	.word	0x00000000
    40f8:	00740000 	.word	0x00740000
    40fc:	00760000 	.word	0x00760000
    4100:	00010000 	.word	0x00010000
    4104:	00007651 	.word	0x00007651
    4108:	00008000 	.word	0x00008000
    410c:	53000100 	.word	0x53000100
	...
    4118:	00000090 	.word	0x00000090
    411c:	00000092 	.word	0x00000092
    4120:	9a500001 	.word	0x9a500001
    4124:	9c000000 	.word	0x9c000000
    4128:	01000000 	.word	0x01000000
    412c:	009e5000 	.word	0x009e5000
    4130:	00b20000 	.word	0x00b20000
    4134:	00010000 	.word	0x00010000
    4138:	00000050 	.word	0x00000050
    413c:	00000000 	.word	0x00000000
    4140:	0000e400 	.word	0x0000e400
    4144:	0000f600 	.word	0x0000f600
    4148:	51000100 	.word	0x51000100
	...
    4154:	00000118 	.word	0x00000118
    4158:	0000012a 	.word	0x0000012a
    415c:	00510001 	.word	0x00510001
    4160:	00000000 	.word	0x00000000
    4164:	4c000000 	.word	0x4c000000
    4168:	4e000001 	.word	0x4e000001
    416c:	01000001 	.word	0x01000001
    4170:	00005100 	.word	0x00005100
    4174:	00000000 	.word	0x00000000
    4178:	01540000 	.word	0x01540000
    417c:	01560000 	.word	0x01560000
    4180:	00010000 	.word	0x00010000
    4184:	00000050 	.word	0x00000050
    4188:	00000000 	.word	0x00000000
    418c:	0001e400 	.word	0x0001e400
    4190:	0001f600 	.word	0x0001f600
    4194:	51000100 	.word	0x51000100
	...
    41a0:	00000218 	.word	0x00000218
    41a4:	00000222 	.word	0x00000222
    41a8:	00500001 	.word	0x00500001
    41ac:	00000000 	.word	0x00000000
    41b0:	24000000 	.word	0x24000000
    41b4:	28000002 	.word	0x28000002
    41b8:	01000002 	.word	0x01000002
    41bc:	00005100 	.word	0x00005100
    41c0:	00000000 	.word	0x00000000
    41c4:	02300000 	.word	0x02300000
    41c8:	026c0000 	.word	0x026c0000
    41cc:	00010000 	.word	0x00010000
    41d0:	00000050 	.word	0x00000050
    41d4:	00000000 	.word	0x00000000
    41d8:	00023000 	.word	0x00023000
    41dc:	00023200 	.word	0x00023200
    41e0:	51000100 	.word	0x51000100
    41e4:	00000232 	.word	0x00000232
    41e8:	0000023c 	.word	0x0000023c
    41ec:	3c530001 	.word	0x3c530001
    41f0:	7a000002 	.word	0x7a000002
    41f4:	01000002 	.word	0x01000002
    41f8:	00005100 	.word	0x00005100
    41fc:	00000000 	.word	0x00000000
    4200:	02400000 	.word	0x02400000
    4204:	025a0000 	.word	0x025a0000
    4208:	00010000 	.word	0x00010000
    420c:	00025a52 	.word	0x00025a52
    4210:	00027a00 	.word	0x00027a00
    4214:	5c000100 	.word	0x5c000100
	...
    4220:	00000236 	.word	0x00000236
    4224:	0000025a 	.word	0x0000025a
    4228:	005c0001 	.word	0x005c0001
    422c:	00000000 	.word	0x00000000
    4230:	7c000000 	.word	0x7c000000
    4234:	7e000002 	.word	0x7e000002
    4238:	01000002 	.word	0x01000002
    423c:	00005100 	.word	0x00005100
    4240:	00000000 	.word	0x00000000
    4244:	028c0000 	.word	0x028c0000
    4248:	02a00000 	.word	0x02a00000
    424c:	00010000 	.word	0x00010000
    4250:	0002a05d 	.word	0x0002a05d
    4254:	0002cc00 	.word	0x0002cc00
    4258:	7d000200 	.word	0x7d000200
    425c:	0002cc10 	.word	0x0002cc10
    4260:	00032800 	.word	0x00032800
    4264:	7d000200 	.word	0x7d000200
    4268:	00000030 	.word	0x00000030
    426c:	00000000 	.word	0x00000000
    4270:	00028c00 	.word	0x00028c00
    4274:	00028e00 	.word	0x00028e00
    4278:	50000100 	.word	0x50000100
    427c:	000002d4 	.word	0x000002d4
    4280:	00000328 	.word	0x00000328
    4284:	047d0002 	.word	0x047d0002
	...
    4290:	0000028c 	.word	0x0000028c
    4294:	000002a6 	.word	0x000002a6
    4298:	a6510001 	.word	0xa6510001
    429c:	28000002 	.word	0x28000002
    42a0:	01000003 	.word	0x01000003
    42a4:	00005600 	.word	0x00005600
    42a8:	00000000 	.word	0x00000000
    42ac:	02940000 	.word	0x02940000
    42b0:	029a0000 	.word	0x029a0000
    42b4:	00010000 	.word	0x00010000
    42b8:	0002aa53 	.word	0x0002aa53
    42bc:	0002c200 	.word	0x0002c200
    42c0:	52000100 	.word	0x52000100
    42c4:	000002c6 	.word	0x000002c6
    42c8:	ce          	.byte	0xce
    42c9:	02          	.byte	0x02
    42ca:	0000      	.short	0x0000
    42cc:	00530001 	.word	0x00530001
    42d0:	00000000 	.word	0x00000000
    42d4:	e6000000 	.word	0xe6000000
    42d8:	ee000002 	.word	0xee000002
    42dc:	01000002 	.word	0x01000002
    42e0:	00005300 	.word	0x00005300
    42e4:	00000000 	.word	0x00000000
    42e8:	03280000 	.word	0x03280000
    42ec:	032a0000 	.word	0x032a0000
    42f0:	00010000 	.word	0x00010000
    42f4:	00032a5d 	.word	0x00032a5d
    42f8:	00032e00 	.word	0x00032e00
    42fc:	7d000200 	.word	0x7d000200
    4300:	00032e04 	.word	0x00032e04
    4304:	0003bc00 	.word	0x0003bc00
    4308:	7d000200 	.word	0x7d000200
    430c:	00000010 	.word	0x00000010
    4310:	00000000 	.word	0x00000000
    4314:	00032800 	.word	0x00032800
    4318:	00033000 	.word	0x00033000
    431c:	50000100 	.word	0x50000100
    4320:	00000332 	.word	0x00000332
    4324:	000003bc 	.word	0x000003bc
    4328:	047d0002 	.word	0x047d0002
	...
    4338:	0000000a 	.word	0x0000000a
    433c:	0a5d0001 	.word	0x0a5d0001
    4340:	54000000 	.word	0x54000000
    4344:	02000000 	.word	0x02000000
    4348:	00087d00 	.word	0x00087d00
    434c:	00000000 	.word	0x00000000
    4350:	26000000 	.word	0x26000000
    4354:	38000000 	.word	0x38000000
    4358:	01000000 	.word	0x01000000
    435c:	00005300 	.word	0x00005300
	...
    4368:	00040000 	.word	0x00040000
    436c:	00010000 	.word	0x00010000
    4370:	0000045d 	.word	0x0000045d
    4374:	00001000 	.word	0x00001000
    4378:	7d000200 	.word	0x7d000200
    437c:	00001004 	.word	0x00001004
    4380:	00002800 	.word	0x00002800
    4384:	7d000200 	.word	0x7d000200
    4388:	00000008 	.word	0x00000008
	...
    4394:	00000c00 	.word	0x00000c00
    4398:	50000100 	.word	0x50000100
    439c:	0000000c 	.word	0x0000000c
    43a0:	0000001c 	.word	0x0000001c
    43a4:	00510001 	.word	0x00510001
	...
    43b0:	0c000000 	.word	0x0c000000
    43b4:	01000000 	.word	0x01000000
    43b8:	000c5000 	.word	0x000c5000
    43bc:	00300000 	.word	0x00300000
    43c0:	00010000 	.word	0x00010000
    43c4:	00000054 	.word	0x00000054
	...
    43d0:	00000400 	.word	0x00000400
    43d4:	5d000100 	.word	0x5d000100
    43d8:	00000004 	.word	0x00000004
    43dc:	00000048 	.word	0x00000048
    43e0:	107d0002 	.word	0x107d0002
	...
    43ec:	00000048 	.word	0x00000048
    43f0:	0000004c 	.word	0x0000004c
    43f4:	4c5d0001 	.word	0x4c5d0001
    43f8:	c8000000 	.word	0xc8000000
    43fc:	02000000 	.word	0x02000000
    4400:	00107d00 	.word	0x00107d00
	...
    440c:	04000000 	.word	0x04000000
    4410:	01000000 	.word	0x01000000
    4414:	00045d00 	.word	0x00045d00
    4418:	00fc0000 	.word	0x00fc0000
    441c:	00020000 	.word	0x00020000
    4420:	00000c7d 	.word	0x00000c7d
	...
    442c:	00200000 	.word	0x00200000
    4430:	00010000 	.word	0x00010000
    4434:	00002050 	.word	0x00002050
    4438:	0000fc00 	.word	0x0000fc00
    443c:	56000100 	.word	0x56000100
	...
    444c:	0000001c 	.word	0x0000001c
    4450:	1c510001 	.word	0x1c510001
    4454:	fc000000 	.word	0xfc000000
    4458:	01000000 	.word	0x01000000
    445c:	00005500 	.word	0x00005500
	...
    4468:	00140000 	.word	0x00140000
    446c:	00010000 	.word	0x00010000
    4470:	00001452 	.word	0x00001452
    4474:	00006400 	.word	0x00006400
    4478:	54000100 	.word	0x54000100
    447c:	00000064 	.word	0x00000064
    4480:	000000b8 	.word	0x000000b8
    4484:	00500001 	.word	0x00500001
    4488:	00000000 	.word	0x00000000
    448c:	40000000 	.word	0x40000000
    4490:	50000000 	.word	0x50000000
    4494:	01000000 	.word	0x01000000
    4498:	00005000 	.word	0x00005000
    449c:	00000000 	.word	0x00000000
    44a0:	00140000 	.word	0x00140000
    44a4:	00700000 	.word	0x00700000
    44a8:	00010000 	.word	0x00010000
    44ac:	0000f852 	.word	0x0000f852
    44b0:	0000fc00 	.word	0x0000fc00
    44b4:	52000100 	.word	0x52000100
	...
    44c0:	0000002c 	.word	0x0000002c
    44c4:	00000050 	.word	0x00000050
    44c8:	60500001 	.word	0x60500001
    44cc:	b8000000 	.word	0xb8000000
    44d0:	01000000 	.word	0x01000000
    44d4:	00b85c00 	.word	0x00b85c00
    44d8:	00fc0000 	.word	0x00fc0000
    44dc:	00010000 	.word	0x00010000
    44e0:	00000050 	.word	0x00000050
    44e4:	00000000 	.word	0x00000000
    44e8:	00002c00 	.word	0x00002c00
    44ec:	00005800 	.word	0x00005800
    44f0:	54000100 	.word	0x54000100
    44f4:	0000005c 	.word	0x0000005c
    44f8:	000000a4 	.word	0x000000a4
    44fc:	b4510001 	.word	0xb4510001
    4500:	fc000000 	.word	0xfc000000
    4504:	01000000 	.word	0x01000000
    4508:	00005400 	.word	0x00005400
    450c:	00000000 	.word	0x00000000
    4510:	001c0000 	.word	0x001c0000
    4514:	005c0000 	.word	0x005c0000
    4518:	00010000 	.word	0x00010000
    451c:	0000a451 	.word	0x0000a451
    4520:	0000dc00 	.word	0x0000dc00
    4524:	51000100 	.word	0x51000100
    4528:	000000f0 	.word	0x000000f0
    452c:	000000fc 	.word	0x000000fc
    4530:	00510001 	.word	0x00510001
	...
    453c:	08000000 	.word	0x08000000
    4540:	01000000 	.word	0x01000000
    4544:	00085d00 	.word	0x00085d00
    4548:	00d00000 	.word	0x00d00000
    454c:	00020000 	.word	0x00020000
    4550:	0000087d 	.word	0x0000087d
	...
    455c:	00180000 	.word	0x00180000
    4560:	00010000 	.word	0x00010000
    4564:	00001850 	.word	0x00001850
    4568:	00002000 	.word	0x00002000
    456c:	54000100 	.word	0x54000100
    4570:	00000020 	.word	0x00000020
    4574:	00000038 	.word	0x00000038
    4578:	38500001 	.word	0x38500001
    457c:	d0000000 	.word	0xd0000000
    4580:	01000000 	.word	0x01000000
    4584:	00005400 	.word	0x00005400
	...
    4590:	002c0000 	.word	0x002c0000
    4594:	00010000 	.word	0x00010000
    4598:	0000a451 	.word	0x0000a451
    459c:	0000b000 	.word	0x0000b000
    45a0:	51000100 	.word	0x51000100
    45a4:	000000c4 	.word	0x000000c4
    45a8:	000000d0 	.word	0x000000d0
    45ac:	00510001 	.word	0x00510001
	...
    45b8:	38000000 	.word	0x38000000
    45bc:	01000000 	.word	0x01000000
    45c0:	00385200 	.word	0x00385200
    45c4:	00600000 	.word	0x00600000
    45c8:	00010000 	.word	0x00010000
    45cc:	0000605c 	.word	0x0000605c
    45d0:	00009000 	.word	0x00009000
    45d4:	52000100 	.word	0x52000100
    45d8:	000000a0 	.word	0x000000a0
    45dc:	000000d0 	.word	0x000000d0
    45e0:	00520001 	.word	0x00520001
    45e4:	00000000 	.word	0x00000000
    45e8:	0c000000 	.word	0x0c000000
    45ec:	30000000 	.word	0x30000000
    45f0:	01000000 	.word	0x01000000
    45f4:	00a45c00 	.word	0x00a45c00
    45f8:	00d00000 	.word	0x00d00000
    45fc:	00010000 	.word	0x00010000
    4600:	0000005c 	.word	0x0000005c
    4604:	00000000 	.word	0x00000000
    4608:	00002800 	.word	0x00002800
    460c:	00002c00 	.word	0x00002c00
    4610:	53000100 	.word	0x53000100
    4614:	0000002c 	.word	0x0000002c
    4618:	000000b0 	.word	0x000000b0
    461c:	c4510001 	.word	0xc4510001
    4620:	d0000000 	.word	0xd0000000
    4624:	01000000 	.word	0x01000000
    4628:	00005100 	.word	0x00005100
    462c:	00000000 	.word	0x00000000
    4630:	00340000 	.word	0x00340000
    4634:	005c0000 	.word	0x005c0000
    4638:	00010000 	.word	0x00010000
    463c:	00007053 	.word	0x00007053
    4640:	00007400 	.word	0x00007400
    4644:	50000100 	.word	0x50000100
    4648:	00000074 	.word	0x00000074
    464c:	00000084 	.word	0x00000084
    4650:	84530001 	.word	0x84530001
    4654:	c8000000 	.word	0xc8000000
    4658:	01000000 	.word	0x01000000
    465c:	00005000 	.word	0x00005000
	...
    4668:	00080000 	.word	0x00080000
    466c:	00010000 	.word	0x00010000
    4670:	0000085d 	.word	0x0000085d
    4674:	00009c00 	.word	0x00009c00
    4678:	7d000200 	.word	0x7d000200
    467c:	00000014 	.word	0x00000014
	...
    4688:	00002000 	.word	0x00002000
    468c:	50000100 	.word	0x50000100
    4690:	00000020 	.word	0x00000020
    4694:	0000009c 	.word	0x0000009c
    4698:	00550001 	.word	0x00550001
	...
    46a4:	3c000000 	.word	0x3c000000
    46a8:	01000000 	.word	0x01000000
    46ac:	003c5100 	.word	0x003c5100
    46b0:	009c0000 	.word	0x009c0000
    46b4:	00010000 	.word	0x00010000
    46b8:	00000058 	.word	0x00000058
	...
    46c4:	00003c00 	.word	0x00003c00
    46c8:	52000100 	.word	0x52000100
    46cc:	0000003c 	.word	0x0000003c
    46d0:	0000009c 	.word	0x0000009c
    46d4:	00560001 	.word	0x00560001
	...
    46e0:	3c000000 	.word	0x3c000000
    46e4:	01000000 	.word	0x01000000
    46e8:	003c5300 	.word	0x003c5300
    46ec:	009c0000 	.word	0x009c0000
    46f0:	00010000 	.word	0x00010000
    46f4:	00000057 	.word	0x00000057
	...
    4700:	00000400 	.word	0x00000400
    4704:	5d000100 	.word	0x5d000100
    4708:	00000004 	.word	0x00000004
    470c:	00000010 	.word	0x00000010
    4710:	247d0002 	.word	0x247d0002
    4714:	00000010 	.word	0x00000010
    4718:	0000010c 	.word	0x0000010c
    471c:	307d0002 	.word	0x307d0002
	...
    472c:	00000024 	.word	0x00000024
    4730:	24500001 	.word	0x24500001
    4734:	c0000000 	.word	0xc0000000
    4738:	02000000 	.word	0x02000000
    473c:	c0047d00 	.word	0xc0047d00
    4740:	d4000000 	.word	0xd4000000
    4744:	02000000 	.word	0x02000000
    4748:	d4709100 	.word	0xd4709100
    474c:	e8000000 	.word	0xe8000000
    4750:	02000000 	.word	0x02000000
    4754:	e8047d00 	.word	0xe8047d00
    4758:	f4000000 	.word	0xf4000000
    475c:	02000000 	.word	0x02000000
    4760:	f4709100 	.word	0xf4709100
    4764:	0c000000 	.word	0x0c000000
    4768:	02000001 	.word	0x02000001
    476c:	00047d00 	.word	0x00047d00
	...
    4778:	24000000 	.word	0x24000000
    477c:	01000000 	.word	0x01000000
    4780:	00245100 	.word	0x00245100
    4784:	010c0000 	.word	0x010c0000
    4788:	00010000 	.word	0x00010000
    478c:	00000057 	.word	0x00000057
    4790:	00000000 	.word	0x00000000
    4794:	00004400 	.word	0x00004400
    4798:	0000c000 	.word	0x0000c000
    479c:	5c000100 	.word	0x5c000100
    47a0:	000000d4 	.word	0x000000d4
    47a4:	000000dc 	.word	0x000000dc
    47a8:	f85c0001 	.word	0xf85c0001
    47ac:	04000000 	.word	0x04000000
    47b0:	01000001 	.word	0x01000001
    47b4:	00005c00 	.word	0x00005c00
    47b8:	00000000 	.word	0x00000000
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003041 	andeq	r3, r0, r1, asr #32
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000026 	andeq	r0, r0, r6, lsr #32
  10:	524f4305 	subpl	r4, pc, #335544320	; 0x14000000
  14:	2d584554 	cfldr64cs	mvdx4, [r8, #-336]
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  1c:	084d070a 	stmdaeq	sp, {r1, r3, r8, r9, sl}^
  20:	12020901 	andne	r0, r2, #16384	; 0x4000
  24:	15011404 	strne	r1, [r1, #-1028]
  28:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  2c:	1a011901 	bne	46438 <__Stack_Size+0x46038>
  30:	Address 0x00000030 is out of bounds.


Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	ffffffff 	undefined instruction 0xffffffff
	...
  20:	00000ecc 	andeq	r0, r0, ip, asr #29
  24:	00000ed0 	ldrdeq	r0, [r0], -r0
  28:	00000ed4 	ldrdeq	r0, [r0], -r4
  2c:	00000eee 	andeq	r0, r0, lr, ror #29
	...
  38:	00000ecc 	andeq	r0, r0, ip, asr #29
  3c:	00000ed0 	ldrdeq	r0, [r0], -r0
  40:	00000ed4 	ldrdeq	r0, [r0], -r4
  44:	00000eee 	andeq	r0, r0, lr, ror #29
	...
  50:	00000eee 	andeq	r0, r0, lr, ror #29
  54:	00000ef0 	strdeq	r0, [r0], -r0
  58:	00000ef4 	strdeq	r0, [r0], -r4
  5c:	00000f10 	andeq	r0, r0, r0, lsl pc
	...
  68:	00000eee 	andeq	r0, r0, lr, ror #29
  6c:	00000ef0 	strdeq	r0, [r0], -r0
  70:	00000ef4 	strdeq	r0, [r0], -r4
  74:	00000f10 	andeq	r0, r0, r0, lsl pc
	...
  80:	00000f10 	andeq	r0, r0, r0, lsl pc
  84:	00000f12 	andeq	r0, r0, r2, lsl pc
  88:	00000f16 	andeq	r0, r0, r6, lsl pc
  8c:	00000f34 	andeq	r0, r0, r4, lsr pc
	...
  98:	00000f10 	andeq	r0, r0, r0, lsl pc
  9c:	00000f12 	andeq	r0, r0, r2, lsl pc
  a0:	00000f16 	andeq	r0, r0, r6, lsl pc
  a4:	00000f34 	andeq	r0, r0, r4, lsr pc
	...
  b0:	0000125a 	andeq	r1, r0, sl, asr r2
  b4:	0000125e 	andeq	r1, r0, lr, asr r2
  b8:	00001260 	andeq	r1, r0, r0, ror #4
  bc:	0000127a 	andeq	r1, r0, sl, ror r2
	...
  c8:	000012ae 	andeq	r1, r0, lr, lsr #5
  cc:	000012b2 	strheq	r1, [r0], -r2
  d0:	000012b4 	strheq	r1, [r0], -r4
  d4:	000012c0 	andeq	r1, r0, r0, asr #5
	...
  e0:	000013cc 	andeq	r1, r0, ip, asr #7
  e4:	000013ce 	andeq	r1, r0, lr, asr #7
  e8:	000013d6 	ldrdeq	r1, [r0], -r6
  ec:	000013e2 	andeq	r1, r0, r2, ror #7
  f0:	000013d2 	ldrdeq	r1, [r0], -r2
  f4:	000013d4 	ldrdeq	r1, [r0], -r4
	...
 100:	000013e2 	andeq	r1, r0, r2, ror #7
 104:	000013f2 	strdeq	r1, [r0], -r2
 108:	000013f4 	strdeq	r1, [r0], -r4
	ui2a(num,10,0,bf);
	}

static int a2d(char ch)
	{
	if (ch>='0' && ch<='9') 
 10c:	00001406 	andeq	r1, r0, r6, lsl #8
	...
		return ch-'0';
	else if (ch>='a' && ch<='f')
 118:	0000010c 	andeq	r0, r0, ip, lsl #2
 11c:	00000114 	andeq	r0, r0, r4, lsl r1
		return ch-'a'+10;
 120:	00000116 	andeq	r0, r0, r6, lsl r1
 124:	00000136 	andeq	r0, r0, r6, lsr r1
	...
	else if (ch>='A' && ch<='F')
 130:	0000011e 	andeq	r0, r0, lr, lsl r1
		return ch-'A'+10;
 134:	00000120 	andeq	r0, r0, r0, lsr #2
static char a2i(char ch, char** src,int base,int* nump)
	{
	char* p= *src;
	int num=0;
	int digit;
	while ((digit=a2d(ch))>=0) {
 138:	00000126 	andeq	r0, r0, r6, lsr #2
			if (ch=='l') {
				ch=*(fmt++);
				lng=1;
			}
#endif
			switch (ch) {
 13c:	0000014a 	andeq	r0, r0, sl, asr #2
 140:	00000122 	andeq	r0, r0, r2, lsr #2
 144:	00000124 	andeq	r0, r0, r4, lsr #2
	...
 150:	0000011e 	andeq	r0, r0, lr, lsl r1
 154:	00000120 	andeq	r0, r0, r0, lsr #2
 158:	00000130 	andeq	r0, r0, r0, lsr r1
 15c:	0000014a 	andeq	r0, r0, sl, asr #2
 160:	00000122 	andeq	r0, r0, r2, lsr #2
 164:	00000124 	andeq	r0, r0, r4, lsr #2
	...
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
 170:	0000014a 	andeq	r0, r0, sl, asr #2
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
 174:	0000015e 	andeq	r0, r0, lr, asr r1

static void i2a (int num, char * bf)
	{
	if (num<0) {
		num=-num;
		*bf++ = '-';
 178:	00000188 	andeq	r0, r0, r8, lsl #3
 17c:	0000018e 	andeq	r0, r0, lr, lsl #3
	...
 188:	0000014a 	andeq	r0, r0, sl, asr #2
		}
	ui2a(num,10,0,bf);
 18c:	0000015e 	andeq	r0, r0, lr, asr r1
 190:	00000188 	andeq	r0, r0, r8, lsl #3
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
					putchw(putp,putf,w,lz,bf);
 194:	0000018e 	andeq	r0, r0, lr, lsl #3
	...
 1a0:	0000015e 	andeq	r0, r0, lr, asr r1
 1a4:	00000182 	andeq	r0, r0, r2, lsl #3
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 1a8:	00000186 	andeq	r0, r0, r6, lsl #3
 1ac:	00000188 	andeq	r0, r0, r8, lsl #3
	...
 1b8:	0000015e 	andeq	r0, r0, lr, asr r1
					putchw(putp,putf,w,lz,bf);
 1bc:	00000160 	andeq	r0, r0, r0, ror #2
 1c0:	00000186 	andeq	r0, r0, r6, lsl #3
 1c4:	00000188 	andeq	r0, r0, r8, lsl #3
					break;
				case 'c' : 
					putf(putp,(char)(va_arg(va, int)));
 1c8:	0000016a 	andeq	r0, r0, sl, ror #2
 1cc:	00000182 	andeq	r0, r0, r2, lsl #3
	...
					break;
				case 's' : 
					putchw(putp,putf,w,0,va_arg(va, char*));
 1d8:	00000078 	andeq	r0, r0, r8, ror r0
 1dc:	0000007a 	andeq	r0, r0, sl, ror r0
 1e0:	0000007c 	andeq	r0, r0, ip, ror r0
 1e4:	0000007e 	andeq	r0, r0, lr, ror r0
	...
					break;
				case '%' :
					putf(putp,ch);
 1f0:	00000078 	andeq	r0, r0, r8, ror r0
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
 1f4:	0000007a 	andeq	r0, r0, sl, ror r0
 1f8:	0000007c 	andeq	r0, r0, ip, ror r0
					break;
				}
			}
		}
	abort:;
	}
 1fc:	0000007e 	andeq	r0, r0, lr, ror r0
	...

void init_printf(void* putp,void (*putf) (void*,char))
	{
	stdout_putf=putf;
	stdout_putp=putp;
	}
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	00000024 	andeq	r0, r0, r4, lsr #32
 210:	00000070 	andeq	r0, r0, r0, ror r0
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
 214:	0000010c 	andeq	r0, r0, ip, lsl #2
 218:	00000044 	andeq	r0, r0, r4, asr #32
	}
 21c:	00000058 	andeq	r0, r0, r8, asr r0
	...



void tfp_sprintf(char* s,char *fmt, ...)
	{
 228:	ffffffff 	undefined instruction 0xffffffff
	...
