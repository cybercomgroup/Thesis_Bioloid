
CM530.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000134  08003000  08003000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ed0  08003134  08003134  00003134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         000000d8  20000000  08007004  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000d84  200000d8  080070dc  000080d8  2**2
                  ALLOC
  4 ._usrstack    00000100  20000e5c  08007e60  000080d8  2**0
                  ALLOC
  5 .comment      00000420  00000000  00000000  000080d8  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000450  00000000  00000000  000084f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 0000304d  00000000  00000000  00008948  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000bfb0  00000000  00000000  0000b995  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003120  00000000  00000000  00017945  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002d5d  00000000  00000000  0001aa65  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000022f0  00000000  00000000  0001d7c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000048ff  00000000  00000000  0001fab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000430a  00000000  00000000  000243b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000031  00000000  00000000  000286bd  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000230  00000000  00000000  000286f0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08003000 <g_pfnVectors>:
 8003000:	20010000 	.word	0x20010000
 8003004:	08006b25 	.word	0x08006b25
 8003008:	0800343d 	.word	0x0800343d
 800300c:	08003441 	.word	0x08003441
 8003010:	08003445 	.word	0x08003445
 8003014:	08003449 	.word	0x08003449
 8003018:	0800344d 	.word	0x0800344d
	...
 800302c:	08003455 	.word	0x08003455
 8003030:	08003451 	.word	0x08003451
 8003034:	00000000 	.word	0x00000000
 8003038:	08003459 	.word	0x08003459
 800303c:	08003565 	.word	0x08003565
 8003040:	0800345d 	.word	0x0800345d
 8003044:	08003461 	.word	0x08003461
 8003048:	08003465 	.word	0x08003465
 800304c:	08003469 	.word	0x08003469
 8003050:	0800346d 	.word	0x0800346d
 8003054:	08003471 	.word	0x08003471
 8003058:	08003475 	.word	0x08003475
 800305c:	08003479 	.word	0x08003479
 8003060:	0800347d 	.word	0x0800347d
 8003064:	08003481 	.word	0x08003481
 8003068:	08003485 	.word	0x08003485
	...
 8003088:	080034a5 	.word	0x080034a5
 800308c:	080034a9 	.word	0x080034a9
 8003090:	080034ad 	.word	0x080034ad
 8003094:	080034b1 	.word	0x080034b1
 8003098:	080034b5 	.word	0x080034b5
 800309c:	080034b9 	.word	0x080034b9
 80030a0:	080034bd 	.word	0x080034bd
 80030a4:	080034c1 	.word	0x080034c1
 80030a8:	080034c5 	.word	0x080034c5
 80030ac:	080034c9 	.word	0x080034c9
 80030b0:	080034cd 	.word	0x080034cd
 80030b4:	080034d1 	.word	0x080034d1
 80030b8:	080034d5 	.word	0x080034d5
 80030bc:	080034d9 	.word	0x080034d9
 80030c0:	080034dd 	.word	0x080034dd
 80030c4:	080034e1 	.word	0x080034e1
 80030c8:	080034e5 	.word	0x080034e5
 80030cc:	080034e9 	.word	0x080034e9
 80030d0:	080034ed 	.word	0x080034ed
 80030d4:	08003559 	.word	0x08003559
 80030d8:	080034f1 	.word	0x080034f1
 80030dc:	0800354d 	.word	0x0800354d
 80030e0:	080034f5 	.word	0x080034f5
 80030e4:	080034f9 	.word	0x080034f9
 80030e8:	080034fd 	.word	0x080034fd
 80030ec:	08003501 	.word	0x08003501
 80030f0:	08003505 	.word	0x08003505
 80030f4:	08003509 	.word	0x08003509
 80030f8:	0800350d 	.word	0x0800350d
 80030fc:	08003511 	.word	0x08003511
 8003100:	08003515 	.word	0x08003515
 8003104:	08003519 	.word	0x08003519
 8003108:	0800351d 	.word	0x0800351d
 800310c:	08003521 	.word	0x08003521
 8003110:	08003525 	.word	0x08003525
 8003114:	08003541 	.word	0x08003541
 8003118:	08003529 	.word	0x08003529
 800311c:	0800352d 	.word	0x0800352d
 8003120:	08003531 	.word	0x08003531
 8003124:	08003535 	.word	0x08003535
 8003128:	08003539 	.word	0x08003539
 800312c:	0800353d 	.word	0x0800353d
 8003130:	0000f85f 	.word	0x0000f85f

Disassembly of section .text:

08003134 <main>:
#include "adc.h"
#include "button.h"
#include "mic.h"
//#include <stdlib.h>

int main(void) {
 8003134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003136:	b081      	sub	sp, #4

	// Must include this line in all programs using "cm530.h/.c"
	SysInit();
 8003138:	f001 fdde 	bl	8004cf8 <SysInit>

	byte	ReceivedData;
	char    tmpComm[128];
	char * ReceivedCommand;
	ReceivedCommand = tmpComm;
	PrintString("Starting Program by turning on POWER LED!\r\n");
 800313c:	489c      	ldr	r0, [pc, #624]	(80033b0 <main+0x27c>)
 800313e:	f000 fc7d 	bl	8003a3c <PrintString>
	SetLED(POWER, 1);
 8003142:	2000      	movs	r0, #0
 8003144:	2101      	movs	r1, #1
 8003146:	f001 fa69 	bl	800461c <SetLED>

	while(1){


		PrintString("Battery Voltage: ");
 800314a:	489a      	ldr	r0, [pc, #616]	(80033b4 <main+0x280>)
 800314c:	f000 fc76 	bl	8003a3c <PrintString>
		Printu32d((u32)ReadAnalog(VBUS)>>4);
 8003150:	2006      	movs	r0, #6
 8003152:	f001 f997 	bl	8004484 <ReadAnalog>
 8003156:	0900      	lsrs	r0, r0, #4
 8003158:	b280      	uxth	r0, r0
 800315a:	f000 fc37 	bl	80039cc <Printu32d>
		PrintString("e-1 [Volts]\n");
 800315e:	4896      	ldr	r0, [pc, #600]	(80033b8 <main+0x284>)
 8003160:	f000 fc6c 	bl	8003a3c <PrintString>

		Battery_Monitor_Alarm();
 8003164:	f001 fa06 	bl	8004574 <Battery_Monitor_Alarm>

		    PrintString("PCU:");
 8003168:	4894      	ldr	r0, [pc, #592]	(80033bc <main+0x288>)
 800316a:	f000 fc67 	bl	8003a3c <PrintString>
		#ifdef USING_PC_UART
		    Printu32d(Baudrate_PCU);
 800316e:	4b94      	ldr	r3, [pc, #592]	(80033c0 <main+0x28c>)
		    PrintString("Not in use\n");
		#endif

		    PrintString("DXL:");
		#ifdef USING_DYNAMIXEL
		    Printu32d(Baudrate_DXL);
 8003170:	4c94      	ldr	r4, [pc, #592]	(80033c4 <main+0x290>)

		Battery_Monitor_Alarm();

		    PrintString("PCU:");
		#ifdef USING_PC_UART
		    Printu32d(Baudrate_PCU);
 8003172:	6818      	ldr	r0, [r3, #0]
 8003174:	f000 fc2a 	bl	80039cc <Printu32d>
		    PrintString("(bps)\n");
 8003178:	4893      	ldr	r0, [pc, #588]	(80033c8 <main+0x294>)
 800317a:	f000 fc5f 	bl	8003a3c <PrintString>
		#else
		    PrintString("Not in use\n");
		#endif

		    PrintString("ZIG:");
 800317e:	4893      	ldr	r0, [pc, #588]	(80033cc <main+0x298>)
 8003180:	f000 fc5c 	bl	8003a3c <PrintString>
		#ifdef USING_ZIGBEE
		    Printu32d(Baudrate_ZIG);
 8003184:	4b92      	ldr	r3, [pc, #584]	(80033d0 <main+0x29c>)
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	f000 fc20 	bl	80039cc <Printu32d>
		    PrintString("(bps)\n");
 800318c:	488e      	ldr	r0, [pc, #568]	(80033c8 <main+0x294>)
 800318e:	f000 fc55 	bl	8003a3c <PrintString>
		#else
		    PrintString("Not in use\n");
		#endif

		    PrintString("DXL:");
 8003192:	4890      	ldr	r0, [pc, #576]	(80033d4 <main+0x2a0>)
 8003194:	f000 fc52 	bl	8003a3c <PrintString>
		#ifdef USING_DYNAMIXEL
		    Printu32d(Baudrate_DXL);
 8003198:	6820      	ldr	r0, [r4, #0]
 800319a:	f000 fc17 	bl	80039cc <Printu32d>
		    PrintString("(bps)\n");
 800319e:	488a      	ldr	r0, [pc, #552]	(80033c8 <main+0x294>)
 80031a0:	f000 fc4c 	bl	8003a3c <PrintString>
		#endif

//		Buzzed(150, 200);    // 2500 Hz ~ Ds_7/Eb_7


		ReceivedData = std_getchar();;
 80031a4:	f000 fcde 	bl	8003b64 <std_getchar>
 80031a8:	b2c0      	uxtb	r0, r0

		//if(strcmp(ReceivedCommand, "led on") == 0){
		if(ReceivedData == 'l'){
 80031aa:	286c      	cmp	r0, #108
 80031ac:	d113      	bne.n	80031d6 <main+0xa2>
			std_putchar(ReceivedData);
 80031ae:	f000 fb4f 	bl	8003850 <std_putchar>
			PrintString(" * \t* Turn on LEDs!\r\n");
 80031b2:	4889      	ldr	r0, [pc, #548]	(80033d8 <main+0x2a4>)
 80031b4:	f000 fc42 	bl	8003a3c <PrintString>
			SetLED(POWER, 1);
 80031b8:	2000      	movs	r0, #0
 80031ba:	2101      	movs	r1, #1
 80031bc:	f001 fa2e 	bl	800461c <SetLED>
			SetLED(PLAY, 1);
 80031c0:	2003      	movs	r0, #3
 80031c2:	2101      	movs	r1, #1
 80031c4:	f001 fa2a 	bl	800461c <SetLED>
			SetLED(MANAGE, 1);
 80031c8:	2001      	movs	r0, #1
 80031ca:	2101      	movs	r1, #1
 80031cc:	f001 fa26 	bl	800461c <SetLED>
			SetLED(PROGRAM, 1);
 80031d0:	2002      	movs	r0, #2
 80031d2:	2101      	movs	r1, #1
 80031d4:	e014      	b.n	8003200 <main+0xcc>
		}
		else if(ReceivedData == 'o'){
 80031d6:	286f      	cmp	r0, #111
 80031d8:	d115      	bne.n	8003206 <main+0xd2>
		//else if(strcmp(ReceivedCommand, "led off")){
			std_putchar(ReceivedData);
 80031da:	f000 fb39 	bl	8003850 <std_putchar>
			PrintString(" * \t* Turn off LEDs!\r\n");
 80031de:	487f      	ldr	r0, [pc, #508]	(80033dc <main+0x2a8>)
 80031e0:	f000 fc2c 	bl	8003a3c <PrintString>
			SetLED(POWER, 0);
 80031e4:	2000      	movs	r0, #0
 80031e6:	2100      	movs	r1, #0
 80031e8:	f001 fa18 	bl	800461c <SetLED>
			SetLED(PLAY, 0);
 80031ec:	2003      	movs	r0, #3
 80031ee:	2100      	movs	r1, #0
 80031f0:	f001 fa14 	bl	800461c <SetLED>
			SetLED(MANAGE, 0);
 80031f4:	2001      	movs	r0, #1
 80031f6:	2100      	movs	r1, #0
 80031f8:	f001 fa10 	bl	800461c <SetLED>
			SetLED(PROGRAM, 0);
 80031fc:	2002      	movs	r0, #2
 80031fe:	2100      	movs	r1, #0
 8003200:	f001 fa0c 	bl	800461c <SetLED>
 8003204:	e0d0      	b.n	80033a8 <main+0x274>
		}
		//else if(strcmp(ReceivedCommand, "motors report")){
		else if(ReceivedData == 'm'){
 8003206:	286d      	cmp	r0, #109
 8003208:	d166      	bne.n	80032d8 <main+0x1a4>
			u8 id, num=0;
			u16 wdata, error, pdata, perror;
			dxl_initialize(Baudrate_DXL);
 800320a:	6820      	ldr	r0, [r4, #0]
 800320c:	f000 ff70 	bl	80040f0 <dxl_initialize>
 8003210:	2700      	movs	r7, #0
 8003212:	2501      	movs	r5, #1
 8003214:	b2ee      	uxtb	r6, r5
			for (id=1; id<(250); id++)
			{
				wdata = (dxl_read_byte(id, P_ID)&0x00FF);
 8003216:	2103      	movs	r1, #3
 8003218:	4630      	mov	r0, r6
 800321a:	f000 ff2b 	bl	8004074 <dxl_read_byte>
				if (wdata==id)
 800321e:	b2ab      	uxth	r3, r5
 8003220:	b280      	uxth	r0, r0
 8003222:	4298      	cmp	r0, r3
 8003224:	d14d      	bne.n	80032c2 <main+0x18e>
				{
					wdata=0;
					num++;
					PrintString("{");
 8003226:	486e      	ldr	r0, [pc, #440]	(80033e0 <main+0x2ac>)
 8003228:	f000 fc08 	bl	8003a3c <PrintString>
					Printu32d(id);
 800322c:	4628      	mov	r0, r5
 800322e:	f000 fbcd 	bl	80039cc <Printu32d>
					PrintString(", ");
 8003232:	486c      	ldr	r0, [pc, #432]	(80033e4 <main+0x2b0>)
 8003234:	f000 fc02 	bl	8003a3c <PrintString>

					// Read present position
					wdata = dxl_read_word(id, P_MODEL_NUMBER_L);
 8003238:	2100      	movs	r1, #0
 800323a:	4630      	mov	r0, r6
 800323c:	f000 fed2 	bl	8003fe4 <dxl_read_word>
 8003240:	4604      	mov	r4, r0
					error = dxl_get_result();
 8003242:	f000 fcd1 	bl	8003be8 <dxl_get_result>


					if (!(error&DXL_RXSUCCESS))
 8003246:	f010 0f02 	tst.w	r0, #2	; 0x2
 800324a:	d102      	bne.n	8003252 <main+0x11e>
						PrintCommStatus(error);
 800324c:	f000 fbfc 	bl	8003a48 <PrintCommStatus>
 8003250:	e00b      	b.n	800326a <main+0x136>
					else{
						PrintString(",* ");
 8003252:	4865      	ldr	r0, [pc, #404]	(80033e8 <main+0x2b4>)
 8003254:	f000 fbf2 	bl	8003a3c <PrintString>
						Printu32d(dxl_read_word( id, AXM_PRESENT_POSITION_L ));
 8003258:	2124      	movs	r1, #36
 800325a:	4630      	mov	r0, r6
 800325c:	f000 fec2 	bl	8003fe4 <dxl_read_word>
 8003260:	f000 fbb4 	bl	80039cc <Printu32d>
						PrintString("*, ");
 8003264:	4861      	ldr	r0, [pc, #388]	(80033ec <main+0x2b8>)
 8003266:	f000 fbe9 	bl	8003a3c <PrintString>
					}
					Printu32d(wdata);
 800326a:	4620      	mov	r0, r4
 800326c:	f000 fbae 	bl	80039cc <Printu32d>
					if (wdata==MODEL_AX12)
 8003270:	2c0c      	cmp	r4, #12
					{
						PrintString(" (AX-12)");
 8003272:	bf08      	it	eq
 8003274:	485e      	ldreq	r0, [pc, #376]	(80033f0 <main+0x2bc>)
						PrintString(",* ");
						Printu32d(dxl_read_word( id, AXM_PRESENT_POSITION_L ));
						PrintString("*, ");
					}
					Printu32d(wdata);
					if (wdata==MODEL_AX12)
 8003276:	d014      	beq.n	80032a2 <main+0x16e>
					{
						PrintString(" (AX-12)");
					}
					else if (wdata==MODEL_AX18)
 8003278:	2c12      	cmp	r4, #18
					{
						PrintString(" (AX-18)");
 800327a:	bf08      	it	eq
 800327c:	485d      	ldreq	r0, [pc, #372]	(80033f4 <main+0x2c0>)
					Printu32d(wdata);
					if (wdata==MODEL_AX12)
					{
						PrintString(" (AX-12)");
					}
					else if (wdata==MODEL_AX18)
 800327e:	d010      	beq.n	80032a2 <main+0x16e>
					{
						PrintString(" (AX-18)");
					}
					else if (wdata==MODEL_AXS1)
 8003280:	2c0d      	cmp	r4, #13
					{
						PrintString(" (AX-S1)");
 8003282:	bf08      	it	eq
 8003284:	485c      	ldreq	r0, [pc, #368]	(80033f8 <main+0x2c4>)
					}
					else if (wdata==MODEL_AX18)
					{
						PrintString(" (AX-18)");
					}
					else if (wdata==MODEL_AXS1)
 8003286:	d00c      	beq.n	80032a2 <main+0x16e>
					{
						PrintString(" (AX-S1)");
					}
					else if (wdata==MODEL_AXS20)
 8003288:	2cd4      	cmp	r4, #212
					{
						PrintString(" (AX-S20)");
 800328a:	bf08      	it	eq
 800328c:	485b      	ldreq	r0, [pc, #364]	(80033fc <main+0x2c8>)
					}
					else if (wdata==MODEL_AXS1)
					{
						PrintString(" (AX-S1)");
					}
					else if (wdata==MODEL_AXS20)
 800328e:	d008      	beq.n	80032a2 <main+0x16e>
					{
						PrintString(" (AX-S20)");
					}
					else if (wdata==MODEL_JHFPS)
 8003290:	f244 330b 	movw	r3, #17163	; 0x430b
 8003294:	429c      	cmp	r4, r3
					{
						PrintString(" (JH-FPS)");
 8003296:	bf08      	it	eq
 8003298:	4859      	ldreq	r0, [pc, #356]	(8003400 <main+0x2cc>)
					}
					else if (wdata==MODEL_AXS20)
					{
						PrintString(" (AX-S20)");
					}
					else if (wdata==MODEL_JHFPS)
 800329a:	d002      	beq.n	80032a2 <main+0x16e>
					{
						PrintString(" (JH-FPS)");
					}
					else if (wdata==MODEL_MX28)
 800329c:	2c1d      	cmp	r4, #29
 800329e:	d102      	bne.n	80032a6 <main+0x172>
					{
						PrintString(" (MX-28)");
 80032a0:	4858      	ldr	r0, [pc, #352]	(8003404 <main+0x2d0>)
 80032a2:	f000 fbcb 	bl	8003a3c <PrintString>
			{
				wdata = (dxl_read_byte(id, P_ID)&0x00FF);
				if (wdata==id)
				{
					wdata=0;
					num++;
 80032a6:	1c7b      	adds	r3, r7, #1
					else if (wdata==MODEL_MX28)
					{
						PrintString(" (MX-28)");
					}

					PrintString(", ");
 80032a8:	484e      	ldr	r0, [pc, #312]	(80033e4 <main+0x2b0>)
			{
				wdata = (dxl_read_byte(id, P_ID)&0x00FF);
				if (wdata==id)
				{
					wdata=0;
					num++;
 80032aa:	b2df      	uxtb	r7, r3
					else if (wdata==MODEL_MX28)
					{
						PrintString(" (MX-28)");
					}

					PrintString(", ");
 80032ac:	f000 fbc6 	bl	8003a3c <PrintString>
					Printu32d(dxl_read_byte(id, P_FIRMWARE_VERSION));
 80032b0:	2102      	movs	r1, #2
 80032b2:	4630      	mov	r0, r6
 80032b4:	f000 fede 	bl	8004074 <dxl_read_byte>
 80032b8:	f000 fb88 	bl	80039cc <Printu32d>

					PrintString("} \n");
 80032bc:	4852      	ldr	r0, [pc, #328]	(8003408 <main+0x2d4>)
 80032be:	f000 fbbd 	bl	8003a3c <PrintString>
 80032c2:	3501      	adds	r5, #1
		//else if(strcmp(ReceivedCommand, "motors report")){
		else if(ReceivedData == 'm'){
			u8 id, num=0;
			u16 wdata, error, pdata, perror;
			dxl_initialize(Baudrate_DXL);
			for (id=1; id<(250); id++)
 80032c4:	2dfa      	cmp	r5, #250
 80032c6:	d1a5      	bne.n	8003214 <main+0xe0>
					Printu32d(dxl_read_byte(id, P_FIRMWARE_VERSION));

					PrintString("} \n");
				}
			}
			PrintString("\nDXL DEVICES:");
 80032c8:	4850      	ldr	r0, [pc, #320]	(800340c <main+0x2d8>)
 80032ca:	f000 fbb7 	bl	8003a3c <PrintString>
			Printu32d(num);
 80032ce:	4638      	mov	r0, r7
 80032d0:	f000 fb7c 	bl	80039cc <Printu32d>
			PrintString("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
 80032d4:	484e      	ldr	r0, [pc, #312]	(8003410 <main+0x2dc>)
 80032d6:	e065      	b.n	80033a4 <main+0x270>
		}
		else if(ReceivedData == 'b'){
 80032d8:	2862      	cmp	r0, #98
 80032da:	d107      	bne.n	80032ec <main+0x1b8>
			PrintString("\nPlaying Some music\n");
 80032dc:	484d      	ldr	r0, [pc, #308]	(8003414 <main+0x2e0>)
 80032de:	f000 fbad 	bl	8003a3c <PrintString>
			Buzzed(150, 200);    // 2500 Hz ~ Ds_7/Eb_7
 80032e2:	2096      	movs	r0, #150
 80032e4:	21c8      	movs	r1, #200
 80032e6:	f001 f9af 	bl	8004648 <Buzzed>
 80032ea:	e05d      	b.n	80033a8 <main+0x274>
		}
		else if(ReceivedData == 'i'){
 80032ec:	2869      	cmp	r0, #105
 80032ee:	d126      	bne.n	800333e <main+0x20a>
			PrintString("\n(IR_L, IR_R, DMS):\t(");
 80032f0:	4849      	ldr	r0, [pc, #292]	(8003418 <main+0x2e4>)
 80032f2:	f000 fba3 	bl	8003a3c <PrintString>
			Prints32d(ReadIR(EPORT1A));
 80032f6:	2000      	movs	r0, #0
 80032f8:	f001 f95e 	bl	80045b8 <ReadIR>
 80032fc:	f000 fb2c 	bl	8003958 <Prints32d>
			//Printu32d(ReadIR(EPORT1A));
			PrintString(", ");
 8003300:	4838      	ldr	r0, [pc, #224]	(80033e4 <main+0x2b0>)
 8003302:	f000 fb9b 	bl	8003a3c <PrintString>
			Prints32d(ReadIR(EPORT6A));
 8003306:	2005      	movs	r0, #5
 8003308:	f001 f956 	bl	80045b8 <ReadIR>
 800330c:	f000 fb24 	bl	8003958 <Prints32d>
			PrintString(", ");
 8003310:	4834      	ldr	r0, [pc, #208]	(80033e4 <main+0x2b0>)
 8003312:	f000 fb93 	bl	8003a3c <PrintString>
			Prints32d(ReadIR(EPORT5A));
 8003316:	2004      	movs	r0, #4
 8003318:	f001 f94e 	bl	80045b8 <ReadIR>
 800331c:	f000 fb1c 	bl	8003958 <Prints32d>
			PrintString(")\n");
 8003320:	483e      	ldr	r0, [pc, #248]	(800341c <main+0x2e8>)
 8003322:	f000 fb8b 	bl	8003a3c <PrintString>
			PlayNote(300, NOTE_E, 1);    // 2500 Hz ~ Ds_7/Eb_7
 8003326:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800332a:	f645 61ce 	movw	r1, #24270	; 0x5ece
 800332e:	2201      	movs	r2, #1
 8003330:	f001 f9a8 	bl	8004684 <PlayNote>
			mDelay(2000);
 8003334:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003338:	f001 f9cc 	bl	80046d4 <mDelay>
 800333c:	e034      	b.n	80033a8 <main+0x274>
		}
		else if(ReadButton(UP)){
 800333e:	2000      	movs	r0, #0
 8003340:	f001 f95a 	bl	80045f8 <ReadButton>
 8003344:	b108      	cbz	r0, 800334a <main+0x216>
			PrintString("\nUP UP UP is pressed!\n");
 8003346:	4836      	ldr	r0, [pc, #216]	(8003420 <main+0x2ec>)
 8003348:	e02c      	b.n	80033a4 <main+0x270>
			//Buzzed(150, 200);    // 2500 Hz ~ Ds_7/Eb_7
		}
		else if(ReadButton(DOWN)){
 800334a:	2001      	movs	r0, #1
 800334c:	f001 f954 	bl	80045f8 <ReadButton>
 8003350:	b108      	cbz	r0, 8003356 <main+0x222>
			PrintString("\nDOWN DOWN DOWN is pressed!\n");
 8003352:	4834      	ldr	r0, [pc, #208]	(8003424 <main+0x2f0>)
 8003354:	e026      	b.n	80033a4 <main+0x270>
		}
		else if(ReadButton(LEFT)){
 8003356:	2002      	movs	r0, #2
 8003358:	f001 f94e 	bl	80045f8 <ReadButton>
 800335c:	b108      	cbz	r0, 8003362 <main+0x22e>
			PrintString("\nLEFT LEFT LEFT is pressed!\n");
 800335e:	4832      	ldr	r0, [pc, #200]	(8003428 <main+0x2f4>)
 8003360:	e020      	b.n	80033a4 <main+0x270>
		}
		else if(ReadButton(RIGHT)){
 8003362:	2003      	movs	r0, #3
 8003364:	f001 f948 	bl	80045f8 <ReadButton>
 8003368:	b108      	cbz	r0, 800336e <main+0x23a>
			PrintString("\nRIGHT RIGHT RIGHT is pressed!\n");
 800336a:	4830      	ldr	r0, [pc, #192]	(800342c <main+0x2f8>)
 800336c:	e01a      	b.n	80033a4 <main+0x270>
		}
		else if(ReadButton(START)){
 800336e:	2004      	movs	r0, #4
 8003370:	f001 f942 	bl	80045f8 <ReadButton>
 8003374:	b118      	cbz	r0, 800337e <main+0x24a>
			PrintString("\nSTART START START is pressed!\n");
 8003376:	482e      	ldr	r0, [pc, #184]	(8003430 <main+0x2fc>)
 8003378:	f000 fb60 	bl	8003a3c <PrintString>
 800337c:	e00a      	b.n	8003394 <main+0x260>
			PlayNote(200, NOTE_A, 1);    // 2500 Hz ~ Ds_7/Eb_7
		}
		else if(ReadButton(MIC)){
 800337e:	2005      	movs	r0, #5
 8003380:	f001 f93a 	bl	80045f8 <ReadButton>
 8003384:	b168      	cbz	r0, 80033a2 <main+0x26e>
			PrintString("\nMIC MIC MIC MIC MIC MIMIC MIC MIMIC MIC MIMIC MIC MIMIC MIC MIMIC MIC MIMIC MIC MIMIC MIC MIMIC MIC MIMIC MIC MIis pressed!\n");
 8003386:	482b      	ldr	r0, [pc, #172]	(8003434 <main+0x300>)
 8003388:	f000 fb58 	bl	8003a3c <PrintString>
			SetLED(MANAGE, 1);
 800338c:	2001      	movs	r0, #1
 800338e:	2101      	movs	r1, #1
 8003390:	f001 f944 	bl	800461c <SetLED>
			PlayNote(200, NOTE_A, 1);    // 2500 Hz ~ Ds_7/Eb_7
 8003394:	20c8      	movs	r0, #200
 8003396:	f244 7106 	movw	r1, #18182	; 0x4706
 800339a:	2201      	movs	r2, #1
 800339c:	f001 f972 	bl	8004684 <PlayNote>
 80033a0:	e002      	b.n	80033a8 <main+0x274>
			//mDelay(300);
			//SetLED(MANAGE, 0);
			//mDelay(2000);
		}
		else{
			PrintString("\nWait for command\n");
 80033a2:	4825      	ldr	r0, [pc, #148]	(8003438 <main+0x304>)
 80033a4:	f000 fb4a 	bl	8003a3c <PrintString>
//				std_puts(ReceivedCommand);
//				PrintString("\n");
//			}
		}
		//mDelay(1000);
		mDelay(100);
 80033a8:	2064      	movs	r0, #100
 80033aa:	f001 f993 	bl	80046d4 <mDelay>
 80033ae:	e6cc      	b.n	800314a <main+0x16>
 80033b0:	08006b8c 	.word	0x08006b8c
 80033b4:	08006bb8 	.word	0x08006bb8
 80033b8:	08006bca 	.word	0x08006bca
 80033bc:	08006bd7 	.word	0x08006bd7
 80033c0:	200000d4 	.word	0x200000d4
 80033c4:	200000cc 	.word	0x200000cc
 80033c8:	08006bdc 	.word	0x08006bdc
 80033cc:	08006be3 	.word	0x08006be3
 80033d0:	200000d0 	.word	0x200000d0
 80033d4:	08006be8 	.word	0x08006be8
 80033d8:	08006bed 	.word	0x08006bed
 80033dc:	08006c03 	.word	0x08006c03
 80033e0:	08006c1a 	.word	0x08006c1a
 80033e4:	08006c21 	.word	0x08006c21
 80033e8:	08006c1c 	.word	0x08006c1c
 80033ec:	08006c20 	.word	0x08006c20
 80033f0:	08006c24 	.word	0x08006c24
 80033f4:	08006c2d 	.word	0x08006c2d
 80033f8:	08006c36 	.word	0x08006c36
 80033fc:	08006c3f 	.word	0x08006c3f
 8003400:	08006c49 	.word	0x08006c49
 8003404:	08006c53 	.word	0x08006c53
 8003408:	08006c5c 	.word	0x08006c5c
 800340c:	08006c60 	.word	0x08006c60
 8003410:	08006c6e 	.word	0x08006c6e
 8003414:	08006c99 	.word	0x08006c99
 8003418:	08006cae 	.word	0x08006cae
 800341c:	08006be0 	.word	0x08006be0
 8003420:	08006cc4 	.word	0x08006cc4
 8003424:	08006cdb 	.word	0x08006cdb
 8003428:	08006cf8 	.word	0x08006cf8
 800342c:	08006d15 	.word	0x08006d15
 8003430:	08006d35 	.word	0x08006d35
 8003434:	08006d55 	.word	0x08006d55
 8003438:	08006dd3 	.word	0x08006dd3

0800343c <NMIException>:
* Output         : None
* Return         : None
*******************************************************************************/
void NMIException(void)
{
}
 800343c:	4770      	bx	lr
 800343e:	46c0      	nop			(mov r8, r8)

08003440 <HardFaultException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void HardFaultException(void)
{
 8003440:	e7fe      	b.n	8003440 <HardFaultException>
 8003442:	46c0      	nop			(mov r8, r8)

08003444 <MemManageException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void MemManageException(void)
{
 8003444:	e7fe      	b.n	8003444 <MemManageException>
 8003446:	46c0      	nop			(mov r8, r8)

08003448 <BusFaultException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void BusFaultException(void)
{
 8003448:	e7fe      	b.n	8003448 <BusFaultException>
 800344a:	46c0      	nop			(mov r8, r8)

0800344c <UsageFaultException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UsageFaultException(void)
{
 800344c:	e7fe      	b.n	800344c <UsageFaultException>
 800344e:	46c0      	nop			(mov r8, r8)

08003450 <DebugMonitor>:
* Output         : None
* Return         : None
*******************************************************************************/
void DebugMonitor(void)
{
}
 8003450:	4770      	bx	lr
 8003452:	46c0      	nop			(mov r8, r8)

08003454 <SVCHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SVCHandler(void)
{
}
 8003454:	4770      	bx	lr
 8003456:	46c0      	nop			(mov r8, r8)

08003458 <PendSVC>:
* Output         : None
* Return         : None
*******************************************************************************/
void PendSVC(void)
{
}
 8003458:	4770      	bx	lr
 800345a:	46c0      	nop			(mov r8, r8)

0800345c <WWDG_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void WWDG_IRQHandler(void)
{
}
 800345c:	4770      	bx	lr
 800345e:	46c0      	nop			(mov r8, r8)

08003460 <PVD_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void PVD_IRQHandler(void)
{
}
 8003460:	4770      	bx	lr
 8003462:	46c0      	nop			(mov r8, r8)

08003464 <TAMPER_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TAMPER_IRQHandler(void)
{
}
 8003464:	4770      	bx	lr
 8003466:	46c0      	nop			(mov r8, r8)

08003468 <RTC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void RTC_IRQHandler(void)
{
}
 8003468:	4770      	bx	lr
 800346a:	46c0      	nop			(mov r8, r8)

0800346c <FLASH_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void FLASH_IRQHandler(void)
{
}
 800346c:	4770      	bx	lr
 800346e:	46c0      	nop			(mov r8, r8)

08003470 <RCC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_IRQHandler(void)
{
}
 8003470:	4770      	bx	lr
 8003472:	46c0      	nop			(mov r8, r8)

08003474 <EXTI0_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI0_IRQHandler(void)
{
}
 8003474:	4770      	bx	lr
 8003476:	46c0      	nop			(mov r8, r8)

08003478 <EXTI1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI1_IRQHandler(void)
{
}
 8003478:	4770      	bx	lr
 800347a:	46c0      	nop			(mov r8, r8)

0800347c <EXTI2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI2_IRQHandler(void)
{
}
 800347c:	4770      	bx	lr
 800347e:	46c0      	nop			(mov r8, r8)

08003480 <EXTI3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI3_IRQHandler(void)
{
}
 8003480:	4770      	bx	lr
 8003482:	46c0      	nop			(mov r8, r8)

08003484 <EXTI4_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI4_IRQHandler(void)
{
}
 8003484:	4770      	bx	lr
 8003486:	46c0      	nop			(mov r8, r8)

08003488 <DMA1_Channel1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel1_IRQHandler(void)
{
}
 8003488:	4770      	bx	lr
 800348a:	46c0      	nop			(mov r8, r8)

0800348c <DMA1_Channel2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel2_IRQHandler(void)
{
}
 800348c:	4770      	bx	lr
 800348e:	46c0      	nop			(mov r8, r8)

08003490 <DMA1_Channel3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel3_IRQHandler(void)
{
}
 8003490:	4770      	bx	lr
 8003492:	46c0      	nop			(mov r8, r8)

08003494 <DMA1_Channel4_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel4_IRQHandler(void)
{
}
 8003494:	4770      	bx	lr
 8003496:	46c0      	nop			(mov r8, r8)

08003498 <DMA1_Channel5_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel5_IRQHandler(void)
{
}
 8003498:	4770      	bx	lr
 800349a:	46c0      	nop			(mov r8, r8)

0800349c <DMA1_Channel6_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel6_IRQHandler(void)
{
}
 800349c:	4770      	bx	lr
 800349e:	46c0      	nop			(mov r8, r8)

080034a0 <DMA1_Channel7_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel7_IRQHandler(void)
{
}
 80034a0:	4770      	bx	lr
 80034a2:	46c0      	nop			(mov r8, r8)

080034a4 <ADC1_2_IRQHandler>:
* Return         : None
*******************************************************************************/

void ADC1_2_IRQHandler(void)
{
}
 80034a4:	4770      	bx	lr
 80034a6:	46c0      	nop			(mov r8, r8)

080034a8 <USB_HP_CAN_TX_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USB_HP_CAN_TX_IRQHandler(void)
{
}
 80034a8:	4770      	bx	lr
 80034aa:	46c0      	nop			(mov r8, r8)

080034ac <USB_LP_CAN_RX0_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN_RX0_IRQHandler(void)
{
}
 80034ac:	4770      	bx	lr
 80034ae:	46c0      	nop			(mov r8, r8)

080034b0 <CAN_RX1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_RX1_IRQHandler(void)
{
}
 80034b0:	4770      	bx	lr
 80034b2:	46c0      	nop			(mov r8, r8)

080034b4 <CAN_SCE_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_SCE_IRQHandler(void)
{
}
 80034b4:	4770      	bx	lr
 80034b6:	46c0      	nop			(mov r8, r8)

080034b8 <EXTI9_5_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI9_5_IRQHandler(void)
{
}
 80034b8:	4770      	bx	lr
 80034ba:	46c0      	nop			(mov r8, r8)

080034bc <TIM1_BRK_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_BRK_IRQHandler(void)
{
}
 80034bc:	4770      	bx	lr
 80034be:	46c0      	nop			(mov r8, r8)

080034c0 <TIM1_UP_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_UP_IRQHandler(void)
{
}
 80034c0:	4770      	bx	lr
 80034c2:	46c0      	nop			(mov r8, r8)

080034c4 <TIM1_TRG_COM_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_TRG_COM_IRQHandler(void)
{
}
 80034c4:	4770      	bx	lr
 80034c6:	46c0      	nop			(mov r8, r8)

080034c8 <TIM1_CC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_CC_IRQHandler(void)
{
}
 80034c8:	4770      	bx	lr
 80034ca:	46c0      	nop			(mov r8, r8)

080034cc <TIM2_IRQHandler>:
* Return         : None
*******************************************************************************/
void TIM2_IRQHandler(void)
{
//	ISR_Timer_1ms();
}
 80034cc:	4770      	bx	lr
 80034ce:	46c0      	nop			(mov r8, r8)

080034d0 <TIM3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM3_IRQHandler(void)
{
}
 80034d0:	4770      	bx	lr
 80034d2:	46c0      	nop			(mov r8, r8)

080034d4 <TIM4_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM4_IRQHandler(void)
{
}
 80034d4:	4770      	bx	lr
 80034d6:	46c0      	nop			(mov r8, r8)

080034d8 <I2C1_EV_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_EV_IRQHandler(void)
{
}
 80034d8:	4770      	bx	lr
 80034da:	46c0      	nop			(mov r8, r8)

080034dc <I2C1_ER_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_ER_IRQHandler(void)
{
}
 80034dc:	4770      	bx	lr
 80034de:	46c0      	nop			(mov r8, r8)

080034e0 <I2C2_EV_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_EV_IRQHandler(void)
{
}
 80034e0:	4770      	bx	lr
 80034e2:	46c0      	nop			(mov r8, r8)

080034e4 <I2C2_ER_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_ER_IRQHandler(void)
{
}
 80034e4:	4770      	bx	lr
 80034e6:	46c0      	nop			(mov r8, r8)

080034e8 <SPI1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SPI1_IRQHandler(void)
{
}
 80034e8:	4770      	bx	lr
 80034ea:	46c0      	nop			(mov r8, r8)

080034ec <SPI2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SPI2_IRQHandler(void)
{
}
 80034ec:	4770      	bx	lr
 80034ee:	46c0      	nop			(mov r8, r8)

080034f0 <USART2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USART2_IRQHandler(void)
{
}
 80034f0:	4770      	bx	lr
 80034f2:	46c0      	nop			(mov r8, r8)

080034f4 <EXTI15_10_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI15_10_IRQHandler(void)
{
}
 80034f4:	4770      	bx	lr
 80034f6:	46c0      	nop			(mov r8, r8)

080034f8 <RTCAlarm_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void RTCAlarm_IRQHandler(void)
{
}
 80034f8:	4770      	bx	lr
 80034fa:	46c0      	nop			(mov r8, r8)

080034fc <USBWakeUp_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USBWakeUp_IRQHandler(void)
{
}
 80034fc:	4770      	bx	lr
 80034fe:	46c0      	nop			(mov r8, r8)

08003500 <TIM8_BRK_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_BRK_IRQHandler(void)
{
}
 8003500:	4770      	bx	lr
 8003502:	46c0      	nop			(mov r8, r8)

08003504 <TIM8_UP_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_UP_IRQHandler(void)
{
}
 8003504:	4770      	bx	lr
 8003506:	46c0      	nop			(mov r8, r8)

08003508 <TIM8_TRG_COM_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_TRG_COM_IRQHandler(void)
{
}
 8003508:	4770      	bx	lr
 800350a:	46c0      	nop			(mov r8, r8)

0800350c <TIM8_CC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_CC_IRQHandler(void)
{
}
 800350c:	4770      	bx	lr
 800350e:	46c0      	nop			(mov r8, r8)

08003510 <ADC3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void ADC3_IRQHandler(void)
{
}
 8003510:	4770      	bx	lr
 8003512:	46c0      	nop			(mov r8, r8)

08003514 <FSMC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void FSMC_IRQHandler(void)
{
}
 8003514:	4770      	bx	lr
 8003516:	46c0      	nop			(mov r8, r8)

08003518 <SDIO_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SDIO_IRQHandler(void)
{
}
 8003518:	4770      	bx	lr
 800351a:	46c0      	nop			(mov r8, r8)

0800351c <TIM5_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM5_IRQHandler(void)
{
}
 800351c:	4770      	bx	lr
 800351e:	46c0      	nop			(mov r8, r8)

08003520 <SPI3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SPI3_IRQHandler(void)
{
}
 8003520:	4770      	bx	lr
 8003522:	46c0      	nop			(mov r8, r8)

08003524 <UART4_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void UART4_IRQHandler(void)
{
}
 8003524:	4770      	bx	lr
 8003526:	46c0      	nop			(mov r8, r8)

08003528 <TIM6_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM6_IRQHandler(void)
{
}
 8003528:	4770      	bx	lr
 800352a:	46c0      	nop			(mov r8, r8)

0800352c <TIM7_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM7_IRQHandler(void)
{
}
 800352c:	4770      	bx	lr
 800352e:	46c0      	nop			(mov r8, r8)

08003530 <DMA2_Channel1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel1_IRQHandler(void)
{
}
 8003530:	4770      	bx	lr
 8003532:	46c0      	nop			(mov r8, r8)

08003534 <DMA2_Channel2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel2_IRQHandler(void)
{
}
 8003534:	4770      	bx	lr
 8003536:	46c0      	nop			(mov r8, r8)

08003538 <DMA2_Channel3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel3_IRQHandler(void)
{
}
 8003538:	4770      	bx	lr
 800353a:	46c0      	nop			(mov r8, r8)

0800353c <DMA2_Channel4_5_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel4_5_IRQHandler(void)
{
}
 800353c:	4770      	bx	lr
 800353e:	46c0      	nop			(mov r8, r8)

08003540 <UART5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UART5_IRQHandler(void)
{
 8003540:	b500      	push	{lr}
 8003542:	b081      	sub	sp, #4
#ifdef USING_ZIGBEE
	RxD_ZIG_Interrupt();
 8003544:	f001 fe00 	bl	8005148 <RxD_ZIG_Interrupt>
#endif
}
 8003548:	b001      	add	sp, #4
 800354a:	bd00      	pop	{pc}

0800354c <USART3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART3_IRQHandler(void)
{
 800354c:	b500      	push	{lr}
 800354e:	b081      	sub	sp, #4
#ifdef USING_PC_UART
	RxD_PCU_Interrupt();
 8003550:	f001 feb2 	bl	80052b8 <RxD_PCU_Interrupt>
#endif
}
 8003554:	b001      	add	sp, #4
 8003556:	bd00      	pop	{pc}

08003558 <USART1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART1_IRQHandler(void)
{
 8003558:	b500      	push	{lr}
 800355a:	b081      	sub	sp, #4
#ifdef USING_DYNAMIXEL
	RxD_DXL_Interrupt();
 800355c:	f001 fcc6 	bl	8004eec <RxD_DXL_Interrupt>
#endif
}
 8003560:	b001      	add	sp, #4
 8003562:	bd00      	pop	{pc}

08003564 <SysTickHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SysTickHandler(void)
{
 8003564:	b500      	push	{lr}
 8003566:	b081      	sub	sp, #4
	ISR_Delay_Base();
 8003568:	f001 f918 	bl	800479c <ISR_Delay_Base>
}
 800356c:	b001      	add	sp, #4
 800356e:	bd00      	pop	{pc}

08003570 <CheckPCNewArrive>:
#include "usart.h"

#ifdef USING_PC_UART

byte CheckPCNewArrive(void) {
	if (gbPcuRead != gbPcuWrite)
 8003570:	4b03      	ldr	r3, [pc, #12]	(8003580 <CheckPCNewArrive+0x10>)
 8003572:	881a      	ldrh	r2, [r3, #0]
 8003574:	4b03      	ldr	r3, [pc, #12]	(8003584 <CheckPCNewArrive+0x14>)
 8003576:	8818      	ldrh	r0, [r3, #0]
 8003578:	1a80      	subs	r0, r0, r2
 800357a:	bf18      	it	ne
 800357c:	2001      	movne	r0, #1
		return 1;
	else
		return 0;
}
 800357e:	4770      	bx	lr
 8003580:	200004da 	.word	0x200004da
 8003584:	200004d8 	.word	0x200004d8

08003588 <RxDByte_PC>:
byte RxDByte_PC(void) {
	byte bTemp;

	while (1) {
		if (gbPcuRead != gbPcuWrite)
 8003588:	f8df c020 	ldr.w	ip, [pc, #32]	; 80035ac <RxDByte_PC+0x24>
 800358c:	4808      	ldr	r0, [pc, #32]	(80035b0 <RxDByte_PC+0x28>)
 800358e:	f8bc 2000 	ldrh.w	r2, [ip]
 8003592:	8803      	ldrh	r3, [r0, #0]
 8003594:	4905      	ldr	r1, [pc, #20]	(80035ac <RxDByte_PC+0x24>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d0f9      	beq.n	800358e <RxDByte_PC+0x6>
			break;
	}

	bTemp = gbpPcuBuffer[gbPcuRead];
 800359a:	880b      	ldrh	r3, [r1, #0]
 800359c:	4a05      	ldr	r2, [pc, #20]	(80035b4 <RxDByte_PC+0x2c>)
 800359e:	b29b      	uxth	r3, r3
 80035a0:	5cd0      	ldrb	r0, [r2, r3]
	gbPcuRead++;
 80035a2:	880b      	ldrh	r3, [r1, #0]
 80035a4:	3301      	adds	r3, #1
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	800b      	strh	r3, [r1, #0]
	return bTemp;
}
 80035aa:	4770      	bx	lr
 80035ac:	200004da 	.word	0x200004da
 80035b0:	200004d8 	.word	0x200004d8
 80035b4:	200000d8 	.word	0x200000d8

080035b8 <TxD_Dec_S32>:
    }
}

//##############################################################################
void TxD_Dec_S32(s32 lLong)
{
 80035b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    u8 bCount, bPrinted;
    s32 lTmp,lDigit;
    bPrinted = 0;
    if(lLong < 0)
 80035ba:	2800      	cmp	r0, #0
    }
}

//##############################################################################
void TxD_Dec_S32(s32 lLong)
{
 80035bc:	b083      	sub	sp, #12
 80035be:	4604      	mov	r4, r0
    u8 bCount, bPrinted;
    s32 lTmp,lDigit;
    bPrinted = 0;
    if(lLong < 0)
 80035c0:	da04      	bge.n	80035cc <TxD_Dec_S32+0x14>
    {
        lLong = -lLong;
 80035c2:	f1c0 0400 	rsb	r4, r0, #0	; 0x0
        pcu_put_byte(  '-');
 80035c6:	202d      	movs	r0, #45
 80035c8:	f001 fe7c 	bl	80052c4 <pcu_put_byte>
 80035cc:	2700      	movs	r7, #0
 80035ce:	4e13      	ldr	r6, [pc, #76]	(800361c <TxD_Dec_S32+0x64>)
 80035d0:	9701      	str	r7, [sp, #4]
    }
    lDigit = 1000000000L;
    for(bCount = 0; bCount < 9; bCount++)
    {
        lTmp = (u8)(lLong/lDigit);
 80035d2:	fb94 f3f6 	sdiv	r3, r4, r6
 80035d6:	b2dd      	uxtb	r5, r3
        if(lTmp)
 80035d8:	b13d      	cbz	r5, 80035ea <TxD_Dec_S32+0x32>
        {
            pcu_put_byte( ((u8)lTmp)+'0');
 80035da:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80035de:	b2c0      	uxtb	r0, r0
 80035e0:	f001 fe70 	bl	80052c4 <pcu_put_byte>
 80035e4:	2101      	movs	r1, #1
 80035e6:	9101      	str	r1, [sp, #4]
 80035e8:	e004      	b.n	80035f4 <TxD_Dec_S32+0x3c>
            bPrinted = 1;
        }
        else if(bPrinted) pcu_put_byte( ((u8)lTmp)+'0');
 80035ea:	9b01      	ldr	r3, [sp, #4]
 80035ec:	b113      	cbz	r3, 80035f4 <TxD_Dec_S32+0x3c>
 80035ee:	2030      	movs	r0, #48
 80035f0:	f001 fe68 	bl	80052c4 <pcu_put_byte>
        lLong -= ((u32)lTmp)*lDigit;
        lDigit = lDigit/10;
 80035f4:	490a      	ldr	r1, [pc, #40]	(8003620 <TxD_Dec_S32+0x68>)
        {
            pcu_put_byte( ((u8)lTmp)+'0');
            bPrinted = 1;
        }
        else if(bPrinted) pcu_put_byte( ((u8)lTmp)+'0');
        lLong -= ((u32)lTmp)*lDigit;
 80035f6:	fb06 4415 	mls	r4, r6, r5, r4
        lDigit = lDigit/10;
 80035fa:	fb86 2301 	smull	r2, r3, r6, r1
 80035fe:	17f1      	asrs	r1, r6, #31
 8003600:	ebc1 06a3 	rsb	r6, r1, r3, asr #2
    {
        lLong = -lLong;
        pcu_put_byte(  '-');
    }
    lDigit = 1000000000L;
    for(bCount = 0; bCount < 9; bCount++)
 8003604:	1c7b      	adds	r3, r7, #1
 8003606:	b2df      	uxtb	r7, r3
 8003608:	2f09      	cmp	r7, #9
 800360a:	d1e2      	bne.n	80035d2 <TxD_Dec_S32+0x1a>
        else if(bPrinted) pcu_put_byte( ((u8)lTmp)+'0');
        lLong -= ((u32)lTmp)*lDigit;
        lDigit = lDigit/10;
    }
    lTmp = (u8)(lLong/lDigit);
    /*if(lTmp)*/ pcu_put_byte(  ((u8)lTmp)+'0');
 800360c:	fb94 f0f6 	sdiv	r0, r4, r6
 8003610:	3030      	adds	r0, #48
 8003612:	b2c0      	uxtb	r0, r0
 8003614:	f001 fe56 	bl	80052c4 <pcu_put_byte>
}
 8003618:	b003      	add	sp, #12
 800361a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800361c:	3b9aca00 	.word	0x3b9aca00
 8003620:	66666667 	.word	0x66666667

08003624 <TxD_Dec_S16>:
        wDigit /= 10;
    }
}
//##############################################################################
void TxD_Dec_S16(s16 wData)
{
 8003624:	b5f0      	push	{r4, r5, r6, r7, lr}
    u16 wTmp,wDigit;
    u8 bMinus = 0;

    bPrinted = 0;

    if (wData&0x8000) {
 8003626:	2800      	cmp	r0, #0
        wDigit /= 10;
    }
}
//##############################################################################
void TxD_Dec_S16(s16 wData)
{
 8003628:	b083      	sub	sp, #12
 800362a:	4605      	mov	r5, r0
    u16 wTmp,wDigit;
    u8 bMinus = 0;

    bPrinted = 0;

    if (wData&0x8000) {
 800362c:	db02      	blt.n	8003634 <TxD_Dec_S16+0x10>
 800362e:	2100      	movs	r1, #0
 8003630:	9101      	str	r1, [sp, #4]
 8003632:	e004      	b.n	800363e <TxD_Dec_S16+0x1a>
        bMinus = 1;
        wData = -wData;
 8003634:	f1c0 0300 	rsb	r3, r0, #0	; 0x0
 8003638:	2201      	movs	r2, #1
 800363a:	b21d      	sxth	r5, r3
 800363c:	9201      	str	r2, [sp, #4]
 800363e:	2700      	movs	r7, #0
 8003640:	9700      	str	r7, [sp, #0]
 8003642:	f242 7610 	movw	r6, #10000	; 0x2710

    wDigit = 10000;
    for(bCount = 0; bCount < 5; bCount++)
    {
        wTmp = (wData/wDigit);
        if(wTmp && !bPrinted)
 8003646:	9900      	ldr	r1, [sp, #0]
    }

    wDigit = 10000;
    for(bCount = 0; bCount < 5; bCount++)
    {
        wTmp = (wData/wDigit);
 8003648:	fb95 f3f6 	sdiv	r3, r5, r6
 800364c:	b29c      	uxth	r4, r3
        if(wTmp && !bPrinted)
 800364e:	f081 0301 	eor.w	r3, r1, #1	; 0x1
 8003652:	2c00      	cmp	r4, #0
 8003654:	bf0c      	ite	eq
 8003656:	2300      	moveq	r3, #0
 8003658:	f003 0301 	andne.w	r3, r3, #1	; 0x1
 800365c:	b163      	cbz	r3, 8003678 <TxD_Dec_S16+0x54>
        {
            if (bMinus) pcu_put_byte( '-');
 800365e:	9a01      	ldr	r2, [sp, #4]
 8003660:	b112      	cbz	r2, 8003668 <TxD_Dec_S16+0x44>
 8003662:	202d      	movs	r0, #45
 8003664:	f001 fe2e 	bl	80052c4 <pcu_put_byte>
            pcu_put_byte( ((u8)wTmp)+'0');
 8003668:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800366c:	b2c0      	uxtb	r0, r0
 800366e:	f001 fe29 	bl	80052c4 <pcu_put_byte>
 8003672:	2301      	movs	r3, #1
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	e00c      	b.n	8003692 <TxD_Dec_S16+0x6e>
            bPrinted = 1;
        }
        else
        {
            if(bPrinted) pcu_put_byte( ((u8)wTmp)+'0');
 8003678:	9900      	ldr	r1, [sp, #0]
 800367a:	b119      	cbz	r1, 8003684 <TxD_Dec_S16+0x60>
 800367c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003680:	b2c0      	uxtb	r0, r0
 8003682:	e004      	b.n	800368e <TxD_Dec_S16+0x6a>
            else
            {
                if(bCount < 4) pcu_put_byte( ' ');
 8003684:	2f04      	cmp	r7, #4
 8003686:	d001      	beq.n	800368c <TxD_Dec_S16+0x68>
 8003688:	2020      	movs	r0, #32
 800368a:	e000      	b.n	800368e <TxD_Dec_S16+0x6a>
                else pcu_put_byte(  '0');
 800368c:	2030      	movs	r0, #48
 800368e:	f001 fe19 	bl	80052c4 <pcu_put_byte>
        bMinus = 1;
        wData = -wData;
    }

    wDigit = 10000;
    for(bCount = 0; bCount < 5; bCount++)
 8003692:	1c7b      	adds	r3, r7, #1
 8003694:	b2df      	uxtb	r7, r3
 8003696:	2f05      	cmp	r7, #5
 8003698:	d008      	beq.n	80036ac <TxD_Dec_S16+0x88>
            {
                if(bCount < 4) pcu_put_byte( ' ');
                else pcu_put_byte(  '0');
            }
        }
        wData -= wTmp*wDigit;
 800369a:	fb06 5314 	mls	r3, r6, r4, r5
        wDigit /= 10;
 800369e:	4904      	ldr	r1, [pc, #16]	(80036b0 <TxD_Dec_S16+0x8c>)
            {
                if(bCount < 4) pcu_put_byte( ' ');
                else pcu_put_byte(  '0');
            }
        }
        wData -= wTmp*wDigit;
 80036a0:	b21d      	sxth	r5, r3
        wDigit /= 10;
 80036a2:	fba6 2301 	umull	r2, r3, r6, r1
 80036a6:	08db      	lsrs	r3, r3, #3
 80036a8:	b29e      	uxth	r6, r3
 80036aa:	e7cc      	b.n	8003646 <TxD_Dec_S16+0x22>
    }
}
 80036ac:	b003      	add	sp, #12
 80036ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036b0:	cccccccd 	.word	0xcccccccd

080036b4 <TxD_Dec_S8>:
    }
}

//##############################################################################
void TxD_Dec_S8(s8 wData)
{
 80036b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    u16 wTmp,wDigit;
    u8 bMinus = 0;

    bPrinted = 0;

    if (wData&0x80) {
 80036b6:	2800      	cmp	r0, #0
    }
}

//##############################################################################
void TxD_Dec_S8(s8 wData)
{
 80036b8:	b083      	sub	sp, #12
 80036ba:	4605      	mov	r5, r0
    u16 wTmp,wDigit;
    u8 bMinus = 0;

    bPrinted = 0;

    if (wData&0x80) {
 80036bc:	db02      	blt.n	80036c4 <TxD_Dec_S8+0x10>
 80036be:	2100      	movs	r1, #0
 80036c0:	9101      	str	r1, [sp, #4]
 80036c2:	e004      	b.n	80036ce <TxD_Dec_S8+0x1a>
        bMinus = 1;
        wData = -wData;
 80036c4:	f1c0 0300 	rsb	r3, r0, #0	; 0x0
 80036c8:	2201      	movs	r2, #1
 80036ca:	b25d      	sxtb	r5, r3
 80036cc:	9201      	str	r2, [sp, #4]
 80036ce:	2300      	movs	r3, #0
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	2700      	movs	r7, #0
 80036d4:	2664      	movs	r6, #100
    }

    wDigit = 100;
    for(bCount = 0; bCount < 3; bCount++)
    {
        wTmp = (wData/wDigit);
 80036d6:	fb95 f3f6 	sdiv	r3, r5, r6
 80036da:	b29c      	uxth	r4, r3
        if(wTmp && !bPrinted)
 80036dc:	f087 0301 	eor.w	r3, r7, #1	; 0x1
 80036e0:	2c00      	cmp	r4, #0
 80036e2:	bf0c      	ite	eq
 80036e4:	2300      	moveq	r3, #0
 80036e6:	f003 0301 	andne.w	r3, r3, #1	; 0x1
 80036ea:	b15b      	cbz	r3, 8003704 <TxD_Dec_S8+0x50>
        {
            if (bMinus) pcu_put_byte( '-');
 80036ec:	9901      	ldr	r1, [sp, #4]
 80036ee:	b111      	cbz	r1, 80036f6 <TxD_Dec_S8+0x42>
 80036f0:	202d      	movs	r0, #45
 80036f2:	f001 fde7 	bl	80052c4 <pcu_put_byte>
            pcu_put_byte( ((u8)wTmp)+'0');
 80036f6:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80036fa:	b2c0      	uxtb	r0, r0
 80036fc:	f001 fde2 	bl	80052c4 <pcu_put_byte>
 8003700:	2701      	movs	r7, #1
 8003702:	e007      	b.n	8003714 <TxD_Dec_S8+0x60>
            bPrinted = 1;
        }
        else
        {
            if(bPrinted) pcu_put_byte( ((u8)wTmp)+'0');
 8003704:	b11f      	cbz	r7, 800370e <TxD_Dec_S8+0x5a>
 8003706:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800370a:	b2c0      	uxtb	r0, r0
 800370c:	e000      	b.n	8003710 <TxD_Dec_S8+0x5c>
            else
            {
                if(bCount < 4) pcu_put_byte( ' ');
 800370e:	2020      	movs	r0, #32
 8003710:	f001 fdd8 	bl	80052c4 <pcu_put_byte>
        bMinus = 1;
        wData = -wData;
    }

    wDigit = 100;
    for(bCount = 0; bCount < 3; bCount++)
 8003714:	9a00      	ldr	r2, [sp, #0]
 8003716:	1c53      	adds	r3, r2, #1
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b03      	cmp	r3, #3
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	d008      	beq.n	8003732 <TxD_Dec_S8+0x7e>
            {
                if(bCount < 4) pcu_put_byte( ' ');
                else pcu_put_byte(  '0');
            }
        }
        wData -= wTmp*wDigit;
 8003720:	fb06 5314 	mls	r3, r6, r4, r5
        wDigit /= 10;
 8003724:	4904      	ldr	r1, [pc, #16]	(8003738 <TxD_Dec_S8+0x84>)
            {
                if(bCount < 4) pcu_put_byte( ' ');
                else pcu_put_byte(  '0');
            }
        }
        wData -= wTmp*wDigit;
 8003726:	b25d      	sxtb	r5, r3
        wDigit /= 10;
 8003728:	fba6 2301 	umull	r2, r3, r6, r1
 800372c:	08db      	lsrs	r3, r3, #3
 800372e:	b29e      	uxth	r6, r3
 8003730:	e7d1      	b.n	80036d6 <TxD_Dec_S8+0x22>
    }
}
 8003732:	b003      	add	sp, #12
 8003734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003736:	46c0      	nop			(mov r8, r8)
 8003738:	cccccccd 	.word	0xcccccccd

0800373c <TxD_Dec_U32>:
    }
}

//##############################################################################
void TxD_Dec_U32(u32 wData)
{
 800373c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800373e:	2600      	movs	r6, #0
 8003740:	b083      	sub	sp, #12
 8003742:	4c12      	ldr	r4, [pc, #72]	(800378c <TxD_Dec_U32+0x50>)
 8003744:	4607      	mov	r7, r0
 8003746:	9601      	str	r6, [sp, #4]

    wDigit = 1000000000;

    for(bCount = 0; bCount < 10; bCount++)
    {
        wTmp = (wData/wDigit);
 8003748:	fbb7 f5f4 	udiv	r5, r7, r4
        if(wTmp)
 800374c:	b13d      	cbz	r5, 800375e <TxD_Dec_U32+0x22>
        {
            pcu_put_byte( ((u8)wTmp)+'0');
 800374e:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8003752:	b2c0      	uxtb	r0, r0
 8003754:	f001 fdb6 	bl	80052c4 <pcu_put_byte>
 8003758:	2101      	movs	r1, #1
 800375a:	9101      	str	r1, [sp, #4]
 800375c:	e008      	b.n	8003770 <TxD_Dec_U32+0x34>
            bPrinted = 1;
        }
        else
        {
            if(bPrinted) pcu_put_byte( ((u8)wTmp)+'0');
 800375e:	9b01      	ldr	r3, [sp, #4]
 8003760:	b91b      	cbnz	r3, 800376a <TxD_Dec_U32+0x2e>
            else
            {
                if(bCount < 4) pcu_put_byte( ' ');
 8003762:	2e03      	cmp	r6, #3
 8003764:	d801      	bhi.n	800376a <TxD_Dec_U32+0x2e>
 8003766:	2020      	movs	r0, #32
 8003768:	e000      	b.n	800376c <TxD_Dec_U32+0x30>
                else pcu_put_byte( '0');
 800376a:	2030      	movs	r0, #48
 800376c:	f001 fdaa 	bl	80052c4 <pcu_put_byte>
    u32 wTmp,wDigit;
    bPrinted = 0;

    wDigit = 1000000000;

    for(bCount = 0; bCount < 10; bCount++)
 8003770:	1c73      	adds	r3, r6, #1
 8003772:	b2de      	uxtb	r6, r3
 8003774:	2e0a      	cmp	r6, #10
 8003776:	d006      	beq.n	8003786 <TxD_Dec_U32+0x4a>
                if(bCount < 4) pcu_put_byte( ' ');
                else pcu_put_byte( '0');
            }
        }
        wData -= wTmp*wDigit;
        wDigit /= 10;
 8003778:	4905      	ldr	r1, [pc, #20]	(8003790 <TxD_Dec_U32+0x54>)
            {
                if(bCount < 4) pcu_put_byte( ' ');
                else pcu_put_byte( '0');
            }
        }
        wData -= wTmp*wDigit;
 800377a:	fb04 7715 	mls	r7, r4, r5, r7
        wDigit /= 10;
 800377e:	fba4 2301 	umull	r2, r3, r4, r1
 8003782:	08dc      	lsrs	r4, r3, #3
 8003784:	e7e0      	b.n	8003748 <TxD_Dec_U32+0xc>
    }
}
 8003786:	b003      	add	sp, #12
 8003788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800378a:	46c0      	nop			(mov r8, r8)
 800378c:	3b9aca00 	.word	0x3b9aca00
 8003790:	cccccccd 	.word	0xcccccccd

08003794 <TxD_Dec_U16>:
    pcu_put_byte( bByte - bTmp*10+'0');
}

//##############################################################################
void TxD_Dec_U16(u16 wData)
{
 8003794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003796:	2600      	movs	r6, #0
 8003798:	b083      	sub	sp, #12
 800379a:	4607      	mov	r7, r0
 800379c:	9601      	str	r6, [sp, #4]
 800379e:	f242 7410 	movw	r4, #10000	; 0x2710
    bPrinted = 0;

    wDigit = 10000;
    for(bCount = 0; bCount < 5; bCount++)
    {
        wTmp = (wData/wDigit);
 80037a2:	fbb7 f5f4 	udiv	r5, r7, r4
        if(wTmp)
 80037a6:	b13d      	cbz	r5, 80037b8 <TxD_Dec_U16+0x24>
        {
            pcu_put_byte( ((u8)wTmp)+'0');
 80037a8:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80037ac:	b2c0      	uxtb	r0, r0
 80037ae:	f001 fd89 	bl	80052c4 <pcu_put_byte>
 80037b2:	2101      	movs	r1, #1
 80037b4:	9101      	str	r1, [sp, #4]
 80037b6:	e008      	b.n	80037ca <TxD_Dec_U16+0x36>
            bPrinted = 1;
        }
        else
        {
            if(bPrinted) pcu_put_byte( ((u8)wTmp)+'0');
 80037b8:	9b01      	ldr	r3, [sp, #4]
 80037ba:	b91b      	cbnz	r3, 80037c4 <TxD_Dec_U16+0x30>
            else
            {
                if(bCount < 4) pcu_put_byte( ' ');
 80037bc:	2e04      	cmp	r6, #4
 80037be:	d001      	beq.n	80037c4 <TxD_Dec_U16+0x30>
 80037c0:	2020      	movs	r0, #32
 80037c2:	e000      	b.n	80037c6 <TxD_Dec_U16+0x32>
                else pcu_put_byte( '0');
 80037c4:	2030      	movs	r0, #48
 80037c6:	f001 fd7d 	bl	80052c4 <pcu_put_byte>
    u8 bCount, bPrinted;
    u16 wTmp,wDigit;
    bPrinted = 0;

    wDigit = 10000;
    for(bCount = 0; bCount < 5; bCount++)
 80037ca:	1c73      	adds	r3, r6, #1
 80037cc:	b2de      	uxtb	r6, r3
 80037ce:	2e05      	cmp	r6, #5
 80037d0:	d008      	beq.n	80037e4 <TxD_Dec_U16+0x50>
            {
                if(bCount < 4) pcu_put_byte( ' ');
                else pcu_put_byte( '0');
            }
        }
        wData -= wTmp*wDigit;
 80037d2:	fb04 7315 	mls	r3, r4, r5, r7
        wDigit /= 10;
 80037d6:	4904      	ldr	r1, [pc, #16]	(80037e8 <TxD_Dec_U16+0x54>)
            {
                if(bCount < 4) pcu_put_byte( ' ');
                else pcu_put_byte( '0');
            }
        }
        wData -= wTmp*wDigit;
 80037d8:	b29f      	uxth	r7, r3
        wDigit /= 10;
 80037da:	fba4 2301 	umull	r2, r3, r4, r1
 80037de:	08db      	lsrs	r3, r3, #3
 80037e0:	b29c      	uxth	r4, r3
 80037e2:	e7de      	b.n	80037a2 <TxD_Dec_U16+0xe>
    }
}
 80037e4:	b003      	add	sp, #12
 80037e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037e8:	cccccccd 	.word	0xcccccccd

080037ec <TxD_Dec_U8>:

//##############################################################################
void TxD_Dec_U8(u8 bByte)
{
    u8 bTmp;
    bTmp = bByte/100;
 80037ec:	4a16      	ldr	r2, [pc, #88]	(8003848 <TxD_Dec_U8+0x5c>)
	return;
}

//##############################################################################
void TxD_Dec_U8(u8 bByte)
{
 80037ee:	b530      	push	{r4, r5, lr}
    u8 bTmp;
    bTmp = bByte/100;
 80037f0:	fba0 2302 	umull	r2, r3, r0, r2
 80037f4:	095c      	lsrs	r4, r3, #5
 80037f6:	b2e4      	uxtb	r4, r4
	return;
}

//##############################################################################
void TxD_Dec_U8(u8 bByte)
{
 80037f8:	4605      	mov	r5, r0
    u8 bTmp;
    bTmp = bByte/100;
    /*if(bTmp)*/ pcu_put_byte(bTmp+'0');
 80037fa:	f104 0030 	add.w	r0, r4, #48	; 0x30
	return;
}

//##############################################################################
void TxD_Dec_U8(u8 bByte)
{
 80037fe:	b081      	sub	sp, #4
    u8 bTmp;
    bTmp = bByte/100;
    /*if(bTmp)*/ pcu_put_byte(bTmp+'0');
 8003800:	b2c0      	uxtb	r0, r0
 8003802:	f001 fd5f 	bl	80052c4 <pcu_put_byte>
    bByte -= bTmp*100;
 8003806:	ebc4 6344 	rsb	r3, r4, r4, lsl #25
 800380a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800380e:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
 8003812:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    bTmp = bByte/10;
 8003816:	4a0d      	ldr	r2, [pc, #52]	(800384c <TxD_Dec_U8+0x60>)
void TxD_Dec_U8(u8 bByte)
{
    u8 bTmp;
    bTmp = bByte/100;
    /*if(bTmp)*/ pcu_put_byte(bTmp+'0');
    bByte -= bTmp*100;
 8003818:	b2ed      	uxtb	r5, r5
    bTmp = bByte/10;
 800381a:	fba5 2302 	umull	r2, r3, r5, r2
 800381e:	08dc      	lsrs	r4, r3, #3
 8003820:	b2e4      	uxtb	r4, r4
    /*if(bTmp)*/ pcu_put_byte( bTmp+'0');
 8003822:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003826:	b2c0      	uxtb	r0, r0
 8003828:	f001 fd4c 	bl	80052c4 <pcu_put_byte>
    pcu_put_byte( bByte - bTmp*10+'0');
 800382c:	ebc4 7344 	rsb	r3, r4, r4, lsl #29
 8003830:	3530      	adds	r5, #48
 8003832:	ebc4 0483 	rsb	r4, r4, r3, lsl #2
 8003836:	eb05 0544 	add.w	r5, r5, r4, lsl #1
 800383a:	b2ed      	uxtb	r5, r5
 800383c:	4628      	mov	r0, r5
 800383e:	f001 fd41 	bl	80052c4 <pcu_put_byte>
}
 8003842:	b001      	add	sp, #4
 8003844:	bd30      	pop	{r4, r5, pc}
 8003846:	46c0      	nop			(mov r8, r8)
 8003848:	51eb851f 	.word	0x51eb851f
 800384c:	cccccccd 	.word	0xcccccccd

08003850 <std_putchar>:
	pcu_hal_close();
}

//##############################################################################
int std_putchar(char c) {
	if (c == '\n') {
 8003850:	280a      	cmp	r0, #10
void pcu_terminate(void) {
	pcu_hal_close();
}

//##############################################################################
int std_putchar(char c) {
 8003852:	b510      	push	{r4, lr}
 8003854:	4604      	mov	r4, r0
	if (c == '\n') {
		pcu_put_byte((u8) '\r'); //0x0D
		pcu_put_byte((u8) '\n'); //0x0A
	} else {
		pcu_put_byte((u8) c);
 8003856:	bf18      	it	ne
 8003858:	4600      	movne	r0, r0
	pcu_hal_close();
}

//##############################################################################
int std_putchar(char c) {
	if (c == '\n') {
 800385a:	d103      	bne.n	8003864 <std_putchar+0x14>
		pcu_put_byte((u8) '\r'); //0x0D
 800385c:	200d      	movs	r0, #13
 800385e:	f001 fd31 	bl	80052c4 <pcu_put_byte>
		pcu_put_byte((u8) '\n'); //0x0A
 8003862:	200a      	movs	r0, #10
	} else {
		pcu_put_byte((u8) c);
 8003864:	f001 fd2e 	bl	80052c4 <pcu_put_byte>
	}

	return c;
}
 8003868:	4620      	mov	r0, r4
 800386a:	bd10      	pop	{r4, pc}

0800386c <PrintChar>:
	if (dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
		std_puts("\nInstruction code error!\n");
}

//##############################################################################
int PrintChar(char c) {
 800386c:	b500      	push	{lr}
 800386e:	b081      	sub	sp, #4
	return std_putchar(c);
 8003870:	f7ff ffee 	bl	8003850 <std_putchar>
}
 8003874:	b001      	add	sp, #4
 8003876:	bd00      	pop	{pc}

08003878 <std_puts>:

	return c;
}

//##############################################################################
int std_puts(const char *str) {
 8003878:	b530      	push	{r4, r5, lr}
 800387a:	4605      	mov	r5, r0
 800387c:	b081      	sub	sp, #4
 800387e:	2400      	movs	r4, #0
 8003880:	e002      	b.n	8003888 <std_puts+0x10>
	int n = 0;
	while (str[n])
		std_putchar(str[n++]);
 8003882:	3401      	adds	r4, #1
 8003884:	f7ff ffe4 	bl	8003850 <std_putchar>
}

//##############################################################################
int std_puts(const char *str) {
	int n = 0;
	while (str[n])
 8003888:	5d28      	ldrb	r0, [r5, r4]
 800388a:	2800      	cmp	r0, #0
 800388c:	d1f9      	bne.n	8003882 <std_puts+0xa>
		std_putchar(str[n++]);

	return n;
}
 800388e:	4620      	mov	r0, r4
 8003890:	b001      	add	sp, #4
 8003892:	bd30      	pop	{r4, r5, pc}

08003894 <Printu8h>:
	std_puts(out);
	return;
}

//##############################################################################
void Printu8h(u8 bNum) {
 8003894:	b500      	push	{lr}
	char out[5];
	out[0] = '0';
 8003896:	2330      	movs	r3, #48
	std_puts(out);
	return;
}

//##############################################################################
void Printu8h(u8 bNum) {
 8003898:	b083      	sub	sp, #12
	char out[5];
	out[0] = '0';
 800389a:	f88d 3003 	strb.w	r3, [sp, #3]
	out[1] = 'x';
 800389e:	2378      	movs	r3, #120
 80038a0:	f88d 3004 	strb.w	r3, [sp, #4]
	out[4] = '\0';
 80038a4:	2300      	movs	r3, #0
 80038a6:	f88d 3007 	strb.w	r3, [sp, #7]

	out[2] = (char) ((bNum >> 4) & 0x0F) + 0x30;
 80038aa:	0903      	lsrs	r3, r0, #4
 80038ac:	3330      	adds	r3, #48
	if (out[2] > '9')
 80038ae:	2b39      	cmp	r3, #57
	char out[5];
	out[0] = '0';
	out[1] = 'x';
	out[4] = '\0';

	out[2] = (char) ((bNum >> 4) & 0x0F) + 0x30;
 80038b0:	f88d 3005 	strb.w	r3, [sp, #5]
	if (out[2] > '9')
 80038b4:	d902      	bls.n	80038bc <Printu8h+0x28>
		out[2] += 7;
 80038b6:	3307      	adds	r3, #7
 80038b8:	f88d 3005 	strb.w	r3, [sp, #5]

	out[3] = (char) (bNum & 0x0F) + 0x30;
 80038bc:	f000 030f 	and.w	r3, r0, #15	; 0xf
 80038c0:	f103 0030 	add.w	r0, r3, #48	; 0x30
	if (out[3] > '9')
 80038c4:	2839      	cmp	r0, #57

	out[2] = (char) ((bNum >> 4) & 0x0F) + 0x30;
	if (out[2] > '9')
		out[2] += 7;

	out[3] = (char) (bNum & 0x0F) + 0x30;
 80038c6:	f88d 0006 	strb.w	r0, [sp, #6]
	if (out[3] > '9')
 80038ca:	d902      	bls.n	80038d2 <Printu8h+0x3e>
		out[3] += 7;
 80038cc:	1dc3      	adds	r3, r0, #7
 80038ce:	f88d 3006 	strb.w	r3, [sp, #6]

	std_puts(out);
 80038d2:	f10d 0003 	add.w	r0, sp, #3	; 0x3
 80038d6:	f7ff ffcf 	bl	8003878 <std_puts>
	return;
}
 80038da:	b003      	add	sp, #12
 80038dc:	bd00      	pop	{pc}
 80038de:	46c0      	nop			(mov r8, r8)

080038e0 <Printu16h>:
	std_puts(out);
	return;
}

//##############################################################################
void Printu16h(u16 wNum) {
 80038e0:	b500      	push	{lr}
	char out[7];
	out[0] = '0';
 80038e2:	2330      	movs	r3, #48
	std_puts(out);
	return;
}

//##############################################################################
void Printu16h(u16 wNum) {
 80038e4:	b083      	sub	sp, #12
	char out[7];
	out[0] = '0';
 80038e6:	f88d 3001 	strb.w	r3, [sp, #1]
	out[1] = 'x';
 80038ea:	2378      	movs	r3, #120
 80038ec:	f88d 3002 	strb.w	r3, [sp, #2]
	out[6] = '\0';
 80038f0:	2300      	movs	r3, #0
 80038f2:	f88d 3007 	strb.w	r3, [sp, #7]

	out[2] = (char) ((wNum >> 12) & 0x0F) + 0x30;
 80038f6:	0b03      	lsrs	r3, r0, #12
 80038f8:	3330      	adds	r3, #48
	if (out[2] > '9')
 80038fa:	2b39      	cmp	r3, #57
	char out[7];
	out[0] = '0';
	out[1] = 'x';
	out[6] = '\0';

	out[2] = (char) ((wNum >> 12) & 0x0F) + 0x30;
 80038fc:	f88d 3003 	strb.w	r3, [sp, #3]
	if (out[2] > '9')
 8003900:	d902      	bls.n	8003908 <Printu16h+0x28>
		out[2] += 7;
 8003902:	3307      	adds	r3, #7
 8003904:	f88d 3003 	strb.w	r3, [sp, #3]

	out[3] = (char) ((wNum >> 8) & 0x0F) + 0x30;
 8003908:	0a03      	lsrs	r3, r0, #8
 800390a:	f003 030f 	and.w	r3, r3, #15	; 0xf
 800390e:	3330      	adds	r3, #48
	if (out[3] > '9')
 8003910:	2b39      	cmp	r3, #57

	out[2] = (char) ((wNum >> 12) & 0x0F) + 0x30;
	if (out[2] > '9')
		out[2] += 7;

	out[3] = (char) ((wNum >> 8) & 0x0F) + 0x30;
 8003912:	f88d 3004 	strb.w	r3, [sp, #4]
	if (out[3] > '9')
 8003916:	d902      	bls.n	800391e <Printu16h+0x3e>
		out[3] += 7;
 8003918:	3307      	adds	r3, #7
 800391a:	f88d 3004 	strb.w	r3, [sp, #4]

	out[4] = (char) ((wNum >> 4) & 0x0F) + 0x30;
 800391e:	0903      	lsrs	r3, r0, #4
 8003920:	f003 030f 	and.w	r3, r3, #15	; 0xf
 8003924:	3330      	adds	r3, #48
	if (out[4] > '9')
 8003926:	2b39      	cmp	r3, #57

	out[3] = (char) ((wNum >> 8) & 0x0F) + 0x30;
	if (out[3] > '9')
		out[3] += 7;

	out[4] = (char) ((wNum >> 4) & 0x0F) + 0x30;
 8003928:	f88d 3005 	strb.w	r3, [sp, #5]
	if (out[4] > '9')
 800392c:	d902      	bls.n	8003934 <Printu16h+0x54>
		out[4] += 7;
 800392e:	3307      	adds	r3, #7
 8003930:	f88d 3005 	strb.w	r3, [sp, #5]

	out[5] = (char) (wNum & 0x0F) + 0x30;
 8003934:	f000 030f 	and.w	r3, r0, #15	; 0xf
 8003938:	f103 0030 	add.w	r0, r3, #48	; 0x30
	if (out[5] > '9')
 800393c:	2839      	cmp	r0, #57

	out[4] = (char) ((wNum >> 4) & 0x0F) + 0x30;
	if (out[4] > '9')
		out[4] += 7;

	out[5] = (char) (wNum & 0x0F) + 0x30;
 800393e:	f88d 0006 	strb.w	r0, [sp, #6]
	if (out[5] > '9')
 8003942:	d902      	bls.n	800394a <Printu16h+0x6a>
		out[5] += 7;
 8003944:	1dc3      	adds	r3, r0, #7
 8003946:	f88d 3006 	strb.w	r3, [sp, #6]

	std_puts(out);
 800394a:	f10d 0001 	add.w	r0, sp, #1	; 0x1
 800394e:	f7ff ff93 	bl	8003878 <std_puts>
	return;
}
 8003952:	b003      	add	sp, #12
 8003954:	bd00      	pop	{pc}
 8003956:	46c0      	nop			(mov r8, r8)

08003958 <Prints32d>:
	std_puts(out);
	return;
}

//##############################################################################
void Prints32d(s32 lNumS) {
 8003958:	b500      	push	{lr}
 800395a:	b085      	sub	sp, #20

	if (lNum < 0) {
		out[0] = '-';
		lNum = (u32) ((~lNumS) + 1);
	} else {
		out[0] = '+';
 800395c:	a904      	add	r1, sp, #16
 800395e:	232b      	movs	r3, #43
		lNum = (u32) (lNumS);
 8003960:	4a18      	ldr	r2, [pc, #96]	(80039c4 <Prints32d+0x6c>)
		temp = (lNum / div);
		lNum = (lNum % div);
//        lNum -= (u32) (temp*div);
//        out[i] = (char) (temp&0x0000000F)+0x30;
		out[i] = (char) ((temp & 0x0F) + 0x30);
		div /= 10;
 8003962:	f8df e064 	ldr.w	lr, [pc, #100]	; 80039c8 <Prints32d+0x70>

	if (lNum < 0) {
		out[0] = '-';
		lNum = (u32) ((~lNumS) + 1);
	} else {
		out[0] = '+';
 8003966:	f801 3d0c 	strb.w	r3, [r1, #-12]!
		lNum = (u32) (lNumS);
	}

	for (i = 1; i < 11; i++) {
 800396a:	f10d 0c0e 	add.w	ip, sp, #14	; 0xe
		temp = (lNum / div);
 800396e:	fbb0 f3f2 	udiv	r3, r0, r2
		lNum = (lNum % div);
 8003972:	fb02 0013 	mls	r0, r2, r3, r0
//        lNum -= (u32) (temp*div);
//        out[i] = (char) (temp&0x0000000F)+0x30;
		out[i] = (char) ((temp & 0x0F) + 0x30);
 8003976:	f003 030f 	and.w	r3, r3, #15	; 0xf
 800397a:	3330      	adds	r3, #48
 800397c:	f801 3f01 	strb.w	r3, [r1, #1]!
		div /= 10;
 8003980:	fba2 230e 	umull	r2, r3, r2, lr
 8003984:	08da      	lsrs	r2, r3, #3
	} else {
		out[0] = '+';
		lNum = (u32) (lNumS);
	}

	for (i = 1; i < 11; i++) {
 8003986:	4561      	cmp	r1, ip
 8003988:	d1f1      	bne.n	800396e <Prints32d+0x16>
//        lNum -= (u32) (temp*div);
//        out[i] = (char) (temp&0x0000000F)+0x30;
		out[i] = (char) ((temp & 0x0F) + 0x30);
		div /= 10;
	}
	out[i] = '\0';
 800398a:	2300      	movs	r3, #0
 800398c:	f88d 300f 	strb.w	r3, [sp, #15]
 8003990:	2100      	movs	r1, #0

	for (i = 0; i < 11; i++) {
		if (out[0] == '0') {
 8003992:	f10d 0005 	add.w	r0, sp, #5	; 0x5
 8003996:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800399a:	2b30      	cmp	r3, #48
 800399c:	d108      	bne.n	80039b0 <Prints32d+0x58>
 800399e:	4602      	mov	r2, r0
			for (j = 0; j < 11; j++) {
				out[j] = out[j + 1];
 80039a0:	7813      	ldrb	r3, [r2, #0]
 80039a2:	f802 3c01 	strb.w	r3, [r2, #-1]
				if (out[j] == '\0')
 80039a6:	b11b      	cbz	r3, 80039b0 <Prints32d+0x58>
					break;
 80039a8:	3201      	adds	r2, #1
	}
	out[i] = '\0';

	for (i = 0; i < 11; i++) {
		if (out[0] == '0') {
			for (j = 0; j < 11; j++) {
 80039aa:	ab04      	add	r3, sp, #16
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d1f7      	bne.n	80039a0 <Prints32d+0x48>
		out[i] = (char) ((temp & 0x0F) + 0x30);
		div /= 10;
	}
	out[i] = '\0';

	for (i = 0; i < 11; i++) {
 80039b0:	1c4b      	adds	r3, r1, #1
 80039b2:	b2d9      	uxtb	r1, r3
 80039b4:	290b      	cmp	r1, #11
 80039b6:	d1ee      	bne.n	8003996 <Prints32d+0x3e>
					break;
			}
		}
	}

	std_puts(out);
 80039b8:	a801      	add	r0, sp, #4
 80039ba:	f7ff ff5d 	bl	8003878 <std_puts>
	return;
}
 80039be:	b005      	add	sp, #20
 80039c0:	bd00      	pop	{pc}
 80039c2:	46c0      	nop			(mov r8, r8)
 80039c4:	3b9aca00 	.word	0x3b9aca00
 80039c8:	cccccccd 	.word	0xcccccccd

080039cc <Printu32d>:
//##############################################################################



//##############################################################################
void Printu32d(u32 lNum) {
 80039cc:	b500      	push	{lr}
 80039ce:	4a19      	ldr	r2, [pc, #100]	(8003a34 <Printu32d+0x68>)
 80039d0:	b085      	sub	sp, #20
		temp = (char) (lNum / div);
		lNum = (lNum % div);
//        lNum -= (u32) (temp*div);
//        out[i] = (char) (temp&0x0000000F)+0x30;
		out[i] = (char) ((temp & 0x0F) + 0x30);
		div /= 10;
 80039d2:	f8df c064 	ldr.w	ip, [pc, #100]	; 8003a38 <Printu32d+0x6c>
//##############################################################################



//##############################################################################
void Printu32d(u32 lNum) {
 80039d6:	2100      	movs	r1, #0
	for (i = 0; i < 10; i++) {
		temp = (char) (lNum / div);
		lNum = (lNum % div);
//        lNum -= (u32) (temp*div);
//        out[i] = (char) (temp&0x0000000F)+0x30;
		out[i] = (char) ((temp & 0x0F) + 0x30);
 80039d8:	f10d 0e05 	add.w	lr, sp, #5	; 0x5
	u32 temp, div = 1000000000;
	char out[11];
	u8 i, j;

	for (i = 0; i < 10; i++) {
		temp = (char) (lNum / div);
 80039dc:	fbb0 f3f2 	udiv	r3, r0, r2
		lNum = (lNum % div);
 80039e0:	fb02 0013 	mls	r0, r2, r3, r0
//        lNum -= (u32) (temp*div);
//        out[i] = (char) (temp&0x0000000F)+0x30;
		out[i] = (char) ((temp & 0x0F) + 0x30);
 80039e4:	f003 030f 	and.w	r3, r3, #15	; 0xf
 80039e8:	3330      	adds	r3, #48
 80039ea:	f80e 3001 	strb.w	r3, [lr, r1]
		div /= 10;
 80039ee:	fba2 230c 	umull	r2, r3, r2, ip
 80039f2:	3101      	adds	r1, #1
 80039f4:	08da      	lsrs	r2, r3, #3
void Printu32d(u32 lNum) {
	u32 temp, div = 1000000000;
	char out[11];
	u8 i, j;

	for (i = 0; i < 10; i++) {
 80039f6:	290a      	cmp	r1, #10
 80039f8:	d1f0      	bne.n	80039dc <Printu32d+0x10>
//        lNum -= (u32) (temp*div);
//        out[i] = (char) (temp&0x0000000F)+0x30;
		out[i] = (char) ((temp & 0x0F) + 0x30);
		div /= 10;
	}
	out[i] = '\0';
 80039fa:	2300      	movs	r3, #0
 80039fc:	f88d 300f 	strb.w	r3, [sp, #15]
 8003a00:	2100      	movs	r1, #0

	for (i = 0; i < 10; i++) {
		if (out[0] == '0') {
 8003a02:	f10d 0006 	add.w	r0, sp, #6	; 0x6
 8003a06:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003a0a:	2b30      	cmp	r3, #48
 8003a0c:	d108      	bne.n	8003a20 <Printu32d+0x54>
 8003a0e:	4602      	mov	r2, r0
			for (j = 0; j < 10; j++) {
				out[j] = out[j + 1];
 8003a10:	7813      	ldrb	r3, [r2, #0]
 8003a12:	f802 3c01 	strb.w	r3, [r2, #-1]
				if (out[j] == '\0')
 8003a16:	b11b      	cbz	r3, 8003a20 <Printu32d+0x54>
					break;
 8003a18:	3201      	adds	r2, #1
	}
	out[i] = '\0';

	for (i = 0; i < 10; i++) {
		if (out[0] == '0') {
			for (j = 0; j < 10; j++) {
 8003a1a:	ab04      	add	r3, sp, #16
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d1f7      	bne.n	8003a10 <Printu32d+0x44>
		out[i] = (char) ((temp & 0x0F) + 0x30);
		div /= 10;
	}
	out[i] = '\0';

	for (i = 0; i < 10; i++) {
 8003a20:	1c4b      	adds	r3, r1, #1
 8003a22:	b2d9      	uxtb	r1, r3
 8003a24:	290a      	cmp	r1, #10
 8003a26:	d1ee      	bne.n	8003a06 <Printu32d+0x3a>
					break;
			}
		}
	}

	std_puts(out);
 8003a28:	f10d 0005 	add.w	r0, sp, #5	; 0x5
 8003a2c:	f7ff ff24 	bl	8003878 <std_puts>
	return;
}
 8003a30:	b005      	add	sp, #20
 8003a32:	bd00      	pop	{pc}
 8003a34:	3b9aca00 	.word	0x3b9aca00
 8003a38:	cccccccd 	.word	0xcccccccd

08003a3c <PrintString>:
int PrintChar(char c) {
	return std_putchar(c);
}

//##############################################################################
int PrintString(const char* s) {
 8003a3c:	b500      	push	{lr}
 8003a3e:	b081      	sub	sp, #4
	return std_puts(s);
 8003a40:	f7ff ff1a 	bl	8003878 <std_puts>
}
 8003a44:	b001      	add	sp, #4
 8003a46:	bd00      	pop	{pc}

08003a48 <PrintCommStatus>:
	return str;
}
*/
//##############################################################################
void PrintCommStatus(u16 Status) {
	if (Status & DXL_TXFAIL)
 8003a48:	f010 0f04 	tst.w	r0, #4	; 0x4

	return str;
}
*/
//##############################################################################
void PrintCommStatus(u16 Status) {
 8003a4c:	b510      	push	{r4, lr}
 8003a4e:	4604      	mov	r4, r0
	if (Status & DXL_TXFAIL)
 8003a50:	d002      	beq.n	8003a58 <PrintCommStatus+0x10>
		std_puts("\nDXL_TXFAIL: Failed transmit instruction packet!\n");
 8003a52:	4817      	ldr	r0, [pc, #92]	(8003ab0 <PrintCommStatus+0x68>)
 8003a54:	f7ff ff10 	bl	8003878 <std_puts>

	if (Status & DXL_RXFAIL)
 8003a58:	f014 0f08 	tst.w	r4, #8	; 0x8
 8003a5c:	d002      	beq.n	8003a64 <PrintCommStatus+0x1c>
		std_puts("\nDXL_RXFAIL: Failed get status packet from device!\n");
 8003a5e:	4815      	ldr	r0, [pc, #84]	(8003ab4 <PrintCommStatus+0x6c>)
 8003a60:	f7ff ff0a 	bl	8003878 <std_puts>

	if (Status & DXL_TXERROR)
 8003a64:	f014 0f10 	tst.w	r4, #16	; 0x10
 8003a68:	d002      	beq.n	8003a70 <PrintCommStatus+0x28>
		std_puts("\nDXL_TXERROR: Incorrect instruction packet!\n");
 8003a6a:	4813      	ldr	r0, [pc, #76]	(8003ab8 <PrintCommStatus+0x70>)
 8003a6c:	f7ff ff04 	bl	8003878 <std_puts>

	if (Status & DXL_BAD_INST)
 8003a70:	f014 0f20 	tst.w	r4, #32	; 0x20
 8003a74:	d002      	beq.n	8003a7c <PrintCommStatus+0x34>
		std_puts("\nDXL_BAD_INST: Invalid Instruction byte\n");
 8003a76:	4811      	ldr	r0, [pc, #68]	(8003abc <PrintCommStatus+0x74>)
 8003a78:	f7ff fefe 	bl	8003878 <std_puts>

	if (Status & DXL_BAD_ID)
 8003a7c:	f014 0f40 	tst.w	r4, #64	; 0x40
 8003a80:	d002      	beq.n	8003a88 <PrintCommStatus+0x40>
		std_puts(
 8003a82:	480f      	ldr	r0, [pc, #60]	(8003ac0 <PrintCommStatus+0x78>)
 8003a84:	f7ff fef8 	bl	8003878 <std_puts>
				"\nDXL_BAD_ID: ID's not same for instruction and status packets\n");

	if (Status & DXL_RXWAITING)
 8003a88:	f414 7f00 	tst.w	r4, #512	; 0x200
 8003a8c:	d002      	beq.n	8003a94 <PrintCommStatus+0x4c>
		std_puts("\nDXL_RXWAITING: Now receiving status packet!\n");
 8003a8e:	480d      	ldr	r0, [pc, #52]	(8003ac4 <PrintCommStatus+0x7c>)
 8003a90:	f7ff fef2 	bl	8003878 <std_puts>

	if (Status & DXL_RXTIMEOUT)
 8003a94:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8003a98:	d002      	beq.n	8003aa0 <PrintCommStatus+0x58>
		std_puts("\nDXL_RXTIMEOUT: There is no status packet!\n");
 8003a9a:	480b      	ldr	r0, [pc, #44]	(8003ac8 <PrintCommStatus+0x80>)
 8003a9c:	f7ff feec 	bl	8003878 <std_puts>

	if (Status & DXL_RXCHECKSUM)
 8003aa0:	f414 5f80 	tst.w	r4, #4096	; 0x1000
 8003aa4:	d002      	beq.n	8003aac <PrintCommStatus+0x64>
		std_puts("\nDXL_RXCHECKSUM: Incorrect status packet checksum!\n");
 8003aa6:	4809      	ldr	r0, [pc, #36]	(8003acc <PrintCommStatus+0x84>)
 8003aa8:	f7ff fee6 	bl	8003878 <std_puts>

//    else
//        std_puts("\nThis is unknown error code!\n");
}
 8003aac:	bd10      	pop	{r4, pc}
 8003aae:	46c0      	nop			(mov r8, r8)
 8003ab0:	08006de6 	.word	0x08006de6
 8003ab4:	08006e18 	.word	0x08006e18
 8003ab8:	08006e4c 	.word	0x08006e4c
 8003abc:	08006e79 	.word	0x08006e79
 8003ac0:	08006ea2 	.word	0x08006ea2
 8003ac4:	08006ee1 	.word	0x08006ee1
 8003ac8:	08006f0f 	.word	0x08006f0f
 8003acc:	08006f3b 	.word	0x08006f3b

08003ad0 <PrintErrorCode>:

//##############################################################################
void PrintErrorCode(void) {
 8003ad0:	b500      	push	{lr}
	if (dxl_get_rxpacket_error(ERRBIT_VOLTAGE) == 1)
 8003ad2:	2001      	movs	r0, #1
//    else
//        std_puts("\nThis is unknown error code!\n");
}

//##############################################################################
void PrintErrorCode(void) {
 8003ad4:	b081      	sub	sp, #4
	if (dxl_get_rxpacket_error(ERRBIT_VOLTAGE) == 1)
 8003ad6:	f000 f8a5 	bl	8003c24 <dxl_get_rxpacket_error>
 8003ada:	2801      	cmp	r0, #1
 8003adc:	d102      	bne.n	8003ae4 <PrintErrorCode+0x14>
		std_puts("\nInput voltage error!\n");
 8003ade:	481a      	ldr	r0, [pc, #104]	(8003b48 <PrintErrorCode+0x78>)
 8003ae0:	f7ff feca 	bl	8003878 <std_puts>

	if (dxl_get_rxpacket_error(ERRBIT_ANGLE) == 1)
 8003ae4:	2002      	movs	r0, #2
 8003ae6:	f000 f89d 	bl	8003c24 <dxl_get_rxpacket_error>
 8003aea:	2801      	cmp	r0, #1
 8003aec:	d102      	bne.n	8003af4 <PrintErrorCode+0x24>
		std_puts("\nAngle limit error!\n");
 8003aee:	4817      	ldr	r0, [pc, #92]	(8003b4c <PrintErrorCode+0x7c>)
 8003af0:	f7ff fec2 	bl	8003878 <std_puts>

	if (dxl_get_rxpacket_error(ERRBIT_OVERHEAT) == 1)
 8003af4:	2004      	movs	r0, #4
 8003af6:	f000 f895 	bl	8003c24 <dxl_get_rxpacket_error>
 8003afa:	2801      	cmp	r0, #1
 8003afc:	d102      	bne.n	8003b04 <PrintErrorCode+0x34>
		std_puts("\nOverheat error!\n");
 8003afe:	4814      	ldr	r0, [pc, #80]	(8003b50 <PrintErrorCode+0x80>)
 8003b00:	f7ff feba 	bl	8003878 <std_puts>

	if (dxl_get_rxpacket_error(ERRBIT_RANGE) == 1)
 8003b04:	2008      	movs	r0, #8
 8003b06:	f000 f88d 	bl	8003c24 <dxl_get_rxpacket_error>
 8003b0a:	2801      	cmp	r0, #1
 8003b0c:	d102      	bne.n	8003b14 <PrintErrorCode+0x44>
		std_puts("\nOut of range error!\n");
 8003b0e:	4811      	ldr	r0, [pc, #68]	(8003b54 <PrintErrorCode+0x84>)
 8003b10:	f7ff feb2 	bl	8003878 <std_puts>

	if (dxl_get_rxpacket_error(ERRBIT_CHECKSUM) == 1)
 8003b14:	2010      	movs	r0, #16
 8003b16:	f000 f885 	bl	8003c24 <dxl_get_rxpacket_error>
 8003b1a:	2801      	cmp	r0, #1
 8003b1c:	d102      	bne.n	8003b24 <PrintErrorCode+0x54>
		std_puts("\nChecksum error!\n");
 8003b1e:	480e      	ldr	r0, [pc, #56]	(8003b58 <PrintErrorCode+0x88>)
 8003b20:	f7ff feaa 	bl	8003878 <std_puts>

	if (dxl_get_rxpacket_error(ERRBIT_OVERLOAD) == 1)
 8003b24:	2020      	movs	r0, #32
 8003b26:	f000 f87d 	bl	8003c24 <dxl_get_rxpacket_error>
 8003b2a:	2801      	cmp	r0, #1
 8003b2c:	d102      	bne.n	8003b34 <PrintErrorCode+0x64>
		std_puts("\nOverload error!\n");
 8003b2e:	480b      	ldr	r0, [pc, #44]	(8003b5c <PrintErrorCode+0x8c>)
 8003b30:	f7ff fea2 	bl	8003878 <std_puts>

	if (dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
 8003b34:	2040      	movs	r0, #64
 8003b36:	f000 f875 	bl	8003c24 <dxl_get_rxpacket_error>
 8003b3a:	2801      	cmp	r0, #1
 8003b3c:	d102      	bne.n	8003b44 <PrintErrorCode+0x74>
		std_puts("\nInstruction code error!\n");
 8003b3e:	4808      	ldr	r0, [pc, #32]	(8003b60 <PrintErrorCode+0x90>)
 8003b40:	f7ff fe9a 	bl	8003878 <std_puts>
}
 8003b44:	b001      	add	sp, #4
 8003b46:	bd00      	pop	{pc}
 8003b48:	08006f6f 	.word	0x08006f6f
 8003b4c:	08006f86 	.word	0x08006f86
 8003b50:	08006f9b 	.word	0x08006f9b
 8003b54:	08006fad 	.word	0x08006fad
 8003b58:	08006fc3 	.word	0x08006fc3
 8003b5c:	08006fd5 	.word	0x08006fd5
 8003b60:	08006fe7 	.word	0x08006fe7

08003b64 <std_getchar>:

	return n;
}

//##############################################################################
int std_getchar(void) {
 8003b64:	b500      	push	{lr}
	char c;

	pcu_hal_set_timeout(10);
 8003b66:	200a      	movs	r0, #10

	return n;
}

//##############################################################################
int std_getchar(void) {
 8003b68:	b081      	sub	sp, #4
	char c;

	pcu_hal_set_timeout(10);
 8003b6a:	f001 fbc3 	bl	80052f4 <pcu_hal_set_timeout>
	while ((pcu_hal_timeout() == 0) && (pcu_get_qstate() == 0))
 8003b6e:	f001 f8d9 	bl	8004d24 <pcu_hal_timeout>
 8003b72:	b918      	cbnz	r0, 8003b7c <std_getchar+0x18>
 8003b74:	f001 f91e 	bl	8004db4 <pcu_get_qstate>
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	d0f8      	beq.n	8003b6e <std_getchar+0xa>
		;
	if (pcu_get_qstate() == 0)
 8003b7c:	f001 f91a 	bl	8004db4 <pcu_get_qstate>
 8003b80:	b908      	cbnz	r0, 8003b86 <std_getchar+0x22>
 8003b82:	20ff      	movs	r0, #255
 8003b84:	e004      	b.n	8003b90 <std_getchar+0x2c>
		return 0xFF;

	c = pcu_get_queue();
 8003b86:	f001 f8d7 	bl	8004d38 <pcu_get_queue>

	if (c == '\r')
 8003b8a:	280d      	cmp	r0, #13
 8003b8c:	bf08      	it	eq
 8003b8e:	200a      	moveq	r0, #10
		c = '\n';

	return c;
}
 8003b90:	b001      	add	sp, #4
 8003b92:	bd00      	pop	{pc}

08003b94 <GetChar>:
int PrintString(const char* s) {
	return std_puts(s);
}

//##############################################################################
int GetChar(void) {
 8003b94:	b500      	push	{lr}
 8003b96:	b081      	sub	sp, #4
	return std_getchar();
 8003b98:	f7ff ffe4 	bl	8003b64 <std_getchar>
}
 8003b9c:	b001      	add	sp, #4
 8003b9e:	bd00      	pop	{pc}

08003ba0 <std_getString>:
		c = '\n';

	return c;
}

char* std_getString(char* str, int size){
 8003ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ba2:	4606      	mov	r6, r0
 8003ba4:	b081      	sub	sp, #4
 8003ba6:	460d      	mov	r5, r1
 8003ba8:	2400      	movs	r4, #0
		c = std_getchar();

		str[len] = c;
		len++;

		if(c=='\n'){len = size+1;}
 8003baa:	1c4f      	adds	r7, r1, #1
 8003bac:	e007      	b.n	8003bbe <std_getString+0x1e>
char* std_getString(char* str, int size){
	char c;
	int len = 0;

	while(len < size){
		c = std_getchar();
 8003bae:	f7ff ffd9 	bl	8003b64 <std_getchar>
 8003bb2:	b2c0      	uxtb	r0, r0

		str[len] = c;
		len++;

		if(c=='\n'){len = size+1;}
 8003bb4:	280a      	cmp	r0, #10
	int len = 0;

	while(len < size){
		c = std_getchar();

		str[len] = c;
 8003bb6:	5530      	strb	r0, [r6, r4]
		len++;

		if(c=='\n'){len = size+1;}
 8003bb8:	bf0c      	ite	eq
 8003bba:	463c      	moveq	r4, r7

	while(len < size){
		c = std_getchar();

		str[len] = c;
		len++;
 8003bbc:	3401      	addne	r4, #1

char* std_getString(char* str, int size){
	char c;
	int len = 0;

	while(len < size){
 8003bbe:	42ac      	cmp	r4, r5
 8003bc0:	dbf5      	blt.n	8003bae <std_getString+0xe>
		len++;

		if(c=='\n'){len = size+1;}
	}
	return str;
}
 8003bc2:	4630      	mov	r0, r6
 8003bc4:	b001      	add	sp, #4
 8003bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bc8 <pcu_terminate>:

	return 1;
}

//##############################################################################
void pcu_terminate(void) {
 8003bc8:	b500      	push	{lr}
 8003bca:	b081      	sub	sp, #4
	pcu_hal_close();
 8003bcc:	f001 fa1a 	bl	8005004 <pcu_hal_close>
}
 8003bd0:	b001      	add	sp, #4
 8003bd2:	bd00      	pop	{pc}

08003bd4 <pcu_initialize>:
	gbPcuRead++;
	return bTemp;
}

//##############################################################################
u8 pcu_initialize(u32 baudrate) {
 8003bd4:	b500      	push	{lr}
 8003bd6:	b081      	sub	sp, #4
	if (pcu_hal_open(baudrate) == 0)
 8003bd8:	f001 fa86 	bl	80050e8 <pcu_hal_open>
 8003bdc:	3800      	subs	r0, #0
 8003bde:	bf18      	it	ne
 8003be0:	2001      	movne	r0, #1
		return 0;

	return 1;
}
 8003be2:	b001      	add	sp, #4
 8003be4:	bd00      	pop	{pc}
 8003be6:	46c0      	nop			(mov r8, r8)

08003be8 <dxl_get_result>:
#endif
}

//##############################################################################
u16 dxl_get_result(void) {
	return gbCommStatus;
 8003be8:	4b01      	ldr	r3, [pc, #4]	(8003bf0 <dxl_get_result+0x8>)
 8003bea:	8818      	ldrh	r0, [r3, #0]
 8003bec:	b280      	uxth	r0, r0
}
 8003bee:	4770      	bx	lr
 8003bf0:	20000000 	.word	0x20000000

08003bf4 <dxl_set_txpacket_id>:

//##############################################################################
void dxl_set_txpacket_id(u8 id) {
	gbInstructionPacket[DXL_PKT_ID] = id;
 8003bf4:	4b01      	ldr	r3, [pc, #4]	(8003bfc <dxl_set_txpacket_id+0x8>)
 8003bf6:	7098      	strb	r0, [r3, #2]
}
 8003bf8:	4770      	bx	lr
 8003bfa:	46c0      	nop			(mov r8, r8)
 8003bfc:	200004dc 	.word	0x200004dc

08003c00 <dxl_set_txpacket_instruction>:

//##############################################################################
void dxl_set_txpacket_instruction(u8 instruction) {
	gbInstructionPacket[DXL_PKT_INST] = instruction;
 8003c00:	4b01      	ldr	r3, [pc, #4]	(8003c08 <dxl_set_txpacket_instruction+0x8>)
 8003c02:	7118      	strb	r0, [r3, #4]
}
 8003c04:	4770      	bx	lr
 8003c06:	46c0      	nop			(mov r8, r8)
 8003c08:	200004dc 	.word	0x200004dc

08003c0c <dxl_set_txpacket_parameter>:

//##############################################################################
void dxl_set_txpacket_parameter(u8 index, u8 value) {
	gbInstructionPacket[DXL_PKT_PARA + index] = value;
 8003c0c:	4b01      	ldr	r3, [pc, #4]	(8003c14 <dxl_set_txpacket_parameter+0x8>)
 8003c0e:	181b      	adds	r3, r3, r0
 8003c10:	7159      	strb	r1, [r3, #5]
}
 8003c12:	4770      	bx	lr
 8003c14:	200004dc 	.word	0x200004dc

08003c18 <dxl_set_txpacket_length>:

//##############################################################################
void dxl_set_txpacket_length(u8 length) {
	gbInstructionPacket[DXL_PKT_LEN] = length;
 8003c18:	4b01      	ldr	r3, [pc, #4]	(8003c20 <dxl_set_txpacket_length+0x8>)
 8003c1a:	70d8      	strb	r0, [r3, #3]
}
 8003c1c:	4770      	bx	lr
 8003c1e:	46c0      	nop			(mov r8, r8)
 8003c20:	200004dc 	.word	0x200004dc

08003c24 <dxl_get_rxpacket_error>:

//##############################################################################
u8 dxl_get_rxpacket_error(u8 errbit) {
	if ((gbCommStatus & DXL_RXFAIL))
 8003c24:	4b06      	ldr	r3, [pc, #24]	(8003c40 <dxl_get_rxpacket_error+0x1c>)
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	f013 0f08 	tst.w	r3, #8	; 0x8
 8003c2c:	d001      	beq.n	8003c32 <dxl_get_rxpacket_error+0xe>
 8003c2e:	2080      	movs	r0, #128
 8003c30:	e005      	b.n	8003c3e <dxl_get_rxpacket_error+0x1a>
 8003c32:	4b04      	ldr	r3, [pc, #16]	(8003c44 <dxl_get_rxpacket_error+0x20>)
 8003c34:	791b      	ldrb	r3, [r3, #4]
 8003c36:	4218      	tst	r0, r3
 8003c38:	bf0c      	ite	eq
 8003c3a:	2000      	moveq	r0, #0
 8003c3c:	2001      	movne	r0, #1

	if (gbStatusPacket[DXL_PKT_ERR] & errbit)
		return 1;

	return 0;
}
 8003c3e:	4770      	bx	lr
 8003c40:	20000000 	.word	0x20000000
 8003c44:	2000057c 	.word	0x2000057c

08003c48 <dxl_get_rxpacket_length>:

//##############################################################################
u8 dxl_get_rxpacket_length(void) {
	if ((gbCommStatus & DXL_RXFAIL))
 8003c48:	4b04      	ldr	r3, [pc, #16]	(8003c5c <dxl_get_rxpacket_length+0x14>)
 8003c4a:	881b      	ldrh	r3, [r3, #0]
 8003c4c:	f013 0f08 	tst.w	r3, #8	; 0x8
 8003c50:	d001      	beq.n	8003c56 <dxl_get_rxpacket_length+0xe>
 8003c52:	2000      	movs	r0, #0
 8003c54:	e001      	b.n	8003c5a <dxl_get_rxpacket_length+0x12>
		return 0;

	return gbStatusPacket[DXL_PKT_LEN];
 8003c56:	4b02      	ldr	r3, [pc, #8]	(8003c60 <dxl_get_rxpacket_length+0x18>)
 8003c58:	78d8      	ldrb	r0, [r3, #3]
}
 8003c5a:	4770      	bx	lr
 8003c5c:	20000000 	.word	0x20000000
 8003c60:	2000057c 	.word	0x2000057c

08003c64 <dxl_get_rxpacket_parameter>:

//##############################################################################
u8 dxl_get_rxpacket_parameter(u8 index) {
	if ((gbCommStatus & DXL_RXFAIL))
 8003c64:	4b05      	ldr	r3, [pc, #20]	(8003c7c <dxl_get_rxpacket_parameter+0x18>)
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	f013 0f08 	tst.w	r3, #8	; 0x8
 8003c6c:	d001      	beq.n	8003c72 <dxl_get_rxpacket_parameter+0xe>
 8003c6e:	2000      	movs	r0, #0
 8003c70:	e002      	b.n	8003c78 <dxl_get_rxpacket_parameter+0x14>
		return 0;

	return gbStatusPacket[DXL_PKT_PARA + index];
 8003c72:	4b03      	ldr	r3, [pc, #12]	(8003c80 <dxl_get_rxpacket_parameter+0x1c>)
 8003c74:	181b      	adds	r3, r3, r0
 8003c76:	7958      	ldrb	r0, [r3, #5]
}
 8003c78:	4770      	bx	lr
 8003c7a:	46c0      	nop			(mov r8, r8)
 8003c7c:	20000000 	.word	0x20000000
 8003c80:	2000057c 	.word	0x2000057c

08003c84 <dxl_makeword>:
//##############################################################################
u16 dxl_makeword(u8 lowbyte, u8 highbyte) {
	u16 word;

	word = highbyte;
	word = word << 8;
 8003c84:	eb00 2001 	add.w	r0, r0, r1, lsl #8
 8003c88:	b280      	uxth	r0, r0
	word = word + lowbyte;
	return word;
}
 8003c8a:	4770      	bx	lr

08003c8c <dxl_get_lowbyte>:

//##############################################################################
u8 dxl_get_lowbyte(u16 word) {
 8003c8c:	b2c0      	uxtb	r0, r0
	u16 temp = (word & 0x00FF);
	return (u8) temp;
}
 8003c8e:	4770      	bx	lr

08003c90 <dxl_get_highbyte>:

//##############################################################################
u8 dxl_get_highbyte(u16 word) {
 8003c90:	0a00      	lsrs	r0, r0, #8
	u16 temp = ((word & 0xFF00) >> 8);
	return (u8) temp;
}
 8003c92:	4770      	bx	lr

08003c94 <dxl_clear_statpkt>:
	dxl_txrx_packet();
}

//##############################################################################
void dxl_clear_statpkt(void) {
	u8 i, max = gbStatusPacket[DXL_PKT_LEN];
 8003c94:	4a0c      	ldr	r2, [pc, #48]	(8003cc8 <dxl_clear_statpkt+0x34>)
 8003c96:	78d1      	ldrb	r1, [r2, #3]
	if ((max > 0) && (max < DXL_MAXNUM_RXPARAM)) {
 8003c98:	1e4b      	subs	r3, r1, #1
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b4e      	cmp	r3, #78
 8003c9e:	d80a      	bhi.n	8003cb6 <dxl_clear_statpkt+0x22>
		for (i = 0; i < (max + 4); i++)
			gbStatusPacket[i] = 0;
 8003ca0:	4610      	mov	r0, r2
}

//##############################################################################
void dxl_clear_statpkt(void) {
	u8 i, max = gbStatusPacket[DXL_PKT_LEN];
	if ((max > 0) && (max < DXL_MAXNUM_RXPARAM)) {
 8003ca2:	2300      	movs	r3, #0
		for (i = 0; i < (max + 4); i++)
 8003ca4:	3103      	adds	r1, #3
			gbStatusPacket[i] = 0;
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	e002      	b.n	8003cb0 <dxl_clear_statpkt+0x1c>
 8003caa:	54c2      	strb	r2, [r0, r3]

//##############################################################################
void dxl_clear_statpkt(void) {
	u8 i, max = gbStatusPacket[DXL_PKT_LEN];
	if ((max > 0) && (max < DXL_MAXNUM_RXPARAM)) {
		for (i = 0; i < (max + 4); i++)
 8003cac:	3301      	adds	r3, #1
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	4299      	cmp	r1, r3
 8003cb2:	dafa      	bge.n	8003caa <dxl_clear_statpkt+0x16>
 8003cb4:	e006      	b.n	8003cc4 <dxl_clear_statpkt+0x30>
			gbStatusPacket[i] = 0;
	} else {
		for (i = 0; i < 6; i++)
			gbStatusPacket[i] = 0;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	7013      	strb	r3, [r2, #0]
 8003cba:	7053      	strb	r3, [r2, #1]
 8003cbc:	7093      	strb	r3, [r2, #2]
 8003cbe:	70d3      	strb	r3, [r2, #3]
 8003cc0:	7113      	strb	r3, [r2, #4]
 8003cc2:	7153      	strb	r3, [r2, #5]
	}
}
 8003cc4:	4770      	bx	lr
 8003cc6:	46c0      	nop			(mov r8, r8)
 8003cc8:	2000057c 	.word	0x2000057c

08003ccc <dxl_rx_packet>:

	gbCommStatus = DXL_TXSUCCESS;
}

//##############################################################################
void dxl_rx_packet(void) {
 8003ccc:	b530      	push	{r4, r5, lr}
	u8 i, j, nRead;
	u8 checksum = 0;

	if (giBusUsing == 0)
 8003cce:	495a      	ldr	r1, [pc, #360]	(8003e38 <dxl_rx_packet+0x16c>)

	gbCommStatus = DXL_TXSUCCESS;
}

//##############################################################################
void dxl_rx_packet(void) {
 8003cd0:	b081      	sub	sp, #4
	u8 i, j, nRead;
	u8 checksum = 0;

	if (giBusUsing == 0)
 8003cd2:	780b      	ldrb	r3, [r1, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 80ad 	beq.w	8003e34 <dxl_rx_packet+0x168>
		return;

	giBusUsing = 1;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	700b      	strb	r3, [r1, #0]

	if (gbInstructionPacket[DXL_PKT_ID] == BROADCAST_ID) {
 8003cde:	4b57      	ldr	r3, [pc, #348]	(8003e3c <dxl_rx_packet+0x170>)
 8003ce0:	4a57      	ldr	r2, [pc, #348]	(8003e40 <dxl_rx_packet+0x174>)
 8003ce2:	789b      	ldrb	r3, [r3, #2]
 8003ce4:	2bfe      	cmp	r3, #254
 8003ce6:	f000 80a0 	beq.w	8003e2a <dxl_rx_packet+0x15e>
		gbCommStatus = DXL_RXSUCCESS;
		giBusUsing = 0;
		return;
	}

	if (gbCommStatus & DXL_TXSUCCESS) {
 8003cea:	8813      	ldrh	r3, [r2, #0]
 8003cec:	f013 0f01 	tst.w	r3, #1	; 0x1
 8003cf0:	d005      	beq.n	8003cfe <dxl_rx_packet+0x32>
		gbRxGetLength = 0;
 8003cf2:	4b54      	ldr	r3, [pc, #336]	(8003e44 <dxl_rx_packet+0x178>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	701a      	strb	r2, [r3, #0]
		gbRxPacketLength = 6;
 8003cf8:	4b53      	ldr	r3, [pc, #332]	(8003e48 <dxl_rx_packet+0x17c>)
 8003cfa:	2206      	movs	r2, #6
 8003cfc:	701a      	strb	r2, [r3, #0]
	}

	nRead = dxl_hal_rx((u8*) &gbStatusPacket[gbRxGetLength],
 8003cfe:	4d51      	ldr	r5, [pc, #324]	(8003e44 <dxl_rx_packet+0x178>)
 8003d00:	4c51      	ldr	r4, [pc, #324]	(8003e48 <dxl_rx_packet+0x17c>)
 8003d02:	782b      	ldrb	r3, [r5, #0]
 8003d04:	7821      	ldrb	r1, [r4, #0]
 8003d06:	4851      	ldr	r0, [pc, #324]	(8003e4c <dxl_rx_packet+0x180>)
 8003d08:	1ac9      	subs	r1, r1, r3
 8003d0a:	18c0      	adds	r0, r0, r3
 8003d0c:	b2c9      	uxtb	r1, r1
 8003d0e:	f001 f8b5 	bl	8004e7c <dxl_hal_rx>
			gbRxPacketLength - gbRxGetLength);

	gbRxGetLength += nRead;
 8003d12:	782b      	ldrb	r3, [r5, #0]
 8003d14:	18c0      	adds	r0, r0, r3
	if (gbRxGetLength < gbRxPacketLength) {
 8003d16:	7823      	ldrb	r3, [r4, #0]
	}

	nRead = dxl_hal_rx((u8*) &gbStatusPacket[gbRxGetLength],
			gbRxPacketLength - gbRxGetLength);

	gbRxGetLength += nRead;
 8003d18:	b2c0      	uxtb	r0, r0
	if (gbRxGetLength < gbRxPacketLength) {
 8003d1a:	4283      	cmp	r3, r0
	}

	nRead = dxl_hal_rx((u8*) &gbStatusPacket[gbRxGetLength],
			gbRxPacketLength - gbRxGetLength);

	gbRxGetLength += nRead;
 8003d1c:	7028      	strb	r0, [r5, #0]
	if (gbRxGetLength < gbRxPacketLength) {
 8003d1e:	d903      	bls.n	8003d28 <dxl_rx_packet+0x5c>
		if (dxl_hal_timeout() == 1) {
 8003d20:	f001 f8da 	bl	8004ed8 <dxl_hal_timeout>
 8003d24:	2801      	cmp	r0, #1
 8003d26:	d008      	beq.n	8003d3a <dxl_rx_packet+0x6e>
			return;
		}
	}

	// Find packet header
	for (i = 0; i < (gbRxGetLength - 1); i++) {
 8003d28:	4b46      	ldr	r3, [pc, #280]	(8003e44 <dxl_rx_packet+0x178>)
		if ((gbStatusPacket[i] == 0xFF) && (gbStatusPacket[i + 1] == 0xFF)) {
			break;
		} else if ((i == gbRxGetLength - 2)
 8003d2a:	2000      	movs	r0, #0
			return;
		}
	}

	// Find packet header
	for (i = 0; i < (gbRxGetLength - 1); i++) {
 8003d2c:	781a      	ldrb	r2, [r3, #0]
		if ((gbStatusPacket[i] == 0xFF) && (gbStatusPacket[i + 1] == 0xFF)) {
 8003d2e:	4947      	ldr	r1, [pc, #284]	(8003e4c <dxl_rx_packet+0x180>)
			return;
		}
	}

	// Find packet header
	for (i = 0; i < (gbRxGetLength - 1); i++) {
 8003d30:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
		if ((gbStatusPacket[i] == 0xFF) && (gbStatusPacket[i + 1] == 0xFF)) {
			break;
		} else if ((i == gbRxGetLength - 2)
 8003d34:	f1a2 0e02 	sub.w	lr, r2, #2	; 0x2
 8003d38:	e019      	b.n	8003d6e <dxl_rx_packet+0xa2>
			gbRxPacketLength - gbRxGetLength);

	gbRxGetLength += nRead;
	if (gbRxGetLength < gbRxPacketLength) {
		if (dxl_hal_timeout() == 1) {
			if (gbRxGetLength == 0)
 8003d3a:	782b      	ldrb	r3, [r5, #0]
 8003d3c:	4a40      	ldr	r2, [pc, #256]	(8003e40 <dxl_rx_packet+0x174>)
 8003d3e:	b913      	cbnz	r3, 8003d46 <dxl_rx_packet+0x7a>
				gbCommStatus = DXL_RXTIMEOUT;
 8003d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d44:	e001      	b.n	8003d4a <dxl_rx_packet+0x7e>
			else
				gbCommStatus = DXL_RXLENGTH;
 8003d46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d4a:	8013      	strh	r3, [r2, #0]
 8003d4c:	e035      	b.n	8003dba <dxl_rx_packet+0xee>
		}
	}

	// Find packet header
	for (i = 0; i < (gbRxGetLength - 1); i++) {
		if ((gbStatusPacket[i] == 0xFF) && (gbStatusPacket[i + 1] == 0xFF)) {
 8003d4e:	5c0b      	ldrb	r3, [r1, r0]
 8003d50:	2bff      	cmp	r3, #255
 8003d52:	d104      	bne.n	8003d5e <dxl_rx_packet+0x92>
 8003d54:	eb01 0300 	add.w	r3, r1, r0
 8003d58:	785b      	ldrb	r3, [r3, #1]
 8003d5a:	2bff      	cmp	r3, #255
 8003d5c:	d009      	beq.n	8003d72 <dxl_rx_packet+0xa6>
			break;
		} else if ((i == gbRxGetLength - 2)
 8003d5e:	4570      	cmp	r0, lr
 8003d60:	d103      	bne.n	8003d6a <dxl_rx_packet+0x9e>
 8003d62:	f811 300c 	ldrb.w	r3, [r1, ip]
 8003d66:	2bff      	cmp	r3, #255
 8003d68:	d003      	beq.n	8003d72 <dxl_rx_packet+0xa6>
			return;
		}
	}

	// Find packet header
	for (i = 0; i < (gbRxGetLength - 1); i++) {
 8003d6a:	1c43      	adds	r3, r0, #1
 8003d6c:	b2d8      	uxtb	r0, r3
 8003d6e:	4560      	cmp	r0, ip
 8003d70:	dbed      	blt.n	8003d4e <dxl_rx_packet+0x82>
		} else if ((i == gbRxGetLength - 2)
				&& (gbStatusPacket[gbRxGetLength - 1] == 0xFF)) {
			break;
		}
	}
	if (i > 0) {
 8003d72:	b188      	cbz	r0, 8003d98 <dxl_rx_packet+0xcc>
 8003d74:	2100      	movs	r1, #0
		for (j = 0; j < (gbRxGetLength - i); j++)
 8003d76:	ebc0 0c02 	rsb	ip, r0, r2
			gbStatusPacket[j] = gbStatusPacket[j + i];
 8003d7a:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 8003e4c <dxl_rx_packet+0x180>
 8003d7e:	e006      	b.n	8003d8e <dxl_rx_packet+0xc2>
 8003d80:	eb0e 0301 	add.w	r3, lr, r1
 8003d84:	5c1b      	ldrb	r3, [r3, r0]
 8003d86:	f80e 3001 	strb.w	r3, [lr, r1]
				&& (gbStatusPacket[gbRxGetLength - 1] == 0xFF)) {
			break;
		}
	}
	if (i > 0) {
		for (j = 0; j < (gbRxGetLength - i); j++)
 8003d8a:	1c4b      	adds	r3, r1, #1
 8003d8c:	b2d9      	uxtb	r1, r3
 8003d8e:	4561      	cmp	r1, ip
 8003d90:	dbf6      	blt.n	8003d80 <dxl_rx_packet+0xb4>
			gbStatusPacket[j] = gbStatusPacket[j + i];

		gbRxGetLength -= i;
 8003d92:	4b2c      	ldr	r3, [pc, #176]	(8003e44 <dxl_rx_packet+0x178>)
 8003d94:	1a12      	subs	r2, r2, r0
 8003d96:	701a      	strb	r2, [r3, #0]
	}

	// Check if received full packet
	if (gbRxGetLength < gbRxPacketLength) {
 8003d98:	4d2a      	ldr	r5, [pc, #168]	(8003e44 <dxl_rx_packet+0x178>)
 8003d9a:	4c2b      	ldr	r4, [pc, #172]	(8003e48 <dxl_rx_packet+0x17c>)
 8003d9c:	f895 c000 	ldrb.w	ip, [r5]
 8003da0:	7823      	ldrb	r3, [r4, #0]
 8003da2:	4563      	cmp	r3, ip
 8003da4:	d826      	bhi.n	8003df4 <dxl_rx_packet+0x128>
		gbCommStatus = DXL_RXWAITING;
		return;
	}

	// Check id pairing
	if (gbInstructionPacket[DXL_PKT_ID] != gbStatusPacket[DXL_PKT_ID]) {
 8003da6:	4b25      	ldr	r3, [pc, #148]	(8003e3c <dxl_rx_packet+0x170>)
 8003da8:	4828      	ldr	r0, [pc, #160]	(8003e4c <dxl_rx_packet+0x180>)
 8003daa:	789a      	ldrb	r2, [r3, #2]
 8003dac:	7883      	ldrb	r3, [r0, #2]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d007      	beq.n	8003dc2 <dxl_rx_packet+0xf6>
		gbCommStatus = DXL_BAD_ID | DXL_RXFAIL;
 8003db2:	4b23      	ldr	r3, [pc, #140]	(8003e40 <dxl_rx_packet+0x174>)
 8003db4:	f04f 0248 	mov.w	r2, #72	; 0x48
 8003db8:	801a      	strh	r2, [r3, #0]
		giBusUsing = 0;
 8003dba:	4b1f      	ldr	r3, [pc, #124]	(8003e38 <dxl_rx_packet+0x16c>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	701a      	strb	r2, [r3, #0]
 8003dc0:	e038      	b.n	8003e34 <dxl_rx_packet+0x168>
		return;
	}

	gbRxPacketLength = gbStatusPacket[DXL_PKT_LEN] + 4;
 8003dc2:	78c3      	ldrb	r3, [r0, #3]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	b2d9      	uxtb	r1, r3
	if (gbRxGetLength < gbRxPacketLength) {
 8003dc8:	458c      	cmp	ip, r1
		gbCommStatus = DXL_BAD_ID | DXL_RXFAIL;
		giBusUsing = 0;
		return;
	}

	gbRxPacketLength = gbStatusPacket[DXL_PKT_LEN] + 4;
 8003dca:	7021      	strb	r1, [r4, #0]
	if (gbRxGetLength < gbRxPacketLength) {
 8003dcc:	d20c      	bcs.n	8003de8 <dxl_rx_packet+0x11c>
		nRead = dxl_hal_rx((u8*) &gbStatusPacket[gbRxGetLength],
 8003dce:	ebcc 0101 	rsb	r1, ip, r1
 8003dd2:	4460      	add	r0, ip
 8003dd4:	b2c9      	uxtb	r1, r1
 8003dd6:	f001 f851 	bl	8004e7c <dxl_hal_rx>
				gbRxPacketLength - gbRxGetLength);
		gbRxGetLength += nRead;
 8003dda:	782b      	ldrb	r3, [r5, #0]
 8003ddc:	18c0      	adds	r0, r0, r3
		if (gbRxGetLength < gbRxPacketLength) {
 8003dde:	7823      	ldrb	r3, [r4, #0]

	gbRxPacketLength = gbStatusPacket[DXL_PKT_LEN] + 4;
	if (gbRxGetLength < gbRxPacketLength) {
		nRead = dxl_hal_rx((u8*) &gbStatusPacket[gbRxGetLength],
				gbRxPacketLength - gbRxGetLength);
		gbRxGetLength += nRead;
 8003de0:	b2c0      	uxtb	r0, r0
		if (gbRxGetLength < gbRxPacketLength) {
 8003de2:	4283      	cmp	r3, r0

	gbRxPacketLength = gbStatusPacket[DXL_PKT_LEN] + 4;
	if (gbRxGetLength < gbRxPacketLength) {
		nRead = dxl_hal_rx((u8*) &gbStatusPacket[gbRxGetLength],
				gbRxPacketLength - gbRxGetLength);
		gbRxGetLength += nRead;
 8003de4:	7028      	strb	r0, [r5, #0]
		if (gbRxGetLength < gbRxPacketLength) {
 8003de6:	d805      	bhi.n	8003df4 <dxl_rx_packet+0x128>
			return;
		}
	}

	// Check checksum
	for (i = 0; i < (gbStatusPacket[DXL_PKT_LEN] + 1); i++)
 8003de8:	4b18      	ldr	r3, [pc, #96]	(8003e4c <dxl_rx_packet+0x180>)
 8003dea:	2100      	movs	r1, #0
 8003dec:	78d8      	ldrb	r0, [r3, #3]
 8003dee:	2200      	movs	r2, #0
 8003df0:	469c      	mov	ip, r3
 8003df2:	e00b      	b.n	8003e0c <dxl_rx_packet+0x140>
	if (gbRxGetLength < gbRxPacketLength) {
		nRead = dxl_hal_rx((u8*) &gbStatusPacket[gbRxGetLength],
				gbRxPacketLength - gbRxGetLength);
		gbRxGetLength += nRead;
		if (gbRxGetLength < gbRxPacketLength) {
			gbCommStatus = DXL_RXWAITING;
 8003df4:	4b12      	ldr	r3, [pc, #72]	(8003e40 <dxl_rx_packet+0x174>)
 8003df6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dfa:	801a      	strh	r2, [r3, #0]
 8003dfc:	e01a      	b.n	8003e34 <dxl_rx_packet+0x168>
		}
	}

	// Check checksum
	for (i = 0; i < (gbStatusPacket[DXL_PKT_LEN] + 1); i++)
		checksum += gbStatusPacket[i + 2];
 8003dfe:	eb0c 0301 	add.w	r3, ip, r1
 8003e02:	789b      	ldrb	r3, [r3, #2]
 8003e04:	4413      	add	r3, r2
 8003e06:	b2da      	uxtb	r2, r3
			return;
		}
	}

	// Check checksum
	for (i = 0; i < (gbStatusPacket[DXL_PKT_LEN] + 1); i++)
 8003e08:	1c4b      	adds	r3, r1, #1
 8003e0a:	b2d9      	uxtb	r1, r3
 8003e0c:	4288      	cmp	r0, r1
 8003e0e:	daf6      	bge.n	8003dfe <dxl_rx_packet+0x132>
		checksum += gbStatusPacket[i + 2];
	checksum = ~checksum;

	if (gbStatusPacket[gbStatusPacket[DXL_PKT_LEN] + 3] != checksum) {
 8003e10:	4b0e      	ldr	r3, [pc, #56]	(8003e4c <dxl_rx_packet+0x180>)
 8003e12:	ea6f 0202 	mvn.w	r2, r2
 8003e16:	181b      	adds	r3, r3, r0
 8003e18:	78db      	ldrb	r3, [r3, #3]
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	4906      	ldr	r1, [pc, #24]	(8003e38 <dxl_rx_packet+0x16c>)
 8003e20:	4a07      	ldr	r2, [pc, #28]	(8003e40 <dxl_rx_packet+0x174>)
		gbCommStatus = DXL_RXCHECKSUM | DXL_RXFAIL;
 8003e22:	bf18      	it	ne
 8003e24:	f241 0308 	movwne	r3, #4104	; 0x1008
	// Check checksum
	for (i = 0; i < (gbStatusPacket[DXL_PKT_LEN] + 1); i++)
		checksum += gbStatusPacket[i + 2];
	checksum = ~checksum;

	if (gbStatusPacket[gbStatusPacket[DXL_PKT_LEN] + 3] != checksum) {
 8003e28:	d101      	bne.n	8003e2e <dxl_rx_packet+0x162>
		gbCommStatus = DXL_RXCHECKSUM | DXL_RXFAIL;
		giBusUsing = 0;
		return;
	}

	gbCommStatus = DXL_RXSUCCESS;
 8003e2a:	f04f 0302 	mov.w	r3, #2	; 0x2
 8003e2e:	8013      	strh	r3, [r2, #0]
	giBusUsing = 0;
 8003e30:	2300      	movs	r3, #0
 8003e32:	700b      	strb	r3, [r1, #0]
}
 8003e34:	b001      	add	sp, #4
 8003e36:	bd30      	pop	{r4, r5, pc}
 8003e38:	200005ce 	.word	0x200005ce
 8003e3c:	200004dc 	.word	0x200004dc
 8003e40:	20000000 	.word	0x20000000
 8003e44:	200005cd 	.word	0x200005cd
 8003e48:	200005cc 	.word	0x200005cc
 8003e4c:	2000057c 	.word	0x2000057c

08003e50 <dxl_tx_packet>:
void dxl_terminate(void) {
	dxl_hal_close();
}

//##############################################################################
void dxl_tx_packet(void) {
 8003e50:	b530      	push	{r4, r5, lr}
	u8 i;
	u8 TxNumByte, RealTxNumByte;
	u8 checksum = 0;

	if (giBusUsing == 1)
 8003e52:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 8003f40 <dxl_tx_packet+0xf0>
void dxl_terminate(void) {
	dxl_hal_close();
}

//##############################################################################
void dxl_tx_packet(void) {
 8003e56:	b081      	sub	sp, #4
	u8 i;
	u8 TxNumByte, RealTxNumByte;
	u8 checksum = 0;

	if (giBusUsing == 1)
 8003e58:	f89c 3000 	ldrb.w	r3, [ip]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d06c      	beq.n	8003f3a <dxl_tx_packet+0xea>
		return;

	giBusUsing = 1;

	gbCommStatus = 0;
 8003e60:	4838      	ldr	r0, [pc, #224]	(8003f44 <dxl_tx_packet+0xf4>)
	u8 checksum = 0;

	if (giBusUsing == 1)
		return;

	giBusUsing = 1;
 8003e62:	2301      	movs	r3, #1

	gbCommStatus = 0;
 8003e64:	f04f 0200 	mov.w	r2, #0	; 0x0
	u8 checksum = 0;

	if (giBusUsing == 1)
		return;

	giBusUsing = 1;
 8003e68:	f88c 3000 	strb.w	r3, [ip]

	gbCommStatus = 0;
 8003e6c:	8002      	strh	r2, [r0, #0]

	if (gbInstructionPacket[DXL_PKT_LEN] > (DXL_MAXNUM_TXPARAM + 2)) {
 8003e6e:	4a36      	ldr	r2, [pc, #216]	(8003f48 <dxl_tx_packet+0xf8>)
	if (giBusUsing == 1)
		return;

	giBusUsing = 1;

	gbCommStatus = 0;
 8003e70:	2400      	movs	r4, #0

	if (gbInstructionPacket[DXL_PKT_LEN] > (DXL_MAXNUM_TXPARAM + 2)) {
 8003e72:	78d3      	ldrb	r3, [r2, #3]
 8003e74:	2ba2      	cmp	r3, #162
 8003e76:	d904      	bls.n	8003e82 <dxl_tx_packet+0x32>
		gbCommStatus |= DXL_TXERROR;
 8003e78:	8803      	ldrh	r3, [r0, #0]
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 8003e80:	e012      	b.n	8003ea8 <dxl_tx_packet+0x58>
		giBusUsing = 0;
		return;
	}

	if ((gbInstructionPacket[DXL_PKT_INST] != INST_PING)
 8003e82:	7911      	ldrb	r1, [r2, #4]
 8003e84:	1e4a      	subs	r2, r1, #1
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	f1b1 0383 	subs.w	r3, r1, #131	; 0x83
 8003e8c:	bf18      	it	ne
 8003e8e:	2301      	movne	r3, #1
 8003e90:	2a05      	cmp	r2, #5
 8003e92:	bf94      	ite	ls
 8003e94:	2300      	movls	r3, #0
 8003e96:	f003 0301 	andhi.w	r3, r3, #1	; 0x1
 8003e9a:	b14b      	cbz	r3, 8003eb0 <dxl_tx_packet+0x60>
 8003e9c:	290e      	cmp	r1, #14
 8003e9e:	d007      	beq.n	8003eb0 <dxl_tx_packet+0x60>
			&& (gbInstructionPacket[DXL_PKT_INST] != INST_REG_WRITE)
			&& (gbInstructionPacket[DXL_PKT_INST] != INST_ACTION)
			&& (gbInstructionPacket[DXL_PKT_INST] != INST_RESET)
			&& (gbInstructionPacket[DXL_PKT_INST] != INST_SYNC_WRITE)
			&& (gbInstructionPacket[DXL_PKT_INST] != INST_CAP_REGION)) {
		gbCommStatus |= DXL_BAD_INST;
 8003ea0:	8803      	ldrh	r3, [r0, #0]
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	f043 0320 	orr.w	r3, r3, #32	; 0x20
 8003ea8:	8003      	strh	r3, [r0, #0]
		giBusUsing = 0;
 8003eaa:	f88c 4000 	strb.w	r4, [ip]
 8003eae:	e044      	b.n	8003f3a <dxl_tx_packet+0xea>
		return;
	}

	gbInstructionPacket[0] = 0xFF;
 8003eb0:	4a25      	ldr	r2, [pc, #148]	(8003f48 <dxl_tx_packet+0xf8>)
 8003eb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003eb6:	7013      	strb	r3, [r2, #0]
	gbInstructionPacket[1] = 0xFF;
 8003eb8:	7053      	strb	r3, [r2, #1]
	for (i = 0; i < (gbInstructionPacket[DXL_PKT_LEN] + 1); i++)
 8003eba:	f892 c003 	ldrb.w	ip, [r2, #3]
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	e006      	b.n	8003ed2 <dxl_tx_packet+0x82>
		checksum += gbInstructionPacket[i + 2];
 8003ec4:	eb02 0301 	add.w	r3, r2, r1
 8003ec8:	789b      	ldrb	r3, [r3, #2]
 8003eca:	4403      	add	r3, r0
 8003ecc:	b2d8      	uxtb	r0, r3
		return;
	}

	gbInstructionPacket[0] = 0xFF;
	gbInstructionPacket[1] = 0xFF;
	for (i = 0; i < (gbInstructionPacket[DXL_PKT_LEN] + 1); i++)
 8003ece:	1c4b      	adds	r3, r1, #1
 8003ed0:	b2d9      	uxtb	r1, r3
 8003ed2:	458c      	cmp	ip, r1
 8003ed4:	daf6      	bge.n	8003ec4 <dxl_tx_packet+0x74>
		checksum += gbInstructionPacket[i + 2];
	gbInstructionPacket[gbInstructionPacket[DXL_PKT_LEN] + 3] = ~checksum;
 8003ed6:	4b1c      	ldr	r3, [pc, #112]	(8003f48 <dxl_tx_packet+0xf8>)
 8003ed8:	ea6f 0200 	mvn.w	r2, r0
 8003edc:	4463      	add	r3, ip
 8003ede:	70da      	strb	r2, [r3, #3]

	if (gbCommStatus
 8003ee0:	4b18      	ldr	r3, [pc, #96]	(8003f44 <dxl_tx_packet+0xf4>)
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	f423 7364 	bic.w	r3, r3, #912	; 0x390
 8003ee8:	f023 0307 	bic.w	r3, r3, #7	; 0x7
 8003eec:	04db      	lsls	r3, r3, #19
 8003eee:	0cdb      	lsrs	r3, r3, #19
 8003ef0:	b10b      	cbz	r3, 8003ef6 <dxl_tx_packet+0xa6>
			& (DXL_RXFAIL | DXL_RXTIMEOUT | DXL_RXCHECKSUM | DXL_RXLENGTH
					| DXL_BAD_INST | DXL_BAD_ID)) {
		dxl_hal_clear();
 8003ef2:	f000 ffad 	bl	8004e50 <dxl_hal_clear>
	}

	TxNumByte = gbInstructionPacket[DXL_PKT_LEN] + 4;
 8003ef6:	4d14      	ldr	r5, [pc, #80]	(8003f48 <dxl_tx_packet+0xf8>)
 8003ef8:	78ec      	ldrb	r4, [r5, #3]
	RealTxNumByte = dxl_hal_tx((u8*) gbInstructionPacket, TxNumByte);
 8003efa:	4628      	mov	r0, r5
			& (DXL_RXFAIL | DXL_RXTIMEOUT | DXL_RXCHECKSUM | DXL_RXLENGTH
					| DXL_BAD_INST | DXL_BAD_ID)) {
		dxl_hal_clear();
	}

	TxNumByte = gbInstructionPacket[DXL_PKT_LEN] + 4;
 8003efc:	3404      	adds	r4, #4
 8003efe:	b2e4      	uxtb	r4, r4
	RealTxNumByte = dxl_hal_tx((u8*) gbInstructionPacket, TxNumByte);
 8003f00:	4621      	mov	r1, r4
 8003f02:	f001 f839 	bl	8004f78 <dxl_hal_tx>

	if (TxNumByte != RealTxNumByte) {
 8003f06:	4284      	cmp	r4, r0
 8003f08:	d009      	beq.n	8003f1e <dxl_tx_packet+0xce>
		gbCommStatus |= DXL_TXFAIL;
 8003f0a:	4a0e      	ldr	r2, [pc, #56]	(8003f44 <dxl_tx_packet+0xf4>)
 8003f0c:	8813      	ldrh	r3, [r2, #0]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 8003f14:	8013      	strh	r3, [r2, #0]
		giBusUsing = 0;
 8003f16:	4b0a      	ldr	r3, [pc, #40]	(8003f40 <dxl_tx_packet+0xf0>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	701a      	strb	r2, [r3, #0]
 8003f1c:	e00d      	b.n	8003f3a <dxl_tx_packet+0xea>
		return;
	}

	if (gbInstructionPacket[DXL_PKT_INST] == INST_READ_DATA)
 8003f1e:	792b      	ldrb	r3, [r5, #4]
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d103      	bne.n	8003f2c <dxl_tx_packet+0xdc>
		dxl_hal_set_timeout(gbInstructionPacket[DXL_PKT_PARA + 1] + 6);
 8003f24:	79a8      	ldrb	r0, [r5, #6]
 8003f26:	3006      	adds	r0, #6
 8003f28:	b2c0      	uxtb	r0, r0
 8003f2a:	e000      	b.n	8003f2e <dxl_tx_packet+0xde>
	else
		dxl_hal_set_timeout(6);
 8003f2c:	2006      	movs	r0, #6
 8003f2e:	f001 f819 	bl	8004f64 <dxl_hal_set_timeout>

	gbCommStatus = DXL_TXSUCCESS;
 8003f32:	4b04      	ldr	r3, [pc, #16]	(8003f44 <dxl_tx_packet+0xf4>)
 8003f34:	f04f 0201 	mov.w	r2, #1	; 0x1
 8003f38:	801a      	strh	r2, [r3, #0]
}
 8003f3a:	b001      	add	sp, #4
 8003f3c:	bd30      	pop	{r4, r5, pc}
 8003f3e:	46c0      	nop			(mov r8, r8)
 8003f40:	200005ce 	.word	0x200005ce
 8003f44:	20000000 	.word	0x20000000
 8003f48:	200004dc 	.word	0x200004dc

08003f4c <dxl_txrx_packet>:
	gbCommStatus = DXL_RXSUCCESS;
	giBusUsing = 0;
}

//##############################################################################
void dxl_txrx_packet(void) {
 8003f4c:	b510      	push	{r4, lr}

	dxl_tx_packet();
 8003f4e:	f7ff ff7f 	bl	8003e50 <dxl_tx_packet>

	if (!(gbCommStatus & DXL_TXSUCCESS))
 8003f52:	4b14      	ldr	r3, [pc, #80]	(8003fa4 <dxl_txrx_packet+0x58>)
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	f013 0f01 	tst.w	r3, #1	; 0x1
 8003f5a:	d021      	beq.n	8003fa0 <dxl_txrx_packet+0x54>
	dxl_txrx_packet();
}

//##############################################################################
void dxl_clear_statpkt(void) {
	u8 i, max = gbStatusPacket[DXL_PKT_LEN];
 8003f5c:	4a12      	ldr	r2, [pc, #72]	(8003fa8 <dxl_txrx_packet+0x5c>)
 8003f5e:	78d1      	ldrb	r1, [r2, #3]
	if ((max > 0) && (max < DXL_MAXNUM_RXPARAM)) {
 8003f60:	1e4b      	subs	r3, r1, #1
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b4e      	cmp	r3, #78
 8003f66:	d80a      	bhi.n	8003f7e <dxl_txrx_packet+0x32>
		for (i = 0; i < (max + 4); i++)
			gbStatusPacket[i] = 0;
 8003f68:	4610      	mov	r0, r2
}

//##############################################################################
void dxl_clear_statpkt(void) {
	u8 i, max = gbStatusPacket[DXL_PKT_LEN];
	if ((max > 0) && (max < DXL_MAXNUM_RXPARAM)) {
 8003f6a:	2300      	movs	r3, #0
		for (i = 0; i < (max + 4); i++)
 8003f6c:	3103      	adds	r1, #3
			gbStatusPacket[i] = 0;
 8003f6e:	2200      	movs	r2, #0
 8003f70:	e002      	b.n	8003f78 <dxl_txrx_packet+0x2c>
 8003f72:	54c2      	strb	r2, [r0, r3]

//##############################################################################
void dxl_clear_statpkt(void) {
	u8 i, max = gbStatusPacket[DXL_PKT_LEN];
	if ((max > 0) && (max < DXL_MAXNUM_RXPARAM)) {
		for (i = 0; i < (max + 4); i++)
 8003f74:	3301      	adds	r3, #1
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	4299      	cmp	r1, r3
 8003f7a:	dafa      	bge.n	8003f72 <dxl_txrx_packet+0x26>
 8003f7c:	e006      	b.n	8003f8c <dxl_txrx_packet+0x40>
			gbStatusPacket[i] = 0;
	} else {
		for (i = 0; i < 6; i++)
			gbStatusPacket[i] = 0;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	7013      	strb	r3, [r2, #0]
 8003f82:	7053      	strb	r3, [r2, #1]
 8003f84:	7093      	strb	r3, [r2, #2]
 8003f86:	70d3      	strb	r3, [r2, #3]
 8003f88:	7113      	strb	r3, [r2, #4]
 8003f8a:	7153      	strb	r3, [r2, #5]

	dxl_clear_statpkt();
	do {
		dxl_rx_packet();
		uDelay(50);
	} while (gbCommStatus & DXL_RXWAITING);
 8003f8c:	4c05      	ldr	r4, [pc, #20]	(8003fa4 <dxl_txrx_packet+0x58>)
		PrintString("\n");
#endif

	dxl_clear_statpkt();
	do {
		dxl_rx_packet();
 8003f8e:	f7ff fe9d 	bl	8003ccc <dxl_rx_packet>
		uDelay(50);
 8003f92:	2032      	movs	r0, #50
 8003f94:	f000 fb7e 	bl	8004694 <uDelay>
	} while (gbCommStatus & DXL_RXWAITING);
 8003f98:	8823      	ldrh	r3, [r4, #0]
 8003f9a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003f9e:	d1f6      	bne.n	8003f8e <dxl_txrx_packet+0x42>
		PrintString("Dynamixel  --- dxl_txrx_packet ---\n");
		PrintString("RX Comm Status\n");
		TxD_Dec_U16(gbCommStatus);
		PrintString("\n");
#endif
}
 8003fa0:	bd10      	pop	{r4, pc}
 8003fa2:	46c0      	nop			(mov r8, r8)
 8003fa4:	20000000 	.word	0x20000000
 8003fa8:	2000057c 	.word	0x2000057c

08003fac <dxl_write_word>:
	return dxl_makeword(gbStatusPacket[DXL_PKT_PARA],
			gbStatusPacket[DXL_PKT_PARA + 1]);
}

//##############################################################################
void dxl_write_word(u8 id, u8 address, u16 value) {
 8003fac:	b500      	push	{lr}
 8003fae:	4694      	mov	ip, r2
	while (giBusUsing)
 8003fb0:	4a0a      	ldr	r2, [pc, #40]	(8003fdc <dxl_write_word+0x30>)
	return dxl_makeword(gbStatusPacket[DXL_PKT_PARA],
			gbStatusPacket[DXL_PKT_PARA + 1]);
}

//##############################################################################
void dxl_write_word(u8 id, u8 address, u16 value) {
 8003fb2:	b081      	sub	sp, #4
	while (giBusUsing)
 8003fb4:	7813      	ldrb	r3, [r2, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1fc      	bne.n	8003fb4 <dxl_write_word+0x8>
		;

	gbInstructionPacket[DXL_PKT_ID] = id;
 8003fba:	4a09      	ldr	r2, [pc, #36]	(8003fe0 <dxl_write_word+0x34>)
	gbInstructionPacket[DXL_PKT_INST] = INST_WRITE_DATA;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	7113      	strb	r3, [r2, #4]
	gbInstructionPacket[DXL_PKT_PARA] = address;
	gbInstructionPacket[DXL_PKT_PARA + 1] = dxl_get_lowbyte(value);
	gbInstructionPacket[DXL_PKT_PARA + 2] = dxl_get_highbyte(value);
 8003fc0:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8003fc4:	71d3      	strb	r3, [r2, #7]
	gbInstructionPacket[DXL_PKT_LEN] = 5;
 8003fc6:	2305      	movs	r3, #5
//##############################################################################
void dxl_write_word(u8 id, u8 address, u16 value) {
	while (giBusUsing)
		;

	gbInstructionPacket[DXL_PKT_ID] = id;
 8003fc8:	7090      	strb	r0, [r2, #2]
	gbInstructionPacket[DXL_PKT_INST] = INST_WRITE_DATA;
	gbInstructionPacket[DXL_PKT_PARA] = address;
 8003fca:	7151      	strb	r1, [r2, #5]
	gbInstructionPacket[DXL_PKT_PARA + 1] = dxl_get_lowbyte(value);
 8003fcc:	f882 c006 	strb.w	ip, [r2, #6]
	gbInstructionPacket[DXL_PKT_PARA + 2] = dxl_get_highbyte(value);
	gbInstructionPacket[DXL_PKT_LEN] = 5;
 8003fd0:	70d3      	strb	r3, [r2, #3]

	dxl_txrx_packet();
 8003fd2:	f7ff ffbb 	bl	8003f4c <dxl_txrx_packet>
}
 8003fd6:	b001      	add	sp, #4
 8003fd8:	bd00      	pop	{pc}
 8003fda:	46c0      	nop			(mov r8, r8)
 8003fdc:	200005ce 	.word	0x200005ce
 8003fe0:	200004dc 	.word	0x200004dc

08003fe4 <dxl_read_word>:

	dxl_txrx_packet();
}

//##############################################################################
u16 dxl_read_word(u8 id, u8 address) {
 8003fe4:	b500      	push	{lr}
	while (giBusUsing)
 8003fe6:	4a0f      	ldr	r2, [pc, #60]	(8004024 <dxl_read_word+0x40>)

	dxl_txrx_packet();
}

//##############################################################################
u16 dxl_read_word(u8 id, u8 address) {
 8003fe8:	b081      	sub	sp, #4
	while (giBusUsing)
 8003fea:	7813      	ldrb	r3, [r2, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1fc      	bne.n	8003fea <dxl_read_word+0x6>
		;

	gbInstructionPacket[DXL_PKT_ID] = id;
 8003ff0:	4a0d      	ldr	r2, [pc, #52]	(8004028 <dxl_read_word+0x44>)
	gbInstructionPacket[DXL_PKT_INST] = INST_READ_DATA;
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	7113      	strb	r3, [r2, #4]
	gbInstructionPacket[DXL_PKT_PARA] = address;
	gbInstructionPacket[DXL_PKT_PARA + 1] = 2;
 8003ff6:	7193      	strb	r3, [r2, #6]
	gbInstructionPacket[DXL_PKT_LEN] = 4;
 8003ff8:	2304      	movs	r3, #4
 8003ffa:	70d3      	strb	r3, [r2, #3]
//##############################################################################
u16 dxl_read_word(u8 id, u8 address) {
	while (giBusUsing)
		;

	gbInstructionPacket[DXL_PKT_ID] = id;
 8003ffc:	7090      	strb	r0, [r2, #2]
	gbInstructionPacket[DXL_PKT_INST] = INST_READ_DATA;
	gbInstructionPacket[DXL_PKT_PARA] = address;
 8003ffe:	7151      	strb	r1, [r2, #5]
	gbInstructionPacket[DXL_PKT_PARA + 1] = 2;
	gbInstructionPacket[DXL_PKT_LEN] = 4;

	dxl_txrx_packet();
 8004000:	f7ff ffa4 	bl	8003f4c <dxl_txrx_packet>

	if ((gbCommStatus & DXL_RXFAIL))
 8004004:	4b09      	ldr	r3, [pc, #36]	(800402c <dxl_read_word+0x48>)
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	f013 0f08 	tst.w	r3, #8	; 0x8
 800400c:	d001      	beq.n	8004012 <dxl_read_word+0x2e>
 800400e:	2000      	movs	r0, #0
 8004010:	e005      	b.n	800401e <dxl_read_word+0x3a>

//##############################################################################
u16 dxl_makeword(u8 lowbyte, u8 highbyte) {
	u16 word;

	word = highbyte;
 8004012:	4b07      	ldr	r3, [pc, #28]	(8004030 <dxl_read_word+0x4c>)
 8004014:	799a      	ldrb	r2, [r3, #6]
	word = word << 8;
	word = word + lowbyte;
 8004016:	795b      	ldrb	r3, [r3, #5]
 8004018:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800401c:	b298      	uxth	r0, r3
	if ((gbCommStatus & DXL_RXFAIL))
		return 0;

	return dxl_makeword(gbStatusPacket[DXL_PKT_PARA],
			gbStatusPacket[DXL_PKT_PARA + 1]);
}
 800401e:	b001      	add	sp, #4
 8004020:	bd00      	pop	{pc}
 8004022:	46c0      	nop			(mov r8, r8)
 8004024:	200005ce 	.word	0x200005ce
 8004028:	200004dc 	.word	0x200004dc
 800402c:	20000000 	.word	0x20000000
 8004030:	2000057c 	.word	0x2000057c

08004034 <dxl_write_byte>:

	return gbStatusPacket[DXL_PKT_PARA];
}

//##############################################################################
void dxl_write_byte(u8 id, u8 address, u8 value) {
 8004034:	b500      	push	{lr}
 8004036:	4694      	mov	ip, r2
	while (giBusUsing)
 8004038:	4a08      	ldr	r2, [pc, #32]	(800405c <dxl_write_byte+0x28>)

	return gbStatusPacket[DXL_PKT_PARA];
}

//##############################################################################
void dxl_write_byte(u8 id, u8 address, u8 value) {
 800403a:	b081      	sub	sp, #4
	while (giBusUsing)
 800403c:	7813      	ldrb	r3, [r2, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1fc      	bne.n	800403c <dxl_write_byte+0x8>
		;

	gbInstructionPacket[DXL_PKT_ID] = id;
 8004042:	4b07      	ldr	r3, [pc, #28]	(8004060 <dxl_write_byte+0x2c>)
	gbInstructionPacket[DXL_PKT_INST] = INST_WRITE_DATA;
 8004044:	2203      	movs	r2, #3
 8004046:	711a      	strb	r2, [r3, #4]
	gbInstructionPacket[DXL_PKT_PARA] = address;
	gbInstructionPacket[DXL_PKT_PARA + 1] = value;
	gbInstructionPacket[DXL_PKT_LEN] = 4;
 8004048:	2204      	movs	r2, #4
//##############################################################################
void dxl_write_byte(u8 id, u8 address, u8 value) {
	while (giBusUsing)
		;

	gbInstructionPacket[DXL_PKT_ID] = id;
 800404a:	7098      	strb	r0, [r3, #2]
	gbInstructionPacket[DXL_PKT_INST] = INST_WRITE_DATA;
	gbInstructionPacket[DXL_PKT_PARA] = address;
 800404c:	7159      	strb	r1, [r3, #5]
	gbInstructionPacket[DXL_PKT_PARA + 1] = value;
 800404e:	f883 c006 	strb.w	ip, [r3, #6]
	gbInstructionPacket[DXL_PKT_LEN] = 4;
 8004052:	70da      	strb	r2, [r3, #3]

	dxl_txrx_packet();
 8004054:	f7ff ff7a 	bl	8003f4c <dxl_txrx_packet>
}
 8004058:	b001      	add	sp, #4
 800405a:	bd00      	pop	{pc}
 800405c:	200005ce 	.word	0x200005ce
 8004060:	200004dc 	.word	0x200004dc

08004064 <dxl_capture>:
			gbStatusPacket[i] = 0;
	}
}

//##############################################################################
void dxl_capture(u8 id) {
 8004064:	b500      	push	{lr}
//    gbInstructionPacket[DXL_PKT_INST] = INST_CAP_REGION;
//    gbInstructionPacket[DXL_PKT_LEN] = 2;

//    dxl_txrx_packet();

	dxl_write_byte(id, 0, 0);
 8004066:	2100      	movs	r1, #0
			gbStatusPacket[i] = 0;
	}
}

//##############################################################################
void dxl_capture(u8 id) {
 8004068:	b081      	sub	sp, #4
//    gbInstructionPacket[DXL_PKT_INST] = INST_CAP_REGION;
//    gbInstructionPacket[DXL_PKT_LEN] = 2;

//    dxl_txrx_packet();

	dxl_write_byte(id, 0, 0);
 800406a:	2200      	movs	r2, #0
 800406c:	f7ff ffe2 	bl	8004034 <dxl_write_byte>
}
 8004070:	b001      	add	sp, #4
 8004072:	bd00      	pop	{pc}

08004074 <dxl_read_byte>:

	dxl_txrx_packet();
}

//##############################################################################
u8 dxl_read_byte(u8 id, u8 address) {
 8004074:	b500      	push	{lr}
	while (giBusUsing)
 8004076:	4a0d      	ldr	r2, [pc, #52]	(80040ac <dxl_read_byte+0x38>)

	dxl_txrx_packet();
}

//##############################################################################
u8 dxl_read_byte(u8 id, u8 address) {
 8004078:	b081      	sub	sp, #4
	while (giBusUsing)
 800407a:	7813      	ldrb	r3, [r2, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1fc      	bne.n	800407a <dxl_read_byte+0x6>
		;

	gbInstructionPacket[DXL_PKT_ID] = id;
 8004080:	4a0b      	ldr	r2, [pc, #44]	(80040b0 <dxl_read_byte+0x3c>)
	gbInstructionPacket[DXL_PKT_INST] = INST_READ_DATA;
 8004082:	2302      	movs	r3, #2
 8004084:	7113      	strb	r3, [r2, #4]
	gbInstructionPacket[DXL_PKT_PARA] = address;
	gbInstructionPacket[DXL_PKT_PARA + 1] = 1;
 8004086:	2301      	movs	r3, #1
 8004088:	7193      	strb	r3, [r2, #6]
	gbInstructionPacket[DXL_PKT_LEN] = 4;
 800408a:	2304      	movs	r3, #4
 800408c:	70d3      	strb	r3, [r2, #3]
//##############################################################################
u8 dxl_read_byte(u8 id, u8 address) {
	while (giBusUsing)
		;

	gbInstructionPacket[DXL_PKT_ID] = id;
 800408e:	7090      	strb	r0, [r2, #2]
	gbInstructionPacket[DXL_PKT_INST] = INST_READ_DATA;
	gbInstructionPacket[DXL_PKT_PARA] = address;
 8004090:	7151      	strb	r1, [r2, #5]
	gbInstructionPacket[DXL_PKT_PARA + 1] = 1;
	gbInstructionPacket[DXL_PKT_LEN] = 4;

	dxl_txrx_packet();
 8004092:	f7ff ff5b 	bl	8003f4c <dxl_txrx_packet>

	if ((gbCommStatus & DXL_RXFAIL))
 8004096:	4b07      	ldr	r3, [pc, #28]	(80040b4 <dxl_read_byte+0x40>)
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	f013 0f08 	tst.w	r3, #8	; 0x8
 800409e:	d001      	beq.n	80040a4 <dxl_read_byte+0x30>
 80040a0:	2000      	movs	r0, #0
 80040a2:	e001      	b.n	80040a8 <dxl_read_byte+0x34>
		return 0;

	return gbStatusPacket[DXL_PKT_PARA];
 80040a4:	4b04      	ldr	r3, [pc, #16]	(80040b8 <dxl_read_byte+0x44>)
 80040a6:	7958      	ldrb	r0, [r3, #5]
}
 80040a8:	b001      	add	sp, #4
 80040aa:	bd00      	pop	{pc}
 80040ac:	200005ce 	.word	0x200005ce
 80040b0:	200004dc 	.word	0x200004dc
 80040b4:	20000000 	.word	0x20000000
 80040b8:	2000057c 	.word	0x2000057c

080040bc <dxl_ping>:
	u16 temp = ((word & 0xFF00) >> 8);
	return (u8) temp;
}

//##############################################################################
void dxl_ping(u8 id) {
 80040bc:	b500      	push	{lr}
	while (giBusUsing)
 80040be:	4a07      	ldr	r2, [pc, #28]	(80040dc <dxl_ping+0x20>)
	u16 temp = ((word & 0xFF00) >> 8);
	return (u8) temp;
}

//##############################################################################
void dxl_ping(u8 id) {
 80040c0:	b081      	sub	sp, #4
	while (giBusUsing)
 80040c2:	7813      	ldrb	r3, [r2, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1fc      	bne.n	80040c2 <dxl_ping+0x6>
		;

	gbInstructionPacket[DXL_PKT_ID] = id;
 80040c8:	4b05      	ldr	r3, [pc, #20]	(80040e0 <dxl_ping+0x24>)
	gbInstructionPacket[DXL_PKT_INST] = INST_PING;
 80040ca:	2201      	movs	r2, #1
 80040cc:	711a      	strb	r2, [r3, #4]
	gbInstructionPacket[DXL_PKT_LEN] = 2;
 80040ce:	2202      	movs	r2, #2
//##############################################################################
void dxl_ping(u8 id) {
	while (giBusUsing)
		;

	gbInstructionPacket[DXL_PKT_ID] = id;
 80040d0:	7098      	strb	r0, [r3, #2]
	gbInstructionPacket[DXL_PKT_INST] = INST_PING;
	gbInstructionPacket[DXL_PKT_LEN] = 2;
 80040d2:	70da      	strb	r2, [r3, #3]

	dxl_txrx_packet();
 80040d4:	f7ff ff3a 	bl	8003f4c <dxl_txrx_packet>
}
 80040d8:	b001      	add	sp, #4
 80040da:	bd00      	pop	{pc}
 80040dc:	200005ce 	.word	0x200005ce
 80040e0:	200004dc 	.word	0x200004dc

080040e4 <dxl_terminate>:

	return 1;
}

//##############################################################################
void dxl_terminate(void) {
 80040e4:	b500      	push	{lr}
 80040e6:	b081      	sub	sp, #4
	dxl_hal_close();
 80040e8:	f000 ff70 	bl	8004fcc <dxl_hal_close>
}
 80040ec:	b001      	add	sp, #4
 80040ee:	bd00      	pop	{pc}

080040f0 <dxl_initialize>:
u8 gbRxGetLength = 0;
volatile u16 gbCommStatus = DXL_RXSUCCESS;
volatile u8 giBusUsing = 0;

//##############################################################################
u8 dxl_initialize(u32 baudrate) {
 80040f0:	b500      	push	{lr}
 80040f2:	b081      	sub	sp, #4
	if (dxl_hal_open(baudrate) == 0)
 80040f4:	f000 ff90 	bl	8005018 <dxl_hal_open>
 80040f8:	b138      	cbz	r0, 800410a <dxl_initialize+0x1a>
		return 0;

	gbCommStatus = DXL_RXSUCCESS;
 80040fa:	4b05      	ldr	r3, [pc, #20]	(8004110 <dxl_initialize+0x20>)
 80040fc:	f04f 0202 	mov.w	r2, #2	; 0x2
 8004100:	801a      	strh	r2, [r3, #0]
	giBusUsing = 0;
 8004102:	4b04      	ldr	r3, [pc, #16]	(8004114 <dxl_initialize+0x24>)
 8004104:	2200      	movs	r2, #0
 8004106:	701a      	strb	r2, [r3, #0]
 8004108:	2001      	movs	r0, #1

	return 1;
}
 800410a:	b001      	add	sp, #4
 800410c:	bd00      	pop	{pc}
 800410e:	46c0      	nop			(mov r8, r8)
 8004110:	20000000 	.word	0x20000000
 8004114:	200005ce 	.word	0x200005ce

08004118 <zgb_rx_data>:
}

//##############################################################################
u16 zgb_rx_data(void)
{
	gbRcvFlag = 0;
 8004118:	4b02      	ldr	r3, [pc, #8]	(8004124 <zgb_rx_data+0xc>)
 800411a:	2200      	movs	r2, #0
 800411c:	701a      	strb	r2, [r3, #0]
 800411e:	4b02      	ldr	r3, [pc, #8]	(8004128 <zgb_rx_data+0x10>)
 8004120:	8818      	ldrh	r0, [r3, #0]
	return gwRcvData;
}
 8004122:	4770      	bx	lr
 8004124:	200005e4 	.word	0x200005e4
 8004128:	200005e2 	.word	0x200005e2

0800412c <zgb_rx_data_right_V>:
    return gbRcvFlag;
}

//##############################################################################
u16 zgb_rx_data_right_V(void)
{
 800412c:	4b01      	ldr	r3, [pc, #4]	(8004134 <zgb_rx_data_right_V+0x8>)
 800412e:	7818      	ldrb	r0, [r3, #0]
    //gbRcvFlag = 0;
    return right_V;
}
 8004130:	4770      	bx	lr
 8004132:	46c0      	nop			(mov r8, r8)
 8004134:	200005e5 	.word	0x200005e5

08004138 <zgb_rx_data_right_H>:
//##############################################################################
u16 zgb_rx_data_right_H(void)
{
 8004138:	4b01      	ldr	r3, [pc, #4]	(8004140 <zgb_rx_data_right_H+0x8>)
 800413a:	7818      	ldrb	r0, [r3, #0]
    //gbRcvFlag = 0;
    return right_H;
}
 800413c:	4770      	bx	lr
 800413e:	46c0      	nop			(mov r8, r8)
 8004140:	200005e6 	.word	0x200005e6

08004144 <zgb_rx_data_left_V>:
//##############################################################################
u16 zgb_rx_data_left_V(void)
{
 8004144:	4b01      	ldr	r3, [pc, #4]	(800414c <zgb_rx_data_left_V+0x8>)
 8004146:	7818      	ldrb	r0, [r3, #0]
    //gbRcvFlag = 0;
    return left_V;
}
 8004148:	4770      	bx	lr
 800414a:	46c0      	nop			(mov r8, r8)
 800414c:	200005e7 	.word	0x200005e7

08004150 <zgb_rx_data_left_H>:
//##############################################################################
u16 zgb_rx_data_left_H(void)
{
 8004150:	4b01      	ldr	r3, [pc, #4]	(8004158 <zgb_rx_data_left_H+0x8>)
 8004152:	7818      	ldrb	r0, [r3, #0]
    //gbRcvFlag = 0;
    return left_H;
}
 8004154:	4770      	bx	lr
 8004156:	46c0      	nop			(mov r8, r8)
 8004158:	200005e8 	.word	0x200005e8

0800415c <zgb_rx_data_buttons>:
//##############################################################################
u8 zgb_rx_data_buttons(void)
{
 800415c:	4b01      	ldr	r3, [pc, #4]	(8004164 <zgb_rx_data_buttons+0x8>)
 800415e:	7818      	ldrb	r0, [r3, #0]
    //gbRcvFlag = 0;
    return buttons_;
}
 8004160:	4770      	bx	lr
 8004162:	46c0      	nop			(mov r8, r8)
 8004164:	200005e9 	.word	0x200005e9

08004168 <zgb_rx_data_extra>:
//##############################################################################
u8 zgb_rx_data_extra(void)
{
    gbRcvFlag = 0;
 8004168:	4b02      	ldr	r3, [pc, #8]	(8004174 <zgb_rx_data_extra+0xc>)
 800416a:	2200      	movs	r2, #0
 800416c:	701a      	strb	r2, [r3, #0]
    return 0;

}
 800416e:	2000      	movs	r0, #0
 8004170:	4770      	bx	lr
 8004172:	46c0      	nop			(mov r8, r8)
 8004174:	200005e4 	.word	0x200005e4

08004178 <zgb_rx_data_right_V_>:
//##############################################################################
int zgb_rx_data_right_V_(void)
{
 8004178:	4b01      	ldr	r3, [pc, #4]	(8004180 <zgb_rx_data_right_V_+0x8>)
 800417a:	7818      	ldrb	r0, [r3, #0]
 800417c:	3880      	subs	r0, #128
    //gbRcvFlag = 0;
    return (right_V - 128);
}
 800417e:	4770      	bx	lr
 8004180:	200005e5 	.word	0x200005e5

08004184 <zgb_rx_data_right_H_>:
//##############################################################################
int zgb_rx_data_right_H_(void)
{
 8004184:	4b01      	ldr	r3, [pc, #4]	(800418c <zgb_rx_data_right_H_+0x8>)
 8004186:	7818      	ldrb	r0, [r3, #0]
 8004188:	3880      	subs	r0, #128
    //gbRcvFlag = 0;
    return (right_H - 128);
}
 800418a:	4770      	bx	lr
 800418c:	200005e6 	.word	0x200005e6

08004190 <zgb_rx_data_left_V_>:
//##############################################################################
int zgb_rx_data_left_V_(void)
{
 8004190:	4b01      	ldr	r3, [pc, #4]	(8004198 <zgb_rx_data_left_V_+0x8>)
 8004192:	7818      	ldrb	r0, [r3, #0]
 8004194:	3880      	subs	r0, #128
    //gbRcvFlag = 0;
    return (left_V - 128);
}
 8004196:	4770      	bx	lr
 8004198:	200005e7 	.word	0x200005e7

0800419c <zgb_rx_data_left_H_>:
//##############################################################################
int zgb_rx_data_left_H_(void)
{
 800419c:	4b01      	ldr	r3, [pc, #4]	(80041a4 <zgb_rx_data_left_H_+0x8>)
 800419e:	7818      	ldrb	r0, [r3, #0]
 80041a0:	3880      	subs	r0, #128
    //gbRcvFlag = 0;
    return (left_H- 128);
}
 80041a2:	4770      	bx	lr
 80041a4:	200005e8 	.word	0x200005e8

080041a8 <CheckZBNewArrive>:
//##############################################################################
byte CheckZBNewArrive(void) {
	if (gbZigRead != gbZigWrite)
 80041a8:	4b03      	ldr	r3, [pc, #12]	(80041b8 <CheckZBNewArrive+0x10>)
 80041aa:	7818      	ldrb	r0, [r3, #0]
 80041ac:	4b03      	ldr	r3, [pc, #12]	(80041bc <CheckZBNewArrive+0x14>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	1ac0      	subs	r0, r0, r3
 80041b2:	bf18      	it	ne
 80041b4:	2001      	movne	r0, #1
		return 1;
	else
		return 0;
}
 80041b6:	4770      	bx	lr
 80041b8:	200005d0 	.word	0x200005d0
 80041bc:	200005d1 	.word	0x200005d1

080041c0 <zgb_rx_check_arduino>:
	return gwRcvData;
}

//##############################################################################
u8 zgb_rx_check_arduino(void)
{
 80041c0:	b570      	push	{r4, r5, r6, lr}

    u8 RcvNum;
    u8 checksum;
    u8 i, j;

    if (gbRcvFlag==1){
 80041c2:	4b3e      	ldr	r3, [pc, #248]	(80042bc <zgb_rx_check_arduino+0xfc>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d101      	bne.n	80041ce <zgb_rx_check_arduino+0xe>
 80041ca:	2001      	movs	r0, #1
 80041cc:	e075      	b.n	80042ba <zgb_rx_check_arduino+0xfa>
    }



    // Fill packet buffer
    if (gbRcvPacketNum<9)
 80041ce:	4c3c      	ldr	r4, [pc, #240]	(80042c0 <zgb_rx_check_arduino+0x100>)
 80041d0:	7823      	ldrb	r3, [r4, #0]
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d809      	bhi.n	80041ea <zgb_rx_check_arduino+0x2a>


    {


        RcvNum = zgb_hal_rx((u8*)&gbRcvPacketArduino[gbRcvPacketNum], (9-gbRcvPacketNum));
 80041d6:	483b      	ldr	r0, [pc, #236]	(80042c4 <zgb_rx_check_arduino+0x104>)
 80041d8:	f1c3 0109 	rsb	r1, r3, #9	; 0x9
 80041dc:	18c0      	adds	r0, r0, r3
 80041de:	b2c9      	uxtb	r1, r1
 80041e0:	f000 fe0c 	bl	8004dfc <zgb_hal_rx>
        if (RcvNum!=-1)
            gbRcvPacketNum += RcvNum;
 80041e4:	7823      	ldrb	r3, [r4, #0]
 80041e6:	18c0      	adds	r0, r0, r3
 80041e8:	7020      	strb	r0, [r4, #0]
    }

    // Find header
    if (gbRcvPacketNum>=2)
 80041ea:	4b35      	ldr	r3, [pc, #212]	(80042c0 <zgb_rx_check_arduino+0x100>)
 80041ec:	f893 c000 	ldrb.w	ip, [r3]
 80041f0:	f1bc 0f01 	cmp.w	ip, #1	; 0x1
 80041f4:	d92c      	bls.n	8004250 <zgb_rx_check_arduino+0x90>
 80041f6:	2200      	movs	r2, #0
    {

        for (i=0; i<gbRcvPacketNum; i++)
        {
            if (gbRcvPacketArduino[i]==0xFF)
 80041f8:	4d32      	ldr	r5, [pc, #200]	(80042c4 <zgb_rx_check_arduino+0x104>)
            {
                if (i<=(gbRcvPacketNum-2))
 80041fa:	f10c 34ff 	add.w	r4, ip, #4294967295	; 0xffffffff
 80041fe:	e00a      	b.n	8004216 <zgb_rx_check_arduino+0x56>
    if (gbRcvPacketNum>=2)
    {

        for (i=0; i<gbRcvPacketNum; i++)
        {
            if (gbRcvPacketArduino[i]==0xFF)
 8004200:	5cab      	ldrb	r3, [r5, r2]
 8004202:	eb05 0102 	add.w	r1, r5, r2
 8004206:	2bff      	cmp	r3, #255
 8004208:	d104      	bne.n	8004214 <zgb_rx_check_arduino+0x54>
            {
                if (i<=(gbRcvPacketNum-2))
 800420a:	4294      	cmp	r4, r2
 800420c:	dd02      	ble.n	8004214 <zgb_rx_check_arduino+0x54>
                {
                    if (gbRcvPacketArduino[i+1]==0x55)
 800420e:	784b      	ldrb	r3, [r1, #1]
 8004210:	2b55      	cmp	r3, #85
 8004212:	d003      	beq.n	800421c <zgb_rx_check_arduino+0x5c>
                        break;
 8004214:	3201      	adds	r2, #1
 8004216:	b2d0      	uxtb	r0, r2

    // Find header
    if (gbRcvPacketNum>=2)
    {

        for (i=0; i<gbRcvPacketNum; i++)
 8004218:	4560      	cmp	r0, ip
 800421a:	d3f1      	bcc.n	8004200 <zgb_rx_check_arduino+0x40>
                        break;
                }
            }
        }

        if (i>0)
 800421c:	b1c0      	cbz	r0, 8004250 <zgb_rx_check_arduino+0x90>
        {
            if (i==gbRcvPacketNum)
 800421e:	4560      	cmp	r0, ip
 8004220:	d107      	bne.n	8004232 <zgb_rx_check_arduino+0x72>
            {
                // Cannot find header
                if (gbRcvPacketArduino[i-1]==0xFF)
 8004222:	4b28      	ldr	r3, [pc, #160]	(80042c4 <zgb_rx_check_arduino+0x104>)
 8004224:	181b      	adds	r3, r3, r0
 8004226:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800422a:	2bff      	cmp	r3, #255
 800422c:	d101      	bne.n	8004232 <zgb_rx_check_arduino+0x72>

                    i--;
 800422e:	1e43      	subs	r3, r0, #1
 8004230:	b2d8      	uxtb	r0, r3
 8004232:	4601      	mov	r1, r0

            // Remove data before header
            for (j=i; j<gbRcvPacketNum; j++)
            {

                gbRcvPacketArduino[j-i] = gbRcvPacketArduino[j];
 8004234:	4c23      	ldr	r4, [pc, #140]	(80042c4 <zgb_rx_check_arduino+0x104>)
 8004236:	e005      	b.n	8004244 <zgb_rx_check_arduino+0x84>
 8004238:	5c62      	ldrb	r2, [r4, r1]
 800423a:	ebc0 0301 	rsb	r3, r0, r1
 800423e:	54e2      	strb	r2, [r4, r3]

                    i--;
            }

            // Remove data before header
            for (j=i; j<gbRcvPacketNum; j++)
 8004240:	1c4b      	adds	r3, r1, #1
 8004242:	b2d9      	uxtb	r1, r3
 8004244:	4561      	cmp	r1, ip
 8004246:	d3f7      	bcc.n	8004238 <zgb_rx_check_arduino+0x78>
            {

                gbRcvPacketArduino[j-i] = gbRcvPacketArduino[j];
            }
            gbRcvPacketNum -= i;
 8004248:	4b1d      	ldr	r3, [pc, #116]	(80042c0 <zgb_rx_check_arduino+0x100>)
 800424a:	ebc0 020c 	rsb	r2, r0, ip
 800424e:	701a      	strb	r2, [r3, #0]
        }
    }

    // Verify packet
    if (gbRcvPacketNum==9)
 8004250:	4b1b      	ldr	r3, [pc, #108]	(80042c0 <zgb_rx_check_arduino+0x100>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b09      	cmp	r3, #9
 8004256:	d12d      	bne.n	80042b4 <zgb_rx_check_arduino+0xf4>
    {

        if ( (gbRcvPacketArduino[0]==0xFF) && (gbRcvPacketArduino[1]==0x55) )
 8004258:	4e1a      	ldr	r6, [pc, #104]	(80042c4 <zgb_rx_check_arduino+0x104>)
 800425a:	7833      	ldrb	r3, [r6, #0]
 800425c:	2bff      	cmp	r3, #255
 800425e:	d124      	bne.n	80042aa <zgb_rx_check_arduino+0xea>
 8004260:	7873      	ldrb	r3, [r6, #1]
 8004262:	2b55      	cmp	r3, #85
 8004264:	d121      	bne.n	80042aa <zgb_rx_check_arduino+0xea>
                    gbRcvFlag = 1;
                }
            }*/


                  		left_V  =   gbRcvPacketArduino[2];
 8004266:	78b5      	ldrb	r5, [r6, #2]
 8004268:	4b17      	ldr	r3, [pc, #92]	(80042c8 <zgb_rx_check_arduino+0x108>)
        	            left_H  =   gbRcvPacketArduino[3];
 800426a:	78f4      	ldrb	r4, [r6, #3]
                    gbRcvFlag = 1;
                }
            }*/


                  		left_V  =   gbRcvPacketArduino[2];
 800426c:	701d      	strb	r5, [r3, #0]
        	            left_H  =   gbRcvPacketArduino[3];
 800426e:	4b17      	ldr	r3, [pc, #92]	(80042cc <zgb_rx_check_arduino+0x10c>)
        	            right_V =   gbRcvPacketArduino[4];
 8004270:	f896 c004 	ldrb.w	ip, [r6, #4]
                }
            }*/


                  		left_V  =   gbRcvPacketArduino[2];
        	            left_H  =   gbRcvPacketArduino[3];
 8004274:	701c      	strb	r4, [r3, #0]
        	            right_V =   gbRcvPacketArduino[4];
 8004276:	4b16      	ldr	r3, [pc, #88]	(80042d0 <zgb_rx_check_arduino+0x110>)
        	            right_H =   gbRcvPacketArduino[5];
 8004278:	4a16      	ldr	r2, [pc, #88]	(80042d4 <zgb_rx_check_arduino+0x114>)
            }*/


                  		left_V  =   gbRcvPacketArduino[2];
        	            left_H  =   gbRcvPacketArduino[3];
        	            right_V =   gbRcvPacketArduino[4];
 800427a:	f883 c000 	strb.w	ip, [r3]
        	            right_H =   gbRcvPacketArduino[5];
 800427e:	7973      	ldrb	r3, [r6, #5]
        	            buttons_=   gbRcvPacketArduino[6];
 8004280:	79b0      	ldrb	r0, [r6, #6]


                  		left_V  =   gbRcvPacketArduino[2];
        	            left_H  =   gbRcvPacketArduino[3];
        	            right_V =   gbRcvPacketArduino[4];
        	            right_H =   gbRcvPacketArduino[5];
 8004282:	7013      	strb	r3, [r2, #0]
        	            buttons_=   gbRcvPacketArduino[6];
 8004284:	4a14      	ldr	r2, [pc, #80]	(80042d8 <zgb_rx_check_arduino+0x118>)
	TxD_Dec_U8(extra);
	PrintString("\n");
#endif


            if (checksum == (255 - (right_V+right_H+left_V+left_H+buttons_)%256)){        	  //if (checksum == (255 - (gbRcvPacketArduino[2]+gbRcvPacketArduino[3]+gbRcvPacketArduino[4]+gbRcvPacketArduino[5]+gbRcvPacketArduino[6])%256)){
 8004286:	4463      	add	r3, ip
 8004288:	195b      	adds	r3, r3, r5
 800428a:	191b      	adds	r3, r3, r4

                  		left_V  =   gbRcvPacketArduino[2];
        	            left_H  =   gbRcvPacketArduino[3];
        	            right_V =   gbRcvPacketArduino[4];
        	            right_H =   gbRcvPacketArduino[5];
        	            buttons_=   gbRcvPacketArduino[6];
 800428c:	7010      	strb	r0, [r2, #0]
        	            extra   =   gbRcvPacketArduino[7];
 800428e:	79f1      	ldrb	r1, [r6, #7]
 8004290:	4a12      	ldr	r2, [pc, #72]	(80042dc <zgb_rx_check_arduino+0x11c>)
	TxD_Dec_U8(extra);
	PrintString("\n");
#endif


            if (checksum == (255 - (right_V+right_H+left_V+left_H+buttons_)%256)){        	  //if (checksum == (255 - (gbRcvPacketArduino[2]+gbRcvPacketArduino[3]+gbRcvPacketArduino[4]+gbRcvPacketArduino[5]+gbRcvPacketArduino[6])%256)){
 8004292:	181b      	adds	r3, r3, r0
                  		left_V  =   gbRcvPacketArduino[2];
        	            left_H  =   gbRcvPacketArduino[3];
        	            right_V =   gbRcvPacketArduino[4];
        	            right_H =   gbRcvPacketArduino[5];
        	            buttons_=   gbRcvPacketArduino[6];
        	            extra   =   gbRcvPacketArduino[7];
 8004294:	7011      	strb	r1, [r2, #0]
	TxD_Dec_U8(extra);
	PrintString("\n");
#endif


            if (checksum == (255 - (right_V+right_H+left_V+left_H+buttons_)%256)){        	  //if (checksum == (255 - (gbRcvPacketArduino[2]+gbRcvPacketArduino[3]+gbRcvPacketArduino[4]+gbRcvPacketArduino[5]+gbRcvPacketArduino[6])%256)){
 8004296:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800429a:	7a32      	ldrb	r2, [r6, #8]
 800429c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d102      	bne.n	80042aa <zgb_rx_check_arduino+0xea>


				 gbRcvFlag = 1;
 80042a4:	4b05      	ldr	r3, [pc, #20]	(80042bc <zgb_rx_check_arduino+0xfc>)
 80042a6:	2201      	movs	r2, #1
 80042a8:	701a      	strb	r2, [r3, #0]
            }

        }
        gbRcvPacketArduino[0] = 0x00;
 80042aa:	4a06      	ldr	r2, [pc, #24]	(80042c4 <zgb_rx_check_arduino+0x104>)
 80042ac:	2300      	movs	r3, #0
 80042ae:	7013      	strb	r3, [r2, #0]
        gbRcvPacketNum = 0;
 80042b0:	4a03      	ldr	r2, [pc, #12]	(80042c0 <zgb_rx_check_arduino+0x100>)
 80042b2:	7013      	strb	r3, [r2, #0]
    }

    return gbRcvFlag;
 80042b4:	4b01      	ldr	r3, [pc, #4]	(80042bc <zgb_rx_check_arduino+0xfc>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	4618      	mov	r0, r3
}
 80042ba:	bd70      	pop	{r4, r5, r6, pc}
 80042bc:	200005e4 	.word	0x200005e4
 80042c0:	200005e1 	.word	0x200005e1
 80042c4:	200005d8 	.word	0x200005d8
 80042c8:	200005e7 	.word	0x200005e7
 80042cc:	200005e8 	.word	0x200005e8
 80042d0:	200005e5 	.word	0x200005e5
 80042d4:	200005e6 	.word	0x200005e6
 80042d8:	200005e9 	.word	0x200005e9
 80042dc:	200005ea 	.word	0x200005ea

080042e0 <zgb_rx_check>:
	return 1;
}

//##############################################################################
u8 zgb_rx_check(void)
{
 80042e0:	b530      	push	{r4, r5, lr}
	u8 RcvNum;
	u8 checksum;
	u8 i, j;

	if (gbRcvFlag==1)
 80042e2:	4b39      	ldr	r3, [pc, #228]	(80043c8 <zgb_rx_check+0xe8>)
	return 1;
}

//##############################################################################
u8 zgb_rx_check(void)
{
 80042e4:	b081      	sub	sp, #4
	u8 RcvNum;
	u8 checksum;
	u8 i, j;

	if (gbRcvFlag==1)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <zgb_rx_check+0x10>
 80042ec:	2001      	movs	r0, #1
 80042ee:	e068      	b.n	80043c2 <zgb_rx_check+0xe2>
	return 1;

	// Fill packet buffer
	if (gbRcvPacketNum<6)
 80042f0:	4c36      	ldr	r4, [pc, #216]	(80043cc <zgb_rx_check+0xec>)
 80042f2:	7823      	ldrb	r3, [r4, #0]
 80042f4:	2b05      	cmp	r3, #5
 80042f6:	d809      	bhi.n	800430c <zgb_rx_check+0x2c>
	{
		RcvNum = zgb_hal_rx((u8*)&gbRcvPacket[gbRcvPacketNum], (6-gbRcvPacketNum));
 80042f8:	4835      	ldr	r0, [pc, #212]	(80043d0 <zgb_rx_check+0xf0>)
 80042fa:	f1c3 0106 	rsb	r1, r3, #6	; 0x6
 80042fe:	18c0      	adds	r0, r0, r3
 8004300:	b2c9      	uxtb	r1, r1
 8004302:	f000 fd7b 	bl	8004dfc <zgb_hal_rx>
		if (RcvNum!=-1)
		gbRcvPacketNum += RcvNum;
 8004306:	7823      	ldrb	r3, [r4, #0]
 8004308:	18c0      	adds	r0, r0, r3
 800430a:	7020      	strb	r0, [r4, #0]
	}

	// Find header
	if (gbRcvPacketNum>=2)
 800430c:	4b2f      	ldr	r3, [pc, #188]	(80043cc <zgb_rx_check+0xec>)
 800430e:	f893 c000 	ldrb.w	ip, [r3]
 8004312:	f1bc 0f01 	cmp.w	ip, #1	; 0x1
 8004316:	d92c      	bls.n	8004372 <zgb_rx_check+0x92>
 8004318:	2200      	movs	r2, #0
	{
		for (i=0; i<gbRcvPacketNum; i++)
		{
			if (gbRcvPacket[i]==0xFF)
 800431a:	4d2d      	ldr	r5, [pc, #180]	(80043d0 <zgb_rx_check+0xf0>)
			{
				if (i<=(gbRcvPacketNum-2))
 800431c:	f10c 34ff 	add.w	r4, ip, #4294967295	; 0xffffffff
 8004320:	e00a      	b.n	8004338 <zgb_rx_check+0x58>
	// Find header
	if (gbRcvPacketNum>=2)
	{
		for (i=0; i<gbRcvPacketNum; i++)
		{
			if (gbRcvPacket[i]==0xFF)
 8004322:	5cab      	ldrb	r3, [r5, r2]
 8004324:	eb05 0102 	add.w	r1, r5, r2
 8004328:	2bff      	cmp	r3, #255
 800432a:	d104      	bne.n	8004336 <zgb_rx_check+0x56>
			{
				if (i<=(gbRcvPacketNum-2))
 800432c:	4294      	cmp	r4, r2
 800432e:	dd02      	ble.n	8004336 <zgb_rx_check+0x56>
				{
					if (gbRcvPacket[i+1]==0x55)
 8004330:	784b      	ldrb	r3, [r1, #1]
 8004332:	2b55      	cmp	r3, #85
 8004334:	d003      	beq.n	800433e <zgb_rx_check+0x5e>
					break;
 8004336:	3201      	adds	r2, #1
 8004338:	b2d0      	uxtb	r0, r2
	}

	// Find header
	if (gbRcvPacketNum>=2)
	{
		for (i=0; i<gbRcvPacketNum; i++)
 800433a:	4560      	cmp	r0, ip
 800433c:	d3f1      	bcc.n	8004322 <zgb_rx_check+0x42>
					break;
				}
			}
		}

		if (i>0)
 800433e:	b1c0      	cbz	r0, 8004372 <zgb_rx_check+0x92>
		{
			if (i==gbRcvPacketNum)
 8004340:	4560      	cmp	r0, ip
 8004342:	d107      	bne.n	8004354 <zgb_rx_check+0x74>
			{
				// Cannot find header
				if (gbRcvPacket[i-1]==0xFF)
 8004344:	4b22      	ldr	r3, [pc, #136]	(80043d0 <zgb_rx_check+0xf0>)
 8004346:	181b      	adds	r3, r3, r0
 8004348:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800434c:	2bff      	cmp	r3, #255
 800434e:	d101      	bne.n	8004354 <zgb_rx_check+0x74>
				i--;
 8004350:	1e43      	subs	r3, r0, #1
 8004352:	b2d8      	uxtb	r0, r3
 8004354:	4601      	mov	r1, r0
			}

			// Remove data before header
			for (j=i; j<gbRcvPacketNum; j++)
			{
				gbRcvPacket[j-i] = gbRcvPacket[j];
 8004356:	4c1e      	ldr	r4, [pc, #120]	(80043d0 <zgb_rx_check+0xf0>)
 8004358:	e005      	b.n	8004366 <zgb_rx_check+0x86>
 800435a:	5c62      	ldrb	r2, [r4, r1]
 800435c:	ebc0 0301 	rsb	r3, r0, r1
 8004360:	54e2      	strb	r2, [r4, r3]
				if (gbRcvPacket[i-1]==0xFF)
				i--;
			}

			// Remove data before header
			for (j=i; j<gbRcvPacketNum; j++)
 8004362:	1c4b      	adds	r3, r1, #1
 8004364:	b2d9      	uxtb	r1, r3
 8004366:	4561      	cmp	r1, ip
 8004368:	d3f7      	bcc.n	800435a <zgb_rx_check+0x7a>
			{
				gbRcvPacket[j-i] = gbRcvPacket[j];
			}
			gbRcvPacketNum -= i;
 800436a:	4b18      	ldr	r3, [pc, #96]	(80043cc <zgb_rx_check+0xec>)
 800436c:	ebc0 020c 	rsb	r2, r0, ip
 8004370:	701a      	strb	r2, [r3, #0]
		}
	}

	// Verify packet
	if (gbRcvPacketNum==6)
 8004372:	4b16      	ldr	r3, [pc, #88]	(80043cc <zgb_rx_check+0xec>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b06      	cmp	r3, #6
 8004378:	d120      	bne.n	80043bc <zgb_rx_check+0xdc>
	{
		if ( (gbRcvPacket[0]==0xFF) && (gbRcvPacket[1]==0x55) )
 800437a:	4a15      	ldr	r2, [pc, #84]	(80043d0 <zgb_rx_check+0xf0>)
 800437c:	7813      	ldrb	r3, [r2, #0]
 800437e:	2bff      	cmp	r3, #255
 8004380:	d117      	bne.n	80043b2 <zgb_rx_check+0xd2>
 8004382:	7853      	ldrb	r3, [r2, #1]
 8004384:	2b55      	cmp	r3, #85
 8004386:	d114      	bne.n	80043b2 <zgb_rx_check+0xd2>
		{
			checksum = ~gbRcvPacket[3];
			if (gbRcvPacket[2]==checksum)
 8004388:	78d3      	ldrb	r3, [r2, #3]
 800438a:	7890      	ldrb	r0, [r2, #2]
 800438c:	ea6f 0303 	mvn.w	r3, r3
 8004390:	b2db      	uxtb	r3, r3
 8004392:	4298      	cmp	r0, r3
 8004394:	d10d      	bne.n	80043b2 <zgb_rx_check+0xd2>
			{
				checksum = ~gbRcvPacket[5];
				if (gbRcvPacket[4]==checksum)
 8004396:	7953      	ldrb	r3, [r2, #5]
 8004398:	7911      	ldrb	r1, [r2, #4]
 800439a:	ea6f 0303 	mvn.w	r3, r3
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	4299      	cmp	r1, r3
 80043a2:	d106      	bne.n	80043b2 <zgb_rx_check+0xd2>
				{
					gwRcvData = (u16) ((gbRcvPacket[4]<<8)&0xFF00);
					gwRcvData += gbRcvPacket[2];
 80043a4:	4b0b      	ldr	r3, [pc, #44]	(80043d4 <zgb_rx_check+0xf4>)
 80043a6:	eb00 2201 	add.w	r2, r0, r1, lsl #8
 80043aa:	801a      	strh	r2, [r3, #0]
					gbRcvFlag = 1;
 80043ac:	4b06      	ldr	r3, [pc, #24]	(80043c8 <zgb_rx_check+0xe8>)
 80043ae:	2201      	movs	r2, #1
 80043b0:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		gbRcvPacket[0] = 0x00;
 80043b2:	4a07      	ldr	r2, [pc, #28]	(80043d0 <zgb_rx_check+0xf0>)
 80043b4:	2300      	movs	r3, #0
 80043b6:	7013      	strb	r3, [r2, #0]
		gbRcvPacketNum = 0;
 80043b8:	4a04      	ldr	r2, [pc, #16]	(80043cc <zgb_rx_check+0xec>)
 80043ba:	7013      	strb	r3, [r2, #0]
	}

	return gbRcvFlag;
 80043bc:	4b02      	ldr	r3, [pc, #8]	(80043c8 <zgb_rx_check+0xe8>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
}
 80043c2:	b001      	add	sp, #4
 80043c4:	bd30      	pop	{r4, r5, pc}
 80043c6:	46c0      	nop			(mov r8, r8)
 80043c8:	200005e4 	.word	0x200005e4
 80043cc:	200005e1 	.word	0x200005e1
 80043d0:	200005d2 	.word	0x200005d2
 80043d4:	200005e2 	.word	0x200005e2

080043d8 <zgb_tx_data>:
	zgb_hal_close();
}

//##############################################################################
u8 zgb_tx_data(u16 word)
{
 80043d8:	b500      	push	{lr}
	u8 SndPacket[6];
	u8 lowbyte = (u8) (word&0xFF);
 80043da:	b2c2      	uxtb	r2, r0
	zgb_hal_close();
}

//##############################################################################
u8 zgb_tx_data(u16 word)
{
 80043dc:	b083      	sub	sp, #12
	u8 SndPacket[6];
	u8 lowbyte = (u8) (word&0xFF);
	u8 highbyte = (u8) ((word>>8)&0xFF);
 80043de:	0a00      	lsrs	r0, r0, #8

	SndPacket[0] = 0xFF;
	SndPacket[1] = 0x55;
	SndPacket[2] = lowbyte;
	SndPacket[3] = ~lowbyte;
	SndPacket[4] = highbyte;
 80043e0:	f88d 0006 	strb.w	r0, [sp, #6]
{
	u8 SndPacket[6];
	u8 lowbyte = (u8) (word&0xFF);
	u8 highbyte = (u8) ((word>>8)&0xFF);

	SndPacket[0] = 0xFF;
 80043e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	SndPacket[1] = 0x55;
	SndPacket[2] = lowbyte;
	SndPacket[3] = ~lowbyte;
	SndPacket[4] = highbyte;
	SndPacket[5] = ~highbyte;
 80043e8:	ea6f 0000 	mvn.w	r0, r0
{
	u8 SndPacket[6];
	u8 lowbyte = (u8) (word&0xFF);
	u8 highbyte = (u8) ((word>>8)&0xFF);

	SndPacket[0] = 0xFF;
 80043ec:	f88d 3002 	strb.w	r3, [sp, #2]
	SndPacket[1] = 0x55;
	SndPacket[2] = lowbyte;
 80043f0:	f88d 2004 	strb.w	r2, [sp, #4]
	u8 SndPacket[6];
	u8 lowbyte = (u8) (word&0xFF);
	u8 highbyte = (u8) ((word>>8)&0xFF);

	SndPacket[0] = 0xFF;
	SndPacket[1] = 0x55;
 80043f4:	2355      	movs	r3, #85
	SndPacket[2] = lowbyte;
	SndPacket[3] = ~lowbyte;
 80043f6:	ea6f 0202 	mvn.w	r2, r2
	SndPacket[4] = highbyte;
	SndPacket[5] = ~highbyte;
 80043fa:	f88d 0007 	strb.w	r0, [sp, #7]

	if (zgb_hal_tx(SndPacket, 6)!=6)
 80043fe:	2106      	movs	r1, #6
 8004400:	f10d 0002 	add.w	r0, sp, #2	; 0x2
	u8 SndPacket[6];
	u8 lowbyte = (u8) (word&0xFF);
	u8 highbyte = (u8) ((word>>8)&0xFF);

	SndPacket[0] = 0xFF;
	SndPacket[1] = 0x55;
 8004404:	f88d 3003 	strb.w	r3, [sp, #3]
	SndPacket[2] = lowbyte;
	SndPacket[3] = ~lowbyte;
 8004408:	f88d 2005 	strb.w	r2, [sp, #5]
	SndPacket[4] = highbyte;
	SndPacket[5] = ~highbyte;

	if (zgb_hal_tx(SndPacket, 6)!=6)
 800440c:	f000 fee4 	bl	80051d8 <zgb_hal_tx>
 8004410:	2806      	cmp	r0, #6
 8004412:	bf14      	ite	ne
 8004414:	2000      	movne	r0, #0
 8004416:	2001      	moveq	r0, #1
	return 0;

	return 1;
}
 8004418:	b003      	add	sp, #12
 800441a:	bd00      	pop	{pc}

0800441c <zgb_terminate>:
	return 1;
}

//##############################################################################
void zgb_terminate(void)
{
 800441c:	b500      	push	{lr}
 800441e:	b081      	sub	sp, #4
	zgb_hal_close();
 8004420:	f000 fdde 	bl	8004fe0 <zgb_hal_close>
}
 8004424:	b001      	add	sp, #4
 8004426:	bd00      	pop	{pc}

08004428 <zgb_initialize>:
u8 extra;


//##############################################################################
u8 zgb_initialize(u32 baudrate)
{
 8004428:	b500      	push	{lr}
 800442a:	b081      	sub	sp, #4
	if (zgb_hal_open(baudrate)==0)
 800442c:	f000 fe24 	bl	8005078 <zgb_hal_open>
 8004430:	b148      	cbz	r0, 8004446 <zgb_initialize+0x1e>
	return 0;

	gbRcvFlag = 0;
 8004432:	4b06      	ldr	r3, [pc, #24]	(800444c <zgb_initialize+0x24>)
 8004434:	2200      	movs	r2, #0
 8004436:	701a      	strb	r2, [r3, #0]
	gwRcvData = 0;
 8004438:	4b05      	ldr	r3, [pc, #20]	(8004450 <zgb_initialize+0x28>)
 800443a:	f04f 0100 	mov.w	r1, #0	; 0x0
 800443e:	8019      	strh	r1, [r3, #0]
	gbRcvPacketNum = 0;
 8004440:	4b04      	ldr	r3, [pc, #16]	(8004454 <zgb_initialize+0x2c>)
 8004442:	2001      	movs	r0, #1
 8004444:	701a      	strb	r2, [r3, #0]
	return 1;
}
 8004446:	b001      	add	sp, #4
 8004448:	bd00      	pop	{pc}
 800444a:	46c0      	nop			(mov r8, r8)
 800444c:	200005e4 	.word	0x200005e4
 8004450:	200005e2 	.word	0x200005e2
 8004454:	200005e1 	.word	0x200005e1

08004458 <SetEPort>:
PORT_SIG_MOT6P, PIN_SIG_MOT6P }, { PORT_SIG_MOT6M,
PIN_SIG_MOT6M } };



void SetEPort(EPortD_t pin, u8 state) {
 8004458:	b500      	push	{lr}
 800445a:	4b09      	ldr	r3, [pc, #36]	(8004480 <SetEPort+0x28>)
 800445c:	b081      	sub	sp, #4
 800445e:	00c2      	lsls	r2, r0, #3
	if (state)
 8004460:	b131      	cbz	r1, 8004470 <SetEPort+0x18>
		GPIO_SetBits(EasyEPort[pin].port, EasyEPort[pin].pin);
 8004462:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8004466:	189b      	adds	r3, r3, r2
 8004468:	8899      	ldrh	r1, [r3, #4]
 800446a:	f001 fc1b 	bl	8005ca4 <GPIO_SetBits>
 800446e:	e005      	b.n	800447c <SetEPort+0x24>
	else
		GPIO_ResetBits(EasyEPort[pin].port, EasyEPort[pin].pin);
 8004470:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8004474:	189b      	adds	r3, r3, r2
 8004476:	8899      	ldrh	r1, [r3, #4]
 8004478:	f001 fc16 	bl	8005ca8 <GPIO_ResetBits>
}
 800447c:	b001      	add	sp, #4
 800447e:	bd00      	pop	{pc}
 8004480:	20000004 	.word	0x20000004

08004484 <ReadAnalog>:

#define ANALOG_RIGHT_BIT_SHIFT          0
//##############################################################################
u16 ReadAnalog(EPortA_t port) {
 8004484:	b510      	push	{r4, lr}
	if ((port == EPORT1A) || (port == EPORT4A)) {
 8004486:	f1d0 0401 	rsbs	r4, r0, #1	; 0x1
 800448a:	bf38      	it	cc
 800448c:	2400      	movcc	r4, #0
 800448e:	2803      	cmp	r0, #3
 8004490:	bf14      	ite	ne
 8004492:	4623      	movne	r3, r4
 8004494:	f044 0301 	orreq.w	r3, r4, #1	; 0x1
 8004498:	b123      	cbz	r3, 80044a4 <ReadAnalog+0x20>
		// Select EPORT1A and EPORT4A via multiplexer
		GPIO_ResetBits(PORT_ADC_SELECT0, PIN_ADC_SELECT0);
 800449a:	4833      	ldr	r0, [pc, #204]	(8004568 <ReadAnalog+0xe4>)
 800449c:	2102      	movs	r1, #2
 800449e:	f001 fc03 	bl	8005ca8 <GPIO_ResetBits>
 80044a2:	e00d      	b.n	80044c0 <ReadAnalog+0x3c>
			ADC_SoftwareStartConvCmd(ADC2, ENABLE);
			uDelay(5);
			return (u16) (ADC_GetConversionValue(ADC2))
					>> ANALOG_RIGHT_BIT_SHIFT;
		}
	} else if ((port == EPORT2A) || (port == EPORT5A)) {
 80044a4:	2801      	cmp	r0, #1
 80044a6:	bf14      	ite	ne
 80044a8:	2400      	movne	r4, #0
 80044aa:	2401      	moveq	r4, #1
 80044ac:	2804      	cmp	r0, #4
 80044ae:	bf14      	ite	ne
 80044b0:	4623      	movne	r3, r4
 80044b2:	f044 0301 	orreq.w	r3, r4, #1	; 0x1
 80044b6:	b143      	cbz	r3, 80044ca <ReadAnalog+0x46>
		// Select EPORT2A and EPORT5A via multiplexer
		GPIO_SetBits(PORT_ADC_SELECT0, PIN_ADC_SELECT0);
 80044b8:	482b      	ldr	r0, [pc, #172]	(8004568 <ReadAnalog+0xe4>)
 80044ba:	2102      	movs	r1, #2
 80044bc:	f001 fbf2 	bl	8005ca4 <GPIO_SetBits>
		GPIO_ResetBits(PORT_ADC_SELECT1, PIN_ADC_SELECT1);
 80044c0:	4829      	ldr	r0, [pc, #164]	(8004568 <ReadAnalog+0xe4>)
 80044c2:	2104      	movs	r1, #4
 80044c4:	f001 fbf0 	bl	8005ca8 <GPIO_ResetBits>
 80044c8:	e011      	b.n	80044ee <ReadAnalog+0x6a>
			ADC_SoftwareStartConvCmd(ADC2, ENABLE);
			uDelay(5);
			return (u16) (ADC_GetConversionValue(ADC2))
					>> ANALOG_RIGHT_BIT_SHIFT;
		}
	} else if ((port == EPORT3A) || (port == EPORT6A)) {
 80044ca:	2802      	cmp	r0, #2
 80044cc:	bf14      	ite	ne
 80044ce:	2400      	movne	r4, #0
 80044d0:	2401      	moveq	r4, #1
 80044d2:	2805      	cmp	r0, #5
 80044d4:	bf14      	ite	ne
 80044d6:	4623      	movne	r3, r4
 80044d8:	f044 0301 	orreq.w	r3, r4, #1	; 0x1
 80044dc:	b303      	cbz	r3, 8004520 <ReadAnalog+0x9c>
		// Select EPORT3A and EPORT6A via multiplexer
		GPIO_ResetBits(PORT_ADC_SELECT0, PIN_ADC_SELECT0);
 80044de:	4822      	ldr	r0, [pc, #136]	(8004568 <ReadAnalog+0xe4>)
 80044e0:	2102      	movs	r1, #2
 80044e2:	f001 fbe1 	bl	8005ca8 <GPIO_ResetBits>
		GPIO_SetBits(PORT_ADC_SELECT1, PIN_ADC_SELECT1);
 80044e6:	4820      	ldr	r0, [pc, #128]	(8004568 <ReadAnalog+0xe4>)
 80044e8:	2104      	movs	r1, #4
 80044ea:	f001 fbdb 	bl	8005ca4 <GPIO_SetBits>

		uDelay(5);
 80044ee:	2005      	movs	r0, #5
 80044f0:	f000 f8d0 	bl	8004694 <uDelay>

		if (port == EPORT3A) {
 80044f4:	b144      	cbz	r4, 8004508 <ReadAnalog+0x84>
			// Start ADC1 Software Conversion
			ADC_SoftwareStartConvCmd(ADC1, ENABLE);
 80044f6:	481d      	ldr	r0, [pc, #116]	(800456c <ReadAnalog+0xe8>)
 80044f8:	2101      	movs	r1, #1
 80044fa:	f000 ff6b 	bl	80053d4 <ADC_SoftwareStartConvCmd>
			uDelay(5);
 80044fe:	2005      	movs	r0, #5
 8004500:	f000 f8c8 	bl	8004694 <uDelay>
			return (u16) (ADC_GetConversionValue(ADC1))
 8004504:	4819      	ldr	r0, [pc, #100]	(800456c <ReadAnalog+0xe8>)
 8004506:	e007      	b.n	8004518 <ReadAnalog+0x94>
					>> ANALOG_RIGHT_BIT_SHIFT;
		} else {
			// Start ADC2 Software Conversion
			ADC_SoftwareStartConvCmd(ADC2, ENABLE);
 8004508:	4819      	ldr	r0, [pc, #100]	(8004570 <ReadAnalog+0xec>)
 800450a:	2101      	movs	r1, #1
 800450c:	f000 ff62 	bl	80053d4 <ADC_SoftwareStartConvCmd>
			uDelay(5);
 8004510:	2005      	movs	r0, #5
 8004512:	f000 f8bf 	bl	8004694 <uDelay>
			return (u16) (ADC_GetConversionValue(ADC2))
 8004516:	4816      	ldr	r0, [pc, #88]	(8004570 <ReadAnalog+0xec>)
 8004518:	f000 ffd4 	bl	80054c4 <ADC_GetConversionValue>
 800451c:	4604      	mov	r4, r0
 800451e:	e021      	b.n	8004564 <ReadAnalog+0xe0>
					>> ANALOG_RIGHT_BIT_SHIFT;
		}
	} else if (port == VBUS) {
 8004520:	2806      	cmp	r0, #6
 8004522:	bf18      	it	ne
 8004524:	f44f 4400 	movne.w	r4, #32768	; 0x8000
 8004528:	d11c      	bne.n	8004564 <ReadAnalog+0xe0>
		u16 temp;

		// Set ADC1 to read SIG_VDD/VBUS on Channel 13
		ADC_RegularChannelConfig(ADC1, ADC_Channel_13, 1,
 800452a:	2201      	movs	r2, #1
 800452c:	2307      	movs	r3, #7
 800452e:	210d      	movs	r1, #13
 8004530:	480e      	ldr	r0, [pc, #56]	(800456c <ReadAnalog+0xe8>)
 8004532:	f000 ff71 	bl	8005418 <ADC_RegularChannelConfig>
		ADC_SampleTime_239Cycles5);
		uDelay(5);
 8004536:	2005      	movs	r0, #5
 8004538:	f000 f8ac 	bl	8004694 <uDelay>
		ADC_SoftwareStartConvCmd(ADC1, ENABLE);
 800453c:	2101      	movs	r1, #1
 800453e:	480b      	ldr	r0, [pc, #44]	(800456c <ReadAnalog+0xe8>)
 8004540:	f000 ff48 	bl	80053d4 <ADC_SoftwareStartConvCmd>
		uDelay(5);
 8004544:	2005      	movs	r0, #5
 8004546:	f000 f8a5 	bl	8004694 <uDelay>
		temp = (ADC_GetConversionValue(ADC1)) >> ANALOG_RIGHT_BIT_SHIFT;
 800454a:	4808      	ldr	r0, [pc, #32]	(800456c <ReadAnalog+0xe8>)
 800454c:	f000 ffba 	bl	80054c4 <ADC_GetConversionValue>

		// Set ADC1 to read SIG_ADC0 (ADC1 multiplexer output) on Channel 10
		ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 1,
 8004550:	210a      	movs	r1, #10
		ADC_RegularChannelConfig(ADC1, ADC_Channel_13, 1,
		ADC_SampleTime_239Cycles5);
		uDelay(5);
		ADC_SoftwareStartConvCmd(ADC1, ENABLE);
		uDelay(5);
		temp = (ADC_GetConversionValue(ADC1)) >> ANALOG_RIGHT_BIT_SHIFT;
 8004552:	4604      	mov	r4, r0

		// Set ADC1 to read SIG_ADC0 (ADC1 multiplexer output) on Channel 10
		ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 1,
 8004554:	2201      	movs	r2, #1
 8004556:	4805      	ldr	r0, [pc, #20]	(800456c <ReadAnalog+0xe8>)
 8004558:	2307      	movs	r3, #7
 800455a:	f000 ff5d 	bl	8005418 <ADC_RegularChannelConfig>
		ADC_SampleTime_239Cycles5);
		uDelay(5);
 800455e:	2005      	movs	r0, #5
 8004560:	f000 f898 	bl	8004694 <uDelay>

		return temp;
	}
	return 0x8000;
}
 8004564:	4620      	mov	r0, r4
 8004566:	bd10      	pop	{r4, pc}
 8004568:	40011000 	.word	0x40011000
 800456c:	40012400 	.word	0x40012400
 8004570:	40012800 	.word	0x40012800

08004574 <Battery_Monitor_Alarm>:

	return temp;
}

//##############################################################################
void Battery_Monitor_Alarm(void) {
 8004574:	b500      	push	{lr}
	u16 volt = ReadAnalog(VBUS) >> 4;
 8004576:	2006      	movs	r0, #6

	return temp;
}

//##############################################################################
void Battery_Monitor_Alarm(void) {
 8004578:	b081      	sub	sp, #4
	u16 volt = ReadAnalog(VBUS) >> 4;
 800457a:	f7ff ff83 	bl	8004484 <ReadAnalog>
	//Printu32d(volt);
	//PrintString("e-1 [Volts]\n");
#endif

	// ALARM!!!
	if (volt < VBUS_LOW_LIMIT) {
 800457e:	0900      	lsrs	r0, r0, #4
 8004580:	b280      	uxth	r0, r0
 8004582:	2872      	cmp	r0, #114
 8004584:	d815      	bhi.n	80045b2 <Battery_Monitor_Alarm+0x3e>
		Buzzed(500, 100);
 8004586:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800458a:	2164      	movs	r1, #100
 800458c:	f000 f85c 	bl	8004648 <Buzzed>
		Buzzed(500, 5000);
 8004590:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004594:	f241 3188 	movw	r1, #5000	; 0x1388
 8004598:	f000 f856 	bl	8004648 <Buzzed>
		Buzzed(500, 100);
 800459c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80045a0:	2164      	movs	r1, #100
 80045a2:	f000 f851 	bl	8004648 <Buzzed>
		Buzzed(500, 5000);
 80045a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80045aa:	f241 3188 	movw	r1, #5000	; 0x1388
 80045ae:	f000 f84b 	bl	8004648 <Buzzed>
		PrintString("Battery Voltage Critical");
		PrintString("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
#endif
	}
	return;
}
 80045b2:	b001      	add	sp, #4
 80045b4:	bd00      	pop	{pc}
 80045b6:	46c0      	nop			(mov r8, r8)

080045b8 <ReadIR>:
	}
	return 0x8000;
}

//##############################################################################
u16 ReadIR(EPortA_t port) {
 80045b8:	b570      	push	{r4, r5, r6, lr}
	u16 temp;

	SetEPort((port * 2), 1);
 80045ba:	0044      	lsls	r4, r0, #1
 80045bc:	b2e6      	uxtb	r6, r4
	SetEPort((port * 2) + 1, 0);
 80045be:	3401      	adds	r4, #1
	}
	return 0x8000;
}

//##############################################################################
u16 ReadIR(EPortA_t port) {
 80045c0:	4605      	mov	r5, r0
	u16 temp;

	SetEPort((port * 2), 1);
 80045c2:	2101      	movs	r1, #1
 80045c4:	4630      	mov	r0, r6
	SetEPort((port * 2) + 1, 0);
 80045c6:	b2e4      	uxtb	r4, r4

//##############################################################################
u16 ReadIR(EPortA_t port) {
	u16 temp;

	SetEPort((port * 2), 1);
 80045c8:	f7ff ff46 	bl	8004458 <SetEPort>
	SetEPort((port * 2) + 1, 0);
 80045cc:	2100      	movs	r1, #0
 80045ce:	4620      	mov	r0, r4
 80045d0:	f7ff ff42 	bl	8004458 <SetEPort>

	uDelay(25);
 80045d4:	2019      	movs	r0, #25
 80045d6:	f000 f85d 	bl	8004694 <uDelay>
	temp = ReadAnalog(port);
 80045da:	4628      	mov	r0, r5
 80045dc:	f7ff ff52 	bl	8004484 <ReadAnalog>

	SetEPort((port * 2), 0);
 80045e0:	2100      	movs	r1, #0

	SetEPort((port * 2), 1);
	SetEPort((port * 2) + 1, 0);

	uDelay(25);
	temp = ReadAnalog(port);
 80045e2:	4605      	mov	r5, r0

	SetEPort((port * 2), 0);
 80045e4:	4630      	mov	r0, r6
 80045e6:	f7ff ff37 	bl	8004458 <SetEPort>
	SetEPort((port * 2) + 1, 0);
 80045ea:	4620      	mov	r0, r4
 80045ec:	2100      	movs	r1, #0
 80045ee:	f7ff ff33 	bl	8004458 <SetEPort>

	return temp;
}
 80045f2:	4628      	mov	r0, r5
 80045f4:	bd70      	pop	{r4, r5, r6, pc}
 80045f6:	46c0      	nop			(mov r8, r8)

080045f8 <ReadButton>:
EasyPort_t EasyButton[6] = { { PORT_SW_UP, PIN_SW_UP }, { PORT_SW_DOWN,
PIN_SW_DOWN }, { PORT_SW_LEFT, PIN_SW_LEFT }, {
PORT_SW_RIGHT, PIN_SW_RIGHT }, { PORT_SW_START,
PIN_SW_START }, { PORT_MIC, PIN_MIC } };
//##############################################################################
u8 ReadButton(Button_t button) {
 80045f8:	b500      	push	{lr}
	if (GPIO_ReadInputDataBit(EasyButton[button].port, EasyButton[button].pin)	!= SET)
 80045fa:	4b07      	ldr	r3, [pc, #28]	(8004618 <ReadButton+0x20>)
EasyPort_t EasyButton[6] = { { PORT_SW_UP, PIN_SW_UP }, { PORT_SW_DOWN,
PIN_SW_DOWN }, { PORT_SW_LEFT, PIN_SW_LEFT }, {
PORT_SW_RIGHT, PIN_SW_RIGHT }, { PORT_SW_START,
PIN_SW_START }, { PORT_MIC, PIN_MIC } };
//##############################################################################
u8 ReadButton(Button_t button) {
 80045fc:	b081      	sub	sp, #4
	if (GPIO_ReadInputDataBit(EasyButton[button].port, EasyButton[button].pin)	!= SET)
 80045fe:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
 8004602:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8004606:	8899      	ldrh	r1, [r3, #4]
 8004608:	4610      	mov	r0, r2
 800460a:	f001 fb37 	bl	8005c7c <GPIO_ReadInputDataBit>
 800460e:	3801      	subs	r0, #1
 8004610:	bf18      	it	ne
 8004612:	2001      	movne	r0, #1
		return 1;
	return 0;
}
 8004614:	b001      	add	sp, #4
 8004616:	bd00      	pop	{pc}
 8004618:	20000064 	.word	0x20000064

0800461c <SetLED>:
PIN_LED_MANAGE }, { PORT_LED_PROGRAM, PIN_LED_PROGRAM }, { PORT_LED_PLAY,
PIN_LED_PLAY }, { PORT_LED_TXD, PIN_LED_TXD }, { PORT_LED_RXD,
PIN_LED_RXD }, { PORT_LED_AUX, PIN_LED_AUX } };

//##############################################################################
void SetLED(LED_t led, u8 state) {
 800461c:	b500      	push	{lr}
 800461e:	4b09      	ldr	r3, [pc, #36]	(8004644 <SetLED+0x28>)
 8004620:	b081      	sub	sp, #4
 8004622:	00c2      	lsls	r2, r0, #3
	if (state)
 8004624:	b131      	cbz	r1, 8004634 <SetLED+0x18>
		GPIO_ResetBits(EasyLED[led].port, EasyLED[led].pin);
 8004626:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 800462a:	189b      	adds	r3, r3, r2
 800462c:	8899      	ldrh	r1, [r3, #4]
 800462e:	f001 fb3b 	bl	8005ca8 <GPIO_ResetBits>
 8004632:	e005      	b.n	8004640 <SetLED+0x24>
	else
		GPIO_SetBits(EasyLED[led].port, EasyLED[led].pin);
 8004634:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8004638:	189b      	adds	r3, r3, r2
 800463a:	8899      	ldrh	r1, [r3, #4]
 800463c:	f001 fb32 	bl	8005ca4 <GPIO_SetBits>
}
 8004640:	b001      	add	sp, #4
 8004642:	bd00      	pop	{pc}
 8004644:	20000094 	.word	0x20000094

08004648 <Buzzed>:
#include "system_init.h"
#include "system_func.h"


//##############################################################################
void Buzzed(u32 mlength, u32 tone) {
 8004648:	b530      	push	{r4, r5, lr}
 800464a:	b081      	sub	sp, #4
 800464c:	460c      	mov	r4, r1
	//   using uDelay(), 50% duty cycle, cents relative to A_5

//#define FREQTOTONE(f)    (5000000/f)    // (1/(2*1e-6*f))

	start_countdown_buzzer(mlength);
	while (glBuzzerCounter > 0) {
 800464e:	4d0b      	ldr	r5, [pc, #44]	(800467c <Buzzed+0x34>)
	// tone = 1/(2*1e-6*f) = 1/(2*1e-6*440*2^(cents_relative/1200))
	//   using uDelay(), 50% duty cycle, cents relative to A_5

//#define FREQTOTONE(f)    (5000000/f)    // (1/(2*1e-6*f))

	start_countdown_buzzer(mlength);
 8004650:	f000 f84c 	bl	80046ec <start_countdown_buzzer>
 8004654:	e00d      	b.n	8004672 <Buzzed+0x2a>
	while (glBuzzerCounter > 0) {
		GPIO_ResetBits(PORT_BUZZER, PIN_BUZZER);
 8004656:	2140      	movs	r1, #64
 8004658:	4809      	ldr	r0, [pc, #36]	(8004680 <Buzzed+0x38>)
 800465a:	f001 fb25 	bl	8005ca8 <GPIO_ResetBits>
		uDelay(tone);
 800465e:	4620      	mov	r0, r4
 8004660:	f000 f818 	bl	8004694 <uDelay>
		GPIO_SetBits(PORT_BUZZER, PIN_BUZZER);
 8004664:	4806      	ldr	r0, [pc, #24]	(8004680 <Buzzed+0x38>)
 8004666:	2140      	movs	r1, #64
 8004668:	f001 fb1c 	bl	8005ca4 <GPIO_SetBits>
		uDelay(tone);
 800466c:	4620      	mov	r0, r4
 800466e:	f000 f811 	bl	8004694 <uDelay>
	//   using uDelay(), 50% duty cycle, cents relative to A_5

//#define FREQTOTONE(f)    (5000000/f)    // (1/(2*1e-6*f))

	start_countdown_buzzer(mlength);
	while (glBuzzerCounter > 0) {
 8004672:	682b      	ldr	r3, [r5, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1ee      	bne.n	8004656 <Buzzed+0xe>
		GPIO_ResetBits(PORT_BUZZER, PIN_BUZZER);
		uDelay(tone);
		GPIO_SetBits(PORT_BUZZER, PIN_BUZZER);
		uDelay(tone);
	}
}
 8004678:	b001      	add	sp, #4
 800467a:	bd30      	pop	{r4, r5, pc}
 800467c:	200005fc 	.word	0x200005fc
 8004680:	40010800 	.word	0x40010800

08004684 <PlayNote>:

//##############################################################################
void PlayNote(u32 mlength, buzzed_note_t note, u8 octave) {
 8004684:	b500      	push	{lr}
	Buzzed(mlength, (u32) (note >> octave));
 8004686:	4111      	asrs	r1, r2
		uDelay(tone);
	}
}

//##############################################################################
void PlayNote(u32 mlength, buzzed_note_t note, u8 octave) {
 8004688:	b081      	sub	sp, #4
	Buzzed(mlength, (u32) (note >> octave));
 800468a:	f7ff ffdd 	bl	8004648 <Buzzed>
}
 800468e:	b001      	add	sp, #4
 8004690:	bd00      	pop	{pc}
 8004692:	46c0      	nop			(mov r8, r8)

08004694 <uDelay>:
	uDelay(nTime * 1000);
}

//##############################################################################
void uDelay(u32 nTime) {
	if (glDelayCounter == 0)
 8004694:	4b0c      	ldr	r3, [pc, #48]	(80046c8 <uDelay+0x34>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	b923      	cbnz	r3, 80046a4 <uDelay+0x10>
		gbCounterCount++;
 800469a:	4a0c      	ldr	r2, [pc, #48]	(80046cc <uDelay+0x38>)
 800469c:	7813      	ldrb	r3, [r2, #0]
 800469e:	3301      	adds	r3, #1
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	7013      	strb	r3, [r2, #0]
	if (nTime>=100)
	glDelayCounter = (nTime/100);
	else
	glDelayCounter = 1;
#elif defined USING_SYSTICK_10US
	if (nTime >= 10)
 80046a4:	2809      	cmp	r0, #9
 80046a6:	4908      	ldr	r1, [pc, #32]	(80046c8 <uDelay+0x34>)
 80046a8:	d904      	bls.n	80046b4 <uDelay+0x20>
		glDelayCounter = (nTime / 10);
 80046aa:	4a09      	ldr	r2, [pc, #36]	(80046d0 <uDelay+0x3c>)
 80046ac:	fba0 2302 	umull	r2, r3, r0, r2
 80046b0:	08db      	lsrs	r3, r3, #3
 80046b2:	e000      	b.n	80046b6 <uDelay+0x22>
	else
		glDelayCounter = 1;
 80046b4:	2301      	movs	r3, #1
 80046b6:	600b      	str	r3, [r1, #0]
#elif defined USING_SYSTICK_1US
	glDelayCounter = (nTime);
#endif

	if (gbCounterCount == 1) {
 80046b8:	4b04      	ldr	r3, [pc, #16]	(80046cc <uDelay+0x38>)
		// Enable the SysTick Counter
		//SysTick_CounterCmd(SysTick_Counter_Enable);
	}

	while (glDelayCounter != 0)
 80046ba:	4a03      	ldr	r2, [pc, #12]	(80046c8 <uDelay+0x34>)
		glDelayCounter = 1;
#elif defined USING_SYSTICK_1US
	glDelayCounter = (nTime);
#endif

	if (gbCounterCount == 1) {
 80046bc:	781b      	ldrb	r3, [r3, #0]
		// Enable the SysTick Counter
		//SysTick_CounterCmd(SysTick_Counter_Enable);
	}

	while (glDelayCounter != 0)
 80046be:	6813      	ldr	r3, [r2, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1fc      	bne.n	80046be <uDelay+0x2a>
		;
}
 80046c4:	4770      	bx	lr
 80046c6:	46c0      	nop			(mov r8, r8)
 80046c8:	200005ec 	.word	0x200005ec
 80046cc:	20000600 	.word	0x20000600
 80046d0:	cccccccd 	.word	0xcccccccd

080046d4 <mDelay>:
void BreakToBootLoader(void);
#endif


//##############################################################################
void mDelay(u32 nTime) {
 80046d4:	b500      	push	{lr}
	uDelay(nTime * 1000);
 80046d6:	ebc0 1340 	rsb	r3, r0, r0, lsl #5
 80046da:	eb00 0083 	add.w	r0, r0, r3, lsl #2
void BreakToBootLoader(void);
#endif


//##############################################################################
void mDelay(u32 nTime) {
 80046de:	b081      	sub	sp, #4
	uDelay(nTime * 1000);
 80046e0:	00c0      	lsls	r0, r0, #3
 80046e2:	f7ff ffd7 	bl	8004694 <uDelay>
}
 80046e6:	b001      	add	sp, #4
 80046e8:	bd00      	pop	{pc}
 80046ea:	46c0      	nop			(mov r8, r8)

080046ec <start_countdown_buzzer>:
	SetLED(AUX, 1);
}

//##############################################################################
void start_countdown_buzzer(u32 nTime) {
	if (glBuzzerCounter == 0)
 80046ec:	4b07      	ldr	r3, [pc, #28]	(800470c <start_countdown_buzzer+0x20>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	b923      	cbnz	r3, 80046fc <start_countdown_buzzer+0x10>
		gbCounterCount++;
 80046f2:	4a07      	ldr	r2, [pc, #28]	(8004710 <start_countdown_buzzer+0x24>)
 80046f4:	7813      	ldrb	r3, [r2, #0]
 80046f6:	3301      	adds	r3, #1
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	7013      	strb	r3, [r2, #0]
#ifdef USING_SYSTICK_1000US
	glCountdownCounter = (StartTime*1);
#elif USING_SYSTICK_100US
	glBuzzerCounter = (nTime*10);
#elif defined USING_SYSTICK_10US
	glBuzzerCounter = (nTime * 100);
 80046fc:	2364      	movs	r3, #100
 80046fe:	fb03 f300 	mul.w	r3, r3, r0
 8004702:	4a02      	ldr	r2, [pc, #8]	(800470c <start_countdown_buzzer+0x20>)
 8004704:	6013      	str	r3, [r2, #0]
#elif defined USING_SYSTICK_1US
	glBuzzerCounter = (nTime*1000);
#endif

	if (gbCounterCount == 1) {
 8004706:	4b02      	ldr	r3, [pc, #8]	(8004710 <start_countdown_buzzer+0x24>)
 8004708:	781b      	ldrb	r3, [r3, #0]
		// Enable the SysTick Counter
		//SysTick_CounterCmd(SysTick_Counter_Enable);
	}
}
 800470a:	4770      	bx	lr
 800470c:	200005fc 	.word	0x200005fc
 8004710:	20000600 	.word	0x20000600

08004714 <start_timeout_dxl>:

//##############################################################################
void start_timeout_dxl(u32 nTime) {
	if (glDxlTimeoutCounter == 0)
 8004714:	4b0a      	ldr	r3, [pc, #40]	(8004740 <start_timeout_dxl+0x2c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	b923      	cbnz	r3, 8004724 <start_timeout_dxl+0x10>
		gbCounterCount++;
 800471a:	4a0a      	ldr	r2, [pc, #40]	(8004744 <start_timeout_dxl+0x30>)
 800471c:	7813      	ldrb	r3, [r2, #0]
 800471e:	3301      	adds	r3, #1
 8004720:	b2db      	uxtb	r3, r3
 8004722:	7013      	strb	r3, [r2, #0]
	if (nTime>=100)
	glDxlTimeoutCounter = (nTime/100);
	else
	glDxlTimeoutCounter = 1;
#elif defined USING_SYSTICK_10US
	if (nTime >= 10)
 8004724:	2809      	cmp	r0, #9
 8004726:	4906      	ldr	r1, [pc, #24]	(8004740 <start_timeout_dxl+0x2c>)
 8004728:	d904      	bls.n	8004734 <start_timeout_dxl+0x20>
		glDxlTimeoutCounter = (nTime / 10);
 800472a:	4a07      	ldr	r2, [pc, #28]	(8004748 <start_timeout_dxl+0x34>)
 800472c:	fba0 2302 	umull	r2, r3, r0, r2
 8004730:	08db      	lsrs	r3, r3, #3
 8004732:	e000      	b.n	8004736 <start_timeout_dxl+0x22>
	else
		glDxlTimeoutCounter = 1;
 8004734:	2301      	movs	r3, #1
 8004736:	600b      	str	r3, [r1, #0]
#elif defined USING_SYSTICK_1US
	glDxlTimeoutCounter = (nTime);
#endif

	if (gbCounterCount == 1) {
 8004738:	4b02      	ldr	r3, [pc, #8]	(8004744 <start_timeout_dxl+0x30>)
 800473a:	781b      	ldrb	r3, [r3, #0]
		// Enable the SysTick Counter
		//SysTick_CounterCmd(SysTick_Counter_Enable);
	}
}
 800473c:	4770      	bx	lr
 800473e:	46c0      	nop			(mov r8, r8)
 8004740:	200005f4 	.word	0x200005f4
 8004744:	20000600 	.word	0x20000600
 8004748:	cccccccd 	.word	0xcccccccd

0800474c <start_timeout_pcu>:

//##############################################################################
void start_timeout_pcu(u32 nTime) {
	if (glPcuTimeoutCounter == 0)
 800474c:	4b0a      	ldr	r3, [pc, #40]	(8004778 <start_timeout_pcu+0x2c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	b923      	cbnz	r3, 800475c <start_timeout_pcu+0x10>
		gbCounterCount++;
 8004752:	4a0a      	ldr	r2, [pc, #40]	(800477c <start_timeout_pcu+0x30>)
 8004754:	7813      	ldrb	r3, [r2, #0]
 8004756:	3301      	adds	r3, #1
 8004758:	b2db      	uxtb	r3, r3
 800475a:	7013      	strb	r3, [r2, #0]
	if (nTime>=100)
	glPcuTimeoutCounter = (nTime/100);
	else
	glPcuTimeoutCounter = 1;
#elif defined USING_SYSTICK_10US
	if (nTime >= 10)
 800475c:	2809      	cmp	r0, #9
 800475e:	4906      	ldr	r1, [pc, #24]	(8004778 <start_timeout_pcu+0x2c>)
 8004760:	d904      	bls.n	800476c <start_timeout_pcu+0x20>
		glPcuTimeoutCounter = (nTime / 10);
 8004762:	4a07      	ldr	r2, [pc, #28]	(8004780 <start_timeout_pcu+0x34>)
 8004764:	fba0 2302 	umull	r2, r3, r0, r2
 8004768:	08db      	lsrs	r3, r3, #3
 800476a:	e000      	b.n	800476e <start_timeout_pcu+0x22>
	else
		glPcuTimeoutCounter = 1;
 800476c:	2301      	movs	r3, #1
 800476e:	600b      	str	r3, [r1, #0]
#elif defined USING_SYSTICK_1US
	glPcuTimeoutCounter = (nTime);
#endif

	if (gbCounterCount == 1) {
 8004770:	4b02      	ldr	r3, [pc, #8]	(800477c <start_timeout_pcu+0x30>)
 8004772:	781b      	ldrb	r3, [r3, #0]
		// Enable the SysTick Counter
		//SysTick_CounterCmd(SysTick_Counter_Enable);
	}
}
 8004774:	4770      	bx	lr
 8004776:	46c0      	nop			(mov r8, r8)
 8004778:	200005f8 	.word	0x200005f8
 800477c:	20000600 	.word	0x20000600
 8004780:	cccccccd 	.word	0xcccccccd

08004784 <getMillis>:

//##############################################################################
u32 getMillis(){
	/**msMillis = (Millis * (u32)(0.001)); //convert us to ms
	return msMillis;*/
	return (Millis/100) ;
 8004784:	4b03      	ldr	r3, [pc, #12]	(8004794 <getMillis+0x10>)
 8004786:	4904      	ldr	r1, [pc, #16]	(8004798 <getMillis+0x14>)
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	fba2 2301 	umull	r2, r3, r2, r1
 800478e:	0958      	lsrs	r0, r3, #5
}
 8004790:	4770      	bx	lr
 8004792:	46c0      	nop			(mov r8, r8)
 8004794:	20000604 	.word	0x20000604
 8004798:	51eb851f 	.word	0x51eb851f

0800479c <ISR_Delay_Base>:
//}
//##############################################################################
void ISR_Delay_Base(void) {

	Millis++;
 800479c:	4b37      	ldr	r3, [pc, #220]	(800487c <ISR_Delay_Base+0xe0>)
	return msMillis;*/
	return (Millis/100) ;
}
//}
//##############################################################################
void ISR_Delay_Base(void) {
 800479e:	b510      	push	{r4, lr}

	Millis++;
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	3201      	adds	r2, #1
 80047a4:	601a      	str	r2, [r3, #0]

	// User accessible delay counter
	if (glDelayCounter > 1)
 80047a6:	4a36      	ldr	r2, [pc, #216]	(8004880 <ISR_Delay_Base+0xe4>)
 80047a8:	6813      	ldr	r3, [r2, #0]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d903      	bls.n	80047b6 <ISR_Delay_Base+0x1a>
		glDelayCounter--;
 80047ae:	6813      	ldr	r3, [r2, #0]
 80047b0:	3b01      	subs	r3, #1
 80047b2:	6013      	str	r3, [r2, #0]
 80047b4:	e009      	b.n	80047ca <ISR_Delay_Base+0x2e>
	else if (glDelayCounter > 0) {
 80047b6:	6813      	ldr	r3, [r2, #0]
 80047b8:	b13b      	cbz	r3, 80047ca <ISR_Delay_Base+0x2e>
		glDelayCounter--;
 80047ba:	6813      	ldr	r3, [r2, #0]
 80047bc:	3b01      	subs	r3, #1
 80047be:	6013      	str	r3, [r2, #0]
		gbCounterCount--;
 80047c0:	4a30      	ldr	r2, [pc, #192]	(8004884 <ISR_Delay_Base+0xe8>)
 80047c2:	7813      	ldrb	r3, [r2, #0]
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	7013      	strb	r3, [r2, #0]
	}

	// User accessible timeout/countdown counter
	if (glCountdownCounter > 1) {
 80047ca:	4c2f      	ldr	r4, [pc, #188]	(8004888 <ISR_Delay_Base+0xec>)
 80047cc:	6823      	ldr	r3, [r4, #0]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d90e      	bls.n	80047f0 <ISR_Delay_Base+0x54>
		glCountdownCounter--;
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	3b01      	subs	r3, #1
 80047d6:	6023      	str	r3, [r4, #0]
#ifdef USING_SYSTICK_1000US
		if ( (glCountdownCounter&0x00000300) )
#elif USING_SYSTICK_100US
		if ( (glCountdownCounter&0x00000200) )
#elif defined USING_SYSTICK_10US
		if ((glCountdownCounter & 0x00001000))
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80047de:	d002      	beq.n	80047e6 <ISR_Delay_Base+0x4a>
#elif defined USING_SYSTICK_1US
			if ( (glCountdownCounter&0x00010000) )
#endif
			SetLED(AUX, 1);
 80047e0:	2006      	movs	r0, #6
 80047e2:	2101      	movs	r1, #1
 80047e4:	e001      	b.n	80047ea <ISR_Delay_Base+0x4e>
		else
			SetLED(AUX, 0);
 80047e6:	2006      	movs	r0, #6
 80047e8:	2100      	movs	r1, #0
 80047ea:	f7ff ff17 	bl	800461c <SetLED>
 80047ee:	e00d      	b.n	800480c <ISR_Delay_Base+0x70>
	} else if (glCountdownCounter > 0) {
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	b15b      	cbz	r3, 800480c <ISR_Delay_Base+0x70>
		SetLED(AUX, 0);
 80047f4:	2006      	movs	r0, #6
 80047f6:	2100      	movs	r1, #0
 80047f8:	f7ff ff10 	bl	800461c <SetLED>
		glCountdownCounter--;
 80047fc:	6823      	ldr	r3, [r4, #0]
		gbCounterCount--;
 80047fe:	4a21      	ldr	r2, [pc, #132]	(8004884 <ISR_Delay_Base+0xe8>)
			SetLED(AUX, 1);
		else
			SetLED(AUX, 0);
	} else if (glCountdownCounter > 0) {
		SetLED(AUX, 0);
		glCountdownCounter--;
 8004800:	3b01      	subs	r3, #1
 8004802:	6023      	str	r3, [r4, #0]
		gbCounterCount--;
 8004804:	7813      	ldrb	r3, [r2, #0]
 8004806:	3b01      	subs	r3, #1
 8004808:	b2db      	uxtb	r3, r3
 800480a:	7013      	strb	r3, [r2, #0]
	}

	// Buzzer countdown counter
	if (glBuzzerCounter > 1)
 800480c:	4a1f      	ldr	r2, [pc, #124]	(800488c <ISR_Delay_Base+0xf0>)
 800480e:	6813      	ldr	r3, [r2, #0]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d903      	bls.n	800481c <ISR_Delay_Base+0x80>
		glBuzzerCounter--;
 8004814:	6813      	ldr	r3, [r2, #0]
 8004816:	3b01      	subs	r3, #1
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	e009      	b.n	8004830 <ISR_Delay_Base+0x94>
	else if (glBuzzerCounter > 0) {
 800481c:	6813      	ldr	r3, [r2, #0]
 800481e:	b13b      	cbz	r3, 8004830 <ISR_Delay_Base+0x94>
		glBuzzerCounter--;
 8004820:	6813      	ldr	r3, [r2, #0]
 8004822:	3b01      	subs	r3, #1
 8004824:	6013      	str	r3, [r2, #0]
		gbCounterCount--;
 8004826:	4a17      	ldr	r2, [pc, #92]	(8004884 <ISR_Delay_Base+0xe8>)
 8004828:	7813      	ldrb	r3, [r2, #0]
 800482a:	3b01      	subs	r3, #1
 800482c:	b2db      	uxtb	r3, r3
 800482e:	7013      	strb	r3, [r2, #0]
	}

	// Dynamixel timeout counter
	if (glDxlTimeoutCounter > 1)
 8004830:	4a17      	ldr	r2, [pc, #92]	(8004890 <ISR_Delay_Base+0xf4>)
 8004832:	6813      	ldr	r3, [r2, #0]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d903      	bls.n	8004840 <ISR_Delay_Base+0xa4>
		glDxlTimeoutCounter--;
 8004838:	6813      	ldr	r3, [r2, #0]
 800483a:	3b01      	subs	r3, #1
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	e009      	b.n	8004854 <ISR_Delay_Base+0xb8>
	else if (glDxlTimeoutCounter > 0) {
 8004840:	6813      	ldr	r3, [r2, #0]
 8004842:	b13b      	cbz	r3, 8004854 <ISR_Delay_Base+0xb8>
		glDxlTimeoutCounter--;
 8004844:	6813      	ldr	r3, [r2, #0]
 8004846:	3b01      	subs	r3, #1
 8004848:	6013      	str	r3, [r2, #0]
		gbCounterCount--;
 800484a:	4a0e      	ldr	r2, [pc, #56]	(8004884 <ISR_Delay_Base+0xe8>)
 800484c:	7813      	ldrb	r3, [r2, #0]
 800484e:	3b01      	subs	r3, #1
 8004850:	b2db      	uxtb	r3, r3
 8004852:	7013      	strb	r3, [r2, #0]
	}

	// PC UART timeout counter
	if (glPcuTimeoutCounter > 1)
 8004854:	4a0f      	ldr	r2, [pc, #60]	(8004894 <ISR_Delay_Base+0xf8>)
 8004856:	6813      	ldr	r3, [r2, #0]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d903      	bls.n	8004864 <ISR_Delay_Base+0xc8>
		glPcuTimeoutCounter--;
 800485c:	6813      	ldr	r3, [r2, #0]
 800485e:	3b01      	subs	r3, #1
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	e009      	b.n	8004878 <ISR_Delay_Base+0xdc>
	else if (glPcuTimeoutCounter > 0) {
 8004864:	6813      	ldr	r3, [r2, #0]
 8004866:	b13b      	cbz	r3, 8004878 <ISR_Delay_Base+0xdc>
		glPcuTimeoutCounter--;
 8004868:	6813      	ldr	r3, [r2, #0]
 800486a:	3b01      	subs	r3, #1
 800486c:	6013      	str	r3, [r2, #0]
		gbCounterCount--;
 800486e:	4a05      	ldr	r2, [pc, #20]	(8004884 <ISR_Delay_Base+0xe8>)
 8004870:	7813      	ldrb	r3, [r2, #0]
 8004872:	3b01      	subs	r3, #1
 8004874:	b2db      	uxtb	r3, r3
 8004876:	7013      	strb	r3, [r2, #0]
		// Disable SysTick Counter
		SysTick_CounterCmd(SysTick_Counter_Disable);
		// Clear SysTick Counter
		SysTick_CounterCmd(SysTick_Counter_Clear);
	}*/
}
 8004878:	bd10      	pop	{r4, pc}
 800487a:	46c0      	nop			(mov r8, r8)
 800487c:	20000604 	.word	0x20000604
 8004880:	200005ec 	.word	0x200005ec
 8004884:	20000600 	.word	0x20000600
 8004888:	200005f0 	.word	0x200005f0
 800488c:	200005fc 	.word	0x200005fc
 8004890:	200005f4 	.word	0x200005f4
 8004894:	200005f8 	.word	0x200005f8

08004898 <StartCountdown>:
	while (glDelayCounter != 0)
		;
}

//##############################################################################
void StartCountdown(u32 StartTime) {
 8004898:	b500      	push	{lr}
	if (glCountdownCounter == 0)
 800489a:	4b0b      	ldr	r3, [pc, #44]	(80048c8 <StartCountdown+0x30>)
	while (glDelayCounter != 0)
		;
}

//##############################################################################
void StartCountdown(u32 StartTime) {
 800489c:	b081      	sub	sp, #4
	if (glCountdownCounter == 0)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	b923      	cbnz	r3, 80048ac <StartCountdown+0x14>
		gbCounterCount++;
 80048a2:	4a0a      	ldr	r2, [pc, #40]	(80048cc <StartCountdown+0x34>)
 80048a4:	7813      	ldrb	r3, [r2, #0]
 80048a6:	3301      	adds	r3, #1
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	7013      	strb	r3, [r2, #0]
#ifdef USING_SYSTICK_1000US
	glCountdownCounter = (StartTime*1);
#elif USING_SYSTICK_100US
	glCountdownCounter = (StartTime*10);
#elif defined USING_SYSTICK_10US
	glCountdownCounter = (StartTime * 100);
 80048ac:	2364      	movs	r3, #100
 80048ae:	fb03 f300 	mul.w	r3, r3, r0
 80048b2:	4a05      	ldr	r2, [pc, #20]	(80048c8 <StartCountdown+0x30>)
	if (gbCounterCount == 1) {
		// Enable the SysTick Counter
		//SysTick_CounterCmd(SysTick_Counter_Enable);
	}

	SetLED(AUX, 1);
 80048b4:	2006      	movs	r0, #6
#ifdef USING_SYSTICK_1000US
	glCountdownCounter = (StartTime*1);
#elif USING_SYSTICK_100US
	glCountdownCounter = (StartTime*10);
#elif defined USING_SYSTICK_10US
	glCountdownCounter = (StartTime * 100);
 80048b6:	6013      	str	r3, [r2, #0]
#elif defined USING_SYSTICK_1US
	glCountdownCounter = (StartTime*1000);
#endif

	if (gbCounterCount == 1) {
 80048b8:	4b04      	ldr	r3, [pc, #16]	(80048cc <StartCountdown+0x34>)
		// Enable the SysTick Counter
		//SysTick_CounterCmd(SysTick_Counter_Enable);
	}

	SetLED(AUX, 1);
 80048ba:	2101      	movs	r1, #1
	glCountdownCounter = (StartTime * 100);
#elif defined USING_SYSTICK_1US
	glCountdownCounter = (StartTime*1000);
#endif

	if (gbCounterCount == 1) {
 80048bc:	781b      	ldrb	r3, [r3, #0]
		// Enable the SysTick Counter
		//SysTick_CounterCmd(SysTick_Counter_Enable);
	}

	SetLED(AUX, 1);
 80048be:	f7ff fead 	bl	800461c <SetLED>
}
 80048c2:	b001      	add	sp, #4
 80048c4:	bd00      	pop	{pc}
 80048c6:	46c0      	nop			(mov r8, r8)
 80048c8:	200005f0 	.word	0x200005f0
 80048cc:	20000600 	.word	0x20000600

080048d0 <USART_Configuration>:
	// Reset Active Counter count
	gbCounterCount = 0;
}
//##############################################################################
//void USART_Configuration(){
void USART_Configuration(){
 80048d0:	b500      	push	{lr}
	u16 error = 0;

#ifdef USING_PC_UART
	mDelay(100);
 80048d2:	2064      	movs	r0, #100
	// Reset Active Counter count
	gbCounterCount = 0;
}
//##############################################################################
//void USART_Configuration(){
void USART_Configuration(){
 80048d4:	b081      	sub	sp, #4
	u16 error = 0;

#ifdef USING_PC_UART
	mDelay(100);
 80048d6:	f7ff fefd 	bl	80046d4 <mDelay>
	if (!pcu_initialize(Baudrate_PCU))
 80048da:	4b0a      	ldr	r3, [pc, #40]	(8004904 <USART_Configuration+0x34>)
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	f7ff f979 	bl	8003bd4 <pcu_initialize>
		error |= (1 << 0);
#endif
#ifdef USING_ZIGBEE
	mDelay(100);
 80048e2:	2064      	movs	r0, #100
 80048e4:	f7ff fef6 	bl	80046d4 <mDelay>
	if (!zgb_initialize(Baudrate_ZIG))
 80048e8:	4b07      	ldr	r3, [pc, #28]	(8004908 <USART_Configuration+0x38>)
 80048ea:	6818      	ldr	r0, [r3, #0]
 80048ec:	f7ff fd9c 	bl	8004428 <zgb_initialize>
	error|=(1<<1);
#endif
#ifdef USING_DYNAMIXEL
	mDelay(100);
 80048f0:	2064      	movs	r0, #100
 80048f2:	f7ff feef 	bl	80046d4 <mDelay>
	if (!dxl_initialize(Baudrate_DXL))
 80048f6:	4b05      	ldr	r3, [pc, #20]	(800490c <USART_Configuration+0x3c>)
 80048f8:	6818      	ldr	r0, [r3, #0]
 80048fa:	f7ff fbf9 	bl	80040f0 <dxl_initialize>
		error |= (1 << 2);
#endif
}
 80048fe:	b001      	add	sp, #4
 8004900:	bd00      	pop	{pc}
 8004902:	46c0      	nop			(mov r8, r8)
 8004904:	200000d4 	.word	0x200000d4
 8004908:	200000d0 	.word	0x200000d0
 800490c:	200000cc 	.word	0x200000cc

08004910 <SysTick_Configuration>:
		// Start ADC2 Software Conversion
		ADC_SoftwareStartConvCmd(ADC1, ENABLE);
		ADC_SoftwareStartConvCmd(ADC2, ENABLE);
}
//##############################################################################
void SysTick_Configuration(void) {
 8004910:	b500      	push	{lr}
#elif USING_SYSTICK_100US
	// SysTick end of count event each 100us with input clock equal to 9MHz (HCLK/8, default)
	SysTick_SetReload(900);
#elif defined USING_SYSTICK_10US
	// SysTick end of count event each 10us with input clock equal to 9MHz (HCLK/8, default)
	SysTick_SetReload(90);
 8004912:	205a      	movs	r0, #90
		// Start ADC2 Software Conversion
		ADC_SoftwareStartConvCmd(ADC1, ENABLE);
		ADC_SoftwareStartConvCmd(ADC2, ENABLE);
}
//##############################################################################
void SysTick_Configuration(void) {
 8004914:	b081      	sub	sp, #4
#elif USING_SYSTICK_100US
	// SysTick end of count event each 100us with input clock equal to 9MHz (HCLK/8, default)
	SysTick_SetReload(900);
#elif defined USING_SYSTICK_10US
	// SysTick end of count event each 10us with input clock equal to 9MHz (HCLK/8, default)
	SysTick_SetReload(90);
 8004916:	f001 feab 	bl	8006670 <SysTick_SetReload>
#elif defined USING_SYSTICK_1US
	// SysTick end of count event each 1us with input clock equal to 9MHz (HCLK/8, default)
	SysTick_SetReload(9);
#endif
	// Enable SysTick interrupt
	SysTick_ITConfig(ENABLE);
 800491a:	2001      	movs	r0, #1
 800491c:	f001 fec4 	bl	80066a8 <SysTick_ITConfig>

	// Enable the SysTick Counter
    SysTick_CounterCmd(SysTick_Counter_Enable);
 8004920:	2001      	movs	r0, #1
 8004922:	f001 feab 	bl	800667c <SysTick_CounterCmd>

	// Reset Active Counter count
	gbCounterCount = 0;
 8004926:	4b02      	ldr	r3, [pc, #8]	(8004930 <SysTick_Configuration+0x20>)
 8004928:	2200      	movs	r2, #0
 800492a:	701a      	strb	r2, [r3, #0]
}
 800492c:	b001      	add	sp, #4
 800492e:	bd00      	pop	{pc}
 8004930:	20000600 	.word	0x20000600

08004934 <ADC_Configuration>:

		GPIO_PinRemapConfig( GPIO_Remap_USART1, ENABLE);
		GPIO_PinRemapConfig( GPIO_Remap_SWJ_Disable, ENABLE);
}
//##############################################################################
void ADC_Configuration(void) {
 8004934:	b570      	push	{r4, r5, r6, lr}
 8004936:	b086      	sub	sp, #24
	ADC_InitTypeDef ADC_InitStructure;

		ADC_StructInit(&ADC_InitStructure);
 8004938:	ad01      	add	r5, sp, #4
 800493a:	4628      	mov	r0, r5
 800493c:	f000 fd08 	bl	8005350 <ADC_StructInit>

		// ADC1 configuration
		ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
 8004940:	2400      	movs	r4, #0
		ADC_InitStructure.ADC_ScanConvMode = DISABLE;
		ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
		ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
		ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
		ADC_InitStructure.ADC_NbrOfChannel = 2;
 8004942:	2302      	movs	r3, #2

		// ADC1 configuration
		ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
		ADC_InitStructure.ADC_ScanConvMode = DISABLE;
		ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
		ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 8004944:	f44f 2660 	mov.w	r6, #917504	; 0xe0000
		ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
		ADC_InitStructure.ADC_NbrOfChannel = 2;

		ADC_Init(ADC1, &ADC_InitStructure);
 8004948:	4832      	ldr	r0, [pc, #200]	(8004a14 <ADC_Configuration+0xe0>)
 800494a:	4629      	mov	r1, r5
		ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
		ADC_InitStructure.ADC_ScanConvMode = DISABLE;
		ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
		ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
		ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
		ADC_InitStructure.ADC_NbrOfChannel = 2;
 800494c:	f88d 3014 	strb.w	r3, [sp, #20]
	ADC_InitTypeDef ADC_InitStructure;

		ADC_StructInit(&ADC_InitStructure);

		// ADC1 configuration
		ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
 8004950:	9401      	str	r4, [sp, #4]
		ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 8004952:	f88d 4008 	strb.w	r4, [sp, #8]
		ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 8004956:	f88d 4009 	strb.w	r4, [sp, #9]
		ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 800495a:	9603      	str	r6, [sp, #12]
		ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 800495c:	9404      	str	r4, [sp, #16]
		ADC_InitStructure.ADC_NbrOfChannel = 2;

		ADC_Init(ADC1, &ADC_InitStructure);
 800495e:	f000 fcd3 	bl	8005308 <ADC_Init>
		ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
		ADC_InitStructure.ADC_ScanConvMode = DISABLE;
		ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
		ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
		ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
		ADC_InitStructure.ADC_NbrOfChannel = 1;
 8004962:	2301      	movs	r3, #1

		ADC_Init(ADC2, &ADC_InitStructure);
 8004964:	482c      	ldr	r0, [pc, #176]	(8004a18 <ADC_Configuration+0xe4>)
 8004966:	4629      	mov	r1, r5
		ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
		ADC_InitStructure.ADC_ScanConvMode = DISABLE;
		ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
		ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
		ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
		ADC_InitStructure.ADC_NbrOfChannel = 1;
 8004968:	f88d 3014 	strb.w	r3, [sp, #20]
		ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
		ADC_InitStructure.ADC_NbrOfChannel = 2;

		ADC_Init(ADC1, &ADC_InitStructure);

		ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
 800496c:	9401      	str	r4, [sp, #4]
		ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 800496e:	f88d 4008 	strb.w	r4, [sp, #8]
		ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 8004972:	f88d 4009 	strb.w	r4, [sp, #9]
		ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 8004976:	9603      	str	r6, [sp, #12]
		ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8004978:	9404      	str	r4, [sp, #16]
		ADC_InitStructure.ADC_NbrOfChannel = 1;

		ADC_Init(ADC2, &ADC_InitStructure);
 800497a:	f000 fcc5 	bl	8005308 <ADC_Init>

		// ADC1 regular channels configuration
		// Set ADC1 to read SIG_ADC0 (ADC1 multiplexer output) on Channel 10
		ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 1,
 800497e:	4825      	ldr	r0, [pc, #148]	(8004a14 <ADC_Configuration+0xe0>)
 8004980:	210a      	movs	r1, #10
 8004982:	2201      	movs	r2, #1
 8004984:	2307      	movs	r3, #7
 8004986:	f000 fd47 	bl	8005418 <ADC_RegularChannelConfig>
	//    ADC_RegularChannelConfig(ADC1, ADC_Channel_13, 1 , ADC_SampleTime_239Cycles5);    // SIG_VDD/VBUS
		//ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);

		// ADC2 regular channels configuration
		// Set ADC2 to read SIG_ADC1 (ADC2 multiplexer output) on Channel 5
		ADC_RegularChannelConfig(ADC2, ADC_Channel_5, 1, ADC_SampleTime_239Cycles5); // SIG_ADC1
 800498a:	2201      	movs	r2, #1
 800498c:	2307      	movs	r3, #7
 800498e:	4822      	ldr	r0, [pc, #136]	(8004a18 <ADC_Configuration+0xe4>)
 8004990:	2105      	movs	r1, #5
 8004992:	f000 fd41 	bl	8005418 <ADC_RegularChannelConfig>

		// Enable ADC1 DMA
		//ADC_DMACmd(ADC1, ENABLE);

		// Enable ADC1,2
		ADC_Cmd(ADC1, ENABLE);
 8004996:	481f      	ldr	r0, [pc, #124]	(8004a14 <ADC_Configuration+0xe0>)
 8004998:	2101      	movs	r1, #1
 800499a:	f000 fce3 	bl	8005364 <ADC_Cmd>
		ADC_Cmd(ADC2, ENABLE);
 800499e:	481e      	ldr	r0, [pc, #120]	(8004a18 <ADC_Configuration+0xe4>)
 80049a0:	2101      	movs	r1, #1
 80049a2:	f000 fcdf 	bl	8005364 <ADC_Cmd>

		// Enable ADC1,2 reset calibration register
		// Check the end of ADC1,2 reset calibration register
		ADC_ResetCalibration(ADC1);
 80049a6:	481b      	ldr	r0, [pc, #108]	(8004a14 <ADC_Configuration+0xe0>)
 80049a8:	f000 fcfc 	bl	80053a4 <ADC_ResetCalibration>
		while (ADC_GetResetCalibrationStatus(ADC1))
 80049ac:	4819      	ldr	r0, [pc, #100]	(8004a14 <ADC_Configuration+0xe0>)
 80049ae:	f000 fcff 	bl	80053b0 <ADC_GetResetCalibrationStatus>
 80049b2:	2800      	cmp	r0, #0
 80049b4:	d1fa      	bne.n	80049ac <ADC_Configuration+0x78>
			;

		ADC_ResetCalibration(ADC2);
 80049b6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80049ba:	f500 3094 	add.w	r0, r0, #75776	; 0x12800
 80049be:	f000 fcf1 	bl	80053a4 <ADC_ResetCalibration>
		while (ADC_GetResetCalibrationStatus(ADC2))
 80049c2:	4815      	ldr	r0, [pc, #84]	(8004a18 <ADC_Configuration+0xe4>)
 80049c4:	f000 fcf4 	bl	80053b0 <ADC_GetResetCalibrationStatus>
 80049c8:	2800      	cmp	r0, #0
 80049ca:	d1fa      	bne.n	80049c2 <ADC_Configuration+0x8e>
			;

		// Start ADC1,2 calibration
		// Check the end of ADC1,2 calibration
		ADC_StartCalibration(ADC1);
 80049cc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80049d0:	f500 3092 	add.w	r0, r0, #74752	; 0x12400
 80049d4:	f000 fcf2 	bl	80053bc <ADC_StartCalibration>
		while (ADC_GetCalibrationStatus(ADC1))
 80049d8:	480e      	ldr	r0, [pc, #56]	(8004a14 <ADC_Configuration+0xe0>)
 80049da:	f000 fcf5 	bl	80053c8 <ADC_GetCalibrationStatus>
 80049de:	2800      	cmp	r0, #0
 80049e0:	d1fa      	bne.n	80049d8 <ADC_Configuration+0xa4>
			;

		ADC_StartCalibration(ADC2);
 80049e2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80049e6:	f500 3094 	add.w	r0, r0, #75776	; 0x12800
 80049ea:	f000 fce7 	bl	80053bc <ADC_StartCalibration>
		while (ADC_GetCalibrationStatus(ADC2))
 80049ee:	480a      	ldr	r0, [pc, #40]	(8004a18 <ADC_Configuration+0xe4>)
 80049f0:	f000 fcea 	bl	80053c8 <ADC_GetCalibrationStatus>
 80049f4:	2800      	cmp	r0, #0
 80049f6:	d1fa      	bne.n	80049ee <ADC_Configuration+0xba>
			;

		// Start ADC2 Software Conversion
		ADC_SoftwareStartConvCmd(ADC1, ENABLE);
 80049f8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80049fc:	2101      	movs	r1, #1
 80049fe:	f500 3092 	add.w	r0, r0, #74752	; 0x12400
 8004a02:	f000 fce7 	bl	80053d4 <ADC_SoftwareStartConvCmd>
		ADC_SoftwareStartConvCmd(ADC2, ENABLE);
 8004a06:	4804      	ldr	r0, [pc, #16]	(8004a18 <ADC_Configuration+0xe4>)
 8004a08:	2101      	movs	r1, #1
 8004a0a:	f000 fce3 	bl	80053d4 <ADC_SoftwareStartConvCmd>
}
 8004a0e:	b006      	add	sp, #24
 8004a10:	bd70      	pop	{r4, r5, r6, pc}
 8004a12:	46c0      	nop			(mov r8, r8)
 8004a14:	40012400 	.word	0x40012400
 8004a18:	40012800 	.word	0x40012800

08004a1c <GPIO_Configuration>:
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
}

//##############################################################################
void GPIO_Configuration(void) {
 8004a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a1e:	b083      	sub	sp, #12
	GPIO_InitTypeDef GPIO_InitStructure;
		GPIO_StructInit(&GPIO_InitStructure);
 8004a20:	ac01      	add	r4, sp, #4
		// PORTA CONFIG
		GPIO_InitStructure.GPIO_Pin = PIN_SIG_MOT1P | PIN_SIG_MOT1M | PIN_SIG_MOT2P
				| PIN_SIG_MOT2M | PIN_SIG_MOT5P | PIN_SIG_MOT5M;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004a22:	4d71      	ldr	r5, [pc, #452]	(8004be8 <GPIO_Configuration+0x1cc>)
}

//##############################################################################
void GPIO_Configuration(void) {
	GPIO_InitTypeDef GPIO_InitStructure;
		GPIO_StructInit(&GPIO_InitStructure);
 8004a24:	4620      	mov	r0, r4

		// PORTA CONFIG
		GPIO_InitStructure.GPIO_Pin = PIN_SIG_MOT1P | PIN_SIG_MOT1M | PIN_SIG_MOT2P
				| PIN_SIG_MOT2M | PIN_SIG_MOT5P | PIN_SIG_MOT5M;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004a26:	2603      	movs	r6, #3
}

//##############################################################################
void GPIO_Configuration(void) {
	GPIO_InitTypeDef GPIO_InitStructure;
		GPIO_StructInit(&GPIO_InitStructure);
 8004a28:	f001 f920 	bl	8005c6c <GPIO_StructInit>

		// PORTA CONFIG
		GPIO_InitStructure.GPIO_Pin = PIN_SIG_MOT1P | PIN_SIG_MOT1M | PIN_SIG_MOT2P
				| PIN_SIG_MOT2M | PIN_SIG_MOT5P | PIN_SIG_MOT5M;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004a2c:	2710      	movs	r7, #16
void GPIO_Configuration(void) {
	GPIO_InitTypeDef GPIO_InitStructure;
		GPIO_StructInit(&GPIO_InitStructure);

		// PORTA CONFIG
		GPIO_InitStructure.GPIO_Pin = PIN_SIG_MOT1P | PIN_SIG_MOT1M | PIN_SIG_MOT2P
 8004a2e:	f640 130f 	movw	r3, #2319	; 0x90f
				| PIN_SIG_MOT2M | PIN_SIG_MOT5P | PIN_SIG_MOT5M;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004a32:	4628      	mov	r0, r5
 8004a34:	4621      	mov	r1, r4
void GPIO_Configuration(void) {
	GPIO_InitTypeDef GPIO_InitStructure;
		GPIO_StructInit(&GPIO_InitStructure);

		// PORTA CONFIG
		GPIO_InitStructure.GPIO_Pin = PIN_SIG_MOT1P | PIN_SIG_MOT1M | PIN_SIG_MOT2P
 8004a36:	f8ad 3004 	strh.w	r3, [sp, #4]
				| PIN_SIG_MOT2M | PIN_SIG_MOT5P | PIN_SIG_MOT5M;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004a3a:	f88d 6006 	strb.w	r6, [sp, #6]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004a3e:	f88d 7007 	strb.w	r7, [sp, #7]
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004a42:	f001 f8bf 	bl	8005bc4 <GPIO_Init>

		GPIO_InitStructure.GPIO_Pin = PIN_BUZZER | PIN_ZIGBEE_RESET;
 8004a46:	f44f 5382 	mov.w	r3, #4160	; 0x1040
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	4621      	mov	r1, r4
				| PIN_SIG_MOT2M | PIN_SIG_MOT5P | PIN_SIG_MOT5M;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOA, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_BUZZER | PIN_ZIGBEE_RESET;
 8004a4e:	f8ad 3004 	strh.w	r3, [sp, #4]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004a52:	f88d 6006 	strb.w	r6, [sp, #6]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004a56:	f88d 7007 	strb.w	r7, [sp, #7]
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004a5a:	f001 f8b3 	bl	8005bc4 <GPIO_Init>

		GPIO_InitStructure.GPIO_Pin = PIN_ADC1;
 8004a5e:	f04f 0320 	mov.w	r3, #32	; 0x20
 8004a62:	f8ad 3004 	strh.w	r3, [sp, #4]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004a66:	4628      	mov	r0, r5
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOA, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_ADC1;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 8004a68:	f04f 0300 	mov.w	r3, #0	; 0x0
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004a6c:	4621      	mov	r1, r4
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOA, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_ADC1;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 8004a6e:	f88d 3007 	strb.w	r3, [sp, #7]
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004a72:	f001 f8a7 	bl	8005bc4 <GPIO_Init>

		GPIO_InitStructure.GPIO_Pin = PIN_SW_RIGHT | PIN_SW_LEFT;
 8004a76:	f24c 0300 	movw	r3, #49152	; 0xc000
 8004a7a:	f8ad 3004 	strh.w	r3, [sp, #4]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004a7e:	4628      	mov	r0, r5
		GPIO_InitStructure.GPIO_Pin = PIN_ADC1;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
		GPIO_Init(GPIOA, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_SW_RIGHT | PIN_SW_LEFT;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8004a80:	f04f 0348 	mov.w	r3, #72	; 0x48
		// PORTB CONFIG
		GPIO_InitStructure.GPIO_Pin = PIN_LED_AUX | PIN_LED_MANAGE | PIN_LED_PROGRAM
				| PIN_LED_PLAY;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004a84:	f505 6580 	add.w	r5, r5, #1024	; 0x400
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
		GPIO_Init(GPIOA, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_SW_RIGHT | PIN_SW_LEFT;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004a88:	4621      	mov	r1, r4
		GPIO_InitStructure.GPIO_Pin = PIN_ADC1;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
		GPIO_Init(GPIOA, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_SW_RIGHT | PIN_SW_LEFT;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8004a8a:	f88d 3007 	strb.w	r3, [sp, #7]
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004a8e:	f001 f899 	bl	8005bc4 <GPIO_Init>

		// PORTB CONFIG
		GPIO_InitStructure.GPIO_Pin = PIN_LED_AUX | PIN_LED_MANAGE | PIN_LED_PROGRAM
 8004a92:	f24f 0300 	movw	r3, #61440	; 0xf000
				| PIN_LED_PLAY;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004a96:	4628      	mov	r0, r5
 8004a98:	4621      	mov	r1, r4
		GPIO_InitStructure.GPIO_Pin = PIN_SW_RIGHT | PIN_SW_LEFT;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
		GPIO_Init(GPIOA, &GPIO_InitStructure);

		// PORTB CONFIG
		GPIO_InitStructure.GPIO_Pin = PIN_LED_AUX | PIN_LED_MANAGE | PIN_LED_PROGRAM
 8004a9a:	f8ad 3004 	strh.w	r3, [sp, #4]
				| PIN_LED_PLAY;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004a9e:	f88d 6006 	strb.w	r6, [sp, #6]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004aa2:	f88d 7007 	strb.w	r7, [sp, #7]
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004aa6:	f001 f88d 	bl	8005bc4 <GPIO_Init>

		GPIO_InitStructure.GPIO_Pin = PIN_ENABLE_TXD | PIN_ENABLE_RXD;
 8004aaa:	f04f 0330 	mov.w	r3, #48	; 0x30
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004aae:	4628      	mov	r0, r5
 8004ab0:	4621      	mov	r1, r4
				| PIN_LED_PLAY;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOB, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_ENABLE_TXD | PIN_ENABLE_RXD;
 8004ab2:	f8ad 3004 	strh.w	r3, [sp, #4]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004ab6:	f88d 6006 	strb.w	r6, [sp, #6]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004aba:	f88d 7007 	strb.w	r7, [sp, #7]
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004abe:	f001 f881 	bl	8005bc4 <GPIO_Init>

		GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
 8004ac2:	f44f 6308 	mov.w	r3, #2176	; 0x880
 8004ac6:	f8ad 3004 	strh.w	r3, [sp, #4]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004aca:	4628      	mov	r0, r5
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOB, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8004acc:	f04f 0304 	mov.w	r3, #4	; 0x4
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004ad0:	4621      	mov	r1, r4
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOB, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8004ad2:	f88d 3007 	strb.w	r3, [sp, #7]
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004ad6:	f001 f875 	bl	8005bc4 <GPIO_Init>

		GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
 8004ada:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8004ade:	f8ad 3004 	strh.w	r3, [sp, #4]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004ae2:	4628      	mov	r0, r5
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
		GPIO_Init(GPIOB, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8004ae4:	f04f 0318 	mov.w	r3, #24	; 0x18
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004ae8:	4621      	mov	r1, r4
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
		GPIO_Init(GPIOB, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8004aea:	f88d 3007 	strb.w	r3, [sp, #7]
		GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
		GPIO_Init(GPIOB, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004aee:	f88d 6006 	strb.w	r6, [sp, #6]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004af2:	f001 f867 	bl	8005bc4 <GPIO_Init>

		GPIO_InitStructure.GPIO_Pin = PIN_SW_START;
 8004af6:	f04f 0308 	mov.w	r3, #8	; 0x8
 8004afa:	f8ad 3004 	strh.w	r3, [sp, #4]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004afe:	4628      	mov	r0, r5
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
		GPIO_Init(GPIOB, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_SW_START;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8004b00:	f04f 0348 	mov.w	r3, #72	; 0x48
		// PORTC CONFIG
		GPIO_InitStructure.GPIO_Pin = PIN_SIG_MOT3P | PIN_SIG_MOT3M | PIN_SIG_MOT4P
				| PIN_SIG_MOT4M;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004b04:	f505 6580 	add.w	r5, r5, #1024	; 0x400
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
		GPIO_Init(GPIOB, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_SW_START;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004b08:	4621      	mov	r1, r4
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
		GPIO_Init(GPIOB, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_SW_START;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8004b0a:	f88d 3007 	strb.w	r3, [sp, #7]
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004b0e:	f001 f859 	bl	8005bc4 <GPIO_Init>

		// PORTC CONFIG
		GPIO_InitStructure.GPIO_Pin = PIN_SIG_MOT3P | PIN_SIG_MOT3M | PIN_SIG_MOT4P
 8004b12:	f44f 7370 	mov.w	r3, #960	; 0x3c0
				| PIN_SIG_MOT4M;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004b16:	4628      	mov	r0, r5
 8004b18:	4621      	mov	r1, r4
		GPIO_InitStructure.GPIO_Pin = PIN_SW_START;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
		GPIO_Init(GPIOB, &GPIO_InitStructure);

		// PORTC CONFIG
		GPIO_InitStructure.GPIO_Pin = PIN_SIG_MOT3P | PIN_SIG_MOT3M | PIN_SIG_MOT4P
 8004b1a:	f8ad 3004 	strh.w	r3, [sp, #4]
				| PIN_SIG_MOT4M;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004b1e:	f88d 6006 	strb.w	r6, [sp, #6]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004b22:	f88d 7007 	strb.w	r7, [sp, #7]
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004b26:	f001 f84d 	bl	8005bc4 <GPIO_Init>

		GPIO_InitStructure.GPIO_Pin = PIN_ADC_SELECT0 | PIN_ADC_SELECT1;
 8004b2a:	f04f 0306 	mov.w	r3, #6	; 0x6
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004b2e:	4628      	mov	r0, r5
 8004b30:	4621      	mov	r1, r4
				| PIN_SIG_MOT4M;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOC, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_ADC_SELECT0 | PIN_ADC_SELECT1;
 8004b32:	f8ad 3004 	strh.w	r3, [sp, #4]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004b36:	f88d 6006 	strb.w	r6, [sp, #6]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004b3a:	f88d 7007 	strb.w	r7, [sp, #7]
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004b3e:	f001 f841 	bl	8005bc4 <GPIO_Init>

		GPIO_InitStructure.GPIO_Pin = PIN_LED_POWER | PIN_LED_TXD | PIN_LED_RXD;
 8004b42:	f24e 0300 	movw	r3, #57344	; 0xe000
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004b46:	4628      	mov	r0, r5
 8004b48:	4621      	mov	r1, r4
		GPIO_InitStructure.GPIO_Pin = PIN_ADC_SELECT0 | PIN_ADC_SELECT1;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOC, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_LED_POWER | PIN_LED_TXD | PIN_LED_RXD;
 8004b4a:	f8ad 3004 	strh.w	r3, [sp, #4]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004b4e:	f88d 6006 	strb.w	r6, [sp, #6]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004b52:	f88d 7007 	strb.w	r7, [sp, #7]
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004b56:	f001 f835 	bl	8005bc4 <GPIO_Init>

		GPIO_InitStructure.GPIO_Pin = PIN_ZIGBEE_TXD;
 8004b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b5e:	f8ad 3004 	strh.w	r3, [sp, #4]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004b62:	4628      	mov	r0, r5
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOC, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_ZIGBEE_TXD;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8004b64:	f04f 0318 	mov.w	r3, #24	; 0x18
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004b68:	4621      	mov	r1, r4
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOC, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_ZIGBEE_TXD;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8004b6a:	f88d 3007 	strb.w	r3, [sp, #7]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_Init(GPIOC, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_ZIGBEE_TXD;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004b6e:	f88d 6006 	strb.w	r6, [sp, #6]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004b72:	f001 f827 	bl	8005bc4 <GPIO_Init>

		GPIO_InitStructure.GPIO_Pin = PIN_ADC0 | PIN_VDD_VOLT;
 8004b76:	f04f 0309 	mov.w	r3, #9	; 0x9
 8004b7a:	f8ad 3004 	strh.w	r3, [sp, #4]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004b7e:	4628      	mov	r0, r5
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
		GPIO_Init(GPIOC, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_ADC0 | PIN_VDD_VOLT;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 8004b80:	f04f 0300 	mov.w	r3, #0	; 0x0
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004b84:	4621      	mov	r1, r4
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
		GPIO_Init(GPIOC, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_ADC0 | PIN_VDD_VOLT;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 8004b86:	f88d 3007 	strb.w	r3, [sp, #7]
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004b8a:	f001 f81b 	bl	8005bc4 <GPIO_Init>

		GPIO_InitStructure.GPIO_Pin = PIN_MIC;
 8004b8e:	f04f 0310 	mov.w	r3, #16	; 0x10
 8004b92:	f8ad 3004 	strh.w	r3, [sp, #4]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004b96:	4628      	mov	r0, r5
		GPIO_InitStructure.GPIO_Pin = PIN_ADC0 | PIN_VDD_VOLT;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
		GPIO_Init(GPIOC, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_MIC;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8004b98:	f04f 0348 	mov.w	r3, #72	; 0x48
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004b9c:	4621      	mov	r1, r4
		GPIO_InitStructure.GPIO_Pin = PIN_ADC0 | PIN_VDD_VOLT;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
		GPIO_Init(GPIOC, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_MIC;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8004b9e:	f88d 3007 	strb.w	r3, [sp, #7]
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004ba2:	f001 f80f 	bl	8005bc4 <GPIO_Init>

		GPIO_InitStructure.GPIO_Pin = PIN_SW_UP | PIN_SW_DOWN;
 8004ba6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004baa:	f8ad 3004 	strh.w	r3, [sp, #4]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004bae:	4628      	mov	r0, r5
		GPIO_InitStructure.GPIO_Pin = PIN_MIC;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
		GPIO_Init(GPIOC, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_SW_UP | PIN_SW_DOWN;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8004bb0:	f04f 0348 	mov.w	r3, #72	; 0x48
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004bb4:	4621      	mov	r1, r4
		GPIO_InitStructure.GPIO_Pin = PIN_MIC;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
		GPIO_Init(GPIOC, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = PIN_SW_UP | PIN_SW_DOWN;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8004bb6:	f88d 3007 	strb.w	r3, [sp, #7]
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004bba:	f001 f803 	bl	8005bc4 <GPIO_Init>

		// PORTD CONFIG
		GPIO_InitStructure.GPIO_Pin = PIN_ZIGBEE_RXD;
 8004bbe:	f04f 0304 	mov.w	r3, #4	; 0x4
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
		GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	4809      	ldr	r0, [pc, #36]	(8004bec <GPIO_Configuration+0x1d0>)
		GPIO_InitStructure.GPIO_Pin = PIN_SW_UP | PIN_SW_DOWN;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
		GPIO_Init(GPIOC, &GPIO_InitStructure);

		// PORTD CONFIG
		GPIO_InitStructure.GPIO_Pin = PIN_ZIGBEE_RXD;
 8004bc6:	f8ad 3004 	strh.w	r3, [sp, #4]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8004bca:	f88d 3007 	strb.w	r3, [sp, #7]
		GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004bce:	f000 fff9 	bl	8005bc4 <GPIO_Init>

		GPIO_PinRemapConfig( GPIO_Remap_USART1, ENABLE);
 8004bd2:	2004      	movs	r0, #4
 8004bd4:	2101      	movs	r1, #1
 8004bd6:	f001 f88f 	bl	8005cf8 <GPIO_PinRemapConfig>
		GPIO_PinRemapConfig( GPIO_Remap_SWJ_Disable, ENABLE);
 8004bda:	4805      	ldr	r0, [pc, #20]	(8004bf0 <GPIO_Configuration+0x1d4>)
 8004bdc:	2101      	movs	r1, #1
 8004bde:	f001 f88b 	bl	8005cf8 <GPIO_PinRemapConfig>
}
 8004be2:	b003      	add	sp, #12
 8004be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004be6:	46c0      	nop			(mov r8, r8)
 8004be8:	40010800 	.word	0x40010800
 8004bec:	40011400 	.word	0x40011400
 8004bf0:	00300400 	.word	0x00300400

08004bf4 <NVIC_Configuration>:

	PWR_BackupAccessCmd(ENABLE);
}

//##############################################################################
void NVIC_Configuration(void) {
 8004bf4:	b570      	push	{r4, r5, r6, lr}
#ifdef  VECT_TAB_RAM
	// Set the Vector Table base location at 0x20000000
	NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0);
#else  // VECT_TAB_FLASH
	// Set the Vector Table base location at 0x08003000
	NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
 8004bf6:	f44f 5140 	mov.w	r1, #12288	; 0x3000

	PWR_BackupAccessCmd(ENABLE);
}

//##############################################################################
void NVIC_Configuration(void) {
 8004bfa:	b082      	sub	sp, #8
#ifdef  VECT_TAB_RAM
	// Set the Vector Table base location at 0x20000000
	NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0);
#else  // VECT_TAB_FLASH
	// Set the Vector Table base location at 0x08003000
	NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
 8004bfc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8004c00:	f001 f9f4 	bl	8005fec <NVIC_SetVectorTable>
	// Enable the USART1 Interrupt (Dynamixel)
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8004c04:	ad01      	add	r5, sp, #4
	NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
#endif

	// Configure the NVIC Preemption Priority Bits
	//NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 8004c06:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8004c0a:	f001 f951 	bl	8005eb0 <NVIC_PriorityGroupConfig>

	// Enable the USART1 Interrupt (Dynamixel)
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8004c0e:	2401      	movs	r4, #1
	// Configure the NVIC Preemption Priority Bits
	//NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);

	// Enable the USART1 Interrupt (Dynamixel)
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
 8004c10:	2325      	movs	r3, #37
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8004c12:	2600      	movs	r6, #0
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8004c14:	4628      	mov	r0, r5
	// Configure the NVIC Preemption Priority Bits
	//NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);

	// Enable the USART1 Interrupt (Dynamixel)
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
 8004c16:	f88d 3004 	strb.w	r3, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8004c1a:	f88d 6005 	strb.w	r6, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8004c1e:	f88d 4006 	strb.w	r4, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004c22:	f88d 4007 	strb.w	r4, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 8004c26:	f001 f94d 	bl	8005ec4 <NVIC_Init>

	// Enable the USART3 Interrupt (Serial/PC_UART)
	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQChannel;
 8004c2a:	2327      	movs	r3, #39
 8004c2c:	f88d 3004 	strb.w	r3, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8004c30:	4628      	mov	r0, r5
	NVIC_Init(&NVIC_InitStructure);

	// Enable the USART3 Interrupt (Serial/PC_UART)
	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQChannel;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
 8004c32:	2303      	movs	r3, #3
 8004c34:	f88d 3006 	strb.w	r3, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);

	// Enable the USART3 Interrupt (Serial/PC_UART)
	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQChannel;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8004c38:	f88d 6005 	strb.w	r6, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004c3c:	f88d 4007 	strb.w	r4, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 8004c40:	f001 f940 	bl	8005ec4 <NVIC_Init>

	// Enable the UART5 Interrupt (Zigbee)
	NVIC_InitStructure.NVIC_IRQChannel = UART5_IRQChannel;
 8004c44:	2335      	movs	r3, #53
 8004c46:	f88d 3004 	strb.w	r3, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8004c4a:	4628      	mov	r0, r5
	NVIC_Init(&NVIC_InitStructure);

	// Enable the UART5 Interrupt (Zigbee)
	NVIC_InitStructure.NVIC_IRQChannel = UART5_IRQChannel;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 8004c4c:	2302      	movs	r3, #2
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);

	// Enable the UART5 Interrupt (Zigbee)
	NVIC_InitStructure.NVIC_IRQChannel = UART5_IRQChannel;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8004c4e:	f88d 6005 	strb.w	r6, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 8004c52:	f88d 3006 	strb.w	r3, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004c56:	f88d 4007 	strb.w	r4, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 8004c5a:	f001 f933 	bl	8005ec4 <NVIC_Init>
}
 8004c5e:	b002      	add	sp, #8
 8004c60:	bd70      	pop	{r4, r5, r6, pc}
 8004c62:	46c0      	nop			(mov r8, r8)

08004c64 <RCC_Configuration>:
	// USART Configuration
	USART_Configuration();
}

//##############################################################################
void RCC_Configuration(void) {
 8004c64:	b500      	push	{lr}
 8004c66:	b081      	sub	sp, #4
	ErrorStatus HSEStartUpStatus;
	// RCC system reset(for debug purpose)
	RCC_DeInit();
 8004c68:	f001 fb22 	bl	80062b0 <RCC_DeInit>

	// Enable HSE
	RCC_HSEConfig(RCC_HSE_ON);
 8004c6c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004c70:	f001 fb3e 	bl	80062f0 <RCC_HSEConfig>

	// Wait till HSE is ready
	HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8004c74:	f001 fb56 	bl	8006324 <RCC_WaitForHSEStartUp>

	if (HSEStartUpStatus == SUCCESS) {
 8004c78:	2801      	cmp	r0, #1
 8004c7a:	d124      	bne.n	8004cc6 <RCC_Configuration+0x62>
		// Enable Prefetch Buffer
		FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
 8004c7c:	2010      	movs	r0, #16
 8004c7e:	f000 fd25 	bl	80056cc <FLASH_PrefetchBufferCmd>

		// Flash 2 wait state
		FLASH_SetLatency(FLASH_Latency_2);
 8004c82:	2002      	movs	r0, #2
 8004c84:	f000 fd0a 	bl	800569c <FLASH_SetLatency>

		// HCLK = SYSCLK
		RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8004c88:	2000      	movs	r0, #0
 8004c8a:	f001 fb95 	bl	80063b8 <RCC_HCLKConfig>

		// PCLK2 = HCLK
		RCC_PCLK2Config(RCC_HCLK_Div1);
 8004c8e:	2000      	movs	r0, #0
 8004c90:	f001 fba6 	bl	80063e0 <RCC_PCLK2Config>

		// PCLK1 = HCLK/2
		RCC_PCLK1Config(RCC_HCLK_Div2);
 8004c94:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004c98:	f001 fb98 	bl	80063cc <RCC_PCLK1Config>

		// PLLCLK = 8MHz * 9 = 72 MHz
		RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
 8004c9c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004ca0:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8004ca4:	f001 fb66 	bl	8006374 <RCC_PLLConfig>

		// Enable PLL
		RCC_PLLCmd(ENABLE);
 8004ca8:	2001      	movs	r0, #1
 8004caa:	f001 fb6d 	bl	8006388 <RCC_PLLCmd>

		// Wait till PLL is ready
		while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET) {
 8004cae:	2039      	movs	r0, #57
 8004cb0:	f001 fc96 	bl	80065e0 <RCC_GetFlagStatus>
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	d0fa      	beq.n	8004cae <RCC_Configuration+0x4a>
		}

		// Select PLL as system clock source
		RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 8004cb8:	2002      	movs	r0, #2
 8004cba:	f001 fb6b 	bl	8006394 <RCC_SYSCLKConfig>

		// Wait till PLL is used as system clock source
		while (RCC_GetSYSCLKSource() != 0x08) {
 8004cbe:	f001 fb73 	bl	80063a8 <RCC_GetSYSCLKSource>
 8004cc2:	2808      	cmp	r0, #8
 8004cc4:	d1fb      	bne.n	8004cbe <RCC_Configuration+0x5a>
	}

	// Enable peripheral clocks

	// Enable GPIOB and GPIOC clocks
	RCC_APB2PeriphClockCmd(
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	f240 601c 	movw	r0, #1564	; 0x61c
 8004ccc:	f001 fc3e 	bl	800654c <RCC_APB2PeriphClockCmd>
			RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC
					| RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2, ENABLE);

	// Enable USART1 Clock (Dynamixel)
#ifdef USING_DYNAMIXEL
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004cd6:	f001 fc39 	bl	800654c <RCC_APB2PeriphClockCmd>
#endif
#ifdef USING_PC_UART
	// Enable USART3 Clock (PC_UART)
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8004cda:	2101      	movs	r1, #1
 8004cdc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004ce0:	f001 fc42 	bl	8006568 <RCC_APB1PeriphClockCmd>
#endif
#ifdef USING_ZIGBEE
	// Enable UART5 Clock (Zigbee)
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
 8004ce4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004ce8:	2101      	movs	r1, #1
 8004cea:	f001 fc3d 	bl	8006568 <RCC_APB1PeriphClockCmd>
#endif

	PWR_BackupAccessCmd(ENABLE);
 8004cee:	2001      	movs	r0, #1
 8004cf0:	f001 fa6e 	bl	80061d0 <PWR_BackupAccessCmd>
}
 8004cf4:	b001      	add	sp, #4
 8004cf6:	bd00      	pop	{pc}

08004cf8 <SysInit>:
#include "serial.h"
#include "dynamixel.h"
#include "zigbee.h"

//##############################################################################
void SysInit(){
 8004cf8:	b500      	push	{lr}
	// Clear the WatchDog Early Wakeup interrupt flag
//    WWDG_ClearFlag();
	ReBootToBootLoader = 0;
 8004cfa:	4b09      	ldr	r3, [pc, #36]	(8004d20 <SysInit+0x28>)
 8004cfc:	2200      	movs	r2, #0
#include "serial.h"
#include "dynamixel.h"
#include "zigbee.h"

//##############################################################################
void SysInit(){
 8004cfe:	b081      	sub	sp, #4
	// Clear the WatchDog Early Wakeup interrupt flag
//    WWDG_ClearFlag();
	ReBootToBootLoader = 0;
 8004d00:	701a      	strb	r2, [r3, #0]

	// System Clocks Configuration
	RCC_Configuration();
 8004d02:	f7ff ffaf 	bl	8004c64 <RCC_Configuration>

	// NVIC configuration
	NVIC_Configuration();
 8004d06:	f7ff ff75 	bl	8004bf4 <NVIC_Configuration>

	// GPIO configuration
	GPIO_Configuration();
 8004d0a:	f7ff fe87 	bl	8004a1c <GPIO_Configuration>

	// System clock count configuration
	SysTick_Configuration();
 8004d0e:	f7ff fdff 	bl	8004910 <SysTick_Configuration>

	// Analog to Digital Converter Configuration
	ADC_Configuration();
 8004d12:	f7ff fe0f 	bl	8004934 <ADC_Configuration>

	// USART Configuration
	USART_Configuration();
 8004d16:	f7ff fddb 	bl	80048d0 <USART_Configuration>
}
 8004d1a:	b001      	add	sp, #4
 8004d1c:	bd00      	pop	{pc}
 8004d1e:	46c0      	nop			(mov r8, r8)
 8004d20:	2000060c 	.word	0x2000060c

08004d24 <pcu_hal_timeout>:
	}

	//##############################################################################
	u8 pcu_hal_timeout(void)
	{
	    if (glPcuTimeoutCounter==0)
 8004d24:	4b03      	ldr	r3, [pc, #12]	(8004d34 <pcu_hal_timeout+0x10>)
 8004d26:	6818      	ldr	r0, [r3, #0]
 8004d28:	f1d0 0001 	rsbs	r0, r0, #1	; 0x1
 8004d2c:	bf38      	it	cc
 8004d2e:	2000      	movcc	r0, #0
	        return 1;
	    else
	        return 0;
	}
 8004d30:	4770      	bx	lr
 8004d32:	46c0      	nop			(mov r8, r8)
 8004d34:	200005f8 	.word	0x200005f8

08004d38 <pcu_get_queue>:
	}

	//##############################################################################
	u8 pcu_get_queue(void)
	{
	    if (gbPcuWrite==gbPcuRead)
 8004d38:	4b0b      	ldr	r3, [pc, #44]	(8004d68 <pcu_get_queue+0x30>)
 8004d3a:	490c      	ldr	r1, [pc, #48]	(8004d6c <pcu_get_queue+0x34>)
 8004d3c:	881a      	ldrh	r2, [r3, #0]
 8004d3e:	880b      	ldrh	r3, [r1, #0]
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d101      	bne.n	8004d48 <pcu_get_queue+0x10>
 8004d44:	20ff      	movs	r0, #255
 8004d46:	e00e      	b.n	8004d66 <pcu_get_queue+0x2e>
	        return 0xFF;

	    u8 data = gbpPcuBuffer[gbPcuRead++];
 8004d48:	880b      	ldrh	r3, [r1, #0]
 8004d4a:	4a09      	ldr	r2, [pc, #36]	(8004d70 <pcu_get_queue+0x38>)
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	5cd2      	ldrb	r2, [r2, r3]
 8004d50:	3301      	adds	r3, #1
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	800b      	strh	r3, [r1, #0]
 8004d56:	4610      	mov	r0, r2

	    if (gbPcuRead>(PC_UART_BUFFER_LENGTH-1))
 8004d58:	880a      	ldrh	r2, [r1, #0]
 8004d5a:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8004d5e:	429a      	cmp	r2, r3
	        gbPcuRead = 0;
 8004d60:	bf84      	itt	hi
 8004d62:	2300      	movhi	r3, #0
 8004d64:	800b      	strhhi	r3, [r1, #0]

	    return data;
	}
 8004d66:	4770      	bx	lr
 8004d68:	20000a16 	.word	0x20000a16
 8004d6c:	20000a18 	.word	0x20000a18
 8004d70:	20000614 	.word	0x20000614

08004d74 <pcu_peek_queue>:

	//##############################################################################
	u8 pcu_peek_queue(void)
	{
	    if (gbPcuWrite==gbPcuRead)
 8004d74:	4b06      	ldr	r3, [pc, #24]	(8004d90 <pcu_peek_queue+0x1c>)
 8004d76:	4907      	ldr	r1, [pc, #28]	(8004d94 <pcu_peek_queue+0x20>)
 8004d78:	881a      	ldrh	r2, [r3, #0]
 8004d7a:	880b      	ldrh	r3, [r1, #0]
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d101      	bne.n	8004d84 <pcu_peek_queue+0x10>
 8004d80:	20ff      	movs	r0, #255
 8004d82:	e004      	b.n	8004d8e <pcu_peek_queue+0x1a>
	        return 0xFF;

	    u8 data = gbpPcuBuffer[gbPcuRead];
 8004d84:	880b      	ldrh	r3, [r1, #0]
 8004d86:	4a04      	ldr	r2, [pc, #16]	(8004d98 <pcu_peek_queue+0x24>)
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	5cd3      	ldrb	r3, [r2, r3]
 8004d8c:	4618      	mov	r0, r3

	    return data;
	}
 8004d8e:	4770      	bx	lr
 8004d90:	20000a16 	.word	0x20000a16
 8004d94:	20000a18 	.word	0x20000a18
 8004d98:	20000614 	.word	0x20000614

08004d9c <pcu_clear_queue>:
	}

	//##############################################################################
	void pcu_clear_queue(void)
	{
	    gbPcuWrite = 0;
 8004d9c:	4b03      	ldr	r3, [pc, #12]	(8004dac <pcu_clear_queue+0x10>)
 8004d9e:	f04f 0200 	mov.w	r2, #0	; 0x0
 8004da2:	801a      	strh	r2, [r3, #0]
	    gbPcuRead = 0;
 8004da4:	4b02      	ldr	r3, [pc, #8]	(8004db0 <pcu_clear_queue+0x14>)
 8004da6:	801a      	strh	r2, [r3, #0]
	}
 8004da8:	4770      	bx	lr
 8004daa:	46c0      	nop			(mov r8, r8)
 8004dac:	20000a16 	.word	0x20000a16
 8004db0:	20000a18 	.word	0x20000a18

08004db4 <pcu_get_qstate>:

	//##############################################################################
	u8 pcu_get_qstate(void)
	{
	    if (gbPcuWrite==gbPcuRead)
 8004db4:	490f      	ldr	r1, [pc, #60]	(8004df4 <pcu_get_qstate+0x40>)
 8004db6:	4810      	ldr	r0, [pc, #64]	(8004df8 <pcu_get_qstate+0x44>)
 8004db8:	880a      	ldrh	r2, [r1, #0]
 8004dba:	8803      	ldrh	r3, [r0, #0]
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d105      	bne.n	8004dcc <pcu_get_qstate+0x18>
	}

	//##############################################################################
	void pcu_clear_queue(void)
	{
	    gbPcuWrite = 0;
 8004dc0:	f04f 0300 	mov.w	r3, #0	; 0x0
 8004dc4:	800b      	strh	r3, [r1, #0]
	    gbPcuRead = 0;
 8004dc6:	8003      	strh	r3, [r0, #0]
 8004dc8:	2000      	movs	r0, #0
 8004dca:	e011      	b.n	8004df0 <pcu_get_qstate+0x3c>
	    if (gbPcuWrite==gbPcuRead)
	    {
	        pcu_clear_queue();
	        return 0;
	    }
	    else if (gbPcuRead<gbPcuWrite)
 8004dcc:	8802      	ldrh	r2, [r0, #0]
 8004dce:	880b      	ldrh	r3, [r1, #0]
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d906      	bls.n	8004de2 <pcu_get_qstate+0x2e>
	        return (u8) (gbPcuWrite-gbPcuRead);
 8004dd4:	880a      	ldrh	r2, [r1, #0]
 8004dd6:	8803      	ldrh	r3, [r0, #0]
 8004dd8:	b292      	uxth	r2, r2
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	1ad2      	subs	r2, r2, r3
 8004dde:	b2d0      	uxtb	r0, r2
 8004de0:	e006      	b.n	8004df0 <pcu_get_qstate+0x3c>
	    else
	        return (u8) (PC_UART_BUFFER_LENGTH-(gbPcuRead-gbPcuWrite));
 8004de2:	880b      	ldrh	r3, [r1, #0]
 8004de4:	8802      	ldrh	r2, [r0, #0]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	b292      	uxth	r2, r2
 8004dea:	3b01      	subs	r3, #1
 8004dec:	1a9b      	subs	r3, r3, r2
 8004dee:	b2d8      	uxtb	r0, r3
	}
 8004df0:	4770      	bx	lr
 8004df2:	46c0      	nop			(mov r8, r8)
 8004df4:	20000a16 	.word	0x20000a16
 8004df8:	20000a18 	.word	0x20000a18

08004dfc <zgb_hal_rx>:
	return numPacket;
}

//##############################################################################
u8 zgb_hal_rx(u8 *pPacket, u8 numPacket)
{
 8004dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dfe:	f04f 0c00 	mov.w	ip, #0	; 0x0
 8004e02:	460c      	mov	r4, r1
 8004e04:	b083      	sub	sp, #12
 8004e06:	4605      	mov	r5, r0
	u8 i;
	for (i=0; i<numPacket; i++)
	{
		if (gbZigRead!=gbZigWrite)
 8004e08:	490e      	ldr	r1, [pc, #56]	(8004e44 <zgb_hal_rx+0x48>)
		{
			pPacket[i] = gbpZigBuffer[gbZigRead++];
 8004e0a:	4f0f      	ldr	r7, [pc, #60]	(8004e48 <zgb_hal_rx+0x4c>)
			if (gbZigRead>(ZIGBEE_BUFFER_LENGTH-1))
			gbZigRead = 0;
 8004e0c:	2600      	movs	r6, #0
 8004e0e:	e011      	b.n	8004e34 <zgb_hal_rx+0x38>
u8 zgb_hal_rx(u8 *pPacket, u8 numPacket)
{
	u8 i;
	for (i=0; i<numPacket; i++)
	{
		if (gbZigRead!=gbZigWrite)
 8004e10:	4b0e      	ldr	r3, [pc, #56]	(8004e4c <zgb_hal_rx+0x50>)
 8004e12:	780a      	ldrb	r2, [r1, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d011      	beq.n	8004e3e <zgb_hal_rx+0x42>
		{
			pPacket[i] = gbpZigBuffer[gbZigRead++];
 8004e1a:	780b      	ldrb	r3, [r1, #0]
 8004e1c:	5cfa      	ldrb	r2, [r7, r3]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	f805 200c 	strb.w	r2, [r5, ip]
 8004e26:	700b      	strb	r3, [r1, #0]
			if (gbZigRead>(ZIGBEE_BUFFER_LENGTH-1))
 8004e28:	780b      	ldrb	r3, [r1, #0]
			gbZigRead = 0;
 8004e2a:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
	for (i=0; i<numPacket; i++)
	{
		if (gbZigRead!=gbZigWrite)
		{
			pPacket[i] = gbpZigBuffer[gbZigRead++];
			if (gbZigRead>(ZIGBEE_BUFFER_LENGTH-1))
 8004e2e:	2b3f      	cmp	r3, #63
			gbZigRead = 0;
 8004e30:	bf88      	it	hi
 8004e32:	700e      	strbhi	r6, [r1, #0]
 8004e34:	fa5f f08c 	uxtb.w	r0, ip

//##############################################################################
u8 zgb_hal_rx(u8 *pPacket, u8 numPacket)
{
	u8 i;
	for (i=0; i<numPacket; i++)
 8004e38:	42a0      	cmp	r0, r4
 8004e3a:	d3e9      	bcc.n	8004e10 <zgb_hal_rx+0x14>
 8004e3c:	4620      	mov	r0, r4
		else
		return i;
	}

	return numPacket;
}
 8004e3e:	b003      	add	sp, #12
 8004e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e42:	46c0      	nop			(mov r8, r8)
 8004e44:	20000613 	.word	0x20000613
 8004e48:	20000a1a 	.word	0x20000a1a
 8004e4c:	20000612 	.word	0x20000612

08004e50 <dxl_hal_clear>:
//##############################################################################
void dxl_hal_clear(void) {
	// Clear communication buffer
	u16 i;
	for (i = 0; i < DXL_BUFFER_LENGTH; i++)
		gbpDxlBuffer[i] = 0;
 8004e50:	4807      	ldr	r0, [pc, #28]	(8004e70 <dxl_hal_clear+0x20>)
	// Disable USART1 (dynamixel)
	USART_Cmd(USART1, DISABLE);
}

//##############################################################################
void dxl_hal_clear(void) {
 8004e52:	2300      	movs	r3, #0
	// Clear communication buffer
	u16 i;
	for (i = 0; i < DXL_BUFFER_LENGTH; i++)
		gbpDxlBuffer[i] = 0;
 8004e54:	2100      	movs	r1, #0

//##############################################################################
void dxl_hal_clear(void) {
	// Clear communication buffer
	u16 i;
	for (i = 0; i < DXL_BUFFER_LENGTH; i++)
 8004e56:	f240 32ff 	movw	r2, #1023	; 0x3ff
		gbpDxlBuffer[i] = 0;
 8004e5a:	54c1      	strb	r1, [r0, r3]
 8004e5c:	3301      	adds	r3, #1

//##############################################################################
void dxl_hal_clear(void) {
	// Clear communication buffer
	u16 i;
	for (i = 0; i < DXL_BUFFER_LENGTH; i++)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d1fb      	bne.n	8004e5a <dxl_hal_clear+0xa>
		gbpDxlBuffer[i] = 0;
	gbDxlRead = 0;
 8004e62:	4b04      	ldr	r3, [pc, #16]	(8004e74 <dxl_hal_clear+0x24>)
 8004e64:	f04f 0200 	mov.w	r2, #0	; 0x0
 8004e68:	801a      	strh	r2, [r3, #0]
	gbDxlWrite = 0;
 8004e6a:	4b03      	ldr	r3, [pc, #12]	(8004e78 <dxl_hal_clear+0x28>)
 8004e6c:	801a      	strh	r2, [r3, #0]
}
 8004e6e:	4770      	bx	lr
 8004e70:	20000a5b 	.word	0x20000a5b
 8004e74:	20000610 	.word	0x20000610
 8004e78:	2000060e 	.word	0x2000060e

08004e7c <dxl_hal_rx>:

	return numPacket;
}

//##############################################################################
u8 dxl_hal_rx(u8 *pPacket, u8 numPacket) {
 8004e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e7e:	f04f 0c00 	mov.w	ip, #0	; 0x0
 8004e82:	460c      	mov	r4, r1
 8004e84:	b083      	sub	sp, #12
 8004e86:	4605      	mov	r5, r0
	u8 i;
	for (i = 0; i < numPacket; i++) {
		if (gbDxlRead != gbDxlWrite) {
 8004e88:	4910      	ldr	r1, [pc, #64]	(8004ecc <dxl_hal_rx+0x50>)
			pPacket[i] = gbpDxlBuffer[gbDxlRead++];
 8004e8a:	4f11      	ldr	r7, [pc, #68]	(8004ed0 <dxl_hal_rx+0x54>)
			if (gbDxlRead > (DXL_BUFFER_LENGTH - 1))
 8004e8c:	f240 36fe 	movw	r6, #1022	; 0x3fe
 8004e90:	e014      	b.n	8004ebc <dxl_hal_rx+0x40>

//##############################################################################
u8 dxl_hal_rx(u8 *pPacket, u8 numPacket) {
	u8 i;
	for (i = 0; i < numPacket; i++) {
		if (gbDxlRead != gbDxlWrite) {
 8004e92:	4b10      	ldr	r3, [pc, #64]	(8004ed4 <dxl_hal_rx+0x58>)
 8004e94:	880a      	ldrh	r2, [r1, #0]
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d014      	beq.n	8004ec6 <dxl_hal_rx+0x4a>
			pPacket[i] = gbpDxlBuffer[gbDxlRead++];
 8004e9c:	880b      	ldrh	r3, [r1, #0]
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	5cfa      	ldrb	r2, [r7, r3]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	f805 200c 	strb.w	r2, [r5, ip]
 8004eaa:	800b      	strh	r3, [r1, #0]
			if (gbDxlRead > (DXL_BUFFER_LENGTH - 1))
 8004eac:	880b      	ldrh	r3, [r1, #0]
				gbDxlRead = 0;
 8004eae:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
u8 dxl_hal_rx(u8 *pPacket, u8 numPacket) {
	u8 i;
	for (i = 0; i < numPacket; i++) {
		if (gbDxlRead != gbDxlWrite) {
			pPacket[i] = gbpDxlBuffer[gbDxlRead++];
			if (gbDxlRead > (DXL_BUFFER_LENGTH - 1))
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	42b3      	cmp	r3, r6
				gbDxlRead = 0;
 8004eb6:	bf84      	itt	hi
 8004eb8:	2300      	movhi	r3, #0
 8004eba:	800b      	strhhi	r3, [r1, #0]
 8004ebc:	fa5f f08c 	uxtb.w	r0, ip
}

//##############################################################################
u8 dxl_hal_rx(u8 *pPacket, u8 numPacket) {
	u8 i;
	for (i = 0; i < numPacket; i++) {
 8004ec0:	42a0      	cmp	r0, r4
 8004ec2:	d3e6      	bcc.n	8004e92 <dxl_hal_rx+0x16>
 8004ec4:	4620      	mov	r0, r4
		} else
			return i;
	}

	return numPacket;
}
 8004ec6:	b003      	add	sp, #12
 8004ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eca:	46c0      	nop			(mov r8, r8)
 8004ecc:	20000610 	.word	0x20000610
 8004ed0:	20000a5b 	.word	0x20000a5b
 8004ed4:	2000060e 	.word	0x2000060e

08004ed8 <dxl_hal_timeout>:
	start_timeout_dxl(NumRcvByte * 30);
}

//##############################################################################
u8 dxl_hal_timeout(void) {
	if (glDxlTimeoutCounter == 0)
 8004ed8:	4b03      	ldr	r3, [pc, #12]	(8004ee8 <dxl_hal_timeout+0x10>)
 8004eda:	6818      	ldr	r0, [r3, #0]
 8004edc:	f1d0 0001 	rsbs	r0, r0, #1	; 0x1
 8004ee0:	bf38      	it	cc
 8004ee2:	2000      	movcc	r0, #0
		return 1;
	else
		return 0;
}
 8004ee4:	4770      	bx	lr
 8004ee6:	46c0      	nop			(mov r8, r8)
 8004ee8:	200005f4 	.word	0x200005f4

08004eec <RxD_DXL_Interrupt>:

//##############################################################################
void RxD_DXL_Interrupt(void) {
 8004eec:	b500      	push	{lr}
	u8 temp;
	if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET) {
 8004eee:	4819      	ldr	r0, [pc, #100]	(8004f54 <RxD_DXL_Interrupt+0x68>)
	else
		return 0;
}

//##############################################################################
void RxD_DXL_Interrupt(void) {
 8004ef0:	b081      	sub	sp, #4
	u8 temp;
	if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET) {
 8004ef2:	f240 5125 	movw	r1, #1317	; 0x525
 8004ef6:	f001 fd17 	bl	8006928 <USART_GetITStatus>
 8004efa:	2800      	cmp	r0, #0
 8004efc:	d028      	beq.n	8004f50 <RxD_DXL_Interrupt+0x64>
		temp = USART_ReceiveData(USART1);
 8004efe:	4815      	ldr	r0, [pc, #84]	(8004f54 <RxD_DXL_Interrupt+0x68>)
 8004f00:	f001 fca4 	bl	800684c <USART_ReceiveData>
	} else
		return;

	if (gbDxlWrite < (DXL_BUFFER_LENGTH - 1)) {
 8004f04:	4914      	ldr	r1, [pc, #80]	(8004f58 <RxD_DXL_Interrupt+0x6c>)
 8004f06:	f240 33fd 	movw	r3, #1021	; 0x3fd
 8004f0a:	880a      	ldrh	r2, [r1, #0]

//##############################################################################
void RxD_DXL_Interrupt(void) {
	u8 temp;
	if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET) {
		temp = USART_ReceiveData(USART1);
 8004f0c:	b2c0      	uxtb	r0, r0
	} else
		return;

	if (gbDxlWrite < (DXL_BUFFER_LENGTH - 1)) {
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	4a12      	ldr	r2, [pc, #72]	(8004f5c <RxD_DXL_Interrupt+0x70>)
 8004f12:	d805      	bhi.n	8004f20 <RxD_DXL_Interrupt+0x34>
		gbpDxlBuffer[gbDxlWrite++] = temp;
 8004f14:	880b      	ldrh	r3, [r1, #0]
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	54d0      	strb	r0, [r2, r3]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	e004      	b.n	8004f2a <RxD_DXL_Interrupt+0x3e>
	} else {
		gbpDxlBuffer[gbDxlWrite] = temp;
 8004f20:	880b      	ldrh	r3, [r1, #0]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	54d0      	strb	r0, [r2, r3]
		gbDxlWrite = 0;
 8004f26:	f04f 0300 	mov.w	r3, #0	; 0x0
 8004f2a:	800b      	strh	r3, [r1, #0]
	}

	if (gbDxlRead == gbDxlWrite)
 8004f2c:	4a0a      	ldr	r2, [pc, #40]	(8004f58 <RxD_DXL_Interrupt+0x6c>)
 8004f2e:	490c      	ldr	r1, [pc, #48]	(8004f60 <RxD_DXL_Interrupt+0x74>)
 8004f30:	880b      	ldrh	r3, [r1, #0]
 8004f32:	8812      	ldrh	r2, [r2, #0]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d103      	bne.n	8004f40 <RxD_DXL_Interrupt+0x54>
		gbDxlRead++;
 8004f38:	880b      	ldrh	r3, [r1, #0]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	800b      	strh	r3, [r1, #0]
	if (gbDxlRead > (DXL_BUFFER_LENGTH - 1))
 8004f40:	4907      	ldr	r1, [pc, #28]	(8004f60 <RxD_DXL_Interrupt+0x74>)
 8004f42:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8004f46:	880a      	ldrh	r2, [r1, #0]
 8004f48:	429a      	cmp	r2, r3
		gbDxlRead = 0;
 8004f4a:	bf84      	itt	hi
 8004f4c:	2300      	movhi	r3, #0
 8004f4e:	800b      	strhhi	r3, [r1, #0]
}
 8004f50:	b001      	add	sp, #4
 8004f52:	bd00      	pop	{pc}
 8004f54:	40013800 	.word	0x40013800
 8004f58:	2000060e 	.word	0x2000060e
 8004f5c:	20000a5b 	.word	0x20000a5b
 8004f60:	20000610 	.word	0x20000610

08004f64 <dxl_hal_set_timeout>:

	return numPacket;
}

//##############################################################################
void dxl_hal_set_timeout(u8 NumRcvByte) {
 8004f64:	b500      	push	{lr}
	start_timeout_dxl(NumRcvByte * 30);
 8004f66:	ebc0 1000 	rsb	r0, r0, r0, lsl #4

	return numPacket;
}

//##############################################################################
void dxl_hal_set_timeout(u8 NumRcvByte) {
 8004f6a:	b081      	sub	sp, #4
	start_timeout_dxl(NumRcvByte * 30);
 8004f6c:	0040      	lsls	r0, r0, #1
 8004f6e:	f7ff fbd1 	bl	8004714 <start_timeout_dxl>
}
 8004f72:	b001      	add	sp, #4
 8004f74:	bd00      	pop	{pc}
 8004f76:	46c0      	nop			(mov r8, r8)

08004f78 <dxl_hal_tx>:
	gbDxlRead = 0;
	gbDxlWrite = 0;
}

//##############################################################################
u8 dxl_hal_tx(u8 *pPacket, u8 numPacket) {
 8004f78:	b570      	push	{r4, r5, r6, lr}
 8004f7a:	4606      	mov	r6, r0
 8004f7c:	460d      	mov	r5, r1
 8004f7e:	2400      	movs	r4, #0
 8004f80:	e01a      	b.n	8004fb8 <dxl_hal_tx+0x40>
	u8 i;
	for (i = 0; i < numPacket; i++) {
		// RX Disable
		GPIO_ResetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);
 8004f82:	4810      	ldr	r0, [pc, #64]	(8004fc4 <dxl_hal_tx+0x4c>)
 8004f84:	2120      	movs	r1, #32
 8004f86:	f000 fe8f 	bl	8005ca8 <GPIO_ResetBits>
		// TX Enable
		GPIO_SetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);
 8004f8a:	480e      	ldr	r0, [pc, #56]	(8004fc4 <dxl_hal_tx+0x4c>)
 8004f8c:	2110      	movs	r1, #16
 8004f8e:	f000 fe89 	bl	8005ca4 <GPIO_SetBits>

		USART_SendData(USART1, pPacket[i]);
 8004f92:	5d31      	ldrb	r1, [r6, r4]
 8004f94:	480c      	ldr	r0, [pc, #48]	(8004fc8 <dxl_hal_tx+0x50>)
 8004f96:	f001 fc55 	bl	8006844 <USART_SendData>
		while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
 8004f9a:	480b      	ldr	r0, [pc, #44]	(8004fc8 <dxl_hal_tx+0x50>)
 8004f9c:	2140      	movs	r1, #64
 8004f9e:	f001 fcb7 	bl	8006910 <USART_GetFlagStatus>
 8004fa2:	2800      	cmp	r0, #0
 8004fa4:	d0f9      	beq.n	8004f9a <dxl_hal_tx+0x22>
			;

		// TX Disable
		GPIO_ResetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);
 8004fa6:	4807      	ldr	r0, [pc, #28]	(8004fc4 <dxl_hal_tx+0x4c>)
 8004fa8:	2110      	movs	r1, #16
 8004faa:	f000 fe7d 	bl	8005ca8 <GPIO_ResetBits>
		// RX Enable
		GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);
 8004fae:	4805      	ldr	r0, [pc, #20]	(8004fc4 <dxl_hal_tx+0x4c>)
 8004fb0:	2120      	movs	r1, #32
 8004fb2:	f000 fe77 	bl	8005ca4 <GPIO_SetBits>
 8004fb6:	3401      	adds	r4, #1
}

//##############################################################################
u8 dxl_hal_tx(u8 *pPacket, u8 numPacket) {
	u8 i;
	for (i = 0; i < numPacket; i++) {
 8004fb8:	b2e3      	uxtb	r3, r4
 8004fba:	42ab      	cmp	r3, r5
 8004fbc:	d3e1      	bcc.n	8004f82 <dxl_hal_tx+0xa>
		// RX Enable
		GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);
	}

	return numPacket;
}
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	bd70      	pop	{r4, r5, r6, pc}
 8004fc2:	46c0      	nop			(mov r8, r8)
 8004fc4:	40010c00 	.word	0x40010c00
 8004fc8:	40013800 	.word	0x40013800

08004fcc <dxl_hal_close>:

	return 1;
}

//##############################################################################
void dxl_hal_close(void) {
 8004fcc:	b500      	push	{lr}
	// Disable USART1 (dynamixel)
	USART_Cmd(USART1, DISABLE);
 8004fce:	4803      	ldr	r0, [pc, #12]	(8004fdc <dxl_hal_close+0x10>)

	return 1;
}

//##############################################################################
void dxl_hal_close(void) {
 8004fd0:	b081      	sub	sp, #4
	// Disable USART1 (dynamixel)
	USART_Cmd(USART1, DISABLE);
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	f001 fbbc 	bl	8006750 <USART_Cmd>
}
 8004fd8:	b001      	add	sp, #4
 8004fda:	bd00      	pop	{pc}
 8004fdc:	40013800 	.word	0x40013800

08004fe0 <zgb_hal_close>:
	return 1;
}

//##############################################################################
void zgb_hal_close(void)
{
 8004fe0:	b500      	push	{lr}
	// Disable UART5 (ZigBee)
	USART_Cmd(UART5, DISABLE);
 8004fe2:	2100      	movs	r1, #0
	return 1;
}

//##############################################################################
void zgb_hal_close(void)
{
 8004fe4:	b081      	sub	sp, #4
	// Disable UART5 (ZigBee)
	USART_Cmd(UART5, DISABLE);
 8004fe6:	4805      	ldr	r0, [pc, #20]	(8004ffc <zgb_hal_close+0x1c>)
 8004fe8:	f001 fbb2 	bl	8006750 <USART_Cmd>
	// Activate Reset mode of ZIG-110 module
//    GPIO_SetBits(PORT_ZIGBEE_RESET, PIN_ZIGBEE_RESET);    // original
	GPIO_ResetBits(PORT_ZIGBEE_RESET, PIN_ZIGBEE_RESET);// correct?
 8004fec:	4804      	ldr	r0, [pc, #16]	(8005000 <zgb_hal_close+0x20>)
 8004fee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ff2:	f000 fe59 	bl	8005ca8 <GPIO_ResetBits>
}
 8004ff6:	b001      	add	sp, #4
 8004ff8:	bd00      	pop	{pc}
 8004ffa:	46c0      	nop			(mov r8, r8)
 8004ffc:	40005000 	.word	0x40005000
 8005000:	40010800 	.word	0x40010800

08005004 <pcu_hal_close>:
	    return 1;
	}

	//##############################################################################
	void pcu_hal_close(void)
	{
 8005004:	b500      	push	{lr}
	    // Disable USART3 (PC UART)
	    USART_Cmd(USART3, DISABLE);
 8005006:	4803      	ldr	r0, [pc, #12]	(8005014 <pcu_hal_close+0x10>)
	    return 1;
	}

	//##############################################################################
	void pcu_hal_close(void)
	{
 8005008:	b081      	sub	sp, #4
	    // Disable USART3 (PC UART)
	    USART_Cmd(USART3, DISABLE);
 800500a:	2100      	movs	r1, #0
 800500c:	f001 fba0 	bl	8006750 <USART_Cmd>
	}
 8005010:	b001      	add	sp, #4
 8005012:	bd00      	pop	{pc}
 8005014:	40004800 	.word	0x40004800

08005018 <dxl_hal_open>:

#endif

#ifdef USING_DYNAMIXEL
//##############################################################################
u8 dxl_hal_open(u32 baudrate) {
 8005018:	b530      	push	{r4, r5, lr}
 800501a:	b085      	sub	sp, #20
 800501c:	4604      	mov	r4, r0
	USART_InitTypeDef USART_InitStructure;

	USART_StructInit(&USART_InitStructure);
 800501e:	4668      	mov	r0, sp
 8005020:	f001 fb6a 	bl	80066f8 <USART_StructInit>

	USART_InitStructure.USART_BaudRate = baudrate;
 8005024:	9400      	str	r4, [sp, #0]
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl =
	USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

	USART_DeInit(USART1);
 8005026:	4c13      	ldr	r4, [pc, #76]	(8005074 <dxl_hal_open+0x5c>)
	USART_InitTypeDef USART_InitStructure;

	USART_StructInit(&USART_InitStructure);

	USART_InitStructure.USART_BaudRate = baudrate;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8005028:	f04f 0300 	mov.w	r3, #0	; 0x0
 800502c:	f8ad 3004 	strh.w	r3, [sp, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8005030:	f8ad 3006 	strh.w	r3, [sp, #6]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8005034:	f8ad 3008 	strh.w	r3, [sp, #8]
	USART_InitStructure.USART_HardwareFlowControl =
 8005038:	f8ad 300c 	strh.w	r3, [sp, #12]
	USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

	USART_DeInit(USART1);
 800503c:	4620      	mov	r0, r4
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl =
	USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800503e:	f04f 030c 	mov.w	r3, #12	; 0xc
 8005042:	f8ad 300a 	strh.w	r3, [sp, #10]

	USART_DeInit(USART1);
 8005046:	f001 fceb 	bl	8006a20 <USART_DeInit>
	mDelay(10);
 800504a:	200a      	movs	r0, #10
 800504c:	f7ff fb42 	bl	80046d4 <mDelay>
	// Configure USART1 (dynamixel)
	USART_Init(USART1, &USART_InitStructure);
 8005050:	4620      	mov	r0, r4
 8005052:	4669      	mov	r1, sp
 8005054:	f001 fc96 	bl	8006984 <USART_Init>

	// Enable USART1 (dynamixel) Receive interrupt
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8005058:	4620      	mov	r0, r4
 800505a:	2201      	movs	r2, #1
 800505c:	f240 5125 	movw	r1, #1317	; 0x525
 8005060:	f001 fb84 	bl	800676c <USART_ITConfig>

	// Enable USART1 (dynamixel)
	USART_Cmd(USART1, ENABLE);
 8005064:	4620      	mov	r0, r4
 8005066:	2101      	movs	r1, #1
 8005068:	f001 fb72 	bl	8006750 <USART_Cmd>
#ifdef USING_DYNAMIXEL
//##############################################################################
u8 dxl_hal_open(u32 baudrate) {
	USART_InitTypeDef USART_InitStructure;

	USART_StructInit(&USART_InitStructure);
 800506c:	466d      	mov	r5, sp

	// Enable USART1 (dynamixel)
	USART_Cmd(USART1, ENABLE);

	return 1;
}
 800506e:	2001      	movs	r0, #1
 8005070:	b005      	add	sp, #20
 8005072:	bd30      	pop	{r4, r5, pc}
 8005074:	40013800 	.word	0x40013800

08005078 <zgb_hal_open>:
#endif

#ifdef USING_ZIGBEE
//##############################################################################
u8 zgb_hal_open(u32 baudrate)
{
 8005078:	b530      	push	{r4, r5, lr}
 800507a:	b085      	sub	sp, #20
 800507c:	4604      	mov	r4, r0
	USART_InitTypeDef USART_InitStructure;

	USART_StructInit(&USART_InitStructure);
 800507e:	4668      	mov	r0, sp
 8005080:	f001 fb3a 	bl	80066f8 <USART_StructInit>

	USART_InitStructure.USART_BaudRate = baudrate;
 8005084:	9400      	str	r4, [sp, #0]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

	USART_DeInit(UART5);
 8005086:	4c16      	ldr	r4, [pc, #88]	(80050e0 <zgb_hal_open+0x68>)
	USART_InitTypeDef USART_InitStructure;

	USART_StructInit(&USART_InitStructure);

	USART_InitStructure.USART_BaudRate = baudrate;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8005088:	f04f 0300 	mov.w	r3, #0	; 0x0
 800508c:	f8ad 3004 	strh.w	r3, [sp, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8005090:	f8ad 3006 	strh.w	r3, [sp, #6]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8005094:	f8ad 3008 	strh.w	r3, [sp, #8]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8005098:	f8ad 300c 	strh.w	r3, [sp, #12]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

	USART_DeInit(UART5);
 800509c:	4620      	mov	r0, r4
	USART_InitStructure.USART_BaudRate = baudrate;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800509e:	f04f 030c 	mov.w	r3, #12	; 0xc
 80050a2:	f8ad 300a 	strh.w	r3, [sp, #10]

	USART_DeInit(UART5);
 80050a6:	f001 fcbb 	bl	8006a20 <USART_DeInit>
	mDelay(10);
 80050aa:	200a      	movs	r0, #10
 80050ac:	f7ff fb12 	bl	80046d4 <mDelay>
	// Configure UART5 (ZigBee)
	USART_Init(UART5, &USART_InitStructure);
 80050b0:	4620      	mov	r0, r4
 80050b2:	4669      	mov	r1, sp
 80050b4:	f001 fc66 	bl	8006984 <USART_Init>

	// Enable UART5 (ZigBee) Receive interrupt
	USART_ITConfig(UART5, USART_IT_RXNE, ENABLE);
 80050b8:	2201      	movs	r2, #1
 80050ba:	4620      	mov	r0, r4
 80050bc:	f240 5125 	movw	r1, #1317	; 0x525
 80050c0:	f001 fb54 	bl	800676c <USART_ITConfig>

	// Enable UART5 (ZigBee)
	USART_Cmd(UART5, ENABLE);
 80050c4:	4620      	mov	r0, r4
 80050c6:	2101      	movs	r1, #1
 80050c8:	f001 fb42 	bl	8006750 <USART_Cmd>

	// De-activate Reset mode of ZIG-110 module
	//GPIO_SetBits(PORT_ZIGBEE_RESET, PIN_ZIGBEE_RESET);
	GPIO_ResetBits(PORT_ZIGBEE_RESET, PIN_ZIGBEE_RESET);
 80050cc:	4805      	ldr	r0, [pc, #20]	(80050e4 <zgb_hal_open+0x6c>)
 80050ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80050d2:	f000 fde9 	bl	8005ca8 <GPIO_ResetBits>
//##############################################################################
u8 zgb_hal_open(u32 baudrate)
{
	USART_InitTypeDef USART_InitStructure;

	USART_StructInit(&USART_InitStructure);
 80050d6:	466d      	mov	r5, sp
	// De-activate Reset mode of ZIG-110 module
	//GPIO_SetBits(PORT_ZIGBEE_RESET, PIN_ZIGBEE_RESET);
	GPIO_ResetBits(PORT_ZIGBEE_RESET, PIN_ZIGBEE_RESET);

	return 1;
}
 80050d8:	2001      	movs	r0, #1
 80050da:	b005      	add	sp, #20
 80050dc:	bd30      	pop	{r4, r5, pc}
 80050de:	46c0      	nop			(mov r8, r8)
 80050e0:	40005000 	.word	0x40005000
 80050e4:	40010800 	.word	0x40010800

080050e8 <pcu_hal_open>:
#endif


#ifdef USING_PC_UART
	u8 pcu_hal_open(u32 baudrate)
	{
 80050e8:	b530      	push	{r4, r5, lr}
 80050ea:	b085      	sub	sp, #20
 80050ec:	4604      	mov	r4, r0
	    USART_InitTypeDef USART_InitStructure;

	    USART_StructInit(&USART_InitStructure);
 80050ee:	4668      	mov	r0, sp
 80050f0:	f001 fb02 	bl	80066f8 <USART_StructInit>

	    USART_InitStructure.USART_BaudRate = baudrate;
 80050f4:	9400      	str	r4, [sp, #0]
	    USART_InitStructure.USART_StopBits = USART_StopBits_1;
	    USART_InitStructure.USART_Parity = USART_Parity_No ;
	    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

	    USART_DeInit(USART3);
 80050f6:	4c13      	ldr	r4, [pc, #76]	(8005144 <pcu_hal_open+0x5c>)
	    USART_InitTypeDef USART_InitStructure;

	    USART_StructInit(&USART_InitStructure);

	    USART_InitStructure.USART_BaudRate = baudrate;
	    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80050f8:	f04f 0300 	mov.w	r3, #0	; 0x0
 80050fc:	f8ad 3004 	strh.w	r3, [sp, #4]
	    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8005100:	f8ad 3006 	strh.w	r3, [sp, #6]
	    USART_InitStructure.USART_Parity = USART_Parity_No ;
 8005104:	f8ad 3008 	strh.w	r3, [sp, #8]
	    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8005108:	f8ad 300c 	strh.w	r3, [sp, #12]
	    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

	    USART_DeInit(USART3);
 800510c:	4620      	mov	r0, r4
	    USART_InitStructure.USART_BaudRate = baudrate;
	    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	    USART_InitStructure.USART_StopBits = USART_StopBits_1;
	    USART_InitStructure.USART_Parity = USART_Parity_No ;
	    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800510e:	f04f 030c 	mov.w	r3, #12	; 0xc
 8005112:	f8ad 300a 	strh.w	r3, [sp, #10]

	    USART_DeInit(USART3);
 8005116:	f001 fc83 	bl	8006a20 <USART_DeInit>
	    mDelay(10);
 800511a:	200a      	movs	r0, #10
 800511c:	f7ff fada 	bl	80046d4 <mDelay>
	    // Configure USART3 (PC_UART)
	    USART_Init(USART3, &USART_InitStructure);
 8005120:	4620      	mov	r0, r4
 8005122:	4669      	mov	r1, sp
 8005124:	f001 fc2e 	bl	8006984 <USART_Init>

	    // Enable USART3 (PC_UART) Receive interrupt
	    USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
 8005128:	4620      	mov	r0, r4
 800512a:	2201      	movs	r2, #1
 800512c:	f240 5125 	movw	r1, #1317	; 0x525
 8005130:	f001 fb1c 	bl	800676c <USART_ITConfig>

	    // Enable USART3 (PC_UART)
	    USART_Cmd(USART3, ENABLE);
 8005134:	4620      	mov	r0, r4
 8005136:	2101      	movs	r1, #1
 8005138:	f001 fb0a 	bl	8006750 <USART_Cmd>
#ifdef USING_PC_UART
	u8 pcu_hal_open(u32 baudrate)
	{
	    USART_InitTypeDef USART_InitStructure;

	    USART_StructInit(&USART_InitStructure);
 800513c:	466d      	mov	r5, sp
	    USART_Cmd(USART3, ENABLE);

	//    PC_UART_Device = fdevopen( std_putchar, std_getchar );

	    return 1;
	}
 800513e:	2001      	movs	r0, #1
 8005140:	b005      	add	sp, #20
 8005142:	bd30      	pop	{r4, r5, pc}
 8005144:	40004800 	.word	0x40004800

08005148 <RxD_ZIG_Interrupt>:
	return numPacket;
}

//##############################################################################
void RxD_ZIG_Interrupt(void)
{
 8005148:	b510      	push	{r4, lr}
	u8 temp;
	if (USART_GetITStatus(UART5, USART_IT_RXNE)!=RESET)
 800514a:	481e      	ldr	r0, [pc, #120]	(80051c4 <RxD_ZIG_Interrupt+0x7c>)
 800514c:	f240 5125 	movw	r1, #1317	; 0x525
 8005150:	f001 fbea 	bl	8006928 <USART_GetITStatus>
 8005154:	2800      	cmp	r0, #0
 8005156:	d034      	beq.n	80051c2 <RxD_ZIG_Interrupt+0x7a>
	{
		temp = USART_ReceiveData(UART5);
 8005158:	481a      	ldr	r0, [pc, #104]	(80051c4 <RxD_ZIG_Interrupt+0x7c>)
 800515a:	f001 fb77 	bl	800684c <USART_ReceiveData>
 800515e:	b2c4      	uxtb	r4, r0
		if (temp=='#'){
 8005160:	2c23      	cmp	r4, #35
 8005162:	4a19      	ldr	r2, [pc, #100]	(80051c8 <RxD_ZIG_Interrupt+0x80>)
 8005164:	d103      	bne.n	800516e <RxD_ZIG_Interrupt+0x26>
		ReBootToBootLoader++;
 8005166:	7813      	ldrb	r3, [r2, #0]
 8005168:	3301      	adds	r3, #1
 800516a:	b2db      	uxtb	r3, r3
 800516c:	e000      	b.n	8005170 <RxD_ZIG_Interrupt+0x28>

		}
		else
		ReBootToBootLoader=0;
 800516e:	2300      	movs	r3, #0
 8005170:	7013      	strb	r3, [r2, #0]

		if (ReBootToBootLoader>15)
 8005172:	4b15      	ldr	r3, [pc, #84]	(80051c8 <RxD_ZIG_Interrupt+0x80>)
		}
	}
	else
	return;

	SetLED(RXD, 1);
 8005174:	2101      	movs	r1, #1
 8005176:	2005      	movs	r0, #5

		}
		else
		ReBootToBootLoader=0;

		if (ReBootToBootLoader>15)
 8005178:	781b      	ldrb	r3, [r3, #0]
		}
	}
	else
	return;

	SetLED(RXD, 1);
 800517a:	f7ff fa4f 	bl	800461c <SetLED>

	if (gbZigWrite<(ZIGBEE_BUFFER_LENGTH-1))
 800517e:	4a13      	ldr	r2, [pc, #76]	(80051cc <RxD_ZIG_Interrupt+0x84>)
 8005180:	4913      	ldr	r1, [pc, #76]	(80051d0 <RxD_ZIG_Interrupt+0x88>)
 8005182:	7813      	ldrb	r3, [r2, #0]
 8005184:	2b3e      	cmp	r3, #62
 8005186:	d804      	bhi.n	8005192 <RxD_ZIG_Interrupt+0x4a>
	{
		gbpZigBuffer[gbZigWrite++] = temp;
 8005188:	7813      	ldrb	r3, [r2, #0]
 800518a:	54cc      	strb	r4, [r1, r3]
 800518c:	3301      	adds	r3, #1
 800518e:	b2db      	uxtb	r3, r3
 8005190:	e002      	b.n	8005198 <RxD_ZIG_Interrupt+0x50>
	}
	else
	{
		gbpZigBuffer[gbZigWrite] = temp;
 8005192:	7813      	ldrb	r3, [r2, #0]
 8005194:	54cc      	strb	r4, [r1, r3]
		gbZigWrite = 0;
 8005196:	2300      	movs	r3, #0
 8005198:	7013      	strb	r3, [r2, #0]
	}

	if (gbZigRead==gbZigWrite)
 800519a:	490e      	ldr	r1, [pc, #56]	(80051d4 <RxD_ZIG_Interrupt+0x8c>)
 800519c:	4a0b      	ldr	r2, [pc, #44]	(80051cc <RxD_ZIG_Interrupt+0x84>)
 800519e:	780b      	ldrb	r3, [r1, #0]
 80051a0:	7812      	ldrb	r2, [r2, #0]
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d103      	bne.n	80051ae <RxD_ZIG_Interrupt+0x66>
	gbZigRead++;
 80051a6:	780b      	ldrb	r3, [r1, #0]
 80051a8:	3301      	adds	r3, #1
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	700b      	strb	r3, [r1, #0]
	if (gbZigRead>(ZIGBEE_BUFFER_LENGTH-1))
 80051ae:	4a09      	ldr	r2, [pc, #36]	(80051d4 <RxD_ZIG_Interrupt+0x8c>)
 80051b0:	7813      	ldrb	r3, [r2, #0]
 80051b2:	2b3f      	cmp	r3, #63
 80051b4:	d901      	bls.n	80051ba <RxD_ZIG_Interrupt+0x72>
	gbZigRead=0;
 80051b6:	2300      	movs	r3, #0
 80051b8:	7013      	strb	r3, [r2, #0]

	SetLED(RXD, 0);
 80051ba:	2005      	movs	r0, #5
 80051bc:	2100      	movs	r1, #0
 80051be:	f7ff fa2d 	bl	800461c <SetLED>
}
 80051c2:	bd10      	pop	{r4, pc}
 80051c4:	40005000 	.word	0x40005000
 80051c8:	20000a14 	.word	0x20000a14
 80051cc:	20000612 	.word	0x20000612
 80051d0:	20000a1a 	.word	0x20000a1a
 80051d4:	20000613 	.word	0x20000613

080051d8 <zgb_hal_tx>:
	GPIO_ResetBits(PORT_ZIGBEE_RESET, PIN_ZIGBEE_RESET);// correct?
}

//##############################################################################
u8 zgb_hal_tx(u8 *pPacket, u8 numPacket)
{
 80051d8:	b570      	push	{r4, r5, r6, lr}
 80051da:	4606      	mov	r6, r0
 80051dc:	460d      	mov	r5, r1
 80051de:	2400      	movs	r4, #0
 80051e0:	e012      	b.n	8005208 <zgb_hal_tx+0x30>
	u8 i;
	for (i=0; i<numPacket; i++)
	{
		SetLED(TXD, 1);
 80051e2:	2004      	movs	r0, #4
 80051e4:	2101      	movs	r1, #1
 80051e6:	f7ff fa19 	bl	800461c <SetLED>

		USART_SendData(UART5,pPacket[i]);
 80051ea:	5d31      	ldrb	r1, [r6, r4]
 80051ec:	4809      	ldr	r0, [pc, #36]	(8005214 <zgb_hal_tx+0x3c>)
 80051ee:	f001 fb29 	bl	8006844 <USART_SendData>
		while (USART_GetFlagStatus(UART5, USART_FLAG_TC)==RESET);
 80051f2:	4808      	ldr	r0, [pc, #32]	(8005214 <zgb_hal_tx+0x3c>)
 80051f4:	2140      	movs	r1, #64
 80051f6:	f001 fb8b 	bl	8006910 <USART_GetFlagStatus>
 80051fa:	2800      	cmp	r0, #0
 80051fc:	d0f9      	beq.n	80051f2 <zgb_hal_tx+0x1a>

		SetLED(TXD, 0);
 80051fe:	2004      	movs	r0, #4
 8005200:	2100      	movs	r1, #0
 8005202:	f7ff fa0b 	bl	800461c <SetLED>
 8005206:	3401      	adds	r4, #1

//##############################################################################
u8 zgb_hal_tx(u8 *pPacket, u8 numPacket)
{
	u8 i;
	for (i=0; i<numPacket; i++)
 8005208:	b2e3      	uxtb	r3, r4
 800520a:	42ab      	cmp	r3, r5
 800520c:	d3e9      	bcc.n	80051e2 <zgb_hal_tx+0xa>

		SetLED(TXD, 0);
	}

	return numPacket;
}
 800520e:	4628      	mov	r0, r5
 8005210:	bd70      	pop	{r4, r5, r6, pc}
 8005212:	46c0      	nop			(mov r8, r8)
 8005214:	40005000 	.word	0x40005000

08005218 <pcu_put_queue>:
	    return data;
	}

	//##############################################################################
	void pcu_put_queue(void)
	{
 8005218:	b510      	push	{r4, lr}
	    u8 temp;
	    if (USART_GetITStatus(USART3, USART_IT_RXNE)!=RESET)
 800521a:	4822      	ldr	r0, [pc, #136]	(80052a4 <pcu_put_queue+0x8c>)
 800521c:	f240 5125 	movw	r1, #1317	; 0x525
 8005220:	f001 fb82 	bl	8006928 <USART_GetITStatus>
 8005224:	2800      	cmp	r0, #0
 8005226:	d03b      	beq.n	80052a0 <pcu_put_queue+0x88>
	    {
	        temp = USART_ReceiveData(USART3);
 8005228:	481e      	ldr	r0, [pc, #120]	(80052a4 <pcu_put_queue+0x8c>)
 800522a:	f001 fb0f 	bl	800684c <USART_ReceiveData>
 800522e:	b2c4      	uxtb	r4, r0
	        if (temp=='#')
 8005230:	2c23      	cmp	r4, #35
 8005232:	4a1d      	ldr	r2, [pc, #116]	(80052a8 <pcu_put_queue+0x90>)
 8005234:	d103      	bne.n	800523e <pcu_put_queue+0x26>
	            ReBootToBootLoader++;
 8005236:	7813      	ldrb	r3, [r2, #0]
 8005238:	3301      	adds	r3, #1
 800523a:	b2db      	uxtb	r3, r3
 800523c:	e000      	b.n	8005240 <pcu_put_queue+0x28>
	        else
	            ReBootToBootLoader=0;
 800523e:	2300      	movs	r3, #0
 8005240:	7013      	strb	r3, [r2, #0]

	        if (ReBootToBootLoader>15)
 8005242:	4b19      	ldr	r3, [pc, #100]	(80052a8 <pcu_put_queue+0x90>)
	        }
	    }
	    else
	        return;

	    SetLED(RXD, 1);
 8005244:	2101      	movs	r1, #1
 8005246:	2005      	movs	r0, #5
	        if (temp=='#')
	            ReBootToBootLoader++;
	        else
	            ReBootToBootLoader=0;

	        if (ReBootToBootLoader>15)
 8005248:	781b      	ldrb	r3, [r3, #0]
	        }
	    }
	    else
	        return;

	    SetLED(RXD, 1);
 800524a:	f7ff f9e7 	bl	800461c <SetLED>

	    if (gbPcuWrite<(PC_UART_BUFFER_LENGTH-1))
 800524e:	4917      	ldr	r1, [pc, #92]	(80052ac <pcu_put_queue+0x94>)
 8005250:	f240 33fd 	movw	r3, #1021	; 0x3fd
 8005254:	880a      	ldrh	r2, [r1, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	4a15      	ldr	r2, [pc, #84]	(80052b0 <pcu_put_queue+0x98>)
 800525a:	d805      	bhi.n	8005268 <pcu_put_queue+0x50>
	    {
	        gbpPcuBuffer[gbPcuWrite++] = temp;
 800525c:	880b      	ldrh	r3, [r1, #0]
 800525e:	b29b      	uxth	r3, r3
 8005260:	54d4      	strb	r4, [r2, r3]
 8005262:	3301      	adds	r3, #1
 8005264:	b29b      	uxth	r3, r3
 8005266:	e004      	b.n	8005272 <pcu_put_queue+0x5a>
	    }
	    else
	    {
	        gbpPcuBuffer[gbPcuWrite] = temp;
 8005268:	880b      	ldrh	r3, [r1, #0]
 800526a:	b29b      	uxth	r3, r3
 800526c:	54d4      	strb	r4, [r2, r3]
	        gbPcuWrite = 0;
 800526e:	f04f 0300 	mov.w	r3, #0	; 0x0
 8005272:	800b      	strh	r3, [r1, #0]
	    }

	    if (gbPcuRead==gbPcuWrite)
 8005274:	4a0d      	ldr	r2, [pc, #52]	(80052ac <pcu_put_queue+0x94>)
 8005276:	490f      	ldr	r1, [pc, #60]	(80052b4 <pcu_put_queue+0x9c>)
 8005278:	880b      	ldrh	r3, [r1, #0]
 800527a:	8812      	ldrh	r2, [r2, #0]
 800527c:	429a      	cmp	r2, r3
 800527e:	d103      	bne.n	8005288 <pcu_put_queue+0x70>
	        gbPcuRead++;
 8005280:	880b      	ldrh	r3, [r1, #0]
 8005282:	3301      	adds	r3, #1
 8005284:	b29b      	uxth	r3, r3
 8005286:	800b      	strh	r3, [r1, #0]
	    if (gbPcuRead>(PC_UART_BUFFER_LENGTH-1))
 8005288:	490a      	ldr	r1, [pc, #40]	(80052b4 <pcu_put_queue+0x9c>)
 800528a:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800528e:	880a      	ldrh	r2, [r1, #0]
 8005290:	429a      	cmp	r2, r3
	        gbPcuRead=0;
 8005292:	bf84      	itt	hi
 8005294:	2300      	movhi	r3, #0
 8005296:	800b      	strhhi	r3, [r1, #0]

	    SetLED(RXD, 0);
 8005298:	2005      	movs	r0, #5
 800529a:	2100      	movs	r1, #0
 800529c:	f7ff f9be 	bl	800461c <SetLED>
	}
 80052a0:	bd10      	pop	{r4, pc}
 80052a2:	46c0      	nop			(mov r8, r8)
 80052a4:	40004800 	.word	0x40004800
 80052a8:	20000a14 	.word	0x20000a14
 80052ac:	20000a16 	.word	0x20000a16
 80052b0:	20000614 	.word	0x20000614
 80052b4:	20000a18 	.word	0x20000a18

080052b8 <RxD_PCU_Interrupt>:
	        return (u8) (PC_UART_BUFFER_LENGTH-(gbPcuRead-gbPcuWrite));
	}

	//##############################################################################
	void RxD_PCU_Interrupt(void)
	{
 80052b8:	b500      	push	{lr}
 80052ba:	b081      	sub	sp, #4
	    pcu_put_queue();
 80052bc:	f7ff ffac 	bl	8005218 <pcu_put_queue>
	}
 80052c0:	b001      	add	sp, #4
 80052c2:	bd00      	pop	{pc}

080052c4 <pcu_put_byte>:
	        return 0;
	}

	//##############################################################################
	void pcu_put_byte(u8 bTxdData)
	{
 80052c4:	b510      	push	{r4, lr}
 80052c6:	4604      	mov	r4, r0
	    SetLED(TXD, 1);
 80052c8:	2101      	movs	r1, #1
 80052ca:	2004      	movs	r0, #4

	    USART_SendData(USART3,bTxdData);
 80052cc:	b2a4      	uxth	r4, r4
	}

	//##############################################################################
	void pcu_put_byte(u8 bTxdData)
	{
	    SetLED(TXD, 1);
 80052ce:	f7ff f9a5 	bl	800461c <SetLED>

	    USART_SendData(USART3,bTxdData);
 80052d2:	4807      	ldr	r0, [pc, #28]	(80052f0 <pcu_put_byte+0x2c>)
 80052d4:	4621      	mov	r1, r4
 80052d6:	f001 fab5 	bl	8006844 <USART_SendData>
	    while (USART_GetFlagStatus(USART3, USART_FLAG_TC)==RESET);
 80052da:	4805      	ldr	r0, [pc, #20]	(80052f0 <pcu_put_byte+0x2c>)
 80052dc:	2140      	movs	r1, #64
 80052de:	f001 fb17 	bl	8006910 <USART_GetFlagStatus>
 80052e2:	2800      	cmp	r0, #0
 80052e4:	d0f9      	beq.n	80052da <pcu_put_byte+0x16>

	    SetLED(TXD, 0);
 80052e6:	2004      	movs	r0, #4
 80052e8:	2100      	movs	r1, #0
 80052ea:	f7ff f997 	bl	800461c <SetLED>
	}
 80052ee:	bd10      	pop	{r4, pc}
 80052f0:	40004800 	.word	0x40004800

080052f4 <pcu_hal_set_timeout>:
	    USART_Cmd(USART3, DISABLE);
	}

	//##############################################################################
	void pcu_hal_set_timeout(u8 NumRcvByte)
	{
 80052f4:	b500      	push	{lr}
 80052f6:	4603      	mov	r3, r0
	    // 200us; ~180 us to transmit one byte at 57600 bps
	    start_timeout_pcu(NumRcvByte*200);
 80052f8:	20c8      	movs	r0, #200
	    USART_Cmd(USART3, DISABLE);
	}

	//##############################################################################
	void pcu_hal_set_timeout(u8 NumRcvByte)
	{
 80052fa:	b081      	sub	sp, #4
	    // 200us; ~180 us to transmit one byte at 57600 bps
	    start_timeout_pcu(NumRcvByte*200);
 80052fc:	fb00 f003 	mul.w	r0, r0, r3
 8005300:	f7ff fa24 	bl	800474c <start_timeout_pcu>
	}
 8005304:	b001      	add	sp, #4
 8005306:	bd00      	pop	{pc}

08005308 <ADC_Init>:
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8005308:	6843      	ldr	r3, [r0, #4]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (u32)(ADC_InitStruct->ADC_Mode | ((u32)ADC_InitStruct->ADC_ScanConvMode << 8));
 800530a:	680a      	ldr	r2, [r1, #0]
 800530c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8005310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005314:	4313      	orrs	r3, r2
 8005316:	790a      	ldrb	r2, [r1, #4]
 8005318:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 800531c:	6043      	str	r3, [r0, #4]
  tmpreg1 &= CR2_CLEAR_Mask;
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (u32)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 800531e:	68cb      	ldr	r3, [r1, #12]
 8005320:	688a      	ldr	r2, [r1, #8]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8005322:	f8d0 c008 	ldr.w	ip, [r0, #8]
  tmpreg1 &= CR2_CLEAR_Mask;
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (u32)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8005326:	431a      	orrs	r2, r3
 8005328:	4b08      	ldr	r3, [pc, #32]	(800534c <ADC_Init+0x44>)
 800532a:	ea0c 0303 	and.w	r3, ip, r3
 800532e:	431a      	orrs	r2, r3
 8005330:	794b      	ldrb	r3, [r1, #5]
 8005332:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
            ((u32)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8005336:	6082      	str	r2, [r0, #8]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (ADC_InitStruct->ADC_NbrOfChannel - 1);
  tmpreg1 |= ((u32)tmpreg2 << 20);
 8005338:	7c0b      	ldrb	r3, [r1, #16]
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800533a:	6ac2      	ldr	r2, [r0, #44]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (ADC_InitStruct->ADC_NbrOfChannel - 1);
  tmpreg1 |= ((u32)tmpreg2 << 20);
 800533c:	3b01      	subs	r3, #1

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
 800533e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (ADC_InitStruct->ADC_NbrOfChannel - 1);
  tmpreg1 |= ((u32)tmpreg2 << 20);
 8005342:	b2db      	uxtb	r3, r3
 8005344:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8005348:	62c2      	str	r2, [r0, #44]
}
 800534a:	4770      	bx	lr
 800534c:	fff1f7fd 	.word	0xfff1f7fd

08005350 <ADC_StructInit>:
*******************************************************************************/
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
 8005350:	2300      	movs	r3, #0
 8005352:	6003      	str	r3, [r0, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8005354:	7103      	strb	r3, [r0, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8005356:	7143      	strb	r3, [r0, #5]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8005358:	6083      	str	r3, [r0, #8]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 800535a:	60c3      	str	r3, [r0, #12]

  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
 800535c:	2301      	movs	r3, #1
 800535e:	7403      	strb	r3, [r0, #16]
}
 8005360:	4770      	bx	lr
 8005362:	46c0      	nop			(mov r8, r8)

08005364 <ADC_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005364:	b119      	cbz	r1, 800536e <ADC_Cmd+0xa>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 8005366:	6883      	ldr	r3, [r0, #8]
 8005368:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 800536c:	e002      	b.n	8005374 <ADC_Cmd+0x10>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
 800536e:	6883      	ldr	r3, [r0, #8]
 8005370:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 8005374:	6083      	str	r3, [r0, #8]
  }
}
 8005376:	4770      	bx	lr

08005378 <ADC_DMACmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005378:	b119      	cbz	r1, 8005382 <ADC_DMACmd+0xa>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
 800537a:	6883      	ldr	r3, [r0, #8]
 800537c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005380:	e002      	b.n	8005388 <ADC_DMACmd+0x10>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
 8005382:	6883      	ldr	r3, [r0, #8]
 8005384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005388:	6083      	str	r3, [r0, #8]
  }
}
 800538a:	4770      	bx	lr

0800538c <ADC_ITConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));

  /* Get the ADC IT index */
  itmask = (u8)ADC_IT;
 800538c:	b2c9      	uxtb	r1, r1

  if (NewState != DISABLE)
 800538e:	b11a      	cbz	r2, 8005398 <ADC_ITConfig+0xc>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 8005390:	6843      	ldr	r3, [r0, #4]
 8005392:	ea41 0303 	orr.w	r3, r1, r3
 8005396:	e002      	b.n	800539e <ADC_ITConfig+0x12>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(u32)itmask);
 8005398:	6843      	ldr	r3, [r0, #4]
 800539a:	ea23 0301 	bic.w	r3, r3, r1
 800539e:	6043      	str	r3, [r0, #4]
  }
}
 80053a0:	4770      	bx	lr
 80053a2:	46c0      	nop			(mov r8, r8)

080053a4 <ADC_ResetCalibration>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Resets the selected ADC calibartion registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
 80053a4:	6883      	ldr	r3, [r0, #8]
 80053a6:	f043 0308 	orr.w	r3, r3, #8	; 0x8
 80053aa:	6083      	str	r3, [r0, #8]
}
 80053ac:	4770      	bx	lr
 80053ae:	46c0      	nop			(mov r8, r8)

080053b0 <ADC_GetResetCalibrationStatus>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (u32)RESET)
 80053b0:	6880      	ldr	r0, [r0, #8]
 80053b2:	08c0      	lsrs	r0, r0, #3
 80053b4:	f000 0001 	and.w	r0, r0, #1	; 0x1
    bitstatus = RESET;
  }

  /* Return the RSTCAL bit status */
  return  bitstatus;
}
 80053b8:	4770      	bx	lr
 80053ba:	46c0      	nop			(mov r8, r8)

080053bc <ADC_StartCalibration>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 80053bc:	6883      	ldr	r3, [r0, #8]
 80053be:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 80053c2:	6083      	str	r3, [r0, #8]
}
 80053c4:	4770      	bx	lr
 80053c6:	46c0      	nop			(mov r8, r8)

080053c8 <ADC_GetCalibrationStatus>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (u32)RESET)
 80053c8:	6880      	ldr	r0, [r0, #8]
 80053ca:	0880      	lsrs	r0, r0, #2
 80053cc:	f000 0001 	and.w	r0, r0, #1	; 0x1
    bitstatus = RESET;
  }

  /* Return the CAL bit status */
  return  bitstatus;
}
 80053d0:	4770      	bx	lr
 80053d2:	46c0      	nop			(mov r8, r8)

080053d4 <ADC_SoftwareStartConvCmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80053d4:	b119      	cbz	r1, 80053de <ADC_SoftwareStartConvCmd+0xa>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 80053d6:	6883      	ldr	r3, [r0, #8]
 80053d8:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80053dc:	e002      	b.n	80053e4 <ADC_SoftwareStartConvCmd+0x10>
  }
  else
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 80053de:	6883      	ldr	r3, [r0, #8]
 80053e0:	f423 03a0 	bic.w	r3, r3, #5242880	; 0x500000
 80053e4:	6083      	str	r3, [r0, #8]
  }
}
 80053e6:	4770      	bx	lr

080053e8 <ADC_GetSoftwareStartConvStatus>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & CR2_SWSTART_Set) != (u32)RESET)
 80053e8:	6880      	ldr	r0, [r0, #8]
 80053ea:	0d80      	lsrs	r0, r0, #22
 80053ec:	f000 0001 	and.w	r0, r0, #1	; 0x1
    bitstatus = RESET;
  }

  /* Return the SWSTART bit status */
  return  bitstatus;
}
 80053f0:	4770      	bx	lr
 80053f2:	46c0      	nop			(mov r8, r8)

080053f4 <ADC_DiscModeChannelCountConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));

  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 80053f4:	6843      	ldr	r3, [r0, #4]
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_Reset;
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
  tmpreg1 |= tmpreg2 << 13;
 80053f6:	3901      	subs	r1, #1
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));

  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_Reset;
 80053f8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
  tmpreg1 |= tmpreg2 << 13;
 80053fc:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 8005400:	6043      	str	r3, [r0, #4]
}
 8005402:	4770      	bx	lr

08005404 <ADC_DiscModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005404:	b119      	cbz	r1, 800540e <ADC_DiscModeCmd+0xa>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= CR1_DISCEN_Set;
 8005406:	6843      	ldr	r3, [r0, #4]
 8005408:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800540c:	e002      	b.n	8005414 <ADC_DiscModeCmd+0x10>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= CR1_DISCEN_Reset;
 800540e:	6843      	ldr	r3, [r0, #4]
 8005410:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005414:	6043      	str	r3, [r0, #4]
  }
}
 8005416:	4770      	bx	lr

08005418 <ADC_RegularChannelConfig>:
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8005418:	2909      	cmp	r1, #9
*                       - ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
* Output         : None
* Return         : None
*******************************************************************************/
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, u8 ADC_Channel, u8 Rank, u8 ADC_SampleTime)
{
 800541a:	b530      	push	{r4, r5, lr}
 800541c:	4694      	mov	ip, r2
 800541e:	460c      	mov	r4, r1
 8005420:	461d      	mov	r5, r3
 8005422:	ea4f 0241 	mov.w	r2, r1, lsl #1
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8005426:	d90b      	bls.n	8005440 <ADC_RegularChannelConfig+0x28>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 8005428:	1912      	adds	r2, r2, r4
 800542a:	3a1e      	subs	r2, #30
    /* Clear the old discontinuous mode channel count */
    tmpreg1 &= ~tmpreg2;
 800542c:	2307      	movs	r3, #7
 800542e:	4093      	lsls	r3, r2
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_SampleTime << (3 * (ADC_Channel - 10));
    /* Set the discontinuous mode channel count */
    tmpreg1 |= tmpreg2;
 8005430:	fa15 f202 	lsls.w	r2, r5, r2

  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8005434:	68c1      	ldr	r1, [r0, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
    /* Clear the old discontinuous mode channel count */
    tmpreg1 &= ~tmpreg2;
 8005436:	ea21 0103 	bic.w	r1, r1, r3
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_SampleTime << (3 * (ADC_Channel - 10));
    /* Set the discontinuous mode channel count */
    tmpreg1 |= tmpreg2;
 800543a:	4311      	orrs	r1, r2
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 800543c:	60c1      	str	r1, [r0, #12]
 800543e:	e009      	b.n	8005454 <ADC_RegularChannelConfig+0x3c>
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 8005440:	1912      	adds	r2, r2, r4
    /* Clear the old discontinuous mode channel count */
    tmpreg1 &= ~tmpreg2;
 8005442:	2307      	movs	r3, #7
 8005444:	4093      	lsls	r3, r2
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_SampleTime << (3 * ADC_Channel);
    /* Set the discontinuous mode channel count */
    tmpreg1 |= tmpreg2;
 8005446:	fa15 f202 	lsls.w	r2, r5, r2
    ADCx->SMPR1 = tmpreg1;
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800544a:	6901      	ldr	r1, [r0, #16]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
    /* Clear the old discontinuous mode channel count */
    tmpreg1 &= ~tmpreg2;
 800544c:	ea21 0103 	bic.w	r1, r1, r3
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_SampleTime << (3 * ADC_Channel);
    /* Set the discontinuous mode channel count */
    tmpreg1 |= tmpreg2;
 8005450:	4311      	orrs	r1, r2
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8005452:	6101      	str	r1, [r0, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8005454:	f1bc 0f06 	cmp.w	ip, #6	; 0x6
 8005458:	d80c      	bhi.n	8005474 <ADC_RegularChannelConfig+0x5c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 800545a:	eb0c 028c 	add.w	r2, ip, ip, lsl #2
 800545e:	3a05      	subs	r2, #5
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8005460:	231f      	movs	r3, #31
 8005462:	4093      	lsls	r3, r2
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_Channel << (5 * (Rank - 1));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8005464:	fa14 f202 	lsls.w	r2, r4, r2
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8005468:	6b41      	ldr	r1, [r0, #52]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800546a:	ea21 0103 	bic.w	r1, r1, r3
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_Channel << (5 * (Rank - 1));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800546e:	4311      	orrs	r1, r2
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8005470:	6341      	str	r1, [r0, #52]
 8005472:	e01b      	b.n	80054ac <ADC_RegularChannelConfig+0x94>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8005474:	f1bc 0f0c 	cmp.w	ip, #12	; 0xc
 8005478:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800547c:	d80b      	bhi.n	8005496 <ADC_RegularChannelConfig+0x7e>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 800547e:	4462      	add	r2, ip
 8005480:	3a23      	subs	r2, #35
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8005482:	231f      	movs	r3, #31
 8005484:	4093      	lsls	r3, r2
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_Channel << (5 * (Rank - 7));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8005486:	fa14 f202 	lsls.w	r2, r4, r2
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 800548a:	6b01      	ldr	r1, [r0, #48]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800548c:	ea21 0103 	bic.w	r1, r1, r3
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_Channel << (5 * (Rank - 7));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8005490:	4311      	orrs	r1, r2
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8005492:	6301      	str	r1, [r0, #48]
 8005494:	e00a      	b.n	80054ac <ADC_RegularChannelConfig+0x94>
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 8005496:	4462      	add	r2, ip
 8005498:	3a41      	subs	r2, #65
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800549a:	231f      	movs	r3, #31
 800549c:	4093      	lsls	r3, r2
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_Channel << (5 * (Rank - 13));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800549e:	fa14 f202 	lsls.w	r2, r4, r2
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 80054a2:	6ac1      	ldr	r1, [r0, #44]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80054a4:	ea21 0103 	bic.w	r1, r1, r3
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_Channel << (5 * (Rank - 13));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80054a8:	4311      	orrs	r1, r2
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80054aa:	62c1      	str	r1, [r0, #44]
  }
}
 80054ac:	bd30      	pop	{r4, r5, pc}
 80054ae:	46c0      	nop			(mov r8, r8)

080054b0 <ADC_ExternalTrigConvCmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80054b0:	b119      	cbz	r1, 80054ba <ADC_ExternalTrigConvCmd+0xa>
  {
    /* Enable the selected ADC conversion on external event */
    ADCx->CR2 |= CR2_EXTTRIG_Set;
 80054b2:	6883      	ldr	r3, [r0, #8]
 80054b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054b8:	e002      	b.n	80054c0 <ADC_ExternalTrigConvCmd+0x10>
  }
  else
  {
    /* Disable the selected ADC conversion on external event */
    ADCx->CR2 &= CR2_EXTTRIG_Reset;
 80054ba:	6883      	ldr	r3, [r0, #8]
 80054bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80054c0:	6083      	str	r3, [r0, #8]
  }
}
 80054c2:	4770      	bx	lr

080054c4 <ADC_GetConversionValue>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Return the selected ADC conversion value */
  return (u16) ADCx->DR;
 80054c4:	6cc0      	ldr	r0, [r0, #76]
 80054c6:	b280      	uxth	r0, r0
}
 80054c8:	4770      	bx	lr
 80054ca:	46c0      	nop			(mov r8, r8)

080054cc <ADC_GetDualModeConversionValue>:
* Return         : The Data conversion value.
*******************************************************************************/
u32 ADC_GetDualModeConversionValue(void)
{
  /* Return the dual mode conversion value */
  return (*(vu32 *) DR_ADDRESS);
 80054cc:	4b01      	ldr	r3, [pc, #4]	(80054d4 <ADC_GetDualModeConversionValue+0x8>)
 80054ce:	6818      	ldr	r0, [r3, #0]
}
 80054d0:	4770      	bx	lr
 80054d2:	46c0      	nop			(mov r8, r8)
 80054d4:	4001244c 	.word	0x4001244c

080054d8 <ADC_AutoInjectedConvCmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80054d8:	b119      	cbz	r1, 80054e2 <ADC_AutoInjectedConvCmd+0xa>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= CR1_JAUTO_Set;
 80054da:	6843      	ldr	r3, [r0, #4]
 80054dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054e0:	e002      	b.n	80054e8 <ADC_AutoInjectedConvCmd+0x10>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= CR1_JAUTO_Reset;
 80054e2:	6843      	ldr	r3, [r0, #4]
 80054e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054e8:	6043      	str	r3, [r0, #4]
  }
}
 80054ea:	4770      	bx	lr

080054ec <ADC_InjectedDiscModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80054ec:	b119      	cbz	r1, 80054f6 <ADC_InjectedDiscModeCmd+0xa>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= CR1_JDISCEN_Set;
 80054ee:	6843      	ldr	r3, [r0, #4]
 80054f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054f4:	e002      	b.n	80054fc <ADC_InjectedDiscModeCmd+0x10>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= CR1_JDISCEN_Reset;
 80054f6:	6843      	ldr	r3, [r0, #4]
 80054f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054fc:	6043      	str	r3, [r0, #4]
  }
}
 80054fe:	4770      	bx	lr

08005500 <ADC_ExternalTrigInjectedConvConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));

  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8005500:	6883      	ldr	r3, [r0, #8]
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_Reset;
 8005502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 8005506:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8005508:	6081      	str	r1, [r0, #8]
}
 800550a:	4770      	bx	lr

0800550c <ADC_ExternalTrigInjectedConvCmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800550c:	b119      	cbz	r1, 8005516 <ADC_ExternalTrigInjectedConvCmd+0xa>
  {
    /* Enable the selected ADC external event selection for injected group */
    ADCx->CR2 |= CR2_JEXTTRIG_Set;
 800550e:	6883      	ldr	r3, [r0, #8]
 8005510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005514:	e002      	b.n	800551c <ADC_ExternalTrigInjectedConvCmd+0x10>
  }
  else
  {
    /* Disable the selected ADC external event selection for injected group */
    ADCx->CR2 &= CR2_JEXTTRIG_Reset;
 8005516:	6883      	ldr	r3, [r0, #8]
 8005518:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800551c:	6083      	str	r3, [r0, #8]
  }
}
 800551e:	4770      	bx	lr

08005520 <ADC_SoftwareStartInjectedConvCmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005520:	b119      	cbz	r1, 800552a <ADC_SoftwareStartInjectedConvCmd+0xa>
  {
    /* Enable the selected ADC conversion for injected group on external event and start the selected
       ADC injected conversion */
    ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
 8005522:	6883      	ldr	r3, [r0, #8]
 8005524:	f443 1302 	orr.w	r3, r3, #2129920	; 0x208000
 8005528:	e002      	b.n	8005530 <ADC_SoftwareStartInjectedConvCmd+0x10>
  }
  else
  {
    /* Disable the selected ADC conversion on external event for injected group and stop the selected
       ADC injected conversion */
    ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
 800552a:	6883      	ldr	r3, [r0, #8]
 800552c:	f423 1302 	bic.w	r3, r3, #2129920	; 0x208000
 8005530:	6083      	str	r3, [r0, #8]
  }
}
 8005532:	4770      	bx	lr

08005534 <ADC_GetSoftwareStartInjectedConvCmdStatus>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & CR2_JSWSTART_Set) != (u32)RESET)
 8005534:	6880      	ldr	r0, [r0, #8]
 8005536:	0d40      	lsrs	r0, r0, #21
 8005538:	f000 0001 	and.w	r0, r0, #1	; 0x1
    bitstatus = RESET;
  }

  /* Return the JSWSTART bit status */
  return  bitstatus;
}
 800553c:	4770      	bx	lr
 800553e:	46c0      	nop			(mov r8, r8)

08005540 <ADC_InjectedChannelConfig>:
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8005540:	2909      	cmp	r1, #9
*                       - ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
* Output         : None
* Return         : None
*******************************************************************************/
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, u8 ADC_Channel, u8 Rank, u8 ADC_SampleTime)
{
 8005542:	b530      	push	{r4, r5, lr}
 8005544:	468c      	mov	ip, r1
 8005546:	4615      	mov	r5, r2
 8005548:	461c      	mov	r4, r3
 800554a:	ea4f 0241 	mov.w	r2, r1, lsl #1
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800554e:	d90b      	bls.n	8005568 <ADC_InjectedChannelConfig+0x28>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
 8005550:	4462      	add	r2, ip
 8005552:	3a1e      	subs	r2, #30
    /* Clear the old discontinuous mode channel count */
    tmpreg1 &= ~tmpreg2;
 8005554:	2307      	movs	r3, #7
 8005556:	4093      	lsls	r3, r2
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_SampleTime << (3*(ADC_Channel - 10));
    /* Set the discontinuous mode channel count */
    tmpreg1 |= tmpreg2;
 8005558:	fa14 f202 	lsls.w	r2, r4, r2

  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 800555c:	68c1      	ldr	r1, [r0, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
    /* Clear the old discontinuous mode channel count */
    tmpreg1 &= ~tmpreg2;
 800555e:	ea21 0103 	bic.w	r1, r1, r3
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_SampleTime << (3*(ADC_Channel - 10));
    /* Set the discontinuous mode channel count */
    tmpreg1 |= tmpreg2;
 8005562:	4311      	orrs	r1, r2
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8005564:	60c1      	str	r1, [r0, #12]
 8005566:	e009      	b.n	800557c <ADC_InjectedChannelConfig+0x3c>
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 8005568:	4462      	add	r2, ip
    /* Clear the old discontinuous mode channel count */
    tmpreg1 &= ~tmpreg2;
 800556a:	2307      	movs	r3, #7
 800556c:	4093      	lsls	r3, r2
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_SampleTime << (3 * ADC_Channel);
    /* Set the discontinuous mode channel count */
    tmpreg1 |= tmpreg2;
 800556e:	fa14 f202 	lsls.w	r2, r4, r2
    ADCx->SMPR1 = tmpreg1;
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8005572:	6901      	ldr	r1, [r0, #16]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
    /* Clear the old discontinuous mode channel count */
    tmpreg1 &= ~tmpreg2;
 8005574:	ea21 0103 	bic.w	r1, r1, r3
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_SampleTime << (3 * ADC_Channel);
    /* Set the discontinuous mode channel count */
    tmpreg1 |= tmpreg2;
 8005578:	4311      	orrs	r1, r2
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 800557a:	6101      	str	r1, [r0, #16]
  }

  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 800557c:	6b83      	ldr	r3, [r0, #56]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_Set << (5 * (u8)((Rank + 3) - (tmpreg3 + 1)));
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 800557e:	211f      	movs	r1, #31
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_Set << (5 * (u8)((Rank + 3) - (tmpreg3 + 1)));
 8005580:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8005584:	ea6f 5212 	mvn.w	r2, r2, lsr #20
 8005588:	442a      	add	r2, r5
 800558a:	3203      	adds	r2, #3
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8005592:	4091      	lsls	r1, r2
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (u32)ADC_Channel << (5 * (u8)((Rank + 3) - (tmpreg3 + 1)));
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8005594:	fa0c f202 	lsl.w	r2, ip, r2
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_Set << (5 * (u8)((Rank + 3) - (tmpreg3 + 1)));
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8005598:	ea23 0301 	bic.w	r3, r3, r1
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (u32)ADC_Channel << (5 * (u8)((Rank + 3) - (tmpreg3 + 1)));
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 800559c:	4313      	orrs	r3, r2
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 800559e:	6383      	str	r3, [r0, #56]
}
 80055a0:	bd30      	pop	{r4, r5, pc}
 80055a2:	46c0      	nop			(mov r8, r8)

080055a4 <ADC_InjectedSequencerLengthConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 80055a4:	6b83      	ldr	r3, [r0, #56]
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= JSQR_JL_Reset;
  /* Set the injected sequnence lenght JL bits */
  tmpreg2 = Length - 1; 
  tmpreg1 |= tmpreg2 << 20;
 80055a6:	3901      	subs	r1, #1
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= JSQR_JL_Reset;
 80055a8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
  /* Set the injected sequnence lenght JL bits */
  tmpreg2 = Length - 1; 
  tmpreg1 |= tmpreg2 << 20;
 80055ac:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 80055b0:	6383      	str	r3, [r0, #56]
}
 80055b2:	4770      	bx	lr

080055b4 <ADC_SetInjectedOffset>:
*                    This parameter must be a 12bit value.
* Output         : None
* Return         : None
*******************************************************************************/
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, u8 ADC_InjectedChannel, u16 Offset)
{
 80055b4:	b082      	sub	sp, #8
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));  

  /* Set the selected injected channel data offset */
  *((vu32 *)((*(u32*)&ADCx) + ADC_InjectedChannel)) = (u32)Offset;
 80055b6:	500a      	str	r2, [r1, r0]
}
 80055b8:	b002      	add	sp, #8
 80055ba:	4770      	bx	lr

080055bc <ADC_GetInjectedConversionValue>:
*                       - ADC_InjectedChannel_4: Injected Channel4 selected
* Output         : None
* Return         : The Data conversion value.
*******************************************************************************/
u16 ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, u8 ADC_InjectedChannel)
{
 80055bc:	b082      	sub	sp, #8
 80055be:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  /* Returns the selected injected channel conversion data value */
  return (u16) (*(vu32*) (((*(u32*)&ADCx) + ADC_InjectedChannel + JDR_Offset)));
 80055c0:	3028      	adds	r0, #40
 80055c2:	5840      	ldr	r0, [r0, r1]
 80055c4:	b280      	uxth	r0, r0
}
 80055c6:	b002      	add	sp, #8
 80055c8:	4770      	bx	lr
 80055ca:	46c0      	nop			(mov r8, r8)

080055cc <ADC_AnalogWatchdogCmd>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));

  /* Get the old register value */
  tmpreg = ADCx->CR1;
 80055cc:	6843      	ldr	r3, [r0, #4]
  /* Clear AWDEN, AWDENJ and AWDSGL bits */
  tmpreg &= CR1_AWDMode_Reset;
 80055ce:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80055d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 80055d6:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 80055d8:	6041      	str	r1, [r0, #4]
}
 80055da:	4770      	bx	lr

080055dc <ADC_AnalogWatchdogThresholdsConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));

  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 80055dc:	6241      	str	r1, [r0, #36]
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 80055de:	6282      	str	r2, [r0, #40]
}
 80055e0:	4770      	bx	lr
 80055e2:	46c0      	nop			(mov r8, r8)

080055e4 <ADC_AnalogWatchdogSingleChannelConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));

  /* Get the old register value */
  tmpreg = ADCx->CR1;
 80055e4:	6843      	ldr	r3, [r0, #4]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_Reset;
 80055e6:	f023 031f 	bic.w	r3, r3, #31	; 0x1f
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 80055ea:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 80055ec:	6041      	str	r1, [r0, #4]
}
 80055ee:	4770      	bx	lr

080055f0 <ADC_TempSensorVrefintCmd>:
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80055f0:	b120      	cbz	r0, 80055fc <ADC_TempSensorVrefintCmd+0xc>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
 80055f2:	4a05      	ldr	r2, [pc, #20]	(8005608 <ADC_TempSensorVrefintCmd+0x18>)
 80055f4:	6893      	ldr	r3, [r2, #8]
 80055f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80055fa:	e003      	b.n	8005604 <ADC_TempSensorVrefintCmd+0x14>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
 80055fc:	4a02      	ldr	r2, [pc, #8]	(8005608 <ADC_TempSensorVrefintCmd+0x18>)
 80055fe:	6893      	ldr	r3, [r2, #8]
 8005600:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005604:	6093      	str	r3, [r2, #8]
  }
}
 8005606:	4770      	bx	lr
 8005608:	40012400 	.word	0x40012400

0800560c <ADC_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (u8)RESET)
 800560c:	6803      	ldr	r3, [r0, #0]
 800560e:	4219      	tst	r1, r3
 8005610:	bf0c      	ite	eq
 8005612:	2000      	moveq	r0, #0
 8005614:	2001      	movne	r0, #1
    bitstatus = RESET;
  }

  /* Return the ADC_FLAG status */
  return  bitstatus;
}
 8005616:	4770      	bx	lr

08005618 <ADC_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(u32)ADC_FLAG;
 8005618:	ea6f 0101 	mvn.w	r1, r1
 800561c:	6001      	str	r1, [r0, #0]
}
 800561e:	4770      	bx	lr

08005620 <ADC_GetITStatus>:

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & (u8)ADC_IT) ;
 8005620:	6842      	ldr	r2, [r0, #4]

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (u32)RESET) && enablestatus)
 8005622:	6803      	ldr	r3, [r0, #0]
 8005624:	ea13 2311 	ands.w	r3, r3, r1, lsr #8
 8005628:	d101      	bne.n	800562e <ADC_GetITStatus+0xe>
 800562a:	2000      	movs	r0, #0
 800562c:	e004      	b.n	8005638 <ADC_GetITStatus+0x18>
 800562e:	b2cb      	uxtb	r3, r1
 8005630:	4213      	tst	r3, r2
 8005632:	bf0c      	ite	eq
 8005634:	2000      	moveq	r0, #0
 8005636:	2001      	movne	r0, #1
    bitstatus = RESET;
  }

  /* Return the ADC_IT status */
  return  bitstatus;
}
 8005638:	4770      	bx	lr
 800563a:	46c0      	nop			(mov r8, r8)

0800563c <ADC_ClearITPendingBit>:

  /* Get the ADC IT index */
  itmask = (u8)(ADC_IT >> 8);

  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(u32)itmask;
 800563c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8005640:	6001      	str	r1, [r0, #0]
}
 8005642:	4770      	bx	lr

08005644 <ADC_DeInit>:
* Input          : - ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void ADC_DeInit(ADC_TypeDef* ADCx)
{
 8005644:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  switch (*(u32*)&ADCx)
 8005646:	4b14      	ldr	r3, [pc, #80]	(8005698 <ADC_DeInit+0x54>)
* Input          : - ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void ADC_DeInit(ADC_TypeDef* ADCx)
{
 8005648:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  switch (*(u32*)&ADCx)
 800564a:	4298      	cmp	r0, r3
* Input          : - ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void ADC_DeInit(ADC_TypeDef* ADCx)
{
 800564c:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  switch (*(u32*)&ADCx)
 800564e:	d00f      	beq.n	8005670 <ADC_DeInit+0x2c>
 8005650:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8005654:	4298      	cmp	r0, r3
 8005656:	d013      	beq.n	8005680 <ADC_DeInit+0x3c>
 8005658:	f5a3 53c0 	sub.w	r3, r3, #6144	; 0x1800
 800565c:	4298      	cmp	r0, r3
 800565e:	d119      	bne.n	8005694 <ADC_DeInit+0x50>
  {
    case ADC1_BASE:
      /* Enable ADC1 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
 8005660:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005664:	2101      	movs	r1, #1
 8005666:	f000 ff8d 	bl	8006584 <RCC_APB2PeriphResetCmd>
      /* Release ADC1 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
 800566a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800566e:	e00e      	b.n	800568e <ADC_DeInit+0x4a>
      break;
    
    case ADC2_BASE:
      /* Enable ADC2 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
 8005670:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005674:	2101      	movs	r1, #1
 8005676:	f000 ff85 	bl	8006584 <RCC_APB2PeriphResetCmd>
      /* Release ADC2 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
 800567a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800567e:	e006      	b.n	800568e <ADC_DeInit+0x4a>
      break;
      
    case ADC3_BASE:
      /* Enable ADC3 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
 8005680:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005684:	2101      	movs	r1, #1
 8005686:	f000 ff7d 	bl	8006584 <RCC_APB2PeriphResetCmd>
      /* Release ADC3 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
 800568a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800568e:	2100      	movs	r1, #0
 8005690:	f000 ff78 	bl	8006584 <RCC_APB2PeriphResetCmd>
      break; 

    default:
      break;
  }
}
 8005694:	b003      	add	sp, #12
 8005696:	bd00      	pop	{pc}
 8005698:	40012800 	.word	0x40012800

0800569c <FLASH_SetLatency>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Sets the Latency value */
  FLASH->ACR &= ACR_LATENCY_Mask;
 800569c:	4a04      	ldr	r2, [pc, #16]	(80056b0 <FLASH_SetLatency+0x14>)
 800569e:	6813      	ldr	r3, [r2, #0]
 80056a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056a4:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_Latency;
 80056a6:	6813      	ldr	r3, [r2, #0]
 80056a8:	4318      	orrs	r0, r3
 80056aa:	6010      	str	r0, [r2, #0]
}
 80056ac:	4770      	bx	lr
 80056ae:	46c0      	nop			(mov r8, r8)
 80056b0:	40022000 	.word	0x40022000

080056b4 <FLASH_HalfCycleAccessCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_HALFCYCLEACCESS_STATE(FLASH_HalfCycleAccess));
  
  /* Enable or disable the Half cycle access */
  FLASH->ACR &= ACR_HLFCYA_Mask;
 80056b4:	4a04      	ldr	r2, [pc, #16]	(80056c8 <FLASH_HalfCycleAccessCmd+0x14>)
 80056b6:	6813      	ldr	r3, [r2, #0]
 80056b8:	f023 0308 	bic.w	r3, r3, #8	; 0x8
 80056bc:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_HalfCycleAccess;
 80056be:	6813      	ldr	r3, [r2, #0]
 80056c0:	4318      	orrs	r0, r3
 80056c2:	6010      	str	r0, [r2, #0]
}
 80056c4:	4770      	bx	lr
 80056c6:	46c0      	nop			(mov r8, r8)
 80056c8:	40022000 	.word	0x40022000

080056cc <FLASH_PrefetchBufferCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 80056cc:	4a04      	ldr	r2, [pc, #16]	(80056e0 <FLASH_PrefetchBufferCmd+0x14>)
 80056ce:	6813      	ldr	r3, [r2, #0]
 80056d0:	f023 0310 	bic.w	r3, r3, #16	; 0x10
 80056d4:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 80056d6:	6813      	ldr	r3, [r2, #0]
 80056d8:	4318      	orrs	r0, r3
 80056da:	6010      	str	r0, [r2, #0]
}
 80056dc:	4770      	bx	lr
 80056de:	46c0      	nop			(mov r8, r8)
 80056e0:	40022000 	.word	0x40022000

080056e4 <FLASH_Unlock>:
* Return         : None
*******************************************************************************/
void FLASH_Unlock(void)
{
  /* Authorize the FPEC Access */
  FLASH->KEYR = FLASH_KEY1;
 80056e4:	4b03      	ldr	r3, [pc, #12]	(80056f4 <FLASH_Unlock+0x10>)
 80056e6:	4a04      	ldr	r2, [pc, #16]	(80056f8 <FLASH_Unlock+0x14>)
 80056e8:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 80056ea:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80056ee:	605a      	str	r2, [r3, #4]
}
 80056f0:	4770      	bx	lr
 80056f2:	46c0      	nop			(mov r8, r8)
 80056f4:	40022000 	.word	0x40022000
 80056f8:	45670123 	.word	0x45670123

080056fc <FLASH_Lock>:
* Return         : None
*******************************************************************************/
void FLASH_Lock(void)
{
  /* Set the Lock Bit to lock the FPEC and the FCR */
  FLASH->CR |= CR_LOCK_Set;
 80056fc:	4a02      	ldr	r2, [pc, #8]	(8005708 <FLASH_Lock+0xc>)
 80056fe:	6913      	ldr	r3, [r2, #16]
 8005700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005704:	6113      	str	r3, [r2, #16]
}
 8005706:	4770      	bx	lr
 8005708:	40022000 	.word	0x40022000

0800570c <FLASH_GetUserOptionByte>:
*                  and RST_STDBY(Bit2).
*******************************************************************************/
u32 FLASH_GetUserOptionByte(void)
{
  /* Return the User Option Byte */
  return (u32)(FLASH->OBR >> 2);
 800570c:	4b01      	ldr	r3, [pc, #4]	(8005714 <FLASH_GetUserOptionByte+0x8>)
 800570e:	69d8      	ldr	r0, [r3, #28]
 8005710:	0880      	lsrs	r0, r0, #2
}
 8005712:	4770      	bx	lr
 8005714:	40022000 	.word	0x40022000

08005718 <FLASH_GetWriteProtectionOptionByte>:
* Return         : The FLASH Write Protection  Option Bytes Register value
*******************************************************************************/
u32 FLASH_GetWriteProtectionOptionByte(void)
{
  /* Return the Falsh write protection Register value */
  return (u32)(FLASH->WRPR);
 8005718:	4b01      	ldr	r3, [pc, #4]	(8005720 <FLASH_GetWriteProtectionOptionByte+0x8>)
 800571a:	6a18      	ldr	r0, [r3, #32]
}
 800571c:	4770      	bx	lr
 800571e:	46c0      	nop			(mov r8, r8)
 8005720:	40022000 	.word	0x40022000

08005724 <FLASH_GetReadOutProtectionStatus>:
*******************************************************************************/
FlagStatus FLASH_GetReadOutProtectionStatus(void)
{
  FlagStatus readoutstatus = RESET;

  if ((FLASH->OBR & RDPRT_Mask) != (u32)RESET)
 8005724:	4b02      	ldr	r3, [pc, #8]	(8005730 <FLASH_GetReadOutProtectionStatus+0xc>)
 8005726:	69d8      	ldr	r0, [r3, #28]
 8005728:	0840      	lsrs	r0, r0, #1
 800572a:	f000 0001 	and.w	r0, r0, #1	; 0x1
  else
  {
    readoutstatus = RESET;
  }
  return readoutstatus;
}
 800572e:	4770      	bx	lr
 8005730:	40022000 	.word	0x40022000

08005734 <FLASH_GetPrefetchBufferStatus>:
*******************************************************************************/
FlagStatus FLASH_GetPrefetchBufferStatus(void)
{
  FlagStatus bitstatus = RESET;
  
  if ((FLASH->ACR & ACR_PRFTBS_Mask) != (u32)RESET)
 8005734:	4b02      	ldr	r3, [pc, #8]	(8005740 <FLASH_GetPrefetchBufferStatus+0xc>)
 8005736:	6818      	ldr	r0, [r3, #0]
 8005738:	0940      	lsrs	r0, r0, #5
 800573a:	f000 0001 	and.w	r0, r0, #1	; 0x1
  {
    bitstatus = RESET;
  }
  /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
  return bitstatus; 
}
 800573e:	4770      	bx	lr
 8005740:	40022000 	.word	0x40022000

08005744 <FLASH_ITConfig>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 8005744:	b121      	cbz	r1, 8005750 <FLASH_ITConfig+0xc>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8005746:	4a05      	ldr	r2, [pc, #20]	(800575c <FLASH_ITConfig+0x18>)
 8005748:	6913      	ldr	r3, [r2, #16]
 800574a:	ea40 0303 	orr.w	r3, r0, r3
 800574e:	e003      	b.n	8005758 <FLASH_ITConfig+0x14>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(u32)FLASH_IT;
 8005750:	4a02      	ldr	r2, [pc, #8]	(800575c <FLASH_ITConfig+0x18>)
 8005752:	6913      	ldr	r3, [r2, #16]
 8005754:	ea23 0300 	bic.w	r3, r3, r0
 8005758:	6113      	str	r3, [r2, #16]
  }
}
 800575a:	4770      	bx	lr
 800575c:	40022000 	.word	0x40022000

08005760 <FLASH_GetFlagStatus>:
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;

  if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
 8005760:	2801      	cmp	r0, #1
 8005762:	d104      	bne.n	800576e <FLASH_GetFlagStatus+0xe>
  {
    if((FLASH->OBR & FLASH_FLAG_OPTERR) != (u32)RESET)
 8005764:	4b05      	ldr	r3, [pc, #20]	(800577c <FLASH_GetFlagStatus+0x1c>)
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	f003 0001 	and.w	r0, r3, #1	; 0x1
 800576c:	e005      	b.n	800577a <FLASH_GetFlagStatus+0x1a>
      bitstatus = RESET;
    }
  }
  else
  {
   if((FLASH->SR & FLASH_FLAG) != (u32)RESET)
 800576e:	4b03      	ldr	r3, [pc, #12]	(800577c <FLASH_GetFlagStatus+0x1c>)
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	4218      	tst	r0, r3
 8005774:	bf0c      	ite	eq
 8005776:	2000      	moveq	r0, #0
 8005778:	2001      	movne	r0, #1
      bitstatus = RESET;
    }
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus;
}
 800577a:	4770      	bx	lr
 800577c:	40022000 	.word	0x40022000

08005780 <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8005780:	4b01      	ldr	r3, [pc, #4]	(8005788 <FLASH_ClearFlag+0x8>)
 8005782:	60d8      	str	r0, [r3, #12]
}
 8005784:	4770      	bx	lr
 8005786:	46c0      	nop			(mov r8, r8)
 8005788:	40022000 	.word	0x40022000

0800578c <FLASH_GetStatus>:
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 800578c:	4a09      	ldr	r2, [pc, #36]	(80057b4 <FLASH_GetStatus+0x28>)
 800578e:	68d3      	ldr	r3, [r2, #12]
 8005790:	f013 0f01 	tst.w	r3, #1	; 0x1
 8005794:	d001      	beq.n	800579a <FLASH_GetStatus+0xe>
 8005796:	2001      	movs	r0, #1
 8005798:	e00b      	b.n	80057b2 <FLASH_GetStatus+0x26>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 800579a:	68d3      	ldr	r3, [r2, #12]
 800579c:	f013 0f04 	tst.w	r3, #4	; 0x4
 80057a0:	d001      	beq.n	80057a6 <FLASH_GetStatus+0x1a>
 80057a2:	2002      	movs	r0, #2
 80057a4:	e005      	b.n	80057b2 <FLASH_GetStatus+0x26>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 80057a6:	68d3      	ldr	r3, [r2, #12]
 80057a8:	f013 0f10 	tst.w	r3, #16	; 0x10
 80057ac:	bf14      	ite	ne
 80057ae:	2003      	movne	r0, #3
 80057b0:	2004      	moveq	r0, #4
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 80057b2:	4770      	bx	lr
 80057b4:	40022000 	.word	0x40022000

080057b8 <FLASH_WaitForLastOperation>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 80057b8:	b510      	push	{r4, lr}
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80057ba:	4a23      	ldr	r2, [pc, #140]	(8005848 <FLASH_WaitForLastOperation+0x90>)
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 80057bc:	b082      	sub	sp, #8
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80057be:	68d3      	ldr	r3, [r2, #12]
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 80057c0:	4601      	mov	r1, r0
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80057c2:	f013 0f01 	tst.w	r3, #1	; 0x1
 80057c6:	d001      	beq.n	80057cc <FLASH_WaitForLastOperation+0x14>
 80057c8:	2001      	movs	r0, #1
 80057ca:	e02a      	b.n	8005822 <FLASH_WaitForLastOperation+0x6a>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 80057cc:	68d3      	ldr	r3, [r2, #12]
 80057ce:	f013 0f04 	tst.w	r3, #4	; 0x4
 80057d2:	d001      	beq.n	80057d8 <FLASH_WaitForLastOperation+0x20>
 80057d4:	2002      	movs	r0, #2
 80057d6:	e024      	b.n	8005822 <FLASH_WaitForLastOperation+0x6a>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 80057d8:	68d3      	ldr	r3, [r2, #12]
 80057da:	f013 0f10 	tst.w	r3, #16	; 0x10
 80057de:	bf14      	ite	ne
 80057e0:	2003      	movne	r0, #3
 80057e2:	2004      	moveq	r0, #4
 80057e4:	e01d      	b.n	8005822 <FLASH_WaitForLastOperation+0x6a>
* Output         : None
* Return         : None
*******************************************************************************/
static void delay(void)
{
  vu32 i = 0;
 80057e6:	9401      	str	r4, [sp, #4]

  for(i = 0xFF; i != 0; i--)
 80057e8:	f8cd c004 	str.w	ip, [sp, #4]
 80057ec:	e002      	b.n	80057f4 <FLASH_WaitForLastOperation+0x3c>
 80057ee:	9b01      	ldr	r3, [sp, #4]
 80057f0:	3b01      	subs	r3, #1
 80057f2:	9301      	str	r3, [sp, #4]
 80057f4:	9b01      	ldr	r3, [sp, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1f9      	bne.n	80057ee <FLASH_WaitForLastOperation+0x36>
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80057fa:	68d3      	ldr	r3, [r2, #12]
 80057fc:	f013 0f01 	tst.w	r3, #1	; 0x1
 8005800:	d001      	beq.n	8005806 <FLASH_WaitForLastOperation+0x4e>
 8005802:	2001      	movs	r0, #1
 8005804:	e00b      	b.n	800581e <FLASH_WaitForLastOperation+0x66>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 8005806:	68d3      	ldr	r3, [r2, #12]
 8005808:	f013 0f04 	tst.w	r3, #4	; 0x4
 800580c:	d001      	beq.n	8005812 <FLASH_WaitForLastOperation+0x5a>
 800580e:	2002      	movs	r0, #2
 8005810:	e005      	b.n	800581e <FLASH_WaitForLastOperation+0x66>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 8005812:	68d3      	ldr	r3, [r2, #12]
 8005814:	f013 0f10 	tst.w	r3, #16	; 0x10
 8005818:	bf14      	ite	ne
 800581a:	2003      	movne	r0, #3
 800581c:	2004      	moveq	r0, #4
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
  {
    delay();
    status = FLASH_GetStatus();
    Timeout--;
 800581e:	3901      	subs	r1, #1
 8005820:	e003      	b.n	800582a <FLASH_WaitForLastOperation+0x72>
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8005822:	4a09      	ldr	r2, [pc, #36]	(8005848 <FLASH_WaitForLastOperation+0x90>)
* Output         : None
* Return         : None
*******************************************************************************/
static void delay(void)
{
  vu32 i = 0;
 8005824:	2400      	movs	r4, #0

  for(i = 0xFF; i != 0; i--)
 8005826:	f04f 0cff 	mov.w	ip, #255	; 0xff
   
  /* Check for the Flash Status */
  status = FLASH_GetStatus();

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 800582a:	1e0b      	subs	r3, r1, #0
 800582c:	bf18      	it	ne
 800582e:	2301      	movne	r3, #1
 8005830:	2801      	cmp	r0, #1
 8005832:	bf14      	ite	ne
 8005834:	2300      	movne	r3, #0
 8005836:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1d3      	bne.n	80057e6 <FLASH_WaitForLastOperation+0x2e>
    delay();
    status = FLASH_GetStatus();
    Timeout--;
  }

  if(Timeout == 0x00 )
 800583e:	2900      	cmp	r1, #0
 8005840:	bf08      	it	eq
 8005842:	2005      	moveq	r0, #5
    status = FLASH_TIMEOUT;
  }

  /* Return the operation status */
  return status;
}
 8005844:	b002      	add	sp, #8
 8005846:	bd10      	pop	{r4, pc}
 8005848:	40022000 	.word	0x40022000

0800584c <FLASH_UserOptionByteConfig>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 800584c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 800584e:	4b13      	ldr	r3, [pc, #76]	(800589c <FLASH_UserOptionByteConfig+0x50>)
 8005850:	4c13      	ldr	r4, [pc, #76]	(80058a0 <FLASH_UserOptionByteConfig+0x54>)
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 8005852:	b081      	sub	sp, #4
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 8005854:	60a3      	str	r3, [r4, #8]
  FLASH->OPTKEYR = FLASH_KEY2;
 8005856:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 800585a:	4605      	mov	r5, r0
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
 800585c:	60a3      	str	r3, [r4, #8]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800585e:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 8005860:	460e      	mov	r6, r1
 8005862:	4617      	mov	r7, r2
  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005864:	f7ff ffa8 	bl	80057b8 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8005868:	2804      	cmp	r0, #4
 800586a:	d115      	bne.n	8005898 <FLASH_UserOptionByteConfig+0x4c>
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 800586c:	6923      	ldr	r3, [r4, #16]
           
    OB->USER = ( OB_IWDG | OB_STOP |OB_STDBY) | (u16)0xF8; 
 800586e:	4a0d      	ldr	r2, [pc, #52]	(80058a4 <FLASH_UserOptionByteConfig+0x58>)
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 8005870:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 8005874:	6123      	str	r3, [r4, #16]
           
    OB->USER = ( OB_IWDG | OB_STOP |OB_STDBY) | (u16)0xF8; 
 8005876:	f045 03f8 	orr.w	r3, r5, #248	; 0xf8
 800587a:	ea46 0303 	orr.w	r3, r6, r3
 800587e:	ea47 0303 	orr.w	r3, r7, r3
 8005882:	8053      	strh	r3, [r2, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005884:	200f      	movs	r0, #15
 8005886:	f7ff ff97 	bl	80057b8 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 800588a:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 800588c:	bf1f      	itttt	ne
 800588e:	6922      	ldrne	r2, [r4, #16]
 8005890:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8005894:	4013      	andne	r3, r2
 8005896:	6123      	strne	r3, [r4, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;
}
 8005898:	b001      	add	sp, #4
 800589a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800589c:	45670123 	.word	0x45670123
 80058a0:	40022000 	.word	0x40022000
 80058a4:	1ffff800 	.word	0x1ffff800

080058a8 <FLASH_ReadOutProtection>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ReadOutProtection(FunctionalState NewState)
{
 80058a8:	b530      	push	{r4, r5, lr}
 80058aa:	4605      	mov	r5, r0
 80058ac:	b081      	sub	sp, #4
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  status = FLASH_WaitForLastOperation(EraseTimeout);
 80058ae:	f640 70ff 	movw	r0, #4095	; 0xfff
 80058b2:	f7ff ff81 	bl	80057b8 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 80058b6:	2804      	cmp	r0, #4
 80058b8:	d13c      	bne.n	8005934 <FLASH_ReadOutProtection+0x8c>
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80058ba:	4c1f      	ldr	r4, [pc, #124]	(8005938 <FLASH_ReadOutProtection+0x90>)
 80058bc:	4b1f      	ldr	r3, [pc, #124]	(800593c <FLASH_ReadOutProtection+0x94>)

    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80058be:	f500 607e 	add.w	r0, r0, #4064	; 0xfe0
  status = FLASH_WaitForLastOperation(EraseTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80058c2:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 80058c4:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80058c8:	60a3      	str	r3, [r4, #8]

    FLASH->CR |= CR_OPTER_Set;
 80058ca:	6923      	ldr	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80058cc:	301b      	adds	r0, #27
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;

    FLASH->CR |= CR_OPTER_Set;
 80058ce:	f043 0320 	orr.w	r3, r3, #32	; 0x20
 80058d2:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 80058d4:	6923      	ldr	r3, [r4, #16]
 80058d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058da:	6123      	str	r3, [r4, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80058dc:	f7ff ff6c 	bl	80057b8 <FLASH_WaitForLastOperation>

    if(status == FLASH_COMPLETE)
 80058e0:	2804      	cmp	r0, #4
 80058e2:	d120      	bne.n	8005926 <FLASH_ReadOutProtection+0x7e>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 80058e4:	6923      	ldr	r3, [r4, #16]
 80058e6:	f641 72df 	movw	r2, #8159	; 0x1fdf
 80058ea:	ea03 0202 	and.w	r2, r3, r2
 80058ee:	6122      	str	r2, [r4, #16]

      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set; 
 80058f0:	6923      	ldr	r3, [r4, #16]
 80058f2:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 80058f6:	6123      	str	r3, [r4, #16]

      if(NewState != DISABLE)
 80058f8:	b11d      	cbz	r5, 8005902 <FLASH_ReadOutProtection+0x5a>
      {
        OB->RDP = 0x00;
 80058fa:	4b11      	ldr	r3, [pc, #68]	(8005940 <FLASH_ReadOutProtection+0x98>)
 80058fc:	f04f 0200 	mov.w	r2, #0	; 0x0
 8005900:	e002      	b.n	8005908 <FLASH_ReadOutProtection+0x60>
      }
      else
      {
        OB->RDP = RDP_Key;  
 8005902:	4b0f      	ldr	r3, [pc, #60]	(8005940 <FLASH_ReadOutProtection+0x98>)
 8005904:	f04f 02a5 	mov.w	r2, #165	; 0xa5
 8005908:	801a      	strh	r2, [r3, #0]
      }

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(EraseTimeout); 
 800590a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800590e:	f7ff ff53 	bl	80057b8 <FLASH_WaitForLastOperation>
    
      if(status != FLASH_BUSY)
 8005912:	2801      	cmp	r0, #1
 8005914:	d00e      	beq.n	8005934 <FLASH_ReadOutProtection+0x8c>
      {
        /* if the program operation is completed, disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 8005916:	4908      	ldr	r1, [pc, #32]	(8005938 <FLASH_ReadOutProtection+0x90>)
 8005918:	f641 73ef 	movw	r3, #8175	; 0x1fef
 800591c:	690a      	ldr	r2, [r1, #16]
 800591e:	ea02 0303 	and.w	r3, r2, r3
 8005922:	610b      	str	r3, [r1, #16]
 8005924:	e006      	b.n	8005934 <FLASH_ReadOutProtection+0x8c>
      }
    }
    else 
    {
      if(status != FLASH_BUSY)
 8005926:	2801      	cmp	r0, #1
      {
        /* Disable the OPTER Bit */
        FLASH->CR &= CR_OPTER_Reset;
 8005928:	bf1f      	itttt	ne
 800592a:	6922      	ldrne	r2, [r4, #16]
 800592c:	f641 73df 	movwne	r3, #8159	; 0x1fdf
 8005930:	4013      	andne	r3, r2
 8005932:	6123      	strne	r3, [r4, #16]
      }
    }
  }
  /* Return the protection operation Status */
  return status;      
}
 8005934:	b001      	add	sp, #4
 8005936:	bd30      	pop	{r4, r5, pc}
 8005938:	40022000 	.word	0x40022000
 800593c:	45670123 	.word	0x45670123
 8005940:	1ffff800 	.word	0x1ffff800

08005944 <FLASH_EnableWriteProtection>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EnableWriteProtection(u32 FLASH_Pages)
{
 8005944:	b510      	push	{r4, lr}
 8005946:	4604      	mov	r4, r0
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005948:	200f      	movs	r0, #15
 800594a:	f7ff ff35 	bl	80057b8 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800594e:	2804      	cmp	r0, #4
 8005950:	d150      	bne.n	80059f4 <FLASH_EnableWriteProtection+0xb0>
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8005952:	4a29      	ldr	r2, [pc, #164]	(80059f8 <FLASH_EnableWriteProtection+0xb4>)
 8005954:	4b29      	ldr	r3, [pc, #164]	(80059fc <FLASH_EnableWriteProtection+0xb8>)
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
 8005956:	ea6f 0404 	mvn.w	r4, r4
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 800595a:	6093      	str	r3, [r2, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 800595c:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8005960:	6093      	str	r3, [r2, #8]
    FLASH->CR |= CR_OPTPG_Set;
 8005962:	6913      	ldr	r3, [r2, #16]
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
 8005964:	b2e1      	uxtb	r1, r4
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
 8005966:	f043 0310 	orr.w	r3, r3, #16	; 0x10

    if(WRP0_Data != 0xFF)
 800596a:	29ff      	cmp	r1, #255
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
 800596c:	6113      	str	r3, [r2, #16]

    if(WRP0_Data != 0xFF)
 800596e:	d004      	beq.n	800597a <FLASH_EnableWriteProtection+0x36>
    {
      OB->WRP0 = WRP0_Data;
 8005970:	4b23      	ldr	r3, [pc, #140]	(8005a00 <FLASH_EnableWriteProtection+0xbc>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005972:	200f      	movs	r0, #15
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;

    if(WRP0_Data != 0xFF)
    {
      OB->WRP0 = WRP0_Data;
 8005974:	8119      	strh	r1, [r3, #8]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005976:	f7ff ff1f 	bl	80057b8 <FLASH_WaitForLastOperation>
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
 800597a:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 800597e:	0a1a      	lsrs	r2, r3, #8
      OB->WRP0 = WRP0_Data;
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8005980:	f1b2 03ff 	subs.w	r3, r2, #255	; 0xff
 8005984:	bf18      	it	ne
 8005986:	2301      	movne	r3, #1
 8005988:	2804      	cmp	r0, #4
 800598a:	bf14      	ite	ne
 800598c:	2300      	movne	r3, #0
 800598e:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
 8005992:	b123      	cbz	r3, 800599e <FLASH_EnableWriteProtection+0x5a>
    {
      OB->WRP1 = WRP1_Data;
 8005994:	4b1a      	ldr	r3, [pc, #104]	(8005a00 <FLASH_EnableWriteProtection+0xbc>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005996:	200f      	movs	r0, #15
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
    {
      OB->WRP1 = WRP1_Data;
 8005998:	815a      	strh	r2, [r3, #10]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800599a:	f7ff ff0d 	bl	80057b8 <FLASH_WaitForLastOperation>
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
 800599e:	f404 037f 	and.w	r3, r4, #16711680	; 0xff0000
 80059a2:	0c1a      	lsrs	r2, r3, #16
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }

    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 80059a4:	f1b2 03ff 	subs.w	r3, r2, #255	; 0xff
 80059a8:	bf18      	it	ne
 80059aa:	2301      	movne	r3, #1
 80059ac:	2804      	cmp	r0, #4
 80059ae:	bf14      	ite	ne
 80059b0:	2300      	movne	r3, #0
 80059b2:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
 80059b6:	b123      	cbz	r3, 80059c2 <FLASH_EnableWriteProtection+0x7e>
    {
      OB->WRP2 = WRP2_Data;
 80059b8:	4b11      	ldr	r3, [pc, #68]	(8005a00 <FLASH_EnableWriteProtection+0xbc>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80059ba:	200f      	movs	r0, #15
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }

    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
    {
      OB->WRP2 = WRP2_Data;
 80059bc:	819a      	strh	r2, [r3, #12]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80059be:	f7ff fefb 	bl	80057b8 <FLASH_WaitForLastOperation>
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
 80059c2:	0e22      	lsrs	r2, r4, #24
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 80059c4:	f1b2 03ff 	subs.w	r3, r2, #255	; 0xff
 80059c8:	bf18      	it	ne
 80059ca:	2301      	movne	r3, #1
 80059cc:	2804      	cmp	r0, #4
 80059ce:	bf14      	ite	ne
 80059d0:	2300      	movne	r3, #0
 80059d2:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
 80059d6:	b123      	cbz	r3, 80059e2 <FLASH_EnableWriteProtection+0x9e>
    {
      OB->WRP3 = WRP3_Data;
 80059d8:	4b09      	ldr	r3, [pc, #36]	(8005a00 <FLASH_EnableWriteProtection+0xbc>)
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80059da:	200f      	movs	r0, #15
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
    {
      OB->WRP3 = WRP3_Data;
 80059dc:	81da      	strh	r2, [r3, #14]
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80059de:	f7ff feeb 	bl	80057b8 <FLASH_WaitForLastOperation>
    }
          
    if(status != FLASH_BUSY)
 80059e2:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 80059e4:	bf1f      	itttt	ne
 80059e6:	4904      	ldrne	r1, [pc, #16]	(80059f8 <FLASH_EnableWriteProtection+0xb4>)
 80059e8:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 80059ec:	690a      	ldrne	r2, [r1, #16]
 80059ee:	4013      	andne	r3, r2
 80059f0:	bf18      	it	ne
 80059f2:	610b      	strne	r3, [r1, #16]
    }
  } 
  /* Return the write protection operation Status */
  return status;       
}
 80059f4:	bd10      	pop	{r4, pc}
 80059f6:	46c0      	nop			(mov r8, r8)
 80059f8:	40022000 	.word	0x40022000
 80059fc:	45670123 	.word	0x45670123
 8005a00:	1ffff800 	.word	0x1ffff800

08005a04 <FLASH_ProgramOptionByteData>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramOptionByteData(u32 Address, u8 Data)
{
 8005a04:	b570      	push	{r4, r5, r6, lr}
 8005a06:	4606      	mov	r6, r0
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));

  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005a08:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramOptionByteData(u32 Address, u8 Data)
{
 8005a0a:	460d      	mov	r5, r1
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));

  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005a0c:	f7ff fed4 	bl	80057b8 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 8005a10:	2804      	cmp	r0, #4
 8005a12:	d114      	bne.n	8005a3e <FLASH_ProgramOptionByteData+0x3a>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8005a14:	4c0a      	ldr	r4, [pc, #40]	(8005a40 <FLASH_ProgramOptionByteData+0x3c>)
 8005a16:	4b0b      	ldr	r3, [pc, #44]	(8005a44 <FLASH_ProgramOptionByteData+0x40>)
    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
    *(vu16*)Address = Data;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005a18:	200f      	movs	r0, #15
  status = FLASH_WaitForLastOperation(ProgramTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8005a1a:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8005a1c:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8005a20:	60a3      	str	r3, [r4, #8]

    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 8005a22:	6923      	ldr	r3, [r4, #16]
 8005a24:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 8005a28:	6123      	str	r3, [r4, #16]
    *(vu16*)Address = Data;
 8005a2a:	8035      	strh	r5, [r6, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005a2c:	f7ff fec4 	bl	80057b8 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8005a30:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 8005a32:	bf1f      	itttt	ne
 8005a34:	6922      	ldrne	r2, [r4, #16]
 8005a36:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8005a3a:	4013      	andne	r3, r2
 8005a3c:	6123      	strne	r3, [r4, #16]
    }
  }    
  /* Return the Option Byte Data Program Status */
  return status;      
}
 8005a3e:	bd70      	pop	{r4, r5, r6, pc}
 8005a40:	40022000 	.word	0x40022000
 8005a44:	45670123 	.word	0x45670123

08005a48 <FLASH_ProgramHalfWord>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramHalfWord(u32 Address, u16 Data)
{
 8005a48:	b570      	push	{r4, r5, r6, lr}
 8005a4a:	4606      	mov	r6, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005a4c:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramHalfWord(u32 Address, u16 Data)
{
 8005a4e:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005a50:	f7ff feb2 	bl	80057b8 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8005a54:	2804      	cmp	r0, #4
 8005a56:	d10f      	bne.n	8005a78 <FLASH_ProgramHalfWord+0x30>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8005a58:	4c08      	ldr	r4, [pc, #32]	(8005a7c <FLASH_ProgramHalfWord+0x34>)
  
    *(vu16*)Address = Data;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005a5a:	200f      	movs	r0, #15
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8005a5c:	6923      	ldr	r3, [r4, #16]
 8005a5e:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 8005a62:	6123      	str	r3, [r4, #16]
  
    *(vu16*)Address = Data;
 8005a64:	8035      	strh	r5, [r6, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005a66:	f7ff fea7 	bl	80057b8 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8005a6a:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the PG Bit */
      FLASH->CR &= CR_PG_Reset;
 8005a6c:	bf1f      	itttt	ne
 8005a6e:	6922      	ldrne	r2, [r4, #16]
 8005a70:	f641 73fe 	movwne	r3, #8190	; 0x1ffe
 8005a74:	4013      	andne	r3, r2
 8005a76:	6123      	strne	r3, [r4, #16]
    }
  } 
  /* Return the Program Status */
  return status;
}
 8005a78:	bd70      	pop	{r4, r5, r6, pc}
 8005a7a:	46c0      	nop			(mov r8, r8)
 8005a7c:	40022000 	.word	0x40022000

08005a80 <FLASH_ProgramWord>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	4606      	mov	r6, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005a84:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 8005a86:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005a88:	f7ff fe96 	bl	80057b8 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8005a8c:	2804      	cmp	r0, #4
 8005a8e:	d117      	bne.n	8005ac0 <FLASH_ProgramWord+0x40>
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 8005a90:	4c0c      	ldr	r4, [pc, #48]	(8005ac4 <FLASH_ProgramWord+0x44>)
  
    *(vu16*)Address = (u16)Data;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005a92:	200f      	movs	r0, #15
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 8005a94:	6923      	ldr	r3, [r4, #16]
 8005a96:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 8005a9a:	6123      	str	r3, [r4, #16]
  
    *(vu16*)Address = (u16)Data;
 8005a9c:	b2ab      	uxth	r3, r5
 8005a9e:	8033      	strh	r3, [r6, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005aa0:	f7ff fe8a 	bl	80057b8 <FLASH_WaitForLastOperation>
 
    if(status == FLASH_COMPLETE)
 8005aa4:	2804      	cmp	r0, #4
 8005aa6:	d104      	bne.n	8005ab2 <FLASH_ProgramWord+0x32>
    {
      /* if the previous operation is completed, proceed to program the new second 
      half word */
      *(vu16*)(Address + 2) = Data >> 16;
 8005aa8:	0c2b      	lsrs	r3, r5, #16
 8005aaa:	8073      	strh	r3, [r6, #2]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005aac:	200f      	movs	r0, #15
 8005aae:	f7ff fe83 	bl	80057b8 <FLASH_WaitForLastOperation>
        FLASH->CR &= CR_PG_Reset;
      }
    }
    else
    {
      if (status != FLASH_BUSY)
 8005ab2:	2801      	cmp	r0, #1
      {
        /* Disable the PG Bit */
        FLASH->CR &= CR_PG_Reset;
 8005ab4:	bf1f      	itttt	ne
 8005ab6:	6922      	ldrne	r2, [r4, #16]
 8005ab8:	f641 73fe 	movwne	r3, #8190	; 0x1ffe
 8005abc:	4013      	andne	r3, r2
 8005abe:	6123      	strne	r3, [r4, #16]
      }
     }
  }
  /* Return the Program Status */
  return status;
}
 8005ac0:	bd70      	pop	{r4, r5, r6, pc}
 8005ac2:	46c0      	nop			(mov r8, r8)
 8005ac4:	40022000 	.word	0x40022000

08005ac8 <FLASH_EraseOptionBytes>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EraseOptionBytes(void)
{
 8005ac8:	b510      	push	{r4, lr}
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8005aca:	f640 70ff 	movw	r0, #4095	; 0xfff
 8005ace:	f7ff fe73 	bl	80057b8 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 8005ad2:	2804      	cmp	r0, #4
 8005ad4:	d12c      	bne.n	8005b30 <FLASH_EraseOptionBytes+0x68>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8005ad6:	4c17      	ldr	r4, [pc, #92]	(8005b34 <FLASH_EraseOptionBytes+0x6c>)
 8005ad8:	4b17      	ldr	r3, [pc, #92]	(8005b38 <FLASH_EraseOptionBytes+0x70>)
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8005ada:	f500 607e 	add.w	r0, r0, #4064	; 0xfe0
  status = FLASH_WaitForLastOperation(EraseTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8005ade:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8005ae0:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8005ae4:	60a3      	str	r3, [r4, #8]
    
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
 8005ae6:	6923      	ldr	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8005ae8:	301b      	adds	r0, #27
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
 8005aea:	f043 0320 	orr.w	r3, r3, #32	; 0x20
 8005aee:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 8005af0:	6923      	ldr	r3, [r4, #16]
 8005af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005af6:	6123      	str	r3, [r4, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8005af8:	f7ff fe5e 	bl	80057b8 <FLASH_WaitForLastOperation>
    
    if(status == FLASH_COMPLETE)
 8005afc:	2804      	cmp	r0, #4
 8005afe:	d110      	bne.n	8005b22 <FLASH_EraseOptionBytes+0x5a>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 8005b00:	6922      	ldr	r2, [r4, #16]
 8005b02:	f641 73df 	movw	r3, #8159	; 0x1fdf
 8005b06:	ea02 0303 	and.w	r3, r2, r3
 8005b0a:	6123      	str	r3, [r4, #16]
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 8005b0c:	6923      	ldr	r3, [r4, #16]

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 8005b0e:	f04f 02a5 	mov.w	r2, #165	; 0xa5
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 8005b12:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 8005b16:	6123      	str	r3, [r4, #16]

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 8005b18:	4b08      	ldr	r3, [pc, #32]	(8005b3c <FLASH_EraseOptionBytes+0x74>)

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005b1a:	200f      	movs	r0, #15
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 8005b1c:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005b1e:	f7ff fe4b 	bl	80057b8 <FLASH_WaitForLastOperation>
        FLASH->CR &= CR_OPTPG_Reset;
      }
    }
    else
    {
      if (status != FLASH_BUSY)
 8005b22:	2801      	cmp	r0, #1
      {
        /* Disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 8005b24:	bf1f      	itttt	ne
 8005b26:	6922      	ldrne	r2, [r4, #16]
 8005b28:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8005b2c:	4013      	andne	r3, r2
 8005b2e:	6123      	strne	r3, [r4, #16]
      }
    }  
  }
  /* Return the erase status */
  return status;
}
 8005b30:	bd10      	pop	{r4, pc}
 8005b32:	46c0      	nop			(mov r8, r8)
 8005b34:	40022000 	.word	0x40022000
 8005b38:	45670123 	.word	0x45670123
 8005b3c:	1ffff800 	.word	0x1ffff800

08005b40 <FLASH_EraseAllPages>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EraseAllPages(void)
{
 8005b40:	b510      	push	{r4, lr}
  FLASH_Status status = FLASH_COMPLETE;

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8005b42:	f640 70ff 	movw	r0, #4095	; 0xfff
 8005b46:	f7ff fe37 	bl	80057b8 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8005b4a:	2804      	cmp	r0, #4
 8005b4c:	d113      	bne.n	8005b76 <FLASH_EraseAllPages+0x36>
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 8005b4e:	4c0a      	ldr	r4, [pc, #40]	(8005b78 <FLASH_EraseAllPages+0x38>)
 8005b50:	6923      	ldr	r3, [r4, #16]
 8005b52:	4303      	orrs	r3, r0
 8005b54:	6123      	str	r3, [r4, #16]
     FLASH->CR |= CR_STRT_Set;
 8005b56:	6923      	ldr	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8005b58:	f500 607e 	add.w	r0, r0, #4064	; 0xfe0
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
     FLASH->CR |= CR_STRT_Set;
 8005b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b60:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8005b62:	301b      	adds	r0, #27
 8005b64:	f7ff fe28 	bl	80057b8 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8005b68:	2801      	cmp	r0, #1
    {
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= CR_MER_Reset;
 8005b6a:	bf1f      	itttt	ne
 8005b6c:	6922      	ldrne	r2, [r4, #16]
 8005b6e:	f641 73fb 	movwne	r3, #8187	; 0x1ffb
 8005b72:	4013      	andne	r3, r2
 8005b74:	6123      	strne	r3, [r4, #16]
    }
  }	   
  /* Return the Erase Status */
  return status;
}
 8005b76:	bd10      	pop	{r4, pc}
 8005b78:	40022000 	.word	0x40022000

08005b7c <FLASH_ErasePage>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ErasePage(u32 Page_Address)
{
 8005b7c:	b530      	push	{r4, r5, lr}
 8005b7e:	4605      	mov	r5, r0
 8005b80:	b081      	sub	sp, #4

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Page_Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8005b82:	f640 70ff 	movw	r0, #4095	; 0xfff
 8005b86:	f7ff fe17 	bl	80057b8 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8005b8a:	2804      	cmp	r0, #4
 8005b8c:	d115      	bne.n	8005bba <FLASH_ErasePage+0x3e>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8005b8e:	4c0c      	ldr	r4, [pc, #48]	(8005bc0 <FLASH_ErasePage+0x44>)
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8005b90:	f500 607e 	add.w	r0, r0, #4064	; 0xfe0
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8005b94:	6923      	ldr	r3, [r4, #16]
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8005b96:	301b      	adds	r0, #27
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8005b98:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 8005b9c:	6123      	str	r3, [r4, #16]
    FLASH->AR = Page_Address; 
 8005b9e:	6165      	str	r5, [r4, #20]
    FLASH->CR|= CR_STRT_Set;
 8005ba0:	6923      	ldr	r3, [r4, #16]
 8005ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ba6:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8005ba8:	f7ff fe06 	bl	80057b8 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8005bac:	2801      	cmp	r0, #1
    {
      /* if the erase operation is completed, disable the PER Bit */
      FLASH->CR &= CR_PER_Reset;
 8005bae:	bf1f      	itttt	ne
 8005bb0:	6922      	ldrne	r2, [r4, #16]
 8005bb2:	f641 73fd 	movwne	r3, #8189	; 0x1ffd
 8005bb6:	4013      	andne	r3, r2
 8005bb8:	6123      	strne	r3, [r4, #16]
    }
  }
  /* Return the Erase Status */
  return status;
}
 8005bba:	b001      	add	sp, #4
 8005bbc:	bd30      	pop	{r4, r5, pc}
 8005bbe:	46c0      	nop			(mov r8, r8)
 8005bc0:	40022000 	.word	0x40022000

08005bc4 <GPIO_Init>:
*                    peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8005bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
 8005bc6:	78cd      	ldrb	r5, [r1, #3]
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 8005bc8:	880e      	ldrh	r6, [r1, #0]
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);

  if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
 8005bca:	f015 0f10 	tst.w	r5, #16	; 0x10
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
 8005bce:	bf18      	it	ne
 8005bd0:	788b      	ldrbne	r3, [r1, #2]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
 8005bd2:	f005 070f 	and.w	r7, r5, #15	; 0xf
  if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
 8005bd6:	bf18      	it	ne
 8005bd8:	431f      	orrne	r7, r3
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 8005bda:	f016 0fff 	tst.w	r6, #255	; 0xff
*                    peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8005bde:	b083      	sub	sp, #12
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 8005be0:	d01e      	beq.n	8005c20 <GPIO_Init+0x5c>
  {
    tmpreg = GPIOx->CRL;
 8005be2:	6804      	ldr	r4, [r0, #0]
 8005be4:	2100      	movs	r1, #0

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((u32)0x01) << pinpos;
 8005be6:	2201      	movs	r2, #1
 8005be8:	fa12 f301 	lsls.w	r3, r2, r1
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8005bec:	ea03 0c06 	and.w	ip, r3, r6

      if (currentpin == pos)
 8005bf0:	459c      	cmp	ip, r3
 8005bf2:	d111      	bne.n	8005c18 <GPIO_Init+0x54>
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
 8005bf4:	008a      	lsls	r2, r1, #2
        tmpreg &= ~pinmask;
 8005bf6:	230f      	movs	r3, #15
 8005bf8:	4093      	lsls	r3, r2

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8005bfa:	fa17 f202 	lsls.w	r2, r7, r2
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 8005bfe:	ea24 0403 	bic.w	r4, r4, r3

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8005c02:	4314      	orrs	r4, r2

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8005c04:	2d28      	cmp	r5, #40
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 8005c06:	9301      	str	r3, [sp, #4]
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((u32)0x01) << pinpos);
 8005c08:	bf08      	it	eq
 8005c0a:	f8c0 c014 	streq.w	ip, [r0, #20]

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8005c0e:	d003      	beq.n	8005c18 <GPIO_Init+0x54>
          GPIOx->BRR = (((u32)0x01) << pinpos);
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8005c10:	2d48      	cmp	r5, #72
          {
            GPIOx->BSRR = (((u32)0x01) << pinpos);
 8005c12:	bf08      	it	eq
 8005c14:	f8c0 c010 	streq.w	ip, [r0, #16]
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8005c18:	3101      	adds	r1, #1
 8005c1a:	2908      	cmp	r1, #8
 8005c1c:	d1e3      	bne.n	8005be6 <GPIO_Init+0x22>
            GPIOx->BSRR = (((u32)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8005c1e:	6004      	str	r4, [r0, #0]
  }

/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8005c20:	2eff      	cmp	r6, #255
 8005c22:	d920      	bls.n	8005c66 <GPIO_Init+0xa2>
  {
    tmpreg = GPIOx->CRH;
 8005c24:	6844      	ldr	r4, [r0, #4]
 8005c26:	2100      	movs	r1, #0
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((u32)0x01) << (pinpos + 0x08));
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f101 0308 	add.w	r3, r1, #8	; 0x8
 8005c2e:	fa12 f303 	lsls.w	r3, r2, r3
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8005c32:	ea03 0c06 	and.w	ip, r3, r6
      if (currentpin == pos)
 8005c36:	459c      	cmp	ip, r3
 8005c38:	d111      	bne.n	8005c5e <GPIO_Init+0x9a>
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
 8005c3a:	008a      	lsls	r2, r1, #2
        tmpreg &= ~pinmask;
 8005c3c:	230f      	movs	r3, #15
 8005c3e:	4093      	lsls	r3, r2

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8005c40:	fa17 f202 	lsls.w	r2, r7, r2
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 8005c44:	ea24 0403 	bic.w	r4, r4, r3

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8005c48:	4314      	orrs	r4, r2

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8005c4a:	2d28      	cmp	r5, #40
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 8005c4c:	9301      	str	r3, [sp, #4]
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((u32)0x01) << (pinpos + 0x08));
 8005c4e:	bf08      	it	eq
 8005c50:	f8c0 c014 	streq.w	ip, [r0, #20]

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8005c54:	d003      	beq.n	8005c5e <GPIO_Init+0x9a>
        {
          GPIOx->BRR = (((u32)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8005c56:	2d48      	cmp	r5, #72
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
 8005c58:	bf08      	it	eq
 8005c5a:	f8c0 c010 	streq.w	ip, [r0, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8005c5e:	3101      	adds	r1, #1
 8005c60:	2908      	cmp	r1, #8
 8005c62:	d1e1      	bne.n	8005c28 <GPIO_Init+0x64>
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8005c64:	6044      	str	r4, [r0, #4]
  }
}
 8005c66:	b003      	add	sp, #12
 8005c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c6a:	46c0      	nop			(mov r8, r8)

08005c6c <GPIO_StructInit>:
* Return         : None
*******************************************************************************/
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8005c6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c70:	8003      	strh	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8005c72:	2302      	movs	r3, #2
 8005c74:	7083      	strb	r3, [r0, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8005c76:	2304      	movs	r3, #4
 8005c78:	70c3      	strb	r3, [r0, #3]
}
 8005c7a:	4770      	bx	lr

08005c7c <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (u32)Bit_RESET)
 8005c7c:	6883      	ldr	r3, [r0, #8]
 8005c7e:	4219      	tst	r1, r3
 8005c80:	bf0c      	ite	eq
 8005c82:	2000      	moveq	r0, #0
 8005c84:	2001      	movne	r0, #1
  else
  {
    bitstatus = (u8)Bit_RESET;
  }
  return bitstatus;
}
 8005c86:	4770      	bx	lr

08005c88 <GPIO_ReadInputData>:
u16 GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((u16)GPIOx->IDR);
 8005c88:	6880      	ldr	r0, [r0, #8]
 8005c8a:	b280      	uxth	r0, r0
}
 8005c8c:	4770      	bx	lr
 8005c8e:	46c0      	nop			(mov r8, r8)

08005c90 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (u32)Bit_RESET)
 8005c90:	68c3      	ldr	r3, [r0, #12]
 8005c92:	4219      	tst	r1, r3
 8005c94:	bf0c      	ite	eq
 8005c96:	2000      	moveq	r0, #0
 8005c98:	2001      	movne	r0, #1
  else
  {
    bitstatus = (u8)Bit_RESET;
  }
  return bitstatus;
}
 8005c9a:	4770      	bx	lr

08005c9c <GPIO_ReadOutputData>:
u16 GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((u16)GPIOx->ODR);
 8005c9c:	68c0      	ldr	r0, [r0, #12]
 8005c9e:	b280      	uxth	r0, r0
}
 8005ca0:	4770      	bx	lr
 8005ca2:	46c0      	nop			(mov r8, r8)

08005ca4 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8005ca4:	6101      	str	r1, [r0, #16]
}
 8005ca6:	4770      	bx	lr

08005ca8 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8005ca8:	6141      	str	r1, [r0, #20]
}
 8005caa:	4770      	bx	lr

08005cac <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8005cac:	b10a      	cbz	r2, 8005cb2 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cae:	6101      	str	r1, [r0, #16]
 8005cb0:	e000      	b.n	8005cb4 <GPIO_WriteBit+0x8>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 8005cb2:	6141      	str	r1, [r0, #20]
  }
}
 8005cb4:	4770      	bx	lr
 8005cb6:	46c0      	nop			(mov r8, r8)

08005cb8 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, u16 PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 8005cb8:	60c1      	str	r1, [r0, #12]
}
 8005cba:	4770      	bx	lr

08005cbc <GPIO_PinLockConfig>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 8005cbc:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8005cc0:	6183      	str	r3, [r0, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8005cc2:	6181      	str	r1, [r0, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8005cc4:	6183      	str	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8005cc6:	6983      	ldr	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8005cc8:	6983      	ldr	r3, [r0, #24]
}
 8005cca:	4770      	bx	lr

08005ccc <GPIO_EventOutputConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 8005ccc:	f8df c018 	ldr.w	ip, [pc, #24]	; 8005ce8 <GPIO_EventOutputConfig+0x1c>
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 8005cd0:	f64f 7380 	movw	r3, #65408	; 0xff80

  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 8005cd4:	f8dc 2000 	ldr.w	r2, [ip]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
  tmpreg |= (u32)GPIO_PortSource << 0x04;
 8005cd8:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 8005cdc:	ea02 0303 	and.w	r3, r2, r3
  tmpreg |= (u32)GPIO_PortSource << 0x04;
  tmpreg |= GPIO_PinSource;
 8005ce0:	4319      	orrs	r1, r3

  AFIO->EVCR = tmpreg;
 8005ce2:	f8cc 1000 	str.w	r1, [ip]
}
 8005ce6:	4770      	bx	lr
 8005ce8:	40010000 	.word	0x40010000

08005cec <GPIO_EventOutputCmd>:
void GPIO_EventOutputCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(vu32 *) EVCR_EVOE_BB = (u32)NewState;
 8005cec:	4b01      	ldr	r3, [pc, #4]	(8005cf4 <GPIO_EventOutputCmd+0x8>)
 8005cee:	6018      	str	r0, [r3, #0]
}
 8005cf0:	4770      	bx	lr
 8005cf2:	46c0      	nop			(mov r8, r8)
 8005cf4:	4220001c 	.word	0x4220001c

08005cf8 <GPIO_PinRemapConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)
{
 8005cf8:	b530      	push	{r4, r5, lr}
  tmpreg = AFIO->MAPR;

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8005cfa:	f400 1340 	and.w	r3, r0, #3145728	; 0x300000
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;
 8005cfe:	0404      	lsls	r4, r0, #16
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)
{
 8005d00:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
 8005d02:	4914      	ldr	r1, [pc, #80]	(8005d54 <GPIO_PinRemapConfig+0x5c>)

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;
 8005d04:	0c24      	lsrs	r4, r4, #16

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8005d06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
 8005d0a:	f8d1 c004 	ldr.w	ip, [r1, #4]

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8005d0e:	d106      	bne.n	8005d1e <GPIO_PinRemapConfig+0x26>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8005d10:	684b      	ldr	r3, [r1, #4]
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8005d12:	f02c 6270 	bic.w	r2, ip, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8005d16:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005d1a:	604b      	str	r3, [r1, #4]
 8005d1c:	e010      	b.n	8005d40 <GPIO_PinRemapConfig+0x48>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8005d1e:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8005d22:	d005      	beq.n	8005d30 <GPIO_PinRemapConfig+0x38>
  {
    tmp1 = ((u32)0x03) << tmpmask;
    tmpreg &= ~tmp1;
 8005d24:	f400 2270 	and.w	r2, r0, #983040	; 0xf0000
 8005d28:	0c12      	lsrs	r2, r2, #16
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	4093      	lsls	r3, r2
 8005d2e:	e003      	b.n	8005d38 <GPIO_PinRemapConfig+0x40>
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8005d30:	0d43      	lsrs	r3, r0, #21
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	fa14 f303 	lsls.w	r3, r4, r3
 8005d38:	ea2c 0303 	bic.w	r3, ip, r3
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8005d3c:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
  }

  if (NewState != DISABLE)
 8005d40:	b125      	cbz	r5, 8005d4c <GPIO_PinRemapConfig+0x54>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8005d42:	0d43      	lsrs	r3, r0, #21
 8005d44:	011b      	lsls	r3, r3, #4
 8005d46:	fa14 f303 	lsls.w	r3, r4, r3
 8005d4a:	431a      	orrs	r2, r3
  }

  AFIO->MAPR = tmpreg;
 8005d4c:	4b01      	ldr	r3, [pc, #4]	(8005d54 <GPIO_PinRemapConfig+0x5c>)
 8005d4e:	605a      	str	r2, [r3, #4]
}
 8005d50:	bd30      	pop	{r4, r5, pc}
 8005d52:	46c0      	nop			(mov r8, r8)
 8005d54:	40010000 	.word	0x40010000

08005d58 <GPIO_EXTILineConfig>:
*                   This parameter can be GPIO_PinSourcex where x can be (0..15).
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_EXTILineConfig(u8 GPIO_PortSource, u8 GPIO_PinSource)
{
 8005d58:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));
 8005d5a:	f001 0403 	and.w	r4, r1, #3	; 0x3
 8005d5e:	00a4      	lsls	r4, r4, #2

  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8005d60:	230f      	movs	r3, #15
 8005d62:	40a3      	lsls	r3, r4
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((u32)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (u8)0x03)));
 8005d64:	40a0      	lsls	r0, r4
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));

  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8005d66:	f8df c020 	ldr.w	ip, [pc, #32]	; 8005d88 <GPIO_EXTILineConfig+0x30>
 8005d6a:	0889      	lsrs	r1, r1, #2
 8005d6c:	3102      	adds	r1, #2
 8005d6e:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
 8005d72:	ea22 0203 	bic.w	r2, r2, r3
 8005d76:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((u32)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (u8)0x03)));
 8005d7a:	f85c 3021 	ldr.w	r3, [ip, r1, lsl #2]
 8005d7e:	4318      	orrs	r0, r3
 8005d80:	f84c 0021 	str.w	r0, [ip, r1, lsl #2]
}
 8005d84:	bd10      	pop	{r4, pc}
 8005d86:	46c0      	nop			(mov r8, r8)
 8005d88:	40010000 	.word	0x40010000

08005d8c <GPIO_AFIODeInit>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_AFIODeInit(void)
{
 8005d8c:	b500      	push	{lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8005d8e:	2001      	movs	r0, #1
 8005d90:	2101      	movs	r1, #1
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_AFIODeInit(void)
{
 8005d92:	b081      	sub	sp, #4
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8005d94:	f000 fbf6 	bl	8006584 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 8005d98:	2001      	movs	r0, #1
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	f000 fbf2 	bl	8006584 <RCC_APB2PeriphResetCmd>
}
 8005da0:	b001      	add	sp, #4
 8005da2:	bd00      	pop	{pc}

08005da4 <GPIO_DeInit>:
* Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8005da4:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
 8005da6:	4b27      	ldr	r3, [pc, #156]	(8005e44 <GPIO_DeInit+0xa0>)
* Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8005da8:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
 8005daa:	4298      	cmp	r0, r3
* Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8005dac:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
 8005dae:	d02b      	beq.n	8005e08 <GPIO_DeInit+0x64>
 8005db0:	d80c      	bhi.n	8005dcc <GPIO_DeInit+0x28>
 8005db2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8005db6:	4298      	cmp	r0, r3
 8005db8:	d01a      	beq.n	8005df0 <GPIO_DeInit+0x4c>
 8005dba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dbe:	4298      	cmp	r0, r3
 8005dc0:	d01c      	beq.n	8005dfc <GPIO_DeInit+0x58>
 8005dc2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8005dc6:	4298      	cmp	r0, r3
 8005dc8:	d13a      	bne.n	8005e40 <GPIO_DeInit+0x9c>
 8005dca:	e00b      	b.n	8005de4 <GPIO_DeInit+0x40>
 8005dcc:	4b1e      	ldr	r3, [pc, #120]	(8005e48 <GPIO_DeInit+0xa4>)
 8005dce:	4298      	cmp	r0, r3
 8005dd0:	d026      	beq.n	8005e20 <GPIO_DeInit+0x7c>
 8005dd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dd6:	4298      	cmp	r0, r3
 8005dd8:	d028      	beq.n	8005e2c <GPIO_DeInit+0x88>
 8005dda:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8005dde:	4298      	cmp	r0, r3
 8005de0:	d12e      	bne.n	8005e40 <GPIO_DeInit+0x9c>
 8005de2:	e017      	b.n	8005e14 <GPIO_DeInit+0x70>
  {
    case GPIOA_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8005de4:	2004      	movs	r0, #4
 8005de6:	2101      	movs	r1, #1
 8005de8:	f000 fbcc 	bl	8006584 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 8005dec:	2004      	movs	r0, #4
 8005dee:	e024      	b.n	8005e3a <GPIO_DeInit+0x96>
      break;

    case GPIOB_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8005df0:	2008      	movs	r0, #8
 8005df2:	2101      	movs	r1, #1
 8005df4:	f000 fbc6 	bl	8006584 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 8005df8:	2008      	movs	r0, #8
 8005dfa:	e01e      	b.n	8005e3a <GPIO_DeInit+0x96>
      break;

    case GPIOC_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8005dfc:	2010      	movs	r0, #16
 8005dfe:	2101      	movs	r1, #1
 8005e00:	f000 fbc0 	bl	8006584 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 8005e04:	2010      	movs	r0, #16
 8005e06:	e018      	b.n	8005e3a <GPIO_DeInit+0x96>
      break;

    case GPIOD_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 8005e08:	2020      	movs	r0, #32
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	f000 fbba 	bl	8006584 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 8005e10:	2020      	movs	r0, #32
 8005e12:	e012      	b.n	8005e3a <GPIO_DeInit+0x96>
      break;
      
    case GPIOE_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 8005e14:	2040      	movs	r0, #64
 8005e16:	2101      	movs	r1, #1
 8005e18:	f000 fbb4 	bl	8006584 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 8005e1c:	2040      	movs	r0, #64
 8005e1e:	e00c      	b.n	8005e3a <GPIO_DeInit+0x96>
      break; 

    case GPIOF_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 8005e20:	2080      	movs	r0, #128
 8005e22:	2101      	movs	r1, #1
 8005e24:	f000 fbae 	bl	8006584 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 8005e28:	2080      	movs	r0, #128
 8005e2a:	e006      	b.n	8005e3a <GPIO_DeInit+0x96>
      break;

    case GPIOG_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 8005e2c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005e30:	2101      	movs	r1, #1
 8005e32:	f000 fba7 	bl	8006584 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 8005e36:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	f000 fba2 	bl	8006584 <RCC_APB2PeriphResetCmd>
      break;                       

    default:
      break;
  }
}
 8005e40:	b003      	add	sp, #12
 8005e42:	bd00      	pop	{pc}
 8005e44:	40011400 	.word	0x40011400
 8005e48:	40011c00 	.word	0x40011c00

08005e4c <NVIC_DeInit>:
*******************************************************************************/
void NVIC_DeInit(void)
{
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
 8005e4c:	4b0b      	ldr	r3, [pc, #44]	(8005e7c <NVIC_DeInit+0x30>)
 8005e4e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  NVIC->ICER[1] = 0x0FFFFFFF;
 8005e52:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
*******************************************************************************/
void NVIC_DeInit(void)
{
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
 8005e56:	f8c3 1080 	str.w	r1, [r3, #128]
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
  {
     NVIC->IPR[index] = 0x00000000;
 8005e5a:	4618      	mov	r0, r3
void NVIC_DeInit(void)
{
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
 8005e5c:	f8c3 2084 	str.w	r2, [r3, #132]
  NVIC->ICPR[0] = 0xFFFFFFFF;
 8005e60:	f8c3 1180 	str.w	r1, [r3, #384]
  NVIC->ICPR[1] = 0x0FFFFFFF;
 8005e64:	f8c3 2184 	str.w	r2, [r3, #388]
  
  for(index = 0; index < 0x0F; index++)
  {
     NVIC->IPR[index] = 0x00000000;
 8005e68:	2100      	movs	r1, #0
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
 8005e6a:	2200      	movs	r2, #0
  
  for(index = 0; index < 0x0F; index++)
  {
     NVIC->IPR[index] = 0x00000000;
 8005e6c:	f102 03c0 	add.w	r3, r2, #192	; 0xc0
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
 8005e70:	3201      	adds	r2, #1
 8005e72:	2a0f      	cmp	r2, #15
  {
     NVIC->IPR[index] = 0x00000000;
 8005e74:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
 8005e78:	d1f8      	bne.n	8005e6c <NVIC_DeInit+0x20>
  {
     NVIC->IPR[index] = 0x00000000;
  } 
}
 8005e7a:	4770      	bx	lr
 8005e7c:	e000e100 	.word	0xe000e100

08005e80 <NVIC_SCBDeInit>:
*******************************************************************************/
void NVIC_SCBDeInit(void)
{
  u32 index = 0x00;
  
  SCB->ICSR = 0x0A000000;
 8005e80:	4a09      	ldr	r2, [pc, #36]	(8005ea8 <NVIC_SCBDeInit+0x28>)
 8005e82:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
  SCB->VTOR = 0x00000000;
  SCB->AIRCR = AIRCR_VECTKEY_MASK;
 8005e86:	4909      	ldr	r1, [pc, #36]	(8005eac <NVIC_SCBDeInit+0x2c>)
*******************************************************************************/
void NVIC_SCBDeInit(void)
{
  u32 index = 0x00;
  
  SCB->ICSR = 0x0A000000;
 8005e88:	6053      	str	r3, [r2, #4]
  SCB->VTOR = 0x00000000;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	6093      	str	r3, [r2, #8]
  SCB->AIRCR = AIRCR_VECTKEY_MASK;
 8005e8e:	60d1      	str	r1, [r2, #12]
  SCB->SCR = 0x00000000;
 8005e90:	6113      	str	r3, [r2, #16]
  SCB->CCR = 0x00000000;
 8005e92:	6153      	str	r3, [r2, #20]
  for(index = 0; index < 0x03; index++)
  {
     SCB->SHPR[index] = 0;
 8005e94:	6193      	str	r3, [r2, #24]
 8005e96:	61d3      	str	r3, [r2, #28]
 8005e98:	6213      	str	r3, [r2, #32]
  }
  SCB->SHCSR = 0x00000000;
 8005e9a:	6253      	str	r3, [r2, #36]
  SCB->CFSR = 0xFFFFFFFF;
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	6293      	str	r3, [r2, #40]
  SCB->HFSR = 0xFFFFFFFF;
 8005ea0:	62d3      	str	r3, [r2, #44]
  SCB->DFSR = 0xFFFFFFFF;
 8005ea2:	6313      	str	r3, [r2, #48]
}
 8005ea4:	4770      	bx	lr
 8005ea6:	46c0      	nop			(mov r8, r8)
 8005ea8:	e000ed00 	.word	0xe000ed00
 8005eac:	05fa0000 	.word	0x05fa0000

08005eb0 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8005eb0:	f040 60be 	orr.w	r0, r0, #99614720	; 0x5f00000
 8005eb4:	4b02      	ldr	r3, [pc, #8]	(8005ec0 <NVIC_PriorityGroupConfig+0x10>)
 8005eb6:	f440 2020 	orr.w	r0, r0, #655360	; 0xa0000
 8005eba:	60d8      	str	r0, [r3, #12]
}
 8005ebc:	4770      	bx	lr
 8005ebe:	46c0      	nop			(mov r8, r8)
 8005ec0:	e000ed00 	.word	0xe000ed00

08005ec4 <NVIC_Init>:
*                    specified NVIC peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8005ec4:	b530      	push	{r4, r5, lr}
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_InitStruct->NVIC_IRQChannel));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8005ec6:	78c3      	ldrb	r3, [r0, #3]
 8005ec8:	7805      	ldrb	r5, [r0, #0]
 8005eca:	b35b      	cbz	r3, 8005f24 <NVIC_Init+0x60>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8005ecc:	4b1a      	ldr	r3, [pc, #104]	(8005f38 <NVIC_Init+0x74>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8005ece:	7841      	ldrb	r1, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8005ed0:	68da      	ldr	r2, [r3, #12]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 8005ed2:	4c1a      	ldr	r4, [pc, #104]	(8005f3c <NVIC_Init+0x78>)
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8005ed4:	ea6f 0202 	mvn.w	r2, r2
 8005ed8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005edc:	0a12      	lsrs	r2, r2, #8
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8005ede:	f1c2 0304 	rsb	r3, r2, #4	; 0x4
 8005ee2:	4099      	lsls	r1, r3
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8005ee4:	230f      	movs	r3, #15
 8005ee6:	40d3      	lsrs	r3, r2
 8005ee8:	7882      	ldrb	r2, [r0, #2]

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8005eea:	f005 0003 	and.w	r0, r5, #3	; 0x3
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8005eee:	4013      	ands	r3, r2
 8005ef0:	430b      	orrs	r3, r1

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8005ef2:	00c0      	lsls	r0, r0, #3
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
 8005ef4:	011b      	lsls	r3, r3, #4
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8005ef6:	22ff      	movs	r2, #255
 8005ef8:	4082      	lsls	r2, r0
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8005efa:	4083      	lsls	r3, r0
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 8005efc:	ea4f 0c95 	mov.w	ip, r5, lsr #2
 8005f00:	f10c 0cc0 	add.w	ip, ip, #192	; 0xc0
 8005f04:	f854 102c 	ldr.w	r1, [r4, ip, lsl #2]
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
    tmppriority &= tmpmask;  
    tmpreg |= tmppriority;
 8005f08:	4013      	ands	r3, r2
    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
 8005f0a:	ea21 0102 	bic.w	r1, r1, r2
    tmppriority &= tmpmask;  
    tmpreg |= tmppriority;
 8005f0e:	430b      	orrs	r3, r1

    NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
 8005f10:	f844 302c 	str.w	r3, [r4, ip, lsl #2]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8005f14:	f005 021f 	and.w	r2, r5, #31	; 0x1f
 8005f18:	2301      	movs	r3, #1
 8005f1a:	4093      	lsls	r3, r2
 8005f1c:	0969      	lsrs	r1, r5, #5
 8005f1e:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
 8005f22:	e008      	b.n	8005f36 <NVIC_Init+0x72>
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8005f24:	f005 021f 	and.w	r2, r5, #31	; 0x1f
 8005f28:	2301      	movs	r3, #1
 8005f2a:	4093      	lsls	r3, r2
 8005f2c:	0969      	lsrs	r1, r5, #5
 8005f2e:	4a03      	ldr	r2, [pc, #12]	(8005f3c <NVIC_Init+0x78>)
 8005f30:	3120      	adds	r1, #32
 8005f32:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
}
 8005f36:	bd30      	pop	{r4, r5, pc}
 8005f38:	e000ed00 	.word	0xe000ed00
 8005f3c:	e000e100 	.word	0xe000e100

08005f40 <NVIC_StructInit>:
* Return         : None
*******************************************************************************/
void NVIC_StructInit(NVIC_InitTypeDef* NVIC_InitStruct)
{
  /* NVIC_InitStruct members default value */
  NVIC_InitStruct->NVIC_IRQChannel = 0x00;
 8005f40:	2300      	movs	r3, #0
 8005f42:	7003      	strb	r3, [r0, #0]
  NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority = 0x00;
 8005f44:	7043      	strb	r3, [r0, #1]
  NVIC_InitStruct->NVIC_IRQChannelSubPriority = 0x00;
 8005f46:	7083      	strb	r3, [r0, #2]
  NVIC_InitStruct->NVIC_IRQChannelCmd = DISABLE;
 8005f48:	70c3      	strb	r3, [r0, #3]
}
 8005f4a:	4770      	bx	lr

08005f4c <NVIC_GetCurrentPendingIRQChannel>:
* Output         : None
* Return         : Pending IRQ Channel Identifier.
*******************************************************************************/
u16 NVIC_GetCurrentPendingIRQChannel(void)
{
  return ((u16)((SCB->ICSR & (u32)0x003FF000) >> 0x0C));
 8005f4c:	4b03      	ldr	r3, [pc, #12]	(8005f5c <NVIC_GetCurrentPendingIRQChannel+0x10>)
 8005f4e:	4804      	ldr	r0, [pc, #16]	(8005f60 <NVIC_GetCurrentPendingIRQChannel+0x14>)
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	ea03 0000 	and.w	r0, r3, r0
 8005f56:	0b00      	lsrs	r0, r0, #12
}
 8005f58:	4770      	bx	lr
 8005f5a:	46c0      	nop			(mov r8, r8)
 8005f5c:	e000ed00 	.word	0xe000ed00
 8005f60:	003ff000 	.word	0x003ff000

08005f64 <NVIC_GetIRQChannelPendingBitStatus>:
  u32 tmp = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
 8005f64:	f000 031f 	and.w	r3, r0, #31	; 0x1f
 8005f68:	2201      	movs	r2, #1
 8005f6a:	409a      	lsls	r2, r3

  if (((NVIC->ISPR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp)
 8005f6c:	0940      	lsrs	r0, r0, #5
 8005f6e:	4b05      	ldr	r3, [pc, #20]	(8005f84 <NVIC_GetIRQChannelPendingBitStatus+0x20>)
 8005f70:	3040      	adds	r0, #64
 8005f72:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005f76:	4010      	ands	r0, r2
 8005f78:	4290      	cmp	r0, r2
 8005f7a:	bf14      	ite	ne
 8005f7c:	2000      	movne	r0, #0
 8005f7e:	2001      	moveq	r0, #1
  else
  {
    pendingirqstatus = RESET;
  }
  return pendingirqstatus;
}
 8005f80:	4770      	bx	lr
 8005f82:	46c0      	nop			(mov r8, r8)
 8005f84:	e000e100 	.word	0xe000e100

08005f88 <NVIC_SetIRQChannelPendingBit>:
void NVIC_SetIRQChannelPendingBit(u8 NVIC_IRQChannel)
{
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  *(vu32*) 0xE000EF00 = (u32)NVIC_IRQChannel;
 8005f88:	4b01      	ldr	r3, [pc, #4]	(8005f90 <NVIC_SetIRQChannelPendingBit+0x8>)
 8005f8a:	6018      	str	r0, [r3, #0]
}
 8005f8c:	4770      	bx	lr
 8005f8e:	46c0      	nop			(mov r8, r8)
 8005f90:	e000ef00 	.word	0xe000ef00

08005f94 <NVIC_ClearIRQChannelPendingBit>:
void NVIC_ClearIRQChannelPendingBit(u8 NVIC_IRQChannel)
{
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  NVIC->ICPR[(NVIC_IRQChannel >> 0x05)] = (u32)0x01 << (NVIC_IRQChannel & (u32)0x1F);
 8005f94:	0941      	lsrs	r1, r0, #5
 8005f96:	2301      	movs	r3, #1
 8005f98:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 8005f9c:	4083      	lsls	r3, r0
 8005f9e:	4a02      	ldr	r2, [pc, #8]	(8005fa8 <NVIC_ClearIRQChannelPendingBit+0x14>)
 8005fa0:	3160      	adds	r1, #96
 8005fa2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8005fa6:	4770      	bx	lr
 8005fa8:	e000e100 	.word	0xe000e100

08005fac <NVIC_GetCurrentActiveHandler>:
* Output         : None
* Return         : Active Handler Identifier.
*******************************************************************************/
u16 NVIC_GetCurrentActiveHandler(void)
{
  return ((u16)(SCB->ICSR & (u32)0x3FF));
 8005fac:	4b02      	ldr	r3, [pc, #8]	(8005fb8 <NVIC_GetCurrentActiveHandler+0xc>)
 8005fae:	6858      	ldr	r0, [r3, #4]
 8005fb0:	0580      	lsls	r0, r0, #22
 8005fb2:	0d80      	lsrs	r0, r0, #22
}
 8005fb4:	4770      	bx	lr
 8005fb6:	46c0      	nop			(mov r8, r8)
 8005fb8:	e000ed00 	.word	0xe000ed00

08005fbc <NVIC_GetIRQChannelActiveBitStatus>:
  u32 tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
 8005fbc:	f000 031f 	and.w	r3, r0, #31	; 0x1f
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	409a      	lsls	r2, r3

  if (((NVIC->IABR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp )
 8005fc4:	0940      	lsrs	r0, r0, #5
 8005fc6:	4b05      	ldr	r3, [pc, #20]	(8005fdc <NVIC_GetIRQChannelActiveBitStatus+0x20>)
 8005fc8:	3080      	adds	r0, #128
 8005fca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005fce:	4010      	ands	r0, r2
 8005fd0:	4290      	cmp	r0, r2
 8005fd2:	bf14      	ite	ne
 8005fd4:	2000      	movne	r0, #0
 8005fd6:	2001      	moveq	r0, #1
  else
  {
    activeirqstatus = RESET;
  }
  return activeirqstatus;
}
 8005fd8:	4770      	bx	lr
 8005fda:	46c0      	nop			(mov r8, r8)
 8005fdc:	e000e100 	.word	0xe000e100

08005fe0 <NVIC_GetCPUID>:
* Output         : None
* Return         : CPU ID.
*******************************************************************************/
u32 NVIC_GetCPUID(void)
{
  return (SCB->CPUID);
 8005fe0:	4b01      	ldr	r3, [pc, #4]	(8005fe8 <NVIC_GetCPUID+0x8>)
 8005fe2:	6818      	ldr	r0, [r3, #0]
}
 8005fe4:	4770      	bx	lr
 8005fe6:	46c0      	nop			(mov r8, r8)
 8005fe8:	e000ed00 	.word	0xe000ed00

08005fec <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (u32)0x1FFFFF80);
 8005fec:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8005ff0:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8005ff4:	4b01      	ldr	r3, [pc, #4]	(8005ffc <NVIC_SetVectorTable+0x10>)
 8005ff6:	4301      	orrs	r1, r0
 8005ff8:	6099      	str	r1, [r3, #8]
}
 8005ffa:	4770      	bx	lr
 8005ffc:	e000ed00 	.word	0xe000ed00

08006000 <NVIC_GenerateSystemReset>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_GenerateSystemReset(void)
{
  SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x04;
 8006000:	4a01      	ldr	r2, [pc, #4]	(8006008 <NVIC_GenerateSystemReset+0x8>)
 8006002:	4b02      	ldr	r3, [pc, #8]	(800600c <NVIC_GenerateSystemReset+0xc>)
 8006004:	60da      	str	r2, [r3, #12]
}
 8006006:	4770      	bx	lr
 8006008:	05fa0004 	.word	0x05fa0004
 800600c:	e000ed00 	.word	0xe000ed00

08006010 <NVIC_GenerateCoreReset>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_GenerateCoreReset(void)
{
  SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x01;
 8006010:	4a01      	ldr	r2, [pc, #4]	(8006018 <NVIC_GenerateCoreReset+0x8>)
 8006012:	4b02      	ldr	r3, [pc, #8]	(800601c <NVIC_GenerateCoreReset+0xc>)
 8006014:	60da      	str	r2, [r3, #12]
}
 8006016:	4770      	bx	lr
 8006018:	05fa0001 	.word	0x05fa0001
 800601c:	e000ed00 	.word	0xe000ed00

08006020 <NVIC_SystemLPConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8006020:	b121      	cbz	r1, 800602c <NVIC_SystemLPConfig+0xc>
  {
    SCB->SCR |= LowPowerMode;
 8006022:	4a05      	ldr	r2, [pc, #20]	(8006038 <NVIC_SystemLPConfig+0x18>)
 8006024:	6913      	ldr	r3, [r2, #16]
 8006026:	ea40 0303 	orr.w	r3, r0, r3
 800602a:	e003      	b.n	8006034 <NVIC_SystemLPConfig+0x14>
  }
  else
  {
    SCB->SCR &= (u32)(~(u32)LowPowerMode);
 800602c:	4a02      	ldr	r2, [pc, #8]	(8006038 <NVIC_SystemLPConfig+0x18>)
 800602e:	6913      	ldr	r3, [r2, #16]
 8006030:	ea23 0300 	bic.w	r3, r3, r0
 8006034:	6113      	str	r3, [r2, #16]
  }
}
 8006036:	4770      	bx	lr
 8006038:	e000ed00 	.word	0xe000ed00

0800603c <NVIC_SystemHandlerConfig>:

  /* Check the parameters */
  assert_param(IS_CONFIG_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  tmpreg =  (u32)0x01 << (SystemHandler & (u32)0x1F);
 800603c:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 8006040:	2301      	movs	r3, #1
 8006042:	fa13 f000 	lsls.w	r0, r3, r0

  if (NewState != DISABLE)
 8006046:	b121      	cbz	r1, 8006052 <NVIC_SystemHandlerConfig+0x16>
  {
    SCB->SHCSR |= tmpreg;
 8006048:	4a05      	ldr	r2, [pc, #20]	(8006060 <NVIC_SystemHandlerConfig+0x24>)
 800604a:	6a53      	ldr	r3, [r2, #36]
 800604c:	ea40 0303 	orr.w	r3, r0, r3
 8006050:	e003      	b.n	800605a <NVIC_SystemHandlerConfig+0x1e>
  }
  else
  {
    SCB->SHCSR &= ~tmpreg;
 8006052:	4a03      	ldr	r2, [pc, #12]	(8006060 <NVIC_SystemHandlerConfig+0x24>)
 8006054:	6a53      	ldr	r3, [r2, #36]
 8006056:	ea23 0300 	bic.w	r3, r3, r0
 800605a:	6253      	str	r3, [r2, #36]
  }
}
 800605c:	4770      	bx	lr
 800605e:	46c0      	nop			(mov r8, r8)
 8006060:	e000ed00 	.word	0xe000ed00

08006064 <NVIC_SystemHandlerPriorityConfig>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SystemHandlerPriorityConfig(u32 SystemHandler, u8 SystemHandlerPreemptionPriority,
                                      u8 SystemHandlerSubPriority)
{
 8006064:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_PRIORITY_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(SystemHandlerPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(SystemHandlerSubPriority));
    
  tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8006066:	4c14      	ldr	r4, [pc, #80]	(80060b8 <NVIC_SystemHandlerPriorityConfig+0x54>)
 8006068:	68e3      	ldr	r3, [r4, #12]
 800606a:	ea6f 0303 	mvn.w	r3, r3
 800606e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006072:	0a1b      	lsrs	r3, r3, #8
  tmp1 = (0x4 - tmppriority);
  tmp2 = tmp2 >> tmppriority;
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
 8006074:	f1c3 0c04 	rsb	ip, r3, #4	; 0x4
 8006078:	fa01 f10c 	lsl.w	r1, r1, ip
  tmppriority |=  SystemHandlerSubPriority & tmp2;
 800607c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006080:	fa2c f303 	lsr.w	r3, ip, r3
 8006084:	401a      	ands	r2, r3
 8006086:	430a      	orrs	r2, r1

  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
 8006088:	f000 01c0 	and.w	r1, r0, #192	; 0xc0
  tmp1 = tmp1 >> 0x06; 
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
 800608c:	0940      	lsrs	r0, r0, #5
 800608e:	f000 0018 	and.w	r0, r0, #24	; 0x18
  handlermask = (u32)0xFF << (tmp2 * 0x08);
  
  SCB->SHPR[tmp1] &= ~handlermask;
 8006092:	fa0c fc00 	lsl.w	ip, ip, r0
  tmp2 = tmp2 >> tmppriority;
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;

  tmppriority = tmppriority << 0x04;
 8006096:	0112      	lsls	r2, r2, #4
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
  handlermask = (u32)0xFF << (tmp2 * 0x08);
  
  SCB->SHPR[tmp1] &= ~handlermask;
  SCB->SHPR[tmp1] |= tmppriority;
 8006098:	4082      	lsls	r2, r0
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;

  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
  tmp1 = tmp1 >> 0x06; 
 800609a:	0989      	lsrs	r1, r1, #6
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
  handlermask = (u32)0xFF << (tmp2 * 0x08);
  
  SCB->SHPR[tmp1] &= ~handlermask;
 800609c:	3106      	adds	r1, #6
 800609e:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 80060a2:	ea23 030c 	bic.w	r3, r3, ip
 80060a6:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
  SCB->SHPR[tmp1] |= tmppriority;
 80060aa:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 80060ae:	431a      	orrs	r2, r3
 80060b0:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
}
 80060b4:	bd10      	pop	{r4, pc}
 80060b6:	46c0      	nop			(mov r8, r8)
 80060b8:	e000ed00 	.word	0xe000ed00

080060bc <NVIC_GetSystemHandlerPendingBitStatus>:
  u32 tmp = 0x00, tmppos = 0x00;

  /* Check the parameters */
  assert_param(IS_GET_PENDING_SYSTEM_HANDLER(SystemHandler));
  
  tmppos = (SystemHandler >> 0x0A);
 80060bc:	0a80      	lsrs	r0, r0, #10
  tmppos &= (u32)0x0F;

  tmppos = (u32)0x01 << tmppos;
 80060be:	f000 000f 	and.w	r0, r0, #15	; 0xf
 80060c2:	2301      	movs	r3, #1
 80060c4:	4083      	lsls	r3, r0

  tmp = SCB->SHCSR & tmppos;
 80060c6:	4a04      	ldr	r2, [pc, #16]	(80060d8 <NVIC_GetSystemHandlerPendingBitStatus+0x1c>)
 80060c8:	6a50      	ldr	r0, [r2, #36]
 80060ca:	ea03 0000 	and.w	r0, r3, r0
 80060ce:	4298      	cmp	r0, r3
 80060d0:	bf14      	ite	ne
 80060d2:	2000      	movne	r0, #0
 80060d4:	2001      	moveq	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80060d6:	4770      	bx	lr
 80060d8:	e000ed00 	.word	0xe000ed00

080060dc <NVIC_SetSystemHandlerPendingBit>:
  assert_param(IS_SET_PENDING_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
  /* Set the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << tmp);
 80060dc:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 80060e0:	2301      	movs	r3, #1
 80060e2:	4083      	lsls	r3, r0
 80060e4:	4a02      	ldr	r2, [pc, #8]	(80060f0 <NVIC_SetSystemHandlerPendingBit+0x14>)
 80060e6:	6851      	ldr	r1, [r2, #4]
 80060e8:	430b      	orrs	r3, r1
 80060ea:	6053      	str	r3, [r2, #4]
}
 80060ec:	4770      	bx	lr
 80060ee:	46c0      	nop			(mov r8, r8)
 80060f0:	e000ed00 	.word	0xe000ed00

080060f4 <NVIC_ClearSystemHandlerPendingBit>:
  assert_param(IS_CLEAR_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
  /* Clear the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << (tmp - 0x01));
 80060f4:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 80060f8:	3801      	subs	r0, #1
 80060fa:	2301      	movs	r3, #1
 80060fc:	4083      	lsls	r3, r0
 80060fe:	4a02      	ldr	r2, [pc, #8]	(8006108 <NVIC_ClearSystemHandlerPendingBit+0x14>)
 8006100:	6851      	ldr	r1, [r2, #4]
 8006102:	430b      	orrs	r3, r1
 8006104:	6053      	str	r3, [r2, #4]
}
 8006106:	4770      	bx	lr
 8006108:	e000ed00 	.word	0xe000ed00

0800610c <NVIC_GetSystemHandlerActiveBitStatus>:
  /* Check the parameters */
  assert_param(IS_GET_ACTIVE_SYSTEM_HANDLER(SystemHandler));
  
  tmppos = (SystemHandler >> 0x0E) & (u32)0x0F;

  tmppos = (u32)0x01 << tmppos;
 800610c:	0b80      	lsrs	r0, r0, #14
 800610e:	f000 000f 	and.w	r0, r0, #15	; 0xf
 8006112:	2301      	movs	r3, #1
 8006114:	4083      	lsls	r3, r0

  tmp = SCB->SHCSR & tmppos;
 8006116:	4a04      	ldr	r2, [pc, #16]	(8006128 <NVIC_GetSystemHandlerActiveBitStatus+0x1c>)
 8006118:	6a50      	ldr	r0, [r2, #36]
 800611a:	ea03 0000 	and.w	r0, r3, r0
 800611e:	4298      	cmp	r0, r3
 8006120:	bf14      	ite	ne
 8006122:	2000      	movne	r0, #0
 8006124:	2001      	moveq	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8006126:	4770      	bx	lr
 8006128:	e000ed00 	.word	0xe000ed00

0800612c <NVIC_GetFaultHandlerSources>:
  u32 tmpreg = 0x00, tmppos = 0x00;

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
 800612c:	0c83      	lsrs	r3, r0, #18
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;

  if (tmpreg == 0x00)
 800612e:	f013 0303 	ands.w	r3, r3, #3	; 0x3
 8006132:	d102      	bne.n	800613a <NVIC_GetFaultHandlerSources+0xe>
  {
    faultsources = SCB->HFSR;
 8006134:	4b0d      	ldr	r3, [pc, #52]	(800616c <NVIC_GetFaultHandlerSources+0x40>)
 8006136:	6ad8      	ldr	r0, [r3, #44]
 8006138:	e017      	b.n	800616a <NVIC_GetFaultHandlerSources+0x3e>
  }
  else if (tmpreg == 0x01)
 800613a:	2b01      	cmp	r3, #1
 800613c:	d113      	bne.n	8006166 <NVIC_GetFaultHandlerSources+0x3a>
  {
    faultsources = SCB->CFSR >> (tmppos * 0x08);
 800613e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8006142:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8006146:	33fe      	adds	r3, #254

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;
 8006148:	0d02      	lsrs	r2, r0, #20
  {
    faultsources = SCB->HFSR;
  }
  else if (tmpreg == 0x01)
  {
    faultsources = SCB->CFSR >> (tmppos * 0x08);
 800614a:	3301      	adds	r3, #1

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;
 800614c:	f002 0203 	and.w	r2, r2, #3	; 0x3
  {
    faultsources = SCB->HFSR;
  }
  else if (tmpreg == 0x01)
  {
    faultsources = SCB->CFSR >> (tmppos * 0x08);
 8006150:	6a99      	ldr	r1, [r3, #40]
 8006152:	00d3      	lsls	r3, r2, #3
 8006154:	fa31 f003 	lsrs.w	r0, r1, r3
    if (tmppos != 0x02)
 8006158:	2a02      	cmp	r2, #2
    {
      faultsources &= (u32)0x0F;
 800615a:	bf14      	ite	ne
 800615c:	f000 000f 	andne.w	r0, r0, #15	; 0xf
    }
    else
    {
      faultsources &= (u32)0xFF;
 8006160:	f000 00ff 	andeq.w	r0, r0, #255	; 0xff
 8006164:	e001      	b.n	800616a <NVIC_GetFaultHandlerSources+0x3e>
    }
  }
  else
  {
    faultsources = SCB->DFSR;
 8006166:	4b01      	ldr	r3, [pc, #4]	(800616c <NVIC_GetFaultHandlerSources+0x40>)
 8006168:	6b18      	ldr	r0, [r3, #48]
  }
  return faultsources;
}
 800616a:	4770      	bx	lr
 800616c:	e000ed00 	.word	0xe000ed00

08006170 <NVIC_GetFaultAddress>:
  /* Check the parameters */
  assert_param(IS_FAULT_ADDRESS_SYSTEM_HANDLER(SystemHandler));
  
  tmp = (SystemHandler >> 0x16) & (u32)0x01;

  if (tmp == 0x00)
 8006170:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
  {
    faultaddress = SCB->MMFAR;
 8006174:	bf0b      	itete	eq
 8006176:	4b02      	ldreq	r3, [pc, #8]	(8006180 <NVIC_GetFaultAddress+0x10>)
  }
  else
  {
    faultaddress = SCB->BFAR;
 8006178:	4b01      	ldrne	r3, [pc, #4]	(8006180 <NVIC_GetFaultAddress+0x10>)
  
  tmp = (SystemHandler >> 0x16) & (u32)0x01;

  if (tmp == 0x00)
  {
    faultaddress = SCB->MMFAR;
 800617a:	6b58      	ldreq	r0, [r3, #52]
  }
  else
  {
    faultaddress = SCB->BFAR;
 800617c:	6b98      	ldrne	r0, [r3, #56]
  }
  return faultaddress;
}
 800617e:	4770      	bx	lr
 8006180:	e000ed00 	.word	0xe000ed00

08006184 <NVIC_GetBASEPRI>:
* Input          : None
* Output         : None
* Return         : BASEPRI register value
*******************************************************************************/
u32 NVIC_GetBASEPRI(void)
{
 8006184:	b500      	push	{lr}
 8006186:	b081      	sub	sp, #4
  return (__GetBASEPRI());
 8006188:	f000 fcc4 	bl	8006b14 <__GetBASEPRI>
}
 800618c:	b001      	add	sp, #4
 800618e:	bd00      	pop	{pc}

08006190 <NVIC_BASEPRICONFIG>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_BASEPRICONFIG(u32 NewPriority)
{
 8006190:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_NVIC_BASE_PRI(NewPriority));
  
  __BASEPRICONFIG(NewPriority << 0x04);
 8006192:	0100      	lsls	r0, r0, #4
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_BASEPRICONFIG(u32 NewPriority)
{
 8006194:	b081      	sub	sp, #4
  /* Check the parameters */
  assert_param(IS_NVIC_BASE_PRI(NewPriority));
  
  __BASEPRICONFIG(NewPriority << 0x04);
 8006196:	f000 fcba 	bl	8006b0e <__BASEPRICONFIG>
}
 800619a:	b001      	add	sp, #4
 800619c:	bd00      	pop	{pc}
 800619e:	46c0      	nop			(mov r8, r8)

080061a0 <NVIC_RESETFAULTMASK>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_RESETFAULTMASK(void)
{
 80061a0:	b500      	push	{lr}
 80061a2:	b081      	sub	sp, #4
  __RESETFAULTMASK();
 80061a4:	f000 fcb1 	bl	8006b0a <__RESETFAULTMASK>
}
 80061a8:	b001      	add	sp, #4
 80061aa:	bd00      	pop	{pc}

080061ac <NVIC_SETFAULTMASK>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SETFAULTMASK(void)
{
 80061ac:	b500      	push	{lr}
 80061ae:	b081      	sub	sp, #4
  __SETFAULTMASK();
 80061b0:	f000 fca9 	bl	8006b06 <__SETFAULTMASK>
}
 80061b4:	b001      	add	sp, #4
 80061b6:	bd00      	pop	{pc}

080061b8 <NVIC_RESETPRIMASK>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_RESETPRIMASK(void)
{
 80061b8:	b500      	push	{lr}
 80061ba:	b081      	sub	sp, #4
  __RESETPRIMASK();
 80061bc:	f000 fca1 	bl	8006b02 <__RESETPRIMASK>
}
 80061c0:	b001      	add	sp, #4
 80061c2:	bd00      	pop	{pc}

080061c4 <NVIC_SETPRIMASK>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SETPRIMASK(void)
{
 80061c4:	b500      	push	{lr}
 80061c6:	b081      	sub	sp, #4
  __SETPRIMASK();
 80061c8:	f000 fc99 	bl	8006afe <__SETPRIMASK>
}
 80061cc:	b001      	add	sp, #4
 80061ce:	bd00      	pop	{pc}

080061d0 <PWR_BackupAccessCmd>:
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_DBP_BB = (u32)NewState;
 80061d0:	4b01      	ldr	r3, [pc, #4]	(80061d8 <PWR_BackupAccessCmd+0x8>)
 80061d2:	6018      	str	r0, [r3, #0]
}
 80061d4:	4770      	bx	lr
 80061d6:	46c0      	nop			(mov r8, r8)
 80061d8:	420e0020 	.word	0x420e0020

080061dc <PWR_PVDCmd>:
void PWR_PVDCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PVDE_BB = (u32)NewState;
 80061dc:	4b01      	ldr	r3, [pc, #4]	(80061e4 <PWR_PVDCmd+0x8>)
 80061de:	6018      	str	r0, [r3, #0]
}
 80061e0:	4770      	bx	lr
 80061e2:	46c0      	nop			(mov r8, r8)
 80061e4:	420e0010 	.word	0x420e0010

080061e8 <PWR_PVDLevelConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));

  tmpreg = PWR->CR;
 80061e8:	4a03      	ldr	r2, [pc, #12]	(80061f8 <PWR_PVDLevelConfig+0x10>)
 80061ea:	6813      	ldr	r3, [r2, #0]

  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_Mask;
 80061ec:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0

  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 80061f0:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 80061f2:	6010      	str	r0, [r2, #0]
}
 80061f4:	4770      	bx	lr
 80061f6:	46c0      	nop			(mov r8, r8)
 80061f8:	40007000 	.word	0x40007000

080061fc <PWR_WakeUpPinCmd>:
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CSR_EWUP_BB = (u32)NewState;
 80061fc:	4b01      	ldr	r3, [pc, #4]	(8006204 <PWR_WakeUpPinCmd+0x8>)
 80061fe:	6018      	str	r0, [r3, #0]
}
 8006200:	4770      	bx	lr
 8006202:	46c0      	nop			(mov r8, r8)
 8006204:	420e00a0 	.word	0x420e00a0

08006208 <PWR_GetFlagStatus>:
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (u32)RESET)
 8006208:	4b03      	ldr	r3, [pc, #12]	(8006218 <PWR_GetFlagStatus+0x10>)
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	4218      	tst	r0, r3
 800620e:	bf0c      	ite	eq
 8006210:	2000      	moveq	r0, #0
 8006212:	2001      	movne	r0, #1
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 8006214:	4770      	bx	lr
 8006216:	46c0      	nop			(mov r8, r8)
 8006218:	40007000 	.word	0x40007000

0800621c <PWR_ClearFlag>:
void PWR_ClearFlag(u32 PWR_FLAG)
{
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 800621c:	4a02      	ldr	r2, [pc, #8]	(8006228 <PWR_ClearFlag+0xc>)
 800621e:	6813      	ldr	r3, [r2, #0]
 8006220:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 8006224:	6013      	str	r3, [r2, #0]
}
 8006226:	4770      	bx	lr
 8006228:	40007000 	.word	0x40007000

0800622c <PWR_EnterSTANDBYMode>:
* Return         : None
*******************************************************************************/
void PWR_EnterSTANDBYMode(void)
{
  /* Clear Wake-up flag */
  PWR->CR |= CR_CWUF_Set;
 800622c:	4a0b      	ldr	r2, [pc, #44]	(800625c <PWR_EnterSTANDBYMode+0x30>)
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_EnterSTANDBYMode(void)
{
 800622e:	b500      	push	{lr}
  /* Clear Wake-up flag */
  PWR->CR |= CR_CWUF_Set;
 8006230:	6813      	ldr	r3, [r2, #0]
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_EnterSTANDBYMode(void)
{
 8006232:	b081      	sub	sp, #4
  /* Clear Wake-up flag */
  PWR->CR |= CR_CWUF_Set;
 8006234:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 8006238:	6013      	str	r3, [r2, #0]

  /* Select STANDBY mode */
  PWR->CR |= CR_PDDS_Set;
 800623a:	6813      	ldr	r3, [r2, #0]
 800623c:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 8006240:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 8006242:	f102 4220 	add.w	r2, r2, #2684354560	; 0xa0000000
 8006246:	f502 42fa 	add.w	r2, r2, #32000	; 0x7d00
 800624a:	3210      	adds	r2, #16
 800624c:	6813      	ldr	r3, [r2, #0]
 800624e:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 8006252:	6013      	str	r3, [r2, #0]

  /* Request Wait For Interrupt */
  __WFI();
 8006254:	f000 fc2e 	bl	8006ab4 <__WFI>
}
 8006258:	b001      	add	sp, #4
 800625a:	bd00      	pop	{pc}
 800625c:	40007000 	.word	0x40007000

08006260 <PWR_EnterSTOPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8006260:	4a0c      	ldr	r2, [pc, #48]	(8006294 <PWR_EnterSTOPMode+0x34>)
*                       - PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_EnterSTOPMode(u32 PWR_Regulator, u8 PWR_STOPEntry)
{
 8006262:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8006264:	6813      	ldr	r3, [r2, #0]
*                       - PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_EnterSTOPMode(u32 PWR_Regulator, u8 PWR_STOPEntry)
{
 8006266:	b081      	sub	sp, #4
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_Mask;
 8006268:	f023 0303 	bic.w	r3, r3, #3	; 0x3

  /* Set LPDS bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 800626c:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 800626e:	6010      	str	r0, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 8006270:	f102 4220 	add.w	r2, r2, #2684354560	; 0xa0000000
 8006274:	f502 42fa 	add.w	r2, r2, #32000	; 0x7d00
 8006278:	3210      	adds	r2, #16
 800627a:	6813      	ldr	r3, [r2, #0]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 800627c:	2901      	cmp	r1, #1

  /* Store the new value */
  PWR->CR = tmpreg;

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 800627e:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 8006282:	6013      	str	r3, [r2, #0]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8006284:	d102      	bne.n	800628c <PWR_EnterSTOPMode+0x2c>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8006286:	f000 fc15 	bl	8006ab4 <__WFI>
 800628a:	e001      	b.n	8006290 <PWR_EnterSTOPMode+0x30>
  }
  else
  {
    /* Request Wait For Event */
    __WFE();
 800628c:	f000 fc14 	bl	8006ab8 <__WFE>
  }
}
 8006290:	b001      	add	sp, #4
 8006292:	bd00      	pop	{pc}
 8006294:	40007000 	.word	0x40007000

08006298 <PWR_DeInit>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_DeInit(void)
{
 8006298:	b510      	push	{r4, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 800629a:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
 800629e:	4620      	mov	r0, r4
 80062a0:	2101      	movs	r1, #1
 80062a2:	f000 f97d 	bl	80065a0 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 80062a6:	4620      	mov	r0, r4
 80062a8:	2100      	movs	r1, #0
 80062aa:	f000 f979 	bl	80065a0 <RCC_APB1PeriphResetCmd>
}
 80062ae:	bd10      	pop	{r4, pc}

080062b0 <RCC_DeInit>:
* Return         : None
*******************************************************************************/
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (u32)0x00000001;
 80062b0:	4a0d      	ldr	r2, [pc, #52]	(80062e8 <RCC_DeInit+0x38>)
 80062b2:	6813      	ldr	r3, [r2, #0]
 80062b4:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 80062b8:	6013      	str	r3, [r2, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], ADCPRE[1:0] and MCO[2:0] bits */
  RCC->CFGR &= (u32)0xF8FF0000;
 80062ba:	6851      	ldr	r1, [r2, #4]
 80062bc:	4b0b      	ldr	r3, [pc, #44]	(80062ec <RCC_DeInit+0x3c>)
 80062be:	ea01 0303 	and.w	r3, r1, r3
 80062c2:	6053      	str	r3, [r2, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (u32)0xFEF6FFFF;
 80062c4:	6813      	ldr	r3, [r2, #0]
 80062c6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80062ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062ce:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (u32)0xFFFBFFFF;
 80062d0:	6813      	ldr	r3, [r2, #0]
 80062d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062d6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL[3:0] and USBPRE bits */
  RCC->CFGR &= (u32)0xFF80FFFF;
 80062d8:	6853      	ldr	r3, [r2, #4]
 80062da:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80062de:	6053      	str	r3, [r2, #4]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80062e0:	2300      	movs	r3, #0
 80062e2:	6093      	str	r3, [r2, #8]
}
 80062e4:	4770      	bx	lr
 80062e6:	46c0      	nop			(mov r8, r8)
 80062e8:	40021000 	.word	0x40021000
 80062ec:	f8ff0000 	.word	0xf8ff0000

080062f0 <RCC_HSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 80062f0:	4a0b      	ldr	r2, [pc, #44]	(8006320 <RCC_HSEConfig+0x30>)

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 80062f2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 80062f6:	6813      	ldr	r3, [r2, #0]
 80062f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062fc:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 80062fe:	6813      	ldr	r3, [r2, #0]
 8006300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006304:	6013      	str	r3, [r2, #0]

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8006306:	d003      	beq.n	8006310 <RCC_HSEConfig+0x20>
 8006308:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 800630c:	d107      	bne.n	800631e <RCC_HSEConfig+0x2e>
 800630e:	e002      	b.n	8006316 <RCC_HSEConfig+0x26>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8006310:	6813      	ldr	r3, [r2, #0]
 8006312:	4303      	orrs	r3, r0
 8006314:	e002      	b.n	800631c <RCC_HSEConfig+0x2c>
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8006316:	6813      	ldr	r3, [r2, #0]
 8006318:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 800631c:	6013      	str	r3, [r2, #0]
      break;            
      
    default:
      break;      
  }
}
 800631e:	4770      	bx	lr
 8006320:	40021000 	.word	0x40021000

08006324 <RCC_WaitForHSEStartUp>:
* Return         : An ErrorStatus enumuration value:
*                         - SUCCESS: HSE oscillator is stable and ready to use
*                         - ERROR: HSE oscillator not yet ready
*******************************************************************************/
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8006324:	b082      	sub	sp, #8
  vu32 StartUpCounter = 0;
 8006326:	2300      	movs	r3, #0
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8006328:	4909      	ldr	r1, [pc, #36]	(8006350 <RCC_WaitForHSEStartUp+0x2c>)
*                         - SUCCESS: HSE oscillator is stable and ready to use
*                         - ERROR: HSE oscillator not yet ready
*******************************************************************************/
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  vu32 StartUpCounter = 0;
 800632a:	9301      	str	r3, [sp, #4]
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 800632c:	680a      	ldr	r2, [r1, #0]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
 800632e:	9b01      	ldr	r3, [sp, #4]
 8006330:	3301      	adds	r3, #1
  } while((HSEStatus == RESET) && (StartUpCounter != HSEStartUp_TimeOut));
 8006332:	f412 3f00 	tst.w	r2, #131072	; 0x20000
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
 8006336:	9301      	str	r3, [sp, #4]
  } while((HSEStatus == RESET) && (StartUpCounter != HSEStartUp_TimeOut));
 8006338:	d103      	bne.n	8006342 <RCC_WaitForHSEStartUp+0x1e>
 800633a:	9b01      	ldr	r3, [sp, #4]
 800633c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006340:	d1f4      	bne.n	800632c <RCC_WaitForHSEStartUp+0x8>
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8006342:	4b03      	ldr	r3, [pc, #12]	(8006350 <RCC_WaitForHSEStartUp+0x2c>)
 8006344:	6818      	ldr	r0, [r3, #0]
 8006346:	0c40      	lsrs	r0, r0, #17
 8006348:	f000 0001 	and.w	r0, r0, #1	; 0x1
  {
    status = ERROR;
  }  

  return (status);
}
 800634c:	b002      	add	sp, #8
 800634e:	4770      	bx	lr
 8006350:	40021000 	.word	0x40021000

08006354 <RCC_AdjustHSICalibrationValue>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8006354:	4a03      	ldr	r2, [pc, #12]	(8006364 <RCC_AdjustHSICalibrationValue+0x10>)
 8006356:	6813      	ldr	r3, [r2, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 8006358:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (u32)HSICalibrationValue << 3;
 800635c:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8006360:	6013      	str	r3, [r2, #0]
}
 8006362:	4770      	bx	lr
 8006364:	40021000 	.word	0x40021000

08006368 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_HSION_BB = (u32)NewState;
 8006368:	4b01      	ldr	r3, [pc, #4]	(8006370 <RCC_HSICmd+0x8>)
 800636a:	6018      	str	r0, [r3, #0]
}
 800636c:	4770      	bx	lr
 800636e:	46c0      	nop			(mov r8, r8)
 8006370:	42420000 	.word	0x42420000

08006374 <RCC_PLLConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8006374:	4a03      	ldr	r2, [pc, #12]	(8006384 <RCC_PLLConfig+0x10>)
 8006376:	6853      	ldr	r3, [r2, #4]

  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;

  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8006378:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800637c:	4318      	orrs	r0, r3
 800637e:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8006380:	6050      	str	r0, [r2, #4]
}
 8006382:	4770      	bx	lr
 8006384:	40021000 	.word	0x40021000

08006388 <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PLLON_BB = (u32)NewState;
 8006388:	4b01      	ldr	r3, [pc, #4]	(8006390 <RCC_PLLCmd+0x8>)
 800638a:	6018      	str	r0, [r3, #0]
}
 800638c:	4770      	bx	lr
 800638e:	46c0      	nop			(mov r8, r8)
 8006390:	42420060 	.word	0x42420060

08006394 <RCC_SYSCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8006394:	4a03      	ldr	r2, [pc, #12]	(80063a4 <RCC_SYSCLKConfig+0x10>)
 8006396:	6853      	ldr	r3, [r2, #4]

  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8006398:	f023 0303 	bic.w	r3, r3, #3	; 0x3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800639c:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800639e:	6050      	str	r0, [r2, #4]
}
 80063a0:	4770      	bx	lr
 80063a2:	46c0      	nop			(mov r8, r8)
 80063a4:	40021000 	.word	0x40021000

080063a8 <RCC_GetSYSCLKSource>:
*                       - 0x04: HSE used as system clock
*                       - 0x08: PLL used as system clock
*******************************************************************************/
u8 RCC_GetSYSCLKSource(void)
{
  return ((u8)(RCC->CFGR & CFGR_SWS_Mask));
 80063a8:	4b02      	ldr	r3, [pc, #8]	(80063b4 <RCC_GetSYSCLKSource+0xc>)
 80063aa:	6858      	ldr	r0, [r3, #4]
 80063ac:	f000 000c 	and.w	r0, r0, #12	; 0xc
}
 80063b0:	4770      	bx	lr
 80063b2:	46c0      	nop			(mov r8, r8)
 80063b4:	40021000 	.word	0x40021000

080063b8 <RCC_HCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 80063b8:	4a03      	ldr	r2, [pc, #12]	(80063c8 <RCC_HCLKConfig+0x10>)
 80063ba:	6853      	ldr	r3, [r2, #4]

  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 80063bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80063c0:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80063c2:	6050      	str	r0, [r2, #4]
}
 80063c4:	4770      	bx	lr
 80063c6:	46c0      	nop			(mov r8, r8)
 80063c8:	40021000 	.word	0x40021000

080063cc <RCC_PCLK1Config>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80063cc:	4a03      	ldr	r2, [pc, #12]	(80063dc <RCC_PCLK1Config+0x10>)
 80063ce:	6853      	ldr	r3, [r2, #4]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 80063d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80063d4:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80063d6:	6050      	str	r0, [r2, #4]
}
 80063d8:	4770      	bx	lr
 80063da:	46c0      	nop			(mov r8, r8)
 80063dc:	40021000 	.word	0x40021000

080063e0 <RCC_PCLK2Config>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80063e0:	4a03      	ldr	r2, [pc, #12]	(80063f0 <RCC_PCLK2Config+0x10>)
 80063e2:	6853      	ldr	r3, [r2, #4]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 80063e4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80063e8:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80063ec:	6053      	str	r3, [r2, #4]
}
 80063ee:	4770      	bx	lr
 80063f0:	40021000 	.word	0x40021000

080063f4 <RCC_ITConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80063f4:	b121      	cbz	r1, 8006400 <RCC_ITConfig+0xc>
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to enable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80063f6:	4a05      	ldr	r2, [pc, #20]	(800640c <RCC_ITConfig+0x18>)
 80063f8:	7813      	ldrb	r3, [r2, #0]
 80063fa:	ea40 0303 	orr.w	r3, r0, r3
 80063fe:	e003      	b.n	8006408 <RCC_ITConfig+0x14>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to disable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS &= (u8)~RCC_IT;
 8006400:	4a02      	ldr	r2, [pc, #8]	(800640c <RCC_ITConfig+0x18>)
 8006402:	7813      	ldrb	r3, [r2, #0]
 8006404:	ea23 0300 	bic.w	r3, r3, r0
 8006408:	7013      	strb	r3, [r2, #0]
  }
}
 800640a:	4770      	bx	lr
 800640c:	40021009 	.word	0x40021009

08006410 <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(u32 RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(vu32 *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8006410:	4b01      	ldr	r3, [pc, #4]	(8006418 <RCC_USBCLKConfig+0x8>)
 8006412:	6018      	str	r0, [r3, #0]
}
 8006414:	4770      	bx	lr
 8006416:	46c0      	nop			(mov r8, r8)
 8006418:	424200d8 	.word	0x424200d8

0800641c <RCC_ADCCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));

  tmpreg = RCC->CFGR;
 800641c:	4a03      	ldr	r2, [pc, #12]	(800642c <RCC_ADCCLKConfig+0x10>)
 800641e:	6853      	ldr	r3, [r2, #4]

  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8006420:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000

  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8006424:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8006426:	6050      	str	r0, [r2, #4]
}
 8006428:	4770      	bx	lr
 800642a:	46c0      	nop			(mov r8, r8)
 800642c:	40021000 	.word	0x40021000

08006430 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 8006430:	4a06      	ldr	r2, [pc, #24]	(800644c <RCC_LSEConfig+0x1c>)
 8006432:	2300      	movs	r3, #0

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8006434:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 8006436:	7013      	strb	r3, [r2, #0]

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 8006438:	7013      	strb	r3, [r2, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_ON;
 800643a:	bf08      	it	eq
 800643c:	7010      	strbeq	r0, [r2, #0]

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 800643e:	d003      	beq.n	8006448 <RCC_LSEConfig+0x18>
 8006440:	2804      	cmp	r0, #4
 8006442:	d101      	bne.n	8006448 <RCC_LSEConfig+0x18>
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8006444:	2305      	movs	r3, #5
 8006446:	7013      	strb	r3, [r2, #0]
      break;            
      
    default:
      break;      
  }
}
 8006448:	4770      	bx	lr
 800644a:	46c0      	nop			(mov r8, r8)
 800644c:	40021020 	.word	0x40021020

08006450 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CSR_LSION_BB = (u32)NewState;
 8006450:	4b01      	ldr	r3, [pc, #4]	(8006458 <RCC_LSICmd+0x8>)
 8006452:	6018      	str	r0, [r3, #0]
}
 8006454:	4770      	bx	lr
 8006456:	46c0      	nop			(mov r8, r8)
 8006458:	42420480 	.word	0x42420480

0800645c <RCC_RTCCLKConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 800645c:	4a02      	ldr	r2, [pc, #8]	(8006468 <RCC_RTCCLKConfig+0xc>)
 800645e:	6a13      	ldr	r3, [r2, #32]
 8006460:	4318      	orrs	r0, r3
 8006462:	6210      	str	r0, [r2, #32]
}
 8006464:	4770      	bx	lr
 8006466:	46c0      	nop			(mov r8, r8)
 8006468:	40021000 	.word	0x40021000

0800646c <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) BDCR_RTCEN_BB = (u32)NewState;
 800646c:	4b01      	ldr	r3, [pc, #4]	(8006474 <RCC_RTCCLKCmd+0x8>)
 800646e:	6018      	str	r0, [r3, #0]
}
 8006470:	4770      	bx	lr
 8006472:	46c0      	nop			(mov r8, r8)
 8006474:	4242043c 	.word	0x4242043c

08006478 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8006478:	4929      	ldr	r1, [pc, #164]	(8006520 <RCC_GetClocksFreq+0xa8>)
*                    will hold the clocks frequencies.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800647a:	4684      	mov	ip, r0
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 800647c:	684b      	ldr	r3, [r1, #4]

  switch (tmp)
 800647e:	f003 030c 	and.w	r3, r3, #12	; 0xc
 8006482:	2b04      	cmp	r3, #4
 8006484:	d021      	beq.n	80064ca <RCC_GetClocksFreq+0x52>
 8006486:	2b08      	cmp	r3, #8
 8006488:	d11f      	bne.n	80064ca <RCC_GetClocksFreq+0x52>
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
      break;

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800648a:	684b      	ldr	r3, [r1, #4]
      pllmull = ( pllmull >> 18) + 2;
 800648c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006490:	0c9b      	lsrs	r3, r3, #18
 8006492:	1c9a      	adds	r2, r3, #2

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8006494:	684b      	ldr	r3, [r1, #4]

      if (pllsource == 0x00)
 8006496:	f413 3f80 	tst.w	r3, #65536	; 0x10000
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
 800649a:	bf08      	it	eq
 800649c:	ebc2 1342 	rsbeq	r3, r2, r2, lsl #5
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
      pllmull = ( pllmull >> 18) + 2;

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;

      if (pllsource == 0x00)
 80064a0:	d006      	beq.n	80064b0 <RCC_GetClocksFreq+0x38>
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
      }
      else
      {/* HSE selected as PLL clock entry */

        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (u32)RESET)
 80064a2:	684b      	ldr	r3, [r1, #4]
 80064a4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80064a8:	ea4f 1342 	mov.w	r3, r2, lsl #5
 80064ac:	d006      	beq.n	80064bc <RCC_GetClocksFreq+0x44>
        {/* HSE oscillator clock divided by 2 */

          RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
 80064ae:	1a9b      	subs	r3, r3, r2
 80064b0:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 80064b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80064b8:	021b      	lsls	r3, r3, #8
 80064ba:	e007      	b.n	80064cc <RCC_GetClocksFreq+0x54>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
 80064bc:	1a9b      	subs	r3, r3, r2
 80064be:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 80064c2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80064c6:	025b      	lsls	r3, r3, #9
 80064c8:	e000      	b.n	80064cc <RCC_GetClocksFreq+0x54>
        }
      }
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 80064ca:	4b16      	ldr	r3, [pc, #88]	(8006524 <RCC_GetClocksFreq+0xac>)
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80064cc:	4814      	ldr	r0, [pc, #80]	(8006520 <RCC_GetClocksFreq+0xa8>)
        }
      }
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 80064ce:	f8cc 3000 	str.w	r3, [ip]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80064d2:	6843      	ldr	r3, [r0, #4]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80064d4:	4a14      	ldr	r2, [pc, #80]	(8006528 <RCC_GetClocksFreq+0xb0>)
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80064d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80064da:	091b      	lsrs	r3, r3, #4
 80064dc:	5cd3      	ldrb	r3, [r2, r3]
 80064de:	f8dc 1000 	ldr.w	r1, [ip]
 80064e2:	40d9      	lsrs	r1, r3
 80064e4:	f8cc 1004 	str.w	r1, [ip, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80064e8:	6843      	ldr	r3, [r0, #4]
 80064ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  tmp = tmp >> 8;
  presc = APBAHBPrescTable[tmp];

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80064ee:	0a1b      	lsrs	r3, r3, #8
 80064f0:	5cd3      	ldrb	r3, [r2, r3]
 80064f2:	fa31 f303 	lsrs.w	r3, r1, r3
 80064f6:	f8cc 3008 	str.w	r3, [ip, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80064fa:	6843      	ldr	r3, [r0, #4]
 80064fc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
  tmp = tmp >> 11;
  presc = APBAHBPrescTable[tmp];

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8006500:	0adb      	lsrs	r3, r3, #11
 8006502:	5cd3      	ldrb	r3, [r2, r3]
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];

  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8006504:	4a09      	ldr	r2, [pc, #36]	(800652c <RCC_GetClocksFreq+0xb4>)
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
  tmp = tmp >> 11;
  presc = APBAHBPrescTable[tmp];

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8006506:	40d9      	lsrs	r1, r3
 8006508:	f8cc 100c 	str.w	r1, [ip, #12]

  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 800650c:	6843      	ldr	r3, [r0, #4]
 800650e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];

  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8006512:	0b9b      	lsrs	r3, r3, #14
 8006514:	5cd3      	ldrb	r3, [r2, r3]
 8006516:	fbb1 f1f3 	udiv	r1, r1, r3
 800651a:	f8cc 1010 	str.w	r1, [ip, #16]
}
 800651e:	4770      	bx	lr
 8006520:	40021000 	.word	0x40021000
 8006524:	007a1200 	.word	0x007a1200
 8006528:	08006b78 	.word	0x08006b78
 800652c:	08006b88 	.word	0x08006b88

08006530 <RCC_AHBPeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006530:	b121      	cbz	r1, 800653c <RCC_AHBPeriphClockCmd+0xc>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8006532:	4a05      	ldr	r2, [pc, #20]	(8006548 <RCC_AHBPeriphClockCmd+0x18>)
 8006534:	6953      	ldr	r3, [r2, #20]
 8006536:	ea40 0303 	orr.w	r3, r0, r3
 800653a:	e003      	b.n	8006544 <RCC_AHBPeriphClockCmd+0x14>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 800653c:	4a02      	ldr	r2, [pc, #8]	(8006548 <RCC_AHBPeriphClockCmd+0x18>)
 800653e:	6953      	ldr	r3, [r2, #20]
 8006540:	ea23 0300 	bic.w	r3, r3, r0
 8006544:	6153      	str	r3, [r2, #20]
  }
}
 8006546:	4770      	bx	lr
 8006548:	40021000 	.word	0x40021000

0800654c <RCC_APB2PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800654c:	b121      	cbz	r1, 8006558 <RCC_APB2PeriphClockCmd+0xc>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800654e:	4a05      	ldr	r2, [pc, #20]	(8006564 <RCC_APB2PeriphClockCmd+0x18>)
 8006550:	6993      	ldr	r3, [r2, #24]
 8006552:	ea40 0303 	orr.w	r3, r0, r3
 8006556:	e003      	b.n	8006560 <RCC_APB2PeriphClockCmd+0x14>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8006558:	4a02      	ldr	r2, [pc, #8]	(8006564 <RCC_APB2PeriphClockCmd+0x18>)
 800655a:	6993      	ldr	r3, [r2, #24]
 800655c:	ea23 0300 	bic.w	r3, r3, r0
 8006560:	6193      	str	r3, [r2, #24]
  }
}
 8006562:	4770      	bx	lr
 8006564:	40021000 	.word	0x40021000

08006568 <RCC_APB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006568:	b121      	cbz	r1, 8006574 <RCC_APB1PeriphClockCmd+0xc>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800656a:	4a05      	ldr	r2, [pc, #20]	(8006580 <RCC_APB1PeriphClockCmd+0x18>)
 800656c:	69d3      	ldr	r3, [r2, #28]
 800656e:	ea40 0303 	orr.w	r3, r0, r3
 8006572:	e003      	b.n	800657c <RCC_APB1PeriphClockCmd+0x14>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8006574:	4a02      	ldr	r2, [pc, #8]	(8006580 <RCC_APB1PeriphClockCmd+0x18>)
 8006576:	69d3      	ldr	r3, [r2, #28]
 8006578:	ea23 0300 	bic.w	r3, r3, r0
 800657c:	61d3      	str	r3, [r2, #28]
  }
}
 800657e:	4770      	bx	lr
 8006580:	40021000 	.word	0x40021000

08006584 <RCC_APB2PeriphResetCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006584:	b121      	cbz	r1, 8006590 <RCC_APB2PeriphResetCmd+0xc>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8006586:	4a05      	ldr	r2, [pc, #20]	(800659c <RCC_APB2PeriphResetCmd+0x18>)
 8006588:	68d3      	ldr	r3, [r2, #12]
 800658a:	ea40 0303 	orr.w	r3, r0, r3
 800658e:	e003      	b.n	8006598 <RCC_APB2PeriphResetCmd+0x14>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8006590:	4a02      	ldr	r2, [pc, #8]	(800659c <RCC_APB2PeriphResetCmd+0x18>)
 8006592:	68d3      	ldr	r3, [r2, #12]
 8006594:	ea23 0300 	bic.w	r3, r3, r0
 8006598:	60d3      	str	r3, [r2, #12]
  }
}
 800659a:	4770      	bx	lr
 800659c:	40021000 	.word	0x40021000

080065a0 <RCC_APB1PeriphResetCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80065a0:	b121      	cbz	r1, 80065ac <RCC_APB1PeriphResetCmd+0xc>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80065a2:	4a05      	ldr	r2, [pc, #20]	(80065b8 <RCC_APB1PeriphResetCmd+0x18>)
 80065a4:	6913      	ldr	r3, [r2, #16]
 80065a6:	ea40 0303 	orr.w	r3, r0, r3
 80065aa:	e003      	b.n	80065b4 <RCC_APB1PeriphResetCmd+0x14>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80065ac:	4a02      	ldr	r2, [pc, #8]	(80065b8 <RCC_APB1PeriphResetCmd+0x18>)
 80065ae:	6913      	ldr	r3, [r2, #16]
 80065b0:	ea23 0300 	bic.w	r3, r3, r0
 80065b4:	6113      	str	r3, [r2, #16]
  }
}
 80065b6:	4770      	bx	lr
 80065b8:	40021000 	.word	0x40021000

080065bc <RCC_BackupResetCmd>:
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) BDCR_BDRST_BB = (u32)NewState;
 80065bc:	4b01      	ldr	r3, [pc, #4]	(80065c4 <RCC_BackupResetCmd+0x8>)
 80065be:	6018      	str	r0, [r3, #0]
}
 80065c0:	4770      	bx	lr
 80065c2:	46c0      	nop			(mov r8, r8)
 80065c4:	42420440 	.word	0x42420440

080065c8 <RCC_ClockSecuritySystemCmd>:
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_CSSON_BB = (u32)NewState;
 80065c8:	4b01      	ldr	r3, [pc, #4]	(80065d0 <RCC_ClockSecuritySystemCmd+0x8>)
 80065ca:	6018      	str	r0, [r3, #0]
}
 80065cc:	4770      	bx	lr
 80065ce:	46c0      	nop			(mov r8, r8)
 80065d0:	4242004c 	.word	0x4242004c

080065d4 <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO[2:0] bits to select the MCO source */
  *(vu8 *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 80065d4:	4b01      	ldr	r3, [pc, #4]	(80065dc <RCC_MCOConfig+0x8>)
 80065d6:	7018      	strb	r0, [r3, #0]
}
 80065d8:	4770      	bx	lr
 80065da:	46c0      	nop			(mov r8, r8)
 80065dc:	40021007 	.word	0x40021007

080065e0 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80065e0:	0943      	lsrs	r3, r0, #5

  if (tmp == 1)               /* The flag to check is in CR register */
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d108      	bne.n	80065f8 <RCC_GetFlagStatus+0x18>
  {
    statusreg = RCC->CR;
 80065e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80065ea:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80065ee:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 80065f2:	3307      	adds	r3, #7
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	e00c      	b.n	8006612 <RCC_GetFlagStatus+0x32>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d108      	bne.n	800660e <RCC_GetFlagStatus+0x2e>
  {
    statusreg = RCC->BDCR;
 80065fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006600:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8006604:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8006608:	3306      	adds	r3, #6
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	e001      	b.n	8006612 <RCC_GetFlagStatus+0x32>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800660e:	4b04      	ldr	r3, [pc, #16]	(8006620 <RCC_GetFlagStatus+0x40>)
 8006610:	6a5b      	ldr	r3, [r3, #36]
 8006612:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 8006616:	fa33 f000 	lsrs.w	r0, r3, r0
 800661a:	f000 0001 	and.w	r0, r0, #1	; 0x1
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 800661e:	4770      	bx	lr
 8006620:	40021000 	.word	0x40021000

08006624 <RCC_ClearFlag>:
* Return         : None
*******************************************************************************/
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 8006624:	4a02      	ldr	r2, [pc, #8]	(8006630 <RCC_ClearFlag+0xc>)
 8006626:	6a53      	ldr	r3, [r2, #36]
 8006628:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800662c:	6253      	str	r3, [r2, #36]
}
 800662e:	4770      	bx	lr
 8006630:	40021000 	.word	0x40021000

08006634 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (u32)RESET)
 8006634:	4b03      	ldr	r3, [pc, #12]	(8006644 <RCC_GetITStatus+0x10>)
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	4218      	tst	r0, r3
 800663a:	bf0c      	ite	eq
 800663c:	2000      	moveq	r0, #0
 800663e:	2001      	movne	r0, #1
    bitstatus = RESET;
  }

  /* Return the RCC_IT status */
  return  bitstatus;
}
 8006640:	4770      	bx	lr
 8006642:	46c0      	nop			(mov r8, r8)
 8006644:	40021000 	.word	0x40021000

08006648 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(vu8 *) CIR_BYTE3_ADDRESS = RCC_IT;
 8006648:	4b01      	ldr	r3, [pc, #4]	(8006650 <RCC_ClearITPendingBit+0x8>)
 800664a:	7018      	strb	r0, [r3, #0]
}
 800664c:	4770      	bx	lr
 800664e:	46c0      	nop			(mov r8, r8)
 8006650:	4002100a 	.word	0x4002100a

08006654 <SysTick_CLKSourceConfig>:
void SysTick_CLKSourceConfig(u32 SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));

  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8006654:	2804      	cmp	r0, #4
 8006656:	d103      	bne.n	8006660 <SysTick_CLKSourceConfig+0xc>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8006658:	4a04      	ldr	r2, [pc, #16]	(800666c <SysTick_CLKSourceConfig+0x18>)
 800665a:	6813      	ldr	r3, [r2, #0]
 800665c:	4303      	orrs	r3, r0
 800665e:	e003      	b.n	8006668 <SysTick_CLKSourceConfig+0x14>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8006660:	4a02      	ldr	r2, [pc, #8]	(800666c <SysTick_CLKSourceConfig+0x18>)
 8006662:	6813      	ldr	r3, [r2, #0]
 8006664:	f023 0304 	bic.w	r3, r3, #4	; 0x4
 8006668:	6013      	str	r3, [r2, #0]
  }
}
 800666a:	4770      	bx	lr
 800666c:	e000e010 	.word	0xe000e010

08006670 <SysTick_SetReload>:
void SysTick_SetReload(u32 Reload)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_RELOAD(Reload));

  SysTick->LOAD = Reload;
 8006670:	4b01      	ldr	r3, [pc, #4]	(8006678 <SysTick_SetReload+0x8>)
 8006672:	6058      	str	r0, [r3, #4]
}
 8006674:	4770      	bx	lr
 8006676:	46c0      	nop			(mov r8, r8)
 8006678:	e000e010 	.word	0xe000e010

0800667c <SysTick_CounterCmd>:
void SysTick_CounterCmd(u32 SysTick_Counter)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_COUNTER(SysTick_Counter));

  if (SysTick_Counter == SysTick_Counter_Enable)
 800667c:	2801      	cmp	r0, #1
 800667e:	d103      	bne.n	8006688 <SysTick_CounterCmd+0xc>
  {
    SysTick->CTRL |= SysTick_Counter_Enable;
 8006680:	4a08      	ldr	r2, [pc, #32]	(80066a4 <SysTick_CounterCmd+0x28>)
 8006682:	6813      	ldr	r3, [r2, #0]
 8006684:	4303      	orrs	r3, r0
 8006686:	e006      	b.n	8006696 <SysTick_CounterCmd+0x1a>
  }
  else if (SysTick_Counter == SysTick_Counter_Disable) 
 8006688:	f110 0f02 	cmn.w	r0, #2	; 0x2
 800668c:	d105      	bne.n	800669a <SysTick_CounterCmd+0x1e>
  {
    SysTick->CTRL &= SysTick_Counter_Disable;
 800668e:	4a05      	ldr	r2, [pc, #20]	(80066a4 <SysTick_CounterCmd+0x28>)
 8006690:	6813      	ldr	r3, [r2, #0]
 8006692:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 8006696:	6013      	str	r3, [r2, #0]
 8006698:	e002      	b.n	80066a0 <SysTick_CounterCmd+0x24>
  }
  else /* SysTick_Counter == SysTick_Counter_Clear */
  {
    SysTick->VAL = SysTick_Counter_Clear;
 800669a:	4b02      	ldr	r3, [pc, #8]	(80066a4 <SysTick_CounterCmd+0x28>)
 800669c:	2200      	movs	r2, #0
 800669e:	609a      	str	r2, [r3, #8]
  }    
}
 80066a0:	4770      	bx	lr
 80066a2:	46c0      	nop			(mov r8, r8)
 80066a4:	e000e010 	.word	0xe000e010

080066a8 <SysTick_ITConfig>:
void SysTick_ITConfig(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80066a8:	b120      	cbz	r0, 80066b4 <SysTick_ITConfig+0xc>
  {
    SysTick->CTRL |= CTRL_TICKINT_Set;
 80066aa:	4a05      	ldr	r2, [pc, #20]	(80066c0 <SysTick_ITConfig+0x18>)
 80066ac:	6813      	ldr	r3, [r2, #0]
 80066ae:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 80066b2:	e003      	b.n	80066bc <SysTick_ITConfig+0x14>
  }
  else
  {
    SysTick->CTRL &= CTRL_TICKINT_Reset;
 80066b4:	4a02      	ldr	r2, [pc, #8]	(80066c0 <SysTick_ITConfig+0x18>)
 80066b6:	6813      	ldr	r3, [r2, #0]
 80066b8:	f023 0302 	bic.w	r3, r3, #2	; 0x2
 80066bc:	6013      	str	r3, [r2, #0]
  }
}
 80066be:	4770      	bx	lr
 80066c0:	e000e010 	.word	0xe000e010

080066c4 <SysTick_GetCounter>:
* Output         : None
* Return         : SysTick current value
*******************************************************************************/
u32 SysTick_GetCounter(void)
{
  return(SysTick->VAL);
 80066c4:	4b01      	ldr	r3, [pc, #4]	(80066cc <SysTick_GetCounter+0x8>)
 80066c6:	6898      	ldr	r0, [r3, #8]
}
 80066c8:	4770      	bx	lr
 80066ca:	46c0      	nop			(mov r8, r8)
 80066cc:	e000e010 	.word	0xe000e010

080066d0 <SysTick_GetFlagStatus>:
  assert_param(IS_SYSTICK_FLAG(SysTick_FLAG));

  /* Get the SysTick register index */
  tmp = SysTick_FLAG >> 3;

  if (tmp == 2) /* The flag to check is in CTRL register */
 80066d0:	08c3      	lsrs	r3, r0, #3
 80066d2:	2b02      	cmp	r3, #2
*                       - SysTick_FLAG_NOREF
* Output         : None
* Return         : None
*******************************************************************************/
FlagStatus SysTick_GetFlagStatus(u8 SysTick_FLAG)
{
 80066d4:	4602      	mov	r2, r0
  assert_param(IS_SYSTICK_FLAG(SysTick_FLAG));

  /* Get the SysTick register index */
  tmp = SysTick_FLAG >> 3;

  if (tmp == 2) /* The flag to check is in CTRL register */
 80066d6:	d106      	bne.n	80066e6 <SysTick_GetFlagStatus+0x16>
  {
    statusreg = SysTick->CTRL;
 80066d8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80066dc:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80066e0:	330e      	adds	r3, #14
 80066e2:	6818      	ldr	r0, [r3, #0]
 80066e4:	e001      	b.n	80066ea <SysTick_GetFlagStatus+0x1a>
  }
  else          /* The flag to check is in CALIB register */
  {
    statusreg = SysTick->CALIB;
 80066e6:	4b03      	ldr	r3, [pc, #12]	(80066f4 <SysTick_GetFlagStatus+0x24>)
 80066e8:	68d8      	ldr	r0, [r3, #12]
 80066ea:	40d0      	lsrs	r0, r2
 80066ec:	f000 0001 	and.w	r0, r0, #1	; 0x1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80066f0:	4770      	bx	lr
 80066f2:	46c0      	nop			(mov r8, r8)
 80066f4:	e000e010 	.word	0xe000e010

080066f8 <USART_StructInit>:
* Return         : None
*******************************************************************************/
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80066f8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80066fc:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80066fe:	f04f 0300 	mov.w	r3, #0	; 0x0
 8006702:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8006704:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8006706:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8006708:	f04f 030c 	mov.w	r3, #12	; 0xc
 800670c:	8143      	strh	r3, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 800670e:	f04f 0300 	mov.w	r3, #0	; 0x0
 8006712:	8183      	strh	r3, [r0, #12]
}
 8006714:	4770      	bx	lr
 8006716:	46c0      	nop			(mov r8, r8)

08006718 <USART_ClockInit>:
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8006718:	f8b1 c000 	ldrh.w	ip, [r1]
 800671c:	884b      	ldrh	r3, [r1, #2]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800671e:	8a02      	ldrh	r2, [r0, #16]
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8006720:	ea43 030c 	orr.w	r3, r3, ip
 8006724:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 8006728:	88c9      	ldrh	r1, [r1, #6]
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 800672a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 800672e:	ea43 030c 	orr.w	r3, r3, ip
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 8006732:	0412      	lsls	r2, r2, #16
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8006734:	430b      	orrs	r3, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 8006736:	0c12      	lsrs	r2, r2, #16
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8006738:	b29b      	uxth	r3, r3
 800673a:	4313      	orrs	r3, r2
 800673c:	8203      	strh	r3, [r0, #16]
}
 800673e:	4770      	bx	lr

08006740 <USART_ClockStructInit>:
* Return         : None
*******************************************************************************/
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8006740:	f04f 0300 	mov.w	r3, #0	; 0x0
 8006744:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8006746:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8006748:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 800674a:	80c3      	strh	r3, [r0, #6]
}
 800674c:	4770      	bx	lr
 800674e:	46c0      	nop			(mov r8, r8)

08006750 <USART_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006750:	b121      	cbz	r1, 800675c <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8006752:	8983      	ldrh	r3, [r0, #12]
 8006754:	b29b      	uxth	r3, r3
 8006756:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800675a:	e004      	b.n	8006766 <USART_Cmd+0x16>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 800675c:	8983      	ldrh	r3, [r0, #12]
 800675e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006762:	041b      	lsls	r3, r3, #16
 8006764:	0c1b      	lsrs	r3, r3, #16
 8006766:	8183      	strh	r3, [r0, #12]
  }
}
 8006768:	4770      	bx	lr
 800676a:	46c0      	nop			(mov r8, r8)

0800676c <USART_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  usartxbase = (*(u32*)&(USARTx));

  /* Get the USART register index */
  usartreg = (((u8)USART_IT) >> 0x05);
 800676c:	b2cb      	uxtb	r3, r1
 800676e:	ea4f 1c53 	mov.w	ip, r3, lsr #5

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;

  itmask = (((u32)0x01) << itpos);
 8006772:	f001 011f 	and.w	r1, r1, #31	; 0x1f
 8006776:	2301      	movs	r3, #1
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ITConfig(USART_TypeDef* USARTx, u16 USART_IT, FunctionalState NewState)
{
 8006778:	b082      	sub	sp, #8
  usartreg = (((u8)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;

  itmask = (((u32)0x01) << itpos);
 800677a:	fa13 f101 	lsls.w	r1, r3, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800677e:	f1bc 0f01 	cmp.w	ip, #1	; 0x1
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ITConfig(USART_TypeDef* USARTx, u16 USART_IT, FunctionalState NewState)
{
 8006782:	9001      	str	r0, [sp, #4]
  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;

  itmask = (((u32)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8006784:	d101      	bne.n	800678a <USART_ITConfig+0x1e>
  {
    usartxbase += 0x0C;
 8006786:	300c      	adds	r0, #12
 8006788:	e005      	b.n	8006796 <USART_ITConfig+0x2a>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800678a:	f1bc 0f02 	cmp.w	ip, #2	; 0x2
 800678e:	d101      	bne.n	8006794 <USART_ITConfig+0x28>
  {
    usartxbase += 0x10;
 8006790:	3010      	adds	r0, #16
 8006792:	e000      	b.n	8006796 <USART_ITConfig+0x2a>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8006794:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
 8006796:	b112      	cbz	r2, 800679e <USART_ITConfig+0x32>
  {
    *(vu32*)usartxbase  |= itmask;
 8006798:	6803      	ldr	r3, [r0, #0]
 800679a:	430b      	orrs	r3, r1
 800679c:	e002      	b.n	80067a4 <USART_ITConfig+0x38>
  }
  else
  {
    *(vu32*)usartxbase &= ~itmask;
 800679e:	6803      	ldr	r3, [r0, #0]
 80067a0:	ea23 0301 	bic.w	r3, r3, r1
 80067a4:	6003      	str	r3, [r0, #0]
  }
}
 80067a6:	b002      	add	sp, #8
 80067a8:	4770      	bx	lr
 80067aa:	46c0      	nop			(mov r8, r8)

080067ac <USART_DMACmd>:
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80067ac:	b122      	cbz	r2, 80067b8 <USART_DMACmd+0xc>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80067ae:	8a83      	ldrh	r3, [r0, #20]
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	ea41 0303 	orr.w	r3, r1, r3
 80067b6:	e003      	b.n	80067c0 <USART_DMACmd+0x14>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (u16)~USART_DMAReq;
 80067b8:	8a83      	ldrh	r3, [r0, #20]
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	ea23 0301 	bic.w	r3, r3, r1
 80067c0:	8283      	strh	r3, [r0, #20]
  }
}
 80067c2:	4770      	bx	lr

080067c4 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
 80067c4:	8a03      	ldrh	r3, [r0, #16]
 80067c6:	f023 030f 	bic.w	r3, r3, #15	; 0xf
 80067ca:	041b      	lsls	r3, r3, #16
 80067cc:	0c1b      	lsrs	r3, r3, #16
 80067ce:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 80067d0:	8a03      	ldrh	r3, [r0, #16]
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	430b      	orrs	r3, r1
 80067d6:	8203      	strh	r3, [r0, #16]
}
 80067d8:	4770      	bx	lr
 80067da:	46c0      	nop			(mov r8, r8)

080067dc <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
 80067dc:	8983      	ldrh	r3, [r0, #12]
 80067de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067e2:	041b      	lsls	r3, r3, #16
 80067e4:	0c1b      	lsrs	r3, r3, #16
 80067e6:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 80067e8:	8983      	ldrh	r3, [r0, #12]
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	4319      	orrs	r1, r3
 80067ee:	8181      	strh	r1, [r0, #12]
}
 80067f0:	4770      	bx	lr
 80067f2:	46c0      	nop			(mov r8, r8)

080067f4 <USART_ReceiverWakeUpCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 80067f4:	b121      	cbz	r1, 8006800 <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 80067f6:	8983      	ldrh	r3, [r0, #12]
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 80067fe:	e004      	b.n	800680a <USART_ReceiverWakeUpCmd+0x16>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
 8006800:	8983      	ldrh	r3, [r0, #12]
 8006802:	f023 0302 	bic.w	r3, r3, #2	; 0x2
 8006806:	041b      	lsls	r3, r3, #16
 8006808:	0c1b      	lsrs	r3, r3, #16
 800680a:	8183      	strh	r3, [r0, #12]
  }
}
 800680c:	4770      	bx	lr
 800680e:	46c0      	nop			(mov r8, r8)

08006810 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
 8006810:	8a03      	ldrh	r3, [r0, #16]
 8006812:	f023 0320 	bic.w	r3, r3, #32	; 0x20
 8006816:	041b      	lsls	r3, r3, #16
 8006818:	0c1b      	lsrs	r3, r3, #16
 800681a:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 800681c:	8a03      	ldrh	r3, [r0, #16]
 800681e:	b29b      	uxth	r3, r3
 8006820:	4319      	orrs	r1, r3
 8006822:	8201      	strh	r1, [r0, #16]
}
 8006824:	4770      	bx	lr
 8006826:	46c0      	nop			(mov r8, r8)

08006828 <USART_LINCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006828:	b121      	cbz	r1, 8006834 <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 800682a:	8a03      	ldrh	r3, [r0, #16]
 800682c:	b29b      	uxth	r3, r3
 800682e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006832:	e004      	b.n	800683e <USART_LINCmd+0x16>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
 8006834:	8a03      	ldrh	r3, [r0, #16]
 8006836:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800683a:	041b      	lsls	r3, r3, #16
 800683c:	0c1b      	lsrs	r3, r3, #16
 800683e:	8203      	strh	r3, [r0, #16]
  }
}
 8006840:	4770      	bx	lr
 8006842:	46c0      	nop			(mov r8, r8)

08006844 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (u16)0x01FF);
 8006844:	05c9      	lsls	r1, r1, #23
 8006846:	0dc9      	lsrs	r1, r1, #23
 8006848:	8081      	strh	r1, [r0, #4]
}
 800684a:	4770      	bx	lr

0800684c <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (u16)(USARTx->DR & (u16)0x01FF);
 800684c:	8880      	ldrh	r0, [r0, #4]
 800684e:	05c0      	lsls	r0, r0, #23
 8006850:	0dc0      	lsrs	r0, r0, #23
}
 8006852:	4770      	bx	lr

08006854 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
 8006854:	8983      	ldrh	r3, [r0, #12]
 8006856:	b29b      	uxth	r3, r3
 8006858:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 800685c:	8183      	strh	r3, [r0, #12]
}
 800685e:	4770      	bx	lr

08006860 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
 8006860:	8b03      	ldrh	r3, [r0, #24]
 8006862:	b2db      	uxtb	r3, r3
 8006864:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (u16)((u16)USART_GuardTime << 0x08);
 8006866:	8b03      	ldrh	r3, [r0, #24]
 8006868:	b29b      	uxth	r3, r3
 800686a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800686e:	8303      	strh	r3, [r0, #24]
}
 8006870:	4770      	bx	lr
 8006872:	46c0      	nop			(mov r8, r8)

08006874 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
 8006874:	8b03      	ldrh	r3, [r0, #24]
 8006876:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800687a:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 800687c:	8b03      	ldrh	r3, [r0, #24]
 800687e:	b29b      	uxth	r3, r3
 8006880:	430b      	orrs	r3, r1
 8006882:	8303      	strh	r3, [r0, #24]
}
 8006884:	4770      	bx	lr
 8006886:	46c0      	nop			(mov r8, r8)

08006888 <USART_SmartCardCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006888:	b121      	cbz	r1, 8006894 <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 800688a:	8a83      	ldrh	r3, [r0, #20]
 800688c:	b29b      	uxth	r3, r3
 800688e:	f043 0320 	orr.w	r3, r3, #32	; 0x20
 8006892:	e004      	b.n	800689e <USART_SmartCardCmd+0x16>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
 8006894:	8a83      	ldrh	r3, [r0, #20]
 8006896:	f023 0320 	bic.w	r3, r3, #32	; 0x20
 800689a:	041b      	lsls	r3, r3, #16
 800689c:	0c1b      	lsrs	r3, r3, #16
 800689e:	8283      	strh	r3, [r0, #20]
  }
}
 80068a0:	4770      	bx	lr
 80068a2:	46c0      	nop			(mov r8, r8)

080068a4 <USART_SmartCardNACKCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80068a4:	b121      	cbz	r1, 80068b0 <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 80068a6:	8a83      	ldrh	r3, [r0, #20]
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 80068ae:	e004      	b.n	80068ba <USART_SmartCardNACKCmd+0x16>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
 80068b0:	8a83      	ldrh	r3, [r0, #20]
 80068b2:	f023 0310 	bic.w	r3, r3, #16	; 0x10
 80068b6:	041b      	lsls	r3, r3, #16
 80068b8:	0c1b      	lsrs	r3, r3, #16
 80068ba:	8283      	strh	r3, [r0, #20]
  }
}
 80068bc:	4770      	bx	lr
 80068be:	46c0      	nop			(mov r8, r8)

080068c0 <USART_HalfDuplexCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80068c0:	b121      	cbz	r1, 80068cc <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 80068c2:	8a83      	ldrh	r3, [r0, #20]
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	f043 0308 	orr.w	r3, r3, #8	; 0x8
 80068ca:	e004      	b.n	80068d6 <USART_HalfDuplexCmd+0x16>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
 80068cc:	8a83      	ldrh	r3, [r0, #20]
 80068ce:	f023 0308 	bic.w	r3, r3, #8	; 0x8
 80068d2:	041b      	lsls	r3, r3, #16
 80068d4:	0c1b      	lsrs	r3, r3, #16
 80068d6:	8283      	strh	r3, [r0, #20]
  }
}
 80068d8:	4770      	bx	lr
 80068da:	46c0      	nop			(mov r8, r8)

080068dc <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
 80068dc:	8a83      	ldrh	r3, [r0, #20]
 80068de:	f023 0304 	bic.w	r3, r3, #4	; 0x4
 80068e2:	041b      	lsls	r3, r3, #16
 80068e4:	0c1b      	lsrs	r3, r3, #16
 80068e6:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 80068e8:	8a83      	ldrh	r3, [r0, #20]
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	4319      	orrs	r1, r3
 80068ee:	8281      	strh	r1, [r0, #20]
}
 80068f0:	4770      	bx	lr
 80068f2:	46c0      	nop			(mov r8, r8)

080068f4 <USART_IrDACmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 80068f4:	b121      	cbz	r1, 8006900 <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 80068f6:	8a83      	ldrh	r3, [r0, #20]
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 80068fe:	e004      	b.n	800690a <USART_IrDACmd+0x16>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
 8006900:	8a83      	ldrh	r3, [r0, #20]
 8006902:	f023 0302 	bic.w	r3, r3, #2	; 0x2
 8006906:	041b      	lsls	r3, r3, #16
 8006908:	0c1b      	lsrs	r3, r3, #16
 800690a:	8283      	strh	r3, [r0, #20]
  }
}
 800690c:	4770      	bx	lr
 800690e:	46c0      	nop			(mov r8, r8)

08006910 <USART_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   

  if ((USARTx->SR & USART_FLAG) != (u16)RESET)
 8006910:	8803      	ldrh	r3, [r0, #0]
 8006912:	4219      	tst	r1, r3
 8006914:	bf0c      	ite	eq
 8006916:	2000      	moveq	r0, #0
 8006918:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800691a:	4770      	bx	lr

0800691c <USART_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
  assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   
   
  USARTx->SR = (u16)~USART_FLAG;
 800691c:	ea6f 0101 	mvn.w	r1, r1
 8006920:	b289      	uxth	r1, r1
 8006922:	8001      	strh	r1, [r0, #0]
}
 8006924:	4770      	bx	lr
 8006926:	46c0      	nop			(mov r8, r8)

08006928 <USART_GetITStatus>:
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT));
  assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */  
  
  /* Get the USART register index */
  usartreg = (((u8)USART_IT) >> 0x05);
 8006928:	b2cb      	uxtb	r3, r1
 800692a:	ea4f 1c53 	mov.w	ip, r3, lsr #5

  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;

  itmask = (u32)0x01 << itmask;
 800692e:	f001 021f 	and.w	r2, r1, #31	; 0x1f
 8006932:	2301      	movs	r3, #1
 8006934:	fa13 f202 	lsls.w	r2, r3, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8006938:	f1bc 0f01 	cmp.w	ip, #1	; 0x1
  {
    itmask &= USARTx->CR1;
 800693c:	bf08      	it	eq
 800693e:	8983      	ldrheq	r3, [r0, #12]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;

  itmask = (u32)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8006940:	d004      	beq.n	800694c <USART_GetITStatus+0x24>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8006942:	f1bc 0f02 	cmp.w	ip, #2	; 0x2
  {
    itmask &= USARTx->CR2;
 8006946:	bf0c      	ite	eq
 8006948:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800694a:	8a83      	ldrhne	r3, [r0, #20]
 800694c:	b29b      	uxth	r3, r3
 800694e:	ea02 0c03 	and.w	ip, r2, r3
  }
  
  bitpos = USART_IT >> 0x08;

  bitpos = (u32)0x01 << bitpos;
 8006952:	0a0b      	lsrs	r3, r1, #8
 8006954:	2201      	movs	r2, #1
 8006956:	409a      	lsls	r2, r3
  bitpos &= USARTx->SR;
 8006958:	8803      	ldrh	r3, [r0, #0]
 800695a:	b29b      	uxth	r3, r3

  if ((itmask != (u16)RESET)&&(bitpos != (u16)RESET))
 800695c:	421a      	tst	r2, r3
 800695e:	bf0c      	ite	eq
 8006960:	2000      	moveq	r0, #0
 8006962:	2001      	movne	r0, #1
 8006964:	f1bc 0f00 	cmp.w	ip, #0	; 0x0
 8006968:	bf0c      	ite	eq
 800696a:	2000      	moveq	r0, #0
 800696c:	f000 0001 	andne.w	r0, r0, #1	; 0x1
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 8006970:	4770      	bx	lr
 8006972:	46c0      	nop			(mov r8, r8)

08006974 <USART_ClearITPendingBit>:
  assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */
  
  bitpos = USART_IT >> 0x08;

  itmask = (u16)((u16)0x01 << bitpos);
  USARTx->SR = (u16)~itmask;
 8006974:	0a09      	lsrs	r1, r1, #8
 8006976:	2301      	movs	r3, #1
 8006978:	408b      	lsls	r3, r1
 800697a:	ea6f 0303 	mvn.w	r3, r3
 800697e:	b29b      	uxth	r3, r3
 8006980:	8003      	strh	r3, [r0, #0]
}
 8006982:	4770      	bx	lr

08006984 <USART_Init>:
  assert_param(IS_USART_PERIPH_HFC(USARTx, USART_InitStruct->USART_HardwareFlowControl));
  
  usartxbase = (*(u32*)&USARTx);

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8006984:	8a03      	ldrh	r3, [r0, #16]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (u32)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8006986:	88ca      	ldrh	r2, [r1, #6]
  usartxbase = (*(u32*)&USARTx);

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8006988:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800698c:	041b      	lsls	r3, r3, #16
 800698e:	0c1b      	lsrs	r3, r3, #16
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (u32)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8006990:	4313      	orrs	r3, r2
 8006992:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8006994:	8982      	ldrh	r2, [r0, #12]
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8006996:	b570      	push	{r4, r5, r6, lr}
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 8006998:	890b      	ldrh	r3, [r1, #8]
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800699a:	460e      	mov	r6, r1
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 800699c:	8889      	ldrh	r1, [r1, #4]
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 800699e:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 80069a2:	430b      	orrs	r3, r1
 80069a4:	8971      	ldrh	r1, [r6, #10]
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 80069a6:	f022 020c 	bic.w	r2, r2, #12	; 0xc
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 80069aa:	430b      	orrs	r3, r1
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 80069ac:	0412      	lsls	r2, r2, #16
 80069ae:	0c12      	lsrs	r2, r2, #16
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	4313      	orrs	r3, r2
 80069b4:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80069b6:	8a83      	ldrh	r3, [r0, #20]
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (u16)tmpreg;
 80069b8:	89b2      	ldrh	r2, [r6, #12]
  USARTx->CR1 = (u16)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 80069ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069be:	041b      	lsls	r3, r3, #16
 80069c0:	0c1b      	lsrs	r3, r3, #16
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80069c2:	b088      	sub	sp, #32
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (u16)tmpreg;
 80069c4:	4313      	orrs	r3, r2
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80069c6:	4605      	mov	r5, r0
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (u16)tmpreg;
 80069c8:	8283      	strh	r3, [r0, #20]
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80069ca:	9001      	str	r0, [sp, #4]
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  /* The hardware flow control is available only for USART1, USART2 and USART3 */          
  assert_param(IS_USART_PERIPH_HFC(USARTx, USART_InitStruct->USART_HardwareFlowControl));
  
  usartxbase = (*(u32*)&USARTx);
 80069cc:	4604      	mov	r4, r0
  /* Write to USART CR3 */
  USARTx->CR3 = (u16)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80069ce:	a803      	add	r0, sp, #12
 80069d0:	f7ff fd52 	bl	8006478 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 80069d4:	4b10      	ldr	r3, [pc, #64]	(8006a18 <USART_Init+0x94>)
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }

  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
  tmpreg = (integerdivider / 0x64) << 0x04;
 80069d6:	4811      	ldr	r0, [pc, #68]	(8006a1c <USART_Init+0x98>)
  USARTx->CR3 = (u16)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  if (usartxbase == USART1_BASE)
 80069d8:	429d      	cmp	r5, r3
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80069da:	bf0c      	ite	eq
 80069dc:	9b06      	ldreq	r3, [sp, #24]
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80069de:	9b05      	ldrne	r3, [sp, #20]
  }

  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
 80069e0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80069e4:	6833      	ldr	r3, [r6, #0]
 80069e6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	fbb1 f1f3 	udiv	r1, r1, r3
  tmpreg = (integerdivider / 0x64) << 0x04;
 80069f0:	fba1 2300 	umull	r2, r3, r1, r0

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((u8)0x0F);
 80069f4:	2264      	movs	r2, #100
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }

  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
  tmpreg = (integerdivider / 0x64) << 0x04;
 80069f6:	ea4f 1c53 	mov.w	ip, r3, lsr #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((u8)0x0F);
 80069fa:	fb0c 1212 	mls	r2, ip, r2, r1
 80069fe:	0112      	lsls	r2, r2, #4
 8006a00:	3232      	adds	r2, #50
 8006a02:	fba2 2300 	umull	r2, r3, r2, r0
 8006a06:	095b      	lsrs	r3, r3, #5
 8006a08:	f003 030f 	and.w	r3, r3, #15	; 0xf

  /* Write to USART BRR */
  USARTx->BRR = (u16)tmpreg;
 8006a0c:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	812b      	strh	r3, [r5, #8]
}
 8006a14:	b008      	add	sp, #32
 8006a16:	bd70      	pop	{r4, r5, r6, pc}
 8006a18:	40013800 	.word	0x40013800
 8006a1c:	51eb851f 	.word	0x51eb851f

08006a20 <USART_DeInit>:
*                     - USART1, USART2, USART3, UART4 or UART5.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_DeInit(USART_TypeDef* USARTx)
{
 8006a20:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  switch (*(u32*)&USARTx)
 8006a22:	4b22      	ldr	r3, [pc, #136]	(8006aac <USART_DeInit+0x8c>)
*                     - USART1, USART2, USART3, UART4 or UART5.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_DeInit(USART_TypeDef* USARTx)
{
 8006a24:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  switch (*(u32*)&USARTx)
 8006a26:	4298      	cmp	r0, r3
*                     - USART1, USART2, USART3, UART4 or UART5.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_DeInit(USART_TypeDef* USARTx)
{
 8006a28:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  switch (*(u32*)&USARTx)
 8006a2a:	d02b      	beq.n	8006a84 <USART_DeInit+0x64>
 8006a2c:	d808      	bhi.n	8006a40 <USART_DeInit+0x20>
 8006a2e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8006a32:	4298      	cmp	r0, r3
 8006a34:	d016      	beq.n	8006a64 <USART_DeInit+0x44>
 8006a36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a3a:	4298      	cmp	r0, r3
 8006a3c:	d134      	bne.n	8006aa8 <USART_DeInit+0x88>
 8006a3e:	e019      	b.n	8006a74 <USART_DeInit+0x54>
 8006a40:	4b1b      	ldr	r3, [pc, #108]	(8006ab0 <USART_DeInit+0x90>)
 8006a42:	4298      	cmp	r0, r3
 8006a44:	d026      	beq.n	8006a94 <USART_DeInit+0x74>
 8006a46:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8006a4a:	4298      	cmp	r0, r3
 8006a4c:	d12c      	bne.n	8006aa8 <USART_DeInit+0x88>
  {
    case USART1_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8006a4e:	2101      	movs	r1, #1
 8006a50:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006a54:	f7ff fd96 	bl	8006584 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8006a58:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	f7ff fd91 	bl	8006584 <RCC_APB2PeriphResetCmd>
 8006a62:	e021      	b.n	8006aa8 <USART_DeInit+0x88>
      break;

    case USART2_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8006a64:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006a68:	2101      	movs	r1, #1
 8006a6a:	f7ff fd99 	bl	80065a0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8006a6e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006a72:	e016      	b.n	8006aa2 <USART_DeInit+0x82>
      break;

    case USART3_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8006a74:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8006a78:	2101      	movs	r1, #1
 8006a7a:	f7ff fd91 	bl	80065a0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8006a7e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8006a82:	e00e      	b.n	8006aa2 <USART_DeInit+0x82>
      break;
    
    case UART4_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8006a84:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006a88:	2101      	movs	r1, #1
 8006a8a:	f7ff fd89 	bl	80065a0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8006a8e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006a92:	e006      	b.n	8006aa2 <USART_DeInit+0x82>
      break;
    
    case UART5_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8006a94:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006a98:	2101      	movs	r1, #1
 8006a9a:	f7ff fd81 	bl	80065a0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8006a9e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	f7ff fd7c 	bl	80065a0 <RCC_APB1PeriphResetCmd>
      break;            

    default:
      break;
  }
}
 8006aa8:	b003      	add	sp, #12
 8006aaa:	bd00      	pop	{pc}
 8006aac:	40004c00 	.word	0x40004c00
 8006ab0:	40005000 	.word	0x40005000

08006ab4 <__WFI>:
; Return         : None
;******************************************************************************/
.thumb_func
__WFI: 
 
    WFI
 8006ab4:	bf30      	wfi
    BX r14
 8006ab6:	4770      	bx	lr

08006ab8 <__WFE>:
; Return         : None
;******************************************************************************/
.thumb_func
__WFE:

    WFE
 8006ab8:	bf20      	wfe
    BX r14
 8006aba:	4770      	bx	lr

08006abc <__SEV>:
; Return         : None
;******************************************************************************/
.thumb_func
__SEV:

    SEV
 8006abc:	bf40      	sev
    BX r14
 8006abe:	4770      	bx	lr

08006ac0 <__ISB>:
; Return         : None
;******************************************************************************/
.thumb_func
__ISB:

    ISB
 8006ac0:	f3bf 8f6f 	isb	sy
    BX r14
 8006ac4:	4770      	bx	lr

08006ac6 <__DSB>:
; Return         : None
;******************************************************************************/
.thumb_func
__DSB:

    DSB
 8006ac6:	f3bf 8f4f 	dsb	sy
    BX r14
 8006aca:	4770      	bx	lr

08006acc <__DMB>:
; Return         : None
;******************************************************************************/
.thumb_func
__DMB:

    DMB
 8006acc:	f3bf 8f5f 	dmb	sy
    BX r14
 8006ad0:	4770      	bx	lr

08006ad2 <__SVC>:
; Return         : None
;******************************************************************************/
.thumb_func
__SVC:

    SVC 0x01
 8006ad2:	df01      	svc	1
    BX r14
 8006ad4:	4770      	bx	lr

08006ad6 <__MRS_CONTROL>:
; Return         : - r4 : Cortex-M3 CONTROL register value.
;******************************************************************************/
.thumb_func
__MRS_CONTROL:

  MRS  r0,control
 8006ad6:	f3ef 8014 	mrs	r0, CONTROL
  BX r14
 8006ada:	4770      	bx	lr

08006adc <__MSR_CONTROL>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_CONTROL:

  MSR control, r0
 8006adc:	f380 8814 	msr	CONTROL, r0
  ISB
 8006ae0:	f3bf 8f6f 	isb	sy
  BX r14
 8006ae4:	4770      	bx	lr

08006ae6 <__MRS_PSP>:
; Return         : - r0 : Process Stack value.
;******************************************************************************/
.thumb_func
__MRS_PSP:

  MRS r0, psp
 8006ae6:	f3ef 8009 	mrs	r0, PSP
  BX r14
 8006aea:	4770      	bx	lr

08006aec <__MSR_PSP>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_PSP:
 
    MSR psp,  r0      /* set Process Stack value*/
 8006aec:	f380 8809 	msr	PSP, r0
    BX r14
 8006af0:	4770      	bx	lr

08006af2 <__MRS_MSP>:
; Return         : - r0 : Main Stack value.
;******************************************************************************/
.thumb_func
__MRS_MSP:

  MRS r0, msp
 8006af2:	f3ef 8008 	mrs	r0, MSP
  BX r14
 8006af6:	4770      	bx	lr

08006af8 <__MSR_MSP>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_MSP: 
 
    MSR msp, r0  /*; set Main Stack value*/
 8006af8:	f380 8808 	msr	MSP, r0
    BX r14
 8006afc:	4770      	bx	lr

08006afe <__SETPRIMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__SETPRIMASK:

  CPSID i
 8006afe:	b672      	cpsid	i
  BX r14
 8006b00:	4770      	bx	lr

08006b02 <__RESETPRIMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__RESETPRIMASK:

  CPSIE i
 8006b02:	b662      	cpsie	i
  BX r14
 8006b04:	4770      	bx	lr

08006b06 <__SETFAULTMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__SETFAULTMASK:

  CPSID f
 8006b06:	b671      	cpsid	f
  BX r14
 8006b08:	4770      	bx	lr

08006b0a <__RESETFAULTMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__RESETFAULTMASK:

  CPSIE f
 8006b0a:	b661      	cpsie	f
  BX r14
 8006b0c:	4770      	bx	lr

08006b0e <__BASEPRICONFIG>:
; Return         : None
;******************************************************************************/
.thumb_func
__BASEPRICONFIG:

  MSR basepri, r0
 8006b0e:	f380 8811 	msr	BASEPRI, r0
  BX r14
 8006b12:	4770      	bx	lr

08006b14 <__GetBASEPRI>:
; Return         : - r0 : Base Priority value 
;******************************************************************************/
.thumb_func
__GetBASEPRI:

  MRS r0, basepri_max
 8006b14:	f3ef 8012 	mrs	r0, BASEPRI_MASK
  BX r14
 8006b18:	4770      	bx	lr

08006b1a <__REV_HalfWord>:
; Return         : - r0 : holds tve variable value after byte reversing.
;******************************************************************************/
.thumb_func
__REV_HalfWord: 
 
  REV16 r0, r0
 8006b1a:	ba40      	rev16	r0, r0
  BX r14
 8006b1c:	4770      	bx	lr

08006b1e <__REV_Word>:
; Return         : - r0 : holds tve variable value after byte reversing.
;******************************************************************************/
.thumb_func
__REV_Word: 
 
  REV r0, r0
 8006b1e:	ba00      	rev	r0, r0
  BX r14
 8006b20:	4770      	bx	lr
	...

08006b24 <Reset_Handler>:
* Input          :
* Output         :
* Return         :
*******************************************************************************/
void Reset_Handler(void)
{
 8006b24:	f02d 0107 	bic.w	r1, sp, #7	; 0x7
 8006b28:	4668      	mov	r0, sp
 8006b2a:	468d      	mov	sp, r1
 8006b2c:	b501      	push	{r0, lr}
 8006b2e:	2200      	movs	r2, #0

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_sidata;
    for(pulDest = &_sdata; pulDest < &_edata; )
 8006b30:	490c      	ldr	r1, [pc, #48]	(8006b64 <Reset_Handler+0x40>)
 8006b32:	f8df c034 	ldr.w	ip, [pc, #52]	; 8006b68 <Reset_Handler+0x44>
    {
        *(pulDest++) = *(pulSrc++);
 8006b36:	480d      	ldr	r0, [pc, #52]	(8006b6c <Reset_Handler+0x48>)
 8006b38:	e002      	b.n	8006b40 <Reset_Handler+0x1c>
 8006b3a:	5883      	ldr	r3, [r0, r2]
 8006b3c:	508b      	str	r3, [r1, r2]
 8006b3e:	3204      	adds	r2, #4

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_sidata;
    for(pulDest = &_sdata; pulDest < &_edata; )
 8006b40:	eb01 0302 	add.w	r3, r1, r2
 8006b44:	4563      	cmp	r3, ip
 8006b46:	d3f8      	bcc.n	8006b3a <Reset_Handler+0x16>
 8006b48:	4b09      	ldr	r3, [pc, #36]	(8006b70 <Reset_Handler+0x4c>)
    }

    //
    // Zero fill the bss segment.
    //
    for(pulDest = &_sbss; pulDest < &_ebss; )
 8006b4a:	490a      	ldr	r1, [pc, #40]	(8006b74 <Reset_Handler+0x50>)
    {
        *(pulDest++) = 0;
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	e001      	b.n	8006b54 <Reset_Handler+0x30>
 8006b50:	f843 2b04 	str.w	r2, [r3], #4
    }

    //
    // Zero fill the bss segment.
    //
    for(pulDest = &_sbss; pulDest < &_ebss; )
 8006b54:	428b      	cmp	r3, r1
 8006b56:	d3fb      	bcc.n	8006b50 <Reset_Handler+0x2c>
    }

    //
    // Call the application's entry point.
    //
    main();
 8006b58:	f7fc faec 	bl	8003134 <main>
}
 8006b5c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 8006b60:	4685      	mov	sp, r0
 8006b62:	4770      	bx	lr
 8006b64:	20000000 	.word	0x20000000
 8006b68:	200000d8 	.word	0x200000d8
 8006b6c:	08007004 	.word	0x08007004
 8006b70:	200000d8 	.word	0x200000d8
 8006b74:	20000e5c 	.word	0x20000e5c

08006b78 <APBAHBPrescTable>:
 8006b78:	00000000 	.word	0x00000000
 8006b7c:	04030201 	.word	0x04030201
 8006b80:	04030201 	.word	0x04030201
 8006b84:	09080706 	.word	0x09080706

08006b88 <ADCPrescTable>:
 8006b88:	08060402 	.word	0x08060402
 8006b8c:	72617453 	.word	0x72617453
 8006b90:	676e6974 	.word	0x676e6974
 8006b94:	6f725020 	.word	0x6f725020
 8006b98:	6d617267 	.word	0x6d617267
 8006b9c:	20796220 	.word	0x20796220
 8006ba0:	6e727574 	.word	0x6e727574
 8006ba4:	20676e69 	.word	0x20676e69
 8006ba8:	50206e6f 	.word	0x50206e6f
 8006bac:	5245574f 	.word	0x5245574f
 8006bb0:	44454c20 	.word	0x44454c20
 8006bb4:	000a0d21 	.word	0x000a0d21
 8006bb8:	74746142 	.word	0x74746142
 8006bbc:	20797265 	.word	0x20797265
 8006bc0:	746c6f56 	.word	0x746c6f56
 8006bc4:	3a656761 	.word	0x3a656761
 8006bc8:	2d650020 	.word	0x2d650020
 8006bcc:	565b2031 	.word	0x565b2031
 8006bd0:	73746c6f 	.word	0x73746c6f
 8006bd4:	50000a5d 	.word	0x50000a5d
 8006bd8:	003a5543 	.word	0x003a5543
 8006bdc:	73706228 	.word	0x73706228
 8006be0:	5a000a29 	.word	0x5a000a29
 8006be4:	003a4749 	.word	0x003a4749
 8006be8:	3a4c5844 	.word	0x3a4c5844
 8006bec:	202a2000 	.word	0x202a2000
 8006bf0:	54202a09 	.word	0x54202a09
 8006bf4:	206e7275 	.word	0x206e7275
 8006bf8:	4c206e6f 	.word	0x4c206e6f
 8006bfc:	21734445 	.word	0x21734445
 8006c00:	20000a0d 	.word	0x20000a0d
 8006c04:	2a09202a 	.word	0x2a09202a
 8006c08:	72755420 	.word	0x72755420
 8006c0c:	666f206e 	.word	0x666f206e
 8006c10:	454c2066 	.word	0x454c2066
 8006c14:	0d217344 	.word	0x0d217344
 8006c18:	007b000a 	.word	0x007b000a
 8006c1c:	00202a2c 	.word	0x00202a2c
 8006c20:	00202c2a 	.word	0x00202c2a
 8006c24:	58412820 	.word	0x58412820
 8006c28:	2932312d 	.word	0x2932312d
 8006c2c:	41282000 	.word	0x41282000
 8006c30:	38312d58 	.word	0x38312d58
 8006c34:	28200029 	.word	0x28200029
 8006c38:	532d5841 	.word	0x532d5841
 8006c3c:	20002931 	.word	0x20002931
 8006c40:	2d584128 	.word	0x2d584128
 8006c44:	29303253 	.word	0x29303253
 8006c48:	4a282000 	.word	0x4a282000
 8006c4c:	50462d48 	.word	0x50462d48
 8006c50:	20002953 	.word	0x20002953
 8006c54:	2d584d28 	.word	0x2d584d28
 8006c58:	00293832 	.word	0x00293832
 8006c5c:	000a207d 	.word	0x000a207d
 8006c60:	4c58440a 	.word	0x4c58440a
 8006c64:	56454420 	.word	0x56454420
 8006c68:	53454349 	.word	0x53454349
 8006c6c:	7e0a003a 	.word	0x7e0a003a
 8006c70:	7e7e7e7e 	.word	0x7e7e7e7e
 8006c74:	7e7e7e7e 	.word	0x7e7e7e7e
 8006c78:	7e7e7e7e 	.word	0x7e7e7e7e
 8006c7c:	7e7e7e7e 	.word	0x7e7e7e7e
 8006c80:	7e7e7e7e 	.word	0x7e7e7e7e
 8006c84:	7e7e7e7e 	.word	0x7e7e7e7e
 8006c88:	7e7e7e7e 	.word	0x7e7e7e7e
 8006c8c:	7e7e7e7e 	.word	0x7e7e7e7e
 8006c90:	7e7e7e7e 	.word	0x7e7e7e7e
 8006c94:	0a7e7e7e 	.word	0x0a7e7e7e
 8006c98:	6c500a00 	.word	0x6c500a00
 8006c9c:	6e697961 	.word	0x6e697961
 8006ca0:	6f532067 	.word	0x6f532067
 8006ca4:	6d20656d 	.word	0x6d20656d
 8006ca8:	63697375 	.word	0x63697375
 8006cac:	280a000a 	.word	0x280a000a
 8006cb0:	4c5f5249 	.word	0x4c5f5249
 8006cb4:	5249202c 	.word	0x5249202c
 8006cb8:	202c525f 	.word	0x202c525f
 8006cbc:	29534d44 	.word	0x29534d44
 8006cc0:	0028093a 	.word	0x0028093a
 8006cc4:	2050550a 	.word	0x2050550a
 8006cc8:	55205055 	.word	0x55205055
 8006ccc:	73692050 	.word	0x73692050
 8006cd0:	65727020 	.word	0x65727020
 8006cd4:	64657373 	.word	0x64657373
 8006cd8:	0a000a21 	.word	0x0a000a21
 8006cdc:	4e574f44 	.word	0x4e574f44
 8006ce0:	574f4420 	.word	0x574f4420
 8006ce4:	4f44204e 	.word	0x4f44204e
 8006ce8:	69204e57 	.word	0x69204e57
 8006cec:	72702073 	.word	0x72702073
 8006cf0:	65737365 	.word	0x65737365
 8006cf4:	000a2164 	.word	0x000a2164
 8006cf8:	46454c0a 	.word	0x46454c0a
 8006cfc:	454c2054 	.word	0x454c2054
 8006d00:	4c205446 	.word	0x4c205446
 8006d04:	20544645 	.word	0x20544645
 8006d08:	70207369 	.word	0x70207369
 8006d0c:	73736572 	.word	0x73736572
 8006d10:	0a216465 	.word	0x0a216465
 8006d14:	49520a00 	.word	0x49520a00
 8006d18:	20544847 	.word	0x20544847
 8006d1c:	48474952 	.word	0x48474952
 8006d20:	49522054 	.word	0x49522054
 8006d24:	20544847 	.word	0x20544847
 8006d28:	70207369 	.word	0x70207369
 8006d2c:	73736572 	.word	0x73736572
 8006d30:	0a216465 	.word	0x0a216465
 8006d34:	54530a00 	.word	0x54530a00
 8006d38:	20545241 	.word	0x20545241
 8006d3c:	52415453 	.word	0x52415453
 8006d40:	54532054 	.word	0x54532054
 8006d44:	20545241 	.word	0x20545241
 8006d48:	70207369 	.word	0x70207369
 8006d4c:	73736572 	.word	0x73736572
 8006d50:	0a216465 	.word	0x0a216465
 8006d54:	494d0a00 	.word	0x494d0a00
 8006d58:	494d2043 	.word	0x494d2043
 8006d5c:	494d2043 	.word	0x494d2043
 8006d60:	494d2043 	.word	0x494d2043
 8006d64:	494d2043 	.word	0x494d2043
 8006d68:	494d2043 	.word	0x494d2043
 8006d6c:	2043494d 	.word	0x2043494d
 8006d70:	2043494d 	.word	0x2043494d
 8006d74:	494d494d 	.word	0x494d494d
 8006d78:	494d2043 	.word	0x494d2043
 8006d7c:	494d2043 	.word	0x494d2043
 8006d80:	2043494d 	.word	0x2043494d
 8006d84:	2043494d 	.word	0x2043494d
 8006d88:	494d494d 	.word	0x494d494d
 8006d8c:	494d2043 	.word	0x494d2043
 8006d90:	494d2043 	.word	0x494d2043
 8006d94:	2043494d 	.word	0x2043494d
 8006d98:	2043494d 	.word	0x2043494d
 8006d9c:	494d494d 	.word	0x494d494d
 8006da0:	494d2043 	.word	0x494d2043
 8006da4:	494d2043 	.word	0x494d2043
 8006da8:	2043494d 	.word	0x2043494d
 8006dac:	2043494d 	.word	0x2043494d
 8006db0:	494d494d 	.word	0x494d494d
 8006db4:	494d2043 	.word	0x494d2043
 8006db8:	494d2043 	.word	0x494d2043
 8006dbc:	2043494d 	.word	0x2043494d
 8006dc0:	2043494d 	.word	0x2043494d
 8006dc4:	7369494d 	.word	0x7369494d
 8006dc8:	65727020 	.word	0x65727020
 8006dcc:	64657373 	.word	0x64657373
 8006dd0:	0a000a21 	.word	0x0a000a21
 8006dd4:	74696157 	.word	0x74696157
 8006dd8:	726f6620 	.word	0x726f6620
 8006ddc:	6d6f6320 	.word	0x6d6f6320
 8006de0:	646e616d 	.word	0x646e616d
 8006de4:	440a000a 	.word	0x440a000a
 8006de8:	545f4c58 	.word	0x545f4c58
 8006dec:	49414658 	.word	0x49414658
 8006df0:	46203a4c 	.word	0x46203a4c
 8006df4:	656c6961 	.word	0x656c6961
 8006df8:	72742064 	.word	0x72742064
 8006dfc:	6d736e61 	.word	0x6d736e61
 8006e00:	69207469 	.word	0x69207469
 8006e04:	7274736e 	.word	0x7274736e
 8006e08:	69746375 	.word	0x69746375
 8006e0c:	70206e6f 	.word	0x70206e6f
 8006e10:	656b6361 	.word	0x656b6361
 8006e14:	000a2174 	.word	0x000a2174
 8006e18:	4c58440a 	.word	0x4c58440a
 8006e1c:	4658525f 	.word	0x4658525f
 8006e20:	3a4c4941 	.word	0x3a4c4941
 8006e24:	69614620 	.word	0x69614620
 8006e28:	2064656c 	.word	0x2064656c
 8006e2c:	20746567 	.word	0x20746567
 8006e30:	74617473 	.word	0x74617473
 8006e34:	70207375 	.word	0x70207375
 8006e38:	656b6361 	.word	0x656b6361
 8006e3c:	72662074 	.word	0x72662074
 8006e40:	64206d6f 	.word	0x64206d6f
 8006e44:	63697665 	.word	0x63697665
 8006e48:	000a2165 	.word	0x000a2165
 8006e4c:	4c58440a 	.word	0x4c58440a
 8006e50:	4558545f 	.word	0x4558545f
 8006e54:	524f5252 	.word	0x524f5252
 8006e58:	6e49203a 	.word	0x6e49203a
 8006e5c:	72726f63 	.word	0x72726f63
 8006e60:	20746365 	.word	0x20746365
 8006e64:	74736e69 	.word	0x74736e69
 8006e68:	74637572 	.word	0x74637572
 8006e6c:	206e6f69 	.word	0x206e6f69
 8006e70:	6b636170 	.word	0x6b636170
 8006e74:	0a217465 	.word	0x0a217465
 8006e78:	58440a00 	.word	0x58440a00
 8006e7c:	41425f4c 	.word	0x41425f4c
 8006e80:	4e495f44 	.word	0x4e495f44
 8006e84:	203a5453 	.word	0x203a5453
 8006e88:	61766e49 	.word	0x61766e49
 8006e8c:	2064696c 	.word	0x2064696c
 8006e90:	74736e49 	.word	0x74736e49
 8006e94:	74637572 	.word	0x74637572
 8006e98:	206e6f69 	.word	0x206e6f69
 8006e9c:	65747962 	.word	0x65747962
 8006ea0:	440a000a 	.word	0x440a000a
 8006ea4:	425f4c58 	.word	0x425f4c58
 8006ea8:	495f4441 	.word	0x495f4441
 8006eac:	49203a44 	.word	0x49203a44
 8006eb0:	20732744 	.word	0x20732744
 8006eb4:	20746f6e 	.word	0x20746f6e
 8006eb8:	656d6173 	.word	0x656d6173
 8006ebc:	726f6620 	.word	0x726f6620
 8006ec0:	736e6920 	.word	0x736e6920
 8006ec4:	63757274 	.word	0x63757274
 8006ec8:	6e6f6974 	.word	0x6e6f6974
 8006ecc:	646e6120 	.word	0x646e6120
 8006ed0:	61747320 	.word	0x61747320
 8006ed4:	20737574 	.word	0x20737574
 8006ed8:	6b636170 	.word	0x6b636170
 8006edc:	0a737465 	.word	0x0a737465
 8006ee0:	58440a00 	.word	0x58440a00
 8006ee4:	58525f4c 	.word	0x58525f4c
 8006ee8:	54494157 	.word	0x54494157
 8006eec:	3a474e49 	.word	0x3a474e49
 8006ef0:	776f4e20 	.word	0x776f4e20
 8006ef4:	63657220 	.word	0x63657220
 8006ef8:	69766965 	.word	0x69766965
 8006efc:	7320676e 	.word	0x7320676e
 8006f00:	75746174 	.word	0x75746174
 8006f04:	61702073 	.word	0x61702073
 8006f08:	74656b63 	.word	0x74656b63
 8006f0c:	0a000a21 	.word	0x0a000a21
 8006f10:	5f4c5844 	.word	0x5f4c5844
 8006f14:	49545852 	.word	0x49545852
 8006f18:	554f454d 	.word	0x554f454d
 8006f1c:	54203a54 	.word	0x54203a54
 8006f20:	65726568 	.word	0x65726568
 8006f24:	20736920 	.word	0x20736920
 8006f28:	73206f6e 	.word	0x73206f6e
 8006f2c:	75746174 	.word	0x75746174
 8006f30:	61702073 	.word	0x61702073
 8006f34:	74656b63 	.word	0x74656b63
 8006f38:	0a000a21 	.word	0x0a000a21
 8006f3c:	5f4c5844 	.word	0x5f4c5844
 8006f40:	48435852 	.word	0x48435852
 8006f44:	534b4345 	.word	0x534b4345
 8006f48:	203a4d55 	.word	0x203a4d55
 8006f4c:	6f636e49 	.word	0x6f636e49
 8006f50:	63657272 	.word	0x63657272
 8006f54:	74732074 	.word	0x74732074
 8006f58:	73757461 	.word	0x73757461
 8006f5c:	63617020 	.word	0x63617020
 8006f60:	2074656b 	.word	0x2074656b
 8006f64:	63656863 	.word	0x63656863
 8006f68:	6d75736b 	.word	0x6d75736b
 8006f6c:	0a000a21 	.word	0x0a000a21
 8006f70:	75706e49 	.word	0x75706e49
 8006f74:	6f762074 	.word	0x6f762074
 8006f78:	6761746c 	.word	0x6761746c
 8006f7c:	72652065 	.word	0x72652065
 8006f80:	21726f72 	.word	0x21726f72
 8006f84:	410a000a 	.word	0x410a000a
 8006f88:	656c676e 	.word	0x656c676e
 8006f8c:	6d696c20 	.word	0x6d696c20
 8006f90:	65207469 	.word	0x65207469
 8006f94:	726f7272 	.word	0x726f7272
 8006f98:	0a000a21 	.word	0x0a000a21
 8006f9c:	7265764f 	.word	0x7265764f
 8006fa0:	74616568 	.word	0x74616568
 8006fa4:	72726520 	.word	0x72726520
 8006fa8:	0a21726f 	.word	0x0a21726f
 8006fac:	754f0a00 	.word	0x754f0a00
 8006fb0:	666f2074 	.word	0x666f2074
 8006fb4:	6e617220 	.word	0x6e617220
 8006fb8:	65206567 	.word	0x65206567
 8006fbc:	726f7272 	.word	0x726f7272
 8006fc0:	0a000a21 	.word	0x0a000a21
 8006fc4:	63656843 	.word	0x63656843
 8006fc8:	6d75736b 	.word	0x6d75736b
 8006fcc:	72726520 	.word	0x72726520
 8006fd0:	0a21726f 	.word	0x0a21726f
 8006fd4:	764f0a00 	.word	0x764f0a00
 8006fd8:	6f6c7265 	.word	0x6f6c7265
 8006fdc:	65206461 	.word	0x65206461
 8006fe0:	726f7272 	.word	0x726f7272
 8006fe4:	0a000a21 	.word	0x0a000a21
 8006fe8:	74736e49 	.word	0x74736e49
 8006fec:	74637572 	.word	0x74637572
 8006ff0:	206e6f69 	.word	0x206e6f69
 8006ff4:	65646f63 	.word	0x65646f63
 8006ff8:	72726520 	.word	0x72726520
 8006ffc:	0a21726f 	.word	0x0a21726f
 8007000:	00000000 	.word	0x00000000

Disassembly of section .data:

20000000 <_sdata>:
20000000:	00000002 	.word	0x00000002

20000004 <EasyEPort>:
20000004:	40010800 	.word	0x40010800
20000008:	00000001 	.word	0x00000001
2000000c:	40010800 	.word	0x40010800
20000010:	00000002 	.word	0x00000002
20000014:	40010800 	.word	0x40010800
20000018:	00000004 	.word	0x00000004
2000001c:	40010800 	.word	0x40010800
20000020:	00000008 	.word	0x00000008
20000024:	40011000 	.word	0x40011000
20000028:	00000040 	.word	0x00000040
2000002c:	40011000 	.word	0x40011000
20000030:	00000080 	.word	0x00000080
20000034:	40011000 	.word	0x40011000
20000038:	00000100 	.word	0x00000100
2000003c:	40011000 	.word	0x40011000
20000040:	00000200 	.word	0x00000200
20000044:	40010800 	.word	0x40010800
20000048:	00000100 	.word	0x00000100
2000004c:	40010800 	.word	0x40010800
20000050:	00000800 	.word	0x00000800
20000054:	40010c00 	.word	0x40010c00
20000058:	00000100 	.word	0x00000100
2000005c:	40010c00 	.word	0x40010c00
20000060:	00000200 	.word	0x00000200

20000064 <EasyButton>:
20000064:	40011000 	.word	0x40011000
20000068:	00000800 	.word	0x00000800
2000006c:	40011000 	.word	0x40011000
20000070:	00000400 	.word	0x00000400
20000074:	40010800 	.word	0x40010800
20000078:	00008000 	.word	0x00008000
2000007c:	40010800 	.word	0x40010800
20000080:	00004000 	.word	0x00004000
20000084:	40010c00 	.word	0x40010c00
20000088:	00000008 	.word	0x00000008
2000008c:	40011000 	.word	0x40011000
20000090:	00000010 	.word	0x00000010

20000094 <EasyLED>:
20000094:	40011000 	.word	0x40011000
20000098:	00002000 	.word	0x00002000
2000009c:	40010c00 	.word	0x40010c00
200000a0:	00002000 	.word	0x00002000
200000a4:	40010c00 	.word	0x40010c00
200000a8:	00004000 	.word	0x00004000
200000ac:	40010c00 	.word	0x40010c00
200000b0:	00008000 	.word	0x00008000
200000b4:	40011000 	.word	0x40011000
200000b8:	00004000 	.word	0x00004000
200000bc:	40011000 	.word	0x40011000
200000c0:	00008000 	.word	0x00008000
200000c4:	40010c00 	.word	0x40010c00
200000c8:	00001000 	.word	0x00001000

200000cc <Baudrate_DXL>:
200000cc:	000f4240 	.word	0x000f4240

200000d0 <Baudrate_ZIG>:
200000d0:	0000e100 	.word	0x0000e100

200000d4 <Baudrate_PCU>:
200000d4:	0000e100 	.word	0x0000e100

Disassembly of section .bss:

200000d8 <_sbss>:
	...

200004d8 <gbPcuWrite>:
	...

200004da <gbPcuRead>:
	...

200004dc <gbInstructionPacket>:
	...

2000057c <gbStatusPacket>:
	...

200005cc <gbRxPacketLength>:
	...

200005cd <gbRxGetLength>:
	...

200005ce <giBusUsing>:
	...

200005d0 <gbZigRead>:
	...

200005d1 <gbZigWrite>:
	...

200005d2 <gbRcvPacket>:
200005d2:	0000      	.short	0x0000
200005d4:	00000000 	.word	0x00000000

200005d8 <gbRcvPacketArduino>:
	...

200005e1 <gbRcvPacketNum>:
	...

200005e2 <gwRcvData>:
	...

200005e4 <gbRcvFlag>:
	...

200005e5 <right_V>:
	...

200005e6 <right_H>:
	...

200005e7 <left_V>:
	...

200005e8 <left_H>:
	...

200005e9 <buttons_>:
	...

200005ea <extra>:
	...

200005ec <glDelayCounter>:
200005ec:	00000000 	.word	0x00000000

200005f0 <glCountdownCounter>:
200005f0:	00000000 	.word	0x00000000

200005f4 <glDxlTimeoutCounter>:
200005f4:	00000000 	.word	0x00000000

200005f8 <glPcuTimeoutCounter>:
200005f8:	00000000 	.word	0x00000000

200005fc <glBuzzerCounter>:
200005fc:	00000000 	.word	0x00000000

20000600 <gbCounterCount>:
20000600:	00000000 	.word	0x00000000

20000604 <Millis>:
20000604:	00000000 	.word	0x00000000

20000608 <msMillis>:
20000608:	00000000 	.word	0x00000000

2000060c <ReBootToBootLoader>:
	...

2000060e <gbDxlWrite>:
	...

20000610 <gbDxlRead>:
	...

20000612 <gbZigWrite>:
	...

20000613 <gbZigRead>:
	...

20000614 <gbpPcuBuffer>:
	...

20000a14 <ReBootToBootLoader>:
	...

20000a16 <gbPcuWrite>:
	...

20000a18 <gbPcuRead>:
	...

20000a1a <gbpZigBuffer>:
	...

20000a5b <gbpDxlBuffer>:
	...

Disassembly of section ._usrstack:

20000e5c <_susrstack>:
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	5728203a 	undefined
   8:	52416e69 	subpl	r6, r1, #1680	; 0x690
   c:	614d204d 	cmpvs	sp, sp, asr #32
  10:	20686372 	rsbcs	r6, r8, r2, ror r3
  14:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  18:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  1c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  20:	43434700 	movtmi	r4, #14080	; 0x3700
  24:	5728203a 	undefined
  28:	52416e69 	subpl	r6, r1, #1680	; 0x690
  2c:	614d204d 	cmpvs	sp, sp, asr #32
  30:	20686372 	rsbcs	r6, r8, r2, ror r3
  34:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  38:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  3c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  40:	43434700 	movtmi	r4, #14080	; 0x3700
  44:	5728203a 	undefined
  48:	52416e69 	subpl	r6, r1, #1680	; 0x690
  4c:	614d204d 	cmpvs	sp, sp, asr #32
  50:	20686372 	rsbcs	r6, r8, r2, ror r3
  54:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  58:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  5c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  60:	43434700 	movtmi	r4, #14080	; 0x3700
  64:	5728203a 	undefined
  68:	52416e69 	subpl	r6, r1, #1680	; 0x690
  6c:	614d204d 	cmpvs	sp, sp, asr #32
  70:	20686372 	rsbcs	r6, r8, r2, ror r3
  74:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  78:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  7c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  80:	43434700 	movtmi	r4, #14080	; 0x3700
  84:	5728203a 	undefined
  88:	52416e69 	subpl	r6, r1, #1680	; 0x690
  8c:	614d204d 	cmpvs	sp, sp, asr #32
  90:	20686372 	rsbcs	r6, r8, r2, ror r3
  94:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  98:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  9c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  a0:	43434700 	movtmi	r4, #14080	; 0x3700
  a4:	5728203a 	undefined
  a8:	52416e69 	subpl	r6, r1, #1680	; 0x690
  ac:	614d204d 	cmpvs	sp, sp, asr #32
  b0:	20686372 	rsbcs	r6, r8, r2, ror r3
  b4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  b8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  bc:	00302e33 	eorseq	r2, r0, r3, lsr lr
  c0:	43434700 	movtmi	r4, #14080	; 0x3700
  c4:	5728203a 	undefined
  c8:	52416e69 	subpl	r6, r1, #1680	; 0x690
  cc:	614d204d 	cmpvs	sp, sp, asr #32
  d0:	20686372 	rsbcs	r6, r8, r2, ror r3
  d4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  d8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  dc:	00302e33 	eorseq	r2, r0, r3, lsr lr
  e0:	43434700 	movtmi	r4, #14080	; 0x3700
  e4:	5728203a 	undefined
  e8:	52416e69 	subpl	r6, r1, #1680	; 0x690
  ec:	614d204d 	cmpvs	sp, sp, asr #32
  f0:	20686372 	rsbcs	r6, r8, r2, ror r3
  f4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  f8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  fc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 100:	43434700 	movtmi	r4, #14080	; 0x3700
 104:	5728203a 	undefined
 108:	52416e69 	subpl	r6, r1, #1680	; 0x690
/* set up for an interpolation from pose to nextpose over TIME
 milliseconds by setting servo speeds. */
void BioloidControllerEx_interpolateSetup(int time) {
	int i;
	int frames = (time/frameLength) + 1;
	nextframe_ = getMillis() + frameLength;
 10c:	614d204d 	cmpvs	sp, sp, asr #32
	PrintString("BioloidEX BioloidControllerEx_interpolateSetup nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// set speed each servo...
	for (i = 0; i < poseSize; i++) {
 110:	20686372 	rsbcs	r6, r8, r2, ror r3
/* set up for an interpolation from pose to nextpose over TIME
 milliseconds by setting servo speeds. */
void BioloidControllerEx_interpolateSetup(int time) {
	int i;
	int frames = (time/frameLength) + 1;
	nextframe_ = getMillis() + frameLength;
 114:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 118:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
	PrintString("BioloidEX BioloidControllerEx_interpolateSetup nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// set speed each servo...
	for (i = 0; i < poseSize; i++) {
 11c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 120:	43434700 	movtmi	r4, #14080	; 0x3700
 124:	5728203a 	undefined
		if (nextpose_[i] > pose_[i]) {
 128:	52416e69 	subpl	r6, r1, #1680	; 0x690
 12c:	614d204d 	cmpvs	sp, sp, asr #32
			speed_[i] = (nextpose_[i] - pose_[i]) / frames + 1;
 130:	20686372 	rsbcs	r6, r8, r2, ror r3
		} else {
			speed_[i] = (pose_[i] - nextpose_[i]) / frames + 1;
 134:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 138:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 13c:	00302e33 	eorseq	r2, r0, r3, lsr lr
	PrintString("BioloidEX BioloidControllerEx_interpolateSetup nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// set speed each servo...
	for (i = 0; i < poseSize; i++) {
 140:	43434700 	movtmi	r4, #14080	; 0x3700
 144:	5728203a 	undefined
		PrintString(" - ");
		TxD_Dec_U16(speed_[i]);
		PrintString("\n");
#endif
	}
	interpolating = 1;
 148:	52416e69 	subpl	r6, r1, #1680	; 0x690
 14c:	614d204d 	cmpvs	sp, sp, asr #32
}
 150:	20686372 	rsbcs	r6, r8, r2, ror r3
 154:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 158:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 15c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 160:	43434700 	movtmi	r4, #14080	; 0x3700
 164:	5728203a 	undefined
 168:	52416e69 	subpl	r6, r1, #1680	; 0x690
	PrintString("\n");
#endif
}

/* new-style setup */
void Bioloid_Setup(int servo_cnt) {
 16c:	614d204d 	cmpvs	sp, sp, asr #32
 170:	20686372 	rsbcs	r6, r8, r2, ror r3
	/**id_ = (unsigned char *) malloc(servo_cnt * sizeof(unsigned char));
	 pose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
 174:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 178:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
	for (i = 0; i < poseSize; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
 17c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 180:	43434700 	movtmi	r4, #14080	; 0x3700
		nextpose_[i] = 512;
 184:	5728203a 	undefined
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
	for (i = 0; i < poseSize; i++) {
		id_[i] = i + 1;
 188:	52416e69 	subpl	r6, r1, #1680	; 0x690
		pose_[i] = 512;
 18c:	614d204d 	cmpvs	sp, sp, asr #32
		nextpose_[i] = 512;
 190:	20686372 	rsbcs	r6, r8, r2, ror r3
	 pose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
	for (i = 0; i < poseSize; i++) {
 194:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 198:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
	}
	interpolating = 0;
 19c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 1a0:	43434700 	movtmi	r4, #14080	; 0x3700
	nextframe_ = getMillis();
 1a4:	5728203a 	undefined
 1a8:	52416e69 	subpl	r6, r1, #1680	; 0x690
#ifdef MILLIS
	PrintString("BioloidEX nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
}
 1ac:	614d204d 	cmpvs	sp, sp, asr #32
 1b0:	20686372 	rsbcs	r6, r8, r2, ror r3
 1b4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 1b8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 1bc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 1c0:	43434700 	movtmi	r4, #14080	; 0x3700
 1c4:	5728203a 	undefined
transition_t * sequence;                    // sequence we are running
int transitions;                    // how many transitions we have left to load


//  initializes serial1 transmit at baud, 8-N-1
void BioloidControllerEx() {
 1c8:	52416e69 	subpl	r6, r1, #1680	; 0x690
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
 1cc:	614d204d 	cmpvs	sp, sp, asr #32
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
 1d0:	20686372 	rsbcs	r6, r8, r2, ror r3
transition_t * sequence;                    // sequence we are running
int transitions;                    // how many transitions we have left to load


//  initializes serial1 transmit at baud, 8-N-1
void BioloidControllerEx() {
 1d4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
 1d8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
	 pose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
 1dc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 1e0:	43434700 	movtmi	r4, #14080	; 0x3700
		pose_[i] = 512;
		nextpose_[i] = 512;
 1e4:	5728203a 	undefined
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
 1e8:	52416e69 	subpl	r6, r1, #1680	; 0x690
		nextpose_[i] = 512;
 1ec:	614d204d 	cmpvs	sp, sp, asr #32
	/**id_ = (unsigned char *) malloc(AX12_MAX_SERVOS * sizeof(unsigned char));
	 pose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
 1f0:	20686372 	rsbcs	r6, r8, r2, ror r3
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
	}
	frameLength = BIOLOID_FRAME_LENGTH;
 1f4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 1f8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
	interpolating = 0;
 1fc:	00302e33 	eorseq	r2, r0, r3, lsr lr
	nextframe_ = getMillis();
 200:	43434700 	movtmi	r4, #14080	; 0x3700
 204:	5728203a 	undefined
#ifdef MILLIS
	PrintString("BioloidEX nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
}
 208:	52416e69 	subpl	r6, r1, #1680	; 0x690
 20c:	614d204d 	cmpvs	sp, sp, asr #32
 210:	20686372 	rsbcs	r6, r8, r2, ror r3
 214:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 218:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 21c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 220:	43434700 	movtmi	r4, #14080	; 0x3700
#endif
		mDelay(25);
	}
}
/* write pose out to servos using sync write. */
void BioloidControllerEx_writePose() {
 224:	5728203a 	undefined
 228:	52416e69 	subpl	r6, r1, #1680	; 0x690
	int temp;
	dxl_set_txpacket_id (BROADCAST_ID);
 22c:	614d204d 	cmpvs	sp, sp, asr #32
	dxl_set_txpacket_instruction (INST_SYNC_WRITE);
 230:	20686372 	rsbcs	r6, r8, r2, ror r3
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
 234:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 238:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
	dxl_set_txpacket_parameter(1, 2);
 23c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 240:	43434700 	movtmi	r4, #14080	; 0x3700
 244:	5728203a 	undefined
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
 248:	52416e69 	subpl	r6, r1, #1680	; 0x690
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
 24c:	614d204d 	cmpvs	sp, sp, asr #32
 250:	20686372 	rsbcs	r6, r8, r2, ror r3
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
 254:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
 258:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
 25c:	00302e33 	eorseq	r2, r0, r3, lsr lr
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
 260:	43434700 	movtmi	r4, #14080	; 0x3700
 264:	5728203a 	undefined
 268:	52416e69 	subpl	r6, r1, #1680	; 0x690
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
 26c:	614d204d 	cmpvs	sp, sp, asr #32
 270:	20686372 	rsbcs	r6, r8, r2, ror r3
 274:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
 278:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
 27c:	00302e33 	eorseq	r2, r0, r3, lsr lr
	dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction (INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
 280:	43434700 	movtmi	r4, #14080	; 0x3700
 284:	5728203a 	undefined
 288:	52416e69 	subpl	r6, r1, #1680	; 0x690
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
	}
	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
 28c:	614d204d 	cmpvs	sp, sp, asr #32
 290:	20686372 	rsbcs	r6, r8, r2, ror r3
 294:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
	dxl_txrx_packet();
 298:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
	u16 CommStatus = dxl_get_result();
 29c:	00302e33 	eorseq	r2, r0, r3, lsr lr
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
 2a0:	43434700 	movtmi	r4, #14080	; 0x3700
		PrintErrorCode();
 2a4:	5728203a 	undefined
	else
		PrintCommStatus(CommStatus);
 2a8:	52416e69 	subpl	r6, r1, #1680	; 0x690
#endif
}
 2ac:	614d204d 	cmpvs	sp, sp, asr #32
 2b0:	20686372 	rsbcs	r6, r8, r2, ror r3
 2b4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 2b8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
	}
	interpolating = 1;
}
/* interpolate our pose, this should be called at about 30Hz. */
#define WAIT_SLOP_FACTOR 10
int BioloidControllerEx_interpolateStep(bool fWait) {
 2bc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 2c0:	43434700 	movtmi	r4, #14080	; 0x3700

	if (interpolating == 0)
 2c4:	5728203a 	undefined
		return 0;
	int i;
	int complete = poseSize;
 2c8:	52416e69 	subpl	r6, r1, #1680	; 0x690
	if (!fWait) {
 2cc:	614d204d 	cmpvs	sp, sp, asr #32
		if (getMillis() < (nextframe_ - WAIT_SLOP_FACTOR)) {
 2d0:	20686372 	rsbcs	r6, r8, r2, ror r3
 2d4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 2d8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
			return (getMillis() - nextframe_); // We still have some time to do something...
 2dc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 2e0:	43434700 	movtmi	r4, #14080	; 0x3700
 2e4:	5728203a 	undefined
#ifdef MILLIS
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	while (getMillis() < nextframe_);
 2e8:	52416e69 	subpl	r6, r1, #1680	; 0x690
 2ec:	614d204d 	cmpvs	sp, sp, asr #32
 2f0:	20686372 	rsbcs	r6, r8, r2, ror r3
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
 2f4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
 2f8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 2fc:	00302e33 	eorseq	r2, r0, r3, lsr lr
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
 300:	43434700 	movtmi	r4, #14080	; 0x3700
 304:	5728203a 	undefined
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
 308:	52416e69 	subpl	r6, r1, #1680	; 0x690
		int diff = nextpose_[i] - pose_[i];
 30c:	614d204d 	cmpvs	sp, sp, asr #32
 310:	20686372 	rsbcs	r6, r8, r2, ror r3
 314:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 318:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 31c:	00302e33 	eorseq	r2, r0, r3, lsr lr
		if (diff == 0) {
 320:	43434700 	movtmi	r4, #14080	; 0x3700
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
 324:	5728203a 	undefined
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
 328:	52416e69 	subpl	r6, r1, #1680	; 0x690
		int diff = nextpose_[i] - pose_[i];
		if (diff == 0) {
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
 32c:	614d204d 	cmpvs	sp, sp, asr #32
					pose_[i] = nextpose_[i];
 330:	20686372 	rsbcs	r6, r8, r2, ror r3
					complete--;
 334:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
 338:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 33c:	00302e33 	eorseq	r2, r0, r3, lsr lr
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
 340:	43434700 	movtmi	r4, #14080	; 0x3700
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
 344:	5728203a 	undefined
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
 348:	52416e69 	subpl	r6, r1, #1680	; 0x690
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
 34c:	614d204d 	cmpvs	sp, sp, asr #32
 350:	20686372 	rsbcs	r6, r8, r2, ror r3
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif

	}
	if (complete <= 0)
 354:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
		interpolating = 0;
 358:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
	BioloidControllerEx_writePose();
 35c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 360:	43434700 	movtmi	r4, #14080	; 0x3700
	return 0;
}
 364:	5728203a 	undefined
 368:	52416e69 	subpl	r6, r1, #1680	; 0x690
 36c:	614d204d 	cmpvs	sp, sp, asr #32
 370:	20686372 	rsbcs	r6, r8, r2, ror r3
 374:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 378:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 37c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 380:	43434700 	movtmi	r4, #14080	; 0x3700
	for (i = 0; i < poseSize; i++)
		//nextpose_[i] = pgm_read_word_near(addr+1+i) << BIOLOID_SHIFT;
		nextpose_[i] = pgm_read_word_near(addr + 1 + i);
}
/* read in current servo positions to the pose. */
void BioloidControllerEx_readPose() {
 384:	5728203a 	undefined
 388:	52416e69 	subpl	r6, r1, #1680	; 0x690
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
		//pose_[i] = dxl_read_word(id_[i],AXM_PRESENT_POSITION_L)<<BIOLOID_SHIFT;
		pose_[i] = dxl_read_word(id_[i], AXM_PRESENT_POSITION_L);
 38c:	614d204d 	cmpvs	sp, sp, asr #32
 390:	20686372 	rsbcs	r6, r8, r2, ror r3
 394:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 398:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 39c:	00302e33 	eorseq	r2, r0, r3, lsr lr
		PrintChar(id_[i]);
		PrintString(" - ");
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
 3a0:	43434700 	movtmi	r4, #14080	; 0x3700

#ifdef DEBUG_BIOLOIDEX
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
 3a4:	5728203a 	undefined
 3a8:	52416e69 	subpl	r6, r1, #1680	; 0x690
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
	}
}
 3ac:	614d204d 	cmpvs	sp, sp, asr #32
 3b0:	20686372 	rsbcs	r6, r8, r2, ror r3
 3b4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 3b8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitPosY[GaitCurrentLegNr] = -3 * g_InControlState.LegLiftHeight
				/ (3 + g_InControlState.gaitCur.HalfLiftHeight); // Easier to shift between div factor: /1 (3/3), /2 (3/6) and 3/4
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y
 3bc:	00302e33 	eorseq	r2, r0, r3, lsr lr
				/ g_InControlState.gaitCur.LiftDivFactor;
	}

	//Optional Half heigth Rear 5 LiftedPos (5 lifted positions)
	else if (((g_InControlState.gaitCur.NrLiftedPos == 5 && (LegStep == -2)))
 3c0:	43434700 	movtmi	r4, #14080	; 0x3700
 3c4:	5728203a 	undefined
 3c8:	52416e69 	subpl	r6, r1, #1680	; 0x690
 3cc:	614d204d 	cmpvs	sp, sp, asr #32
 3d0:	20686372 	rsbcs	r6, r8, r2, ror r3
 3d4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 3d8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = -g_InControlState.TravelLength.x / 2;
 3dc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 3e0:	43434700 	movtmi	r4, #14080	; 0x3700
 3e4:	5728203a 	undefined
 3e8:	52416e69 	subpl	r6, r1, #1680	; 0x690
 3ec:	614d204d 	cmpvs	sp, sp, asr #32
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
 3f0:	20686372 	rsbcs	r6, r8, r2, ror r3
 3f4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 3f8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 3fc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 400:	43434700 	movtmi	r4, #14080	; 0x3700
		GaitPosZ[GaitCurrentLegNr] = -g_InControlState.TravelLength.z / 2;
 404:	5728203a 	undefined
 408:	52416e69 	subpl	r6, r1, #1680	; 0x690
 40c:	614d204d 	cmpvs	sp, sp, asr #32
 410:	20686372 	rsbcs	r6, r8, r2, ror r3
		GaitRotY[GaitCurrentLegNr] = -g_InControlState.TravelLength.y / 2;
 414:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 418:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 41c:	00302e33 	eorseq	r2, r0, r3, lsr lr

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
	...
  14:	0000000c 	andeq	r0, r0, ip
  18:	00000000 	andeq	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	004d0002 	subeq	r0, sp, r2
  30:	00040000 	andeq	r0, r4, r0
	...
  3c:	00000104 	andeq	r0, r0, r4, lsl #2
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	00d10002 	sbcseq	r0, r1, r2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
  5c:	00000308 	andeq	r0, r0, r8, lsl #6
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	05aa0002 	streq	r0, [sl, #2]!
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	0800343c 	stmdaeq	r0, {r2, r3, r4, r5, sl, ip, sp}
  7c:	00000134 	andeq	r0, r0, r4, lsr r1
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	0c170002 	ldceq	0, cr0, [r7], {2}
  90:	00040000 	andeq	r0, r4, r0
	...
  9c:	000021cc 	andeq	r2, r0, ip, asr #3
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	26ce0002 	strbcs	r0, [lr], r2
  b0:	00040000 	andeq	r0, r4, r0
	...
  bc:	000003bc 	strheq	r0, [r0], -ip
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	2e400002 	cdpcs	0, 4, cr0, cr0, cr2, {0}
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	08003570 	stmdaeq	r0, {r4, r5, r6, r8, sl, ip, sp}
  dc:	00000676 	andeq	r0, r0, r6, ror r6
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	364e0002 	strbcc	r0, [lr], -r2
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	08003be8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp, ip, sp}
  fc:	00000530 	andeq	r0, r0, r0, lsr r5
	...
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
/* set up for an interpolation from pose to nextpose over TIME
 milliseconds by setting servo speeds. */
void BioloidControllerEx_interpolateSetup(int time) {
	int i;
	int frames = (time/frameLength) + 1;
	nextframe_ = getMillis() + frameLength;
 10c:	3e3a0002 	cdpcc	0, 3, cr0, cr10, cr2, {0}
	PrintString("BioloidEX BioloidControllerEx_interpolateSetup nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// set speed each servo...
	for (i = 0; i < poseSize; i++) {
 110:	00040000 	andeq	r0, r4, r0
/* set up for an interpolation from pose to nextpose over TIME
 milliseconds by setting servo speeds. */
void BioloidControllerEx_interpolateSetup(int time) {
	int i;
	int frames = (time/frameLength) + 1;
	nextframe_ = getMillis() + frameLength;
 114:	00000000 	andeq	r0, r0, r0
 118:	08004118 	stmdaeq	r0, {r3, r4, r8, lr}
	PrintString("BioloidEX BioloidControllerEx_interpolateSetup nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// set speed each servo...
	for (i = 0; i < poseSize; i++) {
 11c:	00000340 	andeq	r0, r0, r0, asr #6
	...
		if (nextpose_[i] > pose_[i]) {
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	42b10002 	adcsmi	r0, r1, #2	; 0x2
			speed_[i] = (nextpose_[i] - pose_[i]) / frames + 1;
 130:	00040000 	andeq	r0, r4, r0
		} else {
			speed_[i] = (pose_[i] - nextpose_[i]) / frames + 1;
 134:	00000000 	andeq	r0, r0, r0
 138:	08004458 	stmdaeq	r0, {r3, r4, r6, sl, lr}
 13c:	0000019e 	muleq	r0, lr, r1
	...
		PrintString(" - ");
		TxD_Dec_U16(speed_[i]);
		PrintString("\n");
#endif
	}
	interpolating = 1;
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	46aa0002 	strtmi	r0, [sl], r2
}
 150:	00040000 	andeq	r0, r4, r0
 154:	00000000 	andeq	r0, r0, r0
 158:	080045f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, lr}
 15c:	00000024 	andeq	r0, r0, r4, lsr #32
	...
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
	PrintString("\n");
#endif
}

/* new-style setup */
void Bioloid_Setup(int servo_cnt) {
 16c:	486f0002 	stmdami	pc!, {r1}^
 170:	00040000 	andeq	r0, r4, r0
	/**id_ = (unsigned char *) malloc(servo_cnt * sizeof(unsigned char));
	 pose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
 174:	00000000 	andeq	r0, r0, r0
 178:	0800461c 	stmdaeq	r0, {r2, r3, r4, r9, sl, lr}
	for (i = 0; i < poseSize; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
 17c:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
	for (i = 0; i < poseSize; i++) {
		id_[i] = i + 1;
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
		pose_[i] = 512;
 18c:	4a310002 	bmi	c4019c <__Stack_Size+0xc3fd9c>
		nextpose_[i] = 512;
 190:	00040000 	andeq	r0, r4, r0
	 pose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
	for (i = 0; i < poseSize; i++) {
 194:	00000000 	andeq	r0, r0, r0
 198:	08004648 	stmdaeq	r0, {r3, r6, r9, sl, lr}
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
	}
	interpolating = 0;
 19c:	0000004a 	andeq	r0, r0, sl, asr #32
	...
	nextframe_ = getMillis();
 1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
#ifdef MILLIS
	PrintString("BioloidEX nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
}
 1ac:	4c420002 	mcrrmi	0, 0, r0, r2, cr2
 1b0:	00040000 	andeq	r0, r4, r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	08004694 	stmdaeq	r0, {r2, r4, r7, r9, sl, lr}
 1bc:	0000023c 	andeq	r0, r0, ip, lsr r2
	...
transition_t * sequence;                    // sequence we are running
int transitions;                    // how many transitions we have left to load


//  initializes serial1 transmit at baud, 8-N-1
void BioloidControllerEx() {
 1c8:	0000001c 	andeq	r0, r0, ip, lsl r0
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
 1cc:	4e8d0002 	cdpmi	0, 8, cr0, cr13, cr2, {0}
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
 1d0:	00040000 	andeq	r0, r4, r0
transition_t * sequence;                    // sequence we are running
int transitions;                    // how many transitions we have left to load


//  initializes serial1 transmit at baud, 8-N-1
void BioloidControllerEx() {
 1d4:	00000000 	andeq	r0, r0, r0
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
 1d8:	080048d0 	stmdaeq	r0, {r4, r6, r7, fp, lr}
	 pose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
 1dc:	00000454 	andeq	r0, r0, r4, asr r4
	...
		pose_[i] = 512;
 1e8:	0000001c 	andeq	r0, r0, ip, lsl r0
		nextpose_[i] = 512;
 1ec:	541c0002 	ldrpl	r0, [ip], #-2
	/**id_ = (unsigned char *) malloc(AX12_MAX_SERVOS * sizeof(unsigned char));
	 pose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
 1f0:	00040000 	andeq	r0, r4, r0
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
	}
	frameLength = BIOLOID_FRAME_LENGTH;
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	08004d24 	stmdaeq	r0, {r2, r5, r8, sl, fp, lr}
	interpolating = 0;
 1fc:	000005e4 	andeq	r0, r0, r4, ror #11
	...
#ifdef MILLIS
	PrintString("BioloidEX nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
}
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	5c090002 	stcpl	0, cr0, [r9], {2}
 210:	00040000 	andeq	r0, r4, r0
 214:	00000000 	andeq	r0, r0, r0
 218:	08005308 	stmdaeq	r0, {r3, r8, r9, ip, lr}
 21c:	00000394 	muleq	r0, r4, r3
	...
#endif
		mDelay(25);
	}
}
/* write pose out to servos using sync write. */
void BioloidControllerEx_writePose() {
 228:	0000001c 	andeq	r0, r0, ip, lsl r0
	int temp;
	dxl_set_txpacket_id (BROADCAST_ID);
 22c:	67280002 	strvs	r0, [r8, -r2]!
	dxl_set_txpacket_instruction (INST_SYNC_WRITE);
 230:	00040000 	andeq	r0, r4, r0
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
 234:	00000000 	andeq	r0, r0, r0
 238:	0800569c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip, lr}
	dxl_set_txpacket_parameter(1, 2);
 23c:	00000528 	andeq	r0, r0, r8, lsr #10
	...
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
 248:	0000001c 	andeq	r0, r0, ip, lsl r0
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
 24c:	6e620002 	cdpvs	0, 6, cr0, cr2, cr2, {0}
 250:	00040000 	andeq	r0, r4, r0
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
 254:	00000000 	andeq	r0, r0, r0
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
 258:	08005bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp, ip, lr}
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
 25c:	00000288 	andeq	r0, r0, r8, lsl #5
	...
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
 268:	0000001c 	andeq	r0, r0, ip, lsl r0
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
 26c:	74aa0002 	strtvc	r0, [sl], #2
 270:	00040000 	andeq	r0, r4, r0
 274:	00000000 	andeq	r0, r0, r0
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
 278:	08005e4c 	stmdaeq	r0, {r2, r3, r6, r9, sl, fp, ip, lr}
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
 27c:	00000384 	andeq	r0, r0, r4, lsl #7
	...
	dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction (INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
 288:	0000001c 	andeq	r0, r0, ip, lsl r0
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
	}
	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
 28c:	7d910002 	ldcvc	0, cr0, [r1, #8]
 290:	00040000 	andeq	r0, r4, r0
 294:	00000000 	andeq	r0, r0, r0
	dxl_txrx_packet();
 298:	080061d0 	stmdaeq	r0, {r4, r6, r7, r8, sp, lr}
	u16 CommStatus = dxl_get_result();
 29c:	000000e0 	andeq	r0, r0, r0, ror #1
	...
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
		PrintErrorCode();
	else
		PrintCommStatus(CommStatus);
 2a8:	0000001c 	andeq	r0, r0, ip, lsl r0
#endif
}
 2ac:	7fd80002 	svcvc	0x00d80002
 2b0:	00040000 	andeq	r0, r4, r0
 2b4:	00000000 	andeq	r0, r0, r0
 2b8:	080062b0 	stmdaeq	r0, {r4, r5, r7, r9, sp, lr}
	}
	interpolating = 1;
}
/* interpolate our pose, this should be called at about 30Hz. */
#define WAIT_SLOP_FACTOR 10
int BioloidControllerEx_interpolateStep(bool fWait) {
 2bc:	000003a4 	andeq	r0, r0, r4, lsr #7
	...

	if (interpolating == 0)
		return 0;
	int i;
	int complete = poseSize;
 2c8:	0000001c 	andeq	r0, r0, ip, lsl r0
	if (!fWait) {
 2cc:	88950002 	ldmhi	r5, {r1}
		if (getMillis() < (nextframe_ - WAIT_SLOP_FACTOR)) {
 2d0:	00040000 	andeq	r0, r4, r0
 2d4:	00000000 	andeq	r0, r0, r0
 2d8:	08006654 	stmdaeq	r0, {r2, r4, r6, r9, sl, sp, lr}
			return (getMillis() - nextframe_); // We still have some time to do something...
 2dc:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
#ifdef MILLIS
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	while (getMillis() < nextframe_);
 2e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2ec:	8a840002 	bhi	fe1002fc <SCS_BASE+0x1e0f22fc>
 2f0:	00040000 	andeq	r0, r4, r0
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
 2f4:	00000000 	andeq	r0, r0, r0
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
 2f8:	080066f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, sp, lr}
 2fc:	000003bc 	strheq	r0, [r0], -ip
	...
 308:	0000001c 	andeq	r0, r0, ip, lsl r0
		int diff = nextpose_[i] - pose_[i];
 30c:	93d40002 	bicsls	r0, r4, #2	; 0x2
 310:	00040000 	andeq	r0, r4, r0
 314:	00000000 	andeq	r0, r0, r0
 318:	08006ab4 	stmdaeq	r0, {r2, r4, r5, r7, r9, fp, sp, lr}
 31c:	0000006e 	andeq	r0, r0, lr, rrx
	...
			if (diff > 0) {
				if (diff < speed_[i]) {
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
 328:	0000001c 	andeq	r0, r0, ip, lsl r0
		int diff = nextpose_[i] - pose_[i];
		if (diff == 0) {
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
 32c:	94660002 	strbtls	r0, [r6], #-2
					pose_[i] = nextpose_[i];
 330:	00040000 	andeq	r0, r4, r0
					complete--;
 334:	00000000 	andeq	r0, r0, r0
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
 338:	08006b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, sp, lr}
 33c:	00000054 	andeq	r0, r0, r4, asr r0
	...
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
 348:	0000001c 	andeq	r0, r0, ip, lsl r0
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
 34c:	956c0002 	strbls	r0, [ip, #-2]!
 350:	00040000 	andeq	r0, r4, r0
	...
#endif

	}
	if (complete <= 0)
		interpolating = 0;
	BioloidControllerEx_writePose();
 35c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
	return 0;
}
 368:	0000001c 	andeq	r0, r0, ip, lsl r0
 36c:	96310002 	ldrtls	r0, [r1], -r2
 370:	00040000 	andeq	r0, r4, r0
	...
 37c:	00000030 	andeq	r0, r0, r0, lsr r0
	...
	for (i = 0; i < poseSize; i++)
		//nextpose_[i] = pgm_read_word_near(addr+1+i) << BIOLOID_SHIFT;
		nextpose_[i] = pgm_read_word_near(addr + 1 + i);
}
/* read in current servo positions to the pose. */
void BioloidControllerEx_readPose() {
 388:	0000001c 	andeq	r0, r0, ip, lsl r0
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
		//pose_[i] = dxl_read_word(id_[i],AXM_PRESENT_POSITION_L)<<BIOLOID_SHIFT;
		pose_[i] = dxl_read_word(id_[i], AXM_PRESENT_POSITION_L);
 38c:	a8a50002 	stmiage	r5!, {r1}
 390:	00040000 	andeq	r0, r4, r0
	...
 39c:	000000c8 	andeq	r0, r0, r8, asr #1
	...

#ifdef DEBUG_BIOLOIDEX
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
 3a8:	0000001c 	andeq	r0, r0, ip, lsl r0
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
	}
}
 3ac:	a9eb0002 	stmibge	fp!, {r1}^
 3b0:	00040000 	andeq	r0, r4, r0
	...
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitPosY[GaitCurrentLegNr] = -3 * g_InControlState.LegLiftHeight
				/ (3 + g_InControlState.gaitCur.HalfLiftHeight); // Easier to shift between div factor: /1 (3/3), /2 (3/6) and 3/4
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y
 3bc:	000000fc 	strdeq	r0, [r0], -ip
	...
				/ g_InControlState.gaitCur.LiftDivFactor;
	}

	//Optional Half heigth Rear 5 LiftedPos (5 lifted positions)
	else if (((g_InControlState.gaitCur.NrLiftedPos == 5 && (LegStep == -2)))
 3c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3cc:	aaf90002 	bge	ffe403dc <SCS_BASE+0x1fe323dc>
 3d0:	00040000 	andeq	r0, r4, r0
	...
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = -g_InControlState.TravelLength.x / 2;
 3dc:	000000d0 	ldrdeq	r0, [r0], -r0
	...
 3e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3ec:	ac0c0002 	stcge	0, cr0, [ip], {2}
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
 3f0:	00040000 	andeq	r0, r4, r0
	...
 3fc:	0000009c 	muleq	r0, ip, r0
	...
		GaitPosZ[GaitCurrentLegNr] = -g_InControlState.TravelLength.z / 2;
 408:	0000001c 	andeq	r0, r0, ip, lsl r0
 40c:	b5b10002 	ldrlt	r0, [r1, #2]!
 410:	00040000 	andeq	r0, r4, r0
	...
		GaitRotY[GaitCurrentLegNr] = -g_InControlState.TravelLength.y / 2;
 41c:	0000010c 	andeq	r0, r0, ip, lsl #2
	...
	}

	//Optional Half heigth Front 5 LiftedPos (5 lifted positions)
	else if ((g_InControlState.gaitCur.NrLiftedPos == 5)
 428:	00000024 	andeq	r0, r0, r4, lsr #32
 42c:	bf630002 	svclt	0x00630002
 430:	00040000 	andeq	r0, r4, r0
	...
			&& (LegStep == 2
					|| LegStep == -(g_InControlState.gaitCur.StepsInGait - 2))
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
 43c:	0000000c 	andeq	r0, r0, ip
 440:	00000000 	andeq	r0, r0, r0
 444:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_pubnames:

00000000 <.debug_pubnames>:
       0:	00000017 	andeq	r0, r0, r7, lsl r0
       4:	00d10002 	sbcseq	r0, r1, r2
       8:	04d90000 	ldrbeq	r0, [r9]
       c:	034b0000 	movteq	r0, #45056	; 0xb000
      10:	616d0000 	cmnvs	sp, r0
      14:	00006e69 	andeq	r6, r0, r9, ror #28
      18:	38000000 	stmdacc	r0, {}
      1c:	02000006 	andeq	r0, r0, #6	; 0x6
      20:	0005aa00 	andeq	sl, r5, r0, lsl #20
      24:	00066d00 	andeq	r6, r6, r0, lsl #26
      28:	00006700 	andeq	r6, r0, r0, lsl #14
      2c:	494d4e00 	stmdbmi	sp, {r9, sl, fp, lr}^
      30:	65637845 	strbvs	r7, [r3, #-2117]!
      34:	6f697470 	svcvs	0x00697470
      38:	007a006e 	rsbseq	r0, sl, lr, rrx
      3c:	61480000 	cmpvs	r8, r0
      40:	61466472 	cmpvs	r6, r2, ror r4
      44:	45746c75 	ldrbmi	r6, [r4, #-3189]!
      48:	70656378 	rsbvc	r6, r5, r8, ror r3
      4c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
      50:	00008d00 	andeq	r8, r0, r0, lsl #26
      54:	6d654d00 	stclvs	13, cr4, [r5]
      58:	616e614d 	cmnvs	lr, sp, asr #2
      5c:	78456567 	stmdavc	r5, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^
      60:	74706563 	ldrbtvc	r6, [r0], #-1379
      64:	006e6f69 	rsbeq	r6, lr, r9, ror #30
      68:	000000a0 	andeq	r0, r0, r0, lsr #1
      6c:	46737542 	ldrbtmi	r7, [r3], -r2, asr #10
      70:	746c7561 	strbtvc	r7, [ip], #-1377
      74:	65637845 	strbvs	r7, [r3, #-2117]!
      78:	6f697470 	svcvs	0x00697470
      7c:	00b3006e 	adcseq	r0, r3, lr, rrx
      80:	73550000 	cmpvc	r5, #0	; 0x0
      84:	46656761 	strbtmi	r6, [r5], -r1, ror #14
      88:	746c7561 	strbtvc	r7, [ip], #-1377
      8c:	65637845 	strbvs	r7, [r3, #-2117]!
      90:	6f697470 	svcvs	0x00697470
      94:	00c6006e 	sbceq	r0, r6, lr, rrx
      98:	65440000 	strbvs	r0, [r4]
      9c:	4d677562 	cfstr64mi	mvdx7, [r7, #-392]!
      a0:	74696e6f 	strbtvc	r6, [r9], #-3695
      a4:	d900726f 	stmdble	r0, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}
      a8:	53000000 	movwpl	r0, #0	; 0x0
      ac:	61484356 	cmpvs	r8, r6, asr r3
      b0:	656c646e 	strbvs	r6, [ip, #-1134]!
      b4:	00ec0072 	rsceq	r0, ip, r2, ror r0
      b8:	65500000 	ldrbvs	r0, [r0]
      bc:	5653646e 	ldrbpl	r6, [r3], -lr, ror #8
      c0:	00ff0043 	rscseq	r0, pc, r3, asr #32
      c4:	57570000 	ldrbpl	r0, [r7, -r0]
      c8:	495f4744 	ldmdbmi	pc, {r2, r6, r8, r9, sl, lr}^
      cc:	61485152 	cmpvs	r8, r2, asr r1
      d0:	656c646e 	strbvs	r6, [ip, #-1134]!
      d4:	01120072 	tsteq	r2, r2, ror r0
      d8:	56500000 	ldrbpl	r0, [r0], -r0
      dc:	52495f44 	subpl	r5, r9, #272	; 0x110
      e0:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
      e4:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
      e8:	00012500 	andeq	r2, r1, r0, lsl #10
      ec:	4d415400 	cfstrdmi	mvd5, [r1]
      f0:	5f524550 	svcpl	0x00524550
      f4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
      f8:	6c646e61 	stclvs	14, cr6, [r4], #-388
      fc:	38007265 	stmdacc	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     100:	52000001 	andpl	r0, r0, #1	; 0x1
     104:	495f4354 	ldmdbmi	pc, {r2, r4, r6, r8, r9, lr}^
     108:	61485152 	cmpvs	r8, r2, asr r1
/* set up for an interpolation from pose to nextpose over TIME
 milliseconds by setting servo speeds. */
void BioloidControllerEx_interpolateSetup(int time) {
	int i;
	int frames = (time/frameLength) + 1;
	nextframe_ = getMillis() + frameLength;
     10c:	656c646e 	strbvs	r6, [ip, #-1134]!
	PrintString("BioloidEX BioloidControllerEx_interpolateSetup nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// set speed each servo...
	for (i = 0; i < poseSize; i++) {
     110:	014b0072 	cmpeq	fp, r2, ror r0
/* set up for an interpolation from pose to nextpose over TIME
 milliseconds by setting servo speeds. */
void BioloidControllerEx_interpolateSetup(int time) {
	int i;
	int frames = (time/frameLength) + 1;
	nextframe_ = getMillis() + frameLength;
     114:	4c460000 	marmi	acc0, r0, r6
     118:	5f485341 	svcpl	0x00485341
	PrintString("BioloidEX BioloidControllerEx_interpolateSetup nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// set speed each servo...
	for (i = 0; i < poseSize; i++) {
     11c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     120:	6c646e61 	stclvs	14, cr6, [r4], #-388
     124:	5e007265 	cdppl	2, 0, cr7, cr0, cr5, {3}
		if (nextpose_[i] > pose_[i]) {
     128:	52000001 	andpl	r0, r0, #1	; 0x1
     12c:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^
			speed_[i] = (nextpose_[i] - pose_[i]) / frames + 1;
     130:	61485152 	cmpvs	r8, r2, asr r1
		} else {
			speed_[i] = (pose_[i] - nextpose_[i]) / frames + 1;
     134:	656c646e 	strbvs	r6, [ip, #-1134]!
     138:	01710072 	cmneq	r1, r2, ror r0
     13c:	58450000 	stmdapl	r5, {}^
	PrintString("BioloidEX BioloidControllerEx_interpolateSetup nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// set speed each servo...
	for (i = 0; i < poseSize; i++) {
     140:	5f304954 	svcpl	0x00304954
     144:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
		PrintString(" - ");
		TxD_Dec_U16(speed_[i]);
		PrintString("\n");
#endif
	}
	interpolating = 1;
     148:	6c646e61 	stclvs	14, cr6, [r4], #-388
     14c:	84007265 	strhi	r7, [r0], #-613
}
     150:	45000001 	strmi	r0, [r0, #-1]
     154:	31495458 	cmpcc	r9, r8, asr r4
     158:	5152495f 	cmppl	r2, pc, asr r9
     15c:	646e6148 	strbtvs	r6, [lr], #-328
     160:	0072656c 	rsbseq	r6, r2, ip, ror #10
     164:	00000197 	muleq	r0, r7, r1
     168:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
	PrintString("\n");
#endif
}

/* new-style setup */
void Bioloid_Setup(int servo_cnt) {
     16c:	52495f32 	subpl	r5, r9, #200	; 0xc8
     170:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
	/**id_ = (unsigned char *) malloc(servo_cnt * sizeof(unsigned char));
	 pose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
     174:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     178:	0001aa00 	andeq	sl, r1, r0, lsl #20
	for (i = 0; i < poseSize; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
     17c:	54584500 	ldrbpl	r4, [r8], #-1280
     180:	495f3349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, ip, sp}^
		nextpose_[i] = 512;
     184:	61485152 	cmpvs	r8, r2, asr r1
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
	for (i = 0; i < poseSize; i++) {
		id_[i] = i + 1;
     188:	656c646e 	strbvs	r6, [ip, #-1134]!
		pose_[i] = 512;
     18c:	01bd0072 	undefined instruction 0x01bd0072
		nextpose_[i] = 512;
     190:	58450000 	stmdapl	r5, {}^
	 pose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
	for (i = 0; i < poseSize; i++) {
     194:	5f344954 	svcpl	0x00344954
     198:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
	}
	interpolating = 0;
     19c:	6c646e61 	stclvs	14, cr6, [r4], #-388
     1a0:	d1007265 	tstle	r0, r5, ror #4
	nextframe_ = getMillis();
     1a4:	44000001 	strmi	r0, [r0], #-1
     1a8:	5f31414d 	svcpl	0x0031414d
#ifdef MILLIS
	PrintString("BioloidEX nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
}
     1ac:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     1b0:	316c656e 	cmncc	ip, lr, ror #10
     1b4:	5152495f 	cmppl	r2, pc, asr r9
     1b8:	646e6148 	strbtvs	r6, [lr], #-328
     1bc:	0072656c 	rsbseq	r6, r2, ip, ror #10
     1c0:	000001e5 	andeq	r0, r0, r5, ror #3
     1c4:	31414d44 	cmpcc	r1, r4, asr #26
transition_t * sequence;                    // sequence we are running
int transitions;                    // how many transitions we have left to load


//  initializes serial1 transmit at baud, 8-N-1
void BioloidControllerEx() {
     1c8:	6168435f 	cmnvs	r8, pc, asr r3
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
     1cc:	6c656e6e 	stclvs	14, cr6, [r5], #-440
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
     1d0:	52495f32 	subpl	r5, r9, #200	; 0xc8
transition_t * sequence;                    // sequence we are running
int transitions;                    // how many transitions we have left to load


//  initializes serial1 transmit at baud, 8-N-1
void BioloidControllerEx() {
     1d4:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
     1d8:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
	 pose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
     1dc:	0001f900 	andeq	pc, r1, r0, lsl #18
     1e0:	414d4400 	cmpmi	sp, r0, lsl #8
		pose_[i] = 512;
		nextpose_[i] = 512;
     1e4:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
     1e8:	656e6e61 	strbvs	r6, [lr, #-3681]!
		nextpose_[i] = 512;
     1ec:	495f336c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, r9, ip, sp}^
	/**id_ = (unsigned char *) malloc(AX12_MAX_SERVOS * sizeof(unsigned char));
	 pose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
     1f0:	61485152 	cmpvs	r8, r2, asr r1
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
	}
	frameLength = BIOLOID_FRAME_LENGTH;
     1f4:	656c646e 	strbvs	r6, [ip, #-1134]!
     1f8:	020d0072 	andeq	r0, sp, #114	; 0x72
	interpolating = 0;
     1fc:	4d440000 	stclmi	0, cr0, [r4]
	nextframe_ = getMillis();
     200:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     204:	6e6e6168 	powvsez	f6, f6, #0.0
#ifdef MILLIS
	PrintString("BioloidEX nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
}
     208:	5f346c65 	svcpl	0x00346c65
     20c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     210:	6c646e61 	stclvs	14, cr6, [r4], #-388
     214:	21007265 	tstcs	r0, r5, ror #4
     218:	44000002 	strmi	r0, [r0], #-2
     21c:	5f31414d 	svcpl	0x0031414d
     220:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
#endif
		mDelay(25);
	}
}
/* write pose out to servos using sync write. */
void BioloidControllerEx_writePose() {
     224:	356c656e 	strbcc	r6, [ip, #-1390]!
     228:	5152495f 	cmppl	r2, pc, asr r9
	int temp;
	dxl_set_txpacket_id (BROADCAST_ID);
     22c:	646e6148 	strbtvs	r6, [lr], #-328
	dxl_set_txpacket_instruction (INST_SYNC_WRITE);
     230:	0072656c 	rsbseq	r6, r2, ip, ror #10
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
     234:	00000235 	andeq	r0, r0, r5, lsr r2
     238:	31414d44 	cmpcc	r1, r4, asr #26
	dxl_set_txpacket_parameter(1, 2);
     23c:	6168435f 	cmnvs	r8, pc, asr r3
     240:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     244:	52495f36 	subpl	r5, r9, #216	; 0xd8
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
     248:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
     24c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     250:	00024900 	andeq	r4, r2, r0, lsl #18
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
     254:	414d4400 	cmpmi	sp, r0, lsl #8
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
     258:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
     25c:	656e6e61 	strbvs	r6, [lr, #-3681]!
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
     260:	495f376c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, r9, sl, ip, sp}^
     264:	61485152 	cmpvs	r8, r2, asr r1
     268:	656c646e 	strbvs	r6, [ip, #-1134]!
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
     26c:	025d0072 	subseq	r0, sp, #114	; 0x72
     270:	44410000 	strbmi	r0, [r1]
     274:	325f3143 	subscc	r3, pc, #-1073741808	; 0xc0000010
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
     278:	5152495f 	cmppl	r2, pc, asr r9
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
     27c:	646e6148 	strbtvs	r6, [lr], #-328
	dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction (INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
     280:	0072656c 	rsbseq	r6, r2, ip, ror #10
     284:	00000271 	andeq	r0, r0, r1, ror r2
     288:	5f425355 	svcpl	0x00425355
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
	}
	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
     28c:	435f5048 	cmpmi	pc, #72	; 0x48
     290:	545f4e41 	ldrbpl	r4, [pc], #3649	; 298 <_Minimum_Stack_Size+0x198>
     294:	52495f58 	subpl	r5, r9, #352	; 0x160
	dxl_txrx_packet();
     298:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
	u16 CommStatus = dxl_get_result();
     29c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
     2a0:	00028500 	andeq	r8, r2, r0, lsl #10
		PrintErrorCode();
     2a4:	42535500 	subsmi	r5, r3, #0	; 0x0
	else
		PrintCommStatus(CommStatus);
     2a8:	5f504c5f 	svcpl	0x00504c5f
#endif
}
     2ac:	5f4e4143 	svcpl	0x004e4143
     2b0:	5f305852 	svcpl	0x00305852
     2b4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     2b8:	6c646e61 	stclvs	14, cr6, [r4], #-388
	}
	interpolating = 1;
}
/* interpolate our pose, this should be called at about 30Hz. */
#define WAIT_SLOP_FACTOR 10
int BioloidControllerEx_interpolateStep(bool fWait) {
     2bc:	99007265 	stmdbls	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     2c0:	43000002 	movwmi	r0, #2	; 0x2

	if (interpolating == 0)
     2c4:	525f4e41 	subspl	r4, pc, #1040	; 0x410
		return 0;
	int i;
	int complete = poseSize;
     2c8:	495f3158 	ldmdbmi	pc, {r3, r4, r6, r8, ip, sp}^
	if (!fWait) {
     2cc:	61485152 	cmpvs	r8, r2, asr r1
		if (getMillis() < (nextframe_ - WAIT_SLOP_FACTOR)) {
     2d0:	656c646e 	strbvs	r6, [ip, #-1134]!
     2d4:	02ad0072 	adceq	r0, sp, #114	; 0x72
     2d8:	41430000 	cmpmi	r3, r0
			return (getMillis() - nextframe_); // We still have some time to do something...
     2dc:	43535f4e 	cmpmi	r3, #312	; 0x138
     2e0:	52495f45 	subpl	r5, r9, #276	; 0x114
     2e4:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
#ifdef MILLIS
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	while (getMillis() < nextframe_);
     2e8:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     2ec:	0002c100 	andeq	ip, r2, r0, lsl #2
     2f0:	54584500 	ldrbpl	r4, [r8], #-1280
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
     2f4:	355f3949 	ldrbcc	r3, [pc, #-2377]	; fffff9b3 <SCS_BASE+0x1fff19b3>
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     2f8:	5152495f 	cmppl	r2, pc, asr r9
     2fc:	646e6148 	strbtvs	r6, [lr], #-328
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
     300:	0072656c 	rsbseq	r6, r2, ip, ror #10
     304:	000002d5 	ldrdeq	r0, [r0], -r5
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     308:	314d4954 	cmpcc	sp, r4, asr r9
		int diff = nextpose_[i] - pose_[i];
     30c:	4b52425f 	blmi	1490c90 <__Stack_Size+0x1490890>
     310:	5152495f 	cmppl	r2, pc, asr r9
     314:	646e6148 	strbtvs	r6, [lr], #-328
     318:	0072656c 	rsbseq	r6, r2, ip, ror #10
     31c:	000002e9 	andeq	r0, r0, r9, ror #5
		if (diff == 0) {
     320:	314d4954 	cmpcc	sp, r4, asr r9
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
     324:	5f50555f 	svcpl	0x0050555f
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
     328:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
		int diff = nextpose_[i] - pose_[i];
		if (diff == 0) {
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
     32c:	6c646e61 	stclvs	14, cr6, [r4], #-388
					pose_[i] = nextpose_[i];
     330:	fd007265 	stc2	2, cr7, [r0, #-404]
					complete--;
     334:	54000002 	strpl	r0, [r0], #-2
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
     338:	5f314d49 	svcpl	0x00314d49
     33c:	5f475254 	svcpl	0x00475254
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
     340:	5f4d4f43 	svcpl	0x004d4f43
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
     344:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
     348:	6c646e61 	stclvs	14, cr6, [r4], #-388
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     34c:	11007265 	tstne	r0, r5, ror #4
     350:	54000003 	strpl	r0, [r0], #-3
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif

	}
	if (complete <= 0)
     354:	5f314d49 	svcpl	0x00314d49
		interpolating = 0;
     358:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^
	BioloidControllerEx_writePose();
     35c:	61485152 	cmpvs	r8, r2, asr r1
     360:	656c646e 	strbvs	r6, [ip, #-1134]!
	return 0;
}
     364:	03250072 	teqeq	r5, #114	; 0x72
     368:	49540000 	ldmdbmi	r4, {}^
     36c:	495f324d 	ldmdbmi	pc, {r0, r2, r3, r6, r9, ip, sp}^
     370:	61485152 	cmpvs	r8, r2, asr r1
     374:	656c646e 	strbvs	r6, [ip, #-1134]!
     378:	03390072 	teqeq	r9, #114	; 0x72
     37c:	49540000 	ldmdbmi	r4, {}^
     380:	495f334d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, ip, sp}^
	for (i = 0; i < poseSize; i++)
		//nextpose_[i] = pgm_read_word_near(addr+1+i) << BIOLOID_SHIFT;
		nextpose_[i] = pgm_read_word_near(addr + 1 + i);
}
/* read in current servo positions to the pose. */
void BioloidControllerEx_readPose() {
     384:	61485152 	cmpvs	r8, r2, asr r1
     388:	656c646e 	strbvs	r6, [ip, #-1134]!
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
		//pose_[i] = dxl_read_word(id_[i],AXM_PRESENT_POSITION_L)<<BIOLOID_SHIFT;
		pose_[i] = dxl_read_word(id_[i], AXM_PRESENT_POSITION_L);
     38c:	034d0072 	movteq	r0, #53362	; 0xd072
     390:	49540000 	ldmdbmi	r4, {}^
     394:	495f344d 	ldmdbmi	pc, {r0, r2, r3, r6, sl, ip, sp}^
     398:	61485152 	cmpvs	r8, r2, asr r1
     39c:	656c646e 	strbvs	r6, [ip, #-1134]!
		PrintChar(id_[i]);
		PrintString(" - ");
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
     3a0:	03610072 	cmneq	r1, #114	; 0x72

#ifdef DEBUG_BIOLOIDEX
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
     3a4:	32490000 	subcc	r0, r9, #0	; 0x0
     3a8:	455f3143 	ldrbmi	r3, [pc, #-323]	; 26d <_Minimum_Stack_Size+0x16d>
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
	}
}
     3ac:	52495f56 	subpl	r5, r9, #344	; 0x158
     3b0:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     3b4:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     3b8:	00037500 	andeq	r7, r3, r0, lsl #10
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitPosY[GaitCurrentLegNr] = -3 * g_InControlState.LegLiftHeight
				/ (3 + g_InControlState.gaitCur.HalfLiftHeight); // Easier to shift between div factor: /1 (3/3), /2 (3/6) and 3/4
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y
     3bc:	43324900 	teqmi	r2, #0	; 0x0
				/ g_InControlState.gaitCur.LiftDivFactor;
	}

	//Optional Half heigth Rear 5 LiftedPos (5 lifted positions)
	else if (((g_InControlState.gaitCur.NrLiftedPos == 5 && (LegStep == -2)))
     3c0:	52455f31 	subpl	r5, r5, #196	; 0xc4
     3c4:	5152495f 	cmppl	r2, pc, asr r9
     3c8:	646e6148 	strbtvs	r6, [lr], #-328
     3cc:	0072656c 	rsbseq	r6, r2, ip, ror #10
     3d0:	00000389 	andeq	r0, r0, r9, lsl #7
     3d4:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
     3d8:	5f56455f 	svcpl	0x0056455f
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = -g_InControlState.TravelLength.x / 2;
     3dc:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     3e0:	6c646e61 	stclvs	14, cr6, [r4], #-388
     3e4:	9d007265 	sfmls	f7, 4, [r0, #-404]
     3e8:	49000003 	stmdbmi	r0, {r0, r1}
     3ec:	5f324332 	svcpl	0x00324332
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
     3f0:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^
     3f4:	61485152 	cmpvs	r8, r2, asr r1
     3f8:	656c646e 	strbvs	r6, [ip, #-1134]!
     3fc:	03b10072 	undefined instruction 0x03b10072
     400:	50530000 	subspl	r0, r3, r0
		GaitPosZ[GaitCurrentLegNr] = -g_InControlState.TravelLength.z / 2;
     404:	495f3149 	ldmdbmi	pc, {r0, r3, r6, r8, ip, sp}^
     408:	61485152 	cmpvs	r8, r2, asr r1
     40c:	656c646e 	strbvs	r6, [ip, #-1134]!
     410:	03c50072 	biceq	r0, r5, #114	; 0x72
		GaitRotY[GaitCurrentLegNr] = -g_InControlState.TravelLength.y / 2;
     414:	50530000 	subspl	r0, r3, r0
     418:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^
     41c:	61485152 	cmpvs	r8, r2, asr r1
     420:	656c646e 	strbvs	r6, [ip, #-1134]!
	}

	//Optional Half heigth Front 5 LiftedPos (5 lifted positions)
	else if ((g_InControlState.gaitCur.NrLiftedPos == 5)
     424:	03d90072 	bicseq	r0, r9, #114	; 0x72
     428:	53550000 	cmppl	r5, #0	; 0x0
     42c:	32545241 	subscc	r5, r4, #268435460	; 0x10000004
     430:	5152495f 	cmppl	r2, pc, asr r9
     434:	646e6148 	strbtvs	r6, [lr], #-328
     438:	0072656c 	rsbseq	r6, r2, ip, ror #10
			&& (LegStep == 2
					|| LegStep == -(g_InControlState.gaitCur.StepsInGait - 2))
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
     43c:	000003ed 	andeq	r0, r0, sp, ror #7
     440:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     444:	315f3531 	cmpcc	pc, r1, lsr r5
     448:	52495f30 	subpl	r5, r9, #192	; 0xc0
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
     44c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     450:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     454:	00040100 	andeq	r0, r4, r0, lsl #2
     458:	43545200 	cmpmi	r4, #0	; 0x0
     45c:	72616c41 	rsbvc	r6, r1, #16640	; 0x4100
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
     460:	52495f6d 	subpl	r5, r9, #436	; 0x1b4
     464:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     468:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     46c:	00041500 	andeq	r1, r4, r0, lsl #10
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y / 2;
     470:	42535500 	subsmi	r5, r3, #0	; 0x0
     474:	656b6157 	strbvs	r6, [fp, #-343]!
     478:	495f7055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, sp, lr}^
     47c:	61485152 	cmpvs	r8, r2, asr r1
	}
	//_B_
	//Leg front down position //bug here?  From _A_ to _B_ there should only be one gaitstep, not 2!
	//For example, where is the case of LegStep==0+2 executed when NRLiftedPos=3?
	else if ((LegStep == g_InControlState.gaitCur.FrontDownPos
     480:	656c646e 	strbvs	r6, [ip, #-1134]!
     484:	04290072 	strteq	r0, [r9], #-114
     488:	49540000 	ldmdbmi	r4, {}^
     48c:	425f384d 	subsmi	r3, pc, #5046272	; 0x4d0000
     490:	495f4b52 	ldmdbmi	pc, {r1, r4, r6, r8, r9, fp, lr}^
     494:	61485152 	cmpvs	r8, r2, asr r1
     498:	656c646e 	strbvs	r6, [ip, #-1134]!
     49c:	043d0072 	ldrteq	r0, [sp], #-114
			|| LegStep
					== -(g_InControlState.gaitCur.StepsInGait
							- g_InControlState.gaitCur.FrontDownPos))
			&& GaitPosY[GaitCurrentLegNr] < 0) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
     4a0:	49540000 	ldmdbmi	r4, {}^
     4a4:	555f384d 	ldrbpl	r3, [pc, #-2125]	; fffffc5f <SCS_BASE+0x1fff1c5f>
     4a8:	52495f50 	subpl	r5, r9, #320	; 0x140
     4ac:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
     4b0:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     4b4:	00045100 	andeq	r5, r4, r0, lsl #2
     4b8:	4d495400 	cfstrdmi	mvd5, [r9]
     4bc:	52545f38 	subspl	r5, r4, #224	; 0xe0
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y / 2;
     4c0:	4f435f47 	svcmi	0x00435f47
     4c4:	52495f4d 	subpl	r5, r9, #308	; 0x134
     4c8:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
		GaitPosY[GaitCurrentLegNr] = 0;
     4cc:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     4d0:	00046500 	andeq	r6, r4, r0, lsl #10
	}

	//Move body forward
	else {
		GaitPosX[GaitCurrentLegNr] = GaitPosX[GaitCurrentLegNr]
     4d4:	4d495400 	cfstrdmi	mvd5, [r9]
     4d8:	43435f38 	movtmi	r5, #16184	; 0x3f38
     4dc:	5152495f 	cmppl	r2, pc, asr r9
     4e0:	646e6148 	strbtvs	r6, [lr], #-328
     4e4:	0072656c 	rsbseq	r6, r2, ip, ror #10
     4e8:	00000479 	andeq	r0, r0, r9, ror r4
				- (g_InControlState.TravelLength.x
						/ (short) g_InControlState.gaitCur.TLDivFactor);
		GaitPosY[GaitCurrentLegNr] = 0;
     4ec:	33434441 	movtcc	r4, #13377	; 0x3441
     4f0:	5152495f 	cmppl	r2, pc, asr r9
     4f4:	646e6148 	strbtvs	r6, [lr], #-328
		GaitPosZ[GaitCurrentLegNr] = GaitPosZ[GaitCurrentLegNr]
     4f8:	0072656c 	rsbseq	r6, r2, ip, ror #10
     4fc:	0000048d 	andeq	r0, r0, sp, lsl #9
     500:	434d5346 	movtmi	r5, #54086	; 0xd346
     504:	5152495f 	cmppl	r2, pc, asr r9
				- (g_InControlState.TravelLength.z
						/ (short) g_InControlState.gaitCur.TLDivFactor);
		GaitRotY[GaitCurrentLegNr] = GaitRotY[GaitCurrentLegNr]
     508:	646e6148 	strbtvs	r6, [lr], #-328
     50c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     510:	000004a1 	andeq	r0, r0, r1, lsr #9
     514:	4f494453 	svcmi	0x00494453
				- (g_InControlState.TravelLength.y
						/ (short) g_InControlState.gaitCur.TLDivFactor);
	}

}
     518:	5152495f 	cmppl	r2, pc, asr r9
     51c:	646e6148 	strbtvs	r6, [lr], #-328
     520:	0072656c 	rsbseq	r6, r2, ip, ror #10
     524:	000004b5 	strheq	r0, [r0], -r5
     528:	354d4954 	strbcc	r4, [sp, #-2388]
     52c:	5152495f 	cmppl	r2, pc, asr r9
     530:	646e6148 	strbtvs	r6, [lr], #-328

}

//--------------------------------------------------------------------
//[GAIT Sequence]
void GaitSeq(void) {
     534:	0072656c 	rsbseq	r6, r2, ip, ror #10
	//Check if the Gait is in motion - If not if we are going to start a motion try to align our Gaitstep to start with a good foot
	// for the direction we are about to go...

	if (fWalking || (g_InControlState.ForceGaitStepCnt != 0))
     538:	000004c9 	andeq	r0, r0, r9, asr #9
     53c:	33495053 	movtcc	r5, #36947	; 0x9053
     540:	5152495f 	cmppl	r2, pc, asr r9
		TravelRequest = true;   // Is walking or was walking...
     544:	646e6148 	strbtvs	r6, [lr], #-328
     548:	0072656c 	rsbseq	r6, r2, ip, ror #10
	else {
		TravelRequest = (abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
     54c:	000004dd 	ldrdeq	r0, [r0], -sp
     550:	54524155 	ldrbpl	r4, [r2], #-341
     554:	52495f34 	subpl	r5, r9, #208	; 0xd0
     558:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     55c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     560:	0004f100 	andeq	pc, r4, r0, lsl #2
     564:	4d495400 	cfstrdmi	mvd5, [r9]
     568:	52495f36 	subpl	r5, r9, #216	; 0xd8
     56c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     570:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     574:	00050500 	andeq	r0, r5, r0, lsl #10
     578:	4d495400 	cfstrdmi	mvd5, [r9]
     57c:	52495f37 	subpl	r5, r9, #220	; 0xdc
				|| (abs(g_InControlState.TravelLength.y) > cTravelDeadZone);

		if (TravelRequest) {

		} else {    //Clear values under the cTravelDeadZone
			g_InControlState.TravelLength.x = 0;
     580:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
			g_InControlState.TravelLength.z = 0;
     584:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
			g_InControlState.TravelLength.y = 0; //Gait NOT in motion, return to home position
		}
	}

	//Calculate Gait sequence
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
     588:	00051900 	andeq	r1, r5, r0, lsl #18
     58c:	414d4400 	cmpmi	sp, r0, lsl #8
     590:	68435f32 	stmdavs	r3, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
		Gait(LegIndex);
     594:	656e6e61 	strbvs	r6, [lr, #-3681]!
			g_InControlState.TravelLength.y = 0; //Gait NOT in motion, return to home position
		}
	}

	//Calculate Gait sequence
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
     598:	495f316c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, ip, sp}^
     59c:	61485152 	cmpvs	r8, r2, asr r1
     5a0:	656c646e 	strbvs	r6, [ip, #-1134]!
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5a4:	052d0072 	streq	r0, [sp, #-114]!
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
     5a8:	4d440000 	stclmi	0, cr0, [r4]
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5ac:	435f3241 	cmpmi	pc, #268435460	; 0x10000004
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
     5b0:	6e6e6168 	powvsez	f6, f6, #0.0
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5b4:	5f326c65 	svcpl	0x00326c65
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
		g_InControlState.GaitStep = 1;
     5b8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     5bc:	6c646e61 	stclvs	14, cr6, [r4], #-388

	// If we have a force count decrement it now...
	if (g_InControlState.ForceGaitStepCnt)
     5c0:	41007265 	tstmi	r0, r5, ror #4
     5c4:	44000005 	strmi	r0, [r0], #-5
		g_InControlState.ForceGaitStepCnt--;
     5c8:	5f32414d 	svcpl	0x0032414d
}
     5cc:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     5d0:	336c656e 	cmncc	ip, #461373440	; 0x1b800000
     5d4:	5152495f 	cmppl	r2, pc, asr r9
     5d8:	646e6148 	strbtvs	r6, [lr], #-328
     5dc:	0072656c 	rsbseq	r6, r2, ip, ror #10
}
//--------------------------------------------------------------------
//[BalanceBody]
void BalanceBody(void) {

	TotalTransZ = TotalTransZ / BalanceDivFactor;
     5e0:	00000555 	andeq	r0, r0, r5, asr r5
     5e4:	32414d44 	subcc	r4, r1, #4352	; 0x1100
     5e8:	6168435f 	cmnvs	r8, pc, asr r3
     5ec:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     5f0:	5f355f34 	svcpl	0x00355f34
	TotalTransX = TotalTransX / BalanceDivFactor;
     5f4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     5f8:	6c646e61 	stclvs	14, cr6, [r4], #-388
     5fc:	69007265 	stmdbvs	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
	TotalTransY = TotalTransY / BalanceDivFactor;
     600:	55000005 	strpl	r0, [r0, #-5]
     604:	35545241 	ldrbcc	r5, [r4, #-577]
     608:	5152495f 	cmppl	r2, pc, asr r9
     60c:	646e6148 	strbtvs	r6, [lr], #-328

	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
		TotalXBal1 += 3600;

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
     610:	0072656c 	rsbseq	r6, r2, ip, ror #10
     614:	0000057f 	andeq	r0, r0, pc, ror r5
	TotalTransX = TotalTransX / BalanceDivFactor;
	TotalTransY = TotalTransY / BalanceDivFactor;

#ifndef QUADMODE // ??? on PhantomX Hex at no movment YBal1 = 1800, on Quad = 0...  Need to experiment
	if (TotalYBal1 > 0)        //Rotate balance circle by +/- 180 deg
		TotalYBal1 -= 1800;
     618:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     61c:	495f3354 	ldmdbmi	pc, {r2, r4, r6, r8, r9, ip, sp}^
	else
		TotalYBal1 += 1800;
     620:	61485152 	cmpvs	r8, r2, asr r1
#endif

	if (TotalZBal1 < -1800) //Compensate for extreme balance positions that causes overflow
     624:	656c646e 	strbvs	r6, [ip, #-1134]!
     628:	05950072 	ldreq	r0, [r5, #114]
     62c:	53550000 	cmppl	r5, #0	; 0x0
		TotalZBal1 += 3600;
     630:	31545241 	cmpcc	r4, r1, asr #4
     634:	5152495f 	cmppl	r2, pc, asr r9

	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
     638:	646e6148 	strbtvs	r6, [lr], #-328
     63c:	0072656c 	rsbseq	r6, r2, ip, ror #10
		TotalXBal1 += 3600;
     640:	000005ab 	andeq	r0, r0, fp, lsr #11
     644:	54737953 	ldrbtpl	r7, [r3], #-2387

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
     648:	486b6369 	stmdami	fp!, {r0, r3, r5, r6, r8, r9, sp, lr}^
     64c:	6c646e61 	stclvs	14, cr6, [r4], #-388
	TotalXBal1 = -TotalXBal1 / BalanceDivFactor;
     650:	00007265 	andeq	r7, r0, r5, ror #4
     654:	6f000000 	svcvs	0x00000000
	TotalZBal1 = TotalZBal1 / BalanceDivFactor;
     658:	02000009 	andeq	r0, r0, #9	; 0x9
	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
		TotalXBal1 += 3600;

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
	TotalXBal1 = -TotalXBal1 / BalanceDivFactor;
     65c:	000c1700 	andeq	r1, ip, r0, lsl #14
     660:	001ab700 	andseq	fp, sl, r0, lsl #14
	TotalZBal1 = TotalZBal1 / BalanceDivFactor;
     664:	00064000 	andeq	r4, r6, r0
     668:	6d6f4300 	stclvs	3, cr4, [pc]

}
     66c:	646e616d 	strbtvs	r6, [lr], #-365
     670:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
     674:	43747570 	cmnmi	r4, #469762048	; 0x1c000000
     678:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     67c:	656c6c6f 	strbvs	r6, [ip, #-3183]!
     680:	6e495f72 	mcrvs	15, 2, r5, cr9, cr2, {3}
     684:	4f007469 	svcmi	0x00007469
     688:	43000006 	movwmi	r0, #6	; 0x6
//sin4        - Output Sinus of AngleDeg
//cos4          - Output Cosinus of AngleDeg
void GetSinCos(short AngleDeg1) {
	short ABSAngleDeg1;   //Absolute value of the Angle in Degrees, decimals = 1
	//Get the absolute value of AngleDeg
	if (AngleDeg1 < 0)
     68c:	616d6d6f 	cmnvs	sp, pc, ror #26
     690:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
		ABSAngleDeg1 = AngleDeg1 * -1;
     694:	75706e49 	ldrbvc	r6, [r0, #-3657]!
     698:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
	else
		ABSAngleDeg1 = AngleDeg1;

	//Shift rotation to a full circle of 360 deg -> AngleDeg // 360
	if (AngleDeg1 < 0)    //Negative values
		AngleDeg1 = 3600 - (ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600)));
     69c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464
     6a0:	5f72656c 	svcpl	0x0072656c
     6a4:	6f6c6c41 	svcvs	0x006c6c41
     6a8:	6e6f4377 	mcrvs	3, 3, r4, cr15, cr7, {3}
     6ac:	6c6f7274 	sfmvs	f7, 2, [pc], #-464
     6b0:	4972656c 	ldmdbmi	r2!, {r2, r3, r5, r6, r8, sl, sp, lr}^
     6b4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     6b8:	74707572 	ldrbtvc	r7, [r0], #-1394
     6bc:	066a0073 	undefined
	else
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));

	if (AngleDeg1 >= 0 && AngleDeg1 <= 900)     // 0 to 90 deg
     6c0:	6f430000 	svcvs	0x00430000
     6c4:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
			{
		sin4 = pgm_read_word(&GetSin[AngleDeg1 / 5]); // 5 is the presision (0.5) of the table
     6c8:	54726564 	ldrbtpl	r6, [r2], #-1380
     6cc:	526e7275 	rsbpl	r7, lr, #1342177287	; 0x50000007
     6d0:	746f626f 	strbtvc	r6, [pc], #623	; 6d8 <__Stack_Size+0x2d8>
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
     6d4:	0066664f 	rsbeq	r6, r6, pc, asr #12
     6d8:	0000067e 	andeq	r0, r0, lr, ror r6
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));

	if (AngleDeg1 >= 0 && AngleDeg1 <= 900)     // 0 to 90 deg
			{
		sin4 = pgm_read_word(&GetSin[AngleDeg1 / 5]); // 5 is the presision (0.5) of the table
     6dc:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!
     6e0:	65646e61 	strbvs	r6, [r4, #-3681]!
     6e4:	6f435f72 	svcvs	0x00435f72
     6e8:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
     6ec:	00726564 	rsbseq	r6, r2, r4, ror #10
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
     6f0:	00000691 	muleq	r0, r1, r6
     6f4:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!
     6f8:	65646e61 	strbvs	r6, [r4, #-3681]!
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
     6fc:	65625f72 	strbvs	r5, [r2, #-3954]!
     700:	006e6967 	rsbeq	r6, lr, r7, ror #18
     704:	000006b8 	strheq	r0, [r0], -r8
     708:	636c6143 	cmnvs	ip, #-1073741808	; 0xc0000010
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     70c:	74616c75 	strbtvc	r6, [r1], #-3189
     710:	31584165 	cmpcc	r8, r5, ror #2
     714:	766f4d32 	undefined
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     718:	65705365 	ldrbvs	r5, [r0, #-869]!
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     71c:	26006465 	strcs	r6, [r0], -r5, ror #8
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     720:	72000007 	andvc	r0, r0, #7	; 0x7
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     724:	53646165 	cmnpl	r4, #1073741849	; 0x40000019
     728:	6f736e65 	svcvs	0x00736e65
     72c:	3a007372 	bcc	1d4fc <__Stack_Size+0x1d0fc>
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     730:	57000007 	strpl	r0, [r0, -r7]
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     734:	65746972 	ldrbvs	r6, [r4, #-2418]!
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     738:	7074754f 	rsbsvc	r7, r4, pc, asr #10
     73c:	00737475 	rsbseq	r7, r3, r5, ror r4
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
     740:	00000749 	andeq	r0, r0, r9, asr #14
     744:	676e6953 	undefined
     748:	654c656c 	strbvs	r6, [ip, #-1388]
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     74c:	6e6f4367 	cdpvs	3, 6, cr4, cr15, cr7, {3}
     750:	6c6f7274 	sfmvs	f7, 2, [pc], #-464
     754:	00075f00 	andeq	r5, r7, r0, lsl #30
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     758:	69614700 	stmdbvs	r1!, {r8, r9, sl, lr}^
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     75c:	6c655374 	stclvs	3, cr5, [r5], #-464
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     760:	00746365 	rsbseq	r6, r4, r5, ror #6
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     764:	00000770 	andeq	r0, r0, r0, ror r7
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     768:	74696147 	strbtvc	r6, [r9], #-327
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     76c:	0007ab00 	andeq	sl, r7, r0, lsl #22
     770:	69614700 	stmdbvs	r1!, {r8, r9, sl, lr}^
     774:	71655374 	smcvc	21812
     778:	0007c100 	andeq	ip, r7, r0, lsl #2
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     77c:	6c614200 	sfmvs	f4, 2, [r1]
     780:	65636e61 	strbvs	r6, [r3, #-3681]!
     784:	79646f42 	stmdbvc	r4!, {r1, r6, r8, r9, sl, fp, sp, lr}^
     788:	0007d700 	andeq	sp, r7, r0, lsl #14
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
     78c:	74654700 	strbtvc	r4, [r5], #-1792
     790:	436e6953 	cmnmi	lr, #1359872	; 0x14c000
     794:	1200736f 	andne	r7, r0, #-1140850687	; 0xbc000001
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     798:	47000008 	strmi	r0, [r0, -r8]
     79c:	72417465 	subvc	r7, r1, #1694498816	; 0x65000000
     7a0:	736f4363 	cmnvc	pc, #-1946157055	; 0x8c000001
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7a4:	00085100 	andeq	r5, r8, r0, lsl #2
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7a8:	71736900 	cmnvc	r3, r0, lsl #18
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7ac:	32337472 	eorscc	r7, r3, #1912602624	; 0x72000000
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7b0:	0008a600 	andeq	sl, r8, r0, lsl #12
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7b4:	74654700 	strbtvc	r4, [r5], #-1792
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7b8:	6e615441 	cdpvs	4, 6, cr5, cr1, cr1, {2}
     7bc:	08e50032 	stmiaeq	r5!, {r1, r4, r5}^
     7c0:	61420000 	cmpvs	r2, r0
     7c4:	6c61436c 	stclvs	3, cr4, [r1], #-432
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7c8:	656e4f63 	strbvs	r4, [lr, #-3939]!
     7cc:	0067654c 	rsbeq	r6, r7, ip, asr #10
     7d0:	00000978 	andeq	r0, r0, r8, ror r9
	//Shift rotation to a full circle of 360 deg -> AngleDeg // 360
	if (AngleDeg1 < 0)    //Negative values
		AngleDeg1 = 3600 - (ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600)));
	else
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));
     7d4:	79646f42 	stmdbvc	r4!, {r1, r6, r8, r9, sl, fp, sp, lr}^
     7d8:	69004b46 	stmdbvs	r0, {r1, r2, r6, r8, r9, fp, lr}
     7dc:	4c00000a 	stcmi	0, cr0, [r0], {10}
     7e0:	4b496765 	blmi	125a57c <__Stack_Size+0x125a17c>
     7e4:	000b1900 	andeq	r1, fp, r0, lsl #18
     7e8:	65684300 	strbvs	r4, [r8, #-768]!
     7ec:	65536b63 	ldrbvs	r6, [r3, #-2915]
     7f0:	416f7672 	smcmi	63330
     7f4:	656c676e 	strbvs	r6, [ip, #-1902]!
     7f8:	6e756f42 	cdpvs	15, 7, cr6, cr5, cr2, {2}
	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
	}
}
     7fc:	56007364 	strpl	r7, [r0], -r4, ror #6
     800:	4300000b 	movwmi	r0, #11	; 0xb
     804:	6b636568 	blvs	18d9dac <__Stack_Size+0x18d99ac>
     808:	6c676e41 	stclvs	14, cr6, [r7], #-260
     80c:	13007365 	movwne	r7, #869	; 0x365
//cos4        - Input Cosinus
//AngleRad4     - Output Angle in AngleRad4
long GetArcCos(short cos4) {
	boolean NegativeValue/*:1*/;    //If the the value is Negative
	//Check for negative value
	if (cos4 < 0) {
     810:	5300000c 	movwpl	r0, #12	; 0xc
     814:	746f6f6d 	strbtvc	r6, [pc], #3949	; 81c <__Stack_Size+0x41c>
     818:	6e6f4368 	cdpvs	3, 6, cr4, cr15, cr8, {3}
		cos4 = -cos4;
     81c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464
     820:	000c5c00 	andeq	r5, ip, r0, lsl #24
		NegativeValue = 1;
	} else
		NegativeValue = 0;

	//Limit cos4 to his maximal value
	cos4 = min(cos4, c4DEC);
     824:	74654700 	strbtvc	r4, [r5], #-1792
     828:	7367654c 	cmnvc	r7, #318767104	; 0x13000000
     82c:	654c5a58 	strbvs	r5, [ip, #-2648]

	if ((cos4 >= 0) && (cos4 < 9000)) {
     830:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     834:	000c7600 	andeq	r7, ip, r0, lsl #12
     838:	6a644100 	bvs	1910c40 <__Stack_Size+0x1910840>
		AngleRad4 = (byte) pgm_read_byte(&GetACos[cos4 / 79]);
     83c:	4c747375 	ldclmi	3, cr7, [r4], #-468
     840:	6f506765 	svcvs	0x00506765
     844:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
		AngleRad4 = ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255) ;
     848:	00736e6f 	rsbseq	r6, r3, pc, ror #28
     84c:	00000cad 	andeq	r0, r0, sp, lsr #25
	} else if ((cos4 >= 9000) && (cos4 < 9900)) {
     850:	65736552 	ldrbvs	r6, [r3, #-1362]!
     854:	67654c74 	undefined
     858:	74696e49 	strbtvc	r6, [r9], #-3657
     85c:	6c676e41 	stclvs	14, cr6, [r7], #-260
		AngleRad4 = (byte) pgm_read_byte(&GetACos[(cos4 - 9000) / 8 + 114]);
     860:	bc007365 	stclt	3, cr7, [r0], {101}
     864:	5200000c 	andpl	r0, r0, #12	; 0xc
     868:	7461746f 	strbtvc	r7, [r1], #-1135
     86c:	67654c65 	strbvs	r4, [r5, -r5, ror #24]!
     870:	74696e49 	strbtvc	r6, [r9], #-3657
     874:	6c676e41 	stclvs	14, cr6, [r7], #-260
		AngleRad4 = (long) ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255)
     878:	d7007365 	strle	r7, [r0, -r5, ror #6]
	} else if ((cos4 >= 9900) && (cos4 <= 10000)) {
     87c:	4100000c 	tstmi	r0, ip
     880:	73756a64 	cmnvc	r5, #409600	; 0x64000
     884:	67654c74 	undefined
		AngleRad4 = (byte) pgm_read_byte(&GetACos[(cos4 - 9900) / 2 + 227]);
     888:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
     88c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     890:	426f5473 	rsbmi	r5, pc, #1929379840	; 0x73000000
		AngleRad4 = (long) ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255)
     894:	4879646f 	ldmdami	r9!, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
     898:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
     89c:	0d0f0074 	stceq	0, cr0, [pc, #-464]
     8a0:	68430000 	stmdavs	r3, {}^
     8a4:	566b6365 	strbtpl	r6, [fp], -r5, ror #6
     8a8:	61746c6f 	cmnvs	r4, pc, ror #24
     8ac:	29006567 	stmdbcs	r0, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
	}

	//Add negative sign
	if (NegativeValue)
		AngleRad4 = 31416 - AngleRad4;
     8b0:	4200000d 	andmi	r0, r0, #13	; 0xd
     8b4:	676b6361 	strbvs	r6, [fp, -r1, ror #6]!
     8b8:	6e756f72 	mrcvs	15, 3, r6, cr5, cr2, {3}
     8bc:	6f725064 	svcvs	0x00725064
     8c0:	73736563 	cmnvc	r3, #415236096	; 0x18c00000

	return AngleRad4;
}
     8c4:	000d3f00 	andeq	r3, sp, r0, lsl #30
     8c8:	6c644900 	stclvs	9, cr4, [r4]
     8cc:	6d695465 	cfstrdvs	mvd5, [r9, #-404]!
     8d0:	0d550065 	ldcleq	0, cr0, [r5, #-404]
     8d4:	65530000 	ldrbvs	r0, [r3]
     8d8:	67655274 	undefined

unsigned long isqrt32(unsigned long n) //
{
     8dc:	6c416e4f 	mcrrvs	14, 4, r6, r1, cr15
     8e0:	7265536c 	rsbvc	r5, r5, #-1342177279	; 0xb0000001

	root = 0;
	remainder = n;
	place = 0x40000000; // OR place = 0x4000; OR place = 0x40; - respectively

	while (place > remainder)
     8e4:	00736f76 	rsbseq	r6, r3, r6, ror pc
     8e8:	00000dbd 	strheq	r0, [r0], -sp
     8ec:	656b614d 	strbvs	r6, [fp, #-333]!
		place = place >> 2;
	while (place) {
		if (remainder >= root + place) {
     8f0:	65727553 	ldrbvs	r7, [r2, #-1363]!
			remainder = remainder - root - place;
     8f4:	76726553 	undefined
     8f8:	7241736f 	subvc	r7, r1, #-1140850687	; 0xbc000001
			root = root + (place << 1);
     8fc:	006e4f65 	rsbeq	r4, lr, r5, ror #30

	while (place > remainder)
		place = place >> 2;
	while (place) {
		if (remainder >= root + place) {
			remainder = remainder - root - place;
     900:	00000dec 	andeq	r0, r0, ip, ror #27
			root = root + (place << 1);
		}
		root = root >> 1;
		place = place >> 2;
     904:	69676542 	stmdbvs	r7!, {r1, r6, r8, sl, sp, lr}^
	remainder = n;
	place = 0x40000000; // OR place = 0x4000; OR place = 0x40; - respectively

	while (place > remainder)
		place = place >> 2;
	while (place) {
     908:	7265536e 	rsbvc	r5, r5, #-1207959551	; 0xb8000001
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
	XYhyp2 = isqrt32(
     90c:	70556f76 	subsvc	r6, r5, r6, ror pc
//(GETATAN2) Simplyfied ArcTan2 function based on fixed point ArcCos
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
     910:	65746164 	ldrbvs	r6, [r4, #-356]!
	XYhyp2 = isqrt32(
     914:	000e1500 	andeq	r1, lr, r0, lsl #10
     918:	65724600 	ldrbvs	r4, [r2, #-1536]!
//(GETATAN2) Simplyfied ArcTan2 function based on fixed point ArcCos
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
     91c:	72655365 	rsbvc	r5, r5, #-1811939327	; 0x94000001
	XYhyp2 = isqrt32(
     920:	00736f76 	rsbseq	r6, r3, r6, ror pc
     924:	00000e44 	andeq	r0, r0, r4, asr #28
     928:	76726553 	undefined
			((long) AtanX * AtanX * c4DEC) + ((long) AtanY * AtanY * c4DEC));
	GetArcCos(((long) AtanX * (long) c6DEC) / (long) XYhyp2);
     92c:	6e495f6f 	cdpvs	15, 4, cr5, cr9, cr15, {3}
     930:	59007469 	stmdbpl	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
     934:	7300000e 	movwvc	r0, #14	; 0xe
     938:	70757465 	rsbsvc	r7, r5, r5, ror #8
     93c:	656f6850 	strbvs	r6, [pc, #-2128]!	; f4 <_Minimum_Stack_Size-0xc>
     940:	0078696e 	rsbseq	r6, r8, lr, ror #18
     944:	00000e8c 	andeq	r0, r0, ip, lsl #29

	if (AtanY < 0) // removed overhead... Atan4 = AngleRad4 * (AtanY/abs(AtanY));
     948:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!
		Atan4 = -AngleRad4;
     94c:	65537469 	ldrbvs	r7, [r3, #-1129]
	else
		Atan4 = AngleRad4;
     950:	446f7672 	strbtmi	r7, [pc], #1650	; 958 <__Stack_Size+0x558>
	XYhyp2 = isqrt32(
			((long) AtanX * AtanX * c4DEC) + ((long) AtanY * AtanY * c4DEC));
	GetArcCos(((long) AtanX * (long) c6DEC) / (long) XYhyp2);

	if (AtanY < 0) // removed overhead... Atan4 = AngleRad4 * (AtanY/abs(AtanY));
		Atan4 = -AngleRad4;
     954:	65766972 	ldrbvs	r6, [r6, #-2418]!
	else
		Atan4 = AngleRad4;
     958:	0f000072 	svceq	0x00000072
     95c:	754f0000 	strbvc	r0, [pc, #0]	; 964 <__Stack_Size+0x564>
	return Atan4;
}
     960:	74757074 	ldrbtvc	r7, [r5], #-116
     964:	76726553 	undefined
     968:	666e496f 	strbtvs	r4, [lr], -pc, ror #18
     96c:	726f466f 	rsbvc	r4, pc, #116391936	; 0x6f00000

}

//--------------------------------------------------------------------
//[BalCalcOneLeg]
void BalCalcOneLeg(long PosX, long PosZ, long PosY, byte BalLegNr) {
     970:	0067654c 	rsbeq	r6, r7, ip, asr #10
	long CPR_Y;            //Final Y value for centerpoint of rotation
	long CPR_Z;            //Final Z value for centerpoint of rotation

	long lAtan;
	//Calculating totals from center of the body to the feet
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BalLegNr]) + PosZ;
     974:	00000f77 	andeq	r0, r0, r7, ror pc
     978:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
	CPR_X = (short) pgm_read_word(&cOffsetX[BalLegNr]) + PosX;
     97c:	64705574 	ldrbtvs	r5, [r0], #-1396
     980:	53657461 	cmnpl	r5, #1627389952	; 0x61000000
	CPR_Y = 150 + PosY; // using the value 150 to lower the centerpoint of rotation 'g_InControlState.BodyPos.y +

	TotalTransY += (long) PosY;
     984:	6f767265 	svcvs	0x00767265
     988:	0fa20073 	svceq	0x00a20073
     98c:	65470000 	strbvs	r0, [r7]
	TotalTransZ += (long) CPR_Z;
     990:	74614274 	strbtvc	r4, [r1], #-628
     994:	79726574 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     998:	746c6f56 	strbtvc	r6, [ip], #-3926
	TotalTransX += (long) CPR_X;
     99c:	00656761 	rsbeq	r6, r5, r1, ror #14
     9a0:	00000fe0 	andeq	r0, r0, r0, ror #31
     9a4:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!
     9a8:	65646e61 	strbvs	r6, [r4, #-3681]!

	lAtan = GetATan2(CPR_X, CPR_Z);
     9ac:	65525f72 	ldrbvs	r5, [r2, #-3954]
	TotalYBal1 += (lAtan * 1800) / 31415;
     9b0:	734d6461 	movtvc	r6, #54369	; 0xd461
     9b4:	f9007367 	undefined instruction 0xf9007367
     9b8:	4300000f 	movwmi	r0, #15	; 0xf
     9bc:	616d6d6f 	cmnvs	sp, pc, ror #26
     9c0:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
     9c4:	75706e49 	ldrbvc	r6, [r0, #-3657]!
     9c8:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     9cc:	6c6f7274 	sfmvs	f7, 2, [pc], #-464

	lAtan = GetATan2(CPR_X, CPR_Y);
     9d0:	5f72656c 	svcpl	0x0072656c
     9d4:	746e6f43 	strbtvc	r6, [lr], #-3907
	TotalZBal1 += ((lAtan * 1800) / 31415) - 900; //Rotate balance circle 90 deg
     9d8:	496c6f72 	stmdbmi	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
     9dc:	7475706e 	ldrbtvc	r7, [r5], #-110
     9e0:	00109600 	andseq	r9, r0, r0, lsl #12
     9e4:	67694200 	strbvs	r4, [r9, -r0, lsl #4]!
     9e8:	69616d5f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
     9ec:	12ab006e 	adcne	r0, fp, #110	; 0x6e
     9f0:	554e0000 	strbpl	r0, [lr]
     9f4:	41475f4d 	cmpmi	r7, sp, asr #30
     9f8:	00535449 	subseq	r5, r3, r9, asr #8
     9fc:	000012be 	strheq	r1, [r0], -lr

	lAtan = GetATan2(CPR_Z, CPR_Y);
     a00:	44665f67 	strbtmi	r5, [r6], #-3943
     a04:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
	TotalXBal1 += ((lAtan * 1800) / 31415) - 900; //Rotate balance circle 90 deg
     a08:	7074754f 	rsbsvc	r7, r4, pc, asr #10
     a0c:	d1007475 	tstle	r0, r5, ror r4
     a10:	67000012 	smladvs	r0, r2, r0, r0
     a14:	6e45665f 	mcrvs	6, 2, r6, cr5, cr15, {2}
     a18:	656c6261 	strbvs	r6, [ip, #-609]!
     a1c:	76726553 	undefined
     a20:	e400736f 	str	r7, [r0], #-879
     a24:	67000012 	smladvs	r0, r2, r0, r0

}
     a28:	6f52665f 	svcvs	0x0052665f
     a2c:	55746f62 	ldrbpl	r6, [r4, #-3938]!
     a30:	64697370 	strbtvs	r7, [r9], #-880
     a34:	776f4465 	strbvc	r4, [pc, -r5, ror #8]!
     a38:	12f7006e 	rscsne	r0, r7, #110	; 0x6e
     a3c:	5f670000 	svcpl	0x00670000
     a40:	6f436e49 	svcvs	0x00436e49
     a44:	6f72746e 	svcvs	0x0072746e
     a48:	6174536c 	cmnvs	r4, ip, ror #6
     a4c:	19006574 	stmdbne	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
//SinG                  - Sin buffer for BodyRotZ
//CosG               - Cos buffer for BodyRotZ
//BodyFKPosX         - Output Position X of feet with Rotation
//BodyFKPosY         - Output Position Y of feet with Rotation
//BodyFKPosZ         - Output Position Z of feet with Rotation
void BodyFK(short PosX, short PosZ, short PosY, short RotationY, byte BodyIKLeg) {
     a50:	67000013 	smladvs	r0, r3, r0, r0
     a54:	4862615f 	stmdami	r2!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
	short CPR_X;            //Final X value for centerpoint of rotation
	short CPR_Y;            //Final Y value for centerpoint of rotation
	short CPR_Z;            //Final Z value for centerpoint of rotation

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
     a58:	6e497865 	cdpvs	8, 4, cr7, cr9, cr5, {3}
     a5c:	005a5874 	subseq	r5, sl, r4, ror r8
     a60:	00001330 	andeq	r1, r0, r0, lsr r3
//SinG                  - Sin buffer for BodyRotZ
//CosG               - Cos buffer for BodyRotZ
//BodyFKPosX         - Output Position X of feet with Rotation
//BodyFKPosY         - Output Position Y of feet with Rotation
//BodyFKPosZ         - Output Position Z of feet with Rotation
void BodyFK(short PosX, short PosZ, short PosY, short RotationY, byte BodyIKLeg) {
     a64:	62615f67 	rsbvs	r5, r1, #412	; 0x19c
	short CPR_X;            //Final X value for centerpoint of rotation
	short CPR_Y;            //Final Y value for centerpoint of rotation
	short CPR_Z;            //Final Z value for centerpoint of rotation

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
     a68:	4d786548 	cfldr64mi	mvdx6, [r8, #-288]!
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
     a6c:	6f427861 	svcvs	0x00427861
     a70:	00597964 	subseq	r7, r9, r4, ror #18
     a74:	00001347 	andeq	r1, r0, r7, asr #6

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     a78:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BodyIKLeg]) + PosZ
     a7c:	59005674 	stmdbpl	r0, {r2, r4, r5, r6, r9, sl, ip, lr}
     a80:	72000013 	andvc	r0, r0, #19	; 0x13
	//Successive global rotation matrix:
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
     a84:	74686769 	strbtvc	r6, [r8], #-1897
     a88:	136b0048 	cmnne	fp, #72	; 0x48

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BodyIKLeg]) + PosZ
     a8c:	656c0000 	strbvs	r0, [ip]!
	//Successive global rotation matrix:
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
     a90:	00567466 	subseq	r7, r6, r6, ror #8
     a94:	0000137d 	andeq	r1, r0, sp, ror r3
	SinG4 = sin4;
     a98:	7466656c 	strbtvc	r6, [r6], #-1388
	CosG4 = cos4;
     a9c:	138f0048 	orrne	r0, pc, #72	; 0x48
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
	SinG4 = sin4;
     aa0:	78650000 	stmdavc	r5!, {}^
	CosG4 = cos4;
     aa4:	13b10074 	undefined instruction 0x13b10074
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
	SinG4 = sin4;
     aa8:	61760000 	cmnvs	r6, r0
	CosG4 = cos4;

	GetSinCos(g_InControlState.BodyRot1.z + TotalZBal1);
     aac:	c300736c 	movwgt	r7, #876	; 0x36c
	SinB4 = sin4;
     ab0:	63000013 	movwvs	r0, #19	; 0x13
     ab4:	6b636568 	blvs	18da05c <__Stack_Size+0x18d9c5c>
	CosB4 = cos4;
     ab8:	006d7573 	rsbeq	r7, sp, r3, ror r5

	GetSinCos(g_InControlState.BodyRot1.y + (RotationY * c1DEC) + TotalYBal1);
     abc:	000013d5 	ldrdeq	r1, [r0], -r5
     ac0:	6c755f67 	ldclvs	15, cr5, [r5], #-412
     ac4:	7473614c 	ldrbtvc	r6, [r3], #-332
     ac8:	5467734d 	strbtpl	r7, [r7], #-845
     acc:	00656d69 	rsbeq	r6, r5, r9, ror #26

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     ad0:	000013e7 	andeq	r1, r0, r7, ror #7
     ad4:	47735f67 	ldrbmi	r5, [r3, -r7, ror #30]!
     ad8:	434d5350 	movtmi	r5, #54096	; 0xd350
     adc:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     ae0:	656c6c6f 	strbvs	r6, [ip, #-3183]!
     ae4:	13f90072 	mvnsne	r0, #114	; 0x72
     ae8:	5f670000 	svcpl	0x00670000
     aec:	6e794466 	cdpvs	4, 7, cr4, cr9, cr6, {3}
     af0:	63696d61 	cmnvs	r9, #6208	; 0x1840
     af4:	5867654c 	stmdapl	r7!, {r2, r3, r6, r8, sl, sp, lr}^
     af8:	6e654c5a 	mcrvs	12, 3, r4, cr5, cr10, {2}
     afc:	00687467 	rsbeq	r7, r8, r7, ror #8
     b00:	0000140b 	andeq	r1, r0, fp, lsl #8
     b04:	65535047 	ldrbvs	r5, [r3, #-71]
     b08:	141d0071 	ldrne	r0, [sp], #-113
     b0c:	5f670000 	svcpl	0x00670000
     b10:	53584166 	cmppl	r8, #-2147483623	; 0x80000019
     b14:	64656570 	strbtvs	r6, [r5], #-1392
     b18:	746e6f43 	strbtvc	r6, [lr], #-3907
     b1c:	006c6f72 	rsbeq	r6, ip, r2, ror pc
     b20:	00001459 	andeq	r1, r0, r9, asr r4
     b24:	77615f67 	strbvc	r5, [r1, -r7, ror #30]!
     b28:	41727543 	cmnmi	r2, r3, asr #10
     b2c:	736f5058 	cmnvc	pc, #88	; 0x58
     b30:	00146b00 	andseq	r6, r4, r0, lsl #22
     b34:	615f6700 	cmpvs	pc, r0, lsl #14
     b38:	616f4777 	smcvs	62583
     b3c:	5058416c 	subspl	r4, r8, ip, ror #2
     b40:	7d00736f 	stcvc	3, cr7, [r0, #-444]
     b44:	67000014 	smladvs	r0, r4, r0, r0
     b48:	6553665f 	ldrbvs	r6, [r3, #-1631]
     b4c:	736f7672 	cmnvc	pc, #119537664	; 0x7200000
     b50:	65657246 	strbvs	r7, [r5, #-582]!
     b54:	00148f00 	andseq	r8, r4, r0, lsl #30
     b58:	775f6700 	ldrbvc	r6, [pc, -r0, lsl #14]
     b5c:	7473614c 	ldrbtvc	r6, [r3], #-332
     b60:	746c6f56 	strbtvc	r6, [ip], #-3926
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     b64:	00656761 	rsbeq	r6, r5, r1, ror #14
     b68:	000014a1 	andeq	r1, r0, r1, lsr #9

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     b6c:	4c625f67 	stclmi	15, cr5, [r2], #-412
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     b70:	6f566765 	svcvs	0x00566765
     b74:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
     b78:	14b30065 	ldrtne	r0, [r3], #101
     b7c:	5f670000 	svcpl	0x00670000
     b80:	69546c75 	ldmdbvs	r4, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
     b84:	614c656d 	cmpvs	ip, sp, ror #10
     b88:	61427473 	cmpvs	r2, r3, ror r4
     b8c:	72657474 	rsbvc	r7, r5, #1946157056	; 0x74000000
     b90:	6c6f5679 	stclvs	6, cr5, [pc], #-484
     b94:	65676174 	strbvs	r6, [r7, #-372]!
     b98:	0014d500 	andseq	sp, r4, r0, lsl #10
     b9c:	6f436300 	svcvs	0x00436300
     ba0:	694d6178 	stmdbvs	sp, {r3, r4, r5, r6, r8, sp, lr}^
     ba4:	ec00316e 	stfs	f3, [r0], {110}
     ba8:	63000014 	movwvs	r0, #20	; 0x14
     bac:	61786f43 	cmnvs	r8, r3, asr #30
     bb0:	3178614d 	cmncc	r8, sp, asr #2
     bb4:	00150300 	andseq	r0, r5, r0, lsl #6
     bb8:	65466300 	strbvs	r6, [r6, #-768]
     bbc:	4d72756d 	cfldr64mi	mvdx7, [r2, #-436]!
     bc0:	00316e69 	eorseq	r6, r1, r9, ror #28
     bc4:	0000151a 	andeq	r1, r0, sl, lsl r5
     bc8:	6d654663 	stclvs	6, cr4, [r5, #-396]!
     bcc:	614d7275 	cmpvs	sp, r5, ror r2
     bd0:	31003178 	tstcc	r0, r8, ror r1
     bd4:	63000015 	movwvs	r0, #21	; 0x15
     bd8:	69626954 	stmdbvs	r2!, {r2, r4, r6, r8, fp, sp, lr}^
     bdc:	6e694d61 	cdpvs	13, 6, cr4, cr9, cr1, {3}
     be0:	15480031 	strbne	r0, [r8, #-49]
     be4:	54630000 	strbtpl	r0, [r3]
     be8:	61696269 	cmnvs	r9, r9, ror #4
     bec:	3178614d 	cmncc	r8, sp, asr #2
     bf0:	00156f00 	andseq	r6, r5, r0, lsl #30
     bf4:	6f436300 	svcvs	0x00436300
     bf8:	6e496178 	mcrvs	1, 2, r6, cr9, cr8, {3}
     bfc:	15860076 	strne	r0, [r6, #118]
     c00:	46630000 	strbtmi	r0, [r3], -r0
     c04:	72756d65 	rsbsvc	r6, r5, #6464	; 0x1940
     c08:	00766e49 	rsbseq	r6, r6, r9, asr #28
     c0c:	00001598 	muleq	r0, r8, r5
     c10:	62695463 	rsbvs	r5, r9, #1660944384	; 0x63000000
     c14:	6e496169 	dvfvsez	f6, f1, #1.0
     c18:	15af0076 	strne	r0, [pc, #118]!	; c96 <__Stack_Size+0x896>
     c1c:	43630000 	cmnmi	r3, #0	; 0x0
     c20:	4c61786f 	stclmi	8, cr7, [r1], #-444
     c24:	74676e65 	strbtvc	r6, [r7], #-3685
     c28:	15c60068 	strbne	r0, [r6, #104]
     c2c:	46630000 	strbtmi	r0, [r3], -r0
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * CosG4 / c4DEC
					- (long) CPR_Z * c2DEC * SinA4 / c4DEC * SinB4 / c4DEC
							* SinG4 / c4DEC
					- (long) CPR_Y * c2DEC * CosB4 / c4DEC * SinG4 / c4DEC))
			/ c2DEC;
	BodyFKPosY = ((long) CPR_Y * c2DEC
     c30:	72756d65 	rsbsvc	r6, r5, #6464	; 0x1940
	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     c34:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
     c38:	dd006874 	stcle	8, cr6, [r0, #-464]
     c3c:	63000015 	movwvs	r0, #21	; 0x15
     c40:	69626954 	stmdbvs	r2!, {r2, r4, r6, r8, fp, sp, lr}^
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * CosG4 / c4DEC
					- (long) CPR_Z * c2DEC * SinA4 / c4DEC * SinB4 / c4DEC
							* SinG4 / c4DEC
					- (long) CPR_Y * c2DEC * CosB4 / c4DEC * SinG4 / c4DEC))
			/ c2DEC;
	BodyFKPosY = ((long) CPR_Y * c2DEC
     c44:	6e654c61 	cdpvs	12, 6, cr4, cr5, cr1, {3}
     c48:	00687467 	rsbeq	r7, r8, r7, ror #8
     c4c:	000015f4 	strdeq	r1, [r0], -r4
     c50:	66664f63 	strbtvs	r4, [r6], -r3, ror #30
     c54:	58746573 	ldmdapl	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
     c58:	00160b00 	andseq	r0, r6, r0, lsl #22
     c5c:	664f6300 	strbvs	r6, [pc], -r0, lsl #6
     c60:	74657366 	strbtvc	r7, [r5], #-870
     c64:	1622005a 	undefined
     c68:	43630000 	cmnmi	r3, #0	; 0x0
     c6c:	4161786f 	cmnmi	r1, pc, ror #16
     c70:	656c676e 	strbvs	r6, [ip, #-1902]!
     c74:	16390031 	undefined
     c78:	49630000 	stmdbmi	r3!, {}^
     c7c:	5074696e 	rsbspl	r6, r4, lr, ror #18
     c80:	0058736f 	subseq	r7, r8, pc, ror #6
     c84:	00001651 	andeq	r1, r0, r1, asr r6
     c88:	696e4963 	stmdbvs	lr!, {r0, r1, r5, r6, r8, fp, lr}^
     c8c:	736f5074 	cmnvc	pc, #116	; 0x74
     c90:	16690059 	undefined
     c94:	49630000 	stmdbmi	r3!, {}^
     c98:	5074696e 	rsbspl	r6, r4, lr, ror #18
     c9c:	005a736f 	subseq	r7, sl, pc, ror #6
     ca0:	00001681 	andeq	r1, r0, r1, lsl #13
     ca4:	53665f67 	cmnpl	r6, #412	; 0x19c
     ca8:	44776f68 	ldrbtmi	r6, [r7], #-3944
     cac:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
     cb0:	6d6f7250 	sfmvs	f7, 2, [pc, #-320]!
     cb4:	94007470 	strls	r7, [r0], #-1136
     cb8:	43000016 	movwmi	r0, #22	; 0x16
     cbc:	4161786f 	cmnmi	r1, pc, ror #16
     cc0:	656c676e 	strbvs	r6, [ip, #-1902]!
     cc4:	16a70031 	undefined
     cc8:	65460000 	strbvs	r0, [r6]
     ccc:	4172756d 	cmnmi	r2, sp, ror #10
     cd0:	656c676e 	strbvs	r6, [ip, #-1902]!
     cd4:	16ba0031 	undefined
     cd8:	69540000 	ldmdbvs	r4, {}^
     cdc:	41616962 	cmnmi	r1, r2, ror #18
     ce0:	656c676e 	strbvs	r6, [ip, #-1902]!
     ce4:	16cd0031 	undefined
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * SinG4 / c4DEC
					+ (long) CPR_Z * c2DEC * CosG4 / c4DEC * SinA4 / c4DEC
							* SinB4 / c4DEC
					+ (long) CPR_Y * c2DEC * CosB4 / c4DEC * CosG4 / c4DEC))
			/ c2DEC;
}
     ce8:	654c0000 	strbvs	r0, [ip]
     cec:	736f5067 	cmnvc	pc, #103	; 0x67
     cf0:	16e00058 	usatne	r0, #0, r8, asr #0
     cf4:	654c0000 	strbvs	r0, [ip]
     cf8:	736f5067 	cmnvc	pc, #103	; 0x67
     cfc:	16f30059 	usatne	r0, #19, r9, asr #0
     d00:	654c0000 	strbvs	r0, [ip]
     d04:	736f5067 	cmnvc	pc, #103	; 0x67
     d08:	1706005a 	smlsdne	r6, sl, r0, r0
     d0c:	6e490000 	cdpvs	0, 4, cr0, cr9, cr0, {0}
     d10:	00786564 	rsbseq	r6, r8, r4, ror #10
     d14:	00001719 	andeq	r1, r0, r9, lsl r7
     d18:	4967654c 	stmdbmi	r7!, {r2, r3, r6, r8, sl, sp, lr}^
     d1c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
//FemurAngle1           - Output Angle of Femur in degrees
//TibiaAngle1           - Output Angle of Tibia in degrees
//CoxaAngle1            - Output Angle of Coxa in degrees
//--------------------------------------------------------------------
void LegIK(short IKFeetPosX, short IKFeetPosY, short IKFeetPosZ,
		byte LegIKLegNr) {
     d20:	00172c00 	andseq	r2, r7, r0, lsl #24
     d24:	676e4100 	strbvs	r4, [lr, -r0, lsl #2]!
     d28:	6544656c 	strbvs	r6, [r4, #-1388]
	long Temp1;
	long Temp2;
	long T3;

	//Calculate IKCoxaAngle and IKFeetPosXZ
	GetATan2(IKFeetPosX, IKFeetPosZ);
     d2c:	3f003167 	svccc	0x00003167
	CoxaAngle1[LegIKLegNr] = (((long) Atan4 * 180) / 3141)
     d30:	73000017 	movwvc	r0, #23	; 0x17
     d34:	00346e69 	eorseq	r6, r4, r9, ror #28
     d38:	00001752 	andeq	r1, r0, r2, asr r7
     d3c:	34736f63 	ldrbtcc	r6, [r3], #-3939
     d40:	00176500 	andseq	r6, r7, r0, lsl #10
     d44:	676e4100 	strbvs	r4, [lr, -r0, lsl #2]!
     d48:	6152656c 	cmpvs	r2, ip, ror #10
     d4c:	78003464 	stmdavc	r0, {r2, r5, r6, sl, ip, sp}
     d50:	41000017 	tstmi	r0, r7, lsl r0
     d54:	586e6174 	stmdapl	lr!, {r2, r4, r5, r6, r8, sp, lr}^
	//Length between the Coxa and tars [foot]
	IKFeetPosXZ = XYhyp2 / c2DEC;

	//Using GetAtan2 for solving IKA1 and IKSW
	//IKA14 - Angle between SW line and the ground in radians
	IKA14 = GetATan2(IKFeetPosY - TarsOffsetY,
     d58:	00178b00 	andseq	r8, r7, r0, lsl #22
     d5c:	61744100 	cmnvs	r4, r0, lsl #2
     d60:	9e00596e 	cdpls	9, 0, cr5, cr0, cr14, {3}
     d64:	41000017 	tstmi	r0, r7, lsl r0
     d68:	346e6174 	strbtcc	r6, [lr], #-372
     d6c:	0017b100 	andseq	fp, r7, r0, lsl #2
     d70:	68595800 	ldmdavs	r9, {fp, ip, lr}^

	//IKSW2 - Length between femur axis and tars
	IKSW2 = XYhyp2;

	//IKA2 - Angle of the line S>W with respect to the femur in radians
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     d74:	00327079 	eorseq	r7, r2, r9, ror r0
     d78:	000017c4 	andeq	r1, r0, r4, asr #15
     d7c:	58736f50 	ldmdapl	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
     d80:	0017d700 	andseq	sp, r7, r0, lsl #14
					* (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))) * c4DEC
			+ ((long) IKSW2 * IKSW2));
	Temp2 = (long) (2 * (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])) * c2DEC
			* (unsigned long) IKSW2;
	T3 = Temp1 / (Temp2 / c4DEC);
	IKA24 = GetArcCos(T3);
     d84:	736f5000 	cmnvc	pc, #0	; 0x0
     d88:	17ea005a 	ubfxne	r0, sl, #0, #11
     d8c:	6f500000 	svcvs	0x00500000
     d90:	fd005973 	stc2	9, cr5, [r0, #-460]
     d94:	42000017 	andmi	r0, r0, #23	; 0x17
     d98:	4679646f 	ldrbtmi	r6, [r9], -pc, ror #8
     d9c:	736f504b 	cmnvc	pc, #75	; 0x4b
     da0:	18100058 	ldmdane	r0, {r3, r4, r6}
     da4:	6f420000 	svcvs	0x00420000
     da8:	4b467964 	blmi	119f340 <__Stack_Size+0x119ef40>
     dac:	59736f50 	ldmdbpl	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
     db0:	00182300 	andseq	r2, r8, r0, lsl #6
     db4:	646f4200 	strbtvs	r4, [pc], #512	; dbc <__Stack_Size+0x9bc>

	FemurAngle1[LegIKLegNr] = -(long) (IKA14 + IKA24) * 180
     db8:	504b4679 	subpl	r4, fp, r9, ror r6
     dbc:	005a736f 	subseq	r7, sl, pc, ror #6
     dc0:	00001836 	andeq	r1, r0, r6, lsr r8
     dc4:	65464b49 	strbvs	r4, [r6, #-2889]
     dc8:	6f507465 	svcvs	0x00507465
     dcc:	49005873 	stmdbmi	r0, {r0, r1, r4, r5, r6, fp, ip, lr}
     dd0:	49000018 	stmdbmi	r0, {r3, r4}
     dd4:	6565464b 	strbvs	r4, [r5, #-1611]!
     dd8:	736f5074 	cmnvc	pc, #116	; 0x74
			/ 3141+ 900 + CFEMURHORNOFFSET1(LegIKLegNr);  //Normal

	//IKTibiaAngle
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     ddc:	185c0059 	ldmdane	ip, {r0, r3, r4, r6}^
	Temp2 = (long) (2 * (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])) * c2DEC
			* (unsigned long) IKSW2;
	T3 = Temp1 / (Temp2 / c4DEC);
	IKA24 = GetArcCos(T3);

	FemurAngle1[LegIKLegNr] = -(long) (IKA14 + IKA24) * 180
     de0:	4b490000 	blmi	1240de8 <__Stack_Size+0x12409e8>
			/ 3141+ 900 + CFEMURHORNOFFSET1(LegIKLegNr);  //Normal

	//IKTibiaAngle
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     de4:	74656546 	strbtvc	r6, [r5], #-1350
     de8:	5a736f50 	bpl	1cdcb30 <__Stack_Size+0x1cdc730>
			+ ((long) (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr])
					* (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))) * c4DEC
			- ((long) IKSW2 * IKSW2));
	Temp2 = 2 * ((long) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])))
			* (long) ((byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]));
	GetArcCos(Temp1 / Temp2);
     dec:	00186f00 	andseq	r6, r8, r0, lsl #30
     df0:	534b4900 	movtpl	r4, #47360	; 0xb900
     df4:	74756c6f 	ldrbtvc	r6, [r5], #-3183
     df8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     dfc:	00001882 	andeq	r1, r0, r2, lsl #17
     e00:	6f534b49 	svcvs	0x00534b49
     e04:	6974756c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     e08:	61576e6f 	cmpvs	r7, pc, ror #28

	TibiaAngle1[LegIKLegNr] = -(1450 - (long) AngleRad4 * 180 / 3141
     e0c:	6e696e72 	mcrvs	14, 3, r6, cr9, cr2, {3}
     e10:	18950067 	ldmne	r5, {r0, r1, r2, r5, r6}
     e14:	4b490000 	blmi	1240e1c <__Stack_Size+0x1240a1c>
     e18:	756c6f53 	strbvc	r6, [ip, #-3923]!
     e1c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     e20:	6f727245 	svcvs	0x00727245
     e24:	18a80072 	stmiane	r8!, {r1, r4, r5, r6}
     e28:	546c0000 	strbtpl	r0, [ip]
			+ CTIBIAHORNOFFSET1(LegIKLegNr)); //!!!!!!!!!!!!145 instead of 1800

	//Set the Solution quality
	if (IKSW2
     e2c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
			- ((long) IKSW2 * IKSW2));
	Temp2 = 2 * ((long) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])))
			* (long) ((byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]));
	GetArcCos(Temp1 / Temp2);

	TibiaAngle1[LegIKLegNr] = -(1450 - (long) AngleRad4 * 180 / 3141
     e30:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
			+ CTIBIAHORNOFFSET1(LegIKLegNr)); //!!!!!!!!!!!!145 instead of 1800

	//Set the Solution quality
	if (IKSW2
     e34:	18bb0074 	ldmne	fp!, {r2, r4, r5, r6}
     e38:	546c0000 	strbtpl	r0, [ip]
     e3c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     e40:	00646e45 	rsbeq	r6, r4, r5, asr #28
     e44:	000018ce 	andeq	r1, r0, lr, asr #17
			< ((word) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
					+ (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]) - 30)
					* c2DEC))
		IKSolution = 1;
     e48:	6c637943 	stclvs	9, cr7, [r3], #-268
	else {
		if (IKSW2
     e4c:	6d695465 	cfstrdvs	mvd5, [r9, #-404]!
     e50:	18e10065 	stmiane	r1!, {r0, r2, r5, r6}^
				< ((word) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
						+ (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))
						* c2DEC))
			IKSolutionWarning = 1;
     e54:	65530000 	ldrbvs	r0, [r3]
     e58:	4d6f7672 	stclmi	6, cr7, [pc, #-456]!
		else
			IKSolutionError = 1;
     e5c:	5465766f 	strbtpl	r7, [r5], #-1647
	}

}
     e60:	00656d69 	rsbeq	r6, r5, r9, ror #26
     e64:	000018f4 	strdeq	r1, [r0], -r4
     e68:	76657250 	undefined
     e6c:	76726553 	undefined
     e70:	766f4d6f 	strbtvc	r4, [pc], -pc, ror #26
     e74:	6d695465 	cfstrdvs	mvd5, [r9, #-404]!
     e78:	19070065 	stmdbne	r7, {r0, r2, r5, r6}
     e7c:	5f670000 	svcpl	0x00670000
     e80:	776f4c66 	strbvc	r4, [pc, -r6, ror #24]!
     e84:	746c6f56 	strbtvc	r6, [ip], #-3926
     e88:	53656761 	cmnpl	r5, #25427968	; 0x1840000
     e8c:	64747568 	ldrbtvs	r7, [r4], #-1384
     e90:	006e776f 	rsbeq	r7, lr, pc, ror #14
     e94:	0000191a 	andeq	r1, r0, sl, lsl r9
     e98:	746c6f56 	strbtvc	r6, [ip], #-3926
     e9c:	00656761 	rsbeq	r6, r5, r1, ror #14
     ea0:	0000192d 	andeq	r1, r0, sp, lsr #18
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ea4:	61746f54 	cmnvs	r4, r4, asr pc
	if (sVal < s) {
     ea8:	6172546c 	cmnvs	r2, ip, ror #8
     eac:	0058736e 	subseq	r7, r8, lr, ror #6
		return s;
	}

	s = (short) pgm_read_word(sMax);
     eb0:	00001940 	andeq	r1, r0, r0, asr #18
     eb4:	61746f54 	cmnvs	r4, r4, asr pc
     eb8:	6172546c 	cmnvs	r2, ip, ror #8

		return s;
	}
	return sVal;

}
     ebc:	005a736e 	subseq	r7, sl, lr, ror #6
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     ec0:	00001953 	andeq	r1, r0, r3, asr r9
}

//--------------------------------------------------------------------
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
     ec4:	61746f54 	cmnvs	r4, r4, asr pc
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     ec8:	6172546c 	cmnvs	r2, ip, ror #8
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ecc:	0059736e 	subseq	r7, r9, lr, ror #6
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
     ed0:	00001966 	andeq	r1, r0, r6, ror #18
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ed4:	61746f54 	cmnvs	r4, r4, asr pc
	if (sVal < s) {
     ed8:	6142596c 	cmpvs	r2, ip, ror #18
     edc:	7900316c 	stmdbvc	r0, {r2, r3, r5, r6, r8, ip, sp}
     ee0:	54000019 	strpl	r0, [r0], #-25
		return s;
	}

	s = (short) pgm_read_word(sMax);
     ee4:	6c61746f 	cfstrdvs	mvd7, [r1], #-444
     ee8:	6c614258 	sfmvs	f4, 2, [r1], #-352
     eec:	198c0031 	stmibne	ip, {r0, r4, r5}
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
     ef0:	6f540000 	svcvs	0x00540000
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ef4:	5a6c6174 	bpl	1b194cc <__Stack_Size+0x1b190cc>
	if (sVal < s) {
     ef8:	316c6142 	cmncc	ip, r2, asr #2
     efc:	00199f00 	andseq	r9, r9, r0, lsl #30
     f00:	6c6c4100 	stfvse	f4, [ip]
		return s;
	}

	s = (short) pgm_read_word(sMax);
     f04:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
     f08:	0019b200 	andseq	fp, r9, r0, lsl #4
     f0c:	61725400 	cmnvs	r2, r0, lsl #8
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     f10:	526c6576 	rsbpl	r6, ip, #494927872	; 0x1d800000
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
     f14:	65757165 	ldrbvs	r7, [r5, #-357]!
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     f18:	d5007473 	strle	r7, [r0, #-1139]
	if (sVal < s) {
     f1c:	47000019 	smladmi	r0, r9, r0, r0
     f20:	50746961 	rsbspl	r6, r4, r1, ror #18
     f24:	0058736f 	subseq	r7, r8, pc, ror #6
		return s;
	}

	s = (short) pgm_read_word(sMax);
     f28:	000019e8 	andeq	r1, r0, r8, ror #19
     f2c:	74696147 	strbtvc	r6, [r9], #-327
     f30:	59736f50 	ldmdbpl	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
				FemurAngle1[LegIndex], &cFemurMin1[LegIndex],
				&cFemurMax1[LegIndex]);
		TibiaAngle1[LegIndex] = CheckServoAngleBounds(s++,
     f34:	0019fb00 	andseq	pc, r9, r0, lsl #22
     f38:	69614700 	stmdbvs	r1!, {r8, r9, sl, lr}^
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     f3c:	736f5074 	cmnvc	pc, #116	; 0x74
     f40:	1a0e005a 	bne	3810b0 <__Stack_Size+0x380cb0>
				TibiaAngle1[LegIndex], &cTibiaMin1[LegIndex],
				&cTibiaMax1[LegIndex]);

	}
#endif
}
     f44:	61470000 	cmpvs	r7, r0
     f48:	6f527469 	svcvs	0x00527469
     f4c:	21005974 	tstcs	r0, r4, ror r9
     f50:	6600001a 	undefined
     f54:	6b6c6157 	blvs	1b194b8 <__Stack_Size+0x1b190b8>
     f58:	00676e69 	rsbeq	r6, r7, r9, ror #28
     f5c:	00001a34 	andeq	r1, r0, r4, lsr sl
     f60:	74784562 	ldrbtvc	r4, [r8], #-1378
     f64:	79436172 	stmdbvc	r3, {r1, r4, r5, r6, r8, sp, lr}^
     f68:	00656c63 	rsbeq	r6, r5, r3, ror #24
     f6c:	00001a47 	andeq	r1, r0, r7, asr #20
// SmoothControl (From Zenta) -  This function makes the body
//            rotation and translation much smoother
//--------------------------------------------------------------------
short SmoothControl(short CtrlMoveInp, short CtrlMoveOut, byte CtrlDivider) {

	if (CtrlMoveOut < (CtrlMoveInp - 4))
     f70:	626f5266 	rsbvs	r5, pc, #1610612742	; 0x60000006
     f74:	7055746f 	subsvc	r7, r5, pc, ror #8
		return CtrlMoveOut + abs((CtrlMoveOut - CtrlMoveInp) / CtrlDivider);
     f78:	65646973 	strbvs	r6, [r4, #-2419]!
     f7c:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
     f80:	76657250 	undefined
     f84:	001a6a00 	andseq	r6, sl, r0, lsl #20
     f88:	47504100 	ldrbmi	r4, [r0, -r0, lsl #2]
     f8c:	001a7d00 	andseq	r7, sl, r0, lsl #26
     f90:	625f7300 	subsvs	r7, pc, #0	; 0x0
	else if (CtrlMoveOut > (CtrlMoveInp + 4))
     f94:	6542564c 	strbvs	r5, [r2, #-1612]
		return CtrlMoveOut - abs((CtrlMoveOut - CtrlMoveInp) / CtrlDivider);
     f98:	6e437065 	cdpvs	0, 4, cr7, cr3, cr5, {3}
     f9c:	1a900074 	bne	fe401174 <SCS_BASE+0x1e3f3174>
     fa0:	5f670000 	svcpl	0x00670000
     fa4:	67654c77 	undefined
     fa8:	4c5a5873 	mrrcmi	8, 7, r5, sl, cr3
     fac:	74676e65 	strbtvc	r6, [r7], #-3685
     fb0:	1aa30068 	bne	fe8c1158 <SCS_BASE+0x1e8b3158>

	return CtrlMoveInp;
}
     fb4:	5f670000 	svcpl	0x00670000
// GetLegsXZLength -
//--------------------------------------------------------------------
word g_wLegsXZLength = 0xffff;
word GetLegsXZLength(void) {
	// Could save away or could do a little math on one leg...
	if (g_wLegsXZLength != 0xffff)
     fb8:	67654c69 	strbvs	r4, [r5, -r9, ror #24]!
     fbc:	74696e49 	strbtvc	r6, [r9], #-3657
     fc0:	65646e49 	strbvs	r6, [r4, #-3657]!

//--------------------------------------------------------------------
// GetLegsXZLength -
//--------------------------------------------------------------------
word g_wLegsXZLength = 0xffff;
word GetLegsXZLength(void) {
     fc4:	00000078 	andeq	r0, r0, r8, ror r0
	// Could save away or could do a little math on one leg...
	if (g_wLegsXZLength != 0xffff)
		return g_wLegsXZLength;

	return isqrt32((LegPosX[0] * LegPosX[0]) + (LegPosZ[0] * LegPosZ[0]));
     fc8:	02540000 	subseq	r0, r4, #0	; 0x0
     fcc:	00020000 	andeq	r0, r2, r0
     fd0:	000026ce 	andeq	r2, r0, lr, asr #13
     fd4:	00000772 	andeq	r0, r0, r2, ror r7
     fd8:	000002f6 	strdeq	r0, [r0], -r6
     fdc:	6c6f6942 	stclvs	9, cr6, [pc], #-264
}
     fe0:	4364696f 	cmnmi	r4, #1818624	; 0x1bc000
     fe4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     fe8:	656c6c6f 	strbvs	r6, [ip, #-3183]!
     fec:	5f784572 	svcpl	0x00784572

#ifndef MAX_XZ_LEG_ADJUST
#define MAX_XZ_LEG_ADJUST   (word)(cCoxaLength[0]+cTibiaLength[0] + cFemurLength[0]/4)
#endif

void AdjustLegPositions(word XZLength1) {
     ff0:	49746573 	ldmdbmi	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
     ff4:	03270064 	teqeq	r7, #100	; 0x64
     ff8:	69420000 	stmdbvs	r2, {}^
     ffc:	696f6c6f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
    1000:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
		XZLength1 = MAX_XZ_LEG_ADJUST;
	if (XZLength1 < MIN_XZ_LEG_ADJUST)
		XZLength1 = MIN_XZ_LEG_ADJUST;

	// see if same length as when we came in
	if (XZLength1 == g_wLegsXZLength)
    1004:	6c6f7274 	sfmvs	f7, 2, [pc], #-464
    1008:	4572656c 	ldrbmi	r6, [r2, #-1388]!
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		GetSinCos((short) pgm_read_word(&cCoxaAngle1[LegIndex]));

		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
    100c:	65675f78 	strbvs	r5, [r7, #-3960]!

	// see if same length as when we came in
	if (XZLength1 == g_wLegsXZLength)
		return;

	g_wLegsXZLength = XZLength1;
    1010:	00644974 	rsbeq	r4, r4, r4, ror r9

	u8 LegIndex;
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		GetSinCos((short) pgm_read_word(&cCoxaAngle1[LegIndex]));
    1014:	00000352 	andeq	r0, r0, r2, asr r3
    1018:	6c6f6942 	stclvs	9, cr6, [pc], #-264

		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
    101c:	4364696f 	cmnmi	r4, #1818624	; 0x1bc000
    1020:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    1024:	656c6c6f 	strbvs	r6, [ip, #-3183]!
    1028:	5f784572 	svcpl	0x00784572
    102c:	64616f6c 	strbtvs	r6, [r1], #-3948
    1030:	65736f50 	ldrbvs	r6, [r3, #-3920]!
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
    1034:	00038b00 	andeq	r8, r3, r0, lsl #22
    1038:	6f694200 	svcvs	0x00694200
    103c:	64696f6c 	strbtvs	r6, [r9], #-3948
    1040:	746e6f43 	strbtvc	r6, [lr], #-3907
    1044:	6c6c6f72 	stclvs	15, cr6, [ip], #-456
    1048:	78457265 	stmdavc	r5, {r0, r2, r5, r6, r9, ip, sp, lr}^
		return;

	g_wLegsXZLength = XZLength1;

	u8 LegIndex;
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    104c:	7465675f 	strbtvc	r6, [r5], #-1887
		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
	}

	// Make sure we cycle through one gait to have the legs all move into their new locations...
	g_InControlState.ForceGaitStepCnt = g_InControlState.gaitCur.StepsInGait;
    1050:	50727543 	rsbspl	r7, r2, r3, asr #10
    1054:	0065736f 	rsbeq	r7, r5, pc, ror #6
}
    1058:	000003c2 	andeq	r0, r0, r2, asr #7
    105c:	6c6f6942 	stclvs	9, cr6, [pc], #-264
    1060:	4364696f 	cmnmi	r4, #1818624	; 0x1bc000
    1064:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    1068:	656c6c6f 	strbvs	r6, [ip, #-3183]!
    106c:	5f784572 	svcpl	0x00784572
    1070:	4e746567 	cdpmi	5, 7, cr6, cr4, cr7, {3}
    1074:	50747865 	rsbspl	r7, r4, r5, ror #16
    1078:	0065736f 	rsbeq	r7, r5, pc, ror #6
		g_InControlState.aCoxaInitAngle1[LegIndex] = (short)pgm_read_word(&cCoxaAngle1[LegIndex]);
#endif
	}
	g_wLegsXZLength = 0xffff;
#endif
}
    107c:	000003f9 	strdeq	r0, [r0], -r9
		else if (g_InControlState.aCoxaInitAngle1[LegIndex] < -700)
		g_InControlState.aCoxaInitAngle1[LegIndex] = -700;
	}
	g_wLegsXZLength = 0xffff;
#endif
}
    1080:	6c6f6942 	stclvs	9, cr6, [pc], #-264
//     to be appropriate for the current y location of the body...
//--------------------------------------------------------------------

u8 g_iLegInitIndex = 0x00; // remember which index we are currently using...

void AdjustLegPositionsToBodyHeight() {
    1084:	4364696f 	cmnmi	r4, #1818624	; 0x1bc000
    1088:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
#ifdef CNT_HEX_INITS
	// Lets see which of our units we should use...
	// Note: We will also limit our body height here...
	if (g_InControlState.BodyPos.y
    108c:	656c6c6f 	strbvs	r6, [ip, #-3183]!
			> (short) pgm_read_byte(&g_abHexMaxBodyY[CNT_HEX_INITS-1]))
		g_InControlState.BodyPos.y = (short) pgm_read_byte(
    1090:	5f784572 	svcpl	0x00784572
				&g_abHexMaxBodyY[CNT_HEX_INITS-1]);

	u8 i;
	word XZLength1 = pgm_read_byte(&g_abHexIntXZ[CNT_HEX_INITS-1]);
	for (i = 0; i < (CNT_HEX_INITS - 1); i++) { // Don't need to look at last entry as we already init to assume this one...
		if (g_InControlState.BodyPos.y
    1094:	4e746573 	mrcmi	5, 3, r6, cr4, cr3, {3}
    1098:	50747865 	rsbspl	r7, r4, r5, ror #16
				<= (short) pgm_read_byte(&g_abHexMaxBodyY[i])) {
			XZLength1 = pgm_read_byte(&g_abHexIntXZ[i]);
			break;
		}
	}
	if (i != g_iLegInitIndex) {
    109c:	0065736f 	rsbeq	r7, r5, pc, ror #6
				&g_abHexMaxBodyY[CNT_HEX_INITS-1]);

	u8 i;
	word XZLength1 = pgm_read_byte(&g_abHexIntXZ[CNT_HEX_INITS-1]);
	for (i = 0; i < (CNT_HEX_INITS - 1); i++) { // Don't need to look at last entry as we already init to assume this one...
		if (g_InControlState.BodyPos.y
    10a0:	0000043b 	andeq	r0, r0, fp, lsr r4
    10a4:	6c6f6942 	stclvs	9, cr6, [pc], #-264
    10a8:	4364696f 	cmnmi	r4, #1818624	; 0x1bc000
				<= (short) pgm_read_byte(&g_abHexMaxBodyY[i])) {
			XZLength1 = pgm_read_byte(&g_abHexIntXZ[i]);
			break;
		}
	}
	if (i != g_iLegInitIndex) {
    10ac:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
		g_iLegInitIndex = i;  // remember the current index...
		AdjustLegPositions(XZLength1);
    10b0:	656c6c6f 	strbvs	r6, [ip, #-3183]!
	}
#endif // CNT_HEX_INITS
}
    10b4:	5f784572 	svcpl	0x00784572
    10b8:	4e746573 	mrcmi	5, 3, r6, cr4, cr3, {3}
    10bc:	50747865 	rsbspl	r7, r4, r5, ror #16
}
//--------------------------------------------------------------------
//[CHECK VOLTAGE]
//Reads the input voltage and shuts down the bot when the power drops
byte s_bLVBeepCnt;
boolean CheckVoltage() {
    10c0:	4265736f 	rsbmi	r7, r5, #-1140850687	; 0xbc000001
    10c4:	646e4979 	strbtvs	r4, [lr], #-2425
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10c8:	70007865 	andvc	r7, r0, r5, ror #16

	// BUGBUG:: if voltage is 0 it failed to retrieve don't hang program...
	//    if (!Voltage)
	//      return;

	if (!g_fLowVoltageShutdown) {
    10cc:	42000004 	andmi	r0, r0, #4	; 0x4
boolean CheckVoltage() {
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10d0:	6f6c6f69 	svcvs	0x006c6f69

	// BUGBUG:: if voltage is 0 it failed to retrieve don't hang program...
	//    if (!Voltage)
	//      return;

	if (!g_fLowVoltageShutdown) {
    10d4:	6f436469 	svcvs	0x00436469
boolean CheckVoltage() {
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10d8:	6f72746e 	svcvs	0x0072746e

	if (!g_fLowVoltageShutdown) {
		/**PrintString("Voltage : ");
		Printu32d(Voltage);
		PrintString("\n");*/
		if ((Voltage < cTurnOffVol) || (Voltage >= 1999)) {
    10dc:	72656c6c 	rsbvc	r6, r5, #27648	; 0x6c00
    10e0:	695f7845 	ldmdbvs	pc, {r0, r2, r6, fp, ip, sp, lr}^
    10e4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000


			//Turn off
			g_InControlState.BodyPos.x = 0;
    10e8:	616c6f70 	smcvs	50928
			g_InControlState.TravelLength.x = 0;
			g_InControlState.TravelLength.z = 0;

#ifdef OPT_SINGLELEG
			g_InControlState.TravelLength.y = 0;
			g_InControlState.SelectedLeg = 255;
    10ec:	65536574 	ldrbvs	r6, [r3, #-1396]
    10f0:	00707574 	rsbseq	r7, r0, r4, ror r5
#endif
			g_fLowVoltageShutdown = 1;
    10f4:	000004b1 	strheq	r0, [r0], -r1
			s_bLVBeepCnt = 0;    // how many times we beeped...
    10f8:	6c6f6942 	stclvs	9, cr6, [pc], #-264
		if ((Voltage < cTurnOffVol) || (Voltage >= 1999)) {


			//Turn off
			g_InControlState.BodyPos.x = 0;
			g_InControlState.BodyPos.y = 0;
    10fc:	5f64696f 	svcpl	0x0064696f
			g_InControlState.BodyPos.z = 0;
			g_InControlState.BodyRot1.x = 0;
    1100:	75746553 	ldrbvc	r6, [r4, #-1363]!
			g_InControlState.BodyRot1.y = 0;
			g_InControlState.BodyRot1.z = 0;
    1104:	04e70070 	strbteq	r0, [r7], #112
			g_InControlState.TravelLength.x = 0;
			g_InControlState.TravelLength.z = 0;
    1108:	69420000 	stmdbvs	r2, {}^
#ifdef OPT_SINGLELEG
			g_InControlState.TravelLength.y = 0;
			g_InControlState.SelectedLeg = 255;
#endif
			g_fLowVoltageShutdown = 1;
			s_bLVBeepCnt = 0;    // how many times we beeped...
    110c:	696f6c6f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
			g_InControlState.fRobotOn = false;
    1110:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
		}
#ifdef cTurnOnVol
	} else if ((Voltage > cTurnOnVol) && (Voltage < 1999)) {
    1114:	6c6f7274 	sfmvs	f7, 2, [pc], #-464
    1118:	4572656c 	ldrbmi	r6, [r2, #-1388]!

		g_fLowVoltageShutdown = 0;
    111c:	05090078 	streq	r0, [r9, #-120]
    1120:	69420000 	stmdbvs	r2, {}^

#endif
	} else {
		if (s_bLVBeepCnt < 5) {
    1124:	696f6c6f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
    1128:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
			s_bLVBeepCnt++;
    112c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464

			//MSound( 1, 45, 2000);
			Buzzed(45, 2000);
    1130:	4572656c 	ldrbmi	r6, [r2, #-1388]!
    1134:	72775f78 	rsbsvc	r5, r7, #480	; 0x1e0
    1138:	50657469 	rsbpl	r7, r5, r9, ror #8
		}
		mDelay(2000);
    113c:	0065736f 	rsbeq	r7, r5, pc, ror #6
    1140:	00000547 	andeq	r0, r0, r7, asr #10
    1144:	6c6f6942 	stclvs	9, cr6, [pc], #-264
	}
#endif

	return g_fLowVoltageShutdown;
}
    1148:	4364696f 	cmnmi	r4, #1818624	; 0x1bc000
    114c:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    1150:	656c6c6f 	strbvs	r6, [ip, #-3183]!
    1154:	5f784572 	svcpl	0x00784572
    1158:	65746e69 	ldrbvs	r6, [r4, #-3689]!

//==============================================================================
// BackgroundProcess - Allows us to have some background processing for those
//    servo drivers that need us to do things like polling...
//==============================================================================
void BackgroundProcess(void) {
    115c:	6c6f7072 	stclvs	0, cr7, [pc], #-456
    1160:	53657461 	cmnpl	r5, #1627389952	; 0x61000000
	if (g_fAXSpeedControl)
    1164:	00706574 	rsbseq	r6, r0, r4, ror r5
		return;  // nothing to do in this mode...

	if (ServosEnabled) {
		//DebugToggle(A3);
		BioloidControllerEx_interpolateStep(false); // Do our background stuff...
    1168:	000005a5 	andeq	r0, r0, r5, lsr #11
		Battery_Monitor_Alarm();
    116c:	6c6f6942 	stclvs	9, cr6, [pc], #-264
	}
}
    1170:	4364696f 	cmnmi	r4, #1818624	; 0x1bc000
    1174:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
//Function that gets called from the main loop if the robot is not logically
//     on.  Gives us a chance to play some...
//--------------------------------------------------------------------
static u8 g_iIdleServoNum = (u8) - 1;
static u8 g_iIdleLedState = 1;  // what state to we wish to set...
void IdleTime(void) {
    1178:	656c6c6f 	strbvs	r6, [ip, #-3183]!
    117c:	5f784572 	svcpl	0x00784572
	// Each time we call this set servos LED on or off...
	g_iIdleServoNum++;
    1180:	64616572 	strbtvs	r6, [r1], #-1394
	if (g_iIdleServoNum >= NUMSERVOS) {
    1184:	65736f50 	ldrbvs	r6, [r3, #-3920]!
    1188:	00067500 	andeq	r7, r6, r0, lsl #10
		g_iIdleServoNum = 0;
    118c:	746e6900 	strbtvc	r6, [lr], #-2304
		g_iIdleLedState = 1 - g_iIdleLedState;
    1190:	6f707265 	svcvs	0x00707265
    1194:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
	}
	dxl_write_byte(pgm_read_byte(&cPinTable[g_iIdleServoNum]), AXM_LED,
    1198:	8700676e 	strhi	r6, [r0, -lr, ror #14]
    119c:	72000006 	andvc	r0, r0, #6	; 0x6
    11a0:	696e6e75 	stmdbvs	lr!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
    11a4:	6553676e 	ldrbvs	r6, [r3, #-1902]
    11a8:	06990071 	undefined
			g_iIdleLedState);
	//ax12ReadPacket(6);  // get the response...


}
    11ac:	6f700000 	svcvs	0x00700000
    11b0:	69536573 	ldmdbvs	r3, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    11b4:	ab00657a 	blge	1a7a4 <__Stack_Size+0x1a3a4>
    11b8:	66000006 	strvs	r0, [r0], -r6

//--------------------------------------------------------------------
//[SetRegOnAllServos] Function that is called to set the state of one
//  register in all of the servos, like Torque on...
//--------------------------------------------------------------------
void SetRegOnAllServos(u8 bReg, u8 bVal) {
    11bc:	656d6172 	strbvs	r6, [sp, #-370]!
    11c0:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    11c4:	cd006874 	stcgt	8, cr6, [r0, #-464]
	 ax12write(bVal);

  }
  ax12write(0xff - (checksum % 256));
  setRX(0);*/
	 dxl_set_txpacket_id (BROADCAST_ID);
    11c8:	70000006 	andvc	r0, r0, r6
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    11cc:	5f65736f 	svcpl	0x0065736f
	dxl_set_txpacket_parameter(0,bReg);
    11d0:	0006df00 	andeq	sp, r6, r0, lsl #30
    11d4:	78656e00 	stmdavc	r5!, {r9, sl, fp, sp, lr}^
	dxl_set_txpacket_parameter(1,2);
    11d8:	736f7074 	cmnvc	pc, #116	; 0x74
    11dc:	01005f65 	tsteq	r0, r5, ror #30
    11e0:	73000007 	movwvc	r0, #7	; 0x7
  int i;
	for (i = 0; i < poseSize; i++) {
		byte id = pgm_read_byte(&cPinTable[i]);
		dxl_set_txpacket_parameter(2 + 3 * i, id);
    11e4:	64656570 	strbtvs	r6, [r5], #-1392
    11e8:	0723005f 	undefined
    11ec:	64690000 	strbtvs	r0, [r9]
    11f0:	0735005f 	undefined
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
    11f4:	656e0000 	strbvs	r0, [lr]!
    11f8:	72667478 	rsbvc	r7, r6, #2013265920	; 0x78000000
    11fc:	5f656d61 	svcpl	0x00656d61
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
    1200:	00074700 	andeq	r4, r7, r0, lsl #14
    1204:	71657300 	cmnvc	r5, r0, lsl #6
    1208:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
	dxl_set_txpacket_parameter(1,2);
  int i;
	for (i = 0; i < poseSize; i++) {
		byte id = pgm_read_byte(&cPinTable[i]);
		dxl_set_txpacket_parameter(2 + 3 * i, id);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
    120c:	075f0065 	ldrbeq	r0, [pc, -r5, rrx]
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
    1210:	72740000 	rsbsvc	r0, r4, #0	; 0x0
	 dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0,bReg);
	dxl_set_txpacket_parameter(1,2);
  int i;
	for (i = 0; i < poseSize; i++) {
    1214:	69736e61 	ldmdbvs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
    1218:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    121c:	00000073 	andeq	r0, r0, r3, ror r0
		dxl_set_txpacket_parameter(2 + 3 * i, id);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
	}

	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
    1220:	017c0000 	cmneq	ip, r0
    1224:	00020000 	andeq	r0, r2, r0
    1228:	00002e40 	andeq	r2, r0, r0, asr #28
#ifdef DEBUG_BIOLOIDEX
	PrintString("DriverAX12 --- SetRegOnAllServos ---\n");
#endif
	dxl_txrx_packet();
    122c:	0000080e 	andeq	r0, r0, lr, lsl #16

	u16 CommStatus = dxl_get_result();
    1230:	0000012f 	andeq	r0, r0, pc, lsr #2
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
    1234:	63656843 	cmnvs	r5, #4390912	; 0x430000
		PrintErrorCode();
    1238:	4e43506b 	cdpmi	0, 4, cr5, cr3, cr11, {3}
	else
		PrintCommStatus(CommStatus);
    123c:	72417765 	subvc	r7, r1, #26476544	; 0x1940000
#endif
}
    1240:	65766972 	ldrbvs	r6, [r6, #-2418]!
    1244:	00014600 	andeq	r4, r1, r0, lsl #12
    1248:	44785200 	ldrbtmi	r5, [r8], #-512
//--------------------------------------------------------------------
//[MakeSureServosAreOn] Function that is called to handle when you are
//  transistioning from servos all off to being on.  May need to read
//  in the current pose...
//--------------------------------------------------------------------
void MakeSureServosAreOn(void) {
    124c:	65747942 	ldrbvs	r7, [r4, #-2370]!

	if (ServosEnabled) {

		if (!g_fServosFree)
    1250:	0043505f 	subeq	r5, r3, pc, asr r0
			return;    // we are not free

		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		if (g_fAXSpeedControl) {
    1254:	0000016f 	andeq	r0, r0, pc, ror #2
    1258:	5f447854 	svcpl	0x00447854

			int i;
			for (i = 0; i < NUMSERVOS; i++) {
				g_awGoalAXPos[i] = dxl_read_word(pgm_read_byte(&cPinTable[i]),
    125c:	5f636544 	svcpl	0x00636544
    1260:	00323353 	eorseq	r3, r2, r3, asr r3
    1264:	000001d4 	ldrdeq	r0, [r0], -r4
    1268:	5f447854 	svcpl	0x00447854
						AXM_PRESENT_POSITION_L);
				mDelay(25);
    126c:	5f636544 	svcpl	0x00636544
    1270:	00363153 	eorseq	r3, r6, r3, asr r1

		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		if (g_fAXSpeedControl) {

			int i;
			for (i = 0; i < NUMSERVOS; i++) {
    1274:	00000249 	andeq	r0, r0, r9, asr #4
    1278:	5f447854 	svcpl	0x00447854
				g_awGoalAXPos[i] = dxl_read_word(pgm_read_byte(&cPinTable[i]),
						AXM_PRESENT_POSITION_L);
				mDelay(25);
			}
		} else {
			BioloidControllerEx_readPose();
    127c:	5f636544 	svcpl	0x00636544
		}

		SetRegOnAllServos(AXM_TORQUE_ENABLE, 1);  // Use sync write to do it.
    1280:	bd003853 	stclt	8, cr3, [r0, #-332]
    1284:	54000002 	strpl	r0, [r0], #-2

		CommanderInputController_AllowControllerInterrupts(true);
		g_fServosFree = false;
    1288:	445f4478 	ldrbmi	r4, [pc], #1144	; 1290 <__Stack_Size+0xe90>
	}

}
    128c:	555f6365 	ldrbpl	r6, [pc, #-869]	; f2f <__Stack_Size+0xb2f>
    1290:	22003233 	andcs	r3, r0, #805306371	; 0x30000003
    1294:	54000003 	strpl	r0, [r0], #-3
    1298:	445f4478 	ldrbmi	r4, [pc], #1144	; 12a0 <__Stack_Size+0xea0>
    129c:	555f6365 	ldrbpl	r6, [pc, #-869]	; f3f <__Stack_Size+0xb3f>

//------------------------------------------------------------------------------------------
//[BeginServoUpdate] Does whatever preperation that is needed to starrt a move of our servos
//------------------------------------------------------------------------------------------
void BeginServoUpdate(void)    // Start the update
		{
    12a0:	87003631 	smladxhi	r0, r1, r6, r3

	MakeSureServosAreOn();
    12a4:	54000003 	strpl	r0, [r0], #-3
	if (ServosEnabled) {

		if (g_fAXSpeedControl) {
    12a8:	445f4478 	ldrbmi	r4, [pc], #1144	; 12b0 <__Stack_Size+0xeb0>
    12ac:	555f6365 	ldrbpl	r6, [pc, #-869]	; f4f <__Stack_Size+0xb4f>

#ifdef USE_AX12_SPEED_CONTROL
			// If we are trying our own Servo control need to save away the new positions...
			byte i;
			for (i = 0; i < NUMSERVOS; i++) {
				g_awCurAXPos[i] = g_awGoalAXPos[i];
    12b0:	03c20038 	biceq	r0, r2, #56	; 0x38
    12b4:	74730000 	ldrbtvc	r0, [r3]
    12b8:	75705f64 	ldrbvc	r5, [r0, #-3940]!
		if (g_fAXSpeedControl) {

#ifdef USE_AX12_SPEED_CONTROL
			// If we are trying our own Servo control need to save away the new positions...
			byte i;
			for (i = 0; i < NUMSERVOS; i++) {
    12bc:	61686374 	smcvs	34356
				g_awCurAXPos[i] = g_awGoalAXPos[i];
			}
#endif
		} else
			BioloidControllerEx_interpolateStep(true); // Make sure we call at least once
    12c0:	03fb0072 	mvnseq	r0, #114	; 0x72
    12c4:	72500000 	subsvc	r0, r0, #0	; 0x0

	}
}
    12c8:	43746e69 	cmnmi	r4, #1680	; 0x690
    12cc:	00726168 	rsbseq	r6, r2, r8, ror #2
    12d0:	00000426 	andeq	r0, r0, r6, lsr #8
    12d4:	5f647473 	svcpl	0x00647473
}

//--------------------------------------------------------------------
//[FREE SERVOS] Frees all the servos
//--------------------------------------------------------------------
void FreeServos(void) {
    12d8:	73747570 	cmnvc	r4, #469762048	; 0x1c000000
    12dc:	00046900 	andeq	r6, r4, r0, lsl #18

	if (!g_fServosFree) {
    12e0:	69725000 	ldmdbvs	r2!, {ip, lr}^
		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		SetRegOnAllServos(AXM_TORQUE_ENABLE, 0);  // do this as one statement...
    12e4:	3875746e 	ldmdacc	r5!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    12e8:	04b30068 	ldrteq	r0, [r3], #104
    12ec:	72500000 	subsvc	r0, r0, #0	; 0x0
		byte i;
		for (i = 0; i < NUMSERVOS; i++) {
			Relax(pgm_read_byte(&cPinTable[i]));
    12f0:	75746e69 	ldrbvc	r6, [r4, #-3689]!
    12f4:	00683631 	rsbeq	r3, r8, r1, lsr r6
    12f8:	000004fd 	strdeq	r0, [r0], -sp

	if (!g_fServosFree) {
		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		SetRegOnAllServos(AXM_TORQUE_ENABLE, 0);  // do this as one statement...
		byte i;
		for (i = 0; i < NUMSERVOS; i++) {
    12fc:	6e697250 	mcrvs	2, 3, r7, cr9, cr0, {2}
			Relax(pgm_read_byte(&cPinTable[i]));
		}
		CommanderInputController_AllowControllerInterrupts(true);
		g_fServosFree = true;
    1300:	32337374 	eorscc	r7, r3, #-805306367	; 0xd0000001
	}
}
    1304:	058f0064 	streq	r0, [pc, #100]	; 1370 <__Stack_Size+0xf70>
    1308:	72500000 	subsvc	r0, r0, #0	; 0x0
    130c:	75746e69 	ldrbvc	r6, [r4, #-3689]!
extern void SetRegOnAllServos(u8 bReg, u8 bVal);

//--------------------------------------------------------------------
//Init
//--------------------------------------------------------------------
void Servo_Init(void) {
    1310:	00643233 	rsbeq	r3, r4, r3, lsr r2
	// First lets get the actual servo positions for all of our servos...
	//pinMode(0, OUTPUT);
	g_fServosFree = true;
    1314:	00000606 	andeq	r0, r0, r6, lsl #12

  poseSize = NUMSERVOS;
    1318:	6e697250 	mcrvs	2, 3, r7, cr9, cr0, {2}
    131c:	72745374 	rsbsvc	r5, r4, #-805306367	; 0xd0000001
  BioloidControllerEx_readPose();
    1320:	00676e69 	rsbeq	r6, r7, r9, ror #28
#ifdef cVoltagePin
	for (byte i=0; i < 8; i++)
	GetBatteryVoltage();  // init the voltage pin
#endif

	g_fAXSpeedControl = false;
    1324:	00000631 	andeq	r0, r0, r1, lsr r6
    1328:	6e697250 	mcrvs	2, 3, r7, cr9, cr0, {2}



	// Added - try to speed things up later if we do a query...
	SetRegOnAllServos(AXM_RETURN_DELAY_TIME, 0); // tell servos to give us back their info as quick as they can...
    132c:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!
    1330:	6174536d 	cmnvs	r4, sp, ror #6

}
    1334:	00737574 	rsbseq	r7, r3, r4, ror r5
    1338:	0000065a 	andeq	r0, r0, sl, asr r6
    133c:	6e697250 	mcrvs	2, 3, r7, cr9, cr0, {2}
    1340:	72724574 	rsbsvc	r4, r2, #486539264	; 0x1d000000

}

void setupPhoenix() {

	g_fShowDebugPrompt = true;
    1344:	6f43726f 	svcvs	0x0043726f
void readSensors(){


}

void setupPhoenix() {
    1348:	6f006564 	svcvs	0x00006564

	g_fShowDebugPrompt = true;
	g_fDebugOutput = false;
    134c:	73000006 	movwvc	r0, #6	; 0x6
    1350:	675f6474 	undefined
	//init BioloidEx
	BioloidControllerEx();
    1354:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^

	// Init our ServoDriver
	Servo_Init();
    1358:	98007261 	stmdals	r0, {r0, r5, r6, r9, ip, sp, lr}

	mDelay(10);
    135c:	47000006 	strmi	r0, [r0, -r6]

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		LegPosX[LegIndex] = (short) pgm_read_word(&cInitPosX[LegIndex]); //Set start positions for each leg
    1360:	68437465 	stmdavs	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1364:	b1007261 	tstlt	r0, r1, ror #4
		LegPosY[LegIndex] = (short) pgm_read_word(&cInitPosY[LegIndex]);
    1368:	73000006 	movwvc	r0, #6	; 0x6
    136c:	675f6474 	undefined
		LegPosZ[LegIndex] = (short) pgm_read_word(&cInitPosZ[LegIndex]);
    1370:	74537465 	ldrbvc	r7, [r3], #-1125

	mDelay(10);

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		LegPosX[LegIndex] = (short) pgm_read_word(&cInitPosX[LegIndex]); //Set start positions for each leg
    1374:	676e6972 	undefined
    1378:	00070d00 	andeq	r0, r7, r0, lsl #26
		LegPosY[LegIndex] = (short) pgm_read_word(&cInitPosY[LegIndex]);
    137c:	75637000 	strbvc	r7, [r3]!
    1380:	7265745f 	rsbvc	r7, r5, #1593835520	; 0x5f000000
		LegPosZ[LegIndex] = (short) pgm_read_word(&cInitPosZ[LegIndex]);
    1384:	616e696d 	cmnvs	lr, sp, ror #18
    1388:	22006574 	andcs	r6, r0, #486539264	; 0x1d000000
    138c:	70000007 	andvc	r0, r0, r7
	Servo_Init();

	mDelay(10);

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    1390:	695f7563 	ldmdbvs	pc, {r0, r1, r5, r6, r8, sl, ip, sp, lr}^
    1394:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
    1398:	7a696c61 	bvc	1a5c524 <__Stack_Size+0x1a5c124>

	ResetLegInitAngles();

	//Single leg control. Make sure no leg is selected
#ifdef OPT_SINGLELEG
	g_InControlState.SelectedLeg = 255; // No Leg selected
    139c:	00000065 	andeq	r0, r0, r5, rrx
    13a0:	02710000 	rsbseq	r0, r1, #0	; 0x0
	g_InControlState.PrevSelectedLeg = 255;
    13a4:	00020000 	andeq	r0, r2, r0
#endif
	//Body Positions
	g_InControlState.BodyPos.x = 0;
    13a8:	0000364e 	andeq	r3, r0, lr, asr #12
	g_InControlState.BodyPos.y = 0;
	g_InControlState.BodyPos.z = 0;
    13ac:	000007ec 	andeq	r0, r0, ip, ror #15

//Body Rotations
	g_InControlState.BodyRot1.x = 0;
	g_InControlState.BodyRot1.y = 0;
    13b0:	00000244 	andeq	r0, r0, r4, asr #4
	g_InControlState.BodyRot1.z = 0;
	g_InControlState.BodyRotOffset.x = 0;
    13b4:	5f6c7864 	svcpl	0x006c7864
	g_InControlState.BodyRotOffset.y = 0; //Input Y offset value to adjust centerpoint of rotation
	g_InControlState.BodyRotOffset.z = 0;
    13b8:	5f746567 	svcpl	0x00746567

	//Gait
	g_InControlState.GaitType = 0;
    13bc:	75736572 	ldrbvc	r6, [r3, #-1394]!
	g_InControlState.BalanceMode = 0;
    13c0:	5b00746c 	blpl	1e578 <__Stack_Size+0x1e178>
	g_InControlState.LegLiftHeight = 50;
	g_InControlState.ForceGaitStepCnt = 0; // added to try to adjust starting positions depending on height...
    13c4:	64000002 	strvs	r0, [r0], #-2
	g_InControlState.GaitStep = 1;
    13c8:	735f6c78 	cmpvc	pc, #30720	; 0x7800
}

void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {
    13cc:	745f7465 	ldrbvc	r7, [pc], #1125	; 13d4 <__Stack_Size+0xfd4>
	g_InControlState.BodyRotOffset.z = 0;

	//Gait
	g_InControlState.GaitType = 0;
	g_InControlState.BalanceMode = 0;
	g_InControlState.LegLiftHeight = 50;
    13d0:	63617078 	cmnvs	r1, #120	; 0x78
    13d4:	5f74656b 	svcpl	0x0074656b
void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {

		g_InControlState.gaitCur = APG[g_InControlState.GaitType];
    13d8:	7f006469 	svcvc	0x00006469
    13dc:	64000002 	strvs	r0, [r0], #-2
    13e0:	735f6c78 	cmpvc	pc, #30720	; 0x7800
//==============================================================================

// If both PS2 and XBee are defined then we will become secondary to the xbee
void CommanderInputController_Init(void) {

	g_BodyYOffset = 0;
    13e4:	745f7465 	ldrbvc	r7, [pc], #1125	; 13ec <__Stack_Size+0xfec>
    13e8:	63617078 	cmnvs	r1, #120	; 0x78
    13ec:	5f74656b 	svcpl	0x0074656b
	g_BodyYShift = 0;
	//begin(XBEE_BAUD);
	GPSeq = 0;  // init to something...
    13f0:	74736e69 	ldrbtvc	r6, [r3], #-3689
    13f4:	74637572 	strbtvc	r7, [r3], #-1394

	ControlMode = WALKMODE;
    13f8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
	HeightSpeedMode = NORM_NORM;
    13fc:	000002a4 	andeq	r0, r0, r4, lsr #5
	//    DoubleHeightOn = false;
	DoubleTravelOn = false;
    1400:	5f6c7864 	svcpl	0x006c7864
	bJoystickWalkMode = 0;
    1404:	5f746573 	svcpl	0x00746573
	GaitSelect();

	CommanderInputController_Init();

	// Servo Driver
	ServoMoveTime = 150;
    1408:	61707874 	cmnvs	r0, r4, ror r8
	g_InControlState.fRobotOn = 0;
    140c:	74656b63 	strbtvc	r6, [r5], #-2915
	g_fLowVoltageShutdown = false;
    1410:	7261705f 	rsbvc	r7, r1, #95	; 0x5f

}
    1414:	74656d61 	strbtvc	r6, [r5], #-3425
    1418:	d6007265 	strle	r7, [r0], -r5, ror #4
    141c:	64000002 	strvs	r0, [r0], #-2
    1420:	735f6c78 	cmpvc	pc, #30720	; 0x7800
    1424:	745f7465 	ldrbvc	r7, [pc], #1125	; 142c <__Stack_Size+0x102c>
    1428:	63617078 	cmnvs	r1, #120	; 0x78
    142c:	5f74656b 	svcpl	0x0074656b
    1430:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
    1434:	fb006874 	blx	1b60e <__Stack_Size+0x1b20e>
    1438:	64000002 	strvs	r0, [r0], #-2
    143c:	675f6c78 	undefined
    1440:	725f7465 	subsvc	r7, pc, #1694498816	; 0x65000000
    1444:	63617078 	cmnvs	r1, #120	; 0x78
    1448:	5f74656b 	svcpl	0x0074656b
    144c:	6f727265 	svcvs	0x00727265
    1450:	03260072 	teqeq	r6, #114	; 0x72
    1454:	78640000 	stmdavc	r4!, {}^
    1458:	65675f6c 	strbvs	r5, [r7, #-3948]!
    145c:	78725f74 	ldmdavc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1460:	6b636170 	blvs	18d9a28 <__Stack_Size+0x18d9628>
    1464:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}
//[CommitServoDriver Updates the positions of the servos - This outputs
//         as much of the command as we can without committing it.  This
//         allows us to once the previous update was completed to quickly
//        get the next command to start
//--------------------------------------------------------------------
void CommitServoDriver(word wMoveTime) {
    1468:	74676e65 	strbtvc	r6, [r7], #-3685
    146c:	033d0068 	teqeq	sp, #104	; 0x68
    1470:	78640000 	stmdavc	r4!, {}^


	CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    1474:	65675f6c 	strbvs	r5, [r7, #-3948]!

      }
      ax12write(0xff - (checksum % 256));
      setRX(0);
*/
  	    dxl_set_txpacket_id (BROADCAST_ID);
    1478:	78725f74 	ldmdavc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    147c:	6b636170 	blvs	18d9a44 <__Stack_Size+0x18d9644>
    1480:	705f7465 	subsvc	r7, pc, r5, ror #8
		dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
    1484:	6d617261 	sfmvs	f7, 2, [r1, #-388]!
    1488:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
		dxl_set_txpacket_parameter(1, 2);
    148c:	00036a00 	andeq	r6, r3, r0, lsl #20
    1490:	6c786400 	cfldrdvs	mvd6, [r8]
    1494:	6b616d5f 	blvs	185ca18 <__Stack_Size+0x185c618>
    1498:	726f7765 	rsbvc	r7, pc, #26476544	; 0x1940000
      int i;
      word wSpeed;
		for (i = 0; i < poseSize; i++) {
			wSpeed = CalculateAX12MoveSpeed(g_awCurAXPos[i], g_awGoalAXPos[i], wMoveTime);    // What order should we store these values?
    149c:	03930064 	orrseq	r0, r3, #100	; 0x64
    14a0:	78640000 	stmdavc	r4!, {}^
    14a4:	65675f6c 	strbvs	r5, [r7, #-3948]!
    14a8:	6f6c5f74 	svcvs	0x006c5f74
			//dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
			byte id = pgm_read_byte(&cPinTable[i]);
			dxl_set_txpacket_parameter(2 + 3 * i, id);
    14ac:	74796277 	ldrbtvc	r6, [r9], #-631
    14b0:	03b50065 	undefined instruction 0x03b50065
    14b4:	78640000 	stmdavc	r4!, {}^
    14b8:	65675f6c 	strbvs	r5, [r7, #-3948]!
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(g_awGoalAXPos[i]));
    14bc:	69685f74 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    14c0:	79626867 	stmdbvc	r2!, {r0, r1, r2, r5, r6, fp, sp, lr}^
    14c4:	d7006574 	smlsdxle	r0, r4, r5, r6
    14c8:	64000003 	strvs	r0, [r0], #-3
    14cc:	635f6c78 	cmpvs	pc, #30720	; 0x7800
			dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(g_awGoalAXPos[i]));
    14d0:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    14d4:	6174735f 	cmnvs	r4, pc, asr r3
    14d8:	746b7074 	strbtvc	r7, [fp], #-116
    14dc:	0003fd00 	andeq	pc, r3, r0, lsl #26
    14e0:	6c786400 	cfldrdvs	mvd6, [r8]
    14e4:	5f78725f 	svcpl	0x0078725f
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(wSpeed));
    14e8:	6b636170 	blvs	18d9ab0 <__Stack_Size+0x18d96b0>
    14ec:	4b007465 	blmi	1e688 <__Stack_Size+0x1e288>
    14f0:	64000004 	strvs	r0, [r0], #-4
		    dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(wSpeed));
    14f4:	745f6c78 	ldrbvc	r6, [pc], #3192	; 14fc <__Stack_Size+0x10fc>
    14f8:	61705f78 	cmnvs	r0, r8, ror pc
    14fc:	74656b63 	strbtvc	r6, [r5], #-2915
    1500:	00049900 	andeq	r9, r4, r0, lsl #18
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
		dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
		dxl_set_txpacket_parameter(1, 2);
      int i;
      word wSpeed;
		for (i = 0; i < poseSize; i++) {
    1504:	6c786400 	cfldrdvs	mvd6, [r8]
    1508:	7278745f 	rsbsvc	r7, r8, #1593835520	; 0x5f000000
    150c:	61705f78 	cmnvs	r0, r8, ror pc
    1510:	74656b63 	strbtvc	r6, [r5], #-2915
			dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(g_awGoalAXPos[i]));
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(wSpeed));
		    dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(wSpeed));
		}

		dxl_set_txpacket_length((4 + 1) * poseSize + 4);
    1514:	0004df00 	andeq	sp, r4, r0, lsl #30
    1518:	6c786400 	cfldrdvs	mvd6, [r8]
    151c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
#ifdef DEBUG_BIOLOIDEX
	PrintString("DriverAX12 --- CommitServoDriver ---\n");
#endif
		dxl_txrx_packet();
    1520:	775f6574 	undefined

			u16 CommStatus = dxl_get_result();
    1524:	0064726f 	rsbeq	r7, r4, pc, ror #4
#ifdef USING_PC_UART
			if (CommStatus == DXL_RXSUCCESS)
    1528:	00000529 	andeq	r0, r0, r9, lsr #10
				PrintErrorCode();
    152c:	5f6c7864 	svcpl	0x006c7864
			else
				PrintCommStatus(CommStatus);
    1530:	64616572 	strbtvs	r6, [r1], #-1394
    1534:	726f775f 	rsbvc	r7, pc, #24903680	; 0x17c0000
#endif
#endif
		} else {
			BioloidControllerEx_interpolateSetup(wMoveTime);
    1538:	05950064 	ldreq	r0, [r5, #100]

	}

	CommanderInputController_AllowControllerInterrupts(true);

}
    153c:	78640000 	stmdavc	r4!, {}^
    1540:	72775f6c 	rsbsvc	r5, r7, #432	; 0x1b0
    1544:	5f657469 	svcpl	0x00657469
    1548:	65747962 	ldrbvs	r7, [r4, #-2402]!
    154c:	0005df00 	andeq	sp, r5, r0, lsl #30
    1550:	6c786400 	cfldrdvs	mvd6, [r8]
	word wCoxaSDV;        // Coxa value in servo driver units
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    1554:	7061635f 	rsbvc	r6, r1, pc, asr r3
    1558:	65727574 	ldrbvs	r7, [r2, #-1396]!
    155c:	00060900 	andeq	r0, r6, r0, lsl #18
    1560:	6c786400 	cfldrdvs	mvd6, [r8]
    1564:	6165725f 	cmnvs	r5, pc, asr r2


void OutputServoInfoForLeg(byte LegIndex, short sCoxaAngle1, short sFemurAngle1,
		short sTibiaAngle1)

		{
    1568:	79625f64 	stmdbvc	r2!, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
	word wCoxaSDV;        // Coxa value in servo driver units
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    156c:	47006574 	smlsdxmi	r0, r4, r5, r6
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
    1570:	64000006 	strvs	r0, [r0], #-6
    1574:	705f6c78 	subsvc	r6, pc, r8, ror ip
    1578:	00676e69 	rsbeq	r6, r7, r9, ror #28
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    157c:	00000671 	andeq	r0, r0, r1, ror r6
    1580:	5f6c7864 	svcpl	0x006c7864
    1584:	6d726574 	cfldr64vs	mvdx6, [r2, #-464]!


void OutputServoInfoForLeg(byte LegIndex, short sCoxaAngle1, short sFemurAngle1,
		short sTibiaAngle1)

		{
    1588:	74616e69 	strbtvc	r6, [r1], #-3689
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    158c:	06860065 	streq	r0, [r6], r5, rrx
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
    1590:	78640000 	stmdavc	r4!, {}^
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    1594:	6e695f6c 	cdpvs	15, 6, cr5, cr9, cr12, {3}
#ifdef USE_AX12_SPEED_CONTROL
			// Save away the new positions...
			g_awGoalAXPos[FIRSTCOXAPIN + LegIndex] = wCoxaSDV; // What order should we store these values?
			g_awGoalAXPos[FIRSTFEMURPIN + LegIndex] = wFemurSDV;
    1598:	61697469 	cmnvs	r9, r9, ror #8

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
#ifdef USE_AX12_SPEED_CONTROL
			// Save away the new positions...
			g_awGoalAXPos[FIRSTCOXAPIN + LegIndex] = wCoxaSDV; // What order should we store these values?
    159c:	657a696c 	ldrbvs	r6, [sl, #-2412]!
			g_awGoalAXPos[FIRSTFEMURPIN + LegIndex] = wFemurSDV;
    15a0:	00076f00 	andeq	r6, r7, r0, lsl #30
			g_awGoalAXPos[FIRSTTIBIAPIN + LegIndex] = wTibiaSDV;
    15a4:	49626700 	stmdbmi	r2!, {r8, r9, sl, sp, lr}^
    15a8:	7274736e 	rsbsvc	r7, r4, #-1207959551	; 0xb8000001
    15ac:	69746375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^

#endif
		} else {
			BioloidControllerEx_setNextPose(
    15b0:	61506e6f 	cmpvs	r0, pc, ror #28
    15b4:	74656b63 	strbtvc	r6, [r5], #-2915
					pgm_read_byte(&cPinTable[FIRSTCOXAPIN + LegIndex]),
					wCoxaSDV);
			BioloidControllerEx_setNextPose(
    15b8:	00079100 	andeq	r9, r7, r0, lsl #2
    15bc:	53626700 	cmnpl	r2, #0	; 0x0
    15c0:	75746174 	ldrbvc	r6, [r4, #-372]!
					pgm_read_byte(&cPinTable[FIRSTFEMURPIN + LegIndex]),
					wFemurSDV);
			BioloidControllerEx_setNextPose(
    15c4:	63615073 	cmnvs	r1, #115	; 0x73
    15c8:	0074656b 	rsbseq	r6, r4, fp, ror #10
					wTibiaSDV);

		}
	}
	CommanderInputController_AllowControllerInterrupts(true); // Ok for hserial again...
}
    15cc:	000007a3 	andeq	r0, r0, r3, lsr #15
    15d0:	78526267 	ldmdavc	r2, {r0, r1, r2, r5, r6, r9, sp, lr}^
    15d4:	6b636150 	blvs	18d9b1c <__Stack_Size+0x18d971c>
    15d8:	654c7465 	strbvs	r7, [ip, #-1125]
    15dc:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^

void StartUpdateServos() {
    15e0:	0007b500 	andeq	fp, r7, r0, lsl #10
	byte LegIndex;

	// First call off to the init...
	BeginServoUpdate();    // Start the update
    15e4:	52626700 	rsbpl	r6, r2, #0	; 0x0
    15e8:	74654778 	strbtvc	r4, [r5], #-1912
    15ec:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!

	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		OutputServoInfoForLeg(LegIndex,
    15f0:	c7006874 	smlsdxgt	r0, r4, r8, r6
    15f4:	67000007 	strvs	r0, [r0, -r7]
    15f8:	6d6f4362 	stclvs	3, cr4, [pc, #-392]!
    15fc:	6174536d 	cmnvs	r4, sp, ror #6
    1600:	00737574 	rsbseq	r7, r3, r4, ror r5
    1604:	000007d9 	ldrdeq	r0, [r0], -r9
    1608:	75426967 	strbvc	r6, [r2, #-2407]
    160c:	69735573 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, sl, ip, lr}^
    1610:	0000676e 	andeq	r6, r0, lr, ror #14
    1614:	1b000000 	blne	161c <__Stack_Size+0x121c>
    1618:	02000002 	andeq	r0, r0, #2	; 0x2
    161c:	003e3a00 	eorseq	r3, lr, r0, lsl #20
    1620:	00047700 	andeq	r7, r4, r0, lsl #14
    1624:	00007d00 	andeq	r7, r0, r0, lsl #26
    1628:	62677a00 	rsbvs	r7, r7, #0	; 0x0
    162c:	5f78725f 	svcpl	0x0078725f
    1630:	61746164 	cmnvs	r4, r4, ror #2
    1634:	00009400 	andeq	r9, r0, r0, lsl #8
    1638:	62677a00 	rsbvs	r7, r7, #0	; 0x0
    163c:	5f78725f 	svcpl	0x0078725f
    1640:	61746164 	cmnvs	r4, r4, ror #2
	byte LegIndex;

	// First call off to the init...
	BeginServoUpdate();    // Start the update

	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    1644:	6769725f 	undefined
				cTibiaInv[LegIndex] ?
						-TibiaAngle1[LegIndex] : TibiaAngle1[LegIndex]);

	}

}
    1648:	565f7468 	ldrbpl	r7, [pc], -r8, ror #8
    164c:	0000ac00 	andeq	sl, r0, r0, lsl #24
    1650:	62677a00 	rsbvs	r7, r7, #0	; 0x0
    1654:	5f78725f 	svcpl	0x0078725f
    1658:	61746164 	cmnvs	r4, r4, ror #2
    165c:	6769725f 	undefined
    1660:	485f7468 	ldmdami	pc, {r3, r5, r6, sl, ip, sp, lr}^
#else
word g_wLastVoltage = 0xffff;    // save the last voltage we retrieved...
byte g_bLegVoltage = 0;		// what leg did we last check?
unsigned long g_ulTimeLastBatteryVoltage;
#define VOLTAGE_REPEAT_MAX  3
word GetBatteryVoltage(void) {
    1664:	0000c400 	andeq	ip, r0, r0, lsl #8
	if (interpolating && (g_wLastVoltage != 0xffff)
    1668:	62677a00 	rsbvs	r7, r7, #0	; 0x0
    166c:	5f78725f 	svcpl	0x0078725f
    1670:	61746164 	cmnvs	r4, r4, ror #2
    1674:	66656c5f 	undefined
    1678:	00565f74 	subseq	r5, r6, r4, ror pc
    167c:	000000dc 	ldrdeq	r0, [r0], -ip
    1680:	5f62677a 	svcpl	0x0062677a
    1684:	645f7872 	ldrbvs	r7, [pc], #2162	; 168c <__Stack_Size+0x128c>
			&& ((getMillis() - g_ulTimeLastBatteryVoltage)
					< VOLTAGE_MAX_TIME_BETWEEN_CALLS))
		return g_wLastVoltage;
    1688:	5f617461 	svcpl	0x00617461

	register u8 bLoopCnt = VOLTAGE_REPEAT_MAX;
	do {
		register word wVoltage = dxl_read_byte(1, AXM_PRESENT_VOLTAGE);
    168c:	7466656c 	strbtvc	r6, [r6], #-1388
    1690:	f400485f 	vst2.16	{d4-d5}, [r0, :64]
    1694:	7a000000 	bvc	169c <__Stack_Size+0x129c>
		if (wVoltage != 0xffff) {
			g_ulTimeLastBatteryVoltage = getMillis();
    1698:	725f6267 	subsvc	r6, pc, #1879048198	; 0x70000006
			g_wLastVoltage = wVoltage * 10;
    169c:	61645f78 	smcvs	17912

	register u8 bLoopCnt = VOLTAGE_REPEAT_MAX;
	do {
		register word wVoltage = dxl_read_byte(1, AXM_PRESENT_VOLTAGE);
		if (wVoltage != 0xffff) {
			g_ulTimeLastBatteryVoltage = getMillis();
    16a0:	625f6174 	subsvs	r6, pc, #29	; 0x1d
			g_wLastVoltage = wVoltage * 10;
    16a4:	6f747475 	svcvs	0x00747475
		}
	} while (--bLoopCnt);

	return 0;

}
    16a8:	0c00736e 	stceq	3, cr7, [r0], {110}
    16ac:	7a000001 	bvc	16b8 <__Stack_Size+0x12b8>
    16b0:	725f6267 	subsvc	r6, pc, #1879048198	; 0x70000006
    16b4:	61645f78 	smcvs	17912
// ReadMsgs
//==============================================================================

/* process messages coming from Commander
 *  format = 0xFF RIGHT_H RIGHT_V LEFT_H LEFT_V BUTTONS EXT CHECKSUM */
int Commander_ReadMsgs() {
    16b8:	655f6174 	ldrbvs	r6, [pc, #-372]	; 154c <__Stack_Size+0x114c>
	 }
	 #endif
	 */
	//while (CheckZBNewArrive() > 0) {
	while (1) {
		if (zgb_rx_check_arduino() == 1) {
    16bc:	61727478 	cmnvs	r2, r8, ror r4
    16c0:	00012400 	andeq	r2, r1, r0, lsl #8

			leftV = (signed char) (zgb_rx_data_right_V_());
    16c4:	62677a00 	rsbvs	r7, r7, #0	; 0x0
    16c8:	5f78725f 	svcpl	0x0078725f
			leftH = (signed char) (zgb_rx_data_right_H_());
    16cc:	61746164 	cmnvs	r4, r4, ror #2
    16d0:	6769725f 	undefined
			rightV = (signed char) (zgb_rx_data_left_V_());
    16d4:	565f7468 	ldrbpl	r7, [pc], -r8, ror #8
    16d8:	0143005f 	qdaddeq	r0, pc, r3
			rightH = (signed char) (zgb_rx_data_left_H_());
    16dc:	677a0000 	ldrbvs	r0, [sl, -r0]!
    16e0:	78725f62 	ldmdavc	r2!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
			buttons = zgb_rx_data_buttons();
    16e4:	7461645f 	strbtvc	r6, [r1], #-1119
    16e8:	69725f61 	ldmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
			ext = zgb_rx_data_extra();
    16ec:	5f746867 	svcpl	0x00746867
    16f0:	5b005f48 	blpl	19418 <__Stack_Size+0x19018>

	}

	return 0;

}
    16f4:	7a000001 	bvc	1700 <__Stack_Size+0x1300>
    16f8:	725f6267 	subsvc	r6, pc, #1879048198	; 0x70000006
    16fc:	61645f78 	smcvs	17912
    1700:	6c5f6174 	ldfvse	f6, [pc], {116}
    1704:	5f746665 	svcpl	0x00746665
    1708:	73005f56 	movwvc	r5, #3926	; 0xf56
    170c:	7a000001 	bvc	1718 <__Stack_Size+0x1318>
    1710:	725f6267 	subsvc	r6, pc, #1879048198	; 0x70000006

//==============================================================================
// This is The main code to input function to read inputs from the Commander and then
//process any commands.
//==============================================================================
void CommanderInputController_ControlInput(void) {
    1714:	61645f78 	smcvs	17912

	// See if we have a new command available...
	if (Commander_ReadMsgs() > 0) {
    1718:	6c5f6174 	ldfvse	f6, [pc], {116}
    171c:	5f746665 	svcpl	0x00746665
    1720:	8b005f48 	blhi	19448 <__Stack_Size+0x19048>
    1724:	43000001 	movwmi	r0, #1	; 0x1
		// If we receive a valid message than turn robot on...
		boolean fAdjustLegPositions = false;
		short sLegInitXZAdjust = 0;
		short sLegInitAngleAdjust = 0;

		if (!g_InControlState.fRobotOn) {
    1728:	6b636568 	blvs	18dacd0 <__Stack_Size+0x18da8d0>
    172c:	654e425a 	strbvs	r4, [lr, #-602]
			g_InControlState.fRobotOn = true;
    1730:	72724177 	rsbsvc	r4, r2, #-1073741795	; 0xc000001d
    1734:	00657669 	rsbeq	r7, r5, r9, ror #12
		}

		// [SWITCH MODES]

		// Cycle through modes...
		if ((buttons & BUT_LT) && !(buttonsPrev & BUT_LT)) {
    1738:	000001a3 	andeq	r0, r0, r3, lsr #3
    173c:	5f62677a 	svcpl	0x0062677a
    1740:	635f7872 	cmpvs	pc, #7471104	; 0x720000
    1744:	6b636568 	blvs	18dacec <__Stack_Size+0x18da8ec>
    1748:	6472615f 	ldrbtvs	r6, [r2], #-351
    174c:	6f6e6975 	svcvs	0x006e6975

			if (++ControlMode >= MODECNT) {
    1750:	0001f100 	andeq	pc, r1, r0, lsl #2
    1754:	62677a00 	rsbvs	r7, r7, #0	; 0x0
    1758:	5f78725f 	svcpl	0x0078725f
    175c:	63656863 	cmnvs	r5, #6488064	; 0x630000
				ControlMode = WALKMODE;    // cycled back around...
				Buzzed(50, 2000);
    1760:	023f006b 	eorseq	r0, pc, #107	; 0x6b
    1764:	677a0000 	ldrbvs	r0, [sl, -r0]!
    1768:	78745f62 	ldmdavc	r4!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
				Buzzed(50, 3000);
    176c:	7461645f 	strbtvc	r6, [r1], #-1119
    1770:	02a80061 	adceq	r0, r8, #97	; 0x61

			} else {
				Buzzed(50, 2000);
    1774:	677a0000 	ldrbvs	r0, [sl, -r0]!
    1778:	65745f62 	ldrbvs	r5, [r4, #-3938]!
    177c:	6e696d72 	mcrvs	13, 3, r6, cr9, cr2, {3}
			}
			if (ControlMode != SINGLELEGMODE)
    1780:	00657461 	rsbeq	r7, r5, r1, ror #8
    1784:	000002bd 	strheq	r0, [r0], -sp
				g_InControlState.SelectedLeg = 255;
    1788:	5f62677a 	svcpl	0x0062677a
    178c:	74696e69 	strbtvc	r6, [r9], #-3689
    1790:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^

		}

		//[Common functions]
		//Switch Balance mode on/off
		if ((buttons & BUT_L4) && !(buttonsPrev & BUT_L4)) {
    1794:	a000657a 	andge	r6, r0, sl, ror r5
    1798:	67000003 	strvs	r0, [r0, -r3]
    179c:	76635262 	strbtvc	r5, [r3], -r2, ror #4
    17a0:	6b636150 	blvs	18d9ce8 <__Stack_Size+0x18d98e8>
    17a4:	c2007465 	andgt	r7, r0, #1694498816	; 0x65000000
    17a8:	67000003 	strvs	r0, [r0, -r3]

			g_InControlState.BalanceMode = !g_InControlState.BalanceMode;
    17ac:	76635262 	strbtvc	r5, [r3], -r2, ror #4
    17b0:	6b636150 	blvs	18d9cf8 <__Stack_Size+0x18d98f8>
    17b4:	72417465 	subvc	r7, r1, #1694498816	; 0x65000000
    17b8:	6e697564 	cdpvs	5, 6, cr7, cr9, cr4, {3}
    17bc:	03d4006f 	bicseq	r0, r4, #111	; 0x6f
			if (g_InControlState.BalanceMode) {
    17c0:	62670000 	rsbvs	r0, r7, #0	; 0x0
				Buzzed(250, 1500);
    17c4:	50766352 	rsbspl	r6, r6, r2, asr r3
    17c8:	656b6361 	strbvs	r6, [fp, #-865]!
			} else {
				Buzzed(100, 2000);
    17cc:	6d754e74 	ldclvs	14, cr4, [r5, #-464]!
    17d0:	0003e600 	andeq	lr, r3, r0, lsl #12
				Buzzed(50, 4000);
    17d4:	52776700 	rsbspl	r6, r7, #0	; 0x0
    17d8:	61447663 	cmpvs	r4, r3, ror #12
    17dc:	f8006174 	undefined instruction 0xf8006174
			}
		}

		//Stand up, sit down
		if ((buttons & BUT_L5) && !(buttonsPrev & BUT_L5)) {
    17e0:	67000003 	strvs	r0, [r0, -r3]
    17e4:	76635262 	strbtvc	r5, [r3], -r2, ror #4
    17e8:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    17ec:	00040a00 	andeq	r0, r4, r0, lsl #20
    17f0:	67697200 	strbvs	r7, [r9, -r0, lsl #4]!
    17f4:	565f7468 	ldrbpl	r7, [pc], -r8, ror #8
			if (g_BodyYOffset > 0)
    17f8:	00041c00 	andeq	r1, r4, r0, lsl #24
    17fc:	67697200 	strbvs	r7, [r9, -r0, lsl #4]!
				g_BodyYOffset = 0;
    1800:	485f7468 	ldmdami	pc, {r3, r5, r6, sl, ip, sp, lr}^
    1804:	00042e00 	andeq	r2, r4, r0, lsl #28
			else
				g_BodyYOffset = 35;
			fAdjustLegPositions = true;
			g_fDynamicLegXZLength = false;
    1808:	66656c00 	strbtvs	r6, [r5], -r0, lsl #24
		//Stand up, sit down
		if ((buttons & BUT_L5) && !(buttonsPrev & BUT_L5)) {
			if (g_BodyYOffset > 0)
				g_BodyYOffset = 0;
			else
				g_BodyYOffset = 35;
    180c:	00565f74 	subseq	r5, r6, r4, ror pc
			fAdjustLegPositions = true;
			g_fDynamicLegXZLength = false;
    1810:	00000440 	andeq	r0, r0, r0, asr #8
    1814:	7466656c 	strbtvc	r6, [r6], #-1388

		// We will use L6 with the Right joystick to control both body offset as well as Speed...
		// We move each pass through this by a percentage of how far we are from center in each direction
		// We get feedback with height by seeing the robot move up and down.  For Speed, I put in sounds
		// which give an idea, but only for those whoes robot has a speaker
		int lx = leftH;
    1818:	5200485f 	andpl	r4, r0, #6225920	; 0x5f0000
		int ly = leftV;
		if (buttons & BUT_L6) {
    181c:	62000004 	andvs	r0, r0, #4	; 0x4

		// We will use L6 with the Right joystick to control both body offset as well as Speed...
		// We move each pass through this by a percentage of how far we are from center in each direction
		// We get feedback with height by seeing the robot move up and down.  For Speed, I put in sounds
		// which give an idea, but only for those whoes robot has a speaker
		int lx = leftH;
    1820:	6f747475 	svcvs	0x00747475
    1824:	005f736e 	subseq	r7, pc, lr, ror #6
		int ly = leftV;
    1828:	00000464 	andeq	r0, r0, r4, ror #8
    182c:	72747865 	rsbsvc	r7, r4, #6619136	; 0x650000
		if (buttons & BUT_L6) {
    1830:	00000061 	andeq	r0, r0, r1, rrx
    1834:	005d0000 	subseq	r0, sp, r0
			// raise or lower the robot on the joystick up /down
			// Maybe should have Min/Max
			int delta = rightV / 25;
    1838:	00020000 	andeq	r0, r2, r0
    183c:	000042b1 	strheq	r4, [r0], -r1
    1840:	000003f9 	strdeq	r0, [r0], -r9
    1844:	000002fb 	strdeq	r0, [r0], -fp
    1848:	45746553 	ldrbmi	r6, [r4, #-1363]!
    184c:	74726f50 	ldrbtvc	r6, [r2], #-3920
			if (delta) {
    1850:	00033300 	andeq	r3, r3, r0, lsl #6
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
    1854:	61655200 	cmnvs	r5, r0, lsl #4
    1858:	616e4164 	cmnvs	lr, r4, ror #2
    185c:	00676f6c 	rsbeq	r6, r7, ip, ror #30
    1860:	00000379 	andeq	r0, r0, r9, ror r3
    1864:	74746142 	ldrbtvc	r6, [r4], #-322
    1868:	5f797265 	svcpl	0x00797265
    186c:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
    1870:	5f726f74 	svcpl	0x00726f74
    1874:	72616c41 	rsbvc	r6, r1, #16640	; 0x4100
			sLegInitAngleAdjust = ly / 8;
			lx = 0;
			ly = 0;

			// Likewise for Speed control
			delta = rightH / 16;   //
    1878:	039e006d 	orrseq	r0, lr, #109	; 0x6d
    187c:	65520000 	ldrbvs	r0, [r2]
    1880:	52496461 	subpl	r6, r9, #1627389952	; 0x61000000
    1884:	0003e600 	andeq	lr, r3, r0, lsl #12
    1888:	73614500 	cmnvc	r1, #0	; 0x0
			if ((delta < 0) && g_InControlState.SpeedControl) {
    188c:	6f504579 	svcvs	0x00504579
    1890:	00007472 	andeq	r7, r0, r2, ror r4
    1894:	2c000000 	stccs	0, cr0, [r0], {0}
				if ((word)(-delta) < g_InControlState.SpeedControl)
    1898:	02000000 	andeq	r0, r0, #0	; 0x0
					g_InControlState.SpeedControl += delta;
    189c:	0046aa00 	subeq	sl, r6, r0, lsl #20
				else
					g_InControlState.SpeedControl = 0;
    18a0:	0001c500 	andeq	ip, r1, r0, lsl #10
    18a4:	00017500 	andeq	r7, r1, r0, lsl #10

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}
			if ((delta > 0) && (g_InControlState.SpeedControl < 2000)) {
    18a8:	61655200 	cmnvs	r5, r0, lsl #4
    18ac:	74754264 	ldrbtvc	r4, [r5], #-612
    18b0:	006e6f74 	rsbeq	r6, lr, r4, ror pc
				g_InControlState.SpeedControl += delta;
				if (g_InControlState.SpeedControl > 2000)
    18b4:	000001b2 	strheq	r0, [r0], -r2
					g_InControlState.SpeedControl = 0;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}
			if ((delta > 0) && (g_InControlState.SpeedControl < 2000)) {
				g_InControlState.SpeedControl += delta;
    18b8:	79736145 	ldmdbvc	r3!, {r0, r2, r6, r8, sp, lr}^
				if (g_InControlState.SpeedControl > 2000)
					g_InControlState.SpeedControl = 2000;
    18bc:	74747542 	ldrbtvc	r7, [r4], #-1346
    18c0:	00006e6f 	andeq	r6, r0, pc, ror #28

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
    18c4:	25000000 	strcs	r0, [r0]
    18c8:	02000000 	andeq	r0, r0, #0	; 0x0
    18cc:	00486f00 	subeq	r6, r8, r0, lsl #30
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
				fAdjustLegPositions = true;
			}

			// Also use right Horizontal to manually adjust the initial leg positions.
			sLegInitXZAdjust = lx / 10;        // play with this.
    18d0:	0001c200 	andeq	ip, r1, r0, lsl #4
    18d4:	00016700 	andeq	r6, r1, r0, lsl #14
    18d8:	74655300 	strbtvc	r5, [r5], #-768
    18dc:	0044454c 	subeq	r4, r4, ip, asr #10
			sLegInitAngleAdjust = ly / 8;
    18e0:	000001af 	andeq	r0, r0, pc, lsr #3
    18e4:	79736145 	ldmdbvc	r3!, {r0, r2, r6, r8, sp, lr}^
    18e8:	0044454c 	subeq	r4, r4, ip, asr #10
    18ec:	00000000 	andeq	r0, r0, r0
					g_InControlState.SpeedControl = 2000;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}

			rightH = 0; // don't walk when adjusting the speed here...
    18f0:	00000026 	andeq	r0, r0, r6, lsr #32
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
				fAdjustLegPositions = true;
			}

			// Also use right Horizontal to manually adjust the initial leg positions.
			sLegInitXZAdjust = lx / 10;        // play with this.
    18f4:	4a310002 	bmi	c41904 <__Stack_Size+0xc41504>
					g_InControlState.SpeedControl = 2000;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}

			rightH = 0; // don't walk when adjusting the speed here...
    18f8:	02110000 	andseq	r0, r1, #0	; 0x0
		}

		//[Walk functions]
		if (ControlMode == WALKMODE) {
    18fc:	017f0000 	cmneq	pc, r0
    1900:	75420000 	strbvc	r0, [r2]
    1904:	64657a7a 	strbtvs	r7, [r5], #-2682

			//Switch gates
			if (((buttons & BUT_R1) && !(buttonsPrev & BUT_R1))
    1908:	0001b700 	andeq	fp, r1, r0, lsl #14
    190c:	616c5000 	cmnvs	ip, r0
    1910:	746f4e79 	strbtvc	r4, [pc], #3705	; 1918 <__Stack_Size+0x1518>
    1914:	00000065 	andeq	r0, r0, r5, rrx
    1918:	01380000 	teqeq	r8, r0
    191c:	00020000 	andeq	r0, r2, r0
    1920:	00004c42 	andeq	r4, r0, r2, asr #24
    1924:	0000024b 	andeq	r0, r0, fp, asr #4
    1928:	0000009e 	muleq	r0, lr, r0
    192c:	6c654475 	cfstrdvs	mvd4, [r5], #-468
    1930:	c3007961 	movwgt	r7, #2401	; 0x961
    1934:	6d000000 	stcvs	0, cr0, [r0]
    1938:	616c6544 	cmnvs	ip, r4, asr #10
    193c:	00ec0079 	rsceq	r0, ip, r9, ror r0
    1940:	74730000 	ldrbtvc	r0, [r3]
    1944:	5f747261 	svcpl	0x00747261
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
    1948:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
					&& abs(g_InControlState.TravelLength.x) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
    194c:	776f6474 	undefined
    1950:	75625f6e 	strbvc	r5, [r2, #-3950]!
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
    1954:	72657a7a 	rsbvc	r7, r5, #499712	; 0x7a000
					&& abs(g_InControlState.TravelLength.x) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
    1958:	00011100 	andeq	r1, r1, r0, lsl #2
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
					Buzzed(50, 2000);
    195c:	61747300 	cmnvs	r4, r0, lsl #6
    1960:	745f7472 	ldrbvc	r7, [pc], #1138	; 1968 <__Stack_Size+0x1568>
    1964:	6f656d69 	svcvs	0x00656d69
				} else {
					Buzzed(50, 2000);
    1968:	645f7475 	ldrbvs	r7, [pc], #1141	; 1970 <__Stack_Size+0x1570>
    196c:	36006c78 	undefined
    1970:	73000001 	movwvc	r0, #1	; 0x1
					Buzzed(50, 2250);
    1974:	74726174 	ldrbtvc	r6, [r2], #-372
    1978:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!
					g_InControlState.GaitType = 0;
    197c:	74756f65 	ldrbtvc	r6, [r5], #-3941
    1980:	7563705f 	strbvc	r7, [r3, #-95]!
}

void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {
    1984:	00015b00 	andeq	r5, r1, r0, lsl #22
    1988:	74656700 	strbtvc	r6, [r5], #-1792
    198c:	6c6c694d 	stclvs	9, cr6, [ip], #-308

		g_InControlState.gaitCur = APG[g_InControlState.GaitType];
    1990:	72007369 	andvc	r7, r0, #-1543503871	; 0xa4000001
    1994:	49000001 	stmdbmi	r0, {r0}
    1998:	445f5253 	ldrbmi	r5, [pc], #595	; 19a0 <__Stack_Size+0x15a0>
    199c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    19a0:	7361425f 	cmnvc	r1, #-268435451	; 0xf0000005
				}
				GaitSelect();
			}

			//Double leg lift height
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    19a4:	01870065 	orreq	r0, r7, r5, rrx
    19a8:	74530000 	ldrbvc	r0, [r3]
    19ac:	43747261 	cmnmi	r4, #268435462	; 0x10000006
    19b0:	746e756f 	strbtvc	r7, [lr], #-1391
    19b4:	6e776f64 	cdpvs	15, 7, cr6, cr7, cr4, {3}
				Buzzed(50, 2000);
    19b8:	0001b000 	andeq	fp, r1, r0
    19bc:	446c6700 	strbtmi	r6, [ip], #-1792
				HeightSpeedMode = (HeightSpeedMode + 1) & 0x3; // wrap around mode
    19c0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    19c4:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    19c8:	00726574 	rsbseq	r6, r2, r4, ror r5
    19cc:	000001c7 	andeq	r0, r0, r7, asr #3
				DoubleTravelOn = HeightSpeedMode & 0x1;
    19d0:	6f436c67 	svcvs	0x00436c67
    19d4:	64746e75 	ldrbtvs	r6, [r4], #-3701
				if (HeightSpeedMode & 0x2)
    19d8:	436e776f 	cmnmi	lr, #29097984	; 0x1bc0000
    19dc:	746e756f 	strbtvc	r7, [lr], #-1391
					g_InControlState.LegLiftHeight = 80;
    19e0:	d9007265 	stmdble	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    19e4:	67000001 	strvs	r0, [r0, -r1]
				else
					g_InControlState.LegLiftHeight = 50;
			}

			// Switch between Walk method 1 && Walk method 2
			if ((buttons & BUT_R2) && !(buttonsPrev & BUT_R2)) {
    19e8:	6c78446c 	cfldrdvs	mvd4, [r8], #-432
    19ec:	656d6954 	strbvs	r6, [sp, #-2388]!
    19f0:	4374756f 	cmnmi	r4, #465567744	; 0x1bc00000
    19f4:	746e756f 	strbtvc	r7, [lr], #-1391
    19f8:	eb007265 	bl	1e394 <__Stack_Size+0x1df94>

				if ((++bJoystickWalkMode) > 1)
    19fc:	67000001 	strvs	r0, [r0, -r1]
    1a00:	7563506c 	strbvc	r5, [r3, #-108]!
    1a04:	656d6954 	strbvs	r6, [sp, #-2388]!

					bJoystickWalkMode = 0;
				Buzzed(50, 2000 + bJoystickWalkMode * 250);
    1a08:	4374756f 	cmnmi	r4, #465567744	; 0x1bc00000
			// Switch between Walk method 1 && Walk method 2
			if ((buttons & BUT_R2) && !(buttonsPrev & BUT_R2)) {

				if ((++bJoystickWalkMode) > 1)

					bJoystickWalkMode = 0;
    1a0c:	746e756f 	strbtvc	r7, [lr], #-1391
				Buzzed(50, 2000 + bJoystickWalkMode * 250);
    1a10:	fd007265 	stc2	2, cr7, [r0, #-404]
    1a14:	67000001 	strvs	r0, [r0, -r1]
    1a18:	7a75426c 	bvc	1d523d0 <__Stack_Size+0x1d51fd0>
    1a1c:	4372657a 	cmnmi	r2, #511705088	; 0x1e800000
			}

			//Walking
			switch (bJoystickWalkMode) {
    1a20:	746e756f 	strbtvc	r7, [lr], #-1391
    1a24:	0f007265 	svceq	0x00007265
    1a28:	67000002 	strvs	r0, [r0, -r2]
			case 0:
				g_InControlState.TravelLength.x = -lx;
    1a2c:	756f4362 	strbvc	r4, [pc, #-866]!	; 16d2 <__Stack_Size+0x12d2>
    1a30:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1a34:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
				g_InControlState.TravelLength.z = -ly;
    1a38:	02260074 	eoreq	r0, r6, #116	; 0x74
				g_InControlState.TravelLength.y = -(rightH) / 4; //Right Stick Left/Right
				break;
			case 1:
				g_InControlState.TravelLength.z = (rightV); //Right Stick Up/Down
    1a3c:	694d0000 	stmdbvs	sp, {}^
    1a40:	73696c6c 	cmnvc	r9, #27648	; 0x6c00
    1a44:	00023800 	andeq	r3, r2, r0, lsl #16
				g_InControlState.TravelLength.y = -(rightH) / 4; //Right Stick Left/Right
    1a48:	4d736d00 	ldclmi	13, cr6, [r3]
    1a4c:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
    1a50:	00000073 	andeq	r0, r0, r3, ror r0
    1a54:	00a60000 	adceq	r0, r6, r0
    1a58:	00020000 	andeq	r0, r2, r0
    1a5c:	00004e8d 	andeq	r4, r0, sp, lsl #29
				break;

			}

			if (!DoubleTravelOn) {  //(Double travel length)
    1a60:	0000058f 	andeq	r0, r0, pc, lsl #11
				g_InControlState.TravelLength.x =
    1a64:	000003bb 	strheq	r0, [r0], -fp
    1a68:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1a6c:	6f435f54 	svcvs	0x00435f54
						g_InControlState.TravelLength.x / 2;
				g_InControlState.TravelLength.z =
    1a70:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1a74:	74617275 	strbtvc	r7, [r1], #-629
    1a78:	006e6f69 	rsbeq	r6, lr, r9, ror #30
			}

		}

		//[Translate functions]
		g_BodyYShift = 0;
    1a7c:	000003e1 	andeq	r0, r0, r1, ror #7
    1a80:	54737953 	ldrbtpl	r7, [r3], #-2387
		if (ControlMode == TRANSLATEMODE) {
    1a84:	5f6b6369 	svcpl	0x006b6369
    1a88:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30

		      g_InControlState.BodyPos.x =  SmoothControl(((lx)*2/3), g_InControlState.BodyPos.x, SmDiv);
    1a8c:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
    1a90:	6f697461 	svcvs	0x00697461
    1a94:	03f7006e 	mvnseq	r0, #110	; 0x6e
    1a98:	44410000 	strbmi	r0, [r1]
    1a9c:	6f435f43 	svcvs	0x00435f43
    1aa0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1aa4:	74617275 	strbtvc	r7, [r1], #-629
    1aa8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
		      g_InControlState.BodyPos.z =  SmoothControl(((ly)*2/3), g_InControlState.BodyPos.z, SmDiv);
    1aac:	0000041f 	andeq	r0, r0, pc, lsl r4
    1ab0:	4f495047 	svcmi	0x00495047
    1ab4:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
    1ab8:	75676966 	strbvc	r6, [r7, #-2406]!
    1abc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
		      g_InControlState.BodyRot1.y = SmoothControl(((rightH)*2), g_InControlState.BodyRot1.y, SmDiv);
    1ac0:	47006e6f 	strmi	r6, [r0, -pc, ror #28]
		//[Translate functions]
		g_BodyYShift = 0;
		if (ControlMode == TRANSLATEMODE) {

		      g_InControlState.BodyPos.x =  SmoothControl(((lx)*2/3), g_InControlState.BodyPos.x, SmDiv);
		      g_InControlState.BodyPos.z =  SmoothControl(((ly)*2/3), g_InControlState.BodyPos.z, SmDiv);
    1ac4:	4e000004 	cdpmi	0, 0, cr0, cr0, cr4, {0}
		      g_InControlState.BodyRot1.y = SmoothControl(((rightH)*2), g_InControlState.BodyRot1.y, SmDiv);
    1ac8:	5f434956 	svcpl	0x00434956
    1acc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1ad0:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
    1ad4:	6f697461 	svcvs	0x00697461


			//      g_InControlState.BodyPos.x = (lx)/2;
			//      g_InControlState.BodyPos.z = -(ly)/3;
			//      g_InControlState.BodyRot1.y = (rightH)*2;
			g_BodyYShift = (-(rightV) / 2);
    1ad8:	046f006e 	strbteq	r0, [pc], #110	; 1ae0 <__Stack_Size+0x16e0>
    1adc:	43520000 	cmpmi	r2, #0	; 0x0
    1ae0:	6f435f43 	svcvs	0x00435f43
    1ae4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1ae8:	74617275 	strbtvc	r7, [r1], #-629
    1aec:	006e6f69 	rsbeq	r6, lr, r9, ror #30
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
    1af0:	00000494 	muleq	r0, r4, r4
			g_InControlState.BodyRot1.x = (ly);
			g_InControlState.BodyRot1.y = (rightH) * 2;
    1af4:	49737953 	ldmdbmi	r3!, {r0, r1, r4, r6, r8, fp, ip, sp, lr}^
    1af8:	0074696e 	rsbseq	r6, r4, lr, ror #18
			g_InControlState.BodyRot1.z = (lx);
			g_BodyYShift = (-(rightV) / 2);
    1afc:	00000000 	andeq	r0, r0, r0
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
			g_InControlState.BodyRot1.x = (ly);
			g_InControlState.BodyRot1.y = (rightH) * 2;
    1b00:	00000201 	andeq	r0, r0, r1, lsl #4
			g_BodyYShift = (-(rightV) / 2);
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
			g_InControlState.BodyRot1.x = (ly);
    1b04:	541c0002 	ldrpl	r0, [ip], #-2
			g_InControlState.BodyRot1.y = (rightH) * 2;
			g_InControlState.BodyRot1.z = (lx);
			g_BodyYShift = (-(rightV) / 2);
    1b08:	07ed0000 	strbeq	r0, [sp, r0]!
    1b0c:	029c0000 	addseq	r0, ip, #0	; 0x0
    1b10:	63700000 	cmnvs	r0, #0	; 0x0
    1b14:	61685f75 	smcvs	34293
    1b18:	69745f6c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
		}

		//[Single leg functions]
#ifdef OPT_SINGLELEG
		if (ControlMode == SINGLELEGMODE) {
    1b1c:	756f656d 	strbvc	r6, [pc, #-1389]!	; 15b7 <__Stack_Size+0x11b7>

			//Switch leg for single leg control
			if ((buttons & BUT_R1) && !(buttonsPrev & BUT_R1)) {
    1b20:	02b30074 	adcseq	r0, r3, #116	; 0x74
    1b24:	63700000 	cmnvs	r0, #0	; 0x0
    1b28:	65675f75 	strbvs	r5, [r7, #-3957]!
    1b2c:	75715f74 	ldrbvc	r5, [r1, #-3956]!
    1b30:	00657565 	rsbeq	r7, r5, r5, ror #10
				Buzzed(50,2000);
    1b34:	000002de 	ldrdeq	r0, [r0], -lr
    1b38:	5f756370 	svcpl	0x00756370
    1b3c:	6b656570 	blvs	195b104 <__Stack_Size+0x195ad04>
				if (g_InControlState.SelectedLeg < (CNT_LEGS-1)) {
    1b40:	6575715f 	ldrbvs	r7, [r5, #-351]!
    1b44:	09006575 	stmdbeq	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
					g_InControlState.SelectedLeg = g_InControlState.SelectedLeg + 1;
				} else {
					g_InControlState.SelectedLeg = 0;
    1b48:	70000003 	andvc	r0, r0, r3
		if (ControlMode == SINGLELEGMODE) {

			//Switch leg for single leg control
			if ((buttons & BUT_R1) && !(buttonsPrev & BUT_R1)) {
				Buzzed(50,2000);
				if (g_InControlState.SelectedLeg < (CNT_LEGS-1)) {
    1b4c:	635f7563 	cmpvs	pc, #415236096	; 0x18c00000
					g_InControlState.SelectedLeg = g_InControlState.SelectedLeg + 1;
    1b50:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
			   g_InControlState.SLLeg.x= (signed char)((int)((int)lx+128)/2); //Left Stick Right/Left
      		   g_InControlState.SLLeg.y= (signed char)((int)((int)rightV+128)/10); //Right Stick Up/Down
		       g_InControlState.SLLeg.z = (signed char)((int)((int)ly+128)/2); //Left Stick Up/Down

#else
			g_InControlState.SLLeg.x = lx; //Left Stick Right/Left
    1b54:	6575715f 	ldrbvs	r7, [r5, #-351]!
			g_InControlState.SLLeg.y = rightV / 3 - 20;//Right Stick Up/Down
    1b58:	18006575 	stmdane	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    1b5c:	70000003 	andvc	r0, r0, r3
    1b60:	675f7563 	ldrbvs	r7, [pc, -r3, ror #10]
    1b64:	715f7465 	cmpvc	pc, r5, ror #8
    1b68:	74617473 	strbtvc	r7, [r1], #-1139
			g_InControlState.SLLeg.z = ly;//Left Stick Up/Down

#endif
			// Hold single leg in place
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    1b6c:	03430065 	movteq	r0, #12389	; 0x3065
    1b70:	677a0000 	ldrbvs	r0, [sl, -r0]!
    1b74:	61685f62 	cmnvs	r8, r2, ror #30
      		   g_InControlState.SLLeg.y= (signed char)((int)((int)rightV+128)/10); //Right Stick Up/Down
		       g_InControlState.SLLeg.z = (signed char)((int)((int)ly+128)/2); //Left Stick Up/Down

#else
			g_InControlState.SLLeg.x = lx; //Left Stick Right/Left
			g_InControlState.SLLeg.y = rightV / 3 - 20;//Right Stick Up/Down
    1b78:	78725f6c 	ldmdavc	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
			g_InControlState.SLLeg.z = ly;//Left Stick Up/Down

#endif
			// Hold single leg in place
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    1b7c:	00039600 	andeq	r9, r3, r0, lsl #12
    1b80:	6c786400 	cfldrdvs	mvd6, [r8]
    1b84:	6c61685f 	stclvs	8, cr6, [r1], #-380
				Buzzed(50,2000);
    1b88:	656c635f 	strbvs	r6, [ip, #-863]!
    1b8c:	b9007261 	stmdblt	r0, {r0, r5, r6, r9, ip, sp, lr}
				g_InControlState.fSLHold = !g_InControlState.fSLHold;
    1b90:	64000003 	strvs	r0, [r0], #-3
    1b94:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^
    1b98:	725f6c61 	subsvc	r6, pc, #24832	; 0x6100
    1b9c:	04060078 	streq	r0, [r6], #-120
			}
		}
#endif

		//Calculate walking time delay
		g_InControlState.InputTimeDelay = 128- max(max(abs(lx), abs(ly)), abs(rightH));
    1ba0:	78640000 	stmdavc	r4!, {}^
    1ba4:	61685f6c 	cmnvs	r8, ip, ror #30
    1ba8:	69745f6c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1bac:	756f656d 	strbvc	r6, [pc, #-1389]!	; 1647 <__Stack_Size+0x1247>
    1bb0:	041e0074 	ldreq	r0, [lr], #-116
    1bb4:	78520000 	ldmdavc	r2, {}^
    1bb8:	58445f44 	stmdapl	r4, {r2, r6, r8, r9, sl, fp, ip, lr}^
    1bbc:	6e495f4c 	cdpvs	15, 4, cr5, cr9, cr12, {2}
    1bc0:	72726574 	rsbsvc	r6, r2, #486539264	; 0x1d000000
    1bc4:	00747075 	rsbseq	r7, r4, r5, ror r0
    1bc8:	00000447 	andeq	r0, r0, r7, asr #8
    1bcc:	5f6c7864 	svcpl	0x006c7864
    1bd0:	5f6c6168 	svcpl	0x006c6168

		//Calculate g_InControlState.BodyPos.y
		g_InControlState.BodyPos.y = max(g_BodyYOffset + g_BodyYShift, 0);
    1bd4:	5f746573 	svcpl	0x00746573
    1bd8:	656d6974 	strbvs	r6, [sp, #-2420]!
    1bdc:	0074756f 	rsbseq	r7, r4, pc, ror #10
    1be0:	00000472 	andeq	r0, r0, r2, ror r4
    1be4:	5f6c7864 	svcpl	0x006c7864
    1be8:	5f6c6168 	svcpl	0x006c6168

		if (sLegInitXZAdjust || sLegInitAngleAdjust) {
    1bec:	bb007874 	bllt	1fdc4 <__Stack_Size+0x1f9c4>
    1bf0:	64000004 	strvs	r0, [r0], #-4
			// User asked for manual leg adjustment - only do when we have finished any previous adjustment

			if (!g_InControlState.ForceGaitStepCnt) {
    1bf4:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^
				if (sLegInitXZAdjust)
    1bf8:	635f6c61 	cmpvs	pc, #24832	; 0x6100
					g_fDynamicLegXZLength = true;
    1bfc:	65736f6c 	ldrbvs	r6, [r3, #-3948]!
    1c00:	0004d100 	andeq	sp, r4, r0, lsl #2

				sLegInitXZAdjust += GetLegsXZLength(); // Add on current length to our adjustment...
    1c04:	62677a00 	rsbvs	r7, r7, #0	; 0x0
    1c08:	6c61685f 	stclvs	8, cr6, [r1], #-380
				// Handle maybe change angles...
				if (sLegInitAngleAdjust)
					RotateLegInitAngles(sLegInitAngleAdjust);

				// Give system time to process previous calls
				AdjustLegPositions(sLegInitXZAdjust);
    1c0c:	6f6c635f 	svcvs	0x006c635f
			}
		}

		if (fAdjustLegPositions && !g_fDynamicLegXZLength)
    1c10:	e7006573 	smlsdx	r0, r3, r5, r6
    1c14:	70000004 	andvc	r0, r0, r4
    1c18:	685f7563 	ldmdavs	pc, {r0, r1, r5, r6, r8, sl, ip, sp, lr}^
			AdjustLegPositionsToBodyHeight(); // Put main workings into main program file
    1c1c:	635f6c61 	cmpvs	pc, #24832	; 0x6100
		// Save away the buttons state as to not process the same press twice.
		buttonsPrev = buttons;
    1c20:	65736f6c 	ldrbvs	r6, [r3, #-3948]!
    1c24:	0004fc00 	andeq	pc, r4, r0, lsl #24
		extPrev = ext;
    1c28:	6c786400 	cfldrdvs	mvd6, [r8]
    1c2c:	6c61685f 	stclvs	8, cr6, [r1], #-380
		g_ulLastMsgTime = getMillis();
    1c30:	65706f5f 	ldrbvs	r6, [r0, #-3935]!
    1c34:	053a006e 	ldreq	r0, [sl, #-110]!
	} else {
		// We did not receive a valid packet.  check for a timeout to see if we should turn robot off...
		if (g_InControlState.fRobotOn) {
    1c38:	677a0000 	ldrbvs	r0, [sl, -r0]!
			if ((getMillis() - g_ulLastMsgTime) > ARBOTIX_TO)
    1c3c:	61685f62 	cmnvs	r8, r2, ror #30
    1c40:	706f5f6c 	rsbvc	r5, pc, ip, ror #30
    1c44:	78006e65 	stmdavc	r0, {r0, r2, r5, r6, r9, sl, fp, sp, lr}
    1c48:	70000005 	andvc	r0, r0, r5
    1c4c:	685f7563 	ldmdavs	pc, {r0, r1, r5, r6, r8, sl, ip, sp, lr}^
				CommanderTurnRobotOff();
    1c50:	6f5f6c61 	svcvs	0x005f6c61
		}
	}

}
    1c54:	006e6570 	rsbeq	r6, lr, r0, ror r5
    1c58:	000005b3 	strheq	r0, [r0], -r3
    1c5c:	5f447852 	svcpl	0x00447852
    1c60:	5f47495a 	svcpl	0x0047495a
    1c64:	65746e49 	ldrbvs	r6, [r4, #-3657]!
    1c68:	70757272 	rsbsvc	r7, r5, r2, ror r2
    1c6c:	05dc0074 	ldrbeq	r0, [ip, #116]
    1c70:	677a0000 	ldrbvs	r0, [sl, -r0]!
    1c74:	61685f62 	cmnvs	r8, r2, ror #30
    1c78:	78745f6c 	ldmdavc	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1c7c:	00062500 	andeq	r2, r6, r0, lsl #10
    1c80:	75637000 	strbvc	r7, [r3]!
    1c84:	7475705f 	ldrbtvc	r7, [r5], #-95
    1c88:	6575715f 	ldrbvs	r7, [r5, #-351]!
    1c8c:	4c006575 	cfstr32mi	mvfx6, [r0], {117}
    1c90:	52000006 	andpl	r0, r0, #6	; 0x6
    1c94:	505f4478 	subspl	r4, pc, r8, ror r4
    1c98:	495f5543 	ldmdbmi	pc, {r0, r1, r6, r8, sl, ip, lr}^
    1c9c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1ca0:	74707572 	ldrbtvc	r7, [r0], #-1394
    1ca4:	00066100 	andeq	r6, r6, r0, lsl #2
    1ca8:	75637000 	strbvc	r7, [r3]!
    1cac:	7475705f 	ldrbtvc	r7, [r5], #-95

extern void setupPhoenix(void);
extern void readSensors(void);


int Big_main(void) {
    1cb0:	7479625f 	ldrbtvc	r6, [r9], #-607

	// Must include this line in all programs using "cm530.h/.c"
	SysInit();
    1cb4:	068a0065 	streq	r0, [sl], r5, rrx
	setupPhoenix();
    1cb8:	63700000 	cmnvs	r0, #0	; 0x0
			TotalYBal1 = 0;
			TotalZBal1 = 0;

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1cbc:	61685f75 	smcvs	34293

	while (1){
		while (1) {
			//Start time
			unsigned long lTimeWaitEnd;
			lTimerStart = getMillis();
    1cc0:	65735f6c 	ldrbvs	r5, [r3, #-3948]!
    1cc4:	69745f74 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1cc8:	756f656d 	strbvc	r6, [pc, #-1389]!	; 1763 <__Stack_Size+0x1363>
#ifdef MILLIS
			PrintString("Barebones lTimerStart ");
			Printu32d(lTimerStart);
			PrintString("\n");
#endif
			DoBackgroundProcess();
    1ccc:	07970074 	undefined
			//Read input
			CheckVoltage();        // check our voltages...
    1cd0:	61420000 	cmpvs	r2, r0
			if (!g_fLowVoltageShutdown) {
    1cd4:	61726475 	cmnvs	r2, r5, ror r4
    1cd8:	445f6574 	ldrbmi	r6, [pc], #1396	; 1ce0 <__Stack_Size+0x18e0>
				CommanderInputController_ControlInput();
    1cdc:	a9004c58 	stmdbge	r0, {r3, r4, r6, sl, fp, lr}
			}
			WriteOutputs();        // Write Outputs
			//Single leg control
			SingleLegControl();
    1ce0:	42000007 	andmi	r0, r0, #7	; 0x7
			DoBackgroundProcess();
    1ce4:	72647561 	rsbvc	r7, r4, #406847488	; 0x18400000

			//Gait
			GaitSeq();
    1ce8:	5f657461 	svcpl	0x00657461

			DoBackgroundProcess();
    1cec:	0047495a 	subeq	r4, r7, sl, asr r9

			//Balance calculations
			TotalTransX = 0;     //reset values used for calculation of balance
    1cf0:	000007bb 	strheq	r0, [r0], -fp
    1cf4:	64756142 	ldrbtvs	r6, [r5], #-322
			TotalTransZ = 0;
    1cf8:	65746172 	ldrbvs	r6, [r4, #-370]!
			TotalTransY = 0;
    1cfc:	5543505f 	strbpl	r5, [r3, #-95]
    1d00:	00000000 	andeq	r0, r0, r0
			TotalXBal1 = 0;
    1d04:	0003fd00 	andeq	pc, r3, r0, lsl #26
			TotalYBal1 = 0;
    1d08:	09000200 	stmdbeq	r0, {r9}
    1d0c:	1f00005c 	svcne	0x0000005c
			TotalZBal1 = 0;
    1d10:	5400000b 	strpl	r0, [r0], #-11

			if (g_InControlState.BalanceMode) {
    1d14:	41000002 	tstmi	r0, r2
    1d18:	495f4344 	ldmdbmi	pc, {r2, r6, r8, r9, lr}^
    1d1c:	0074696e 	rsbseq	r6, r4, lr, ror #18

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1d20:	000002ac 	andeq	r0, r0, ip, lsr #5

					DoBackgroundProcess();
					BalCalcOneLeg(-LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d24:	5f434441 	svcpl	0x00434441
    1d28:	75727453 	ldrbvc	r7, [r2, #-1107]!
    1d2c:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs

					DoBackgroundProcess();
    1d30:	d1007469 	tstle	r0, r9, ror #8
					BalCalcOneLeg(-LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d34:	41000002 	tstmi	r0, r2
    1d38:	435f4344 	cmpmi	pc, #268435457	; 0x10000001
    1d3c:	0600646d 	streq	r6, [r0], -sp, ror #8
    1d40:	41000003 	tstmi	r0, r3
    1d44:	445f4344 	ldrbmi	r4, [pc], #836	; 1d4c <__Stack_Size+0x194c>
    1d48:	6d43414d 	stfvse	f4, [r3, #-308]
    1d4c:	033b0064 	teqeq	fp, #100	; 0x64
    1d50:	44410000 	strbmi	r0, [r1]
    1d54:	54495f43 	strbpl	r5, [r9], #-3907
    1d58:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1d5c:	8e006769 	cdphi	7, 0, cr6, cr0, cr9, {3}
    1d60:	41000003 	tstmi	r0, r3
    1d64:	525f4344 	subspl	r4, pc, #268435457	; 0x10000001
    1d68:	74657365 	strbtvc	r7, [r5], #-869
    1d6c:	696c6143 	stmdbvs	ip!, {r0, r1, r6, r8, sp, lr}^
			TotalYBal1 = 0;
			TotalZBal1 = 0;

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1d70:	74617262 	strbtvc	r7, [r1], #-610
    1d74:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1d78:	000003b5 	strheq	r0, [r0], -r5
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
    1d7c:	5f434441 	svcpl	0x00434441
    1d80:	52746547 	rsbspl	r6, r4, #297795584	; 0x11c00000
					DoBackgroundProcess();
					BalCalcOneLeg(LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d84:	74657365 	strbtvc	r7, [r5], #-869
    1d88:	696c6143 	stmdbvs	ip!, {r0, r1, r6, r8, sp, lr}^
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
					DoBackgroundProcess();
    1d8c:	74617262 	strbtvc	r7, [r1], #-610
					BalCalcOneLeg(LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d90:	536e6f69 	cmnpl	lr, #420	; 0x1a4
    1d94:	75746174 	ldrbvc	r6, [r4, #-372]!
    1d98:	03ee0073 	mvneq	r0, #115	; 0x73
    1d9c:	44410000 	strbmi	r0, [r1]
    1da0:	74535f43 	ldrbvc	r5, [r3], #-3907
    1da4:	43747261 	cmnmi	r4, #268435462	; 0x10000006
    1da8:	62696c61 	rsbvs	r6, r9, #24832	; 0x6100
    1dac:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1db0:	15006e6f 	strne	r6, [r0, #-3695]
    1db4:	41000004 	tstmi	r0, r4
    1db8:	475f4344 	ldrbmi	r4, [pc, -r4, asr #6]
    1dbc:	61437465 	cmpvs	r3, r5, ror #8
    1dc0:	7262696c 	rsbvc	r6, r2, #1769472	; 0x1b0000
    1dc4:	6f697461 	svcvs	0x00697461
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
    1dc8:	6174536e 	cmnvs	r4, lr, ror #6
    1dcc:	00737574 	rsbseq	r7, r3, r4, ror r5
    1dd0:	0000044e 	andeq	r0, r0, lr, asr #8
							LegPosZ[LegIndex] + GaitPosZ[LegIndex],
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}
				BalanceBody();
    1dd4:	5f434441 	svcpl	0x00434441
			}

			//Reset IKsolution indicators
			IKSolution = 0;
    1dd8:	74666f53 	strbtvc	r6, [r6], #-3923
    1ddc:	65726177 	ldrbvs	r6, [r2, #-375]!
			IKSolutionWarning = 0;
			IKSolutionError = 0;

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
    1de0:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
			}

			//Reset IKsolution indicators
			IKSolution = 0;
			IKSolutionWarning = 0;
			IKSolutionError = 0;
    1de4:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    1de8:	646d4376 	strbtvs	r4, [sp], #-886

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
				DoBackgroundProcess();
    1dec:	00048300 	andeq	r8, r4, r0, lsl #6
				BodyFK(
    1df0:	43444100 	movtmi	r4, #16640	; 0x4100
    1df4:	7465475f 	strbtvc	r4, [r5], #-1887
    1df8:	74666f53 	strbtvc	r6, [r6], #-3923
    1dfc:	65726177 	ldrbvs	r6, [r2, #-375]!
    1e00:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    1e04:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    1e08:	61745376 	cmnvs	r4, r6, ror r3
    1e0c:	00737574 	rsbseq	r7, r3, r4, ror r5
    1e10:	000004bc 	strheq	r0, [r0], -ip
    1e14:	5f434441 	svcpl	0x00434441
    1e18:	63736944 	cmnvs	r3, #1114112	; 0x110000
    1e1c:	65646f4d 	strbvs	r6, [r4, #-3917]!
    1e20:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1e24:	436c656e 	cmnmi	ip, #461373440	; 0x1b800000
    1e28:	746e756f 	strbtvc	r7, [lr], #-1391
    1e2c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1e30:	0d006769 	stceq	7, cr6, [r0, #-420]
    1e34:	41000005 	tstmi	r0, r5
    1e38:	445f4344 	ldrbmi	r4, [pc], #836	; 1e40 <__Stack_Size+0x1a40>
    1e3c:	4d637369 	stclmi	3, cr7, [r3, #-420]!
    1e40:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    1e44:	4200646d 	andmi	r6, r0, #1828716544	; 0x6d000000
    1e48:	41000005 	tstmi	r0, r5
    1e4c:	525f4344 	subspl	r4, pc, #268435457	; 0x10000001
						+ GaitPosZ[LegIndex] - TotalTransZ,
						LegPosY[LegIndex] + g_InControlState.BodyPos.y
						+ GaitPosY[LegIndex] - TotalTransY,
						GaitRotY[LegIndex], LegIndex);

				LegIK(
    1e50:	6c756765 	ldclvs	7, cr6, [r5], #-404
    1e54:	68437261 	stmdavs	r3, {r0, r5, r6, r9, ip, sp, lr}^
    1e58:	656e6e61 	strbvs	r6, [lr, #-3681]!
    1e5c:	6e6f436c 	cdpvs	3, 6, cr4, cr15, cr12, {3}
    1e60:	00676966 	rsbeq	r6, r7, r6, ror #18
    1e64:	000005b7 	strheq	r0, [r0], -r7
    1e68:	5f434441 	svcpl	0x00434441
    1e6c:	65747845 	ldrbvs	r7, [r4, #-2117]!
    1e70:	6c616e72 	stclvs	14, cr6, [r1], #-456
    1e74:	67697254 	undefined
    1e78:	766e6f43 	strbtvc	r6, [lr], -r3, asr #30
    1e7c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1e80:	000005ec 	andeq	r0, r0, ip, ror #11
    1e84:	5f434441 	svcpl	0x00434441
    1e88:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1e8c:	65766e6f 	ldrbvs	r6, [r6, #-3695]!
    1e90:	6f697372 	svcvs	0x00697372
    1e94:	6c61566e 	stclvs	6, cr5, [r1], #-440
    1e98:	19006575 	stmdbne	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    1e9c:	41000006 	tstmi	r0, r6
    1ea0:	475f4344 	ldrbmi	r4, [pc, -r4, asr #6]
    1ea4:	75447465 	strbvc	r7, [r4, #-1125]
    1ea8:	6f4d6c61 	svcvs	0x004d6c61
    1eac:	6f436564 	svcvs	0x00436564
    1eb0:	7265766e 	rsbvc	r7, r5, #115343360	; 0x6e00000
    1eb4:	6e6f6973 	mcrvs	9, 3, r6, cr15, cr3, {3}
    1eb8:	756c6156 	strbvc	r6, [ip, #-342]!
    1ebc:	06310065 	ldrteq	r0, [r1], -r5, rrx
    1ec0:	44410000 	strbmi	r0, [r1]
			IKSolutionWarning = 0;
			IKSolutionError = 0;

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
    1ec4:	75415f43 	strbvc	r5, [r1, #-3907]
    1ec8:	6e496f74 	mcrvs	15, 2, r6, cr9, cr4, {3}
    1ecc:	7463656a 	strbtvc	r6, [r3], #-1386
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Do IK for all Left legs
			for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) {
    1ed0:	6f436465 	svcvs	0x00436465
    1ed4:	6d43766e 	stclvs	6, cr7, [r3, #-440]
				DoBackgroundProcess();
    1ed8:	06660064 	strbteq	r0, [r6], -r4, rrx
				BodyFK(
    1edc:	44410000 	strbmi	r0, [r1]
    1ee0:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    1ee4:	7463656a 	strbtvc	r6, [r3], #-1386
    1ee8:	69446465 	stmdbvs	r4, {r0, r2, r5, r6, sl, sp, lr}^
    1eec:	6f4d6373 	svcvs	0x004d6373
    1ef0:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]
    1ef4:	069b0064 	ldreq	r0, [fp], r4, rrx
    1ef8:	44410000 	strbmi	r0, [r1]
    1efc:	78455f43 	stmdavc	r5, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1f00:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    1f04:	72546c61 	subsvc	r6, r4, #24832	; 0x6100
    1f08:	6e496769 	cdpvs	7, 4, cr6, cr9, cr9, {3}
    1f0c:	7463656a 	strbtvc	r6, [r3], #-1386
    1f10:	6f436465 	svcvs	0x00436465
    1f14:	6f43766e 	svcvs	0x0043766e
    1f18:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1f1c:	0006e200 	andeq	lr, r6, r0, lsl #4
    1f20:	43444100 	movtmi	r4, #16640	; 0x4100
    1f24:	7478455f 	ldrbtvc	r4, [r8], #-1375
    1f28:	616e7265 	cmnvs	lr, r5, ror #4
    1f2c:	6972546c 	ldmdbvs	r2!, {r2, r3, r5, r6, sl, ip, lr}^
    1f30:	6a6e4967 	bvs	1b944d4 <__Stack_Size+0x1b940d4>
    1f34:	65746365 	ldrbvs	r6, [r4, #-869]!
    1f38:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    1f3c:	646d4376 	strbtvs	r4, [sp], #-886
    1f40:	00071700 	andeq	r1, r7, r0, lsl #14
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z
						+ GaitPosZ[LegIndex] - TotalTransZ,
						LegPosY[LegIndex] + g_InControlState.BodyPos.y
						+ GaitPosY[LegIndex] - TotalTransY,
						GaitRotY[LegIndex], LegIndex);
				LegIK(
    1f44:	43444100 	movtmi	r4, #16640	; 0x4100
    1f48:	666f535f 	undefined
    1f4c:	72617774 	rsbvc	r7, r1, #30408704	; 0x1d00000
    1f50:	61745365 	cmnvs	r4, r5, ror #6
    1f54:	6e497472 	mcrvs	4, 2, r7, cr9, cr2, {3}
    1f58:	7463656a 	strbtvc	r6, [r3], #-1386
    1f5c:	6f436465 	svcvs	0x00436465
    1f60:	6d43766e 	stclvs	6, cr7, [r3, #-440]
    1f64:	074c0064 	strbeq	r0, [ip, -r4, rrx]
    1f68:	44410000 	strbmi	r0, [r1]
    1f6c:	65475f43 	strbvs	r5, [r7, #-3907]
    1f70:	666f5374 	undefined
    1f74:	72617774 	rsbvc	r7, r1, #30408704	; 0x1d00000
    1f78:	61745365 	cmnvs	r4, r5, ror #6
    1f7c:	6e497472 	mcrvs	4, 2, r7, cr9, cr2, {3}
    1f80:	7463656a 	strbtvc	r6, [r3], #-1386
    1f84:	6f436465 	svcvs	0x00436465
    1f88:	6d43766e 	stclvs	6, cr7, [r3, #-440]
    1f8c:	61745364 	cmnvs	r4, r4, ror #6
    1f90:	00737574 	rsbseq	r7, r3, r4, ror r5
    1f94:	00000785 	andeq	r0, r0, r5, lsl #15
    1f98:	5f434441 	svcpl	0x00434441
    1f9c:	656a6e49 	strbvs	r6, [sl, #-3657]!
    1fa0:	64657463 	strbtvs	r7, [r5], #-1123
    1fa4:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1fa8:	436c656e 	cmnmi	ip, #461373440	; 0x1b800000
    1fac:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1fb0:	08060067 	stmdaeq	r6, {r0, r1, r2, r5, r6}
    1fb4:	44410000 	strbmi	r0, [r1]
    1fb8:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    1fbc:	7463656a 	strbtvc	r6, [r3], #-1386
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Do IK for all Left legs
			for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) {
    1fc0:	65536465 	ldrbvs	r6, [r3, #-1125]
    1fc4:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    1fc8:	4c726563 	cfldr64mi	mvdx6, [r2], #-396
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Check mechanical limits
			CheckAngles();
    1fcc:	74676e65 	strbtvc	r6, [r7], #-3685

			//Drive Servos
			if (g_InControlState.fRobotOn) {
    1fd0:	6e6f4368 	cdpvs	3, 6, cr4, cr15, cr8, {3}
    1fd4:	00676966 	rsbeq	r6, r7, r6, ror #18
    1fd8:	00000857 	andeq	r0, r0, r7, asr r8
				if (g_InControlState.fRobotOn && !g_InControlState.fPrev_RobotOn) {
					// MSound(3, 60, 2000, 80, 2250, 100, 2500);
					Buzzed(30, 2000);
    1fdc:	5f434441 	svcpl	0x00434441
    1fe0:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    1fe4:	63656a6e 	cmnvs	r5, #450560	; 0x6e000
					Buzzed(80, 2250);
    1fe8:	4f646574 	svcmi	0x00646574
    1fec:	65736666 	ldrbvs	r6, [r3, #-1638]!
					Buzzed(100, 2500);
    1ff0:	089e0074 	ldmeq	lr, {r2, r4, r5, r6}
    1ff4:	44410000 	strbmi	r0, [r1]
    1ff8:	65475f43 	strbvs	r5, [r7, #-3907]

				}

				//Calculate Servo Move time
				if ((abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
    1ffc:	6a6e4974 	bvs	1b945d4 <__Stack_Size+0x1b941d4>
    2000:	65746365 	ldrbvs	r6, [r4, #-869]!
    2004:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    2008:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    200c:	566e6f69 	strbtpl	r6, [lr], -r9, ror #30
    2010:	65756c61 	ldrbvs	r6, [r5, #-3169]!
    2014:	0008db00 	andeq	sp, r8, r0, lsl #22
    2018:	43444100 	movtmi	r4, #16640	; 0x4100
    201c:	616e415f 	cmnvs	lr, pc, asr r1
    2020:	57676f6c 	strbpl	r6, [r7, -ip, ror #30]!
    2024:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
						|| (abs(g_InControlState.TravelLength.z) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.y*2) > cTravelDeadZone)) {
					ServoMoveTime = g_InControlState.gaitCur.NomGaitSpeed
    2028:	43676f64 	cmnmi	r7, #400	; 0x190
    202c:	2200646d 	andcs	r6, r0, #1828716544	; 0x6d000000
    2030:	41000009 	tstmi	r0, r9
    2034:	415f4344 	cmpmi	pc, r4, asr #6
    2038:	6f6c616e 	svcvs	0x006c616e
							+ (g_InControlState.InputTimeDelay * 2)
							+ g_InControlState.SpeedControl;

					//Add aditional delay when Balance mode is on
					if (g_InControlState.BalanceMode)
    203c:	74615767 	strbtvc	r5, [r1], #-1895

				//Calculate Servo Move time
				if ((abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.z) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.y*2) > cTravelDeadZone)) {
					ServoMoveTime = g_InControlState.gaitCur.NomGaitSpeed
    2040:	6f646863 	svcvs	0x00646863
							+ (g_InControlState.InputTimeDelay * 2)
							+ g_InControlState.SpeedControl;

					//Add aditional delay when Balance mode is on
					if (g_InControlState.BalanceMode)
						ServoMoveTime = ServoMoveTime + BALANCE_DELAY;
    2044:	72685467 	rsbvc	r5, r8, #1728053248	; 0x67000000
    2048:	6f687365 	svcvs	0x00687365
				} else
					//Movement speed excl. Walking
					ServoMoveTime = 200 + g_InControlState.SpeedControl;
    204c:	4373646c 	cmnmi	r3, #1811939328	; 0x6c000000
    2050:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2054:	09650067 	stmdbeq	r5!, {r0, r1, r2, r5, r6}^

				// note we broke up the servo driver into start/commit that way we can output all of the servo information
				// before we wait and only have the termination information to output after the wait.  That way we hopefully
				// be more accurate with our timings...
				DoBackgroundProcess();
    2058:	44410000 	strbmi	r0, [r1]
				StartUpdateServos();
    205c:	6e415f43 	cdpvs	15, 4, cr5, cr1, cr3, {2}

				// See if we need to sync our processor with the servo driver while walking to ensure the prev is completed
				//before sending the next one

				// Finding any incident of GaitPos/Rot <>0:
				for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    2060:	676f6c61 	strbvs	r6, [pc, -r1, ror #24]!
					if ((GaitPosX[LegIndex] > cGPlimit)
    2064:	63746157 	cmnvs	r4, #-1073741803	; 0xc0000015
    2068:	676f6468 	strbvs	r6, [pc, -r8, ror #8]!
    206c:	676e6953 	undefined
    2070:	6843656c 	stmdavs	r3, {r2, r3, r5, r6, r8, sl, sp, lr}^
    2074:	656e6e61 	strbvs	r6, [lr, #-3681]!
    2078:	6e6f436c 	cdpvs	3, 6, cr4, cr15, cr12, {3}
    207c:	00676966 	rsbeq	r6, r7, r6, ror #18
    2080:	000009ac 	andeq	r0, r0, ip, lsr #19
    2084:	5f434441 	svcpl	0x00434441
    2088:	706d6554 	rsbvc	r6, sp, r4, asr r5
    208c:	736e6553 	cmnvc	lr, #348127232	; 0x14c00000
    2090:	7256726f 	subsvc	r7, r6, #-268435450	; 0xf0000006
    2094:	6e696665 	cdpvs	6, 6, cr6, cr9, cr5, {3}
    2098:	646d4374 	strbtvs	r4, [sp], #-884
    209c:	0009d300 	andeq	sp, r9, r0, lsl #6
							|| (GaitPosZ[LegIndex] > cGPlimit)
							|| (GaitPosZ[LegIndex] < -cGPlimit)
							|| (GaitRotY[LegIndex] > cGPlimit)
							|| (GaitRotY[LegIndex] < -cGPlimit)) {

						bExtraCycle = g_InControlState.gaitCur.NrLiftedPos + 1;	//For making sure that we are using timed move until all legs are down
    20a0:	43444100 	movtmi	r4, #16640	; 0x4100
    20a4:	7465475f 	strbtvc	r4, [r5], #-1887
    20a8:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!

				// See if we need to sync our processor with the servo driver while walking to ensure the prev is completed
				//before sending the next one

				// Finding any incident of GaitPos/Rot <>0:
				for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    20ac:	74617453 	strbtvc	r7, [r1], #-1107
    20b0:	1a007375 	bne	1ee8c <__Stack_Size+0x1ea8c>

						bExtraCycle = g_InControlState.gaitCur.NrLiftedPos + 1;	//For making sure that we are using timed move until all legs are down
						break;
					}
				}
				if (bExtraCycle > 0) {
    20b4:	4100000a 	tstmi	r0, sl
					bExtraCycle--;
    20b8:	435f4344 	cmpmi	pc, #268435457	; 0x10000001
    20bc:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
					fWalking = !(bExtraCycle == 0);
    20c0:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    20c4:	000a5100 	andeq	r5, sl, r0, lsl #2

					//Get endtime and calculate wait time
					lTimeWaitEnd = lTimerStart + PrevServoMoveTime;
    20c8:	43444100 	movtmi	r4, #16640	; 0x4100
    20cc:	7465475f 	strbtvc	r4, [r5], #-1887
    20d0:	74535449 	ldrbvc	r5, [r3], #-1097
					PrintString("\n");
#endif
					//DebugWrite(A1, HIGH);
					do {
						// Wait the appropriate time, call any background process while waiting...
						DoBackgroundProcess();
    20d4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
					} while (getMillis() < lTimeWaitEnd);
    20d8:	000ab600 	andeq	fp, sl, r0, lsl #12
    20dc:	43444100 	movtmi	r4, #16640	; 0x4100
					PrintString("\n");
#endif

				}
				// Only do commit if we are actually doing something...
				CommitServoDriver(ServoMoveTime);
    20e0:	656c435f 	strbvs	r4, [ip, #-863]!
    20e4:	54497261 	strbpl	r7, [r9], #-609
    20e8:	646e6550 	strbtvs	r6, [lr], #-1360
			} else {
				//Turn the bot off - May need to add ajust here...
				if (g_InControlState.fPrev_RobotOn || (AllDown = 0)) {
    20ec:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
					PrintString("Barebones lTimeWaitEnd-Millis  ");
					Printu32d(getMillis);
					PrintString("\n");
#endif
				} else {
					FreeServos();
    20f0:	f9007469 	undefined instruction 0xf9007469
    20f4:	4100000a 	tstmi	r0, sl
				// Only do commit if we are actually doing something...
				CommitServoDriver(ServoMoveTime);
			} else {
				//Turn the bot off - May need to add ajust here...
				if (g_InControlState.fPrev_RobotOn || (AllDown = 0)) {
					ServoMoveTime = 600;
    20f8:	445f4344 	ldrbmi	r4, [pc], #836	; 2100 <__Stack_Size+0x1d00>
    20fc:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
					StartUpdateServos();
    2100:	00000074 	andeq	r0, r0, r4, ror r0
					CommitServoDriver(ServoMoveTime);
    2104:	026a0000 	rsbeq	r0, sl, #0	; 0x0
					//MSound(3, 100, 2500, 80, 2250, 60, 2000);
					Buzzed(100, 2500);
    2108:	00020000 	andeq	r0, r2, r0
    210c:	00006728 	andeq	r6, r0, r8, lsr #14
    2110:	0000073a 	andeq	r0, r0, sl, lsr r7
					Buzzed(80, 2250);
    2114:	00000237 	andeq	r0, r0, r7, lsr r2
    2118:	53414c46 	movtpl	r4, #7238	; 0x1c46
					Buzzed(60, 2000);
    211c:	65535f48 	ldrbvs	r5, [r3, #-3912]
    2120:	74614c74 	strbtvc	r4, [r1], #-3188
    2124:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^

					//lTimeWaitEnd = getMillis() + 600; // setup to process background stuff while we wait...
					lTimeWaitEnd = getMillis() + 600; // setup to process background stuff while we wait...
    2128:	00025e00 	andeq	r5, r2, r0, lsl #28
    212c:	414c4600 	cmpmi	ip, r0, lsl #12
					Printu32d(lTimeWaitEnd);
					PrintString("\n");
#endif
					do {
						// Wait the appropriate time, call any background process while waiting...
						DoBackgroundProcess();
    2130:	485f4853 	ldmdami	pc, {r0, r1, r4, r6, fp, lr}^
					} while (getMillis() < lTimeWaitEnd);
    2134:	43666c61 	cmnmi	r6, #24832	; 0x6100
    2138:	656c6379 	strbvs	r6, [ip, #-889]!
				} else {
					FreeServos();
				}

				// Allow the Servo driver to do stuff durint our idle time
				IdleTime();
    213c:	65636341 	strbvs	r6, [r3, #-833]!
				mDelay(20); // give a pause between times we call if nothing is happening
    2140:	6d437373 	stclvs	3, cr7, [r3, #-460]
			}
			PrevServoMoveTime = ServoMoveTime;
    2144:	02850064 	addeq	r0, r5, #100	; 0x64
    2148:	4c460000 	marmi	acc0, r0, r6

			//Store previous g_InControlState.fRobotOn State
			if (g_InControlState.fRobotOn)
    214c:	5f485341 	svcpl	0x00485341
    2150:	66657250 	undefined
				g_InControlState.fPrev_RobotOn = 1;
			else
				g_InControlState.fPrev_RobotOn = 0;
    2154:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    2158:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    215c:	6d437265 	sfmvs	f7, 2, [r3, #-404]
    2160:	02ac0064 	adceq	r0, ip, #100	; 0x64
    2164:	4c460000 	marmi	acc0, r0, r6
    2168:	5f485341 	svcpl	0x00485341
    216c:	6f6c6e55 	svcvs	0x006c6e55
    2170:	bf006b63 	svclt	0x00006b63
    2174:	46000002 	strmi	r0, [r0], -r2
    2178:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    217c:	636f4c5f 	cmnvs	pc, #24320	; 0x5f00
    2180:	02d2006b 	sbcseq	r0, r2, #107	; 0x6b
    2184:	4c460000 	marmi	acc0, r0, r6
    2188:	5f485341 	svcpl	0x00485341
    218c:	55746547 	ldrbpl	r6, [r4, #-1351]!
    2190:	4f726573 	svcmi	0x00726573
    2194:	6f697470 	svcvs	0x00697470
    2198:	7479426e 	ldrbtvc	r4, [r9], #-622
    219c:	02ea0065 	rsceq	r0, sl, #101	; 0x65
    21a0:	4c460000 	marmi	acc0, r0, r6
    21a4:	5f485341 	svcpl	0x00485341
    21a8:	57746547 	ldrbpl	r6, [r4, -r7, asr #10]!
    21ac:	65746972 	ldrbvs	r6, [r4, #-2418]!
    21b0:	746f7250 	strbtvc	r7, [pc], #592	; 21b8 <__Stack_Size+0x1db8>
    21b4:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    21b8:	704f6e6f 	subvc	r6, pc, pc, ror #28
    21bc:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    21c0:	65747942 	ldrbvs	r7, [r4, #-2370]!
    21c4:	00030200 	andeq	r0, r3, r0, lsl #4
    21c8:	414c4600 	cmpmi	ip, r0, lsl #12
    21cc:	475f4853 	undefined
    21d0:	65527465 	ldrbvs	r7, [r2, #-1125]
    21d4:	754f6461 	strbvc	r6, [pc, #-1121]	; 1d7b <__Stack_Size+0x197b>
    21d8:	6f725074 	svcvs	0x00725074
    21dc:	74636574 	strbtvc	r6, [r3], #-1396
    21e0:	536e6f69 	cmnpl	lr, #420	; 0x1a4
    21e4:	75746174 	ldrbvc	r6, [r4, #-372]!
    21e8:	032b0073 	teqeq	fp, #115	; 0x73
    21ec:	4c460000 	marmi	acc0, r0, r6
    21f0:	5f485341 	svcpl	0x00485341
    21f4:	50746547 	rsbspl	r6, r4, r7, asr #10
    21f8:	65666572 	strbvs	r6, [r6, #-1394]!
    21fc:	42686374 	rsbmi	r6, r8, #-805306367	; 0xd0000001
    2200:	65666675 	strbvs	r6, [r6, #-1653]!
    2204:	61745372 	cmnvs	r4, r2, ror r3
    2208:	00737574 	rsbseq	r7, r3, r4, ror r5
    220c:	00000354 	andeq	r0, r0, r4, asr r3
    2210:	53414c46 	movtpl	r4, #7238	; 0x1c46
    2214:	54495f48 	strbpl	r5, [r9], #-3912
    2218:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    221c:	89006769 	stmdbhi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    2220:	46000003 	strmi	r0, [r0], -r3
    2224:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    2228:	7465475f 	strbtvc	r4, [r5], #-1887
    222c:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    2230:	74617453 	strbtvc	r7, [r1], #-1107
    2234:	c6007375 	undefined
    2238:	46000003 	strmi	r0, [r0], -r3
    223c:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    2240:	656c435f 	strbvs	r4, [ip, #-863]!
    2244:	6c467261 	sfmvs	f7, 2, [r6], {97}
    2248:	ed006761 	stc	7, cr6, [r0, #-388]
    224c:	46000003 	strmi	r0, [r0], -r3
    2250:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    2254:	7465475f 	strbtvc	r4, [r5], #-1887
    2258:	74617453 	strbtvc	r7, [r1], #-1107
    225c:	0a007375 	beq	1f038 <__Stack_Size+0x1ec38>
    2260:	46000004 	strmi	r0, [r0], -r4
    2264:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    2268:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    226c:	726f4674 	rsbvc	r4, pc, #121634816	; 0x7400000
    2270:	7473614c 	ldrbtvc	r6, [r3], #-332
    2274:	7265704f 	rsbvc	r7, r5, #79	; 0x4f
    2278:	6f697461 	svcvs	0x00697461
    227c:	049d006e 	ldreq	r0, [sp], #110
    2280:	4c460000 	marmi	acc0, r0, r6
    2284:	5f485341 	svcpl	0x00485341
    2288:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    228c:	6974704f 	ldmdbvs	r4!, {r0, r1, r2, r3, r6, ip, sp, lr}^
    2290:	79426e6f 	stmdbvc	r2, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2294:	6f436574 	svcvs	0x00436574
    2298:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    229c:	0004fc00 	andeq	pc, r4, r0, lsl #24
    22a0:	414c4600 	cmpmi	ip, r0, lsl #12
    22a4:	525f4853 	subspl	r4, pc, #5439488	; 0x530000
    22a8:	4f646165 	svcmi	0x00646165
    22ac:	72507475 	subsvc	r7, r0, #1962934272	; 0x75000000
    22b0:	6365746f 	cmnvs	r5, #1862270976	; 0x6f000000
    22b4:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    22b8:	00053b00 	andeq	r3, r5, r0, lsl #22
    22bc:	414c4600 	cmpmi	ip, r0, lsl #12
    22c0:	455f4853 	ldrbmi	r4, [pc, #-2131]	; 1a75 <__Stack_Size+0x1675>
    22c4:	6c62616e 	stfvse	f6, [r2], #-440
    22c8:	69725765 	ldmdbvs	r2!, {r0, r2, r5, r6, r8, r9, sl, ip, lr}^
    22cc:	72506574 	subsvc	r6, r0, #486539264	; 0x1d000000
    22d0:	6365746f 	cmnvs	r5, #1862270976	; 0x6f000000
    22d4:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    22d8:	0005ba00 	andeq	fp, r5, r0, lsl #20
    22dc:	414c4600 	cmpmi	ip, r0, lsl #12
    22e0:	505f4853 	subspl	r4, pc, r3, asr r8
    22e4:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
    22e8:	704f6d61 	subvc	r6, pc, r1, ror #26
    22ec:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    22f0:	65747942 	ldrbvs	r7, [r4, #-2370]!
    22f4:	61746144 	cmnvs	r4, r4, asr #2
    22f8:	00060900 	andeq	r0, r6, r0, lsl #18
    22fc:	414c4600 	cmpmi	ip, r0, lsl #12
    2300:	505f4853 	subspl	r4, pc, r3, asr r8
    2304:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
    2308:	61486d61 	cmpvs	r8, r1, ror #26
    230c:	6f57666c 	svcvs	0x0057666c
    2310:	58006472 	stmdapl	r0, {r1, r4, r5, r6, sl, sp, lr}
    2314:	46000006 	strmi	r0, [r0], -r6
    2318:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    231c:	6f72505f 	svcvs	0x0072505f
    2320:	6d617267 	sfmvs	f7, 2, [r1, #-412]!
    2324:	64726f57 	ldrbtvs	r6, [r2], #-3927
    2328:	0006a700 	andeq	sl, r6, r0, lsl #14
    232c:	414c4600 	cmpmi	ip, r0, lsl #12
    2330:	455f4853 	ldrbmi	r4, [pc, #-2131]	; 1ae5 <__Stack_Size+0x16e5>
    2334:	65736172 	ldrbvs	r6, [r3, #-370]!
    2338:	6974704f 	ldmdbvs	r4!, {r0, r1, r2, r3, r6, ip, sp, lr}^
    233c:	79426e6f 	stmdbvc	r2, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2340:	00736574 	rsbseq	r6, r3, r4, ror r5
    2344:	000006d4 	ldrdeq	r0, [r0], -r4
    2348:	53414c46 	movtpl	r4, #7238	; 0x1c46
    234c:	72455f48 	subvc	r5, r5, #288	; 0x120
    2350:	41657361 	cmnmi	r5, r1, ror #6
    2354:	61506c6c 	cmpvs	r0, ip, ror #24
    2358:	00736567 	rsbseq	r6, r3, r7, ror #10
    235c:	00000701 	andeq	r0, r0, r1, lsl #14
    2360:	53414c46 	movtpl	r4, #7238	; 0x1c46
    2364:	72455f48 	subvc	r5, r5, #288	; 0x120
    2368:	50657361 	rsbpl	r7, r5, r1, ror #6
    236c:	00656761 	rsbeq	r6, r5, r1, ror #14
    2370:	00000000 	andeq	r0, r0, r0
    2374:	00000177 	andeq	r0, r0, r7, ror r1
    2378:	6e620002 	cdpvs	0, 6, cr0, cr2, cr2, {0}
    237c:	06480000 	strbeq	r0, [r8], -r0
    2380:	022b0000 	eoreq	r0, fp, #0	; 0x0
    2384:	50470000 	subpl	r0, r7, r0
    2388:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^
    238c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2390:	000002bb 	strheq	r0, [r0], -fp
    2394:	4f495047 	svcmi	0x00495047
    2398:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    239c:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    23a0:	0074696e 	rsbseq	r6, r4, lr, ror #18
    23a4:	000002e0 	andeq	r0, r0, r0, ror #5
    23a8:	4f495047 	svcmi	0x00495047
    23ac:	6165525f 	cmnvs	r5, pc, asr r2
    23b0:	706e4964 	rsbvc	r4, lr, r4, ror #18
    23b4:	61447475 	cmpvs	r4, r5, ror r4
    23b8:	69426174 	stmdbvs	r2, {r2, r4, r5, r6, r8, sp, lr}^
    23bc:	03230074 	teqeq	r3, #116	; 0x74
    23c0:	50470000 	subpl	r0, r7, r0
    23c4:	525f4f49 	subspl	r4, pc, #292	; 0x124
    23c8:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    23cc:	7475706e 	ldrbtvc	r7, [r5], #-110
    23d0:	61746144 	cmnvs	r4, r4, asr #2
    23d4:	00035000 	andeq	r5, r3, r0
    23d8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    23dc:	65525f4f 	ldrbvs	r5, [r2, #-3919]
    23e0:	754f6461 	strbvc	r6, [pc, #-1121]	; 1f87 <__Stack_Size+0x1b87>
    23e4:	74757074 	ldrbtvc	r7, [r5], #-116
    23e8:	61746144 	cmnvs	r4, r4, asr #2
    23ec:	00746942 	rsbseq	r6, r4, r2, asr #18
    23f0:	00000397 	muleq	r0, r7, r3
    23f4:	4f495047 	svcmi	0x00495047
    23f8:	6165525f 	cmnvs	r5, pc, asr r2
    23fc:	74754f64 	ldrbtvc	r4, [r5], #-3940
    2400:	44747570 	ldrbtmi	r7, [r4], #-1392
    2404:	00617461 	rsbeq	r7, r1, r1, ror #8
    2408:	000003c4 	andeq	r0, r0, r4, asr #7
    240c:	4f495047 	svcmi	0x00495047
    2410:	7465535f 	strbtvc	r5, [r5], #-863
    2414:	73746942 	cmnvc	r4, #1081344	; 0x108000
    2418:	0003f900 	andeq	pc, r3, r0, lsl #18
    241c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    2420:	65525f4f 	ldrbvs	r5, [r2, #-3919]
    2424:	42746573 	rsbsmi	r6, r4, #482344960	; 0x1cc00000
    2428:	00737469 	rsbseq	r7, r3, r9, ror #8
    242c:	0000042e 	andeq	r0, r0, lr, lsr #8
    2430:	4f495047 	svcmi	0x00495047
    2434:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    2438:	69426574 	stmdbvs	r2, {r2, r4, r5, r6, r8, sl, sp, lr}^
    243c:	04710074 	ldrbteq	r0, [r1], #-116
    2440:	50470000 	subpl	r0, r7, r0
    2444:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
    2448:	65746972 	ldrbvs	r6, [r4, #-2418]!
    244c:	0004a600 	andeq	sl, r4, r0, lsl #12
    2450:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    2454:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    2458:	636f4c6e 	cmnvs	pc, #28160	; 0x6e00
    245c:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
    2460:	00676966 	rsbeq	r6, r7, r6, ror #18
    2464:	000004e9 	andeq	r0, r0, r9, ror #9
    2468:	4f495047 	svcmi	0x00495047
    246c:	6576455f 	ldrbvs	r4, [r6, #-1375]!
    2470:	754f746e 	strbvc	r7, [pc, #-1134]	; 200a <__Stack_Size+0x1c0a>
    2474:	74757074 	ldrbtvc	r7, [r5], #-116
    2478:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    247c:	30006769 	andcc	r6, r0, r9, ror #14
    2480:	47000005 	strmi	r0, [r0, -r5]
    2484:	5f4f4950 	svcpl	0x004f4950
    2488:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    248c:	74754f74 	ldrbtvc	r4, [r5], #-3956
    2490:	43747570 	cmnmi	r4, #469762048	; 0x1c000000
    2494:	5700646d 	strpl	r6, [r0, -sp, ror #8]
    2498:	47000005 	strmi	r0, [r0, -r5]
    249c:	5f4f4950 	svcpl	0x004f4950
    24a0:	526e6950 	rsbpl	r6, lr, #1310720	; 0x140000
    24a4:	70616d65 	rsbvc	r6, r1, r5, ror #26
    24a8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    24ac:	c6006769 	strgt	r6, [r0], -r9, ror #14
    24b0:	47000005 	strmi	r0, [r0, -r5]
    24b4:	5f4f4950 	svcpl	0x004f4950
    24b8:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    24bc:	656e694c 	strbvs	r6, [lr, #-2380]!
    24c0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    24c4:	0d006769 	stceq	7, cr6, [r0, #-420]
    24c8:	47000006 	strmi	r0, [r0, -r6]
    24cc:	5f4f4950 	svcpl	0x004f4950
    24d0:	4f494641 	svcmi	0x00494641
    24d4:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    24d8:	22007469 	andcs	r7, r0, #1761607680	; 0x69000000
    24dc:	47000006 	strmi	r0, [r0, -r6]
    24e0:	5f4f4950 	svcpl	0x004f4950
    24e4:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    24e8:	00007469 	andeq	r7, r0, r9, ror #8
    24ec:	5c000000 	stcpl	0, cr0, [r0], {0}
    24f0:	02000003 	andeq	r0, r0, #3	; 0x3
    24f4:	0074aa00 	rsbseq	sl, r4, r0, lsl #20
    24f8:	0008e700 	andeq	lr, r8, r0, lsl #14
    24fc:	00031000 	andeq	r1, r3, r0
    2500:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    2504:	65445f43 	strbvs	r5, [r4, #-3907]
    2508:	74696e49 	strbtvc	r6, [r9], #-3657
    250c:	00033500 	andeq	r3, r3, r0, lsl #10
    2510:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    2514:	43535f43 	cmpmi	r3, #268	; 0x10c
    2518:	49654442 	stmdbmi	r5!, {r1, r6, sl, lr}^
    251c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2520:	00000358 	andeq	r0, r0, r8, asr r3
    2524:	4349564e 	movtmi	r5, #38478	; 0x964e
    2528:	6972505f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, lr}^
    252c:	7469726f 	strbtvc	r7, [r9], #-623
    2530:	6f724779 	svcvs	0x00724779
    2534:	6f437075 	svcvs	0x00437075
    2538:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    253c:	00037f00 	andeq	r7, r3, r0, lsl #30
    2540:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    2544:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    2548:	f1007469 	undefined instruction 0xf1007469
    254c:	4e000003 	cdpmi	0, 0, cr0, cr0, cr3, {0}
    2550:	5f434956 	svcpl	0x00434956
    2554:	75727453 	ldrbvc	r7, [r2, #-1107]!
    2558:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    255c:	16007469 	strne	r7, [r0], -r9, ror #8
    2560:	4e000004 	cdpmi	0, 0, cr0, cr0, cr4, {0}
    2564:	5f434956 	svcpl	0x00434956
    2568:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    256c:	65727275 	ldrbvs	r7, [r2, #-629]!
    2570:	6550746e 	ldrbvs	r7, [r0, #-1134]
    2574:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    2578:	51524967 	cmppl	r2, r7, ror #18
    257c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    2580:	006c656e 	rsbeq	r6, ip, lr, ror #10
    2584:	0000042e 	andeq	r0, r0, lr, lsr #8
    2588:	4349564e 	movtmi	r5, #38478	; 0x964e
    258c:	7465475f 	strbtvc	r4, [r5], #-1887
    2590:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    2594:	6e6e6168 	powvsez	f6, f6, #0.0
    2598:	65506c65 	ldrbvs	r6, [r0, #-3173]
    259c:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    25a0:	74694267 	strbtvc	r4, [r9], #-615
    25a4:	74617453 	strbtvc	r7, [r1], #-1107
    25a8:	75007375 	strvc	r7, [r0, #-885]
    25ac:	4e000004 	cdpmi	0, 0, cr0, cr0, cr4, {0}
    25b0:	5f434956 	svcpl	0x00434956
    25b4:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    25b8:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    25bc:	656e6e61 	strbvs	r6, [lr, #-3681]!
    25c0:	6e65506c 	cdpvs	0, 6, cr5, cr5, cr12, {3}
    25c4:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    25c8:	00746942 	rsbseq	r6, r4, r2, asr #18
    25cc:	0000049c 	muleq	r0, ip, r4
    25d0:	4349564e 	movtmi	r5, #38478	; 0x964e
    25d4:	656c435f 	strbvs	r4, [ip, #-863]!
    25d8:	52497261 	subpl	r7, r9, #268435462	; 0x10000006
    25dc:	61684351 	cmnvs	r8, r1, asr r3
    25e0:	6c656e6e 	stclvs	14, cr6, [r5], #-440
    25e4:	646e6550 	strbtvs	r6, [lr], #-1360
    25e8:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    25ec:	c5007469 	strgt	r7, [r0, #-1129]
    25f0:	4e000004 	cdpmi	0, 0, cr0, cr0, cr4, {0}
    25f4:	5f434956 	svcpl	0x00434956
    25f8:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    25fc:	65727275 	ldrbvs	r7, [r2, #-629]!
    2600:	6341746e 	movtvs	r7, #5230	; 0x146e
    2604:	65766974 	ldrbvs	r6, [r6, #-2420]!
    2608:	646e6148 	strbtvs	r6, [lr], #-328
    260c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    2610:	000004dd 	ldrdeq	r0, [r0], -sp
    2614:	4349564e 	movtmi	r5, #38478	; 0x964e
    2618:	7465475f 	strbtvc	r4, [r5], #-1887
    261c:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    2620:	6e6e6168 	powvsez	f6, f6, #0.0
    2624:	63416c65 	movtvs	r6, #7269	; 0x1c65
    2628:	65766974 	ldrbvs	r6, [r6, #-2420]!
    262c:	53746942 	cmnpl	r4, #1081344	; 0x108000
    2630:	75746174 	ldrbvc	r6, [r4, #-372]!
    2634:	05240073 	streq	r0, [r4, #-115]!
    2638:	564e0000 	strbpl	r0, [lr], -r0
    263c:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    2640:	50437465 	subpl	r7, r3, r5, ror #8
    2644:	00444955 	subeq	r4, r4, r5, asr r9
    2648:	0000053c 	andeq	r0, r0, ip, lsr r5
    264c:	4349564e 	movtmi	r5, #38478	; 0x964e
    2650:	7465535f 	strbtvc	r5, [r5], #-863
    2654:	74636556 	strbtvc	r6, [r3], #-1366
    2658:	6154726f 	cmpvs	r4, pc, ror #4
    265c:	00656c62 	rsbeq	r6, r5, r2, ror #24
    2660:	00000573 	andeq	r0, r0, r3, ror r5
    2664:	4349564e 	movtmi	r5, #38478	; 0x964e
    2668:	6e65475f 	mcrvs	7, 3, r4, cr5, cr15, {2}
    266c:	74617265 	strbtvc	r7, [r1], #-613
    2670:	73795365 	cmnvc	r9, #-1811939327	; 0x94000001
    2674:	526d6574 	rsbpl	r6, sp, #486539264	; 0x1d000000
    2678:	74657365 	strbtvc	r7, [r5], #-869
    267c:	00058700 	andeq	r8, r5, r0, lsl #14
    2680:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    2684:	65475f43 	strbvs	r5, [r7, #-3907]
    2688:	6172656e 	cmnvs	r2, lr, ror #10
    268c:	6f436574 	svcvs	0x00436574
    2690:	65526572 	ldrbvs	r6, [r2, #-1394]
    2694:	00746573 	rsbseq	r6, r4, r3, ror r5
    2698:	0000059b 	muleq	r0, fp, r5
    269c:	4349564e 	movtmi	r5, #38478	; 0x964e
    26a0:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    26a4:	4c6d6574 	cfstr64mi	mvdx6, [sp], #-464
    26a8:	6e6f4350 	mcrvs	3, 3, r4, cr15, cr0, {2}
    26ac:	00676966 	rsbeq	r6, r7, r6, ror #18
    26b0:	000005d0 	ldrdeq	r0, [r0], -r0
    26b4:	4349564e 	movtmi	r5, #38478	; 0x964e
    26b8:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    26bc:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    26c0:	6c646e61 	stclvs	14, cr6, [r4], #-388
    26c4:	6f437265 	svcvs	0x00437265
    26c8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    26cc:	00061500 	andeq	r1, r6, r0, lsl #10
    26d0:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    26d4:	79535f43 	ldmdbvc	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    26d8:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
    26dc:	646e6148 	strbtvs	r6, [lr], #-328
    26e0:	5072656c 	rsbspl	r6, r2, ip, ror #10
    26e4:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    26e8:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    26ec:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    26f0:	06980067 	ldreq	r0, [r8], r7, rrx
    26f4:	564e0000 	strbpl	r0, [lr], -r0
    26f8:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    26fc:	79537465 	ldmdbvc	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    2700:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
    2704:	646e6148 	strbtvs	r6, [lr], #-328
    2708:	5072656c 	rsbspl	r6, r2, ip, ror #10
    270c:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2710:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2714:	61745374 	cmnvs	r4, r4, ror r3
    2718:	00737574 	rsbseq	r7, r3, r4, ror r5
    271c:	000006ed 	andeq	r0, r0, sp, ror #13
    2720:	4349564e 	movtmi	r5, #38478	; 0x964e
    2724:	7465535f 	strbtvc	r5, [r5], #-863
    2728:	74737953 	ldrbtvc	r7, [r3], #-2387
    272c:	61486d65 	cmpvs	r8, r5, ror #26
    2730:	656c646e 	strbvs	r6, [ip, #-1134]!
    2734:	6e655072 	mcrvs	0, 3, r5, cr5, cr2, {3}
    2738:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    273c:	00746942 	rsbseq	r6, r4, r2, asr #18
    2740:	00000722 	andeq	r0, r0, r2, lsr #14
    2744:	4349564e 	movtmi	r5, #38478	; 0x964e
    2748:	656c435f 	strbvs	r4, [ip, #-863]!
    274c:	79537261 	ldmdbvc	r3, {r0, r5, r6, r9, ip, sp, lr}^
    2750:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
    2754:	646e6148 	strbtvs	r6, [lr], #-328
    2758:	5072656c 	rsbspl	r6, r2, ip, ror #10
    275c:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2760:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2764:	07570074 	undefined
    2768:	564e0000 	strbpl	r0, [lr], -r0
    276c:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    2770:	79537465 	ldmdbvc	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    2774:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
    2778:	646e6148 	strbtvs	r6, [lr], #-328
    277c:	4172656c 	cmnmi	r2, ip, ror #10
    2780:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    2784:	74694265 	strbtvc	r4, [r9], #-613
    2788:	74617453 	strbtvc	r7, [r1], #-1107
    278c:	aa007375 	bge	1f568 <__Stack_Size+0x1f168>
    2790:	4e000007 	cdpmi	0, 0, cr0, cr0, cr7, {0}
    2794:	5f434956 	svcpl	0x00434956
    2798:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    279c:	746c7561 	strbtvc	r7, [ip], #-1377
    27a0:	646e6148 	strbtvs	r6, [lr], #-328
    27a4:	5372656c 	cmnpl	r2, #452984832	; 0x1b000000
    27a8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    27ac:	07007365 	streq	r7, [r0, -r5, ror #6]
    27b0:	4e000008 	cdpmi	0, 0, cr0, cr0, cr8, {0}
    27b4:	5f434956 	svcpl	0x00434956
    27b8:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    27bc:	746c7561 	strbtvc	r7, [ip], #-1377
    27c0:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    27c4:	00737365 	rsbseq	r7, r3, r5, ror #6
    27c8:	00000850 	andeq	r0, r0, r0, asr r8
    27cc:	4349564e 	movtmi	r5, #38478	; 0x964e
    27d0:	7465475f 	strbtvc	r4, [r5], #-1887
    27d4:	45534142 	ldrbmi	r4, [r3, #-322]
    27d8:	00495250 	subeq	r5, r9, r0, asr r2
    27dc:	00000869 	andeq	r0, r0, r9, ror #16
    27e0:	4349564e 	movtmi	r5, #38478	; 0x964e
    27e4:	5341425f 	movtpl	r4, #4703	; 0x125f
    27e8:	49525045 	ldmdbmi	r2, {r0, r2, r6, ip, lr}^
    27ec:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
    27f0:	92004749 	andls	r4, r0, #19136512	; 0x1240000
    27f4:	4e000008 	cdpmi	0, 0, cr0, cr0, cr8, {0}
    27f8:	5f434956 	svcpl	0x00434956
    27fc:	45534552 	ldrbmi	r4, [r3, #-1362]
    2800:	55414654 	strbpl	r4, [r1, #-1620]
    2804:	414d544c 	cmpmi	sp, ip, asr #8
    2808:	a7004b53 	smlsdge	r0, r3, fp, r4
    280c:	4e000008 	cdpmi	0, 0, cr0, cr0, cr8, {0}
    2810:	5f434956 	svcpl	0x00434956
    2814:	46544553 	undefined
    2818:	544c5541 	strbpl	r5, [ip], #-1345
    281c:	4b53414d 	blmi	14d2d58 <__Stack_Size+0x14d2958>
    2820:	0008bc00 	andeq	fp, r8, r0, lsl #24
    2824:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    2828:	45525f43 	ldrbmi	r5, [r2, #-3907]
    282c:	50544553 	subspl	r4, r4, r3, asr r5
    2830:	414d4952 	cmpmi	sp, r2, asr r9
    2834:	d1004b53 	tstle	r0, r3, asr fp
    2838:	4e000008 	cdpmi	0, 0, cr0, cr0, cr8, {0}
    283c:	5f434956 	svcpl	0x00434956
    2840:	50544553 	subspl	r4, r4, r3, asr r5
    2844:	414d4952 	cmpmi	sp, r2, asr r9
    2848:	00004b53 	andeq	r4, r0, r3, asr fp
    284c:	c7000000 	strgt	r0, [r0, -r0]
    2850:	02000000 	andeq	r0, r0, #0	; 0x0
    2854:	007d9100 	rsbseq	r9, sp, r0, lsl #2
    2858:	00024700 	andeq	r4, r2, r0, lsl #14
    285c:	0000d300 	andeq	sp, r0, r0, lsl #6
    2860:	52575000 	subspl	r5, r7, #0	; 0x0
    2864:	6361425f 	cmnvs	r1, #-268435451	; 0xf0000005
    2868:	4170756b 	cmnmi	r0, fp, ror #10
    286c:	73656363 	cmnvc	r5, #-1946157055	; 0x8c000001
    2870:	646d4373 	strbtvs	r4, [sp], #-883
    2874:	0000f800 	andeq	pc, r0, r0, lsl #16
    2878:	52575000 	subspl	r5, r7, #0	; 0x0
    287c:	4456505f 	ldrbmi	r5, [r6], #-95
    2880:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2884:	0000011d 	andeq	r0, r0, sp, lsl r1
    2888:	5f525750 	svcpl	0x00525750
    288c:	4c445650 	mcrrmi	6, 5, r5, r4, cr0
    2890:	6c657665 	stclvs	6, cr7, [r5], #-404
    2894:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2898:	53006769 	movwpl	r6, #1897	; 0x769
    289c:	50000001 	andpl	r0, r0, r1
    28a0:	575f5257 	undefined
    28a4:	55656b61 	strbpl	r6, [r5, #-2913]!
    28a8:	6e695070 	mcrvs	0, 3, r5, cr9, cr0, {3}
    28ac:	00646d43 	rsbeq	r6, r4, r3, asr #26
    28b0:	00000178 	andeq	r0, r0, r8, ror r1
    28b4:	5f525750 	svcpl	0x00525750
    28b8:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    28bc:	5367616c 	cmnpl	r7, #27	; 0x1b
    28c0:	75746174 	ldrbvc	r6, [r4, #-372]!
    28c4:	01ae0073 	undefined instruction 0x01ae0073
    28c8:	57500000 	ldrbpl	r0, [r0, -r0]
    28cc:	6c435f52 	mcrrvs	15, 5, r5, r3, cr2
    28d0:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    28d4:	0067616c 	rsbeq	r6, r7, ip, ror #2
    28d8:	000001d5 	ldrdeq	r0, [r0], -r5
    28dc:	5f525750 	svcpl	0x00525750
    28e0:	65746e45 	ldrbvs	r6, [r4, #-3653]!
    28e4:	41545372 	cmpmi	r4, r2, ror r3
    28e8:	5942444e 	stmdbpl	r2, {r1, r2, r3, r6, sl, lr}^
    28ec:	65646f4d 	strbvs	r6, [r4, #-3917]!
    28f0:	0001ea00 	andeq	lr, r1, r0, lsl #20
    28f4:	52575000 	subspl	r5, r7, #0	; 0x0
    28f8:	746e455f 	strbtvc	r4, [lr], #-1375
    28fc:	54537265 	ldrbpl	r7, [r3], #-613
    2900:	6f4d504f 	svcvs	0x004d504f
    2904:	31006564 	tstcc	r0, r4, ror #10
    2908:	50000002 	andpl	r0, r0, r2
    290c:	445f5257 	ldrbmi	r5, [pc], #599	; 2914 <__Stack_Size+0x2514>
    2910:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    2914:	00000074 	andeq	r0, r0, r4, ror r0
    2918:	02c00000 	sbceq	r0, r0, #0	; 0x0
    291c:	00020000 	andeq	r0, r2, r0
    2920:	00007fd8 	ldrdeq	r7, [r0], -r8
    2924:	000008bd 	strheq	r0, [r0], -sp
    2928:	00000214 	andeq	r0, r0, r4, lsl r2
    292c:	5f434352 	svcpl	0x00434352
    2930:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    2934:	27007469 	strcs	r7, [r0, -r9, ror #8]
    2938:	52000002 	andpl	r0, r0, #2	; 0x2
    293c:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^
    2940:	6f434553 	svcvs	0x00434553
    2944:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2948:	00024c00 	andeq	r4, r2, r0, lsl #24
    294c:	43435200 	movtmi	r5, #12800	; 0x3200
    2950:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    2954:	726f4674 	rsbvc	r4, pc, #121634816	; 0x7400000
    2958:	53455348 	movtpl	r5, #21320	; 0x5348
    295c:	74726174 	ldrbtvc	r6, [r2], #-372
    2960:	f1007055 	undefined instruction 0xf1007055
    2964:	52000002 	andpl	r0, r0, #2	; 0x2
    2968:	415f4343 	cmpmi	pc, r3, asr #6
    296c:	73756a64 	cmnvc	r5, #409600	; 0x64000
    2970:	49534874 	ldmdbmi	r3, {r2, r4, r5, r6, fp, lr}^
    2974:	696c6143 	stmdbvs	ip!, {r0, r1, r6, r8, sp, lr}^
    2978:	74617262 	strbtvc	r7, [r1], #-610
    297c:	566e6f69 	strbtpl	r6, [lr], -r9, ror #30
    2980:	65756c61 	ldrbvs	r6, [r5, #-3169]!
    2984:	00032300 	andeq	r2, r3, r0, lsl #6
    2988:	43435200 	movtmi	r5, #12800	; 0x3200
    298c:	4953485f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, fp, lr}^
    2990:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2994:	0000034a 	andeq	r0, r0, sl, asr #6
    2998:	5f434352 	svcpl	0x00434352
    299c:	434c4c50 	movtmi	r4, #52304	; 0xcc50
    29a0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    29a4:	03910067 	orrseq	r0, r1, #103	; 0x67
    29a8:	43520000 	cmpmi	r2, #0	; 0x0
    29ac:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    29b0:	646d434c 	strbtvs	r4, [sp], #-844
    29b4:	0003b800 	andeq	fp, r3, r0, lsl #16
    29b8:	43435200 	movtmi	r5, #12800	; 0x3200
    29bc:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
    29c0:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    29c4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    29c8:	03f10067 	mvnseq	r0, #103	; 0x67
    29cc:	43520000 	cmpmi	r2, #0	; 0x0
    29d0:	65475f43 	strbvs	r5, [r7, #-3907]
    29d4:	53595374 	cmppl	r9, #-805306367	; 0xd0000001
    29d8:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    29dc:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    29e0:	04090065 	streq	r0, [r9], #-101
    29e4:	43520000 	cmpmi	r2, #0	; 0x0
    29e8:	43485f43 	movtmi	r5, #36675	; 0x8f43
    29ec:	6f434b4c 	svcvs	0x00434b4c
    29f0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    29f4:	00044200 	andeq	r4, r4, r0, lsl #4
    29f8:	43435200 	movtmi	r5, #12800	; 0x3200
    29fc:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
    2a00:	6f43314b 	svcvs	0x0043314b
    2a04:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2a08:	00047b00 	andeq	r7, r4, r0, lsl #22
    2a0c:	43435200 	movtmi	r5, #12800	; 0x3200
    2a10:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
    2a14:	6f43324b 	svcvs	0x0043324b
    2a18:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2a1c:	0004b000 	andeq	fp, r4, r0
    2a20:	43435200 	movtmi	r5, #12800	; 0x3200
    2a24:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    2a28:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2a2c:	04e50067 	strbteq	r0, [r5], #103
    2a30:	43520000 	cmpmi	r2, #0	; 0x0
    2a34:	53555f43 	cmppl	r5, #268	; 0x10c
    2a38:	4b4c4342 	blmi	1313748 <__Stack_Size+0x1313348>
    2a3c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2a40:	0c006769 	stceq	7, cr6, [r0], {105}
    2a44:	52000005 	andpl	r0, r0, #5	; 0x5
    2a48:	415f4343 	cmpmi	pc, r3, asr #6
    2a4c:	4c434344 	mcrrmi	3, 4, r4, r3, cr4
    2a50:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    2a54:	00676966 	rsbeq	r6, r7, r6, ror #18
    2a58:	00000545 	andeq	r0, r0, r5, asr #10
    2a5c:	5f434352 	svcpl	0x00434352
    2a60:	4345534c 	movtmi	r5, #21324	; 0x534c
    2a64:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2a68:	056c0067 	strbeq	r0, [ip, #-103]!
    2a6c:	43520000 	cmpmi	r2, #0	; 0x0
    2a70:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    2a74:	646d4349 	strbtvs	r4, [sp], #-841
    2a78:	00059300 	andeq	r9, r5, r0, lsl #6
    2a7c:	43435200 	movtmi	r5, #12800	; 0x3200
    2a80:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    2a84:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    2a88:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2a8c:	05bc0067 	ldreq	r0, [ip, #103]!
    2a90:	43520000 	cmpmi	r2, #0	; 0x0
    2a94:	54525f43 	ldrbpl	r5, [r2], #-3907
    2a98:	4b4c4343 	blmi	13137ac <__Stack_Size+0x13133ac>
    2a9c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2aa0:	000005e3 	andeq	r0, r0, r3, ror #11
    2aa4:	5f434352 	svcpl	0x00434352
    2aa8:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    2aac:	6b636f6c 	blvs	18de864 <__Stack_Size+0x18de464>
    2ab0:	65724673 	ldrbvs	r4, [r2, #-1651]!
    2ab4:	064a0071 	undefined
    2ab8:	43520000 	cmpmi	r2, #0	; 0x0
    2abc:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    2ac0:	72655042 	rsbvc	r5, r5, #66	; 0x42
    2ac4:	43687069 	cmnmi	r8, #105	; 0x69
    2ac8:	6b636f6c 	blvs	18de880 <__Stack_Size+0x18de480>
    2acc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2ad0:	0000067f 	andeq	r0, r0, pc, ror r6
    2ad4:	5f434352 	svcpl	0x00434352
    2ad8:	32425041 	subcc	r5, r2, #65	; 0x41
    2adc:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2ae0:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    2ae4:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    2ae8:	b400646d 	strlt	r6, [r0], #-1133
    2aec:	52000006 	andpl	r0, r0, #6	; 0x6
    2af0:	415f4343 	cmpmi	pc, r3, asr #6
    2af4:	50314250 	eorspl	r4, r1, r0, asr r2
    2af8:	70697265 	rsbvc	r7, r9, r5, ror #4
    2afc:	6f6c4368 	svcvs	0x006c4368
    2b00:	6d436b63 	vstrvs	d22, [r3, #-396]
    2b04:	06e90064 	strbteq	r0, [r9], r4, rrx
    2b08:	43520000 	cmpmi	r2, #0	; 0x0
    2b0c:	50415f43 	subpl	r5, r1, r3, asr #30
    2b10:	65503242 	ldrbvs	r3, [r0, #-578]
    2b14:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2b18:	65736552 	ldrbvs	r6, [r3, #-1362]!
    2b1c:	646d4374 	strbtvs	r4, [sp], #-884
    2b20:	00071e00 	andeq	r1, r7, r0, lsl #28
    2b24:	43435200 	movtmi	r5, #12800	; 0x3200
    2b28:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    2b2c:	72655031 	rsbvc	r5, r5, #49	; 0x31
    2b30:	52687069 	rsbpl	r7, r8, #105	; 0x69
    2b34:	74657365 	strbtvc	r7, [r5], #-869
    2b38:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2b3c:	00000753 	andeq	r0, r0, r3, asr r7
    2b40:	5f434352 	svcpl	0x00434352
    2b44:	6b636142 	blvs	18db054 <__Stack_Size+0x18dac54>
    2b48:	65527075 	ldrbvs	r7, [r2, #-117]
    2b4c:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    2b50:	7a00646d 	bvc	1bd0c <__Stack_Size+0x1b90c>
    2b54:	52000007 	andpl	r0, r0, #7	; 0x7
    2b58:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    2b5c:	6b636f6c 	blvs	18de914 <__Stack_Size+0x18de514>
    2b60:	75636553 	strbvc	r6, [r3, #-1363]!
    2b64:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2b68:	74737953 	ldrbtvc	r7, [r3], #-2387
    2b6c:	6d436d65 	stclvs	13, cr6, [r3, #-404]
    2b70:	07a10064 	streq	r0, [r1, r4, rrx]!
    2b74:	43520000 	cmpmi	r2, #0	; 0x0
    2b78:	434d5f43 	movtmi	r5, #57155	; 0xdf43
    2b7c:	6e6f434f 	cdpvs	3, 6, cr4, cr15, cr15, {2}
    2b80:	00676966 	rsbeq	r6, r7, r6, ror #18
    2b84:	000007c8 	andeq	r0, r0, r8, asr #15
    2b88:	5f434352 	svcpl	0x00434352
    2b8c:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    2b90:	5367616c 	cmnpl	r7, #27	; 0x1b
    2b94:	75746174 	ldrbvc	r6, [r4, #-372]!
    2b98:	07fc0073 	undefined
    2b9c:	43520000 	cmpmi	r2, #0	; 0x0
    2ba0:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    2ba4:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    2ba8:	0067616c 	rsbeq	r6, r7, ip, ror #2
    2bac:	00000810 	andeq	r0, r0, r0, lsl r8
    2bb0:	5f434352 	svcpl	0x00434352
    2bb4:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    2bb8:	61745354 	cmnvs	r4, r4, asr r3
    2bbc:	00737574 	rsbseq	r7, r3, r4, ror r5
    2bc0:	00000849 	andeq	r0, r0, r9, asr #16
    2bc4:	5f434352 	svcpl	0x00434352
    2bc8:	61656c43 	cmnvs	r5, r3, asr #24
    2bcc:	50544972 	subspl	r4, r4, r2, ror r9
    2bd0:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2bd4:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2bd8:	00000074 	andeq	r0, r0, r4, ror r0
    2bdc:	009d0000 	addseq	r0, sp, r0
    2be0:	00020000 	andeq	r0, r2, r0
    2be4:	00008895 	muleq	r0, r5, r8
    2be8:	000001ef 	andeq	r0, r0, pc, ror #3
    2bec:	000000f7 	strdeq	r0, [r0], -r7
    2bf0:	54737953 	ldrbtpl	r7, [r3], #-2387
    2bf4:	5f6b6369 	svcpl	0x006b6369
    2bf8:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    2bfc:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2c00:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    2c04:	00676966 	rsbeq	r6, r7, r6, ror #18
    2c08:	0000011c 	andeq	r0, r0, ip, lsl r1
    2c0c:	54737953 	ldrbtpl	r7, [r3], #-2387
    2c10:	5f6b6369 	svcpl	0x006b6369
    2c14:	52746553 	rsbspl	r6, r4, #348127232	; 0x14c00000
    2c18:	616f6c65 	cmnvs	pc, r5, ror #24
    2c1c:	01410064 	cmpeq	r1, r4, rrx
    2c20:	79530000 	ldmdbvc	r3, {}^
    2c24:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    2c28:	6f435f6b 	svcvs	0x00435f6b
    2c2c:	65746e75 	ldrbvs	r6, [r4, #-3701]!
    2c30:	646d4372 	strbtvs	r4, [sp], #-882
    2c34:	00016600 	andeq	r6, r1, r0, lsl #12
    2c38:	73795300 	cmnvc	r9, #0	; 0x0
    2c3c:	6b636954 	blvs	18dd194 <__Stack_Size+0x18dcd94>
    2c40:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    2c44:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2c48:	018b0067 	orreq	r0, fp, r7, rrx
    2c4c:	79530000 	ldmdbvc	r3, {}^
    2c50:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    2c54:	65475f6b 	strbvs	r5, [r7, #-3947]
    2c58:	756f4374 	strbvc	r4, [pc, #-884]!	; 28ec <__Stack_Size+0x24ec>
    2c5c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2c60:	0001a200 	andeq	sl, r1, r0, lsl #4
    2c64:	73795300 	cmnvc	r9, #0	; 0x0
    2c68:	6b636954 	blvs	18dd1c0 <__Stack_Size+0x18dcdc0>
    2c6c:	7465475f 	strbtvc	r4, [r5], #-1887
    2c70:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    2c74:	74617453 	strbtvc	r7, [r1], #-1107
    2c78:	00007375 	andeq	r7, r0, r5, ror r3
    2c7c:	5b000000 	blpl	2c84 <__Stack_Size+0x2884>
    2c80:	02000002 	andeq	r0, r0, #2	; 0x2
    2c84:	008a8400 	addeq	r8, sl, r0, lsl #8
    2c88:	00095000 	andeq	r5, r9, r0
    2c8c:	0002b600 	andeq	fp, r2, r0, lsl #12
    2c90:	41535500 	cmpmi	r3, r0, lsl #10
    2c94:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    2c98:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    2c9c:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    2ca0:	02e10074 	rsceq	r0, r1, #116	; 0x74
    2ca4:	53550000 	cmppl	r5, #0	; 0x0
    2ca8:	5f545241 	svcpl	0x00545241
    2cac:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2cb0:	696e496b 	stmdbvs	lr!, {r0, r1, r3, r5, r6, r8, fp, lr}^
    2cb4:	03300074 	teqeq	r0, #116	; 0x74
    2cb8:	53550000 	cmppl	r5, #0	; 0x0
    2cbc:	5f545241 	svcpl	0x00545241
    2cc0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2cc4:	7274536b 	rsbsvc	r5, r4, #-1409286143	; 0xac000001
    2cc8:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    2ccc:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2cd0:	00000357 	andeq	r0, r0, r7, asr r3
    2cd4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2cd8:	6d435f54 	stclvs	15, cr5, [r3, #-336]
    2cdc:	038c0064 	orreq	r0, ip, #100	; 0x64
    2ce0:	53550000 	cmppl	r5, #0	; 0x0
    2ce4:	5f545241 	svcpl	0x00545241
    2ce8:	6f435449 	svcvs	0x00435449
    2cec:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2cf0:	00040d00 	andeq	r0, r4, r0, lsl #26
    2cf4:	41535500 	cmpmi	r3, r0, lsl #10
    2cf8:	445f5452 	ldrbmi	r5, [pc], #1106	; 2d00 <__Stack_Size+0x2900>
    2cfc:	6d43414d 	stfvse	f4, [r3, #-308]
    2d00:	04500064 	ldrbeq	r0, [r0], #-100
    2d04:	53550000 	cmppl	r5, #0	; 0x0
    2d08:	5f545241 	svcpl	0x00545241
    2d0c:	41746553 	cmnmi	r4, r3, asr r5
    2d10:	65726464 	ldrbvs	r6, [r2, #-1124]!
    2d14:	85007373 	strhi	r7, [r0, #-883]
    2d18:	55000004 	strpl	r0, [r0, #-4]
    2d1c:	54524153 	ldrbpl	r4, [r2], #-339
    2d20:	6b61575f 	blvs	1858aa4 <__Stack_Size+0x18586a4>
    2d24:	43705565 	cmnmi	r0, #423624704	; 0x19400000
    2d28:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2d2c:	04bc0067 	ldrteq	r0, [ip], #103
    2d30:	53550000 	cmppl	r5, #0	; 0x0
    2d34:	5f545241 	svcpl	0x00545241
    2d38:	65636552 	strbvs	r6, [r3, #-1362]!
    2d3c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2d40:	656b6157 	strbvs	r6, [fp, #-343]!
    2d44:	6d437055 	stclvs	0, cr7, [r3, #-340]
    2d48:	04f10064 	ldrbteq	r0, [r1], #100
    2d4c:	53550000 	cmppl	r5, #0	; 0x0
    2d50:	5f545241 	svcpl	0x00545241
    2d54:	424e494c 	submi	r4, lr, #1245184	; 0x130000
    2d58:	6b616572 	blvs	185c328 <__Stack_Size+0x185bf28>
    2d5c:	65746544 	ldrbvs	r6, [r4, #-1348]!
    2d60:	654c7463 	strbvs	r7, [ip, #-1123]
    2d64:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2d68:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2d6c:	28006769 	stmdacs	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    2d70:	55000005 	strpl	r0, [r0, #-5]
    2d74:	54524153 	ldrbpl	r4, [r2], #-339
    2d78:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    2d7c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2d80:	0000055d 	andeq	r0, r0, sp, asr r5
    2d84:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2d88:	65535f54 	ldrbvs	r5, [r3, #-3924]
    2d8c:	6144646e 	cmpvs	r4, lr, ror #8
    2d90:	94006174 	strls	r6, [r0], #-372
    2d94:	55000005 	strpl	r0, [r0, #-5]
    2d98:	54524153 	ldrbpl	r4, [r2], #-339
    2d9c:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    2da0:	65766965 	ldrbvs	r6, [r6, #-2405]!
    2da4:	61746144 	cmnvs	r4, r4, asr #2
    2da8:	0005c100 	andeq	ip, r5, r0, lsl #2
    2dac:	41535500 	cmpmi	r3, r0, lsl #10
    2db0:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    2db4:	42646e65 	rsbmi	r6, r4, #1616	; 0x650
    2db8:	6b616572 	blvs	185c388 <__Stack_Size+0x185bf88>
    2dbc:	0005e800 	andeq	lr, r5, r0, lsl #16
    2dc0:	41535500 	cmpmi	r3, r0, lsl #10
    2dc4:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    2dc8:	75477465 	strbvc	r7, [r7, #-1125]
    2dcc:	54647261 	strbtpl	r7, [r4], #-609
    2dd0:	00656d69 	rsbeq	r6, r5, r9, ror #26
    2dd4:	0000061d 	andeq	r0, r0, sp, lsl r6
    2dd8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2ddc:	65535f54 	ldrbvs	r5, [r3, #-3924]
    2de0:	65725074 	ldrbvs	r5, [r2, #-116]!
    2de4:	6c616373 	stclvs	3, cr6, [r1], #-460
    2de8:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
    2dec:	55000006 	strpl	r0, [r0, #-6]
    2df0:	54524153 	ldrbpl	r4, [r2], #-339
    2df4:	616d535f 	cmnvs	sp, pc, asr r3
    2df8:	61437472 	cmpvs	r3, r2, ror r4
    2dfc:	6d436472 	cfstrdvs	mvd6, [r3, #-456]
    2e00:	06870064 	streq	r0, [r7], r4, rrx
    2e04:	53550000 	cmppl	r5, #0	; 0x0
    2e08:	5f545241 	svcpl	0x00545241
    2e0c:	72616d53 	rsbvc	r6, r1, #5312	; 0x14c0
    2e10:	72614374 	rsbvc	r4, r1, #-805306367	; 0xd0000001
    2e14:	43414e64 	movtmi	r4, #7780	; 0x1e64
    2e18:	646d434b 	strbtvs	r4, [sp], #-843
    2e1c:	0006bc00 	andeq	fp, r6, r0, lsl #24
    2e20:	41535500 	cmpmi	r3, r0, lsl #10
    2e24:	485f5452 	ldmdami	pc, {r1, r4, r6, sl, ip, lr}^
    2e28:	44666c61 	strbtmi	r6, [r6], #-3169
    2e2c:	656c7075 	strbvs	r7, [ip, #-117]!
    2e30:	646d4378 	strbtvs	r4, [sp], #-888
    2e34:	0006f100 	andeq	pc, r6, r0, lsl #2
    2e38:	41535500 	cmpmi	r3, r0, lsl #10
    2e3c:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^
    2e40:	43414472 	movtmi	r4, #5234	; 0x1472
    2e44:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2e48:	07280067 	streq	r0, [r8, -r7, rrx]!
    2e4c:	53550000 	cmppl	r5, #0	; 0x0
    2e50:	5f545241 	svcpl	0x00545241
    2e54:	41447249 	cmpmi	r4, r9, asr #4
    2e58:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2e5c:	0000075d 	andeq	r0, r0, sp, asr r7
    2e60:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2e64:	65475f54 	strbvs	r5, [r7, #-3924]
    2e68:	616c4674 	smcvs	50276
    2e6c:	61745367 	cmnvs	r4, r7, ror #6
    2e70:	00737574 	rsbseq	r7, r3, r4, ror r5
    2e74:	000007a4 	andeq	r0, r0, r4, lsr #15
    2e78:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2e7c:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    2e80:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    2e84:	0067616c 	rsbeq	r6, r7, ip, ror #2
    2e88:	000007db 	ldrdeq	r0, [r0], -fp
    2e8c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2e90:	65475f54 	strbvs	r5, [r7, #-3924]
    2e94:	53544974 	cmppl	r4, #1900544	; 0x1d0000
    2e98:	75746174 	ldrbvc	r6, [r4, #-372]!
    2e9c:	08520073 	ldmdaeq	r2, {r0, r1, r4, r5, r6}^
    2ea0:	53550000 	cmppl	r5, #0	; 0x0
    2ea4:	5f545241 	svcpl	0x00545241
    2ea8:	61656c43 	cmnvs	r5, r3, asr #24
    2eac:	50544972 	subspl	r4, r4, r2, ror r9
    2eb0:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2eb4:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2eb8:	08a10074 	stmiaeq	r1!, {r2, r4, r5, r6}
    2ebc:	53550000 	cmppl	r5, #0	; 0x0
    2ec0:	5f545241 	svcpl	0x00545241
    2ec4:	74696e49 	strbtvc	r6, [r9], #-3657
    2ec8:	00092a00 	andeq	r2, r9, r0, lsl #20
    2ecc:	41535500 	cmpmi	r3, r0, lsl #10
    2ed0:	445f5452 	ldrbmi	r5, [pc], #1106	; 2ed8 <__Stack_Size+0x2ad8>
    2ed4:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    2ed8:	00000074 	andeq	r0, r0, r4, ror r0
    2edc:	00310000 	eorseq	r0, r1, r0
    2ee0:	00020000 	andeq	r0, r2, r0
    2ee4:	00009466 	andeq	r9, r0, r6, ror #8
    2ee8:	00000106 	andeq	r0, r0, r6, lsl #2
    2eec:	00000052 	andeq	r0, r0, r2, asr r0
    2ef0:	65736552 	ldrbvs	r6, [r3, #-1362]!
    2ef4:	61485f74 	cmpvs	r8, r4, ror pc
    2ef8:	656c646e 	strbvs	r6, [ip, #-1134]!
    2efc:	00ee0072 	rsceq	r0, lr, r2, ror r0
    2f00:	5f670000 	svcpl	0x00670000
    2f04:	566e6670 	undefined
    2f08:	6f746365 	svcvs	0x00746365
    2f0c:	00007372 	andeq	r7, r0, r2, ror r3
    2f10:	19000000 	stmdbne	r0, {}
    2f14:	02000000 	andeq	r0, r0, #0	; 0x0
    2f18:	00956c00 	addseq	r6, r5, r0, lsl #24
    2f1c:	0000c500 	andeq	ip, r0, r0, lsl #10
    2f20:	00009c00 	andeq	r9, r0, r0, lsl #24
    2f24:	65746100 	ldrbvs	r6, [r4, #-256]!
    2f28:	00746978 	rsbseq	r6, r4, r8, ror r9
    2f2c:	00000000 	andeq	r0, r0, r0
    2f30:	00000017 	andeq	r0, r0, r7, lsl r0
    2f34:	96310002 	ldrtls	r0, [r1], -r2
    2f38:	093a0000 	ldmdbeq	sl!, {}
    2f3c:	08ff0000 	ldmeq	pc!, {}^
    2f40:	78650000 	stmdavc	r5!, {}^
    2f44:	00007469 	andeq	r7, r0, r9, ror #8
    2f48:	35000000 	strcc	r0, [r0]
    2f4c:	02000000 	andeq	r0, r0, #0	; 0x0
    2f50:	009f6b00 	addseq	r6, pc, r0, lsl #22
    2f54:	00093a00 	andeq	r3, r9, r0, lsl #20
    2f58:	00091000 	andeq	r1, r9, r0
    2f5c:	6d695f00 	stclvs	15, cr5, [r9]
    2f60:	65727570 	ldrbvs	r7, [r2, #-1392]!
    2f64:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
    2f68:	00092200 	andeq	r2, r9, r0, lsl #4
    2f6c:	6c675f00 	stclvs	15, cr5, [r7]
    2f70:	6c61626f 	sfmvs	f6, 2, [r1], #-444
    2f74:	706d695f 	rsbvc	r6, sp, pc, asr r9
    2f78:	5f657275 	svcpl	0x00657275
    2f7c:	00727470 	rsbseq	r7, r2, r0, ror r4
    2f80:	00000000 	andeq	r0, r0, r0
    2f84:	0000003a 	andeq	r0, r0, sl, lsr r0
    2f88:	a8a50002 	stmiage	r5!, {r1}
    2f8c:	01460000 	cmpeq	r6, r0
    2f90:	00800000 	addeq	r0, r0, r0
    2f94:	5f5f0000 	svcpl	0x005f0000
    2f98:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    2f9c:	6e69665f 	mcrvs	6, 3, r6, cr9, cr15, {2}
    2fa0:	72615f69 	rsbvc	r5, r1, #420	; 0x1a4
    2fa4:	00796172 	rsbseq	r6, r9, r2, ror r1
    2fa8:	000000b2 	strheq	r0, [r0], -r2
    2fac:	696c5f5f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    2fb0:	695f6362 	ldmdbvs	pc, {r1, r5, r6, r8, r9, sp, lr}^
    2fb4:	5f74696e 	svcpl	0x0074696e
    2fb8:	61727261 	cmnvs	r2, r1, ror #4
    2fbc:	00000079 	andeq	r0, r0, r9, ror r0
    2fc0:	00190000 	andseq	r0, r9, r0
    2fc4:	00020000 	andeq	r0, r2, r0
    2fc8:	0000a9eb 	andeq	sl, r0, fp, ror #19
    2fcc:	0000010e 	andeq	r0, r0, lr, lsl #2
    2fd0:	0000003e 	andeq	r0, r0, lr, lsr r0
    2fd4:	636d656d 	cmnvs	sp, #457179136	; 0x1b400000
    2fd8:	00007970 	andeq	r7, r0, r0, ror r9
    2fdc:	19000000 	stmdbne	r0, {}
    2fe0:	02000000 	andeq	r0, r0, #0	; 0x0
    2fe4:	00aaf900 	adceq	pc, sl, r0, lsl #18
    2fe8:	00011300 	andeq	r1, r1, r0, lsl #6
    2fec:	00008800 	andeq	r8, r0, r0, lsl #16
    2ff0:	6d656d00 	stclvs	13, cr6, [r5]
    2ff4:	00746573 	rsbseq	r6, r4, r3, ror r5
    2ff8:	00000000 	andeq	r0, r0, r0
    2ffc:	00000026 	andeq	r0, r0, r6, lsr #32
    3000:	ac0c0002 	stcge	0, cr0, [ip], {2}
    3004:	09a50000 	stmibeq	r5!, {}
    3008:	091e0000 	ldmdbeq	lr, {}
    300c:	5f5f0000 	svcpl	0x005f0000
    3010:	69676572 	stmdbvs	r7!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    3014:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    3018:	6978655f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
    301c:	6f727074 	svcvs	0x00727074
    3020:	00000063 	andeq	r0, r0, r3, rrx
    3024:	00230000 	eoreq	r0, r3, r0
    3028:	00020000 	andeq	r0, r2, r0
    302c:	0000b5b1 	strheq	fp, [r0], -r1
    3030:	000009b2 	strheq	r0, [r0], -r2
    3034:	000008ff 	strdeq	r0, [r0], -pc
    3038:	61635f5f 	cmnvs	r3, pc, asr pc
    303c:	655f6c6c 	ldrbvs	r6, [pc, #-3180]	; 23d8 <__Stack_Size+0x1fd8>
    3040:	70746978 	rsbsvc	r6, r4, r8, ror r9
    3044:	73636f72 	cmnvc	r3, #456	; 0x1c8
    3048:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000049 	andeq	r0, r0, r9, asr #32
       4:	00000002 	andeq	r0, r0, r2
       8:	01040000 	tsteq	r4, r0
	...
      14:	69747263 	ldmdbvs	r4!, {r0, r1, r5, r6, r9, ip, sp, lr}^
      18:	6d73612e 	ldfvse	f6, [r3, #-184]!
      1c:	5c3a6300 	ldcpl	3, cr6, [sl]
      20:	616e6977 	smcvs	59031
      24:	5c736d72 	ldclpl	13, cr6, [r3], #-456
      28:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
      2c:	63675c64 	cmnvs	r7, #25600	; 0x6400
      30:	75622d63 	strbvc	r2, [r2, #-3427]!
      34:	5c646c69 	stclpl	12, cr6, [r4], #-420
      38:	00636367 	rsbeq	r6, r3, r7, ror #6
      3c:	20554e47 	subscs	r4, r5, r7, asr #28
      40:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
      44:	2e38312e 	rsfcsep	f3, f0, #0.5
      48:	01003035 	tsteq	r0, r5, lsr r0
      4c:	00008080 	andeq	r8, r0, r0, lsl #1
      50:	12000200 	andne	r0, r0, #0	; 0x0
      54:	04000000 	streq	r0, [r0]
      58:	00004901 	andeq	r4, r0, r1, lsl #18
	...
      64:	2f2e2e00 	svccs	0x002e2e00
      68:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
      6c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
      70:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
      74:	332e342d 	teqcc	lr, #754974720	; 0x2d000000
      78:	6c2f302e 	stcvs	0, cr3, [pc], #-184
      7c:	6c676269 	sfmvs	f6, 2, [r7], #-420
      80:	2f73736f 	svccs	0x0073736f
      84:	2f6d7261 	svccs	0x006d7261
      88:	30747263 	rsbscc	r7, r4, r3, ror #4
      8c:	6300532e 	movwvs	r5, #814	; 0x32e
      90:	69775c3a 	ldmdbvs	r7!, {r1, r3, r4, r5, sl, fp, ip, lr}^
      94:	6d72616e 	ldfvse	f6, [r2, #-440]!
      98:	75625c73 	strbvc	r5, [r2, #-3187]!
      9c:	5c646c69 	stclpl	12, cr6, [r4], #-420
      a0:	2d636367 	stclcs	3, cr6, [r3, #-412]!
      a4:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
      a8:	72615c64 	rsbvc	r5, r1, #25600	; 0x6400
      ac:	61652d6d 	cmnvs	r5, sp, ror #26
      b0:	6c5c6962 	mrrcvs	9, 6, r6, ip, cr2
      b4:	6c676269 	sfmvs	f6, 2, [r7], #-420
      b8:	5c73736f 	ldclpl	3, cr7, [r3], #-444
      bc:	006d7261 	rsbeq	r7, sp, r1, ror #4
      c0:	20554e47 	subscs	r4, r5, r7, asr #28
      c4:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
      c8:	2e38312e 	rsfcsep	f3, f0, #0.5
      cc:	01003035 	tsteq	r0, r5, lsr r0
      d0:	0004d580 	andeq	sp, r4, r0, lsl #11
      d4:	26000200 	strcs	r0, [r0], -r0, lsl #4
      d8:	04000000 	streq	r0, [r0]
      dc:	0001c601 	andeq	ip, r1, r1, lsl #12
      e0:	00470100 	subeq	r0, r7, r0, lsl #2
      e4:	039d0000 	orrseq	r0, sp, #0	; 0x0
      e8:	31340000 	teqcc	r4, r0
      ec:	343c0800 	ldrtcc	r0, [ip], #-2048
      f0:	00e30800 	rsceq	r0, r3, r0, lsl #16
      f4:	04020000 	streq	r0, [r2]
      f8:	00417805 	subeq	r7, r1, r5, lsl #16
      fc:	05020200 	streq	r0, [r2, #-512]
     100:	00000495 	muleq	r0, r5, r4
     104:	69060102 	stmdbvs	r6, {r1, r8}
     108:	03000004 	movweq	r0, #4	; 0x4
/* set up for an interpolation from pose to nextpose over TIME
 milliseconds by setting servo speeds. */
void BioloidControllerEx_interpolateSetup(int time) {
	int i;
	int frames = (time/frameLength) + 1;
	nextframe_ = getMillis() + frameLength;
     10c:	00323375 	eorseq	r3, r2, r5, ror r3
	PrintString("BioloidEX BioloidControllerEx_interpolateSetup nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// set speed each servo...
	for (i = 0; i < poseSize; i++) {
     110:	00452702 	subeq	r2, r5, r2, lsl #14
/* set up for an interpolation from pose to nextpose over TIME
 milliseconds by setting servo speeds. */
void BioloidControllerEx_interpolateSetup(int time) {
	int i;
	int frames = (time/frameLength) + 1;
	nextframe_ = getMillis() + frameLength;
     114:	04020000 	streq	r0, [r2]
     118:	0041f207 	subeq	pc, r1, r7, lsl #4
	PrintString("BioloidEX BioloidControllerEx_interpolateSetup nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// set speed each servo...
	for (i = 0; i < poseSize; i++) {
     11c:	31750300 	cmncc	r5, r0, lsl #6
     120:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
     124:	00000057 	andeq	r0, r0, r7, asr r0
		if (nextpose_[i] > pose_[i]) {
     128:	22070202 	andcs	r0, r7, #536870912	; 0x20000000
     12c:	03000002 	movweq	r0, #2	; 0x2
			speed_[i] = (nextpose_[i] - pose_[i]) / frames + 1;
     130:	02003875 	andeq	r3, r0, #7667712	; 0x750000
		} else {
			speed_[i] = (pose_[i] - nextpose_[i]) / frames + 1;
     134:	00006829 	andeq	r6, r0, r9, lsr #16
     138:	08010200 	stmdaeq	r1, {r9}
     13c:	00000467 	andeq	r0, r0, r7, ror #8
	PrintString("BioloidEX BioloidControllerEx_interpolateSetup nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// set speed each servo...
	for (i = 0; i < poseSize; i++) {
     140:	001f7f04 	andseq	r7, pc, r4, lsl #30
     144:	682a0200 	stmdavs	sl!, {r9}
		PrintString(" - ");
		TxD_Dec_U16(speed_[i]);
		PrintString("\n");
#endif
	}
	interpolating = 1;
     148:	05000000 	streq	r0, [r0]
     14c:	f4060704 	vst1.8	{d0}, [r6], r4
}
     150:	01000004 	tsteq	r0, r4
     154:	00b40d04 	adcseq	r0, r4, r4, lsl #26
     158:	71070000 	tstvc	r7, r0
     15c:	00000003 	andeq	r0, r0, r3
     160:	00148607 	andseq	r8, r4, r7, lsl #12
     164:	63070100 	movwvs	r0, #28928	; 0x7100
     168:	02000000 	andeq	r0, r0, #0	; 0x0
	PrintString("\n");
#endif
}

/* new-style setup */
void Bioloid_Setup(int servo_cnt) {
     16c:	00047507 	andeq	r7, r4, r7, lsl #10
     170:	54080300 	strpl	r0, [r8], #-768
	/**id_ = (unsigned char *) malloc(servo_cnt * sizeof(unsigned char));
	 pose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
     174:	04004458 	streq	r4, [r0], #-1112
     178:	44585208 	ldrbmi	r5, [r8], #-520
	for (i = 0; i < poseSize; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
     17c:	41080500 	tstmi	r8, r0, lsl #10
     180:	06005855 	undefined
		nextpose_[i] = 512;
     184:	03020900 	movweq	r0, #10496	; 0x2900
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
	for (i = 0; i < poseSize; i++) {
		id_[i] = i + 1;
     188:	000112cf 	andeq	r1, r1, pc, asr #5
		pose_[i] = 512;
     18c:	06800700 	streq	r0, [r0], r0, lsl #14
		nextpose_[i] = 512;
     190:	07010000 	streq	r0, [r1, -r0]
	 pose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
	for (i = 0; i < poseSize; i++) {
     194:	00000487 	andeq	r0, r0, r7, lsl #9
     198:	03100702 	tsteq	r0, #524288	; 0x80000
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
	}
	interpolating = 0;
     19c:	07040000 	streq	r0, [r4, -r0]
     1a0:	0000068e 	andeq	r0, r0, lr, lsl #13
	nextframe_ = getMillis();
     1a4:	04cb0708 	strbeq	r0, [fp], #1800
     1a8:	07100000 	ldreq	r0, [r0, -r0]
#ifdef MILLIS
	PrintString("BioloidEX nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
}
     1ac:	00000144 	andeq	r0, r0, r4, asr #2
     1b0:	058c0720 	streq	r0, [ip, #1824]
     1b4:	00c00000 	sbceq	r0, r0, r0
     1b8:	00020307 	andeq	r0, r2, r7, lsl #6
     1bc:	07018000 	streq	r8, [r1, -r0]
     1c0:	000006c1 	andeq	r0, r0, r1, asr #13
     1c4:	59070280 	stmdbpl	r7, {r7, r9}
transition_t * sequence;                    // sequence we are running
int transitions;                    // how many transitions we have left to load


//  initializes serial1 transmit at baud, 8-N-1
void BioloidControllerEx() {
     1c8:	80000004 	andhi	r0, r0, r4
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
     1cc:	00260704 	eoreq	r0, r6, r4, lsl #14
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
     1d0:	08800000 	stmeq	r0, {}
transition_t * sequence;                    // sequence we are running
int transitions;                    // how many transitions we have left to load


//  initializes serial1 transmit at baud, 8-N-1
void BioloidControllerEx() {
     1d4:	0002a507 	andeq	sl, r2, r7, lsl #10
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
     1d8:	07108000 	ldreq	r8, [r0, -r0]
	 pose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
     1dc:	00000135 	andeq	r0, r0, r5, lsr r1
     1e0:	0a002080 	beq	83e8 <__Stack_Size+0x7fe8>
		pose_[i] = 512;
		nextpose_[i] = 512;
     1e4:	016e0301 	cmneq	lr, r1, lsl #6
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
     1e8:	00000248 	andeq	r0, r0, r8, asr #4
		nextpose_[i] = 512;
     1ec:	00029207 	andeq	r9, r2, r7, lsl #4
	/**id_ = (unsigned char *) malloc(AX12_MAX_SERVOS * sizeof(unsigned char));
	 pose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
     1f0:	7f070000 	svcvc	0x00070000
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
	}
	frameLength = BIOLOID_FRAME_LENGTH;
     1f4:	01000002 	tsteq	r0, r2
     1f8:	0005bc07 	andeq	fp, r5, r7, lsl #24
	interpolating = 0;
     1fc:	70070200 	andvc	r0, r7, r0, lsl #4
	nextframe_ = getMillis();
     200:	03000002 	movweq	r0, #2	; 0x2
     204:	0000b807 	andeq	fp, r0, r7, lsl #16
#ifdef MILLIS
	PrintString("BioloidEX nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
}
     208:	c6070400 	strgt	r0, [r7], -r0, lsl #8
     20c:	05000000 	streq	r0, [r0]
     210:	00059707 	andeq	r9, r5, r7, lsl #14
     214:	77070600 	strvc	r0, [r7, -r0, lsl #12]
     218:	07000005 	streq	r0, [r0, -r5]
     21c:	0001a007 	andeq	sl, r1, r7
     220:	8a070800 	bhi	1c2228 <__Stack_Size+0x1c1e28>
#endif
		mDelay(25);
	}
}
/* write pose out to servos using sync write. */
void BioloidControllerEx_writePose() {
     224:	09000001 	stmdbeq	r0, {r0}
     228:	00063407 	andeq	r3, r6, r7, lsl #8
	int temp;
	dxl_set_txpacket_id (BROADCAST_ID);
     22c:	9f070a00 	svcls	0x00070a00
	dxl_set_txpacket_instruction (INST_SYNC_WRITE);
     230:	0b000004 	bleq	248 <_Minimum_Stack_Size+0x148>
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
     234:	00044007 	andeq	r4, r4, r7
     238:	03070c00 	movweq	r0, #31744	; 0x7c00
	dxl_set_txpacket_parameter(1, 2);
     23c:	0d000001 	stceq	0, cr0, [r0, #-4]
     240:	0002ea07 	andeq	lr, r2, r7, lsl #20
     244:	d9070e00 	stmdble	r7, {r9, sl, fp}
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
     248:	0f000002 	svceq	0x00000002
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
     24c:	00008c07 	andeq	r8, r0, r7, lsl #24
     250:	bd071000 	stclt	0, cr1, [r7]
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
     254:	11000004 	tstne	r0, r4
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
     258:	00060207 	andeq	r0, r6, r7, lsl #4
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
     25c:	34071200 	strcc	r1, [r7], #-512
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
     260:	13000000 	movwne	r0, #0	; 0x0
     264:	00051107 	andeq	r1, r5, r7, lsl #2
     268:	fa071400 	blx	1c5270 <__Stack_Size+0x1c4e70>
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
     26c:	15000004 	strne	r0, [r0, #-4]
     270:	00032307 	andeq	r2, r3, r7, lsl #6
     274:	fb071600 	blx	1c5a7e <__Stack_Size+0x1c567e>
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
     278:	17000002 	strne	r0, [r0, -r2]
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
     27c:	00042e07 	andeq	r2, r4, r7, lsl #28
	dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction (INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
     280:	6b071800 	blvs	1c6288 <__Stack_Size+0x1c5e88>
     284:	19000000 	stmdbne	r0, {}
     288:	00007307 	andeq	r7, r0, r7, lsl #6
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
	}
	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
     28c:	bf071a00 	svclt	0x00071a00
     290:	1b000002 	blne	2a0 <_Minimum_Stack_Size+0x1a0>
     294:	00066007 	andeq	r6, r6, r7
	dxl_txrx_packet();
     298:	d2071c00 	andle	r1, r7, #0	; 0x0
	u16 CommStatus = dxl_get_result();
     29c:	1d000001 	stcne	0, cr0, [r0, #-4]
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
     2a0:	00064507 	andeq	r4, r6, r7, lsl #10
		PrintErrorCode();
     2a4:	20071e00 	andcs	r1, r7, r0, lsl #28
	else
		PrintCommStatus(CommStatus);
     2a8:	1f000006 	svcne	0x00000006
#endif
}
     2ac:	0005ef07 	andeq	lr, r5, r7, lsl #30
     2b0:	d1072000 	tstle	r7, r0
     2b4:	21000005 	tstcs	r0, r5
     2b8:	00040007 	andeq	r0, r4, r7
	}
	interpolating = 1;
}
/* interpolate our pose, this should be called at about 30Hz. */
#define WAIT_SLOP_FACTOR 10
int BioloidControllerEx_interpolateStep(bool fWait) {
     2bc:	e3072200 	movw	r2, #29184	; 0x7200
     2c0:	23000003 	movwcs	r0, #3	; 0x3

	if (interpolating == 0)
     2c4:	00035a07 	andeq	r5, r3, r7, lsl #20
		return 0;
	int i;
	int complete = poseSize;
     2c8:	43072400 	movwmi	r2, #29696	; 0x7400
	if (!fWait) {
     2cc:	25000003 	strcs	r0, [r0, #-3]
		if (getMillis() < (nextframe_ - WAIT_SLOP_FACTOR)) {
     2d0:	00055b07 	andeq	r5, r5, r7, lsl #22
     2d4:	47072600 	strmi	r2, [r7, -r0, lsl #12]
     2d8:	27000005 	strcs	r0, [r0, -r5]
			return (getMillis() - nextframe_); // We still have some time to do something...
     2dc:	0006cf07 	andeq	ip, r6, r7, lsl #30
     2e0:	ae072800 	cdpge	8, 0, cr2, cr7, cr0, {0}
     2e4:	29000006 	stmdbcs	r0, {r1, r2}
#ifdef MILLIS
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	while (getMillis() < nextframe_);
     2e8:	00001207 	andeq	r1, r0, r7, lsl #4
     2ec:	1d072a00 	fstsne	s4, [r7]
     2f0:	2b000001 	blcs	2fc <_Minimum_Stack_Size+0x1fc>
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
     2f4:	00041307 	andeq	r1, r4, r7, lsl #6
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     2f8:	f4072c00 	undefined instruction 0xf4072c00
     2fc:	2d000001 	stccs	0, cr0, [r0, #-4]
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
     300:	00033807 	andeq	r3, r3, r7, lsl #16
     304:	eb072e00 	bl	1cbb0c <__Stack_Size+0x1cb70c>
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     308:	2f000001 	svccs	0x00000001
		int diff = nextpose_[i] - pose_[i];
     30c:	00016507 	andeq	r6, r1, r7, lsl #10
     310:	59073000 	stmdbpl	r7, {ip, sp}
     314:	31000001 	tstcc	r0, r1
     318:	07040200 	streq	r0, [r4, -r0, lsl #4]
     31c:	000041f7 	strdeq	r4, [r0], -r7
		if (diff == 0) {
     320:	00017106 	andeq	r7, r1, r6, lsl #2
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
     324:	20050100 	andcs	r0, r5, r0, lsl #2
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
     328:	00000286 	andeq	r0, r0, r6, lsl #5
		int diff = nextpose_[i] - pose_[i];
		if (diff == 0) {
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
     32c:	0005b407 	andeq	fp, r5, r7, lsl #8
					pose_[i] = nextpose_[i];
     330:	a6070000 	strge	r0, [r7], -r0
					complete--;
     334:	01000006 	tsteq	r0, r6
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
     338:	0000e407 	andeq	lr, r0, r7, lsl #8
     33c:	82070200 	andhi	r0, r7, #0	; 0x0
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
     340:	03000001 	movweq	r0, #1	; 0x1
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
     344:	00021107 	andeq	r1, r2, r7, lsl #2
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
     348:	1b070400 	blne	1c1350 <__Stack_Size+0x1c0f50>
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     34c:	05000003 	streq	r0, [r0, #-3]
     350:	00024a07 	andeq	r4, r2, r7, lsl #20
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif

	}
	if (complete <= 0)
     354:	06000600 	streq	r0, [r0], -r0, lsl #12
		interpolating = 0;
     358:	00000219 	andeq	r0, r0, r9, lsl r2
	BioloidControllerEx_writePose();
     35c:	b60d0601 	strlt	r0, [sp], -r1, lsl #12
     360:	08000002 	stmdaeq	r0, {r1}
	return 0;
}
     364:	00005055 	andeq	r5, r0, r5, asr r0
     368:	00061007 	andeq	r1, r6, r7
     36c:	00070100 	andeq	r0, r7, r0, lsl #2
     370:	02000000 	andeq	r0, r0, #0	; 0x0
     374:	00052807 	andeq	r2, r5, r7, lsl #16
     378:	86070300 	strhi	r0, [r7], -r0, lsl #6
     37c:	04000003 	streq	r0, [r0], #-3
     380:	43494d08 	movtmi	r4, #40200	; 0x9d08
	for (i = 0; i < poseSize; i++)
		//nextpose_[i] = pgm_read_word_near(addr+1+i) << BIOLOID_SHIFT;
		nextpose_[i] = pgm_read_word_near(addr + 1 + i);
}
/* read in current servo positions to the pose. */
void BioloidControllerEx_readPose() {
     384:	06000500 	streq	r0, [r0], -r0, lsl #10
     388:	000000aa 	andeq	r0, r0, sl, lsr #1
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
		//pose_[i] = dxl_read_word(id_[i],AXM_PRESENT_POSITION_L)<<BIOLOID_SHIFT;
		pose_[i] = dxl_read_word(id_[i], AXM_PRESENT_POSITION_L);
     38c:	4b0d0702 	blmi	341f9c <__Stack_Size+0x341b9c>
     390:	07000003 	streq	r0, [r0, -r3]
     394:	0000037f 	andeq	r0, r0, pc, ror r3
     398:	0701eef2 	undefined
     39c:	000004ec 	andeq	r0, r0, ip, ror #9
		PrintChar(id_[i]);
		PrintString(" - ");
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
     3a0:	0701e1be 	undefined

#ifdef DEBUG_BIOLOIDEX
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
     3a4:	0000056f 	andeq	r0, r0, pc, ror #10
     3a8:	0701e1be 	undefined
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
	}
}
     3ac:	00000243 	andeq	r0, r0, r3, asr #4
     3b0:	0701d4ea 	streq	sp, [r1, -sl, ror #9]
     3b4:	000005ac 	andeq	r0, r0, ip, lsr #11
     3b8:	0701c8f1 	undefined
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitPosY[GaitCurrentLegNr] = -3 * g_InControlState.LegLiftHeight
				/ (3 + g_InControlState.gaitCur.HalfLiftHeight); // Easier to shift between div factor: /1 (3/3), /2 (3/6) and 3/4
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y
     3bc:	00000678 	andeq	r0, r0, r8, ror r6
				/ g_InControlState.gaitCur.LiftDivFactor;
	}

	//Optional Half heigth Rear 5 LiftedPos (5 lifted positions)
	else if (((g_InControlState.gaitCur.NrLiftedPos == 5 && (LegStep == -2)))
     3c0:	0701c8f1 	undefined
     3c4:	0000038c 	andeq	r0, r0, ip, lsl #7
     3c8:	0701bdce 	streq	fp, [r1, -lr, asr #27]
     3cc:	0000024f 	andeq	r0, r0, pc, asr #4
     3d0:	0701b2fc 	undefined
     3d4:	000000dc 	ldrdeq	r0, [r0], -ip
     3d8:	0701a8f6 	undefined
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = -g_InControlState.TravelLength.x / 2;
     3dc:	00000151 	andeq	r0, r0, r1, asr r1
     3e0:	0701a8f6 	undefined
     3e4:	00000256 	andeq	r0, r0, r6, asr r2
     3e8:	07019fb8 	undefined
     3ec:	0000017a 	andeq	r0, r0, sl, ror r1
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
     3f0:	070196bf 	undefined
     3f4:	0000025d 	andeq	r0, r0, sp, asr r2
     3f8:	070196bf 	undefined
     3fc:	00000235 	andeq	r0, r0, r5, lsr r2
     400:	07018e86 	streq	r8, [r1, -r6, lsl #29]
		GaitPosZ[GaitCurrentLegNr] = -g_InControlState.TravelLength.z / 2;
     404:	00000277 	andeq	r0, r0, r7, ror r2
     408:	07018689 	streq	r8, [r1, -r9, lsl #13]
     40c:	00000377 	andeq	r0, r0, r7, ror r3
     410:	07018689 	streq	r8, [r1, -r9, lsl #13]
		GaitRotY[GaitCurrentLegNr] = -g_InControlState.TravelLength.y / 2;
     414:	0000023c 	andeq	r0, r0, ip, lsr r2
     418:	0000fec6 	andeq	pc, r0, r6, asr #29
     41c:	134c010b 	movtne	r0, #49419	; 0xc10b
     420:	16010000 	strne	r0, [r1], -r0
	}

	//Optional Half heigth Front 5 LiftedPos (5 lifted positions)
	else if ((g_InControlState.gaitCur.NrLiftedPos == 5)
     424:	0003e101 	andeq	lr, r3, r1, lsl #2
     428:	00313400 	eorseq	r3, r1, r0, lsl #8
     42c:	00343c08 	eorseq	r3, r4, r8, lsl #24
     430:	00000008 	andeq	r0, r0, r8
     434:	0003e100 	andeq	lr, r3, r0, lsl #2
     438:	04df0c00 	ldrbeq	r0, [pc], #3072	; 440 <__Stack_Size+0x40>
			&& (LegStep == 2
					|| LegStep == -(g_InControlState.gaitCur.StepsInGait - 2))
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
     43c:	1b010000 	blne	40444 <__Stack_Size+0x40044>
     440:	0000006f 	andeq	r0, r0, pc, rrx
     444:	0000002b 	andeq	r0, r0, fp, lsr #32
     448:	0004d70d 	andeq	sp, r4, sp, lsl #14
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
     44c:	e81c0100 	ldmda	ip, {r8}
     450:	0d000003 	stceq	0, cr0, [r0, #-12]
     454:	000001b6 	strheq	r0, [r0], -r6
     458:	03ff1d01 	mvnseq	r1, #64	; 0x40
     45c:	0a0e0000 	beq	380464 <__Stack_Size+0x380064>
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
     460:	d8080032 	stmdale	r8, {r1, r4, r5}
     464:	0f080032 	svceq	0x00080032
     468:	01006469 	tsteq	r0, r9, ror #8
     46c:	00005e5c 	andeq	r5, r0, ip, asr lr
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y / 2;
     470:	0f560100 	svceq	0x00560100
     474:	006d756e 	rsbeq	r7, sp, lr, ror #10
     478:	005e5c01 	subseq	r5, lr, r1, lsl #24
     47c:	57010000 	strpl	r0, [r1, -r0]
	}
	//_B_
	//Leg front down position //bug here?  From _A_ to _B_ there should only be one gaitstep, not 2!
	//For example, where is the case of LegStep==0+2 executed when NRLiftedPos=3?
	else if ((LegStep == g_InControlState.gaitCur.FrontDownPos
     480:	0000a40c 	andeq	sl, r0, ip, lsl #8
     484:	4c5d0100 	ldfmie	f0, [sp], {0}
     488:	75000000 	strvc	r0, [r0]
     48c:	0d000000 	stceq	0, cr0, [r0]
     490:	00001df4 	strdeq	r1, [r0], -r4
     494:	004c5d01 	subeq	r5, ip, r1, lsl #26
     498:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
     49c:	01000005 	tsteq	r0, r5
			|| LegStep
					== -(g_InControlState.gaitCur.StepsInGait
							- g_InControlState.gaitCur.FrontDownPos))
			&& GaitPosY[GaitCurrentLegNr] < 0) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
     4a0:	00004c5d 	andeq	r4, r0, sp, asr ip
     4a4:	06590d00 	ldrbeq	r0, [r9], -r0, lsl #26
     4a8:	5d010000 	stcpl	0, cr0, [r1]
     4ac:	0000004c 	andeq	r0, r0, ip, asr #32
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
     4b0:	04100000 	ldreq	r0, [r0]
     4b4:	746e6905 	strbtvc	r6, [lr], #-2309
     4b8:	03f81100 	mvnseq	r1, #0	; 0x0
     4bc:	03f80000 	mvnseq	r0, #0	; 0x0
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y / 2;
     4c0:	7a120000 	bvc	4804c8 <__Stack_Size+0x4800c8>
     4c4:	7f000000 	svcvc	0x00000000
     4c8:	08010200 	stmdaeq	r1, {r9}
		GaitPosY[GaitCurrentLegNr] = 0;
     4cc:	00000470 	andeq	r0, r0, r0, ror r4
     4d0:	03f80413 	mvnseq	r0, #318767104	; 0x13000000
	}

	//Move body forward
	else {
		GaitPosX[GaitCurrentLegNr] = GaitPosX[GaitCurrentLegNr]
     4d4:	340d0000 	strcc	r0, [sp]
     4d8:	08000005 	stmdaeq	r0, {r0, r2}
     4dc:	0004102a 	andeq	r1, r4, sl, lsr #32
     4e0:	005e1400 	subseq	r1, lr, r0, lsl #8
     4e4:	650d0000 	strvs	r0, [sp]
     4e8:	08000002 	stmdaeq	r0, {r1}
				- (g_InControlState.TravelLength.x
						/ (short) g_InControlState.gaitCur.TLDivFactor);
		GaitPosY[GaitCurrentLegNr] = 0;
     4ec:	00042028 	andeq	r2, r4, r8, lsr #32
     4f0:	004c1400 	subeq	r1, ip, r0, lsl #8
     4f4:	f60d0000 	undefined instruction 0xf60d0000
		GaitPosZ[GaitCurrentLegNr] = GaitPosZ[GaitCurrentLegNr]
     4f8:	08000003 	stmdaeq	r0, {r0, r1}
     4fc:	00042028 	andeq	r2, r4, r8, lsr #32
     500:	005e1100 	subseq	r1, lr, r0, lsl #2
     504:	04410000 	strbeq	r0, [r1]
				- (g_InControlState.TravelLength.z
						/ (short) g_InControlState.gaitCur.TLDivFactor);
		GaitRotY[GaitCurrentLegNr] = GaitRotY[GaitCurrentLegNr]
     508:	7a150000 	bvc	540510 <__Stack_Size+0x540110>
     50c:	ff000000 	undefined instruction 0xff000000
     510:	7a0d0003 	bvc	340524 <__Stack_Size+0x340124>
     514:	08000004 	stmdaeq	r0, {r2}
				- (g_InControlState.TravelLength.y
						/ (short) g_InControlState.gaitCur.TLDivFactor);
	}

}
     518:	00044c29 	andeq	r4, r4, r9, lsr #24
     51c:	04301400 	ldrteq	r1, [r0], #-1024
     520:	15160000 	ldrne	r0, [r6]
     524:	08000006 	stmdaeq	r0, {r1, r2}
     528:	00041044 	andeq	r1, r4, r4, asr #32
     52c:	93160000 	tstls	r6, #0	; 0x0
     530:	08000003 	stmdaeq	r0, {r0, r1}

}

//--------------------------------------------------------------------
//[GAIT Sequence]
void GaitSeq(void) {
     534:	00041044 	andeq	r1, r4, r4, asr #32
	//Check if the Gait is in motion - If not if we are going to start a motion try to align our Gaitstep to start with a good foot
	// for the direction we are about to go...

	if (fWalking || (g_InControlState.ForceGaitStepCnt != 0))
     538:	5e110000 	wxorpl	wr0, wr1, wr0
     53c:	79000000 	stmdbvc	r0, {}
     540:	12000004 	andne	r0, r0, #4	; 0x4
		TravelRequest = true;   // Is walking or was walking...
     544:	0000007a 	andeq	r0, r0, sl, ror r0
     548:	ec0d0040 	stc	0, cr0, [sp], {64}
	else {
		TravelRequest = (abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
     54c:	08000000 	stmdaeq	r0, {}
     550:	00048445 	andeq	r8, r4, r5, asr #8
     554:	04691400 	strbteq	r1, [r9], #-1024
     558:	e4160000 	ldr	r0, [r6]
     55c:	08000005 	stmdaeq	r0, {r0, r2}
     560:	00042058 	andeq	r2, r4, r8, asr r0
     564:	f9160000 	undefined instruction 0xf9160000
     568:	08000000 	stmdaeq	r0, {}
     56c:	00042058 	andeq	r2, r4, r8, asr r0
     570:	b20d0000 	andlt	r0, sp, #0	; 0x0
     574:	08000002 	stmdaeq	r0, {r1}
     578:	0004ac59 	andeq	sl, r4, r9, asr ip
     57c:	04301400 	ldrteq	r1, [r0], #-1024
				|| (abs(g_InControlState.TravelLength.y) > cTravelDeadZone);

		if (TravelRequest) {

		} else {    //Clear values under the cTravelDeadZone
			g_InControlState.TravelLength.x = 0;
     580:	99170000 	ldmdbls	r7, {}
			g_InControlState.TravelLength.z = 0;
     584:	08000006 	stmdaeq	r0, {r1, r2}
			g_InControlState.TravelLength.y = 0; //Gait NOT in motion, return to home position
		}
	}

	//Calculate Gait sequence
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
     588:	00003a14 	andeq	r3, r0, r4, lsl sl
     58c:	17010100 	strne	r0, [r1, -r0, lsl #2]
     590:	00000005 	andeq	r0, r0, r5
		Gait(LegIndex);
     594:	003a1708 	eorseq	r1, sl, r8, lsl #14
			g_InControlState.TravelLength.y = 0; //Gait NOT in motion, return to home position
		}
	}

	//Calculate Gait sequence
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
     598:	01010000 	tsteq	r1, r0
     59c:	00005617 	andeq	r5, r0, r7, lsl r6
     5a0:	3a1a0800 	bcc	6825a8 <__Stack_Size+0x6821a8>
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5a4:	01000000 	tsteq	r0, r0
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
     5a8:	06690001 	strbteq	r0, [r9], -r1
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5ac:	00020000 	andeq	r0, r2, r0
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
     5b0:	00000146 	andeq	r0, r0, r6, asr #2
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5b4:	01c60104 	biceq	r0, r6, r4, lsl #2
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
		g_InControlState.GaitStep = 1;
     5b8:	2d010000 	stccs	0, cr0, [r1]
     5bc:	9d00000a 	stcls	0, cr0, [r0, #-40]

	// If we have a force count decrement it now...
	if (g_InControlState.ForceGaitStepCnt)
     5c0:	3c000003 	stccc	0, cr0, [r0], {3}
     5c4:	70080034 	andvc	r0, r8, r4, lsr r0
		g_InControlState.ForceGaitStepCnt--;
     5c8:	1e080035 	mcrne	0, 0, r0, cr8, cr5, {1}
}
     5cc:	02000002 	andeq	r0, r0, #2	; 0x2
     5d0:	41780504 	cmnmi	r8, r4, lsl #10
     5d4:	02020000 	andeq	r0, r2, #0	; 0x0
     5d8:	00049505 	andeq	r9, r4, r5, lsl #10
     5dc:	06010200 	streq	r0, [r1], -r0, lsl #4
}
//--------------------------------------------------------------------
//[BalanceBody]
void BalanceBody(void) {

	TotalTransZ = TotalTransZ / BalanceDivFactor;
     5e0:	00000469 	andeq	r0, r0, r9, ror #8
     5e4:	f2070402 	vshl.s8	d0, d2, d7
     5e8:	03000041 	movweq	r0, #65	; 0x41
     5ec:	00363175 	eorseq	r3, r6, r5, ror r1
     5f0:	004c2802 	subeq	r2, ip, r2, lsl #16
	TotalTransX = TotalTransX / BalanceDivFactor;
     5f4:	02020000 	andeq	r0, r2, #0	; 0x0
     5f8:	00022207 	andeq	r2, r2, r7, lsl #4
     5fc:	38750300 	ldmdacc	r5!, {r8, r9}^
	TotalTransY = TotalTransY / BalanceDivFactor;
     600:	5d290200 	sfmpl	f0, 4, [r9]
     604:	02000000 	andeq	r0, r0, #0	; 0x0
     608:	04670801 	strbteq	r0, [r7], #-2049
     60c:	04040000 	streq	r0, [r4]

	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
		TotalXBal1 += 3600;

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
     610:	ed010507 	cfstr32	mvfx0, [r1, #-28]
     614:	01000007 	tsteq	r0, r7
	TotalTransX = TotalTransX / BalanceDivFactor;
	TotalTransY = TotalTransY / BalanceDivFactor;

#ifndef QUADMODE // ??? on PhantomX Hex at no movment YBal1 = 1800, on Quad = 0...  Need to experiment
	if (TotalYBal1 > 0)        //Rotate balance circle by +/- 180 deg
		TotalYBal1 -= 1800;
     618:	343c0128 	ldrtcc	r0, [ip], #-296
     61c:	343e0800 	ldrtcc	r0, [lr], #-2048
	else
		TotalYBal1 += 1800;
     620:	5d010800 	stcpl	8, cr0, [r1]
#endif

	if (TotalZBal1 < -1800) //Compensate for extreme balance positions that causes overflow
     624:	09d20105 	ldmibeq	r2, {r0, r2, r8}^
     628:	33010000 	movwcc	r0, #4096	; 0x1000
     62c:	00344001 	eorseq	r4, r4, r1
		TotalZBal1 += 3600;
     630:	00344208 	eorseq	r4, r4, r8, lsl #4
     634:	055d0108 	ldrbeq	r0, [sp, #-264]

	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
     638:	000bfc01 	andeq	pc, fp, r1, lsl #24
     63c:	01420100 	cmpeq	r2, r0, lsl #2
		TotalXBal1 += 3600;
     640:	08003444 	stmdaeq	r0, {r2, r6, sl, ip, sp}
     644:	08003446 	stmdaeq	r0, {r1, r2, r6, sl, ip, sp}

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
     648:	01055d01 	tsteq	r5, r1, lsl #26
     64c:	0000080a 	andeq	r0, r0, sl, lsl #16
	TotalXBal1 = -TotalXBal1 / BalanceDivFactor;
     650:	48015101 	stmdami	r1, {r0, r8, ip, lr}
     654:	4a080034 	bmi	20072c <__Stack_Size+0x20032c>
	TotalZBal1 = TotalZBal1 / BalanceDivFactor;
     658:	01080034 	tsteq	r8, r4, lsr r0
	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
		TotalXBal1 += 3600;

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
	TotalXBal1 = -TotalXBal1 / BalanceDivFactor;
     65c:	4c01055d 	cfstr32mi	mvfx0, [r1], {93}
     660:	01000007 	tsteq	r0, r7
	TotalZBal1 = TotalZBal1 / BalanceDivFactor;
     664:	344c0160 	strbcc	r0, [ip], #-352
     668:	344e0800 	strbcc	r0, [lr], #-2048

}
     66c:	5d010800 	stcpl	8, cr0, [r1]
     670:	0a0d0105 	beq	340a8c <__Stack_Size+0x34068c>
     674:	6f010000 	svcvs	0x00010000
     678:	00345001 	eorseq	r5, r4, r1
     67c:	00345208 	eorseq	r5, r4, r8, lsl #4
     680:	055d0108 	ldrbeq	r0, [sp, #-264]
     684:	00094301 	andeq	r4, r9, r1, lsl #6
     688:	017a0100 	cmneq	sl, r0, lsl #2
//sin4        - Output Sinus of AngleDeg
//cos4          - Output Cosinus of AngleDeg
void GetSinCos(short AngleDeg1) {
	short ABSAngleDeg1;   //Absolute value of the Angle in Degrees, decimals = 1
	//Get the absolute value of AngleDeg
	if (AngleDeg1 < 0)
     68c:	08003454 	stmdaeq	r0, {r2, r4, r6, sl, ip, sp}
     690:	08003456 	stmdaeq	r0, {r1, r2, r4, r6, sl, ip, sp}
		ABSAngleDeg1 = AngleDeg1 * -1;
     694:	01055d01 	tsteq	r5, r1, lsl #26
     698:	00000b2a 	andeq	r0, r0, sl, lsr #22
	else
		ABSAngleDeg1 = AngleDeg1;

	//Shift rotation to a full circle of 360 deg -> AngleDeg // 360
	if (AngleDeg1 < 0)    //Negative values
		AngleDeg1 = 3600 - (ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600)));
     69c:	58018501 	stmdapl	r1, {r0, r8, sl, pc}
     6a0:	5a080034 	bpl	200778 <__Stack_Size+0x200378>
     6a4:	01080034 	tsteq	r8, r4, lsr r0
     6a8:	4401055d 	strmi	r0, [r1], #-1373
     6ac:	0100000a 	tsteq	r0, sl
     6b0:	345c019c 	ldrbcc	r0, [ip], #-412
     6b4:	345e0800 	ldrbcc	r0, [lr], #-2048
     6b8:	5d010800 	stcpl	8, cr0, [r1]
     6bc:	090a0105 	stmdbeq	sl, {r0, r2, r8}
	else
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));

	if (AngleDeg1 >= 0 && AngleDeg1 <= 900)     // 0 to 90 deg
     6c0:	a7010000 	strge	r0, [r1, -r0]
     6c4:	00346001 	eorseq	r6, r4, r1
			{
		sin4 = pgm_read_word(&GetSin[AngleDeg1 / 5]); // 5 is the presision (0.5) of the table
     6c8:	00346208 	eorseq	r6, r4, r8, lsl #4
     6cc:	055d0108 	ldrbeq	r0, [sp, #-264]
     6d0:	00073a01 	andeq	r3, r7, r1, lsl #20
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
     6d4:	01b20100 	undefined instruction 0x01b20100
     6d8:	08003464 	stmdaeq	r0, {r2, r5, r6, sl, ip, sp}
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));

	if (AngleDeg1 >= 0 && AngleDeg1 <= 900)     // 0 to 90 deg
			{
		sin4 = pgm_read_word(&GetSin[AngleDeg1 / 5]); // 5 is the presision (0.5) of the table
     6dc:	08003466 	stmdaeq	r0, {r1, r2, r5, r6, sl, ip, sp}
     6e0:	01055d01 	tsteq	r5, r1, lsl #26
     6e4:	00000789 	andeq	r0, r0, r9, lsl #15
     6e8:	6801bd01 	stmdavs	r1, {r0, r8, sl, fp, ip, sp, pc}
     6ec:	6a080034 	bvs	2007c4 <__Stack_Size+0x2003c4>
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
     6f0:	01080034 	tsteq	r8, r4, lsr r0
     6f4:	9401055d 	strls	r0, [r1], #-1373
     6f8:	0100000a 	tsteq	r0, sl
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
     6fc:	346c01c8 	strbtcc	r0, [ip], #-456
     700:	346e0800 	strbtcc	r0, [lr], #-2048
     704:	5d010800 	stcpl	8, cr0, [r1]
     708:	09e50105 	stmibeq	r5!, {r0, r2, r8}^
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     70c:	d3010000 	movwle	r0, #4096	; 0x1000
     710:	00347001 	eorseq	r7, r4, r1
     714:	00347208 	eorseq	r7, r4, r8, lsl #4
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     718:	055d0108 	ldrbeq	r0, [sp, #-264]
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     71c:	0009ae01 	andeq	sl, r9, r1, lsl #28
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     720:	01de0100 	bicseq	r0, lr, r0, lsl #2
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     724:	08003474 	stmdaeq	r0, {r2, r4, r5, r6, sl, ip, sp}
     728:	08003476 	stmdaeq	r0, {r1, r2, r4, r5, r6, sl, ip, sp}
     72c:	01055d01 	tsteq	r5, r1, lsl #26
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     730:	000008e0 	andeq	r0, r0, r0, ror #17
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     734:	7801e901 	stmdavc	r1, {r0, r8, fp, sp, lr, pc}
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     738:	7a080034 	bvc	200810 <__Stack_Size+0x200410>
     73c:	01080034 	tsteq	r8, r4, lsr r0
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
     740:	a601055d 	undefined
     744:	0100000b 	tsteq	r0, fp
     748:	347c01f4 	ldrbtcc	r0, [ip], #-500
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     74c:	347e0800 	ldrbtcc	r0, [lr], #-2048
     750:	5d010800 	stcpl	8, cr0, [r1]
     754:	094e0105 	stmdbeq	lr, {r0, r2, r8}^
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     758:	ff010000 	undefined instruction 0xff010000
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     75c:	00348001 	eorseq	r8, r4, r1
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     760:	00348208 	eorseq	r8, r4, r8, lsl #4
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     764:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     768:	00099d01 	andeq	r9, r9, r1, lsl #26
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     76c:	010a0100 	tsteq	sl, r0, lsl #2
     770:	00348401 	eorseq	r8, r4, r1, lsl #8
     774:	00348608 	eorseq	r8, r4, r8, lsl #12
     778:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     77c:	000b8d01 	andeq	r8, fp, r1, lsl #26
     780:	01150100 	tsteq	r5, r0, lsl #2
     784:	00348801 	eorseq	r8, r4, r1, lsl #16
     788:	00348a08 	eorseq	r8, r4, r8, lsl #20
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
     78c:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     790:	000bb701 	andeq	fp, fp, r1, lsl #14
     794:	01200100 	teqeq	r0, r0, lsl #2
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     798:	00348c01 	eorseq	r8, r4, r1, lsl #24
     79c:	00348e08 	eorseq	r8, r4, r8, lsl #28
     7a0:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7a4:	000be301 	andeq	lr, fp, r1, lsl #6
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7a8:	012b0100 	teqeq	fp, r0, lsl #2
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7ac:	00349001 	eorseq	r9, r4, r1
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7b0:	00349208 	eorseq	r9, r4, r8, lsl #4
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7b4:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7b8:	0006f501 	andeq	pc, r6, r1, lsl #10
     7bc:	01360100 	teqeq	r6, r0, lsl #2
     7c0:	00349401 	eorseq	r9, r4, r1, lsl #8
     7c4:	00349608 	eorseq	r9, r4, r8, lsl #12
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7c8:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     7cc:	00076001 	andeq	r6, r7, r1
     7d0:	01410100 	cmpeq	r1, r0, lsl #2
	//Shift rotation to a full circle of 360 deg -> AngleDeg // 360
	if (AngleDeg1 < 0)    //Negative values
		AngleDeg1 = 3600 - (ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600)));
	else
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));
     7d4:	00349801 	eorseq	r9, r4, r1, lsl #16
     7d8:	00349a08 	eorseq	r9, r4, r8, lsl #20
     7dc:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     7e0:	0009f401 	andeq	pc, r9, r1, lsl #8
     7e4:	014c0100 	cmpeq	ip, r0, lsl #2
     7e8:	00349c01 	eorseq	r9, r4, r1, lsl #24
     7ec:	00349e08 	eorseq	r9, r4, r8, lsl #28
     7f0:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     7f4:	000a5401 	andeq	r5, sl, r1, lsl #8
     7f8:	01570100 	cmpeq	r7, r0, lsl #2
	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
	}
}
     7fc:	0034a001 	eorseq	sl, r4, r1
     800:	0034a208 	eorseq	sl, r4, r8, lsl #4
     804:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     808:	00087801 	andeq	r7, r8, r1, lsl #16
     80c:	01630100 	cmneq	r3, r0, lsl #2
//cos4        - Input Cosinus
//AngleRad4     - Output Angle in AngleRad4
long GetArcCos(short cos4) {
	boolean NegativeValue/*:1*/;    //If the the value is Negative
	//Check for negative value
	if (cos4 < 0) {
     810:	0034a401 	eorseq	sl, r4, r1, lsl #8
     814:	0034a608 	eorseq	sl, r4, r8, lsl #12
     818:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
		cos4 = -cos4;
     81c:	00082c01 	andeq	r2, r8, r1, lsl #24
     820:	016f0100 	cmneq	pc, r0, lsl #2
		NegativeValue = 1;
	} else
		NegativeValue = 0;

	//Limit cos4 to his maximal value
	cos4 = min(cos4, c4DEC);
     824:	0034a801 	eorseq	sl, r4, r1, lsl #16
     828:	0034aa08 	eorseq	sl, r4, r8, lsl #20
     82c:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2

	if ((cos4 >= 0) && (cos4 < 9000)) {
     830:	00092901 	andeq	r2, r9, r1, lsl #18
     834:	017b0100 	cmneq	fp, r0, lsl #2
     838:	0034ac01 	eorseq	sl, r4, r1, lsl #24
		AngleRad4 = (byte) pgm_read_byte(&GetACos[cos4 / 79]);
     83c:	0034ae08 	eorseq	sl, r4, r8, lsl #28
     840:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     844:	00098a01 	andeq	r8, r9, r1, lsl #20
		AngleRad4 = ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255) ;
     848:	01860100 	orreq	r0, r6, r0, lsl #2
     84c:	0034b001 	eorseq	fp, r4, r1
	} else if ((cos4 >= 9000) && (cos4 < 9900)) {
     850:	0034b208 	eorseq	fp, r4, r8, lsl #4
     854:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     858:	000bd001 	andeq	sp, fp, r1
     85c:	01910100 	orrseq	r0, r1, r0, lsl #2
		AngleRad4 = (byte) pgm_read_byte(&GetACos[(cos4 - 9000) / 8 + 114]);
     860:	0034b401 	eorseq	fp, r4, r1, lsl #8
     864:	0034b608 	eorseq	fp, r4, r8, lsl #12
     868:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     86c:	00095f01 	andeq	r5, r9, r1, lsl #30
     870:	019c0100 	orrseq	r0, ip, r0, lsl #2
     874:	0034b801 	eorseq	fp, r4, r1, lsl #16
		AngleRad4 = (long) ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255)
     878:	0034ba08 	eorseq	fp, r4, r8, lsl #20
	} else if ((cos4 >= 9900) && (cos4 <= 10000)) {
     87c:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     880:	00070e01 	andeq	r0, r7, r1, lsl #28
     884:	01a70100 	undefined instruction 0x01a70100
		AngleRad4 = (byte) pgm_read_byte(&GetACos[(cos4 - 9900) / 2 + 227]);
     888:	0034bc01 	eorseq	fp, r4, r1, lsl #24
     88c:	0034be08 	eorseq	fp, r4, r8, lsl #28
     890:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
		AngleRad4 = (long) ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255)
     894:	0009bf01 	andeq	fp, r9, r1, lsl #30
     898:	01b30100 	undefined instruction 0x01b30100
     89c:	0034c001 	eorseq	ip, r4, r1
     8a0:	0034c208 	eorseq	ip, r4, r8, lsl #4
     8a4:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     8a8:	00072201 	andeq	r2, r7, r1, lsl #4
     8ac:	01bf0100 	undefined instruction 0x01bf0100
	}

	//Add negative sign
	if (NegativeValue)
		AngleRad4 = 31416 - AngleRad4;
     8b0:	0034c401 	eorseq	ip, r4, r1, lsl #8
     8b4:	0034c608 	eorseq	ip, r4, r8, lsl #12
     8b8:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     8bc:	00085501 	andeq	r5, r8, r1, lsl #10
     8c0:	01ca0100 	biceq	r0, sl, r0, lsl #2

	return AngleRad4;
}
     8c4:	0034c801 	eorseq	ip, r4, r1, lsl #16
     8c8:	0034ca08 	eorseq	ip, r4, r8, lsl #20
     8cc:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     8d0:	00077901 	andeq	r7, r7, r1, lsl #18
     8d4:	01d50100 	bicseq	r0, r5, r0, lsl #2
     8d8:	0034cc01 	eorseq	ip, r4, r1, lsl #24

unsigned long isqrt32(unsigned long n) //
{
     8dc:	0034ce08 	eorseq	ip, r4, r8, lsl #28
     8e0:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2

	root = 0;
	remainder = n;
	place = 0x40000000; // OR place = 0x4000; OR place = 0x40; - respectively

	while (place > remainder)
     8e4:	00079801 	andeq	r9, r7, r1, lsl #16
     8e8:	01e10100 	mvneq	r0, r0, lsl #2
     8ec:	0034d001 	eorseq	sp, r4, r1
		place = place >> 2;
	while (place) {
		if (remainder >= root + place) {
     8f0:	0034d208 	eorseq	sp, r4, r8, lsl #4
			remainder = remainder - root - place;
     8f4:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     8f8:	0007b801 	andeq	fp, r7, r1, lsl #16
			root = root + (place << 1);
     8fc:	01ec0100 	mvneq	r0, r0, lsl #2

	while (place > remainder)
		place = place >> 2;
	while (place) {
		if (remainder >= root + place) {
			remainder = remainder - root - place;
     900:	0034d401 	eorseq	sp, r4, r1, lsl #8
			root = root + (place << 1);
		}
		root = root >> 1;
		place = place >> 2;
     904:	0034d608 	eorseq	sp, r4, r8, lsl #12
	remainder = n;
	place = 0x40000000; // OR place = 0x4000; OR place = 0x40; - respectively

	while (place > remainder)
		place = place >> 2;
	while (place) {
     908:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
	XYhyp2 = isqrt32(
     90c:	000a6d01 	andeq	r6, sl, r1, lsl #26
//(GETATAN2) Simplyfied ArcTan2 function based on fixed point ArcCos
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
     910:	01f70100 	mvnseq	r0, r0, lsl #2
	XYhyp2 = isqrt32(
     914:	0034d801 	eorseq	sp, r4, r1, lsl #16
     918:	0034da08 	eorseq	sp, r4, r8, lsl #20
//(GETATAN2) Simplyfied ArcTan2 function based on fixed point ArcCos
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
     91c:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
	XYhyp2 = isqrt32(
     920:	0006e201 	andeq	lr, r6, r1, lsl #4
     924:	02020100 	andeq	r0, r2, #0	; 0x0
     928:	0034dc01 	eorseq	sp, r4, r1, lsl #24
			((long) AtanX * AtanX * c4DEC) + ((long) AtanY * AtanY * c4DEC));
	GetArcCos(((long) AtanX * (long) c6DEC) / (long) XYhyp2);
     92c:	0034de08 	eorseq	sp, r4, r8, lsl #28
     930:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     934:	0008b401 	andeq	fp, r8, r1, lsl #8
     938:	020d0100 	andeq	r0, sp, #0	; 0x0
     93c:	0034e001 	eorseq	lr, r4, r1
     940:	0034e208 	eorseq	lr, r4, r8, lsl #4
     944:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2

	if (AtanY < 0) // removed overhead... Atan4 = AngleRad4 * (AtanY/abs(AtanY));
     948:	000aea01 	andeq	lr, sl, r1, lsl #20
		Atan4 = -AngleRad4;
     94c:	02180100 	andseq	r0, r8, #0	; 0x0
	else
		Atan4 = AngleRad4;
     950:	0034e401 	eorseq	lr, r4, r1, lsl #8
	XYhyp2 = isqrt32(
			((long) AtanX * AtanX * c4DEC) + ((long) AtanY * AtanY * c4DEC));
	GetArcCos(((long) AtanX * (long) c6DEC) / (long) XYhyp2);

	if (AtanY < 0) // removed overhead... Atan4 = AngleRad4 * (AtanY/abs(AtanY));
		Atan4 = -AngleRad4;
     954:	0034e608 	eorseq	lr, r4, r8, lsl #12
	else
		Atan4 = AngleRad4;
     958:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     95c:	0007fa01 	andeq	pc, r7, r1, lsl #20
	return Atan4;
}
     960:	02230100 	eoreq	r0, r3, #0	; 0x0
     964:	0034e801 	eorseq	lr, r4, r1, lsl #16
     968:	0034ea08 	eorseq	lr, r4, r8, lsl #20
     96c:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2

}

//--------------------------------------------------------------------
//[BalCalcOneLeg]
void BalCalcOneLeg(long PosX, long PosZ, long PosY, byte BalLegNr) {
     970:	00081c01 	andeq	r1, r8, r1, lsl #24
	long CPR_Y;            //Final Y value for centerpoint of rotation
	long CPR_Z;            //Final Z value for centerpoint of rotation

	long lAtan;
	//Calculating totals from center of the body to the feet
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BalLegNr]) + PosZ;
     974:	022e0100 	eoreq	r0, lr, #0	; 0x0
     978:	0034ec01 	eorseq	lr, r4, r1, lsl #24
	CPR_X = (short) pgm_read_word(&cOffsetX[BalLegNr]) + PosX;
     97c:	0034ee08 	eorseq	lr, r4, r8, lsl #28
     980:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
	CPR_Y = 150 + PosY; // using the value 150 to lower the centerpoint of rotation 'g_InControlState.BodyPos.y +

	TotalTransY += (long) PosY;
     984:	000b4501 	andeq	r4, fp, r1, lsl #10
     988:	02470100 	subeq	r0, r7, #0	; 0x0
     98c:	0034f001 	eorseq	pc, r4, r1
	TotalTransZ += (long) CPR_Z;
     990:	0034f208 	eorseq	pc, r4, r8, lsl #4
     994:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     998:	000b7801 	andeq	r7, fp, r1, lsl #16
	TotalTransX += (long) CPR_X;
     99c:	02600100 	rsbeq	r0, r0, #0	; 0x0
     9a0:	0034f401 	eorseq	pc, r4, r1, lsl #8
     9a4:	0034f608 	eorseq	pc, r4, r8, lsl #12
     9a8:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2

	lAtan = GetATan2(CPR_X, CPR_Z);
     9ac:	000ac601 	andeq	ip, sl, r1, lsl #12
	TotalYBal1 += (lAtan * 1800) / 31415;
     9b0:	026b0100 	rsbeq	r0, fp, #0	; 0x0
     9b4:	0034f801 	eorseq	pc, r4, r1, lsl #16
     9b8:	0034fa08 	eorseq	pc, r4, r8, lsl #20
     9bc:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     9c0:	0007c801 	andeq	ip, r7, r1, lsl #16
     9c4:	02760100 	rsbseq	r0, r6, #0	; 0x0
     9c8:	0034fc01 	eorseq	pc, r4, r1, lsl #24
     9cc:	0034fe08 	eorseq	pc, r4, r8, lsl #28

	lAtan = GetATan2(CPR_X, CPR_Y);
     9d0:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     9d4:	000a8001 	andeq	r8, sl, r1
	TotalZBal1 += ((lAtan * 1800) / 31415) - 900; //Rotate balance circle 90 deg
     9d8:	02810100 	addeq	r0, r1, #0	; 0x0
     9dc:	00350001 	eorseq	r0, r5, r1
     9e0:	00350208 	eorseq	r0, r5, r8, lsl #4
     9e4:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     9e8:	000b3201 	andeq	r3, fp, r1, lsl #4
     9ec:	028d0100 	addeq	r0, sp, #0	; 0x0
     9f0:	00350401 	eorseq	r0, r5, r1, lsl #8
     9f4:	00350608 	eorseq	r0, r5, r8, lsl #12
     9f8:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     9fc:	00097201 	andeq	r7, r9, r1, lsl #4

	lAtan = GetATan2(CPR_Z, CPR_Y);
     a00:	02990100 	addseq	r0, r9, #0	; 0x0
     a04:	00350801 	eorseq	r0, r5, r1, lsl #16
	TotalXBal1 += ((lAtan * 1800) / 31415) - 900; //Rotate balance circle 90 deg
     a08:	00350a08 	eorseq	r0, r5, r8, lsl #20
     a0c:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     a10:	000a1a01 	andeq	r1, sl, r1, lsl #20
     a14:	02a40100 	adceq	r0, r4, #0	; 0x0
     a18:	00350c01 	eorseq	r0, r5, r1, lsl #24
     a1c:	00350e08 	eorseq	r0, r5, r8, lsl #28
     a20:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     a24:	00086801 	andeq	r6, r8, r1, lsl #16

}
     a28:	02af0100 	adceq	r0, pc, #0	; 0x0
     a2c:	00351001 	eorseq	r1, r5, r1
     a30:	00351208 	eorseq	r1, r5, r8, lsl #4
     a34:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     a38:	0007a801 	andeq	sl, r7, r1, lsl #16
     a3c:	02ba0100 	adcseq	r0, sl, #0	; 0x0
     a40:	00351401 	eorseq	r1, r5, r1, lsl #8
     a44:	00351608 	eorseq	r1, r5, r8, lsl #12
     a48:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     a4c:	00091901 	andeq	r1, r9, r1, lsl #18
//SinG                  - Sin buffer for BodyRotZ
//CosG               - Cos buffer for BodyRotZ
//BodyFKPosX         - Output Position X of feet with Rotation
//BodyFKPosY         - Output Position Y of feet with Rotation
//BodyFKPosZ         - Output Position Z of feet with Rotation
void BodyFK(short PosX, short PosZ, short PosY, short RotationY, byte BodyIKLeg) {
     a50:	02c50100 	sbceq	r0, r5, #0	; 0x0
     a54:	00351801 	eorseq	r1, r5, r1, lsl #16
	short CPR_X;            //Final X value for centerpoint of rotation
	short CPR_Y;            //Final Y value for centerpoint of rotation
	short CPR_Z;            //Final Z value for centerpoint of rotation

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
     a58:	00351a08 	eorseq	r1, r5, r8, lsl #20
     a5c:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     a60:	0007dd01 	andeq	sp, r7, r1, lsl #26
//SinG                  - Sin buffer for BodyRotZ
//CosG               - Cos buffer for BodyRotZ
//BodyFKPosX         - Output Position X of feet with Rotation
//BodyFKPosY         - Output Position Y of feet with Rotation
//BodyFKPosZ         - Output Position Z of feet with Rotation
void BodyFK(short PosX, short PosZ, short PosY, short RotationY, byte BodyIKLeg) {
     a64:	02d00100 	sbcseq	r0, r0, #0	; 0x0
	short CPR_X;            //Final X value for centerpoint of rotation
	short CPR_Y;            //Final Y value for centerpoint of rotation
	short CPR_Z;            //Final Z value for centerpoint of rotation

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
     a68:	00351c01 	eorseq	r1, r5, r1, lsl #24
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
     a6c:	00351e08 	eorseq	r1, r5, r8, lsl #28
     a70:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     a74:	00084501 	andeq	r4, r8, r1, lsl #10

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     a78:	02db0100 	sbcseq	r0, fp, #0	; 0x0

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BodyIKLeg]) + PosZ
     a7c:	00352001 	eorseq	r2, r5, r1
     a80:	00352208 	eorseq	r2, r5, r8, lsl #4
	//Successive global rotation matrix:
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
     a84:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     a88:	000aa501 	andeq	sl, sl, r1, lsl #10

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BodyIKLeg]) + PosZ
     a8c:	02e60100 	rsceq	r0, r6, #0	; 0x0
	//Successive global rotation matrix:
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
     a90:	00352401 	eorseq	r2, r5, r1, lsl #8
     a94:	00352608 	eorseq	r2, r5, r8, lsl #12
	SinG4 = sin4;
     a98:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
	CosG4 = cos4;
     a9c:	000ab601 	andeq	fp, sl, r1, lsl #12
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
	SinG4 = sin4;
     aa0:	02ff0100 	rscseq	r0, pc, #0	; 0x0
	CosG4 = cos4;
     aa4:	00352801 	eorseq	r2, r5, r1, lsl #16
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
	SinG4 = sin4;
     aa8:	00352a08 	eorseq	r2, r5, r8, lsl #20
	CosG4 = cos4;

	GetSinCos(g_InControlState.BodyRot1.z + TotalZBal1);
     aac:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
	SinB4 = sin4;
     ab0:	000ada01 	andeq	sp, sl, r1, lsl #20
     ab4:	030a0100 	movweq	r0, #41216	; 0xa100
	CosB4 = cos4;
     ab8:	00352c01 	eorseq	r2, r5, r1, lsl #24

	GetSinCos(g_InControlState.BodyRot1.y + (RotationY * c1DEC) + TotalYBal1);
     abc:	00352e08 	eorseq	r2, r5, r8, lsl #28
     ac0:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     ac4:	00089b01 	andeq	r9, r8, r1, lsl #22
     ac8:	03150100 	tsteq	r5, #0	; 0x0
     acc:	00353001 	eorseq	r3, r5, r1

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     ad0:	00353208 	eorseq	r3, r5, r8, lsl #4
     ad4:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     ad8:	0008c701 	andeq	ip, r8, r1, lsl #14
     adc:	03200100 	teqeq	r0, #0	; 0x0
     ae0:	00353401 	eorseq	r3, r5, r1, lsl #8
     ae4:	00353608 	eorseq	r3, r5, r8, lsl #12
     ae8:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     aec:	0008f101 	andeq	pc, r8, r1, lsl #2
     af0:	032b0100 	teqeq	fp, #0	; 0x0
     af4:	00353801 	eorseq	r3, r5, r1, lsl #16
     af8:	00353a08 	eorseq	r3, r5, r8, lsl #20
     afc:	065d0108 	ldrbeq	r0, [sp], -r8, lsl #2
     b00:	000b0f01 	andeq	r0, fp, r1, lsl #30
     b04:	03370100 	teqeq	r7, #0	; 0x0
     b08:	00353c01 	eorseq	r3, r5, r1, lsl #24
     b0c:	00353e08 	eorseq	r3, r5, r8, lsl #28
     b10:	075d0108 	ldrbeq	r0, [sp, -r8, lsl #2]
     b14:	00088a01 	andeq	r8, r8, r1, lsl #20
     b18:	02f10100 	rscseq	r0, r1, #0	; 0x0
     b1c:	00354001 	eorseq	r4, r5, r1
     b20:	00354c08 	eorseq	r4, r5, r8, lsl #24
     b24:	00008808 	andeq	r8, r0, r8, lsl #16
     b28:	57010700 	strpl	r0, [r1, -r0, lsl #14]
     b2c:	0100000b 	tsteq	r0, fp
     b30:	4c010252 	sfmmi	f0, 4, [r1], {82}
     b34:	58080035 	stmdapl	r8, {r0, r2, r4, r5}
     b38:	b3080035 	movwlt	r0, #32821	; 0x8035
     b3c:	07000000 	streq	r0, [r0, -r0]
     b40:	000afd01 	andeq	pc, sl, r1, lsl #26
     b44:	02390100 	eorseq	r0, r9, #0	; 0x0
     b48:	00355801 	eorseq	r5, r5, r1, lsl #16
     b4c:	00356408 	eorseq	r6, r5, r8, lsl #8
     b50:	0000de08 	andeq	sp, r0, r8, lsl #28
     b54:	69010800 	stmdbvs	r1, {fp}
     b58:	0100000b 	tsteq	r0, fp
     b5c:	35640190 	strbcc	r0, [r4, #-400]!
     b60:	35700800 	ldrbcc	r0, [r0, #-2048]!
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     b64:	01090800 	tsteq	r9, r0, lsl #16
     b68:	34090000 	strcc	r0, [r9]

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     b6c:	03000005 	movweq	r0, #5	; 0x5
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     b70:	0005cb2a 	andeq	ip, r5, sl, lsr #22
     b74:	00530a00 	subseq	r0, r3, r0, lsl #20
     b78:	65090000 	strvs	r0, [r9]
     b7c:	03000002 	movweq	r0, #2	; 0x2
     b80:	0005db28 	andeq	sp, r5, r8, lsr #22
     b84:	00410a00 	subeq	r0, r1, r0, lsl #20
     b88:	f6090000 	undefined instruction 0xf6090000
     b8c:	03000003 	movweq	r0, #3	; 0x3
     b90:	0005db28 	andeq	sp, r5, r8, lsr #22
     b94:	00530b00 	subseq	r0, r3, r0, lsl #22
     b98:	05fc0000 	ldrbeq	r0, [ip]!
     b9c:	640c0000 	strvs	r0, [ip]
     ba0:	ff000000 	undefined instruction 0xff000000
     ba4:	7a090003 	bvc	240bb8 <__Stack_Size+0x2407b8>
     ba8:	03000004 	movweq	r0, #4	; 0x4
     bac:	00060729 	andeq	r0, r6, r9, lsr #14
     bb0:	05eb0a00 	strbeq	r0, [fp, #2560]!
     bb4:	150d0000 	strne	r0, [sp]
     bb8:	03000006 	movweq	r0, #6	; 0x6
     bbc:	0005cb44 	andeq	ip, r5, r4, asr #22
     bc0:	930d0000 	movwls	r0, #53248	; 0xd000
     bc4:	03000003 	movweq	r0, #3	; 0x3
     bc8:	0005cb44 	andeq	ip, r5, r4, asr #22
     bcc:	530b0000 	movwpl	r0, #45056	; 0xb000
     bd0:	34000000 	strcc	r0, [r0]
     bd4:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
     bd8:	00000064 	andeq	r0, r0, r4, rrx
     bdc:	ec090040 	stc	0, cr0, [r9], {64}
     be0:	03000000 	movweq	r0, #0	; 0x0
     be4:	00063f45 	andeq	r3, r6, r5, asr #30
     be8:	06240a00 	strteq	r0, [r4], -r0, lsl #20
     bec:	e40d0000 	str	r0, [sp]
     bf0:	03000005 	movweq	r0, #5	; 0x5
     bf4:	0005db58 	andeq	sp, r5, r8, asr fp
     bf8:	f90d0000 	undefined instruction 0xf90d0000
     bfc:	03000000 	movweq	r0, #0	; 0x0
     c00:	0005db58 	andeq	sp, r5, r8, asr fp
     c04:	b2090000 	andlt	r0, r9, #0	; 0x0
     c08:	03000002 	movweq	r0, #2	; 0x2
     c0c:	00066759 	andeq	r6, r6, r9, asr r7
     c10:	05eb0a00 	strbeq	r0, [fp, #2560]!
     c14:	b3000000 	movwlt	r0, #0	; 0x0
     c18:	0200001a 	andeq	r0, r0, #26	; 0x1a
     c1c:	00020d00 	andeq	r0, r2, r0, lsl #26
     c20:	c6010400 	strgt	r0, [r1], -r0, lsl #8
     c24:	01000001 	tsteq	r0, r1
     c28:	00001493 	muleq	r0, r3, r4
     c2c:	0000039d 	muleq	r0, sp, r3
	...
     c38:	000003b6 	strheq	r0, [r0], -r6
     c3c:	78050402 	stmdavc	r5, {r1, sl}
     c40:	02000041 	andeq	r0, r0, #65	; 0x41
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * CosG4 / c4DEC
					- (long) CPR_Z * c2DEC * SinA4 / c4DEC * SinB4 / c4DEC
							* SinG4 / c4DEC
					- (long) CPR_Y * c2DEC * CosB4 / c4DEC * SinG4 / c4DEC))
			/ c2DEC;
	BodyFKPosY = ((long) CPR_Y * c2DEC
     c44:	04950502 	ldreq	r0, [r5], #1282
     c48:	01020000 	tsteq	r2, r0
     c4c:	00046906 	andeq	r6, r4, r6, lsl #18
     c50:	002c0300 	eoreq	r0, ip, r0, lsl #6
     c54:	75040000 	strvc	r0, [r4]
     c58:	04003233 	streq	r3, [r0], #-563
     c5c:	00004a27 	andeq	r4, r0, r7, lsr #20
     c60:	07040200 	streq	r0, [r4, -r0, lsl #4]
     c64:	000041f2 	strdeq	r4, [r0], -r2
     c68:	36317504 	ldrtcc	r7, [r1], -r4, lsl #10
     c6c:	5c280400 	cfstrspl	mvf0, [r8]
     c70:	02000000 	andeq	r0, r0, #0	; 0x0
     c74:	02220702 	eoreq	r0, r2, #524288	; 0x80000
     c78:	75040000 	strvc	r0, [r4]
     c7c:	29040038 	stmdbcs	r4, {r3, r4, r5}
     c80:	0000006d 	andeq	r0, r0, sp, rrx
     c84:	67080102 	strvs	r0, [r8, -r2, lsl #2]
     c88:	05000004 	streq	r0, [r0, #-4]
     c8c:	00001f7f 	andeq	r1, r0, pc, ror pc
     c90:	006d2a04 	rsbeq	r2, sp, r4, lsl #20
     c94:	01060000 	tsteq	r6, r0
     c98:	00943804 	addseq	r3, r4, r4, lsl #16
     c9c:	07070000 	streq	r0, [r7, -r0]
     ca0:	00000014 	andeq	r0, r0, r4, lsl r0
     ca4:	00171007 	andseq	r1, r7, r7
     ca8:	05000100 	streq	r0, [r0, #-256]
     cac:	00000f61 	andeq	r0, r0, r1, ror #30
     cb0:	007f3804 	rsbseq	r3, pc, r4, lsl #16
     cb4:	04080000 	streq	r0, [r8]
     cb8:	1d590507 	cfldr64ne	mvdx0, [r9, #-28]
     cbc:	63050000 	movwvs	r0, #20480	; 0x5000
     cc0:	000000ad 	andeq	r0, r0, sp, lsr #1
     cc4:	f7070402 	undefined instruction 0xf7070402
     cc8:	05000041 	streq	r0, [r0, #-65]
     ccc:	00000efc 	strdeq	r0, [r0], -ip
     cd0:	00636405 	rsbeq	r6, r3, r5, lsl #8
     cd4:	01060000 	tsteq	r6, r0
     cd8:	00f22a06 	rscseq	r2, r2, r6, lsl #20
     cdc:	63090000 	movwvs	r0, #36864	; 0x9000
     ce0:	00005252 	andeq	r5, r0, r2, asr r2
     ce4:	4d526309 	ldclmi	3, cr6, [r2, #-36]
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * SinG4 / c4DEC
					+ (long) CPR_Z * c2DEC * CosG4 / c4DEC * SinA4 / c4DEC
							* SinB4 / c4DEC
					+ (long) CPR_Y * c2DEC * CosB4 / c4DEC * CosG4 / c4DEC))
			/ c2DEC;
}
     ce8:	63090100 	movwvs	r0, #37120	; 0x9100
     cec:	02004652 	andeq	r4, r0, #85983232	; 0x5200000
     cf0:	524c6309 	subpl	r6, ip, #603979776	; 0x24000000
     cf4:	63090300 	movwvs	r0, #37632	; 0x9300
     cf8:	04004d4c 	streq	r4, [r0], #-3404
     cfc:	464c6309 	strbmi	r6, [ip], -r9, lsl #6
     d00:	e2070500 	and	r0, r7, #0	; 0x0
     d04:	06000011 	undefined
     d08:	0f110a00 	svceq	0x00110a00
     d0c:	060c0000 	streq	r0, [ip], -r0
     d10:	0001236a 	andeq	r2, r1, sl, ror #6
     d14:	00780b00 	rsbseq	r0, r8, r0, lsl #22
     d18:	00256b06 	eoreq	r6, r5, r6, lsl #22
     d1c:	23020000 	movwcs	r0, #8192	; 0x2000
//FemurAngle1           - Output Angle of Femur in degrees
//TibiaAngle1           - Output Angle of Tibia in degrees
//CoxaAngle1            - Output Angle of Coxa in degrees
//--------------------------------------------------------------------
void LegIK(short IKFeetPosX, short IKFeetPosY, short IKFeetPosZ,
		byte LegIKLegNr) {
     d20:	00790b00 	rsbseq	r0, r9, r0, lsl #22
     d24:	00256c06 	eoreq	r6, r5, r6, lsl #24
     d28:	23020000 	movwcs	r0, #8192	; 0x2000
	long Temp1;
	long Temp2;
	long T3;

	//Calculate IKCoxaAngle and IKFeetPosXZ
	GetATan2(IKFeetPosX, IKFeetPosZ);
     d2c:	007a0b04 	rsbseq	r0, sl, r4, lsl #22
	CoxaAngle1[LegIKLegNr] = (((long) Atan4 * 180) / 3141)
     d30:	00256d06 	eoreq	r6, r5, r6, lsl #26
     d34:	23020000 	movwcs	r0, #8192	; 0x2000
     d38:	07050008 	streq	r0, [r5, -r8]
     d3c:	06000015 	undefined
     d40:	0000f26e 	andeq	pc, r0, lr, ror #4
     d44:	10da0a00 	sbcsne	r0, sl, r0, lsl #20
     d48:	060e0000 	streq	r0, [lr], -r0
     d4c:	0001ab74 	andeq	sl, r1, r4, ror fp
     d50:	12ef0c00 	rscne	r0, pc, #0	; 0x0
     d54:	75060000 	strvc	r0, [r6]
	//Length between the Coxa and tars [foot]
	IKFeetPosXZ = XYhyp2 / c2DEC;

	//Using GetAtan2 for solving IKA1 and IKSW
	//IKA14 - Angle between SW line and the ground in radians
	IKA14 = GetATan2(IKFeetPosY - TarsOffsetY,
     d58:	0000002c 	andeq	r0, r0, ip, lsr #32
     d5c:	0c002302 	stceq	3, cr2, [r0], {2}
     d60:	00001311 	andeq	r1, r0, r1, lsl r3
     d64:	00747606 	rsbseq	r7, r4, r6, lsl #12
     d68:	23020000 	movwcs	r0, #8192	; 0x2000
     d6c:	0f910c02 	svceq	0x00910c02
     d70:	77060000 	strvc	r0, [r6, -r0]

	//IKSW2 - Length between femur axis and tars
	IKSW2 = XYhyp2;

	//IKA2 - Angle of the line S>W with respect to the femur in radians
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     d74:	00000074 	andeq	r0, r0, r4, ror r0
     d78:	0c032302 	stceq	3, cr2, [r3], {2}
     d7c:	0000108b 	andeq	r1, r0, fp, lsl #1
     d80:	00747806 	rsbseq	r7, r4, r6, lsl #16
					* (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))) * c4DEC
			+ ((long) IKSW2 * IKSW2));
	Temp2 = (long) (2 * (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])) * c2DEC
			* (unsigned long) IKSW2;
	T3 = Temp1 / (Temp2 / c4DEC);
	IKA24 = GetArcCos(T3);
     d84:	23020000 	movwcs	r0, #8192	; 0x2000
     d88:	152e0c04 	strne	r0, [lr, #-3076]!
     d8c:	79060000 	stmdbvc	r6, {}
     d90:	00000074 	andeq	r0, r0, r4, ror r0
     d94:	0c052302 	stceq	3, cr2, [r5], {2}
     d98:	00000df2 	strdeq	r0, [r0], -r2
     d9c:	00747a06 	rsbseq	r7, r4, r6, lsl #20
     da0:	23020000 	movwcs	r0, #8192	; 0x2000
     da4:	124e0c06 	subne	r0, lr, #1536	; 0x600
     da8:	7b060000 	blvc	180db0 <__Stack_Size+0x1809b0>
     dac:	00000074 	andeq	r0, r0, r4, ror r0
     db0:	0c072302 	stceq	3, cr2, [r7], {2}
     db4:	00001706 	andeq	r1, r0, r6, lsl #14

	FemurAngle1[LegIKLegNr] = -(long) (IKA14 + IKA24) * 180
     db8:	01ab7e06 	undefined instruction 0x01ab7e06
     dbc:	23020000 	movwcs	r0, #8192	; 0x2000
     dc0:	740d0008 	strvc	r0, [sp], #-8
     dc4:	bb000000 	bllt	dcc <__Stack_Size+0x9cc>
     dc8:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     dcc:	0000009f 	muleq	r0, pc, r0
     dd0:	39050005 	stmdbcc	r5, {r0, r2}
     dd4:	0600000d 	streq	r0, [r0], -sp
     dd8:	00012e80 	andeq	r2, r1, r0, lsl #29
			/ 3141+ 900 + CFEMURHORNOFFSET1(LegIKLegNr);  //Normal

	//IKTibiaAngle
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     ddc:	15ae0a00 	strne	r0, [lr, #2560]!
	Temp2 = (long) (2 * (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])) * c2DEC
			* (unsigned long) IKSW2;
	T3 = Temp1 / (Temp2 / c4DEC);
	IKA24 = GetArcCos(T3);

	FemurAngle1[LegIKLegNr] = -(long) (IKA14 + IKA24) * 180
     de0:	06640000 	strbteq	r0, [r4], -r0
			/ 3141+ 900 + CFEMURHORNOFFSET1(LegIKLegNr);  //Normal

	//IKTibiaAngle
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     de4:	0002cf8b 	andeq	ip, r2, fp, lsl #31
     de8:	15250c00 	strne	r0, [r5, #-3072]!
			+ ((long) (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr])
					* (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))) * c4DEC
			- ((long) IKSW2 * IKSW2));
	Temp2 = 2 * ((long) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])))
			* (long) ((byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]));
	GetArcCos(Temp1 / Temp2);
     dec:	8c060000 	stchi	0, cr0, [r6], {0}
     df0:	000000b4 	strheq	r0, [r0], -r4
     df4:	0c002302 	stceq	3, cr2, [r0], {2}
     df8:	00001419 	andeq	r1, r0, r9, lsl r4
     dfc:	00b48d06 	adcseq	r8, r4, r6, lsl #26
     e00:	23020000 	movwcs	r0, #8192	; 0x2000
     e04:	12220c01 	eorne	r0, r2, #256	; 0x100
     e08:	8f060000 	svchi	0x00060000

	TibiaAngle1[LegIKLegNr] = -(1450 - (long) AngleRad4 * 180 / 3141
     e0c:	00000123 	andeq	r0, r0, r3, lsr #2
     e10:	0c042302 	stceq	3, cr2, [r4], {2}
     e14:	00000ee4 	andeq	r0, r0, r4, ror #29
     e18:	01239006 	teqeq	r3, r6
     e1c:	23020000 	movwcs	r0, #8192	; 0x2000
     e20:	128c0c10 	addne	r0, ip, #4096	; 0x1000
     e24:	93060000 	movwls	r0, #24576	; 0x6000
     e28:	00000123 	andeq	r0, r0, r3, lsr #2
			+ CTIBIAHORNOFFSET1(LegIKLegNr)); //!!!!!!!!!!!!145 instead of 1800

	//Set the Solution quality
	if (IKSW2
     e2c:	0c1c2302 	ldceq	3, cr2, [ip], {2}
			- ((long) IKSW2 * IKSW2));
	Temp2 = 2 * ((long) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])))
			* (long) ((byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]));
	GetArcCos(Temp1 / Temp2);

	TibiaAngle1[LegIKLegNr] = -(1450 - (long) AngleRad4 * 180 / 3141
     e30:	00000d67 	andeq	r0, r0, r7, ror #26
			+ CTIBIAHORNOFFSET1(LegIKLegNr)); //!!!!!!!!!!!!145 instead of 1800

	//Set the Solution quality
	if (IKSW2
     e34:	00749606 	rsbseq	r9, r4, r6, lsl #12
     e38:	23020000 	movwcs	r0, #8192	; 0x2000
     e3c:	0f580c28 	svceq	0x00580c28
     e40:	97060000 	strls	r0, [r6, -r0]
     e44:	00000074 	andeq	r0, r0, r4, ror r0
			< ((word) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
					+ (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]) - 30)
					* c2DEC))
		IKSolution = 1;
     e48:	0c292302 	stceq	3, cr2, [r9], #-8
	else {
		if (IKSW2
     e4c:	000010a9 	andeq	r1, r0, r9, lsr #1
     e50:	01bb9806 	undefined instruction 0x01bb9806
				< ((word) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
						+ (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))
						* c2DEC))
			IKSolutionWarning = 1;
     e54:	23020000 	movwcs	r0, #8192	; 0x2000
     e58:	16270c2a 	strtne	r0, [r7], -sl, lsr #24
		else
			IKSolutionError = 1;
     e5c:	9a060000 	bls	180e64 <__Stack_Size+0x180a64>
	}

}
     e60:	0000002c 	andeq	r0, r0, ip, lsr #32
     e64:	0c382302 	ldceq	3, cr2, [r8], #-8
     e68:	00000fb0 	strheq	r0, [r0], -r0
     e6c:	01239b06 	teqeq	r3, r6, lsl #22
     e70:	23020000 	movwcs	r0, #8192	; 0x2000
     e74:	17c80c3c 	undefined
     e78:	9f060000 	svcls	0x00060000
     e7c:	00000074 	andeq	r0, r0, r4, ror r0
     e80:	0c482302 	mcrreq	3, 0, r2, r8, cr2
     e84:	000017c4 	andeq	r1, r0, r4, asr #15
     e88:	0074a006 	rsbseq	sl, r4, r6
     e8c:	23020000 	movwcs	r0, #8192	; 0x2000
     e90:	163d0c49 	ldrtne	r0, [sp], -r9, asr #24
     e94:	a1060000 	tstge	r6, r0
     e98:	00000123 	andeq	r0, r0, r3, lsr #2
     e9c:	0c4c2302 	mcrreq	3, 0, r2, ip, cr2
     ea0:	00001779 	andeq	r1, r0, r9, ror r7
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ea4:	00b4a206 	adcseq	sl, r4, r6, lsl #4
	if (sVal < s) {
     ea8:	23020000 	movwcs	r0, #8192	; 0x2000
     eac:	0e120c58 	mrceq	12, 0, r0, cr2, cr8, {2}
		return s;
	}

	s = (short) pgm_read_word(sMax);
     eb0:	a6060000 	strge	r0, [r6], -r0
     eb4:	000000b4 	strheq	r0, [r0], -r4
     eb8:	0c592302 	mrrceq	3, 0, r2, r9, cr2

		return s;
	}
	return sVal;

}
     ebc:	00000cfa 	strdeq	r0, [r0], -sl
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     ec0:	0074a906 	rsbseq	sl, r4, r6, lsl #18
}

//--------------------------------------------------------------------
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
     ec4:	23020000 	movwcs	r0, #8192	; 0x2000
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     ec8:	13a40c5a 	undefined instruction 0x13a40c5a
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ecc:	aa060000 	bge	180ed4 <__Stack_Size+0x180ad4>
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
     ed0:	000000a2 	andeq	r0, r0, r2, lsr #1
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ed4:	0c5c2302 	mrrceq	3, 0, r2, ip, cr2
	if (sVal < s) {
     ed8:	0000167f 	andeq	r1, r0, pc, ror r6
     edc:	0074ab06 	rsbseq	sl, r4, r6, lsl #22
     ee0:	23020000 	movwcs	r0, #8192	; 0x2000
		return s;
	}

	s = (short) pgm_read_word(sMax);
     ee4:	d0050060 	andle	r0, r5, r0, rrx
     ee8:	06000012 	undefined
     eec:	0001c6b1 	strheq	ip, [r1], -r1
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
     ef0:	01710f00 	cmneq	r1, r0, lsl #30
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ef4:	0a010000 	beq	40efc <__Stack_Size+0x40afc>
	if (sVal < s) {
     ef8:	00031120 	andeq	r1, r3, r0, lsr #2
     efc:	05b40700 	ldreq	r0, [r4, #1792]!
     f00:	07000000 	streq	r0, [r0, -r0]
		return s;
	}

	s = (short) pgm_read_word(sMax);
     f04:	000006a6 	andeq	r0, r0, r6, lsr #13
     f08:	00e40701 	rsceq	r0, r4, r1, lsl #14
     f0c:	07020000 	streq	r0, [r2, -r0]
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     f10:	00000182 	andeq	r0, r0, r2, lsl #3
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
     f14:	02110703 	andseq	r0, r1, #786432	; 0xc0000
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     f18:	07040000 	streq	r0, [r4, -r0]
	if (sVal < s) {
     f1c:	0000031b 	andeq	r0, r0, fp, lsl r3
     f20:	024a0705 	subeq	r0, sl, #1310720	; 0x140000
     f24:	00060000 	andeq	r0, r6, r0
		return s;
	}

	s = (short) pgm_read_word(sMax);
     f28:	54070106 	strpl	r0, [r7], #-262
     f2c:	000003a8 	andeq	r0, r0, r8, lsr #7
     f30:	000f6b07 	andeq	r6, pc, r7, lsl #22
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
				FemurAngle1[LegIndex], &cFemurMin1[LegIndex],
				&cFemurMax1[LegIndex]);
		TibiaAngle1[LegIndex] = CheckServoAngleBounds(s++,
     f34:	a1070100 	tstge	r7, r0, lsl #2
     f38:	02000011 	andeq	r0, r0, #17	; 0x11
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     f3c:	00144007 	andseq	r4, r4, r7
     f40:	c3070300 	movwgt	r0, #29440	; 0x7300
				TibiaAngle1[LegIndex], &cTibiaMin1[LegIndex],
				&cTibiaMax1[LegIndex]);

	}
#endif
}
     f44:	0400000e 	streq	r0, [r0], #-14
     f48:	000e4b07 	andeq	r4, lr, r7, lsl #22
     f4c:	bd070500 	cfstr32lt	mvfx0, [r7]
     f50:	06000010 	undefined
     f54:	000eb007 	andeq	fp, lr, r7
     f58:	f5070700 	undefined instruction 0xf5070700
     f5c:	0c000016 	stceq	0, cr0, [r0], {22}
     f60:	00175107 	andseq	r5, r7, r7, lsl #2
     f64:	ef070d00 	svc	0x00070d00
     f68:	0e000015 	mcreq	0, 0, r0, cr0, cr5, {0}
     f6c:	000d5707 	andeq	r5, sp, r7, lsl #14
// SmoothControl (From Zenta) -  This function makes the body
//            rotation and translation much smoother
//--------------------------------------------------------------------
short SmoothControl(short CtrlMoveInp, short CtrlMoveOut, byte CtrlDivider) {

	if (CtrlMoveOut < (CtrlMoveInp - 4))
     f70:	7d070f00 	stcvc	15, cr0, [r7]
     f74:	10000014 	andne	r0, r0, r4, lsl r0
		return CtrlMoveOut + abs((CtrlMoveOut - CtrlMoveInp) / CtrlDivider);
     f78:	00115807 	andseq	r5, r1, r7, lsl #16
     f7c:	16071100 	strne	r1, [r7], -r0, lsl #2
     f80:	12000015 	andne	r0, r0, #21	; 0x15
     f84:	00171507 	andseq	r1, r7, r7, lsl #10
     f88:	62071300 	andvs	r1, r7, #0	; 0x0
     f8c:	14000012 	strne	r0, [r0], #-18
     f90:	0010e707 	andseq	lr, r0, r7, lsl #14
	else if (CtrlMoveOut > (CtrlMoveInp + 4))
     f94:	4e071500 	cfsh32mi	mvfx1, mvfx7, #0
		return CtrlMoveOut - abs((CtrlMoveOut - CtrlMoveInp) / CtrlDivider);
     f98:	1600000c 	strne	r0, [r0], -ip
     f9c:	000d9607 	andeq	r9, sp, r7, lsl #12
     fa0:	43071700 	movwmi	r1, #30464	; 0x7700
     fa4:	83000016 	movwhi	r0, #22	; 0x16
     fa8:	10f50701 	rscsne	r0, r5, r1, lsl #14
     fac:	01840000 	orreq	r0, r4, r0
     fb0:	0016bb07 	andseq	fp, r6, r7, lsl #22

	return CtrlMoveInp;
}
     fb4:	07019200 	streq	r9, [r1, -r0, lsl #4]
// GetLegsXZLength -
//--------------------------------------------------------------------
word g_wLegsXZLength = 0xffff;
word GetLegsXZLength(void) {
	// Could save away or could do a little math on one leg...
	if (g_wLegsXZLength != 0xffff)
     fb8:	000011b8 	strheq	r1, [r0], -r8
     fbc:	060001d0 	undefined
     fc0:	06cf0702 	strbeq	r0, [pc], r2, lsl #14

//--------------------------------------------------------------------
// GetLegsXZLength -
//--------------------------------------------------------------------
word g_wLegsXZLength = 0xffff;
word GetLegsXZLength(void) {
     fc4:	07000004 	streq	r0, [r0, -r4]
	// Could save away or could do a little math on one leg...
	if (g_wLegsXZLength != 0xffff)
		return g_wLegsXZLength;

	return isqrt32((LegPosX[0] * LegPosX[0]) + (LegPosZ[0] * LegPosZ[0]));
     fc8:	00000680 	andeq	r0, r0, r0, lsl #13
     fcc:	04870701 	streq	r0, [r7], #1793
     fd0:	07020000 	streq	r0, [r2, -r0]
     fd4:	00000310 	andeq	r0, r0, r0, lsl r3
     fd8:	068e0704 	streq	r0, [lr], r4, lsl #14
     fdc:	07080000 	streq	r0, [r8, -r0]
}
     fe0:	000004cb 	andeq	r0, r0, fp, asr #9
     fe4:	01440710 	cmpeq	r4, r0, lsl r7
     fe8:	07200000 	streq	r0, [r0, -r0]!
     fec:	0000058c 	andeq	r0, r0, ip, lsl #11

#ifndef MAX_XZ_LEG_ADJUST
#define MAX_XZ_LEG_ADJUST   (word)(cCoxaLength[0]+cTibiaLength[0] + cFemurLength[0]/4)
#endif

void AdjustLegPositions(word XZLength1) {
     ff0:	030700c0 	movweq	r0, #28864	; 0x70c0
     ff4:	80000002 	andhi	r0, r0, r2
     ff8:	06c10701 	strbeq	r0, [r1], r1, lsl #14
     ffc:	02800000 	addeq	r0, r0, #0	; 0x0
    1000:	00045907 	andeq	r5, r4, r7, lsl #18
		XZLength1 = MAX_XZ_LEG_ADJUST;
	if (XZLength1 < MIN_XZ_LEG_ADJUST)
		XZLength1 = MIN_XZ_LEG_ADJUST;

	// see if same length as when we came in
	if (XZLength1 == g_wLegsXZLength)
    1004:	07048000 	streq	r8, [r4, -r0]
    1008:	00000026 	andeq	r0, r0, r6, lsr #32
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		GetSinCos((short) pgm_read_word(&cCoxaAngle1[LegIndex]));

		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
    100c:	a5070880 	strge	r0, [r7, #-2176]

	// see if same length as when we came in
	if (XZLength1 == g_wLegsXZLength)
		return;

	g_wLegsXZLength = XZLength1;
    1010:	80000002 	andhi	r0, r0, r2

	u8 LegIndex;
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		GetSinCos((short) pgm_read_word(&cCoxaAngle1[LegIndex]));
    1014:	01350710 	teqeq	r5, r0, lsl r7
    1018:	20800000 	addcs	r0, r0, r0

		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
    101c:	07011000 	streq	r1, [r1, -r0]
    1020:	053c016e 	ldreq	r0, [ip, #-366]!
    1024:	92070000 	andls	r0, r7, #0	; 0x0
    1028:	00000002 	andeq	r0, r0, r2
    102c:	00027f07 	andeq	r7, r2, r7, lsl #30
    1030:	bc070100 	stflts	f0, [r7], {0}
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
    1034:	02000005 	andeq	r0, r0, #5	; 0x5
    1038:	00027007 	andeq	r7, r2, r7
    103c:	b8070300 	stmdalt	r7, {r8, r9}
    1040:	04000000 	streq	r0, [r0]
    1044:	0000c607 	andeq	ip, r0, r7, lsl #12
    1048:	97070500 	strls	r0, [r7, -r0, lsl #10]
		return;

	g_wLegsXZLength = XZLength1;

	u8 LegIndex;
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    104c:	06000005 	streq	r0, [r0], -r5
		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
	}

	// Make sure we cycle through one gait to have the legs all move into their new locations...
	g_InControlState.ForceGaitStepCnt = g_InControlState.gaitCur.StepsInGait;
    1050:	00057707 	andeq	r7, r5, r7, lsl #14
    1054:	a0070700 	andge	r0, r7, r0, lsl #14
}
    1058:	08000001 	stmdaeq	r0, {r0}
    105c:	00018a07 	andeq	r8, r1, r7, lsl #20
    1060:	34070900 	strcc	r0, [r7], #-2304
    1064:	0a000006 	beq	1084 <__Stack_Size+0xc84>
    1068:	00049f07 	andeq	r9, r4, r7, lsl #30
    106c:	40070b00 	andmi	r0, r7, r0, lsl #22
    1070:	0c000004 	stceq	0, cr0, [r0], {4}
    1074:	00010307 	andeq	r0, r1, r7, lsl #6
    1078:	ea070d00 	b	1c4480 <__Stack_Size+0x1c4080>
		g_InControlState.aCoxaInitAngle1[LegIndex] = (short)pgm_read_word(&cCoxaAngle1[LegIndex]);
#endif
	}
	g_wLegsXZLength = 0xffff;
#endif
}
    107c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
		else if (g_InControlState.aCoxaInitAngle1[LegIndex] < -700)
		g_InControlState.aCoxaInitAngle1[LegIndex] = -700;
	}
	g_wLegsXZLength = 0xffff;
#endif
}
    1080:	0002d907 	andeq	sp, r2, r7, lsl #18
//     to be appropriate for the current y location of the body...
//--------------------------------------------------------------------

u8 g_iLegInitIndex = 0x00; // remember which index we are currently using...

void AdjustLegPositionsToBodyHeight() {
    1084:	8c070f00 	stchi	15, cr0, [r7], {0}
    1088:	10000000 	andne	r0, r0, r0
#ifdef CNT_HEX_INITS
	// Lets see which of our units we should use...
	// Note: We will also limit our body height here...
	if (g_InControlState.BodyPos.y
    108c:	0004bd07 	andeq	fp, r4, r7, lsl #26
			> (short) pgm_read_byte(&g_abHexMaxBodyY[CNT_HEX_INITS-1]))
		g_InControlState.BodyPos.y = (short) pgm_read_byte(
    1090:	02071100 	andeq	r1, r7, #0	; 0x0
				&g_abHexMaxBodyY[CNT_HEX_INITS-1]);

	u8 i;
	word XZLength1 = pgm_read_byte(&g_abHexIntXZ[CNT_HEX_INITS-1]);
	for (i = 0; i < (CNT_HEX_INITS - 1); i++) { // Don't need to look at last entry as we already init to assume this one...
		if (g_InControlState.BodyPos.y
    1094:	12000006 	andne	r0, r0, #6	; 0x6
    1098:	00003407 	andeq	r3, r0, r7, lsl #8
				<= (short) pgm_read_byte(&g_abHexMaxBodyY[i])) {
			XZLength1 = pgm_read_byte(&g_abHexIntXZ[i]);
			break;
		}
	}
	if (i != g_iLegInitIndex) {
    109c:	11071300 	tstne	r7, r0, lsl #6
				&g_abHexMaxBodyY[CNT_HEX_INITS-1]);

	u8 i;
	word XZLength1 = pgm_read_byte(&g_abHexIntXZ[CNT_HEX_INITS-1]);
	for (i = 0; i < (CNT_HEX_INITS - 1); i++) { // Don't need to look at last entry as we already init to assume this one...
		if (g_InControlState.BodyPos.y
    10a0:	14000005 	strne	r0, [r0], #-5
    10a4:	0004fa07 	andeq	pc, r4, r7, lsl #20
    10a8:	23071500 	movwcs	r1, #29952	; 0x7500
				<= (short) pgm_read_byte(&g_abHexMaxBodyY[i])) {
			XZLength1 = pgm_read_byte(&g_abHexIntXZ[i]);
			break;
		}
	}
	if (i != g_iLegInitIndex) {
    10ac:	16000003 	strne	r0, [r0], -r3
		g_iLegInitIndex = i;  // remember the current index...
		AdjustLegPositions(XZLength1);
    10b0:	0002fb07 	andeq	pc, r2, r7, lsl #22
	}
#endif // CNT_HEX_INITS
}
    10b4:	2e071700 	cdpcs	7, 0, cr1, cr7, cr0, {0}
    10b8:	18000004 	stmdane	r0, {r2}
    10bc:	00006b07 	andeq	r6, r0, r7, lsl #22
}
//--------------------------------------------------------------------
//[CHECK VOLTAGE]
//Reads the input voltage and shuts down the bot when the power drops
byte s_bLVBeepCnt;
boolean CheckVoltage() {
    10c0:	73071900 	movwvc	r1, #30976	; 0x7900
    10c4:	1a000000 	bne	10cc <__Stack_Size+0xccc>
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10c8:	0002bf07 	andeq	fp, r2, r7, lsl #30

	// BUGBUG:: if voltage is 0 it failed to retrieve don't hang program...
	//    if (!Voltage)
	//      return;

	if (!g_fLowVoltageShutdown) {
    10cc:	60071b00 	andvs	r1, r7, r0, lsl #22
boolean CheckVoltage() {
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10d0:	1c000006 	stcne	0, cr0, [r0], {6}

	// BUGBUG:: if voltage is 0 it failed to retrieve don't hang program...
	//    if (!Voltage)
	//      return;

	if (!g_fLowVoltageShutdown) {
    10d4:	0001d207 	andeq	sp, r1, r7, lsl #4
boolean CheckVoltage() {
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10d8:	45071d00 	strmi	r1, [r7, #-3328]

	if (!g_fLowVoltageShutdown) {
		/**PrintString("Voltage : ");
		Printu32d(Voltage);
		PrintString("\n");*/
		if ((Voltage < cTurnOffVol) || (Voltage >= 1999)) {
    10dc:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    10e0:	00062007 	andeq	r2, r6, r7
    10e4:	ef071f00 	svc	0x00071f00


			//Turn off
			g_InControlState.BodyPos.x = 0;
    10e8:	20000005 	andcs	r0, r0, r5
			g_InControlState.TravelLength.x = 0;
			g_InControlState.TravelLength.z = 0;

#ifdef OPT_SINGLELEG
			g_InControlState.TravelLength.y = 0;
			g_InControlState.SelectedLeg = 255;
    10ec:	0005d107 	andeq	sp, r5, r7, lsl #2
    10f0:	00072100 	andeq	r2, r7, r0, lsl #2
#endif
			g_fLowVoltageShutdown = 1;
    10f4:	22000004 	andcs	r0, r0, #4	; 0x4
			s_bLVBeepCnt = 0;    // how many times we beeped...
    10f8:	0003e307 	andeq	lr, r3, r7, lsl #6
		if ((Voltage < cTurnOffVol) || (Voltage >= 1999)) {


			//Turn off
			g_InControlState.BodyPos.x = 0;
			g_InControlState.BodyPos.y = 0;
    10fc:	5a072300 	bpl	1c9d04 <__Stack_Size+0x1c9904>
			g_InControlState.BodyPos.z = 0;
			g_InControlState.BodyRot1.x = 0;
    1100:	24000003 	strcs	r0, [r0], #-3
			g_InControlState.BodyRot1.y = 0;
			g_InControlState.BodyRot1.z = 0;
    1104:	00034307 	andeq	r4, r3, r7, lsl #6
			g_InControlState.TravelLength.x = 0;
			g_InControlState.TravelLength.z = 0;
    1108:	5b072500 	blpl	1ca510 <__Stack_Size+0x1ca110>
#ifdef OPT_SINGLELEG
			g_InControlState.TravelLength.y = 0;
			g_InControlState.SelectedLeg = 255;
#endif
			g_fLowVoltageShutdown = 1;
			s_bLVBeepCnt = 0;    // how many times we beeped...
    110c:	26000005 	strcs	r0, [r0], -r5
			g_InControlState.fRobotOn = false;
    1110:	00054707 	andeq	r4, r5, r7, lsl #14
		}
#ifdef cTurnOnVol
	} else if ((Voltage > cTurnOnVol) && (Voltage < 1999)) {
    1114:	cf072700 	svcgt	0x00072700
    1118:	28000006 	stmdacs	r0, {r1, r2}

		g_fLowVoltageShutdown = 0;
    111c:	0006ae07 	andeq	sl, r6, r7, lsl #28
    1120:	12072900 	andne	r2, r7, #0	; 0x0

#endif
	} else {
		if (s_bLVBeepCnt < 5) {
    1124:	2a000000 	bcs	112c <__Stack_Size+0xd2c>
    1128:	00011d07 	andeq	r1, r1, r7, lsl #26
			s_bLVBeepCnt++;
    112c:	13072b00 	movwne	r2, #31488	; 0x7b00

			//MSound( 1, 45, 2000);
			Buzzed(45, 2000);
    1130:	2c000004 	stccs	0, cr0, [r0], {4}
    1134:	0001f407 	andeq	pc, r1, r7, lsl #8
    1138:	38072d00 	stmdacc	r7, {r8, sl, fp, sp}
		}
		mDelay(2000);
    113c:	2e000003 	cdpcs	0, 0, cr0, cr0, cr3, {0}
    1140:	0001eb07 	andeq	lr, r1, r7, lsl #22
    1144:	65072f00 	strvs	r2, [r7, #-3840]
	}
#endif

	return g_fLowVoltageShutdown;
}
    1148:	30000001 	andcc	r0, r0, r1
    114c:	00015907 	andeq	r5, r1, r7, lsl #18
    1150:	06003100 	streq	r3, [r0], -r0, lsl #2
    1154:	63480101 	movtvs	r0, #33025	; 0x8101
    1158:	07000005 	streq	r0, [r0, -r5]

//==============================================================================
// BackgroundProcess - Allows us to have some background processing for those
//    servo drivers that need us to do things like polling...
//==============================================================================
void BackgroundProcess(void) {
    115c:	000016b2 	strheq	r1, [r0], -r2
    1160:	18000700 	stmdane	r0, {r8, r9, sl}
	if (g_fAXSpeedControl)
    1164:	07010000 	streq	r0, [r1, -r0]
		return;  // nothing to do in this mode...

	if (ServosEnabled) {
		//DebugToggle(A3);
		BioloidControllerEx_interpolateStep(false); // Do our background stuff...
    1168:	00000da7 	andeq	r0, r0, r7, lsr #27
		Battery_Monitor_Alarm();
    116c:	18600702 	stmdane	r0!, {r1, r8, r9, sl}^
	}
}
    1170:	07030000 	streq	r0, [r3, -r0]
    1174:	00000cc3 	andeq	r0, r0, r3, asr #25
//Function that gets called from the main loop if the robot is not logically
//     on.  Gives us a chance to play some...
//--------------------------------------------------------------------
static u8 g_iIdleServoNum = (u8) - 1;
static u8 g_iIdleLedState = 1;  // what state to we wish to set...
void IdleTime(void) {
    1178:	01060004 	tsteq	r6, r4
    117c:	05844f01 	streq	r4, [r4, #3841]
	// Each time we call this set servos LED on or off...
	g_iIdleServoNum++;
    1180:	74070000 	strvc	r0, [r7]
	if (g_iIdleServoNum >= NUMSERVOS) {
    1184:	00000010 	andeq	r0, r0, r0, lsl r0
    1188:	000e5707 	andeq	r5, lr, r7, lsl #14
		g_iIdleServoNum = 0;
    118c:	07070100 	streq	r0, [r7, -r0, lsl #2]
		g_iIdleLedState = 1 - g_iIdleLedState;
    1190:	02000013 	andeq	r0, r0, #19	; 0x13
    1194:	00118907 	andseq	r8, r1, r7, lsl #18
	}
	dxl_write_byte(pgm_read_byte(&cPinTable[g_iIdleServoNum]), AXM_LED,
    1198:	11000300 	tstne	r0, r0, lsl #6
    119c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    11a0:	01120074 	tsteq	r2, r4, ror r0
    11a4:	00001798 	muleq	r0, r8, r7
    11a8:	01058503 	tsteq	r5, r3, lsl #10
			g_iIdleLedState);
	//ax12ReadPacket(6);  // get the response...


}
    11ac:	0000002c 	andeq	r0, r0, ip, lsr #32
    11b0:	0005d901 	andeq	sp, r5, r1, lsl #18
    11b4:	49731300 	ldmdbmi	r3!, {r8, r9, ip}^
    11b8:	84030044 	strhi	r0, [r3], #-68

//--------------------------------------------------------------------
//[SetRegOnAllServos] Function that is called to set the state of one
//  register in all of the servos, like Torque on...
//--------------------------------------------------------------------
void SetRegOnAllServos(u8 bReg, u8 bVal) {
    11bc:	00002c05 	andeq	r2, r0, r5, lsl #24
    11c0:	0cbe1400 	cfldrseq	mvf1, [lr]
    11c4:	84030000 	strhi	r0, [r3]
	 ax12write(bVal);

  }
  ax12write(0xff - (checksum % 256));
  setRX(0);*/
	 dxl_set_txpacket_id (BROADCAST_ID);
    11c8:	00002c05 	andeq	r2, r0, r5, lsl #24
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    11cc:	125d1400 	subsne	r1, sp, #0	; 0x0
	dxl_set_txpacket_parameter(0,bReg);
    11d0:	84030000 	strhi	r0, [r3]
    11d4:	0005d905 	andeq	sp, r5, r5, lsl #18
	dxl_set_txpacket_parameter(1,2);
    11d8:	12ea1400 	rscne	r1, sl, #0	; 0x0
    11dc:	85030000 	strhi	r0, [r3]
    11e0:	0005d905 	andeq	sp, r5, r5, lsl #18
  int i;
	for (i = 0; i < poseSize; i++) {
		byte id = pgm_read_byte(&cPinTable[i]);
		dxl_set_txpacket_parameter(2 + 3 * i, id);
    11e4:	00731500 	rsbseq	r1, r3, r0, lsl #10
    11e8:	2c058903 	stccs	9, cr8, [r5], {3}
    11ec:	00000000 	andeq	r0, r0, r0
    11f0:	003a0416 	eorseq	r0, sl, r6, lsl r4
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
    11f4:	01170000 	tsteq	r7, r0
    11f8:	00000f25 	andeq	r0, r0, r5, lsr #30
    11fc:	0101c801 	tsteq	r1, r1, lsl #16
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
    1200:	000005f9 	strdeq	r0, [r0], -r9
    1204:	00161318 	andseq	r1, r6, r8, lsl r3
    1208:	b4c80100 	strblt	r0, [r8], #256
	dxl_set_txpacket_parameter(1,2);
  int i;
	for (i = 0; i < poseSize; i++) {
		byte id = pgm_read_byte(&cPinTable[i]);
		dxl_set_txpacket_parameter(2 + 3 * i, id);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
    120c:	00000000 	andeq	r0, r0, r0
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
    1210:	11450119 	cmpne	r5, r9, lsl r1
	 dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0,bReg);
	dxl_set_txpacket_parameter(1,2);
  int i;
	for (i = 0; i < poseSize; i++) {
    1214:	f0030000 	undefined instruction 0xf0030000
    1218:	19010105 	stmdbne	r1, {r0, r2, r8}
    121c:	0016d701 	andseq	sp, r6, r1, lsl #14
		dxl_set_txpacket_parameter(2 + 3 * i, id);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
	}

	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
    1220:	03990300 	orrseq	r0, r9, #0	; 0x0
    1224:	011a0101 	tsteq	sl, r1, lsl #2
    1228:	00000e68 	andeq	r0, r0, r8, ror #28
#ifdef DEBUG_BIOLOIDEX
	PrintString("DriverAX12 --- SetRegOnAllServos ---\n");
#endif
	dxl_txrx_packet();
    122c:	0101b501 	tsteq	r1, r1, lsl #10

	u16 CommStatus = dxl_get_result();
    1230:	11fc011b 	mvnsne	r0, fp, lsl r1
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
    1234:	00030000 	andeq	r0, r3, r0
		PrintErrorCode();
    1238:	35010106 	strcc	r0, [r1, #-262]
	else
		PrintCommStatus(CommStatus);
    123c:	14000006 	strne	r0, [r0], #-6
#endif
}
    1240:	00001732 	andeq	r1, r0, r2, lsr r7
    1244:	84060003 	strhi	r0, [r6], #-3
    1248:	00000005 	andeq	r0, r0, r5
//--------------------------------------------------------------------
//[MakeSureServosAreOn] Function that is called to handle when you are
//  transistioning from servos all off to being on.  May need to read
//  in the current pose...
//--------------------------------------------------------------------
void MakeSureServosAreOn(void) {
    124c:	0f040119 	svceq	0x00040119

	if (ServosEnabled) {

		if (!g_fServosFree)
    1250:	1d030000 	stcne	0, cr0, [r3]
			return;    // we are not free

		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		if (g_fAXSpeedControl) {
    1254:	1c010103 	stfnes	f0, [r1], {3}
    1258:	0000060f 	andeq	r0, r0, pc, lsl #12
	...

			int i;
			for (i = 0; i < NUMSERVOS; i++) {
				g_awGoalAXPos[i] = dxl_read_word(pgm_read_byte(&cPinTable[i]),
    1264:	df1d5d01 	svcle	0x001d5d01
    1268:	00000005 	andeq	r0, r0, r5
						AXM_PRESENT_POSITION_L);
				mDelay(25);
    126c:	00000000 	andeq	r0, r0, r0
    1270:	01000000 	tsteq	r0, r0

		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		if (g_fAXSpeedControl) {

			int i;
			for (i = 0; i < NUMSERVOS; i++) {
    1274:	00066a5d 	andeq	r6, r6, sp, asr sl
    1278:	05ed1e00 	strbeq	r1, [sp, #3584]!
				g_awGoalAXPos[i] = dxl_read_word(pgm_read_byte(&cPinTable[i]),
						AXM_PRESENT_POSITION_L);
				mDelay(25);
			}
		} else {
			BioloidControllerEx_readPose();
    127c:	50010000 	andpl	r0, r1, r0
		}

		SetRegOnAllServos(AXM_TORQUE_ENABLE, 1);  // Use sync write to do it.
    1280:	63011f00 	movwvs	r1, #7936	; 0x1f00
    1284:	01000017 	tsteq	r0, r7, lsl r0

		CommanderInputController_AllowControllerInterrupts(true);
		g_fServosFree = false;
    1288:	000101d7 	ldrdeq	r0, [r1], -r7
	}

}
    128c:	00000000 	andeq	r0, r0, r0
    1290:	01000000 	tsteq	r0, r0
    1294:	fe01205d 	mcr2	0, 0, r2, cr1, cr13, {2}
    1298:	0100000d 	tsteq	r0, sp
    129c:	0000020b 	andeq	r0, r0, fp, lsl #4

//------------------------------------------------------------------------------------------
//[BeginServoUpdate] Does whatever preperation that is needed to starrt a move of our servos
//------------------------------------------------------------------------------------------
void BeginServoUpdate(void)    // Start the update
		{
    12a0:	00000000 	andeq	r0, r0, r0

	MakeSureServosAreOn();
    12a4:	5d010000 	stcpl	0, cr0, [r1]
	if (ServosEnabled) {

		if (g_fAXSpeedControl) {
    12a8:	13e60121 	mvnne	r0, #1073741832	; 0x40000008
    12ac:	12010000 	andne	r0, r1, #0	; 0x0

#ifdef USE_AX12_SPEED_CONTROL
			// If we are trying our own Servo control need to save away the new positions...
			byte i;
			for (i = 0; i < NUMSERVOS; i++) {
				g_awCurAXPos[i] = g_awGoalAXPos[i];
    12b0:	00000102 	andeq	r0, r0, r2, lsl #2
    12b4:	00000000 	andeq	r0, r0, r0
    12b8:	5d010000 	stcpl	0, cr0, [r1]
		if (g_fAXSpeedControl) {

#ifdef USE_AX12_SPEED_CONTROL
			// If we are trying our own Servo control need to save away the new positions...
			byte i;
			for (i = 0; i < NUMSERVOS; i++) {
    12bc:	000006b8 	strheq	r0, [r0], -r8
				g_awCurAXPos[i] = g_awGoalAXPos[i];
			}
#endif
		} else
			BioloidControllerEx_interpolateStep(true); // Make sure we call at least once
    12c0:	000c0f22 	andeq	r0, ip, r2, lsr #30
    12c4:	02120100 	andseq	r0, r2, #0	; 0x0

	}
}
    12c8:	0000004a 	andeq	r0, r0, sl, asr #32
    12cc:	23005001 	movwcs	r5, #1	; 0x1
    12d0:	000e8b01 	andeq	r8, lr, r1, lsl #22
    12d4:	01fb0200 	mvnseq	r0, r0, lsl #4
}

//--------------------------------------------------------------------
//[FREE SERVOS] Frees all the servos
//--------------------------------------------------------------------
void FreeServos(void) {
    12d8:	000000a2 	andeq	r0, r0, r2, lsr #1
	...

	if (!g_fServosFree) {
		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		SetRegOnAllServos(AXM_TORQUE_ENABLE, 0);  // do this as one statement...
    12e4:	07265d01 	streq	r5, [r6, -r1, lsl #26]!
    12e8:	2f240000 	svccs	0x00240000
    12ec:	02000010 	andeq	r0, r0, #16	; 0x10
		byte i;
		for (i = 0; i < NUMSERVOS; i++) {
			Relax(pgm_read_byte(&cPinTable[i]));
    12f0:	0000a2fb 	strdeq	sl, [r0], -fp
    12f4:	00013400 	andeq	r3, r1, r0, lsl #8
    12f8:	15d02500 	ldrbne	r2, [r0, #1280]

	if (!g_fServosFree) {
		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		SetRegOnAllServos(AXM_TORQUE_ENABLE, 0);  // do this as one statement...
		byte i;
		for (i = 0; i < NUMSERVOS; i++) {
    12fc:	fb020000 	blx	81306 <__Stack_Size+0x80f06>
			Relax(pgm_read_byte(&cPinTable[i]));
		}
		CommanderInputController_AllowControllerInterrupts(true);
		g_fServosFree = true;
    1300:	000000a2 	andeq	r0, r0, r2, lsr #1
	}
}
    1304:	8d255101 	stfhis	f5, [r5, #-4]!
    1308:	02000014 	andeq	r0, r0, #20	; 0x14
    130c:	0000a2fb 	strdeq	sl, [r0], -fp
extern void SetRegOnAllServos(u8 bReg, u8 bVal);

//--------------------------------------------------------------------
//Init
//--------------------------------------------------------------------
void Servo_Init(void) {
    1310:	26520100 	ldrbcs	r0, [r2], -r0, lsl #2
	// First lets get the actual servo positions for all of our servos...
	//pinMode(0, OUTPUT);
	g_fServosFree = true;
    1314:	000017de 	ldrdeq	r1, [r0], -lr

  poseSize = NUMSERVOS;
    1318:	00a2fc02 	adceq	pc, r2, r2, lsl #24
    131c:	01520000 	cmpeq	r2, r0
  BioloidControllerEx_readPose();
    1320:	0f270000 	svceq	0x00270000
#ifdef cVoltagePin
	for (byte i=0; i < 8; i++)
	GetBatteryVoltage();  // init the voltage pin
#endif

	g_fAXSpeedControl = false;
    1324:	02000015 	andeq	r0, r0, #21	; 0x15
    1328:	00003ffd 	strdeq	r3, [r0], -sp



	// Added - try to speed things up later if we do a query...
	SetRegOnAllServos(AXM_RETURN_DELAY_TIME, 0); // tell servos to give us back their info as quick as they can...
    132c:	11192600 	tstne	r9, r0, lsl #12
    1330:	fe020000 	cdp2	0, 0, cr0, cr2, cr0, {0}

}
    1334:	000000a2 	andeq	r0, r0, r2, lsr #1
    1338:	00000165 	andeq	r0, r0, r5, ror #2
    133c:	b1011f00 	tstlt	r1, r0, lsl #30
    1340:	03000013 	movweq	r0, #19	; 0x13

}

void setupPhoenix() {

	g_fShowDebugPrompt = true;
    1344:	000102c9 	andeq	r0, r1, r9, asr #5
void readSensors(){


}

void setupPhoenix() {
    1348:	00000000 	andeq	r0, r0, r0

	g_fShowDebugPrompt = true;
	g_fDebugOutput = false;
    134c:	01000000 	tsteq	r0, r0
    1350:	06351c5d 	undefined
	...
	BioloidControllerEx();

	// Init our ServoDriver
	Servo_Init();

	mDelay(10);
    135c:	5d010000 	stcpl	0, cr0, [r1]

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		LegPosX[LegIndex] = (short) pgm_read_word(&cInitPosX[LegIndex]); //Set start positions for each leg
    1360:	132d0128 	teqne	sp, #10	; 0xa
    1364:	5e030000 	cdppl	0, 0, cr0, cr3, cr0, {0}
		LegPosY[LegIndex] = (short) pgm_read_word(&cInitPosY[LegIndex]);
    1368:	00000103 	andeq	r0, r0, r3, lsl #2
    136c:	00000000 	andeq	r0, r0, r0
		LegPosZ[LegIndex] = (short) pgm_read_word(&cInitPosZ[LegIndex]);
    1370:	01780000 	cmneq	r8, r0

	mDelay(10);

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		LegPosX[LegIndex] = (short) pgm_read_word(&cInitPosX[LegIndex]); //Set start positions for each leg
    1374:	04290000 	strteq	r0, [r9]
    1378:	00000006 	andeq	r0, r0, r6
		LegPosY[LegIndex] = (short) pgm_read_word(&cInitPosY[LegIndex]);
    137c:	00000000 	andeq	r0, r0, r0
    1380:	97000000 	strls	r0, [r0, -r0]
		LegPosZ[LegIndex] = (short) pgm_read_word(&cInitPosZ[LegIndex]);
    1384:	2a000001 	bcs	1390 <__Stack_Size+0xf90>
    1388:	00131801 	andseq	r1, r3, r1, lsl #16
    138c:	03cb0300 	biceq	r0, fp, #0	; 0x0
	Servo_Init();

	mDelay(10);

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    1390:	00000001 	andeq	r0, r0, r1
    1394:	00000000 	andeq	r0, r0, r0
    1398:	0001c200 	andeq	ip, r1, r0, lsl #4

	ResetLegInitAngles();

	//Single leg control. Make sure no leg is selected
#ifdef OPT_SINGLELEG
	g_InControlState.SelectedLeg = 255; // No Leg selected
    139c:	0007ab00 	andeq	sl, r7, r0, lsl #22
    13a0:	11eb2b00 	mvnne	r2, r0, lsl #22
	g_InControlState.PrevSelectedLeg = 255;
    13a4:	cb030000 	blgt	c13ac <__Stack_Size+0xc0fac>
#endif
	//Body Positions
	g_InControlState.BodyPos.x = 0;
    13a8:	00007403 	andeq	r7, r0, r3, lsl #8
	g_InControlState.BodyPos.y = 0;
	g_InControlState.BodyPos.z = 0;
    13ac:	0001e100 	andeq	lr, r1, r0, lsl #2

//Body Rotations
	g_InControlState.BodyRot1.x = 0;
	g_InControlState.BodyRot1.y = 0;
    13b0:	0d8e2c00 	stceq	12, cr2, [lr]
	g_InControlState.BodyRot1.z = 0;
	g_InControlState.BodyRotOffset.x = 0;
    13b4:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
	g_InControlState.BodyRotOffset.y = 0; //Input Y offset value to adjust centerpoint of rotation
	g_InControlState.BodyRotOffset.z = 0;
    13b8:	00002c03 	andeq	r2, r0, r3, lsl #24

	//Gait
	g_InControlState.GaitType = 0;
    13bc:	0001f400 	andeq	pc, r1, r0, lsl #8
	g_InControlState.BalanceMode = 0;
    13c0:	01280000 	teqeq	r8, r0
	g_InControlState.LegLiftHeight = 50;
	g_InControlState.ForceGaitStepCnt = 0; // added to try to adjust starting positions depending on height...
    13c4:	00001635 	andeq	r1, r0, r5, lsr r6
	g_InControlState.GaitStep = 1;
    13c8:	0103a603 	tsteq	r3, r3, lsl #12
	...
	g_InControlState.BodyRotOffset.z = 0;

	//Gait
	g_InControlState.GaitType = 0;
	g_InControlState.BalanceMode = 0;
	g_InControlState.LegLiftHeight = 50;
    13d4:	00000280 	andeq	r0, r0, r0, lsl #5
void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {

		g_InControlState.gaitCur = APG[g_InControlState.GaitType];
    13d8:	13890128 	orrne	r0, r9, #10	; 0xa
    13dc:	4d030000 	stcmi	0, cr0, [r3]
    13e0:	00000104 	andeq	r0, r0, r4, lsl #2
//==============================================================================

// If both PS2 and XBee are defined then we will become secondary to the xbee
void CommanderInputController_Init(void) {

	g_BodyYOffset = 0;
    13e4:	00000000 	andeq	r0, r0, r0
    13e8:	029f0000 	addseq	r0, pc, #0	; 0x0
    13ec:	012a0000 	teqeq	sl, r0
	g_BodyYShift = 0;
	//begin(XBEE_BAUD);
	GPSeq = 0;  // init to something...
    13f0:	0000133e 	andeq	r1, r0, lr, lsr r3
    13f4:	01046b03 	tsteq	r4, r3, lsl #22
	...

	ControlMode = WALKMODE;
	HeightSpeedMode = NORM_NORM;
	//    DoubleHeightOn = false;
	DoubleTravelOn = false;
    1400:	000002be 	strheq	r0, [r0], -lr
	bJoystickWalkMode = 0;
    1404:	00000812 	andeq	r0, r0, r2, lsl r8
	GaitSelect();

	CommanderInputController_Init();

	// Servo Driver
	ServoMoveTime = 150;
    1408:	000fa62b 	andeq	sl, pc, fp, lsr #12
	g_InControlState.fRobotOn = 0;
    140c:	046b0300 	strbteq	r0, [fp], #-768
	g_fLowVoltageShutdown = false;
    1410:	0000002c 	andeq	r0, r0, ip, lsr #32

}
    1414:	000002dd 	ldrdeq	r0, [r0], -sp
    1418:	000fa32c 	andeq	sl, pc, ip, lsr #6
    141c:	046c0300 	strbteq	r0, [ip], #-768
    1420:	0000002c 	andeq	r0, r0, ip, lsr #32
    1424:	00000332 	andeq	r0, r0, r2, lsr r3
    1428:	95012d00 	strls	r2, [r1, #-3328]
    142c:	03000013 	movweq	r0, #19	; 0x13
    1430:	25010495 	strcs	r0, [r1, #-1173]
	...
    143c:	45000000 	strmi	r0, [r0]
    1440:	51000003 	tstpl	r0, r3
    1444:	2b000008 	blcs	146c <__Stack_Size+0x106c>
    1448:	00000f66 	andeq	r0, r0, r6, ror #30
    144c:	2c049503 	cfstr32cs	mvfx9, [r4], {3}
    1450:	64000000 	strvs	r0, [r0]
    1454:	2c000003 	stccs	0, cr0, [r0], {3}
    1458:	00001193 	muleq	r0, r3, r1
    145c:	b4049603 	strlt	r9, [r4], #-1539
    1460:	b9000000 	stmdblt	r0, {}
    1464:	00000003 	andeq	r0, r0, r3
//[CommitServoDriver Updates the positions of the servos - This outputs
//         as much of the command as we can without committing it.  This
//         allows us to once the previous update was completed to quickly
//        get the next command to start
//--------------------------------------------------------------------
void CommitServoDriver(word wMoveTime) {
    1468:	1787012e 	strne	r0, [r7, lr, lsr #2]
    146c:	b4030000 	strlt	r0, [r3]
    1470:	004a0104 	subeq	r0, sl, r4, lsl #2
	...
      }
      ax12write(0xff - (checksum % 256));
      setRX(0);
*/
  	    dxl_set_txpacket_id (BROADCAST_ID);
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    147c:	5d010000 	stcpl	0, cr0, [r1]
    1480:	000008a6 	andeq	r0, r0, r6, lsr #17
		dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
    1484:	03006e2f 	movweq	r6, #3631	; 0xe2f
    1488:	004a04b3 	strheq	r0, [sl], #-67
		dxl_set_txpacket_parameter(1, 2);
    148c:	03d70000 	bicseq	r0, r7, #0	; 0x0
    1490:	ad300000 	ldcge	0, cr0, [r0]
    1494:	0300000c 	movweq	r0, #12	; 0xc
    1498:	004a04b5 	strheq	r0, [sl], #-69
      int i;
      word wSpeed;
		for (i = 0; i < poseSize; i++) {
			wSpeed = CalculateAX12MoveSpeed(g_awCurAXPos[i], g_awGoalAXPos[i], wMoveTime);    // What order should we store these values?
    149c:	50010000 	andpl	r0, r1, r0
    14a0:	0018a730 	andseq	sl, r8, r0, lsr r7
    14a4:	04b60300 	ldrteq	r0, [r6], #768
    14a8:	0000004a 	andeq	r0, r0, sl, asr #32
			//dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
			byte id = pgm_read_byte(&cPinTable[i]);
			dxl_set_txpacket_parameter(2 + 3 * i, id);
    14ac:	c6305101 	ldrtgt	r5, [r0], -r1, lsl #2
    14b0:	03000013 	movweq	r0, #19	; 0x13
    14b4:	004a04b7 	strheq	r0, [sl], #-71
    14b8:	52010000 	andpl	r0, r1, #0	; 0x0
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(g_awGoalAXPos[i]));
    14bc:	5d012d00 	stcpl	13, cr2, [r1]
    14c0:	0300000c 	movweq	r0, #12	; 0xc
    14c4:	2c0104d0 	cfstrscs	mvf0, [r1], {208}
	...
			dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(g_awGoalAXPos[i]));
    14d0:	ea000000 	b	14d8 <__Stack_Size+0x10d8>
    14d4:	e5000003 	str	r0, [r0, #-3]
    14d8:	2b000008 	blcs	1500 <__Stack_Size+0x1100>
    14dc:	00001041 	andeq	r1, r0, r1, asr #32
    14e0:	2c04d003 	stccs	0, cr13, [r4], {3}
    14e4:	15000000 	strne	r0, [r0]
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(wSpeed));
    14e8:	2b000004 	blcs	1500 <__Stack_Size+0x1100>
    14ec:	00001047 	andeq	r1, r0, r7, asr #32
    14f0:	2c04d003 	stccs	0, cr13, [r4], {3}
		    dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(wSpeed));
    14f4:	33000000 	movwcc	r0, #0	; 0x0
    14f8:	00000004 	andeq	r0, r0, r4
    14fc:	0fcf012a 	svceq	0x00cf012a
    1500:	32030000 	andcc	r0, r3, #0	; 0x0
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
		dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
		dxl_set_txpacket_parameter(1, 2);
      int i;
      word wSpeed;
		for (i = 0; i < poseSize; i++) {
    1504:	00000104 	andeq	r0, r0, r4, lsl #2
    1508:	00000000 	andeq	r0, r0, r0
    150c:	04510000 	ldrbeq	r0, [r1]
    1510:	09780000 	ldmdbeq	r8!, {}^
			dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(g_awGoalAXPos[i]));
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(wSpeed));
		    dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(wSpeed));
		}

		dxl_set_txpacket_length((4 + 1) * poseSize + 4);
    1514:	b72b0000 	strlt	r0, [fp, -r0]!
    1518:	03000018 	movweq	r0, #24	; 0x18
    151c:	00250432 	eoreq	r0, r5, r2, lsr r4
#ifdef DEBUG_BIOLOIDEX
	PrintString("DriverAX12 --- CommitServoDriver ---\n");
#endif
		dxl_txrx_packet();
    1520:	047c0000 	ldrbteq	r0, [ip]

			u16 CommStatus = dxl_get_result();
    1524:	cd2b0000 	stcgt	0, cr0, [fp]
#ifdef USING_PC_UART
			if (CommStatus == DXL_RXSUCCESS)
    1528:	03000018 	movweq	r0, #24	; 0x18
				PrintErrorCode();
    152c:	00250432 	eoreq	r0, r5, r2, lsr r4
			else
				PrintCommStatus(CommStatus);
    1530:	048f0000 	streq	r0, [pc], #0	; 1538 <__Stack_Size+0x1138>
    1534:	c22b0000 	eorgt	r0, fp, #0	; 0x0
#endif
#endif
		} else {
			BioloidControllerEx_interpolateSetup(wMoveTime);
    1538:	03000018 	movweq	r0, #24	; 0x18

	}

	CommanderInputController_AllowControllerInterrupts(true);

}
    153c:	00250432 	eoreq	r0, r5, r2, lsr r4
    1540:	04a20000 	strteq	r0, [r2]
    1544:	e22b0000 	eor	r0, fp, #0	; 0x0
    1548:	03000016 	movweq	r0, #22	; 0x16
    154c:	00740432 	rsbseq	r0, r4, r2, lsr r4
    1550:	04c00000 	strbeq	r0, [r0]
	word wCoxaSDV;        // Coxa value in servo driver units
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    1554:	952c0000 	strls	r0, [ip]!
    1558:	03000012 	movweq	r0, #18	; 0x12
    155c:	00250433 	eoreq	r0, r5, r3, lsr r4
    1560:	04d30000 	ldrbeq	r0, [r3]
    1564:	ff310000 	undefined instruction 0xff310000


void OutputServoInfoForLeg(byte LegIndex, short sCoxaAngle1, short sFemurAngle1,
		short sTibiaAngle1)

		{
    1568:	0300000f 	movweq	r0, #15	; 0xf
	word wCoxaSDV;        // Coxa value in servo driver units
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    156c:	00250434 	eoreq	r0, r5, r4, lsr r4
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
    1570:	052c0000 	streq	r0, [ip]!
    1574:	03000010 	movweq	r0, #16	; 0x10
    1578:	00250435 	eoreq	r0, r5, r5, lsr r4
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    157c:	04e60000 	strbteq	r0, [r6]
    1580:	f9310000 	undefined instruction 0xf9310000
    1584:	0300000f 	movweq	r0, #15	; 0xf


void OutputServoInfoForLeg(byte LegIndex, short sCoxaAngle1, short sFemurAngle1,
		short sTibiaAngle1)

		{
    1588:	00250437 	eoreq	r0, r5, r7, lsr r4
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    158c:	2a000000 	bcs	1594 <__Stack_Size+0x1194>
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
    1590:	000de601 	andeq	lr, sp, r1, lsl #12
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    1594:	04eb0300 	strbteq	r0, [fp], #768
#ifdef USE_AX12_SPEED_CONTROL
			// Save away the new positions...
			g_awGoalAXPos[FIRSTCOXAPIN + LegIndex] = wCoxaSDV; // What order should we store these values?
			g_awGoalAXPos[FIRSTFEMURPIN + LegIndex] = wFemurSDV;
    1598:	00000001 	andeq	r0, r0, r1

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
#ifdef USE_AX12_SPEED_CONTROL
			// Save away the new positions...
			g_awGoalAXPos[FIRSTCOXAPIN + LegIndex] = wCoxaSDV; // What order should we store these values?
    159c:	00000000 	andeq	r0, r0, r0
			g_awGoalAXPos[FIRSTFEMURPIN + LegIndex] = wFemurSDV;
    15a0:	0004f900 	andeq	pc, r4, r0, lsl #18
			g_awGoalAXPos[FIRSTTIBIAPIN + LegIndex] = wTibiaSDV;
    15a4:	000a6900 	andeq	r6, sl, r0, lsl #18
    15a8:	18b72b00 	ldmne	r7!, {r8, r9, fp, sp}
    15ac:	eb030000 	bl	c15b4 <__Stack_Size+0xc11b4>

#endif
		} else {
			BioloidControllerEx_setNextPose(
    15b0:	00002c04 	andeq	r2, r0, r4, lsl #24
    15b4:	00052500 	andeq	r2, r5, r0, lsl #10
					pgm_read_byte(&cPinTable[FIRSTCOXAPIN + LegIndex]),
					wCoxaSDV);
			BioloidControllerEx_setNextPose(
    15b8:	18cd2b00 	stmiane	sp, {r8, r9, fp, sp}^
    15bc:	eb030000 	bl	c15c4 <__Stack_Size+0xc11c4>
    15c0:	00002c04 	andeq	r2, r0, r4, lsl #24
					pgm_read_byte(&cPinTable[FIRSTFEMURPIN + LegIndex]),
					wFemurSDV);
			BioloidControllerEx_setNextPose(
    15c4:	00053800 	andeq	r3, r5, r0, lsl #16
    15c8:	18c22b00 	stmiane	r2, {r8, r9, fp, sp}^
					wTibiaSDV);

		}
	}
	CommanderInputController_AllowControllerInterrupts(true); // Ok for hserial again...
}
    15cc:	eb030000 	bl	c15d4 <__Stack_Size+0xc11d4>
    15d0:	00002c04 	andeq	r2, r0, r4, lsl #24
    15d4:	00054b00 	andeq	r4, r5, r0, lsl #22
    15d8:	0ef22b00 	fconstdeq	d18, #32
    15dc:	eb030000 	bl	c15e4 <__Stack_Size+0xc11e4>

void StartUpdateServos() {
    15e0:	00002c04 	andeq	r2, r0, r4, lsl #24
	byte LegIndex;

	// First call off to the init...
	BeginServoUpdate();    // Start the update
    15e4:	00056900 	andeq	r6, r5, r0, lsl #18
    15e8:	0d292b00 	vstmdbeq	r9!, {d2-d1}
    15ec:	eb030000 	bl	c15f4 <__Stack_Size+0xc11f4>

	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		OutputServoInfoForLeg(LegIndex,
    15f0:	00007404 	andeq	r7, r0, r4, lsl #8
    15f4:	00058800 	andeq	r8, r5, r0, lsl #16
    15f8:	0c7c3100 	ldfeqe	f3, [ip]
    15fc:	ec030000 	stc	0, cr0, [r3], {0}
    1600:	00002c04 	andeq	r2, r0, r4, lsl #24
    1604:	13833100 	orrne	r3, r3, #0	; 0x0
    1608:	ed030000 	stc	0, cr0, [r3]
    160c:	00002c04 	andeq	r2, r0, r4, lsl #24
    1610:	0d332c00 	ldceq	12, cr2, [r3]
    1614:	ee030000 	cdp	0, 0, cr0, cr3, cr0, {0}
    1618:	00002c04 	andeq	r2, r0, r4, lsl #24
    161c:	0005a700 	andeq	sl, r5, r0, lsl #14
    1620:	14012c00 	strne	r2, [r1], #-3072
    1624:	ef030000 	svc	0x00030000
    1628:	00002c04 	andeq	r2, r0, r4, lsl #24
    162c:	0005ba00 	andeq	fp, r5, r0, lsl #20
    1630:	0fe23000 	svceq	0x00e23000
    1634:	f0030000 	undefined instruction 0xf0030000
    1638:	00002c04 	andeq	r2, r0, r4, lsl #24
    163c:	207d0200 	rsbscs	r0, sp, r0, lsl #4
    1640:	00167930 	andseq	r7, r6, r0, lsr r9
	byte LegIndex;

	// First call off to the init...
	BeginServoUpdate();    // Start the update

	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    1644:	04f10300 	ldrbteq	r0, [r1], #768
				cTibiaInv[LegIndex] ?
						-TibiaAngle1[LegIndex] : TibiaAngle1[LegIndex]);

	}

}
    1648:	0000002c 	andeq	r0, r0, ip, lsr #32
    164c:	2c247d02 	stccs	13, cr7, [r4], #-8
    1650:	00001295 	muleq	r0, r5, r2
    1654:	2c04f203 	sfmcs	f7, 1, [r4], {3}
    1658:	cd000000 	stcgt	0, cr0, [r0]
    165c:	2c000005 	stccs	0, cr0, [r0], {5}
    1660:	00000fff 	strdeq	r0, [r0], -pc
#else
word g_wLastVoltage = 0xffff;    // save the last voltage we retrieved...
byte g_bLegVoltage = 0;		// what leg did we last check?
unsigned long g_ulTimeLastBatteryVoltage;
#define VOLTAGE_REPEAT_MAX  3
word GetBatteryVoltage(void) {
    1664:	2c04f303 	stccs	3, cr15, [r4], {3}
	if (interpolating && (g_wLastVoltage != 0xffff)
    1668:	e0000000 	and	r0, r0, r0
    166c:	2c000005 	stccs	0, cr0, [r0], {5}
    1670:	00001005 	andeq	r1, r0, r5
    1674:	2c04f403 	cfstrscs	mvf15, [r4], {3}
    1678:	ff000000 	undefined instruction 0xff000000
    167c:	00000005 	andeq	r0, r0, r5
    1680:	0c14012a 	ldfeqs	f0, [r4], {42}
    1684:	35030000 	strcc	r0, [r3]
			&& ((getMillis() - g_ulTimeLastBatteryVoltage)
					< VOLTAGE_MAX_TIME_BETWEEN_CALLS))
		return g_wLastVoltage;
    1688:	00000105 	andeq	r0, r0, r5, lsl #2

	register u8 bLoopCnt = VOLTAGE_REPEAT_MAX;
	do {
		register word wVoltage = dxl_read_byte(1, AXM_PRESENT_VOLTAGE);
    168c:	00000000 	andeq	r0, r0, r0
    1690:	061e0000 	ldreq	r0, [lr], -r0
    1694:	0b190000 	bleq	64169c <__Stack_Size+0x64129c>
		if (wVoltage != 0xffff) {
			g_ulTimeLastBatteryVoltage = getMillis();
    1698:	c82b0000 	stmdagt	fp!, {}
			g_wLastVoltage = wVoltage * 10;
    169c:	03000014 	movweq	r0, #20	; 0x14

	register u8 bLoopCnt = VOLTAGE_REPEAT_MAX;
	do {
		register word wVoltage = dxl_read_byte(1, AXM_PRESENT_VOLTAGE);
		if (wVoltage != 0xffff) {
			g_ulTimeLastBatteryVoltage = getMillis();
    16a0:	002c0534 	eoreq	r0, ip, r4, lsr r5
			g_wLastVoltage = wVoltage * 10;
    16a4:	06490000 	strbeq	r0, [r9], -r0
		}
	} while (--bLoopCnt);

	return 0;

}
    16a8:	d32b0000 	teqle	fp, #0	; 0x0
    16ac:	03000014 	movweq	r0, #20	; 0x14
    16b0:	002c0534 	eoreq	r0, ip, r4, lsr r5
    16b4:	065c0000 	ldrbeq	r0, [ip], -r0
// ReadMsgs
//==============================================================================

/* process messages coming from Commander
 *  format = 0xFF RIGHT_H RIGHT_V LEFT_H LEFT_V BUTTONS EXT CHECKSUM */
int Commander_ReadMsgs() {
    16b8:	de2b0000 	cdple	0, 2, cr0, cr11, cr0, {0}
	 }
	 #endif
	 */
	//while (CheckZBNewArrive() > 0) {
	while (1) {
		if (zgb_rx_check_arduino() == 1) {
    16bc:	03000014 	movweq	r0, #20	; 0x14
    16c0:	002c0534 	eoreq	r0, ip, r4, lsr r5

			leftV = (signed char) (zgb_rx_data_right_V_());
    16c4:	067a0000 	ldrbteq	r0, [sl], -r0
    16c8:	fc2b0000 	stc2	0, cr0, [fp]
			leftH = (signed char) (zgb_rx_data_right_H_());
    16cc:	03000012 	movweq	r0, #18	; 0x12
    16d0:	00740535 	rsbseq	r0, r4, r5, lsr r5
			rightV = (signed char) (zgb_rx_data_left_V_());
    16d4:	068d0000 	streq	r0, [sp], r0
    16d8:	7b300000 	blvc	c016e0 <__Stack_Size+0xc012e0>
			rightH = (signed char) (zgb_rx_data_left_H_());
    16dc:	03000015 	movweq	r0, #21	; 0x15
    16e0:	004a0536 	subeq	r0, sl, r6, lsr r5
			buttons = zgb_rx_data_buttons();
    16e4:	57010000 	strpl	r0, [r1, -r0]
    16e8:	00178131 	andseq	r8, r7, r1, lsr r1
			ext = zgb_rx_data_extra();
    16ec:	05370300 	ldreq	r0, [r7, #-768]!
    16f0:	0000004a 	andeq	r0, r0, sl, asr #32

	}

	return 0;

}
    16f4:	0017e631 	andseq	lr, r7, r1, lsr r6
    16f8:	05380300 	ldreq	r0, [r8, #-768]!
    16fc:	0000004a 	andeq	r0, r0, sl, asr #32
    1700:	0017ae31 	andseq	sl, r7, r1, lsr lr
    1704:	05390300 	ldreq	r0, [r9, #-768]!
    1708:	0000002c 	andeq	r0, r0, ip, lsr #32
    170c:	000f7531 	andeq	r7, pc, r1, lsr r5
    1710:	053e0300 	ldreq	r0, [lr, #-768]!

//==============================================================================
// This is The main code to input function to read inputs from the Commander and then
//process any commands.
//==============================================================================
void CommanderInputController_ControlInput(void) {
    1714:	00000025 	andeq	r0, r0, r5, lsr #32

	// See if we have a new command available...
	if (Commander_ReadMsgs() > 0) {
    1718:	000f7b31 	andeq	r7, pc, r1, lsr fp
    171c:	053f0300 	ldreq	r0, [pc, #-768]!	; 1424 <__Stack_Size+0x1024>
    1720:	00000025 	andeq	r0, r0, r5, lsr #32
    1724:	00335415 	eorseq	r5, r3, r5, lsl r4
		// If we receive a valid message than turn robot on...
		boolean fAdjustLegPositions = false;
		short sLegInitXZAdjust = 0;
		short sLegInitAngleAdjust = 0;

		if (!g_InControlState.fRobotOn) {
    1728:	25054003 	strcs	r4, [r5, #-3]
    172c:	00000000 	andeq	r0, r0, r0
			g_InControlState.fRobotOn = true;
    1730:	00058b1d 	andeq	r8, r5, sp, lsl fp
	...
		}

		// [SWITCH MODES]

		// Cycle through modes...
		if ((buttons & BUT_LT) && !(buttonsPrev & BUT_LT)) {
    173c:	565d0100 	ldrbpl	r0, [sp], -r0, lsl #2
    1740:	3200000b 	andcc	r0, r0, #11	; 0xb
    1744:	0000059e 	muleq	r0, lr, r5
    1748:	000006ab 	andeq	r0, r0, fp, lsr #13
    174c:	0005aa1e 	andeq	sl, r5, lr, lsl sl

			if (++ControlMode >= MODECNT) {
    1750:	1e510100 	rdfnes	f0, f1, f0
    1754:	000005b6 	strheq	r0, [r0], -r6
    1758:	c2325201 	eorsgt	r5, r2, #268435456	; 0x10000000
    175c:	be000005 	cdplt	0, 0, cr0, cr0, cr5, {0}
				ControlMode = WALKMODE;    // cycled back around...
				Buzzed(50, 2000);
    1760:	33000006 	movwcc	r0, #6	; 0x6
    1764:	000005ce 	andeq	r0, r0, lr, asr #11
    1768:	000006dc 	ldrdeq	r0, [r0], -ip
				Buzzed(50, 3000);
    176c:	c0012a00 	andgt	r2, r1, r0, lsl #20
    1770:	0300000d 	movweq	r0, #13	; 0xd

			} else {
				Buzzed(50, 2000);
    1774:	0001059a 	muleq	r1, sl, r5
    1778:	00000000 	andeq	r0, r0, r0
    177c:	10000000 	andne	r0, r0, r0
			}
			if (ControlMode != SINGLELEGMODE)
    1780:	13000007 	movwne	r0, #7	; 0x7
    1784:	1500000c 	strne	r0, [r0, #-12]
				g_InControlState.SelectedLeg = 255;
    1788:	9c030073 	stcls	0, cr0, [r3], {115}
    178c:	00002c05 	andeq	r2, r0, r5, lsl #24
    1790:	058b3400 	streq	r3, [fp, #1024]

		}

		//[Common functions]
		//Switch Balance mode on/off
		if ((buttons & BUT_L4) && !(buttonsPrev & BUT_L4)) {
    1794:	00200000 	eoreq	r0, r0, r0
    1798:	9e030000 	cdpls	0, 0, cr0, cr3, cr0, {0}
    179c:	000bae05 	andeq	sl, fp, r5, lsl #28
    17a0:	0b433500 	bleq	10ceba8 <__Stack_Size+0x10ce7a8>
    17a4:	3c350000 	ldccc	0, cr0, [r5]
    17a8:	3500000b 	strcc	r0, [r0, #-11]

			g_InControlState.BalanceMode = !g_InControlState.BalanceMode;
    17ac:	00000b35 	andeq	r0, r0, r5, lsr fp
    17b0:	000b2c35 	andeq	r2, fp, r5, lsr ip
    17b4:	00383600 	eorseq	r3, r8, r0, lsl #12
    17b8:	ce330000 	cdpgt	0, 3, cr0, cr3, cr0, {0}
    17bc:	2f000005 	svccs	0x00000005
			if (g_InControlState.BalanceMode) {
    17c0:	00000007 	andeq	r0, r0, r7
				Buzzed(250, 1500);
    17c4:	058b3400 	streq	r3, [fp, #1024]
    17c8:	00500000 	subseq	r0, r0, r0
			} else {
				Buzzed(100, 2000);
    17cc:	a0030000 	andge	r0, r3, r0
    17d0:	000be205 	andeq	lr, fp, r5, lsl #4
				Buzzed(50, 4000);
    17d4:	0b433500 	bleq	10cebdc <__Stack_Size+0x10ce7dc>
    17d8:	3c350000 	ldccc	0, cr0, [r5]
    17dc:	3500000b 	strcc	r0, [r0, #-11]
			}
		}

		//Stand up, sit down
		if ((buttons & BUT_L5) && !(buttonsPrev & BUT_L5)) {
    17e0:	00000b35 	andeq	r0, r0, r5, lsr fp
    17e4:	000b2c35 	andeq	r2, fp, r5, lsr ip
    17e8:	00683600 	rsbeq	r3, r8, r0, lsl #12
    17ec:	ce330000 	cdpgt	0, 3, cr0, cr3, cr0, {0}
    17f0:	84000005 	strhi	r0, [r0], #-5
    17f4:	00000007 	andeq	r0, r0, r7
			if (g_BodyYOffset > 0)
    17f8:	058b3700 	streq	r3, [fp, #1792]
    17fc:	00800000 	addeq	r0, r0, r0
				g_BodyYOffset = 0;
    1800:	a3030000 	movwge	r0, #12288	; 0x3000
    1804:	0b433505 	bleq	10cec20 <__Stack_Size+0x10ce820>
			else
				g_BodyYOffset = 35;
			fAdjustLegPositions = true;
			g_fDynamicLegXZLength = false;
    1808:	3c350000 	ldccc	0, cr0, [r5]
		//Stand up, sit down
		if ((buttons & BUT_L5) && !(buttonsPrev & BUT_L5)) {
			if (g_BodyYOffset > 0)
				g_BodyYOffset = 0;
			else
				g_BodyYOffset = 35;
    180c:	3500000b 	strcc	r0, [r0, #-11]
			fAdjustLegPositions = true;
			g_fDynamicLegXZLength = false;
    1810:	00000b35 	andeq	r0, r0, r5, lsr fp
    1814:	000b2c35 	andeq	r2, fp, r5, lsr ip

		// We will use L6 with the Right joystick to control both body offset as well as Speed...
		// We move each pass through this by a percentage of how far we are from center in each direction
		// We get feedback with height by seeing the robot move up and down.  For Speed, I put in sounds
		// which give an idea, but only for those whoes robot has a speaker
		int lx = leftH;
    1818:	00983600 	addseq	r3, r8, r0, lsl #12
		int ly = leftV;
		if (buttons & BUT_L6) {
    181c:	ce330000 	cdpgt	0, 3, cr0, cr3, cr0, {0}

		// We will use L6 with the Right joystick to control both body offset as well as Speed...
		// We move each pass through this by a percentage of how far we are from center in each direction
		// We get feedback with height by seeing the robot move up and down.  For Speed, I put in sounds
		// which give an idea, but only for those whoes robot has a speaker
		int lx = leftH;
    1820:	ef000005 	svc	0x00000005
    1824:	00000007 	andeq	r0, r0, r7
		int ly = leftV;
    1828:	012e0000 	teqeq	lr, r0
    182c:	000016a4 	andeq	r1, r0, r4, lsr #13
		if (buttons & BUT_L6) {
    1830:	0105af03 	tsteq	r5, r3, lsl #30
    1834:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
			// raise or lower the robot on the joystick up /down
			// Maybe should have Min/Max
			int delta = rightV / 25;
    1840:	0c5c5d01 	mrrceq	13, 0, r5, ip, cr1
    1844:	512b0000 	teqpl	fp, r0
    1848:	03000013 	movweq	r0, #19	; 0x13
    184c:	002c05af 	eoreq	r0, ip, pc, lsr #11
			if (delta) {
    1850:	08650000 	stmdaeq	r5!, {}^
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
    1854:	66220000 	strtvs	r0, [r2], -r0
    1858:	0300000c 	movweq	r0, #12	; 0xc
    185c:	002c05af 	eoreq	r0, ip, pc, lsr #11
    1860:	51010000 	tstpl	r1, r0
    1864:	00142722 	andseq	r2, r4, r2, lsr #14
    1868:	05af0300 	streq	r0, [pc, #768]!	; 1b70 <__Stack_Size+0x1770>
    186c:	00000074 	andeq	r0, r0, r4, ror r0
    1870:	38005201 	stmdacc	r0, {r0, r9, ip, lr}
    1874:	0014f701 	andseq	pc, r4, r1, lsl #14
			sLegInitAngleAdjust = ly / 8;
			lx = 0;
			ly = 0;

			// Likewise for Speed control
			delta = rightH / 16;   //
    1878:	05bd0300 	ldreq	r0, [sp, #768]!
    187c:	0000a201 	andeq	sl, r0, r1, lsl #4
	...
    1888:	00088e00 	andeq	r8, r8, r0, lsl #28
			if ((delta < 0) && g_InControlState.SpeedControl) {
    188c:	91012a00 	tstls	r1, r0, lsl #20
    1890:	03000016 	movweq	r0, #22	; 0x16
    1894:	000105d1 	ldrdeq	r0, [r1], -r1
				if ((word)(-delta) < g_InControlState.SpeedControl)
    1898:	00000000 	andeq	r0, r0, r0
					g_InControlState.SpeedControl += delta;
    189c:	b9000000 	stmdblt	r0, {}
				else
					g_InControlState.SpeedControl = 0;
    18a0:	ad000008 	stcge	0, cr0, [r0, #-32]
    18a4:	2b00000c 	blcs	18dc <__Stack_Size+0x14dc>

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}
			if ((delta > 0) && (g_InControlState.SpeedControl < 2000)) {
    18a8:	0000113b 	andeq	r1, r0, fp, lsr r1
    18ac:	a205d103 	andge	sp, r5, #-1073741824	; 0xc0000000
    18b0:	e4000000 	str	r0, [r0]
				g_InControlState.SpeedControl += delta;
				if (g_InControlState.SpeedControl > 2000)
    18b4:	31000008 	tstcc	r0, r8
					g_InControlState.SpeedControl = 0;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}
			if ((delta > 0) && (g_InControlState.SpeedControl < 2000)) {
				g_InControlState.SpeedControl += delta;
    18b8:	00000d70 	andeq	r0, r0, r0, ror sp
				if (g_InControlState.SpeedControl > 2000)
					g_InControlState.SpeedControl = 2000;
    18bc:	6305de03 	movwvs	sp, #24067	; 0x5e03
    18c0:	00000000 	andeq	r0, r0, r0

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
    18c4:	0005f91c 	andeq	pc, r5, ip, lsl r9
	...
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
				fAdjustLegPositions = true;
			}

			// Also use right Horizontal to manually adjust the initial leg positions.
			sLegInitXZAdjust = lx / 10;        // play with this.
    18d0:	1d5d0100 	ldfnee	f0, [sp]
    18d4:	00000619 	andeq	r0, r0, r9, lsl r6
	...
			sLegInitAngleAdjust = ly / 8;
    18e0:	0cd75d01 	ldcleq	13, cr5, [r7], {1}
    18e4:	281e0000 	ldmdacs	lr, {}
    18e8:	01000006 	tsteq	r0, r6
    18ec:	01390050 	teqeq	r9, r0, asr r0
					g_InControlState.SpeedControl = 2000;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}

			rightH = 0; // don't walk when adjusting the speed here...
    18f0:	0000158e 	andeq	r1, r0, lr, lsl #11
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
				fAdjustLegPositions = true;
			}

			// Also use right Horizontal to manually adjust the initial leg positions.
			sLegInitXZAdjust = lx / 10;        // play with this.
    18f4:	00061c03 	andeq	r1, r6, r3, lsl #24
					g_InControlState.SpeedControl = 2000;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}

			rightH = 0; // don't walk when adjusting the speed here...
    18f8:	00000000 	andeq	r0, r0, r0
		}

		//[Walk functions]
		if (ControlMode == WALKMODE) {
    18fc:	02000000 	andeq	r0, r0, #0	; 0x0
    1900:	0f000009 	svceq	0x00000009
    1904:	3a00000d 	bcc	1940 <__Stack_Size+0x1540>

			//Switch gates
			if (((buttons & BUT_R1) && !(buttonsPrev & BUT_R1))
    1908:	25030069 	strcs	r0, [r3, #-105]
    190c:	00006306 	andeq	r6, r0, r6, lsl #6
    1910:	00092d00 	andeq	r2, r9, r0, lsl #26
    1914:	113b2c00 	teqne	fp, r0, lsl #24
    1918:	26030000 	strcs	r0, [r3], -r0
    191c:	0000a206 	andeq	sl, r0, r6, lsl #4
    1920:	00094b00 	andeq	r4, r9, r0, lsl #22
    1924:	01380000 	teqeq	r8, r0
    1928:	00000c1a 	andeq	r0, r0, sl, lsl ip
    192c:	01032403 	tsteq	r3, r3, lsl #8
    1930:	000000b4 	strheq	r0, [r0], -r4
	...
    193c:	00000969 	andeq	r0, r0, r9, ror #18
    1940:	122a0128 	eorne	r0, sl, #10	; 0xa
    1944:	e6020000 	str	r0, [r2], -r0
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
    1948:	00000101 	andeq	r0, r0, r1, lsl #2
					&& abs(g_InControlState.TravelLength.x) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
    194c:	00000000 	andeq	r0, r0, r0
    1950:	09940000 	ldmibeq	r4, {}
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
    1954:	01280000 	teqeq	r8, r0
					&& abs(g_InControlState.TravelLength.x) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
    1958:	000014b2 	strheq	r1, [r0], -r2
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
					Buzzed(50, 2000);
    195c:	0101b302 	tsteq	r1, r2, lsl #6
	...
				} else {
					Buzzed(50, 2000);
    1968:	000009bf 	strheq	r0, [r0], -pc
    196c:	1271012a 	rsbsne	r0, r1, #-2147483638	; 0x8000000a
    1970:	1c020000 	stcne	0, cr0, [r2], {0}
					Buzzed(50, 2250);
    1974:	00000101 	andeq	r0, r0, r1, lsl #2
    1978:	00000000 	andeq	r0, r0, r0
					g_InControlState.GaitType = 0;
    197c:	09ea0000 	stmibeq	sl!, {}^
    1980:	0dbd0000 	ldceq	0, cr0, [sp]
}

void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {
    1984:	dd2b0000 	stcle	0, cr0, [fp]
    1988:	02000011 	andeq	r0, r0, #17	; 0x11
    198c:	0063011c 	rsbeq	r0, r3, ip, lsl r1

		g_InControlState.gaitCur = APG[g_InControlState.GaitType];
    1990:	0a150000 	beq	541998 <__Stack_Size+0x541598>
    1994:	862b0000 	strthi	r0, [fp], -r0
    1998:	0200000e 	andeq	r0, r0, #14	; 0xe
    199c:	0063011c 	rsbeq	r0, r3, ip, lsl r1
    19a0:	0a330000 	beq	cc19a8 <__Stack_Size+0xcc15a8>
				}
				GaitSelect();
			}

			//Double leg lift height
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    19a4:	693b0000 	ldmdbvs	fp!, {}
    19a8:	01350200 	teqeq	r5, r0, lsl #4
    19ac:	00000584 	andeq	r0, r0, r4, lsl #11
    19b0:	1c315501 	cfldr32ne	mvfx5, [r1], #-4
    19b4:	0200001e 	andeq	r0, r0, #30	; 0x1e
				Buzzed(50, 2000);
    19b8:	00510143 	subseq	r0, r1, r3, asr #2
    19bc:	003c0000 	eorseq	r0, ip, r0
				HeightSpeedMode = (HeightSpeedMode + 1) & 0x3; // wrap around mode
    19c0:	00000000 	andeq	r0, r0, r0
    19c4:	15000000 	strne	r0, [r0]
    19c8:	02006469 	andeq	r6, r0, #1761607680	; 0x69000000
    19cc:	00740137 	rsbseq	r0, r4, r7, lsr r1
				DoubleTravelOn = HeightSpeedMode & 0x1;
    19d0:	00000000 	andeq	r0, r0, r0
    19d4:	153c012a 	ldrne	r0, [ip, #-298]!
				if (HeightSpeedMode & 0x2)
    19d8:	c6020000 	strgt	r0, [r2], -r0
    19dc:	00000101 	andeq	r0, r0, r1, lsl #2
					g_InControlState.LegLiftHeight = 80;
    19e0:	00000000 	andeq	r0, r0, r0
    19e4:	0a510000 	beq	14419ec <__Stack_Size+0x14415ec>
				else
					g_InControlState.LegLiftHeight = 50;
			}

			// Switch between Walk method 1 && Walk method 2
			if ((buttons & BUT_R2) && !(buttonsPrev & BUT_R2)) {
    19e8:	0dec0000 	stcleq	0, cr0, [ip]
    19ec:	b0360000 	eorslt	r0, r6, r0
    19f0:	3a000000 	bcc	19f8 <__Stack_Size+0x15f8>
    19f4:	d0020069 	andle	r0, r2, r9, rrx
    19f8:	00058401 	andeq	r8, r5, r1, lsl #8

				if ((++bJoystickWalkMode) > 1)
    19fc:	000a7000 	andeq	r7, sl, r0
    1a00:	3d000000 	stccc	0, cr0, [r0]
    1a04:	00109801 	andseq	r9, r0, r1, lsl #16

					bJoystickWalkMode = 0;
				Buzzed(50, 2000 + bJoystickWalkMode * 250);
    1a08:	01b20200 	undefined instruction 0x01b20200
	...
    1a14:	00000a8e 	andeq	r0, r0, lr, lsl #21
    1a18:	00000e15 	andeq	r0, r0, r5, lsl lr
    1a1c:	0000c836 	andeq	ip, r0, r6, lsr r8
			}

			//Walking
			switch (bJoystickWalkMode) {
    1a20:	00693e00 	rsbeq	r3, r9, r0, lsl #28
    1a24:	0074bb02 	rsbseq	fp, r4, r2, lsl #22
    1a28:	00000000 	andeq	r0, r0, r0
			case 0:
				g_InControlState.TravelLength.x = -lx;
    1a2c:	1463012a 	strbtne	r0, [r3], #-298
    1a30:	9f020000 	svcls	0x00020000
    1a34:	00000101 	andeq	r0, r0, r1, lsl #2
				g_InControlState.TravelLength.z = -ly;
    1a38:	00000000 	andeq	r0, r0, r0
				g_InControlState.TravelLength.y = -(rightH) / 4; //Right Stick Left/Right
				break;
			case 1:
				g_InControlState.TravelLength.z = (rightV); //Right Stick Up/Down
    1a3c:	0ab90000 	beq	fee41a44 <SCS_BASE+0x1ee33a44>
    1a40:	0e440000 	cdpeq	0, 4, cr0, cr4, cr0, {0}
    1a44:	003c0000 	eorseq	r0, ip, r0
				g_InControlState.TravelLength.y = -(rightH) / 4; //Right Stick Left/Right
    1a48:	00000000 	andeq	r0, r0, r0
    1a4c:	15000000 	strne	r0, [r0]
    1a50:	a4020069 	strge	r0, [r2], #-105
    1a54:	00007401 	andeq	r7, r0, r1, lsl #8
    1a58:	3f000000 	svccc	0x00000000
    1a5c:	0015ff01 	andseq	pc, r5, r1, lsl #30
				break;

			}

			if (!DoubleTravelOn) {  //(Double travel length)
    1a60:	01650200 	cmneq	r5, r0, lsl #4
	...
				g_InControlState.TravelLength.x =
    1a6c:	00000ae4 	andeq	r0, r0, r4, ror #21
						g_InControlState.TravelLength.x / 2;
				g_InControlState.TravelLength.z =
    1a70:	161a012a 	ldrne	r0, [sl], -sl, lsr #2
    1a74:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
    1a78:	00000102 	andeq	r0, r0, r2, lsl #2
			}

		}

		//[Translate functions]
		g_BodyYShift = 0;
    1a7c:	00000000 	andeq	r0, r0, r0
    1a80:	0b0f0000 	bleq	3c1a88 <__Stack_Size+0x3c1688>
		if (ControlMode == TRANSLATEMODE) {
    1a84:	0e8c0000 	cdpeq	0, 8, cr0, cr12, cr0, {0}
    1a88:	04400000 	strbeq	r0, [r0]

		      g_InControlState.BodyPos.x =  SmoothControl(((lx)*2/3), g_InControlState.BodyPos.x, SmDiv);
    1a8c:	e0000006 	and	r0, r0, r6
    1a90:	03000000 	movweq	r0, #0	; 0x0
    1a94:	0f4002fb 	svceq	0x004002fb
    1a98:	00000006 	andeq	r0, r0, r6
    1a9c:	03000001 	movweq	r0, #1	; 0x1
    1aa0:	2a0002fd 	bcs	269c <__Stack_Size+0x229c>
    1aa4:	0015be01 	andseq	fp, r5, r1, lsl #28
    1aa8:	01510200 	cmpeq	r1, r0, lsl #4
		      g_InControlState.BodyPos.z =  SmoothControl(((ly)*2/3), g_InControlState.BodyPos.z, SmDiv);
    1aac:	00000001 	andeq	r0, r0, r1
    1ab0:	00000000 	andeq	r0, r0, r0
    1ab4:	000b2e00 	andeq	r2, fp, r0, lsl #28
    1ab8:	000f0000 	andeq	r0, pc, r0
    1abc:	17ba2b00 	ldrne	r2, [sl, r0, lsl #22]!
		      g_InControlState.BodyRot1.y = SmoothControl(((rightH)*2), g_InControlState.BodyRot1.y, SmDiv);
    1ac0:	51020000 	tstpl	r2, r0
		//[Translate functions]
		g_BodyYShift = 0;
		if (ControlMode == TRANSLATEMODE) {

		      g_InControlState.BodyPos.x =  SmoothControl(((lx)*2/3), g_InControlState.BodyPos.x, SmDiv);
		      g_InControlState.BodyPos.z =  SmoothControl(((ly)*2/3), g_InControlState.BodyPos.z, SmDiv);
    1ac4:	0000a201 	andeq	sl, r0, r1, lsl #4
		      g_InControlState.BodyRot1.y = SmoothControl(((rightH)*2), g_InControlState.BodyRot1.y, SmDiv);
    1ac8:	000b5900 	andeq	r5, fp, r0, lsl #18
    1acc:	00003c00 	andeq	r3, r0, r0, lsl #24
    1ad0:	00000000 	andeq	r0, r0, r0
    1ad4:	693a0000 	ldmdbvs	sl!, {}


			//      g_InControlState.BodyPos.x = (lx)/2;
			//      g_InControlState.BodyPos.z = -(ly)/3;
			//      g_InControlState.BodyRot1.y = (rightH)*2;
			g_BodyYShift = (-(rightV) / 2);
    1ad8:	01770200 	cmneq	r7, r0, lsl #4
    1adc:	00000584 	andeq	r0, r0, r4, lsl #11
    1ae0:	00000b84 	andeq	r0, r0, r4, lsl #23
    1ae4:	0011192c 	andseq	r1, r1, ip, lsr #18
    1ae8:	01780200 	cmneq	r8, r0, lsl #4
    1aec:	000000a2 	andeq	r0, r0, r2, lsr #1
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
    1af0:	00000bc8 	andeq	r0, r0, r8, asr #23
			g_InControlState.BodyRot1.x = (ly);
			g_InControlState.BodyRot1.y = (rightH) * 2;
    1af4:	001e1c31 	andseq	r1, lr, r1, lsr ip
    1af8:	018a0200 	orreq	r0, sl, r0, lsl #4
			g_InControlState.BodyRot1.z = (lx);
			g_BodyYShift = (-(rightV) / 2);
    1afc:	00000051 	andeq	r0, r0, r1, asr r0
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
			g_InControlState.BodyRot1.x = (ly);
			g_InControlState.BodyRot1.y = (rightH) * 2;
    1b00:	0000003c 	andeq	r0, r0, ip, lsr r0
			g_BodyYShift = (-(rightV) / 2);
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
			g_InControlState.BodyRot1.x = (ly);
    1b04:	00000000 	andeq	r0, r0, r0
			g_InControlState.BodyRot1.y = (rightH) * 2;
			g_InControlState.BodyRot1.z = (lx);
			g_BodyYShift = (-(rightV) / 2);
    1b08:	64691500 	strbtvs	r1, [r9], #-1280
    1b0c:	017c0200 	cmneq	ip, r0, lsl #4
    1b10:	00000074 	andeq	r0, r0, r4, ror r0
    1b14:	3d000000 	stccc	0, cr0, [r0]
    1b18:	0015d901 	andseq	sp, r5, r1, lsl #18
		}

		//[Single leg functions]
#ifdef OPT_SINGLELEG
		if (ControlMode == SINGLELEGMODE) {
    1b1c:	01cf0200 	biceq	r0, pc, r0, lsl #4
	...

			//Switch leg for single leg control
			if ((buttons & BUT_R1) && !(buttonsPrev & BUT_R1)) {
    1b28:	00000bdb 	ldrdeq	r0, [r0], -fp
    1b2c:	00000f77 	andeq	r0, r0, r7, ror pc
    1b30:	000d7024 	andeq	r7, sp, r4, lsr #32
				Buzzed(50,2000);
    1b34:	74cc0200 	strbvc	r0, [ip], #512
    1b38:	06000000 	streq	r0, [r0], -r0
    1b3c:	2400000c 	strcs	r0, [r0], #-12
				if (g_InControlState.SelectedLeg < (CNT_LEGS-1)) {
    1b40:	000010b1 	strheq	r1, [r0], -r1
    1b44:	002ccc02 	eoreq	ip, ip, r2, lsl #24
					g_InControlState.SelectedLeg = g_InControlState.SelectedLeg + 1;
				} else {
					g_InControlState.SelectedLeg = 0;
    1b48:	0c240000 	stceq	0, cr0, [r4]
		if (ControlMode == SINGLELEGMODE) {

			//Switch leg for single leg control
			if ((buttons & BUT_R1) && !(buttonsPrev & BUT_R1)) {
				Buzzed(50,2000);
				if (g_InControlState.SelectedLeg < (CNT_LEGS-1)) {
    1b4c:	9a240000 	bls	901b54 <__Stack_Size+0x901754>
					g_InControlState.SelectedLeg = g_InControlState.SelectedLeg + 1;
    1b50:	02000018 	andeq	r0, r0, #24	; 0x18
			   g_InControlState.SLLeg.x= (signed char)((int)((int)lx+128)/2); //Left Stick Right/Left
      		   g_InControlState.SLLeg.y= (signed char)((int)((int)rightV+128)/10); //Right Stick Up/Down
		       g_InControlState.SLLeg.z = (signed char)((int)((int)ly+128)/2); //Left Stick Up/Down

#else
			g_InControlState.SLLeg.x = lx; //Left Stick Right/Left
    1b54:	00002ccc 	andeq	r2, r0, ip, asr #25
			g_InControlState.SLLeg.y = rightV / 3 - 20;//Right Stick Up/Down
    1b58:	000c3700 	andeq	r3, ip, r0, lsl #14
    1b5c:	14bb2400 	ldrtne	r2, [fp], #1024
    1b60:	cd020000 	stcgt	0, cr0, [r2]
    1b64:	0000002c 	andeq	r0, r0, ip, lsr #32
    1b68:	00000c4a 	andeq	r0, r0, sl, asr #24
			g_InControlState.SLLeg.z = ly;//Left Stick Up/Down

#endif
			// Hold single leg in place
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    1b6c:	0013bd27 	andseq	fp, r3, r7, lsr #26
    1b70:	a2d00200 	sbcsge	r0, r0, #0	; 0x0
    1b74:	27000000 	strcs	r0, [r0, -r0]
      		   g_InControlState.SLLeg.y= (signed char)((int)((int)rightV+128)/10); //Right Stick Up/Down
		       g_InControlState.SLLeg.z = (signed char)((int)((int)ly+128)/2); //Left Stick Up/Down

#else
			g_InControlState.SLLeg.x = lx; //Left Stick Right/Left
			g_InControlState.SLLeg.y = rightV / 3 - 20;//Right Stick Up/Down
    1b78:	00001459 	andeq	r1, r0, r9, asr r4
			g_InControlState.SLLeg.z = ly;//Left Stick Up/Down

#endif
			// Hold single leg in place
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    1b7c:	00a2d102 	adceq	sp, r2, r2, lsl #2
    1b80:	19270000 	stmdbne	r7!, {}
    1b84:	02000018 	andeq	r0, r0, #24	; 0x18
				Buzzed(50,2000);
    1b88:	0000a2d2 	ldrdeq	sl, [r0], -r2
    1b8c:	012a0000 	teqeq	sl, r0
				g_InControlState.fSLHold = !g_InControlState.fSLHold;
    1b90:	00001371 	andeq	r1, r0, r1, ror r3
    1b94:	01030603 	tsteq	r3, r3, lsl #12
	...
			}
		}
#endif

		//Calculate walking time delay
		g_InControlState.InputTimeDelay = 128- max(max(abs(lx), abs(ly)), abs(rightH));
    1ba0:	00000c5d 	andeq	r0, r0, sp, asr ip
    1ba4:	00000fa2 	andeq	r0, r0, r2, lsr #31
    1ba8:	000d702c 	andeq	r7, sp, ip, lsr #32
    1bac:	03070300 	movweq	r0, #29440	; 0x7300
    1bb0:	00000074 	andeq	r0, r0, r4, ror r0
    1bb4:	00000c88 	andeq	r0, r0, r8, lsl #25
    1bb8:	c8014100 	stmdagt	r1, {r8, lr}
    1bbc:	02000010 	andeq	r0, r0, #16	; 0x10
    1bc0:	00a20199 	umlaleq	r0, r2, r9, r1
	...
    1bcc:	0c9b0000 	ldceq	0, cr0, [fp], {0}
    1bd0:	0fe00000 	svceq	0x00e00000

		//Calculate g_InControlState.BodyPos.y
		g_InControlState.BodyPos.y = max(g_BodyYOffset + g_BodyYShift, 0);
    1bd4:	d2270000 	eorle	r0, r7, #0	; 0x0
    1bd8:	0200000e 	andeq	r0, r0, #14	; 0xe
    1bdc:	0000639f 	muleq	r0, pc, r3
    1be0:	00003c00 	andeq	r3, r0, r0, lsl #24
    1be4:	00000000 	andeq	r0, r0, r0
    1be8:	0a270000 	beq	9c1bf0 <__Stack_Size+0x9c17f0>

		if (sLegInitXZAdjust || sLegInitAngleAdjust) {
    1bec:	02000016 	andeq	r0, r0, #22	; 0x16
    1bf0:	0000a2a1 	andeq	sl, r0, r1, lsr #5
			// User asked for manual leg adjustment - only do when we have finished any previous adjustment

			if (!g_InControlState.ForceGaitStepCnt) {
    1bf4:	42000000 	andmi	r0, r0, #0	; 0x0
				if (sLegInitXZAdjust)
    1bf8:	000c9a01 	andeq	r9, ip, r1, lsl #20
					g_fDynamicLegXZLength = true;
    1bfc:	021c0100 	andseq	r0, ip, #0	; 0x0
    1c00:	00000584 	andeq	r0, r0, r4, lsl #11
	...
				// Handle maybe change angles...
				if (sLegInitAngleAdjust)
					RotateLegInitAngles(sLegInitAngleAdjust);

				// Give system time to process previous calls
				AdjustLegPositions(sLegInitXZAdjust);
    1c0c:	00000cba 	strheq	r0, [r0], -sl
			}
		}

		if (fAdjustLegPositions && !g_fDynamicLegXZLength)
    1c10:	1653013d 	undefined
    1c14:	d0010000 	andle	r0, r1, r0
    1c18:	00000001 	andeq	r0, r0, r1
			AdjustLegPositionsToBodyHeight(); // Put main workings into main program file
    1c1c:	00000000 	andeq	r0, r0, r0
		// Save away the buttons state as to not process the same press twice.
		buttonsPrev = buttons;
    1c20:	000ce500 	andeq	lr, ip, r0, lsl #10
    1c24:	00109600 	andseq	r9, r0, r0, lsl #12
		extPrev = ext;
    1c28:	00003c00 	andeq	r3, r0, r0, lsl #24
    1c2c:	00000000 	andeq	r0, r0, r0
		g_ulLastMsgTime = getMillis();
    1c30:	90260000 	eorls	r0, r6, r0
    1c34:	01000016 	tsteq	r0, r6, lsl r0
	} else {
		// We did not receive a valid packet.  check for a timeout to see if we should turn robot off...
		if (g_InControlState.fRobotOn) {
    1c38:	0000b4d5 	ldrdeq	fp, [r0], -r5
			if ((getMillis() - g_ulLastMsgTime) > ARBOTIX_TO)
    1c3c:	000d1000 	andeq	r1, sp, r0
    1c40:	186e2600 	stmdane	lr!, {r9, sl, sp}^
    1c44:	d6010000 	strle	r0, [r1], -r0
    1c48:	0000002c 	andeq	r0, r0, ip, lsr #32
    1c4c:	00000d48 	andeq	r0, r0, r8, asr #26
				CommanderTurnRobotOff();
    1c50:	00135d26 	andseq	r5, r3, r6, lsr #26
		}
	}

}
    1c54:	2cd70100 	ldfcse	f0, [r7], {0}
    1c58:	80000000 	andhi	r0, r0, r0
    1c5c:	3a00000d 	bcc	1c98 <__Stack_Size+0x1898>
    1c60:	0100786c 	tsteq	r0, ip, ror #16
    1c64:	0584010b 	streq	r0, [r4, #267]
    1c68:	0db80000 	ldceq	0, cr0, [r8]
    1c6c:	6c3a0000 	ldcvs	0, cr0, [sl]
    1c70:	0c010079 	stceq	0, cr0, [r1], {121}
    1c74:	00058401 	andeq	r8, r5, r1, lsl #8
    1c78:	000dfc00 	andeq	pc, sp, r0, lsl #24
    1c7c:	00004300 	andeq	r4, r0, r0, lsl #6
    1c80:	00000000 	andeq	r0, r0, r0
    1c84:	10840000 	addne	r0, r4, r0
    1c88:	f12c0000 	undefined instruction 0xf12c0000
    1c8c:	01000014 	tsteq	r0, r4, lsl r0
    1c90:	05840110 	streq	r0, [r4, #272]
    1c94:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
    1c98:	44000000 	strmi	r0, [r0]
    1c9c:	00000604 	andeq	r0, r0, r4, lsl #12
	...
    1ca8:	00014301 	andeq	r4, r1, r1, lsl #6
    1cac:	48012d00 	stmdami	r1, {r8, sl, fp, sp}

extern void setupPhoenix(void);
extern void readSensors(void);


int Big_main(void) {
    1cb0:	03000013 	movweq	r0, #19	; 0x13

	// Must include this line in all programs using "cm530.h/.c"
	SysInit();
    1cb4:	840101dc 	strhi	r0, [r1], #-476
	setupPhoenix();
    1cb8:	00000005 	andeq	r0, r0, r5
			TotalYBal1 = 0;
			TotalZBal1 = 0;

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1cbc:	00000000 	andeq	r0, r0, r0

	while (1){
		while (1) {
			//Start time
			unsigned long lTimeWaitEnd;
			lTimerStart = getMillis();
    1cc0:	59000000 	stmdbpl	r0, {}
    1cc4:	cf00000e 	svcgt	0x0000000e
    1cc8:	3c000010 	stccc	0, cr0, [r0], {16}
	...
			PrintString("\n");
#endif
			DoBackgroundProcess();
			//Read input
			CheckVoltage();        // check our voltages...
			if (!g_fLowVoltageShutdown) {
    1cd4:	0016ca2c 	andseq	ip, r6, ip, lsr #20
    1cd8:	01e60300 	mvneq	r0, r0, lsl #6
				CommanderInputController_ControlInput();
    1cdc:	0000004a 	andeq	r0, r0, sl, asr #32
			}
			WriteOutputs();        // Write Outputs
			//Single leg control
			SingleLegControl();
    1ce0:	00000e84 	andeq	r0, r0, r4, lsl #29
			DoBackgroundProcess();
    1ce4:	34270000 	strtcc	r0, [r7]

			//Gait
			GaitSeq();
    1ce8:	08000005 	stmdaeq	r0, {r0, r2}

			DoBackgroundProcess();
    1cec:	0010da2a 	andseq	sp, r0, sl, lsr #20

			//Balance calculations
			TotalTransX = 0;     //reset values used for calculation of balance
    1cf0:	00634500 	rsbeq	r4, r3, r0, lsl #10
    1cf4:	65270000 	strvs	r0, [r7]!
			TotalTransZ = 0;
    1cf8:	08000002 	stmdaeq	r0, {r1}
			TotalTransY = 0;
    1cfc:	0010ea28 	andseq	lr, r0, r8, lsr #20
    1d00:	00514500 	subseq	r4, r1, r0, lsl #10
			TotalXBal1 = 0;
    1d04:	f6270000 	undefined instruction 0xf6270000
			TotalYBal1 = 0;
    1d08:	08000003 	stmdaeq	r0, {r0, r1}
    1d0c:	0010ea28 	andseq	lr, r0, r8, lsr #20
			TotalZBal1 = 0;
    1d10:	00630d00 	rsbeq	r0, r3, r0, lsl #26

			if (g_InControlState.BalanceMode) {
    1d14:	110b0000 	tstne	fp, r0
    1d18:	9f460000 	svcls	0x00460000
    1d1c:	ff000000 	undefined instruction 0xff000000

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1d20:	7a270003 	bvc	9c1d34 <__Stack_Size+0x9c1934>

					DoBackgroundProcess();
					BalCalcOneLeg(-LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d24:	08000004 	stmdaeq	r0, {r2}
    1d28:	00111629 	andseq	r1, r1, r9, lsr #12
    1d2c:	10fa4500 	rscsne	r4, sl, r0, lsl #10

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs

					DoBackgroundProcess();
    1d30:	15470000 	strbne	r0, [r7]
					BalCalcOneLeg(-LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d34:	08000006 	stmdaeq	r0, {r1, r2}
    1d38:	0010da44 	andseq	sp, r0, r4, asr #20
    1d3c:	93470000 	movtls	r0, #28672	; 0x7000
    1d40:	08000003 	stmdaeq	r0, {r0, r1}
    1d44:	0010da44 	andseq	sp, r0, r4, asr #20
    1d48:	630d0000 	movwvs	r0, #53248	; 0xd000
    1d4c:	43000000 	movwmi	r0, #0	; 0x0
    1d50:	0e000011 	mcreq	0, 0, r0, cr0, cr1, {0}
    1d54:	0000009f 	muleq	r0, pc, r0
    1d58:	ec270040 	stc	0, cr0, [r7], #-256
    1d5c:	08000000 	stmdaeq	r0, {}
    1d60:	00114e45 	andseq	r4, r1, r5, asr #28
    1d64:	11334500 	teqne	r3, r0, lsl #10
    1d68:	e4470000 	strb	r0, [r7]
    1d6c:	08000005 	stmdaeq	r0, {r0, r2}
			TotalYBal1 = 0;
			TotalZBal1 = 0;

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1d70:	0010ea58 	andseq	lr, r0, r8, asr sl
    1d74:	f9470000 	undefined instruction 0xf9470000
    1d78:	08000000 	stmdaeq	r0, {}
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
    1d7c:	0010ea58 	andseq	lr, r0, r8, asr sl
    1d80:	b2270000 	eorlt	r0, r7, #0	; 0x0
					DoBackgroundProcess();
					BalCalcOneLeg(LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d84:	08000002 	stmdaeq	r0, {r1}
    1d88:	00117659 	andseq	r7, r1, r9, asr r6
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
					DoBackgroundProcess();
    1d8c:	10fa4500 	rscsne	r4, sl, r0, lsl #10
					BalCalcOneLeg(LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d90:	d2480000 	suble	r0, r8, #0	; 0x0
    1d94:	01000020 	tsteq	r0, r0, lsr #32
    1d98:	00006d8c 	andeq	r6, r0, ip, lsl #27
    1d9c:	00030500 	andeq	r0, r3, r0, lsl #10
    1da0:	48000000 	stmdami	r0, {}
    1da4:	00000ea2 	andeq	r0, r0, r2, lsr #29
    1da8:	002c9f01 	eoreq	r9, ip, r1, lsl #30
    1dac:	03050000 	movweq	r0, #20480	; 0x5000
    1db0:	00000000 	andeq	r0, r0, r0
    1db4:	00143348 	andseq	r3, r4, r8, asr #6
    1db8:	2ca00100 	stfcss	f0, [r0]
    1dbc:	05000000 	streq	r0, [r0]
    1dc0:	00000003 	andeq	r0, r0, r3
    1dc4:	0fc34800 	svceq	0x00c34800
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
    1dc8:	a1010000 	tstge	r1, r0
    1dcc:	00000074 	andeq	r0, r0, r4, ror r0
    1dd0:	00000305 	andeq	r0, r0, r5, lsl #6
							LegPosZ[LegIndex] + GaitPosZ[LegIndex],
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}
				BalanceBody();
    1dd4:	81480000 	cmphi	r8, r0
			}

			//Reset IKsolution indicators
			IKSolution = 0;
    1dd8:	0100000f 	tsteq	r0, pc
    1ddc:	000074a2 	andeq	r7, r0, r2, lsr #9
			IKSolutionWarning = 0;
			IKSolutionError = 0;

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
    1de0:	00030500 	andeq	r0, r3, r0, lsl #10
			}

			//Reset IKsolution indicators
			IKSolution = 0;
			IKSolutionWarning = 0;
			IKSolutionError = 0;
    1de4:	48000000 	stmdami	r0, {}
    1de8:	000012c1 	andeq	r1, r0, r1, asr #5

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
				DoBackgroundProcess();
    1dec:	0094a401 	addseq	sl, r4, r1, lsl #8
				BodyFK(
    1df0:	03050000 	movweq	r0, #20480	; 0x5000
    1df4:	00000000 	andeq	r0, r0, r0
    1df8:	00123c48 	andseq	r3, r2, r8, asr #24
    1dfc:	74a50100 	strtvc	r0, [r5], #256
    1e00:	05000000 	streq	r0, [r0]
    1e04:	00000003 	andeq	r0, r0, r3
    1e08:	100b4800 	andne	r4, fp, r0, lsl #16
    1e0c:	a8010000 	stmdage	r1, {}
    1e10:	00000074 	andeq	r0, r0, r4, ror r0
    1e14:	00000305 	andeq	r0, r0, r5, lsl #6
    1e18:	e9480000 	stmdb	r8, {}^
    1e1c:	01000014 	tsteq	r0, r4, lsl r0
    1e20:	000074a9 	andeq	r7, r0, r9, lsr #9
    1e24:	00030500 	andeq	r0, r3, r0, lsl #10
    1e28:	0d000000 	stceq	0, cr0, [r0]
    1e2c:	00000074 	andeq	r0, r0, r4, ror r0
    1e30:	00001224 	andeq	r1, r0, r4, lsr #4
    1e34:	00009f0e 	andeq	r9, r0, lr, lsl #30
    1e38:	48001100 	stmdami	r0, {r8, ip}
    1e3c:	000017f6 	strdeq	r1, [r0], -r6
    1e40:	12353f02 	eorsne	r3, r5, #8	; 0x8
    1e44:	03050000 	movweq	r0, #20480	; 0x5000
    1e48:	00000000 	andeq	r0, r0, r0
    1e4c:	00121403 	andseq	r1, r2, r3, lsl #8
						+ GaitPosZ[LegIndex] - TotalTransZ,
						LegPosY[LegIndex] + g_InControlState.BodyPos.y
						+ GaitPosY[LegIndex] - TotalTransY,
						GaitRotY[LegIndex], LegIndex);

				LegIK(
    1e50:	11093000 	tstne	r9, r0
    1e54:	b1020000 	tstlt	r2, r0
    1e58:	00006301 	andeq	r6, r0, r1, lsl #6
    1e5c:	00030500 	andeq	r0, r3, r0, lsl #10
    1e60:	30000000 	andcc	r0, r0, r0
    1e64:	00000cea 	andeq	r0, r0, sl, ror #25
    1e68:	6301b202 	movwvs	fp, #4610	; 0x1202
    1e6c:	05000000 	streq	r0, [r0]
    1e70:	00000003 	andeq	r0, r0, r3
    1e74:	00740d00 	rsbseq	r0, r4, r0, lsl #26
    1e78:	126f0000 	rsbne	r0, pc, #0	; 0x0
    1e7c:	9f460000 	svcls	0x00460000
    1e80:	15000000 	strne	r0, [r0]
    1e84:	b0480001 	sublt	r0, r8, r1
    1e88:	03000011 	movweq	r0, #17	; 0x11
    1e8c:	00128047 	andseq	r8, r2, r7, asr #32
    1e90:	00030500 	andeq	r0, r3, r0, lsl #10
    1e94:	03000000 	movweq	r0, #0	; 0x0
    1e98:	0000125e 	andeq	r1, r0, lr, asr r2
    1e9c:	0000a20d 	andeq	sl, r0, sp, lsl #4
    1ea0:	00129500 	andseq	r9, r2, r0, lsl #10
    1ea4:	009f0e00 	addseq	r0, pc, r0, lsl #28
    1ea8:	00b40000 	adcseq	r0, r4, r0
    1eac:	000e6148 	andeq	r6, lr, r8, asr #2
    1eb0:	a65b0300 	ldrbge	r0, [fp], -r0, lsl #6
    1eb4:	05000012 	streq	r0, [r0, #-18]
    1eb8:	00000003 	andeq	r0, r0, r3
    1ebc:	12850300 	addne	r0, r5, #0	; 0x0
    1ec0:	ec490000 	mar	acc0, r0, r9
			IKSolutionWarning = 0;
			IKSolutionError = 0;

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
    1ec4:	03000017 	movweq	r0, #23	; 0x17
    1ec8:	007401be 	ldrhteq	r0, [r4], #-30
    1ecc:	05010000 	streq	r0, [r1]
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Do IK for all Left legs
			for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) {
    1ed0:	00000003 	andeq	r0, r0, r3
    1ed4:	10174900 	andsne	r4, r7, r0, lsl #18
				DoBackgroundProcess();
    1ed8:	0d030000 	stceq	0, cr0, [r3]
				BodyFK(
    1edc:	0000b401 	andeq	fp, r0, r1, lsl #8
    1ee0:	03050100 	movweq	r0, #20736	; 0x5100
    1ee4:	00000000 	andeq	r0, r0, r0
    1ee8:	00112049 	andseq	r2, r1, r9, asr #32
    1eec:	010e0300 	tsteq	lr, r0, lsl #6
    1ef0:	000000b4 	strheq	r0, [r0], -r4
    1ef4:	00030501 	andeq	r0, r3, r1, lsl #10
    1ef8:	49000000 	stmdbmi	r0, {}
    1efc:	00000d16 	andeq	r0, r0, r6, lsl sp
    1f00:	b4016903 	strlt	r6, [r1], #-2307
    1f04:	01000000 	tsteq	r0, r0
    1f08:	00000305 	andeq	r0, r0, r5, lsl #6
    1f0c:	ad4a0000 	stclge	0, cr0, [sl]
    1f10:	03000015 	movweq	r0, #21	; 0x15
    1f14:	0002cf10 	andeq	ip, r2, r0, lsl pc
    1f18:	03050100 	movweq	r0, #20736	; 0x5100
    1f1c:	00000000 	andeq	r0, r0, r0
    1f20:	0000740d 	andeq	r7, r0, sp, lsl #8
    1f24:	00131900 	andseq	r1, r3, r0, lsl #18
    1f28:	009f0e00 	addseq	r0, pc, r0, lsl #28
    1f2c:	00010000 	andeq	r0, r1, r0
    1f30:	0015814a 	andseq	r8, r5, sl, asr #2
    1f34:	2b140300 	blcs	502b3c <__Stack_Size+0x50273c>
    1f38:	01000013 	tsteq	r0, r3, lsl r0
    1f3c:	00000305 	andeq	r0, r0, r5, lsl #6
    1f40:	09030000 	stmdbeq	r3, {}
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z
						+ GaitPosZ[LegIndex] - TotalTransZ,
						LegPosY[LegIndex] + g_InControlState.BodyPos.y
						+ GaitPosY[LegIndex] - TotalTransY,
						GaitRotY[LegIndex], LegIndex);
				LegIK(
    1f44:	4a000013 	bmi	1f98 <__Stack_Size+0x1b98>
    1f48:	00001846 	andeq	r1, r0, r6, asr #16
    1f4c:	13421503 	movtne	r1, #9475	; 0x2503
    1f50:	05010000 	streq	r0, [r1]
    1f54:	00000003 	andeq	r0, r0, r3
    1f58:	13090300 	movwne	r0, #37632	; 0x9300
    1f5c:	094a0000 	stmdbeq	sl, {}^
    1f60:	0100000d 	tsteq	r0, sp
    1f64:	00003386 	andeq	r3, r0, r6, lsl #7
    1f68:	03050100 	movweq	r0, #20736	; 0x5100
    1f6c:	00000000 	andeq	r0, r0, r0
    1f70:	000ce34a 	andeq	lr, ip, sl, asr #6
    1f74:	33870100 	orrcc	r0, r7, #0	; 0x0
    1f78:	01000000 	tsteq	r0, r0
    1f7c:	00000305 	andeq	r0, r0, r5, lsl #6
    1f80:	bd4a0000 	stcllt	0, cr0, [sl]
    1f84:	0100000f 	tsteq	r0, pc
    1f88:	00003388 	andeq	r3, r0, r8, lsl #7
    1f8c:	03050100 	movweq	r0, #20736	; 0x5100
    1f90:	00000000 	andeq	r0, r0, r0
    1f94:	000f9d4a 	andeq	r9, pc, sl, asr #26
    1f98:	33890100 	orrcc	r0, r9, #0	; 0x0
    1f9c:	01000000 	tsteq	r0, r0
    1fa0:	00000305 	andeq	r0, r0, r5, lsl #6
    1fa4:	654b0000 	strbvs	r0, [fp]
    1fa8:	01007478 	tsteq	r0, r8, ror r4
    1fac:	00006d8d 	andeq	r6, r0, sp, lsl #27
    1fb0:	03050100 	movweq	r0, #20736	; 0x5100
    1fb4:	00000000 	andeq	r0, r0, r0
    1fb8:	00006d0d 	andeq	r6, r0, sp, lsl #26
    1fbc:	0013b100 	andseq	fp, r3, r0, lsl #2
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Do IK for all Left legs
			for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) {
    1fc0:	009f0e00 	addseq	r0, pc, r0, lsl #28
    1fc4:	00060000 	andeq	r0, r6, r0
    1fc8:	000ded4a 	andeq	lr, sp, sl, asr #26
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Check mechanical limits
			CheckAngles();
    1fcc:	a1920100 	orrsge	r0, r2, r0, lsl #2

			//Drive Servos
			if (g_InControlState.fRobotOn) {
    1fd0:	01000013 	tsteq	r0, r3, lsl r0
    1fd4:	00000305 	andeq	r0, r0, r5, lsl #6
    1fd8:	504a0000 	subpl	r0, sl, r0
				if (g_InControlState.fRobotOn && !g_InControlState.fPrev_RobotOn) {
					// MSound(3, 60, 2000, 80, 2250, 100, 2500);
					Buzzed(30, 2000);
    1fdc:	01000014 	tsteq	r0, r4, lsl r0
    1fe0:	00058494 	muleq	r5, r4, r4
    1fe4:	03050100 	movweq	r0, #20736	; 0x5100
					Buzzed(80, 2250);
    1fe8:	00000000 	andeq	r0, r0, r0
    1fec:	000cd34a 	andeq	sp, ip, sl, asr #6
					Buzzed(100, 2500);
    1ff0:	4a9b0100 	bmi	fe6c23f8 <SCS_BASE+0x1e6b43f8>
    1ff4:	01000000 	tsteq	r0, r0
    1ff8:	00000305 	andeq	r0, r0, r5, lsl #6

				}

				//Calculate Servo Move time
				if ((abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
    1ffc:	274a0000 	strbcs	r0, [sl, -r0]
    2000:	0100000c 	tsteq	r0, ip
    2004:	00002c9c 	muleq	r0, ip, ip
    2008:	03050100 	movweq	r0, #20736	; 0x5100
    200c:	00000000 	andeq	r0, r0, r0
    2010:	0018234a 	andseq	r2, r8, sl, asr #6
    2014:	b49d0100 	ldrlt	r0, [sp], #256
    2018:	01000000 	tsteq	r0, r0
    201c:	00000305 	andeq	r0, r0, r5, lsl #6
    2020:	104a0000 	subne	r0, sl, r0
    2024:	0100000d 	tsteq	r0, sp
						|| (abs(g_InControlState.TravelLength.z) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.y*2) > cTravelDeadZone)) {
					ServoMoveTime = g_InControlState.gaitCur.NomGaitSpeed
    2028:	000074a6 	andeq	r7, r0, r6, lsr #9
    202c:	03050100 	movweq	r0, #20736	; 0x5100
    2030:	00000000 	andeq	r0, r0, r0
    2034:	00139f4a 	andseq	r9, r3, sl, asr #30
    2038:	b42d0200 	strtlt	r0, [sp], #-512
							+ (g_InControlState.InputTimeDelay * 2)
							+ g_InControlState.SpeedControl;

					//Add aditional delay when Balance mode is on
					if (g_InControlState.BalanceMode)
    203c:	01000000 	tsteq	r0, r0

				//Calculate Servo Move time
				if ((abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.z) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.y*2) > cTravelDeadZone)) {
					ServoMoveTime = g_InControlState.gaitCur.NomGaitSpeed
    2040:	00000305 	andeq	r0, r0, r5, lsl #6
							+ (g_InControlState.InputTimeDelay * 2)
							+ g_InControlState.SpeedControl;

					//Add aditional delay when Balance mode is on
					if (g_InControlState.BalanceMode)
						ServoMoveTime = ServoMoveTime + BALANCE_DELAY;
    2044:	244c0000 	strbcs	r0, [ip]
    2048:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
				} else
					//Movement speed excl. Walking
					ServoMoveTime = 200 + g_InControlState.SpeedControl;
    204c:	00006d41 	andeq	r6, r0, r1, asr #26
    2050:	4c010100 	stfmis	f0, [r1], {0}
    2054:	0000178f 	andeq	r1, r0, pc, lsl #15

				// note we broke up the servo driver into start/commit that way we can output all of the servo information
				// before we wait and only have the termination information to output after the wait.  That way we hopefully
				// be more accurate with our timings...
				DoBackgroundProcess();
    2058:	05844309 	streq	r4, [r4, #777]
				StartUpdateServos();
    205c:	01010000 	tsteq	r1, r0

				// See if we need to sync our processor with the servo driver while walking to ensure the prev is completed
				//before sending the next one

				// Finding any incident of GaitPos/Rot <>0:
				for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    2060:	0000a20d 	andeq	sl, r0, sp, lsl #4
					if ((GaitPosX[LegIndex] > cGPlimit)
    2064:	00145900 	andseq	r5, r4, r0, lsl #18
    2068:	009f0e00 	addseq	r0, pc, r0, lsl #28
    206c:	00110000 	andseq	r0, r1, r0
    2070:	00107e4a 	andseq	r7, r0, sl, asr #28
    2074:	49330200 	ldmdbmi	r3!, {r9}
    2078:	01000014 	tsteq	r0, r4, lsl r0
    207c:	00000305 	andeq	r0, r0, r5, lsl #6
    2080:	8c4a0000 	marhi	acc0, r0, sl
    2084:	02000018 	andeq	r0, r0, #24	; 0x18
    2088:	00144934 	andseq	r4, r4, r4, lsr r9
    208c:	03050100 	movweq	r0, #20736	; 0x5100
    2090:	00000000 	andeq	r0, r0, r0
    2094:	000db24a 	andeq	fp, sp, sl, asr #4
    2098:	b44e0200 	strblt	r0, [lr], #-512
    209c:	01000000 	tsteq	r0, r0
							|| (GaitPosZ[LegIndex] > cGPlimit)
							|| (GaitPosZ[LegIndex] < -cGPlimit)
							|| (GaitRotY[LegIndex] > cGPlimit)
							|| (GaitRotY[LegIndex] < -cGPlimit)) {

						bExtraCycle = g_InControlState.gaitCur.NrLiftedPos + 1;	//For making sure that we are using timed move until all legs are down
    20a0:	00000305 	andeq	r0, r0, r5, lsl #6
    20a4:	6e4a0000 	cdpvs	0, 4, cr0, cr10, cr0, {0}
    20a8:	02000014 	andeq	r0, r0, #20	; 0x14

				// See if we need to sync our processor with the servo driver while walking to ensure the prev is completed
				//before sending the next one

				// Finding any incident of GaitPos/Rot <>0:
				for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    20ac:	0000a295 	muleq	r0, r5, r2
    20b0:	03050100 	movweq	r0, #20736	; 0x5100

						bExtraCycle = g_InControlState.gaitCur.NrLiftedPos + 1;	//For making sure that we are using timed move until all legs are down
						break;
					}
				}
				if (bExtraCycle > 0) {
    20b4:	00000000 	andeq	r0, r0, r0
					bExtraCycle--;
    20b8:	0012a64a 	andseq	sl, r2, sl, asr #12
    20bc:	74960200 	ldrvc	r0, [r6], #512
					fWalking = !(bExtraCycle == 0);
    20c0:	01000000 	tsteq	r0, r0
    20c4:	00000305 	andeq	r0, r0, r5, lsl #6

					//Get endtime and calculate wait time
					lTimeWaitEnd = lTimerStart + PrevServoMoveTime;
    20c8:	1e4a0000 	cdpne	0, 4, cr0, cr10, cr0, {0}
    20cc:	0200000e 	andeq	r0, r0, #14	; 0xe
    20d0:	00004a97 	muleq	r0, r7, sl
					PrintString("\n");
#endif
					//DebugWrite(A1, HIGH);
					do {
						// Wait the appropriate time, call any background process while waiting...
						DoBackgroundProcess();
    20d4:	03050100 	movweq	r0, #20736	; 0x5100
					} while (getMillis() < lTimeWaitEnd);
    20d8:	00000000 	andeq	r0, r0, r0
    20dc:	00002c0d 	andeq	r2, r0, sp, lsl #24
					PrintString("\n");
#endif

				}
				// Only do commit if we are actually doing something...
				CommitServoDriver(ServoMoveTime);
    20e0:	0014d500 	andseq	sp, r4, r0, lsl #10
    20e4:	009f0e00 	addseq	r0, pc, r0, lsl #28
    20e8:	00050000 	andeq	r0, r5, r0
			} else {
				//Turn the bot off - May need to add ajust here...
				if (g_InControlState.fPrev_RobotOn || (AllDown = 0)) {
    20ec:	000d794a 	andeq	r7, sp, sl, asr #18
					PrintString("Barebones lTimeWaitEnd-Millis  ");
					Printu32d(getMillis);
					PrintString("\n");
#endif
				} else {
					FreeServos();
    20f0:	e7d20300 	ldrb	r0, [r2, r0, lsl #6]
    20f4:	01000014 	tsteq	r0, r4, lsl r0
				// Only do commit if we are actually doing something...
				CommitServoDriver(ServoMoveTime);
			} else {
				//Turn the bot off - May need to add ajust here...
				if (g_InControlState.fPrev_RobotOn || (AllDown = 0)) {
					ServoMoveTime = 600;
    20f8:	00000305 	andeq	r0, r0, r5, lsl #6
    20fc:	c5030000 	strgt	r0, [r3]
					StartUpdateServos();
    2100:	4a000014 	bmi	2158 <__Stack_Size+0x1d58>
					CommitServoDriver(ServoMoveTime);
    2104:	000016eb 	andeq	r1, r0, fp, ror #13
					//MSound(3, 100, 2500, 80, 2250, 60, 2000);
					Buzzed(100, 2500);
    2108:	14fed403 	ldrbtne	sp, [lr], #1027
    210c:	05010000 	streq	r0, [r1]
    2110:	00000003 	andeq	r0, r0, r3
					Buzzed(80, 2250);
    2114:	14c50300 	strbne	r0, [r5], #768
    2118:	df4a0000 	svcle	0x004a0000
					Buzzed(60, 2000);
    211c:	03000012 	movweq	r0, #18	; 0x12
    2120:	001515d6 	ldrsbeq	r1, [r5], -r6
    2124:	03050100 	movweq	r0, #20736	; 0x5100

					//lTimeWaitEnd = getMillis() + 600; // setup to process background stuff while we wait...
					lTimeWaitEnd = getMillis() + 600; // setup to process background stuff while we wait...
    2128:	00000000 	andeq	r0, r0, r0
    212c:	0014c503 	andseq	ip, r4, r3, lsl #10
					Printu32d(lTimeWaitEnd);
					PrintString("\n");
#endif
					do {
						// Wait the appropriate time, call any background process while waiting...
						DoBackgroundProcess();
    2130:	0fe84a00 	svceq	0x00e84a00
					} while (getMillis() < lTimeWaitEnd);
    2134:	d9030000 	stmdble	r3, {}
    2138:	0000152c 	andeq	r1, r0, ip, lsr #10
				} else {
					FreeServos();
				}

				// Allow the Servo driver to do stuff durint our idle time
				IdleTime();
    213c:	00030501 	andeq	r0, r3, r1, lsl #10
				mDelay(20); // give a pause between times we call if nothing is happening
    2140:	03000000 	movweq	r0, #0	; 0x0
			}
			PrevServoMoveTime = ServoMoveTime;
    2144:	000014c5 	andeq	r1, r0, r5, asr #9
    2148:	00129b4a 	andseq	r9, r2, sl, asr #22

			//Store previous g_InControlState.fRobotOn State
			if (g_InControlState.fRobotOn)
    214c:	43dc0300 	bicsmi	r0, ip, #0	; 0x0
    2150:	01000015 	tsteq	r0, r5, lsl r0
				g_InControlState.fPrev_RobotOn = 1;
			else
				g_InControlState.fPrev_RobotOn = 0;
    2154:	00000305 	andeq	r0, r0, r5, lsl #6
    2158:	c5030000 	strgt	r0, [r3]
    215c:	4a000014 	bmi	21b4 <__Stack_Size+0x1db4>
    2160:	0000180e 	andeq	r1, r0, lr, lsl #16
    2164:	155adf03 	ldrbne	sp, [sl, #-3843]
    2168:	05010000 	streq	r0, [r1]
    216c:	00000003 	andeq	r0, r0, r3
    2170:	14c50300 	strbne	r0, [r5], #768
    2174:	940d0000 	strls	r0, [sp]
    2178:	6f000000 	svcvs	0x00000000
    217c:	0e000015 	mcreq	0, 0, r0, cr0, cr5, {0}
    2180:	0000009f 	muleq	r0, pc, r0
    2184:	4d4a0005 	stclmi	0, cr0, [sl, #-20]
    2188:	03000010 	movweq	r0, #16	; 0x10
    218c:	001581e6 	andseq	r8, r5, r6, ror #3
    2190:	03050100 	movweq	r0, #20736	; 0x5100
    2194:	00000000 	andeq	r0, r0, r0
    2198:	00155f03 	andseq	r5, r5, r3, lsl #30
    219c:	13dc4a00 	bicsne	r4, ip, #0	; 0x0
    21a0:	e8030000 	stmda	r3, {}
    21a4:	0000155f 	andeq	r1, r0, pc, asr r5
    21a8:	00030501 	andeq	r0, r3, r1, lsl #10
    21ac:	4a000000 	bmi	21b4 <__Stack_Size+0x1db4>
    21b0:	000017d4 	ldrdeq	r1, [r0], -r4
    21b4:	15aaea03 	strne	lr, [sl, #2563]!
    21b8:	05010000 	streq	r0, [r1]
    21bc:	00000003 	andeq	r0, r0, r3
    21c0:	155f0300 	ldrbne	r0, [pc, #-768]	; 1ec8 <__Stack_Size+0x1ac8>
    21c4:	0d4a0000 	stcleq	0, cr0, [sl]
    21c8:	03000014 	movweq	r0, #20	; 0x14
    21cc:	0015c1ee 	andseq	ip, r5, lr, ror #3
    21d0:	03050100 	movweq	r0, #20736	; 0x5100
    21d4:	00000000 	andeq	r0, r0, r0
    21d8:	0001ab03 	andeq	sl, r1, r3, lsl #22
    21dc:	12b44a00 	adcsne	r4, r4, #0	; 0x0
    21e0:	f1030000 	undefined instruction 0xf1030000
    21e4:	000015d8 	ldrdeq	r1, [r0], -r8
    21e8:	00030501 	andeq	r0, r3, r1, lsl #10
    21ec:	03000000 	movweq	r0, #0	; 0x0
    21f0:	000001ab 	andeq	r0, r0, fp, lsr #3
    21f4:	0018394a 	andseq	r3, r8, sl, asr #18
    21f8:	eff40300 	svc	0x00f40300
    21fc:	01000015 	tsteq	r0, r5, lsl r0
    2200:	00000305 	andeq	r0, r0, r5, lsl #6
    2204:	ab030000 	blge	c220c <__Stack_Size+0xc1e0c>
    2208:	4a000001 	bmi	2214 <__Stack_Size+0x1e14>
    220c:	00001177 	andeq	r1, r0, r7, ror r1
    2210:	1606f903 	strne	pc, [r6], -r3, lsl #18
    2214:	05010000 	streq	r0, [r1]
    2218:	00000003 	andeq	r0, r0, r3
    221c:	14c50300 	strbne	r0, [r5], #768
    2220:	804a0000 	subhi	r0, sl, r0
    2224:	03000011 	movweq	r0, #17	; 0x11
    2228:	00161dfb 	ldrsheq	r1, [r6], -fp
    222c:	03050100 	movweq	r0, #20736	; 0x5100
    2230:	00000000 	andeq	r0, r0, r0
    2234:	0014c503 	andseq	ip, r4, r3, lsl #10
    2238:	0cb24a00 	fldmiaseq	r2!, {s8-s7}
    223c:	ff030000 	undefined instruction 0xff030000
    2240:	00001634 	andeq	r1, r0, r4, lsr r6
    2244:	00030501 	andeq	r0, r3, r1, lsl #10
    2248:	03000000 	movweq	r0, #0	; 0x0
    224c:	000014c5 	andeq	r1, r0, r5, asr #9
    2250:	00105649 	andseq	r5, r0, r9, asr #12
    2254:	01040300 	tsteq	r4, r0, lsl #6
    2258:	0000164c 	andeq	r1, r0, ip, asr #12
    225c:	00030501 	andeq	r0, r3, r1, lsl #10
    2260:	03000000 	movweq	r0, #0	; 0x0
    2264:	000014c5 	andeq	r1, r0, r5, asr #9
    2268:	00106049 	andseq	r6, r0, r9, asr #32
    226c:	01060300 	tsteq	r6, r0, lsl #6
    2270:	00001664 	andeq	r1, r0, r4, ror #12
    2274:	00030501 	andeq	r0, r3, r1, lsl #10
    2278:	03000000 	movweq	r0, #0	; 0x0
    227c:	000014c5 	andeq	r1, r0, r5, asr #9
    2280:	00106a49 	andseq	r6, r0, r9, asr #20
    2284:	01080300 	tsteq	r8, r0, lsl #6
    2288:	0000167c 	andeq	r1, r0, ip, ror r6
    228c:	00030501 	andeq	r0, r3, r1, lsl #10
    2290:	03000000 	movweq	r0, #0	; 0x0
    2294:	000014c5 	andeq	r1, r0, r5, asr #9
    2298:	00173e49 	andseq	r3, r7, r9, asr #28
    229c:	010c0300 	tsteq	ip, r0, lsl #6
    22a0:	000000b4 	strheq	r0, [r0], -r4
    22a4:	00030501 	andeq	r0, r3, r1, lsl #10
    22a8:	49000000 	stmdbmi	r0, {}
    22ac:	00000cb3 	strheq	r0, [r0], -r3
    22b0:	c5011203 	strgt	r1, [r1, #-515]
    22b4:	01000014 	tsteq	r0, r4, lsl r0
    22b8:	00000305 	andeq	r0, r0, r5, lsl #6
    22bc:	9b490000 	blls	12422c4 <__Stack_Size+0x1241ec4>
    22c0:	03000018 	movweq	r0, #24	; 0x18
    22c4:	14c50113 	strbne	r0, [r5], #275
    22c8:	05010000 	streq	r0, [r1]
    22cc:	00000003 	andeq	r0, r0, r3
    22d0:	14bc4900 	ldrtne	r4, [ip], #2304
    22d4:	14030000 	strne	r0, [r3]
    22d8:	0014c501 	andseq	ip, r4, r1, lsl #10
    22dc:	03050100 	movweq	r0, #20736	; 0x5100
    22e0:	00000000 	andeq	r0, r0, r0
    22e4:	000c8249 	andeq	r8, ip, r9, asr #4
    22e8:	01190300 	tsteq	r9, r0, lsl #6
    22ec:	000014c5 	andeq	r1, r0, r5, asr #9
    22f0:	00030501 	andeq	r0, r3, r1, lsl #10
    22f4:	49000000 	stmdbmi	r0, {}
    22f8:	00000c8a 	andeq	r0, r0, sl, lsl #25
    22fc:	c5011a03 	strgt	r1, [r1, #-2563]
    2300:	01000014 	tsteq	r0, r4, lsl r0
    2304:	00000305 	andeq	r0, r0, r5, lsl #6
    2308:	92490000 	subls	r0, r9, #0	; 0x0
    230c:	0300000c 	movweq	r0, #12	; 0xc
    2310:	14c5011b 	strbne	r0, [r5], #283
    2314:	05010000 	streq	r0, [r1]
    2318:	00000003 	andeq	r0, r0, r3
    231c:	0d734900 	ldcleq	9, cr4, [r3]
    2320:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
    2324:	00007401 	andeq	r7, r0, r1, lsl #8
    2328:	03050100 	movweq	r0, #20736	; 0x5100
    232c:	00000000 	andeq	r0, r0, r0
    2330:	000d7049 	andeq	r7, sp, r9, asr #32
    2334:	011f0300 	tsteq	pc, r0, lsl #6
    2338:	00000074 	andeq	r0, r0, r4, ror r0
    233c:	00030501 	andeq	r0, r3, r1, lsl #10
    2340:	49000000 	stmdbmi	r0, {}
    2344:	00000fa6 	andeq	r0, r0, r6, lsr #31
    2348:	2c012203 	sfmcs	f2, 4, [r1], {3}
    234c:	01000000 	tsteq	r0, r0
    2350:	00000305 	andeq	r0, r0, r5, lsl #6
    2354:	dd490000 	stclle	0, cr0, [r9]
    2358:	0300000f 	movweq	r0, #15	; 0xf
    235c:	002c0123 	eoreq	r0, ip, r3, lsr #2
    2360:	05010000 	streq	r0, [r1]
    2364:	00000003 	andeq	r0, r0, r3
    2368:	0f664900 	svceq	0x00664900
    236c:	24030000 	strcs	r0, [r3]
    2370:	00002c01 	andeq	r2, r0, r1, lsl #24
    2374:	03050100 	movweq	r0, #20736	; 0x5100
    2378:	00000000 	andeq	r0, r0, r0
    237c:	00103749 	andseq	r3, r0, r9, asr #14
    2380:	01250300 	teqeq	r5, r0, lsl #6
    2384:	0000002c 	andeq	r0, r0, ip, lsr #32
    2388:	00030501 	andeq	r0, r3, r1, lsl #10
    238c:	49000000 	stmdbmi	r0, {}
    2390:	00001041 	andeq	r1, r0, r1, asr #32
    2394:	2c012803 	stccs	8, cr2, [r1], {3}
    2398:	01000000 	tsteq	r0, r0
    239c:	00000305 	andeq	r0, r0, r5, lsl #6
    23a0:	47490000 	strbmi	r0, [r9, -r0]
    23a4:	03000010 	movweq	r0, #16	; 0x10
    23a8:	002c0129 	eoreq	r0, ip, r9, lsr #2
    23ac:	05010000 	streq	r0, [r1]
    23b0:	00000003 	andeq	r0, r0, r3
    23b4:	0ff34900 	svceq	0x00f34900
    23b8:	2a030000 	bcs	c23c0 <__Stack_Size+0xc1fc0>
    23bc:	00002c01 	andeq	r2, r0, r1, lsl #24
    23c0:	03050100 	movweq	r0, #20736	; 0x5100
    23c4:	00000000 	andeq	r0, r0, r0
    23c8:	00155049 	andseq	r5, r5, r9, asr #32
    23cc:	012b0300 	teqeq	fp, r0, lsl #6
    23d0:	00000025 	andeq	r0, r0, r5, lsr #32
    23d4:	00030501 	andeq	r0, r3, r1, lsl #10
    23d8:	49000000 	stmdbmi	r0, {}
    23dc:	000018b7 	strheq	r1, [r0], -r7
    23e0:	2c012e03 	stccs	14, cr2, [r1], {3}
    23e4:	01000000 	tsteq	r0, r0
    23e8:	00000305 	andeq	r0, r0, r5, lsl #6
    23ec:	cd490000 	stclgt	0, cr0, [r9]
    23f0:	03000018 	movweq	r0, #24	; 0x18
    23f4:	002c012f 	eoreq	r0, ip, pc, lsr #2
    23f8:	05010000 	streq	r0, [r1]
    23fc:	00000003 	andeq	r0, r0, r3
    2400:	18c24900 	stmiane	r2, {r8, fp, lr}^
    2404:	30030000 	andcc	r0, r3, r0
    2408:	00002c01 	andeq	r2, r0, r1, lsl #24
    240c:	03050100 	movweq	r0, #20736	; 0x5100
    2410:	00000000 	andeq	r0, r0, r0
    2414:	0018b149 	andseq	fp, r8, r9, asr #2
    2418:	01310300 	teqeq	r1, r0, lsl #6
    241c:	00000025 	andeq	r0, r0, r5, lsr #32
    2420:	00030501 	andeq	r0, r3, r1, lsl #10
    2424:	49000000 	stmdbmi	r0, {}
    2428:	000018bc 	strheq	r1, [r0], -ip
    242c:	25013203 	strcs	r3, [r1, #-515]
    2430:	01000000 	tsteq	r0, r0
    2434:	00000305 	andeq	r0, r0, r5, lsl #6
    2438:	c7490000 	strbgt	r0, [r9, -r0]
    243c:	03000018 	movweq	r0, #24	; 0x18
    2440:	00250133 	eoreq	r0, r5, r3, lsr r1
    2444:	05010000 	streq	r0, [r1]
    2448:	00000003 	andeq	r0, r0, r3
    244c:	14c84900 	strbne	r4, [r8], #2304
    2450:	36030000 	strcc	r0, [r3], -r0
    2454:	00002501 	andeq	r2, r0, r1, lsl #10
    2458:	03050100 	movweq	r0, #20736	; 0x5100
    245c:	00000000 	andeq	r0, r0, r0
    2460:	0014d349 	andseq	sp, r4, r9, asr #6
    2464:	01370300 	teqeq	r7, r0, lsl #6
    2468:	00000025 	andeq	r0, r0, r5, lsr #32
    246c:	00030501 	andeq	r0, r3, r1, lsl #10
    2470:	49000000 	stmdbmi	r0, {}
    2474:	000014de 	ldrdeq	r1, [r0], -lr
    2478:	25013803 	strcs	r3, [r1, #-2051]
    247c:	01000000 	tsteq	r0, r0
    2480:	00000305 	andeq	r0, r0, r5, lsl #6
    2484:	83490000 	movthi	r0, #36864	; 0x9000
    2488:	0300000d 	movweq	r0, #13	; 0xd
    248c:	00b40139 	adcseq	r0, r4, r9, lsr r1
    2490:	05010000 	streq	r0, [r1]
    2494:	00000003 	andeq	r0, r0, r3
    2498:	0d454900 	stcleq	9, cr4, [r5]
    249c:	3a030000 	bcc	c24a4 <__Stack_Size+0xc20a4>
    24a0:	0000b401 	andeq	fp, r0, r1, lsl #8
    24a4:	03050100 	movweq	r0, #20736	; 0x5100
    24a8:	00000000 	andeq	r0, r0, r0
    24ac:	00116749 	andseq	r6, r1, r9, asr #14
    24b0:	013b0300 	teqeq	fp, r0, lsl #6
    24b4:	000000b4 	strheq	r0, [r0], -r4
    24b8:	00030501 	andeq	r0, r3, r1, lsl #10
    24bc:	49000000 	stmdbmi	r0, {}
    24c0:	000014a6 	andeq	r1, r0, r6, lsr #9
    24c4:	4a013e03 	bmi	51cd8 <__Stack_Size+0x518d8>
    24c8:	01000000 	tsteq	r0, r0
    24cc:	00000305 	andeq	r0, r0, r5, lsl #6
    24d0:	72490000 	subvc	r0, r9, #0	; 0x0
    24d4:	0300000c 	movweq	r0, #12	; 0xc
    24d8:	004a013f 	subeq	r0, sl, pc, lsr r1
    24dc:	05010000 	streq	r0, [r1]
    24e0:	00000003 	andeq	r0, r0, r3
    24e4:	18564900 	ldmdane	r6, {r8, fp, lr}^
    24e8:	40030000 	andmi	r0, r3, r0
    24ec:	00007401 	andeq	r7, r0, r1, lsl #8
    24f0:	03050100 	movweq	r0, #20736	; 0x5100
    24f4:	00000000 	andeq	r0, r0, r0
    24f8:	00121449 	andseq	r1, r2, r9, asr #8
    24fc:	01420300 	cmpeq	r2, r0, lsl #6
    2500:	000000a2 	andeq	r0, r0, r2, lsr #1
    2504:	00030501 	andeq	r0, r3, r1, lsl #10
    2508:	49000000 	stmdbmi	r0, {}
    250c:	00001210 	andeq	r1, r0, r0, lsl r2
    2510:	a2014303 	andge	r4, r1, #201326592	; 0xc000000
    2514:	01000000 	tsteq	r0, r0
    2518:	00000305 	andeq	r0, r0, r5, lsl #6
    251c:	c7490000 	strbgt	r0, [r9, -r0]
    2520:	03000011 	movweq	r0, #17	; 0x11
    2524:	00b40149 	adcseq	r0, r4, r9, asr #2
    2528:	05010000 	streq	r0, [r1]
    252c:	00000003 	andeq	r0, r0, r3
    2530:	12ac4900 	adcne	r4, ip, #0	; 0x0
    2534:	4a030000 	bmi	c253c <__Stack_Size+0xc213c>
    2538:	0000a201 	andeq	sl, r0, r1, lsl #4
    253c:	03050100 	movweq	r0, #20736	; 0x5100
    2540:	00000000 	andeq	r0, r0, r0
    2544:	00155749 	andseq	r5, r5, r9, asr #14
    2548:	01500300 	cmpeq	r0, r0, lsl #6
    254c:	00000025 	andeq	r0, r0, r5, lsr #32
    2550:	00030501 	andeq	r0, r3, r1, lsl #10
    2554:	49000000 	stmdbmi	r0, {}
    2558:	0000156f 	andeq	r1, r0, pc, ror #10
    255c:	25015103 	strcs	r5, [r1, #-259]
    2560:	01000000 	tsteq	r0, r0
    2564:	00000305 	andeq	r0, r0, r5, lsl #6
    2568:	63490000 	movtvs	r0, #36864	; 0x9000
    256c:	03000015 	movweq	r0, #21	; 0x15
    2570:	00250152 	eoreq	r0, r5, r2, asr r1
    2574:	05010000 	streq	r0, [r1]
    2578:	00000003 	andeq	r0, r0, r3
    257c:	11304900 	teqne	r0, r0, lsl #18
    2580:	53030000 	movwpl	r0, #12288	; 0x3000
    2584:	00002501 	andeq	r2, r0, r1, lsl #10
    2588:	03050100 	movweq	r0, #20736	; 0x5100
    258c:	00000000 	andeq	r0, r0, r0
    2590:	0013f649 	andseq	pc, r3, r9, asr #12
    2594:	01540300 	cmpeq	r4, r0, lsl #6
    2598:	00000025 	andeq	r0, r0, r5, lsr #32
    259c:	00030501 	andeq	r0, r3, r1, lsl #10
    25a0:	49000000 	stmdbmi	r0, {}
    25a4:	00000f1a 	andeq	r0, r0, sl, lsl pc
    25a8:	25015503 	strcs	r5, [r1, #-1283]
    25ac:	01000000 	tsteq	r0, r0
    25b0:	00000305 	andeq	r0, r0, r5, lsl #6
    25b4:	cb490000 	blgt	12425bc <__Stack_Size+0x12421bc>
    25b8:	0300000c 	movweq	r0, #12	; 0xc
    25bc:	00b40157 	adcseq	r0, r4, r7, asr r1
    25c0:	05010000 	streq	r0, [r1]
    25c4:	00000003 	andeq	r0, r0, r3
    25c8:	0dcc4900 	stcleq	9, cr4, [ip]
    25cc:	5b030000 	blpl	c25d4 <__Stack_Size+0xc21d4>
    25d0:	0000b401 	andeq	fp, r0, r1, lsl #8
    25d4:	03050100 	movweq	r0, #20736	; 0x5100
    25d8:	00000000 	andeq	r0, r0, r0
    25dc:	0000250d 	andeq	r2, r0, sp, lsl #10
    25e0:	0019d500 	andseq	sp, r9, r0, lsl #10
    25e4:	009f0e00 	addseq	r0, pc, r0, lsl #28
    25e8:	00050000 	andeq	r0, r5, r0
    25ec:	00128349 	andseq	r8, r2, r9, asr #6
    25f0:	015d0300 	cmpeq	sp, r0, lsl #6
    25f4:	000019c5 	andeq	r1, r0, r5, asr #19
    25f8:	00030501 	andeq	r0, r3, r1, lsl #10
    25fc:	49000000 	stmdbmi	r0, {}
    2600:	00000e39 	andeq	r0, r0, r9, lsr lr
    2604:	c5015e03 	strgt	r5, [r1, #-3587]
    2608:	01000019 	tsteq	r0, r9, lsl r0
    260c:	00000305 	andeq	r0, r0, r5, lsl #6
    2610:	42490000 	submi	r0, r9, #0	; 0x0
    2614:	0300000e 	movweq	r0, #14	; 0xe
    2618:	19c5015f 	stmibne	r5, {r0, r1, r2, r3, r4, r6, r8}^
    261c:	05010000 	streq	r0, [r1]
    2620:	00000003 	andeq	r0, r0, r3
    2624:	0edb4900 	cdpeq	9, 13, cr4, cr11, cr0, {0}
    2628:	60030000 	andvs	r0, r3, r0
    262c:	0019c501 	andseq	ip, r9, r1, lsl #10
    2630:	03050100 	movweq	r0, #20736	; 0x5100
    2634:	00000000 	andeq	r0, r0, r0
    2638:	00102649 	andseq	r2, r0, r9, asr #12
    263c:	01650300 	cmneq	r5, r0, lsl #6
    2640:	000000b4 	strheq	r0, [r0], -r4
    2644:	00030501 	andeq	r0, r3, r1, lsl #10
    2648:	49000000 	stmdbmi	r0, {}
    264c:	00000dda 	ldrdeq	r0, [r0], -sl
    2650:	74016603 	strvc	r6, [r1], #-1539
    2654:	01000000 	tsteq	r0, r0
    2658:	00000305 	andeq	r0, r0, r5, lsl #6
    265c:	39490000 	stmdbcc	r9, {}^
    2660:	0300000c 	movweq	r0, #12	; 0xc
    2664:	00b4016a 	adcseq	r0, r4, sl, ror #2
    2668:	05010000 	streq	r0, [r1]
    266c:	00000003 	andeq	r0, r0, r3
    2670:	01bb0d00 	undefined instruction 0x01bb0d00
    2674:	1a6a0000 	bne	1a8267c <__Stack_Size+0x1a8227c>
    2678:	9f0e0000 	svcls	0x000e0000
    267c:	05000000 	streq	r0, [r0]
    2680:	50414d00 	subpl	r4, r1, r0, lsl #26
    2684:	90030047 	andls	r0, r3, r7, asr #32
    2688:	001a5a01 	andseq	r5, sl, r1, lsl #20
    268c:	03050100 	movweq	r0, #20736	; 0x5100
    2690:	00000000 	andeq	r0, r0, r0
    2694:	00187f49 	andseq	r7, r8, r9, asr #30
    2698:	03230300 	teqeq	r3, #0	; 0x0
    269c:	00000074 	andeq	r0, r0, r4, ror r0
    26a0:	00030501 	andeq	r0, r3, r1, lsl #10
    26a4:	49000000 	stmdbmi	r0, {}
    26a8:	0000131d 	andeq	r1, r0, sp, lsl r3
    26ac:	a205bc03 	andge	fp, r5, #768	; 0x300
    26b0:	01000000 	tsteq	r0, r0
    26b4:	00000305 	andeq	r0, r0, r5, lsl #6
    26b8:	cc490000 	margt	acc0, r0, r9
    26bc:	03000013 	movweq	r0, #19	; 0x13
    26c0:	0063061a 	rsbeq	r0, r3, sl, lsl r6
    26c4:	05010000 	streq	r0, [r1]
    26c8:	00000003 	andeq	r0, r0, r3
    26cc:	076e0000 	strbeq	r0, [lr, -r0]!
    26d0:	00020000 	andeq	r0, r2, r0
    26d4:	0000068f 	andeq	r0, r0, pc, lsl #13
    26d8:	01c60104 	biceq	r0, r6, r4, lsl #2
    26dc:	ba010000 	blt	426e4 <__Stack_Size+0x422e4>
    26e0:	9d000019 	stcls	0, cr0, [r0, #-100]
    26e4:	00000003 	andeq	r0, r0, r3
    26e8:	00000000 	andeq	r0, r0, r0
    26ec:	36000000 	strcc	r0, [r0], -r0
    26f0:	0200000a 	andeq	r0, r0, #10	; 0xa
    26f4:	41780504 	cmnmi	r8, r4, lsl #10
    26f8:	02020000 	andeq	r0, r2, #0	; 0x0
    26fc:	00049505 	andeq	r9, r4, r5, lsl #10
    2700:	06010200 	streq	r0, [r1], -r0, lsl #4
    2704:	00000469 	andeq	r0, r0, r9, ror #8
    2708:	f2070402 	vshl.s8	d0, d2, d7
    270c:	03000041 	movweq	r0, #65	; 0x41
    2710:	00363175 	eorseq	r3, r6, r5, ror r1
    2714:	004c2802 	subeq	r2, ip, r2, lsl #16
    2718:	02020000 	andeq	r0, r2, #0	; 0x0
    271c:	00022207 	andeq	r2, r2, r7, lsl #4
    2720:	38750300 	ldmdacc	r5!, {r8, r9}^
    2724:	5d290200 	sfmpl	f0, 4, [r9]
    2728:	02000000 	andeq	r0, r0, #0	; 0x0
    272c:	04670801 	strbteq	r0, [r7], #-2049
    2730:	01040000 	tsteq	r4, r0
    2734:	00793802 	rsbseq	r3, r9, r2, lsl #16
    2738:	07050000 	streq	r0, [r5, -r0]
    273c:	00000014 	andeq	r0, r0, r4, lsl r0
    2740:	00171005 	andseq	r1, r7, r5
    2744:	06000100 	streq	r0, [r0], -r0, lsl #2
    2748:	00000f61 	andeq	r0, r0, r1, ror #30
    274c:	00643802 	rsbeq	r3, r4, r2, lsl #16
    2750:	08070000 	stmdaeq	r7, {}
    2754:	00a92703 	adceq	r2, r9, r3, lsl #14
    2758:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    275c:	03000019 	movweq	r0, #25	; 0x19
    2760:	0000a928 	andeq	sl, r0, r8, lsr #18
    2764:	00230200 	eoreq	r0, r3, r0, lsl #4
    2768:	001a4008 	andseq	r4, sl, r8
    276c:	b6290300 	strtlt	r0, [r9], -r0, lsl #6
    2770:	02000000 	andeq	r0, r0, #0	; 0x0
    2774:	09000423 	stmdbeq	r0, {r0, r1, r5, sl}
    2778:	0000af04 	andeq	sl, r0, r4, lsl #30
    277c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2780:	000041f7 	strdeq	r4, [r0], -r7
    2784:	6905040a 	stmdbvs	r5, {r1, r3, sl}
    2788:	0600746e 	streq	r7, [r0], -lr, ror #8
    278c:	00001988 	andeq	r1, r0, r8, lsl #19
    2790:	00842a03 	addeq	r2, r4, r3, lsl #20
    2794:	01040000 	tsteq	r4, r0
    2798:	015f5404 	cmpeq	pc, r4, lsl #8
    279c:	6b050000 	blvs	1427a4 <__Stack_Size+0x1423a4>
    27a0:	0100000f 	tsteq	r0, pc
    27a4:	0011a105 	andseq	sl, r1, r5, lsl #2
    27a8:	40050200 	andmi	r0, r5, r0, lsl #4
    27ac:	03000014 	movweq	r0, #20	; 0x14
    27b0:	000ec305 	andeq	ip, lr, r5, lsl #6
    27b4:	4b050400 	blmi	1437bc <__Stack_Size+0x1433bc>
    27b8:	0500000e 	streq	r0, [r0, #-14]
    27bc:	0010bd05 	andseq	fp, r0, r5, lsl #26
    27c0:	b0050600 	andlt	r0, r5, r0, lsl #12
    27c4:	0700000e 	streq	r0, [r0, -lr]
    27c8:	0016f505 	andseq	pc, r6, r5, lsl #10
    27cc:	51050c00 	tstpl	r5, r0, lsl #24
    27d0:	0d000017 	stceq	0, cr0, [r0, #-92]
    27d4:	0015ef05 	andseq	lr, r5, r5, lsl #30
    27d8:	57050e00 	strpl	r0, [r5, -r0, lsl #28]
    27dc:	0f00000d 	svceq	0x0000000d
    27e0:	00147d05 	andseq	r7, r4, r5, lsl #26
    27e4:	58051000 	stmdapl	r5, {ip}
    27e8:	11000011 	tstne	r0, r1, lsl r0
    27ec:	00151605 	andseq	r1, r5, r5, lsl #12
    27f0:	15051200 	strne	r1, [r5, #-512]
    27f4:	13000017 	movwne	r0, #23	; 0x17
    27f8:	00126205 	andseq	r6, r2, r5, lsl #4
    27fc:	e7051400 	str	r1, [r5, -r0, lsl #8]
    2800:	15000010 	strne	r0, [r0, #-16]
    2804:	000c4e05 	andeq	r4, ip, r5, lsl #28
    2808:	96051600 	strls	r1, [r5], -r0, lsl #12
    280c:	1700000d 	strne	r0, [r0, -sp]
    2810:	00164305 	andseq	r4, r6, r5, lsl #6
    2814:	05018300 	streq	r8, [r1, #-768]
    2818:	000010f5 	strdeq	r1, [r0], -r5
    281c:	bb050184 	bllt	142e34 <__Stack_Size+0x142a34>
    2820:	92000016 	andls	r0, r0, #22	; 0x16
    2824:	11b80501 	undefined instruction 0x11b80501
    2828:	01d00000 	bicseq	r0, r0, r0
    282c:	04020400 	streq	r0, [r2], #-1024
    2830:	0001bdcf 	andeq	fp, r1, pc, asr #27
    2834:	06800500 	streq	r0, [r0], r0, lsl #10
    2838:	05010000 	streq	r0, [r1]
    283c:	00000487 	andeq	r0, r0, r7, lsl #9
    2840:	03100502 	tsteq	r0, #8388608	; 0x800000
    2844:	05040000 	streq	r0, [r4]
    2848:	0000068e 	andeq	r0, r0, lr, lsl #13
    284c:	04cb0508 	strbeq	r0, [fp], #1288
    2850:	05100000 	ldreq	r0, [r0]
    2854:	00000144 	andeq	r0, r0, r4, asr #2
    2858:	058c0520 	streq	r0, [ip, #1312]
    285c:	00c00000 	sbceq	r0, r0, r0
    2860:	00020305 	andeq	r0, r2, r5, lsl #6
    2864:	05018000 	streq	r8, [r1]
    2868:	000006c1 	andeq	r0, r0, r1, asr #13
    286c:	59050280 	stmdbpl	r5, {r7, r9}
    2870:	80000004 	andhi	r0, r0, r4
    2874:	00260504 	eoreq	r0, r6, r4, lsl #10
    2878:	08800000 	stmeq	r0, {}
    287c:	0002a505 	andeq	sl, r2, r5, lsl #10
    2880:	05108000 	ldreq	r8, [r0]
    2884:	00000135 	andeq	r0, r0, r5, lsr r1
    2888:	0b002080 	bleq	aa90 <__Stack_Size+0xa690>
    288c:	016e0401 	cmneq	lr, r1, lsl #8
    2890:	000002f3 	strdeq	r0, [r0], -r3
    2894:	00029205 	andeq	r9, r2, r5, lsl #4
    2898:	7f050000 	svcvc	0x00050000
    289c:	01000002 	tsteq	r0, r2
    28a0:	0005bc05 	andeq	fp, r5, r5, lsl #24
    28a4:	70050200 	andvc	r0, r5, r0, lsl #4
    28a8:	03000002 	movweq	r0, #2	; 0x2
    28ac:	0000b805 	andeq	fp, r0, r5, lsl #16
    28b0:	c6050400 	strgt	r0, [r5], -r0, lsl #8
    28b4:	05000000 	streq	r0, [r0]
    28b8:	00059705 	andeq	r9, r5, r5, lsl #14
    28bc:	77050600 	strvc	r0, [r5, -r0, lsl #12]
    28c0:	07000005 	streq	r0, [r0, -r5]
    28c4:	0001a005 	andeq	sl, r1, r5
    28c8:	8a050800 	bhi	1448d0 <__Stack_Size+0x1444d0>
    28cc:	09000001 	stmdbeq	r0, {r0}
    28d0:	00063405 	andeq	r3, r6, r5, lsl #8
    28d4:	9f050a00 	svcls	0x00050a00
    28d8:	0b000004 	bleq	28f0 <__Stack_Size+0x24f0>
    28dc:	00044005 	andeq	r4, r4, r5
    28e0:	03050c00 	movweq	r0, #23552	; 0x5c00
    28e4:	0d000001 	stceq	0, cr0, [r0, #-4]
    28e8:	0002ea05 	andeq	lr, r2, r5, lsl #20
    28ec:	d9050e00 	stmdble	r5, {r9, sl, fp}
    28f0:	0f000002 	svceq	0x00000002
    28f4:	00008c05 	andeq	r8, r0, r5, lsl #24
    28f8:	bd051000 	stclt	0, cr1, [r5]
    28fc:	11000004 	tstne	r0, r4
    2900:	00060205 	andeq	r0, r6, r5, lsl #4
    2904:	34051200 	strcc	r1, [r5], #-512
    2908:	13000000 	movwne	r0, #0	; 0x0
    290c:	00051105 	andeq	r1, r5, r5, lsl #2
    2910:	fa051400 	blx	147918 <__Stack_Size+0x147518>
    2914:	15000004 	strne	r0, [r0, #-4]
    2918:	00032305 	andeq	r2, r3, r5, lsl #6
    291c:	fb051600 	blx	148126 <__Stack_Size+0x147d26>
    2920:	17000002 	strne	r0, [r0, -r2]
    2924:	00042e05 	andeq	r2, r4, r5, lsl #28
    2928:	6b051800 	blvs	148930 <__Stack_Size+0x148530>
    292c:	19000000 	stmdbne	r0, {}
    2930:	00007305 	andeq	r7, r0, r5, lsl #6
    2934:	bf051a00 	svclt	0x00051a00
    2938:	1b000002 	blne	2948 <__Stack_Size+0x2548>
    293c:	00066005 	andeq	r6, r6, r5
    2940:	d2051c00 	andle	r1, r5, #0	; 0x0
    2944:	1d000001 	stcne	0, cr0, [r0, #-4]
    2948:	00064505 	andeq	r4, r6, r5, lsl #10
    294c:	20051e00 	andcs	r1, r5, r0, lsl #28
    2950:	1f000006 	svcne	0x00000006
    2954:	0005ef05 	andeq	lr, r5, r5, lsl #30
    2958:	d1052000 	tstle	r5, r0
    295c:	21000005 	tstcs	r0, r5
    2960:	00040005 	andeq	r0, r4, r5
    2964:	e3052200 	movw	r2, #20992	; 0x5200
    2968:	23000003 	movwcs	r0, #3	; 0x3
    296c:	00035a05 	andeq	r5, r3, r5, lsl #20
    2970:	43052400 	movwmi	r2, #21504	; 0x5400
    2974:	25000003 	strcs	r0, [r0, #-3]
    2978:	00055b05 	andeq	r5, r5, r5, lsl #22
    297c:	47052600 	strmi	r2, [r5, -r0, lsl #12]
    2980:	27000005 	strcs	r0, [r0, -r5]
    2984:	0006cf05 	andeq	ip, r6, r5, lsl #30
    2988:	ae052800 	cdpge	8, 0, cr2, cr5, cr0, {0}
    298c:	29000006 	stmdbcs	r0, {r1, r2}
    2990:	00001205 	andeq	r1, r0, r5, lsl #4
    2994:	1d052a00 	fstsne	s4, [r5]
    2998:	2b000001 	blcs	29a4 <__Stack_Size+0x25a4>
    299c:	00041305 	andeq	r1, r4, r5, lsl #6
    29a0:	f4052c00 	undefined instruction 0xf4052c00
    29a4:	2d000001 	stccs	0, cr0, [r0, #-4]
    29a8:	00033805 	andeq	r3, r3, r5, lsl #16
    29ac:	eb052e00 	bl	14e1b4 <__Stack_Size+0x14ddb4>
    29b0:	2f000001 	svccs	0x00000001
    29b4:	00016505 	andeq	r6, r1, r5, lsl #10
    29b8:	59053000 	stmdbpl	r5, {ip, sp}
    29bc:	31000001 	tstcc	r0, r1
    29c0:	07040c00 	streq	r0, [r4, -r0, lsl #24]
    29c4:	191c010d 	ldmdbne	ip, {r0, r2, r3, r8}
    29c8:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    29cc:	00000001 	andeq	r0, r0, r1
    29d0:	00000000 	andeq	r0, r0, r0
    29d4:	275d0100 	ldrbcs	r0, [sp, -r0, lsl #2]
    29d8:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    29dc:	00001a5f 	andeq	r1, r0, pc, asr sl
    29e0:	00b64e01 	adcseq	r4, r6, r1, lsl #28
    29e4:	50010000 	andpl	r0, r1, r0
    29e8:	0064690f 	rsbeq	r6, r4, pc, lsl #18
    29ec:	00b64e01 	adcseq	r4, r6, r1, lsl #28
    29f0:	51010000 	tstpl	r1, r0
    29f4:	45011000 	strmi	r1, [r1]
    29f8:	0100001a 	tsteq	r0, sl, lsl r0
    29fc:	00b60151 	adcseq	r0, r6, r1, asr r1
	...
    2a08:	5d010000 	stcpl	0, cr0, [r1]
    2a0c:	00000352 	andeq	r0, r0, r2, asr r3
    2a10:	001a5f11 	andseq	r5, sl, r1, lsl pc
    2a14:	b6510100 	ldrblt	r0, [r1], -r0, lsl #2
    2a18:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    2a1c:	0000000e 	andeq	r0, r0, lr
    2a20:	19d3010d 	ldmibne	r3, {r0, r2, r3, r8}^
    2a24:	56010000 	strpl	r0, [r1], -r0
    2a28:	00000001 	andeq	r0, r0, r1
    2a2c:	00000000 	andeq	r0, r0, r0
    2a30:	805d0100 	subshi	r0, sp, r0, lsl #2
    2a34:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    2a38:	0000480c 	andeq	r4, r0, ip, lsl #16
    2a3c:	03805601 	orreq	r5, r0, #1048576	; 0x100000
    2a40:	50010000 	andpl	r0, r1, r0
    2a44:	01006912 	tsteq	r0, r2, lsl r9
    2a48:	0000b657 	andeq	fp, r0, r7, asr r6
    2a4c:	04090000 	streq	r0, [r9]
    2a50:	00000386 	andeq	r0, r0, r6, lsl #7
    2a54:	0000af13 	andeq	sl, r0, r3, lsl pc
    2a58:	36011000 	strcc	r1, [r1], -r0
    2a5c:	01000019 	tsteq	r0, r9, lsl r0
    2a60:	00b601f1 	ldrshteq	r0, [r6], r1
	...
    2a6c:	5d010000 	stcpl	0, cr0, [r1]
    2a70:	000003c2 	andeq	r0, r0, r2, asr #7
    2a74:	00646914 	rsbeq	r6, r4, r4, lsl r9
    2a78:	00b6f101 	adcseq	pc, r6, r1, lsl #2
    2a7c:	0ee10000 	cdpeq	0, 14, cr0, cr1, cr0, {0}
    2a80:	69150000 	ldmdbvs	r5, {}
    2a84:	b6f20100 	ldrbtlt	r0, [r2], r0, lsl #2
    2a88:	ff000000 	undefined instruction 0xff000000
    2a8c:	0000000e 	andeq	r0, r0, lr
    2a90:	19680110 	stmdbne	r8!, {r4, r8}^
    2a94:	fb010000 	blx	42a9e <__Stack_Size+0x4269e>
    2a98:	0000b601 	andeq	fp, r0, r1, lsl #12
	...
    2aa4:	f95d0100 	undefined instruction 0xf95d0100
    2aa8:	14000003 	strne	r0, [r0], #-3
    2aac:	01006469 	tsteq	r0, r9, ror #8
    2ab0:	0000b6fb 	strdeq	fp, [r0], -fp
    2ab4:	000f1d00 	andeq	r1, pc, r0, lsl #26
    2ab8:	00691500 	rsbeq	r1, r9, r0, lsl #10
    2abc:	00b6fc01 	adcseq	pc, r6, r1, lsl #24
    2ac0:	0f3b0000 	svceq	0x003b0000
    2ac4:	16000000 	strne	r0, [r0], -r0
    2ac8:	0019f001 	andseq	pc, r9, r1
    2acc:	01050100 	tsteq	r5, r0, lsl #2
    2ad0:	00000001 	andeq	r0, r0, r1
    2ad4:	00000000 	andeq	r0, r0, r0
    2ad8:	000f5900 	andeq	r5, pc, r0, lsl #18
    2adc:	00043b00 	andeq	r3, r4, r0, lsl #22
    2ae0:	64691700 	strbtvs	r1, [r9], #-1792
    2ae4:	01050100 	tsteq	r5, r0, lsl #2
    2ae8:	000000b6 	strheq	r0, [r0], -r6
    2aec:	70175001 	andsvc	r5, r7, r1
    2af0:	0100736f 	tsteq	r0, pc, ror #6
    2af4:	00b60105 	adcseq	r0, r6, r5, lsl #2
    2af8:	51010000 	tstpl	r1, r0
    2afc:	01006918 	tsteq	r0, r8, lsl r9
    2b00:	00b60106 	adcseq	r0, r6, r6, lsl #2
    2b04:	52010000 	andpl	r0, r1, #0	; 0x0
    2b08:	d2011900 	andle	r1, r1, #0	; 0x0
    2b0c:	01000018 	tsteq	r0, r8, lsl r0
    2b10:	00010111 	andeq	r0, r1, r1, lsl r1
    2b14:	00000000 	andeq	r0, r0, r0
    2b18:	01000000 	tsteq	r0, r0
    2b1c:	0004705d 	andeq	r7, r4, sp, asr r0
    2b20:	1a5f1a00 	bne	17c9328 <__Stack_Size+0x17c8f28>
    2b24:	11010000 	tstne	r1, r0
    2b28:	0000b601 	andeq	fp, r0, r1, lsl #12
    2b2c:	17500100 	ldrbne	r0, [r0, -r0, lsl #2]
    2b30:	00736f70 	rsbseq	r6, r3, r0, ror pc
    2b34:	b6011101 	strlt	r1, [r1], -r1, lsl #2
    2b38:	01000000 	tsteq	r0, r0
    2b3c:	011b0051 	tsteq	fp, r1, asr r0
    2b40:	00001a65 	andeq	r1, r0, r5, ror #20
    2b44:	00018e01 	andeq	r8, r1, r1, lsl #28
    2b48:	00000000 	andeq	r0, r0, r0
    2b4c:	78000000 	stmdavc	r0, {}
    2b50:	b100000f 	tstlt	r0, pc
    2b54:	11000004 	tstne	r0, r4
    2b58:	00001a40 	andeq	r1, r0, r0, asr #20
    2b5c:	00b68e01 	adcseq	r8, r6, r1, lsl #28
    2b60:	0f970000 	svceq	0x00970000
    2b64:	691c0000 	ldmdbvs	ip, {}
    2b68:	b68f0100 	strlt	r0, [pc], r0, lsl #2
    2b6c:	01000000 	tsteq	r0, r0
    2b70:	1aeb1d50 	bne	ffaca0b8 <SCS_BASE+0x1fabc0b8>
    2b74:	90010000 	andls	r0, r1, r0
    2b78:	000000b6 	strheq	r0, [r0], -r6
    2b7c:	1b005501 	blne	17f88 <__Stack_Size+0x17b88>
    2b80:	00195501 	andseq	r5, r9, r1, lsl #10
    2b84:	01380100 	teqeq	r8, r0, lsl #2
	...
    2b90:	00000faa 	andeq	r0, r0, sl, lsr #31
    2b94:	000004e7 	andeq	r0, r0, r7, ror #9
    2b98:	001aa011 	andseq	sl, sl, r1, lsl r0
    2b9c:	b6380100 	ldrtlt	r0, [r8], -r0, lsl #2
    2ba0:	d5000000 	strle	r0, [r0]
    2ba4:	1500000f 	strne	r0, [r0, #-15]
    2ba8:	39010069 	stmdbcc	r1, {r0, r3, r5, r6}
    2bac:	000000b6 	strheq	r0, [r0], -r6
    2bb0:	00000fe8 	andeq	r0, r0, r8, ror #31
    2bb4:	aa011e00 	bge	4a3bc <__Stack_Size+0x49fbc>
    2bb8:	0100001a 	tsteq	r0, sl, lsl r0
    2bbc:	00000020 	andeq	r0, r0, r0, lsr #32
    2bc0:	00000000 	andeq	r0, r0, r0
    2bc4:	000ffb00 	andeq	pc, pc, r0, lsl #22
    2bc8:	00050900 	andeq	r0, r5, r0, lsl #18
    2bcc:	00691200 	rsbeq	r1, r9, r0, lsl #4
    2bd0:	00b62101 	adcseq	r2, r6, r1, lsl #2
    2bd4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2bd8:	00199c01 	andseq	r9, r9, r1, lsl #24
    2bdc:	00730100 	rsbseq	r0, r3, r0, lsl #2
    2be0:	00000000 	andeq	r0, r0, r0
    2be4:	1a000000 	bne	2bec <__Stack_Size+0x27ec>
    2be8:	47000010 	smladmi	r0, r0, r0, r0
    2bec:	1f000005 	svcne	0x00000005
    2bf0:	00001963 	andeq	r1, r0, r3, ror #18
    2bf4:	00b67401 	adcseq	r7, r6, r1, lsl #8
    2bf8:	10450000 	subne	r0, r5, r0
    2bfc:	691c0000 	ldmdbvs	ip, {}
    2c00:	b6790100 	ldrbtlt	r0, [r9], -r0, lsl #2
    2c04:	01000000 	tsteq	r0, r0
    2c08:	1e1c2056 	mrcne	0, 0, r2, cr12, cr6, {2}
    2c0c:	83010000 	movwhi	r0, #4096	; 0x1000
    2c10:	00000041 	andeq	r0, r0, r1, asr #32
    2c14:	be012100 	adflts	f2, f1, f0
    2c18:	0100001a 	tsteq	r0, sl, lsl r0
    2c1c:	00b601ae 	adcseq	r0, r6, lr, lsr #3
	...
    2c28:	10580000 	subsne	r0, r8, r0
    2c2c:	05a50000 	streq	r0, [r5]!
    2c30:	16110000 	ldrne	r0, [r1], -r0
    2c34:	01000019 	tsteq	r0, r9, lsl r0
    2c38:	000079ae 	andeq	r7, r0, lr, lsr #19
    2c3c:	00108300 	andseq	r8, r0, r0, lsl #6
    2c40:	00691c00 	rsbeq	r1, r9, r0, lsl #24
    2c44:	00b6b201 	adcseq	fp, r6, r1, lsl #4
    2c48:	55010000 	strpl	r0, [r1]
    2c4c:	001ae21d 	andseq	lr, sl, sp, lsl r2
    2c50:	b6b30100 	ldrtlt	r0, [r3], r0, lsl #2
    2c54:	01000000 	tsteq	r0, r0
    2c58:	00002254 	andeq	r2, r0, r4, asr r2
    2c5c:	00000000 	andeq	r0, r0, r0
    2c60:	111f0000 	tstne	pc, r0
    2c64:	01000019 	tsteq	r0, r9, lsl r0
    2c68:	0000b6cd 	andeq	fp, r0, sp, asr #13
    2c6c:	0010ac00 	andseq	sl, r0, r0, lsl #24
    2c70:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2c74:	001a1901 	andseq	r1, sl, r1, lsl #18
    2c78:	005e0100 	subseq	r0, lr, r0, lsl #2
    2c7c:	00000000 	andeq	r0, r0, r0
    2c80:	eb000000 	bl	2c88 <__Stack_Size+0x2888>
    2c84:	c9000010 	stmdbgt	r0, {r4}
    2c88:	1c000005 	stcne	0, cr0, [r0], {5}
    2c8c:	5f010069 	svcpl	0x00010069
    2c90:	000000b6 	strheq	r0, [r0], -r6
    2c94:	20005401 	andcs	r5, r0, r1, lsl #8
    2c98:	00000534 	andeq	r0, r0, r4, lsr r5
    2c9c:	05d42a05 	ldrbeq	r2, [r4, #2565]
    2ca0:	53230000 	teqpl	r3, #0	; 0x0
    2ca4:	20000000 	andcs	r0, r0, r0
    2ca8:	00000265 	andeq	r0, r0, r5, ror #4
    2cac:	05e42805 	strbeq	r2, [r4, #2053]!
    2cb0:	41230000 	teqmi	r3, r0
    2cb4:	20000000 	andcs	r0, r0, r0
    2cb8:	000003f6 	strdeq	r0, [r0], -r6
    2cbc:	05e42805 	strbeq	r2, [r4, #2053]!
    2cc0:	53240000 	teqpl	r4, #0	; 0x0
    2cc4:	05000000 	streq	r0, [r0]
    2cc8:	25000006 	strcs	r0, [r0, #-6]
    2ccc:	000002f3 	strdeq	r0, [r0], -r3
    2cd0:	200003ff 	strdcs	r0, [r0], -pc
    2cd4:	0000047a 	andeq	r0, r0, sl, ror r4
    2cd8:	06102905 	ldreq	r2, [r0], -r5, lsl #18
    2cdc:	f4230000 	vld4.8	{d0-d3}, [r3], r0
    2ce0:	26000005 	strcs	r0, [r0], -r5
    2ce4:	00000615 	andeq	r0, r0, r5, lsl r6
    2ce8:	05d44405 	ldrbeq	r4, [r4, #1029]
    2cec:	26000000 	strcs	r0, [r0], -r0
    2cf0:	00000393 	muleq	r0, r3, r3
    2cf4:	05d44405 	ldrbeq	r4, [r4, #1029]
    2cf8:	24000000 	strcs	r0, [r0]
    2cfc:	00000053 	andeq	r0, r0, r3, asr r0
    2d00:	0000063d 	andeq	r0, r0, sp, lsr r6
    2d04:	0002f327 	andeq	pc, r2, r7, lsr #6
    2d08:	20004000 	andcs	r4, r0, r0
    2d0c:	000000ec 	andeq	r0, r0, ip, ror #1
    2d10:	06484505 	strbeq	r4, [r8], -r5, lsl #10
    2d14:	2d230000 	stccs	0, cr0, [r3]
    2d18:	26000006 	strcs	r0, [r0], -r6
    2d1c:	000005e4 	andeq	r0, r0, r4, ror #11
    2d20:	05e45805 	strbeq	r5, [r4, #2053]!
    2d24:	26000000 	strcs	r0, [r0], -r0
    2d28:	000000f9 	strdeq	r0, [r0], -r9
    2d2c:	05e45805 	strbeq	r5, [r4, #2053]!
    2d30:	20000000 	andcs	r0, r0, r0
    2d34:	000002b2 	strheq	r0, [r0], -r2
    2d38:	06705905 	ldrbteq	r5, [r0], -r5, lsl #18
    2d3c:	f4230000 	vld4.8	{d0-d3}, [r3], r0
    2d40:	28000005 	stmdacs	r0, {r0, r2}
    2d44:	00001724 	andeq	r1, r0, r4, lsr #14
    2d48:	005d1001 	subseq	r1, sp, r1
    2d4c:	05010000 	streq	r0, [r1]
    2d50:	00000003 	andeq	r0, r0, r3
    2d54:	1a8a2800 	bne	fe28cd5c <SCS_BASE+0x1e27ed5c>
    2d58:	11010000 	tstne	r1, r0
    2d5c:	0000005d 	andeq	r0, r0, sp, asr r0
    2d60:	00030501 	andeq	r0, r3, r1, lsl #10
    2d64:	28000000 	stmdacs	r0, {}
    2d68:	0000178f 	andeq	r1, r0, pc, lsl #15
    2d6c:	00b61201 	adcseq	r1, r6, r1, lsl #4
    2d70:	05010000 	streq	r0, [r1]
    2d74:	00000003 	andeq	r0, r0, r3
    2d78:	18f92800 	ldmne	r9!, {fp, sp}^
    2d7c:	13010000 	movwne	r0, #4096	; 0x1000
    2d80:	00000053 	andeq	r0, r0, r3, asr r0
    2d84:	00030501 	andeq	r0, r3, r1, lsl #10
    2d88:	24000000 	strcs	r0, [r0]
    2d8c:	000000af 	andeq	r0, r0, pc, lsr #1
    2d90:	000006cd 	andeq	r0, r0, sp, asr #13
    2d94:	0002f327 	andeq	pc, r2, r7, lsr #6
    2d98:	28001100 	stmdacs	r0, {r8, ip}
    2d9c:	00001a3a 	andeq	r1, r0, sl, lsr sl
    2da0:	06bd1401 	ldrteq	r1, [sp], r1, lsl #8
    2da4:	05010000 	streq	r0, [r1]
    2da8:	00000003 	andeq	r0, r0, r3
    2dac:	1a362800 	bne	d8cdb4 <__Stack_Size+0xd8c9b4>
    2db0:	15010000 	strne	r0, [r1]
    2db4:	000006bd 	strheq	r0, [r0], -sp
    2db8:	00030501 	andeq	r0, r3, r1, lsl #10
    2dbc:	24000000 	strcs	r0, [r0]
    2dc0:	000000b6 	strheq	r0, [r0], -r6
    2dc4:	00000701 	andeq	r0, r0, r1, lsl #14
    2dc8:	0002f327 	andeq	pc, r2, r7, lsr #6
    2dcc:	28001100 	stmdacs	r0, {r8, ip}
    2dd0:	00001995 	muleq	r0, r5, r9
    2dd4:	06f11601 	ldrbteq	r1, [r1], r1, lsl #12
    2dd8:	05010000 	streq	r0, [r1]
    2ddc:	00000003 	andeq	r0, r0, r3
    2de0:	005d2400 	subseq	r2, sp, r0, lsl #8
    2de4:	07230000 	streq	r0, [r3, -r0]!
    2de8:	f3270000 	vhadd.u32	d0, d7, d0
    2dec:	11000002 	tstne	r0, r2
    2df0:	64692900 	strbtvs	r2, [r9], #-2304
    2df4:	1701005f 	smlsdne	r1, pc, r0, r0
    2df8:	00000713 	andeq	r0, r0, r3, lsl r7
    2dfc:	00030501 	andeq	r0, r3, r1, lsl #10
    2e00:	28000000 	stmdacs	r0, {}
    2e04:	00001a95 	muleq	r0, r5, sl
    2e08:	003a1a01 	eorseq	r1, sl, r1, lsl #20
    2e0c:	05010000 	streq	r0, [r1]
    2e10:	00000003 	andeq	r0, r0, r3
    2e14:	1a102800 	bne	40ce1c <__Stack_Size+0x40ca1c>
    2e18:	1b010000 	blne	42e20 <__Stack_Size+0x42a20>
    2e1c:	00000759 	andeq	r0, r0, r9, asr r7
    2e20:	00030501 	andeq	r0, r3, r1, lsl #10
    2e24:	09000000 	stmdbeq	r0, {}
    2e28:	0000bd04 	andeq	fp, r0, r4, lsl #26
    2e2c:	19052800 	stmdbne	r5, {fp, sp}
    2e30:	1c010000 	stcne	0, cr0, [r1], {0}
    2e34:	000000b6 	strheq	r0, [r0], -r6
    2e38:	00030501 	andeq	r0, r3, r1, lsl #10
    2e3c:	00000000 	andeq	r0, r0, r0
    2e40:	0000080a 	andeq	r0, r0, sl, lsl #16
    2e44:	08e90002 	stmiaeq	r9!, {r1}^
    2e48:	01040000 	tsteq	r4, r0
    2e4c:	000001c6 	andeq	r0, r0, r6, asr #3
    2e50:	001cce01 	andseq	ip, ip, r1, lsl #28
    2e54:	001c2900 	andseq	r2, ip, r0, lsl #18
    2e58:	00357000 	eorseq	r7, r5, r0
    2e5c:	003be608 	eorseq	lr, fp, r8, lsl #12
    2e60:	000bb908 	andeq	fp, fp, r8, lsl #18
    2e64:	33730200 	cmncc	r3, #0	; 0x0
    2e68:	17020032 	smladxne	r2, r2, r0, r0
    2e6c:	00000030 	andeq	r0, r0, r0, lsr r0
    2e70:	78050403 	stmdavc	r5, {r0, r1, sl}
    2e74:	02000041 	andeq	r0, r0, #65	; 0x41
    2e78:	00363173 	eorseq	r3, r6, r3, ror r1
    2e7c:	00421802 	subeq	r1, r2, r2, lsl #16
    2e80:	02030000 	andeq	r0, r3, #0	; 0x0
    2e84:	00049505 	andeq	r9, r4, r5, lsl #10
    2e88:	38730200 	ldmdacc	r3!, {r9}^
    2e8c:	53190200 	tstpl	r9, #0	; 0x0
    2e90:	03000000 	movweq	r0, #0	; 0x0
    2e94:	04690601 	strbteq	r0, [r9], #-1537
    2e98:	75020000 	strvc	r0, [r2]
    2e9c:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    2ea0:	00006527 	andeq	r6, r0, r7, lsr #10
    2ea4:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2ea8:	000041f2 	strdeq	r4, [r0], -r2
    2eac:	36317502 	ldrtcc	r7, [r1], -r2, lsl #10
    2eb0:	77280200 	strvc	r0, [r8, -r0, lsl #4]!
    2eb4:	03000000 	movweq	r0, #0	; 0x0
    2eb8:	02220702 	eoreq	r0, r2, #524288	; 0x80000
    2ebc:	75020000 	strvc	r0, [r2]
    2ec0:	29020038 	stmdbcs	r2, {r3, r4, r5}
    2ec4:	00000088 	andeq	r0, r0, r8, lsl #1
    2ec8:	67080103 	strvs	r0, [r8, -r3, lsl #2]
    2ecc:	04000004 	streq	r0, [r0], #-4
    2ed0:	00001f7f 	andeq	r1, r0, pc, ror pc
    2ed4:	00882a02 	addeq	r2, r8, r2, lsl #20
    2ed8:	04050000 	streq	r0, [r5]
    2edc:	03010607 	movweq	r0, #5639	; 0x1607
    2ee0:	0000d1b5 	strheq	sp, [r0], -r5
    2ee4:	1baa0700 	blne	fea84aec <SCS_BASE+0x1ea76aec>
    2ee8:	00c00000 	sbceq	r0, r0, r0
    2eec:	001d1907 	andseq	r1, sp, r7, lsl #18
    2ef0:	1d072000 	stcne	0, cr2, [r7]
    2ef4:	1000001b 	andne	r0, r0, fp, lsl r0
    2ef8:	001d0107 	andseq	r0, sp, r7, lsl #2
    2efc:	2d070800 	stccs	8, cr0, [r7]
    2f00:	0400001b 	streq	r0, [r0], #-27
    2f04:	001b9d07 	andseq	r9, fp, r7, lsl #26
    2f08:	ff070200 	undefined instruction 0xff070200
    2f0c:	0100001b 	tsteq	r0, fp, lsl r0
    2f10:	03020600 	movweq	r0, #9728	; 0x2600
    2f14:	00012fcf 	andeq	r2, r1, pc, asr #31
    2f18:	06800700 	streq	r0, [r0], r0, lsl #14
    2f1c:	07010000 	streq	r0, [r1, -r0]
    2f20:	00000487 	andeq	r0, r0, r7, lsl #9
    2f24:	03100702 	tsteq	r0, #524288	; 0x80000
    2f28:	07040000 	streq	r0, [r4, -r0]
    2f2c:	0000068e 	andeq	r0, r0, lr, lsl #13
    2f30:	04cb0708 	strbeq	r0, [fp], #1800
    2f34:	07100000 	ldreq	r0, [r0, -r0]
    2f38:	00000144 	andeq	r0, r0, r4, asr #2
    2f3c:	058c0720 	streq	r0, [ip, #1824]
    2f40:	00c00000 	sbceq	r0, r0, r0
    2f44:	00020307 	andeq	r0, r2, r7, lsl #6
    2f48:	07018000 	streq	r8, [r1, -r0]
    2f4c:	000006c1 	andeq	r0, r0, r1, asr #13
    2f50:	59070280 	stmdbpl	r7, {r7, r9}
    2f54:	80000004 	andhi	r0, r0, r4
    2f58:	00260704 	eoreq	r0, r6, r4, lsl #14
    2f5c:	08800000 	stmeq	r0, {}
    2f60:	0002a507 	andeq	sl, r2, r7, lsl #10
    2f64:	07108000 	ldreq	r8, [r0, -r0]
    2f68:	00000135 	andeq	r0, r0, r5, lsr r1
    2f6c:	08002080 	stmdaeq	r0, {r7, sp}
    2f70:	001c0e01 	andseq	r0, ip, r1, lsl #28
    2f74:	010e0100 	tsteq	lr, r0, lsl #2
    2f78:	0000008f 	andeq	r0, r0, pc, lsl #1
    2f7c:	08003570 	stmdaeq	r0, {r4, r5, r6, r8, sl, ip, sp}
    2f80:	08003588 	stmdaeq	r0, {r3, r7, r8, sl, ip, sp}
    2f84:	01095d01 	tsteq	r9, r1, lsl #26
    2f88:	00001cea 	andeq	r1, r0, sl, ror #25
    2f8c:	8f011401 	svchi	0x00011401
    2f90:	88000000 	stmdahi	r0, {}
    2f94:	b8080035 	stmdalt	r8, {r0, r2, r4, r5}
    2f98:	01080035 	tsteq	r8, r5, lsr r0
    2f9c:	00016f5d 	andeq	r6, r1, sp, asr pc
    2fa0:	1c9d0a00 	fldmiasne	sp, {s0-s-1}
    2fa4:	15010000 	strne	r0, [r1]
    2fa8:	0000008f 	andeq	r0, r0, pc, lsl #1
    2fac:	0b005001 	bleq	16fb8 <__Stack_Size+0x16bb8>
    2fb0:	001b0201 	andseq	r0, fp, r1, lsl #4
    2fb4:	01fc0100 	mvnseq	r0, r0, lsl #2
    2fb8:	0035b801 	eorseq	fp, r5, r1, lsl #16
    2fbc:	00362408 	eorseq	r2, r6, r8, lsl #8
    2fc0:	00111608 	andseq	r1, r1, r8, lsl #12
    2fc4:	0001d400 	andeq	sp, r1, r0, lsl #8
    2fc8:	1be40c00 	blne	ff905fd0 <SCS_BASE+0x1f8f7fd0>
    2fcc:	fb010000 	blx	42fd6 <__Stack_Size+0x42bd6>
    2fd0:	00002501 	andeq	r2, r0, r1, lsl #10
    2fd4:	00114100 	andseq	r4, r1, r0, lsl #2
    2fd8:	1b3d0d00 	blne	f463e0 <__Stack_Size+0xf45fe0>
    2fdc:	fd010000 	stc2	0, cr0, [r1]
    2fe0:	00007e01 	andeq	r7, r0, r1, lsl #28
    2fe4:	0e570100 	rdfeqs	f0, f7, f0
    2fe8:	00001b5e 	andeq	r1, r0, lr, asr fp
    2fec:	7e01fd01 	cdpvc	13, 0, cr15, cr1, cr1, {0}
    2ff0:	5f000000 	svcpl	0x00000000
    2ff4:	0d000011 	stceq	0, cr0, [r0, #-68]
    2ff8:	00001bbd 	strheq	r1, [r0], -sp
    2ffc:	2501fe01 	strcs	pc, [r1, #-3585]
    3000:	01000000 	tsteq	r0, r0
    3004:	1cb40d55 	ldcne	13, cr0, [r4], #340
    3008:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    300c:	00002501 	andeq	r2, r0, r1, lsl #10
    3010:	00560100 	subseq	r0, r6, r0, lsl #2
    3014:	1bea010b 	blne	ffa83448 <SCS_BASE+0x1fa75448>
    3018:	d6010000 	strle	r0, [r1], -r0
    301c:	36240101 	strtcc	r0, [r4], -r1, lsl #2
    3020:	36b40800 	ldrtcc	r0, [r4], r0, lsl #16
    3024:	118b0800 	orrne	r0, fp, r0, lsl #16
    3028:	02490000 	subeq	r0, r9, #0	; 0x0
    302c:	fc0c0000 	stc2	0, cr0, [ip], {0}
    3030:	0100001a 	tsteq	r0, sl, lsl r0
    3034:	003701d5 	ldrsbteq	r0, [r7], -r5
    3038:	11b60000 	undefined instruction 0x11b60000
    303c:	3d0d0000 	stccc	0, cr0, [sp]
    3040:	0100001b 	tsteq	r0, fp, lsl r0
    3044:	007e01d7 	ldrsbteq	r0, [lr], #-23
    3048:	57010000 	strpl	r0, [r1, -r0]
    304c:	001b5e0e 	andseq	r5, fp, lr, lsl #28
    3050:	01d70100 	bicseq	r0, r7, r0, lsl #2
    3054:	0000007e 	andeq	r0, r0, lr, ror r0
    3058:	000011d4 	ldrdeq	r1, [r0], -r4
    305c:	001cfc0d 	andseq	pc, ip, sp, lsl #24
    3060:	01d80100 	bicseq	r0, r8, r0, lsl #2
    3064:	0000006c 	andeq	r0, r0, ip, rrx
    3068:	670d5401 	strvs	r5, [sp, -r1, lsl #8]
    306c:	0100001c 	tsteq	r0, ip, lsl r0
    3070:	006c01d8 	ldrdeq	r0, [ip], #-24
    3074:	56010000 	strpl	r0, [r1], -r0
    3078:	001cf50e 	andseq	pc, ip, lr, lsl #10
    307c:	01d90100 	bicseq	r0, r9, r0, lsl #2
    3080:	0000007e 	andeq	r0, r0, lr, ror r0
    3084:	00001218 	andeq	r1, r0, r8, lsl r2
    3088:	92010b00 	andls	r0, r1, #0	; 0x0
    308c:	0100001c 	tsteq	r0, ip, lsl r0
    3090:	b40101b1 	strlt	r0, [r1], #-433
    3094:	3c080036 	stccc	0, cr0, [r8], {54}
    3098:	50080037 	andpl	r0, r8, r7, lsr r0
    309c:	bd000012 	stclt	0, cr0, [r0, #-72]
    30a0:	0c000002 	stceq	0, cr0, [r0], {2}
    30a4:	00001afc 	strdeq	r1, [r0], -ip
    30a8:	4901b001 	stmdbmi	r1, {r0, ip, sp, pc}
    30ac:	7b000000 	blvc	30b4 <__Stack_Size+0x2cb4>
    30b0:	0d000012 	stceq	0, cr0, [r0, #-72]
    30b4:	00001b3d 	andeq	r1, r0, sp, lsr fp
    30b8:	7e01b201 	cdpvc	2, 0, cr11, cr1, cr1, {0}
    30bc:	02000000 	andeq	r0, r0, #0	; 0x0
    30c0:	5e0d007d 	mcrpl	0, 0, r0, cr13, cr13, {3}
    30c4:	0100001b 	tsteq	r0, fp, lsl r0
    30c8:	007e01b2 	ldrhteq	r0, [lr], #-18
    30cc:	57010000 	strpl	r0, [r1, -r0]
    30d0:	001cfc0d 	andseq	pc, ip, sp, lsl #24
    30d4:	01b30100 	undefined instruction 0x01b30100
    30d8:	0000006c 	andeq	r0, r0, ip, rrx
    30dc:	670d5401 	strvs	r5, [sp, -r1, lsl #8]
    30e0:	0100001c 	tsteq	r0, ip, lsl r0
    30e4:	006c01b3 	strhteq	r0, [ip], #-19
    30e8:	56010000 	strpl	r0, [r1], -r0
    30ec:	001cf50e 	andseq	pc, ip, lr, lsl #10
    30f0:	01b40100 	undefined instruction 0x01b40100
    30f4:	0000007e 	andeq	r0, r0, lr, ror r0
    30f8:	00001299 	muleq	r0, r9, r2
    30fc:	52010b00 	andpl	r0, r1, #0	; 0x0
    3100:	0100001b 	tsteq	r0, fp, lsl r0
    3104:	3c010192 	stfccs	f0, [r1], {146}
    3108:	94080037 	strls	r0, [r8], #-55
    310c:	d1080037 	tstle	r8, r7, lsr r0
    3110:	22000012 	andcs	r0, r0, #18	; 0x12
    3114:	0c000003 	stceq	0, cr0, [r0], {3}
    3118:	00001afc 	strdeq	r1, [r0], -ip
    311c:	5a019101 	bpl	67528 <__Stack_Size+0x67128>
    3120:	fc000000 	stc2	0, cr0, [r0], {0}
    3124:	0d000012 	stceq	0, cr0, [r0, #-72]
    3128:	00001b3d 	andeq	r1, r0, sp, lsr fp
    312c:	7e019301 	cdpvc	3, 0, cr9, cr1, cr1, {0}
    3130:	01000000 	tsteq	r0, r0
    3134:	1b5e0e56 	blne	1786a94 <__Stack_Size+0x1786694>
    3138:	93010000 	movwls	r0, #4096	; 0x1000
    313c:	00007e01 	andeq	r7, r0, r1, lsl #28
    3140:	00131a00 	andseq	r1, r3, r0, lsl #20
    3144:	1cfc0d00 	ldclne	13, cr0, [ip]
    3148:	94010000 	strls	r0, [r1]
    314c:	00005a01 	andeq	r5, r0, r1, lsl #20
    3150:	0d550100 	ldfeqe	f0, [r5]
    3154:	00001c67 	andeq	r1, r0, r7, ror #24
    3158:	5a019401 	bpl	68164 <__Stack_Size+0x67d64>
    315c:	01000000 	tsteq	r0, r0
    3160:	010b0054 	qaddeq	r0, r4, fp
    3164:	00001b83 	andeq	r1, r0, r3, lsl #23
    3168:	01017401 	tsteq	r1, r1, lsl #8
    316c:	08003794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, ip, sp}
    3170:	080037ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, ip, sp}
    3174:	00001346 	andeq	r1, r0, r6, asr #6
    3178:	00000387 	andeq	r0, r0, r7, lsl #7
    317c:	001afc0c 	andseq	pc, sl, ip, lsl #24
    3180:	01730100 	cmneq	r3, r0, lsl #2
    3184:	0000006c 	andeq	r0, r0, ip, rrx
    3188:	00001371 	andeq	r1, r0, r1, ror r3
    318c:	001b3d0d 	andseq	r3, fp, sp, lsl #26
    3190:	01750100 	cmneq	r5, r0, lsl #2
    3194:	0000007e 	andeq	r0, r0, lr, ror r0
    3198:	5e0e5601 	cfmadd32pl	mvax0, mvfx5, mvfx14, mvfx1
    319c:	0100001b 	tsteq	r0, fp, lsl r0
    31a0:	007e0175 	rsbseq	r0, lr, r5, ror r1
    31a4:	138f0000 	orrne	r0, pc, #0	; 0x0
    31a8:	fc0d0000 	stc2	0, cr0, [sp], {0}
    31ac:	0100001c 	tsteq	r0, ip, lsl r0
    31b0:	006c0176 	rsbeq	r0, ip, r6, ror r1
    31b4:	55010000 	strpl	r0, [r1]
    31b8:	001c670d 	andseq	r6, ip, sp, lsl #14
    31bc:	01760100 	cmneq	r6, r0, lsl #2
    31c0:	0000006c 	andeq	r0, r0, ip, rrx
    31c4:	0b005401 	bleq	181d0 <__Stack_Size+0x17dd0>
    31c8:	001cdf01 	andseq	sp, ip, r1, lsl #30
    31cc:	01680100 	cmneq	r8, r0, lsl #2
    31d0:	0037ec01 	eorseq	lr, r7, r1, lsl #24
    31d4:	00385008 	eorseq	r5, r8, r8
    31d8:	0013bb08 	andseq	fp, r3, r8, lsl #22
    31dc:	0003c200 	andeq	ip, r3, r0, lsl #4
    31e0:	1d130c00 	ldcne	12, cr0, [r3]
    31e4:	67010000 	strvs	r0, [r1, -r0]
    31e8:	00007e01 	andeq	r7, r0, r1, lsl #28
    31ec:	0013e600 	andseq	lr, r3, r0, lsl #12
    31f0:	1d0e0e00 	stcne	14, cr0, [lr]
    31f4:	69010000 	stmdbvs	r1, {}
    31f8:	00007e01 	andeq	r7, r0, r1, lsl #28
    31fc:	00140f00 	andseq	r0, r4, r0, lsl #30
    3200:	010f0000 	mrseq	r0, CPSR
    3204:	00001bc2 	andeq	r1, r0, r2, asr #23
    3208:	ed012f01 	stc	15, cr2, [r1, #-4]
    320c:	50000003 	andpl	r0, r0, r3
    3210:	6c080038 	stcvs	0, cr0, [r8], {56}
    3214:	2d080038 	stccs	0, cr0, [r8, #-224]
    3218:	ed000014 	stc	0, cr0, [r0, #-80]
    321c:	10000003 	andne	r0, r0, r3
    3220:	2f010063 	svccs	0x00010063
    3224:	000003f4 	strdeq	r0, [r0], -r4
    3228:	0000144c 	andeq	r1, r0, ip, asr #8
    322c:	05041100 	streq	r1, [r4, #-256]
    3230:	00746e69 	rsbseq	r6, r4, r9, ror #28
    3234:	70080103 	andvc	r0, r8, r3, lsl #2
    3238:	0f000004 	svceq	0x00000004
    323c:	001c1f01 	andseq	r1, ip, r1, lsl #30
    3240:	01e20100 	mvneq	r0, r0, lsl #2
    3244:	000003ed 	andeq	r0, r0, sp, ror #7
    3248:	0800386c 	stmdaeq	r0, {r2, r3, r5, r6, fp, ip, sp}
    324c:	08003878 	stmdaeq	r0, {r3, r4, r5, r6, fp, ip, sp}
    3250:	0000146a 	andeq	r1, r0, sl, ror #8
    3254:	00000426 	andeq	r0, r0, r6, lsr #8
    3258:	01006310 	tsteq	r0, r0, lsl r3
    325c:	0003f4e2 	andeq	pc, r3, r2, ror #9
    3260:	00149500 	andseq	r9, r4, r0, lsl #10
    3264:	010f0000 	mrseq	r0, CPSR
    3268:	00001c89 	andeq	r1, r0, r9, lsl #25
    326c:	ed013b01 	vstr	d3, [r1, #-4]
    3270:	78000003 	stmdavc	r0, {r0, r1}
    3274:	94080038 	strls	r0, [r8], #-56
    3278:	a8080038 	stmdage	r8, {r3, r4, r5}
    327c:	5e000014 	mcrpl	0, 0, r0, cr0, cr4, {0}
    3280:	10000004 	andne	r0, r0, r4
    3284:	00727473 	rsbseq	r7, r2, r3, ror r4
    3288:	045e3b01 	ldrbeq	r3, [lr], #-2817
    328c:	14d30000 	ldrbne	r0, [r3]
    3290:	6e120000 	wxorvs	wr0, wr2, wr0
    3294:	ed3c0100 	ldfs	f0, [ip]
    3298:	01000003 	tsteq	r0, r3
    329c:	04130054 	ldreq	r0, [r3], #-84
    32a0:	00000464 	andeq	r0, r0, r4, ror #8
    32a4:	0003f414 	andeq	pc, r3, r4, lsl r4
    32a8:	c5010b00 	strgt	r0, [r1, #-2816]
    32ac:	0100001c 	tsteq	r0, ip, lsl r0
    32b0:	94010154 	strls	r0, [r1], #-340
    32b4:	de080038 	mcrle	0, 0, r0, cr8, cr8, {1}
    32b8:	f1080038 	undefined instruction 0xf1080038
    32bc:	a3000014 	movwge	r0, #20	; 0x14
    32c0:	0c000004 	stceq	0, cr0, [r0], {4}
    32c4:	00001ca3 	andeq	r1, r0, r3, lsr #25
    32c8:	7e015401 	cdpvc	4, 0, cr5, cr1, cr1, {0}
    32cc:	1c000000 	stcne	0, cr0, [r0], {0}
    32d0:	15000015 	strne	r0, [r0, #-21]
    32d4:	0074756f 	rsbseq	r7, r4, pc, ror #10
    32d8:	a3015501 	movwge	r5, #5377	; 0x1501
    32dc:	02000004 	andeq	r0, r0, #4	; 0x4
    32e0:	16007391 	undefined
    32e4:	000003f4 	strdeq	r0, [r0], -r4
    32e8:	000004b3 	strheq	r0, [r0], -r3
    32ec:	00009a17 	andeq	r9, r0, r7, lsl sl
    32f0:	0b000400 	bleq	42f8 <__Stack_Size+0x3ef8>
    32f4:	001af201 	andseq	pc, sl, r1, lsl #4
    32f8:	01390100 	teqeq	r9, r0, lsl #2
    32fc:	0038e001 	eorseq	lr, r8, r1
    3300:	00395608 	eorseq	r5, r9, r8, lsl #12
    3304:	00152f08 	andseq	r2, r5, r8, lsl #30
    3308:	0004ed00 	andeq	lr, r4, r0, lsl #26
    330c:	1c6e0c00 	stclne	12, cr0, [lr]
    3310:	39010000 	stmdbcc	r1, {}
    3314:	00006c01 	andeq	r6, r0, r1, lsl #24
    3318:	00155a00 	andseq	r5, r5, r0, lsl #20
    331c:	756f1500 	strbvc	r1, [pc, #-1280]!	; 2e24 <__Stack_Size+0x2a24>
    3320:	3a010074 	bcc	434f8 <__Stack_Size+0x430f8>
    3324:	0004ed01 	andeq	lr, r4, r1, lsl #26
    3328:	71910200 	orrsvc	r0, r1, r0, lsl #4
    332c:	03f41600 	mvnseq	r1, #0	; 0x0
    3330:	04fd0000 	ldrbteq	r0, [sp]
    3334:	9a170000 	bls	5c333c <__Stack_Size+0x5c2f3c>
    3338:	06000000 	streq	r0, [r0], -r0
    333c:	da010b00 	ble	45f44 <__Stack_Size+0x45b44>
    3340:	0100001b 	tsteq	r0, fp, lsl r0
    3344:	58010113 	stmdapl	r1, {r0, r1, r4, r8}
    3348:	cc080039 	stcgt	0, cr0, [r8], {57}
    334c:	6d080039 	stcvs	0, cr0, [r8, #-228]
    3350:	7f000015 	svcvc	0x00000015
    3354:	0c000005 	stceq	0, cr0, [r0], {5}
    3358:	00001c83 	andeq	r1, r0, r3, lsl #25
    335c:	25011301 	strcs	r1, [r1, #-769]
    3360:	98000000 	stmdals	r0, {}
    3364:	0e000015 	mcreq	0, 0, r0, cr0, cr5, {0}
    3368:	00001963 	andeq	r1, r0, r3, ror #18
    336c:	5a011401 	bpl	48378 <__Stack_Size+0x47f78>
    3370:	ab000000 	blge	3378 <__Stack_Size+0x2f78>
    3374:	0e000015 	mcreq	0, 0, r0, cr0, cr5, {0}
    3378:	00001b7e 	andeq	r1, r0, lr, ror fp
    337c:	5a011401 	bpl	48388 <__Stack_Size+0x47f88>
    3380:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    3384:	18000015 	stmdane	r0, {r0, r2, r4}
    3388:	00766964 	rsbseq	r6, r6, r4, ror #18
    338c:	5a011401 	bpl	48398 <__Stack_Size+0x47f98>
    3390:	d1000000 	tstle	r0, r0
    3394:	15000015 	strne	r0, [r0, #-21]
    3398:	0074756f 	rsbseq	r7, r4, pc, ror #10
    339c:	7f011501 	svcvc	0x00011501
    33a0:	02000005 	andeq	r0, r0, #5	; 0x5
    33a4:	69186c91 	ldmdbvs	r8, {r0, r4, r7, sl, fp, sp, lr}
    33a8:	01160100 	tsteq	r6, r0, lsl #2
    33ac:	0000007e 	andeq	r0, r0, lr, ror r0
    33b0:	000015fa 	strdeq	r1, [r0], -sl
    33b4:	01006a19 	tsteq	r0, r9, lsl sl
    33b8:	007e0116 	rsbseq	r0, lr, r6, lsl r1
    33bc:	16000000 	strne	r0, [r0], -r0
    33c0:	000003f4 	strdeq	r0, [r0], -r4
    33c4:	0000058f 	andeq	r0, r0, pc, lsl #11
    33c8:	00009a17 	andeq	r9, r0, r7, lsl sl
    33cc:	1a000b00 	bne	5fd4 <__Stack_Size+0x5bd4>
    33d0:	001cbb01 	andseq	fp, ip, r1, lsl #22
    33d4:	01f50100 	mvnseq	r0, r0, lsl #2
    33d8:	080039cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, fp, ip, sp}
    33dc:	08003a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp, ip, sp}
    33e0:	0000160d 	andeq	r1, r0, sp, lsl #12
    33e4:	000005f6 	strdeq	r0, [r0], -r6
    33e8:	001b7e1b 	andseq	r7, fp, fp, lsl lr
    33ec:	5af50100 	bpl	ffd437f4 <SCS_BASE+0x1fd357f4>
    33f0:	38000000 	stmdacc	r0, {}
    33f4:	1c000016 	stcne	0, cr0, [r0], {22}
    33f8:	00001963 	andeq	r1, r0, r3, ror #18
    33fc:	005af601 	subseq	pc, sl, r1, lsl #12
    3400:	641d0000 	ldrvs	r0, [sp]
    3404:	01007669 	tsteq	r0, r9, ror #12
    3408:	00005af6 	strdeq	r5, [r0], -r6
    340c:	00164b00 	andseq	r4, r6, r0, lsl #22
    3410:	756f1200 	strbvc	r1, [pc, #-512]!	; 3218 <__Stack_Size+0x2e18>
    3414:	f7010074 	undefined instruction 0xf7010074
    3418:	000005f6 	strdeq	r0, [r0], -r6
    341c:	1d6d9102 	stfnep	f1, [sp, #-8]!
    3420:	f8010069 	undefined instruction 0xf8010069
    3424:	0000007e 	andeq	r0, r0, lr, ror r0
    3428:	00001674 	andeq	r1, r0, r4, ror r6
    342c:	01006a1e 	tsteq	r0, lr, lsl sl
    3430:	00007ef8 	strdeq	r7, [r0], -r8
    3434:	f4160000 	undefined instruction 0xf4160000
    3438:	06000003 	streq	r0, [r0], -r3
    343c:	17000006 	strne	r0, [r0, -r6]
    3440:	0000009a 	muleq	r0, sl, r0
    3444:	010f000a 	tsteq	pc, sl
    3448:	00001bce 	andeq	r1, r0, lr, asr #23
    344c:	ed01e701 	stc	7, cr14, [r1, #-4]
    3450:	3c000003 	stccc	0, cr0, [r0], {3}
    3454:	4808003a 	stmdami	r8, {r1, r3, r4, r5}
    3458:	8708003a 	smladxhi	r8, sl, r0, r0
    345c:	31000016 	tstcc	r0, r6, lsl r0
    3460:	10000006 	andne	r0, r0, r6
    3464:	e7010073 	smlsdx	r1, r3, r0, r0
    3468:	0000045e 	andeq	r0, r0, lr, asr r4
    346c:	000016b2 	strheq	r1, [r0], -r2
    3470:	73011a00 	movwvc	r1, #6656	; 0x1a00
    3474:	0100001c 	tsteq	r0, ip, lsl r0
    3478:	3a4801ab 	bcc	1203b2c <__Stack_Size+0x120372c>
    347c:	3ad00800 	bcc	ff405484 <SCS_BASE+0x1f3f7484>
    3480:	16c50800 	strbne	r0, [r5], r0, lsl #16
    3484:	065a0000 	ldrbeq	r0, [sl], -r0
    3488:	601b0000 	andsvs	r0, fp, r0
    348c:	0100003b 	tsteq	r0, fp, lsr r0
    3490:	00006cab 	andeq	r6, r0, fp, lsr #25
    3494:	0016e400 	andseq	lr, r6, r0, lsl #8
    3498:	011f0000 	tsteq	pc, r0
    349c:	00001b67 	andeq	r1, r0, r7, ror #22
    34a0:	d001ca01 	andle	ip, r1, r1, lsl #20
    34a4:	6408003a 	strvs	r0, [r8], #-58
    34a8:	5a08003b 	bpl	20359c <__Stack_Size+0x20319c>
    34ac:	0f000017 	svceq	0x00000017
    34b0:	001ca801 	andseq	sl, ip, r1, lsl #16
    34b4:	01440100 	cmpeq	r4, r0, lsl #2
    34b8:	000003ed 	andeq	r0, r0, sp, ror #7
    34bc:	08003b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp, ip, sp}
    34c0:	08003b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp, ip, sp}
    34c4:	00001785 	andeq	r1, r0, r5, lsl #15
    34c8:	00000698 	muleq	r0, r8, r6
    34cc:	01006312 	tsteq	r0, r2, lsl r3
    34d0:	0003f445 	andeq	pc, r3, r5, asr #8
    34d4:	00500100 	subseq	r0, r0, r0, lsl #2
    34d8:	1b760120 	blne	1d83960 <__Stack_Size+0x1d83560>
    34dc:	ec010000 	stc	0, cr0, [r1], {0}
    34e0:	0003ed01 	andeq	lr, r3, r1, lsl #26
    34e4:	003b9400 	eorseq	r9, fp, r0, lsl #8
    34e8:	003ba008 	eorseq	sl, fp, r8
    34ec:	0017b008 	andseq	fp, r7, r8
    34f0:	8f010f00 	svchi	0x00010f00
    34f4:	0100001b 	tsteq	r0, fp, lsl r0
    34f8:	07070155 	smlsdeq	r7, r5, r1, r0
    34fc:	3ba00000 	blcc	fe803504 <SCS_BASE+0x1e7f5504>
    3500:	3bc80800 	blcc	ff205508 <SCS_BASE+0x1f1f7508>
    3504:	17db0800 	ldrbne	r0, [fp, r0, lsl #16]
    3508:	07070000 	streq	r0, [r7, -r0]
    350c:	73100000 	tstvc	r0, #0	; 0x0
    3510:	01007274 	tsteq	r0, r4, ror r2
    3514:	00070755 	andeq	r0, r7, r5, asr r7
    3518:	00180600 	andseq	r0, r8, r0, lsl #12
    351c:	42741b00 	rsbsmi	r1, r4, #0	; 0x0
    3520:	55010000 	strpl	r0, [r1]
    3524:	000003ed 	andeq	r0, r0, sp, ror #7
    3528:	00001824 	andeq	r1, r0, r4, lsr #16
    352c:	0100631d 	tsteq	r0, sp, lsl r3
    3530:	0003f456 	andeq	pc, r3, r6, asr r4
    3534:	00184200 	andseq	r4, r8, r0, lsl #4
    3538:	656c1200 	strbvs	r1, [ip, #-512]!
    353c:	5701006e 	strpl	r0, [r1, -lr, rrx]
    3540:	000003ed 	andeq	r0, r0, sp, ror #7
    3544:	13005401 	movwne	r5, #1025	; 0x401
    3548:	0003f404 	andeq	pc, r3, r4, lsl #8
    354c:	44011f00 	strmi	r1, [r1], #-3840
    3550:	0100001b 	tsteq	r0, fp, lsl r0
    3554:	3bc8012a 	blcc	ff203a04 <SCS_BASE+0x1f1f5a04>
    3558:	3bd40800 	blcc	ff505560 <SCS_BASE+0x1f4f7560>
    355c:	18600800 	stmdane	r0!, {fp}^
    3560:	010f0000 	mrseq	r0, CPSR
    3564:	00001b0e 	andeq	r1, r0, lr, lsl #22
    3568:	7e012201 	cdpvc	2, 0, cr2, cr1, cr1, {0}
    356c:	d4000000 	strle	r0, [r0]
    3570:	e608003b 	undefined
    3574:	8b08003b 	blhi	203668 <__Stack_Size+0x203268>
    3578:	4f000018 	svcmi	0x00000018
    357c:	1b000007 	blne	35a0 <__Stack_Size+0x31a0>
    3580:	00001bf6 	strdeq	r1, [r0], -r6
    3584:	005a2201 	subseq	r2, sl, r1, lsl #4
    3588:	18b60000 	ldmne	r6!, {}
    358c:	1c000000 	stcne	0, cr0, [r0], {0}
    3590:	00000534 	andeq	r0, r0, r4, lsr r5
    3594:	075a2a04 	ldrbeq	r2, [sl, -r4, lsl #20]
    3598:	7e210000 	cdpvc	0, 2, cr0, cr1, cr0, {0}
    359c:	0a000000 	beq	35a4 <__Stack_Size+0x31a4>
    35a0:	00000265 	andeq	r0, r0, r5, ror #4
    35a4:	07702804 	ldrbeq	r2, [r0, -r4, lsl #16]!
    35a8:	03050000 	movweq	r0, #20480	; 0x5000
    35ac:	200004d8 	ldrdcs	r0, [r0], -r8
    35b0:	00006c21 	andeq	r6, r0, r1, lsr #24
    35b4:	03f60a00 	mvnseq	r0, #0	; 0x0
    35b8:	28040000 	stmdacs	r4, {}
    35bc:	00000770 	andeq	r0, r0, r0, ror r7
    35c0:	04da0305 	ldrbeq	r0, [sl], #773
    35c4:	7e162000 	wxorvc	wr2, wr6, wr0
    35c8:	97000000 	strls	r0, [r0, -r0]
    35cc:	22000007 	andcs	r0, r0, #7	; 0x7
    35d0:	0000009a 	muleq	r0, sl, r0
    35d4:	0a0003ff 	beq	45d8 <__Stack_Size+0x41d8>
    35d8:	0000047a 	andeq	r0, r0, sl, ror r4
    35dc:	07a82904 	streq	r2, [r8, r4, lsl #18]!
    35e0:	03050000 	movweq	r0, #20480	; 0x5000
    35e4:	200000d8 	ldrdcs	r0, [r0], -r8
    35e8:	00078621 	andeq	r8, r7, r1, lsr #12
    35ec:	06152300 	ldreq	r2, [r5], -r0, lsl #6
    35f0:	44040000 	strmi	r0, [r4]
    35f4:	0000075a 	andeq	r0, r0, sl, asr r7
    35f8:	03932300 	orrseq	r2, r3, #0	; 0x0
    35fc:	44040000 	strmi	r0, [r4]
    3600:	0000075a 	andeq	r0, r0, sl, asr r7
    3604:	007e1600 	rsbseq	r1, lr, r0, lsl #12
    3608:	07d50000 	ldrbeq	r0, [r5, r0]
    360c:	9a170000 	bls	5c3614 <__Stack_Size+0x5c3214>
    3610:	40000000 	andmi	r0, r0, r0
    3614:	00ec1c00 	rsceq	r1, ip, r0, lsl #24
    3618:	45040000 	strmi	r0, [r4]
    361c:	000007e0 	andeq	r0, r0, r0, ror #15
    3620:	0007c521 	andeq	ip, r7, r1, lsr #10
    3624:	05e42300 	strbeq	r2, [r4, #768]!
    3628:	58040000 	stmdapl	r4, {}
    362c:	00000770 	andeq	r0, r0, r0, ror r7
    3630:	00f92300 	rscseq	r2, r9, r0, lsl #6
    3634:	58040000 	stmdapl	r4, {}
    3638:	00000770 	andeq	r0, r0, r0, ror r7
    363c:	02b21c00 	adcseq	r1, r2, #0	; 0x0
    3640:	59040000 	stmdbpl	r4, {}
    3644:	00000808 	andeq	r0, r0, r8, lsl #16
    3648:	00078621 	andeq	r8, r7, r1, lsr #12
    364c:	07e80000 	strbeq	r0, [r8, r0]!
    3650:	00020000 	andeq	r0, r2, r0
    3654:	00000aed 	andeq	r0, r0, sp, ror #21
    3658:	01c60104 	biceq	r0, r6, r4, lsl #2
    365c:	fd010000 	stc2	0, cr0, [r1]
    3660:	2900001e 	stmdbcs	r0, {r1, r2, r3, r4}
    3664:	e800001c 	stmda	r0, {r2, r3, r4}
    3668:	1808003b 	stmdane	r8, {r0, r1, r3, r4, r5}
    366c:	cf080041 	svcgt	0x00080041
    3670:	0200000d 	andeq	r0, r0, #13	; 0xd
    3674:	41780504 	cmnmi	r8, r4, lsl #10
    3678:	02020000 	andeq	r0, r2, #0	; 0x0
    367c:	00049505 	andeq	r9, r4, r5, lsl #10
    3680:	06010200 	streq	r0, [r1], -r0, lsl #4
    3684:	00000469 	andeq	r0, r0, r9, ror #8
    3688:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    368c:	45270200 	strmi	r0, [r7, #-512]!
    3690:	02000000 	andeq	r0, r0, #0	; 0x0
    3694:	41f20704 	mvnsmi	r0, r4, lsl #14
    3698:	75030000 	strvc	r0, [r3]
    369c:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    36a0:	00005728 	andeq	r5, r0, r8, lsr #14
    36a4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    36a8:	00000222 	andeq	r0, r0, r2, lsr #4
    36ac:	00387503 	eorseq	r7, r8, r3, lsl #10
    36b0:	00682902 	rsbeq	r2, r8, r2, lsl #18
    36b4:	01020000 	tsteq	r2, r0
    36b8:	00046708 	andeq	r6, r4, r8, lsl #14
    36bc:	07040400 	streq	r0, [r4, -r0, lsl #8]
    36c0:	3f030105 	svccc	0x00030105
    36c4:	00000099 	muleq	r0, r9, r0
    36c8:	001e0f06 	andseq	r0, lr, r6, lsl #30
    36cc:	44060200 	strmi	r0, [r6], #-512
    36d0:	0300001d 	movweq	r0, #29	; 0x1d
    36d4:	001da606 	andseq	sl, sp, r6, lsl #12
    36d8:	e1060400 	tst	r6, r0, lsl #8
    36dc:	0400001e 	streq	r0, [r0], #-30
    36e0:	001dd606 	andseq	sp, sp, r6, lsl #12
    36e4:	05000500 	streq	r0, [r0, #-1280]
    36e8:	30540301 	subscc	r0, r4, r1, lsl #6
    36ec:	06000001 	streq	r0, [r0], -r1
    36f0:	00000f6b 	andeq	r0, r0, fp, ror #30
    36f4:	11a10601 	undefined instruction 0x11a10601
    36f8:	06020000 	streq	r0, [r2], -r0
    36fc:	00001440 	andeq	r1, r0, r0, asr #8
    3700:	0ec30603 	cdpeq	6, 12, cr0, cr3, cr3, {0}
    3704:	06040000 	streq	r0, [r4], -r0
    3708:	00000e4b 	andeq	r0, r0, fp, asr #28
    370c:	10bd0605 	adcsne	r0, sp, r5, lsl #12
    3710:	06060000 	streq	r0, [r6], -r0
    3714:	00000eb0 	strheq	r0, [r0], -r0
    3718:	16f50607 	ldrbtne	r0, [r5], r7, lsl #12
    371c:	060c0000 	streq	r0, [ip], -r0
    3720:	00001751 	andeq	r1, r0, r1, asr r7
    3724:	15ef060d 	strbne	r0, [pc, #1549]!	; 3d39 <__Stack_Size+0x3939>
    3728:	060e0000 	streq	r0, [lr], -r0
    372c:	00000d57 	andeq	r0, r0, r7, asr sp
    3730:	147d060f 	ldrbtne	r0, [sp], #-1551
    3734:	06100000 	ldreq	r0, [r0], -r0
    3738:	00001158 	andeq	r1, r0, r8, asr r1
    373c:	15160611 	ldrne	r0, [r6, #-1553]
    3740:	06120000 	ldreq	r0, [r2], -r0
    3744:	00001715 	andeq	r1, r0, r5, lsl r7
    3748:	12620613 	rsbne	r0, r2, #19922944	; 0x1300000
    374c:	06140000 	ldreq	r0, [r4], -r0
    3750:	000010e7 	andeq	r1, r0, r7, ror #1
    3754:	0c4e0615 	mcrreq	6, 1, r0, lr, cr5
    3758:	06160000 	ldreq	r0, [r6], -r0
    375c:	00000d96 	muleq	r0, r6, sp
    3760:	16430617 	undefined
    3764:	01830000 	orreq	r0, r3, r0
    3768:	0010f506 	andseq	pc, r0, r6, lsl #10
    376c:	06018400 	streq	r8, [r1], -r0, lsl #8
    3770:	000016bb 	strheq	r1, [r0], -fp
    3774:	b8060192 	stmdalt	r6, {r1, r4, r7, r8}
    3778:	d0000011 	andle	r0, r0, r1, lsl r0
    377c:	02050001 	andeq	r0, r5, #1	; 0x1
    3780:	018ecf03 	orreq	ip, lr, r3, lsl #30
    3784:	80060000 	andhi	r0, r6, r0
    3788:	01000006 	tsteq	r0, r6
    378c:	00048706 	andeq	r8, r4, r6, lsl #14
    3790:	10060200 	andne	r0, r6, r0, lsl #4
    3794:	04000003 	streq	r0, [r0], #-3
    3798:	00068e06 	andeq	r8, r6, r6, lsl #28
    379c:	cb060800 	blgt	1857a4 <__Stack_Size+0x1853a4>
    37a0:	10000004 	andne	r0, r0, r4
    37a4:	00014406 	andeq	r4, r1, r6, lsl #8
    37a8:	8c062000 	stchi	0, cr2, [r6], {0}
    37ac:	c0000005 	andgt	r0, r0, r5
    37b0:	02030600 	andeq	r0, r3, #0	; 0x0
    37b4:	01800000 	orreq	r0, r0, r0
    37b8:	0006c106 	andeq	ip, r6, r6, lsl #2
    37bc:	06028000 	streq	r8, [r2], -r0
    37c0:	00000459 	andeq	r0, r0, r9, asr r4
    37c4:	26060480 	strcs	r0, [r6], -r0, lsl #9
    37c8:	80000000 	andhi	r0, r0, r0
    37cc:	02a50608 	adceq	r0, r5, #8388608	; 0x800000
    37d0:	10800000 	addne	r0, r0, r0
    37d4:	00013506 	andeq	r3, r1, r6, lsl #10
    37d8:	00208000 	eoreq	r8, r0, r0
    37dc:	1f2f0107 	svcne	0x002f0107
    37e0:	75010000 	strvc	r0, [r1]
    37e4:	b4010101 	strlt	r0, [r1], #-257
    37e8:	08000001 	stmdaeq	r0, {r0}
    37ec:	76010069 	strvc	r0, [r1], -r9, rrx
    37f0:	00005e01 	andeq	r5, r0, r1, lsl #28
    37f4:	616d0800 	cmnvs	sp, r0, lsl #16
    37f8:	76010078 	undefined
    37fc:	00005e01 	andeq	r5, r0, r1, lsl #28
    3800:	01090000 	tsteq	r9, r0
    3804:	00001ed1 	ldrdeq	r1, [r0], -r1
    3808:	01011901 	tsteq	r1, r1, lsl #18
    380c:	0000005e 	andeq	r0, r0, lr, asr r0
    3810:	0001e001 	andeq	lr, r1, r1
    3814:	1d590a00 	fldsne	s1, [r9]
    3818:	19010000 	stmdbne	r1, {}
    381c:	00004c01 	andeq	r4, r0, r1, lsl #24
    3820:	19630b00 	stmdbne	r3!, {r8, r9, fp}^
    3824:	1a010000 	bne	4382c <__Stack_Size+0x4342c>
    3828:	00004c01 	andeq	r4, r0, r1, lsl #24
    382c:	01090000 	tsteq	r9, r0
    3830:	00001eb2 	strheq	r1, [r0], -r2
    3834:	01011f01 	tsteq	r1, r1, lsl #30
    3838:	0000005e 	andeq	r0, r0, lr, asr r0
    383c:	00020c01 	andeq	r0, r2, r1, lsl #24
    3840:	1d590a00 	fldsne	s1, [r9]
    3844:	1f010000 	svcne	0x00010000
    3848:	00004c01 	andeq	r4, r0, r1, lsl #24
    384c:	19630b00 	stmdbne	r3!, {r8, r9, fp}^
    3850:	20010000 	andcs	r0, r1, r0
    3854:	00004c01 	andeq	r4, r0, r1, lsl #24
    3858:	01090000 	tsteq	r9, r0
    385c:	00001ea5 	andeq	r1, r0, r5, lsr #29
    3860:	01010f01 	tsteq	r1, r1, lsl #30
    3864:	0000004c 	andeq	r0, r0, ip, asr #32
    3868:	00024401 	andeq	r4, r2, r1, lsl #8
    386c:	1ed90a00 	cdpne	10, 13, cr0, cr9, cr0, {0}
    3870:	0f010000 	svceq	0x00010000
    3874:	00005e01 	andeq	r5, r0, r1, lsl #28
    3878:	1eba0a00 	fconstsne	s0, #160
    387c:	0f010000 	svceq	0x00010000
    3880:	00005e01 	andeq	r5, r0, r1, lsl #28
    3884:	1d590b00 	vldrne	d16, [r9]
    3888:	10010000 	andne	r0, r1, r0
    388c:	00004c01 	andeq	r4, r0, r1, lsl #24
    3890:	010c0000 	tsteq	ip, r0
    3894:	00001db3 	strheq	r1, [r0], -r3
    3898:	4c01db01 	stcmi	11, cr13, [r1], {1}
    389c:	e8000000 	stmda	r0, {}
    38a0:	f408003b 	vst4.8	{d0-d3}, [r8, :256], fp
    38a4:	0108003b 	tsteq	r8, fp, lsr r0
    38a8:	c2010d5d 	andgt	r0, r1, #5952	; 0x1740
    38ac:	0100001d 	tsteq	r0, sp, lsl r0
    38b0:	3bf401e0 	blcc	ffd04038 <SCS_BASE+0x1fcf6038>
    38b4:	3c000800 	stccc	8, cr0, [r0], {0}
    38b8:	5d010800 	stcpl	8, cr0, [r1]
    38bc:	0000027f 	andeq	r0, r0, pc, ror r2
    38c0:	0064690e 	rsbeq	r6, r4, lr, lsl #18
    38c4:	005ee001 	subseq	lr, lr, r1
    38c8:	50010000 	andpl	r0, r1, r0
    38cc:	30010d00 	andcc	r0, r1, r0, lsl #26
    38d0:	0100001e 	tsteq	r0, lr, lsl r0
    38d4:	3c0001e5 	stfccs	f0, [r0], {229}
    38d8:	3c0c0800 	stccc	8, cr0, [ip], {0}
    38dc:	5d010800 	stcpl	8, cr0, [r1]
    38e0:	000002a4 	andeq	r0, r0, r4, lsr #5
    38e4:	001e410f 	andseq	r4, lr, pc, lsl #2
    38e8:	5ee50100 	cdppl	1, 14, cr0, cr5, cr0, {0}
    38ec:	01000000 	tsteq	r0, r0
    38f0:	010d0050 	qaddeq	r0, r0, sp
    38f4:	00001d29 	andeq	r1, r0, r9, lsr #26
    38f8:	0c01ea01 	stceq	10, cr14, [r1], {1}
    38fc:	1808003c 	stmdane	r8, {r2, r3, r4, r5}
    3900:	0108003c 	tsteq	r8, ip, lsr r0
    3904:	0002d65d 	andeq	sp, r2, sp, asr r6
    3908:	1a5f0f00 	bne	17c7510 <__Stack_Size+0x17c7110>
    390c:	ea010000 	b	43914 <__Stack_Size+0x43514>
    3910:	0000005e 	andeq	r0, r0, lr, asr r0
    3914:	ea0f5001 	b	3d7920 <__Stack_Size+0x3d7520>
    3918:	01000044 	tsteq	r0, r4, asr #32
    391c:	00005eea 	andeq	r5, r0, sl, ror #29
    3920:	00510100 	subseq	r0, r1, r0, lsl #2
    3924:	1e5e010d 	rdfnee	f0, f6, #5.0
    3928:	ef010000 	svc	0x00010000
    392c:	003c1801 	eorseq	r1, ip, r1, lsl #16
    3930:	003c2408 	eorseq	r2, ip, r8, lsl #8
    3934:	fb5d0108 	blx	1743d5e <__Stack_Size+0x174395e>
    3938:	0f000002 	svceq	0x00000002
    393c:	00001d9f 	muleq	r0, pc, sp
    3940:	005eef01 	subseq	lr, lr, r1, lsl #30
    3944:	50010000 	andpl	r0, r1, r0
    3948:	e3011000 	movw	r1, #4096	; 0x1000
    394c:	0100001d 	tsteq	r0, sp, lsl r0
    3950:	005e01f4 	ldrsheq	r0, [lr], #-20
    3954:	3c240000 	stccc	0, cr0, [r4]
    3958:	3c480800 	mcrrcc	8, 0, r0, r8, cr0
    395c:	5d010800 	stcpl	8, cr0, [r1]
    3960:	00000326 	andeq	r0, r0, r6, lsr #6
    3964:	001dfa11 	andseq	pc, sp, r1, lsl sl
    3968:	5ef40100 	cdppl	1, 15, cr0, cr4, cr0, {0}
    396c:	c9000000 	stmdbgt	r0, {}
    3970:	00000018 	andeq	r0, r0, r8, lsl r0
    3974:	1d8e010c 	stfnes	f0, [lr, #48]
    3978:	ff010000 	undefined instruction 0xff010000
    397c:	00005e01 	andeq	r5, r0, r1, lsl #28
    3980:	003c4800 	eorseq	r4, ip, r0, lsl #16
    3984:	003c6408 	eorseq	r6, ip, r8, lsl #8
    3988:	125d0108 	subsne	r0, sp, #2	; 0x2
    398c:	001e8a01 	andseq	r8, lr, r1, lsl #20
    3990:	01070100 	tsteq	r7, r0, lsl #2
    3994:	00005e01 	andeq	r5, r0, r1, lsl #28
    3998:	003c6400 	eorseq	r6, ip, r0, lsl #8
    399c:	003c8408 	eorseq	r8, ip, r8, lsl #8
    39a0:	6a5d0108 	bvs	1743dc8 <__Stack_Size+0x17439c8>
    39a4:	13000003 	movwne	r0, #3	; 0x3
    39a8:	00001a5f 	andeq	r1, r0, pc, asr sl
    39ac:	5e010701 	cdppl	7, 0, cr0, cr1, cr1, {0}
    39b0:	e7000000 	str	r0, [r0, -r0]
    39b4:	00000018 	andeq	r0, r0, r8, lsl r0
    39b8:	00020c14 	andeq	r0, r2, r4, lsl ip
    39bc:	003c8400 	eorseq	r8, ip, r0, lsl #8
    39c0:	003c8c08 	eorseq	r8, ip, r8, lsl #24
    39c4:	935d0108 	cmpls	sp, #2	; 0x2
    39c8:	15000003 	strne	r0, [r0, #-3]
    39cc:	0000021f 	andeq	r0, r0, pc, lsl r2
    39d0:	00001905 	andeq	r1, r0, r5, lsl #18
    39d4:	00022b16 	andeq	r2, r2, r6, lsl fp
    39d8:	17510100 	ldrbne	r0, [r1, -r0, lsl #2]
    39dc:	00000237 	andeq	r0, r0, r7, lsr r2
    39e0:	01b41400 	undefined instruction 0x01b41400
    39e4:	3c8c0000 	stccc	0, cr0, [ip], {0}
    39e8:	3c900800 	ldccc	8, cr0, [r0], {0}
    39ec:	5d010800 	stcpl	8, cr0, [r1]
    39f0:	000003b5 	strheq	r0, [r0], -r5
    39f4:	0001c715 	andeq	ip, r1, r5, lsl r7
    39f8:	00191800 	andseq	r1, r9, r0, lsl #16
    39fc:	01d31700 	bicseq	r1, r3, r0, lsl #14
    3a00:	14000000 	strne	r0, [r0]
    3a04:	000001e0 	andeq	r0, r0, r0, ror #3
    3a08:	08003c90 	stmdaeq	r0, {r4, r7, sl, fp, ip, sp}
    3a0c:	08003c94 	stmdaeq	r0, {r2, r4, r7, sl, fp, ip, sp}
    3a10:	03d75d01 	bicseq	r5, r7, #64	; 0x40
    3a14:	f3150000 	vhadd.u16	d0, d5, d0
    3a18:	2b000001 	blcs	3a24 <__Stack_Size+0x3624>
    3a1c:	17000019 	smladne	r0, r9, r0, r0
    3a20:	000001ff 	strdeq	r0, [r0], -pc
    3a24:	018e1400 	orreq	r1, lr, r0, lsl #8
    3a28:	3c940000 	ldccc	0, cr0, [r4], {0}
    3a2c:	3ccc0800 	stclcc	8, cr0, [ip], {0}
    3a30:	5d010800 	stcpl	8, cr0, [r1]
    3a34:	000003fd 	strdeq	r0, [r0], -sp
    3a38:	00019d18 	andeq	r9, r1, r8, lsl sp
    3a3c:	00193e00 	andseq	r3, r9, r0, lsl #28
    3a40:	01a71800 	undefined instruction 0x01a71800
    3a44:	19670000 	stmdbne	r7!, {}^
    3a48:	19000000 	stmdbne	r0, {}
    3a4c:	001ec301 	andseq	ip, lr, r1, lsl #6
    3a50:	01630100 	cmneq	r3, r0, lsl #2
    3a54:	08003ccc 	stmdaeq	r0, {r2, r3, r6, r7, sl, fp, ip, sp}
    3a58:	08003e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, ip, sp}
    3a5c:	00001985 	andeq	r1, r0, r5, lsl #19
    3a60:	0000044b 	andeq	r0, r0, fp, asr #8
    3a64:	0100691a 	tsteq	r0, sl, lsl r9
    3a68:	00005e64 	andeq	r5, r0, r4, ror #28
    3a6c:	0019b000 	andseq	fp, r9, r0
    3a70:	006a1a00 	rsbeq	r1, sl, r0, lsl #20
    3a74:	005e6401 	subseq	r6, lr, r1, lsl #8
    3a78:	19fa0000 	ldmibne	sl!, {}^
    3a7c:	841b0000 	ldrhi	r0, [fp]
    3a80:	0100001e 	tsteq	r0, lr, lsl r0
    3a84:	00005e64 	andeq	r5, r0, r4, ror #28
    3a88:	14501c00 	ldrbne	r1, [r0], #-3072
    3a8c:	65010000 	strvs	r0, [r1]
    3a90:	0000005e 	andeq	r0, r0, lr, asr r0
    3a94:	00001a23 	andeq	r1, r0, r3, lsr #20
    3a98:	72011900 	andvc	r1, r1, #0	; 0x0
    3a9c:	0100001d 	tsteq	r0, sp, lsl r0
    3aa0:	3e500126 	rdfccsp	f0, f0, f6
    3aa4:	3f4c0800 	svccc	0x004c0800
    3aa8:	1a410800 	bne	1045ab0 <__Stack_Size+0x10456b0>
    3aac:	04990000 	ldreq	r0, [r9]
    3ab0:	691a0000 	ldmdbvs	sl, {}
    3ab4:	5e270100 	sufpls	f0, f7, f0
    3ab8:	6c000000 	stcvs	0, cr0, [r0], {0}
    3abc:	1d00001a 	stcne	0, cr0, [r0, #-104]
    3ac0:	00001e7a 	andeq	r1, r0, sl, ror lr
    3ac4:	005e2801 	subseq	r2, lr, r1, lsl #16
    3ac8:	54010000 	strpl	r0, [r1]
    3acc:	001e761b 	andseq	r7, lr, fp, lsl r6
    3ad0:	5e280100 	sufple	f0, f0, f0
    3ad4:	1c000000 	stcne	0, cr0, [r0], {0}
    3ad8:	00001450 	andeq	r1, r0, r0, asr r4
    3adc:	005e2901 	subseq	r2, lr, r1, lsl #18
    3ae0:	1a8a0000 	bne	fe283ae8 <SCS_BASE+0x1e275ae8>
    3ae4:	19000000 	stmdbne	r0, {}
    3ae8:	001eed01 	andseq	lr, lr, r1, lsl #26
    3aec:	01be0100 	undefined instruction 0x01be0100
    3af0:	08003f4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, fp, ip, sp}
    3af4:	08003fac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, fp, ip, sp}
    3af8:	00001aa8 	andeq	r1, r0, r8, lsr #21
    3afc:	000004df 	ldrdeq	r0, [r0], -pc
    3b00:	00018e1e 	andeq	r8, r1, lr, lsl lr
    3b04:	003f5c00 	eorseq	r5, pc, r0, lsl #24
    3b08:	003f8c08 	eorseq	r8, pc, r8, lsl #24
    3b0c:	1fcc0108 	svcne	0x00cc0108
    3b10:	08003f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp, ip, sp}
    3b14:	08003f8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, fp, ip, sp}
    3b18:	00019d18 	andeq	r9, r1, r8, lsl sp
    3b1c:	001ac700 	andseq	ip, sl, r0, lsl #14
    3b20:	01a71800 	undefined instruction 0x01a71800
    3b24:	1af00000 	bne	ffc03b2c <SCS_BASE+0x1fbf5b2c>
    3b28:	00000000 	andeq	r0, r0, r0
    3b2c:	5c012000 	stcpl	0, cr2, [r1], {0}
    3b30:	0100001f 	tsteq	r0, pc, lsl r0
    3b34:	ac010166 	stfges	f0, [r1], {102}
    3b38:	e408003f 	str	r0, [r8], #-63
    3b3c:	0e08003f 	mcreq	0, 0, r0, cr8, cr15, {1}
    3b40:	2900001b 	stmdbcs	r0, {r0, r1, r3, r4}
    3b44:	21000005 	tstcs	r0, r5
    3b48:	01006469 	tsteq	r0, r9, ror #8
    3b4c:	005e0166 	subseq	r0, lr, r6, ror #2
    3b50:	1b390000 	blne	e43b58 <__Stack_Size+0xe43758>
    3b54:	41130000 	tstmi	r3, r0
    3b58:	01000034 	tsteq	r0, r4, lsr r0
    3b5c:	005e0166 	subseq	r0, lr, r6, ror #2
    3b60:	1b4c0000 	blne	1303b68 <__Stack_Size+0x1303768>
    3b64:	ea130000 	b	4c3b6c <__Stack_Size+0x4c376c>
    3b68:	01000044 	tsteq	r0, r4, asr #32
    3b6c:	004c0166 	subeq	r0, ip, r6, ror #2
    3b70:	1b5f0000 	blne	17c3b78 <__Stack_Size+0x17c3778>
    3b74:	22000000 	andcs	r0, r0, #0	; 0x0
    3b78:	001d5001 	andseq	r5, sp, r1
    3b7c:	01520100 	cmpeq	r2, r0, lsl #2
    3b80:	00004c01 	andeq	r4, r0, r1, lsl #24
    3b84:	003fe400 	eorseq	lr, pc, r0, lsl #8
    3b88:	00403408 	subeq	r3, r0, r8, lsl #8
    3b8c:	001b7d08 	andseq	r7, fp, r8, lsl #26
    3b90:	00059500 	andeq	r9, r5, r0, lsl #10
    3b94:	64692100 	strbtvs	r2, [r9], #-256
    3b98:	01520100 	cmpeq	r2, r0, lsl #2
    3b9c:	0000005e 	andeq	r0, r0, lr, asr r0
    3ba0:	00001ba8 	andeq	r1, r0, r8, lsr #23
    3ba4:	00344113 	eorseq	r4, r4, r3, lsl r1
    3ba8:	01520100 	cmpeq	r2, r0, lsl #2
    3bac:	0000005e 	andeq	r0, r0, lr, asr r0
    3bb0:	00001bbb 	strheq	r1, [r0], -fp
    3bb4:	00020c23 	andeq	r0, r2, r3, lsr #24
    3bb8:	00401200 	subeq	r1, r0, r0, lsl #4
    3bbc:	00401e08 	subeq	r1, r0, r8, lsl #28
    3bc0:	01610108 	cmneq	r1, r8, lsl #2
    3bc4:	00038624 	andeq	r8, r3, r4, lsr #12
    3bc8:	037d2400 	cmneq	sp, #0	; 0x0
    3bcc:	121f0000 	andsne	r0, pc, #0	; 0x0
    3bd0:	1e080040 	cdpne	0, 0, cr0, cr8, cr0, {2}
    3bd4:	18080040 	stmdane	r8, {r6}
    3bd8:	00000237 	andeq	r0, r0, r7, lsr r2
    3bdc:	00001bce 	andeq	r1, r0, lr, asr #23
    3be0:	20000000 	andcs	r0, r0, r0
    3be4:	001f4101 	andseq	r4, pc, r1, lsl #2
    3be8:	01440100 	cmpeq	r4, r0, lsl #2
    3bec:	00403401 	subeq	r3, r0, r1, lsl #8
    3bf0:	00406408 	subeq	r6, r0, r8, lsl #8
    3bf4:	001bf708 	andseq	pc, fp, r8, lsl #14
    3bf8:	0005df00 	andeq	sp, r5, r0, lsl #30
    3bfc:	64692100 	strbtvs	r2, [r9], #-256
    3c00:	01440100 	cmpeq	r4, r0, lsl #2
    3c04:	0000005e 	andeq	r0, r0, lr, asr r0
    3c08:	00001c22 	andeq	r1, r0, r2, lsr #24
    3c0c:	00344113 	eorseq	r4, r4, r3, lsl r1
    3c10:	01440100 	cmpeq	r4, r0, lsl #2
    3c14:	0000005e 	andeq	r0, r0, lr, asr r0
    3c18:	00001c35 	andeq	r1, r0, r5, lsr ip
    3c1c:	0044ea13 	subeq	lr, r4, r3, lsl sl
    3c20:	01440100 	cmpeq	r4, r0, lsl #2
    3c24:	0000005e 	andeq	r0, r0, lr, asr r0
    3c28:	00001c48 	andeq	r1, r0, r8, asr #24
    3c2c:	50012000 	andpl	r2, r1, r0
    3c30:	0100001f 	tsteq	r0, pc, lsl r0
    3c34:	64010181 	strvs	r0, [r1], #-385
    3c38:	74080040 	strvc	r0, [r8], #-64
    3c3c:	66080040 	strvs	r0, [r8], -r0, asr #32
    3c40:	0900001c 	stmdbeq	r0, {r2, r3, r4}
    3c44:	21000006 	tstcs	r0, r6
    3c48:	01006469 	tsteq	r0, r9, ror #8
    3c4c:	005e0181 	subseq	r0, lr, r1, lsl #3
    3c50:	1c910000 	ldcne	0, cr0, [r1], {0}
    3c54:	22000000 	andcs	r0, r0, #0	; 0x0
    3c58:	001f7601 	andseq	r7, pc, r1, lsl #12
    3c5c:	01310100 	teqeq	r1, r0, lsl #2
    3c60:	00005e01 	andeq	r5, r0, r1, lsl #28
    3c64:	00407400 	subeq	r7, r0, r0, lsl #8
    3c68:	0040bc08 	subeq	fp, r0, r8, lsl #24
    3c6c:	001ca408 	andseq	sl, ip, r8, lsl #8
    3c70:	00064700 	andeq	r4, r6, r0, lsl #14
    3c74:	64692100 	strbtvs	r2, [r9], #-256
    3c78:	01310100 	teqeq	r1, r0, lsl #2
    3c7c:	0000005e 	andeq	r0, r0, lr, asr r0
    3c80:	00001ccf 	andeq	r1, r0, pc, asr #25
    3c84:	00344113 	eorseq	r4, r4, r3, lsl r1
    3c88:	01310100 	teqeq	r1, r0, lsl #2
    3c8c:	0000005e 	andeq	r0, r0, lr, asr r0
    3c90:	00001ce2 	andeq	r1, r0, r2, ror #25
    3c94:	27012000 	strcs	r2, [r1, -r0]
    3c98:	0100001e 	tsteq	r0, lr, lsl r0
    3c9c:	bc010125 	stflts	f0, [r1], {37}
    3ca0:	e4080040 	str	r0, [r8], #-64
    3ca4:	f5080040 	undefined instruction 0xf5080040
    3ca8:	7100001c 	tstvc	r0, ip, lsl r0
    3cac:	21000006 	tstcs	r0, r6
    3cb0:	01006469 	tsteq	r0, r9, ror #8
    3cb4:	005e0125 	subseq	r0, lr, r5, lsr #2
    3cb8:	1d200000 	stcne	0, cr0, [r0]
    3cbc:	25000000 	strcs	r0, [r0]
    3cc0:	001d8001 	andseq	r8, sp, r1
    3cc4:	01210100 	teqeq	r1, r0, lsl #2
    3cc8:	080040e4 	stmdaeq	r0, {r2, r5, r6, r7, lr}
    3ccc:	080040f0 	stmdaeq	r0, {r4, r5, r6, r7, lr}
    3cd0:	00001d33 	andeq	r1, r0, r3, lsr sp
    3cd4:	1f200126 	svcne	0x00200126
    3cd8:	16010000 	strne	r0, [r1], -r0
    3cdc:	00005e01 	andeq	r5, r0, r1, lsl #28
    3ce0:	0040f000 	subeq	pc, r0, r0
    3ce4:	00411808 	subeq	r1, r1, r8, lsl #16
    3ce8:	001d5e08 	andseq	r5, sp, r8, lsl #28
    3cec:	0006b300 	andeq	fp, r6, r0, lsl #6
    3cf0:	1bf61100 	blne	ffd880f8 <SCS_BASE+0x1fd7a0f8>
    3cf4:	16010000 	strne	r0, [r1], -r0
    3cf8:	0000003a 	andeq	r0, r0, sl, lsr r0
    3cfc:	00001d89 	andeq	r1, r0, r9, lsl #27
    3d00:	05341b00 	ldreq	r1, [r4, #-2816]!
    3d04:	2a040000 	bcs	103d0c <__Stack_Size+0x10390c>
    3d08:	000006be 	strheq	r0, [r0], -lr
    3d0c:	00005e27 	andeq	r5, r0, r7, lsr #28
    3d10:	02651b00 	rsbeq	r1, r5, #0	; 0x0
    3d14:	28040000 	stmdacs	r4, {}
    3d18:	000006ce 	andeq	r0, r0, lr, asr #13
    3d1c:	00004c27 	andeq	r4, r0, r7, lsr #24
    3d20:	03f61b00 	mvnseq	r1, #0	; 0x0
    3d24:	28040000 	stmdacs	r4, {}
    3d28:	000006ce 	andeq	r0, r0, lr, asr #13
    3d2c:	00005e28 	andeq	r5, r0, r8, lsr #28
    3d30:	0006ef00 	andeq	lr, r6, r0, lsl #30
    3d34:	006f2900 	rsbeq	r2, pc, r0, lsl #18
    3d38:	03ff0000 	mvnseq	r0, #0	; 0x0
    3d3c:	047a1b00 	ldrbteq	r1, [sl], #-2816
    3d40:	29040000 	stmdbcs	r4, {}
    3d44:	000006fa 	strdeq	r0, [r0], -sl
    3d48:	0006de27 	andeq	sp, r6, r7, lsr #28
    3d4c:	06152a00 	ldreq	r2, [r5], -r0, lsl #20
    3d50:	44040000 	strmi	r0, [r4]
    3d54:	000006be 	strheq	r0, [r0], -lr
    3d58:	03932a00 	orrseq	r2, r3, #0	; 0x0
    3d5c:	44040000 	strmi	r0, [r4]
    3d60:	000006be 	strheq	r0, [r0], -lr
    3d64:	005e2800 	subseq	r2, lr, r0, lsl #16
    3d68:	07270000 	streq	r0, [r7, -r0]!
    3d6c:	6f2b0000 	svcvs	0x002b0000
    3d70:	40000000 	andmi	r0, r0, r0
    3d74:	00ec1b00 	rsceq	r1, ip, r0, lsl #22
    3d78:	45040000 	strmi	r0, [r4]
    3d7c:	00000732 	andeq	r0, r0, r2, lsr r7
    3d80:	00071727 	andeq	r1, r7, r7, lsr #14
    3d84:	05e42a00 	strbeq	r2, [r4, #2560]!
    3d88:	58040000 	stmdapl	r4, {}
    3d8c:	000006ce 	andeq	r0, r0, lr, asr #13
    3d90:	00f92a00 	rscseq	r2, r9, r0, lsl #20
    3d94:	58040000 	stmdapl	r4, {}
    3d98:	000006ce 	andeq	r0, r0, lr, asr #13
    3d9c:	02b21b00 	adcseq	r1, r2, #0	; 0x0
    3da0:	59040000 	stmdbpl	r4, {}
    3da4:	0000075a 	andeq	r0, r0, sl, asr r7
    3da8:	0006de27 	andeq	sp, r6, r7, lsr #28
    3dac:	005e2800 	subseq	r2, lr, r0, lsl #16
    3db0:	076f0000 	strbeq	r0, [pc, -r0]!
    3db4:	6f2b0000 	svcvs	0x002b0000
    3db8:	9f000000 	svcls	0x00000000
    3dbc:	1d5e2c00 	ldclne	12, cr2, [lr]
    3dc0:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    3dc4:	0000075f 	andeq	r0, r0, pc, asr r7
    3dc8:	dc030501 	cfstr32le	mvfx0, [r3], {1}
    3dcc:	28200004 	stmdacs	r0!, {r2}
    3dd0:	0000005e 	andeq	r0, r0, lr, asr r0
    3dd4:	00000791 	muleq	r0, r1, r7
    3dd8:	00006f2b 	andeq	r6, r0, fp, lsr #30
    3ddc:	2c004f00 	stccs	15, cr4, [r0], {0}
    3de0:	00001f11 	andeq	r1, r0, r1, lsl pc
    3de4:	07810f01 	streq	r0, [r1, r1, lsl #30]
    3de8:	05010000 	streq	r0, [r1]
    3dec:	00057c03 	andeq	r7, r5, r3, lsl #24
    3df0:	1e4d2c20 	cdpne	12, 4, cr2, cr13, cr0, {1}
    3df4:	10010000 	andne	r0, r1, r0
    3df8:	0000005e 	andeq	r0, r0, lr, asr r0
    3dfc:	cc030501 	cfstr32gt	mvfx0, [r3], {1}
    3e00:	2c200005 	stccs	0, cr0, [r0], #-20
    3e04:	00001e01 	andeq	r1, r0, r1, lsl #28
    3e08:	005e1101 	subseq	r1, lr, r1, lsl #2
    3e0c:	05010000 	streq	r0, [r1]
    3e10:	0005cd03 	andeq	ip, r5, r3, lsl #26
    3e14:	1e1a2c20 	cdpne	12, 1, cr2, cr10, cr0, {1}
    3e18:	12010000 	andne	r0, r1, #0	; 0x0
    3e1c:	000006ce 	andeq	r0, r0, lr, asr #13
    3e20:	00030501 	andeq	r0, r3, r1, lsl #10
    3e24:	2c200000 	stccs	0, cr0, [r0]
    3e28:	00001f6b 	andeq	r1, r0, fp, ror #30
    3e2c:	06be1301 	ldrteq	r1, [lr], r1, lsl #6
    3e30:	05010000 	streq	r0, [r1]
    3e34:	0005ce03 	andeq	ip, r5, r3, lsl #28
    3e38:	04730020 	ldrbteq	r0, [r3], #-32
    3e3c:	00020000 	andeq	r0, r2, r0
    3e40:	00000d82 	andeq	r0, r0, r2, lsl #27
    3e44:	01c60104 	biceq	r0, r6, r4, lsl #2
    3e48:	91010000 	tstls	r1, r0
    3e4c:	9d00001f 	stcls	0, cr0, [r0, #-124]
    3e50:	18000003 	stmdane	r0, {r0, r1}
    3e54:	58080041 	stmdapl	r8, {r0, r6}
    3e58:	91080044 	tstls	r8, r4, asr #32
    3e5c:	0200000f 	andeq	r0, r0, #15	; 0xf
    3e60:	41780504 	cmnmi	r8, r4, lsl #10
    3e64:	02020000 	andeq	r0, r2, #0	; 0x0
    3e68:	00049505 	andeq	r9, r4, r5, lsl #10
    3e6c:	06010200 	streq	r0, [r1], -r0, lsl #4
    3e70:	00000469 	andeq	r0, r0, r9, ror #8
    3e74:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    3e78:	45270200 	strmi	r0, [r7, #-512]!
    3e7c:	02000000 	andeq	r0, r0, #0	; 0x0
    3e80:	41f20704 	mvnsmi	r0, r4, lsl #14
    3e84:	75030000 	strvc	r0, [r3]
    3e88:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    3e8c:	00005728 	andeq	r5, r0, r8, lsr #14
    3e90:	07020200 	streq	r0, [r2, -r0, lsl #4]
    3e94:	00000222 	andeq	r0, r0, r2, lsr #4
    3e98:	00387503 	eorseq	r7, r8, r3, lsl #10
    3e9c:	00682902 	rsbeq	r2, r8, r2, lsl #18
    3ea0:	01020000 	tsteq	r2, r0
    3ea4:	00046708 	andeq	r6, r4, r8, lsl #14
    3ea8:	1f7f0400 	svcne	0x007f0400
    3eac:	2a020000 	bcs	83eb4 <__Stack_Size+0x83ab4>
    3eb0:	00000068 	andeq	r0, r0, r8, rrx
    3eb4:	06070405 	streq	r0, [r7], -r5, lsl #8
    3eb8:	00202f01 	eoreq	r2, r0, r1, lsl #30
    3ebc:	018c0100 	orreq	r0, ip, r0, lsl #2
    3ec0:	0000004c 	andeq	r0, r0, ip, asr #32
    3ec4:	08004118 	stmdaeq	r0, {r3, r4, r8, lr}
    3ec8:	0800412c 	stmdaeq	r0, {r2, r3, r5, r8, lr}
    3ecc:	01075d01 	tsteq	r7, r1, lsl #26
    3ed0:	00001fd8 	ldrdeq	r1, [r0], -r8
    3ed4:	01010d01 	tsteq	r1, r1, lsl #26
    3ed8:	0000004c 	andeq	r0, r0, ip, asr #32
    3edc:	0800412c 	stmdaeq	r0, {r2, r3, r5, r8, lr}
    3ee0:	08004138 	stmdaeq	r0, {r3, r4, r5, r8, lr}
    3ee4:	01075d01 	tsteq	r7, r1, lsl #26
    3ee8:	00001fb1 	strheq	r1, [r0], -r1
    3eec:	01011301 	tsteq	r1, r1, lsl #6
    3ef0:	0000004c 	andeq	r0, r0, ip, asr #32
    3ef4:	08004138 	stmdaeq	r0, {r3, r4, r5, r8, lr}
    3ef8:	08004144 	stmdaeq	r0, {r2, r6, r8, lr}
    3efc:	01075d01 	tsteq	r7, r1, lsl #26
    3f00:	000020ef 	andeq	r2, r0, pc, ror #1
    3f04:	01011901 	tsteq	r1, r1, lsl #18
    3f08:	0000004c 	andeq	r0, r0, ip, asr #32
    3f0c:	08004144 	stmdaeq	r0, {r2, r6, r8, lr}
    3f10:	08004150 	stmdaeq	r0, {r4, r6, r8, lr}
    3f14:	01075d01 	tsteq	r7, r1, lsl #26
    3f18:	000020b3 	strheq	r2, [r0], -r3
    3f1c:	01011f01 	tsteq	r1, r1, lsl #30
    3f20:	0000004c 	andeq	r0, r0, ip, asr #32
    3f24:	08004150 	stmdaeq	r0, {r4, r6, r8, lr}
    3f28:	0800415c 	stmdaeq	r0, {r2, r3, r4, r6, r8, lr}
    3f2c:	01075d01 	tsteq	r7, r1, lsl #26
    3f30:	000020c6 	andeq	r2, r0, r6, asr #1
    3f34:	01012501 	tsteq	r1, r1, lsl #10
    3f38:	0000005e 	andeq	r0, r0, lr, asr r0
    3f3c:	0800415c 	stmdaeq	r0, {r2, r3, r4, r6, r8, lr}
    3f40:	08004168 	stmdaeq	r0, {r3, r5, r6, r8, lr}
    3f44:	01075d01 	tsteq	r7, r1, lsl #26
    3f48:	00001ff6 	strdeq	r1, [r0], -r6
    3f4c:	01012b01 	tsteq	r1, r1, lsl #22
    3f50:	0000005e 	andeq	r0, r0, lr, asr r0
    3f54:	08004168 	stmdaeq	r0, {r3, r5, r6, r8, lr}
    3f58:	08004178 	stmdaeq	r0, {r3, r4, r5, r6, r8, lr}
    3f5c:	01075d01 	tsteq	r7, r1, lsl #26
    3f60:	000020da 	ldrdeq	r2, [r0], -sl
    3f64:	01013201 	tsteq	r1, r1, lsl #4
    3f68:	0000013c 	andeq	r0, r0, ip, lsr r1
    3f6c:	08004178 	stmdaeq	r0, {r3, r4, r5, r6, r8, lr}
    3f70:	08004184 	stmdaeq	r0, {r2, r7, r8, lr}
    3f74:	04085d01 	streq	r5, [r8], #-3329
    3f78:	746e6905 	strbtvc	r6, [lr], #-2309
    3f7c:	3b010700 	blcc	45b84 <__Stack_Size+0x45784>
    3f80:	01000020 	tsteq	r0, r0, lsr #32
    3f84:	3c010138 	stfccs	f0, [r1], {56}
    3f88:	84000001 	strhi	r0, [r0], #-1
    3f8c:	90080041 	andls	r0, r8, r1, asr #32
    3f90:	01080041 	tsteq	r8, r1, asr #32
    3f94:	8e01075d 	mcrhi	7, 0, r0, cr1, cr13, {2}
    3f98:	01000020 	tsteq	r0, r0, lsr #32
    3f9c:	3c01013e 	stfccs	f0, [r1], {62}
    3fa0:	90000001 	andls	r0, r0, r1
    3fa4:	9c080041 	stcls	0, cr0, [r8], {65}
    3fa8:	01080041 	tsteq	r8, r1, asr #32
    3fac:	0801075d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, r9, sl}
    3fb0:	01000020 	tsteq	r0, r0, lsr #32
    3fb4:	3c010144 	stfccs	f0, [r1], {68}
    3fb8:	9c000001 	stcls	0, cr0, [r0], {1}
    3fbc:	a8080041 	stmdage	r8, {r0, r6}
    3fc0:	01080041 	tsteq	r8, r1, asr #32
    3fc4:	a201075d 	andge	r0, r1, #24379392	; 0x1740000
    3fc8:	01000020 	tsteq	r0, r0, lsr #32
    3fcc:	6f010149 	svcvs	0x00010149
    3fd0:	a8000000 	stmdage	r0, {}
    3fd4:	c0080041 	andgt	r0, r8, r1, asr #32
    3fd8:	01080041 	tsteq	r8, r1, asr #32
    3fdc:	5001095d 	andpl	r0, r1, sp, asr r9
    3fe0:	01000020 	tsteq	r0, r0, lsr #32
    3fe4:	005e0193 	ldrbeq	r0, [lr], #-19
    3fe8:	41c00000 	bicmi	r0, r0, r0
    3fec:	42e00800 	rscmi	r0, r0, #0	; 0x0
    3ff0:	1d9c0800 	ldcne	8, cr0, [ip]
    3ff4:	01f10000 	mvnseq	r0, r0
    3ff8:	d10a0000 	tstle	sl, r0
    3ffc:	0100001f 	tsteq	r0, pc, lsl r0
    4000:	00005e96 	muleq	r0, r6, lr
    4004:	14500a00 	ldrbne	r0, [r0], #-2560
    4008:	97010000 	strls	r0, [r1, -r0]
    400c:	0000005e 	andeq	r0, r0, lr, asr r0
    4010:	0100690b 	tsteq	r0, fp, lsl #18
    4014:	00005e98 	muleq	r0, r8, lr
    4018:	001dbb00 	andseq	fp, sp, r0, lsl #22
    401c:	006a0b00 	rsbeq	r0, sl, r0, lsl #22
    4020:	005e9801 	subseq	r9, lr, r1, lsl #16
    4024:	1dd90000 	ldclne	0, cr0, [r9]
    4028:	09000000 	stmdbeq	r0, {}
    402c:	001f8401 	andseq	r8, pc, r1, lsl #8
    4030:	01410100 	cmpeq	r1, r0, lsl #2
    4034:	0000005e 	andeq	r0, r0, lr, asr r0
    4038:	080042e0 	stmdaeq	r0, {r5, r6, r7, r9, lr}
    403c:	080043d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, lr}
    4040:	00001df7 	strdeq	r1, [r0], -r7
    4044:	0000023f 	andeq	r0, r0, pc, lsr r2
    4048:	001fd10a 	andseq	sp, pc, sl, lsl #2
    404c:	5e420100 	dvfpls	f0, f2, f0
    4050:	0a000000 	beq	4058 <__Stack_Size+0x3c58>
    4054:	00001450 	andeq	r1, r0, r0, asr r4
    4058:	005e4301 	subseq	r4, lr, r1, lsl #6
    405c:	690b0000 	stmdbvs	fp, {}
    4060:	5e440100 	dvfpls	f0, f4, f0
    4064:	22000000 	andcs	r0, r0, #0	; 0x0
    4068:	0b00001e 	bleq	40e8 <__Stack_Size+0x3ce8>
    406c:	4401006a 	strmi	r0, [r1], #-106
    4070:	0000005e 	andeq	r0, r0, lr, asr r0
    4074:	00001e40 	andeq	r1, r0, r0, asr #28
    4078:	74010900 	strvc	r0, [r1], #-2304
    407c:	01000020 	tsteq	r0, r0, lsr #32
    4080:	005e012d 	subseq	r0, lr, sp, lsr #2
    4084:	43d80000 	bicsmi	r0, r8, #0	; 0x0
    4088:	441c0800 	ldrmi	r0, [ip], #-2048
    408c:	1e5e0800 	cdpne	8, 5, cr0, cr14, cr0, {0}
    4090:	02980000 	addseq	r0, r8, #0	; 0x0
    4094:	590c0000 	stmdbpl	ip, {}
    4098:	0100001d 	tsteq	r0, sp, lsl r0
    409c:	00004c2c 	andeq	r4, r0, ip, lsr #24
    40a0:	001e8900 	andseq	r8, lr, r0, lsl #18
    40a4:	1fec0d00 	svcne	0x00ec0d00
    40a8:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    40ac:	00000298 	muleq	r0, r8, r2
    40b0:	0e729102 	expeqs	f1, f2
    40b4:	00001ed9 	ldrdeq	r1, [r0], -r9
    40b8:	005e2f01 	subseq	r2, lr, r1, lsl #30
    40bc:	1e9c0000 	cdpne	0, 9, cr0, cr12, cr0, {0}
    40c0:	ba0e0000 	blt	3840c8 <__Stack_Size+0x383cc8>
    40c4:	0100001e 	tsteq	r0, lr, lsl r0
    40c8:	00005e30 	andeq	r5, r0, r0, lsr lr
    40cc:	001eaf00 	andseq	sl, lr, r0, lsl #30
    40d0:	5e0f0000 	cdppl	0, 0, cr0, cr15, cr0, {0}
    40d4:	a8000000 	stmdage	r0, {}
    40d8:	10000002 	andne	r0, r0, r2
    40dc:	0000007a 	andeq	r0, r0, sl, ror r0
    40e0:	01110005 	tsteq	r1, r5
    40e4:	00002080 	andeq	r2, r0, r0, lsl #1
    40e8:	1c012701 	stcne	7, cr2, [r1], {1}
    40ec:	28080044 	stmdacs	r8, {r2, r6}
    40f0:	c2080044 	andgt	r0, r8, #68	; 0x44
    40f4:	0900001e 	stmdbeq	r0, {r1, r2, r3, r4}
    40f8:	001fa201 	andseq	sl, pc, r1, lsl #4
    40fc:	011b0100 	tsteq	fp, r0, lsl #2
    4100:	0000005e 	andeq	r0, r0, lr, asr r0
    4104:	08004428 	stmdaeq	r0, {r3, r5, sl, lr}
    4108:	08004458 	stmdaeq	r0, {r3, r4, r6, sl, lr}
    410c:	00001eed 	andeq	r1, r0, sp, ror #29
    4110:	000002ea 	andeq	r0, r0, sl, ror #5
    4114:	001bf60c 	andseq	pc, fp, ip, lsl #12
    4118:	3a1a0100 	bcc	684520 <__Stack_Size+0x684120>
    411c:	18000000 	stmdane	r0, {}
    4120:	0000001f 	andeq	r0, r0, pc, lsl r0
    4124:	0005340a 	andeq	r3, r5, sl, lsl #8
    4128:	f52a0300 	undefined instruction 0xf52a0300
    412c:	12000002 	andne	r0, r0, #2	; 0x2
    4130:	0000005e 	andeq	r0, r0, lr, asr r0
    4134:	0002650a 	andeq	r6, r2, sl, lsl #10
    4138:	05280300 	streq	r0, [r8, #-768]!
    413c:	12000003 	andne	r0, r0, #3	; 0x3
    4140:	0000004c 	andeq	r0, r0, ip, asr #32
    4144:	0003f60a 	andeq	pc, r3, sl, lsl #12
    4148:	05280300 	streq	r0, [r8, #-768]!
    414c:	0f000003 	svceq	0x00000003
    4150:	0000005e 	andeq	r0, r0, lr, asr r0
    4154:	00000326 	andeq	r0, r0, r6, lsr #6
    4158:	00007a13 	andeq	r7, r0, r3, lsl sl
    415c:	0003ff00 	andeq	pc, r3, r0, lsl #30
    4160:	00047a0a 	andeq	r7, r4, sl, lsl #20
    4164:	31290300 	teqcc	r9, r0, lsl #6
    4168:	12000003 	andne	r0, r0, #3	; 0x3
    416c:	00000315 	andeq	r0, r0, r5, lsl r3
    4170:	0006150d 	andeq	r1, r6, sp, lsl #10
    4174:	f5440300 	undefined instruction 0xf5440300
    4178:	05000002 	streq	r0, [r0, #-2]
    417c:	0005d103 	andeq	sp, r5, r3, lsl #2
    4180:	03930d20 	orrseq	r0, r3, #2048	; 0x800
    4184:	44030000 	strmi	r0, [r3]
    4188:	000002f5 	strdeq	r0, [r0], -r5
    418c:	05d00305 	ldrbeq	r0, [r0, #773]
    4190:	5e0f2000 	cdppl	0, 0, cr2, cr15, cr0, {0}
    4194:	68000000 	stmdavs	r0, {}
    4198:	10000003 	andne	r0, r0, r3
    419c:	0000007a 	andeq	r0, r0, sl, ror r0
    41a0:	ec0a0040 	stc	0, cr0, [sl], {64}
    41a4:	03000000 	movweq	r0, #0	; 0x0
    41a8:	00037345 	andeq	r7, r3, r5, asr #6
    41ac:	03581200 	cmpeq	r8, #0	; 0x0
    41b0:	e4140000 	ldr	r0, [r4]
    41b4:	03000005 	movweq	r0, #5	; 0x5
    41b8:	00030558 	andeq	r0, r3, r8, asr r5
    41bc:	f9140000 	undefined instruction 0xf9140000
    41c0:	03000000 	movweq	r0, #0	; 0x0
    41c4:	00030558 	andeq	r0, r3, r8, asr r5
    41c8:	b20a0000 	andlt	r0, sl, #0	; 0x0
    41cc:	03000002 	movweq	r0, #2	; 0x2
    41d0:	00039b59 	andeq	r9, r3, r9, asr fp
    41d4:	03151200 	tsteq	r5, #0	; 0x0
    41d8:	c5150000 	ldrgt	r0, [r5]
    41dc:	0100001f 	tsteq	r0, pc, lsl r0
    41e0:	0002980b 	andeq	r9, r2, fp, lsl #16
    41e4:	03050100 	movweq	r0, #20736	; 0x5100
    41e8:	200005d2 	ldrdcs	r0, [r0], -r2
    41ec:	00005e0f 	andeq	r5, r0, pc, lsl #28
    41f0:	0003c200 	andeq	ip, r3, r0, lsl #4
    41f4:	007a1000 	rsbseq	r1, sl, r0
    41f8:	00080000 	andeq	r0, r8, r0
    41fc:	00210c15 	eoreq	r0, r1, r5, lsl ip
    4200:	b20c0100 	andlt	r0, ip, #0	; 0x0
    4204:	01000003 	tsteq	r0, r3
    4208:	05d80305 	ldrbeq	r0, [r8, #773]
    420c:	65152000 	ldrvs	r2, [r5]
    4210:	01000020 	tsteq	r0, r0, lsr #32
    4214:	00005e0d 	andeq	r5, r0, sp, lsl #28
    4218:	03050100 	movweq	r0, #20736	; 0x5100
    421c:	200005e1 	andcs	r0, r0, r1, ror #11
    4220:	00201c15 	eoreq	r1, r0, r5, lsl ip
    4224:	4c0e0100 	stfmis	f0, [lr], {0}
    4228:	01000000 	tsteq	r0, r0
    422c:	05e20305 	strbeq	r0, [r2, #773]!
    4230:	02152000 	andseq	r2, r5, #0	; 0x0
    4234:	01000021 	tsteq	r0, r1, lsr #32
    4238:	0002f50f 	andeq	pc, r2, pc, lsl #10
    423c:	03050100 	movweq	r0, #20736	; 0x5100
    4240:	200005e4 	andcs	r0, r0, r4, ror #11
    4244:	001fe415 	andseq	lr, pc, r5, lsl r4
    4248:	5e110100 	mufpls	f0, f1, f0
    424c:	01000000 	tsteq	r0, r0
    4250:	05e50305 	strbeq	r0, [r5, #773]!
    4254:	bd152000 	ldclt	0, cr2, [r5]
    4258:	0100001f 	tsteq	r0, pc, lsl r0
    425c:	00005e12 	andeq	r5, r0, r2, lsl lr
    4260:	03050100 	movweq	r0, #20736	; 0x5100
    4264:	200005e6 	andcs	r0, r0, r6, ror #11
    4268:	0020fb15 	eoreq	pc, r0, r5, lsl fp
    426c:	5e130100 	mufpls	f0, f3, f0
    4270:	01000000 	tsteq	r0, r0
    4274:	05e70305 	strbeq	r0, [r7, #773]!
    4278:	bf152000 	svclt	0x00152000
    427c:	01000020 	tsteq	r0, r0, lsr #32
    4280:	00005e14 	andeq	r5, r0, r4, lsl lr
    4284:	03050100 	movweq	r0, #20736	; 0x5100
    4288:	200005e8 	andcs	r0, r0, r8, ror #11
    428c:	00202615 	eoreq	r2, r0, r5, lsl r6
    4290:	5e150100 	mufpls	f0, f5, f0
    4294:	01000000 	tsteq	r0, r0
    4298:	05e90305 	strbeq	r0, [r9, #773]!
    429c:	02152000 	andseq	r2, r5, #0	; 0x0
    42a0:	01000020 	tsteq	r0, r0, lsr #32
    42a4:	00005e16 	andeq	r5, r0, r6, lsl lr
    42a8:	03050100 	movweq	r0, #20736	; 0x5100
    42ac:	200005ea 	andcs	r0, r0, sl, ror #11
    42b0:	0003f500 	andeq	pc, r3, r0, lsl #10
    42b4:	b6000200 	strlt	r0, [r0], -r0, lsl #4
    42b8:	0400000e 	streq	r0, [r0], #-14
    42bc:	0001c601 	andeq	ip, r1, r1, lsl #12
    42c0:	218c0100 	orrcs	r0, ip, r0, lsl #2
    42c4:	039d0000 	orrseq	r0, sp, #0	; 0x0
    42c8:	44580000 	ldrbmi	r0, [r8]
    42cc:	45f60800 	ldrbmi	r0, [r6, #2048]!
    42d0:	10c20800 	sbcne	r0, r2, r0, lsl #16
    42d4:	04020000 	streq	r0, [r2]
    42d8:	00417805 	subeq	r7, r1, r5, lsl #16
    42dc:	05020200 	streq	r0, [r2, #-512]
    42e0:	00000495 	muleq	r0, r5, r4
    42e4:	69060102 	stmdbvs	r6, {r1, r8}
    42e8:	02000004 	andeq	r0, r0, #4	; 0x4
    42ec:	41f20704 	mvnsmi	r0, r4, lsl #14
    42f0:	75030000 	strvc	r0, [r3]
    42f4:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    42f8:	00004c28 	andeq	r4, r0, r8, lsr #24
    42fc:	07020200 	streq	r0, [r2, -r0, lsl #4]
    4300:	00000222 	andeq	r0, r0, r2, lsr #4
    4304:	00387503 	eorseq	r7, r8, r3, lsl #10
    4308:	005d2902 	subseq	r2, sp, r2, lsl #18
    430c:	01020000 	tsteq	r2, r0
    4310:	00046708 	andeq	r6, r4, r8, lsl #14
    4314:	003a0400 	eorseq	r0, sl, r0, lsl #8
    4318:	01050000 	tsteq	r5, r0
    431c:	007e3c02 	rsbseq	r3, lr, r2, lsl #24
    4320:	a7060000 	strge	r0, [r6, -r0]
    4324:	00000021 	andeq	r0, r0, r1, lsr #32
    4328:	00043906 	andeq	r3, r4, r6, lsl #18
    432c:	07000100 	streq	r0, [r0, -r0, lsl #2]
    4330:	9d250350 	stcls	3, cr0, [r5, #-320]!
    4334:	08000001 	stmdaeq	r0, {r0}
    4338:	03005253 	movweq	r5, #595	; 0x253
    433c:	00006426 	andeq	r6, r0, r6, lsr #8
    4340:	00230200 	eoreq	r0, r3, r0, lsl #4
    4344:	31524308 	cmpcc	r2, r8, lsl #6
    4348:	64270300 	strtvs	r0, [r7], #-768
    434c:	02000000 	andeq	r0, r0, #0	; 0x0
    4350:	43080423 	movwmi	r0, #33827	; 0x8423
    4354:	03003252 	movweq	r3, #594	; 0x252
    4358:	00006428 	andeq	r6, r0, r8, lsr #8
    435c:	08230200 	stmdaeq	r3!, {r9}
    4360:	00225209 	eoreq	r5, r2, r9, lsl #4
    4364:	64290300 	strtvs	r0, [r9], #-768
    4368:	02000000 	andeq	r0, r0, #0	; 0x0
    436c:	58090c23 	stmdapl	r9, {r0, r1, r5, sl, fp}
    4370:	03000022 	movweq	r0, #34	; 0x22
    4374:	0000642a 	andeq	r6, r0, sl, lsr #8
    4378:	10230200 	eorne	r0, r3, r0, lsl #4
    437c:	0021c109 	eoreq	ip, r1, r9, lsl #2
    4380:	642b0300 	strtvs	r0, [fp], #-768
    4384:	02000000 	andeq	r0, r0, #0	; 0x0
    4388:	c7091423 	strgt	r1, [r9, -r3, lsr #8]
    438c:	03000021 	movweq	r0, #33	; 0x21
    4390:	0000642c 	andeq	r6, r0, ip, lsr #8
    4394:	18230200 	stmdane	r3!, {r9}
    4398:	0021e809 	eoreq	lr, r1, r9, lsl #16
    439c:	642d0300 	strtvs	r0, [sp], #-768
    43a0:	02000000 	andeq	r0, r0, #0	; 0x0
    43a4:	f6091c23 	undefined instruction 0xf6091c23
    43a8:	03000021 	movweq	r0, #33	; 0x21
    43ac:	0000642e 	andeq	r6, r0, lr, lsr #8
    43b0:	20230200 	eorcs	r0, r3, r0, lsl #4
    43b4:	52544808 	subspl	r4, r4, #524288	; 0x80000
    43b8:	642f0300 	strtvs	r0, [pc], #768	; 43c0 <__Stack_Size+0x3fc0>
    43bc:	02000000 	andeq	r0, r0, #0	; 0x0
    43c0:	4c082423 	cfstrsmi	mvf2, [r8], {35}
    43c4:	03005254 	movweq	r5, #596	; 0x254
    43c8:	00006430 	andeq	r6, r0, r0, lsr r4
    43cc:	28230200 	stmdacs	r3!, {r9}
    43d0:	00222509 	eoreq	r2, r2, r9, lsl #10
    43d4:	64310300 	ldrtvs	r0, [r1], #-768
    43d8:	02000000 	andeq	r0, r0, #0	; 0x0
    43dc:	2a092c23 	bcs	24f470 <__Stack_Size+0x24f070>
    43e0:	03000022 	movweq	r0, #34	; 0x22
    43e4:	00006432 	andeq	r6, r0, r2, lsr r4
    43e8:	30230200 	eorcc	r0, r3, r0, lsl #4
    43ec:	00222f09 	eoreq	r2, r2, r9, lsl #30
    43f0:	64330300 	ldrtvs	r0, [r3], #-768
    43f4:	02000000 	andeq	r0, r0, #0	; 0x0
    43f8:	71093423 	tstvc	r9, r3, lsr #8
    43fc:	03000021 	movweq	r0, #33	; 0x21
    4400:	00006434 	andeq	r6, r0, r4, lsr r4
    4404:	38230200 	stmdacc	r3!, {r9}
    4408:	0021af09 	eoreq	sl, r1, r9, lsl #30
    440c:	64350300 	ldrtvs	r0, [r5], #-768
    4410:	02000000 	andeq	r0, r0, #0	; 0x0
    4414:	33093c23 	movwcc	r3, #39971	; 0x9c23
    4418:	03000021 	movweq	r0, #33	; 0x21
    441c:	00006436 	andeq	r6, r0, r6, lsr r4
    4420:	40230200 	eormi	r0, r3, r0, lsl #4
    4424:	00213809 	eoreq	r3, r1, r9, lsl #16
    4428:	64370300 	ldrtvs	r0, [r7], #-768
    442c:	02000000 	andeq	r0, r0, #0	; 0x0
    4430:	3d094423 	cfstrscc	mvf4, [r9, #-140]
    4434:	03000021 	movweq	r0, #33	; 0x21
    4438:	00006438 	andeq	r6, r0, r8, lsr r4
    443c:	48230200 	stmdami	r3!, {r9}
    4440:	00524408 	subseq	r4, r2, r8, lsl #8
    4444:	00643903 	rsbeq	r3, r4, r3, lsl #18
    4448:	23020000 	movwcs	r0, #8192	; 0x2000
    444c:	040a004c 	streq	r0, [sl], #-76
    4450:	031c0b07 	tsteq	ip, #7168	; 0x1c00
    4454:	0213014f 	andseq	r0, r3, #-1073741805	; 0xc0000013
    4458:	430c0000 	movwmi	r0, #49152	; 0xc000
    445c:	03004c52 	movweq	r4, #3154	; 0xc52
    4460:	00640150 	rsbeq	r0, r4, r0, asr r1
    4464:	23020000 	movwcs	r0, #8192	; 0x2000
    4468:	52430c00 	subpl	r0, r3, #0	; 0x0
    446c:	51030048 	tstpl	r3, r8, asr #32
    4470:	00006401 	andeq	r6, r0, r1, lsl #8
    4474:	04230200 	strteq	r0, [r3], #-512
    4478:	5244490c 	subpl	r4, r4, #196608	; 0x30000
    447c:	01520300 	cmpeq	r2, r0, lsl #6
    4480:	00000064 	andeq	r0, r0, r4, rrx
    4484:	0c082302 	stceq	3, cr2, [r8], {2}
    4488:	0052444f 	subseq	r4, r2, pc, asr #8
    448c:	64015303 	strvs	r5, [r1], #-771
    4490:	02000000 	andeq	r0, r0, #0	; 0x0
    4494:	b40d0c23 	strlt	r0, [sp], #-3107
    4498:	03000021 	movweq	r0, #33	; 0x21
    449c:	00640154 	rsbeq	r0, r4, r4, asr r1
    44a0:	23020000 	movwcs	r0, #8192	; 0x2000
    44a4:	52420c10 	subpl	r0, r2, #4096	; 0x1000
    44a8:	55030052 	strpl	r0, [r3, #-82]
    44ac:	00006401 	andeq	r6, r0, r1, lsl #8
    44b0:	14230200 	strtne	r0, [r3], #-512
    44b4:	00225e0d 	eoreq	r5, r2, sp, lsl #28
    44b8:	01560300 	cmpeq	r6, r0, lsl #6
    44bc:	00000064 	andeq	r0, r0, r4, rrx
    44c0:	00182302 	andseq	r2, r8, r2, lsl #6
    44c4:	00211f0e 	eoreq	r1, r1, lr, lsl #30
    44c8:	01570300 	cmpeq	r7, r0, lsl #6
    44cc:	000001a0 	andeq	r0, r0, r0, lsr #3
    44d0:	0021760f 	eoreq	r7, r1, pc, lsl #12
    44d4:	12040100 	andne	r0, r4, #0	; 0x0
    44d8:	00000274 	andeq	r0, r0, r4, ror r2
    44dc:	00223406 	eoreq	r3, r2, r6, lsl #8
    44e0:	ee060000 	cdp	0, 0, cr0, cr6, cr0, {0}
    44e4:	01000021 	tsteq	r0, r1, lsr #32
    44e8:	00216006 	eoreq	r6, r1, r6
    44ec:	58060200 	stmdapl	r6, {r9}
    44f0:	03000021 	movweq	r0, #33	; 0x21
    44f4:	0021b906 	eoreq	fp, r1, r6, lsl #18
    44f8:	cd060400 	cfstrsgt	mvf0, [r6]
    44fc:	05000021 	streq	r0, [r0, #-33]
    4500:	00220706 	eoreq	r0, r2, r6, lsl #14
    4504:	0f060600 	svceq	0x00060600
    4508:	07000022 	streq	r0, [r0, -r2, lsr #32]
    450c:	00226306 	eoreq	r6, r2, r6, lsl #6
    4510:	6b060800 	blvs	186518 <__Stack_Size+0x186118>
    4514:	09000022 	stmdbeq	r0, {r1, r5}
    4518:	00218406 	eoreq	r8, r1, r6, lsl #8
    451c:	9f060a00 	svcls	0x00060a00
    4520:	0b000021 	bleq	45ac <__Stack_Size+0x41ac>
    4524:	21df1000 	bicscs	r1, pc, r0
    4528:	1f040000 	svcne	0x00040000
    452c:	0000021f 	andeq	r0, r0, pc, lsl r2
    4530:	0001710f 	andeq	r7, r1, pc, lsl #2
    4534:	20040100 	andcs	r0, r4, r0, lsl #2
    4538:	000002b6 	strheq	r0, [r0], -r6
    453c:	0005b406 	andeq	fp, r5, r6, lsl #8
    4540:	a6060000 	strge	r0, [r6], -r0
    4544:	01000006 	tsteq	r0, r6
    4548:	0000e406 	andeq	lr, r0, r6, lsl #8
    454c:	82060200 	andhi	r0, r6, #0	; 0x0
    4550:	03000001 	movweq	r0, #1	; 0x1
    4554:	00021106 	andeq	r1, r2, r6, lsl #2
    4558:	1b060400 	blne	185560 <__Stack_Size+0x185160>
    455c:	05000003 	streq	r0, [r0, #-3]
    4560:	00024a06 	andeq	r4, r2, r6, lsl #20
    4564:	10000600 	andne	r0, r0, r0, lsl #12
    4568:	0000221c 	andeq	r2, r0, ip, lsl r2
    456c:	027f2804 	rsbseq	r2, pc, #262144	; 0x40000
    4570:	3c110000 	ldccc	0, cr0, [r1], {0}
    4574:	08000022 	stmdaeq	r0, {r1, r5}
    4578:	02ea7005 	rsceq	r7, sl, #5	; 0x5
    457c:	17090000 	strne	r0, [r9, -r0]
    4580:	05000022 	streq	r0, [r0, #-34]
    4584:	0002ea71 	andeq	lr, r2, r1, ror sl
    4588:	00230200 	eoreq	r0, r3, r0, lsl #4
    458c:	6e697008 	cdpvs	0, 6, cr7, cr9, cr8, {0}
    4590:	41720500 	cmnmi	r2, r0, lsl #10
    4594:	02000000 	andeq	r0, r0, #0	; 0x0
    4598:	12000423 	andne	r0, r0, #587202560	; 0x23000000
    459c:	00021304 	andeq	r1, r2, r4, lsl #6
    45a0:	22471000 	subcs	r1, r7, #0	; 0x0
    45a4:	73050000 	movwvc	r0, #20480	; 0x5000
    45a8:	000002c1 	andeq	r0, r0, r1, asr #5
    45ac:	21680113 	cmncs	r8, r3, lsl r1
    45b0:	1d010000 	stcne	0, cr0, [r1]
    45b4:	00445801 	subeq	r5, r4, r1, lsl #16
    45b8:	00448408 	subeq	r8, r4, r8, lsl #8
    45bc:	001f2b08 	andseq	r2, pc, r8, lsl #22
    45c0:	00033300 	andeq	r3, r3, r0, lsl #6
    45c4:	69701400 	ldmdbvs	r0!, {sl, ip}^
    45c8:	1d01006e 	stcne	0, cr0, [r1, #-440]
    45cc:	00000274 	andeq	r0, r0, r4, ror r2
    45d0:	00001f56 	andeq	r1, r0, r6, asr pc
    45d4:	0042cc15 	subeq	ip, r2, r5, lsl ip
    45d8:	531d0100 	tstpl	sp, #0	; 0x0
    45dc:	74000000 	strvc	r0, [r0]
    45e0:	0000001f 	andeq	r0, r0, pc, lsl r0
    45e4:	21fc0116 	mvnscs	r0, r6, lsl r1
    45e8:	26010000 	strcs	r0, [r1], -r0
    45ec:	00004101 	andeq	r4, r0, r1, lsl #2
    45f0:	00448400 	subeq	r8, r4, r0, lsl #8
    45f4:	00457408 	subeq	r7, r5, r8, lsl #8
    45f8:	001f9208 	andseq	r9, pc, r8, lsl #4
    45fc:	00037900 	andeq	r7, r3, r0, lsl #18
    4600:	22171500 	andscs	r1, r7, #0	; 0x0
    4604:	26010000 	strcs	r0, [r1], -r0
    4608:	000002b6 	strheq	r0, [r0], -r6
    460c:	00001fb1 	strheq	r1, [r0], -r1
    4610:	00452a17 	subeq	r2, r5, r7, lsl sl
    4614:	00456408 	subeq	r6, r5, r8, lsl #8
    4618:	19631808 	stmdbne	r3!, {r3, fp, ip}^
    461c:	64010000 	strvs	r0, [r1]
    4620:	00000041 	andeq	r0, r0, r1, asr #32
    4624:	00001ff0 	strdeq	r1, [r0], -r0
    4628:	01130000 	tsteq	r3, r0
    462c:	00002142 	andeq	r2, r0, r2, asr #2
    4630:	74018901 	strvc	r8, [r1], #-2305
    4634:	b6080045 	strlt	r0, [r8], -r5, asr #32
    4638:	0e080045 	cdpeq	0, 0, cr0, cr8, cr5, {2}
    463c:	9e000020 	cdpls	0, 0, cr0, cr0, cr0, {1}
    4640:	19000003 	stmdbne	r0, {r0, r1}
    4644:	0000217f 	andeq	r2, r0, pc, ror r1
    4648:	00418a01 	subeq	r8, r1, r1, lsl #20
    464c:	16000000 	strne	r0, [r0], -r0
    4650:	00212c01 	eoreq	r2, r1, r1, lsl #24
    4654:	01790100 	cmneq	r9, r0, lsl #2
    4658:	00000041 	andeq	r0, r0, r1, asr #32
    465c:	080045b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, lr}
    4660:	080045f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, sl, lr}
    4664:	00002039 	andeq	r2, r0, r9, lsr r0
    4668:	000003d6 	ldrdeq	r0, [r0], -r6
    466c:	00221715 	eoreq	r1, r2, r5, lsl r7
    4670:	b6790100 	ldrbtlt	r0, [r9], -r0, lsl #2
    4674:	58000002 	stmdapl	r0, {r1}
    4678:	19000020 	stmdbne	r0, {r5}
    467c:	00001963 	andeq	r1, r0, r3, ror #18
    4680:	00417a01 	subeq	r7, r1, r1, lsl #20
    4684:	1a000000 	bne	468c <__Stack_Size+0x428c>
    4688:	000002f0 	strdeq	r0, [r0], -r0
    468c:	000003e6 	andeq	r0, r0, r6, ror #7
    4690:	00019d1b 	andeq	r9, r1, fp, lsl sp
    4694:	1c000b00 	stcne	11, cr0, [r0], {0}
    4698:	000021d5 	ldrdeq	r2, [r0], -r5
    469c:	03d61001 	bicseq	r1, r6, #1	; 0x1
    46a0:	05010000 	streq	r0, [r1]
    46a4:	00000403 	andeq	r0, r0, r3, lsl #8
    46a8:	01c10020 	biceq	r0, r1, r0, lsr #32
    46ac:	00020000 	andeq	r0, r2, r0
    46b0:	00001035 	andeq	r1, r0, r5, lsr r0
    46b4:	01c60104 	biceq	r0, r6, r4, lsl #2
    46b8:	92010000 	andls	r0, r1, #0	; 0x0
    46bc:	9d000022 	stcls	0, cr0, [r0, #-136]
    46c0:	f8000003 	undefined instruction 0xf8000003
    46c4:	1c080045 	stcne	0, cr0, [r8], {69}
    46c8:	a5080046 	strge	r0, [r8, #-70]
    46cc:	02000011 	andeq	r0, r0, #17	; 0x11
    46d0:	41780504 	cmnmi	r8, r4, lsl #10
    46d4:	02020000 	andeq	r0, r2, #0	; 0x0
    46d8:	00049505 	andeq	r9, r4, r5, lsl #10
    46dc:	06010200 	streq	r0, [r1], -r0, lsl #4
    46e0:	00000469 	andeq	r0, r0, r9, ror #8
    46e4:	f2070402 	vshl.s8	d0, d2, d7
    46e8:	03000041 	movweq	r0, #65	; 0x41
    46ec:	00363175 	eorseq	r3, r6, r5, ror r1
    46f0:	004c2802 	subeq	r2, ip, r2, lsl #16
    46f4:	02020000 	andeq	r0, r2, #0	; 0x0
    46f8:	00022207 	andeq	r2, r2, r7, lsl #4
    46fc:	38750300 	ldmdacc	r5!, {r8, r9}^
    4700:	5d290200 	sfmpl	f0, 4, [r9]
    4704:	02000000 	andeq	r0, r0, #0	; 0x0
    4708:	04670801 	strbteq	r0, [r7], #-2049
    470c:	3a040000 	bcc	104714 <__Stack_Size+0x104314>
    4710:	05000000 	streq	r0, [r0]
    4714:	7e3a0201 	cdpvc	2, 3, cr0, cr10, cr1, {0}
    4718:	06000000 	streq	r0, [r0], -r0
    471c:	00000ebd 	strheq	r0, [r0], -sp
    4720:	45530700 	ldrbmi	r0, [r3, #-1792]
    4724:	00010054 	andeq	r0, r1, r4, asr r0
    4728:	00021908 	andeq	r1, r2, r8, lsl #18
    472c:	0d040100 	stfeqs	f0, [r4]
    4730:	000000ae 	andeq	r0, r0, lr, lsr #1
    4734:	00505507 	subseq	r5, r0, r7, lsl #10
    4738:	06100600 	ldreq	r0, [r0], -r0, lsl #12
    473c:	06010000 	streq	r0, [r1], -r0
    4740:	00000000 	andeq	r0, r0, r0
    4744:	05280602 	streq	r0, [r8, #-1538]!
    4748:	06030000 	streq	r0, [r3], -r0
    474c:	00000386 	andeq	r0, r0, r6, lsl #7
    4750:	494d0704 	stmdbmi	sp, {r2, r8, r9, sl}^
    4754:	00050043 	andeq	r0, r5, r3, asr #32
    4758:	00227309 	eoreq	r7, r2, r9, lsl #6
    475c:	7e140400 	cfmulsvc	mvf0, mvf4, mvf0
    4760:	0a000000 	beq	4768 <__Stack_Size+0x4368>
    4764:	1c0b0704 	stcne	7, cr0, [fp], {4}
    4768:	2f014f03 	svccs	0x00014f03
    476c:	0c000001 	stceq	0, cr0, [r0], {1}
    4770:	004c5243 	subeq	r5, ip, r3, asr #4
    4774:	64015003 	strvs	r5, [r1], #-3
    4778:	02000000 	andeq	r0, r0, #0	; 0x0
    477c:	430c0023 	movwmi	r0, #49187	; 0xc023
    4780:	03004852 	movweq	r4, #2130	; 0x852
    4784:	00640151 	rsbeq	r0, r4, r1, asr r1
    4788:	23020000 	movwcs	r0, #8192	; 0x2000
    478c:	44490c04 	strbmi	r0, [r9], #-3076
    4790:	52030052 	andpl	r0, r3, #82	; 0x52
    4794:	00006401 	andeq	r6, r0, r1, lsl #8
    4798:	08230200 	stmdaeq	r3!, {r9}
    479c:	52444f0c 	subpl	r4, r4, #48	; 0x30
    47a0:	01530300 	cmpeq	r3, r0, lsl #6
    47a4:	00000064 	andeq	r0, r0, r4, rrx
    47a8:	0d0c2302 	stceq	3, cr2, [ip, #-8]
    47ac:	000021b4 	strheq	r2, [r0], -r4
    47b0:	64015403 	strvs	r5, [r1], #-1027
    47b4:	02000000 	andeq	r0, r0, #0	; 0x0
    47b8:	420c1023 	andmi	r1, ip, #35	; 0x23
    47bc:	03005252 	movweq	r5, #594	; 0x252
    47c0:	00640155 	rsbeq	r0, r4, r5, asr r1
    47c4:	23020000 	movwcs	r0, #8192	; 0x2000
    47c8:	225e0d14 	subscs	r0, lr, #1280	; 0x500
    47cc:	56030000 	strpl	r0, [r3], -r0
    47d0:	00006401 	andeq	r6, r0, r1, lsl #8
    47d4:	18230200 	stmdane	r3!, {r9}
    47d8:	211f0e00 	tstcs	pc, r0, lsl #28
    47dc:	57030000 	strpl	r0, [r3, -r0]
    47e0:	0000bc01 	andeq	fp, r0, r1, lsl #24
    47e4:	223c0f00 	eorscs	r0, ip, #0	; 0x0
    47e8:	05080000 	streq	r0, [r8]
    47ec:	00016470 	andeq	r6, r1, r0, ror r4
    47f0:	22171000 	andscs	r1, r7, #0	; 0x0
    47f4:	71050000 	tstvc	r5, r0
    47f8:	00000164 	andeq	r0, r0, r4, ror #2
    47fc:	11002302 	tstne	r0, r2, lsl #6
    4800:	006e6970 	rsbeq	r6, lr, r0, ror r9
    4804:	00417205 	subeq	r7, r1, r5, lsl #4
    4808:	23020000 	movwcs	r0, #8192	; 0x2000
    480c:	04120004 	ldreq	r0, [r2], #-4
    4810:	0000012f 	andeq	r0, r0, pc, lsr #2
    4814:	00224709 	eoreq	r4, r2, r9, lsl #14
    4818:	3b730500 	blcc	1cc5c20 <__Stack_Size+0x1cc5820>
    481c:	13000001 	movwne	r0, #1	; 0x1
    4820:	00228701 	eoreq	r8, r2, r1, lsl #14
    4824:	01110100 	tsteq	r1, r0, lsl #2
    4828:	00000053 	andeq	r0, r0, r3, asr r0
    482c:	080045f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, lr}
    4830:	0800461c 	stmdaeq	r0, {r2, r3, r4, r9, sl, lr}
    4834:	00002076 	andeq	r2, r0, r6, ror r0
    4838:	000001a2 	andeq	r0, r0, r2, lsr #3
    483c:	0022a814 	eoreq	sl, r2, r4, lsl r8
    4840:	ae110100 	mufges	f0, f1, f0
    4844:	a1000000 	tstge	r0, r0
    4848:	00000020 	andeq	r0, r0, r0, lsr #32
    484c:	00016a15 	andeq	r6, r1, r5, lsl sl
    4850:	0001b200 	andeq	fp, r1, r0, lsl #4
    4854:	00b91600 	adcseq	r1, r9, r0, lsl #12
    4858:	00050000 	andeq	r0, r5, r0
    485c:	00227c17 	eoreq	r7, r2, r7, lsl ip
    4860:	a20c0100 	andge	r0, ip, #0	; 0x0
    4864:	01000001 	tsteq	r0, r1
    4868:	00640305 	rsbeq	r0, r4, r5, lsl #6
    486c:	be002000 	cdplt	0, 0, cr2, cr0, cr0, {0}
    4870:	02000001 	andeq	r0, r0, #1	; 0x1
    4874:	00116500 	andseq	r6, r1, r0, lsl #10
    4878:	c6010400 	strgt	r0, [r1], -r0, lsl #8
    487c:	01000001 	tsteq	r0, r1
    4880:	000022af 	andeq	r2, r0, pc, lsr #5
    4884:	0000039d 	muleq	r0, sp, r3
    4888:	0800461c 	stmdaeq	r0, {r2, r3, r4, r9, sl, lr}
    488c:	08004648 	stmdaeq	r0, {r3, r6, r9, sl, lr}
    4890:	00001251 	andeq	r1, r0, r1, asr r2
    4894:	78050402 	stmdavc	r5, {r1, sl}
    4898:	02000041 	andeq	r0, r0, #65	; 0x41
    489c:	04950502 	ldreq	r0, [r5], #1282
    48a0:	01020000 	tsteq	r2, r0
    48a4:	00046906 	andeq	r6, r4, r6, lsl #18
    48a8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    48ac:	000041f2 	strdeq	r4, [r0], -r2
    48b0:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    48b4:	4c280200 	sfmmi	f0, 4, [r8]
    48b8:	02000000 	andeq	r0, r0, #0	; 0x0
    48bc:	02220702 	eoreq	r0, r2, #524288	; 0x80000
    48c0:	75030000 	strvc	r0, [r3]
    48c4:	29020038 	stmdbcs	r2, {r3, r4, r5}
    48c8:	0000005d 	andeq	r0, r0, sp, asr r0
    48cc:	67080102 	strvs	r0, [r8, -r2, lsl #2]
    48d0:	04000004 	streq	r0, [r0], #-4
    48d4:	0000003a 	andeq	r0, r0, sl, lsr r0
    48d8:	0004f405 	andeq	pc, r4, r5, lsl #8
    48dc:	0d040100 	stfeqs	f0, [r4]
    48e0:	000000a0 	andeq	r0, r0, r0, lsr #1
    48e4:	00037106 	andeq	r7, r3, r6, lsl #2
    48e8:	86060000 	strhi	r0, [r6], -r0
    48ec:	01000014 	tsteq	r0, r4, lsl r0
    48f0:	00006306 	andeq	r6, r0, r6, lsl #6
    48f4:	75060200 	strvc	r0, [r6, #-512]
    48f8:	03000004 	movweq	r0, #4	; 0x4
    48fc:	44585407 	ldrbmi	r5, [r8], #-1031
    4900:	52070400 	andpl	r0, r7, #0	; 0x0
    4904:	05004458 	streq	r4, [r0, #-1112]
    4908:	58554107 	ldmdapl	r5, {r0, r1, r2, r8, lr}^
    490c:	08000600 	stmdaeq	r0, {r9, sl}
    4910:	000022c2 	andeq	r2, r0, r2, asr #5
    4914:	00691504 	rsbeq	r1, r9, r4, lsl #10
    4918:	04090000 	streq	r0, [r9]
    491c:	031c0a07 	tsteq	ip, #28672	; 0x7000
    4920:	0121014f 	teqeq	r1, pc, asr #2
    4924:	430b0000 	movwmi	r0, #45056	; 0xb000
    4928:	03004c52 	movweq	r4, #3154	; 0xc52
    492c:	00640150 	rsbeq	r0, r4, r0, asr r1
    4930:	23020000 	movwcs	r0, #8192	; 0x2000
    4934:	52430b00 	subpl	r0, r3, #0	; 0x0
    4938:	51030048 	tstpl	r3, r8, asr #32
    493c:	00006401 	andeq	r6, r0, r1, lsl #8
    4940:	04230200 	strteq	r0, [r3], #-512
    4944:	5244490b 	subpl	r4, r4, #180224	; 0x2c000
    4948:	01520300 	cmpeq	r2, r0, lsl #6
    494c:	00000064 	andeq	r0, r0, r4, rrx
    4950:	0b082302 	bleq	20d560 <__Stack_Size+0x20d160>
    4954:	0052444f 	subseq	r4, r2, pc, asr #8
    4958:	64015303 	strvs	r5, [r1], #-771
    495c:	02000000 	andeq	r0, r0, #0	; 0x0
    4960:	b40c0c23 	strlt	r0, [ip], #-3107
    4964:	03000021 	movweq	r0, #33	; 0x21
    4968:	00640154 	rsbeq	r0, r4, r4, asr r1
    496c:	23020000 	movwcs	r0, #8192	; 0x2000
    4970:	52420b10 	subpl	r0, r2, #16384	; 0x4000
    4974:	55030052 	strpl	r0, [r3, #-82]
    4978:	00006401 	andeq	r6, r0, r1, lsl #8
    497c:	14230200 	strtne	r0, [r3], #-512
    4980:	00225e0c 	eoreq	r5, r2, ip, lsl #28
    4984:	01560300 	cmpeq	r6, r0, lsl #6
    4988:	00000064 	andeq	r0, r0, r4, rrx
    498c:	00182302 	andseq	r2, r8, r2, lsl #6
    4990:	00211f0d 	eoreq	r1, r1, sp, lsl #30
    4994:	01570300 	cmpeq	r7, r0, lsl #6
    4998:	000000ae 	andeq	r0, r0, lr, lsr #1
    499c:	00223c0e 	eoreq	r3, r2, lr, lsl #24
    49a0:	70050800 	andvc	r0, r5, r0, lsl #16
    49a4:	00000156 	andeq	r0, r0, r6, asr r1
    49a8:	0022170f 	eoreq	r1, r2, pc, lsl #14
    49ac:	56710500 	ldrbtpl	r0, [r1], -r0, lsl #10
    49b0:	02000001 	andeq	r0, r0, #1	; 0x1
    49b4:	70100023 	andsvc	r0, r0, r3, lsr #32
    49b8:	05006e69 	streq	r6, [r0, #-3689]
    49bc:	00004172 	andeq	r4, r0, r2, ror r1
    49c0:	04230200 	strteq	r0, [r3], #-512
    49c4:	21041100 	tstcs	r4, r0, lsl #2
    49c8:	08000001 	stmdaeq	r0, {r0}
    49cc:	00002247 	andeq	r2, r0, r7, asr #4
    49d0:	012d7305 	teqeq	sp, r5, lsl #6
    49d4:	01120000 	tsteq	r2, r0
    49d8:	000022c8 	andeq	r2, r0, r8, asr #5
    49dc:	1c011301 	stcne	3, cr1, [r1], {1}
    49e0:	48080046 	stmdami	r8, {r1, r2, r6}
    49e4:	b4080046 	strlt	r0, [r8], #-70
    49e8:	9f000020 	svcls	0x00000020
    49ec:	13000001 	movwne	r0, #1	; 0x1
    49f0:	0064656c 	rsbeq	r6, r4, ip, ror #10
    49f4:	00a01301 	adceq	r1, r0, r1, lsl #6
    49f8:	20df0000 	sbcscs	r0, pc, r0
    49fc:	cc140000 	ldcgt	0, cr0, [r4], {0}
    4a00:	01000042 	tsteq	r0, r2, asr #32
    4a04:	00005313 	andeq	r5, r0, r3, lsl r3
    4a08:	0020fd00 	eoreq	pc, r0, r0, lsl #26
    4a0c:	5c150000 	ldcpl	0, cr0, [r5], {0}
    4a10:	af000001 	svcge	0x00000001
    4a14:	16000001 	strne	r0, [r0], -r1
    4a18:	000000ab 	andeq	r0, r0, fp, lsr #1
    4a1c:	cf170006 	svcgt	0x00170006
    4a20:	01000022 	tsteq	r0, r2, lsr #32
    4a24:	00019f0c 	andeq	r9, r1, ip, lsl #30
    4a28:	03050100 	movweq	r0, #20736	; 0x5100
    4a2c:	20000094 	mulcs	r0, r4, r0
    4a30:	00020d00 	andeq	r0, r2, r0, lsl #26
    4a34:	95000200 	strls	r0, [r0, #-512]
    4a38:	04000012 	streq	r0, [r0], #-18
    4a3c:	0001c601 	andeq	ip, r1, r1, lsl #12
    4a40:	231e0100 	tstcs	lr, #0	; 0x0
    4a44:	039d0000 	orrseq	r0, sp, #0	; 0x0
    4a48:	46480000 	strbmi	r0, [r8], -r0
    4a4c:	46920800 	ldrmi	r0, [r2], r0, lsl #16
    4a50:	12f70800 	rscsne	r0, r7, #0	; 0x0
    4a54:	04020000 	streq	r0, [r2]
    4a58:	00417805 	subeq	r7, r1, r5, lsl #16
    4a5c:	05020200 	streq	r0, [r2, #-512]
    4a60:	00000495 	muleq	r0, r5, r4
    4a64:	69060102 	stmdbvs	r6, {r1, r8}
    4a68:	03000004 	movweq	r0, #4	; 0x4
    4a6c:	00323375 	eorseq	r3, r2, r5, ror r3
    4a70:	00452702 	subeq	r2, r5, r2, lsl #14
    4a74:	04020000 	streq	r0, [r2]
    4a78:	0041f207 	subeq	pc, r1, r7, lsl #4
    4a7c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    4a80:	00000222 	andeq	r0, r0, r2, lsr #4
    4a84:	00387503 	eorseq	r7, r8, r3, lsl #10
    4a88:	005d2902 	subseq	r2, sp, r2, lsl #18
    4a8c:	01020000 	tsteq	r2, r0
    4a90:	00046708 	andeq	r6, r4, r8, lsl #14
    4a94:	00450400 	subeq	r0, r5, r0, lsl #8
    4a98:	aa050000 	bge	144aa0 <__Stack_Size+0x1446a0>
    4a9c:	02000000 	andeq	r0, r0, #0	; 0x0
    4aa0:	00fe0d04 	rscseq	r0, lr, r4, lsl #26
    4aa4:	7f060000 	svcvc	0x00060000
    4aa8:	f2000003 	vhadd.s8	d0, d0, d3
    4aac:	ec0601ee 	stfs	f0, [r6], {238}
    4ab0:	be000004 	cdplt	0, 0, cr0, cr0, cr4, {0}
    4ab4:	6f0601e1 	svcvs	0x000601e1
    4ab8:	be000005 	cdplt	0, 0, cr0, cr0, cr5, {0}
    4abc:	430601e1 	movwmi	r0, #25057	; 0x61e1
    4ac0:	ea000002 	b	4ad0 <__Stack_Size+0x46d0>
    4ac4:	ac0601d4 	stfges	f0, [r6], {212}
    4ac8:	f1000005 	cps	#5
    4acc:	780601c8 	stmdavc	r6, {r3, r6, r7, r8}
    4ad0:	f1000006 	cps	#6
    4ad4:	8c0601c8 	stfhis	f0, [r6], {200}
    4ad8:	ce000003 	cdpgt	0, 0, cr0, cr0, cr3, {0}
    4adc:	4f0601bd 	svcmi	0x000601bd
    4ae0:	fc000002 	stc2	0, cr0, [r0], {2}
    4ae4:	dc0601b2 	stfles	f0, [r6], {178}
    4ae8:	f6000000 	undefined instruction 0xf6000000
    4aec:	510601a8 	smlatbpl	r6, r8, r1, r0
    4af0:	f6000001 	undefined instruction 0xf6000001
    4af4:	560601a8 	strpl	r0, [r6], -r8, lsr #3
    4af8:	b8000002 	stmdalt	r0, {r1}
    4afc:	7a06019f 	bvc	185180 <__Stack_Size+0x184d80>
    4b00:	bf000001 	svclt	0x00000001
    4b04:	5d060196 	stfpls	f0, [r6, #-600]
    4b08:	bf000002 	svclt	0x00000002
    4b0c:	35060196 	strcc	r0, [r6, #-406]
    4b10:	86000002 	strhi	r0, [r0], -r2
    4b14:	7706018e 	strvc	r0, [r6, -lr, lsl #3]
    4b18:	89000002 	stmdbhi	r0, {r1}
    4b1c:	77060186 	strvc	r0, [r6, -r6, lsl #3]
    4b20:	89000003 	stmdbhi	r0, {r0, r1}
    4b24:	3c060186 	stfccs	f0, [r6], {134}
    4b28:	c6000002 	strgt	r0, [r0], -r2
    4b2c:	070000fe 	undefined
    4b30:	000022e1 	andeq	r2, r0, r1, ror #5
    4b34:	00692704 	rsbeq	r2, r9, r4, lsl #14
    4b38:	04080000 	streq	r0, [r8]
    4b3c:	031c0907 	tsteq	ip, #114688	; 0x1c000
    4b40:	017f014f 	cmneq	pc, pc, asr #2
    4b44:	430a0000 	movwmi	r0, #40960	; 0xa000
    4b48:	03004c52 	movweq	r4, #3154	; 0xc52
    4b4c:	00640150 	rsbeq	r0, r4, r0, asr r1
    4b50:	23020000 	movwcs	r0, #8192	; 0x2000
    4b54:	52430a00 	subpl	r0, r3, #0	; 0x0
    4b58:	51030048 	tstpl	r3, r8, asr #32
    4b5c:	00006401 	andeq	r6, r0, r1, lsl #8
    4b60:	04230200 	strteq	r0, [r3], #-512
    4b64:	5244490a 	subpl	r4, r4, #163840	; 0x28000
    4b68:	01520300 	cmpeq	r2, r0, lsl #6
    4b6c:	00000064 	andeq	r0, r0, r4, rrx
    4b70:	0a082302 	beq	20d780 <__Stack_Size+0x20d380>
    4b74:	0052444f 	subseq	r4, r2, pc, asr #8
    4b78:	64015303 	strvs	r5, [r1], #-771
    4b7c:	02000000 	andeq	r0, r0, #0	; 0x0
    4b80:	b40b0c23 	strlt	r0, [fp], #-3107
    4b84:	03000021 	movweq	r0, #33	; 0x21
    4b88:	00640154 	rsbeq	r0, r4, r4, asr r1
    4b8c:	23020000 	movwcs	r0, #8192	; 0x2000
    4b90:	52420a10 	subpl	r0, r2, #65536	; 0x10000
    4b94:	55030052 	strpl	r0, [r3, #-82]
    4b98:	00006401 	andeq	r6, r0, r1, lsl #8
    4b9c:	14230200 	strtne	r0, [r3], #-512
    4ba0:	00225e0b 	eoreq	r5, r2, fp, lsl #28
    4ba4:	01560300 	cmpeq	r6, r0, lsl #6
    4ba8:	00000064 	andeq	r0, r0, r4, rrx
    4bac:	00182302 	andseq	r2, r8, r2, lsl #6
    4bb0:	2317010c 	tstcs	r7, #3	; 0x3
    4bb4:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    4bb8:	00464801 	subeq	r4, r6, r1, lsl #16
    4bbc:	00468408 	subeq	r8, r6, r8, lsl #8
    4bc0:	00211b08 	eoreq	r1, r1, r8, lsl #22
    4bc4:	0001b700 	andeq	fp, r1, r0, lsl #14
    4bc8:	22ef0d00 	rsccs	r0, pc, #0	; 0x0
    4bcc:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    4bd0:	0000003a 	andeq	r0, r0, sl, lsr r0
    4bd4:	00002146 	andeq	r2, r0, r6, asr #2
    4bd8:	0022dc0d 	eoreq	sp, r2, sp, lsl #24
    4bdc:	3a0e0100 	bcc	384fe4 <__Stack_Size+0x384be4>
    4be0:	59000000 	stmdbpl	r0, {}
    4be4:	00000021 	andeq	r0, r0, r1, lsr #32
    4be8:	22fe010c 	rscscs	r0, lr, #3	; 0x3
    4bec:	27010000 	strcs	r0, [r1, -r0]
    4bf0:	00468401 	subeq	r8, r6, r1, lsl #8
    4bf4:	00469208 	subeq	r9, r6, r8, lsl #4
    4bf8:	00217708 	eoreq	r7, r1, r8, lsl #14
    4bfc:	0001fe00 	andeq	pc, r1, r0, lsl #28
    4c00:	22ef0d00 	rsccs	r0, pc, #0	; 0x0
    4c04:	27010000 	strcs	r0, [r1, -r0]
    4c08:	0000003a 	andeq	r0, r0, sl, lsr r0
    4c0c:	000021a2 	andeq	r2, r0, r2, lsr #3
    4c10:	0022d70d 	eoreq	sp, r2, sp, lsl #14
    4c14:	fe270100 	cdp2	1, 2, cr0, cr7, cr0, {0}
    4c18:	b5000000 	strlt	r0, [r0]
    4c1c:	0d000021 	stceq	0, cr0, [r0, #-132]
    4c20:	000022f7 	strdeq	r2, [r0], -r7
    4c24:	00532701 	subseq	r2, r3, r1, lsl #14
    4c28:	21c80000 	biccs	r0, r8, r0
    4c2c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    4c30:	00002307 	andeq	r2, r0, r7, lsl #6
    4c34:	020b1c05 	andeq	r1, fp, #1280	; 0x500
    4c38:	01010000 	tsteq	r1, r0
    4c3c:	00003a04 	andeq	r3, r0, r4, lsl #20
    4c40:	02470000 	subeq	r0, r7, #0	; 0x0
    4c44:	00020000 	andeq	r0, r2, r0
    4c48:	00001358 	andeq	r1, r0, r8, asr r3
    4c4c:	01c60104 	biceq	r0, r6, r4, lsl #2
    4c50:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    4c54:	9d000023 	stcls	0, cr0, [r0, #-140]
    4c58:	94000003 	strls	r0, [r0], #-3
    4c5c:	d0080046 	andle	r0, r8, r6, asr #32
    4c60:	a9080048 	stmdbge	r8, {r3, r6}
    4c64:	02000013 	andeq	r0, r0, #19	; 0x13
    4c68:	41780504 	cmnmi	r8, r4, lsl #10
    4c6c:	02020000 	andeq	r0, r2, #0	; 0x0
    4c70:	00049505 	andeq	r9, r4, r5, lsl #10
    4c74:	06010200 	streq	r0, [r1], -r0, lsl #4
    4c78:	00000469 	andeq	r0, r0, r9, ror #8
    4c7c:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    4c80:	45270200 	strmi	r0, [r7, #-512]!
    4c84:	02000000 	andeq	r0, r0, #0	; 0x0
    4c88:	41f20704 	mvnsmi	r0, r4, lsl #14
    4c8c:	02020000 	andeq	r0, r2, #0	; 0x0
    4c90:	00022207 	andeq	r2, r2, r7, lsl #4
    4c94:	38750300 	ldmdacc	r5!, {r8, r9}^
    4c98:	5d290200 	sfmpl	f0, 4, [r9]
    4c9c:	02000000 	andeq	r0, r0, #0	; 0x0
    4ca0:	04670801 	strbteq	r0, [r7], #-2049
    4ca4:	04040000 	streq	r0, [r4]
    4ca8:	04f40507 	ldrbteq	r0, [r4], #1287
    4cac:	03010000 	movweq	r0, #4096	; 0x1000
    4cb0:	00009e0d 	andeq	r9, r0, sp, lsl #28
    4cb4:	03710600 	cmneq	r1, #0	; 0x0
    4cb8:	06000000 	streq	r0, [r0], -r0
    4cbc:	00001486 	andeq	r1, r0, r6, lsl #9
    4cc0:	00630601 	rsbeq	r0, r3, r1, lsl #12
    4cc4:	06020000 	streq	r0, [r2], -r0
    4cc8:	00000475 	andeq	r0, r0, r5, ror r4
    4ccc:	58540703 	ldmdapl	r4, {r0, r1, r8, r9, sl}^
    4cd0:	07040044 	streq	r0, [r4, -r4, asr #32]
    4cd4:	00445852 	subeq	r5, r4, r2, asr r8
    4cd8:	55410705 	strbpl	r0, [r1, #-1797]
    4cdc:	00060058 	andeq	r0, r6, r8, asr r0
    4ce0:	23b20108 	undefined instruction 0x23b20108
    4ce4:	2d010000 	stccs	0, cr0, [r1]
    4ce8:	00469401 	subeq	r9, r6, r1, lsl #8
    4cec:	0046d408 	subeq	sp, r6, r8, lsl #8
    4cf0:	c35d0108 	cmpgt	sp, #2	; 0x2
    4cf4:	09000000 	stmdbeq	r0, {}
    4cf8:	00002331 	andeq	r2, r0, r1, lsr r3
    4cfc:	003a2d01 	eorseq	r2, sl, r1, lsl #26
    4d00:	50010000 	andpl	r0, r1, r0
    4d04:	37010a00 	strcc	r0, [r1, -r0, lsl #20]
    4d08:	01000023 	tsteq	r0, r3, lsr #32
    4d0c:	46d40128 	ldrbmi	r0, [r4], r8, lsr #2
    4d10:	46ea0800 	strbtmi	r0, [sl], r0, lsl #16
    4d14:	21db0800 	bicscs	r0, fp, r0, lsl #16
    4d18:	00ec0000 	rsceq	r0, ip, r0
    4d1c:	310b0000 	tstcc	fp, r0
    4d20:	01000023 	tsteq	r0, r3, lsr #32
    4d24:	00003a28 	andeq	r3, r0, r8, lsr #20
    4d28:	00220600 	eoreq	r0, r2, r0, lsl #12
    4d2c:	01080000 	tsteq	r8, r0
    4d30:	000023f7 	strdeq	r2, [r0], -r7
    4d34:	ec016601 	stc	6, cr6, [r1], {1}
    4d38:	14080046 	strne	r0, [r8], #-70
    4d3c:	01080047 	tsteq	r8, r7, asr #32
    4d40:	0001115d 	andeq	r1, r1, sp, asr r1
    4d44:	23310900 	teqcs	r1, #0	; 0x0
    4d48:	66010000 	strvs	r0, [r1], -r0
    4d4c:	0000003a 	andeq	r0, r0, sl, lsr r0
    4d50:	08005001 	stmdaeq	r0, {r0, ip, lr}
    4d54:	0023c201 	eoreq	ip, r3, r1, lsl #4
    4d58:	017c0100 	cmneq	ip, r0, lsl #2
    4d5c:	08004714 	stmdaeq	r0, {r2, r4, r8, r9, sl, lr}
    4d60:	0800474c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, lr}
    4d64:	01365d01 	teqeq	r6, r1, lsl #26
    4d68:	31090000 	tstcc	r9, r0
    4d6c:	01000023 	tsteq	r0, r3, lsr #32
    4d70:	00003a7c 	andeq	r3, r0, ip, ror sl
    4d74:	00500100 	subseq	r0, r0, r0, lsl #2
    4d78:	240e0108 	strcs	r0, [lr], #-264
    4d7c:	9b010000 	blls	44d84 <__Stack_Size+0x44984>
    4d80:	00474c01 	subeq	r4, r7, r1, lsl #24
    4d84:	00478408 	subeq	r8, r7, r8, lsl #8
    4d88:	5b5d0108 	blpl	17451b0 <__Stack_Size+0x1744db0>
    4d8c:	09000001 	stmdbeq	r0, {r0}
    4d90:	00002331 	andeq	r2, r0, r1, lsr r3
    4d94:	003a9b01 	eorseq	r9, sl, r1, lsl #22
    4d98:	50010000 	andpl	r0, r1, r0
    4d9c:	59010c00 	stmdbpl	r1, {sl, fp}
    4da0:	01000023 	tsteq	r0, r3, lsr #32
    4da4:	003a01ba 	ldrhteq	r0, [sl], -sl
    4da8:	47840000 	strmi	r0, [r4, r0]
    4dac:	479c0800 	ldrmi	r0, [ip, r0, lsl #16]
    4db0:	5d010800 	stcpl	8, cr0, [r1]
    4db4:	23d4010d 	bicscs	r0, r4, #1073741827	; 0x40000003
    4db8:	c1010000 	tstgt	r1, r0
    4dbc:	00479c01 	subeq	r9, r7, r1, lsl #24
    4dc0:	00489808 	subeq	r9, r8, r8, lsl #16
    4dc4:	00221908 	eoreq	r1, r2, r8, lsl #18
    4dc8:	a3010a00 	movwge	r0, #6656	; 0x1a00
    4dcc:	01000023 	tsteq	r0, r3, lsr #32
    4dd0:	4898014e 	ldmmi	r8, {r1, r2, r3, r6, r8}
    4dd4:	48d00800 	ldmmi	r0, {fp}^
    4dd8:	22380800 	eorscs	r0, r8, #0	; 0x0
    4ddc:	01b00000 	movseq	r0, r0
    4de0:	760b0000 	strvc	r0, [fp], -r0
    4de4:	01000023 	tsteq	r0, r3, lsr #32
    4de8:	00003a4e 	andeq	r3, r0, lr, asr #20
    4dec:	00226300 	eoreq	r6, r2, r0, lsl #6
    4df0:	800e0000 	andhi	r0, lr, r0
    4df4:	01000023 	tsteq	r0, r3, lsr #32
    4df8:	0001c217 	andeq	ip, r1, r7, lsl r2
    4dfc:	03050100 	movweq	r0, #20736	; 0x5100
    4e00:	200005ec 	andcs	r0, r0, ip, ror #11
    4e04:	00003a0f 	andeq	r3, r0, pc, lsl #20
    4e08:	23630e00 	cmncs	r3, #0	; 0x0
    4e0c:	18010000 	stmdane	r1, {}
    4e10:	000001c2 	andeq	r0, r0, r2, asr #3
    4e14:	f0030501 	undefined instruction 0xf0030501
    4e18:	0e200005 	cdpeq	0, 2, cr0, cr0, cr5, {0}
    4e1c:	000023e3 	andeq	r2, r0, r3, ror #7
    4e20:	01c21901 	biceq	r1, r2, r1, lsl #18
    4e24:	05010000 	streq	r0, [r1]
    4e28:	0005f403 	andeq	pc, r5, r3, lsl #8
    4e2c:	238f0e20 	orrcs	r0, pc, #512	; 0x200
    4e30:	1a010000 	bne	44e38 <__Stack_Size+0x44a38>
    4e34:	000001c2 	andeq	r0, r0, r2, asr #3
    4e38:	f8030501 	undefined instruction 0xf8030501
    4e3c:	0e200005 	cdpeq	0, 2, cr0, cr0, cr5, {0}
    4e40:	00002307 	andeq	r2, r0, r7, lsl #6
    4e44:	01c21b01 	biceq	r1, r2, r1, lsl #22
    4e48:	05010000 	streq	r0, [r1]
    4e4c:	0005fc03 	andeq	pc, r5, r3, lsl #24
    4e50:	24200e20 	strtcs	r0, [r0], #-3616
    4e54:	1c010000 	stcne	0, cr0, [r1], {0}
    4e58:	00000221 	andeq	r0, r0, r1, lsr #4
    4e5c:	00030501 	andeq	r0, r3, r1, lsl #10
    4e60:	0f200006 	svceq	0x00200006
    4e64:	00000053 	andeq	r0, r0, r3, asr r0
    4e68:	0023bb0e 	eoreq	fp, r3, lr, lsl #22
    4e6c:	c21d0100 	andsgt	r0, sp, #0	; 0x0
    4e70:	01000001 	tsteq	r0, r1
    4e74:	06040305 	streq	r0, [r4], -r5, lsl #6
    4e78:	b90e2000 	stmdblt	lr, {sp}
    4e7c:	01000023 	tsteq	r0, r3, lsr #32
    4e80:	0001c21e 	andeq	ip, r1, lr, lsl r2
    4e84:	03050100 	movweq	r0, #20736	; 0x5100
    4e88:	20000608 	andcs	r0, r0, r8, lsl #12
    4e8c:	00058b00 	andeq	r8, r5, r0, lsl #22
    4e90:	3e000200 	cdpcc	2, 0, cr0, cr0, cr0, {0}
    4e94:	04000014 	streq	r0, [r0], #-20
    4e98:	0001c601 	andeq	ip, r1, r1, lsl #12
    4e9c:	247e0100 	ldrbtcs	r0, [lr], #-256
    4ea0:	039d0000 	orrseq	r0, sp, #0	; 0x0
    4ea4:	48d00000 	ldmmi	r0, {}^
    4ea8:	4d240800 	stcmi	8, cr0, [r4]
    4eac:	149b0800 	ldrne	r0, [fp], #2048
    4eb0:	04020000 	streq	r0, [r2]
    4eb4:	00417805 	subeq	r7, r1, r5, lsl #16
    4eb8:	05020200 	streq	r0, [r2, #-512]
    4ebc:	00000495 	muleq	r0, r5, r4
    4ec0:	69060102 	stmdbvs	r6, {r1, r8}
    4ec4:	03000004 	movweq	r0, #4	; 0x4
    4ec8:	00323375 	eorseq	r3, r2, r5, ror r3
    4ecc:	00452702 	subeq	r2, r5, r2, lsl #14
    4ed0:	04020000 	streq	r0, [r2]
    4ed4:	0041f207 	subeq	pc, r1, r7, lsl #4
    4ed8:	31750300 	cmncc	r5, r0, lsl #6
    4edc:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
    4ee0:	00000057 	andeq	r0, r0, r7, asr r0
    4ee4:	22070202 	andcs	r0, r7, #536870912	; 0x20000000
    4ee8:	03000002 	movweq	r0, #2	; 0x2
    4eec:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    4ef0:	00006829 	andeq	r6, r0, r9, lsr #16
    4ef4:	08010200 	stmdaeq	r1, {r9}
    4ef8:	00000467 	andeq	r0, r0, r7, ror #8
    4efc:	00004504 	andeq	r4, r0, r4, lsl #10
    4f00:	02010500 	andeq	r0, r1, #0	; 0x0
    4f04:	0000893a 	andeq	r8, r0, sl, lsr r9
    4f08:	0ebd0600 	cdpeq	6, 11, cr0, cr13, cr0, {0}
    4f0c:	07000000 	streq	r0, [r0, -r0]
    4f10:	00544553 	subseq	r4, r4, r3, asr r5
    4f14:	01050001 	tsteq	r5, r1
    4f18:	009e3c02 	addseq	r3, lr, r2, lsl #24
    4f1c:	a7060000 	strge	r0, [r6, -r0]
    4f20:	00000021 	andeq	r0, r0, r1, lsr #32
    4f24:	00043906 	andeq	r3, r4, r6, lsl #18
    4f28:	08000100 	stmdaeq	r0, {r8}
    4f2c:	0000268c 	andeq	r2, r0, ip, lsl #13
    4f30:	00893c02 	addeq	r3, r9, r2, lsl #24
    4f34:	01050000 	tsteq	r5, r0
    4f38:	00be3f02 	adcseq	r3, lr, r2, lsl #30
    4f3c:	d1060000 	tstle	r6, r0
    4f40:	00000004 	andeq	r0, r0, r4
    4f44:	00048d06 	andeq	r8, r4, r6, lsl #26
    4f48:	08000100 	stmdaeq	r0, {r8}
    4f4c:	0000252f 	andeq	r2, r0, pc, lsr #10
    4f50:	00a93f02 	adceq	r3, r9, r2, lsl #30
    4f54:	50090000 	andpl	r0, r9, r0
    4f58:	01e82503 	mvneq	r2, r3, lsl #10
    4f5c:	530a0000 	movwpl	r0, #40960	; 0xa000
    4f60:	26030052 	undefined
    4f64:	0000006f 	andeq	r0, r0, pc, rrx
    4f68:	0a002302 	beq	db78 <__Stack_Size+0xd778>
    4f6c:	00315243 	eorseq	r5, r1, r3, asr #4
    4f70:	006f2703 	rsbeq	r2, pc, r3, lsl #14
    4f74:	23020000 	movwcs	r0, #8192	; 0x2000
    4f78:	52430a04 	subpl	r0, r3, #16384	; 0x4000
    4f7c:	28030032 	stmdacs	r3, {r1, r4, r5}
    4f80:	0000006f 	andeq	r0, r0, pc, rrx
    4f84:	0b082302 	bleq	20db94 <__Stack_Size+0x20d794>
    4f88:	00002252 	andeq	r2, r0, r2, asr r2
    4f8c:	006f2903 	rsbeq	r2, pc, r3, lsl #18
    4f90:	23020000 	movwcs	r0, #8192	; 0x2000
    4f94:	22580b0c 	subscs	r0, r8, #12288	; 0x3000
    4f98:	2a030000 	bcs	c4fa0 <__Stack_Size+0xc4ba0>
    4f9c:	0000006f 	andeq	r0, r0, pc, rrx
    4fa0:	0b102302 	bleq	40dbb0 <__Stack_Size+0x40d7b0>
    4fa4:	000021c1 	andeq	r2, r0, r1, asr #3
    4fa8:	006f2b03 	rsbeq	r2, pc, r3, lsl #22
    4fac:	23020000 	movwcs	r0, #8192	; 0x2000
    4fb0:	21c70b14 	biccs	r0, r7, r4, lsl fp
    4fb4:	2c030000 	stccs	0, cr0, [r3], {0}
    4fb8:	0000006f 	andeq	r0, r0, pc, rrx
    4fbc:	0b182302 	bleq	60dbcc <__Stack_Size+0x60d7cc>
    4fc0:	000021e8 	andeq	r2, r0, r8, ror #3
    4fc4:	006f2d03 	rsbeq	r2, pc, r3, lsl #26
    4fc8:	23020000 	movwcs	r0, #8192	; 0x2000
    4fcc:	21f60b1c 	mvnscs	r0, ip, lsl fp
    4fd0:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    4fd4:	0000006f 	andeq	r0, r0, pc, rrx
    4fd8:	0a202302 	beq	80dbe8 <__Stack_Size+0x80d7e8>
    4fdc:	00525448 	subseq	r5, r2, r8, asr #8
    4fe0:	006f2f03 	rsbeq	r2, pc, r3, lsl #30
    4fe4:	23020000 	movwcs	r0, #8192	; 0x2000
    4fe8:	544c0a24 	strbpl	r0, [ip], #-2596
    4fec:	30030052 	andcc	r0, r3, r2, asr r0
    4ff0:	0000006f 	andeq	r0, r0, pc, rrx
    4ff4:	0b282302 	bleq	a0dc04 <__Stack_Size+0xa0d804>
    4ff8:	00002225 	andeq	r2, r0, r5, lsr #4
    4ffc:	006f3103 	rsbeq	r3, pc, r3, lsl #2
    5000:	23020000 	movwcs	r0, #8192	; 0x2000
    5004:	222a0b2c 	eorcs	r0, sl, #45056	; 0xb000
    5008:	32030000 	andcc	r0, r3, #0	; 0x0
    500c:	0000006f 	andeq	r0, r0, pc, rrx
    5010:	0b302302 	bleq	c0dc20 <__Stack_Size+0xc0d820>
    5014:	0000222f 	andeq	r2, r0, pc, lsr #4
    5018:	006f3303 	rsbeq	r3, pc, r3, lsl #6
    501c:	23020000 	movwcs	r0, #8192	; 0x2000
    5020:	21710b34 	cmncs	r1, r4, lsr fp
    5024:	34030000 	strcc	r0, [r3]
    5028:	0000006f 	andeq	r0, r0, pc, rrx
    502c:	0b382302 	bleq	e0dc3c <__Stack_Size+0xe0d83c>
    5030:	000021af 	andeq	r2, r0, pc, lsr #3
    5034:	006f3503 	rsbeq	r3, pc, r3, lsl #10
    5038:	23020000 	movwcs	r0, #8192	; 0x2000
    503c:	21330b3c 	teqcs	r3, ip, lsr fp
    5040:	36030000 	strcc	r0, [r3], -r0
    5044:	0000006f 	andeq	r0, r0, pc, rrx
    5048:	0b402302 	bleq	100dc58 <__Stack_Size+0x100d858>
    504c:	00002138 	andeq	r2, r0, r8, lsr r1
    5050:	006f3703 	rsbeq	r3, pc, r3, lsl #14
    5054:	23020000 	movwcs	r0, #8192	; 0x2000
    5058:	213d0b44 	teqcs	sp, r4, asr #22
    505c:	38030000 	stmdacc	r3, {}
    5060:	0000006f 	andeq	r0, r0, pc, rrx
    5064:	0a482302 	beq	120dc74 <__Stack_Size+0x120d874>
    5068:	03005244 	movweq	r5, #580	; 0x244
    506c:	00006f39 	andeq	r6, r0, r9, lsr pc
    5070:	4c230200 	sfmmi	f0, 4, [r3]
    5074:	07040c00 	streq	r0, [r4, -r0, lsl #24]
    5078:	4f031c0d 	svcmi	0x00031c0d
    507c:	00025e01 	andeq	r5, r2, r1, lsl #28
    5080:	52430e00 	subpl	r0, r3, #0	; 0x0
    5084:	5003004c 	andpl	r0, r3, ip, asr #32
    5088:	00006f01 	andeq	r6, r0, r1, lsl #30
    508c:	00230200 	eoreq	r0, r3, r0, lsl #4
    5090:	4852430e 	ldmdami	r2, {r1, r2, r3, r8, r9, lr}^
    5094:	01510300 	cmpeq	r1, r0, lsl #6
    5098:	0000006f 	andeq	r0, r0, pc, rrx
    509c:	0e042302 	cdpeq	3, 0, cr2, cr4, cr2, {0}
    50a0:	00524449 	subseq	r4, r2, r9, asr #8
    50a4:	6f015203 	svcvs	0x00015203
    50a8:	02000000 	andeq	r0, r0, #0	; 0x0
    50ac:	4f0e0823 	svcmi	0x000e0823
    50b0:	03005244 	movweq	r5, #580	; 0x244
    50b4:	006f0153 	rsbeq	r0, pc, r3, asr r1
    50b8:	23020000 	movwcs	r0, #8192	; 0x2000
    50bc:	21b40f0c 	undefined instruction 0x21b40f0c
    50c0:	54030000 	strpl	r0, [r3]
    50c4:	00006f01 	andeq	r6, r0, r1, lsl #30
    50c8:	10230200 	eorne	r0, r3, r0, lsl #4
    50cc:	5252420e 	subspl	r4, r2, #-536870912	; 0xe0000000
    50d0:	01550300 	cmpeq	r5, r0, lsl #6
    50d4:	0000006f 	andeq	r0, r0, pc, rrx
    50d8:	0f142302 	svceq	0x00142302
    50dc:	0000225e 	andeq	r2, r0, lr, asr r2
    50e0:	6f015603 	svcvs	0x00015603
    50e4:	02000000 	andeq	r0, r0, #0	; 0x0
    50e8:	05001823 	streq	r1, [r0, #-2083]
    50ec:	79230401 	stmdbvc	r3!, {r0, sl}
    50f0:	06000002 	streq	r0, [r0], -r2
    50f4:	0000253b 	andeq	r2, r0, fp, lsr r5
    50f8:	25550601 	ldrbcs	r0, [r5, #-1537]
    50fc:	06020000 	streq	r0, [r2], -r0
    5100:	000025b6 	strheq	r2, [r0], -r6
    5104:	7a080003 	bvc	205118 <__Stack_Size+0x204d18>
    5108:	04000026 	streq	r0, [r0], #-38
    510c:	00025e27 	andeq	r5, r2, r7, lsr #28
    5110:	04010500 	streq	r0, [r1], #-1280
    5114:	0002be2e 	andeq	fp, r2, lr, lsr #28
    5118:	26360600 	ldrtcs	r0, [r6], -r0, lsl #12
    511c:	06000000 	streq	r0, [r0], -r0
    5120:	000026e7 	andeq	r2, r0, r7, ror #13
    5124:	25a80604 	strcs	r0, [r8, #1540]!
    5128:	06280000 	strteq	r0, [r8], -r0
    512c:	00002613 	andeq	r2, r0, r3, lsl r6
    5130:	d80600c8 	stmdale	r6, {r3, r6, r7}
    5134:	14000024 	strne	r0, [r0], #-36
    5138:	0026ad06 	eoreq	sl, r6, r6, lsl #26
    513c:	fd061000 	stc2	0, cr1, [r6]
    5140:	1c000026 	stcne	0, cr0, [r0], {38}
    5144:	0024e906 	eoreq	lr, r4, r6, lsl #18
    5148:	08001800 	stmdaeq	r0, {fp, ip}
    514c:	0000246d 	andeq	r2, r0, sp, ror #8
    5150:	02843604 	addeq	r3, r4, #4194304	; 0x400000
    5154:	04090000 	streq	r0, [r9]
    5158:	02fc3f04 	rscseq	r3, ip, #16	; 0x10
    515c:	2f0b0000 	svccs	0x000b0000
    5160:	04000024 	streq	r0, [r0], #-36
    5164:	00004c40 	andeq	r4, r0, r0, asr #24
    5168:	00230200 	eoreq	r0, r3, r0, lsl #4
    516c:	0024aa0b 	eoreq	sl, r4, fp, lsl #20
    5170:	79410400 	stmdbvc	r1, {sl}^
    5174:	02000002 	andeq	r0, r0, #2	; 0x2
    5178:	0d0b0223 	sfmeq	f0, 4, [fp, #-140]
    517c:	04000027 	streq	r0, [r0], #-39
    5180:	0002be42 	andeq	fp, r2, r2, asr #28
    5184:	03230200 	teqeq	r3, #0	; 0x0
    5188:	25780800 	ldrbcs	r0, [r8, #-2048]!
    518c:	43040000 	movwmi	r0, #16384	; 0x4000
    5190:	000002c9 	andeq	r0, r0, r9, asr #5
    5194:	1b050409 	blne	1461c0 <__Stack_Size+0x145dc0>
    5198:	00000348 	andeq	r0, r0, r8, asr #6
    519c:	0025f10b 	eoreq	pc, r5, fp, lsl #2
    51a0:	5e1c0500 	cfmul32pl	mvfx0, mvfx12, mvfx0
    51a4:	02000000 	andeq	r0, r0, #0	; 0x0
    51a8:	580b0023 	stmdapl	fp, {r0, r1, r5}
    51ac:	05000026 	streq	r0, [r0, #-38]
    51b0:	00005e1d 	andeq	r5, r0, sp, lsl lr
    51b4:	01230200 	teqeq	r3, r0, lsl #4
    51b8:	0024bd0b 	eoreq	fp, r4, fp, lsl #26
    51bc:	5e1e0500 	cfmul32pl	mvfx0, mvfx14, mvfx0
    51c0:	02000000 	andeq	r0, r0, #0	; 0x0
    51c4:	4a0b0223 	bmi	2c5a58 <__Stack_Size+0x2c5658>
    51c8:	05000024 	streq	r0, [r0, #-36]
    51cc:	00009e1f 	andeq	r9, r0, pc, lsl lr
    51d0:	03230200 	teqeq	r3, #0	; 0x0
    51d4:	269c0800 	ldrcs	r0, [ip], r0, lsl #16
    51d8:	20050000 	andcs	r0, r5, r0
    51dc:	00000307 	andeq	r0, r0, r7, lsl #6
    51e0:	1b061409 	blne	18a20c <__Stack_Size+0x189e0c>
    51e4:	000003b0 	strheq	r0, [r0], -r0
    51e8:	00254c0b 	eoreq	r4, r5, fp, lsl #24
    51ec:	3a1c0600 	bcc	7069f4 <__Stack_Size+0x7065f4>
    51f0:	02000000 	andeq	r0, r0, #0	; 0x0
    51f4:	990b0023 	stmdbls	fp, {r0, r1, r5}
    51f8:	06000024 	streq	r0, [r0], -r4, lsr #32
    51fc:	00009e1d 	andeq	r9, r0, sp, lsl lr
    5200:	04230200 	strteq	r0, [r3], #-512
    5204:	0025da0b 	eoreq	sp, r5, fp, lsl #20
    5208:	9e1e0600 	cfmsub32ls	mvax0, mvfx0, mvfx14, mvfx0
    520c:	02000000 	andeq	r0, r0, #0	; 0x0
    5210:	210b0523 	tstcs	fp, r3, lsr #10
    5214:	06000026 	streq	r0, [r0], -r6, lsr #32
    5218:	00003a1f 	andeq	r3, r0, pc, lsl sl
    521c:	08230200 	stmdaeq	r3!, {r9}
    5220:	00259a0b 	eoreq	r9, r5, fp, lsl #20
    5224:	3a200600 	bcc	806a2c <__Stack_Size+0x80662c>
    5228:	02000000 	andeq	r0, r0, #0	; 0x0
    522c:	890b0c23 	stmdbhi	fp, {r0, r1, r5, sl, fp}
    5230:	06000025 	streq	r0, [r0], -r5, lsr #32
    5234:	00005e21 	andeq	r5, r0, r1, lsr #28
    5238:	10230200 	eorne	r0, r3, r0, lsl #4
    523c:	245d0800 	ldrbcs	r0, [sp], #-2048
    5240:	22060000 	andcs	r0, r6, #0	; 0x0
    5244:	00000353 	andeq	r0, r0, r3, asr r3
    5248:	26440110 	undefined
    524c:	4f010000 	svcmi	0x00010000
    5250:	0048d001 	subeq	sp, r8, r1
    5254:	00491008 	subeq	r1, r9, r8
    5258:	00227608 	eoreq	r7, r2, r8, lsl #12
    525c:	0003e100 	andeq	lr, r3, r0, lsl #2
    5260:	1df41100 	ldfnee	f1, [r4]
    5264:	50010000 	andpl	r0, r1, r0
    5268:	00004c01 	andeq	r4, r0, r1, lsl #24
    526c:	01120000 	tsteq	r2, r0
    5270:	000026d1 	ldrdeq	r2, [r0], -r1
    5274:	01013601 	tsteq	r1, r1, lsl #12
    5278:	08004910 	stmdaeq	r0, {r4, r8, fp, lr}
    527c:	08004934 	stmdaeq	r0, {r2, r4, r5, r8, fp, lr}
    5280:	000022a1 	andeq	r2, r0, r1, lsr #5
    5284:	26010113 	undefined
    5288:	f1010000 	setend	le
    528c:	00493401 	subeq	r3, r9, r1, lsl #8
    5290:	004a1c08 	subeq	r1, sl, r8, lsl #24
    5294:	0022cc08 	eoreq	ip, r2, r8, lsl #24
    5298:	00041f00 	andeq	r1, r4, r0, lsl #30
    529c:	24381400 	ldrtcs	r1, [r8], #-1024
    52a0:	f2010000 	vhadd.s8	d0, d1, d0
    52a4:	000003b0 	strheq	r0, [r0], -r0
    52a8:	005c9102 	subseq	r9, ip, r2, lsl #2
    52ac:	25650113 	strbcs	r0, [r5, #-275]!
    52b0:	95010000 	strls	r0, [r1]
    52b4:	004a1c01 	subeq	r1, sl, r1, lsl #24
    52b8:	004bf408 	subeq	pc, fp, r8, lsl #8
    52bc:	0022f708 	eoreq	pc, r2, r8, lsl #14
    52c0:	00044700 	andeq	r4, r4, r0, lsl #14
    52c4:	26be1400 	ldrtcs	r1, [lr], r0, lsl #8
    52c8:	96010000 	strls	r0, [r1], -r0
    52cc:	000002fc 	strdeq	r0, [r0], -ip
    52d0:	00649102 	rsbeq	r9, r4, r2, lsl #2
    52d4:	250a0113 	strcs	r0, [sl, #-275]
    52d8:	6f010000 	svcvs	0x00010000
    52dc:	004bf401 	subeq	pc, fp, r1, lsl #8
    52e0:	004c6208 	subeq	r6, ip, r8, lsl #4
    52e4:	00232208 	eoreq	r2, r3, r8, lsl #4
    52e8:	00046f00 	andeq	r6, r4, r0, lsl #30
    52ec:	25c71400 	strbcs	r1, [r7, #1024]
    52f0:	70010000 	andvc	r0, r1, r0
    52f4:	00000348 	andeq	r0, r0, r8, asr #6
    52f8:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    52fc:	251d0113 	ldrcs	r0, [sp, #-275]
    5300:	2a010000 	bcs	45308 <__Stack_Size+0x44f08>
    5304:	004c6401 	subeq	r6, ip, r1, lsl #8
    5308:	004cf808 	subeq	pc, ip, r8, lsl #16
    530c:	00234d08 	eoreq	r4, r3, r8, lsl #26
    5310:	00049400 	andeq	r9, r4, r0, lsl #8
    5314:	24f91500 	ldrbtcs	r1, [r9], #1280
    5318:	2b010000 	blcs	45320 <__Stack_Size+0x44f20>
    531c:	000000be 	strheq	r0, [r0], -lr
    5320:	b5011600 	strlt	r1, [r1, #-1536]
    5324:	01000024 	tsteq	r0, r4, lsr #32
    5328:	004cf811 	subeq	pc, ip, r1, lsl r8
    532c:	004d2408 	subeq	r2, sp, r8, lsl #8
    5330:	00237808 	eoreq	r7, r3, r8, lsl #16
    5334:	05341400 	ldreq	r1, [r4, #-1024]!
    5338:	2a070000 	bcs	1c5340 <__Stack_Size+0x1c4f40>
    533c:	000004b9 	strheq	r0, [r0], -r9
    5340:	060c0305 	streq	r0, [ip], -r5, lsl #6
    5344:	5e042000 	cdppl	0, 0, cr2, cr4, cr0, {0}
    5348:	15000000 	strne	r0, [r0]
    534c:	00000265 	andeq	r0, r0, r5, ror #4
    5350:	04c92807 	strbeq	r2, [r9], #2055
    5354:	4c040000 	stcmi	0, cr0, [r4], {0}
    5358:	15000000 	strne	r0, [r0]
    535c:	000003f6 	strdeq	r0, [r0], -r6
    5360:	04c92807 	strbeq	r2, [r9], #2055
    5364:	5e170000 	wxorpl	wr0, wr7, wr0
    5368:	ea000000 	b	5370 <__Stack_Size+0x4f70>
    536c:	18000004 	stmdane	r0, {r2}
    5370:	000001e8 	andeq	r0, r0, r8, ror #3
    5374:	150003ff 	strne	r0, [r0, #-1023]
    5378:	0000047a 	andeq	r0, r0, sl, ror r4
    537c:	04f52907 	ldrbteq	r2, [r5], #2311
    5380:	d9040000 	stmdble	r4, {}
    5384:	19000004 	stmdbne	r0, {r2}
    5388:	00000615 	andeq	r0, r0, r5, lsl r6
    538c:	04b94407 	ldrteq	r4, [r9], #1031
    5390:	19000000 	stmdbne	r0, {}
    5394:	00000393 	muleq	r0, r3, r3
    5398:	04b94407 	ldrteq	r4, [r9], #1031
    539c:	17000000 	strne	r0, [r0, -r0]
    53a0:	0000005e 	andeq	r0, r0, lr, asr r0
    53a4:	00000522 	andeq	r0, r0, r2, lsr #10
    53a8:	0001e81a 	andeq	lr, r1, sl, lsl r8
    53ac:	15004000 	strne	r4, [r0]
    53b0:	000000ec 	andeq	r0, r0, ip, ror #1
    53b4:	052d4507 	streq	r4, [sp, #-1287]!
    53b8:	12040000 	andne	r0, r4, #0	; 0x0
    53bc:	19000005 	stmdbne	r0, {r0, r2}
    53c0:	000005e4 	andeq	r0, r0, r4, ror #11
    53c4:	04c95807 	strbeq	r5, [r9], #2055
    53c8:	19000000 	stmdbne	r0, {}
    53cc:	000000f9 	strdeq	r0, [r0], -r9
    53d0:	04c95807 	strbeq	r5, [r9], #2055
    53d4:	15000000 	strne	r0, [r0]
    53d8:	000002b2 	strheq	r0, [r0], -r2
    53dc:	05555907 	ldrbeq	r5, [r5, #-2311]
    53e0:	d9040000 	stmdble	r4, {}
    53e4:	1b000004 	blne	53fc <__Stack_Size+0x4ffc>
    53e8:	00000699 	muleq	r0, r9, r6
    53ec:	003a1407 	eorseq	r1, sl, r7, lsl #8
    53f0:	01010000 	tsteq	r1, r0
    53f4:	0000051b 	andeq	r0, r0, fp, lsl r5
    53f8:	3a170700 	bcc	5c7000 <__Stack_Size+0x5c6c00>
    53fc:	01000000 	tsteq	r0, r0
    5400:	00561b01 	subseq	r1, r6, r1, lsl #22
    5404:	1a070000 	bne	1c540c <__Stack_Size+0x1c500c>
    5408:	0000003a 	andeq	r0, r0, sl, lsr r0
    540c:	201b0101 	andscs	r0, fp, r1, lsl #2
    5410:	08000024 	stmdaeq	r0, {r2, r5}
    5414:	0004b920 	andeq	fp, r4, r0, lsr #18
    5418:	00010100 	andeq	r0, r1, r0, lsl #2
    541c:	000007e9 	andeq	r0, r0, r9, ror #15
    5420:	15b40002 	ldrne	r0, [r4, #2]!
    5424:	01040000 	tsteq	r4, r0
    5428:	000001c6 	andeq	r0, r0, r6, asr #3
    542c:	0028d901 	eoreq	sp, r8, r1, lsl #18
    5430:	00039d00 	andeq	r9, r3, r0, lsl #26
    5434:	004d2400 	subeq	r2, sp, r0, lsl #8
    5438:	00530808 	subseq	r0, r3, r8, lsl #16
    543c:	00168c08 	andseq	r8, r6, r8, lsl #24
    5440:	05040200 	streq	r0, [r4, #-512]
    5444:	00004178 	andeq	r4, r0, r8, ror r1
    5448:	95050202 	strls	r0, [r5, #-514]
    544c:	02000004 	andeq	r0, r0, #4	; 0x4
    5450:	04690601 	strbteq	r0, [r9], #-1537
    5454:	75030000 	strvc	r0, [r3]
    5458:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    545c:	00004527 	andeq	r4, r0, r7, lsr #10
    5460:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5464:	000041f2 	strdeq	r4, [r0], -r2
    5468:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    546c:	57280200 	strpl	r0, [r8, -r0, lsl #4]!
    5470:	02000000 	andeq	r0, r0, #0	; 0x0
    5474:	02220702 	eoreq	r0, r2, #524288	; 0x80000
    5478:	75030000 	strvc	r0, [r3]
    547c:	29020038 	stmdbcs	r2, {r3, r4, r5}
    5480:	00000068 	andeq	r0, r0, r8, rrx
    5484:	67080102 	strvs	r0, [r8, -r2, lsl #2]
    5488:	04000004 	streq	r0, [r0], #-4
    548c:	00000045 	andeq	r0, r0, r5, asr #32
    5490:	00005704 	andeq	r5, r0, r4, lsl #14
    5494:	02010500 	andeq	r0, r1, #0	; 0x0
    5498:	00008e3a 	andeq	r8, r0, sl, lsr lr
    549c:	0ebd0600 	cdpeq	6, 11, cr0, cr13, cr0, {0}
    54a0:	07000000 	streq	r0, [r0, -r0]
    54a4:	00544553 	subseq	r4, r4, r3, asr r5
    54a8:	01050001 	tsteq	r5, r1
    54ac:	00a33c02 	adceq	r3, r3, r2, lsl #24
    54b0:	a7060000 	strge	r0, [r6, -r0]
    54b4:	00000021 	andeq	r0, r0, r1, lsr #32
    54b8:	00043906 	andeq	r3, r4, r6, lsl #18
    54bc:	08000100 	stmdaeq	r0, {r8}
    54c0:	1c090704 	stcne	7, cr0, [r9], {4}
    54c4:	19014f03 	stmdbne	r1, {r0, r1, r8, r9, sl, fp, lr}
    54c8:	0a000001 	beq	54d4 <__Stack_Size+0x50d4>
    54cc:	004c5243 	subeq	r5, ip, r3, asr #4
    54d0:	6f015003 	svcvs	0x00015003
    54d4:	02000000 	andeq	r0, r0, #0	; 0x0
    54d8:	430a0023 	movwmi	r0, #40995	; 0xa023
    54dc:	03004852 	movweq	r4, #2130	; 0x852
    54e0:	006f0151 	rsbeq	r0, pc, r1, asr r1
    54e4:	23020000 	movwcs	r0, #8192	; 0x2000
    54e8:	44490a04 	strbmi	r0, [r9], #-2564
    54ec:	52030052 	andpl	r0, r3, #82	; 0x52
    54f0:	00006f01 	andeq	r6, r0, r1, lsl #30
    54f4:	08230200 	stmdaeq	r3!, {r9}
    54f8:	52444f0a 	subpl	r4, r4, #40	; 0x28
    54fc:	01530300 	cmpeq	r3, r0, lsl #6
    5500:	0000006f 	andeq	r0, r0, pc, rrx
    5504:	0b0c2302 	bleq	30e114 <__Stack_Size+0x30dd14>
    5508:	000021b4 	strheq	r2, [r0], -r4
    550c:	6f015403 	svcvs	0x00015403
    5510:	02000000 	andeq	r0, r0, #0	; 0x0
    5514:	420a1023 	andmi	r1, sl, #35	; 0x23
    5518:	03005252 	movweq	r5, #594	; 0x252
    551c:	006f0155 	rsbeq	r0, pc, r5, asr r1
    5520:	23020000 	movwcs	r0, #8192	; 0x2000
    5524:	225e0b14 	subscs	r0, lr, #20480	; 0x5000
    5528:	56030000 	strpl	r0, [r3], -r0
    552c:	00006f01 	andeq	r6, r0, r1, lsl #30
    5530:	18230200 	stmdane	r3!, {r9}
    5534:	031c0900 	tsteq	ip, #0	; 0x0
    5538:	01f30239 	mvnseq	r0, r9, lsr r2
    553c:	530a0000 	movwpl	r0, #40960	; 0xa000
    5540:	3a030052 	bcc	c5690 <__Stack_Size+0xc5290>
    5544:	00007402 	andeq	r7, r0, r2, lsl #8
    5548:	00230200 	eoreq	r0, r3, r0, lsl #4
    554c:	0028ee0b 	eoreq	lr, r8, fp, lsl #28
    5550:	023b0300 	eorseq	r0, fp, #0	; 0x0
    5554:	0000004c 	andeq	r0, r0, ip, asr #32
    5558:	0a022302 	beq	8e168 <__Stack_Size+0x8dd68>
    555c:	03005244 	movweq	r5, #580	; 0x244
    5560:	0074023c 	rsbseq	r0, r4, ip, lsr r2
    5564:	23020000 	movwcs	r0, #8192	; 0x2000
    5568:	27ae0b04 	strcs	r0, [lr, r4, lsl #22]!
    556c:	3d030000 	stccc	0, cr0, [r3]
    5570:	00004c02 	andeq	r4, r0, r2, lsl #24
    5574:	06230200 	strteq	r0, [r3], -r0, lsl #4
    5578:	5252420a 	subspl	r4, r2, #-1610612736	; 0xa0000000
    557c:	023e0300 	eorseq	r0, lr, #0	; 0x0
    5580:	00000074 	andeq	r0, r0, r4, ror r0
    5584:	0b082302 	bleq	20e194 <__Stack_Size+0x20dd94>
    5588:	000028f8 	strdeq	r2, [r0], -r8
    558c:	4c023f03 	stcmi	15, cr3, [r2], {3}
    5590:	02000000 	andeq	r0, r0, #0	; 0x0
    5594:	430a0a23 	movwmi	r0, #43555	; 0xaa23
    5598:	03003152 	movweq	r3, #338	; 0x152
    559c:	00740240 	rsbseq	r0, r4, r0, asr #4
    55a0:	23020000 	movwcs	r0, #8192	; 0x2000
    55a4:	29020b0c 	stmdbcs	r2, {r2, r3, r8, r9, fp}
    55a8:	41030000 	tstmi	r3, r0
    55ac:	00004c02 	andeq	r4, r0, r2, lsl #24
    55b0:	0e230200 	cdpeq	2, 2, cr0, cr3, cr0, {0}
    55b4:	3252430a 	subscc	r4, r2, #671088640	; 0x28000000
    55b8:	02420300 	subeq	r0, r2, #0	; 0x0
    55bc:	00000074 	andeq	r0, r0, r4, ror r0
    55c0:	0b102302 	bleq	40e1d0 <__Stack_Size+0x40ddd0>
    55c4:	0000290c 	andeq	r2, r0, ip, lsl #18
    55c8:	4c024303 	stcmi	3, cr4, [r2], {3}
    55cc:	02000000 	andeq	r0, r0, #0	; 0x0
    55d0:	430a1223 	movwmi	r1, #41507	; 0xa223
    55d4:	03003352 	movweq	r3, #850	; 0x352
    55d8:	00740244 	rsbseq	r0, r4, r4, asr #4
    55dc:	23020000 	movwcs	r0, #8192	; 0x2000
    55e0:	29160b14 	ldmdbcs	r6, {r2, r4, r8, r9, fp}
    55e4:	45030000 	strmi	r0, [r3]
    55e8:	00004c02 	andeq	r4, r0, r2, lsl #24
    55ec:	16230200 	strtne	r0, [r3], -r0, lsl #4
    55f0:	0028720b 	eoreq	r7, r8, fp, lsl #4
    55f4:	02460300 	subeq	r0, r6, #0	; 0x0
    55f8:	00000074 	andeq	r0, r0, r4, ror r0
    55fc:	0b182302 	bleq	60e20c <__Stack_Size+0x60de0c>
    5600:	00002920 	andeq	r2, r0, r0, lsr #18
    5604:	4c024703 	stcmi	7, cr4, [r2], {3}
    5608:	02000000 	andeq	r0, r0, #0	; 0x0
    560c:	0c001a23 	stceq	10, cr1, [r0], {35}
    5610:	501b0410 	andspl	r0, fp, r0, lsl r4
    5614:	0d000002 	stceq	0, cr0, [r0, #-8]
    5618:	000027f6 	strdeq	r2, [r0], -r6
    561c:	003a1c04 	eorseq	r1, sl, r4, lsl #24
    5620:	23020000 	movwcs	r0, #8192	; 0x2000
    5624:	27d50d00 	ldrbcs	r0, [r5, r0, lsl #26]
    5628:	1d040000 	stcne	0, cr0, [r4]
    562c:	0000004c 	andeq	r0, r0, ip, asr #32
    5630:	0d042302 	stceq	3, cr2, [r4, #-8]
    5634:	00002792 	muleq	r0, r2, r7
    5638:	004c1e04 	subeq	r1, ip, r4, lsl #28
    563c:	23020000 	movwcs	r0, #8192	; 0x2000
    5640:	28650d06 	stmdacs	r5!, {r1, r2, r8, sl, fp}^
    5644:	1f040000 	svcne	0x00040000
    5648:	0000004c 	andeq	r0, r0, ip, asr #32
    564c:	0d082302 	stceq	3, cr2, [r8, #-8]
    5650:	000028ce 	andeq	r2, r0, lr, asr #17
    5654:	004c2004 	subeq	r2, ip, r4
    5658:	23020000 	movwcs	r0, #8192	; 0x2000
    565c:	28b40d0a 	ldmcs	r4!, {r1, r3, r8, sl, fp}
    5660:	21040000 	tstcs	r4, r0
    5664:	0000004c 	andeq	r0, r0, ip, asr #32
    5668:	000c2302 	andeq	r2, ip, r2, lsl #6
    566c:	0029690e 	eoreq	r6, r9, lr, lsl #18
    5670:	f3220400 	vshl.u32	d0, d0, d2
    5674:	0f000001 	svceq	0x00000001
    5678:	000004f4 	strdeq	r0, [r0], -r4
    567c:	920d0701 	andls	r0, sp, #262144	; 0x40000
    5680:	06000002 	streq	r0, [r0], -r2
    5684:	00000371 	andeq	r0, r0, r1, ror r3
    5688:	14860600 	strne	r0, [r6], #1536
    568c:	06010000 	streq	r0, [r1], -r0
    5690:	00000063 	andeq	r0, r0, r3, rrx
    5694:	04750602 	ldrbteq	r0, [r5], #-1538
    5698:	07030000 	streq	r0, [r3, -r0]
    569c:	00445854 	subeq	r5, r4, r4, asr r8
    56a0:	58520704 	ldmdapl	r2, {r2, r8, r9, sl}^
    56a4:	07050044 	streq	r0, [r5, -r4, asr #32]
    56a8:	00585541 	subseq	r5, r8, r1, asr #10
    56ac:	01100006 	tsteq	r0, r6
    56b0:	0000292a 	andeq	r2, r0, sl, lsr #18
    56b4:	01019d01 	tsteq	r1, r1, lsl #26
    56b8:	27e60111 	undefined
    56bc:	46010000 	strmi	r0, [r1], -r0
    56c0:	00005e01 	andeq	r5, r0, r1, lsl #28
    56c4:	004d2400 	subeq	r2, sp, r0, lsl #8
    56c8:	004d3808 	subeq	r3, sp, r8, lsl #16
    56cc:	125d0108 	subsne	r0, sp, #2	; 0x2
    56d0:	00281401 	eoreq	r1, r8, r1, lsl #8
    56d4:	015a0100 	cmpeq	sl, r0, lsl #2
    56d8:	0000005e 	andeq	r0, r0, lr, asr r0
    56dc:	08004d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, lr}
    56e0:	08004d74 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, fp, lr}
    56e4:	02de5d01 	sbcseq	r5, lr, #64	; 0x40
    56e8:	f8130000 	undefined instruction 0xf8130000
    56ec:	01000045 	tsteq	r0, r5, asr #32
    56f0:	00005e5e 	andeq	r5, r0, lr, asr lr
    56f4:	0023a300 	eoreq	sl, r3, r0, lsl #6
    56f8:	01120000 	tsteq	r2, r0
    56fc:	000027b8 	strheq	r2, [r0], -r8
    5700:	5e016801 	cdppl	8, 0, cr6, cr1, cr1, {0}
    5704:	74000000 	strvc	r0, [r0]
    5708:	9c08004d 	stcls	0, cr0, [r8], {77}
    570c:	0108004d 	tsteq	r8, sp, asr #32
    5710:	0003095d 	andeq	r0, r3, sp, asr r9
    5714:	45f81300 	ldrbmi	r1, [r8, #768]!
    5718:	6c010000 	stcvs	0, cr0, [r1], {0}
    571c:	0000005e 	andeq	r0, r0, lr, asr r0
    5720:	000023c1 	andeq	r2, r0, r1, asr #7
    5724:	02921400 	addseq	r1, r2, #0	; 0x0
    5728:	4d9c0000 	ldcmi	0, cr0, [ip]
    572c:	4db40800 	ldcmi	8, cr0, [r4]
    5730:	5d010800 	stcpl	8, cr0, [r1]
    5734:	28050112 	stmdacs	r5, {r1, r4, r8}
    5738:	a4010000 	strge	r0, [r1]
    573c:	00005e01 	andeq	r5, r0, r1, lsl #28
    5740:	004db400 	subeq	fp, sp, r0, lsl #8
    5744:	004dfc08 	subeq	pc, sp, r8, lsl #24
    5748:	435d0108 	cmpmi	sp, #2	; 0x2
    574c:	15000003 	strne	r0, [r0, #-3]
    5750:	00000292 	muleq	r0, r2, r2
    5754:	08004dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, lr}
    5758:	08004dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp, lr}
    575c:	1600a701 	strne	sl, [r0], -r1, lsl #14
    5760:	00295e01 	eoreq	r5, r9, r1, lsl #28
    5764:	01830100 	orreq	r0, r3, r0, lsl #2
    5768:	00005e01 	andeq	r5, r0, r1, lsl #28
    576c:	004dfc00 	subeq	pc, sp, r0, lsl #24
    5770:	004e5008 	subeq	r5, lr, r8
    5774:	0023df08 	eoreq	sp, r3, r8, lsl #30
    5778:	00039000 	andeq	r9, r3, r0
    577c:	276a1700 	strbcs	r1, [sl, -r0, lsl #14]!
    5780:	82010000 	andhi	r0, r1, #0	; 0x0
    5784:	00039001 	andeq	r9, r3, r1
    5788:	00240a00 	eoreq	r0, r4, r0, lsl #20
    578c:	289d1700 	ldmcs	sp, {r8, r9, sl, ip}
    5790:	82010000 	andhi	r0, r1, #0	; 0x0
    5794:	00005e01 	andeq	r5, r0, r1, lsl #28
    5798:	00242800 	eoreq	r2, r4, r0, lsl #16
    579c:	00691800 	rsbeq	r1, r9, r0, lsl #16
    57a0:	5e018401 	cdppl	4, 0, cr8, cr1, cr1, {0}
    57a4:	46000000 	strmi	r0, [r0], -r0
    57a8:	00000024 	andeq	r0, r0, r4, lsr #32
    57ac:	005e0419 	subseq	r0, lr, r9, lsl r4
    57b0:	011a0000 	tsteq	sl, r0
    57b4:	00002877 	andeq	r2, r0, r7, ror r8
    57b8:	0101e701 	tsteq	r1, r1, lsl #14
    57bc:	08004e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, lr}
    57c0:	08004e7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, fp, lr}
    57c4:	03b95d01 	undefined instruction 0x03b95d01
    57c8:	691b0000 	ldmdbvs	fp, {}
    57cc:	01e90100 	mvneq	r0, r0, lsl #2
    57d0:	0000004c 	andeq	r0, r0, ip, asr #32
    57d4:	92011600 	andls	r1, r1, #0	; 0x0
    57d8:	01000028 	tsteq	r0, r8, lsr #32
    57dc:	5e010207 	cdppl	2, 0, cr0, cr1, cr7, {0}
    57e0:	7c000000 	stcvc	0, cr0, [r0], {0}
    57e4:	d808004e 	stmdale	r8, {r1, r2, r3, r6}
    57e8:	5908004e 	stmdbpl	r8, {r1, r2, r3, r6}
    57ec:	06000024 	streq	r0, [r0], -r4, lsr #32
    57f0:	17000004 	strne	r0, [r0, -r4]
    57f4:	0000276a 	andeq	r2, r0, sl, ror #14
    57f8:	90020701 	andls	r0, r2, r1, lsl #14
    57fc:	84000003 	strhi	r0, [r0], #-3
    5800:	17000024 	strne	r0, [r0, -r4, lsr #32]
    5804:	0000289d 	muleq	r0, sp, r8
    5808:	5e020701 	cdppl	7, 0, cr0, cr2, cr1, {0}
    580c:	a2000000 	andge	r0, r0, #0	; 0x0
    5810:	18000024 	stmdane	r0, {r2, r5}
    5814:	08010069 	stmdaeq	r1, {r0, r3, r5, r6}
    5818:	00005e02 	andeq	r5, r0, r2, lsl #28
    581c:	0024c000 	eoreq	ip, r4, r0
    5820:	011c0000 	tsteq	ip, r0
    5824:	0000293a 	andeq	r2, r0, sl, lsr r9
    5828:	01021b01 	tsteq	r2, r1, lsl #22
    582c:	0000005e 	andeq	r0, r0, lr, asr r0
    5830:	08004ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, lr}
    5834:	08004eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp, lr}
    5838:	011d5d01 	tsteq	sp, r1, lsl #26
    583c:	0000272b 	andeq	r2, r0, fp, lsr #14
    5840:	01022301 	tsteq	r2, r1, lsl #6
    5844:	08004eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp, lr}
    5848:	08004f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp, lr}
    584c:	000024d3 	ldrdeq	r2, [r0], -r3
    5850:	00000447 	andeq	r0, r0, r7, asr #8
    5854:	0019631e 	andseq	r6, r9, lr, lsl r3
    5858:	02240100 	eoreq	r0, r4, #0	; 0x0
    585c:	0000005e 	andeq	r0, r0, lr, asr r0
    5860:	1d005001 	stcne	0, cr5, [r0, #-4]
    5864:	00294a01 	eoreq	r4, r9, r1, lsl #20
    5868:	02160100 	andseq	r0, r6, #0	; 0x0
    586c:	004f6401 	subeq	r6, pc, r1, lsl #8
    5870:	004f7608 	subeq	r7, pc, r8, lsl #12
    5874:	0024fe08 	eoreq	pc, r4, r8, lsl #28
    5878:	00047200 	andeq	r7, r4, r0, lsl #4
    587c:	283b1700 	ldmdacs	fp!, {r8, r9, sl, ip}
    5880:	16010000 	strne	r0, [r1], -r0
    5884:	00005e02 	andeq	r5, r0, r2, lsl #28
    5888:	00252900 	eoreq	r2, r5, r0, lsl #18
    588c:	01160000 	tsteq	r6, r0
    5890:	00002751 	andeq	r2, r0, r1, asr r7
    5894:	0101f101 	tstpeq	r1, r1, lsl #2
    5898:	0000005e 	andeq	r0, r0, lr, asr r0
    589c:	08004f78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, fp, lr}
    58a0:	08004fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, lr}
    58a4:	0000253c 	andeq	r2, r0, ip, lsr r5
    58a8:	000004bb 	strheq	r0, [r0], -fp
    58ac:	00276a17 	eoreq	r6, r7, r7, lsl sl
    58b0:	01f10100 	mvnseq	r0, r0, lsl #2
    58b4:	00000390 	muleq	r0, r0, r3
    58b8:	0000255b 	andeq	r2, r0, fp, asr r5
    58bc:	00289d17 	eoreq	r9, r8, r7, lsl sp
    58c0:	01f10100 	mvnseq	r0, r0, lsl #2
    58c4:	0000005e 	andeq	r0, r0, lr, asr r0
    58c8:	00002579 	andeq	r2, r0, r9, ror r5
    58cc:	0100691b 	tsteq	r0, fp, lsl r9
    58d0:	005e01f2 	ldrsheq	r0, [lr], #-18
    58d4:	1f000000 	svcne	0x00000000
    58d8:	00275c01 	eoreq	r5, r7, r1, lsl #24
    58dc:	01e10100 	mvneq	r0, r0, lsl #2
    58e0:	004fcc01 	subeq	ip, pc, r1, lsl #24
    58e4:	004fe008 	subeq	lr, pc, r8
    58e8:	00259708 	eoreq	r9, r5, r8, lsl #14
    58ec:	22011f00 	andcs	r1, r1, #0	; 0x0
    58f0:	01000028 	tsteq	r0, r8, lsr #32
    58f4:	e0010168 	and	r0, r1, r8, ror #2
    58f8:	0408004f 	streq	r0, [r8], #-79
    58fc:	c2080050 	andgt	r0, r8, #80	; 0x50
    5900:	20000025 	andcs	r0, r0, r5, lsr #32
    5904:	0027c701 	eoreq	ip, r7, r1, lsl #14
    5908:	01380100 	teqeq	r8, r0, lsl #2
    590c:	08005004 	stmdaeq	r0, {r2, ip, lr}
    5910:	08005018 	stmdaeq	r0, {r3, r4, ip, lr}
    5914:	000025ed 	andeq	r2, r0, sp, ror #11
    5918:	28850116 	stmcs	r5, {r1, r2, r4, r8}
    591c:	c5010000 	strgt	r0, [r1]
    5920:	005e0101 	subseq	r0, lr, r1, lsl #2
    5924:	50180000 	andspl	r0, r8, r0
    5928:	50780800 	rsbspl	r0, r8, r0, lsl #16
    592c:	26180800 	ldrcs	r0, [r8], -r0, lsl #16
    5930:	053a0000 	ldreq	r0, [sl]!
    5934:	f6170000 	undefined instruction 0xf6170000
    5938:	0100001b 	tsteq	r0, fp, lsl r0
    593c:	003a01c5 	eorseq	r0, sl, r5, asr #3
    5940:	26430000 	strbcs	r0, [r3], -r0
    5944:	171e0000 	ldrne	r0, [lr, -r0]
    5948:	01000027 	tsteq	r0, r7, lsr #32
    594c:	025001c6 	subseq	r0, r0, #-2147483599	; 0x80000031
    5950:	91020000 	tstls	r2, r0
    5954:	01160060 	tsteq	r6, r0, rrx
    5958:	00002858 	andeq	r2, r0, r8, asr r8
    595c:	01014801 	tsteq	r1, r1, lsl #16
    5960:	0000005e 	andeq	r0, r0, lr, asr r0
    5964:	08005078 	stmdaeq	r0, {r3, r4, r5, r6, ip, lr}
    5968:	080050e8 	stmdaeq	r0, {r3, r5, r6, r7, ip, lr}
    596c:	00002661 	andeq	r2, r0, r1, ror #12
    5970:	00000578 	andeq	r0, r0, r8, ror r5
    5974:	001bf617 	andseq	pc, fp, r7, lsl r6
    5978:	01470100 	cmpeq	r7, r0, lsl #2
    597c:	0000003a 	andeq	r0, r0, sl, lsr r0
    5980:	0000268c 	andeq	r2, r0, ip, lsl #13
    5984:	0027171e 	eoreq	r1, r7, lr, lsl r7
    5988:	01490100 	cmpeq	r9, r0, lsl #2
    598c:	00000250 	andeq	r0, r0, r0, asr r2
    5990:	00609102 	rsbeq	r9, r0, r2, lsl #2
    5994:	28a70121 	stmiacs	r7!, {r0, r5, r8}
    5998:	1a010000 	bne	459a0 <__Stack_Size+0x455a0>
    599c:	00005e01 	andeq	r5, r0, r1, lsl #28
    59a0:	0050e800 	subseq	lr, r0, r0, lsl #16
    59a4:	00514808 	subseq	r4, r1, r8, lsl #16
    59a8:	0026aa08 	eoreq	sl, r6, r8, lsl #20
    59ac:	0005b300 	andeq	fp, r5, r0, lsl #6
    59b0:	1bf62200 	blne	ffd8e1b8 <SCS_BASE+0x1fd801b8>
    59b4:	19010000 	stmdbne	r1, {}
    59b8:	0000003a 	andeq	r0, r0, sl, lsr r0
    59bc:	000026d5 	ldrdeq	r2, [r0], -r5
    59c0:	00271723 	eoreq	r1, r7, r3, lsr #14
    59c4:	501b0100 	andspl	r0, fp, r0, lsl #2
    59c8:	02000002 	andeq	r0, r0, #2	; 0x2
    59cc:	1d006091 	stcne	0, cr6, [r0, #-580]
    59d0:	00284601 	eoreq	r4, r8, r1, lsl #12
    59d4:	01960100 	orrseq	r0, r6, r0, lsl #2
    59d8:	00514801 	subseq	r4, r1, r1, lsl #16
    59dc:	0051d808 	subseq	sp, r1, r8, lsl #16
    59e0:	0026f308 	eoreq	pc, r6, r8, lsl #6
    59e4:	0005dc00 	andeq	sp, r5, r0, lsl #24
    59e8:	19631e00 	stmdbne	r3!, {r9, sl, fp, ip}^
    59ec:	97010000 	strls	r0, [r1, -r0]
    59f0:	00005e01 	andeq	r5, r0, r1, lsl #28
    59f4:	00540100 	subseq	r0, r4, r0, lsl #2
    59f8:	28300116 	ldmdacs	r0!, {r1, r2, r4, r8}
    59fc:	72010000 	andvc	r0, r1, #0	; 0x0
    5a00:	005e0101 	subseq	r0, lr, r1, lsl #2
    5a04:	51d80000 	bicspl	r0, r8, r0
    5a08:	52180800 	andspl	r0, r8, #0	; 0x0
    5a0c:	27120800 	ldrcs	r0, [r2, -r0, lsl #16]
    5a10:	06250000 	strteq	r0, [r5], -r0
    5a14:	6a170000 	bvs	5c5a1c <__Stack_Size+0x5c561c>
    5a18:	01000027 	tsteq	r0, r7, lsr #32
    5a1c:	03900171 	orrseq	r0, r0, #1073741852	; 0x4000001c
    5a20:	27310000 	ldrcs	r0, [r1, -r0]!
    5a24:	9d170000 	ldcls	0, cr0, [r7]
    5a28:	01000028 	tsteq	r0, r8, lsr #32
    5a2c:	005e0171 	subseq	r0, lr, r1, ror r1
    5a30:	274f0000 	strbcs	r0, [pc, -r0]
    5a34:	691b0000 	ldmdbvs	fp, {}
    5a38:	01730100 	cmneq	r3, r0, lsl #2
    5a3c:	0000005e 	andeq	r0, r0, lr, asr r0
    5a40:	84012400 	strhi	r2, [r1], #-1024
    5a44:	01000027 	tsteq	r0, r7, lsr #32
    5a48:	52180173 	andspl	r0, r8, #-1073741796	; 0xc000001c
    5a4c:	52b80800 	adcspl	r0, r8, #0	; 0x0
    5a50:	276d0800 	strbcs	r0, [sp, -r0, lsl #16]!
    5a54:	064c0000 	strbeq	r0, [ip], -r0
    5a58:	63230000 	teqvs	r3, #0	; 0x0
    5a5c:	01000019 	tsteq	r0, r9, lsl r0
    5a60:	00005e74 	andeq	r5, r0, r4, ror lr
    5a64:	00540100 	subseq	r0, r4, r0, lsl #2
    5a68:	27720120 	ldrbcs	r0, [r2, -r0, lsr #2]!
    5a6c:	b2010000 	andlt	r0, r1, #0	; 0x0
    5a70:	0052b801 	subseq	fp, r2, r1, lsl #16
    5a74:	0052c408 	subseq	ip, r2, r8, lsl #8
    5a78:	00278c08 	eoreq	r8, r7, r8, lsl #24
    5a7c:	a1012400 	tstge	r1, r0, lsl #8
    5a80:	01000027 	tsteq	r0, r7, lsr #32
    5a84:	52c4014f 	sbcpl	r0, r4, #-1073741805	; 0xc0000013
    5a88:	52f40800 	rscspl	r0, r4, #0	; 0x0
    5a8c:	27b70800 	ldrcs	r0, [r7, r0, lsl #16]!
    5a90:	068a0000 	streq	r0, [sl], r0
    5a94:	7b220000 	blvc	885a9c <__Stack_Size+0x88569c>
    5a98:	01000029 	tsteq	r0, r9, lsr #32
    5a9c:	00005e4e 	andeq	r5, r0, lr, asr #28
    5aa0:	0027d600 	eoreq	sp, r7, r0, lsl #12
    5aa4:	01240000 	teqeq	r4, r0
    5aa8:	0000273d 	andeq	r2, r0, sp, lsr r7
    5aac:	f4013f01 	undefined instruction 0xf4013f01
    5ab0:	08080052 	stmdaeq	r8, {r1, r4, r6}
    5ab4:	f4080053 	vst4.16	{d0-d3}, [r8, :64], r3
    5ab8:	b3000027 	movwlt	r0, #39	; 0x27
    5abc:	22000006 	andcs	r0, r0, #6	; 0x6
    5ac0:	0000283b 	andeq	r2, r0, fp, lsr r8
    5ac4:	005e3e01 	subseq	r3, lr, r1, lsl #28
    5ac8:	281f0000 	ldmdacs	pc, {}
    5acc:	23000000 	movwcs	r0, #0	; 0x0
    5ad0:	00000534 	andeq	r0, r0, r4, lsr r5
    5ad4:	06c42a05 	strbeq	r2, [r4], r5, lsl #20
    5ad8:	03050000 	movweq	r0, #20480	; 0x5000
    5adc:	20000a14 	andcs	r0, r0, r4, lsl sl
    5ae0:	00005e04 	andeq	r5, r0, r4, lsl #28
    5ae4:	02652300 	rsbeq	r2, r5, #0	; 0x0
    5ae8:	28050000 	stmdacs	r5, {}
    5aec:	000006da 	ldrdeq	r0, [r0], -sl
    5af0:	0a160305 	beq	58670c <__Stack_Size+0x58630c>
    5af4:	4c042000 	stcmi	0, cr2, [r4], {0}
    5af8:	23000000 	movwcs	r0, #0	; 0x0
    5afc:	000003f6 	strdeq	r0, [r0], -r6
    5b00:	06da2805 	ldrbeq	r2, [sl], r5, lsl #16
    5b04:	03050000 	movweq	r0, #20480	; 0x5000
    5b08:	20000a18 	andcs	r0, r0, r8, lsl sl
    5b0c:	00005e25 	andeq	r5, r0, r5, lsr #28
    5b10:	00070100 	andeq	r0, r7, r0, lsl #2
    5b14:	00a32600 	adceq	r2, r3, r0, lsl #12
    5b18:	03ff0000 	mvnseq	r0, #0	; 0x0
    5b1c:	047a2300 	ldrbteq	r2, [sl], #-768
    5b20:	29050000 	stmdbcs	r5, {}
    5b24:	00000712 	andeq	r0, r0, r2, lsl r7
    5b28:	06140305 	ldreq	r0, [r4], -r5, lsl #6
    5b2c:	f0042000 	undefined instruction 0xf0042000
    5b30:	23000006 	movwcs	r0, #6	; 0x6
    5b34:	00000615 	andeq	r0, r0, r5, lsl r6
    5b38:	06c44405 	strbeq	r4, [r4], r5, lsl #8
    5b3c:	03050000 	movweq	r0, #20480	; 0x5000
    5b40:	20000612 	andcs	r0, r0, r2, lsl r6
    5b44:	00039323 	andeq	r9, r3, r3, lsr #6
    5b48:	c4440500 	strbgt	r0, [r4], #-1280
    5b4c:	05000006 	streq	r0, [r0, #-6]
    5b50:	00061303 	andeq	r1, r6, r3, lsl #6
    5b54:	005e2520 	subseq	r2, lr, r0, lsr #10
    5b58:	07490000 	strbeq	r0, [r9, -r0]
    5b5c:	a3270000 	teqge	r7, #0	; 0x0
    5b60:	40000000 	andmi	r0, r0, r0
    5b64:	00ec2300 	rsceq	r2, ip, r0, lsl #6
    5b68:	45050000 	strmi	r0, [r5]
    5b6c:	0000075a 	andeq	r0, r0, sl, asr r7
    5b70:	0a1a0305 	beq	68678c <__Stack_Size+0x68638c>
    5b74:	39042000 	stmdbcc	r4, {sp}
    5b78:	23000007 	movwcs	r0, #7	; 0x7
    5b7c:	000005e4 	andeq	r0, r0, r4, ror #11
    5b80:	06da5805 	ldrbeq	r5, [sl], r5, lsl #16
    5b84:	03050000 	movweq	r0, #20480	; 0x5000
    5b88:	2000060e 	andcs	r0, r0, lr, lsl #12
    5b8c:	0000f923 	andeq	pc, r0, r3, lsr #18
    5b90:	da580500 	ble	1606f98 <__Stack_Size+0x1606b98>
    5b94:	05000006 	streq	r0, [r0, #-6]
    5b98:	00061003 	andeq	r1, r6, r3
    5b9c:	02b22320 	adcseq	r2, r2, #-2147483648	; 0x80000000
    5ba0:	59050000 	stmdbpl	r5, {}
    5ba4:	00000792 	muleq	r0, r2, r7
    5ba8:	0a5b0305 	beq	16c67c4 <__Stack_Size+0x16c63c4>
    5bac:	f0042000 	undefined instruction 0xf0042000
    5bb0:	28000006 	stmdacs	r0, {r1, r2}
    5bb4:	00000699 	muleq	r0, r9, r6
    5bb8:	003a0e01 	eorseq	r0, sl, r1, lsl #28
    5bbc:	05010000 	streq	r0, [r1]
    5bc0:	0000cc03 	andeq	ip, r0, r3, lsl #24
    5bc4:	00052820 	andeq	r2, r5, r0, lsr #16
    5bc8:	11010000 	tstne	r1, r0
    5bcc:	0000003a 	andeq	r0, r0, sl, lsr r0
    5bd0:	d0030501 	andle	r0, r3, r1, lsl #10
    5bd4:	28200000 	stmdacs	r0!, {}
    5bd8:	00000056 	andeq	r0, r0, r6, asr r0
    5bdc:	003a1401 	eorseq	r1, sl, r1, lsl #8
    5be0:	05010000 	streq	r0, [r1]
    5be4:	0000d403 	andeq	sp, r0, r3, lsl #8
    5be8:	23e32920 	mvncs	r2, #524288	; 0x80000
    5bec:	1a060000 	bne	185bf4 <__Stack_Size+0x1857f4>
    5bf0:	000007da 	ldrdeq	r0, [r0], -sl
    5bf4:	3a040101 	bcc	106000 <__Stack_Size+0x105c00>
    5bf8:	29000000 	stmdbcs	r0, {}
    5bfc:	0000238f 	andeq	r2, r0, pc, lsl #7
    5c00:	07da1b06 	ldrbeq	r1, [sl, r6, lsl #22]
    5c04:	01010000 	tsteq	r1, r0
    5c08:	000b1b00 	andeq	r1, fp, r0, lsl #22
    5c0c:	34000200 	strcc	r0, [r0], #-512
    5c10:	04000018 	streq	r0, [r0], #-24
    5c14:	0001c601 	andeq	ip, r1, r1, lsl #12
    5c18:	2a090100 	bcs	246020 <__Stack_Size+0x245c20>
    5c1c:	039d0000 	orrseq	r0, sp, #0	; 0x0
    5c20:	53080000 	movwpl	r0, #32768	; 0x8000
    5c24:	569c0800 	ldrpl	r0, [ip], r0, lsl #16
    5c28:	18980800 	ldmne	r8, {fp}
    5c2c:	04020000 	streq	r0, [r2]
    5c30:	00417805 	subeq	r7, r1, r5, lsl #16
    5c34:	05020200 	streq	r0, [r2, #-512]
    5c38:	00000495 	muleq	r0, r5, r4
    5c3c:	69060102 	stmdbvs	r6, {r1, r8}
    5c40:	03000004 	movweq	r0, #4	; 0x4
    5c44:	00323375 	eorseq	r3, r2, r5, ror r3
    5c48:	00452702 	subeq	r2, r5, r2, lsl #14
    5c4c:	04020000 	streq	r0, [r2]
    5c50:	0041f207 	subeq	pc, r1, r7, lsl #4
    5c54:	31750300 	cmncc	r5, r0, lsl #6
    5c58:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
    5c5c:	00000057 	andeq	r0, r0, r7, asr r0
    5c60:	22070202 	andcs	r0, r7, #536870912	; 0x20000000
    5c64:	03000002 	movweq	r0, #2	; 0x2
    5c68:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    5c6c:	00006829 	andeq	r6, r0, r9, lsr #16
    5c70:	08010200 	stmdaeq	r1, {r9}
    5c74:	00000467 	andeq	r0, r0, r7, ror #8
    5c78:	00004504 	andeq	r4, r0, r4, lsl #10
    5c7c:	02010500 	andeq	r0, r1, #0	; 0x0
    5c80:	0000893a 	andeq	r8, r0, sl, lsr r9
    5c84:	0ebd0600 	cdpeq	6, 11, cr0, cr13, cr0, {0}
    5c88:	07000000 	streq	r0, [r0, -r0]
    5c8c:	00544553 	subseq	r4, r4, r3, asr r5
    5c90:	17080001 	strne	r0, [r8, -r1]
    5c94:	0200003b 	andeq	r0, r0, #59	; 0x3b
    5c98:	0000743a 	andeq	r7, r0, sl, lsr r4
    5c9c:	39110800 	ldmdbcc	r1, {fp}
    5ca0:	3a020000 	bcc	85ca8 <__Stack_Size+0x858a8>
    5ca4:	00000074 	andeq	r0, r0, r4, ror r0
    5ca8:	3c020105 	stfccs	f0, [r2], {5}
    5cac:	000000b4 	strheq	r0, [r0], -r4
    5cb0:	0021a706 	eoreq	sl, r1, r6, lsl #14
    5cb4:	39060000 	stmdbcc	r6, {}
    5cb8:	01000004 	tsteq	r0, r4
    5cbc:	268c0800 	strcs	r0, [ip], r0, lsl #16
    5cc0:	3c020000 	stccc	0, cr0, [r2], {0}
    5cc4:	0000009f 	muleq	r0, pc, r0
    5cc8:	25035009 	strcs	r5, [r3, #-9]
    5ccc:	000001de 	ldrdeq	r0, [r0], -lr
    5cd0:	0052530a 	subseq	r5, r2, sl, lsl #6
    5cd4:	006f2603 	rsbeq	r2, pc, r3, lsl #12
    5cd8:	23020000 	movwcs	r0, #8192	; 0x2000
    5cdc:	52430a00 	subpl	r0, r3, #0	; 0x0
    5ce0:	27030031 	smladxcs	r3, r1, r0, r0
    5ce4:	0000006f 	andeq	r0, r0, pc, rrx
    5ce8:	0a042302 	beq	10e8f8 <__Stack_Size+0x10e4f8>
    5cec:	00325243 	eorseq	r5, r2, r3, asr #4
    5cf0:	006f2803 	rsbeq	r2, pc, r3, lsl #16
    5cf4:	23020000 	movwcs	r0, #8192	; 0x2000
    5cf8:	22520b08 	subscs	r0, r2, #8192	; 0x2000
    5cfc:	29030000 	stmdbcs	r3, {}
    5d00:	0000006f 	andeq	r0, r0, pc, rrx
    5d04:	0b0c2302 	bleq	30e914 <__Stack_Size+0x30e514>
    5d08:	00002258 	andeq	r2, r0, r8, asr r2
    5d0c:	006f2a03 	rsbeq	r2, pc, r3, lsl #20
    5d10:	23020000 	movwcs	r0, #8192	; 0x2000
    5d14:	21c10b10 	biccs	r0, r1, r0, lsl fp
    5d18:	2b030000 	blcs	c5d20 <__Stack_Size+0xc5920>
    5d1c:	0000006f 	andeq	r0, r0, pc, rrx
    5d20:	0b142302 	bleq	50e930 <__Stack_Size+0x50e530>
    5d24:	000021c7 	andeq	r2, r0, r7, asr #3
    5d28:	006f2c03 	rsbeq	r2, pc, r3, lsl #24
    5d2c:	23020000 	movwcs	r0, #8192	; 0x2000
    5d30:	21e80b18 	mvncs	r0, r8, lsl fp
    5d34:	2d030000 	stccs	0, cr0, [r3]
    5d38:	0000006f 	andeq	r0, r0, pc, rrx
    5d3c:	0b1c2302 	bleq	70e94c <__Stack_Size+0x70e54c>
    5d40:	000021f6 	strdeq	r2, [r0], -r6
    5d44:	006f2e03 	rsbeq	r2, pc, r3, lsl #28
    5d48:	23020000 	movwcs	r0, #8192	; 0x2000
    5d4c:	54480a20 	strbpl	r0, [r8], #-2592
    5d50:	2f030052 	svccs	0x00030052
    5d54:	0000006f 	andeq	r0, r0, pc, rrx
    5d58:	0a242302 	beq	90e968 <__Stack_Size+0x90e568>
    5d5c:	0052544c 	subseq	r5, r2, ip, asr #8
    5d60:	006f3003 	rsbeq	r3, pc, r3
    5d64:	23020000 	movwcs	r0, #8192	; 0x2000
    5d68:	22250b28 	eorcs	r0, r5, #40960	; 0xa000
    5d6c:	31030000 	tstcc	r3, r0
    5d70:	0000006f 	andeq	r0, r0, pc, rrx
    5d74:	0b2c2302 	bleq	b0e984 <__Stack_Size+0xb0e584>
    5d78:	0000222a 	andeq	r2, r0, sl, lsr #4
    5d7c:	006f3203 	rsbeq	r3, pc, r3, lsl #4
    5d80:	23020000 	movwcs	r0, #8192	; 0x2000
    5d84:	222f0b30 	eorcs	r0, pc, #49152	; 0xc000
    5d88:	33030000 	movwcc	r0, #12288	; 0x3000
    5d8c:	0000006f 	andeq	r0, r0, pc, rrx
    5d90:	0b342302 	bleq	d0e9a0 <__Stack_Size+0xd0e5a0>
    5d94:	00002171 	andeq	r2, r0, r1, ror r1
    5d98:	006f3403 	rsbeq	r3, pc, r3, lsl #8
    5d9c:	23020000 	movwcs	r0, #8192	; 0x2000
    5da0:	21af0b38 	undefined instruction 0x21af0b38
    5da4:	35030000 	strcc	r0, [r3]
    5da8:	0000006f 	andeq	r0, r0, pc, rrx
    5dac:	0b3c2302 	bleq	f0e9bc <__Stack_Size+0xf0e5bc>
    5db0:	00002133 	andeq	r2, r0, r3, lsr r1
    5db4:	006f3603 	rsbeq	r3, pc, r3, lsl #12
    5db8:	23020000 	movwcs	r0, #8192	; 0x2000
    5dbc:	21380b40 	teqcs	r8, r0, asr #22
    5dc0:	37030000 	strcc	r0, [r3, -r0]
    5dc4:	0000006f 	andeq	r0, r0, pc, rrx
    5dc8:	0b442302 	bleq	110e9d8 <__Stack_Size+0x110e5d8>
    5dcc:	0000213d 	andeq	r2, r0, sp, lsr r1
    5dd0:	006f3803 	rsbeq	r3, pc, r3, lsl #16
    5dd4:	23020000 	movwcs	r0, #8192	; 0x2000
    5dd8:	52440a48 	subpl	r0, r4, #294912	; 0x48000
    5ddc:	6f390300 	svcvs	0x00390300
    5de0:	02000000 	andeq	r0, r0, #0	; 0x0
    5de4:	08004c23 	stmdaeq	r0, {r0, r1, r5, sl, fp, lr}
    5de8:	00002da5 	andeq	r2, r0, r5, lsr #27
    5dec:	00bf3a03 	adcseq	r3, pc, r3, lsl #20
    5df0:	040c0000 	streq	r0, [ip]
    5df4:	04140907 	ldreq	r0, [r4], #-2311
    5df8:	0002491b 	andeq	r4, r2, fp, lsl r9
    5dfc:	254c0b00 	strbcs	r0, [ip, #-2816]
    5e00:	1c040000 	stcne	0, cr0, [r4], {0}
    5e04:	0000003a 	andeq	r0, r0, sl, lsr r0
    5e08:	0b002302 	bleq	ea18 <__Stack_Size+0xe618>
    5e0c:	00002499 	muleq	r0, r9, r4
    5e10:	00b41d04 	adcseq	r1, r4, r4, lsl #26
    5e14:	23020000 	movwcs	r0, #8192	; 0x2000
    5e18:	25da0b04 	ldrbcs	r0, [sl, #2820]
    5e1c:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
    5e20:	000000b4 	strheq	r0, [r0], -r4
    5e24:	0b052302 	bleq	14ea34 <__Stack_Size+0x14e634>
    5e28:	00002621 	andeq	r2, r0, r1, lsr #12
    5e2c:	003a1f04 	eorseq	r1, sl, r4, lsl #30
    5e30:	23020000 	movwcs	r0, #8192	; 0x2000
    5e34:	259a0b08 	ldrcs	r0, [sl, #2824]
    5e38:	20040000 	andcs	r0, r4, r0
    5e3c:	0000003a 	andeq	r0, r0, sl, lsr r0
    5e40:	0b0c2302 	bleq	30ea50 <__Stack_Size+0x30e650>
    5e44:	00002589 	andeq	r2, r0, r9, lsl #11
    5e48:	005e2104 	subseq	r2, lr, r4, lsl #2
    5e4c:	23020000 	movwcs	r0, #8192	; 0x2000
    5e50:	5d080010 	stcpl	0, cr0, [r8, #-64]
    5e54:	04000024 	streq	r0, [r0], #-36
    5e58:	0001ec22 	andeq	lr, r1, r2, lsr #24
    5e5c:	b1010d00 	tstlt	r1, r0, lsl #26
    5e60:	0100002d 	tsteq	r0, sp, lsr #32
    5e64:	530801af 	movwpl	r0, #33199	; 0x81af
    5e68:	53500800 	cmppl	r0, #0	; 0x0
    5e6c:	5d010800 	stcpl	8, cr0, [r1]
    5e70:	000002a0 	andeq	r0, r0, r0, lsr #5
    5e74:	0029840e 	eoreq	r8, r9, lr, lsl #8
    5e78:	a0ae0100 	adcge	r0, lr, r0, lsl #2
    5e7c:	01000002 	tsteq	r0, r2
    5e80:	2a3a0e50 	bcs	e897c8 <__Stack_Size+0xe893c8>
    5e84:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    5e88:	000002a6 	andeq	r0, r0, r6, lsr #5
    5e8c:	890f5101 	stmdbhi	pc, {r0, r8, ip, lr}
    5e90:	01000029 	tsteq	r0, r9, lsr #32
    5e94:	00003ab0 	strheq	r3, [r0], -r0
    5e98:	00283d00 	eoreq	r3, r8, r0, lsl #26
    5e9c:	2c591000 	mracs	r1, r9, acc0
    5ea0:	b1010000 	tstlt	r1, r0
    5ea4:	0000005e 	andeq	r0, r0, lr, asr r0
    5ea8:	de041100 	adfles	f1, f4, f0
    5eac:	11000001 	tstne	r0, r1
    5eb0:	00024904 	andeq	r4, r2, r4, lsl #18
    5eb4:	03010d00 	movweq	r0, #7424	; 0x1d00
    5eb8:	0100002d 	tsteq	r0, sp, lsr #32
    5ebc:	535001ec 	cmppl	r0, #59	; 0x3b
    5ec0:	53620800 	cmnpl	r2, #0	; 0x0
    5ec4:	5d010800 	stcpl	8, cr0, [r1]
    5ec8:	000002d1 	ldrdeq	r0, [r0], -r1
    5ecc:	002a3a0e 	eoreq	r3, sl, lr, lsl #20
    5ed0:	a6eb0100 	strbtge	r0, [fp], r0, lsl #2
    5ed4:	01000002 	tsteq	r0, r2
    5ed8:	01120050 	tsteq	r2, r0, asr r0
    5edc:	00002a32 	andeq	r2, r0, r2, lsr sl
    5ee0:	01010b01 	tsteq	r1, r1, lsl #22
    5ee4:	08005364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip, lr}
    5ee8:	08005378 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, ip, lr}
    5eec:	03065d01 	movweq	r5, #27905	; 0x6d01
    5ef0:	84130000 	ldrhi	r0, [r3]
    5ef4:	01000029 	tsteq	r0, r9, lsr #32
    5ef8:	02a0010a 	adceq	r0, r0, #-2147483646	; 0x80000002
    5efc:	50010000 	andpl	r0, r1, r0
    5f00:	002aa913 	eoreq	sl, sl, r3, lsl r9
    5f04:	010a0100 	tsteq	sl, r0, lsl #2
    5f08:	000000b4 	strheq	r0, [r0], -r4
    5f0c:	12005101 	andne	r5, r0, #1073741824	; 0x40000000
    5f10:	002dd401 	eoreq	sp, sp, r1, lsl #8
    5f14:	01270100 	teqeq	r7, r0, lsl #2
    5f18:	00537801 	subseq	r7, r3, r1, lsl #16
    5f1c:	00538c08 	subseq	r8, r3, r8, lsl #24
    5f20:	3b5d0108 	blcc	1746348 <__Stack_Size+0x1745f48>
    5f24:	13000003 	movwne	r0, #3	; 0x3
    5f28:	00002984 	andeq	r2, r0, r4, lsl #19
    5f2c:	a0012601 	andge	r2, r1, r1, lsl #12
    5f30:	01000002 	tsteq	r0, r2
    5f34:	2aa91350 	bcs	fea4ac7c <SCS_BASE+0x1ea3cc7c>
    5f38:	26010000 	strcs	r0, [r1], -r0
    5f3c:	0000b401 	andeq	fp, r0, r1, lsl #8
    5f40:	00510100 	subseq	r0, r1, r0, lsl #2
    5f44:	29a70112 	stmibcs	r7!, {r1, r4, r8}
    5f48:	48010000 	stmdami	r1, {}
    5f4c:	538c0101 	orrpl	r0, ip, #1073741824	; 0x40000000
    5f50:	53a20800 	undefined instruction 0x53a20800
    5f54:	5d010800 	stcpl	8, cr0, [r1]
    5f58:	0000038e 	andeq	r0, r0, lr, lsl #7
    5f5c:	00298413 	eoreq	r8, r9, r3, lsl r4
    5f60:	01470100 	cmpeq	r7, r0, lsl #2
    5f64:	000002a0 	andeq	r0, r0, r0, lsr #5
    5f68:	97145001 	ldrls	r5, [r4, -r1]
    5f6c:	0100002d 	tsteq	r0, sp, lsr #32
    5f70:	004c0147 	subeq	r0, ip, r7, asr #2
    5f74:	28710000 	ldmdacs	r1!, {}^
    5f78:	a9130000 	ldmdbge	r3, {}
    5f7c:	0100002a 	tsteq	r0, sl, lsr #32
    5f80:	00b40147 	adcseq	r0, r4, r7, asr #2
    5f84:	52010000 	andpl	r0, r1, #0	; 0x0
    5f88:	002d9e15 	eoreq	r9, sp, r5, lsl lr
    5f8c:	01490100 	cmpeq	r9, r0, lsl #2
    5f90:	0000005e 	andeq	r0, r0, lr, asr r0
    5f94:	12005101 	andne	r5, r0, #1073741824	; 0x40000000
    5f98:	002d8201 	eoreq	r8, sp, r1, lsl #4
    5f9c:	01670100 	cmneq	r7, r0, lsl #2
    5fa0:	0053a401 	subseq	sl, r3, r1, lsl #8
    5fa4:	0053ae08 	subseq	sl, r3, r8, lsl #28
    5fa8:	b55d0108 	ldrblt	r0, [sp, #-264]
    5fac:	13000003 	movwne	r0, #3	; 0x3
    5fb0:	00002984 	andeq	r2, r0, r4, lsl #19
    5fb4:	a0016601 	andge	r6, r1, r1, lsl #12
    5fb8:	01000002 	tsteq	r0, r2
    5fbc:	01160050 	tsteq	r6, r0, asr r0
    5fc0:	00002a82 	andeq	r2, r0, r2, lsl #21
    5fc4:	01017701 	tsteq	r1, r1, lsl #14
    5fc8:	00000089 	andeq	r0, r0, r9, lsl #1
    5fcc:	080053b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, ip, lr}
    5fd0:	080053ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, ip, lr}
    5fd4:	03ee5d01 	mvneq	r5, #64	; 0x40
    5fd8:	84140000 	ldrhi	r0, [r4]
    5fdc:	01000029 	tsteq	r0, r9, lsr #32
    5fe0:	02a00176 	adceq	r0, r0, #-2147483619	; 0x8000001d
    5fe4:	28840000 	stmcs	r4, {}
    5fe8:	82170000 	andshi	r0, r7, #0	; 0x0
    5fec:	0100002c 	tsteq	r0, ip, lsr #32
    5ff0:	00890178 	addeq	r0, r9, r8, ror r1
    5ff4:	12000000 	andne	r0, r0, #0	; 0x0
    5ff8:	002c4401 	eoreq	r4, ip, r1, lsl #8
    5ffc:	01950100 	orrseq	r0, r5, r0, lsl #2
    6000:	0053bc01 	subseq	fp, r3, r1, lsl #24
    6004:	0053c608 	subseq	ip, r3, r8, lsl #12
    6008:	155d0108 	ldrbne	r0, [sp, #-264]
    600c:	13000004 	movwne	r0, #4	; 0x4
    6010:	00002984 	andeq	r2, r0, r4, lsl #19
    6014:	a0019401 	andge	r9, r1, r1, lsl #8
    6018:	01000002 	tsteq	r0, r2
    601c:	01160050 	tsteq	r6, r0, asr r0
    6020:	00002c69 	andeq	r2, r0, r9, ror #24
    6024:	0101a501 	tsteq	r1, r1, lsl #10
    6028:	00000089 	andeq	r0, r0, r9, lsl #1
    602c:	080053c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, lr}
    6030:	080053d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, ip, lr}
    6034:	044e5d01 	strbeq	r5, [lr], #-3329
    6038:	84140000 	ldrhi	r0, [r4]
    603c:	01000029 	tsteq	r0, r9, lsr #32
    6040:	02a001a4 	adceq	r0, r0, #41	; 0x29
    6044:	28970000 	ldmcs	r7, {}
    6048:	82170000 	andshi	r0, r7, #0	; 0x0
    604c:	0100002c 	tsteq	r0, ip, lsr #32
    6050:	008901a6 	addeq	r0, r9, r6, lsr #3
    6054:	12000000 	andne	r0, r0, #0	; 0x0
    6058:	002c8c01 	eoreq	r8, ip, r1, lsl #24
    605c:	01c50100 	biceq	r0, r5, r0, lsl #2
    6060:	0053d401 	subseq	sp, r3, r1, lsl #8
    6064:	0053e808 	subseq	lr, r3, r8, lsl #16
    6068:	835d0108 	cmphi	sp, #2	; 0x2
    606c:	13000004 	movwne	r0, #4	; 0x4
    6070:	00002984 	andeq	r2, r0, r4, lsl #19
    6074:	a001c401 	andge	ip, r1, r1, lsl #8
    6078:	01000002 	tsteq	r0, r2
    607c:	2aa91350 	bcs	fea4adc4 <SCS_BASE+0x1ea3cdc4>
    6080:	c4010000 	strgt	r0, [r1]
    6084:	0000b401 	andeq	fp, r0, r1, lsl #8
    6088:	00510100 	subseq	r0, r1, r0, lsl #2
    608c:	2b7e0116 	blcs	1f864ec <__Stack_Size+0x1f860ec>
    6090:	e0010000 	and	r0, r1, r0
    6094:	00890101 	addeq	r0, r9, r1, lsl #2
    6098:	53e80000 	mvnpl	r0, #0	; 0x0
    609c:	53f20800 	mvnspl	r0, #0	; 0x0
    60a0:	5d010800 	stcpl	8, cr0, [r1]
    60a4:	000004bc 	strheq	r0, [r0], -ip
    60a8:	00298414 	eoreq	r8, r9, r4, lsl r4
    60ac:	01df0100 	bicseq	r0, pc, r0, lsl #2
    60b0:	000002a0 	andeq	r0, r0, r0, lsr #5
    60b4:	000028aa 	andeq	r2, r0, sl, lsr #17
    60b8:	002c8217 	eoreq	r8, ip, r7, lsl r2
    60bc:	01e10100 	mvneq	r0, r0, lsl #2
    60c0:	00000089 	andeq	r0, r0, r9, lsl #1
    60c4:	0c011200 	sfmeq	f1, 4, [r1], {0}
    60c8:	0100002b 	tsteq	r0, fp, lsr #32
    60cc:	f4010201 	vst1.8	{d0-d3}, [r1], r1
    60d0:	04080053 	streq	r0, [r8], #-83
    60d4:	01080054 	qaddeq	r0, r4, r8
    60d8:	00050d5d 	andeq	r0, r5, sp, asr sp
    60dc:	29841300 	stmibcs	r4, {r8, r9, ip}
    60e0:	00010000 	andeq	r0, r1, r0
    60e4:	0002a002 	andeq	sl, r2, r2
    60e8:	14500100 	ldrbne	r0, [r0], #-256
    60ec:	00002a2b 	andeq	r2, r0, fp, lsr #20
    60f0:	5e020001 	cdppl	0, 0, cr0, cr2, cr1, {0}
    60f4:	bd000000 	stclt	0, cr0, [r0]
    60f8:	15000028 	strne	r0, [r0, #-40]
    60fc:	00002989 	andeq	r2, r0, r9, lsl #19
    6100:	3a020201 	bcc	8690c <__Stack_Size+0x8650c>
    6104:	01000000 	tsteq	r0, r0
    6108:	2c591753 	mrrccs	7, 5, r1, r9, cr3
    610c:	03010000 	movweq	r0, #4096	; 0x1000
    6110:	00003a02 	andeq	r3, r0, r2, lsl #20
    6114:	01120000 	tsteq	r2, r0
    6118:	00002d72 	andeq	r2, r0, r2, ror sp
    611c:	01022001 	tsteq	r2, r1
    6120:	08005404 	stmdaeq	r0, {r2, sl, ip, lr}
    6124:	08005418 	stmdaeq	r0, {r3, r4, sl, ip, lr}
    6128:	05425d01 	strbeq	r5, [r2, #-3329]
    612c:	84130000 	ldrhi	r0, [r3]
    6130:	01000029 	tsteq	r0, r9, lsr #32
    6134:	02a0021f 	adceq	r0, r0, #-268435455	; 0xf0000001
    6138:	50010000 	andpl	r0, r1, r0
    613c:	002aa913 	eoreq	sl, sl, r3, lsl r9
    6140:	021f0100 	andseq	r0, pc, #0	; 0x0
    6144:	000000b4 	strheq	r0, [r0], -r4
    6148:	18005101 	stmdane	r0, {r0, r8, ip, lr}
    614c:	002ad801 	eoreq	sp, sl, r1, lsl #16
    6150:	025b0100 	subseq	r0, fp, #0	; 0x0
    6154:	00541801 	subseq	r1, r4, r1, lsl #16
    6158:	0054ae08 	subseq	sl, r4, r8, lsl #28
    615c:	0028d008 	eoreq	sp, r8, r8
    6160:	0005b700 	andeq	fp, r5, r0, lsl #14
    6164:	29841300 	stmibcs	r4, {r8, r9, ip}
    6168:	5a010000 	bpl	46170 <__Stack_Size+0x45d70>
    616c:	0002a002 	andeq	sl, r2, r2
    6170:	14500100 	ldrbne	r0, [r0], #-256
    6174:	00002c38 	andeq	r2, r0, r8, lsr ip
    6178:	5e025a01 	fmacspl	s10, s4, s2
    617c:	ef000000 	svc	0x00000000
    6180:	14000028 	strne	r0, [r0], #-40
    6184:	00002b49 	andeq	r2, r0, r9, asr #22
    6188:	5e025a01 	fmacspl	s10, s4, s2
    618c:	23000000 	movwcs	r0, #0	; 0x0
    6190:	14000029 	strne	r0, [r0], #-41
    6194:	00002cf4 	strdeq	r2, [r0], -r4
    6198:	5e025a01 	fmacspl	s10, s4, s2
    619c:	41000000 	tstmi	r0, r0
    61a0:	19000029 	stmdbne	r0, {r0, r3, r5}
    61a4:	00002989 	andeq	r2, r0, r9, lsl #19
    61a8:	3a025c01 	bcc	9d1b4 <__Stack_Size+0x9cdb4>
    61ac:	5f000000 	svcpl	0x00000000
    61b0:	17000029 	strne	r0, [r0, -r9, lsr #32]
    61b4:	00002c59 	andeq	r2, r0, r9, asr ip
    61b8:	3a025c01 	bcc	9d1c4 <__Stack_Size+0x9cdc4>
    61bc:	00000000 	andeq	r0, r0, r0
    61c0:	2b660112 	blcs	1986610 <__Stack_Size+0x1986210>
    61c4:	c0010000 	andgt	r0, r1, r0
    61c8:	54b00102 	ldrtpl	r0, [r0], #258
    61cc:	54c40800 	strbpl	r0, [r4], #2048
    61d0:	5d010800 	stcpl	8, cr0, [r1]
    61d4:	000005ec 	andeq	r0, r0, ip, ror #11
    61d8:	00298413 	eoreq	r8, r9, r3, lsl r4
    61dc:	02bf0100 	adcseq	r0, pc, #0	; 0x0
    61e0:	000002a0 	andeq	r0, r0, r0, lsr #5
    61e4:	a9135001 	ldmdbge	r3, {r0, ip, lr}
    61e8:	0100002a 	tsteq	r0, sl, lsr #32
    61ec:	00b402bf 	ldrhteq	r0, [r4], pc
    61f0:	51010000 	tstpl	r1, r0
    61f4:	2b011600 	blcs	4b9fc <__Stack_Size+0x4b5fc>
    61f8:	0100002b 	tsteq	r0, fp, lsr #32
    61fc:	4c0102d9 	sfmmi	f0, 4, [r1], {217}
    6200:	c4000000 	strgt	r0, [r0]
    6204:	ca080054 	bgt	20635c <__Stack_Size+0x205f5c>
    6208:	01080054 	qaddeq	r0, r4, r8
    620c:	0006195d 	andeq	r1, r6, sp, asr r9
    6210:	29841400 	stmibcs	r4, {sl, ip}
    6214:	d8010000 	stmdale	r1, {}
    6218:	0002a002 	andeq	sl, r2, r2
    621c:	00297d00 	eoreq	r7, r9, r0, lsl #26
    6220:	011a0000 	tsteq	sl, r0
    6224:	00002ddf 	ldrdeq	r2, [r0], -pc
    6228:	0102e801 	tsteq	r2, r1, lsl #16
    622c:	0000003a 	andeq	r0, r0, sl, lsr r0
    6230:	080054cc 	stmdaeq	r0, {r2, r3, r6, r7, sl, ip, lr}
    6234:	080054d8 	stmdaeq	r0, {r3, r4, r6, r7, sl, ip, lr}
    6238:	01125d01 	tsteq	r2, r1, lsl #26
    623c:	00002b4e 	andeq	r2, r0, lr, asr #22
    6240:	0102f901 	tstpeq	r2, r1, lsl #18
    6244:	080054d8 	stmdaeq	r0, {r3, r4, r6, r7, sl, ip, lr}
    6248:	080054ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, ip, lr}
    624c:	06665d01 	strbteq	r5, [r6], -r1, lsl #26
    6250:	84130000 	ldrhi	r0, [r3]
    6254:	01000029 	tsteq	r0, r9, lsr #32
    6258:	02a002f8 	adceq	r0, r0, #-2147483633	; 0x8000000f
    625c:	50010000 	andpl	r0, r1, r0
    6260:	002aa913 	eoreq	sl, sl, r3, lsl r9
    6264:	02f80100 	rscseq	r0, r8, #0	; 0x0
    6268:	000000b4 	strheq	r0, [r0], -r4
    626c:	12005101 	andne	r5, r0, #1073741824	; 0x40000000
    6270:	002bde01 	eoreq	sp, fp, r1, lsl #28
    6274:	03160100 	tsteq	r6, #0	; 0x0
    6278:	0054ec01 	subseq	lr, r4, r1, lsl #24
    627c:	00550008 	subseq	r0, r5, r8
    6280:	9b5d0108 	blls	17466a8 <__Stack_Size+0x17462a8>
    6284:	13000006 	movwne	r0, #6	; 0x6
    6288:	00002984 	andeq	r2, r0, r4, lsl #19
    628c:	a0031501 	andge	r1, r3, r1, lsl #10
    6290:	01000002 	tsteq	r0, r2
    6294:	2aa91350 	bcs	fea4afdc <SCS_BASE+0x1ea3cfdc>
    6298:	15010000 	strne	r0, [r1]
    629c:	0000b403 	andeq	fp, r0, r3, lsl #8
    62a0:	00510100 	subseq	r0, r1, r0, lsl #2
    62a4:	2bf60112 	blcs	ffd866f4 <SCS_BASE+0x1fd786f4>
    62a8:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    62ac:	55000103 	strpl	r0, [r0, #-259]
    62b0:	550c0800 	strpl	r0, [ip, #-2048]
    62b4:	5d010800 	stcpl	8, cr0, [r1]
    62b8:	000006e2 	andeq	r0, r0, r2, ror #13
    62bc:	00298413 	eoreq	r8, r9, r3, lsl r4
    62c0:	034d0100 	movteq	r0, #53504	; 0xd100
    62c4:	000002a0 	andeq	r0, r0, r0, lsr #5
    62c8:	ba145001 	blt	51a2d4 <__Stack_Size+0x519ed4>
    62cc:	0100002d 	tsteq	r0, sp, lsr #32
    62d0:	003a034d 	eorseq	r0, sl, sp, asr #6
    62d4:	29900000 	ldmibcs	r0, {}
    62d8:	42190000 	andsmi	r0, r9, #0	; 0x0
    62dc:	0100002b 	tsteq	r0, fp, lsr #32
    62e0:	003a034f 	eorseq	r0, sl, pc, asr #6
    62e4:	29a30000 	stmibcs	r3!, {}
    62e8:	12000000 	andne	r0, r0, #0	; 0x0
    62ec:	002bbe01 	eoreq	fp, fp, r1, lsl #28
    62f0:	036b0100 	cmneq	fp, #0	; 0x0
    62f4:	00550c01 	subseq	r0, r5, r1, lsl #24
    62f8:	00552008 	subseq	r2, r5, r8
    62fc:	175d0108 	ldrbne	r0, [sp, -r8, lsl #2]
    6300:	13000007 	movwne	r0, #7	; 0x7
    6304:	00002984 	andeq	r2, r0, r4, lsl #19
    6308:	a0036a01 	andge	r6, r3, r1, lsl #20
    630c:	01000002 	tsteq	r0, r2
    6310:	2aa91350 	bcs	fea4b058 <SCS_BASE+0x1ea3d058>
    6314:	6a010000 	bvs	4631c <__Stack_Size+0x45f1c>
    6318:	0000b403 	andeq	fp, r0, r3, lsl #8
    631c:	00510100 	subseq	r0, r1, r0, lsl #2
    6320:	2d120112 	ldfcss	f0, [r2, #-72]
    6324:	88010000 	stmdahi	r1, {}
    6328:	55200103 	strpl	r0, [r0, #-259]!
    632c:	55340800 	ldrpl	r0, [r4, #-2048]!
    6330:	5d010800 	stcpl	8, cr0, [r1]
    6334:	0000074c 	andeq	r0, r0, ip, asr #14
    6338:	00298413 	eoreq	r8, r9, r3, lsl r4
    633c:	03870100 	orreq	r0, r7, #0	; 0x0
    6340:	000002a0 	andeq	r0, r0, r0, lsr #5
    6344:	a9135001 	ldmdbge	r3, {r0, ip, lr}
    6348:	0100002a 	tsteq	r0, sl, lsr #32
    634c:	00b40387 	adcseq	r0, r4, r7, lsl #7
    6350:	51010000 	tstpl	r1, r0
    6354:	b4011600 	strlt	r1, [r1], #-1536
    6358:	01000029 	tsteq	r0, r9, lsr #32
    635c:	890103a3 	stmdbhi	r1, {r0, r1, r5, r7, r8, r9}
    6360:	34000000 	strcc	r0, [r0]
    6364:	3e080055 	mcrcc	0, 0, r0, cr8, cr5, {2}
    6368:	01080055 	qaddeq	r0, r5, r8
    636c:	0007855d 	andeq	r8, r7, sp, asr r5
    6370:	29841400 	stmibcs	r4, {sl, ip}
    6374:	a2010000 	andge	r0, r1, #0	; 0x0
    6378:	0002a003 	andeq	sl, r2, r3
    637c:	0029c100 	eoreq	ip, r9, r0, lsl #2
    6380:	2c821700 	stccs	7, cr1, [r2], {0}
    6384:	a4010000 	strge	r0, [r1]
    6388:	00008903 	andeq	r8, r0, r3, lsl #18
    638c:	01180000 	tsteq	r8, r0
    6390:	00002cda 	ldrdeq	r2, [r0], -sl
    6394:	0103e301 	tsteq	r3, r1, lsl #6
    6398:	08005540 	stmdaeq	r0, {r6, r8, sl, ip, lr}
    639c:	080055a2 	stmdaeq	r0, {r1, r5, r7, r8, sl, ip, lr}
    63a0:	000029d4 	ldrdeq	r2, [r0], -r4
    63a4:	00000806 	andeq	r0, r0, r6, lsl #16
    63a8:	00298413 	eoreq	r8, r9, r3, lsl r4
    63ac:	03e20100 	mvneq	r0, #0	; 0x0
    63b0:	000002a0 	andeq	r0, r0, r0, lsr #5
    63b4:	38145001 	ldmdacc	r4, {r0, ip, lr}
    63b8:	0100002c 	tsteq	r0, ip, lsr #32
    63bc:	005e03e2 	subseq	r0, lr, r2, ror #7
    63c0:	29f30000 	ldmibcs	r3!, {}^
    63c4:	49140000 	ldmdbmi	r4, {}
    63c8:	0100002b 	tsteq	r0, fp, lsr #32
    63cc:	005e03e2 	subseq	r0, lr, r2, ror #7
    63d0:	2a270000 	bcs	9c63d8 <__Stack_Size+0x9c5fd8>
    63d4:	f4140000 	undefined instruction 0xf4140000
    63d8:	0100002c 	tsteq	r0, ip, lsr #32
    63dc:	005e03e2 	subseq	r0, lr, r2, ror #7
    63e0:	2a450000 	bcs	11463e8 <__Stack_Size+0x1145fe8>
    63e4:	89190000 	ldmdbhi	r9, {}
    63e8:	01000029 	tsteq	r0, r9, lsr #32
    63ec:	003a03e4 	eorseq	r0, sl, r4, ror #7
    63f0:	2a630000 	bcs	18c63f8 <__Stack_Size+0x18c5ff8>
    63f4:	59170000 	ldmdbpl	r7, {}
    63f8:	0100002c 	tsteq	r0, ip, lsr #32
    63fc:	003a03e4 	eorseq	r0, sl, r4, ror #7
    6400:	61170000 	tstvs	r7, r0
    6404:	0100002c 	tsteq	r0, ip, lsr #32
    6408:	003a03e4 	eorseq	r0, sl, r4, ror #7
    640c:	12000000 	andne	r0, r0, #0	; 0x0
    6410:	002ca501 	eoreq	sl, ip, r1, lsl #10
    6414:	04270100 	strteq	r0, [r7], #-256
    6418:	0055a401 	subseq	sl, r5, r1, lsl #8
    641c:	0055b408 	subseq	fp, r5, r8, lsl #8
    6420:	575d0108 	ldrbpl	r0, [sp, -r8, lsl #2]
    6424:	13000008 	movwne	r0, #8	; 0x8
    6428:	00002984 	andeq	r2, r0, r4, lsl #19
    642c:	a0042601 	andge	r2, r4, r1, lsl #12
    6430:	01000002 	tsteq	r0, r2
    6434:	18321450 	ldmdane	r2!, {r4, r6, sl, ip}
    6438:	26010000 	strcs	r0, [r1], -r0
    643c:	00005e04 	andeq	r5, r0, r4, lsl #28
    6440:	002a8c00 	eoreq	r8, sl, r0, lsl #24
    6444:	29891500 	stmibcs	r9, {r8, sl, ip}
    6448:	28010000 	stmdacs	r1, {}
    644c:	00003a04 	andeq	r3, r0, r4, lsl #20
    6450:	17530100 	ldrbne	r0, [r3, -r0, lsl #2]
    6454:	00002c59 	andeq	r2, r0, r9, asr ip
    6458:	3a042901 	bcc	110864 <__Stack_Size+0x110464>
    645c:	00000000 	andeq	r0, r0, r0
    6460:	2b9d0118 	blcs	fe7468c8 <SCS_BASE+0x1e7388c8>
    6464:	4b010000 	blmi	4646c <__Stack_Size+0x4606c>
    6468:	55b40104 	ldrpl	r0, [r4, #260]!
    646c:	55bc0800 	ldrpl	r0, [ip, #2048]!
    6470:	2a9f0800 	bcs	fe7c8478 <SCS_BASE+0x1e7ba478>
    6474:	089e0000 	ldmeq	lr, {}
    6478:	84140000 	ldrhi	r0, [r4]
    647c:	01000029 	tsteq	r0, r9, lsr #32
    6480:	02a0044a 	adceq	r0, r0, #1241513984	; 0x4a000000
    6484:	2abe0000 	bcs	fef8648c <SCS_BASE+0x1ef7848c>
    6488:	33130000 	tstcc	r3, #0	; 0x0
    648c:	0100002d 	tsteq	r0, sp, lsr #32
    6490:	005e044a 	subseq	r0, lr, sl, asr #8
    6494:	51010000 	tstpl	r1, r0
    6498:	000ea913 	andeq	sl, lr, r3, lsl r9
    649c:	044a0100 	strbeq	r0, [sl], #-256
    64a0:	0000004c 	andeq	r0, r0, ip, asr #32
    64a4:	1b005201 	blne	1acb0 <__Stack_Size+0x1a8b0>
    64a8:	002c1901 	eoreq	r1, ip, r1, lsl #18
    64ac:	04630100 	strbteq	r0, [r3], #-256
    64b0:	00004c01 	andeq	r4, r0, r1, lsl #24
    64b4:	0055bc00 	subseq	fp, r5, r0, lsl #24
    64b8:	0055ca08 	subseq	ip, r5, r8, lsl #20
    64bc:	002ad108 	eoreq	sp, sl, r8, lsl #2
    64c0:	0008db00 	andeq	sp, r8, r0, lsl #22
    64c4:	29841400 	stmibcs	r4, {sl, ip}
    64c8:	62010000 	andvs	r0, r1, #0	; 0x0
    64cc:	0002a004 	andeq	sl, r2, r4
    64d0:	002af000 	eoreq	pc, sl, r0
    64d4:	2d331300 	ldccs	3, cr1, [r3]
    64d8:	62010000 	andvs	r0, r1, #0	; 0x0
    64dc:	00005e04 	andeq	r5, r0, r4, lsl #28
    64e0:	00510100 	subseq	r0, r1, r0, lsl #2
    64e4:	29910112 	ldmibcs	r1, {r1, r4, r8}
    64e8:	85010000 	strhi	r0, [r1]
    64ec:	55cc0104 	strbpl	r0, [ip, #260]
    64f0:	55dc0800 	ldrbpl	r0, [ip, #2048]
    64f4:	5d010800 	stcpl	8, cr0, [r1]
    64f8:	00000922 	andeq	r0, r0, r2, lsr #18
    64fc:	00298413 	eoreq	r8, r9, r3, lsl r4
    6500:	04840100 	streq	r0, [r4], #256
    6504:	000002a0 	andeq	r0, r0, r0, lsr #5
    6508:	c7145001 	ldrgt	r5, [r4, -r1]
    650c:	0100002c 	tsteq	r0, ip, lsr #32
    6510:	003a0484 	eorseq	r0, sl, r4, lsl #9
    6514:	2b030000 	blcs	c651c <__Stack_Size+0xc611c>
    6518:	42190000 	andsmi	r0, r9, #0	; 0x0
    651c:	0100002b 	tsteq	r0, fp, lsr #32
    6520:	003a0486 	eorseq	r0, sl, r6, lsl #9
    6524:	2b160000 	blcs	58652c <__Stack_Size+0x58612c>
    6528:	12000000 	andne	r0, r0, #0	; 0x0
    652c:	002a4901 	eoreq	r4, sl, r1, lsl #18
    6530:	04a30100 	strteq	r0, [r3], #256
    6534:	0055dc01 	subseq	sp, r5, r1, lsl #24
    6538:	0055e208 	subseq	lr, r5, r8, lsl #4
    653c:	655d0108 	ldrbvs	r0, [sp, #-264]
    6540:	13000009 	movwne	r0, #9	; 0x9
    6544:	00002984 	andeq	r2, r0, r4, lsl #19
    6548:	a004a101 	andge	sl, r4, r1, lsl #2
    654c:	01000002 	tsteq	r0, r2
    6550:	2afe1350 	bcs	fff8b298 <SCS_BASE+0x1ff7d298>
    6554:	a1010000 	tstge	r1, r0
    6558:	00004c04 	andeq	r4, r0, r4, lsl #24
    655c:	13510100 	cmpne	r1, #0	; 0x0
    6560:	000029de 	ldrdeq	r2, [r0], -lr
    6564:	4c04a201 	sfmmi	f2, 1, [r4], {1}
    6568:	01000000 	tsteq	r0, r0
    656c:	01120052 	tsteq	r2, r2, asr r0
    6570:	00002ab2 	strheq	r2, [r0], -r2
    6574:	0104cc01 	tsteq	r4, r1, lsl #24
    6578:	080055e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, ip, lr}
    657c:	080055f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, ip, lr}
    6580:	09ac5d01 	stmibeq	ip!, {r0, r8, sl, fp, ip, lr}
    6584:	84130000 	ldrhi	r0, [r3]
    6588:	01000029 	tsteq	r0, r9, lsr #32
    658c:	02a004cb 	adceq	r0, r0, #-889192448	; 0xcb000000
    6590:	50010000 	andpl	r0, r1, r0
    6594:	002c3814 	eoreq	r3, ip, r4, lsl r8
    6598:	04cb0100 	strbeq	r0, [fp], #256
    659c:	0000005e 	andeq	r0, r0, lr, asr r0
    65a0:	00002b34 	andeq	r2, r0, r4, lsr fp
    65a4:	002b4219 	eoreq	r4, fp, r9, lsl r2
    65a8:	04cd0100 	strbeq	r0, [sp], #256
    65ac:	0000003a 	andeq	r0, r0, sl, lsr r0
    65b0:	00002b47 	andeq	r2, r0, r7, asr #22
    65b4:	59011200 	stmdbpl	r1, {r9, ip}
    65b8:	0100002d 	tsteq	r0, sp, lsr #32
    65bc:	f00104e6 	undefined instruction 0xf00104e6
    65c0:	0c080055 	stceq	0, cr0, [r8], {85}
    65c4:	01080056 	qaddeq	r0, r6, r8
    65c8:	0009d35d 	andeq	sp, r9, sp, asr r3
    65cc:	2aa91300 	bcs	fea4b1d4 <SCS_BASE+0x1ea3d1d4>
    65d0:	e5010000 	str	r0, [r1]
    65d4:	0000b404 	andeq	fp, r0, r4, lsl #8
    65d8:	00500100 	subseq	r0, r0, r0, lsl #2
    65dc:	2d470116 	stfcse	f0, [r7, #-88]
    65e0:	05010000 	streq	r0, [r1]
    65e4:	00890105 	addeq	r0, r9, r5, lsl #2
    65e8:	560c0000 	strpl	r0, [ip], -r0
    65ec:	56180800 	ldrpl	r0, [r8], -r0, lsl #16
    65f0:	5d010800 	stcpl	8, cr0, [r1]
    65f4:	00000a1a 	andeq	r0, r0, sl, lsl sl
    65f8:	00298414 	eoreq	r8, r9, r4, lsl r4
    65fc:	05040100 	streq	r0, [r4, #-256]
    6600:	000002a0 	andeq	r0, r0, r0, lsr #5
    6604:	00002b65 	andeq	r2, r0, r5, ror #22
    6608:	002aa013 	eoreq	sl, sl, r3, lsl r0
    660c:	05040100 	streq	r0, [r4, #-256]
    6610:	0000005e 	andeq	r0, r0, lr, asr r0
    6614:	82175101 	andshi	r5, r7, #1073741824	; 0x40000000
    6618:	0100002c 	tsteq	r0, ip, lsr #32
    661c:	00890506 	addeq	r0, r9, r6, lsl #10
    6620:	12000000 	andne	r0, r0, #0	; 0x0
    6624:	0029eb01 	eoreq	lr, r9, r1, lsl #22
    6628:	052b0100 	streq	r0, [fp, #-256]!
    662c:	00561801 	subseq	r1, r6, r1, lsl #16
    6630:	00562008 	subseq	r2, r6, r8
    6634:	515d0108 	cmppl	sp, r8, lsl #2
    6638:	1300000a 	movwne	r0, #10	; 0xa
    663c:	00002984 	andeq	r2, r0, r4, lsl #19
    6640:	a0052a01 	andge	r2, r5, r1, lsl #20
    6644:	01000002 	tsteq	r0, r2
    6648:	2aa01450 	bcs	fe80b790 <SCS_BASE+0x1e7fd790>
    664c:	2a010000 	bcs	46654 <__Stack_Size+0x46254>
    6650:	00005e05 	andeq	r5, r0, r5, lsl #28
    6654:	002b7800 	eoreq	r7, fp, r0, lsl #16
    6658:	01160000 	tsteq	r6, r0
    665c:	000029f9 	strdeq	r2, [r0], -r9
    6660:	01054101 	tsteq	r5, r1, lsl #2
    6664:	00000094 	muleq	r0, r4, r0
    6668:	08005620 	stmdaeq	r0, {r5, r9, sl, ip, lr}
    666c:	0800563a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sl, ip, lr}
    6670:	0ab65d01 	beq	fed9da7c <SCS_BASE+0x1ed8fa7c>
    6674:	84140000 	ldrhi	r0, [r4]
    6678:	01000029 	tsteq	r0, r9, lsr #32
    667c:	02a00540 	adceq	r0, r0, #268435456	; 0x10000000
    6680:	2b8b0000 	blcs	fe2c6688 <SCS_BASE+0x1e2b8688>
    6684:	97140000 	ldrls	r0, [r4, -r0]
    6688:	0100002d 	tsteq	r0, sp, lsr #32
    668c:	004c0540 	subeq	r0, ip, r0, asr #10
    6690:	2ba90000 	blcs	fea46698 <SCS_BASE+0x1ea38698>
    6694:	82190000 	andshi	r0, r9, #0	; 0x0
    6698:	0100002c 	tsteq	r0, ip, lsr #32
    669c:	00940542 	addseq	r0, r4, r2, asr #10
    66a0:	2bc70000 	blcs	ff1c66a8 <SCS_BASE+0x1f1b86a8>
    66a4:	9e170000 	wxorls	wr0, wr7, wr0
    66a8:	0100002d 	tsteq	r0, sp, lsr #32
    66ac:	003a0543 	eorseq	r0, sl, r3, asr #10
    66b0:	f1170000 	undefined instruction 0xf1170000
    66b4:	0100002a 	tsteq	r0, sl, lsr #32
    66b8:	003a0543 	eorseq	r0, sl, r3, asr #10
    66bc:	12000000 	andne	r0, r0, #0	; 0x0
    66c0:	002a6c01 	eoreq	r6, sl, r1, lsl #24
    66c4:	056c0100 	strbeq	r0, [ip, #-256]!
    66c8:	00563c01 	subseq	r3, r6, r1, lsl #24
    66cc:	00564408 	subseq	r4, r6, r8, lsl #8
    66d0:	f95d0108 	undefined instruction 0xf95d0108
    66d4:	1300000a 	movwne	r0, #10	; 0xa
    66d8:	00002984 	andeq	r2, r0, r4, lsl #19
    66dc:	a0056b01 	andge	r6, r5, r1, lsl #22
    66e0:	01000002 	tsteq	r0, r2
    66e4:	2d971450 	cfldrscs	mvf1, [r7, #320]
    66e8:	6b010000 	blvs	466f0 <__Stack_Size+0x462f0>
    66ec:	00004c05 	andeq	r4, r0, r5, lsl #24
    66f0:	002be500 	eoreq	lr, fp, r0, lsl #10
    66f4:	2d9e1700 	ldccs	7, cr1, [lr]
    66f8:	6d010000 	stcvs	0, cr0, [r1]
    66fc:	00005e05 	andeq	r5, r0, r5, lsl #28
    6700:	011c0000 	tsteq	ip, r0
    6704:	00002bb3 	strheq	r2, [r0], -r3
    6708:	44018301 	strmi	r8, [r1], #-769
    670c:	9c080056 	stcls	0, cr0, [r8], {86}
    6710:	f8080056 	undefined instruction 0xf8080056
    6714:	1d00002b 	stcne	0, cr0, [r0, #-172]
    6718:	00002984 	andeq	r2, r0, r4, lsl #19
    671c:	02a08201 	adceq	r8, r0, #268435456	; 0x10000000
    6720:	2c230000 	stccs	0, cr0, [r3]
    6724:	00000000 	andeq	r0, r0, r0
    6728:	00000736 	andeq	r0, r0, r6, lsr r7
    672c:	19f60002 	ldmibne	r6!, {r1}^
    6730:	01040000 	tsteq	r4, r0
    6734:	000001c6 	andeq	r0, r0, r6, asr #3
    6738:	002f8001 	eoreq	r8, pc, r1
    673c:	00039d00 	andeq	r9, r3, r0, lsl #26
    6740:	00569c00 	subseq	r9, r6, r0, lsl #24
    6744:	005bc408 	subseq	ip, fp, r8, lsl #8
    6748:	001aa908 	andseq	sl, sl, r8, lsl #18
    674c:	05040200 	streq	r0, [r4, #-512]
    6750:	00004178 	andeq	r4, r0, r8, ror r1
    6754:	95050202 	strls	r0, [r5, #-514]
    6758:	02000004 	andeq	r0, r0, #4	; 0x4
    675c:	04690601 	strbteq	r0, [r9], #-1537
    6760:	75030000 	strvc	r0, [r3]
    6764:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    6768:	00004527 	andeq	r4, r0, r7, lsr #10
    676c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6770:	000041f2 	strdeq	r4, [r0], -r2
    6774:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    6778:	57280200 	strpl	r0, [r8, -r0, lsl #4]!
    677c:	02000000 	andeq	r0, r0, #0	; 0x0
    6780:	02220702 	eoreq	r0, r2, #524288	; 0x80000
    6784:	75030000 	strvc	r0, [r3]
    6788:	29020038 	stmdbcs	r2, {r3, r4, r5}
    678c:	00000068 	andeq	r0, r0, r8, rrx
    6790:	67080102 	strvs	r0, [r8, -r2, lsl #2]
    6794:	04000004 	streq	r0, [r0], #-4
    6798:	00000045 	andeq	r0, r0, r5, asr #32
    679c:	00005704 	andeq	r5, r0, r4, lsl #14
    67a0:	02010500 	andeq	r0, r1, #0	; 0x0
    67a4:	00008e3a 	andeq	r8, r0, sl, lsr lr
    67a8:	0ebd0600 	cdpeq	6, 11, cr0, cr13, cr0, {0}
    67ac:	07000000 	streq	r0, [r0, -r0]
    67b0:	00544553 	subseq	r4, r4, r3, asr r5
    67b4:	17080001 	strne	r0, [r8, -r1]
    67b8:	0200003b 	andeq	r0, r0, #59	; 0x3b
    67bc:	0000793a 	andeq	r7, r0, sl, lsr r9
    67c0:	02010500 	andeq	r0, r1, #0	; 0x0
    67c4:	0000ae3c 	andeq	sl, r0, ip, lsr lr
    67c8:	21a70600 	undefined instruction 0x21a70600
    67cc:	06000000 	streq	r0, [r0], -r0
    67d0:	00000439 	andeq	r0, r0, r9, lsr r4
    67d4:	8c080001 	stchi	0, cr0, [r8], {1}
    67d8:	02000026 	andeq	r0, r0, #38	; 0x26
    67dc:	0000993c 	andeq	r9, r0, ip, lsr r9
    67e0:	07040900 	streq	r0, [r4, -r0, lsl #18]
    67e4:	0d03240a 	cfstrseq	mvf2, [r3, #-40]
    67e8:	00014a01 	andeq	r4, r1, r1, lsl #20
    67ec:	43410b00 	movtmi	r0, #6912	; 0x1b00
    67f0:	0e030052 	mcreq	0, 0, r0, cr3, cr2, {2}
    67f4:	00006f01 	andeq	r6, r0, r1, lsl #30
    67f8:	00230200 	eoreq	r0, r3, r0, lsl #4
    67fc:	002f0b0c 	eoreq	r0, pc, ip, lsl #22
    6800:	010f0300 	tsteq	pc, r0, lsl #6
    6804:	0000006f 	andeq	r0, r0, pc, rrx
    6808:	0c042302 	stceq	3, cr2, [r4], {2}
    680c:	00002f08 	andeq	r2, r0, r8, lsl #30
    6810:	6f011003 	svcvs	0x00011003
    6814:	02000000 	andeq	r0, r0, #0	; 0x0
    6818:	530b0823 	movwpl	r0, #47139	; 0xb823
    681c:	11030052 	qaddne	r0, r2, r3
    6820:	00006f01 	andeq	r6, r0, r1, lsl #30
    6824:	0c230200 	sfmeq	f0, 4, [r3]
    6828:	0052430b 	subseq	r4, r2, fp, lsl #6
    682c:	6f011203 	svcvs	0x00011203
    6830:	02000000 	andeq	r0, r0, #0	; 0x0
    6834:	410b1023 	tstmi	fp, r3, lsr #32
    6838:	13030052 	movwne	r0, #12370	; 0x3052
    683c:	00006f01 	andeq	r6, r0, r1, lsl #30
    6840:	14230200 	strtne	r0, [r3], #-512
    6844:	0031470c 	eorseq	r4, r1, ip, lsl #14
    6848:	01140300 	tsteq	r4, r0, lsl #6
    684c:	0000006f 	andeq	r0, r0, pc, rrx
    6850:	0b182302 	bleq	60f460 <__Stack_Size+0x60f060>
    6854:	0052424f 	subseq	r4, r2, pc, asr #4
    6858:	6f011503 	svcvs	0x00011503
    685c:	02000000 	andeq	r0, r0, #0	; 0x0
    6860:	9e0c1c23 	cdpls	12, 0, cr1, cr12, cr3, {1}
    6864:	0300002e 	movweq	r0, #46	; 0x2e
    6868:	006f0116 	rsbeq	r0, pc, r6, lsl r1
    686c:	23020000 	movwcs	r0, #8192	; 0x2000
    6870:	100a0020 	andne	r0, sl, r0, lsr #32
    6874:	cc011a03 	stcgt	10, cr1, [r1], {3}
    6878:	0b000001 	bleq	6884 <__Stack_Size+0x6484>
    687c:	00504452 	subseq	r4, r0, r2, asr r4
    6880:	74011b03 	strvc	r1, [r1], #-2819
    6884:	02000000 	andeq	r0, r0, #0	; 0x0
    6888:	0f0c0023 	svceq	0x000c0023
    688c:	03000031 	movweq	r0, #49	; 0x31
    6890:	0074011c 	rsbseq	r0, r4, ip, lsl r1
    6894:	23020000 	movwcs	r0, #8192	; 0x2000
    6898:	31140c02 	tstcc	r4, r2, lsl #24
    689c:	1d030000 	stcne	0, cr0, [r3]
    68a0:	00007401 	andeq	r7, r0, r1, lsl #8
    68a4:	04230200 	strteq	r0, [r3], #-512
    68a8:	00311a0c 	eorseq	r1, r1, ip, lsl #20
    68ac:	011e0300 	tsteq	lr, r0, lsl #6
    68b0:	00000074 	andeq	r0, r0, r4, ror r0
    68b4:	0c062302 	stceq	3, cr2, [r6], {2}
    68b8:	00002ed1 	ldrdeq	r2, [r0], -r1
    68bc:	74011f03 	strvc	r1, [r1], #-3843
    68c0:	02000000 	andeq	r0, r0, #0	; 0x0
    68c4:	d60c0823 	strle	r0, [ip], -r3, lsr #16
    68c8:	0300002e 	movweq	r0, #46	; 0x2e
    68cc:	00740120 	rsbseq	r0, r4, r0, lsr #2
    68d0:	23020000 	movwcs	r0, #8192	; 0x2000
    68d4:	2edb0c0a 	cdpcs	12, 13, cr0, cr11, cr10, {0}
    68d8:	21030000 	tstcs	r3, r0
    68dc:	00007401 	andeq	r7, r0, r1, lsl #8
    68e0:	0c230200 	sfmeq	f0, 4, [r3]
    68e4:	002ee00c 	eoreq	lr, lr, ip
    68e8:	01220300 	teqeq	r2, r0, lsl #6
    68ec:	00000074 	andeq	r0, r0, r4, ror r0
    68f0:	000e2302 	andeq	r2, lr, r2, lsl #6
    68f4:	1d040105 	stfnes	f0, [r4, #-20]
    68f8:	000001f3 	strdeq	r0, [r0], -r3
    68fc:	002fef06 	eoreq	lr, pc, r6, lsl #30
    6900:	5c060100 	stfpls	f0, [r6], {0}
    6904:	0200002f 	andeq	r0, r0, #47	; 0x2f
    6908:	002e4c06 	eoreq	r4, lr, r6, lsl #24
    690c:	e0060300 	and	r0, r6, r0, lsl #6
    6910:	0400002f 	streq	r0, [r0], #-47
    6914:	00300406 	eorseq	r0, r0, r6, lsl #8
    6918:	08000500 	stmdaeq	r0, {r8, sl}
    691c:	00002ec4 	andeq	r2, r0, r4, asr #29
    6920:	01cc2304 	biceq	r2, ip, r4, lsl #6
    6924:	010d0000 	tsteq	sp, r0
    6928:	00003064 	andeq	r3, r0, r4, rrx
    692c:	01034001 	tsteq	r3, r1
    6930:	000001f3 	strdeq	r0, [r0], -r3
    6934:	00021e01 	andeq	r1, r2, r1, lsl #28
    6938:	2f430e00 	svccs	0x00430e00
    693c:	41010000 	tstmi	r1, r0
    6940:	0001f303 	andeq	pc, r1, r3, lsl #6
    6944:	980f0000 	stmdals	pc, {}
    6948:	0100002e 	tsteq	r0, lr, lsr #32
    694c:	01010386 	smlabbeq	r1, r6, r3, r0
    6950:	00000237 	andeq	r0, r0, r7, lsr r2
    6954:	01006910 	tsteq	r0, r0, lsl r9
    6958:	006f0387 	rsbeq	r0, pc, r7, lsl #7
    695c:	11000000 	tstne	r0, r0
    6960:	00309001 	eorseq	r9, r0, r1
    6964:	01570100 	cmpeq	r7, r0, lsl #2
    6968:	0800569c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip, lr}
    696c:	080056b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, ip, lr}
    6970:	025e5d01 	subseq	r5, lr, #64	; 0x40
    6974:	6c120000 	ldcvs	0, cr0, [r2], {0}
    6978:	0100002e 	tsteq	r0, lr, lsr #32
    697c:	00003a56 	andeq	r3, r0, r6, asr sl
    6980:	002c4200 	eoreq	r4, ip, r0, lsl #4
    6984:	01110000 	tsteq	r1, r0
    6988:	000030a1 	andeq	r3, r0, r1, lsr #1
    698c:	b4016b01 	strlt	r6, [r1], #-2817
    6990:	cc080056 	stcgt	0, cr0, [r8], {86}
    6994:	01080056 	qaddeq	r0, r6, r8
    6998:	0002855d 	andeq	r8, r2, sp, asr r5
    699c:	304e1200 	subcc	r1, lr, r0, lsl #4
    69a0:	6a010000 	bvs	469a8 <__Stack_Size+0x465a8>
    69a4:	0000003a 	andeq	r0, r0, sl, lsr r0
    69a8:	00002c55 	andeq	r2, r0, r5, asr ip
    69ac:	a4011100 	strge	r1, [r1], #-256
    69b0:	0100002f 	tsteq	r0, pc, lsr #32
    69b4:	56cc017f 	undefined
    69b8:	56e40800 	strbtpl	r0, [r4], r0, lsl #16
    69bc:	5d010800 	stcpl	8, cr0, [r1]
    69c0:	000002ac 	andeq	r0, r0, ip, lsr #5
    69c4:	00316b12 	eorseq	r6, r1, r2, lsl fp
    69c8:	3a7e0100 	bcc	1f86dd0 <__Stack_Size+0x1f869d0>
    69cc:	68000000 	stmdavs	r0, {}
    69d0:	0000002c 	andeq	r0, r0, ip, lsr #32
    69d4:	2ea30113 	mcrcs	1, 5, r0, cr3, cr3, {0}
    69d8:	91010000 	tstls	r1, r0
    69dc:	0056e401 	subseq	lr, r6, r1, lsl #8
    69e0:	0056fc08 	subseq	pc, r6, r8, lsl #24
    69e4:	135d0108 	cmpne	sp, #2	; 0x2
    69e8:	002f6b01 	eoreq	r6, pc, r1, lsl #22
    69ec:	019f0100 	orrseq	r0, pc, r0, lsl #2
    69f0:	080056fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, ip, lr}
    69f4:	0800570c 	stmdaeq	r0, {r2, r3, r8, r9, sl, ip, lr}
    69f8:	01145d01 	tsteq	r4, r1, lsl #26
    69fc:	000030d6 	ldrdeq	r3, [r0], -r6
    6a00:	01029701 	tsteq	r2, r1, lsl #14
    6a04:	0000003a 	andeq	r0, r0, sl, lsr r0
    6a08:	0800570c 	stmdaeq	r0, {r2, r3, r8, r9, sl, ip, lr}
    6a0c:	08005718 	stmdaeq	r0, {r3, r4, r8, r9, sl, ip, lr}
    6a10:	01145d01 	tsteq	r4, r1, lsl #26
    6a14:	00002ee5 	andeq	r2, r0, r5, ror #29
    6a18:	0102a401 	tsteq	r2, r1, lsl #8
    6a1c:	0000003a 	andeq	r0, r0, sl, lsr r0
    6a20:	08005718 	stmdaeq	r0, {r3, r4, r8, r9, sl, ip, lr}
    6a24:	08005724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip, lr}
    6a28:	01155d01 	tsteq	r5, r1, lsl #26
    6a2c:	0000301a 	andeq	r3, r0, sl, lsl r0
    6a30:	0102b201 	tsteq	r2, r1, lsl #4
    6a34:	0000008e 	andeq	r0, r0, lr, lsl #1
    6a38:	08005724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip, lr}
    6a3c:	08005734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, ip, lr}
    6a40:	032b5d01 	teqeq	fp, #64	; 0x40
    6a44:	3e0e0000 	cdpcc	0, 0, cr0, cr14, cr0, {0}
    6a48:	0100002e 	tsteq	r0, lr, lsr #32
    6a4c:	008e02b3 	strheq	r0, [lr], r3
    6a50:	15000000 	strne	r0, [r0]
    6a54:	002e7a01 	eoreq	r7, lr, r1, lsl #20
    6a58:	02c80100 	sbceq	r0, r8, #0	; 0x0
    6a5c:	00008e01 	andeq	r8, r0, r1, lsl #28
    6a60:	00573400 	subseq	r3, r7, r0, lsl #8
    6a64:	00574408 	subseq	r4, r7, r8, lsl #8
    6a68:	545d0108 	ldrbpl	r0, [sp], #-264
    6a6c:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    6a70:	00002c82 	andeq	r2, r0, r2, lsl #25
    6a74:	8e02c901 	cdphi	9, 0, cr12, cr2, cr1, {0}
    6a78:	00000000 	andeq	r0, r0, r0
    6a7c:	2dfe0116 	ldfcse	f0, [lr, #88]!
    6a80:	e3010000 	movw	r0, #4096	; 0x1000
    6a84:	57440102 	strbpl	r0, [r4, -r2, lsl #2]
    6a88:	57600800 	strbpl	r0, [r0, -r0, lsl #16]!
    6a8c:	5d010800 	stcpl	8, cr0, [r1]
    6a90:	00000389 	andeq	r0, r0, r9, lsl #7
    6a94:	00312c17 	eorseq	r2, r1, r7, lsl ip
    6a98:	02e20100 	rsceq	r0, r2, #0	; 0x0
    6a9c:	0000004c 	andeq	r0, r0, ip, asr #32
    6aa0:	a9175001 	ldmdbge	r7, {r0, ip, lr}
    6aa4:	0100002a 	tsteq	r0, sl, lsr #32
    6aa8:	00ae02e2 	adceq	r0, lr, r2, ror #5
    6aac:	51010000 	tstpl	r1, r0
    6ab0:	bc011500 	cfstr32lt	mvfx1, [r1], {0}
    6ab4:	0100002f 	tsteq	r0, pc, lsr #32
    6ab8:	8e010302 	cdphi	3, 0, cr0, cr1, cr2, {0}
    6abc:	60000000 	andvs	r0, r0, r0
    6ac0:	80080057 	andhi	r0, r8, r7, asr r0
    6ac4:	01080057 	qaddeq	r0, r7, r8
    6ac8:	0003c65d 	andeq	ip, r3, sp, asr r6
    6acc:	31041800 	tstcc	r4, r0, lsl #16
    6ad0:	01010000 	tsteq	r1, r0
    6ad4:	00004c03 	andeq	r4, r0, r3, lsl #24
    6ad8:	002c7b00 	eoreq	r7, ip, r0, lsl #22
    6adc:	2c821900 	stccs	9, cr1, [r2], {0}
    6ae0:	03010000 	movweq	r0, #4096	; 0x1000
    6ae4:	00008e03 	andeq	r8, r0, r3, lsl #28
    6ae8:	002c9900 	eoreq	r9, ip, r0, lsl #18
    6aec:	01160000 	tsteq	r6, r0
    6af0:	00002fd0 	ldrdeq	r2, [r0], -r0
    6af4:	01032f01 	tsteq	r3, r1, lsl #30
    6af8:	08005780 	stmdaeq	r0, {r7, r8, r9, sl, ip, lr}
    6afc:	0800578c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, ip, lr}
    6b00:	03ed5d01 	mvneq	r5, #64	; 0x40
    6b04:	04170000 	ldreq	r0, [r7]
    6b08:	01000031 	tsteq	r0, r1, lsr r0
    6b0c:	004c032e 	subeq	r0, ip, lr, lsr #6
    6b10:	50010000 	andpl	r0, r1, r0
    6b14:	01fe1a00 	mvnseq	r1, r0, lsl #20
    6b18:	578c0000 	strpl	r0, [ip, r0]
    6b1c:	57b80800 	ldrpl	r0, [r8, r0, lsl #16]!
    6b20:	5d010800 	stcpl	8, cr0, [r1]
    6b24:	0000040a 	andeq	r0, r0, sl, lsl #8
    6b28:	0002111b 	andeq	r1, r2, fp, lsl r1
    6b2c:	002cb700 	eoreq	fp, ip, r0, lsl #14
    6b30:	011c0000 	tsteq	ip, r0
    6b34:	00003150 	andeq	r3, r0, r0, asr r1
    6b38:	01036701 	tsteq	r3, r1, lsl #14
    6b3c:	000001f3 	strdeq	r0, [r0], -r3
    6b40:	080057b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, ip, lr}
    6b44:	0800584c 	stmdaeq	r0, {r2, r3, r6, fp, ip, lr}
    6b48:	00002ce0 	andeq	r2, r0, r0, ror #25
    6b4c:	0000049d 	muleq	r0, sp, r4
    6b50:	00301218 	eorseq	r1, r0, r8, lsl r2
    6b54:	03660100 	cmneq	r6, #0	; 0x0
    6b58:	0000003a 	andeq	r0, r0, sl, lsr r0
    6b5c:	00002d0b 	andeq	r2, r0, fp, lsl #26
    6b60:	002af719 	eoreq	pc, sl, r9, lsl r7
    6b64:	03680100 	cmneq	r8, #0	; 0x0
    6b68:	000001f3 	strdeq	r0, [r0], -r3
    6b6c:	00002d29 	andeq	r2, r0, r9, lsr #26
    6b70:	0001fe1d 	andeq	pc, r1, sp, lsl lr
    6b74:	00011800 	andeq	r1, r1, r0, lsl #16
    6b78:	036b0100 	cmneq	fp, #0	; 0x0
    6b7c:	00000464 	andeq	r0, r0, r4, ror #8
    6b80:	0001381e 	andeq	r3, r1, lr, lsl r8
    6b84:	02111f00 	andseq	r1, r1, #0	; 0x0
    6b88:	00000000 	andeq	r0, r0, r0
    6b8c:	00021e1d 	andeq	r1, r2, sp, lsl lr
    6b90:	00015800 	andeq	r5, r1, r0, lsl #16
    6b94:	03700100 	cmneq	r0, #0	; 0x0
    6b98:	00000484 	andeq	r0, r0, r4, lsl #9
    6b9c:	0001701e 	andeq	r7, r1, lr, lsl r0
    6ba0:	022c1b00 	eoreq	r1, ip, #0	; 0x0
    6ba4:	2d520000 	ldclcs	0, cr0, [r2]
    6ba8:	00000000 	andeq	r0, r0, r0
    6bac:	0001fe20 	andeq	pc, r1, r0, lsr #28
    6bb0:	00018800 	andeq	r8, r1, r0, lsl #16
    6bb4:	03710100 	cmneq	r1, #0	; 0x0
    6bb8:	0001a01e 	andeq	sl, r1, lr, lsl r0
    6bbc:	02111f00 	andseq	r1, r1, #0	; 0x0
    6bc0:	00000000 	andeq	r0, r0, r0
    6bc4:	10011c00 	andne	r1, r1, r0, lsl #24
    6bc8:	0100002f 	tsteq	r0, pc, lsr #32
    6bcc:	f301026b 	vhsub.u8	q0, <illegal reg q0.5>, <illegal reg q13.5>
    6bd0:	4c000001 	stcmi	0, cr0, [r0], {1}
    6bd4:	a8080058 	stmdage	r8, {r3, r4, r6}
    6bd8:	a2080058 	andge	r0, r8, #88	; 0x58
    6bdc:	fc00002d 	stc2	0, cr0, [r0], {45}
    6be0:	18000004 	stmdane	r0, {r2}
    6be4:	00002e0d 	andeq	r2, r0, sp, lsl #28
    6be8:	4c026a01 	stcmi	10, cr6, [r2], {1}
    6bec:	cd000000 	stcgt	0, cr0, [r0]
    6bf0:	1800002d 	stmdane	r0, {r0, r2, r3, r5}
    6bf4:	00002e1f 	andeq	r2, r0, pc, lsl lr
    6bf8:	4c026a01 	stcmi	10, cr6, [r2], {1}
    6bfc:	eb000000 	bl	6c04 <__Stack_Size+0x6804>
    6c00:	1800002d 	stmdane	r0, {r0, r2, r3, r5}
    6c04:	0000303b 	andeq	r3, r0, fp, lsr r0
    6c08:	4c026a01 	stcmi	10, cr6, [r2], {1}
    6c0c:	09000000 	stmdbeq	r0, {}
    6c10:	1900002e 	stmdbne	r0, {r1, r2, r3, r5}
    6c14:	00002af7 	strdeq	r2, [r0], -r7
    6c18:	f3026c01 	undefined instruction 0xf3026c01
    6c1c:	27000001 	strcs	r0, [r0, -r1]
    6c20:	0000002e 	andeq	r0, r0, lr, lsr #32
    6c24:	2f2b011c 	svccs	0x002b011c
    6c28:	1a010000 	bne	46c30 <__Stack_Size+0x46830>
    6c2c:	01f30102 	mvnseq	r0, r2, lsl #2
    6c30:	58a80000 	stmiapl	r8!, {}
    6c34:	59440800 	stmdbpl	r4, {fp}^
    6c38:	2e450800 	cdpcs	8, 4, cr0, cr5, cr0, {0}
    6c3c:	053b0000 	ldreq	r0, [fp]!
    6c40:	a9180000 	ldmdbge	r8, {}
    6c44:	0100002a 	tsteq	r0, sl, lsr #32
    6c48:	00ae0219 	adceq	r0, lr, r9, lsl r2
    6c4c:	2e700000 	cdpcs	0, 7, cr0, cr0, cr0, {0}
    6c50:	f7190000 	undefined instruction 0xf7190000
    6c54:	0100002a 	tsteq	r0, sl, lsr #32
    6c58:	01f3021b 	mvnseq	r0, fp, lsl r2
    6c5c:	2e8e0000 	cdpcs	0, 8, cr0, cr14, cr0, {0}
    6c60:	1c000000 	stcne	0, cr0, [r0], {0}
    6c64:	00307401 	eorseq	r7, r0, r1, lsl #8
    6c68:	01cb0100 	biceq	r0, fp, r0, lsl #2
    6c6c:	0001f301 	andeq	pc, r1, r1, lsl #6
    6c70:	00594400 	subseq	r4, r9, r0, lsl #8
    6c74:	005a0408 	subseq	r0, sl, r8, lsl #8
    6c78:	002eb708 	eoreq	fp, lr, r8, lsl #14
    6c7c:	0005ba00 	andeq	fp, r5, r0, lsl #20
    6c80:	31201800 	teqcc	r0, r0, lsl #16
    6c84:	ca010000 	bgt	46c8c <__Stack_Size+0x4688c>
    6c88:	00003a01 	andeq	r3, r0, r1, lsl #20
    6c8c:	002ed600 	eoreq	sp, lr, r0, lsl #12
    6c90:	30441900 	subcc	r1, r4, r0, lsl #18
    6c94:	cc010000 	stcgt	0, cr0, [r1], {0}
    6c98:	00004c01 	andeq	r4, r0, r1, lsl #24
    6c9c:	002ef400 	eoreq	pc, lr, r0, lsl #8
    6ca0:	2ffa1900 	svccs	0x00fa1900
    6ca4:	cc010000 	stcgt	0, cr0, [r1], {0}
    6ca8:	00004c01 	andeq	r4, r0, r1, lsl #24
    6cac:	002f3300 	eoreq	r3, pc, r0, lsl #6
    6cb0:	2e151900 	cdpcs	9, 1, cr1, cr5, cr0, {0}
    6cb4:	cc010000 	stcgt	0, cr0, [r1], {0}
    6cb8:	00004c01 	andeq	r4, r0, r1, lsl #24
    6cbc:	002f5100 	eoreq	r5, pc, r0, lsl #2
    6cc0:	2f761900 	svccs	0x00761900
    6cc4:	cc010000 	stcgt	0, cr0, [r1], {0}
    6cc8:	00004c01 	andeq	r4, r0, r1, lsl #24
    6ccc:	002f6f00 	eoreq	r6, pc, r0, lsl #30
    6cd0:	2af71900 	bcs	ffdcd0d8 <SCS_BASE+0x1fdbf0d8>
    6cd4:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    6cd8:	0001f301 	andeq	pc, r1, r1, lsl #6
    6cdc:	002f8d00 	eoreq	r8, pc, r0, lsl #26
    6ce0:	011c0000 	tsteq	ip, r0
    6ce4:	000030ba 	strheq	r3, [r0], -sl
    6ce8:	01019a01 	tsteq	r1, r1, lsl #20
    6cec:	000001f3 	strdeq	r0, [r0], -r3
    6cf0:	08005a04 	stmdaeq	r0, {r2, r9, fp, ip, lr}
    6cf4:	08005a48 	stmdaeq	r0, {r3, r6, r9, fp, ip, lr}
    6cf8:	00002fcc 	andeq	r2, r0, ip, asr #31
    6cfc:	00000609 	andeq	r0, r0, r9, lsl #12
    6d00:	003fa518 	eorseq	sl, pc, r8, lsl r5
    6d04:	01990100 	orrseq	r0, r9, r0, lsl #2
    6d08:	0000003a 	andeq	r0, r0, sl, lsr r0
    6d0c:	00002feb 	andeq	r2, r0, fp, ror #31
    6d10:	00304918 	eorseq	r4, r0, r8, lsl r9
    6d14:	01990100 	orrseq	r0, r9, r0, lsl #2
    6d18:	0000005e 	andeq	r0, r0, lr, asr r0
    6d1c:	00003009 	andeq	r3, r0, r9
    6d20:	002af719 	eoreq	pc, sl, r9, lsl r7
    6d24:	019b0100 	orrseq	r0, fp, r0, lsl #2
    6d28:	000001f3 	strdeq	r0, [r0], -r3
    6d2c:	00003027 	andeq	r3, r0, r7, lsr #32
    6d30:	ee011c00 	cdp	12, 0, cr1, cr1, cr0, {0}
    6d34:	01000030 	tsteq	r0, r0, lsr r0
    6d38:	f3010172 	veor	q0, <illegal reg q0.5>, q9
    6d3c:	48000001 	stmdami	r0, {r0}
    6d40:	8008005a 	andhi	r0, r8, sl, asr r0
    6d44:	4508005a 	strmi	r0, [r8, #-90]
    6d48:	58000030 	stmdapl	r0, {r4, r5}
    6d4c:	18000006 	stmdane	r0, {r1, r2}
    6d50:	00003fa5 	andeq	r3, r0, r5, lsr #31
    6d54:	3a017101 	bcc	63160 <__Stack_Size+0x62d60>
    6d58:	64000000 	strvs	r0, [r0]
    6d5c:	18000030 	stmdane	r0, {r4, r5}
    6d60:	00003049 	andeq	r3, r0, r9, asr #32
    6d64:	4c017101 	stfmis	f7, [r1], {1}
    6d68:	82000000 	andhi	r0, r0, #0	; 0x0
    6d6c:	19000030 	stmdbne	r0, {r4, r5}
    6d70:	00002af7 	strdeq	r2, [r0], -r7
    6d74:	f3017301 	vcgt.u8	d7, d1, d1
    6d78:	a0000001 	andge	r0, r0, r1
    6d7c:	00000030 	andeq	r0, r0, r0, lsr r0
    6d80:	3135011c 	teqcc	r5, ip, lsl r1
    6d84:	37010000 	strcc	r0, [r1, -r0]
    6d88:	01f30101 	mvnseq	r0, r1, lsl #2
    6d8c:	5a800000 	bpl	fe006d94 <SCS_BASE+0x1dff8d94>
    6d90:	5ac80800 	bpl	ff208d98 <SCS_BASE+0x1f1fad98>
    6d94:	30be0800 	adcscc	r0, lr, r0, lsl #16
    6d98:	06a70000 	strteq	r0, [r7], r0
    6d9c:	a5180000 	ldrge	r0, [r8]
    6da0:	0100003f 	tsteq	r0, pc, lsr r0
    6da4:	003a0136 	eorseq	r0, sl, r6, lsr r1
    6da8:	30dd0000 	sbcscc	r0, sp, r0
    6dac:	49180000 	ldmdbmi	r8, {}
    6db0:	01000030 	tsteq	r0, r0, lsr r0
    6db4:	003a0136 	eorseq	r0, sl, r6, lsr r1
    6db8:	30fb0000 	rscscc	r0, fp, r0
    6dbc:	f7190000 	undefined instruction 0xf7190000
    6dc0:	0100002a 	tsteq	r0, sl, lsr #32
    6dc4:	01f30138 	mvnseq	r0, r8, lsr r1
    6dc8:	31190000 	tstcc	r9, r0
    6dcc:	21000000 	tstcs	r0, r0
    6dd0:	002e2701 	eoreq	r2, lr, r1, lsl #14
    6dd4:	01f80100 	mvnseq	r0, r0, lsl #2
    6dd8:	000001f3 	strdeq	r0, [r0], -r3
    6ddc:	08005ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp, ip, lr}
    6de0:	08005b40 	stmdaeq	r0, {r6, r8, r9, fp, ip, lr}
    6de4:	00003142 	andeq	r3, r0, r2, asr #2
    6de8:	000006d4 	ldrdeq	r0, [r0], -r4
    6dec:	002af722 	eoreq	pc, sl, r2, lsr #14
    6df0:	f3f90100 	vceq.i32	d16, d0, #0
    6df4:	61000001 	tstvs	r0, r1
    6df8:	00000031 	andeq	r0, r0, r1, lsr r0
    6dfc:	2eb00121 	frdcssp	f0, f0, f1
    6e00:	d5010000 	strle	r0, [r1]
    6e04:	0001f301 	andeq	pc, r1, r1, lsl #6
    6e08:	005b4000 	subseq	r4, fp, r0
    6e0c:	005b7c08 	subseq	r7, fp, r8, lsl #24
    6e10:	00318a08 	eorseq	r8, r1, r8, lsl #20
    6e14:	00070100 	andeq	r0, r7, r0, lsl #2
    6e18:	2af72200 	bcs	ffdcf620 <SCS_BASE+0x1fdc1620>
    6e1c:	d6010000 	strle	r0, [r1], -r0
    6e20:	000001f3 	strdeq	r0, [r0], -r3
    6e24:	000031a9 	andeq	r3, r0, r9, lsr #3
    6e28:	5c012300 	stcpl	3, cr2, [r1], {0}
    6e2c:	0100002e 	tsteq	r0, lr, lsr #32
    6e30:	01f301ae 	mvnseq	r0, lr, lsr #3
    6e34:	5b7c0000 	blpl	1f06e3c <__Stack_Size+0x1f06a3c>
    6e38:	5bc40800 	blpl	ff108e40 <SCS_BASE+0x1f0fae40>
    6e3c:	31c70800 	biccc	r0, r7, r0, lsl #16
    6e40:	4f120000 	svcmi	0x00120000
    6e44:	0100002f 	tsteq	r0, pc, lsr #32
    6e48:	00003aad 	andeq	r3, r0, sp, lsr #21
    6e4c:	0031f200 	eorseq	pc, r1, r0, lsl #4
    6e50:	2af72200 	bcs	ffdcf658 <SCS_BASE+0x1fdc1658>
    6e54:	af010000 	svcge	0x00010000
    6e58:	000001f3 	strdeq	r0, [r0], -r3
    6e5c:	00003210 	andeq	r3, r0, r0, lsl r2
    6e60:	06440000 	strbeq	r0, [r4], -r0
    6e64:	00020000 	andeq	r0, r2, r0
    6e68:	00001c12 	andeq	r1, r0, r2, lsl ip
    6e6c:	01c60104 	biceq	r0, r6, r4, lsl #2
    6e70:	04010000 	streq	r0, [r1]
    6e74:	9d000032 	stcls	0, cr0, [r0, #-200]
    6e78:	c4000003 	strgt	r0, [r0], #-3
    6e7c:	4c08005b 	stcmi	0, cr0, [r8], {91}
    6e80:	cc08005e 	stcgt	0, cr0, [r8], {94}
    6e84:	0200001c 	andeq	r0, r0, #28	; 0x1c
    6e88:	41780504 	cmnmi	r8, r4, lsl #10
    6e8c:	02020000 	andeq	r0, r2, #0	; 0x0
    6e90:	00049505 	andeq	r9, r4, r5, lsl #10
    6e94:	06010200 	streq	r0, [r1], -r0, lsl #4
    6e98:	00000469 	andeq	r0, r0, r9, ror #8
    6e9c:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    6ea0:	45270200 	strmi	r0, [r7, #-512]!
    6ea4:	02000000 	andeq	r0, r0, #0	; 0x0
    6ea8:	41f20704 	mvnsmi	r0, r4, lsl #14
    6eac:	75030000 	strvc	r0, [r3]
    6eb0:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    6eb4:	00005728 	andeq	r5, r0, r8, lsr #14
    6eb8:	07020200 	streq	r0, [r2, -r0, lsl #4]
    6ebc:	00000222 	andeq	r0, r0, r2, lsr #4
    6ec0:	00387503 	eorseq	r7, r8, r3, lsl #10
    6ec4:	00682902 	rsbeq	r2, r8, r2, lsl #18
    6ec8:	01020000 	tsteq	r2, r0
    6ecc:	00046708 	andeq	r6, r4, r8, lsl #14
    6ed0:	00450400 	subeq	r0, r5, r0, lsl #8
    6ed4:	01050000 	tsteq	r5, r0
    6ed8:	00893c02 	addeq	r3, r9, r2, lsl #24
    6edc:	a7060000 	strge	r0, [r6, -r0]
    6ee0:	00000021 	andeq	r0, r0, r1, lsr #32
    6ee4:	00043906 	andeq	r3, r4, r6, lsl #18
    6ee8:	07000100 	streq	r0, [r0, -r0, lsl #2]
    6eec:	0000268c 	andeq	r2, r0, ip, lsl #13
    6ef0:	00743c02 	rsbseq	r3, r4, r2, lsl #24
    6ef4:	04080000 	streq	r0, [r8]
    6ef8:	031c0907 	tsteq	ip, #114688	; 0x1c000
    6efc:	010a014f 	tsteq	sl, pc, asr #2
    6f00:	430a0000 	movwmi	r0, #40960	; 0xa000
    6f04:	03004c52 	movweq	r4, #3154	; 0xc52
    6f08:	006f0150 	rsbeq	r0, pc, r0, asr r1
    6f0c:	23020000 	movwcs	r0, #8192	; 0x2000
    6f10:	52430a00 	subpl	r0, r3, #0	; 0x0
    6f14:	51030048 	tstpl	r3, r8, asr #32
    6f18:	00006f01 	andeq	r6, r0, r1, lsl #30
    6f1c:	04230200 	strteq	r0, [r3], #-512
    6f20:	5244490a 	subpl	r4, r4, #163840	; 0x28000
    6f24:	01520300 	cmpeq	r2, r0, lsl #6
    6f28:	0000006f 	andeq	r0, r0, pc, rrx
    6f2c:	0a082302 	beq	20fb3c <__Stack_Size+0x20f73c>
    6f30:	0052444f 	subseq	r4, r2, pc, asr #8
    6f34:	6f015303 	svcvs	0x00015303
    6f38:	02000000 	andeq	r0, r0, #0	; 0x0
    6f3c:	b40b0c23 	strlt	r0, [fp], #-3107
    6f40:	03000021 	movweq	r0, #33	; 0x21
    6f44:	006f0154 	rsbeq	r0, pc, r4, asr r1
    6f48:	23020000 	movwcs	r0, #8192	; 0x2000
    6f4c:	52420a10 	subpl	r0, r2, #65536	; 0x10000
    6f50:	55030052 	strpl	r0, [r3, #-82]
    6f54:	00006f01 	andeq	r6, r0, r1, lsl #30
    6f58:	14230200 	strtne	r0, [r3], #-512
    6f5c:	00225e0b 	eoreq	r5, r2, fp, lsl #28
    6f60:	01560300 	cmpeq	r6, r0, lsl #6
    6f64:	0000006f 	andeq	r0, r0, pc, rrx
    6f68:	00182302 	andseq	r2, r8, r2, lsl #6
    6f6c:	00211f0c 	eoreq	r1, r1, ip, lsl #30
    6f70:	01570300 	cmpeq	r7, r0, lsl #6
    6f74:	00000097 	muleq	r0, r7, r0
    6f78:	5a031809 	bpl	ccfa4 <__Stack_Size+0xccba4>
    6f7c:	00014d01 	andeq	r4, r1, r1, lsl #26
    6f80:	334b0b00 	movtcc	r0, #47872	; 0xbb00
    6f84:	5b030000 	blpl	c6f8c <__Stack_Size+0xc6b8c>
    6f88:	00006f01 	andeq	r6, r0, r1, lsl #30
    6f8c:	00230200 	eoreq	r0, r3, r0, lsl #4
    6f90:	0033300b 	eorseq	r3, r3, fp
    6f94:	015c0300 	cmpeq	ip, r0, lsl #6
    6f98:	0000006f 	andeq	r0, r0, pc, rrx
    6f9c:	0b042302 	bleq	10fbac <__Stack_Size+0x10f7ac>
    6fa0:	000031fd 	strdeq	r3, [r0], -sp
    6fa4:	5d015d03 	stcpl	13, cr5, [r1, #-12]
    6fa8:	02000001 	andeq	r0, r0, #1	; 0x1
    6fac:	0d000823 	stceq	8, cr0, [r0, #-140]
    6fb0:	00000045 	andeq	r0, r0, r5, asr #32
    6fb4:	0000015d 	andeq	r0, r0, sp, asr r1
    6fb8:	0000940e 	andeq	r9, r0, lr, lsl #8
    6fbc:	04000300 	streq	r0, [r0], #-768
    6fc0:	0000014d 	andeq	r0, r0, sp, asr #2
    6fc4:	23040105 	movwcs	r0, #16645	; 0x4105
    6fc8:	0000017d 	andeq	r0, r0, sp, ror r1
    6fcc:	00253b06 	eoreq	r3, r5, r6, lsl #22
    6fd0:	55060100 	strpl	r0, [r6, #-256]
    6fd4:	02000025 	andeq	r0, r0, #37	; 0x25
    6fd8:	0025b606 	eoreq	fp, r5, r6, lsl #12
    6fdc:	07000300 	streq	r0, [r0, -r0, lsl #6]
    6fe0:	0000267a 	andeq	r2, r0, sl, ror r6
    6fe4:	01622704 	cmneq	r2, r4, lsl #14
    6fe8:	01050000 	tsteq	r5, r0
    6fec:	01c22e04 	biceq	r2, r2, r4, lsl #28
    6ff0:	36060000 	strcc	r0, [r6], -r0
    6ff4:	00000026 	andeq	r0, r0, r6, lsr #32
    6ff8:	0026e706 	eoreq	lr, r6, r6, lsl #14
    6ffc:	a8060400 	stmdage	r6, {sl}
    7000:	28000025 	stmdacs	r0, {r0, r2, r5}
    7004:	00261306 	eoreq	r1, r6, r6, lsl #6
    7008:	0600c800 	streq	ip, [r0], -r0, lsl #16
    700c:	000024d8 	ldrdeq	r2, [r0], -r8
    7010:	26ad0614 	ssatcs	r0, #14, r4, lsl #12
    7014:	06100000 	ldreq	r0, [r0], -r0
    7018:	000026fd 	strdeq	r2, [r0], -sp
    701c:	24e9061c 	strbtcs	r0, [r9], #1564
    7020:	00180000 	andseq	r0, r8, r0
    7024:	00246d07 	eoreq	r6, r4, r7, lsl #26
    7028:	88360400 	ldmdahi	r6!, {sl}
    702c:	0f000001 	svceq	0x00000001
    7030:	003f0404 	eorseq	r0, pc, r4, lsl #8
    7034:	10000002 	andne	r0, r0, r2
    7038:	0000242f 	andeq	r2, r0, pc, lsr #8
    703c:	004c4004 	subeq	r4, ip, r4
    7040:	23020000 	movwcs	r0, #8192	; 0x2000
    7044:	24aa1000 	strtcs	r1, [sl]
    7048:	41040000 	tstmi	r4, r0
    704c:	0000017d 	andeq	r0, r0, sp, ror r1
    7050:	10022302 	andne	r2, r2, r2, lsl #6
    7054:	0000270d 	andeq	r2, r0, sp, lsl #14
    7058:	01c24204 	biceq	r4, r2, r4, lsl #4
    705c:	23020000 	movwcs	r0, #8192	; 0x2000
    7060:	78070003 	stmdavc	r7, {r0, r1}
    7064:	04000025 	streq	r0, [r0], #-37
    7068:	0001cd43 	andeq	ip, r1, r3, asr #26
    706c:	04010500 	streq	r0, [r1], #-1280
    7070:	00022047 	andeq	r2, r2, r7, asr #32
    7074:	31ce0600 	biccc	r0, lr, r0, lsl #12
    7078:	06000000 	streq	r0, [r0], -r0
    707c:	00003187 	andeq	r3, r0, r7, lsl #3
    7080:	26070001 	strcs	r0, [r7], -r1
    7084:	04000033 	streq	r0, [r0], #-51
    7088:	00020b49 	andeq	r0, r2, r9, asr #22
    708c:	f3011100 	vrhadd.u8	d1, d1, d0
    7090:	01000031 	tsteq	r0, r1, lsr r0
    7094:	5bc4017d 	blpl	ff107690 <SCS_BASE+0x1f0f9690>
    7098:	5c6a0800 	stclpl	8, cr0, [sl]
    709c:	322e0800 	eorcc	r0, lr, #0	; 0x0
    70a0:	02af0000 	adceq	r0, pc, #0	; 0x0
    70a4:	35120000 	ldrcc	r0, [r2]
    70a8:	01000033 	tsteq	r0, r3, lsr r0
    70ac:	0002af7c 	andeq	sl, r2, ip, ror pc
    70b0:	13500100 	cmpne	r0, #0	; 0x0
    70b4:	0000333b 	andeq	r3, r0, fp, lsr r3
    70b8:	02b57c01 	adcseq	r7, r5, #256	; 0x100
    70bc:	32590000 	subscc	r0, r9, #0	; 0x0
    70c0:	9a140000 	bls	5070c8 <__Stack_Size+0x506cc8>
    70c4:	01000032 	tsteq	r0, r2, lsr r0
    70c8:	00003a7e 	andeq	r3, r0, lr, ror sl
    70cc:	14570100 	ldrbne	r0, [r7], #-256
    70d0:	000032f7 	strdeq	r3, [r0], -r7
    70d4:	003a7e01 	eorseq	r7, sl, r1, lsl #28
    70d8:	5c010000 	stcpl	0, cr0, [r1], {0}
    70dc:	00318014 	eorseq	r8, r1, r4, lsl r0
    70e0:	3a7e0100 	bcc	1f874e8 <__Stack_Size+0x1f870e8>
    70e4:	01000000 	tsteq	r0, r0
    70e8:	6f701551 	svcvs	0x00701551
    70ec:	7e010073 	mcrvc	0, 0, r0, cr1, cr3, {3}
    70f0:	0000003a 	andeq	r0, r0, sl, lsr r0
    70f4:	00003282 	andeq	r3, r0, r2, lsl #5
    70f8:	002b4214 	eoreq	r4, fp, r4, lsl r2
    70fc:	3a7f0100 	bcc	1fc7504 <__Stack_Size+0x1fc7104>
    7100:	01000000 	tsteq	r0, r0
    7104:	32271654 	eorcc	r1, r7, #88080384	; 0x5400000
    7108:	7f010000 	svcvc	0x00010000
    710c:	0000003a 	andeq	r0, r0, sl, lsr r0
    7110:	0a041700 	beq	10cd18 <__Stack_Size+0x10c918>
    7114:	17000001 	strne	r0, [r0, -r1]
    7118:	00020004 	andeq	r0, r2, r4
    711c:	b7011800 	strlt	r1, [r1, -r0, lsl #16]
    7120:	01000031 	tsteq	r0, r1, lsr r0
    7124:	5c6c01e6 	stfple	f0, [ip], #-920
    7128:	5c7c0800 	ldclpl	8, cr0, [ip]
    712c:	5d010800 	stcpl	8, cr0, [r1]
    7130:	000002e0 	andeq	r0, r0, r0, ror #5
    7134:	00333b12 	eorseq	r3, r3, r2, lsl fp
    7138:	b5e50100 	strblt	r0, [r5, #256]!
    713c:	01000002 	tsteq	r0, r2
    7140:	01190050 	tsteq	r9, r0, asr r0
    7144:	0000326d 	andeq	r3, r0, sp, ror #4
    7148:	5e01f701 	cdppl	7, 0, cr15, cr1, cr1, {0}
    714c:	7c000000 	stcvc	0, cr0, [r0], {0}
    7150:	8808005c 	stmdahi	r8, {r2, r3, r4, r6}
    7154:	0108005c 	qaddeq	r0, ip, r8
    7158:	0003235d 	andeq	r2, r3, sp, asr r3
    715c:	33351300 	teqcc	r5, #0	; 0x0
    7160:	f6010000 	undefined instruction 0xf6010000
    7164:	000002af 	andeq	r0, r0, pc, lsr #5
    7168:	000032b6 	strheq	r3, [r0], -r6
    716c:	00242f12 	eoreq	r2, r4, r2, lsl pc
    7170:	4cf60100 	ldfmie	f0, [r6]
    7174:	01000000 	tsteq	r0, r0
    7178:	2c821651 	stccs	6, cr1, [r2], {81}
    717c:	f8010000 	undefined instruction 0xf8010000
    7180:	0000005e 	andeq	r0, r0, lr, asr r0
    7184:	c9011a00 	stmdbgt	r1, {r9, fp, ip}
    7188:	01000032 	tsteq	r0, r2, lsr r0
    718c:	4c010111 	stfmis	f0, [r1], {17}
    7190:	88000000 	stmdahi	r0, {}
    7194:	8e08005c 	mcrhi	0, 0, r0, cr8, cr12, {2}
    7198:	0108005c 	qaddeq	r0, ip, r8
    719c:	0003505d 	andeq	r5, r3, sp, asr r0
    71a0:	33351b00 	teqcc	r5, #0	; 0x0
    71a4:	10010000 	andne	r0, r1, r0
    71a8:	0002af01 	andeq	sl, r2, r1, lsl #30
    71ac:	0032c900 	eorseq	ip, r2, r0, lsl #18
    71b0:	011a0000 	tsteq	sl, r0
    71b4:	00003350 	andeq	r3, r0, r0, asr r3
    71b8:	01012201 	tsteq	r1, r1, lsl #4
    71bc:	0000005e 	andeq	r0, r0, lr, asr r0
    71c0:	08005c90 	stmdaeq	r0, {r4, r7, sl, fp, ip, lr}
    71c4:	08005c9c 	stmdaeq	r0, {r2, r3, r4, r7, sl, fp, ip, lr}
    71c8:	03975d01 	orrseq	r5, r7, #64	; 0x40
    71cc:	351b0000 	ldrcc	r0, [fp]
    71d0:	01000033 	tsteq	r0, r3, lsr r0
    71d4:	02af0121 	adceq	r0, pc, #1073741832	; 0x40000008
    71d8:	32dc0000 	sbcscc	r0, ip, #0	; 0x0
    71dc:	2f1c0000 	svccs	0x001c0000
    71e0:	01000024 	tsteq	r0, r4, lsr #32
    71e4:	004c0121 	subeq	r0, ip, r1, lsr #2
    71e8:	51010000 	tstpl	r1, r0
    71ec:	002c821d 	eoreq	r8, ip, sp, lsl r2
    71f0:	01230100 	teqeq	r3, r0, lsl #2
    71f4:	0000005e 	andeq	r0, r0, lr, asr r0
    71f8:	8f011a00 	svchi	0x00011a00
    71fc:	01000031 	tsteq	r0, r1, lsr r0
    7200:	4c01013c 	stfmis	f0, [r1], {60}
    7204:	9c000000 	stcls	0, cr0, [r0], {0}
    7208:	a208005c 	andge	r0, r8, #92	; 0x5c
    720c:	0108005c 	qaddeq	r0, ip, r8
    7210:	0003c45d 	andeq	ip, r3, sp, asr r4
    7214:	33351b00 	teqcc	r5, #0	; 0x0
    7218:	3b010000 	blcc	47220 <__Stack_Size+0x46e20>
    721c:	0002af01 	andeq	sl, r2, r1, lsl #30
    7220:	0032ef00 	eorseq	lr, r2, r0, lsl #30
    7224:	011e0000 	tsteq	lr, r0
    7228:	000031e6 	andeq	r3, r0, r6, ror #3
    722c:	01014e01 	tsteq	r1, r1, lsl #28
    7230:	08005ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, ip, lr}
    7234:	08005ca8 	stmdaeq	r0, {r3, r5, r7, sl, fp, ip, lr}
    7238:	03f95d01 	mvnseq	r5, #64	; 0x40
    723c:	351c0000 	ldrcc	r0, [ip]
    7240:	01000033 	tsteq	r0, r3, lsr r0
    7244:	02af014d 	adceq	r0, pc, #1073741843	; 0x40000013
    7248:	50010000 	andpl	r0, r1, r0
    724c:	00242f1c 	eoreq	r2, r4, ip, lsl pc
    7250:	014d0100 	cmpeq	sp, r0, lsl #2
    7254:	0000004c 	andeq	r0, r0, ip, asr #32
    7258:	1e005101 	adfnes	f5, f0, f1
    725c:	00328301 	eorseq	r8, r2, r1, lsl #6
    7260:	01610100 	cmneq	r1, r0, lsl #2
    7264:	005ca801 	subseq	sl, ip, r1, lsl #16
    7268:	005cac08 	subseq	sl, ip, r8, lsl #24
    726c:	2e5d0108 	rdfcse	f0, f5, #0.0
    7270:	1c000004 	stcne	0, cr0, [r0], {4}
    7274:	00003335 	andeq	r3, r0, r5, lsr r3
    7278:	af016001 	svcge	0x00016001
    727c:	01000002 	tsteq	r0, r2
    7280:	242f1c50 	strtcs	r1, [pc], #3152	; 7288 <__Stack_Size+0x6e88>
    7284:	60010000 	andvs	r0, r1, r0
    7288:	00004c01 	andeq	r4, r0, r1, lsl #24
    728c:	00510100 	subseq	r0, r1, r0, lsl #2
    7290:	31d8011e 	bicscc	r0, r8, lr, lsl r1
    7294:	77010000 	strvc	r0, [r1, -r0]
    7298:	5cac0101 	stfpls	f0, [ip], #4
    729c:	5cb60800 	ldcpl	8, cr0, [r6]
    72a0:	5d010800 	stcpl	8, cr0, [r1]
    72a4:	00000471 	andeq	r0, r0, r1, ror r4
    72a8:	0033351c 	eorseq	r3, r3, ip, lsl r5
    72ac:	01760100 	cmneq	r6, r0, lsl #2
    72b0:	000002af 	andeq	r0, r0, pc, lsr #5
    72b4:	2f1c5001 	svccs	0x001c5001
    72b8:	01000024 	tsteq	r0, r4, lsr #32
    72bc:	004c0176 	subeq	r0, ip, r6, ror r1
    72c0:	51010000 	tstpl	r1, r0
    72c4:	0031c71c 	eorseq	ip, r1, ip, lsl r7
    72c8:	01760100 	cmneq	r6, r0, lsl #2
    72cc:	00000220 	andeq	r0, r0, r0, lsr #4
    72d0:	1e005201 	cdpne	2, 0, cr5, cr0, cr1, {0}
    72d4:	00330201 	eorseq	r0, r3, r1, lsl #4
    72d8:	01910100 	orrseq	r0, r1, r0, lsl #2
    72dc:	005cb801 	subseq	fp, ip, r1, lsl #16
    72e0:	005cbc08 	subseq	fp, ip, r8, lsl #24
    72e4:	a65d0108 	ldrbge	r0, [sp], -r8, lsl #2
    72e8:	1c000004 	stcne	0, cr0, [r0], {4}
    72ec:	00003335 	andeq	r3, r0, r5, lsr r3
    72f0:	af019001 	svcge	0x00019001
    72f4:	01000002 	tsteq	r0, r2
    72f8:	32921c50 	addscc	r1, r2, #20480	; 0x5000
    72fc:	90010000 	andls	r0, r1, r0
    7300:	00004c01 	andeq	r4, r0, r1, lsl #24
    7304:	00510100 	subseq	r0, r1, r0, lsl #2
    7308:	32e4011e 	rsccc	r0, r4, #-2147483641	; 0x80000007
    730c:	a3010000 	movwge	r0, #4096	; 0x1000
    7310:	5cbc0101 	ldfpls	f0, [ip], #4
    7314:	5ccc0800 	stclpl	8, cr0, [ip], {0}
    7318:	5d010800 	stcpl	8, cr0, [r1]
    731c:	000004e9 	andeq	r0, r0, r9, ror #9
    7320:	0033351c 	eorseq	r3, r3, ip, lsl r5
    7324:	01a20100 	undefined instruction 0x01a20100
    7328:	000002af 	andeq	r0, r0, pc, lsr #5
    732c:	2f1c5001 	svccs	0x001c5001
    7330:	01000024 	tsteq	r0, r4, lsr #32
    7334:	004c01a2 	subeq	r0, ip, r2, lsr #3
    7338:	51010000 	tstpl	r1, r0
    733c:	706d741f 	rsbvc	r7, sp, pc, lsl r4
    7340:	01a40100 	undefined instruction 0x01a40100
    7344:	0000003a 	andeq	r0, r0, sl, lsr r0
    7348:	1e005301 	cdpne	3, 0, cr5, cr0, cr1, {0}
    734c:	00324b01 	eorseq	r4, r2, r1, lsl #22
    7350:	01c40100 	biceq	r0, r4, r0, lsl #2
    7354:	005ccc01 	subseq	ip, ip, r1, lsl #24
    7358:	005cec08 	subseq	lr, ip, r8, lsl #24
    735c:	305d0108 	subscc	r0, sp, r8, lsl #2
    7360:	1c000005 	stcne	0, cr0, [r0], {5}
    7364:	0000322f 	andeq	r3, r0, pc, lsr #4
    7368:	5e01c301 	cdppl	3, 0, cr12, cr1, cr1, {0}
    736c:	01000000 	tsteq	r0, r0
    7370:	32ba1b50 	adcscc	r1, sl, #81920	; 0x14000
    7374:	c3010000 	movwgt	r0, #4096	; 0x1000
    7378:	00005e01 	andeq	r5, r0, r1, lsl #28
    737c:	00330200 	eorseq	r0, r3, r0, lsl #4
    7380:	2b422000 	blcs	108f388 <__Stack_Size+0x108ef88>
    7384:	c5010000 	strgt	r0, [r1]
    7388:	00003a01 	andeq	r3, r0, r1, lsl #20
    738c:	00331500 	eorseq	r1, r3, r0, lsl #10
    7390:	011e0000 	tsteq	lr, r0
    7394:	000031a3 	andeq	r3, r0, r3, lsr #3
    7398:	0101dd01 	tsteq	r1, r1, lsl #26
    739c:	08005cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp, ip, lr}
    73a0:	08005cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, ip, lr}
    73a4:	05575d01 	ldrbeq	r5, [r7, #-3329]
    73a8:	a91c0000 	ldmdbge	ip, {}
    73ac:	0100002a 	tsteq	r0, sl, lsr #32
    73b0:	008901dc 	ldrdeq	r0, [r9], ip
    73b4:	50010000 	andpl	r0, r1, r0
    73b8:	a6012100 	strge	r2, [r1], -r0, lsl #2
    73bc:	01000032 	tsteq	r0, r2, lsr r0
    73c0:	f8010208 	undefined instruction 0xf8010208
    73c4:	5808005c 	stmdapl	r8, {r2, r3, r4, r6}
    73c8:	5408005d 	strpl	r0, [r8], #-93
    73cc:	c6000033 	undefined
    73d0:	1c000005 	stcne	0, cr0, [r0], {5}
    73d4:	00003262 	andeq	r3, r0, r2, ror #4
    73d8:	3a020701 	bcc	88fe4 <__Stack_Size+0x88be4>
    73dc:	01000000 	tsteq	r0, r0
    73e0:	2aa91b50 	bcs	fea4e128 <SCS_BASE+0x1ea40128>
    73e4:	07010000 	streq	r0, [r1, -r0]
    73e8:	00008902 	andeq	r8, r0, r2, lsl #18
    73ec:	00337300 	eorseq	r7, r3, r0, lsl #6
    73f0:	6d741f00 	ldclvs	15, cr1, [r4]
    73f4:	09010070 	stmdbeq	r1, {r4, r5, r6}
    73f8:	00003a02 	andeq	r3, r0, r2, lsl #20
    73fc:	1d540100 	ldfnee	f0, [r4]
    7400:	0000330d 	andeq	r3, r0, sp, lsl #6
    7404:	3a020901 	bcc	89810 <__Stack_Size+0x89410>
    7408:	20000000 	andcs	r0, r0, r0
    740c:	00002b42 	andeq	r2, r0, r2, asr #22
    7410:	3a020901 	bcc	8981c <__Stack_Size+0x8941c>
    7414:	91000000 	tstls	r0, r0
    7418:	1d000033 	stcne	0, cr0, [r0, #-204]
    741c:	000032dc 	ldrdeq	r3, [r0], -ip
    7420:	3a020901 	bcc	8982c <__Stack_Size+0x8942c>
    7424:	00000000 	andeq	r0, r0, r0
    7428:	33120121 	tstcc	r2, #1073741832	; 0x40000008
    742c:	3a010000 	bcc	47434 <__Stack_Size+0x47034>
    7430:	5d580102 	ldfple	f0, [r8, #-8]
    7434:	5d8c0800 	stcpl	8, cr0, [ip]
    7438:	33d00800 	bicscc	r0, r0, #0	; 0x0
    743c:	060d0000 	streq	r0, [sp], -r0
    7440:	2f1b0000 	svccs	0x001b0000
    7444:	01000032 	tsteq	r0, r2, lsr r0
    7448:	005e0239 	subseq	r0, lr, r9, lsr r2
    744c:	33ef0000 	mvncc	r0, #0	; 0x0
    7450:	ba1b0000 	blt	6c7458 <__Stack_Size+0x6c7058>
    7454:	01000032 	tsteq	r0, r2, lsr r0
    7458:	005e0239 	subseq	r0, lr, r9, lsr r2
    745c:	34020000 	strcc	r0, [r2]
    7460:	74220000 	strtvc	r0, [r2]
    7464:	0100706d 	tsteq	r0, sp, rrx
    7468:	003a023b 	eorseq	r0, sl, fp, lsr r2
    746c:	23000000 	movwcs	r0, #0	; 0x0
    7470:	00336701 	eorseq	r6, r3, r1, lsl #14
    7474:	016c0100 	cmneq	ip, r0, lsl #2
    7478:	08005d8c 	stmdaeq	r0, {r2, r3, r7, r8, sl, fp, ip, lr}
    747c:	08005da4 	stmdaeq	r0, {r2, r5, r7, r8, sl, fp, ip, lr}
    7480:	00003415 	andeq	r3, r0, r5, lsl r4
    7484:	323f0124 	eorscc	r0, pc, #9	; 0x9
    7488:	34010000 	strcc	r0, [r1]
    748c:	005da401 	subseq	sl, sp, r1, lsl #8
    7490:	005e4c08 	subseq	r4, lr, r8, lsl #24
    7494:	00344008 	eorseq	r4, r4, r8
    7498:	33351300 	teqcc	r5, #0	; 0x0
    749c:	33010000 	movwcc	r0, #4096	; 0x1000
    74a0:	000002af 	andeq	r0, r0, pc, lsr #5
    74a4:	0000346b 	andeq	r3, r0, fp, ror #8
    74a8:	08e30000 	stmiaeq	r3!, {}^
    74ac:	00020000 	andeq	r0, r2, r0
    74b0:	00001e37 	andeq	r1, r0, r7, lsr lr
    74b4:	01c60104 	biceq	r0, r6, r4, lsl #2
    74b8:	6a010000 	bvs	474c0 <__Stack_Size+0x470c0>
    74bc:	9d000034 	stcls	0, cr0, [r0, #-208]
    74c0:	4c000003 	stcmi	0, cr0, [r0], {3}
    74c4:	d008005e 	andle	r0, r8, lr, asr r0
    74c8:	44080061 	strmi	r0, [r8], #-97
    74cc:	0200001e 	andeq	r0, r0, #30	; 0x1e
    74d0:	41780504 	cmnmi	r8, r4, lsl #10
    74d4:	02020000 	andeq	r0, r2, #0	; 0x0
    74d8:	00049505 	andeq	r9, r4, r5, lsl #10
    74dc:	06010200 	streq	r0, [r1], -r0, lsl #4
    74e0:	00000469 	andeq	r0, r0, r9, ror #8
    74e4:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    74e8:	45270200 	strmi	r0, [r7, #-512]!
    74ec:	02000000 	andeq	r0, r0, #0	; 0x0
    74f0:	41f20704 	mvnsmi	r0, r4, lsl #14
    74f4:	75030000 	strvc	r0, [r3]
    74f8:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    74fc:	00005728 	andeq	r5, r0, r8, lsr #14
    7500:	07020200 	streq	r0, [r2, -r0, lsl #4]
    7504:	00000222 	andeq	r0, r0, r2, lsr #4
    7508:	00387503 	eorseq	r7, r8, r3, lsl #10
    750c:	00682902 	rsbeq	r2, r8, r2, lsl #18
    7510:	01020000 	tsteq	r2, r0
    7514:	00046708 	andeq	r6, r4, r8, lsl #14
    7518:	00450400 	subeq	r0, r5, r0, lsl #8
    751c:	6f050000 	svcvs	0x00050000
    7520:	06000000 	streq	r0, [r0], -r0
    7524:	8e3a0201 	cdphi	2, 3, cr0, cr10, cr1, {0}
    7528:	07000000 	streq	r0, [r0, -r0]
    752c:	00000ebd 	strheq	r0, [r0], -sp
    7530:	45530800 	ldrbmi	r0, [r3, #-2048]
    7534:	00010054 	andeq	r0, r1, r4, asr r0
    7538:	00391109 	eorseq	r1, r9, r9, lsl #2
    753c:	793a0200 	ldmdbvc	sl!, {r9}
    7540:	06000000 	streq	r0, [r0], -r0
    7544:	ae3c0201 	cdpge	2, 3, cr0, cr12, cr1, {0}
    7548:	07000000 	streq	r0, [r0, -r0]
    754c:	000021a7 	andeq	r2, r0, r7, lsr #3
    7550:	04390700 	ldrteq	r0, [r9], #-1792
    7554:	00010000 	andeq	r0, r1, r0
    7558:	00268c09 	eoreq	r8, r6, r9, lsl #24
    755c:	993c0200 	ldmdbls	ip!, {r9}
    7560:	0a000000 	beq	7568 <__Stack_Size+0x7168>
    7564:	3c0b0704 	stccc	7, cr0, [fp], {4}
    7568:	01820303 	orreq	r0, r2, r3, lsl #6
    756c:	00000175 	andeq	r0, r0, r5, ror r1
    7570:	0036620c 	eorseq	r6, r6, ip, lsl #4
    7574:	01830300 	orreq	r0, r3, r0, lsl #6
    7578:	00000185 	andeq	r0, r0, r5, lsl #3
    757c:	0c002302 	stceq	3, cr2, [r0], {2}
    7580:	000028ee 	andeq	r2, r0, lr, ror #17
    7584:	8a018403 	bhi	68598 <__Stack_Size+0x68198>
    7588:	02000001 	andeq	r0, r0, #1	; 0x1
    758c:	260c0823 	strcs	r0, [ip], -r3, lsr #16
    7590:	03000036 	movweq	r0, #54	; 0x36
    7594:	019a0185 	orrseq	r0, sl, r5, lsl #3
    7598:	23030000 	movwcs	r0, #12288	; 0x3000
    759c:	f20c0180 	vrhadd.s8	d0, d28, d0
    75a0:	03000034 	movweq	r0, #52	; 0x34
    75a4:	018a0186 	orreq	r0, sl, r6, lsl #3
    75a8:	23030000 	movwcs	r0, #12288	; 0x3000
    75ac:	3c0c0188 	stfccs	f0, [ip], {136}
    75b0:	03000036 	movweq	r0, #54	; 0x36
    75b4:	019f0187 	orrseq	r0, pc, r7, lsl #3
    75b8:	23030000 	movwcs	r0, #12288	; 0x3000
    75bc:	f80c0280 	undefined instruction 0xf80c0280
    75c0:	03000028 	movweq	r0, #40	; 0x28
    75c4:	018a0188 	orreq	r0, sl, r8, lsl #3
    75c8:	23030000 	movwcs	r0, #12288	; 0x3000
    75cc:	b20c0288 	andlt	r0, ip, #-2147483640	; 0x80000008
    75d0:	03000035 	movweq	r0, #53	; 0x35
    75d4:	01a40189 	undefined instruction 0x01a40189
    75d8:	23030000 	movwcs	r0, #12288	; 0x3000
    75dc:	020c0380 	andeq	r0, ip, #2	; 0x2
    75e0:	03000029 	movweq	r0, #41	; 0x29
    75e4:	018a018a 	orreq	r0, sl, sl, lsl #3
    75e8:	23030000 	movwcs	r0, #12288	; 0x3000
    75ec:	770c0388 	strvc	r0, [ip, -r8, lsl #7]
    75f0:	03000033 	movweq	r0, #51	; 0x33
    75f4:	01a9018b 	undefined instruction 0x01a9018b
    75f8:	23030000 	movwcs	r0, #12288	; 0x3000
    75fc:	0c0c0480 	cfstrseq	mvf0, [ip], {128}
    7600:	03000029 	movweq	r0, #41	; 0x29
    7604:	01ae018c 	undefined instruction 0x01ae018c
    7608:	23030000 	movwcs	r0, #12288	; 0x3000
    760c:	490d0488 	stmdbmi	sp, {r3, r7, sl}
    7610:	03005250 	movweq	r5, #592	; 0x250
    7614:	01ce018d 	biceq	r0, lr, sp, lsl #3
    7618:	23030000 	movwcs	r0, #12288	; 0x3000
    761c:	0e000680 	cfmadd32eq	mvax4, mvfx0, mvfx0, mvfx0
    7620:	00000045 	andeq	r0, r0, r5, asr #32
    7624:	00000185 	andeq	r0, r0, r5, lsl #3
    7628:	0000b90f 	andeq	fp, r0, pc, lsl #18
    762c:	04000100 	streq	r0, [r0], #-256
    7630:	00000175 	andeq	r0, r0, r5, ror r1
    7634:	00003a0e 	andeq	r3, r0, lr, lsl #20
    7638:	00019a00 	andeq	r9, r1, r0, lsl #20
    763c:	00b90f00 	adcseq	r0, r9, r0, lsl #30
    7640:	001d0000 	andseq	r0, sp, r0
    7644:	00017504 	andeq	r7, r1, r4, lsl #10
    7648:	01750400 	cmneq	r5, r0, lsl #8
    764c:	75040000 	strvc	r0, [r4]
    7650:	04000001 	streq	r0, [r0], #-1
    7654:	00000175 	andeq	r0, r0, r5, ror r1
    7658:	00003a0e 	andeq	r3, r0, lr, lsl #20
    765c:	0001be00 	andeq	fp, r1, r0, lsl #28
    7660:	00b90f00 	adcseq	r0, r9, r0, lsl #30
    7664:	003d0000 	eorseq	r0, sp, r0
    7668:	0000450e 	andeq	r4, r0, lr, lsl #10
    766c:	0001ce00 	andeq	ip, r1, r0, lsl #28
    7670:	00b90f00 	adcseq	r0, r9, r0, lsl #30
    7674:	000e0000 	andeq	r0, lr, r0
    7678:	0001be04 	andeq	fp, r1, r4, lsl #28
    767c:	03401000 	movteq	r1, #0	; 0x0
    7680:	02af0191 	adceq	r0, pc, #1073741860	; 0x40000024
    7684:	950c0000 	strls	r0, [ip]
    7688:	03000034 	movweq	r0, #52	; 0x34
    768c:	00740192 	ldrbteq	r0, [r4], #-18
    7690:	23020000 	movwcs	r0, #8192	; 0x2000
    7694:	34ed0c00 	strbtcc	r0, [sp], #3072
    7698:	93030000 	movwls	r0, #12288	; 0x3000
    769c:	00006f01 	andeq	r6, r0, r1, lsl #30
    76a0:	04230200 	strteq	r0, [r3], #-512
    76a4:	0036370c 	eorseq	r3, r6, ip, lsl #14
    76a8:	01940300 	orrseq	r0, r4, r0, lsl #6
    76ac:	0000006f 	andeq	r0, r0, pc, rrx
    76b0:	0c082302 	stceq	3, cr2, [r8], {2}
    76b4:	00003598 	muleq	r0, r8, r5
    76b8:	6f019503 	svcvs	0x00019503
    76bc:	02000000 	andeq	r0, r0, #0	; 0x0
    76c0:	530d0c23 	movwpl	r0, #56355	; 0xdc23
    76c4:	03005243 	movweq	r5, #579	; 0x243
    76c8:	006f0196 	mlseq	pc, r6, r1, r0
    76cc:	23020000 	movwcs	r0, #8192	; 0x2000
    76d0:	43430d10 	movtmi	r0, #15632	; 0x3d10
    76d4:	97030052 	smlsdls	r3, r2, r0, r0
    76d8:	00006f01 	andeq	r6, r0, r1, lsl #30
    76dc:	14230200 	strtne	r0, [r3], #-512
    76e0:	0035c10c 	eorseq	ip, r5, ip, lsl #2
    76e4:	01980300 	orrseq	r0, r8, r0, lsl #6
    76e8:	000002bf 	strheq	r0, [r0], -pc
    76ec:	0c182302 	ldceq	3, cr2, [r8], {2}
    76f0:	000035c6 	andeq	r3, r0, r6, asr #11
    76f4:	6f019903 	svcvs	0x00019903
    76f8:	02000000 	andeq	r0, r0, #0	; 0x0
    76fc:	730c2423 	movwvc	r2, #50211	; 0xc423
    7700:	03000035 	movweq	r0, #53	; 0x35
    7704:	006f019a 	mlseq	pc, sl, r1, r0
    7708:	23020000 	movwcs	r0, #8192	; 0x2000
    770c:	36460c28 	strbcc	r0, [r6], -r8, lsr #24
    7710:	9b030000 	blls	c7718 <__Stack_Size+0xc7318>
    7714:	00006f01 	andeq	r6, r0, r1, lsl #30
    7718:	2c230200 	sfmcs	f0, 4, [r3]
    771c:	0036410c 	eorseq	r4, r6, ip, lsl #2
    7720:	019c0300 	orrseq	r0, ip, r0, lsl #6
    7724:	0000006f 	andeq	r0, r0, pc, rrx
    7728:	0c302302 	ldceq	3, cr2, [r0], #-8
    772c:	000035dc 	ldrdeq	r3, [r0], -ip
    7730:	6f019d03 	svcvs	0x00019d03
    7734:	02000000 	andeq	r0, r0, #0	; 0x0
    7738:	4a0c3423 	bmi	3147cc <__Stack_Size+0x3143cc>
    773c:	03000035 	movweq	r0, #53	; 0x35
    7740:	006f019e 	mlseq	pc, lr, r1, r0
    7744:	23020000 	movwcs	r0, #8192	; 0x2000
    7748:	365d0c38 	undefined
    774c:	9f030000 	svcls	0x00030000
    7750:	00006f01 	andeq	r6, r0, r1, lsl #30
    7754:	3c230200 	sfmcc	f0, 4, [r3]
    7758:	00450e00 	subeq	r0, r5, r0, lsl #28
    775c:	02bf0000 	adcseq	r0, pc, #0	; 0x0
    7760:	b90f0000 	stmdblt	pc, {}
    7764:	02000000 	andeq	r0, r0, #0	; 0x0
    7768:	02af0400 	adceq	r0, pc, #0	; 0x0
    776c:	04110000 	ldreq	r0, [r1]
    7770:	03051b04 	movweq	r1, #23300	; 0x5b04
    7774:	f1120000 	undefined instruction 0xf1120000
    7778:	04000025 	streq	r0, [r0], #-37
    777c:	00005e1c 	andeq	r5, r0, ip, lsl lr
    7780:	00230200 	eoreq	r0, r3, r0, lsl #4
    7784:	00265812 	eoreq	r5, r6, r2, lsl r8
    7788:	5e1d0400 	cfmulspl	mvf0, mvf13, mvf0
    778c:	02000000 	andeq	r0, r0, #0	; 0x0
    7790:	bd120123 	ldflts	f0, [r2, #-140]
    7794:	04000024 	streq	r0, [r0], #-36
    7798:	00005e1e 	andeq	r5, r0, lr, lsl lr
    779c:	02230200 	eoreq	r0, r3, #0	; 0x0
    77a0:	00244a12 	eoreq	r4, r4, r2, lsl sl
    77a4:	ae1f0400 	cfmulsge	mvf0, mvf15, mvf0
    77a8:	02000000 	andeq	r0, r0, #0	; 0x0
    77ac:	09000323 	stmdbeq	r0, {r0, r1, r5, r8, r9}
    77b0:	0000269c 	muleq	r0, ip, r6
    77b4:	02c42004 	sbceq	r2, r4, #4	; 0x4
    77b8:	01130000 	tsteq	r3, r0
    77bc:	00003793 	muleq	r0, r3, r7
    77c0:	4c012501 	cfstr32mi	mvfx2, [r1], {1}
    77c4:	8008005e 	andhi	r0, r8, lr, asr r0
    77c8:	0108005e 	qaddeq	r0, lr, r8
    77cc:	0003355d 	andeq	r3, r3, sp, asr r5
    77d0:	1a5f1400 	bne	17cc7d8 <__Stack_Size+0x17cc3d8>
    77d4:	26010000 	strcs	r0, [r1], -r0
    77d8:	0000003a 	andeq	r0, r0, sl, lsr r0
    77dc:	13005201 	movwne	r5, #513	; 0x201
    77e0:	00372001 	eorseq	r2, r7, r1
    77e4:	013c0100 	teqeq	ip, r0, lsl #2
    77e8:	08005e80 	stmdaeq	r0, {r7, r9, sl, fp, ip, lr}
    77ec:	08005eb0 	stmdaeq	r0, {r4, r5, r7, r9, sl, fp, ip, lr}
    77f0:	03585d01 	cmpeq	r8, #64	; 0x40
    77f4:	5f150000 	svcpl	0x00150000
    77f8:	0100001a 	tsteq	r0, sl, lsl r0
    77fc:	00003a3d 	andeq	r3, r0, sp, lsr sl
    7800:	01130000 	tsteq	r3, r0
    7804:	0000379f 	muleq	r0, pc, r7
    7808:	b0016201 	andlt	r6, r1, r1, lsl #4
    780c:	c408005e 	strgt	r0, [r8], #-94
    7810:	0108005e 	qaddeq	r0, lr, r8
    7814:	00037f5d 	andeq	r7, r3, sp, asr pc
    7818:	349b1600 	ldrcc	r1, [fp], #1536
    781c:	61010000 	tstvs	r1, r0
    7820:	0000003a 	andeq	r0, r0, sl, lsr r0
    7824:	0000348a 	andeq	r3, r0, sl, lsl #9
    7828:	b7011700 	strlt	r1, [r1, -r0, lsl #14]
    782c:	01000035 	tsteq	r0, r5, lsr r0
    7830:	5ec40175 	mcrpl	1, 6, r0, cr4, cr5, {3}
    7834:	5f400800 	svcpl	0x00400800
    7838:	349d0800 	ldrcc	r0, [sp], #2048
    783c:	03eb0000 	mvneq	r0, #0	; 0x0
    7840:	9b160000 	blls	587848 <__Stack_Size+0x587448>
    7844:	01000033 	tsteq	r0, r3, lsr r0
    7848:	0003eb74 	andeq	lr, r3, r4, ror fp
    784c:	0034bc00 	eorseq	fp, r4, r0, lsl #24
    7850:	362b1800 	strtcc	r1, [fp], -r0, lsl #16
    7854:	76010000 	strvc	r0, [r1], -r0
    7858:	0000003a 	andeq	r0, r0, sl, lsr r0
    785c:	000034da 	ldrdeq	r3, [r0], -sl
    7860:	002b4218 	eoreq	r4, fp, r8, lsl r2
    7864:	3a760100 	bcc	1d87c6c <__Stack_Size+0x1d8786c>
    7868:	03000000 	movweq	r0, #0	; 0x0
    786c:	18000035 	stmdane	r0, {r0, r2, r4, r5}
    7870:	000032dc 	ldrdeq	r3, [r0], -ip
    7874:	003a7601 	eorseq	r7, sl, r1, lsl #12
    7878:	35210000 	strcc	r0, [r1]!
    787c:	23150000 	tstcs	r5, #0	; 0x0
    7880:	01000034 	tsteq	r0, r4, lsr r0
    7884:	00003a77 	andeq	r3, r0, r7, ror sl
    7888:	35e21500 	strbcc	r1, [r2, #1280]!
    788c:	77010000 	strvc	r0, [r1, -r0]
    7890:	0000003a 	andeq	r0, r0, sl, lsr r0
    7894:	05041900 	streq	r1, [r4, #-2304]
    7898:	13000003 	movwne	r0, #3	; 0x3
    789c:	00361601 	eorseq	r1, r6, r1, lsl #12
    78a0:	01a90100 	undefined instruction 0x01a90100
    78a4:	08005f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, ip, lr}
    78a8:	08005f4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, fp, ip, lr}
    78ac:	04165d01 	ldreq	r5, [r6], #-3329
    78b0:	9b1a0000 	blls	6878b8 <__Stack_Size+0x6874b8>
    78b4:	01000033 	tsteq	r0, r3, lsr r0
    78b8:	0003eba8 	andeq	lr, r3, r8, lsr #23
    78bc:	00500100 	subseq	r0, r0, r0, lsl #2
    78c0:	33ab011b 	undefined instruction 0x33ab011b
    78c4:	06010000 	streq	r0, [r1], -r0
    78c8:	004c0101 	subeq	r0, ip, r1, lsl #2
    78cc:	5f4c0000 	svcpl	0x004c0000
    78d0:	5f640800 	svcpl	0x00640800
    78d4:	5d010800 	stcpl	8, cr0, [r1]
    78d8:	36fd011c 	usatcc	r0, #29, ip, lsl #2
    78dc:	13010000 	movwne	r0, #4096	; 0x1000
    78e0:	008e0101 	addeq	r0, lr, r1, lsl #2
    78e4:	5f640000 	svcpl	0x00640000
    78e8:	5f880800 	svcpl	0x00880800
    78ec:	5d010800 	stcpl	8, cr0, [r1]
    78f0:	00000475 	andeq	r0, r0, r5, ror r4
    78f4:	0025f11d 	eoreq	pc, r5, sp, lsl r1
    78f8:	01120100 	tsteq	r2, r0, lsl #2
    78fc:	0000005e 	andeq	r0, r0, lr, asr r0
    7900:	00003534 	andeq	r3, r0, r4, lsr r5
    7904:	0037b81e 	eorseq	fp, r7, lr, lsl r8
    7908:	01140100 	tsteq	r4, r0, lsl #2
    790c:	0000008e 	andeq	r0, r0, lr, lsl #1
    7910:	706d741f 	rsbvc	r7, sp, pc, lsl r4
    7914:	01150100 	tsteq	r5, r0, lsl #2
    7918:	0000003a 	andeq	r0, r0, sl, lsr r0
    791c:	20005201 	andcs	r5, r0, r1, lsl #4
    7920:	00354f01 	eorseq	r4, r5, r1, lsl #30
    7924:	012f0100 	teqeq	pc, r0, lsl #2
    7928:	005f8801 	subseq	r8, pc, r1, lsl #16
    792c:	005f9408 	subseq	r9, pc, r8, lsl #8
    7930:	9c5d0108 	ldflse	f0, [sp], {8}
    7934:	21000004 	tstcs	r0, r4
    7938:	000025f1 	strdeq	r2, [r0], -r1
    793c:	5e012e01 	cdppl	14, 0, cr2, cr1, cr1, {0}
    7940:	01000000 	tsteq	r0, r0
    7944:	01200050 	qsubeq	r0, r0, r0
    7948:	0000337c 	andeq	r3, r0, ip, ror r3
    794c:	01013e01 	tsteq	r1, r1, lsl #28
    7950:	08005f94 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, fp, ip, lr}
    7954:	08005fac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, fp, ip, lr}
    7958:	04c55d01 	strbeq	r5, [r5], #3329
    795c:	f11d0000 	undefined instruction 0xf11d0000
    7960:	01000025 	tsteq	r0, r5, lsr #32
    7964:	005e013d 	subseq	r0, lr, sp, lsr r1
    7968:	35470000 	strbcc	r0, [r7]
    796c:	1b000000 	blne	7974 <__Stack_Size+0x7574>
    7970:	0034c201 	eorseq	ip, r4, r1, lsl #4
    7974:	014e0100 	cmpeq	lr, r0, lsl #2
    7978:	00004c01 	andeq	r4, r0, r1, lsl #24
    797c:	005fac00 	subseq	sl, pc, r0, lsl #24
    7980:	005fbc08 	subseq	fp, pc, r8, lsl #24
    7984:	1c5d0108 	ldfnee	f0, [sp], {8}
    7988:	00377101 	eorseq	r7, r7, r1, lsl #2
    798c:	015b0100 	cmpeq	fp, r0, lsl #2
    7990:	00008e01 	andeq	r8, r0, r1, lsl #28
    7994:	005fbc00 	subseq	fp, pc, r0, lsl #24
    7998:	005fe008 	subseq	lr, pc, r8
    799c:	245d0108 	ldrbcs	r0, [sp], #-264
    79a0:	1d000005 	stcne	0, cr0, [r0, #-20]
    79a4:	000025f1 	strdeq	r2, [r0], -r1
    79a8:	5e015a01 	fmacspl	s10, s2, s2
    79ac:	5a000000 	bpl	79b4 <__Stack_Size+0x75b4>
    79b0:	1e000035 	mcrne	0, 0, r0, cr0, cr5, {1}
    79b4:	00003748 	andeq	r3, r0, r8, asr #14
    79b8:	8e015c01 	cdphi	12, 0, cr5, cr1, cr1, {0}
    79bc:	1f000000 	svcne	0x00000000
    79c0:	00706d74 	rsbseq	r6, r0, r4, ror sp
    79c4:	3a015d01 	bcc	5edd0 <__Stack_Size+0x5e9d0>
    79c8:	01000000 	tsteq	r0, r0
    79cc:	011b0052 	tsteq	fp, r2, asr r0
    79d0:	0000348d 	andeq	r3, r0, sp, lsl #9
    79d4:	01017801 	tsteq	r1, r1, lsl #16
    79d8:	0000003a 	andeq	r0, r0, sl, lsr r0
    79dc:	08005fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, ip, lr}
    79e0:	08005fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    79e4:	01205d01 	teqeq	r0, r1, lsl #26
    79e8:	0000359e 	muleq	r0, lr, r5
    79ec:	01018a01 	tsteq	r1, r1, lsl #20
    79f0:	08005fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    79f4:	08006000 	stmdaeq	r0, {sp, lr}
    79f8:	05735d01 	ldrbeq	r5, [r3, #-3329]!
    79fc:	3b210000 	blcc	847a04 <__Stack_Size+0x847604>
    7a00:	01000037 	tsteq	r0, r7, lsr r0
    7a04:	003a0189 	eorseq	r0, sl, r9, lsl #3
    7a08:	50010000 	andpl	r0, r1, r0
    7a0c:	000ea91d 	andeq	sl, lr, sp, lsl r9
    7a10:	01890100 	orreq	r0, r9, r0, lsl #2
    7a14:	0000003a 	andeq	r0, r0, sl, lsr r0
    7a18:	0000356d 	andeq	r3, r0, sp, ror #10
    7a1c:	0a012200 	beq	50224 <__Stack_Size+0x4fe24>
    7a20:	01000034 	tsteq	r0, r4, lsr r0
    7a24:	0001019a 	muleq	r1, sl, r1
    7a28:	10080060 	andne	r0, r8, r0, rrx
    7a2c:	01080060 	tsteq	r8, r0, rrx
    7a30:	fb01225d 	blx	503ae <__Stack_Size+0x4ffae>
    7a34:	01000034 	tsteq	r0, r4, lsr r0
    7a38:	100101a6 	andne	r0, r1, r6, lsr #3
    7a3c:	20080060 	andcs	r0, r8, r0, rrx
    7a40:	01080060 	tsteq	r8, r0, rrx
    7a44:	0201205d 	andeq	r2, r1, #93	; 0x5d
    7a48:	01000036 	tsteq	r0, r6, lsr r0
    7a4c:	200101b9 	strhcs	r0, [r1], -r9
    7a50:	3c080060 	stccc	0, cr0, [r8], {96}
    7a54:	01080060 	tsteq	r8, r0, rrx
    7a58:	0005d05d 	andeq	sp, r5, sp, asr r0
    7a5c:	37642100 	strbcc	r2, [r4, -r0, lsl #2]!
    7a60:	b8010000 	stmdalt	r1, {}
    7a64:	00005e01 	andeq	r5, r0, r1, lsl #28
    7a68:	21500100 	cmpcs	r0, r0, lsl #2
    7a6c:	00002aa9 	andeq	r2, r0, r9, lsr #21
    7a70:	ae01b801 	cdpge	8, 0, cr11, cr1, cr1, {0}
    7a74:	01000000 	tsteq	r0, r0
    7a78:	01200051 	qsubeq	r0, r1, r0
    7a7c:	000035e9 	andeq	r3, r0, r9, ror #11
    7a80:	0101d701 	tsteq	r1, r1, lsl #14
    7a84:	0800603c 	stmdaeq	r0, {r2, r3, r4, r5, sp, lr}
    7a88:	08006064 	stmdaeq	r0, {r2, r5, r6, sp, lr}
    7a8c:	06155d01 	ldreq	r5, [r5], -r1, lsl #26
    7a90:	df1d0000 	svcle	0x001d0000
    7a94:	01000034 	tsteq	r0, r4, lsr r0
    7a98:	003a01d6 	ldrsbteq	r0, [sl], -r6
    7a9c:	35800000 	strcc	r0, [r0]
    7aa0:	a9210000 	stmdbge	r1!, {}
    7aa4:	0100002a 	tsteq	r0, sl, lsr #32
    7aa8:	00ae01d6 	ldrdeq	r0, [lr], r6
    7aac:	51010000 	tstpl	r1, r0
    7ab0:	002b4223 	eoreq	r4, fp, r3, lsr #4
    7ab4:	01d80100 	bicseq	r0, r8, r0, lsl #2
    7ab8:	0000003a 	andeq	r0, r0, sl, lsr r0
    7abc:	24005001 	strcs	r5, [r0], #-1
    7ac0:	00344901 	eorseq	r4, r4, r1, lsl #18
    7ac4:	02000100 	andeq	r0, r0, #0	; 0x0
    7ac8:	00606401 	rsbeq	r6, r0, r1, lsl #8
    7acc:	0060bc08 	rsbeq	fp, r0, r8, lsl #24
    7ad0:	00359308 	eorseq	r9, r5, r8, lsl #6
    7ad4:	00069800 	andeq	r9, r6, r0, lsl #16
    7ad8:	34df1d00 	ldrbcc	r1, [pc], #3328	; 7ae0 <__Stack_Size+0x76e0>
    7adc:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    7ae0:	00003a01 	andeq	r3, r0, r1, lsl #20
    7ae4:	0035b200 	eorseq	fp, r5, r0, lsl #4
    7ae8:	36dd1d00 	ldrbcc	r1, [sp], r0, lsl #26
    7aec:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    7af0:	00005e01 	andeq	r5, r0, r1, lsl #28
    7af4:	0035c500 	eorseq	ip, r5, r0, lsl #10
    7af8:	33e11d00 	mvncc	r1, #0	; 0x0
    7afc:	ff010000 	undefined instruction 0xff010000
    7b00:	00005e01 	andeq	r5, r0, r1, lsl #28
    7b04:	0035d800 	eorseq	sp, r5, r0, lsl #16
    7b08:	330d2500 	movwcc	r2, #54528	; 0xd500
    7b0c:	01010000 	tsteq	r1, r0
    7b10:	00003a02 	andeq	r3, r0, r2, lsl #20
    7b14:	0035eb00 	eorseq	lr, r5, r0, lsl #22
    7b18:	36831e00 	strcc	r1, [r3], r0, lsl #28
    7b1c:	01010000 	tsteq	r1, r0
    7b20:	00003a02 	andeq	r3, r0, r2, lsl #20
    7b24:	37581e00 	ldrbcc	r1, [r8, -r0, lsl #28]
    7b28:	01010000 	tsteq	r1, r0
    7b2c:	00003a02 	andeq	r3, r0, r2, lsl #20
    7b30:	362b2500 	strtcc	r2, [fp], -r0, lsl #10
    7b34:	02010000 	andeq	r0, r1, #0	; 0x0
    7b38:	00003a02 	andeq	r3, r0, r2, lsl #20
    7b3c:	0035fe00 	eorseq	pc, r5, r0, lsl #28
    7b40:	011c0000 	tsteq	ip, r0
    7b44:	00003688 	andeq	r3, r0, r8, lsl #13
    7b48:	01022901 	tsteq	r2, r1, lsl #18
    7b4c:	0000008e 	andeq	r0, r0, lr, lsl #1
    7b50:	080060bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sp, lr}
    7b54:	080060dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sp, lr}
    7b58:	06ed5d01 	strbteq	r5, [sp], r1, lsl #26
    7b5c:	df1d0000 	svcle	0x001d0000
    7b60:	01000034 	tsteq	r0, r4, lsr r0
    7b64:	003a0228 	eorseq	r0, sl, r8, lsr #4
    7b68:	36270000 	strtcc	r0, [r7], -r0
    7b6c:	821e0000 	andshi	r0, lr, #0	; 0x0
    7b70:	0100002c 	tsteq	r0, ip, lsr #32
    7b74:	008e022a 	addeq	r0, lr, sl, lsr #4
    7b78:	74260000 	strtvc	r0, [r6]
    7b7c:	0100706d 	tsteq	r0, sp, rrx
    7b80:	003a022b 	eorseq	r0, sl, fp, lsr #4
    7b84:	6c250000 	stcvs	0, cr0, [r5]
    7b88:	01000035 	tsteq	r0, r5, lsr r0
    7b8c:	003a022b 	eorseq	r0, sl, fp, lsr #4
    7b90:	363a0000 	ldrtcc	r0, [sl], -r0
    7b94:	20000000 	andcs	r0, r0, r0
    7b98:	00357801 	eorseq	r7, r5, r1, lsl #16
    7b9c:	024f0100 	subeq	r0, pc, #0	; 0x0
    7ba0:	0060dc01 	rsbeq	sp, r0, r1, lsl #24
    7ba4:	0060f408 	rsbeq	pc, r0, r8, lsl #8
    7ba8:	225d0108 	subscs	r0, sp, #2	; 0x2
    7bac:	1d000007 	stcne	0, cr0, [r0, #-28]
    7bb0:	000034df 	ldrdeq	r3, [r0], -pc
    7bb4:	3a024e01 	bcc	9b3c0 <__Stack_Size+0x9afc0>
    7bb8:	58000000 	stmdapl	r0, {}
    7bbc:	26000036 	undefined
    7bc0:	00706d74 	rsbseq	r6, r0, r4, ror sp
    7bc4:	3a025001 	bcc	9bbd0 <__Stack_Size+0x9b7d0>
    7bc8:	00000000 	andeq	r0, r0, r0
    7bcc:	36ae0120 	strtcc	r0, [lr], r0, lsr #2
    7bd0:	67010000 	strvs	r0, [r1, -r0]
    7bd4:	60f40102 	rscsvs	r0, r4, r2, lsl #2
    7bd8:	610c0800 	tstvs	ip, r0, lsl #16
    7bdc:	5d010800 	stcpl	8, cr0, [r1]
    7be0:	00000757 	andeq	r0, r0, r7, asr r7
    7be4:	0034df1d 	eorseq	sp, r4, sp, lsl pc
    7be8:	02660100 	rsbeq	r0, r6, #0	; 0x0
    7bec:	0000003a 	andeq	r0, r0, sl, lsr r0
    7bf0:	0000366b 	andeq	r3, r0, fp, ror #12
    7bf4:	706d7426 	rsbvc	r7, sp, r6, lsr #8
    7bf8:	02680100 	rsbeq	r0, r8, #0	; 0x0
    7bfc:	0000003a 	andeq	r0, r0, sl, lsr r0
    7c00:	12011c00 	andne	r1, r1, #0	; 0x0
    7c04:	01000035 	tsteq	r0, r5, lsr r0
    7c08:	8e010285 	cdphi	2, 0, cr0, cr1, cr5, {4}
    7c0c:	0c000000 	stceq	0, cr0, [r0], {0}
    7c10:	2c080061 	stccs	0, cr0, [r8], {97}
    7c14:	01080061 	tsteq	r8, r1, rrx
    7c18:	0007aa5d 	andeq	sl, r7, sp, asr sl
    7c1c:	34df1d00 	ldrbcc	r1, [pc], #3328	; 7c24 <__Stack_Size+0x7824>
    7c20:	84010000 	strhi	r0, [r1]
    7c24:	00003a02 	andeq	r3, r0, r2, lsl #20
    7c28:	00367e00 	eorseq	r7, r6, r0, lsl #28
    7c2c:	2c821e00 	stccs	14, cr1, [r2], {0}
    7c30:	86010000 	strhi	r0, [r1], -r0
    7c34:	00008e02 	andeq	r8, r0, r2, lsl #28
    7c38:	6d742600 	ldclvs	6, cr2, [r4]
    7c3c:	88010070 	stmdahi	r1, {r4, r5, r6}
    7c40:	00003a02 	andeq	r3, r0, r2, lsl #20
    7c44:	356c2300 	strbcc	r2, [ip, #-768]!
    7c48:	88010000 	stmdahi	r1, {}
    7c4c:	00003a02 	andeq	r3, r0, r2, lsl #20
    7c50:	00530100 	subseq	r0, r3, r0, lsl #2
    7c54:	3667011c 	undefined
    7c58:	ad010000 	stcge	0, cr0, [r1]
    7c5c:	003a0102 	eorseq	r0, sl, r2, lsl #2
    7c60:	612c0000 	teqvs	ip, r0
    7c64:	61700800 	cmnvs	r0, r0, lsl #16
    7c68:	5d010800 	stcpl	8, cr0, [r1]
    7c6c:	00000807 	andeq	r0, r0, r7, lsl #16
    7c70:	0034df1d 	eorseq	sp, r4, sp, lsl pc
    7c74:	02ac0100 	adceq	r0, ip, #0	; 0x0
    7c78:	0000003a 	andeq	r0, r0, sl, lsr r0
    7c7c:	00003691 	muleq	r0, r1, r6
    7c80:	0036d025 	eorseq	sp, r6, r5, lsr #32
    7c84:	02ae0100 	adceq	r0, lr, #0	; 0x0
    7c88:	0000003a 	andeq	r0, r0, sl, lsr r0
    7c8c:	000036ba 	strheq	r3, [r0], -sl
    7c90:	002b4225 	eoreq	r4, fp, r5, lsr #4
    7c94:	02af0100 	adceq	r0, pc, #0	; 0x0
    7c98:	0000003a 	andeq	r0, r0, sl, lsr r0
    7c9c:	000036e3 	andeq	r3, r0, r3, ror #13
    7ca0:	00356c25 	eorseq	r6, r5, r5, lsr #24
    7ca4:	02af0100 	adceq	r0, pc, #0	; 0x0
    7ca8:	0000003a 	andeq	r0, r0, sl, lsr r0
    7cac:	0000370c 	andeq	r3, r0, ip, lsl #14
    7cb0:	cc011c00 	stcgt	12, cr1, [r1], {0}
    7cb4:	01000033 	tsteq	r0, r3, lsr r0
    7cb8:	3a0102db 	bcc	4882c <__Stack_Size+0x4842c>
    7cbc:	70000000 	andvc	r0, r0, r0
    7cc0:	84080061 	strhi	r0, [r8], #-97
    7cc4:	01080061 	tsteq	r8, r1, rrx
    7cc8:	0008505d 	andeq	r5, r8, sp, asr r0
    7ccc:	34df1d00 	ldrbcc	r1, [pc], #3328	; 7cd4 <__Stack_Size+0x78d4>
    7cd0:	da010000 	ble	47cd8 <__Stack_Size+0x478d8>
    7cd4:	00003a02 	andeq	r3, r0, r2, lsl #20
    7cd8:	00372a00 	eorseq	r2, r7, r0, lsl #20
    7cdc:	343c2500 	ldrtcc	r2, [ip], #-1280
    7ce0:	dc010000 	stcle	0, cr0, [r1], {0}
    7ce4:	00003a02 	andeq	r3, r0, r2, lsl #20
    7ce8:	00373d00 	eorseq	r3, r7, r0, lsl #26
    7cec:	6d742600 	ldclvs	6, cr2, [r4]
    7cf0:	dd010070 	stcle	0, cr0, [r1, #-448]
    7cf4:	00003a02 	andeq	r3, r0, r2, lsl #20
    7cf8:	01270000 	teqeq	r7, r0
    7cfc:	000035cc 	andeq	r3, r0, ip, asr #11
    7d00:	3a01fa01 	bcc	8650c <__Stack_Size+0x8610c>
    7d04:	84000000 	strhi	r0, [r0]
    7d08:	90080061 	andls	r0, r8, r1, rrx
    7d0c:	50080061 	andpl	r0, r8, r1, rrx
    7d10:	17000037 	smladxne	r0, r7, r0, r0
    7d14:	00353701 	eorseq	r3, r5, r1, lsl #14
    7d18:	01eb0100 	mvneq	r0, r0, lsl #2
    7d1c:	08006190 	stmdaeq	r0, {r4, r7, r8, sp, lr}
    7d20:	0800619e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, sp, lr}
    7d24:	0000377b 	andeq	r3, r0, fp, ror r7
    7d28:	00000892 	muleq	r0, r2, r8
    7d2c:	00372f16 	eorseq	r2, r7, r6, lsl pc
    7d30:	3aea0100 	bcc	ffa88138 <SCS_BASE+0x1fa7a138>
    7d34:	a6000000 	strge	r0, [r0], -r0
    7d38:	00000037 	andeq	r0, r0, r7, lsr r0
    7d3c:	34ae0128 	strtcc	r0, [lr], #296
    7d40:	dd010000 	stcle	0, cr0, [r1]
    7d44:	0061a001 	rsbeq	sl, r1, r1
    7d48:	0061ac08 	rsbeq	sl, r1, r8, lsl #24
    7d4c:	0037b908 	eorseq	fp, r7, r8, lsl #18
    7d50:	4b012800 	blmi	51d58 <__Stack_Size+0x51958>
    7d54:	01000036 	tsteq	r0, r6, lsr r0
    7d58:	61ac01d1 	ldrdvs	r0, [ip, r1]!
    7d5c:	61b80800 	undefined instruction 0x61b80800
    7d60:	37e40800 	strbcc	r0, [r4, r0, lsl #16]!
    7d64:	01280000 	teqeq	r8, r0
    7d68:	0000342a 	andeq	r3, r0, sl, lsr #8
    7d6c:	b801c501 	stmdalt	r1, {r0, r8, sl, lr, pc}
    7d70:	c4080061 	strgt	r0, [r8], #-97
    7d74:	0f080061 	svceq	0x00080061
    7d78:	28000038 	stmdacs	r0, {r3, r4, r5}
    7d7c:	0033fa01 	eorseq	pc, r3, r1, lsl #20
    7d80:	01b90100 	undefined instruction 0x01b90100
    7d84:	080061c4 	stmdaeq	r0, {r2, r6, r7, r8, sp, lr}
    7d88:	080061d0 	stmdaeq	r0, {r4, r6, r7, r8, sp, lr}
    7d8c:	0000383a 	andeq	r3, r0, sl, lsr r8
    7d90:	00024300 	andeq	r4, r2, r0, lsl #6
    7d94:	90000200 	andls	r0, r0, r0, lsl #4
    7d98:	04000020 	streq	r0, [r0], #-32
    7d9c:	0001c601 	andeq	ip, r1, r1, lsl #12
    7da0:	38260100 	stmdacc	r6!, {r8}
    7da4:	039d0000 	orrseq	r0, sp, #0	; 0x0
    7da8:	61d00000 	bicsvs	r0, r0, r0
    7dac:	62b00800 	adcsvs	r0, r0, #0	; 0x0
    7db0:	1fee0800 	svcne	0x00ee0800
    7db4:	04020000 	streq	r0, [r2]
    7db8:	00417805 	subeq	r7, r1, r5, lsl #16
    7dbc:	05020200 	streq	r0, [r2, #-512]
    7dc0:	00000495 	muleq	r0, r5, r4
    7dc4:	69060102 	stmdbvs	r6, {r1, r8}
    7dc8:	03000004 	movweq	r0, #4	; 0x4
    7dcc:	00323375 	eorseq	r3, r2, r5, ror r3
    7dd0:	00452702 	subeq	r2, r5, r2, lsl #14
    7dd4:	04020000 	streq	r0, [r2]
    7dd8:	0041f207 	subeq	pc, r1, r7, lsl #4
    7ddc:	07020200 	streq	r0, [r2, -r0, lsl #4]
    7de0:	00000222 	andeq	r0, r0, r2, lsr #4
    7de4:	00387503 	eorseq	r7, r8, r3, lsl #10
    7de8:	005d2902 	subseq	r2, sp, r2, lsl #18
    7dec:	01020000 	tsteq	r2, r0
    7df0:	00046708 	andeq	r6, r4, r8, lsl #14
    7df4:	00450400 	subeq	r0, r5, r0, lsl #8
    7df8:	01050000 	tsteq	r5, r0
    7dfc:	007e3a02 	rsbseq	r3, lr, r2, lsl #20
    7e00:	bd060000 	stclt	0, cr0, [r6]
    7e04:	0000000e 	andeq	r0, r0, lr
    7e08:	54455307 	strbpl	r5, [r5], #-775
    7e0c:	08000100 	stmdaeq	r0, {r8}
    7e10:	00003b17 	andeq	r3, r0, r7, lsl fp
    7e14:	00693a02 	rsbeq	r3, r9, r2, lsl #20
    7e18:	01050000 	tsteq	r5, r0
    7e1c:	009e3c02 	addseq	r3, lr, r2, lsl #24
    7e20:	a7060000 	strge	r0, [r6, -r0]
    7e24:	00000021 	andeq	r0, r0, r1, lsr #32
    7e28:	00043906 	andeq	r3, r4, r6, lsl #18
    7e2c:	08000100 	stmdaeq	r0, {r8}
    7e30:	0000268c 	andeq	r2, r0, ip, lsl #13
    7e34:	00893c02 	addeq	r3, r9, r2, lsl #24
    7e38:	04090000 	streq	r0, [r9]
    7e3c:	03080a07 	movweq	r0, #35335	; 0x8a07
    7e40:	00d301a4 	sbcseq	r0, r3, r4, lsr #3
    7e44:	430b0000 	movwmi	r0, #45056	; 0xb000
    7e48:	a5030052 	strge	r0, [r3, #-82]
    7e4c:	00006401 	andeq	r6, r0, r1, lsl #8
    7e50:	00230200 	eoreq	r0, r3, r0, lsl #4
    7e54:	5253430b 	subspl	r4, r3, #738197504	; 0x2c000000
    7e58:	01a60300 	undefined instruction 0x01a60300
    7e5c:	00000064 	andeq	r0, r0, r4, rrx
    7e60:	00042302 	andeq	r2, r4, r2, lsl #6
    7e64:	388d010c 	stmcc	sp, {r2, r3, r8}
    7e68:	52010000 	andpl	r0, r1, #0	; 0x0
    7e6c:	0061d001 	rsbeq	sp, r1, r1
    7e70:	0061dc08 	rsbeq	sp, r1, r8, lsl #24
    7e74:	f85d0108 	undefined instruction 0xf85d0108
    7e78:	0d000000 	stceq	0, cr0, [r0]
    7e7c:	00002aa9 	andeq	r2, r0, r9, lsr #21
    7e80:	009e5101 	addseq	r5, lr, r1, lsl #2
    7e84:	50010000 	andpl	r0, r1, r0
    7e88:	1b010c00 	blne	4ae90 <__Stack_Size+0x4aa90>
    7e8c:	01000038 	tsteq	r0, r8, lsr r0
    7e90:	61dc0162 	bicsvs	r0, ip, r2, ror #2
    7e94:	61e80800 	mvnvs	r0, r0, lsl #16
    7e98:	5d010800 	stcpl	8, cr0, [r1]
    7e9c:	0000011d 	andeq	r0, r0, sp, lsl r1
    7ea0:	002aa90d 	eoreq	sl, sl, sp, lsl #18
    7ea4:	9e610100 	powlss	f0, f1, f0
    7ea8:	01000000 	tsteq	r0, r0
    7eac:	010c0050 	qaddeq	r0, r0, ip
    7eb0:	00003848 	andeq	r3, r0, r8, asr #16
    7eb4:	e8017b01 	stmda	r1, {r0, r8, r9, fp, ip, sp, lr}
    7eb8:	fc080061 	stc2	0, cr0, [r8], {97}
    7ebc:	01080061 	tsteq	r8, r1, rrx
    7ec0:	0001535d 	andeq	r5, r1, sp, asr r3
    7ec4:	38050e00 	stmdacc	r5, {r9, sl, fp}
    7ec8:	7a010000 	bvc	47ed0 <__Stack_Size+0x47ad0>
    7ecc:	0000003a 	andeq	r0, r0, sl, lsr r0
    7ed0:	00003865 	andeq	r3, r0, r5, ror #16
    7ed4:	002b420f 	eoreq	r4, fp, pc, lsl #4
    7ed8:	3a7c0100 	bcc	1f082e0 <__Stack_Size+0x1f07ee0>
    7edc:	78000000 	stmdavc	r0, {}
    7ee0:	00000038 	andeq	r0, r0, r8, lsr r0
    7ee4:	38a1010c 	stmiacc	r1!, {r2, r3, r8}
    7ee8:	96010000 	strls	r0, [r1], -r0
    7eec:	0061fc01 	rsbeq	pc, r1, r1, lsl #24
    7ef0:	00620808 	rsbeq	r0, r2, r8, lsl #16
    7ef4:	785d0108 	ldmdavc	sp, {r3, r8}^
    7ef8:	0d000001 	stceq	0, cr0, [r0, #-4]
    7efc:	00002aa9 	andeq	r2, r0, r9, lsr #21
    7f00:	009e9501 	addseq	r9, lr, r1, lsl #10
    7f04:	50010000 	andpl	r0, r1, r0
    7f08:	5b011000 	blpl	4bf10 <__Stack_Size+0x4bb10>
    7f0c:	01000038 	tsteq	r0, r8, lsr r0
    7f10:	007e01f3 	ldrshteq	r0, [lr], #-19
    7f14:	62080000 	andvs	r0, r8, #0	; 0x0
    7f18:	621c0800 	andsvs	r0, ip, #0	; 0x0
    7f1c:	5d010800 	stcpl	8, cr0, [r1]
    7f20:	000001ae 	andeq	r0, r0, lr, lsr #3
    7f24:	0038120e 	eorseq	r1, r8, lr, lsl #4
    7f28:	3af20100 	bcc	ffc88330 <SCS_BASE+0x1fc7a330>
    7f2c:	96000000 	strls	r0, [r0], -r0
    7f30:	11000038 	tstne	r0, r8, lsr r0
    7f34:	00002c82 	andeq	r2, r0, r2, lsl #25
    7f38:	007ef401 	rsbseq	pc, lr, r1, lsl #8
    7f3c:	12000000 	andne	r0, r0, #0	; 0x0
    7f40:	0037de01 	eorseq	sp, r7, r1, lsl #28
    7f44:	01110100 	tsteq	r1, r0, lsl #2
    7f48:	00621c01 	rsbeq	r1, r2, r1, lsl #24
    7f4c:	00622c08 	rsbeq	r2, r2, r8, lsl #24
    7f50:	d55d0108 	ldrble	r0, [sp, #-264]
    7f54:	13000001 	movwne	r0, #1	; 0x1
    7f58:	00003812 	andeq	r3, r0, r2, lsl r8
    7f5c:	3a011001 	bcc	4bf68 <__Stack_Size+0x4bb68>
    7f60:	01000000 	tsteq	r0, r0
    7f64:	01140050 	tsteq	r4, r0, asr r0
    7f68:	000037c9 	andeq	r3, r0, r9, asr #15
    7f6c:	2c01d901 	stccs	9, cr13, [r1], {1}
    7f70:	60080062 	andvs	r0, r8, r2, rrx
    7f74:	a9080062 	stmdbge	r8, {r1, r5, r6}
    7f78:	15000038 	strne	r0, [r0, #-56]
    7f7c:	00386d01 	eorseq	r6, r8, r1, lsl #26
    7f80:	01ae0100 	undefined instruction 0x01ae0100
    7f84:	08006260 	stmdaeq	r0, {r5, r6, r9, sp, lr}
    7f88:	08006298 	stmdaeq	r0, {r3, r4, r7, r9, sp, lr}
    7f8c:	000038d4 	ldrdeq	r3, [r0], -r4
    7f90:	00000231 	andeq	r0, r0, r1, lsr r2
    7f94:	0037f70e 	eorseq	pc, r7, lr, lsl #14
    7f98:	3aad0100 	bcc	feb483a0 <SCS_BASE+0x1eb3a3a0>
    7f9c:	ff000000 	undefined instruction 0xff000000
    7fa0:	0e000038 	mcreq	0, 0, r0, cr0, cr8, {1}
    7fa4:	0000387f 	andeq	r3, r0, pc, ror r8
    7fa8:	0053ad01 	subseq	sl, r3, r1, lsl #26
    7fac:	39120000 	ldmdbcc	r2, {}
    7fb0:	420f0000 	andmi	r0, pc, #0	; 0x0
    7fb4:	0100002b 	tsteq	r0, fp, lsr #32
    7fb8:	00003aaf 	andeq	r3, r0, pc, lsr #21
    7fbc:	00393000 	eorseq	r3, r9, r0
    7fc0:	01140000 	tsteq	r4, r0
    7fc4:	000037ec 	andeq	r3, r0, ip, ror #15
    7fc8:	98014401 	stmdals	r1, {r0, sl, lr}
    7fcc:	b0080062 	andlt	r0, r8, r2, rrx
    7fd0:	59080062 	stmdbpl	r8, {r1, r5, r6}
    7fd4:	00000039 	andeq	r0, r0, r9, lsr r0
    7fd8:	000008b9 	strheq	r0, [r0], -r9
    7fdc:	21d00002 	bicscs	r0, r0, r2
    7fe0:	01040000 	tsteq	r4, r0
    7fe4:	000001c6 	andeq	r0, r0, r6, asr #3
    7fe8:	003c1f01 	eorseq	r1, ip, r1, lsl #30
    7fec:	00039d00 	andeq	r9, r3, r0, lsl #26
    7ff0:	0062b000 	rsbeq	fp, r2, r0
    7ff4:	00665408 	rsbeq	r5, r6, r8, lsl #8
    7ff8:	0020c408 	eoreq	ip, r0, r8, lsl #8
    7ffc:	05040200 	streq	r0, [r4, #-512]
    8000:	00004178 	andeq	r4, r0, r8, ror r1
    8004:	95050202 	strls	r0, [r5, #-514]
    8008:	02000004 	andeq	r0, r0, #4	; 0x4
    800c:	04690601 	strbteq	r0, [r9], #-1537
    8010:	75030000 	strvc	r0, [r3]
    8014:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    8018:	00004527 	andeq	r4, r0, r7, lsr #10
    801c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    8020:	000041f2 	strdeq	r4, [r0], -r2
    8024:	22070202 	andcs	r0, r7, #536870912	; 0x20000000
    8028:	03000002 	movweq	r0, #2	; 0x2
    802c:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    8030:	00005d29 	andeq	r5, r0, r9, lsr #26
    8034:	08010200 	stmdaeq	r1, {r9}
    8038:	00000467 	andeq	r0, r0, r7, ror #8
    803c:	00004504 	andeq	r4, r0, r4, lsl #10
    8040:	02010500 	andeq	r0, r1, #0	; 0x0
    8044:	00007e3a 	andeq	r7, r0, sl, lsr lr
    8048:	0ebd0600 	cdpeq	6, 11, cr0, cr13, cr0, {0}
    804c:	07000000 	streq	r0, [r0, -r0]
    8050:	00544553 	subseq	r4, r4, r3, asr r5
    8054:	17080001 	strne	r0, [r8, -r1]
    8058:	0200003b 	andeq	r0, r0, #59	; 0x3b
    805c:	0000693a 	andeq	r6, r0, sl, lsr r9
    8060:	39110800 	ldmdbcc	r1, {fp}
    8064:	3a020000 	bcc	8806c <__Stack_Size+0x87c6c>
    8068:	00000069 	andeq	r0, r0, r9, rrx
    806c:	3c020105 	stfccs	f0, [r2], {5}
    8070:	000000a9 	andeq	r0, r0, r9, lsr #1
    8074:	0021a706 	eoreq	sl, r1, r6, lsl #14
    8078:	39060000 	stmdbcc	r6, {}
    807c:	01000004 	tsteq	r0, r4
    8080:	268c0800 	strcs	r0, [ip], r0, lsl #16
    8084:	3c020000 	stccc	0, cr0, [r2], {0}
    8088:	00000094 	muleq	r0, r4, r0
    808c:	3f020105 	svccc	0x00020105
    8090:	000000c9 	andeq	r0, r0, r9, asr #1
    8094:	0004d106 	andeq	sp, r4, r6, lsl #2
    8098:	8d060000 	stchi	0, cr0, [r6]
    809c:	01000004 	tsteq	r0, r4
    80a0:	252f0800 	strcs	r0, [pc, #-2048]!	; 78a8 <__Stack_Size+0x74a8>
    80a4:	3f020000 	svccc	0x00020000
    80a8:	000000b4 	strheq	r0, [r0], -r4
    80ac:	0a070409 	beq	1c90d8 <__Stack_Size+0x1c8cd8>
    80b0:	01ab0328 	undefined instruction 0x01ab0328
    80b4:	00000176 	andeq	r0, r0, r6, ror r1
    80b8:	0052430b 	subseq	r4, r2, fp, lsl #6
    80bc:	6401ac03 	strvs	sl, [r1], #-3075
    80c0:	02000000 	andeq	r0, r0, #0	; 0x0
    80c4:	760c0023 	strvc	r0, [ip], -r3, lsr #32
    80c8:	03000039 	movweq	r0, #57	; 0x39
    80cc:	006401ad 	rsbeq	r0, r4, sp, lsr #3
    80d0:	23020000 	movwcs	r0, #8192	; 0x2000
    80d4:	49430b04 	stmdbmi	r3, {r2, r8, r9, fp}^
    80d8:	ae030052 	mcrge	0, 0, r0, cr3, cr2, {2}
    80dc:	00006401 	andeq	r6, r0, r1, lsl #8
    80e0:	08230200 	stmdaeq	r3!, {r9}
    80e4:	003a350c 	eorseq	r3, sl, ip, lsl #10
    80e8:	01af0300 	undefined instruction 0x01af0300
    80ec:	00000064 	andeq	r0, r0, r4, rrx
    80f0:	0c0c2302 	stceq	3, cr2, [ip], {2}
    80f4:	000038b2 	strheq	r3, [r0], -r2
    80f8:	6401b003 	strvs	fp, [r1], #-3
    80fc:	02000000 	andeq	r0, r0, #0	; 0x0
    8100:	570c1023 	strpl	r1, [ip, -r3, lsr #32]
    8104:	0300003a 	movweq	r0, #58	; 0x3a
    8108:	006401b1 	strhteq	r0, [r4], #-17
    810c:	23020000 	movwcs	r0, #8192	; 0x2000
    8110:	3a8f0c14 	bcc	fe3cb168 <SCS_BASE+0x1e3bd168>
    8114:	b2030000 	andlt	r0, r3, #0	; 0x0
    8118:	00006401 	andeq	r6, r0, r1, lsl #8
    811c:	18230200 	stmdane	r3!, {r9}
    8120:	00398a0c 	eorseq	r8, r9, ip, lsl #20
    8124:	01b30300 	undefined instruction 0x01b30300
    8128:	00000064 	andeq	r0, r0, r4, rrx
    812c:	0c1c2302 	ldceq	3, cr2, [ip], {2}
    8130:	0000391a 	andeq	r3, r0, sl, lsl r9
    8134:	6401b403 	strvs	fp, [r1], #-1027
    8138:	02000000 	andeq	r0, r0, #0	; 0x0
    813c:	430b2023 	movwmi	r2, #45091	; 0xb023
    8140:	03005253 	movweq	r5, #595	; 0x253
    8144:	006401b5 	strhteq	r0, [r4], #-21
    8148:	23020000 	movwcs	r0, #8192	; 0x2000
    814c:	140d0024 	strne	r0, [sp], #-36
    8150:	01c51a04 	biceq	r1, r5, r4, lsl #20
    8154:	750e0000 	strvc	r0, [lr]
    8158:	0400003b 	streq	r0, [r0], #-59
    815c:	00003a1b 	andeq	r3, r0, fp, lsl sl
    8160:	00230200 	eoreq	r0, r3, r0, lsl #4
    8164:	00397b0e 	eorseq	r7, r9, lr, lsl #22
    8168:	3a1c0400 	bcc	709170 <__Stack_Size+0x708d70>
    816c:	02000000 	andeq	r0, r0, #0	; 0x0
    8170:	de0e0423 	cdple	4, 0, cr0, cr14, cr3, {1}
    8174:	0400003b 	streq	r0, [r0], #-59
    8178:	00003a1d 	andeq	r3, r0, sp, lsl sl
    817c:	08230200 	stmdaeq	r3!, {r9}
    8180:	003b910e 	eorseq	r9, fp, lr, lsl #2
    8184:	3a1e0400 	bcc	78918c <__Stack_Size+0x788d8c>
    8188:	02000000 	andeq	r0, r0, #0	; 0x0
    818c:	d70e0c23 	strle	r0, [lr, -r3, lsr #24]
    8190:	0400003a 	streq	r0, [r0], #-58
    8194:	00003a1f 	andeq	r3, r0, pc, lsl sl
    8198:	10230200 	eorne	r0, r3, r0, lsl #4
    819c:	39430800 	stmdbcc	r3, {fp}^
    81a0:	20040000 	andcs	r0, r4, r0
    81a4:	00000176 	andeq	r0, r0, r6, ror r1
    81a8:	3b10010f 	blcc	4085ec <__Stack_Size+0x4081ec>
    81ac:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    81b0:	007e0103 	rsbseq	r0, lr, r3, lsl #2
    81b4:	14010000 	strne	r0, [r1]
    81b8:	10000002 	andne	r0, r0, r2
    81bc:	00003ae8 	andeq	r3, r0, r8, ror #21
    81c0:	5303dd01 	movwpl	sp, #15617	; 0x3d01
    81c4:	11000000 	tstne	r0, r0
    81c8:	00706d74 	rsbseq	r6, r0, r4, ror sp
    81cc:	3a03df01 	bcc	ffdd8 <__Stack_Size+0xff9d8>
    81d0:	12000000 	andne	r0, r0, #0	; 0x0
    81d4:	00003a6e 	andeq	r3, r0, lr, ror #20
    81d8:	3a03e001 	bcc	1001e4 <__Stack_Size+0xffde4>
    81dc:	12000000 	andne	r0, r0, #0	; 0x0
    81e0:	00002c82 	andeq	r2, r0, r2, lsl #25
    81e4:	7e03e101 	mvfvcs	f6, f1
    81e8:	00000000 	andeq	r0, r0, r0
    81ec:	39a60113 	stmibcc	r6!, {r0, r1, r4, r8}
    81f0:	7d010000 	stcvc	0, cr0, [r1]
    81f4:	0062b001 	rsbeq	fp, r2, r1
    81f8:	0062f008 	rsbeq	pc, r2, r8
    81fc:	145d0108 	ldrbne	r0, [sp], #-264
    8200:	003b6701 	eorseq	r6, fp, r1, lsl #14
    8204:	01a00100 	lsleq	r0, r0, #2
    8208:	080062f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sp, lr}
    820c:	08006324 	stmdaeq	r0, {r2, r5, r8, r9, sp, lr}
    8210:	024c5d01 	subeq	r5, ip, #64	; 0x40
    8214:	c5150000 	ldrgt	r0, [r5]
    8218:	0100003b 	tsteq	r0, fp, lsr r0
    821c:	00003a9f 	muleq	r0, pc, sl
    8220:	00500100 	subseq	r0, r0, r0, lsl #2
    8224:	39b10116 	ldmibcc	r1!, {r1, r2, r4, r8}
    8228:	c7010000 	strgt	r0, [r1, -r0]
    822c:	0000c901 	andeq	ip, r0, r1, lsl #18
    8230:	00632400 	rsbeq	r2, r3, r0, lsl #8
    8234:	00635408 	rsbeq	r5, r3, r8, lsl #8
    8238:	00397808 	eorseq	r7, r9, r8, lsl #16
    823c:	0002f100 	andeq	pc, r2, r0, lsl #2
    8240:	3a971700 	bcc	fe5cde48 <SCS_BASE+0x1e5bfe48>
    8244:	c8010000 	stmdagt	r1, {}
    8248:	00000064 	andeq	r0, r0, r4, rrx
    824c:	00003997 	muleq	r0, r7, r9
    8250:	002af718 	eoreq	pc, sl, r8, lsl r7
    8254:	c9c90100 	stmibgt	r9, {r8}^
    8258:	18000000 	stmdane	r0, {}
    825c:	00003b5d 	andeq	r3, r0, sp, asr fp
    8260:	007eca01 	rsbseq	ip, lr, r1, lsl #20
    8264:	d0190000 	andsle	r0, r9, r0
    8268:	28000001 	stmdacs	r0, {r0}
    826c:	c0080063 	andgt	r0, r8, r3, rrx
    8270:	01000001 	tsteq	r0, r1
    8274:	0002becf 	andeq	fp, r2, pc, asr #29
    8278:	01e31a00 	mvneq	r1, r0, lsl #20
    827c:	d81b0000 	ldmdale	fp, {}
    8280:	1c000001 	stcne	0, cr0, [r0], {1}
    8284:	000001ef 	andeq	r0, r0, pc, ror #3
    8288:	0001fb1d 	andeq	pc, r1, sp, lsl fp
    828c:	1c520100 	ldfnee	f0, [r2], {0}
    8290:	00000207 	andeq	r0, r0, r7, lsl #4
    8294:	d01e0000 	andsle	r0, lr, r0
    8298:	42000001 	andmi	r0, r0, #1	; 0x1
    829c:	4c080063 	stcmi	0, cr0, [r8], {99}
    82a0:	01080063 	tsteq	r8, r3, rrx
    82a4:	01e31ad4 	ldrdeq	r1, [r3, #164]!
    82a8:	421f0000 	andsmi	r0, pc, #0	; 0x0
    82ac:	4c080063 	stcmi	0, cr0, [r8], {99}
    82b0:	1c080063 	stcne	0, cr0, [r8], {99}
    82b4:	000001ef 	andeq	r0, r0, pc, ror #3
    82b8:	0001fb20 	andeq	pc, r1, r0, lsr #22
    82bc:	0039c200 	eorseq	ip, r9, r0, lsl #4
    82c0:	02071c00 	andeq	r1, r7, #0	; 0x0
    82c4:	00000000 	andeq	r0, r0, r0
    82c8:	b9011400 	stmdblt	r1, {sl, ip}
    82cc:	0100003a 	tsteq	r0, sl, lsr r0
    82d0:	635401ea 	cmpvs	r4, #-2147483590	; 0x8000003a
    82d4:	63680800 	cmnvs	r8, #0	; 0x0
    82d8:	5d010800 	stcpl	8, cr0, [r1]
    82dc:	00000323 	andeq	r0, r0, r3, lsr #6
    82e0:	003ac315 	eorseq	ip, sl, r5, lsl r3
    82e4:	53e90100 	mvnpl	r0, #0	; 0x0
    82e8:	01000000 	tsteq	r0, r0
    82ec:	2b422150 	blcs	1090834 <__Stack_Size+0x1090434>
    82f0:	eb010000 	bl	482f8 <__Stack_Size+0x47ef8>
    82f4:	0000003a 	andeq	r0, r0, sl, lsr r0
    82f8:	22005301 	andcs	r5, r0, #67108864	; 0x4000000
    82fc:	003c7901 	eorseq	r7, ip, r1, lsl #18
    8300:	01070100 	tsteq	r7, r0, lsl #2
    8304:	00636801 	rsbeq	r6, r3, r1, lsl #16
    8308:	00637408 	rsbeq	r7, r3, r8, lsl #8
    830c:	4a5d0108 	bmi	1748734 <__Stack_Size+0x1748334>
    8310:	23000003 	movwcs	r0, #3	; 0x3
    8314:	00002aa9 	andeq	r2, r0, r9, lsr #21
    8318:	a9010601 	stmdbge	r1, {r0, r9, sl}
    831c:	01000000 	tsteq	r0, r0
    8320:	01220050 	qsubeq	r0, r0, r2
    8324:	000039ef 	andeq	r3, r0, pc, ror #19
    8328:	01012001 	tsteq	r1, r1
    832c:	08006374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sp, lr}
    8330:	08006388 	stmdaeq	r0, {r3, r7, r8, r9, sp, lr}
    8334:	03915d01 	orrseq	r5, r1, #64	; 0x40
    8338:	f1240000 	undefined instruction 0xf1240000
    833c:	0100003a 	tsteq	r0, sl, lsr r0
    8340:	003a011f 	eorseq	r0, sl, pc, lsl r1
    8344:	39d50000 	ldmibcc	r5, {}^
    8348:	55230000 	strpl	r0, [r3]!
    834c:	01000039 	tsteq	r0, r9, lsr r0
    8350:	003a011f 	eorseq	r0, sl, pc, lsl r1
    8354:	51010000 	tstpl	r1, r0
    8358:	002b4225 	eoreq	r4, fp, r5, lsr #4
    835c:	01210100 	teqeq	r1, r0, lsl #2
    8360:	0000003a 	andeq	r0, r0, sl, lsr r0
    8364:	000039e8 	andeq	r3, r0, r8, ror #19
    8368:	38012200 	stmdacc	r1, {r9, sp}
    836c:	01000039 	tsteq	r0, r9, lsr r0
    8370:	8801013d 	stmdahi	r1, {r0, r2, r3, r4, r5, r8}
    8374:	94080063 	strls	r0, [r8], #-99
    8378:	01080063 	tsteq	r8, r3, rrx
    837c:	0003b85d 	andeq	fp, r3, sp, asr r8
    8380:	2aa92300 	bcs	fea50f88 <SCS_BASE+0x1ea42f88>
    8384:	3c010000 	stccc	0, cr0, [r1], {0}
    8388:	0000a901 	andeq	sl, r0, r1, lsl #18
    838c:	00500100 	subseq	r0, r0, r0, lsl #2
    8390:	3aff0122 	bcc	fffc8820 <SCS_BASE+0x1ffba820>
    8394:	50010000 	andpl	r0, r1, r0
    8398:	63940101 	orrsvs	r0, r4, #1073741824	; 0x40000000
    839c:	63a80800 	undefined instruction 0x63a80800
    83a0:	5d010800 	stcpl	8, cr0, [r1]
    83a4:	000003f1 	strdeq	r0, [r0], -r1
    83a8:	003bcd24 	eorseq	ip, fp, r4, lsr #26
    83ac:	014f0100 	cmpeq	pc, r0, lsl #2
    83b0:	0000003a 	andeq	r0, r0, sl, lsr r0
    83b4:	00003a06 	andeq	r3, r0, r6, lsl #20
    83b8:	002b4225 	eoreq	r4, fp, r5, lsr #4
    83bc:	01510100 	cmpeq	r1, r0, lsl #2
    83c0:	0000003a 	andeq	r0, r0, sl, lsr r0
    83c4:	00003a19 	andeq	r3, r0, r9, lsl sl
    83c8:	21012600 	tstcs	r1, r0, lsl #12
    83cc:	0100003a 	tsteq	r0, sl, lsr r0
    83d0:	5301016e 	movwpl	r0, #4462	; 0x116e
    83d4:	a8000000 	stmdage	r0, {}
    83d8:	b8080063 	stmdalt	r8, {r0, r1, r5, r6}
    83dc:	01080063 	tsteq	r8, r3, rrx
    83e0:	6a01225d 	bvs	50d5c <__Stack_Size+0x5095c>
    83e4:	0100003c 	tsteq	r0, ip, lsr r0
    83e8:	b8010185 	stmdalt	r1, {r0, r2, r7, r8}
    83ec:	cc080063 	stcgt	0, cr0, [r8], {99}
    83f0:	01080063 	tsteq	r8, r3, rrx
    83f4:	0004425d 	andeq	r4, r4, sp, asr r2
    83f8:	3b522400 	blcc	1491400 <__Stack_Size+0x1491000>
    83fc:	84010000 	strhi	r0, [r1]
    8400:	00003a01 	andeq	r3, r0, r1, lsl #20
    8404:	003a3700 	eorseq	r3, sl, r0, lsl #14
    8408:	2b422500 	blcs	1091810 <__Stack_Size+0x1091410>
    840c:	86010000 	strhi	r0, [r1], -r0
    8410:	00003a01 	andeq	r3, r0, r1, lsl #20
    8414:	003a4a00 	eorseq	r4, sl, r0, lsl #20
    8418:	01220000 	teqeq	r2, r0
    841c:	00003a5e 	andeq	r3, r0, lr, asr sl
    8420:	0101a601 	tsteq	r1, r1, lsl #12
    8424:	080063cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sp, lr}
    8428:	080063e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sp, lr}
    842c:	047b5d01 	ldrbteq	r5, [fp], #-3329
    8430:	bb240000 	bllt	908438 <__Stack_Size+0x908038>
    8434:	01000038 	tsteq	r0, r8, lsr r0
    8438:	003a01a5 	eorseq	r0, sl, r5, lsr #3
    843c:	3a680000 	bcc	1a08444 <__Stack_Size+0x1a08044>
    8440:	42250000 	eormi	r0, r5, #0	; 0x0
    8444:	0100002b 	tsteq	r0, fp, lsr #32
    8448:	003a01a7 	eorseq	r0, sl, r7, lsr #3
    844c:	3a7b0000 	bcc	1ec8454 <__Stack_Size+0x1ec8054>
    8450:	22000000 	andcs	r0, r0, #0	; 0x0
    8454:	003ca101 	eorseq	sl, ip, r1, lsl #2
    8458:	01c70100 	biceq	r0, r7, r0, lsl #2
    845c:	0063e001 	rsbeq	lr, r3, r1
    8460:	0063f408 	rsbeq	pc, r3, r8, lsl #8
    8464:	b05d0108 	subslt	r0, sp, r8, lsl #2
    8468:	23000004 	movwcs	r0, #4	; 0x4
    846c:	000038bb 	strheq	r3, [r0], -fp
    8470:	3a01c601 	bcc	79c7c <__Stack_Size+0x7987c>
    8474:	01000000 	tsteq	r0, r0
    8478:	2b422750 	blcs	10921c0 <__Stack_Size+0x1091dc0>
    847c:	c8010000 	stmdagt	r1, {}
    8480:	00003a01 	andeq	r3, r0, r1, lsl #20
    8484:	00530100 	subseq	r0, r3, r0, lsl #2
    8488:	3ba10122 	blcc	fe848918 <SCS_BASE+0x1e83a918>
    848c:	ea010000 	b	48494 <__Stack_Size+0x48094>
    8490:	63f40101 	mvnsvs	r0, #1073741824	; 0x40000000
    8494:	64100800 	ldrvs	r0, [r0], #-2048
    8498:	5d010800 	stcpl	8, cr0, [r1]
    849c:	000004e5 	andeq	r0, r0, r5, ror #9
    84a0:	003c8c23 	eorseq	r8, ip, r3, lsr #24
    84a4:	01e90100 	mvneq	r0, r0, lsl #2
    84a8:	00000053 	andeq	r0, r0, r3, asr r0
    84ac:	a9235001 	stmdbge	r3!, {r0, ip, lr}
    84b0:	0100002a 	tsteq	r0, sl, lsr #32
    84b4:	00a901e9 	adceq	r0, r9, r9, ror #3
    84b8:	51010000 	tstpl	r1, r0
    84bc:	05012200 	streq	r2, [r1, #-512]
    84c0:	0100003a 	tsteq	r0, sl, lsr r0
    84c4:	10010209 	andne	r0, r1, r9, lsl #4
    84c8:	1c080064 	stcne	0, cr0, [r8], {100}
    84cc:	01080064 	tsteq	r8, r4, rrx
    84d0:	00050c5d 	andeq	r0, r5, sp, asr ip
    84d4:	3b332300 	blcc	cd10dc <__Stack_Size+0xcd0cdc>
    84d8:	08010000 	stmdaeq	r1, {}
    84dc:	00003a02 	andeq	r3, r0, r2, lsl #20
    84e0:	00500100 	subseq	r0, r0, r0, lsl #2
    84e4:	38c40122 	stmiacc	r4, {r1, r5, r8}^
    84e8:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    84ec:	641c0102 	ldrvs	r0, [ip], #-258
    84f0:	64300800 	ldrtvs	r0, [r0], #-2048
    84f4:	5d010800 	stcpl	8, cr0, [r1]
    84f8:	00000545 	andeq	r0, r0, r5, asr #10
    84fc:	00392e24 	eorseq	r2, r9, r4, lsr #28
    8500:	021d0100 	andseq	r0, sp, #0	; 0x0
    8504:	0000003a 	andeq	r0, r0, sl, lsr r0
    8508:	00003a99 	muleq	r0, r9, sl
    850c:	002b4225 	eoreq	r4, fp, r5, lsr #4
    8510:	021f0100 	andseq	r0, pc, #0	; 0x0
    8514:	0000003a 	andeq	r0, r0, sl, lsr r0
    8518:	00003aac 	andeq	r3, r0, ip, lsr #21
    851c:	ee012200 	cdp	2, 0, cr2, cr1, cr0, {0}
    8520:	0100003b 	tsteq	r0, fp, lsr r0
    8524:	3001023d 	andcc	r0, r1, sp, lsr r2
    8528:	50080064 	andpl	r0, r8, r4, rrx
    852c:	01080064 	tsteq	r8, r4, rrx
    8530:	00056c5d 	andeq	r6, r5, sp, asr ip
    8534:	39022300 	stmdbcc	r2, {r8, r9, sp}
    8538:	3c010000 	stccc	0, cr0, [r1], {0}
    853c:	00005302 	andeq	r5, r0, r2, lsl #6
    8540:	00500100 	subseq	r0, r0, r0, lsl #2
    8544:	3a160122 	bcc	5889d4 <__Stack_Size+0x5885d4>
    8548:	64010000 	strvs	r0, [r1]
    854c:	64500102 	ldrbvs	r0, [r0], #-258
    8550:	645c0800 	ldrbvs	r0, [ip], #-2048
    8554:	5d010800 	stcpl	8, cr0, [r1]
    8558:	00000593 	muleq	r0, r3, r5
    855c:	002aa923 	eoreq	sl, sl, r3, lsr #18
    8560:	02630100 	rsbeq	r0, r3, #0	; 0x0
    8564:	000000a9 	andeq	r0, r0, r9, lsr #1
    8568:	22005001 	andcs	r5, r0, #1	; 0x1
    856c:	003b2201 	eorseq	r2, fp, r1, lsl #4
    8570:	027a0100 	rsbseq	r0, sl, #0	; 0x0
    8574:	00645c01 	rsbeq	r5, r4, r1, lsl #24
    8578:	00646c08 	rsbeq	r6, r4, r8, lsl #24
    857c:	bc5d0108 	ldflte	f0, [sp], {8}
    8580:	24000005 	strcs	r0, [r0], #-5
    8584:	000039c7 	andeq	r3, r0, r7, asr #19
    8588:	3a027901 	bcc	a6994 <__Stack_Size+0xa6594>
    858c:	ca000000 	bgt	8594 <__Stack_Size+0x8194>
    8590:	0000003a 	andeq	r0, r0, sl, lsr r0
    8594:	3c410122 	stfcce	f0, [r1], {34}
    8598:	8d010000 	stchi	0, cr0, [r1]
    859c:	646c0102 	strbtvs	r0, [ip], #-258
    85a0:	64780800 	ldrbtvs	r0, [r8], #-2048
    85a4:	5d010800 	stcpl	8, cr0, [r1]
    85a8:	000005e3 	andeq	r0, r0, r3, ror #11
    85ac:	002aa923 	eoreq	sl, sl, r3, lsr #18
    85b0:	028c0100 	addeq	r0, ip, #0	; 0x0
    85b4:	000000a9 	andeq	r0, r0, r9, lsr #1
    85b8:	22005001 	andcs	r5, r0, #1	; 0x1
    85bc:	003c0d01 	eorseq	r0, ip, r1, lsl #26
    85c0:	029d0100 	addseq	r0, sp, #0	; 0x0
    85c4:	00647801 	rsbeq	r7, r4, r1, lsl #16
    85c8:	00653008 	rsbeq	r3, r5, r8
    85cc:	445d0108 	ldrbmi	r0, [sp], #-264
    85d0:	24000006 	strcs	r0, [r0], #-6
    85d4:	00003b86 	andeq	r3, r0, r6, lsl #23
    85d8:	44029c01 	strmi	r9, [r2], #-3073
    85dc:	dd000006 	stcle	0, cr0, [r0, #-24]
    85e0:	2800003a 	stmdacs	r0, {r1, r3, r4, r5}
    85e4:	00706d74 	rsbseq	r6, r0, r4, ror sp
    85e8:	3a029e01 	bcc	afdf4 <__Stack_Size+0xaf9f4>
    85ec:	fb000000 	blx	85f6 <__Stack_Size+0x81f6>
    85f0:	2500003a 	strcs	r0, [r0, #-58]
    85f4:	000039fd 	strdeq	r3, [r0], -sp
    85f8:	3a029e01 	bcc	afe04 <__Stack_Size+0xafa04>
    85fc:	2f000000 	svccs	0x00000000
    8600:	1200003b 	andne	r0, r0, #59	; 0x3b
    8604:	00003a4d 	andeq	r3, r0, sp, asr #20
    8608:	3a029e01 	bcc	afe14 <__Stack_Size+0xafa14>
    860c:	12000000 	andne	r0, r0, #0	; 0x0
    8610:	00003992 	muleq	r0, r2, r9
    8614:	3a029e01 	bcc	afe20 <__Stack_Size+0xafa20>
    8618:	00000000 	andeq	r0, r0, r0
    861c:	01c50429 	biceq	r0, r5, r9, lsr #8
    8620:	01220000 	teqeq	r2, r0
    8624:	00003960 	andeq	r3, r0, r0, ror #18
    8628:	01030101 	tsteq	r3, r1, lsl #2
    862c:	08006530 	stmdaeq	r0, {r4, r5, r8, sl, sp, lr}
    8630:	0800654c 	stmdaeq	r0, {r2, r3, r6, r8, sl, sp, lr}
    8634:	067f5d01 	ldrbteq	r5, [pc], -r1, lsl #26
    8638:	93230000 	teqls	r3, #0	; 0x0
    863c:	0100003c 	tsteq	r0, ip, lsr r0
    8640:	003a0300 	eorseq	r0, sl, r0, lsl #6
    8644:	50010000 	andpl	r0, r1, r0
    8648:	002aa923 	eoreq	sl, sl, r3, lsr #18
    864c:	03000100 	movweq	r0, #256	; 0x100
    8650:	000000a9 	andeq	r0, r0, r9, lsr #1
    8654:	22005101 	andcs	r5, r0, #1073741824	; 0x40000000
    8658:	003bae01 	eorseq	sl, fp, r1, lsl #28
    865c:	03220100 	teqeq	r2, #0	; 0x0
    8660:	00654c01 	rsbeq	r4, r5, r1, lsl #24
    8664:	00656808 	rsbeq	r6, r5, r8, lsl #16
    8668:	b45d0108 	ldrblt	r0, [sp], #-264
    866c:	23000006 	movwcs	r0, #6	; 0x6
    8670:	0000391f 	andeq	r3, r0, pc, lsl r9
    8674:	3a032101 	bcc	d0a80 <__Stack_Size+0xd0680>
    8678:	01000000 	tsteq	r0, r0
    867c:	2aa92350 	bcs	fea513c4 <SCS_BASE+0x1ea433c4>
    8680:	21010000 	tstcs	r1, r0
    8684:	0000a903 	andeq	sl, r0, r3, lsl #18
    8688:	00510100 	subseq	r0, r1, r0, lsl #2
    868c:	3a780122 	bcc	1e08b1c <__Stack_Size+0x1e0871c>
    8690:	44010000 	strmi	r0, [r1]
    8694:	65680103 	strbvs	r0, [r8, #-259]!
    8698:	65840800 	strvs	r0, [r4, #2048]
    869c:	5d010800 	stcpl	8, cr0, [r1]
    86a0:	000006e9 	andeq	r0, r0, r9, ror #13
    86a4:	003a3e23 	eorseq	r3, sl, r3, lsr #28
    86a8:	03430100 	movteq	r0, #12544	; 0x3100
    86ac:	0000003a 	andeq	r0, r0, sl, lsr r0
    86b0:	a9235001 	stmdbge	r3!, {r0, ip, lr}
    86b4:	0100002a 	tsteq	r0, sl, lsr #32
    86b8:	00a90343 	adceq	r0, r9, r3, asr #6
    86bc:	51010000 	tstpl	r1, r0
    86c0:	eb012200 	bl	50ec8 <__Stack_Size+0x50ac8>
    86c4:	01000038 	tsteq	r0, r8, lsr r0
    86c8:	84010364 	strhi	r0, [r1], #-868
    86cc:	a0080065 	andge	r0, r8, r5, rrx
    86d0:	01080065 	tsteq	r8, r5, rrx
    86d4:	00071e5d 	andeq	r1, r7, sp, asr lr
    86d8:	391f2300 	ldmdbcc	pc, {r8, r9, sp}
    86dc:	63010000 	movwvs	r0, #4096	; 0x1000
    86e0:	00003a03 	andeq	r3, r0, r3, lsl #20
    86e4:	23500100 	cmpcs	r0, #0	; 0x0
    86e8:	00002aa9 	andeq	r2, r0, r9, lsr #21
    86ec:	a9036301 	stmdbge	r3, {r0, r8, r9, sp, lr}
    86f0:	01000000 	tsteq	r0, r0
    86f4:	01220051 	qsubeq	r0, r1, r2
    86f8:	000039d8 	ldrdeq	r3, [r0], -r8
    86fc:	01038501 	tsteq	r3, r1, lsl #10
    8700:	080065a0 	stmdaeq	r0, {r5, r7, r8, sl, sp, lr}
    8704:	080065bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, sp, lr}
    8708:	07535d01 	ldrbeq	r5, [r3, -r1, lsl #26]
    870c:	3e230000 	cdpcc	0, 2, cr0, cr3, cr0, {0}
    8710:	0100003a 	tsteq	r0, sl, lsr r0
    8714:	003a0384 	eorseq	r0, sl, r4, lsl #7
    8718:	50010000 	andpl	r0, r1, r0
    871c:	002aa923 	eoreq	sl, sl, r3, lsr #18
    8720:	03840100 	orreq	r0, r4, #0	; 0x0
    8724:	000000a9 	andeq	r0, r0, r9, lsr #1
    8728:	22005101 	andcs	r5, r0, #1073741824	; 0x40000000
    872c:	003aa601 	eorseq	sl, sl, r1, lsl #12
    8730:	039d0100 	orrseq	r0, sp, #0	; 0x0
    8734:	0065bc01 	rsbeq	fp, r5, r1, lsl #24
    8738:	0065c808 	rsbeq	ip, r5, r8, lsl #16
    873c:	7a5d0108 	bvc	1748b64 <__Stack_Size+0x1748764>
    8740:	23000007 	movwcs	r0, #7	; 0x7
    8744:	00002aa9 	andeq	r2, r0, r9, lsr #21
    8748:	a9039c01 	stmdbge	r3, {r0, sl, fp, ip, pc}
    874c:	01000000 	tsteq	r0, r0
    8750:	01220050 	qsubeq	r0, r0, r2
    8754:	00003c4f 	andeq	r3, r0, pc, asr #24
    8758:	0103ad01 	tsteq	r3, r1, lsl #26
    875c:	080065c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, sp, lr}
    8760:	080065d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, sp, lr}
    8764:	07a15d01 	streq	r5, [r1, r1, lsl #26]!
    8768:	a9230000 	stmdbge	r3!, {}
    876c:	0100002a 	tsteq	r0, sl, lsr #32
    8770:	00a903ac 	adceq	r0, r9, ip, lsr #7
    8774:	50010000 	andpl	r0, r1, r0
    8778:	98012200 	stmdals	r1, {r9, sp}
    877c:	01000039 	tsteq	r0, r9, lsr r0
    8780:	d40103c2 	strle	r0, [r1], #-962
    8784:	e0080065 	and	r0, r8, r5, rrx
    8788:	01080065 	tsteq	r8, r5, rrx
    878c:	0007c85d 	andeq	ip, r7, sp, asr r8
    8790:	3c842300 	stccc	3, cr2, [r4], {0}
    8794:	c1010000 	tstgt	r1, r0
    8798:	00005303 	andeq	r5, r0, r3, lsl #6
    879c:	00500100 	subseq	r0, r0, r0, lsl #2
    87a0:	0001d02a 	andeq	sp, r1, sl, lsr #32
    87a4:	0065e000 	rsbeq	lr, r5, r0
    87a8:	00662408 	rsbeq	r2, r6, r8, lsl #8
    87ac:	fc5d0108 	mrrc2	1, 0, r0, sp, cr8
    87b0:	2b000007 	blcs	87d4 <__Stack_Size+0x83d4>
    87b4:	000001e3 	andeq	r0, r0, r3, ror #3
    87b8:	00003b4d 	andeq	r3, r0, sp, asr #22
    87bc:	0001ef20 	andeq	lr, r1, r0, lsr #30
    87c0:	003b6000 	eorseq	r6, fp, r0
    87c4:	01fb2000 	mvnseq	r2, r0
    87c8:	3b890000 	blcc	fe2487d0 <SCS_BASE+0x1e23a7d0>
    87cc:	071c0000 	ldreq	r0, [ip, -r0]
    87d0:	00000002 	andeq	r0, r0, r2
    87d4:	3b44012c 	blcc	1108c8c <__Stack_Size+0x110888c>
    87d8:	11010000 	tstne	r1, r0
    87dc:	66240104 	strtvs	r0, [r4], -r4, lsl #2
    87e0:	66340800 	ldrtvs	r0, [r4], -r0, lsl #16
    87e4:	5d010800 	stcpl	8, cr0, [r1]
    87e8:	390a012d 	stmdbcc	sl, {r0, r2, r3, r5, r8}
    87ec:	25010000 	strcs	r0, [r1]
    87f0:	00890104 	addeq	r0, r9, r4, lsl #2
    87f4:	66340000 	ldrtvs	r0, [r4], -r0
    87f8:	66480800 	strbvs	r0, [r8], -r0, lsl #16
    87fc:	5d010800 	stcpl	8, cr0, [r1]
    8800:	00000849 	andeq	r0, r0, r9, asr #16
    8804:	003c8c24 	eorseq	r8, ip, r4, lsr #24
    8808:	04240100 	strteq	r0, [r4], #-256
    880c:	00000053 	andeq	r0, r0, r3, asr r0
    8810:	00003bb2 	strheq	r3, [r0], -r2
    8814:	002c8212 	eoreq	r8, ip, r2, lsl r2
    8818:	04260100 	strteq	r0, [r6], #-256
    881c:	00000089 	andeq	r0, r0, r9, lsl #1
    8820:	d5012200 	strle	r2, [r1, #-512]
    8824:	01000038 	tsteq	r0, r8, lsr r0
    8828:	48010448 	stmdami	r1, {r3, r6, sl}
    882c:	54080066 	strpl	r0, [r8], #-102
    8830:	01080066 	tsteq	r8, r6, rrx
    8834:	0008705d 	andeq	r7, r8, sp, asr r0
    8838:	3c8c2300 	stccc	3, cr2, [ip], {0}
    883c:	47010000 	strmi	r0, [r1, -r0]
    8840:	00005304 	andeq	r5, r0, r4, lsl #6
    8844:	00500100 	subseq	r0, r0, r0, lsl #2
    8848:	00005d2e 	andeq	r5, r0, lr, lsr #26
    884c:	00088000 	andeq	r8, r8, r0
    8850:	00d42f00 	sbcseq	r2, r4, r0, lsl #30
    8854:	000f0000 	andeq	r0, pc, r0
    8858:	003bfc21 	eorseq	pc, fp, r1, lsr #24
    885c:	916f0100 	cmnls	pc, r0, lsl #2
    8860:	05000008 	streq	r0, [r0, #-8]
    8864:	006b7803 	rsbeq	r7, fp, r3, lsl #16
    8868:	08703008 	ldmdaeq	r0!, {r3, ip, sp}^
    886c:	5d2e0000 	stcpl	0, cr0, [lr]
    8870:	a6000000 	strge	r0, [r0], -r0
    8874:	2f000008 	svccs	0x00000008
    8878:	000000d4 	ldrdeq	r0, [r0], -r4
    887c:	b1210003 	teqlt	r1, r3
    8880:	0100003c 	tsteq	r0, ip, lsr r0
    8884:	0008b770 	andeq	fp, r8, r0, ror r7
    8888:	88030500 	stmdahi	r3, {r8, sl}
    888c:	3008006b 	andcc	r0, r8, fp, rrx
    8890:	00000896 	muleq	r0, r6, r8
    8894:	0001eb00 	andeq	lr, r1, r0, lsl #22
    8898:	6b000200 	blvs	90a0 <__Stack_Size+0x8ca0>
    889c:	04000024 	streq	r0, [r0], #-36
    88a0:	0001c601 	andeq	ip, r1, r1, lsl #12
    88a4:	3d0d0100 	stfccs	f0, [sp]
    88a8:	039d0000 	orrseq	r0, sp, #0	; 0x0
    88ac:	66540000 	ldrbvs	r0, [r4], -r0
    88b0:	66f80800 	ldrbtvs	r0, [r8], r0, lsl #16
    88b4:	227c0800 	rsbscs	r0, ip, #0	; 0x0
    88b8:	04020000 	streq	r0, [r2]
    88bc:	00417805 	subeq	r7, r1, r5, lsl #16
    88c0:	05020200 	streq	r0, [r2, #-512]
    88c4:	00000495 	muleq	r0, r5, r4
    88c8:	69060102 	stmdbvs	r6, {r1, r8}
    88cc:	03000004 	movweq	r0, #4	; 0x4
    88d0:	00323375 	eorseq	r3, r2, r5, ror r3
    88d4:	00452702 	subeq	r2, r5, r2, lsl #14
    88d8:	04020000 	streq	r0, [r2]
    88dc:	0041f207 	subeq	pc, r1, r7, lsl #4
    88e0:	07020200 	streq	r0, [r2, -r0, lsl #4]
    88e4:	00000222 	andeq	r0, r0, r2, lsr #4
    88e8:	00387503 	eorseq	r7, r8, r3, lsl #10
    88ec:	005d2902 	subseq	r2, sp, r2, lsl #18
    88f0:	01020000 	tsteq	r2, r0
    88f4:	00046708 	andeq	r6, r4, r8, lsl #14
    88f8:	00450400 	subeq	r0, r5, r0, lsl #8
    88fc:	64050000 	strvs	r0, [r5]
    8900:	06000000 	streq	r0, [r0], -r0
    8904:	833a0201 	teqhi	sl, #268435456	; 0x10000000
    8908:	07000000 	streq	r0, [r0, -r0]
    890c:	00000ebd 	strheq	r0, [r0], -sp
    8910:	45530800 	ldrbmi	r0, [r3, #-2048]
    8914:	00010054 	andeq	r0, r1, r4, asr r0
    8918:	003b1709 	eorseq	r1, fp, r9, lsl #14
    891c:	6e3a0200 	cdpvs	2, 3, cr0, cr10, cr0, {0}
    8920:	06000000 	streq	r0, [r0], -r0
    8924:	a33c0201 	teqge	ip, #268435456	; 0x10000000
    8928:	07000000 	streq	r0, [r0, -r0]
    892c:	000021a7 	andeq	r2, r0, r7, lsr #3
    8930:	04390700 	ldrteq	r0, [r9], #-1792
    8934:	00010000 	andeq	r0, r1, r0
    8938:	00268c09 	eoreq	r8, r6, r9, lsl #24
    893c:	8e3c0200 	cdphi	2, 3, cr0, cr12, cr0, {0}
    8940:	0a000000 	beq	8948 <__Stack_Size+0x8548>
    8944:	100b0704 	andne	r0, fp, r4, lsl #14
    8948:	f7020303 	undefined instruction 0xf7020303
    894c:	0c000000 	stceq	0, cr0, [r0], {0}
    8950:	00003d33 	andeq	r3, r0, r3, lsr sp
    8954:	64020403 	strvs	r0, [r2], #-1027
    8958:	02000000 	andeq	r0, r0, #0	; 0x0
    895c:	240c0023 	strcs	r0, [ip], #-35
    8960:	0300001d 	movweq	r0, #29	; 0x1d
    8964:	00640205 	rsbeq	r0, r4, r5, lsl #4
    8968:	23020000 	movwcs	r0, #8192	; 0x2000
    896c:	41560d04 	cmpmi	r6, r4, lsl #26
    8970:	0603004c 	streq	r0, [r3], -ip, asr #32
    8974:	00006402 	andeq	r6, r0, r2, lsl #8
    8978:	08230200 	stmdaeq	r3!, {r9}
    897c:	003d070c 	eorseq	r0, sp, ip, lsl #14
    8980:	02070300 	andeq	r0, r7, #0	; 0x0
    8984:	00000069 	andeq	r0, r0, r9, rrx
    8988:	000c2302 	andeq	r2, ip, r2, lsl #6
    898c:	3d5b010e 	ldfcce	f0, [fp, #-56]
    8990:	2c010000 	stccs	0, cr0, [r1], {0}
    8994:	00665401 	rsbeq	r5, r6, r1, lsl #8
    8998:	00667008 	rsbeq	r7, r6, r8
    899c:	1c5d0108 	ldfnee	f0, [sp], {8}
    89a0:	0f000001 	svceq	0x00000001
    89a4:	00003d73 	andeq	r3, r0, r3, ror sp
    89a8:	003a2b01 	eorseq	r2, sl, r1, lsl #22
    89ac:	50010000 	andpl	r0, r1, r0
    89b0:	d2010e00 	andle	r0, r1, #0	; 0x0
    89b4:	0100003c 	tsteq	r0, ip, lsr r0
    89b8:	66700143 	ldrbtvs	r0, [r0], -r3, asr #2
    89bc:	667c0800 	ldrbtvs	r0, [ip], -r0, lsl #16
    89c0:	5d010800 	stcpl	8, cr0, [r1]
    89c4:	00000141 	andeq	r0, r0, r1, asr #2
    89c8:	003cdd0f 	eorseq	sp, ip, pc, lsl #26
    89cc:	3a420100 	bcc	1088dd4 <__Stack_Size+0x10889d4>
    89d0:	01000000 	tsteq	r0, r0
    89d4:	010e0050 	qaddeq	r0, r0, lr
    89d8:	00003d38 	andeq	r3, r0, r8, lsr sp
    89dc:	7c015601 	stcvc	6, cr5, [r1], {1}
    89e0:	a8080066 	stmdage	r8, {r1, r2, r5, r6}
    89e4:	01080066 	tsteq	r8, r6, rrx
    89e8:	0001665d 	andeq	r6, r1, sp, asr r6
    89ec:	3d4b0f00 	stclcc	15, cr0, [fp]
    89f0:	55010000 	strpl	r0, [r1]
    89f4:	0000003a 	andeq	r0, r0, sl, lsr r0
    89f8:	0e005001 	cdpeq	0, 0, cr5, cr0, cr1, {0}
    89fc:	003d8501 	eorseq	r8, sp, r1, lsl #10
    8a00:	01710100 	cmneq	r1, r0, lsl #2
    8a04:	080066a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, sp, lr}
    8a08:	080066c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, sp, lr}
    8a0c:	018b5d01 	orreq	r5, fp, r1, lsl #26
    8a10:	a90f0000 	stmdbge	pc, {}
    8a14:	0100002a 	tsteq	r0, sl, lsr #32
    8a18:	0000a370 	andeq	sl, r0, r0, ror r3
    8a1c:	00500100 	subseq	r0, r0, r0, lsl #2
    8a20:	3cbf0110 	ldfccs	f0, [pc], #64
    8a24:	87010000 	strhi	r0, [r1, -r0]
    8a28:	00003a01 	andeq	r3, r0, r1, lsl #20
    8a2c:	0066c400 	rsbeq	ip, r6, r0, lsl #8
    8a30:	0066d008 	rsbeq	sp, r6, r8
    8a34:	115d0108 	cmpne	sp, r8, lsl #2
    8a38:	003ce401 	eorseq	lr, ip, r1, lsl #8
    8a3c:	01970100 	orrseq	r0, r7, r0, lsl #2
    8a40:	00000083 	andeq	r0, r0, r3, lsl #1
    8a44:	080066d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, sp, lr}
    8a48:	080066f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, sp, lr}
    8a4c:	fa125d01 	blx	49fe58 <__Stack_Size+0x49fa58>
    8a50:	0100003c 	tsteq	r0, ip, lsr r0
    8a54:	00005396 	muleq	r0, r6, r3
    8a58:	003bc500 	eorseq	ip, fp, r0, lsl #10
    8a5c:	3a6e1300 	bcc	1b8d664 <__Stack_Size+0x1b8d264>
    8a60:	98010000 	stmdals	r1, {}
    8a64:	0000003a 	andeq	r0, r0, sl, lsr r0
    8a68:	00003be3 	andeq	r3, r0, r3, ror #23
    8a6c:	706d7414 	rsbvc	r7, sp, r4, lsl r4
    8a70:	3a980100 	bcc	fe608e78 <SCS_BASE+0x1e5fae78>
    8a74:	15000000 	strne	r0, [r0]
    8a78:	00002c82 	andeq	r2, r0, r2, lsl #25
    8a7c:	00839901 	addeq	r9, r3, r1, lsl #18
    8a80:	00000000 	andeq	r0, r0, r0
    8a84:	0000094c 	andeq	r0, r0, ip, asr #18
    8a88:	25910002 	ldrcs	r0, [r1, #2]
    8a8c:	01040000 	tsteq	r4, r0
    8a90:	000001c6 	andeq	r0, r0, r6, asr #3
    8a94:	0040bc01 	subeq	fp, r0, r1, lsl #24
    8a98:	00039d00 	andeq	r9, r3, r0, lsl #26
    8a9c:	0066f800 	rsbeq	pc, r6, r0, lsl #16
    8aa0:	006ab408 	rsbeq	fp, sl, r8, lsl #8
    8aa4:	00233908 	eoreq	r3, r3, r8, lsl #18
    8aa8:	05040200 	streq	r0, [r4, #-512]
    8aac:	00004178 	andeq	r4, r0, r8, ror r1
    8ab0:	95050202 	strls	r0, [r5, #-514]
    8ab4:	02000004 	andeq	r0, r0, #4	; 0x4
    8ab8:	04690601 	strbteq	r0, [r9], #-1537
    8abc:	75030000 	strvc	r0, [r3]
    8ac0:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    8ac4:	00004527 	andeq	r4, r0, r7, lsr #10
    8ac8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    8acc:	000041f2 	strdeq	r4, [r0], -r2
    8ad0:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    8ad4:	57280200 	strpl	r0, [r8, -r0, lsl #4]!
    8ad8:	02000000 	andeq	r0, r0, #0	; 0x0
    8adc:	02220702 	eoreq	r0, r2, #524288	; 0x80000
    8ae0:	75030000 	strvc	r0, [r3]
    8ae4:	29020038 	stmdbcs	r2, {r3, r4, r5}
    8ae8:	00000068 	andeq	r0, r0, r8, rrx
    8aec:	67080102 	strvs	r0, [r8, -r2, lsl #2]
    8af0:	04000004 	streq	r0, [r0], #-4
    8af4:	00000057 	andeq	r0, r0, r7, asr r0
    8af8:	3a020105 	bcc	88f14 <__Stack_Size+0x88b14>
    8afc:	00000089 	andeq	r0, r0, r9, lsl #1
    8b00:	000ebd06 	andeq	fp, lr, r6, lsl #26
    8b04:	53070000 	movwpl	r0, #28672	; 0x7000
    8b08:	01005445 	tsteq	r0, r5, asr #8
    8b0c:	3b170800 	blcc	5cab14 <__Stack_Size+0x5ca714>
    8b10:	3a020000 	bcc	88b18 <__Stack_Size+0x88718>
    8b14:	00000074 	andeq	r0, r0, r4, ror r0
    8b18:	00391108 	eorseq	r1, r9, r8, lsl #2
    8b1c:	743a0200 	ldrtvc	r0, [sl], #-512
    8b20:	05000000 	streq	r0, [r0]
    8b24:	b43c0201 	ldrtlt	r0, [ip], #-513
    8b28:	06000000 	streq	r0, [r0], -r0
    8b2c:	000021a7 	andeq	r2, r0, r7, lsr #3
    8b30:	04390600 	ldrteq	r0, [r9], #-1536
    8b34:	00010000 	andeq	r0, r1, r0
    8b38:	00268c08 	eoreq	r8, r6, r8, lsl #24
    8b3c:	9f3c0200 	svcls	0x003c0200
    8b40:	09000000 	stmdbeq	r0, {}
    8b44:	1c0a0704 	stcne	7, cr0, [sl], {4}
    8b48:	9c023903 	stcls	9, cr3, [r2], {3}
    8b4c:	0b000001 	bleq	8b58 <__Stack_Size+0x8758>
    8b50:	03005253 	movweq	r5, #595	; 0x253
    8b54:	006f023a 	rsbeq	r0, pc, sl, lsr r2
    8b58:	23020000 	movwcs	r0, #8192	; 0x2000
    8b5c:	28ee0c00 	stmiacs	lr!, {sl, fp}^
    8b60:	3b030000 	blcc	c8b68 <__Stack_Size+0xc8768>
    8b64:	00004c02 	andeq	r4, r0, r2, lsl #24
    8b68:	02230200 	eoreq	r0, r3, #0	; 0x0
    8b6c:	0052440b 	subseq	r4, r2, fp, lsl #8
    8b70:	6f023c03 	svcvs	0x00023c03
    8b74:	02000000 	andeq	r0, r0, #0	; 0x0
    8b78:	ae0c0423 	cdpge	4, 0, cr0, cr12, cr3, {1}
    8b7c:	03000027 	movweq	r0, #39	; 0x27
    8b80:	004c023d 	subeq	r0, ip, sp, lsr r2
    8b84:	23020000 	movwcs	r0, #8192	; 0x2000
    8b88:	52420b06 	subpl	r0, r2, #6144	; 0x1800
    8b8c:	3e030052 	mcrcc	0, 0, r0, cr3, cr2, {2}
    8b90:	00006f02 	andeq	r6, r0, r2, lsl #30
    8b94:	08230200 	stmdaeq	r3!, {r9}
    8b98:	0028f80c 	eoreq	pc, r8, ip, lsl #16
    8b9c:	023f0300 	eorseq	r0, pc, #0	; 0x0
    8ba0:	0000004c 	andeq	r0, r0, ip, asr #32
    8ba4:	0b0a2302 	bleq	2917b4 <__Stack_Size+0x2913b4>
    8ba8:	00315243 	eorseq	r5, r1, r3, asr #4
    8bac:	6f024003 	svcvs	0x00024003
    8bb0:	02000000 	andeq	r0, r0, #0	; 0x0
    8bb4:	020c0c23 	andeq	r0, ip, #8960	; 0x2300
    8bb8:	03000029 	movweq	r0, #41	; 0x29
    8bbc:	004c0241 	subeq	r0, ip, r1, asr #4
    8bc0:	23020000 	movwcs	r0, #8192	; 0x2000
    8bc4:	52430b0e 	subpl	r0, r3, #14336	; 0x3800
    8bc8:	42030032 	andmi	r0, r3, #50	; 0x32
    8bcc:	00006f02 	andeq	r6, r0, r2, lsl #30
    8bd0:	10230200 	eorne	r0, r3, r0, lsl #4
    8bd4:	00290c0c 	eoreq	r0, r9, ip, lsl #24
    8bd8:	02430300 	subeq	r0, r3, #0	; 0x0
    8bdc:	0000004c 	andeq	r0, r0, ip, asr #32
    8be0:	0b122302 	bleq	4917f0 <__Stack_Size+0x4913f0>
    8be4:	00335243 	eorseq	r5, r3, r3, asr #4
    8be8:	6f024403 	svcvs	0x00024403
    8bec:	02000000 	andeq	r0, r0, #0	; 0x0
    8bf0:	160c1423 	strne	r1, [ip], -r3, lsr #8
    8bf4:	03000029 	movweq	r0, #41	; 0x29
    8bf8:	004c0245 	subeq	r0, ip, r5, asr #4
    8bfc:	23020000 	movwcs	r0, #8192	; 0x2000
    8c00:	28720c16 	ldmdacs	r2!, {r1, r2, r4, sl, fp}^
    8c04:	46030000 	strmi	r0, [r3], -r0
    8c08:	00006f02 	andeq	r6, r0, r2, lsl #30
    8c0c:	18230200 	stmdane	r3!, {r9}
    8c10:	0029200c 	eoreq	r2, r9, ip
    8c14:	02470300 	subeq	r0, r7, #0	; 0x0
    8c18:	0000004c 	andeq	r0, r0, ip, asr #32
    8c1c:	001a2302 	andseq	r2, sl, r2, lsl #6
    8c20:	003de90d 	eorseq	lr, sp, sp, lsl #18
    8c24:	02480300 	subeq	r0, r8, #0	; 0x0
    8c28:	000000c2 	andeq	r0, r0, r2, asr #1
    8c2c:	1b04100e 	blne	10cc6c <__Stack_Size+0x10c86c>
    8c30:	00000205 	andeq	r0, r0, r5, lsl #4
    8c34:	0027f60f 	eoreq	pc, r7, pc, lsl #12
    8c38:	3a1c0400 	bcc	709c40 <__Stack_Size+0x709840>
    8c3c:	02000000 	andeq	r0, r0, #0	; 0x0
    8c40:	d50f0023 	strle	r0, [pc, #-35]	; 8c25 <__Stack_Size+0x8825>
    8c44:	04000027 	streq	r0, [r0], #-39
    8c48:	00004c1d 	andeq	r4, r0, sp, lsl ip
    8c4c:	04230200 	strteq	r0, [r3], #-512
    8c50:	0027920f 	eoreq	r9, r7, pc, lsl #4
    8c54:	4c1e0400 	cfldrsmi	mvf0, [lr], {0}
    8c58:	02000000 	andeq	r0, r0, #0	; 0x0
    8c5c:	650f0623 	strvs	r0, [pc, #-1571]	; 8641 <__Stack_Size+0x8241>
    8c60:	04000028 	streq	r0, [r0], #-40
    8c64:	00004c1f 	andeq	r4, r0, pc, lsl ip
    8c68:	08230200 	stmdaeq	r3!, {r9}
    8c6c:	0028ce0f 	eoreq	ip, r8, pc, lsl #28
    8c70:	4c200400 	cfstrsmi	mvf0, [r0]
    8c74:	02000000 	andeq	r0, r0, #0	; 0x0
    8c78:	b40f0a23 	strlt	r0, [pc], #2595	; 8c80 <__Stack_Size+0x8880>
    8c7c:	04000028 	streq	r0, [r0], #-40
    8c80:	00004c21 	andeq	r4, r0, r1, lsr #24
    8c84:	0c230200 	sfmeq	f0, 4, [r3]
    8c88:	29690800 	stmdbcs	r9!, {fp}^
    8c8c:	22040000 	andcs	r0, r4, #0	; 0x0
    8c90:	000001a8 	andeq	r0, r0, r8, lsr #3
    8c94:	2604080e 	strcs	r0, [r4], -lr, lsl #16
    8c98:	00000251 	andeq	r0, r0, r1, asr r2
    8c9c:	003fe70f 	eorseq	lr, pc, pc, lsl #14
    8ca0:	4c270400 	cfstrsmi	mvf0, [r7]
    8ca4:	02000000 	andeq	r0, r0, #0	; 0x0
    8ca8:	b10f0023 	tstlt	pc, r3, lsr #32
    8cac:	04000040 	streq	r0, [r0], #-64
    8cb0:	00004c28 	andeq	r4, r0, r8, lsr #24
    8cb4:	02230200 	eoreq	r0, r3, #0	; 0x0
    8cb8:	003da50f 	eorseq	sl, sp, pc, lsl #10
    8cbc:	4c290400 	cfstrsmi	mvf0, [r9]
    8cc0:	02000000 	andeq	r0, r0, #0	; 0x0
    8cc4:	550f0423 	strpl	r0, [pc, #-1059]	; 88a9 <__Stack_Size+0x84a9>
    8cc8:	0400003e 	streq	r0, [r0], #-62
    8ccc:	00004c2a 	andeq	r4, r0, sl, lsr #24
    8cd0:	06230200 	strteq	r0, [r3], -r0, lsl #4
    8cd4:	3df70800 	ldclcc	8, cr0, [r7]
    8cd8:	2b040000 	blcs	108ce0 <__Stack_Size+0x1088e0>
    8cdc:	00000210 	andeq	r0, r0, r0, lsl r2
    8ce0:	1a05140e 	bne	14dd20 <__Stack_Size+0x14d920>
    8ce4:	000002ab 	andeq	r0, r0, fp, lsr #5
    8ce8:	003b750f 	eorseq	r7, fp, pc, lsl #10
    8cec:	3a1b0500 	bcc	6ca0f4 <__Stack_Size+0x6c9cf4>
    8cf0:	02000000 	andeq	r0, r0, #0	; 0x0
    8cf4:	7b0f0023 	blvc	3c8d88 <__Stack_Size+0x3c8988>
    8cf8:	05000039 	streq	r0, [r0, #-57]
    8cfc:	00003a1c 	andeq	r3, r0, ip, lsl sl
    8d00:	04230200 	strteq	r0, [r3], #-512
    8d04:	003bde0f 	eorseq	sp, fp, pc, lsl #28
    8d08:	3a1d0500 	bcc	74a110 <__Stack_Size+0x749d10>
    8d0c:	02000000 	andeq	r0, r0, #0	; 0x0
    8d10:	910f0823 	tstls	pc, r3, lsr #16
    8d14:	0500003b 	streq	r0, [r0, #-59]
    8d18:	00003a1e 	andeq	r3, r0, lr, lsl sl
    8d1c:	0c230200 	sfmeq	f0, 4, [r3]
    8d20:	003ad70f 	eorseq	sp, sl, pc, lsl #14
    8d24:	3a1f0500 	bcc	7ca12c <__Stack_Size+0x7c9d2c>
    8d28:	02000000 	andeq	r0, r0, #0	; 0x0
    8d2c:	08001023 	stmdaeq	r0, {r0, r1, r5, ip}
    8d30:	00003943 	andeq	r3, r0, r3, asr #18
    8d34:	025c2005 	subseq	r2, ip, #5	; 0x5
    8d38:	01100000 	tsteq	r0, r0
    8d3c:	000040e9 	andeq	r4, r0, r9, ror #1
    8d40:	f801e901 	undefined instruction 0xf801e901
    8d44:	16080066 	strne	r0, [r8], -r6, rrx
    8d48:	01080067 	tsteq	r8, r7, rrx
    8d4c:	0002db5d 	andeq	sp, r2, sp, asr fp
    8d50:	3f8e1100 	svccc	0x008e1100
    8d54:	e8010000 	stmda	r1, {}
    8d58:	000002db 	ldrdeq	r0, [r0], -fp
    8d5c:	12005001 	andne	r5, r0, #1	; 0x1
    8d60:	00020504 	andeq	r0, r2, r4, lsl #10
    8d64:	6c011300 	stcvs	3, cr1, [r1], {0}
    8d68:	01000040 	tsteq	r0, r0, asr #32
    8d6c:	18010100 	stmdane	r1, {r8}
    8d70:	40080067 	andmi	r0, r8, r7, rrx
    8d74:	01080067 	tsteq	r8, r7, rrx
    8d78:	0003245d 	andeq	r2, r3, sp, asr r4
    8d7c:	3f741100 	svccc	0x00741100
    8d80:	ff010000 	undefined instruction 0xff010000
    8d84:	00000324 	andeq	r0, r0, r4, lsr #6
    8d88:	dc145001 	ldcle	0, cr5, [r4], {1}
    8d8c:	0100003e 	tsteq	r0, lr, lsr r0
    8d90:	00032aff 	strdeq	r2, [r3], -pc
    8d94:	003c0100 	eorseq	r0, ip, r0, lsl #2
    8d98:	2b421500 	blcs	108e1a0 <__Stack_Size+0x108dda0>
    8d9c:	01010000 	tsteq	r1, r0
    8da0:	00003a01 	andeq	r3, r0, r1, lsl #20
    8da4:	00520100 	subseq	r0, r2, r0, lsl #2
    8da8:	019c0412 	orrseq	r0, ip, r2, lsl r4
    8dac:	04120000 	ldreq	r0, [r2]
    8db0:	00000251 	andeq	r0, r0, r1, asr r2
    8db4:	3eff0113 	mrccc	1, 7, r0, cr15, cr3, {0}
    8db8:	24010000 	strcs	r0, [r1]
    8dbc:	67400101 	strbvs	r0, [r0, -r1, lsl #2]
    8dc0:	674e0800 	strbvs	r0, [lr, -r0, lsl #16]
    8dc4:	5d010800 	stcpl	8, cr0, [r1]
    8dc8:	00000357 	andeq	r0, r0, r7, asr r3
    8dcc:	003edc16 	eorseq	sp, lr, r6, lsl ip
    8dd0:	01230100 	teqeq	r3, r0, lsl #2
    8dd4:	0000032a 	andeq	r0, r0, sl, lsr #6
    8dd8:	13005001 	movwne	r5, #1	; 0x1
    8ddc:	003e0e01 	eorseq	r0, lr, r1, lsl #28
    8de0:	01380100 	teqeq	r8, r0, lsl #2
    8de4:	00675001 	rsbeq	r5, r7, r1
    8de8:	00676a08 	rsbeq	r6, r7, r8, lsl #20
    8dec:	8c5d0108 	ldfhie	f0, [sp], {8}
    8df0:	16000003 	strne	r0, [r0], -r3
    8df4:	00003f74 	andeq	r3, r0, r4, ror pc
    8df8:	24013701 	strcs	r3, [r1], #-1793
    8dfc:	01000003 	tsteq	r0, r3
    8e00:	2aa91650 	bcs	fea4e748 <SCS_BASE+0x1ea40748>
    8e04:	37010000 	strcc	r0, [r1, -r0]
    8e08:	0000b401 	andeq	fp, r0, r1, lsl #8
    8e0c:	00510100 	subseq	r0, r1, r0, lsl #2
    8e10:	3f650117 	svccc	0x00650117
    8e14:	63010000 	movwvs	r0, #4096	; 0x1000
    8e18:	676c0101 	strbvs	r0, [ip, -r1, lsl #2]!
    8e1c:	67aa0800 	strvs	r0, [sl, r0, lsl #16]!
    8e20:	3c140800 	ldccc	8, cr0, [r4], {0}
    8e24:	040d0000 	streq	r0, [sp]
    8e28:	74180000 	ldrvc	r0, [r8]
    8e2c:	0100003f 	tsteq	r0, pc, lsr r0
    8e30:	03240162 	teqeq	r4, #-2147483624	; 0x80000018
    8e34:	3c330000 	ldccc	0, cr0, [r3]
    8e38:	63180000 	tstvs	r8, #0	; 0x0
    8e3c:	01000040 	tsteq	r0, r0, asr #32
    8e40:	004c0162 	subeq	r0, ip, r2, ror #2
    8e44:	3c460000 	marcc	acc0, r0, r6
    8e48:	a9160000 	ldmdbge	r6, {}
    8e4c:	0100002a 	tsteq	r0, sl, lsr #32
    8e50:	00b40162 	adcseq	r0, r4, r2, ror #2
    8e54:	52010000 	andpl	r0, r1, #0	; 0x0
    8e58:	0040e015 	subeq	lr, r0, r5, lsl r0
    8e5c:	01640100 	cmneq	r4, r0, lsl #2
    8e60:	0000003a 	andeq	r0, r0, sl, lsr r0
    8e64:	ae195c01 	cdpge	12, 1, cr5, cr9, cr1, {0}
    8e68:	0100003f 	tsteq	r0, pc, lsr r0
    8e6c:	003a0164 	eorseq	r0, sl, r4, ror #2
    8e70:	9e150000 	wxorls	wr0, wr5, wr0
    8e74:	0100002d 	tsteq	r0, sp, lsr #32
    8e78:	003a0164 	eorseq	r0, sl, r4, ror #2
    8e7c:	51010000 	tstpl	r1, r0
    8e80:	003f151a 	eorseq	r1, pc, sl, lsl r5
    8e84:	01650100 	cmneq	r5, r0, lsl #2
    8e88:	0000003a 	andeq	r0, r0, sl, lsr r0
    8e8c:	00003c64 	andeq	r3, r0, r4, ror #24
    8e90:	48011300 	stmdami	r1, {r8, r9, ip}
    8e94:	0100003e 	tsteq	r0, lr, lsr r0
    8e98:	ac01019e 	stfges	f0, [r1], {158}
    8e9c:	c4080067 	strgt	r0, [r8], #-103
    8ea0:	01080067 	tsteq	r8, r7, rrx
    8ea4:	0004505d 	andeq	r5, r4, sp, asr r0
    8ea8:	3f741600 	svccc	0x00741600
    8eac:	9d010000 	stcls	0, cr0, [r1]
    8eb0:	00032401 	andeq	r2, r3, r1, lsl #8
    8eb4:	16500100 	ldrbne	r0, [r0], -r0, lsl #2
    8eb8:	00003ef2 	strdeq	r3, [r0], -r2
    8ebc:	4c019d01 	stcmi	13, cr9, [r1], {1}
    8ec0:	01000000 	tsteq	r0, r0
    8ec4:	2aa91651 	bcs	fea4e810 <SCS_BASE+0x1ea40810>
    8ec8:	9d010000 	stcls	0, cr0, [r1]
    8ecc:	0000b401 	andeq	fp, r0, r1, lsl #8
    8ed0:	00520100 	subseq	r0, r2, r0, lsl #2
    8ed4:	3f310113 	svccc	0x00310113
    8ed8:	bd010000 	stclt	0, cr0, [r1]
    8edc:	67c40101 	strbvs	r0, [r4, r1, lsl #2]
    8ee0:	67da0800 	ldrbvs	r0, [sl, r0, lsl #16]
    8ee4:	5d010800 	stcpl	8, cr0, [r1]
    8ee8:	00000485 	andeq	r0, r0, r5, lsl #9
    8eec:	003f7416 	eorseq	r7, pc, r6, lsl r4
    8ef0:	01bc0100 	undefined instruction 0x01bc0100
    8ef4:	00000324 	andeq	r0, r0, r4, lsr #6
    8ef8:	9f165001 	svcls	0x00165001
    8efc:	0100003f 	tsteq	r0, pc, lsr r0
    8f00:	005e01bc 	ldrheq	r0, [lr], #-28
    8f04:	51010000 	tstpl	r1, r0
    8f08:	7c011300 	stcvc	3, cr1, [r1], {0}
    8f0c:	01000040 	tsteq	r0, r0, asr #32
    8f10:	dc0101d6 	stfles	f0, [r1], {214}
    8f14:	f2080067 	vhadd.s8	q0, q4, <illegal reg q11.5>
    8f18:	01080067 	tsteq	r8, r7, rrx
    8f1c:	0004bc5d 	andeq	fp, r4, sp, asr ip
    8f20:	3f741600 	svccc	0x00741600
    8f24:	d5010000 	strle	r0, [r1]
    8f28:	00032401 	andeq	r2, r3, r1, lsl #8
    8f2c:	18500100 	ldmdane	r0, {r8}^
    8f30:	00003e3b 	andeq	r3, r0, fp, lsr lr
    8f34:	4c01d501 	cfstr32mi	mvfx13, [r1], {1}
    8f38:	8d000000 	stchi	0, cr0, [r0]
    8f3c:	0000003c 	andeq	r0, r0, ip, lsr r0
    8f40:	3ff30113 	svccc	0x00f30113
    8f44:	eb010000 	bl	48f4c <__Stack_Size+0x48b4c>
    8f48:	67f40101 	ldrbvs	r0, [r4, r1, lsl #2]!
    8f4c:	680e0800 	stmdavs	lr, {fp}
    8f50:	5d010800 	stcpl	8, cr0, [r1]
    8f54:	000004f1 	strdeq	r0, [r0], -r1
    8f58:	003f7416 	eorseq	r7, pc, r6, lsl r4
    8f5c:	01ea0100 	mvneq	r0, r0, lsl #2
    8f60:	00000324 	andeq	r0, r0, r4, lsr #6
    8f64:	a9165001 	ldmdbge	r6, {r0, ip, lr}
    8f68:	0100002a 	tsteq	r0, sl, lsr #32
    8f6c:	00b401ea 	adcseq	r0, r4, sl, ror #3
    8f70:	51010000 	tstpl	r1, r0
    8f74:	a3011300 	movwge	r1, #4864	; 0x1300
    8f78:	0100003e 	tsteq	r0, lr, lsr r0
    8f7c:	1001020b 	andne	r0, r1, fp, lsl #4
    8f80:	26080068 	strcs	r0, [r8], -r8, rrx
    8f84:	01080068 	tsteq	r8, r8, rrx
    8f88:	0005285d 	andeq	r2, r5, sp, asr r8
    8f8c:	3f741600 	svccc	0x00741600
    8f90:	0a010000 	beq	48f98 <__Stack_Size+0x48b98>
    8f94:	00032402 	andeq	r2, r3, r2, lsl #8
    8f98:	18500100 	ldmdane	r0, {r8}^
    8f9c:	00003dce 	andeq	r3, r0, lr, asr #27
    8fa0:	4c020a01 	stcmi	10, cr0, [r2], {1}
    8fa4:	a0000000 	andge	r0, r0, r0
    8fa8:	0000003c 	andeq	r0, r0, ip, lsr r0
    8fac:	40190113 	andsmi	r0, r9, r3, lsl r1
    8fb0:	20010000 	andcs	r0, r1, r0
    8fb4:	68280102 	stmdavs	r8!, {r1, r8}
    8fb8:	68420800 	stmdavs	r2, {fp}^
    8fbc:	5d010800 	stcpl	8, cr0, [r1]
    8fc0:	0000055d 	andeq	r0, r0, sp, asr r5
    8fc4:	003f7416 	eorseq	r7, pc, r6, lsl r4
    8fc8:	021f0100 	andseq	r0, pc, #0	; 0x0
    8fcc:	00000324 	andeq	r0, r0, r4, lsr #6
    8fd0:	a9165001 	ldmdbge	r6, {r0, ip, lr}
    8fd4:	0100002a 	tsteq	r0, sl, lsr #32
    8fd8:	00b4021f 	adcseq	r0, r4, pc, lsl r2
    8fdc:	51010000 	tstpl	r1, r0
    8fe0:	18011300 	stmdane	r1, {r8, r9, ip}
    8fe4:	0100003e 	tsteq	r0, lr, lsr r0
    8fe8:	4401023c 	strmi	r0, [r1], #-572
    8fec:	4c080068 	stcmi	0, cr0, [r8], {104}
    8ff0:	01080068 	tsteq	r8, r8, rrx
    8ff4:	0005945d 	andeq	r9, r5, sp, asr r4
    8ff8:	3f741600 	svccc	0x00741600
    8ffc:	3b010000 	blcc	49004 <__Stack_Size+0x48c04>
    9000:	00032402 	andeq	r2, r3, r2, lsl #8
    9004:	18500100 	ldmdane	r0, {r8}^
    9008:	00003049 	andeq	r3, r0, r9, asr #32
    900c:	4c023b01 	stcmi	11, cr3, [r2], {1}
    9010:	b3000000 	movwlt	r0, #0	; 0x0
    9014:	0000003c 	andeq	r0, r0, ip, lsr r0
    9018:	408f011b 	addmi	r0, pc, fp, lsl r1
    901c:	4f010000 	svcmi	0x00010000
    9020:	004c0102 	subeq	r0, ip, r2, lsl #2
    9024:	684c0000 	stmdavs	ip, {}^
    9028:	68540800 	ldmdavs	r4, {fp}^
    902c:	5d010800 	stcpl	8, cr0, [r1]
    9030:	000005c1 	andeq	r0, r0, r1, asr #11
    9034:	003f7418 	eorseq	r7, pc, r8, lsl r4
    9038:	024e0100 	subeq	r0, lr, #0	; 0x0
    903c:	00000324 	andeq	r0, r0, r4, lsr #6
    9040:	00003cc6 	andeq	r3, r0, r6, asr #25
    9044:	55011300 	strpl	r1, [r1, #-768]
    9048:	0100003f 	tsteq	r0, pc, lsr r0
    904c:	54010261 	strpl	r0, [r1], #-609
    9050:	60080068 	andvs	r0, r8, r8, rrx
    9054:	01080068 	tsteq	r8, r8, rrx
    9058:	0005e85d 	andeq	lr, r5, sp, asr r8
    905c:	3f741600 	svccc	0x00741600
    9060:	60010000 	andvs	r0, r1, r0
    9064:	00032402 	andeq	r2, r3, r2, lsl #8
    9068:	00500100 	subseq	r0, r0, r0, lsl #2
    906c:	3f420113 	svccc	0x00420113
    9070:	74010000 	strvc	r0, [r1]
    9074:	68600102 	stmdavs	r0!, {r1, r8}^
    9078:	68720800 	ldmdavs	r2!, {fp}^
    907c:	5d010800 	stcpl	8, cr0, [r1]
    9080:	0000061d 	andeq	r0, r0, sp, lsl r6
    9084:	003f7416 	eorseq	r7, pc, r6, lsl r4
    9088:	02730100 	rsbseq	r0, r3, #0	; 0x0
    908c:	00000324 	andeq	r0, r0, r4, lsr #6
    9090:	93165001 	tstls	r6, #1	; 0x1
    9094:	0100003e 	tsteq	r0, lr, lsr r0
    9098:	005e0273 	subseq	r0, lr, r3, ror r2
    909c:	51010000 	tstpl	r1, r0
    90a0:	b0011300 	andlt	r1, r1, r0, lsl #6
    90a4:	0100003d 	tsteq	r0, sp, lsr r0
    90a8:	7401028a 	strvc	r0, [r1], #-650
    90ac:	86080068 	strhi	r0, [r8], -r8, rrx
    90b0:	01080068 	tsteq	r8, r8, rrx
    90b4:	0006525d 	andeq	r5, r6, sp, asr r2
    90b8:	3f741600 	svccc	0x00741600
    90bc:	89010000 	stmdbhi	r1, {}
    90c0:	00032402 	andeq	r2, r3, r2, lsl #8
    90c4:	16500100 	ldrbne	r0, [r0], -r0, lsl #2
    90c8:	000040a1 	andeq	r4, r0, r1, lsr #1
    90cc:	5e028901 	cdppl	9, 0, cr8, cr2, cr1, {0}
    90d0:	01000000 	tsteq	r0, r0
    90d4:	01130051 	tsteq	r3, r1, asr r0
    90d8:	00003f7b 	andeq	r3, r0, fp, ror pc
    90dc:	0102a001 	tsteq	r2, r1
    90e0:	08006888 	stmdaeq	r0, {r3, r7, fp, sp, lr}
    90e4:	080068a2 	stmdaeq	r0, {r1, r5, r7, fp, sp, lr}
    90e8:	06875d01 	streq	r5, [r7], r1, lsl #26
    90ec:	74160000 	ldrvc	r0, [r6]
    90f0:	0100003f 	tsteq	r0, pc, lsr r0
    90f4:	0324029f 	teqeq	r4, #-268435447	; 0xf0000009
    90f8:	50010000 	andpl	r0, r1, r0
    90fc:	002aa916 	eoreq	sl, sl, r6, lsl r9
    9100:	029f0100 	addseq	r0, pc, #0	; 0x0
    9104:	000000b4 	strheq	r0, [r0], -r4
    9108:	13005101 	movwne	r5, #257	; 0x101
    910c:	00403801 	subeq	r3, r0, r1, lsl #16
    9110:	02bd0100 	adcseq	r0, sp, #0	; 0x0
    9114:	0068a401 	rsbeq	sl, r8, r1, lsl #8
    9118:	0068be08 	rsbeq	fp, r8, r8, lsl #28
    911c:	bc5d0108 	ldflte	f0, [sp], {8}
    9120:	16000006 	strne	r0, [r0], -r6
    9124:	00003f74 	andeq	r3, r0, r4, ror pc
    9128:	2402bc01 	strcs	fp, [r2], #-3073
    912c:	01000003 	tsteq	r0, r3
    9130:	2aa91650 	bcs	fea4ea78 <SCS_BASE+0x1ea40a78>
    9134:	bc010000 	stclt	0, cr0, [r1], {0}
    9138:	0000b402 	andeq	fp, r0, r2, lsl #8
    913c:	00510100 	subseq	r0, r1, r0, lsl #2
    9140:	3e270113 	mcrcc	1, 1, r0, cr7, cr3, {0}
    9144:	da010000 	ble	4914c <__Stack_Size+0x48d4c>
    9148:	68c00102 	stmiavs	r0, {r1, r8}^
    914c:	68da0800 	ldmvs	sl, {fp}^
    9150:	5d010800 	stcpl	8, cr0, [r1]
    9154:	000006f1 	strdeq	r0, [r0], -r1
    9158:	003f7416 	eorseq	r7, pc, r6, lsl r4
    915c:	02d90100 	sbcseq	r0, r9, #0	; 0x0
    9160:	00000324 	andeq	r0, r0, r4, lsr #6
    9164:	a9165001 	ldmdbge	r6, {r0, ip, lr}
    9168:	0100002a 	tsteq	r0, sl, lsr #32
    916c:	00b402d9 	ldrsbteq	r0, [r4], r9
    9170:	51010000 	tstpl	r1, r0
    9174:	d6011300 	strle	r1, [r1], -r0, lsl #6
    9178:	0100003f 	tsteq	r0, pc, lsr r0
    917c:	dc0102f9 	sfmle	f0, 4, [r1], {249}
    9180:	f2080068 	vhadd.s8	q0, q4, q12
    9184:	01080068 	tsteq	r8, r8, rrx
    9188:	0007285d 	andeq	r2, r7, sp, asr r8
    918c:	3f741600 	svccc	0x00741600
    9190:	f8010000 	undefined instruction 0xf8010000
    9194:	00032402 	andeq	r2, r3, r2, lsl #8
    9198:	18500100 	ldmdane	r0, {r8}^
    919c:	00003e63 	andeq	r3, r0, r3, ror #28
    91a0:	4c02f801 	stcmi	8, cr15, [r2], {1}
    91a4:	d9000000 	stmdble	r0, {}
    91a8:	0000003c 	andeq	r0, r0, ip, lsr r0
    91ac:	400b0113 	andmi	r0, fp, r3, lsl r1
    91b0:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    91b4:	68f40103 	ldmvs	r4!, {r0, r1, r8}^
    91b8:	690e0800 	stmdbvs	lr, {fp}
    91bc:	5d010800 	stcpl	8, cr0, [r1]
    91c0:	0000075d 	andeq	r0, r0, sp, asr r7
    91c4:	003f7416 	eorseq	r7, pc, r6, lsl r4
    91c8:	030d0100 	movweq	r0, #53504	; 0xd100
    91cc:	00000324 	andeq	r0, r0, r4, lsr #6
    91d0:	a9165001 	ldmdbge	r6, {r0, ip, lr}
    91d4:	0100002a 	tsteq	r0, sl, lsr #32
    91d8:	00b4030d 	adcseq	r0, r4, sp, lsl #6
    91dc:	51010000 	tstpl	r1, r0
    91e0:	4f011b00 	svcmi	0x00011b00
    91e4:	01000040 	tsteq	r0, r0, asr #32
    91e8:	89010336 	stmdbhi	r1, {r1, r2, r4, r5, r8, r9}
    91ec:	10000000 	andne	r0, r0, r0
    91f0:	1c080069 	stcne	0, cr0, [r8], {105}
    91f4:	01080069 	tsteq	r8, r9, rrx
    91f8:	0007a45d 	andeq	sl, r7, sp, asr r4
    91fc:	3f741800 	svccc	0x00741800
    9200:	35010000 	strcc	r0, [r1]
    9204:	00032403 	andeq	r2, r3, r3, lsl #8
    9208:	003cec00 	eorseq	lr, ip, r0, lsl #24
    920c:	3ec41600 	cdpcc	6, 12, cr1, cr4, cr0, {0}
    9210:	35010000 	strcc	r0, [r1]
    9214:	00004c03 	andeq	r4, r0, r3, lsl #24
    9218:	19510100 	ldmdbne	r1, {r8}^
    921c:	00002c82 	andeq	r2, r0, r2, lsl #25
    9220:	89033701 	stmdbhi	r3, {r0, r8, r9, sl, ip, sp}
    9224:	00000000 	andeq	r0, r0, r0
    9228:	3fb40113 	svccc	0x00b40113
    922c:	6a010000 	bvs	49234 <__Stack_Size+0x48e34>
    9230:	691c0103 	ldmdbvs	ip, {r0, r1, r8}
    9234:	69260800 	stmdbvs	r6!, {fp}
    9238:	5d010800 	stcpl	8, cr0, [r1]
    923c:	000007db 	ldrdeq	r0, [r0], -fp
    9240:	003f7416 	eorseq	r7, pc, r6, lsl r4
    9244:	03690100 	cmneq	r9, #0	; 0x0
    9248:	00000324 	andeq	r0, r0, r4, lsr #6
    924c:	c4185001 	ldrgt	r5, [r8], #-1
    9250:	0100003e 	tsteq	r0, lr, lsr r0
    9254:	004c0369 	subeq	r0, ip, r9, ror #6
    9258:	3cff0000 	ldclcc	0, cr0, [pc]
    925c:	1b000000 	blne	9264 <__Stack_Size+0x8e64>
    9260:	003fc401 	eorseq	ip, pc, r1, lsl #8
    9264:	038b0100 	orreq	r0, fp, #0	; 0x0
    9268:	00009401 	andeq	r9, r0, r1, lsl #8
    926c:	00692800 	rsbeq	r2, r9, r0, lsl #16
    9270:	00697208 	rsbeq	r7, r9, r8, lsl #4
    9274:	525d0108 	subspl	r0, sp, #2	; 0x2
    9278:	18000008 	stmdane	r0, {r3}
    927c:	00003f74 	andeq	r3, r0, r4, ror pc
    9280:	24038a01 	strcs	r8, [r3], #-2561
    9284:	12000003 	andne	r0, r0, #3	; 0x3
    9288:	1800003d 	stmdane	r0, {r0, r2, r3, r4, r5}
    928c:	00004063 	andeq	r4, r0, r3, rrx
    9290:	4c038a01 	stcmi	10, cr8, [r3], {1}
    9294:	25000000 	strcs	r0, [r0]
    9298:	1500003d 	strne	r0, [r0, #-61]
    929c:	00003fad 	andeq	r3, r0, sp, lsr #31
    92a0:	3a038c01 	bcc	ec2ac <__Stack_Size+0xebeac>
    92a4:	01000000 	tsteq	r0, r0
    92a8:	2d9e1a52 	fldscs	s2, [lr, #328]
    92ac:	8c010000 	stchi	0, cr0, [r1], {0}
    92b0:	00003a03 	andeq	r3, r0, r3, lsl #20
    92b4:	003d4e00 	eorseq	r4, sp, r0, lsl #28
    92b8:	40e01a00 	rscmi	r1, r0, r0, lsl #20
    92bc:	8c010000 	stchi	0, cr0, [r1], {0}
    92c0:	00003a03 	andeq	r3, r0, r3, lsl #20
    92c4:	003d6c00 	eorseq	r6, sp, r0, lsl #24
    92c8:	2c821900 	stccs	9, cr1, [r2], {0}
    92cc:	8d010000 	stchi	0, cr0, [r1]
    92d0:	00009403 	andeq	r9, r0, r3, lsl #8
    92d4:	01130000 	tsteq	r3, r0
    92d8:	00003e7b 	andeq	r3, r0, fp, ror lr
    92dc:	0103db01 	tsteq	r3, r1, lsl #22
    92e0:	08006974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp, sp, lr}
    92e4:	08006984 	stmdaeq	r0, {r2, r7, r8, fp, sp, lr}
    92e8:	08a15d01 	stmiaeq	r1!, {r0, r8, sl, fp, ip, lr}
    92ec:	74160000 	ldrvc	r0, [r6]
    92f0:	0100003f 	tsteq	r0, pc, lsr r0
    92f4:	032403da 	teqeq	r4, #1744830467	; 0x68000003
    92f8:	50010000 	andpl	r0, r1, r0
    92fc:	00406318 	subeq	r6, r0, r8, lsl r3
    9300:	03da0100 	bicseq	r0, sl, #0	; 0x0
    9304:	0000004c 	andeq	r0, r0, ip, asr #32
    9308:	00003d7f 	andeq	r3, r0, pc, ror sp
    930c:	003fad19 	eorseq	sl, pc, r9, lsl sp
    9310:	03dc0100 	bicseq	r0, ip, #0	; 0x0
    9314:	0000004c 	andeq	r0, r0, ip, asr #32
    9318:	002d9e19 	eoreq	r9, sp, r9, lsl lr
    931c:	03dc0100 	bicseq	r0, ip, #0	; 0x0
    9320:	0000004c 	andeq	r0, r0, ip, asr #32
    9324:	c3011c00 	movwgt	r1, #7168	; 0x1c00
    9328:	0100003d 	tsteq	r0, sp, lsr r0
    932c:	6984018d 	stmibvs	r4, {r0, r2, r3, r7, r8}
    9330:	6a200800 	bvs	80b338 <__Stack_Size+0x80af38>
    9334:	3d920800 	ldccc	8, cr0, [r2]
    9338:	092a0000 	stmdbeq	sl!, {}
    933c:	74140000 	ldrvc	r0, [r4]
    9340:	0100003f 	tsteq	r0, pc, lsr r0
    9344:	0003248c 	andeq	r2, r3, ip, lsl #9
    9348:	003dbd00 	eorseq	fp, sp, r0, lsl #26
    934c:	3f8e1400 	svccc	0x008e1400
    9350:	8c010000 	stchi	0, cr0, [r1], {0}
    9354:	000002db 	ldrdeq	r0, [r0], -fp
    9358:	00003ddc 	ldrdeq	r3, [r0], -ip
    935c:	002b421d 	eoreq	r4, fp, sp, lsl r2
    9360:	3a8e0100 	bcc	fe389768 <SCS_BASE+0x1e37b768>
    9364:	fa000000 	blx	936c <__Stack_Size+0x8f6c>
    9368:	1d00003d 	stcne	0, cr0, [r0, #-244]
    936c:	00003e72 	andeq	r3, r0, r2, ror lr
    9370:	003a8e01 	eorseq	r8, sl, r1, lsl #28
    9374:	3e230000 	cdpcc	0, 2, cr0, cr3, cr0, {0}
    9378:	961e0000 	ldrls	r0, [lr], -r0
    937c:	0100003d 	tsteq	r0, sp, lsr r0
    9380:	00003a8f 	andeq	r3, r0, pc, lsl #21
    9384:	1f510100 	svcne	0x00510100
    9388:	00004026 	andeq	r4, r0, r6, lsr #32
    938c:	003a9001 	eorseq	r9, sl, r1
    9390:	151e0000 	ldrne	r0, [lr]
    9394:	0100003f 	tsteq	r0, pc, lsr r0
    9398:	00003a91 	muleq	r0, r1, sl
    939c:	1e540100 	rdfnes	f0, f4, f0
    93a0:	00003f20 	andeq	r3, r0, r0, lsr #30
    93a4:	02ab9201 	adceq	r9, fp, #268435456	; 0x10000000
    93a8:	91020000 	tstls	r2, r0
    93ac:	0120005c 	qsubeq	r0, ip, r0
    93b0:	00003ecf 	andeq	r3, r0, pc, asr #29
    93b4:	20015b01 	andcs	r5, r1, r1, lsl #22
    93b8:	b408006a 	strlt	r0, [r8], #-106
    93bc:	3608006a 	strcc	r0, [r8], -sl, rrx
    93c0:	1400003e 	strne	r0, [r0], #-62
    93c4:	00003f74 	andeq	r3, r0, r4, ror pc
    93c8:	03245a01 	teqeq	r4, #4096	; 0x1000
    93cc:	3e610000 	cdpcc	0, 6, cr0, cr1, cr0, {0}
    93d0:	00000000 	andeq	r0, r0, r0
    93d4:	0000008e 	andeq	r0, r0, lr, lsl #1
    93d8:	27720002 	ldrbcs	r0, [r2, -r2]!
    93dc:	01040000 	tsteq	r4, r0
    93e0:	00002537 	andeq	r2, r0, r7, lsr r5
    93e4:	08006ab4 	stmdaeq	r0, {r2, r4, r5, r7, r9, fp, sp, lr}
    93e8:	08006b22 	stmdaeq	r0, {r1, r5, r8, r9, fp, sp, lr}
    93ec:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    93f0:	30316632 	eorscc	r6, r1, r2, lsr r6
    93f4:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    93f8:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    93fc:	6f632f63 	svcvs	0x00632f63
    9400:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    9404:	6d5f336d 	ldclvs	3, cr3, [pc, #-436]
    9408:	6f726361 	svcvs	0x00726361
    940c:	4300732e 	movwmi	r7, #814	; 0x32e
    9410:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
    9414:	5c737265 	lfmpl	f7, 2, [r3], #-404
    9418:	74736e69 	ldrbtvc	r6, [r3], #-3689
    941c:	5c6c6c61 	stclpl	12, cr6, [ip], #-388
    9420:	6a6f7270 	bvs	1be5de8 <__Stack_Size+0x1be59e8>
    9424:	5c746b65 	ldclpl	11, cr6, [r4], #-404
    9428:	6c6f6942 	stclvs	9, cr6, [pc], #-264
    942c:	2d64696f 	stclcs	9, cr6, [r4, #-444]!
    9430:	616d7548 	cmnvs	sp, r8, asr #10
    9434:	64696f6e 	strbtvs	r6, [r9], #-3950
    9438:	626f522d 	rsbvs	r5, pc, #-805306366	; 0xd0000002
    943c:	685c746f 	ldmdavs	ip, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    9440:	6e616d75 	mcrvs	13, 3, r6, cr1, cr5, {3}
    9444:	5f64696f 	svcpl	0x0064696f
    9448:	6f635f63 	svcvs	0x00635f63
    944c:	6f72746e 	svcvs	0x0072746e
    9450:	72656c6c 	rsbvc	r6, r5, #27648	; 0x6c00
    9454:	554e4700 	strbpl	r4, [lr, #-1792]
    9458:	20534120 	subscs	r4, r3, r0, lsr #2
    945c:	38312e32 	ldmdacc	r1!, {r1, r4, r5, r9, sl, fp, sp}
    9460:	0030352e 	eorseq	r3, r0, lr, lsr #10
    9464:	01028001 	tsteq	r2, r1
    9468:	00020000 	andeq	r0, r2, r0
    946c:	00002786 	andeq	r2, r0, r6, lsl #15
    9470:	01c60104 	biceq	r0, r6, r4, lsl #2
    9474:	34010000 	strcc	r0, [r1]
    9478:	9d000041 	stcls	0, cr0, [r0, #-260]
    947c:	24000003 	strcs	r0, [r0], #-3
    9480:	7808006b 	stmdavc	r8, {r0, r1, r3, r5, r6}
    9484:	db08006b 	blle	209638 <__Stack_Size+0x209238>
    9488:	02000025 	andeq	r0, r0, #37	; 0x25
    948c:	41780504 	cmnmi	r8, r4, lsl #10
    9490:	02020000 	andeq	r0, r2, #0	; 0x0
    9494:	00049505 	andeq	r9, r4, r5, lsl #10
    9498:	06010200 	streq	r0, [r1], -r0, lsl #4
    949c:	00000469 	andeq	r0, r0, r9, ror #8
    94a0:	f2070402 	vshl.s8	d0, d2, d7
    94a4:	02000041 	andeq	r0, r0, #65	; 0x41
    94a8:	02220702 	eoreq	r0, r2, #524288	; 0x80000
    94ac:	01020000 	tsteq	r2, r0
    94b0:	00046708 	andeq	r6, r4, r8, lsl #14
    94b4:	07040300 	streq	r0, [r4, -r0, lsl #6]
    94b8:	41090104 	tstmi	r9, r4, lsl #2
    94bc:	92010000 	andls	r0, r1, #0	; 0x0
    94c0:	006b2401 	rsbeq	r2, fp, r1, lsl #8
    94c4:	006b7808 	rsbeq	r7, fp, r8, lsl #16
    94c8:	003e8008 	eorseq	r8, lr, r8
    94cc:	00008600 	andeq	r8, r0, r0, lsl #12
    94d0:	41660500 	cmnmi	r6, r0, lsl #10
    94d4:	93010000 	movwls	r0, #4096	; 0x1000
    94d8:	00000086 	andeq	r0, r0, r6, lsl #1
    94dc:	00411706 	subeq	r1, r1, r6, lsl #14
    94e0:	86930100 	ldrhi	r0, [r3], r0, lsl #2
    94e4:	9f000000 	svcls	0x00000000
    94e8:	0000003e 	andeq	r0, r0, lr, lsr r0
    94ec:	003a0407 	eorseq	r0, sl, r7, lsl #8
    94f0:	1f080000 	svcne	0x00080000
    94f4:	01000041 	tsteq	r0, r1, asr #32
    94f8:	00003a19 	andeq	r3, r0, r9, lsl sl
    94fc:	08010100 	stmdaeq	r1, {r8}
    9500:	00004102 	andeq	r4, r0, r2, lsl #2
    9504:	003a1b01 	eorseq	r1, sl, r1, lsl #22
    9508:	01010000 	tsteq	r1, r0
    950c:	00412d08 	subeq	r2, r1, r8, lsl #26
    9510:	3a1d0100 	bcc	749918 <__Stack_Size+0x749518>
    9514:	01000000 	tsteq	r0, r0
    9518:	416d0801 	cmnmi	sp, r1, lsl #16
    951c:	20010000 	andcs	r0, r1, r0
    9520:	0000003a 	andeq	r0, r0, sl, lsr r0
    9524:	27080101 	strcs	r0, [r8, -r1, lsl #2]
    9528:	01000041 	tsteq	r0, r1, asr #32
    952c:	00003a22 	andeq	r3, r0, r2, lsr #20
    9530:	09010100 	stmdbeq	r1, {r8}
    9534:	000040fa 	strdeq	r4, [r0], -sl
    9538:	01012501 	tsteq	r1, r1, lsl #10
    953c:	0000e80a 	andeq	lr, r0, sl, lsl #16
    9540:	0000e600 	andeq	lr, r0, r0, lsl #12
    9544:	004f0b00 	subeq	r0, pc, r0, lsl #22
    9548:	004c0000 	subeq	r0, ip, r0
    954c:	0407010c 	streq	r0, [r7], #-268
    9550:	000000e6 	andeq	r0, r0, r6, ror #1
    9554:	0041590d 	subeq	r5, r1, sp, lsl #18
    9558:	00390100 	eorseq	r0, r9, r0, lsl #2
    955c:	01000001 	tsteq	r0, r1
    9560:	30000305 	andcc	r0, r0, r5, lsl #6
    9564:	d60e0800 	strle	r0, [lr], -r0, lsl #16
    9568:	00000000 	andeq	r0, r0, r0
    956c:	000000c1 	andeq	r0, r0, r1, asr #1
    9570:	283b0002 	ldmdacs	fp!, {r1}
    9574:	01040000 	tsteq	r4, r0
    9578:	000001c6 	andeq	r0, r0, r6, asr #3
    957c:	0041b801 	subeq	fp, r1, r1, lsl #16
    9580:	00418100 	subeq	r8, r1, r0, lsl #2
	...
    958c:	00263900 	eoreq	r3, r6, r0, lsl #18
    9590:	07040200 	streq	r0, [r4, -r0, lsl #4]
    9594:	000041f7 	strdeq	r4, [r0], -r7
    9598:	69060102 	stmdbvs	r6, {r1, r8}
    959c:	02000004 	andeq	r0, r0, #4	; 0x4
    95a0:	04670801 	strbteq	r0, [r7], #-2049
    95a4:	02020000 	andeq	r0, r2, #0	; 0x0
    95a8:	00049505 	andeq	r9, r4, r5, lsl #10
    95ac:	07020200 	streq	r0, [r2, -r0, lsl #4]
    95b0:	00000222 	andeq	r0, r0, r2, lsr #4
    95b4:	69050403 	stmdbvs	r5, {r0, r1, sl}
    95b8:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    95bc:	41730508 	cmnmi	r3, r8, lsl #10
    95c0:	08020000 	stmdaeq	r2, {}
    95c4:	0041ed07 	subeq	lr, r1, r7, lsl #26
    95c8:	05040200 	streq	r0, [r4, #-512]
    95cc:	00004178 	andeq	r4, r0, r8, ror r1
    95d0:	02070404 	andeq	r0, r7, #67108864	; 0x4000000
    95d4:	41f20704 	mvnsmi	r0, r4, lsl #14
    95d8:	01050000 	tsteq	r5, r0
    95dc:	006e0406 	rsbeq	r0, lr, r6, lsl #8
    95e0:	01020000 	tsteq	r2, r0
    95e4:	00047008 	andeq	r7, r4, r8
    95e8:	42190700 	andsmi	r0, r9, #0	; 0x0
    95ec:	02010000 	andeq	r0, r1, #0	; 0x0
    95f0:	00009c06 	andeq	r9, r0, r6, lsl #24
    95f4:	42280800 	eormi	r0, r8, #0	; 0x0
    95f8:	08000000 	stmdaeq	r0, {}
    95fc:	0000420d 	andeq	r4, r0, sp, lsl #4
    9600:	42040801 	andmi	r0, r4, #65536	; 0x10000
    9604:	00020000 	andeq	r0, r2, r0
    9608:	422d0109 	eormi	r0, sp, #1073741826	; 0x40000002
    960c:	40010000 	andmi	r0, r1, r0
    9610:	00004801 	andeq	r4, r0, r1, lsl #16
	...
    961c:	003eb200 	eorseq	fp, lr, r0, lsl #4
    9620:	6e660a00 	fmulsvs	s1, s12, s0
    9624:	703d0100 	eorsvc	r0, sp, r0, lsl #2
    9628:	dd000000 	stcle	0, cr0, [r0]
    962c:	0000003e 	andeq	r0, r0, lr, lsr r0
    9630:	00093600 	andeq	r3, r9, r0, lsl #12
    9634:	bc000200 	sfmlt	f0, 4, [r0], {0}
    9638:	04000028 	streq	r0, [r0], #-40
    963c:	0001c601 	andeq	ip, r1, r1, lsl #12
    9640:	42400100 	submi	r0, r0, #0	; 0x0
    9644:	41810000 	orrmi	r0, r1, r0
	...
    9650:	26ad0000 	strtcs	r0, [sp], r0
    9654:	04020000 	streq	r0, [r2]
    9658:	0041f707 	subeq	pc, r1, r7, lsl #14
    965c:	06010200 	streq	r0, [r1], -r0, lsl #4
    9660:	00000469 	andeq	r0, r0, r9, ror #8
    9664:	67080102 	strvs	r0, [r8, -r2, lsl #2]
    9668:	02000004 	andeq	r0, r0, #4	; 0x4
    966c:	04950502 	ldreq	r0, [r5], #1282
    9670:	02020000 	andeq	r0, r2, #0	; 0x0
    9674:	00022207 	andeq	r2, r2, r7, lsl #4
    9678:	05040300 	streq	r0, [r4, #-768]
    967c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    9680:	73050802 	movwvc	r0, #22530	; 0x5802
    9684:	02000041 	andeq	r0, r0, #65	; 0x41
    9688:	41ed0708 	mvnmi	r0, r8, lsl #14
    968c:	47040000 	strmi	r0, [r4, -r0]
    9690:	02000044 	andeq	r0, r0, #68	; 0x44
    9694:	00004807 	andeq	r4, r0, r7, lsl #16
    9698:	05040200 	streq	r0, [r4, #-512]
    969c:	00004178 	andeq	r4, r0, r8, ror r1
    96a0:	0044f604 	subeq	pc, r4, r4, lsl #12
    96a4:	682c0300 	stmdavs	ip!, {r8, r9}
    96a8:	05000000 	streq	r0, [r0]
    96ac:	000043ef 	andeq	r4, r0, pc, ror #7
    96b0:	25016304 	strcs	r6, [r1, #-772]
    96b4:	06000000 	streq	r0, [r0], -r0
    96b8:	a5470304 	strbge	r0, [r7, #-772]
    96bc:	07000000 	streq	r0, [r0, -r0]
    96c0:	000043e9 	andeq	r4, r0, r9, ror #7
    96c4:	007a4803 	rsbseq	r4, sl, r3, lsl #16
    96c8:	a3070000 	movwge	r0, #28672	; 0x7000
    96cc:	03000043 	movweq	r0, #67	; 0x43
    96d0:	0000a549 	andeq	sl, r0, r9, asr #10
    96d4:	33080000 	movwcc	r0, #32768	; 0x8000
    96d8:	b5000000 	strlt	r0, [r0]
    96dc:	09000000 	stmdbeq	r0, {}
    96e0:	000000b5 	strheq	r0, [r0], -r5
    96e4:	040a0003 	streq	r0, [sl], #-3
    96e8:	03080b07 	movweq	r0, #35591	; 0x8b07
    96ec:	0000dd44 	andeq	sp, r0, r4, asr #26
    96f0:	44e00c00 	strbtmi	r0, [r0], #3072
    96f4:	45030000 	strmi	r0, [r3]
    96f8:	00000048 	andeq	r0, r0, r8, asr #32
    96fc:	0c002302 	stceq	3, cr2, [r0], {2}
    9700:	000044e8 	andeq	r4, r0, r8, ror #9
    9704:	00864a03 	addeq	r4, r6, r3, lsl #20
    9708:	23020000 	movwcs	r0, #8192	; 0x2000
    970c:	7c040004 	stcvc	0, cr0, [r4], {4}
    9710:	03000044 	movweq	r0, #68	; 0x44
    9714:	0000b84b 	andeq	fp, r0, fp, asr #16
    9718:	43750400 	cmnmi	r5, #0	; 0x0
    971c:	4f030000 	svcmi	0x00030000
    9720:	0000005d 	andeq	r0, r0, sp, asr r0
    9724:	2904040d 	stmdbcs	r4, {r0, r2, r3, sl}
    9728:	05000045 	streq	r0, [r0, #-69]
    972c:	00010015 	andeq	r0, r1, r5, lsl r0
    9730:	07040200 	streq	r0, [r4, -r0, lsl #4]
    9734:	000041f2 	strdeq	r4, [r0], -r2
    9738:	0043860e 	subeq	r8, r3, lr, lsl #12
    973c:	2d051800 	stccs	8, cr1, [r5]
    9740:	00000166 	andeq	r0, r0, r6, ror #2
    9744:	0044940c 	subeq	r9, r4, ip, lsl #8
    9748:	662e0500 	strtvs	r0, [lr], -r0, lsl #10
    974c:	02000001 	andeq	r0, r0, #1	; 0x1
    9750:	5f0f0023 	svcpl	0x000f0023
    9754:	2f05006b 	svccs	0x0005006b
    9758:	00000048 	andeq	r0, r0, r8, asr #32
    975c:	0c042302 	stceq	3, cr2, [r4], {2}
    9760:	000044cb 	andeq	r4, r0, fp, asr #9
    9764:	00482f05 	subeq	r2, r8, r5, lsl #30
    9768:	23020000 	movwcs	r0, #8192	; 0x2000
    976c:	436f0c08 	cmnmi	pc, #2048	; 0x800
    9770:	2f050000 	svccs	0x00050000
    9774:	00000048 	andeq	r0, r0, r8, asr #32
    9778:	0c0c2302 	stceq	3, cr2, [ip], {2}
    977c:	00004575 	andeq	r4, r0, r5, ror r5
    9780:	00482f05 	subeq	r2, r8, r5, lsl #30
    9784:	23020000 	movwcs	r0, #8192	; 0x2000
    9788:	785f0f10 	ldmdavc	pc, {r4, r8, r9, sl, fp}^
    978c:	6c300500 	cfldr32vs	mvfx0, [r0]
    9790:	02000001 	andeq	r0, r0, #1	; 0x1
    9794:	10001423 	andne	r1, r0, r3, lsr #8
    9798:	00010704 	andeq	r0, r1, r4, lsl #14
    979c:	00f50800 	rscseq	r0, r5, r0, lsl #16
    97a0:	017c0000 	cmneq	ip, r0
    97a4:	b5090000 	strlt	r0, [r9]
    97a8:	00000000 	andeq	r0, r0, r0
    97ac:	439e0e00 	orrsmi	r0, lr, #0	; 0x0
    97b0:	05240000 	streq	r0, [r4]!
    97b4:	00020735 	andeq	r0, r2, r5, lsr r7
    97b8:	42d20c00 	sbcsmi	r0, r2, #0	; 0x0
    97bc:	36050000 	strcc	r0, [r5], -r0
    97c0:	00000048 	andeq	r0, r0, r8, asr #32
    97c4:	0c002302 	stceq	3, cr2, [r0], {2}
    97c8:	00004505 	andeq	r4, r0, r5, lsl #10
    97cc:	00483705 	subeq	r3, r8, r5, lsl #14
    97d0:	23020000 	movwcs	r0, #8192	; 0x2000
    97d4:	42e70c04 	rscmi	r0, r7, #1024	; 0x400
    97d8:	38050000 	stmdacc	r5, {}
    97dc:	00000048 	andeq	r0, r0, r8, asr #32
    97e0:	0c082302 	stceq	3, cr2, [r8], {2}
    97e4:	000045e7 	andeq	r4, r0, r7, ror #11
    97e8:	00483905 	subeq	r3, r8, r5, lsl #18
    97ec:	23020000 	movwcs	r0, #8192	; 0x2000
    97f0:	441a0c0c 	ldrmi	r0, [sl], #-3084
    97f4:	3a050000 	bcc	1497fc <__Stack_Size+0x1493fc>
    97f8:	00000048 	andeq	r0, r0, r8, asr #32
    97fc:	0c102302 	ldceq	3, cr2, [r0], {2}
    9800:	00004409 	andeq	r4, r0, r9, lsl #8
    9804:	00483b05 	subeq	r3, r8, r5, lsl #22
    9808:	23020000 	movwcs	r0, #8192	; 0x2000
    980c:	457a0c14 	ldrbmi	r0, [sl, #-3092]!
    9810:	3c050000 	stccc	0, cr0, [r5], {0}
    9814:	00000048 	andeq	r0, r0, r8, asr #32
    9818:	0c182302 	ldceq	3, cr2, [r8], {2}
    981c:	0000445e 	andeq	r4, r0, lr, asr r4
    9820:	00483d05 	subeq	r3, r8, r5, lsl #26
    9824:	23020000 	movwcs	r0, #8192	; 0x2000
    9828:	45b50c1c 	ldrmi	r0, [r5, #3100]!
    982c:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
    9830:	00000048 	andeq	r0, r0, r8, asr #32
    9834:	00202302 	eoreq	r2, r0, r2, lsl #6
    9838:	0042f611 	subeq	pc, r2, r1, lsl r6
    983c:	05010800 	streq	r0, [r1, #-2048]
    9840:	00025047 	andeq	r5, r2, r7, asr #32
    9844:	43620c00 	cmnmi	r2, #0	; 0x0
    9848:	48050000 	stmdami	r5, {}
    984c:	00000250 	andeq	r0, r0, r0, asr r2
    9850:	0c002302 	stceq	3, cr2, [r0], {2}
    9854:	00004234 	andeq	r4, r0, r4, lsr r2
    9858:	02504905 	subseq	r4, r0, #81920	; 0x14000
    985c:	23030000 	movwcs	r0, #12288	; 0x3000
    9860:	1b0c0180 	blne	309e68 <__Stack_Size+0x309a68>
    9864:	05000045 	streq	r0, [r0, #-69]
    9868:	0000f54b 	andeq	pc, r0, fp, asr #10
    986c:	80230300 	eorhi	r0, r3, r0, lsl #6
    9870:	431b0c02 	tstmi	fp, #512	; 0x200
    9874:	4e050000 	cdpmi	0, 0, cr0, cr5, cr0, {0}
    9878:	000000f5 	strdeq	r0, [r0], -r5
    987c:	02842303 	addeq	r2, r4, #201326592	; 0xc000000
    9880:	00f30800 	rscseq	r0, r3, r0, lsl #16
    9884:	02600000 	rsbeq	r0, r0, #0	; 0x0
    9888:	b5090000 	strlt	r0, [r9]
    988c:	1f000000 	svcne	0x00000000
    9890:	422c1100 	eormi	r1, ip, #0	; 0x0
    9894:	01900000 	orrseq	r0, r0, r0
    9898:	02a75905 	adceq	r5, r7, #81920	; 0x14000
    989c:	940c0000 	strls	r0, [ip]
    98a0:	05000044 	streq	r0, [r0, #-68]
    98a4:	0002a75a 	andeq	sl, r2, sl, asr r7
    98a8:	00230200 	eoreq	r0, r3, r0, lsl #4
    98ac:	0044ac0c 	subeq	sl, r4, ip, lsl #24
    98b0:	485b0500 	ldmdami	fp, {r8, sl}^
    98b4:	02000000 	andeq	r0, r0, #0	; 0x0
    98b8:	6a0c0423 	bvs	30a94c <__Stack_Size+0x30a54c>
    98bc:	05000043 	streq	r0, [r0, #-67]
    98c0:	0002ad5d 	andeq	sl, r2, sp, asr sp
    98c4:	08230200 	stmdaeq	r3!, {r9}
    98c8:	0042f60c 	subeq	pc, r2, ip, lsl #12
    98cc:	075e0500 	ldrbeq	r0, [lr, -r0, lsl #10]
    98d0:	03000002 	movweq	r0, #2	; 0x2
    98d4:	00018823 	andeq	r8, r1, r3, lsr #16
    98d8:	02600410 	rsbeq	r0, r0, #268435456	; 0x10000000
    98dc:	bf080000 	svclt	0x00080000
    98e0:	bd000002 	stclt	0, cr0, [r0, #-8]
    98e4:	09000002 	stmdbeq	r0, {r1}
    98e8:	000000b5 	strheq	r0, [r0], -r5
    98ec:	0112001f 	tsteq	r2, pc, lsl r0
    98f0:	02bd0410 	adcseq	r0, sp, #268435456	; 0x10000000
    98f4:	680e0000 	stmdavs	lr, {}
    98f8:	08000044 	stmdaeq	r0, {r2, r6}
    98fc:	02ee6905 	rsceq	r6, lr, #81920	; 0x14000
    9900:	e10c0000 	tst	ip, r0
    9904:	05000042 	streq	r0, [r0, #-66]
    9908:	0002ee6a 	andeq	lr, r2, sl, ror #28
    990c:	00230200 	eoreq	r0, r3, r0, lsl #4
    9910:	0042730c 	subeq	r7, r2, ip, lsl #6
    9914:	486b0500 	stmdami	fp!, {r8, sl}^
    9918:	02000000 	andeq	r0, r0, #0	; 0x0
    991c:	10000423 	andne	r0, r0, r3, lsr #8
    9920:	00003304 	andeq	r3, r0, r4, lsl #6
    9924:	44870e00 	strmi	r0, [r7], #3584
    9928:	055c0000 	ldrbeq	r0, [ip]
    992c:	000432a9 	andeq	r3, r4, r9, lsr #5
    9930:	705f0f00 	subsvc	r0, pc, r0, lsl #30
    9934:	eeaa0500 	cdp	5, 10, cr0, cr10, cr0, {0}
    9938:	02000002 	andeq	r0, r0, #2	; 0x2
    993c:	5f0f0023 	svcpl	0x000f0023
    9940:	ab050072 	blge	149b10 <__Stack_Size+0x149710>
    9944:	00000048 	andeq	r0, r0, r8, asr #32
    9948:	0f042302 	svceq	0x00042302
    994c:	0500775f 	streq	r7, [r0, #-1887]
    9950:	000048ac 	andeq	r4, r0, ip, lsr #17
    9954:	08230200 	stmdaeq	r3!, {r9}
    9958:	0043140c 	subeq	r1, r3, ip, lsl #8
    995c:	3aad0500 	bcc	feb4ad64 <SCS_BASE+0x1eb3cd64>
    9960:	02000000 	andeq	r0, r0, #0	; 0x0
    9964:	ba0c0c23 	blt	30c9f8 <__Stack_Size+0x30c5f8>
    9968:	05000043 	streq	r0, [r0, #-67]
    996c:	00003aae 	andeq	r3, r0, lr, lsr #21
    9970:	0e230200 	cdpeq	2, 2, cr0, cr3, cr0, {0}
    9974:	66625f0f 	strbtvs	r5, [r2], -pc, lsl #30
    9978:	c5af0500 	strgt	r0, [pc, #1280]!	; 9e80 <__Stack_Size+0x9a80>
    997c:	02000002 	andeq	r0, r0, #2	; 0x2
    9980:	ac0c1023 	stcge	0, cr1, [ip], {35}
    9984:	05000042 	streq	r0, [r0, #-66]
    9988:	000048b0 	strheq	r4, [r0], -r0
    998c:	18230200 	stmdane	r3!, {r9}
    9990:	0043040c 	subeq	r0, r3, ip, lsl #8
    9994:	f3b70500 	vabal.u<illegal width 64>	q0, d7, d0
    9998:	02000000 	andeq	r0, r0, #0	; 0x0
    999c:	8e0c1c23 	cdphi	12, 0, cr1, cr12, cr3, {1}
    99a0:	05000043 	streq	r0, [r0, #-67]
    99a4:	0005c1b9 	strheq	ip, [r5], -r9
    99a8:	20230200 	eorcs	r0, r3, r0, lsl #4
    99ac:	0044020c 	subeq	r0, r4, ip, lsl #4
    99b0:	f1bb0500 	undefined instruction 0xf1bb0500
    99b4:	02000005 	andeq	r0, r0, #5	; 0x5
    99b8:	f00c2423 	undefined instruction 0xf00c2423
    99bc:	05000044 	streq	r0, [r0, #-68]
    99c0:	000616bd 	strheq	r1, [r6], -sp
    99c4:	28230200 	stmdacs	r3!, {r9}
    99c8:	0028290c 	eoreq	r2, r8, ip, lsl #18
    99cc:	31be0500 	undefined instruction 0x31be0500
    99d0:	02000006 	andeq	r0, r0, #6	; 0x6
    99d4:	5f0f2c23 	svcpl	0x000f2c23
    99d8:	05006275 	streq	r6, [r0, #-629]
    99dc:	0002c5c1 	andeq	ip, r2, r1, asr #11
    99e0:	30230200 	eorcc	r0, r3, r0, lsl #4
    99e4:	70755f0f 	rsbsvc	r5, r5, pc, lsl #30
    99e8:	eec20500 	cdp	5, 12, cr0, cr2, cr0, {0}
    99ec:	02000002 	andeq	r0, r0, #2	; 0x2
    99f0:	5f0f3823 	svcpl	0x000f3823
    99f4:	05007275 	streq	r7, [r0, #-629]
    99f8:	000048c3 	andeq	r4, r0, r3, asr #17
    99fc:	3c230200 	sfmcc	f0, 4, [r3]
    9a00:	0042db0c 	subeq	sp, r2, ip, lsl #22
    9a04:	37c60500 	strbcc	r0, [r6, r0, lsl #10]
    9a08:	02000006 	andeq	r0, r0, #6	; 0x6
    9a0c:	a70c4023 	strge	r4, [ip, -r3, lsr #32]
    9a10:	05000045 	streq	r0, [r0, #-69]
    9a14:	000647c7 	andeq	r4, r6, r7, asr #15
    9a18:	43230200 	teqmi	r3, #0	; 0x0
    9a1c:	626c5f0f 	rsbvs	r5, ip, #60	; 0x3c
    9a20:	c5ca0500 	strbgt	r0, [sl, #1280]
    9a24:	02000002 	andeq	r0, r0, #2	; 0x2
    9a28:	2a0c4423 	bcs	31aabc <__Stack_Size+0x31a6bc>
    9a2c:	05000043 	streq	r0, [r0, #-67]
    9a30:	000048cd 	andeq	r4, r0, sp, asr #17
    9a34:	4c230200 	sfmmi	f0, 4, [r3]
    9a38:	00433b0c 	subeq	r3, r3, ip, lsl #22
    9a3c:	48ce0500 	stmiami	lr, {r8, sl}^
    9a40:	02000000 	andeq	r0, r0, #0	; 0x0
    9a44:	f70c5023 	undefined instruction 0xf70c5023
    9a48:	05000045 	streq	r0, [r0, #-69]
    9a4c:	000451d1 	ldrdeq	r5, [r4], -r1
    9a50:	54230200 	strtpl	r0, [r3], #-512
    9a54:	0043f60c 	subeq	pc, r3, ip, lsl #12
    9a58:	e8d50500 	ldm	r5, {r8, sl}^
    9a5c:	02000000 	andeq	r0, r0, #0	; 0x0
    9a60:	13005823 	movwne	r5, #2083	; 0x823
    9a64:	00004801 	andeq	r4, r0, r1, lsl #16
    9a68:	00045100 	andeq	r5, r4, r0, lsl #2
    9a6c:	04511400 	ldrbeq	r1, [r1], #-1024
    9a70:	f3140000 	vhadd.u16	d0, d4, d0
    9a74:	14000000 	strne	r0, [r0]
    9a78:	000005b4 	strheq	r0, [r0], -r4
    9a7c:	00004814 	andeq	r4, r0, r4, lsl r8
    9a80:	04100000 	ldreq	r0, [r0]
    9a84:	00000457 	andeq	r0, r0, r7, asr r4
    9a88:	0044d311 	subeq	sp, r4, r1, lsl r3
    9a8c:	05040000 	streq	r0, [r4]
    9a90:	0005b425 	andeq	fp, r5, r5, lsr #8
    9a94:	44fe1500 	ldrbtmi	r1, [lr], #1280
    9a98:	41050000 	tstmi	r5, r0
    9a9c:	00004802 	andeq	r4, r0, r2, lsl #16
    9aa0:	00230200 	eoreq	r0, r3, r0, lsl #4
    9aa4:	00432315 	subeq	r2, r3, r5, lsl r3
    9aa8:	02460500 	subeq	r0, r6, #0	; 0x0
    9aac:	000006a4 	andeq	r0, r0, r4, lsr #13
    9ab0:	15042302 	strne	r2, [r4, #-770]
    9ab4:	000043aa 	andeq	r4, r0, sl, lsr #7
    9ab8:	a4024605 	strge	r4, [r2], #-1541
    9abc:	02000006 	andeq	r0, r0, #6	; 0x6
    9ac0:	7e150823 	cdpvc	8, 1, cr0, cr5, cr3, {1}
    9ac4:	05000043 	streq	r0, [r0, #-67]
    9ac8:	06a40246 	strteq	r0, [r4], r6, asr #4
    9acc:	23020000 	movwcs	r0, #8192	; 0x2000
    9ad0:	44a7150c 	strtmi	r1, [r7], #1292
    9ad4:	48050000 	stmdami	r5, {}
    9ad8:	00004802 	andeq	r4, r0, r2, lsl #16
    9adc:	10230200 	eorne	r0, r3, r0, lsl #4
    9ae0:	00428115 	subeq	r8, r2, r5, lsl r1
    9ae4:	02490500 	subeq	r0, r9, #0	; 0x0
    9ae8:	000008af 	andeq	r0, r0, pc, lsr #17
    9aec:	15142302 	ldrne	r2, [r4, #-770]
    9af0:	00004551 	andeq	r4, r0, r1, asr r5
    9af4:	48024b05 	stmdami	r2, {r0, r2, r8, r9, fp, lr}
    9af8:	02000000 	andeq	r0, r0, #0	; 0x0
    9afc:	b1153023 	tstlt	r5, r3, lsr #32
    9b00:	05000044 	streq	r0, [r0, #-68]
    9b04:	05e6024c 	strbeq	r0, [r6, #588]!
    9b08:	23020000 	movwcs	r0, #8192	; 0x2000
    9b0c:	44231534 	strtmi	r1, [r3], #-1332
    9b10:	4e050000 	cdpmi	0, 0, cr0, cr5, cr0, {0}
    9b14:	00004802 	andeq	r4, r0, r2, lsl #16
    9b18:	38230200 	stmdacc	r3!, {r9}
    9b1c:	0044c115 	subeq	ip, r4, r5, lsl r1
    9b20:	02500500 	subseq	r0, r0, #0	; 0x0
    9b24:	000008cb 	andeq	r0, r0, fp, asr #17
    9b28:	153c2302 	ldrne	r2, [ip, #-770]!
    9b2c:	00001dba 	strheq	r1, [r0], -sl
    9b30:	66025305 	strvs	r5, [r2], -r5, lsl #6
    9b34:	02000001 	andeq	r0, r0, #1	; 0x1
    9b38:	94154023 	ldrls	r4, [r5], #-35
    9b3c:	05000043 	streq	r0, [r0, #-67]
    9b40:	00480254 	subeq	r0, r8, r4, asr r2
    9b44:	23020000 	movwcs	r0, #8192	; 0x2000
    9b48:	45e21544 	strbmi	r1, [r2, #1348]!
    9b4c:	55050000 	strpl	r0, [r5]
    9b50:	00016602 	andeq	r6, r1, r2, lsl #12
    9b54:	48230200 	stmdami	r3!, {r9}
    9b58:	00443d15 	subeq	r3, r4, r5, lsl sp
    9b5c:	02560500 	subseq	r0, r6, #0	; 0x0
    9b60:	000008d1 	ldrdeq	r0, [r0], -r1
    9b64:	154c2302 	strbne	r2, [ip, #-770]
    9b68:	000043b2 	strheq	r4, [r0], -r2
    9b6c:	48025905 	stmdami	r2, {r0, r2, r8, fp, ip, lr}
    9b70:	02000000 	andeq	r0, r0, #0	; 0x0
    9b74:	33155023 	tstcc	r5, #35	; 0x23
    9b78:	05000043 	streq	r0, [r0, #-67]
    9b7c:	05b4025a 	ldreq	r0, [r4, #602]!
    9b80:	23020000 	movwcs	r0, #8192	; 0x2000
    9b84:	44591554 	ldrbmi	r1, [r9], #-1364
    9b88:	7c050000 	stcvc	0, cr0, [r5], {0}
    9b8c:	00088d02 	andeq	r8, r8, r2, lsl #26
    9b90:	58230200 	stmdapl	r3!, {r9}
    9b94:	00422c15 	subeq	r2, r2, r5, lsl ip
    9b98:	027f0500 	rsbseq	r0, pc, #0	; 0x0
    9b9c:	000002a7 	andeq	r0, r0, r7, lsr #5
    9ba0:	02c82303 	sbceq	r2, r8, #201326592	; 0xc000000
    9ba4:	0043c715 	subeq	ip, r3, r5, lsl r7
    9ba8:	02800500 	addeq	r0, r0, #0	; 0x0
    9bac:	00000260 	andeq	r0, r0, r0, ror #4
    9bb0:	02cc2303 	sbceq	r2, ip, #201326592	; 0xc000000
    9bb4:	00459d15 	subeq	r9, r5, r5, lsl sp
    9bb8:	02830500 	addeq	r0, r3, #0	; 0x0
    9bbc:	000008e3 	andeq	r0, r0, r3, ror #17
    9bc0:	05dc2303 	ldrbeq	r2, [ip, #771]
    9bc4:	00430c15 	subeq	r0, r3, r5, lsl ip
    9bc8:	02880500 	addeq	r0, r8, #0	; 0x0
    9bcc:	00000663 	andeq	r0, r0, r3, ror #12
    9bd0:	05e02303 	strbeq	r2, [r0, #771]!
    9bd4:	0042f115 	subeq	pc, r2, r5, lsl r1
    9bd8:	02890500 	addeq	r0, r9, #0	; 0x0
    9bdc:	000008ef 	andeq	r0, r0, pc, ror #17
    9be0:	05ec2303 	strbeq	r2, [ip, #771]!
    9be4:	ba041000 	blt	10dbec <__Stack_Size+0x10d7ec>
    9be8:	02000005 	andeq	r0, r0, #5	; 0x5
    9bec:	04700801 	ldrbteq	r0, [r0], #-2049
    9bf0:	04100000 	ldreq	r0, [r0]
    9bf4:	00000432 	andeq	r0, r0, r2, lsr r4
    9bf8:	00480113 	subeq	r0, r8, r3, lsl r1
    9bfc:	05e60000 	strbeq	r0, [r6]!
    9c00:	51140000 	tstpl	r4, r0
    9c04:	14000004 	strne	r0, [r0], #-4
    9c08:	000000f3 	strdeq	r0, [r0], -r3
    9c0c:	0005e614 	andeq	lr, r5, r4, lsl r6
    9c10:	00481400 	subeq	r1, r8, r0, lsl #8
    9c14:	10000000 	andne	r0, r0, r0
    9c18:	0005ec04 	andeq	lr, r5, r4, lsl #24
    9c1c:	05ba1600 	ldreq	r1, [sl, #1536]!
    9c20:	04100000 	ldreq	r0, [r0]
    9c24:	000005c7 	andeq	r0, r0, r7, asr #11
    9c28:	006f0113 	rsbeq	r0, pc, r3, lsl r1
    9c2c:	06160000 	ldreq	r0, [r6], -r0
    9c30:	51140000 	tstpl	r4, r0
    9c34:	14000004 	strne	r0, [r0], #-4
    9c38:	000000f3 	strdeq	r0, [r0], -r3
    9c3c:	00006f14 	andeq	r6, r0, r4, lsl pc
    9c40:	00481400 	subeq	r1, r8, r0, lsl #8
    9c44:	10000000 	andne	r0, r0, r0
    9c48:	0005f704 	andeq	pc, r5, r4, lsl #14
    9c4c:	48011300 	stmdami	r1, {r8, r9, ip}
    9c50:	31000000 	tstcc	r0, r0
    9c54:	14000006 	strne	r0, [r0], #-6
    9c58:	00000451 	andeq	r0, r0, r1, asr r4
    9c5c:	0000f314 	andeq	pc, r0, r4, lsl r3
    9c60:	04100000 	ldreq	r0, [r0]
    9c64:	0000061c 	andeq	r0, r0, ip, lsl r6
    9c68:	00003308 	andeq	r3, r0, r8, lsl #6
    9c6c:	00064700 	andeq	r4, r6, r0, lsl #14
    9c70:	00b50900 	adcseq	r0, r5, r0, lsl #18
    9c74:	00020000 	andeq	r0, r2, r0
    9c78:	00003308 	andeq	r3, r0, r8, lsl #6
    9c7c:	00065700 	andeq	r5, r6, r0, lsl #14
    9c80:	00b50900 	adcseq	r0, r5, r0, lsl #18
    9c84:	00000000 	andeq	r0, r0, r0
    9c88:	00447505 	subeq	r7, r4, r5, lsl #10
    9c8c:	010e0500 	tsteq	lr, r0, lsl #10
    9c90:	000002f4 	strdeq	r0, [r0], -r4
    9c94:	00458417 	subeq	r8, r5, r7, lsl r4
    9c98:	13050c00 	movwne	r0, #23552	; 0x5c00
    9c9c:	00069e01 	andeq	r9, r6, r1, lsl #28
    9ca0:	44941500 	ldrmi	r1, [r4], #1280
    9ca4:	14050000 	strne	r0, [r5]
    9ca8:	00069e01 	andeq	r9, r6, r1, lsl #28
    9cac:	00230200 	eoreq	r0, r3, r0, lsl #4
    9cb0:	0043c015 	subeq	ip, r3, r5, lsl r0
    9cb4:	01150500 	tsteq	r5, r0, lsl #10
    9cb8:	00000048 	andeq	r0, r0, r8, asr #32
    9cbc:	15042302 	strne	r2, [r4, #-770]
    9cc0:	0000446f 	andeq	r4, r0, pc, ror #8
    9cc4:	a4011605 	strge	r1, [r1], #-1541
    9cc8:	02000006 	andeq	r0, r0, #6	; 0x6
    9ccc:	10000823 	andne	r0, r0, r3, lsr #16
    9cd0:	00066304 	andeq	r6, r6, r4, lsl #6
    9cd4:	57041000 	strpl	r1, [r4, -r0]
    9cd8:	17000006 	strne	r0, [r0, -r6]
    9cdc:	00004279 	andeq	r4, r0, r9, ror r2
    9ce0:	012e050e 	teqeq	lr, lr, lsl #10
    9ce4:	000006e5 	andeq	r0, r0, r5, ror #13
    9ce8:	0044da15 	subeq	sp, r4, r5, lsl sl
    9cec:	012f0500 	teqeq	pc, r0, lsl #10
    9cf0:	000006e5 	andeq	r0, r0, r5, ror #13
    9cf4:	15002302 	strne	r2, [r0, #-770]
    9cf8:	000043fc 	strdeq	r4, [r0], -ip
    9cfc:	e5013005 	str	r3, [r1, #-5]
    9d00:	02000006 	andeq	r0, r0, #6	; 0x6
    9d04:	24150623 	ldrcs	r0, [r5], #-1571
    9d08:	05000045 	streq	r0, [r0, #-69]
    9d0c:	00410131 	subeq	r0, r1, r1, lsr r1
    9d10:	23020000 	movwcs	r0, #8192	; 0x2000
    9d14:	4108000c 	tstmi	r8, ip
    9d18:	f5000000 	undefined instruction 0xf5000000
    9d1c:	09000006 	stmdbeq	r0, {r1, r2}
    9d20:	000000b5 	strheq	r0, [r0], -r5
    9d24:	d0180002 	andsle	r0, r8, r2
    9d28:	15025f05 	strne	r5, [r2, #-3845]
    9d2c:	15000008 	strne	r0, [r0, #-8]
    9d30:	00004568 	andeq	r4, r0, r8, ror #10
    9d34:	25026005 	strcs	r6, [r2, #-5]
    9d38:	02000000 	andeq	r0, r0, #0	; 0x0
    9d3c:	0e150023 	cdpeq	0, 1, cr0, cr5, cr3, {1}
    9d40:	05000045 	streq	r0, [r0, #-69]
    9d44:	05b40261 	ldreq	r0, [r4, #609]!
    9d48:	23020000 	movwcs	r0, #8192	; 0x2000
    9d4c:	43dc1504 	bicsmi	r1, ip, #16777216	; 0x1000000
    9d50:	62050000 	andvs	r0, r5, #0	; 0x0
    9d54:	00081502 	andeq	r1, r8, r2, lsl #10
    9d58:	08230200 	stmdaeq	r3!, {r9}
    9d5c:	0045c015 	subeq	ip, r5, r5, lsl r0
    9d60:	02630500 	rsbeq	r0, r3, #0	; 0x0
    9d64:	0000017c 	andeq	r0, r0, ip, ror r1
    9d68:	15242302 	strne	r2, [r4, #-770]!
    9d6c:	0000442e 	andeq	r4, r0, lr, lsr #8
    9d70:	48026405 	stmdami	r2, {r0, r2, sl, sp, lr}
    9d74:	02000000 	andeq	r0, r0, #0	; 0x0
    9d78:	8f154823 	svchi	0x00154823
    9d7c:	05000044 	streq	r0, [r0, #-68]
    9d80:	00560265 	subseq	r0, r6, r5, ror #4
    9d84:	23020000 	movwcs	r0, #8192	; 0x2000
    9d88:	45cf1550 	strbmi	r1, [pc, #1360]	; a2e0 <__Stack_Size+0x9ee0>
    9d8c:	66050000 	strvs	r0, [r5], -r0
    9d90:	0006aa02 	andeq	sl, r6, r2, lsl #20
    9d94:	58230200 	stmdapl	r3!, {r9}
    9d98:	00449a15 	subeq	r9, r4, r5, lsl sl
    9d9c:	02670500 	rsbeq	r0, r7, #0	; 0x0
    9da0:	000000dd 	ldrdeq	r0, [r0], -sp
    9da4:	15682302 	strbne	r2, [r8, #-770]!
    9da8:	000045d4 	ldrdeq	r4, [r0], -r4
    9dac:	dd026805 	stcle	8, cr6, [r2, #-20]
    9db0:	02000000 	andeq	r0, r0, #0	; 0x0
    9db4:	c4157023 	ldrgt	r7, [r5], #-35
    9db8:	05000042 	streq	r0, [r0, #-66]
    9dbc:	00dd0269 	sbcseq	r0, sp, r9, ror #4
    9dc0:	23020000 	movwcs	r0, #8192	; 0x2000
    9dc4:	45931578 	ldrmi	r1, [r3, #1400]
    9dc8:	6a050000 	bvs	149dd0 <__Stack_Size+0x1499d0>
    9dcc:	00082502 	andeq	r2, r8, r2, lsl #10
    9dd0:	80230300 	eorhi	r0, r3, r0, lsl #6
    9dd4:	43d01501 	bicsmi	r1, r0, #4194304	; 0x400000
    9dd8:	6b050000 	blvs	149de0 <__Stack_Size+0x1499e0>
    9ddc:	00083502 	andeq	r3, r8, r2, lsl #10
    9de0:	88230300 	stmdahi	r3!, {r8, r9}
    9de4:	45311501 	ldrmi	r1, [r1, #-1281]!
    9de8:	6c050000 	stcvs	0, cr0, [r5], {0}
    9dec:	00004802 	andeq	r4, r0, r2, lsl #16
    9df0:	a0230300 	eorge	r0, r3, r0, lsl #6
    9df4:	43541501 	cmpmi	r4, #4194304	; 0x400000
    9df8:	6d050000 	stcvs	0, cr0, [r5]
    9dfc:	0000dd02 	andeq	sp, r0, r2, lsl #26
    9e00:	a4230300 	strtge	r0, [r3], #-768
    9e04:	42b51501 	adcsmi	r1, r5, #4194304	; 0x400000
    9e08:	6e050000 	cdpvs	0, 0, cr0, cr5, cr0, {0}
    9e0c:	0000dd02 	andeq	sp, r0, r2, lsl #26
    9e10:	ac230300 	stcge	3, cr0, [r3]
    9e14:	43431501 	movtmi	r1, #13569	; 0x3501
    9e18:	6f050000 	svcvs	0x00050000
    9e1c:	0000dd02 	andeq	sp, r0, r2, lsl #26
    9e20:	b4230300 	strtlt	r0, [r3], #-768
    9e24:	428c1501 	addmi	r1, ip, #4194304	; 0x400000
    9e28:	70050000 	andvc	r0, r5, r0
    9e2c:	0000dd02 	andeq	sp, r0, r2, lsl #26
    9e30:	bc230300 	stclt	3, cr0, [r3]
    9e34:	429b1501 	addsmi	r1, fp, #4194304	; 0x400000
    9e38:	71050000 	tstvc	r5, r0
    9e3c:	0000dd02 	andeq	sp, r0, r2, lsl #26
    9e40:	c4230300 	strtgt	r0, [r3], #-768
    9e44:	ba080001 	blt	209e50 <__Stack_Size+0x209a50>
    9e48:	25000005 	strcs	r0, [r0, #-5]
    9e4c:	09000008 	stmdbeq	r0, {r3}
    9e50:	000000b5 	strheq	r0, [r0], -r5
    9e54:	ba080019 	blt	209ec0 <__Stack_Size+0x209ac0>
    9e58:	35000005 	strcc	r0, [r0, #-5]
    9e5c:	09000008 	stmdbeq	r0, {r3}
    9e60:	000000b5 	strheq	r0, [r0], -r5
    9e64:	ba080007 	blt	209e88 <__Stack_Size+0x209a88>
    9e68:	45000005 	strmi	r0, [r0, #-5]
    9e6c:	09000008 	stmdbeq	r0, {r3}
    9e70:	000000b5 	strheq	r0, [r0], -r5
    9e74:	f0180017 	undefined instruction 0xf0180017
    9e78:	6d027705 	stcvs	7, cr7, [r2, #-20]
    9e7c:	15000008 	strne	r0, [r0, #-8]
    9e80:	00004413 	andeq	r4, r0, r3, lsl r4
    9e84:	6d027905 	stcvs	9, cr7, [r2, #-20]
    9e88:	02000008 	andeq	r0, r0, #8	; 0x8
    9e8c:	8a150023 	bhi	549f20 <__Stack_Size+0x549b20>
    9e90:	05000045 	streq	r0, [r0, #-69]
    9e94:	087d027a 	ldmdaeq	sp!, {r1, r3, r4, r5, r6, r9}^
    9e98:	23020000 	movwcs	r0, #8192	; 0x2000
    9e9c:	ee080078 	mcr	0, 0, r0, cr8, cr8, {3}
    9ea0:	7d000002 	stcvc	0, cr0, [r0, #-8]
    9ea4:	09000008 	stmdbeq	r0, {r3}
    9ea8:	000000b5 	strheq	r0, [r0], -r5
    9eac:	2508001d 	strcs	r0, [r8, #-29]
    9eb0:	8d000000 	stchi	0, cr0, [r0]
    9eb4:	09000008 	stmdbeq	r0, {r3}
    9eb8:	000000b5 	strheq	r0, [r0], -r5
    9ebc:	f019001d 	undefined instruction 0xf019001d
    9ec0:	af025d05 	svcge	0x00025d05
    9ec4:	1a000008 	bne	9eec <__Stack_Size+0x9aec>
    9ec8:	000044d3 	ldrdeq	r4, [r0], -r3
    9ecc:	f5027205 	undefined instruction 0xf5027205
    9ed0:	1a000006 	bne	9ef0 <__Stack_Size+0x9af0>
    9ed4:	000045ad 	andeq	r4, r0, sp, lsr #11
    9ed8:	45027b05 	strmi	r7, [r2, #-2821]
    9edc:	00000008 	andeq	r0, r0, r8
    9ee0:	0005ba08 	andeq	fp, r5, r8, lsl #20
    9ee4:	0008bf00 	andeq	fp, r8, r0, lsl #30
    9ee8:	00b50900 	adcseq	r0, r5, r0, lsl #18
    9eec:	00180000 	andseq	r0, r8, r0
    9ef0:	08cb011b 	stmiaeq	fp, {r0, r1, r3, r4, r8}^
    9ef4:	51140000 	tstpl	r4, r0
    9ef8:	00000004 	andeq	r0, r0, r4
    9efc:	08bf0410 	ldmeq	pc!, {r4, sl}
    9f00:	04100000 	ldreq	r0, [r0]
    9f04:	00000166 	andeq	r0, r0, r6, ror #2
    9f08:	08e3011b 	stmiaeq	r3!, {r0, r1, r3, r4, r8}^
    9f0c:	48140000 	ldmdami	r4, {}
    9f10:	00000000 	andeq	r0, r0, r0
    9f14:	08e90410 	stmiaeq	r9!, {r4, sl}^
    9f18:	04100000 	ldreq	r0, [r0]
    9f1c:	000008d7 	ldrdeq	r0, [r0], -r7
    9f20:	00065708 	andeq	r5, r6, r8, lsl #14
    9f24:	0008ff00 	andeq	pc, r8, r0, lsl #30
    9f28:	00b50900 	adcseq	r0, r5, r0, lsl #18
    9f2c:	00020000 	andeq	r0, r2, r0
    9f30:	4214011c 	andsmi	r0, r4, #7	; 0x7
    9f34:	3c010000 	stccc	0, cr0, [r1], {0}
    9f38:	00000001 	andeq	r0, r0, r1
    9f3c:	00000000 	andeq	r0, r0, r0
    9f40:	265d0100 	ldrbcs	r0, [sp], -r0, lsl #2
    9f44:	1d000009 	stcne	0, cr0, [r0, #-36]
    9f48:	00004563 	andeq	r4, r0, r3, ror #10
    9f4c:	00483a01 	subeq	r3, r8, r1, lsl #20
    9f50:	3efb0000 	cdpcc	0, 15, cr0, cr11, cr0, {0}
    9f54:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    9f58:	0000453e 	andeq	r4, r0, lr, lsr r5
    9f5c:	34032805 	strcc	r2, [r3], #-2053
    9f60:	01000009 	tsteq	r0, r9
    9f64:	04511601 	ldrbeq	r1, [r1], #-1537
    9f68:	36000000 	strcc	r0, [r0], -r0
    9f6c:	02000009 	.word	0x02000009
    9f70:	002a3300 	.word	0x002a3300
    9f74:	c6010400 	.word	0xc6010400
    9f78:	01000001 	.word	0x01000001
    9f7c:	000045fd 	.word	0x000045fd
    9f80:	00004631 	.word	0x00004631
	...
    9f8c:	0000279c 	.word	0x0000279c
    9f90:	69060102 	.word	0x69060102
    9f94:	02000004 	.word	0x02000004
    9f98:	04670801 	.word	0x04670801
    9f9c:	02020000 	.word	0x02020000
    9fa0:	00049505 	.word	0x00049505
    9fa4:	07020200 	.word	0x07020200
    9fa8:	00000222 	.word	0x00000222
    9fac:	69050403 	.word	0x69050403
    9fb0:	0200746e 	.word	0x0200746e
    9fb4:	41f70704 	.word	0x41f70704
    9fb8:	08020000 	.word	0x08020000
    9fbc:	00417305 	.word	0x00417305
    9fc0:	07080200 	.word	0x07080200
    9fc4:	000041ed 	.word	0x000041ed
    9fc8:	00444704 	.word	0x00444704
    9fcc:	41070100 	.word	0x41070100
    9fd0:	02000000 	.word	0x02000000
    9fd4:	41780504 	.word	0x41780504
    9fd8:	f6040000 	.word	0xf6040000
    9fdc:	02000044 	.word	0x02000044
    9fe0:	0000682c 	.word	0x0000682c
    9fe4:	43ef0500 	.word	0x43ef0500
    9fe8:	63030000 	.word	0x63030000
    9fec:	00004801 	.word	0x00004801
    9ff0:	02040600 	.word	0x02040600
    9ff4:	0000a547 	.word	0x0000a547
    9ff8:	43e90700 	.word	0x43e90700
    9ffc:	48020000 	.word	0x48020000
    a000:	0000007a 	.word	0x0000007a
    a004:	0043a307 	.word	0x0043a307
    a008:	a5490200 	.word	0xa5490200
    a00c:	00000000 	.word	0x00000000
    a010:	00002c08 	.word	0x00002c08
    a014:	0000b500 	.word	0x0000b500
    a018:	00b50900 	.word	0x00b50900
    a01c:	00030000 	.word	0x00030000
    a020:	0b07040a 	.word	0x0b07040a
    a024:	dd440208 	.word	0xdd440208
    a028:	0c000000 	.word	0x0c000000
    a02c:	000044e0 	.word	0x000044e0
    a030:	00414502 	.word	0x00414502
    a034:	23020000 	.word	0x23020000
    a038:	44e80c00 	.word	0x44e80c00
    a03c:	4a020000 	.word	0x4a020000
    a040:	00000086 	.word	0x00000086
    a044:	00042302 	.word	0x00042302
    a048:	00447c04 	.word	0x00447c04
    a04c:	b84b0200 	.word	0xb84b0200
    a050:	04000000 	.word	0x04000000
    a054:	00004375 	.word	0x00004375
    a058:	005d4f02 	.word	0x005d4f02
    a05c:	040d0000 	.word	0x040d0000
    a060:	00452904 	.word	0x00452904
    a064:	00150400 	.word	0x00150400
    a068:	02000001 	.word	0x02000001
    a06c:	41f20704 	.word	0x41f20704
    a070:	860e0000 	.word	0x860e0000
    a074:	18000043 	.word	0x18000043
    a078:	01662d04 	.word	0x01662d04
    a07c:	940c0000 	.word	0x940c0000
    a080:	04000044 	.word	0x04000044
    a084:	0001662e 	.word	0x0001662e
    a088:	00230200 	.word	0x00230200
    a08c:	006b5f0f 	.word	0x006b5f0f
    a090:	00412f04 	.word	0x00412f04
    a094:	23020000 	.word	0x23020000
    a098:	44cb0c04 	.word	0x44cb0c04
    a09c:	2f040000 	.word	0x2f040000
    a0a0:	00000041 	.word	0x00000041
    a0a4:	0c082302 	.word	0x0c082302
    a0a8:	0000436f 	.word	0x0000436f
    a0ac:	00412f04 	.word	0x00412f04
    a0b0:	23020000 	.word	0x23020000
    a0b4:	45750c0c 	.word	0x45750c0c
    a0b8:	2f040000 	.word	0x2f040000
    a0bc:	00000041 	.word	0x00000041
    a0c0:	0f102302 	.word	0x0f102302
    a0c4:	0400785f 	.word	0x0400785f
    a0c8:	00016c30 	.word	0x00016c30
    a0cc:	14230200 	.word	0x14230200
    a0d0:	07041000 	.word	0x07041000
    a0d4:	08000001 	.word	0x08000001
    a0d8:	000000f5 	.word	0x000000f5
    a0dc:	0000017c 	.word	0x0000017c
    a0e0:	0000b509 	.word	0x0000b509
    a0e4:	0e000000 	.word	0x0e000000
    a0e8:	0000439e 	.word	0x0000439e
    a0ec:	07350424 	.word	0x07350424
    a0f0:	0c000002 	.word	0x0c000002
    a0f4:	000042d2 	.word	0x000042d2
    a0f8:	00413604 	.word	0x00413604
    a0fc:	23020000 	.word	0x23020000
    a100:	45050c00 	.word	0x45050c00
    a104:	37040000 	.word	0x37040000
    a108:	00000041 	.word	0x00000041
    a10c:	0c042302 	.word	0x0c042302
    a110:	000042e7 	.word	0x000042e7
    a114:	00413804 	.word	0x00413804
    a118:	23020000 	.word	0x23020000
    a11c:	45e70c08 	.word	0x45e70c08
    a120:	39040000 	.word	0x39040000
    a124:	00000041 	.word	0x00000041
    a128:	0c0c2302 	.word	0x0c0c2302
    a12c:	0000441a 	.word	0x0000441a
    a130:	00413a04 	.word	0x00413a04
    a134:	23020000 	.word	0x23020000
    a138:	44090c10 	.word	0x44090c10
    a13c:	3b040000 	.word	0x3b040000
    a140:	00000041 	.word	0x00000041
    a144:	0c142302 	.word	0x0c142302
    a148:	0000457a 	.word	0x0000457a
    a14c:	00413c04 	.word	0x00413c04
    a150:	23020000 	.word	0x23020000
    a154:	445e0c18 	.word	0x445e0c18
    a158:	3d040000 	.word	0x3d040000
    a15c:	00000041 	.word	0x00000041
    a160:	0c1c2302 	.word	0x0c1c2302
    a164:	000045b5 	.word	0x000045b5
    a168:	00413e04 	.word	0x00413e04
    a16c:	23020000 	.word	0x23020000
    a170:	f6110020 	.word	0xf6110020
    a174:	08000042 	.word	0x08000042
    a178:	50470401 	.word	0x50470401
    a17c:	0c000002 	.word	0x0c000002
    a180:	00004362 	.word	0x00004362
    a184:	02504804 	.word	0x02504804
    a188:	23020000 	.word	0x23020000
    a18c:	42340c00 	.word	0x42340c00
    a190:	49040000 	.word	0x49040000
    a194:	00000250 	.word	0x00000250
    a198:	01802303 	.word	0x01802303
    a19c:	00451b0c 	.word	0x00451b0c
    a1a0:	f54b0400 	.word	0xf54b0400
    a1a4:	03000000 	.word	0x03000000
    a1a8:	0c028023 	.word	0x0c028023
    a1ac:	0000431b 	.word	0x0000431b
    a1b0:	00f54e04 	.word	0x00f54e04
    a1b4:	23030000 	.word	0x23030000
    a1b8:	08000284 	.word	0x08000284
    a1bc:	000000f3 	.word	0x000000f3
    a1c0:	00000260 	.word	0x00000260
    a1c4:	0000b509 	.word	0x0000b509
    a1c8:	11001f00 	.word	0x11001f00
    a1cc:	0000422c 	.word	0x0000422c
    a1d0:	59040190 	.word	0x59040190
    a1d4:	000002a7 	.word	0x000002a7
    a1d8:	0044940c 	.word	0x0044940c
    a1dc:	a75a0400 	.word	0xa75a0400
    a1e0:	02000002 	.word	0x02000002
    a1e4:	ac0c0023 	.word	0xac0c0023
    a1e8:	04000044 	.word	0x04000044
    a1ec:	0000415b 	.word	0x0000415b
    a1f0:	04230200 	.word	0x04230200
    a1f4:	00436a0c 	.word	0x00436a0c
    a1f8:	ad5d0400 	.word	0xad5d0400
    a1fc:	02000002 	.word	0x02000002
    a200:	f60c0823 	.word	0xf60c0823
    a204:	04000042 	.word	0x04000042
    a208:	0002075e 	.word	0x0002075e
    a20c:	88230300 	.word	0x88230300
    a210:	04100001 	.word	0x04100001
    a214:	00000260 	.word	0x00000260
    a218:	0002bf08 	.word	0x0002bf08
    a21c:	0002bd00 	.word	0x0002bd00
    a220:	00b50900 	.word	0x00b50900
    a224:	001f0000 	.word	0x001f0000
    a228:	04100112 	.word	0x04100112
    a22c:	000002bd 	.word	0x000002bd
    a230:	0044680e 	.word	0x0044680e
    a234:	69040800 	.word	0x69040800
    a238:	000002ee 	.word	0x000002ee
    a23c:	0042e10c 	.word	0x0042e10c
    a240:	ee6a0400 	.word	0xee6a0400
    a244:	02000002 	.word	0x02000002
    a248:	730c0023 	.word	0x730c0023
    a24c:	04000042 	.word	0x04000042
    a250:	0000416b 	.word	0x0000416b
    a254:	04230200 	.word	0x04230200
    a258:	2c041000 	.word	0x2c041000
    a25c:	0e000000 	.word	0x0e000000
    a260:	00004487 	.word	0x00004487
    a264:	32a9045c 	.word	0x32a9045c
    a268:	0f000004 	.word	0x0f000004
    a26c:	0400705f 	.word	0x0400705f
    a270:	0002eeaa 	.word	0x0002eeaa
    a274:	00230200 	.word	0x00230200
    a278:	00725f0f 	.word	0x00725f0f
    a27c:	0041ab04 	.word	0x0041ab04
    a280:	23020000 	.word	0x23020000
    a284:	775f0f04 	.word	0x775f0f04
    a288:	41ac0400 	.word	0x41ac0400
    a28c:	02000000 	.word	0x02000000
    a290:	140c0823 	.word	0x140c0823
    a294:	04000043 	.word	0x04000043
    a298:	000033ad 	.word	0x000033ad
    a29c:	0c230200 	.word	0x0c230200
    a2a0:	0043ba0c 	.word	0x0043ba0c
    a2a4:	33ae0400 	.word	0x33ae0400
    a2a8:	02000000 	.word	0x02000000
    a2ac:	5f0f0e23 	.word	0x5f0f0e23
    a2b0:	04006662 	.word	0x04006662
    a2b4:	0002c5af 	.word	0x0002c5af
    a2b8:	10230200 	.word	0x10230200
    a2bc:	0042ac0c 	.word	0x0042ac0c
    a2c0:	41b00400 	.word	0x41b00400
    a2c4:	02000000 	.word	0x02000000
    a2c8:	040c1823 	.word	0x040c1823
    a2cc:	04000043 	.word	0x04000043
    a2d0:	0000f3b7 	.word	0x0000f3b7
    a2d4:	1c230200 	.word	0x1c230200
    a2d8:	00438e0c 	.word	0x00438e0c
    a2dc:	c1b90400 	.word	0xc1b90400
    a2e0:	02000005 	.word	0x02000005
    a2e4:	020c2023 	.word	0x020c2023
    a2e8:	04000044 	.word	0x04000044
    a2ec:	0005f1bb 	.word	0x0005f1bb
    a2f0:	24230200 	.word	0x24230200
    a2f4:	0044f00c 	.word	0x0044f00c
    a2f8:	16bd0400 	.word	0x16bd0400
    a2fc:	02000006 	.word	0x02000006
    a300:	290c2823 	.word	0x290c2823
    a304:	04000028 	.word	0x04000028
    a308:	000631be 	.word	0x000631be
    a30c:	2c230200 	.word	0x2c230200
    a310:	62755f0f 	.word	0x62755f0f
    a314:	c5c10400 	.word	0xc5c10400
    a318:	02000002 	.word	0x02000002
    a31c:	5f0f3023 	.word	0x5f0f3023
    a320:	04007075 	.word	0x04007075
    a324:	0002eec2 	.word	0x0002eec2
    a328:	38230200 	.word	0x38230200
    a32c:	72755f0f 	.word	0x72755f0f
    a330:	41c30400 	.word	0x41c30400
    a334:	02000000 	.word	0x02000000
    a338:	db0c3c23 	.word	0xdb0c3c23
    a33c:	04000042 	.word	0x04000042
    a340:	000637c6 	.word	0x000637c6
    a344:	40230200 	.word	0x40230200
    a348:	0045a70c 	.word	0x0045a70c
    a34c:	47c70400 	.word	0x47c70400
    a350:	02000006 	.word	0x02000006
    a354:	5f0f4323 	.word	0x5f0f4323
    a358:	0400626c 	.word	0x0400626c
    a35c:	0002c5ca 	.word	0x0002c5ca
    a360:	44230200 	.word	0x44230200
    a364:	00432a0c 	.word	0x00432a0c
    a368:	41cd0400 	.word	0x41cd0400
    a36c:	02000000 	.word	0x02000000
    a370:	3b0c4c23 	.word	0x3b0c4c23
    a374:	04000043 	.word	0x04000043
    a378:	000041ce 	.word	0x000041ce
    a37c:	50230200 	.word	0x50230200
    a380:	0045f70c 	.word	0x0045f70c
    a384:	51d10400 	.word	0x51d10400
    a388:	02000004 	.word	0x02000004
    a38c:	f60c5423 	.word	0xf60c5423
    a390:	04000043 	.word	0x04000043
    a394:	0000e8d5 	.word	0x0000e8d5
    a398:	58230200 	.word	0x58230200
    a39c:	41011300 	.word	0x41011300
    a3a0:	51000000 	.word	0x51000000
    a3a4:	14000004 	.word	0x14000004
    a3a8:	00000451 	.word	0x00000451
    a3ac:	0000f314 	.word	0x0000f314
    a3b0:	05b41400 	.word	0x05b41400
    a3b4:	41140000 	.word	0x41140000
    a3b8:	00000000 	.word	0x00000000
    a3bc:	04570410 	.word	0x04570410
    a3c0:	d3110000 	.word	0xd3110000
    a3c4:	00000044 	.word	0x00000044
    a3c8:	b4250404 	.word	0xb4250404
    a3cc:	15000005 	.word	0x15000005
    a3d0:	000044fe 	.word	0x000044fe
    a3d4:	41024104 	.word	0x41024104
    a3d8:	02000000 	.word	0x02000000
    a3dc:	23150023 	.word	0x23150023
    a3e0:	04000043 	.word	0x04000043
    a3e4:	06a40246 	.word	0x06a40246
    a3e8:	23020000 	.word	0x23020000
    a3ec:	43aa1504 	.word	0x43aa1504
    a3f0:	46040000 	.word	0x46040000
    a3f4:	0006a402 	.word	0x0006a402
    a3f8:	08230200 	.word	0x08230200
    a3fc:	00437e15 	.word	0x00437e15
    a400:	02460400 	.word	0x02460400
    a404:	000006a4 	.word	0x000006a4
    a408:	150c2302 	.word	0x150c2302
    a40c:	000044a7 	.word	0x000044a7
    a410:	41024804 	.word	0x41024804
    a414:	02000000 	.word	0x02000000
    a418:	81151023 	.word	0x81151023
    a41c:	04000042 	.word	0x04000042
    a420:	08af0249 	.word	0x08af0249
    a424:	23020000 	.word	0x23020000
    a428:	45511514 	.word	0x45511514
    a42c:	4b040000 	.word	0x4b040000
    a430:	00004102 	.word	0x00004102
    a434:	30230200 	.word	0x30230200
    a438:	0044b115 	.word	0x0044b115
    a43c:	024c0400 	.word	0x024c0400
    a440:	000005e6 	.word	0x000005e6
    a444:	15342302 	.word	0x15342302
    a448:	00004423 	.word	0x00004423
    a44c:	41024e04 	.word	0x41024e04
    a450:	02000000 	.word	0x02000000
    a454:	c1153823 	.word	0xc1153823
    a458:	04000044 	.word	0x04000044
    a45c:	08cb0250 	.word	0x08cb0250
    a460:	23020000 	.word	0x23020000
    a464:	1dba153c 	.word	0x1dba153c
    a468:	53040000 	.word	0x53040000
    a46c:	00016602 	.word	0x00016602
    a470:	40230200 	.word	0x40230200
    a474:	00439415 	.word	0x00439415
    a478:	02540400 	.word	0x02540400
    a47c:	00000041 	.word	0x00000041
    a480:	15442302 	.word	0x15442302
    a484:	000045e2 	.word	0x000045e2
    a488:	66025504 	.word	0x66025504
    a48c:	02000001 	.word	0x02000001
    a490:	3d154823 	.word	0x3d154823
    a494:	04000044 	.word	0x04000044
    a498:	08d10256 	.word	0x08d10256
    a49c:	23020000 	.word	0x23020000
    a4a0:	43b2154c 	.word	0x43b2154c
    a4a4:	59040000 	.word	0x59040000
    a4a8:	00004102 	.word	0x00004102
    a4ac:	50230200 	.word	0x50230200
    a4b0:	00433315 	.word	0x00433315
    a4b4:	025a0400 	.word	0x025a0400
    a4b8:	000005b4 	.word	0x000005b4
    a4bc:	15542302 	.word	0x15542302
    a4c0:	00004459 	.word	0x00004459
    a4c4:	8d027c04 	.word	0x8d027c04
    a4c8:	02000008 	.word	0x02000008
    a4cc:	2c155823 	.word	0x2c155823
    a4d0:	04000042 	.word	0x04000042
    a4d4:	02a7027f 	.word	0x02a7027f
    a4d8:	23030000 	.word	0x23030000
    a4dc:	c71502c8 	.word	0xc71502c8
    a4e0:	04000043 	.word	0x04000043
    a4e4:	02600280 	.word	0x02600280
    a4e8:	23030000 	.word	0x23030000
    a4ec:	9d1502cc 	.word	0x9d1502cc
    a4f0:	04000045 	.word	0x04000045
    a4f4:	08e30283 	.word	0x08e30283
    a4f8:	23030000 	.word	0x23030000
    a4fc:	0c1505dc 	.word	0x0c1505dc
    a500:	04000043 	.word	0x04000043
    a504:	06630288 	.word	0x06630288
    a508:	23030000 	.word	0x23030000
    a50c:	f11505e0 	.word	0xf11505e0
    a510:	04000042 	.word	0x04000042
    a514:	08ef0289 	.word	0x08ef0289
    a518:	23030000 	.word	0x23030000
    a51c:	100005ec 	.word	0x100005ec
    a520:	0005ba04 	.word	0x0005ba04
    a524:	08010200 	.word	0x08010200
    a528:	00000470 	.word	0x00000470
    a52c:	04320410 	.word	0x04320410
    a530:	01130000 	.word	0x01130000
    a534:	00000041 	.word	0x00000041
    a538:	000005e6 	.word	0x000005e6
    a53c:	00045114 	.word	0x00045114
    a540:	00f31400 	.word	0x00f31400
    a544:	e6140000 	.word	0xe6140000
    a548:	14000005 	.word	0x14000005
    a54c:	00000041 	.word	0x00000041
    a550:	ec041000 	.word	0xec041000
    a554:	16000005 	.word	0x16000005
    a558:	000005ba 	.word	0x000005ba
    a55c:	05c70410 	.word	0x05c70410
    a560:	01130000 	.word	0x01130000
    a564:	0000006f 	.word	0x0000006f
    a568:	00000616 	.word	0x00000616
    a56c:	00045114 	.word	0x00045114
    a570:	00f31400 	.word	0x00f31400
    a574:	6f140000 	.word	0x6f140000
    a578:	14000000 	.word	0x14000000
    a57c:	00000041 	.word	0x00000041
    a580:	f7041000 	.word	0xf7041000
    a584:	13000005 	.word	0x13000005
    a588:	00004101 	.word	0x00004101
    a58c:	00063100 	.word	0x00063100
    a590:	04511400 	.word	0x04511400
    a594:	f3140000 	.word	0xf3140000
    a598:	00000000 	.word	0x00000000
    a59c:	061c0410 	.word	0x061c0410
    a5a0:	2c080000 	.word	0x2c080000
    a5a4:	47000000 	.word	0x47000000
    a5a8:	09000006 	.word	0x09000006
    a5ac:	000000b5 	.word	0x000000b5
    a5b0:	2c080002 	.word	0x2c080002
    a5b4:	57000000 	.word	0x57000000
    a5b8:	09000006 	.word	0x09000006
    a5bc:	000000b5 	.word	0x000000b5
    a5c0:	75050000 	.word	0x75050000
    a5c4:	04000044 	.word	0x04000044
    a5c8:	02f4010e 	.word	0x02f4010e
    a5cc:	84170000 	.word	0x84170000
    a5d0:	0c000045 	.word	0x0c000045
    a5d4:	9e011304 	.word	0x9e011304
    a5d8:	15000006 	.word	0x15000006
    a5dc:	00004494 	.word	0x00004494
    a5e0:	9e011404 	.word	0x9e011404
    a5e4:	02000006 	.word	0x02000006
    a5e8:	c0150023 	.word	0xc0150023
    a5ec:	04000043 	.word	0x04000043
    a5f0:	00410115 	.word	0x00410115
    a5f4:	23020000 	.word	0x23020000
    a5f8:	446f1504 	.word	0x446f1504
    a5fc:	16040000 	.word	0x16040000
    a600:	0006a401 	.word	0x0006a401
    a604:	08230200 	.word	0x08230200
    a608:	63041000 	.word	0x63041000
    a60c:	10000006 	.word	0x10000006
    a610:	00065704 	.word	0x00065704
    a614:	42791700 	.word	0x42791700
    a618:	040e0000 	.word	0x040e0000
    a61c:	06e5012e 	.word	0x06e5012e
    a620:	da150000 	.word	0xda150000
    a624:	04000044 	.word	0x04000044
    a628:	06e5012f 	.word	0x06e5012f
    a62c:	23020000 	.word	0x23020000
    a630:	43fc1500 	.word	0x43fc1500
    a634:	30040000 	.word	0x30040000
    a638:	0006e501 	.word	0x0006e501
    a63c:	06230200 	.word	0x06230200
    a640:	00452415 	.word	0x00452415
    a644:	01310400 	.word	0x01310400
    a648:	0000003a 	.word	0x0000003a
    a64c:	000c2302 	.word	0x000c2302
    a650:	00003a08 	.word	0x00003a08
    a654:	0006f500 	.word	0x0006f500
    a658:	00b50900 	.word	0x00b50900
    a65c:	00020000 	.word	0x00020000
    a660:	5f04d018 	.word	0x5f04d018
    a664:	00081502 	.word	0x00081502
    a668:	45681500 	.word	0x45681500
    a66c:	60040000 	.word	0x60040000
    a670:	00004802 	.word	0x00004802
    a674:	00230200 	.word	0x00230200
    a678:	00450e15 	.word	0x00450e15
    a67c:	02610400 	.word	0x02610400
    a680:	000005b4 	.word	0x000005b4
    a684:	15042302 	.word	0x15042302
    a688:	000043dc 	.word	0x000043dc
    a68c:	15026204 	.word	0x15026204
    a690:	02000008 	.word	0x02000008
    a694:	c0150823 	.word	0xc0150823
    a698:	04000045 	.word	0x04000045
    a69c:	017c0263 	.word	0x017c0263
    a6a0:	23020000 	.word	0x23020000
    a6a4:	442e1524 	.word	0x442e1524
    a6a8:	64040000 	.word	0x64040000
    a6ac:	00004102 	.word	0x00004102
    a6b0:	48230200 	.word	0x48230200
    a6b4:	00448f15 	.word	0x00448f15
    a6b8:	02650400 	.word	0x02650400
    a6bc:	00000056 	.word	0x00000056
    a6c0:	15502302 	.word	0x15502302
    a6c4:	000045cf 	.word	0x000045cf
    a6c8:	aa026604 	.word	0xaa026604
    a6cc:	02000006 	.word	0x02000006
    a6d0:	9a155823 	.word	0x9a155823
    a6d4:	04000044 	.word	0x04000044
    a6d8:	00dd0267 	.word	0x00dd0267
    a6dc:	23020000 	.word	0x23020000
    a6e0:	45d41568 	.word	0x45d41568
    a6e4:	68040000 	.word	0x68040000
    a6e8:	0000dd02 	.word	0x0000dd02
    a6ec:	70230200 	.word	0x70230200
    a6f0:	0042c415 	.word	0x0042c415
    a6f4:	02690400 	.word	0x02690400
    a6f8:	000000dd 	.word	0x000000dd
    a6fc:	15782302 	.word	0x15782302
    a700:	00004593 	.word	0x00004593
    a704:	25026a04 	.word	0x25026a04
    a708:	03000008 	.word	0x03000008
    a70c:	15018023 	.word	0x15018023
    a710:	000043d0 	.word	0x000043d0
    a714:	35026b04 	.word	0x35026b04
    a718:	03000008 	.word	0x03000008
    a71c:	15018823 	.word	0x15018823
    a720:	00004531 	.word	0x00004531
    a724:	41026c04 	.word	0x41026c04
    a728:	03000000 	.word	0x03000000
    a72c:	1501a023 	.word	0x1501a023
    a730:	00004354 	.word	0x00004354
    a734:	dd026d04 	.word	0xdd026d04
    a738:	03000000 	.word	0x03000000
    a73c:	1501a423 	.word	0x1501a423
    a740:	000042b5 	.word	0x000042b5
    a744:	dd026e04 	.word	0xdd026e04
    a748:	03000000 	.word	0x03000000
    a74c:	1501ac23 	.word	0x1501ac23
    a750:	00004343 	.word	0x00004343
    a754:	dd026f04 	.word	0xdd026f04
    a758:	03000000 	.word	0x03000000
    a75c:	1501b423 	.word	0x1501b423
    a760:	0000428c 	.word	0x0000428c
    a764:	dd027004 	.word	0xdd027004
    a768:	03000000 	.word	0x03000000
    a76c:	1501bc23 	.word	0x1501bc23
    a770:	0000429b 	.word	0x0000429b
    a774:	dd027104 	.word	0xdd027104
    a778:	03000000 	.word	0x03000000
    a77c:	0001c423 	.word	0x0001c423
    a780:	0005ba08 	.word	0x0005ba08
    a784:	00082500 	.word	0x00082500
    a788:	00b50900 	.word	0x00b50900
    a78c:	00190000 	.word	0x00190000
    a790:	0005ba08 	.word	0x0005ba08
    a794:	00083500 	.word	0x00083500
    a798:	00b50900 	.word	0x00b50900
    a79c:	00070000 	.word	0x00070000
    a7a0:	0005ba08 	.word	0x0005ba08
    a7a4:	00084500 	.word	0x00084500
    a7a8:	00b50900 	.word	0x00b50900
    a7ac:	00170000 	.word	0x00170000
    a7b0:	7704f018 	.word	0x7704f018
    a7b4:	00086d02 	.word	0x00086d02
    a7b8:	44131500 	.word	0x44131500
    a7bc:	79040000 	.word	0x79040000
    a7c0:	00086d02 	.word	0x00086d02
    a7c4:	00230200 	.word	0x00230200
    a7c8:	00458a15 	.word	0x00458a15
    a7cc:	027a0400 	.word	0x027a0400
    a7d0:	0000087d 	.word	0x0000087d
    a7d4:	00782302 	.word	0x00782302
    a7d8:	0002ee08 	.word	0x0002ee08
    a7dc:	00087d00 	.word	0x00087d00
    a7e0:	00b50900 	.word	0x00b50900
    a7e4:	001d0000 	.word	0x001d0000
    a7e8:	00004808 	.word	0x00004808
    a7ec:	00088d00 	.word	0x00088d00
    a7f0:	00b50900 	.word	0x00b50900
    a7f4:	001d0000 	.word	0x001d0000
    a7f8:	5d04f019 	.word	0x5d04f019
    a7fc:	0008af02 	.word	0x0008af02
    a800:	44d31a00 	.word	0x44d31a00
    a804:	72040000 	.word	0x72040000
    a808:	0006f502 	.word	0x0006f502
    a80c:	45ad1a00 	.word	0x45ad1a00
    a810:	7b040000 	.word	0x7b040000
    a814:	00084502 	.word	0x00084502
    a818:	ba080000 	.word	0xba080000
    a81c:	bf000005 	.word	0xbf000005
    a820:	09000008 	.word	0x09000008
    a824:	000000b5 	.word	0x000000b5
    a828:	011b0018 	.word	0x011b0018
    a82c:	000008cb 	.word	0x000008cb
    a830:	00045114 	.word	0x00045114
    a834:	04100000 	.word	0x04100000
    a838:	000008bf 	.word	0x000008bf
    a83c:	01660410 	.word	0x01660410
    a840:	011b0000 	.word	0x011b0000
    a844:	000008e3 	.word	0x000008e3
    a848:	00004114 	.word	0x00004114
    a84c:	04100000 	.word	0x04100000
    a850:	000008e9 	.word	0x000008e9
    a854:	08d70410 	.word	0x08d70410
    a858:	57080000 	.word	0x57080000
    a85c:	ff000006 	.word	0xff000006
    a860:	09000008 	.word	0x09000008
    a864:	000000b5 	.word	0x000000b5
    a868:	f11c0002 	.word	0xf11c0002
    a86c:	05000045 	.word	0x05000045
    a870:	0004570c 	.word	0x0004570c
    a874:	00030500 	.word	0x00030500
    a878:	1d000000 	.word	0x1d000000
    a87c:	00004545 	.word	0x00004545
    a880:	04511005 	.word	0x04511005
    a884:	05010000 	.word	0x05010000
    a888:	00000003 	.word	0x00000003
    a88c:	453e1d00 	.word	0x453e1d00
    a890:	11050000 	.word	0x11050000
    a894:	00000934 	.word	0x00000934
    a898:	00030501 	.word	0x00030501
    a89c:	16000000 	.word	0x16000000
    a8a0:	00000451 	.word	0x00000451
    a8a4:	00014200 	.word	0x00014200
    a8a8:	93000200 	.word	0x93000200
    a8ac:	0400002b 	.word	0x0400002b
    a8b0:	0001c601 	.word	0x0001c601
    a8b4:	46a60100 	.word	0x46a60100
    a8b8:	46fa0000 	.word	0x46fa0000
	...
    a8c4:	28770000 	.word	0x28770000
    a8c8:	01020000 	.word	0x01020000
    a8cc:	00046906 	.word	0x00046906
    a8d0:	08010200 	.word	0x08010200
    a8d4:	00000467 	.word	0x00000467
    a8d8:	95050202 	.word	0x95050202
    a8dc:	02000004 	.word	0x02000004
    a8e0:	02220702 	.word	0x02220702
    a8e4:	04030000 	.word	0x04030000
    a8e8:	746e6905 	.word	0x746e6905
    a8ec:	07040200 	.word	0x07040200
    a8f0:	000041f7 	.word	0x000041f7
    a8f4:	73050802 	.word	0x73050802
    a8f8:	02000041 	.word	0x02000041
    a8fc:	41ed0708 	.word	0x41ed0708
    a900:	04020000 	.word	0x04020000
    a904:	00417805 	.word	0x00417805
    a908:	07040400 	.word	0x07040400
    a90c:	00467a05 	.word	0x00467a05
    a910:	48d60200 	.word	0x48d60200
    a914:	02000000 	.word	0x02000000
    a918:	41f20704 	.word	0x41f20704
    a91c:	01020000 	.word	0x01020000
    a920:	00047008 	.word	0x00047008
    a924:	2f010600 	.word	0x2f010600
    a928:	01000047 	.word	0x01000047
    a92c:	00000132 	.word	0x00000132
    a930:	00000000 	.word	0x00000000
    a934:	3f190000 	.word	0x3f190000
    a938:	00b20000 	.word	0x00b20000
    a93c:	e2070000 	.word	0xe2070000
    a940:	01000044 	.word	0x01000044
    a944:	00006733 	.word	0x00006733
    a948:	08550100 	.word	0x08550100
    a94c:	34010069 	.word	0x34010069
    a950:	00000067 	.word	0x00000067
    a954:	06005401 	.word	0x06005401
    a958:	0046e801 	.word	0x0046e801
    a95c:	01200100 	.word	0x01200100
	...
    a968:	00003f38 	.word	0x00003f38
    a96c:	000000e4 	.word	0x000000e4
    a970:	0044e207 	.word	0x0044e207
    a974:	67210100 	.word	0x67210100
    a978:	01000000 	.word	0x01000000
    a97c:	00690855 	.word	0x00690855
    a980:	00672201 	.word	0x00672201
    a984:	54010000 	.word	0x54010000
    a988:	00f10900 	.word	0x00f10900
    a98c:	00ef0000 	.word	0x00ef0000
    a990:	000a0000 	.word	0x000a0000
    a994:	040c010b 	.word	0x040c010b
    a998:	000000ef 	.word	0x000000ef
    a99c:	0047410d 	.word	0x0047410d
    a9a0:	e4130100 	.word	0xe4130100
    a9a4:	01000000 	.word	0x01000000
    a9a8:	46920d01 	.word	0x46920d01
    a9ac:	14010000 	.word	0x14010000
    a9b0:	000000e4 	.word	0x000000e4
    a9b4:	570d0101 	.word	0x570d0101
    a9b8:	01000047 	.word	0x01000047
    a9bc:	0000e415 	.word	0x0000e415
    a9c0:	0d010100 	.word	0x0d010100
    a9c4:	000046d7 	.word	0x000046d7
    a9c8:	00e41601 	.word	0x00e41601
    a9cc:	01010000 	.word	0x01010000
    a9d0:	0046670d 	.word	0x0046670d
    a9d4:	e4170100 	.word	0xe4170100
    a9d8:	01000000 	.word	0x01000000
    a9dc:	46810d01 	.word	0x46810d01
    a9e0:	18010000 	.word	0x18010000
    a9e4:	000000e4 	.word	0x000000e4
    a9e8:	0a000101 	.word	0x0a000101
    a9ec:	02000001 	.word	0x02000001
    a9f0:	002c3700 	.word	0x002c3700
    a9f4:	c6010400 	.word	0xc6010400
    a9f8:	01000001 	.word	0x01000001
    a9fc:	000047cf 	.word	0x000047cf
    aa00:	0000478c 	.word	0x0000478c
	...
    aa0c:	0000291d 	.word	0x0000291d
    aa10:	69050402 	.word	0x69050402
    aa14:	0300746e 	.word	0x0300746e
    aa18:	0000467a 	.word	0x0000467a
    aa1c:	0037d602 	.word	0x0037d602
    aa20:	04040000 	.word	0x04040000
    aa24:	0041f707 	.word	0x0041f707
    aa28:	c3010500 	.word	0xc3010500
    aa2c:	01000047 	.word	0x01000047
    aa30:	00d40139 	.word	0x00d40139
	...
    aa3c:	3f570000 	.word	0x3f570000
    aa40:	00d40000 	.word	0x00d40000
    aa44:	87060000 	.word	0x87060000
    aa48:	01000047 	.word	0x01000047
    aa4c:	0000d435 	.word	0x0000d435
    aa50:	003f7600 	.word	0x003f7600
    aa54:	47760600 	.word	0x47760600
    aa58:	35010000 	.word	0x35010000
    aa5c:	000000d6 	.word	0x000000d6
    aa60:	00003f94 	.word	0x00003f94
    aa64:	0047ca06 	.word	0x0047ca06
    aa68:	2c350100 	.word	0x2c350100
    aa6c:	b2000000 	.word	0xb2000000
    aa70:	0700003f 	.word	0x0700003f
    aa74:	00747364 	.word	0x00747364
    aa78:	00dd4701 	.word	0x00dd4701
    aa7c:	3fdb0000 	.word	0x3fdb0000
    aa80:	73070000 	.word	0x73070000
    aa84:	01006372 	.word	0x01006372
    aa88:	0000ea48 	.word	0x0000ea48
    aa8c:	003fee00 	.word	0x003fee00
    aa90:	477b0800 	.word	0x477b0800
    aa94:	49010000 	.word	0x49010000
    aa98:	000000f5 	.word	0x000000f5
    aa9c:	0000400c 	.word	0x0000400c
    aaa0:	00476a08 	.word	0x00476a08
    aaa4:	024a0100 	.word	0x024a0100
    aaa8:	35000001 	.word	0x35000001
    aaac:	07000040 	.word	0x07000040
    aab0:	006e656c 	.word	0x006e656c
    aab4:	00254b01 	.word	0x00254b01
    aab8:	405e0000 	.word	0x405e0000
    aabc:	09000000 	.word	0x09000000
    aac0:	dc040a04 	.word	0xdc040a04
    aac4:	0b000000 	.word	0x0b000000
    aac8:	00e3040a 	.word	0x00e3040a
    aacc:	01040000 	.word	0x01040000
    aad0:	00047008 	.word	0x00047008
    aad4:	f0040a00 	.word	0xf0040a00
    aad8:	0c000000 	.word	0x0c000000
    aadc:	000000e3 	.word	0x000000e3
    aae0:	00fb040a 	.word	0x00fb040a
    aae4:	04040000 	.word	0x04040000
    aae8:	00417805 	.word	0x00417805
    aaec:	08040a00 	.word	0x08040a00
    aaf0:	0c000001 	.word	0x0c000001
    aaf4:	000000fb 	.word	0x000000fb
    aaf8:	00010f00 	.word	0x00010f00
    aafc:	d0000200 	.word	0xd0000200
    ab00:	0400002c 	.word	0x0400002c
    ab04:	0001c601 	.word	0x0001c601
    ab08:	48110100 	.word	0x48110100
    ab0c:	478c0000 	.word	0x478c0000
	...
    ab18:	29f20000 	.word	0x29f20000
    ab1c:	01020000 	.word	0x01020000
    ab20:	00046906 	.word	0x00046906
    ab24:	08010200 	.word	0x08010200
    ab28:	00000467 	.word	0x00000467
    ab2c:	95050202 	.word	0x95050202
    ab30:	02000004 	.word	0x02000004
    ab34:	02220702 	.word	0x02220702
    ab38:	04030000 	.word	0x04030000
    ab3c:	746e6905 	.word	0x746e6905
    ab40:	07040200 	.word	0x07040200
    ab44:	000041f7 	.word	0x000041f7
    ab48:	73050802 	.word	0x73050802
    ab4c:	02000041 	.word	0x02000041
    ab50:	41ed0708 	.word	0x41ed0708
    ab54:	04020000 	.word	0x04020000
    ab58:	00417805 	.word	0x00417805
    ab5c:	07040400 	.word	0x07040400
    ab60:	04020405 	.word	0x04020405
    ab64:	0041f207 	.word	0x0041f207
    ab68:	76040600 	.word	0x76040600
    ab6c:	02000000 	.word	0x02000000
    ab70:	04700801 	.word	0x04700801
    ab74:	7a070000 	.word	0x7a070000
    ab78:	02000046 	.word	0x02000046
    ab7c:	000048d6 	.word	0x000048d6
    ab80:	46010800 	.word	0x46010800
    ab84:	01000048 	.word	0x01000048
    ab88:	0067012f 	.word	0x0067012f
	...
    ab94:	40870000 	.word	0x40870000
    ab98:	010c0000 	.word	0x010c0000
    ab9c:	6d090000 	.word	0x6d090000
    aba0:	672b0100 	.word	0x672b0100
    aba4:	a6000000 	.word	0xa6000000
    aba8:	09000040 	.word	0x09000040
    abac:	2b010063 	.word	0x2b010063
    abb0:	00000041 	.word	0x00000041
    abb4:	000040da 	.word	0x000040da
    abb8:	01006e09 	.word	0x01006e09
    abbc:	00007d2b 	.word	0x00007d2b
    abc0:	00410300 	.word	0x00410300
    abc4:	00730a00 	.word	0x00730a00
    abc8:	00703a01 	.word	0x00703a01
    abcc:	41370000 	.word	0x41370000
    abd0:	690b0000 	.word	0x690b0000
    abd4:	413b0100 	.word	0x413b0100
    abd8:	0c000000 	.word	0x0c000000
    abdc:	0000484d 	.word	0x0000484d
    abe0:	00693c01 	.word	0x00693c01
    abe4:	41550000 	.word	0x41550000
    abe8:	040c0000 	.word	0x040c0000
    abec:	01000048 	.word	0x01000048
    abf0:	00010c3d 	.word	0x00010c3d
    abf4:	00417e00 	.word	0x00417e00
    abf8:	00640d00 	.word	0x00640d00
    abfc:	00483e01 	.word	0x00483e01
    ac00:	55010000 	.word	0x55010000
    ac04:	69040600 	.word	0x69040600
    ac08:	00000000 	.word	0x00000000
    ac0c:	000009a1 	.word	0x000009a1
    ac10:	2d820002 	.word	0x2d820002
    ac14:	01040000 	.word	0x01040000
    ac18:	000001c6 	.word	0x000001c6
    ac1c:	00485401 	.word	0x00485401
    ac20:	00418100 	.word	0x00418100
	...
    ac2c:	002ace00 	.word	0x002ace00
    ac30:	05040200 	.word	0x05040200
    ac34:	00746e69 	.word	0x00746e69
    ac38:	f7070403 	.word	0xf7070403
    ac3c:	03000041 	.word	0x03000041
    ac40:	04690601 	.word	0x04690601
    ac44:	01030000 	.word	0x01030000
    ac48:	00046708 	.word	0x00046708
    ac4c:	05020300 	.word	0x05020300
    ac50:	00000495 	.word	0x00000495
    ac54:	22070203 	.word	0x22070203
    ac58:	03000002 	.word	0x03000002
    ac5c:	41730508 	.word	0x41730508
    ac60:	08030000 	.word	0x08030000
    ac64:	0041ed07 	.word	0x0041ed07
    ac68:	44470400 	.word	0x44470400
    ac6c:	07020000 	.word	0x07020000
    ac70:	00000025 	.word	0x00000025
    ac74:	78050403 	.word	0x78050403
    ac78:	04000041 	.word	0x04000041
    ac7c:	000044f6 	.word	0x000044f6
    ac80:	00682c03 	.word	0x00682c03
    ac84:	ef050000 	.word	0xef050000
    ac88:	04000043 	.word	0x04000043
    ac8c:	002c0163 	.word	0x002c0163
    ac90:	04060000 	.word	0x04060000
    ac94:	00a54703 	.word	0x00a54703
    ac98:	e9070000 	.word	0xe9070000
    ac9c:	03000043 	.word	0x03000043
    aca0:	00007a48 	.word	0x00007a48
    aca4:	43a30700 	.word	0x43a30700
    aca8:	49030000 	.word	0x49030000
    acac:	000000a5 	.word	0x000000a5
    acb0:	003a0800 	.word	0x003a0800
    acb4:	00b50000 	.word	0x00b50000
    acb8:	b5090000 	.word	0xb5090000
    acbc:	03000000 	.word	0x03000000
    acc0:	07040a00 	.word	0x07040a00
    acc4:	4403080b 	.word	0x4403080b
    acc8:	000000dd 	.word	0x000000dd
    accc:	0044e00c 	.word	0x0044e00c
    acd0:	25450300 	.word	0x25450300
    acd4:	02000000 	.word	0x02000000
    acd8:	e80c0023 	.word	0xe80c0023
    acdc:	03000044 	.word	0x03000044
    ace0:	0000864a 	.word	0x0000864a
    ace4:	04230200 	.word	0x04230200
    ace8:	447c0400 	.word	0x447c0400
    acec:	4b030000 	.word	0x4b030000
    acf0:	000000b8 	.word	0x000000b8
    acf4:	00437504 	.word	0x00437504
    acf8:	5d4f0300 	.word	0x5d4f0300
    acfc:	0d000000 	.word	0x0d000000
    ad00:	45290404 	.word	0x45290404
    ad04:	15050000 	.word	0x15050000
    ad08:	00000100 	.word	0x00000100
    ad0c:	f2070403 	.word	0xf2070403
    ad10:	0e000041 	.word	0x0e000041
    ad14:	00004386 	.word	0x00004386
    ad18:	662d0518 	.word	0x662d0518
    ad1c:	0c000001 	.word	0x0c000001
    ad20:	00004494 	.word	0x00004494
    ad24:	01662e05 	.word	0x01662e05
    ad28:	23020000 	.word	0x23020000
    ad2c:	6b5f0f00 	.word	0x6b5f0f00
    ad30:	252f0500 	.word	0x252f0500
    ad34:	02000000 	.word	0x02000000
    ad38:	cb0c0423 	.word	0xcb0c0423
    ad3c:	05000044 	.word	0x05000044
    ad40:	0000252f 	.word	0x0000252f
    ad44:	08230200 	.word	0x08230200
    ad48:	00436f0c 	.word	0x00436f0c
    ad4c:	252f0500 	.word	0x252f0500
    ad50:	02000000 	.word	0x02000000
    ad54:	750c0c23 	.word	0x750c0c23
    ad58:	05000045 	.word	0x05000045
    ad5c:	0000252f 	.word	0x0000252f
    ad60:	10230200 	.word	0x10230200
    ad64:	00785f0f 	.word	0x00785f0f
    ad68:	016c3005 	.word	0x016c3005
    ad6c:	23020000 	.word	0x23020000
    ad70:	04100014 	.word	0x04100014
    ad74:	00000107 	.word	0x00000107
    ad78:	0000f508 	.word	0x0000f508
    ad7c:	00017c00 	.word	0x00017c00
    ad80:	00b50900 	.word	0x00b50900
    ad84:	00000000 	.word	0x00000000
    ad88:	00439e0e 	.word	0x00439e0e
    ad8c:	35052400 	.word	0x35052400
    ad90:	00000207 	.word	0x00000207
    ad94:	0042d20c 	.word	0x0042d20c
    ad98:	25360500 	.word	0x25360500
    ad9c:	02000000 	.word	0x02000000
    ada0:	050c0023 	.word	0x050c0023
    ada4:	05000045 	.word	0x05000045
    ada8:	00002537 	.word	0x00002537
    adac:	04230200 	.word	0x04230200
    adb0:	0042e70c 	.word	0x0042e70c
    adb4:	25380500 	.word	0x25380500
    adb8:	02000000 	.word	0x02000000
    adbc:	e70c0823 	.word	0xe70c0823
    adc0:	05000045 	.word	0x05000045
    adc4:	00002539 	.word	0x00002539
    adc8:	0c230200 	.word	0x0c230200
    adcc:	00441a0c 	.word	0x00441a0c
    add0:	253a0500 	.word	0x253a0500
    add4:	02000000 	.word	0x02000000
    add8:	090c1023 	.word	0x090c1023
    addc:	05000044 	.word	0x05000044
    ade0:	0000253b 	.word	0x0000253b
    ade4:	14230200 	.word	0x14230200
    ade8:	00457a0c 	.word	0x00457a0c
    adec:	253c0500 	.word	0x253c0500
    adf0:	02000000 	.word	0x02000000
    adf4:	5e0c1823 	.word	0x5e0c1823
    adf8:	05000044 	.word	0x05000044
    adfc:	0000253d 	.word	0x0000253d
    ae00:	1c230200 	.word	0x1c230200
    ae04:	0045b50c 	.word	0x0045b50c
    ae08:	253e0500 	.word	0x253e0500
    ae0c:	02000000 	.word	0x02000000
    ae10:	11002023 	.word	0x11002023
    ae14:	000042f6 	.word	0x000042f6
    ae18:	47050108 	.word	0x47050108
    ae1c:	00000250 	.word	0x00000250
    ae20:	0043620c 	.word	0x0043620c
    ae24:	50480500 	.word	0x50480500
    ae28:	02000002 	.word	0x02000002
    ae2c:	340c0023 	.word	0x340c0023
    ae30:	05000042 	.word	0x05000042
    ae34:	00025049 	.word	0x00025049
    ae38:	80230300 	.word	0x80230300
    ae3c:	451b0c01 	.word	0x451b0c01
    ae40:	4b050000 	.word	0x4b050000
    ae44:	000000f5 	.word	0x000000f5
    ae48:	02802303 	.word	0x02802303
    ae4c:	00431b0c 	.word	0x00431b0c
    ae50:	f54e0500 	.word	0xf54e0500
    ae54:	03000000 	.word	0x03000000
    ae58:	00028423 	.word	0x00028423
    ae5c:	0000f308 	.word	0x0000f308
    ae60:	00026000 	.word	0x00026000
    ae64:	00b50900 	.word	0x00b50900
    ae68:	001f0000 	.word	0x001f0000
    ae6c:	00422c11 	.word	0x00422c11
    ae70:	05019000 	.word	0x05019000
    ae74:	0002a759 	.word	0x0002a759
    ae78:	44940c00 	.word	0x44940c00
    ae7c:	5a050000 	.word	0x5a050000
    ae80:	000002a7 	.word	0x000002a7
    ae84:	0c002302 	.word	0x0c002302
    ae88:	000044ac 	.word	0x000044ac
    ae8c:	00255b05 	.word	0x00255b05
    ae90:	23020000 	.word	0x23020000
    ae94:	436a0c04 	.word	0x436a0c04
    ae98:	5d050000 	.word	0x5d050000
    ae9c:	000002ad 	.word	0x000002ad
    aea0:	0c082302 	.word	0x0c082302
    aea4:	000042f6 	.word	0x000042f6
    aea8:	02075e05 	.word	0x02075e05
    aeac:	23030000 	.word	0x23030000
    aeb0:	10000188 	.word	0x10000188
    aeb4:	00026004 	.word	0x00026004
    aeb8:	02bf0800 	.word	0x02bf0800
    aebc:	02bd0000 	.word	0x02bd0000
    aec0:	b5090000 	.word	0xb5090000
    aec4:	1f000000 	.word	0x1f000000
    aec8:	10011200 	.word	0x10011200
    aecc:	0002bd04 	.word	0x0002bd04
    aed0:	44680e00 	.word	0x44680e00
    aed4:	05080000 	.word	0x05080000
    aed8:	0002ee69 	.word	0x0002ee69
    aedc:	42e10c00 	.word	0x42e10c00
    aee0:	6a050000 	.word	0x6a050000
    aee4:	000002ee 	.word	0x000002ee
    aee8:	0c002302 	.word	0x0c002302
    aeec:	00004273 	.word	0x00004273
    aef0:	00256b05 	.word	0x00256b05
    aef4:	23020000 	.word	0x23020000
    aef8:	04100004 	.word	0x04100004
    aefc:	0000003a 	.word	0x0000003a
    af00:	0044870e 	.word	0x0044870e
    af04:	a9055c00 	.word	0xa9055c00
    af08:	00000432 	.word	0x00000432
    af0c:	00705f0f 	.word	0x00705f0f
    af10:	02eeaa05 	.word	0x02eeaa05
    af14:	23020000 	.word	0x23020000
    af18:	725f0f00 	.word	0x725f0f00
    af1c:	25ab0500 	.word	0x25ab0500
    af20:	02000000 	.word	0x02000000
    af24:	5f0f0423 	.word	0x5f0f0423
    af28:	ac050077 	.word	0xac050077
    af2c:	00000025 	.word	0x00000025
    af30:	0c082302 	.word	0x0c082302
    af34:	00004314 	.word	0x00004314
    af38:	0041ad05 	.word	0x0041ad05
    af3c:	23020000 	.word	0x23020000
    af40:	43ba0c0c 	.word	0x43ba0c0c
    af44:	ae050000 	.word	0xae050000
    af48:	00000041 	.word	0x00000041
    af4c:	0f0e2302 	.word	0x0f0e2302
    af50:	0066625f 	.word	0x0066625f
    af54:	02c5af05 	.word	0x02c5af05
    af58:	23020000 	.word	0x23020000
    af5c:	42ac0c10 	.word	0x42ac0c10
    af60:	b0050000 	.word	0xb0050000
    af64:	00000025 	.word	0x00000025
    af68:	0c182302 	.word	0x0c182302
    af6c:	00004304 	.word	0x00004304
    af70:	00f3b705 	.word	0x00f3b705
    af74:	23020000 	.word	0x23020000
    af78:	438e0c1c 	.word	0x438e0c1c
    af7c:	b9050000 	.word	0xb9050000
    af80:	000005c1 	.word	0x000005c1
    af84:	0c202302 	.word	0x0c202302
    af88:	00004402 	.word	0x00004402
    af8c:	05f1bb05 	.word	0x05f1bb05
    af90:	23020000 	.word	0x23020000
    af94:	44f00c24 	.word	0x44f00c24
    af98:	bd050000 	.word	0xbd050000
    af9c:	00000616 	.word	0x00000616
    afa0:	0c282302 	.word	0x0c282302
    afa4:	00002829 	.word	0x00002829
    afa8:	0631be05 	.word	0x0631be05
    afac:	23020000 	.word	0x23020000
    afb0:	755f0f2c 	.word	0x755f0f2c
    afb4:	c1050062 	.word	0xc1050062
    afb8:	000002c5 	.word	0x000002c5
    afbc:	0f302302 	.word	0x0f302302
    afc0:	0070755f 	.word	0x0070755f
    afc4:	02eec205 	.word	0x02eec205
    afc8:	23020000 	.word	0x23020000
    afcc:	755f0f38 	.word	0x755f0f38
    afd0:	c3050072 	.word	0xc3050072
    afd4:	00000025 	.word	0x00000025
    afd8:	0c3c2302 	.word	0x0c3c2302
    afdc:	000042db 	.word	0x000042db
    afe0:	0637c605 	.word	0x0637c605
    afe4:	23020000 	.word	0x23020000
    afe8:	45a70c40 	.word	0x45a70c40
    afec:	c7050000 	.word	0xc7050000
    aff0:	00000647 	.word	0x00000647
    aff4:	0f432302 	.word	0x0f432302
    aff8:	00626c5f 	.word	0x00626c5f
    affc:	02c5ca05 	.word	0x02c5ca05
    b000:	23020000 	.word	0x23020000
    b004:	432a0c44 	.word	0x432a0c44
    b008:	cd050000 	.word	0xcd050000
    b00c:	00000025 	.word	0x00000025
    b010:	0c4c2302 	.word	0x0c4c2302
    b014:	0000433b 	.word	0x0000433b
    b018:	0025ce05 	.word	0x0025ce05
    b01c:	23020000 	.word	0x23020000
    b020:	45f70c50 	.word	0x45f70c50
    b024:	d1050000 	.word	0xd1050000
    b028:	00000451 	.word	0x00000451
    b02c:	0c542302 	.word	0x0c542302
    b030:	000043f6 	.word	0x000043f6
    b034:	00e8d505 	.word	0x00e8d505
    b038:	23020000 	.word	0x23020000
    b03c:	01130058 	.word	0x01130058
    b040:	00000025 	.word	0x00000025
    b044:	00000451 	.word	0x00000451
    b048:	00045114 	.word	0x00045114
    b04c:	00f31400 	.word	0x00f31400
    b050:	b4140000 	.word	0xb4140000
    b054:	14000005 	.word	0x14000005
    b058:	00000025 	.word	0x00000025
    b05c:	57041000 	.word	0x57041000
    b060:	11000004 	.word	0x11000004
    b064:	000044d3 	.word	0x000044d3
    b068:	25050400 	.word	0x25050400
    b06c:	000005b4 	.word	0x000005b4
    b070:	0044fe15 	.word	0x0044fe15
    b074:	02410500 	.word	0x02410500
    b078:	00000025 	.word	0x00000025
    b07c:	15002302 	.word	0x15002302
    b080:	00004323 	.word	0x00004323
    b084:	a4024605 	.word	0xa4024605
    b088:	02000006 	.word	0x02000006
    b08c:	aa150423 	.word	0xaa150423
    b090:	05000043 	.word	0x05000043
    b094:	06a40246 	.word	0x06a40246
    b098:	23020000 	.word	0x23020000
    b09c:	437e1508 	.word	0x437e1508
    b0a0:	46050000 	.word	0x46050000
    b0a4:	0006a402 	.word	0x0006a402
    b0a8:	0c230200 	.word	0x0c230200
    b0ac:	0044a715 	.word	0x0044a715
    b0b0:	02480500 	.word	0x02480500
    b0b4:	00000025 	.word	0x00000025
    b0b8:	15102302 	.word	0x15102302
    b0bc:	00004281 	.word	0x00004281
    b0c0:	af024905 	.word	0xaf024905
    b0c4:	02000008 	.word	0x02000008
    b0c8:	51151423 	.word	0x51151423
    b0cc:	05000045 	.word	0x05000045
    b0d0:	0025024b 	.word	0x0025024b
    b0d4:	23020000 	.word	0x23020000
    b0d8:	44b11530 	.word	0x44b11530
    b0dc:	4c050000 	.word	0x4c050000
    b0e0:	0005e602 	.word	0x0005e602
    b0e4:	34230200 	.word	0x34230200
    b0e8:	00442315 	.word	0x00442315
    b0ec:	024e0500 	.word	0x024e0500
    b0f0:	00000025 	.word	0x00000025
    b0f4:	15382302 	.word	0x15382302
    b0f8:	000044c1 	.word	0x000044c1
    b0fc:	cb025005 	.word	0xcb025005
    b100:	02000008 	.word	0x02000008
    b104:	ba153c23 	.word	0xba153c23
    b108:	0500001d 	.word	0x0500001d
    b10c:	01660253 	.word	0x01660253
    b110:	23020000 	.word	0x23020000
    b114:	43941540 	.word	0x43941540
    b118:	54050000 	.word	0x54050000
    b11c:	00002502 	.word	0x00002502
    b120:	44230200 	.word	0x44230200
    b124:	0045e215 	.word	0x0045e215
    b128:	02550500 	.word	0x02550500
    b12c:	00000166 	.word	0x00000166
    b130:	15482302 	.word	0x15482302
    b134:	0000443d 	.word	0x0000443d
    b138:	d1025605 	.word	0xd1025605
    b13c:	02000008 	.word	0x02000008
    b140:	b2154c23 	.word	0xb2154c23
    b144:	05000043 	.word	0x05000043
    b148:	00250259 	.word	0x00250259
    b14c:	23020000 	.word	0x23020000
    b150:	43331550 	.word	0x43331550
    b154:	5a050000 	.word	0x5a050000
    b158:	0005b402 	.word	0x0005b402
    b15c:	54230200 	.word	0x54230200
    b160:	00445915 	.word	0x00445915
    b164:	027c0500 	.word	0x027c0500
    b168:	0000088d 	.word	0x0000088d
    b16c:	15582302 	.word	0x15582302
    b170:	0000422c 	.word	0x0000422c
    b174:	a7027f05 	.word	0xa7027f05
    b178:	03000002 	.word	0x03000002
    b17c:	1502c823 	.word	0x1502c823
    b180:	000043c7 	.word	0x000043c7
    b184:	60028005 	.word	0x60028005
    b188:	03000002 	.word	0x03000002
    b18c:	1502cc23 	.word	0x1502cc23
    b190:	0000459d 	.word	0x0000459d
    b194:	e3028305 	.word	0xe3028305
    b198:	03000008 	.word	0x03000008
    b19c:	1505dc23 	.word	0x1505dc23
    b1a0:	0000430c 	.word	0x0000430c
    b1a4:	63028805 	.word	0x63028805
    b1a8:	03000006 	.word	0x03000006
    b1ac:	1505e023 	.word	0x1505e023
    b1b0:	000042f1 	.word	0x000042f1
    b1b4:	ef028905 	.word	0xef028905
    b1b8:	03000008 	.word	0x03000008
    b1bc:	0005ec23 	.word	0x0005ec23
    b1c0:	05ba0410 	.word	0x05ba0410
    b1c4:	01030000 	.word	0x01030000
    b1c8:	00047008 	.word	0x00047008
    b1cc:	32041000 	.word	0x32041000
    b1d0:	13000004 	.word	0x13000004
    b1d4:	00002501 	.word	0x00002501
    b1d8:	0005e600 	.word	0x0005e600
    b1dc:	04511400 	.word	0x04511400
    b1e0:	f3140000 	.word	0xf3140000
    b1e4:	14000000 	.word	0x14000000
    b1e8:	000005e6 	.word	0x000005e6
    b1ec:	00002514 	.word	0x00002514
    b1f0:	04100000 	.word	0x04100000
    b1f4:	000005ec 	.word	0x000005ec
    b1f8:	0005ba16 	.word	0x0005ba16
    b1fc:	c7041000 	.word	0xc7041000
    b200:	13000005 	.word	0x13000005
    b204:	00006f01 	.word	0x00006f01
    b208:	00061600 	.word	0x00061600
    b20c:	04511400 	.word	0x04511400
    b210:	f3140000 	.word	0xf3140000
    b214:	14000000 	.word	0x14000000
    b218:	0000006f 	.word	0x0000006f
    b21c:	00002514 	.word	0x00002514
    b220:	04100000 	.word	0x04100000
    b224:	000005f7 	.word	0x000005f7
    b228:	00250113 	.word	0x00250113
    b22c:	06310000 	.word	0x06310000
    b230:	51140000 	.word	0x51140000
    b234:	14000004 	.word	0x14000004
    b238:	000000f3 	.word	0x000000f3
    b23c:	1c041000 	.word	0x1c041000
    b240:	08000006 	.word	0x08000006
    b244:	0000003a 	.word	0x0000003a
    b248:	00000647 	.word	0x00000647
    b24c:	0000b509 	.word	0x0000b509
    b250:	08000200 	.word	0x08000200
    b254:	0000003a 	.word	0x0000003a
    b258:	00000657 	.word	0x00000657
    b25c:	0000b509 	.word	0x0000b509
    b260:	05000000 	.word	0x05000000
    b264:	00004475 	.word	0x00004475
    b268:	f4010e05 	.word	0xf4010e05
    b26c:	17000002 	.word	0x17000002
    b270:	00004584 	.word	0x00004584
    b274:	0113050c 	.word	0x0113050c
    b278:	0000069e 	.word	0x0000069e
    b27c:	00449415 	.word	0x00449415
    b280:	01140500 	.word	0x01140500
    b284:	0000069e 	.word	0x0000069e
    b288:	15002302 	.word	0x15002302
    b28c:	000043c0 	.word	0x000043c0
    b290:	25011505 	.word	0x25011505
    b294:	02000000 	.word	0x02000000
    b298:	6f150423 	.word	0x6f150423
    b29c:	05000044 	.word	0x05000044
    b2a0:	06a40116 	.word	0x06a40116
    b2a4:	23020000 	.word	0x23020000
    b2a8:	04100008 	.word	0x04100008
    b2ac:	00000663 	.word	0x00000663
    b2b0:	06570410 	.word	0x06570410
    b2b4:	79170000 	.word	0x79170000
    b2b8:	0e000042 	.word	0x0e000042
    b2bc:	e5012e05 	.word	0xe5012e05
    b2c0:	15000006 	.word	0x15000006
    b2c4:	000044da 	.word	0x000044da
    b2c8:	e5012f05 	.word	0xe5012f05
    b2cc:	02000006 	.word	0x02000006
    b2d0:	fc150023 	.word	0xfc150023
    b2d4:	05000043 	.word	0x05000043
    b2d8:	06e50130 	.word	0x06e50130
    b2dc:	23020000 	.word	0x23020000
    b2e0:	45241506 	.word	0x45241506
    b2e4:	31050000 	.word	0x31050000
    b2e8:	00004801 	.word	0x00004801
    b2ec:	0c230200 	.word	0x0c230200
    b2f0:	00480800 	.word	0x00480800
    b2f4:	06f50000 	.word	0x06f50000
    b2f8:	b5090000 	.word	0xb5090000
    b2fc:	02000000 	.word	0x02000000
    b300:	05d01800 	.word	0x05d01800
    b304:	0815025f 	.word	0x0815025f
    b308:	68150000 	.word	0x68150000
    b30c:	05000045 	.word	0x05000045
    b310:	002c0260 	.word	0x002c0260
    b314:	23020000 	.word	0x23020000
    b318:	450e1500 	.word	0x450e1500
    b31c:	61050000 	.word	0x61050000
    b320:	0005b402 	.word	0x0005b402
    b324:	04230200 	.word	0x04230200
    b328:	0043dc15 	.word	0x0043dc15
    b32c:	02620500 	.word	0x02620500
    b330:	00000815 	.word	0x00000815
    b334:	15082302 	.word	0x15082302
    b338:	000045c0 	.word	0x000045c0
    b33c:	7c026305 	.word	0x7c026305
    b340:	02000001 	.word	0x02000001
    b344:	2e152423 	.word	0x2e152423
    b348:	05000044 	.word	0x05000044
    b34c:	00250264 	.word	0x00250264
    b350:	23020000 	.word	0x23020000
    b354:	448f1548 	.word	0x448f1548
    b358:	65050000 	.word	0x65050000
    b35c:	00005602 	.word	0x00005602
    b360:	50230200 	.word	0x50230200
    b364:	0045cf15 	.word	0x0045cf15
    b368:	02660500 	.word	0x02660500
    b36c:	000006aa 	.word	0x000006aa
    b370:	15582302 	.word	0x15582302
    b374:	0000449a 	.word	0x0000449a
    b378:	dd026705 	.word	0xdd026705
    b37c:	02000000 	.word	0x02000000
    b380:	d4156823 	.word	0xd4156823
    b384:	05000045 	.word	0x05000045
    b388:	00dd0268 	.word	0x00dd0268
    b38c:	23020000 	.word	0x23020000
    b390:	42c41570 	.word	0x42c41570
    b394:	69050000 	.word	0x69050000
    b398:	0000dd02 	.word	0x0000dd02
    b39c:	78230200 	.word	0x78230200
    b3a0:	00459315 	.word	0x00459315
    b3a4:	026a0500 	.word	0x026a0500
    b3a8:	00000825 	.word	0x00000825
    b3ac:	01802303 	.word	0x01802303
    b3b0:	0043d015 	.word	0x0043d015
    b3b4:	026b0500 	.word	0x026b0500
    b3b8:	00000835 	.word	0x00000835
    b3bc:	01882303 	.word	0x01882303
    b3c0:	00453115 	.word	0x00453115
    b3c4:	026c0500 	.word	0x026c0500
    b3c8:	00000025 	.word	0x00000025
    b3cc:	01a02303 	.word	0x01a02303
    b3d0:	00435415 	.word	0x00435415
    b3d4:	026d0500 	.word	0x026d0500
    b3d8:	000000dd 	.word	0x000000dd
    b3dc:	01a42303 	.word	0x01a42303
    b3e0:	0042b515 	.word	0x0042b515
    b3e4:	026e0500 	.word	0x026e0500
    b3e8:	000000dd 	.word	0x000000dd
    b3ec:	01ac2303 	.word	0x01ac2303
    b3f0:	00434315 	.word	0x00434315
    b3f4:	026f0500 	.word	0x026f0500
    b3f8:	000000dd 	.word	0x000000dd
    b3fc:	01b42303 	.word	0x01b42303
    b400:	00428c15 	.word	0x00428c15
    b404:	02700500 	.word	0x02700500
    b408:	000000dd 	.word	0x000000dd
    b40c:	01bc2303 	.word	0x01bc2303
    b410:	00429b15 	.word	0x00429b15
    b414:	02710500 	.word	0x02710500
    b418:	000000dd 	.word	0x000000dd
    b41c:	01c42303 	.word	0x01c42303
    b420:	05ba0800 	.word	0x05ba0800
    b424:	08250000 	.word	0x08250000
    b428:	b5090000 	.word	0xb5090000
    b42c:	19000000 	.word	0x19000000
    b430:	05ba0800 	.word	0x05ba0800
    b434:	08350000 	.word	0x08350000
    b438:	b5090000 	.word	0xb5090000
    b43c:	07000000 	.word	0x07000000
    b440:	05ba0800 	.word	0x05ba0800
    b444:	08450000 	.word	0x08450000
    b448:	b5090000 	.word	0xb5090000
    b44c:	17000000 	.word	0x17000000
    b450:	05f01800 	.word	0x05f01800
    b454:	086d0277 	.word	0x086d0277
    b458:	13150000 	.word	0x13150000
    b45c:	05000044 	.word	0x05000044
    b460:	086d0279 	.word	0x086d0279
    b464:	23020000 	.word	0x23020000
    b468:	458a1500 	.word	0x458a1500
    b46c:	7a050000 	.word	0x7a050000
    b470:	00087d02 	.word	0x00087d02
    b474:	78230200 	.word	0x78230200
    b478:	02ee0800 	.word	0x02ee0800
    b47c:	087d0000 	.word	0x087d0000
    b480:	b5090000 	.word	0xb5090000
    b484:	1d000000 	.word	0x1d000000
    b488:	002c0800 	.word	0x002c0800
    b48c:	088d0000 	.word	0x088d0000
    b490:	b5090000 	.word	0xb5090000
    b494:	1d000000 	.word	0x1d000000
    b498:	05f01900 	.word	0x05f01900
    b49c:	08af025d 	.word	0x08af025d
    b4a0:	d31a0000 	.word	0xd31a0000
    b4a4:	05000044 	.word	0x05000044
    b4a8:	06f50272 	.word	0x06f50272
    b4ac:	ad1a0000 	.word	0xad1a0000
    b4b0:	05000045 	.word	0x05000045
    b4b4:	0845027b 	.word	0x0845027b
    b4b8:	08000000 	.word	0x08000000
    b4bc:	000005ba 	.word	0x000005ba
    b4c0:	000008bf 	.word	0x000008bf
    b4c4:	0000b509 	.word	0x0000b509
    b4c8:	1b001800 	.word	0x1b001800
    b4cc:	0008cb01 	.word	0x0008cb01
    b4d0:	04511400 	.word	0x04511400
    b4d4:	10000000 	.word	0x10000000
    b4d8:	0008bf04 	.word	0x0008bf04
    b4dc:	66041000 	.word	0x66041000
    b4e0:	1b000001 	.word	0x1b000001
    b4e4:	0008e301 	.word	0x0008e301
    b4e8:	00251400 	.word	0x00251400
    b4ec:	10000000 	.word	0x10000000
    b4f0:	0008e904 	.word	0x0008e904
    b4f4:	d7041000 	.word	0xd7041000
    b4f8:	08000008 	.word	0x08000008
    b4fc:	00000657 	.word	0x00000657
    b500:	000008ff 	.word	0x000008ff
    b504:	0000b509 	.word	0x0000b509
    b508:	1c000200 	.word	0x1c000200
    b50c:	00004219 	.word	0x00004219
    b510:	1e060601 	.word	0x1e060601
    b514:	1d000009 	.word	0x1d000009
    b518:	00004228 	.word	0x00004228
    b51c:	420d1d00 	.word	0x420d1d00
    b520:	1d010000 	.word	0x1d010000
    b524:	00004204 	.word	0x00004204
    b528:	011e0002 	.word	0x011e0002
    b52c:	00004890 	.word	0x00004890
    b530:	25011701 	.word	0x25011701
	...
    b53c:	b2000000 	.word	0xb2000000
    b540:	8b000041 	.word	0x8b000041
    b544:	1f000009 	.word	0x1f000009
    b548:	0000488b 	.word	0x0000488b
    b54c:	00251101 	.word	0x00251101
    b550:	41d10000 	.word	0x41d10000
    b554:	66200000 	.word	0x66200000
    b558:	1101006e 	.word	0x1101006e
    b55c:	000002bf 	.word	0x000002bf
    b560:	000041ef 	.word	0x000041ef
    b564:	67726120 	.word	0x67726120
    b568:	f3110100 	.word	0xf3110100
    b56c:	0d000000 	.word	0x0d000000
    b570:	20000042 	.word	0x20000042
    b574:	11010064 	.word	0x11010064
    b578:	000000f3 	.word	0x000000f3
    b57c:	0000422b 	.word	0x0000422b
    b580:	0042ff21 	.word	0x0042ff21
    b584:	8b180100 	.word	0x8b180100
    b588:	22000009 	.word	0x22000009
    b58c:	19010070 	.word	0x19010070
    b590:	000002a7 	.word	0x000002a7
    b594:	10005c01 	.word	0x10005c01
    b598:	00020704 	.word	0x00020704
    b59c:	453e2300 	.word	0x453e2300
    b5a0:	28050000 	.word	0x28050000
    b5a4:	00099f03 	.word	0x00099f03
    b5a8:	16010100 	.word	0x16010100
    b5ac:	00000451 	.word	0x00000451
    b5b0:	0009ae00 	.word	0x0009ae00
    b5b4:	3e000200 	.word	0x3e000200
    b5b8:	0400002f 	.word	0x0400002f
    b5bc:	0001c601 	.word	0x0001c601
    b5c0:	48b50100 	.word	0x48b50100
    b5c4:	41810000 	.word	0x41810000
	...
    b5d0:	2bf50000 	.word	0x2bf50000
    b5d4:	04020000 	.word	0x04020000
    b5d8:	0041f707 	.word	0x0041f707
    b5dc:	06010200 	.word	0x06010200
    b5e0:	00000469 	.word	0x00000469
    b5e4:	67080102 	.word	0x67080102
    b5e8:	02000004 	.word	0x02000004
    b5ec:	04950502 	.word	0x04950502
    b5f0:	02020000 	.word	0x02020000
    b5f4:	00022207 	.word	0x00022207
    b5f8:	05040300 	.word	0x05040300
    b5fc:	00746e69 	.word	0x00746e69
    b600:	73050802 	.word	0x73050802
    b604:	02000041 	.word	0x02000041
    b608:	41ed0708 	.word	0x41ed0708
    b60c:	47040000 	.word	0x47040000
    b610:	02000044 	.word	0x02000044
    b614:	00004807 	.word	0x00004807
    b618:	05040200 	.word	0x05040200
    b61c:	00004178 	.word	0x00004178
    b620:	0044f604 	.word	0x0044f604
    b624:	682c0300 	.word	0x682c0300
    b628:	05000000 	.word	0x05000000
    b62c:	000043ef 	.word	0x000043ef
    b630:	25016304 	.word	0x25016304
    b634:	06000000 	.word	0x06000000
    b638:	a5470304 	.word	0xa5470304
    b63c:	07000000 	.word	0x07000000
    b640:	000043e9 	.word	0x000043e9
    b644:	007a4803 	.word	0x007a4803
    b648:	a3070000 	.word	0xa3070000
    b64c:	03000043 	.word	0x03000043
    b650:	0000a549 	.word	0x0000a549
    b654:	33080000 	.word	0x33080000
    b658:	b5000000 	.word	0xb5000000
    b65c:	09000000 	.word	0x09000000
    b660:	000000b5 	.word	0x000000b5
    b664:	040a0003 	.word	0x040a0003
    b668:	03080b07 	.word	0x03080b07
    b66c:	0000dd44 	.word	0x0000dd44
    b670:	44e00c00 	.word	0x44e00c00
    b674:	45030000 	.word	0x45030000
    b678:	00000048 	.word	0x00000048
    b67c:	0c002302 	.word	0x0c002302
    b680:	000044e8 	.word	0x000044e8
    b684:	00864a03 	.word	0x00864a03
    b688:	23020000 	.word	0x23020000
    b68c:	7c040004 	.word	0x7c040004
    b690:	03000044 	.word	0x03000044
    b694:	0000b84b 	.word	0x0000b84b
    b698:	43750400 	.word	0x43750400
    b69c:	4f030000 	.word	0x4f030000
    b6a0:	0000005d 	.word	0x0000005d
    b6a4:	2904040d 	.word	0x2904040d
    b6a8:	05000045 	.word	0x05000045
    b6ac:	00010015 	.word	0x00010015
    b6b0:	07040200 	.word	0x07040200
    b6b4:	000041f2 	.word	0x000041f2
    b6b8:	0043860e 	.word	0x0043860e
    b6bc:	2d051800 	.word	0x2d051800
    b6c0:	00000166 	.word	0x00000166
    b6c4:	0044940c 	.word	0x0044940c
    b6c8:	662e0500 	.word	0x662e0500
    b6cc:	02000001 	.word	0x02000001
    b6d0:	5f0f0023 	.word	0x5f0f0023
    b6d4:	2f05006b 	.word	0x2f05006b
    b6d8:	00000048 	.word	0x00000048
    b6dc:	0c042302 	.word	0x0c042302
    b6e0:	000044cb 	.word	0x000044cb
    b6e4:	00482f05 	.word	0x00482f05
    b6e8:	23020000 	.word	0x23020000
    b6ec:	436f0c08 	.word	0x436f0c08
    b6f0:	2f050000 	.word	0x2f050000
    b6f4:	00000048 	.word	0x00000048
    b6f8:	0c0c2302 	.word	0x0c0c2302
    b6fc:	00004575 	.word	0x00004575
    b700:	00482f05 	.word	0x00482f05
    b704:	23020000 	.word	0x23020000
    b708:	785f0f10 	.word	0x785f0f10
    b70c:	6c300500 	.word	0x6c300500
    b710:	02000001 	.word	0x02000001
    b714:	10001423 	.word	0x10001423
    b718:	00010704 	.word	0x00010704
    b71c:	00f50800 	.word	0x00f50800
    b720:	017c0000 	.word	0x017c0000
    b724:	b5090000 	.word	0xb5090000
    b728:	00000000 	.word	0x00000000
    b72c:	439e0e00 	.word	0x439e0e00
    b730:	05240000 	.word	0x05240000
    b734:	00020735 	.word	0x00020735
    b738:	42d20c00 	.word	0x42d20c00
    b73c:	36050000 	.word	0x36050000
    b740:	00000048 	.word	0x00000048
    b744:	0c002302 	.word	0x0c002302
    b748:	00004505 	.word	0x00004505
    b74c:	00483705 	.word	0x00483705
    b750:	23020000 	.word	0x23020000
    b754:	42e70c04 	.word	0x42e70c04
    b758:	38050000 	.word	0x38050000
    b75c:	00000048 	.word	0x00000048
    b760:	0c082302 	.word	0x0c082302
    b764:	000045e7 	.word	0x000045e7
    b768:	00483905 	.word	0x00483905
    b76c:	23020000 	.word	0x23020000
    b770:	441a0c0c 	.word	0x441a0c0c
    b774:	3a050000 	.word	0x3a050000
    b778:	00000048 	.word	0x00000048
    b77c:	0c102302 	.word	0x0c102302
    b780:	00004409 	.word	0x00004409
    b784:	00483b05 	.word	0x00483b05
    b788:	23020000 	.word	0x23020000
    b78c:	457a0c14 	.word	0x457a0c14
    b790:	3c050000 	.word	0x3c050000
    b794:	00000048 	.word	0x00000048
    b798:	0c182302 	.word	0x0c182302
    b79c:	0000445e 	.word	0x0000445e
    b7a0:	00483d05 	.word	0x00483d05
    b7a4:	23020000 	.word	0x23020000
    b7a8:	45b50c1c 	.word	0x45b50c1c
    b7ac:	3e050000 	.word	0x3e050000
    b7b0:	00000048 	.word	0x00000048
    b7b4:	00202302 	.word	0x00202302
    b7b8:	0042f611 	.word	0x0042f611
    b7bc:	05010800 	.word	0x05010800
    b7c0:	00025047 	.word	0x00025047
    b7c4:	43620c00 	.word	0x43620c00
    b7c8:	48050000 	.word	0x48050000
    b7cc:	00000250 	.word	0x00000250
    b7d0:	0c002302 	.word	0x0c002302
    b7d4:	00004234 	.word	0x00004234
    b7d8:	02504905 	.word	0x02504905
    b7dc:	23030000 	.word	0x23030000
    b7e0:	1b0c0180 	.word	0x1b0c0180
    b7e4:	05000045 	.word	0x05000045
    b7e8:	0000f54b 	.word	0x0000f54b
    b7ec:	80230300 	.word	0x80230300
    b7f0:	431b0c02 	.word	0x431b0c02
    b7f4:	4e050000 	.word	0x4e050000
    b7f8:	000000f5 	.word	0x000000f5
    b7fc:	02842303 	.word	0x02842303
    b800:	00f30800 	.word	0x00f30800
    b804:	02600000 	.word	0x02600000
    b808:	b5090000 	.word	0xb5090000
    b80c:	1f000000 	.word	0x1f000000
    b810:	422c1100 	.word	0x422c1100
    b814:	01900000 	.word	0x01900000
    b818:	02a75905 	.word	0x02a75905
    b81c:	940c0000 	.word	0x940c0000
    b820:	05000044 	.word	0x05000044
    b824:	0002a75a 	.word	0x0002a75a
    b828:	00230200 	.word	0x00230200
    b82c:	0044ac0c 	.word	0x0044ac0c
    b830:	485b0500 	.word	0x485b0500
    b834:	02000000 	.word	0x02000000
    b838:	6a0c0423 	.word	0x6a0c0423
    b83c:	05000043 	.word	0x05000043
    b840:	0002ad5d 	.word	0x0002ad5d
    b844:	08230200 	.word	0x08230200
    b848:	0042f60c 	.word	0x0042f60c
    b84c:	075e0500 	.word	0x075e0500
    b850:	03000002 	.word	0x03000002
    b854:	00018823 	.word	0x00018823
    b858:	02600410 	.word	0x02600410
    b85c:	bf080000 	.word	0xbf080000
    b860:	bd000002 	.word	0xbd000002
    b864:	09000002 	.word	0x09000002
    b868:	000000b5 	.word	0x000000b5
    b86c:	0112001f 	.word	0x0112001f
    b870:	02bd0410 	.word	0x02bd0410
    b874:	680e0000 	.word	0x680e0000
    b878:	08000044 	.word	0x08000044
    b87c:	02ee6905 	.word	0x02ee6905
    b880:	e10c0000 	.word	0xe10c0000
    b884:	05000042 	.word	0x05000042
    b888:	0002ee6a 	.word	0x0002ee6a
    b88c:	00230200 	.word	0x00230200
    b890:	0042730c 	.word	0x0042730c
    b894:	486b0500 	.word	0x486b0500
    b898:	02000000 	.word	0x02000000
    b89c:	10000423 	.word	0x10000423
    b8a0:	00003304 	.word	0x00003304
    b8a4:	44870e00 	.word	0x44870e00
    b8a8:	055c0000 	.word	0x055c0000
    b8ac:	000432a9 	.word	0x000432a9
    b8b0:	705f0f00 	.word	0x705f0f00
    b8b4:	eeaa0500 	.word	0xeeaa0500
    b8b8:	02000002 	.word	0x02000002
    b8bc:	5f0f0023 	.word	0x5f0f0023
    b8c0:	ab050072 	.word	0xab050072
    b8c4:	00000048 	.word	0x00000048
    b8c8:	0f042302 	.word	0x0f042302
    b8cc:	0500775f 	.word	0x0500775f
    b8d0:	000048ac 	.word	0x000048ac
    b8d4:	08230200 	.word	0x08230200
    b8d8:	0043140c 	.word	0x0043140c
    b8dc:	3aad0500 	.word	0x3aad0500
    b8e0:	02000000 	.word	0x02000000
    b8e4:	ba0c0c23 	.word	0xba0c0c23
    b8e8:	05000043 	.word	0x05000043
    b8ec:	00003aae 	.word	0x00003aae
    b8f0:	0e230200 	.word	0x0e230200
    b8f4:	66625f0f 	.word	0x66625f0f
    b8f8:	c5af0500 	.word	0xc5af0500
    b8fc:	02000002 	.word	0x02000002
    b900:	ac0c1023 	.word	0xac0c1023
    b904:	05000042 	.word	0x05000042
    b908:	000048b0 	.word	0x000048b0
    b90c:	18230200 	.word	0x18230200
    b910:	0043040c 	.word	0x0043040c
    b914:	f3b70500 	.word	0xf3b70500
    b918:	02000000 	.word	0x02000000
    b91c:	8e0c1c23 	.word	0x8e0c1c23
    b920:	05000043 	.word	0x05000043
    b924:	0005c1b9 	.word	0x0005c1b9
    b928:	20230200 	.word	0x20230200
    b92c:	0044020c 	.word	0x0044020c
    b930:	f1bb0500 	.word	0xf1bb0500
    b934:	02000005 	.word	0x02000005
    b938:	f00c2423 	.word	0xf00c2423
    b93c:	05000044 	.word	0x05000044
    b940:	000616bd 	.word	0x000616bd
    b944:	28230200 	.word	0x28230200
    b948:	0028290c 	.word	0x0028290c
    b94c:	31be0500 	.word	0x31be0500
    b950:	02000006 	.word	0x02000006
    b954:	5f0f2c23 	.word	0x5f0f2c23
    b958:	05006275 	.word	0x05006275
    b95c:	0002c5c1 	.word	0x0002c5c1
    b960:	30230200 	.word	0x30230200
    b964:	70755f0f 	.word	0x70755f0f
    b968:	eec20500 	.word	0xeec20500
    b96c:	02000002 	.word	0x02000002
    b970:	5f0f3823 	.word	0x5f0f3823
    b974:	05007275 	.word	0x05007275
    b978:	000048c3 	.word	0x000048c3
    b97c:	3c230200 	.word	0x3c230200
    b980:	0042db0c 	.word	0x0042db0c
    b984:	37c60500 	.word	0x37c60500
    b988:	02000006 	.word	0x02000006
    b98c:	a70c4023 	.word	0xa70c4023
    b990:	05000045 	.word	0x05000045
    b994:	000647c7 	.word	0x000647c7
    b998:	43230200 	.word	0x43230200
    b99c:	626c5f0f 	.word	0x626c5f0f
    b9a0:	c5ca0500 	.word	0xc5ca0500
    b9a4:	02000002 	.word	0x02000002
    b9a8:	2a0c4423 	.word	0x2a0c4423
    b9ac:	05000043 	.word	0x05000043
    b9b0:	000048cd 	.word	0x000048cd
    b9b4:	4c230200 	.word	0x4c230200
    b9b8:	00433b0c 	.word	0x00433b0c
    b9bc:	48ce0500 	.word	0x48ce0500
    b9c0:	02000000 	.word	0x02000000
    b9c4:	f70c5023 	.word	0xf70c5023
    b9c8:	05000045 	.word	0x05000045
    b9cc:	000451d1 	.word	0x000451d1
    b9d0:	54230200 	.word	0x54230200
    b9d4:	0043f60c 	.word	0x0043f60c
    b9d8:	e8d50500 	.word	0xe8d50500
    b9dc:	02000000 	.word	0x02000000
    b9e0:	13005823 	.word	0x13005823
    b9e4:	00004801 	.word	0x00004801
    b9e8:	00045100 	.word	0x00045100
    b9ec:	04511400 	.word	0x04511400
    b9f0:	f3140000 	.word	0xf3140000
    b9f4:	14000000 	.word	0x14000000
    b9f8:	000005b4 	.word	0x000005b4
    b9fc:	00004814 	.word	0x00004814
    ba00:	04100000 	.word	0x04100000
    ba04:	00000457 	.word	0x00000457
    ba08:	0044d311 	.word	0x0044d311
    ba0c:	05040000 	.word	0x05040000
    ba10:	0005b425 	.word	0x0005b425
    ba14:	44fe1500 	.word	0x44fe1500
    ba18:	41050000 	.word	0x41050000
    ba1c:	00004802 	.word	0x00004802
    ba20:	00230200 	.word	0x00230200
    ba24:	00432315 	.word	0x00432315
    ba28:	02460500 	.word	0x02460500
    ba2c:	000006a4 	.word	0x000006a4
    ba30:	15042302 	.word	0x15042302
    ba34:	000043aa 	.word	0x000043aa
    ba38:	a4024605 	.word	0xa4024605
    ba3c:	02000006 	.word	0x02000006
    ba40:	7e150823 	.word	0x7e150823
    ba44:	05000043 	.word	0x05000043
    ba48:	06a40246 	.word	0x06a40246
    ba4c:	23020000 	.word	0x23020000
    ba50:	44a7150c 	.word	0x44a7150c
    ba54:	48050000 	.word	0x48050000
    ba58:	00004802 	.word	0x00004802
    ba5c:	10230200 	.word	0x10230200
    ba60:	00428115 	.word	0x00428115
    ba64:	02490500 	.word	0x02490500
    ba68:	000008af 	.word	0x000008af
    ba6c:	15142302 	.word	0x15142302
    ba70:	00004551 	.word	0x00004551
    ba74:	48024b05 	.word	0x48024b05
    ba78:	02000000 	.word	0x02000000
    ba7c:	b1153023 	.word	0xb1153023
    ba80:	05000044 	.word	0x05000044
    ba84:	05e6024c 	.word	0x05e6024c
    ba88:	23020000 	.word	0x23020000
    ba8c:	44231534 	.word	0x44231534
    ba90:	4e050000 	.word	0x4e050000
    ba94:	00004802 	.word	0x00004802
    ba98:	38230200 	.word	0x38230200
    ba9c:	0044c115 	.word	0x0044c115
    baa0:	02500500 	.word	0x02500500
    baa4:	000008cb 	.word	0x000008cb
    baa8:	153c2302 	.word	0x153c2302
    baac:	00001dba 	.word	0x00001dba
    bab0:	66025305 	.word	0x66025305
    bab4:	02000001 	.word	0x02000001
    bab8:	94154023 	.word	0x94154023
    babc:	05000043 	.word	0x05000043
    bac0:	00480254 	.word	0x00480254
    bac4:	23020000 	.word	0x23020000
    bac8:	45e21544 	.word	0x45e21544
    bacc:	55050000 	.word	0x55050000
    bad0:	00016602 	.word	0x00016602
    bad4:	48230200 	.word	0x48230200
    bad8:	00443d15 	.word	0x00443d15
    badc:	02560500 	.word	0x02560500
    bae0:	000008d1 	.word	0x000008d1
    bae4:	154c2302 	.word	0x154c2302
    bae8:	000043b2 	.word	0x000043b2
    baec:	48025905 	.word	0x48025905
    baf0:	02000000 	.word	0x02000000
    baf4:	33155023 	.word	0x33155023
    baf8:	05000043 	.word	0x05000043
    bafc:	05b4025a 	.word	0x05b4025a
    bb00:	23020000 	.word	0x23020000
    bb04:	44591554 	.word	0x44591554
    bb08:	7c050000 	.word	0x7c050000
    bb0c:	00088d02 	.word	0x00088d02
    bb10:	58230200 	.word	0x58230200
    bb14:	00422c15 	.word	0x00422c15
    bb18:	027f0500 	.word	0x027f0500
    bb1c:	000002a7 	.word	0x000002a7
    bb20:	02c82303 	.word	0x02c82303
    bb24:	0043c715 	.word	0x0043c715
    bb28:	02800500 	.word	0x02800500
    bb2c:	00000260 	.word	0x00000260
    bb30:	02cc2303 	.word	0x02cc2303
    bb34:	00459d15 	.word	0x00459d15
    bb38:	02830500 	.word	0x02830500
    bb3c:	000008e3 	.word	0x000008e3
    bb40:	05dc2303 	.word	0x05dc2303
    bb44:	00430c15 	.word	0x00430c15
    bb48:	02880500 	.word	0x02880500
    bb4c:	00000663 	.word	0x00000663
    bb50:	05e02303 	.word	0x05e02303
    bb54:	0042f115 	.word	0x0042f115
    bb58:	02890500 	.word	0x02890500
    bb5c:	000008ef 	.word	0x000008ef
    bb60:	05ec2303 	.word	0x05ec2303
    bb64:	ba041000 	.word	0xba041000
    bb68:	02000005 	.word	0x02000005
    bb6c:	04700801 	.word	0x04700801
    bb70:	04100000 	.word	0x04100000
    bb74:	00000432 	.word	0x00000432
    bb78:	00480113 	.word	0x00480113
    bb7c:	05e60000 	.word	0x05e60000
    bb80:	51140000 	.word	0x51140000
    bb84:	14000004 	.word	0x14000004
    bb88:	000000f3 	.word	0x000000f3
    bb8c:	0005e614 	.word	0x0005e614
    bb90:	00481400 	.word	0x00481400
    bb94:	10000000 	.word	0x10000000
    bb98:	0005ec04 	.word	0x0005ec04
    bb9c:	05ba1600 	.word	0x05ba1600
    bba0:	04100000 	.word	0x04100000
    bba4:	000005c7 	.word	0x000005c7
    bba8:	006f0113 	.word	0x006f0113
    bbac:	06160000 	.word	0x06160000
    bbb0:	51140000 	.word	0x51140000
    bbb4:	14000004 	.word	0x14000004
    bbb8:	000000f3 	.word	0x000000f3
    bbbc:	00006f14 	.word	0x00006f14
    bbc0:	00481400 	.word	0x00481400
    bbc4:	10000000 	.word	0x10000000
    bbc8:	0005f704 	.word	0x0005f704
    bbcc:	48011300 	.word	0x48011300
    bbd0:	31000000 	.word	0x31000000
    bbd4:	14000006 	.word	0x14000006
    bbd8:	00000451 	.word	0x00000451
    bbdc:	0000f314 	.word	0x0000f314
    bbe0:	04100000 	.word	0x04100000
    bbe4:	0000061c 	.word	0x0000061c
    bbe8:	00003308 	.word	0x00003308
    bbec:	00064700 	.word	0x00064700
    bbf0:	00b50900 	.word	0x00b50900
    bbf4:	00020000 	.word	0x00020000
    bbf8:	00003308 	.word	0x00003308
    bbfc:	00065700 	.word	0x00065700
    bc00:	00b50900 	.word	0x00b50900
    bc04:	00000000 	.word	0x00000000
    bc08:	00447505 	.word	0x00447505
    bc0c:	010e0500 	.word	0x010e0500
    bc10:	000002f4 	.word	0x000002f4
    bc14:	00458417 	.word	0x00458417
    bc18:	13050c00 	.word	0x13050c00
    bc1c:	00069e01 	.word	0x00069e01
    bc20:	44941500 	.word	0x44941500
    bc24:	14050000 	.word	0x14050000
    bc28:	00069e01 	.word	0x00069e01
    bc2c:	00230200 	.word	0x00230200
    bc30:	0043c015 	.word	0x0043c015
    bc34:	01150500 	.word	0x01150500
    bc38:	00000048 	.word	0x00000048
    bc3c:	15042302 	.word	0x15042302
    bc40:	0000446f 	.word	0x0000446f
    bc44:	a4011605 	.word	0xa4011605
    bc48:	02000006 	.word	0x02000006
    bc4c:	10000823 	.word	0x10000823
    bc50:	00066304 	.word	0x00066304
    bc54:	57041000 	.word	0x57041000
    bc58:	17000006 	.word	0x17000006
    bc5c:	00004279 	.word	0x00004279
    bc60:	012e050e 	.word	0x012e050e
    bc64:	000006e5 	.word	0x000006e5
    bc68:	0044da15 	.word	0x0044da15
    bc6c:	012f0500 	.word	0x012f0500
    bc70:	000006e5 	.word	0x000006e5
    bc74:	15002302 	.word	0x15002302
    bc78:	000043fc 	.word	0x000043fc
    bc7c:	e5013005 	.word	0xe5013005
    bc80:	02000006 	.word	0x02000006
    bc84:	24150623 	.word	0x24150623
    bc88:	05000045 	.word	0x05000045
    bc8c:	00410131 	.word	0x00410131
    bc90:	23020000 	.word	0x23020000
    bc94:	4108000c 	.word	0x4108000c
    bc98:	f5000000 	.word	0xf5000000
    bc9c:	09000006 	.word	0x09000006
    bca0:	000000b5 	.word	0x000000b5
    bca4:	d0180002 	.word	0xd0180002
    bca8:	15025f05 	.word	0x15025f05
    bcac:	15000008 	.word	0x15000008
    bcb0:	00004568 	.word	0x00004568
    bcb4:	25026005 	.word	0x25026005
    bcb8:	02000000 	.word	0x02000000
    bcbc:	0e150023 	.word	0x0e150023
    bcc0:	05000045 	.word	0x05000045
    bcc4:	05b40261 	.word	0x05b40261
    bcc8:	23020000 	.word	0x23020000
    bccc:	43dc1504 	.word	0x43dc1504
    bcd0:	62050000 	.word	0x62050000
    bcd4:	00081502 	.word	0x00081502
    bcd8:	08230200 	.word	0x08230200
    bcdc:	0045c015 	.word	0x0045c015
    bce0:	02630500 	.word	0x02630500
    bce4:	0000017c 	.word	0x0000017c
    bce8:	15242302 	.word	0x15242302
    bcec:	0000442e 	.word	0x0000442e
    bcf0:	48026405 	.word	0x48026405
    bcf4:	02000000 	.word	0x02000000
    bcf8:	8f154823 	.word	0x8f154823
    bcfc:	05000044 	.word	0x05000044
    bd00:	00560265 	.word	0x00560265
    bd04:	23020000 	.word	0x23020000
    bd08:	45cf1550 	.word	0x45cf1550
    bd0c:	66050000 	.word	0x66050000
    bd10:	0006aa02 	.word	0x0006aa02
    bd14:	58230200 	.word	0x58230200
    bd18:	00449a15 	.word	0x00449a15
    bd1c:	02670500 	.word	0x02670500
    bd20:	000000dd 	.word	0x000000dd
    bd24:	15682302 	.word	0x15682302
    bd28:	000045d4 	.word	0x000045d4
    bd2c:	dd026805 	.word	0xdd026805
    bd30:	02000000 	.word	0x02000000
    bd34:	c4157023 	.word	0xc4157023
    bd38:	05000042 	.word	0x05000042
    bd3c:	00dd0269 	.word	0x00dd0269
    bd40:	23020000 	.word	0x23020000
    bd44:	45931578 	.word	0x45931578
    bd48:	6a050000 	.word	0x6a050000
    bd4c:	00082502 	.word	0x00082502
    bd50:	80230300 	.word	0x80230300
    bd54:	43d01501 	.word	0x43d01501
    bd58:	6b050000 	.word	0x6b050000
    bd5c:	00083502 	.word	0x00083502
    bd60:	88230300 	.word	0x88230300
    bd64:	45311501 	.word	0x45311501
    bd68:	6c050000 	.word	0x6c050000
    bd6c:	00004802 	.word	0x00004802
    bd70:	a0230300 	.word	0xa0230300
    bd74:	43541501 	.word	0x43541501
    bd78:	6d050000 	.word	0x6d050000
    bd7c:	0000dd02 	.word	0x0000dd02
    bd80:	a4230300 	.word	0xa4230300
    bd84:	42b51501 	.word	0x42b51501
    bd88:	6e050000 	.word	0x6e050000
    bd8c:	0000dd02 	.word	0x0000dd02
    bd90:	ac230300 	.word	0xac230300
    bd94:	43431501 	.word	0x43431501
    bd98:	6f050000 	.word	0x6f050000
    bd9c:	0000dd02 	.word	0x0000dd02
    bda0:	b4230300 	.word	0xb4230300
    bda4:	428c1501 	.word	0x428c1501
    bda8:	70050000 	.word	0x70050000
    bdac:	0000dd02 	.word	0x0000dd02
    bdb0:	bc230300 	.word	0xbc230300
    bdb4:	429b1501 	.word	0x429b1501
    bdb8:	71050000 	.word	0x71050000
    bdbc:	0000dd02 	.word	0x0000dd02
    bdc0:	c4230300 	.word	0xc4230300
    bdc4:	ba080001 	.word	0xba080001
    bdc8:	25000005 	.word	0x25000005
    bdcc:	09000008 	.word	0x09000008
    bdd0:	000000b5 	.word	0x000000b5
    bdd4:	ba080019 	.word	0xba080019
    bdd8:	35000005 	.word	0x35000005
    bddc:	09000008 	.word	0x09000008
    bde0:	000000b5 	.word	0x000000b5
    bde4:	ba080007 	.word	0xba080007
    bde8:	45000005 	.word	0x45000005
    bdec:	09000008 	.word	0x09000008
    bdf0:	000000b5 	.word	0x000000b5
    bdf4:	f0180017 	.word	0xf0180017
    bdf8:	6d027705 	.word	0x6d027705
    bdfc:	15000008 	.word	0x15000008
    be00:	00004413 	.word	0x00004413
    be04:	6d027905 	.word	0x6d027905
    be08:	02000008 	.word	0x02000008
    be0c:	8a150023 	.word	0x8a150023
    be10:	05000045 	.word	0x05000045
    be14:	087d027a 	.word	0x087d027a
    be18:	23020000 	.word	0x23020000
    be1c:	ee080078 	.word	0xee080078
    be20:	7d000002 	.word	0x7d000002
    be24:	09000008 	.word	0x09000008
    be28:	000000b5 	.word	0x000000b5
    be2c:	2508001d 	.word	0x2508001d
    be30:	8d000000 	.word	0x8d000000
    be34:	09000008 	.word	0x09000008
    be38:	000000b5 	.word	0x000000b5
    be3c:	f019001d 	.word	0xf019001d
    be40:	af025d05 	.word	0xaf025d05
    be44:	1a000008 	.word	0x1a000008
    be48:	000044d3 	.word	0x000044d3
    be4c:	f5027205 	.word	0xf5027205
    be50:	1a000006 	.word	0x1a000006
    be54:	000045ad 	.word	0x000045ad
    be58:	45027b05 	.word	0x45027b05
    be5c:	00000008 	.word	0x00000008
    be60:	0005ba08 	.word	0x0005ba08
    be64:	0008bf00 	.word	0x0008bf00
    be68:	00b50900 	.word	0x00b50900
    be6c:	00180000 	.word	0x00180000
    be70:	08cb011b 	.word	0x08cb011b
    be74:	51140000 	.word	0x51140000
    be78:	00000004 	.word	0x00000004
    be7c:	08bf0410 	.word	0x08bf0410
    be80:	04100000 	.word	0x04100000
    be84:	00000166 	.word	0x00000166
    be88:	08e3011b 	.word	0x08e3011b
    be8c:	48140000 	.word	0x48140000
    be90:	00000000 	.word	0x00000000
    be94:	08e90410 	.word	0x08e90410
    be98:	04100000 	.word	0x04100000
    be9c:	000008d7 	.word	0x000008d7
    bea0:	00065708 	.word	0x00065708
    bea4:	0008ff00 	.word	0x0008ff00
    bea8:	00b50900 	.word	0x00b50900
    beac:	00020000 	.word	0x00020000
    beb0:	48a4011c 	.word	0x48a4011c
    beb4:	12010000 	.word	0x12010000
    beb8:	00000001 	.word	0x00000001
    bebc:	00000000 	.word	0x00000000
    bec0:	00424900 	.word	0x00424900
    bec4:	00099200 	.word	0x00099200
    bec8:	45631d00 	.word	0x45631d00
    becc:	10010000 	.word	0x10010000
    bed0:	00000048 	.word	0x00000048
    bed4:	00004274 	.word	0x00004274
    bed8:	0100641e 	.word	0x0100641e
    bedc:	0000f310 	.word	0x0000f310
    bee0:	0042c300 	.word	0x0042c300
    bee4:	00701f00 	.word	0x00701f00
    bee8:	02a71301 	.word	0x02a71301
    beec:	56010000 	.word	0x56010000
    bef0:	0048f120 	.word	0x0048f120
    bef4:	92140100 	.word	0x92140100
    bef8:	20000009 	.word	0x20000009
    befc:	000042ff 	.word	0x000042ff
    bf00:	09981501 	.word	0x09981501
    bf04:	6e1f0000 	.word	0x6e1f0000
    bf08:	48160100 	.word	0x48160100
    bf0c:	01000000 	.word	0x01000000
    bf10:	00692155 	.word	0x00692155
    bf14:	00481701 	.word	0x00481701
    bf18:	66220000 	.word	0x66220000
    bf1c:	1801006e 	.word	0x1801006e
    bf20:	000002bf 	.word	0x000002bf
    bf24:	000042e1 	.word	0x000042e1
    bf28:	0048f723 	.word	0x0048f723
    bf2c:	24490100 	.word	0x24490100
    bf30:	000001f0 	.word	0x000001f0
    bf34:	646e691f 	.word	0x646e691f
    bf38:	48270100 	.word	0x48270100
    bf3c:	01000000 	.word	0x01000000
    bf40:	10000058 	.word	0x10000058
    bf44:	0002a704 	.word	0x0002a704
    bf48:	07041000 	.word	0x07041000
    bf4c:	25000002 	.word	0x25000002
    bf50:	0000453e 	.word	0x0000453e
    bf54:	ac032805 	.word	0xac032805
    bf58:	01000009 	.word	0x01000009
    bf5c:	04511601 	.word	0x04511601
    bf60:	49000000 	.word	0x49000000
    bf64:	02000000 	.word	0x02000000
    bf68:	00310e00 	.word	0x00310e00
    bf6c:	14010400 	.word	0x14010400
    bf70:	1000002d 	.word	0x1000002d
    bf74:	63000002 	.word	0x63000002
    bf78:	2e6e7472 	.word	0x2e6e7472
    bf7c:	006d7361 	.word	0x006d7361
    bf80:	775c3a63 	.word	0x775c3a63
    bf84:	72616e69 	.word	0x72616e69
    bf88:	625c736d 	.word	0x625c736d
    bf8c:	646c6975 	.word	0x646c6975
    bf90:	6363675c 	.word	0x6363675c
    bf94:	6975622d 	.word	0x6975622d
    bf98:	675c646c 	.word	0x675c646c
    bf9c:	47006363 	.word	0x47006363
    bfa0:	4120554e 	.word	0x4120554e
    bfa4:	2e322053 	.word	0x2e322053
    bfa8:	352e3831 	.word	0x352e3831
    bfac:	80010030 	.word	0x80010030

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	10001101 	andne	r1, r0, r1, lsl #2
       4:	03065506 	movweq	r5, #25862	; 0x6506
       8:	25081b08 	strcs	r1, [r8, #-2824]
       c:	00051308 	andeq	r1, r5, r8, lsl #6
      10:	11010000 	tstne	r1, r0
      14:	11061000 	tstne	r6, r0
      18:	03011201 	movweq	r1, #4609	; 0x1201
      1c:	25081b08 	strcs	r1, [r8, #-2824]
      20:	00051308 	andeq	r1, r5, r8, lsl #6
      24:	11010000 	tstne	r1, r0
      28:	130e2501 	movwne	r2, #58625	; 0xe501
      2c:	1b0e030b 	blne	380c60 <__Stack_Size+0x380860>
      30:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
      34:	00061001 	andeq	r1, r6, r1
      38:	00240200 	eoreq	r0, r4, r0, lsl #4
      3c:	0b3e0b0b 	bleq	f82c70 <__Stack_Size+0xf82870>
      40:	00000e03 	andeq	r0, r0, r3, lsl #28
      44:	03001603 	movweq	r1, #1539	; 0x603
      48:	3b0b3a08 	blcc	2ce870 <__Stack_Size+0x2ce470>
      4c:	0013490b 	andseq	r4, r3, fp, lsl #18
      50:	00160400 	andseq	r0, r6, r0, lsl #8
      54:	0b3a0e03 	bleq	e83868 <__Stack_Size+0xe83468>
      58:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      5c:	24050000 	strcs	r0, [r5]
      60:	3e0b0b00 	fmacdcc	d0, d11, d0
      64:	0600000b 	streq	r0, [r0], -fp
      68:	0e030104 	adfeqs	f0, f3, f4
      6c:	0b3a0b0b 	bleq	e82ca0 <__Stack_Size+0xe828a0>
      70:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      74:	28070000 	stmdacs	r7, {}
      78:	1c0e0300 	stcne	3, cr0, [lr], {0}
      7c:	0800000d 	stmdaeq	r0, {r0, r2, r3}
      80:	08030028 	stmdaeq	r3, {r3, r5}
      84:	00000d1c 	andeq	r0, r0, ip, lsl sp
      88:	0b010409 	bleq	410b4 <__Stack_Size+0x40cb4>
      8c:	3b0b3a0b 	blcc	2ce8c0 <__Stack_Size+0x2ce4c0>
      90:	0013010b 	andseq	r0, r3, fp, lsl #2
      94:	01040a00 	tsteq	r4, r0, lsl #20
      98:	0b3a0b0b 	bleq	e82ccc <__Stack_Size+0xe828cc>
      9c:	1301053b 	movwne	r0, #5435	; 0x153b
      a0:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
      a4:	030c3f01 	movweq	r3, #52993	; 0xcf01
      a8:	3b0b3a0e 	blcc	2ce8e8 <__Stack_Size+0x2ce4e8>
      ac:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
      b0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
      b4:	01064001 	tsteq	r6, r1
      b8:	0c000013 	stceq	0, cr0, [r0], {19}
      bc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
      c0:	0b3b0b3a 	bleq	ec2db0 <__Stack_Size+0xec29b0>
      c4:	06021349 	streq	r1, [r2], -r9, asr #6
      c8:	340d0000 	strcc	r0, [sp]
      cc:	3a0e0300 	bcc	380cd4 <__Stack_Size+0x3808d4>
      d0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      d4:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
      d8:	0111010b 	tsteq	r1, fp, lsl #2
      dc:	00000112 	andeq	r0, r0, r2, lsl r1
      e0:	0300340f 	movweq	r3, #1039	; 0x40f
      e4:	3b0b3a08 	blcc	2ce90c <__Stack_Size+0x2ce50c>
      e8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
      ec:	1000000a 	andne	r0, r0, sl
      f0:	0b0b0024 	bleq	2c0188 <__Stack_Size+0x2bfd88>
      f4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
      f8:	01110000 	tsteq	r1, r0
      fc:	01134901 	tsteq	r3, r1, lsl #18
     100:	12000013 	andne	r0, r0, #19	; 0x13
     104:	13490021 	movtne	r0, #36897	; 0x9021
     108:	00000b2f 	andeq	r0, r0, pc, lsr #22
/* set up for an interpolation from pose to nextpose over TIME
 milliseconds by setting servo speeds. */
void BioloidControllerEx_interpolateSetup(int time) {
	int i;
	int frames = (time/frameLength) + 1;
	nextframe_ = getMillis() + frameLength;
     10c:	0b000f13 	bleq	3d60 <__Stack_Size+0x3960>
	PrintString("BioloidEX BioloidControllerEx_interpolateSetup nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// set speed each servo...
	for (i = 0; i < poseSize; i++) {
     110:	0013490b 	andseq	r4, r3, fp, lsl #18
/* set up for an interpolation from pose to nextpose over TIME
 milliseconds by setting servo speeds. */
void BioloidControllerEx_interpolateSetup(int time) {
	int i;
	int frames = (time/frameLength) + 1;
	nextframe_ = getMillis() + frameLength;
     114:	00351400 	eorseq	r1, r5, r0, lsl #8
     118:	00001349 	andeq	r1, r0, r9, asr #6
	PrintString("BioloidEX BioloidControllerEx_interpolateSetup nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// set speed each servo...
	for (i = 0; i < poseSize; i++) {
     11c:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
     120:	00052f13 	andeq	r2, r5, r3, lsl pc
     124:	00341600 	eorseq	r1, r4, r0, lsl #12
		if (nextpose_[i] > pose_[i]) {
     128:	0b3a0e03 	bleq	e8393c <__Stack_Size+0xe8353c>
     12c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
			speed_[i] = (nextpose_[i] - pose_[i]) / frames + 1;
     130:	00000b1c 	andeq	r0, r0, ip, lsl fp
		} else {
			speed_[i] = (pose_[i] - nextpose_[i]) / frames + 1;
     134:	03003417 	movweq	r3, #1047	; 0x417
     138:	3b0b3a0e 	blcc	2ce978 <__Stack_Size+0x2ce578>
     13c:	3f13490b 	svccc	0x0013490b
	PrintString("BioloidEX BioloidControllerEx_interpolateSetup nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// set speed each servo...
	for (i = 0; i < poseSize; i++) {
     140:	000c3c0c 	andeq	r3, ip, ip, lsl #24
     144:	11010000 	tstne	r1, r0
		PrintString(" - ");
		TxD_Dec_U16(speed_[i]);
		PrintString("\n");
#endif
	}
	interpolating = 1;
     148:	130e2501 	movwne	r2, #58625	; 0xe501
     14c:	1b0e030b 	blne	380d80 <__Stack_Size+0x380980>
}
     150:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     154:	00061001 	andeq	r1, r6, r1
     158:	00240200 	eoreq	r0, r4, r0, lsl #4
     15c:	0b3e0b0b 	bleq	f82d90 <__Stack_Size+0xf82990>
     160:	00000e03 	andeq	r0, r0, r3, lsl #28
     164:	03001603 	movweq	r1, #1539	; 0x603
     168:	3b0b3a08 	blcc	2ce990 <__Stack_Size+0x2ce590>
	PrintString("\n");
#endif
}

/* new-style setup */
void Bioloid_Setup(int servo_cnt) {
     16c:	0013490b 	andseq	r4, r3, fp, lsl #18
     170:	00240400 	eoreq	r0, r4, r0, lsl #8
	/**id_ = (unsigned char *) malloc(servo_cnt * sizeof(unsigned char));
	 pose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
     174:	0b3e0b0b 	bleq	f82da8 <__Stack_Size+0xf829a8>
     178:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
	for (i = 0; i < poseSize; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
     17c:	030c3f00 	movweq	r3, #52992	; 0xcf00
     180:	3b0b3a0e 	blcc	2ce9c0 <__Stack_Size+0x2ce5c0>
		nextpose_[i] = 512;
     184:	110c270b 	tstne	ip, fp, lsl #14
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
	for (i = 0; i < poseSize; i++) {
		id_[i] = i + 1;
     188:	40011201 	andmi	r1, r1, r1, lsl #4
		pose_[i] = 512;
     18c:	0600000a 	streq	r0, [r0], -sl
		nextpose_[i] = 512;
     190:	0c3f002e 	ldceq	0, cr0, [pc], #-184
	 pose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
	for (i = 0; i < poseSize; i++) {
     194:	0b3a0e03 	bleq	e839a8 <__Stack_Size+0xe835a8>
     198:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
	}
	interpolating = 0;
     19c:	01120111 	tsteq	r2, r1, lsl r1
     1a0:	00000a40 	andeq	r0, r0, r0, asr #20
	nextframe_ = getMillis();
     1a4:	3f002e07 	svccc	0x00002e07
     1a8:	3a0e030c 	bcc	380de0 <__Stack_Size+0x3809e0>
#ifdef MILLIS
	PrintString("BioloidEX nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
}
     1ac:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     1b0:	1201110c 	andne	r1, r1, #3	; 0x3
     1b4:	00064001 	andeq	r4, r6, r1
     1b8:	002e0800 	eoreq	r0, lr, r0, lsl #16
     1bc:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     1c0:	0b3b0b3a 	bleq	ec2eb0 <__Stack_Size+0xec2ab0>
     1c4:	01110c27 	tsteq	r1, r7, lsr #24
transition_t * sequence;                    // sequence we are running
int transitions;                    // how many transitions we have left to load


//  initializes serial1 transmit at baud, 8-N-1
void BioloidControllerEx() {
     1c8:	06400112 	undefined
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
     1cc:	34090000 	strcc	r0, [r9]
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
     1d0:	3a0e0300 	bcc	380dd8 <__Stack_Size+0x3809d8>
transition_t * sequence;                    // sequence we are running
int transitions;                    // how many transitions we have left to load


//  initializes serial1 transmit at baud, 8-N-1
void BioloidControllerEx() {
     1d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
     1d8:	0a000013 	beq	22c <_Minimum_Stack_Size+0x12c>
	 pose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
     1dc:	13490035 	movtne	r0, #36917	; 0x9035
     1e0:	010b0000 	tsteq	fp, r0
		pose_[i] = 512;
		nextpose_[i] = 512;
     1e4:	01134901 	tsteq	r3, r1, lsl #18
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
     1e8:	0c000013 	stceq	0, cr0, [r0], {19}
		nextpose_[i] = 512;
     1ec:	13490021 	movtne	r0, #36897	; 0x9021
	/**id_ = (unsigned char *) malloc(AX12_MAX_SERVOS * sizeof(unsigned char));
	 pose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
     1f0:	0000052f 	andeq	r0, r0, pc, lsr #10
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
	}
	frameLength = BIOLOID_FRAME_LENGTH;
     1f4:	0300340d 	movweq	r3, #1037	; 0x40d
     1f8:	3b0b3a0e 	blcc	2cea38 <__Stack_Size+0x2ce638>
	interpolating = 0;
     1fc:	1c13490b 	ldcne	9, cr4, [r3], {11}
	nextframe_ = getMillis();
     200:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
     204:	13490021 	movtne	r0, #36897	; 0x9021
#ifdef MILLIS
	PrintString("BioloidEX nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
}
     208:	00000b2f 	andeq	r0, r0, pc, lsr #22
     20c:	01110100 	tsteq	r1, r0, lsl #2
     210:	0b130e25 	bleq	4c3aac <__Stack_Size+0x4c36ac>
     214:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     218:	01120111 	tsteq	r2, r1, lsl r1
     21c:	00000610 	andeq	r0, r0, r0, lsl r6
     220:	0b002402 	bleq	9230 <__Stack_Size+0x8e30>
#endif
		mDelay(25);
	}
}
/* write pose out to servos using sync write. */
void BioloidControllerEx_writePose() {
     224:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     228:	0300000e 	movweq	r0, #14	; 0xe
	int temp;
	dxl_set_txpacket_id (BROADCAST_ID);
     22c:	13490026 	movtne	r0, #36902	; 0x9026
	dxl_set_txpacket_instruction (INST_SYNC_WRITE);
     230:	16040000 	strne	r0, [r4], -r0
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
     234:	3a080300 	bcc	200e3c <__Stack_Size+0x200a3c>
     238:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	dxl_set_txpacket_parameter(1, 2);
     23c:	05000013 	streq	r0, [r0, #-19]
     240:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     244:	0b3b0b3a 	bleq	ec2f34 <__Stack_Size+0xec2b34>
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
     248:	00001349 	andeq	r1, r0, r9, asr #6
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
     24c:	0b010406 	bleq	4126c <__Stack_Size+0x40e6c>
     250:	3b0b3a0b 	blcc	2cea84 <__Stack_Size+0x2ce684>
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
     254:	0013010b 	andseq	r0, r3, fp, lsl #2
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
     258:	00280700 	eoreq	r0, r8, r0, lsl #14
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
     25c:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
     260:	24080000 	strcs	r0, [r8]
     264:	3e0b0b00 	fmacdcc	d0, d11, d0
     268:	0900000b 	stmdbeq	r0, {r0, r1, r3}
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
     26c:	08030028 	stmdaeq	r3, {r3, r5}
     270:	00000d1c 	andeq	r0, r0, ip, lsl sp
     274:	0301130a 	movweq	r1, #4874	; 0x130a
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
     278:	3a0b0b0e 	bcc	2c2eb8 <__Stack_Size+0x2c2ab8>
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
     27c:	010b3b0b 	tsteq	fp, fp, lsl #22
	dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction (INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
     280:	0b000013 	bleq	2d4 <_Minimum_Stack_Size+0x1d4>
     284:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     288:	0b3b0b3a 	bleq	ec2f78 <__Stack_Size+0xec2b78>
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
	}
	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
     28c:	0a381349 	beq	e04fb8 <__Stack_Size+0xe04bb8>
     290:	0d0c0000 	stceq	0, cr0, [ip]
     294:	3a0e0300 	bcc	380e9c <__Stack_Size+0x380a9c>
	dxl_txrx_packet();
     298:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	u16 CommStatus = dxl_get_result();
     29c:	000a3813 	andeq	r3, sl, r3, lsl r8
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
     2a0:	01010d00 	tsteq	r1, r0, lsl #26
		PrintErrorCode();
     2a4:	13011349 	movwne	r1, #4937	; 0x1349
	else
		PrintCommStatus(CommStatus);
     2a8:	210e0000 	tstcs	lr, r0
#endif
}
     2ac:	2f134900 	svccs	0x00134900
     2b0:	0f00000b 	svceq	0x0000000b
     2b4:	0e030104 	adfeqs	f0, f3, f4
     2b8:	0b3a0b0b 	bleq	e82eec <__Stack_Size+0xe82aec>
	}
	interpolating = 1;
}
/* interpolate our pose, this should be called at about 30Hz. */
#define WAIT_SLOP_FACTOR 10
int BioloidControllerEx_interpolateStep(bool fWait) {
     2bc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     2c0:	04100000 	ldreq	r0, [r0]

	if (interpolating == 0)
     2c4:	3a0b0b01 	bcc	2c2ed0 <__Stack_Size+0x2c2ad0>
		return 0;
	int i;
	int complete = poseSize;
     2c8:	01053b0b 	tsteq	r5, fp, lsl #22
	if (!fWait) {
     2cc:	11000013 	tstne	r0, r3, lsl r0
		if (getMillis() < (nextframe_ - WAIT_SLOP_FACTOR)) {
     2d0:	0b0b0024 	bleq	2c0368 <__Stack_Size+0x2bff68>
     2d4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     2d8:	2e120000 	wxorcs	wr0, wr2, wr0
			return (getMillis() - nextframe_); // We still have some time to do something...
     2dc:	030c3f01 	movweq	r3, #52993	; 0xcf01
     2e0:	3b0b3a0e 	blcc	2ceb20 <__Stack_Size+0x2ce720>
     2e4:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
#ifdef MILLIS
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	while (getMillis() < nextframe_);
     2e8:	010b2013 	tsteq	fp, r3, lsl r0
     2ec:	13000013 	movwne	r0, #19	; 0x13
     2f0:	08030005 	stmdaeq	r3, {r0, r2}
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
     2f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     2f8:	00001349 	andeq	r1, r0, r9, asr #6
     2fc:	03000514 	movweq	r0, #1300	; 0x514
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
     300:	3b0b3a0e 	blcc	2ceb40 <__Stack_Size+0x2ce740>
     304:	00134905 	andseq	r4, r3, r5, lsl #18
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     308:	00341500 	eorseq	r1, r4, r0, lsl #10
		int diff = nextpose_[i] - pose_[i];
     30c:	0b3a0803 	bleq	e82320 <__Stack_Size+0xe81f20>
     310:	1349053b 	movtne	r0, #38203	; 0x953b
     314:	0f160000 	svceq	0x00160000
     318:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     31c:	17000013 	smladne	r0, r3, r0, r0
		if (diff == 0) {
     320:	0c3f012e 	ldfeqs	f0, [pc], #-184
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
     324:	0b3a0e03 	bleq	e83b38 <__Stack_Size+0xe83738>
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
     328:	0c270b3b 	stceq	11, cr0, [r7], #-236
		int diff = nextpose_[i] - pose_[i];
		if (diff == 0) {
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
     32c:	13010b20 	movwne	r0, #6944	; 0x1b20
					pose_[i] = nextpose_[i];
     330:	05180000 	ldreq	r0, [r8]
					complete--;
     334:	3a0e0300 	bcc	380f3c <__Stack_Size+0x380b3c>
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
     338:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     33c:	19000013 	stmdbne	r0, {r0, r1, r4}
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
     340:	0c3f002e 	ldceq	0, cr0, [pc], #-184
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
     344:	0b3a0e03 	bleq	e83b58 <__Stack_Size+0xe83758>
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
     348:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     34c:	00000b20 	andeq	r0, r0, r0, lsr #22
     350:	3f002e1a 	svccc	0x00002e1a
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif

	}
	if (complete <= 0)
     354:	3a0e030c 	bcc	380f8c <__Stack_Size+0x380b8c>
		interpolating = 0;
     358:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
	BioloidControllerEx_writePose();
     35c:	000b200c 	andeq	r2, fp, ip
     360:	012e1b00 	teqeq	lr, r0, lsl #22
	return 0;
}
     364:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     368:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     36c:	0b200c27 	bleq	803410 <__Stack_Size+0x803010>
     370:	00001301 	andeq	r1, r0, r1, lsl #6
     374:	31002e1c 	tstcc	r0, ip, lsl lr
     378:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     37c:	000a4001 	andeq	r4, sl, r1
     380:	012e1d00 	teqeq	lr, r0, lsl #26
	for (i = 0; i < poseSize; i++)
		//nextpose_[i] = pgm_read_word_near(addr+1+i) << BIOLOID_SHIFT;
		nextpose_[i] = pgm_read_word_near(addr + 1 + i);
}
/* read in current servo positions to the pose. */
void BioloidControllerEx_readPose() {
     384:	01111331 	tsteq	r1, r1, lsr r3
     388:	0a400112 	beq	10007d8 <__Stack_Size+0x10003d8>
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
		//pose_[i] = dxl_read_word(id_[i],AXM_PRESENT_POSITION_L)<<BIOLOID_SHIFT;
		pose_[i] = dxl_read_word(id_[i], AXM_PRESENT_POSITION_L);
     38c:	00001301 	andeq	r1, r0, r1, lsl #6
     390:	3100051e 	tstcc	r0, lr, lsl r5
     394:	000a0213 	andeq	r0, sl, r3, lsl r2
     398:	002e1f00 	eoreq	r1, lr, r0, lsl #30
     39c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
		PrintChar(id_[i]);
		PrintString(" - ");
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
     3a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!

#ifdef DEBUG_BIOLOIDEX
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
     3a4:	01110c27 	tsteq	r1, r7, lsr #24
     3a8:	0a400112 	beq	10007f8 <__Stack_Size+0x10003f8>
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
	}
}
     3ac:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
     3b0:	030c3f00 	movweq	r3, #52992	; 0xcf00
     3b4:	3b0b3a0e 	blcc	2cebf4 <__Stack_Size+0x2ce7f4>
     3b8:	12011105 	andne	r1, r1, #1073741825	; 0x40000001
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitPosY[GaitCurrentLegNr] = -3 * g_InControlState.LegLiftHeight
				/ (3 + g_InControlState.gaitCur.HalfLiftHeight); // Easier to shift between div factor: /1 (3/3), /2 (3/6) and 3/4
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y
     3bc:	000a4001 	andeq	r4, sl, r1
				/ g_InControlState.gaitCur.LiftDivFactor;
	}

	//Optional Half heigth Rear 5 LiftedPos (5 lifted positions)
	else if (((g_InControlState.gaitCur.NrLiftedPos == 5 && (LegStep == -2)))
     3c0:	012e2100 	teqeq	lr, r0, lsl #2
     3c4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     3c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     3cc:	01110c27 	tsteq	r1, r7, lsr #24
     3d0:	0a400112 	beq	1000820 <__Stack_Size+0x1000420>
     3d4:	00001301 	andeq	r1, r0, r1, lsl #6
     3d8:	03000522 	movweq	r0, #1314	; 0x522
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = -g_InControlState.TravelLength.x / 2;
     3dc:	3b0b3a0e 	blcc	2cec1c <__Stack_Size+0x2ce81c>
     3e0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     3e4:	2300000a 	movwcs	r0, #10	; 0xa
     3e8:	0c3f012e 	ldfeqs	f0, [pc], #-184
     3ec:	0b3a0e03 	bleq	e83c00 <__Stack_Size+0xe83800>
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
     3f0:	0c270b3b 	stceq	11, cr0, [r7], #-236
     3f4:	01111349 	tsteq	r1, r9, asr #6
     3f8:	0a400112 	beq	1000848 <__Stack_Size+0x1000448>
     3fc:	00001301 	andeq	r1, r0, r1, lsl #6
     400:	03000524 	movweq	r0, #1316	; 0x524
		GaitPosZ[GaitCurrentLegNr] = -g_InControlState.TravelLength.z / 2;
     404:	3b0b3a0e 	blcc	2cec44 <__Stack_Size+0x2ce844>
     408:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     40c:	25000006 	strcs	r0, [r0, #-6]
     410:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
		GaitRotY[GaitCurrentLegNr] = -g_InControlState.TravelLength.y / 2;
     414:	0b3b0b3a 	bleq	ec3104 <__Stack_Size+0xec2d04>
     418:	0a021349 	beq	85144 <__Stack_Size+0x84d44>
     41c:	34260000 	strtcc	r0, [r6]
     420:	3a0e0300 	bcc	381028 <__Stack_Size+0x380c28>
	}

	//Optional Half heigth Front 5 LiftedPos (5 lifted positions)
	else if ((g_InControlState.gaitCur.NrLiftedPos == 5)
     424:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     428:	00060213 	andeq	r0, r6, r3, lsl r2
     42c:	00342700 	eorseq	r2, r4, r0, lsl #14
     430:	0b3a0e03 	bleq	e83c44 <__Stack_Size+0xe83844>
     434:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     438:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
			&& (LegStep == 2
					|| LegStep == -(g_InControlState.gaitCur.StepsInGait - 2))
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
     43c:	030c3f00 	movweq	r3, #52992	; 0xcf00
     440:	3b0b3a0e 	blcc	2cec80 <__Stack_Size+0x2ce880>
     444:	110c2705 	tstne	ip, r5, lsl #14
     448:	40011201 	andmi	r1, r1, r1, lsl #4
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
     44c:	29000006 	stmdbcs	r0, {r1, r2}
     450:	1331002e 	teqne	r1, #46	; 0x2e
     454:	01120111 	tsteq	r2, r1, lsl r1
     458:	00000640 	andeq	r0, r0, r0, asr #12
     45c:	3f012e2a 	svccc	0x00012e2a
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
     460:	3a0e030c 	bcc	381098 <__Stack_Size+0x380c98>
     464:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     468:	1201110c 	andne	r1, r1, #3	; 0x3
     46c:	01064001 	tsteq	r6, r1
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y / 2;
     470:	2b000013 	blcs	4c4 <__Stack_Size+0xc4>
     474:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     478:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     47c:	06021349 	streq	r1, [r2], -r9, asr #6
	}
	//_B_
	//Leg front down position //bug here?  From _A_ to _B_ there should only be one gaitstep, not 2!
	//For example, where is the case of LegStep==0+2 executed when NRLiftedPos=3?
	else if ((LegStep == g_InControlState.gaitCur.FrontDownPos
     480:	342c0000 	strtcc	r0, [ip]
     484:	3a0e0300 	bcc	38108c <__Stack_Size+0x380c8c>
     488:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     48c:	00060213 	andeq	r0, r6, r3, lsl r2
     490:	012e2d00 	teqeq	lr, r0, lsl #26
     494:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     498:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     49c:	13490c27 	movtne	r0, #39975	; 0x9c27
			|| LegStep
					== -(g_InControlState.gaitCur.StepsInGait
							- g_InControlState.gaitCur.FrontDownPos))
			&& GaitPosY[GaitCurrentLegNr] < 0) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
     4a0:	01120111 	tsteq	r2, r1, lsl r1
     4a4:	13010640 	movwne	r0, #5696	; 0x1640
     4a8:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
     4ac:	030c3f01 	movweq	r3, #52993	; 0xcf01
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
     4b0:	3b0b3a0e 	blcc	2cecf0 <__Stack_Size+0x2ce8f0>
     4b4:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
     4b8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     4bc:	010a4001 	tsteq	sl, r1
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y / 2;
     4c0:	2f000013 	svccs	0x00000013
     4c4:	08030005 	stmdaeq	r3, {r0, r2}
     4c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!
		GaitPosY[GaitCurrentLegNr] = 0;
     4cc:	06021349 	streq	r1, [r2], -r9, asr #6
     4d0:	34300000 	ldrtcc	r0, [r0]
	}

	//Move body forward
	else {
		GaitPosX[GaitCurrentLegNr] = GaitPosX[GaitCurrentLegNr]
     4d4:	3a0e0300 	bcc	3810dc <__Stack_Size+0x380cdc>
     4d8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     4dc:	000a0213 	andeq	r0, sl, r3, lsl r2
     4e0:	00343100 	eorseq	r3, r4, r0, lsl #2
     4e4:	0b3a0e03 	bleq	e83cf8 <__Stack_Size+0xe838f8>
     4e8:	1349053b 	movtne	r0, #38203	; 0x953b
				- (g_InControlState.TravelLength.x
						/ (short) g_InControlState.gaitCur.TLDivFactor);
		GaitPosY[GaitCurrentLegNr] = 0;
     4ec:	05320000 	ldreq	r0, [r2]!
     4f0:	02133100 	andseq	r3, r3, #0	; 0x0
     4f4:	33000006 	movwcc	r0, #6	; 0x6
		GaitPosZ[GaitCurrentLegNr] = GaitPosZ[GaitCurrentLegNr]
     4f8:	13310034 	teqne	r1, #52	; 0x34
     4fc:	00000602 	andeq	r0, r0, r2, lsl #12
     500:	31011d34 	tstcc	r1, r4, lsr sp
     504:	58065513 	stmdapl	r6, {r0, r1, r4, r8, sl, ip, lr}
				- (g_InControlState.TravelLength.z
						/ (short) g_InControlState.gaitCur.TLDivFactor);
		GaitRotY[GaitCurrentLegNr] = GaitRotY[GaitCurrentLegNr]
     508:	0105590b 	tsteq	r5, fp, lsl #18
     50c:	35000013 	strcc	r0, [r0, #-19]
     510:	13310005 	teqne	r1, #5	; 0x5
     514:	0b360000 	bleq	d8051c <__Stack_Size+0xd8011c>
				- (g_InControlState.TravelLength.y
						/ (short) g_InControlState.gaitCur.TLDivFactor);
	}

}
     518:	00065501 	andeq	r5, r6, r1, lsl #10
     51c:	011d3700 	tsteq	sp, r0, lsl #14
     520:	06551331 	undefined
     524:	05590b58 	ldrbeq	r0, [r9, #-2904]
     528:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
     52c:	030c3f00 	movweq	r3, #52992	; 0xcf00
     530:	3b0b3a0e 	blcc	2ced70 <__Stack_Size+0x2ce970>

}

//--------------------------------------------------------------------
//[GAIT Sequence]
void GaitSeq(void) {
     534:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
	//Check if the Gait is in motion - If not if we are going to start a motion try to align our Gaitstep to start with a good foot
	// for the direction we are about to go...

	if (fWalking || (g_InControlState.ForceGaitStepCnt != 0))
     538:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     53c:	00064001 	andeq	r4, r6, r1
     540:	012e3900 	teqeq	lr, r0, lsl #18
		TravelRequest = true;   // Is walking or was walking...
     544:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     548:	053b0b3a 	ldreq	r0, [fp, #-2874]!
	else {
		TravelRequest = (abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
     54c:	01120111 	tsteq	r2, r1, lsl r1
     550:	13010640 	movwne	r0, #5696	; 0x1640
     554:	343a0000 	ldrtcc	r0, [sl]
     558:	3a080300 	bcc	201160 <__Stack_Size+0x200d60>
     55c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     560:	00060213 	andeq	r0, r6, r3, lsl r2
     564:	00343b00 	eorseq	r3, r4, r0, lsl #22
     568:	0b3a0803 	bleq	e8257c <__Stack_Size+0xe8217c>
     56c:	1349053b 	movtne	r0, #38203	; 0x953b
     570:	00000a02 	andeq	r0, r0, r2, lsl #20
     574:	11010b3c 	tstne	r1, ip, lsr fp
     578:	00011201 	andeq	r1, r1, r1, lsl #4
     57c:	012e3d00 	teqeq	lr, r0, lsl #26
				|| (abs(g_InControlState.TravelLength.y) > cTravelDeadZone);

		if (TravelRequest) {

		} else {    //Clear values under the cTravelDeadZone
			g_InControlState.TravelLength.x = 0;
     580:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
			g_InControlState.TravelLength.z = 0;
     584:	0b3b0b3a 	bleq	ec3274 <__Stack_Size+0xec2e74>
			g_InControlState.TravelLength.y = 0; //Gait NOT in motion, return to home position
		}
	}

	//Calculate Gait sequence
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
     588:	01110c27 	tsteq	r1, r7, lsr #24
     58c:	06400112 	undefined
     590:	00001301 	andeq	r1, r0, r1, lsl #6
		Gait(LegIndex);
     594:	0300343e 	movweq	r3, #1086	; 0x43e
			g_InControlState.TravelLength.y = 0; //Gait NOT in motion, return to home position
		}
	}

	//Calculate Gait sequence
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
     598:	3b0b3a08 	blcc	2cedc0 <__Stack_Size+0x2ce9c0>
     59c:	0013490b 	andseq	r4, r3, fp, lsl #18
     5a0:	002e3f00 	eoreq	r3, lr, r0, lsl #30
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5a4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
     5a8:	0b3b0b3a 	bleq	ec3298 <__Stack_Size+0xec2e98>
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5ac:	01110c27 	tsteq	r1, r7, lsr #24
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
     5b0:	06400112 	undefined
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5b4:	1d400000 	stclne	0, cr0, [r0]
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
		g_InControlState.GaitStep = 1;
     5b8:	55133100 	ldrpl	r3, [r3, #-256]
     5bc:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}

	// If we have a force count decrement it now...
	if (g_InControlState.ForceGaitStepCnt)
     5c0:	41000005 	tstmi	r0, r5
     5c4:	0c3f012e 	ldfeqs	f0, [pc], #-184
		g_InControlState.ForceGaitStepCnt--;
     5c8:	0b3a0e03 	bleq	e83ddc <__Stack_Size+0xe839dc>
}
     5cc:	0c270b3b 	stceq	11, cr0, [r7], #-236
     5d0:	01111349 	tsteq	r1, r9, asr #6
     5d4:	06400112 	undefined
     5d8:	00001301 	andeq	r1, r0, r1, lsl #6
     5dc:	3f002e42 	svccc	0x00002e42
}
//--------------------------------------------------------------------
//[BalanceBody]
void BalanceBody(void) {

	TotalTransZ = TotalTransZ / BalanceDivFactor;
     5e0:	3a0e030c 	bcc	381218 <__Stack_Size+0x380e18>
     5e4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     5e8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     5ec:	00064001 	andeq	r4, r6, r1
     5f0:	010b4300 	tsteq	fp, r0, lsl #6
	TotalTransX = TotalTransX / BalanceDivFactor;
     5f4:	01120111 	tsteq	r2, r1, lsl r1
     5f8:	00001301 	andeq	r1, r0, r1, lsl #6
     5fc:	31001d44 	tstcc	r0, r4, asr #26
	TotalTransY = TotalTransY / BalanceDivFactor;
     600:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     604:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     608:	45000005 	strmi	r0, [r0, #-5]
     60c:	13490035 	movtne	r0, #36917	; 0x9035

	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
		TotalXBal1 += 3600;

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
     610:	21460000 	cmpcs	r6, r0
     614:	2f134900 	svccs	0x00134900
	TotalTransX = TotalTransX / BalanceDivFactor;
	TotalTransY = TotalTransY / BalanceDivFactor;

#ifndef QUADMODE // ??? on PhantomX Hex at no movment YBal1 = 1800, on Quad = 0...  Need to experiment
	if (TotalYBal1 > 0)        //Rotate balance circle by +/- 180 deg
		TotalYBal1 -= 1800;
     618:	47000005 	strmi	r0, [r0, -r5]
     61c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	else
		TotalYBal1 += 1800;
     620:	0b3b0b3a 	bleq	ec3310 <__Stack_Size+0xec2f10>
#endif

	if (TotalZBal1 < -1800) //Compensate for extreme balance positions that causes overflow
     624:	0b1c1349 	bleq	705350 <__Stack_Size+0x704f50>
     628:	34480000 	strbcc	r0, [r8]
     62c:	3a0e0300 	bcc	381234 <__Stack_Size+0x380e34>
		TotalZBal1 += 3600;
     630:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     634:	000a0213 	andeq	r0, sl, r3, lsl r2

	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
     638:	00344900 	eorseq	r4, r4, r0, lsl #18
     63c:	0b3a0e03 	bleq	e83e50 <__Stack_Size+0xe83a50>
		TotalXBal1 += 3600;
     640:	1349053b 	movtne	r0, #38203	; 0x953b
     644:	0a020c3f 	beq	83748 <__Stack_Size+0x83348>

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
     648:	344a0000 	strbcc	r0, [sl]
     64c:	3a0e0300 	bcc	381254 <__Stack_Size+0x380e54>
	TotalXBal1 = -TotalXBal1 / BalanceDivFactor;
     650:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     654:	020c3f13 	andeq	r3, ip, #76	; 0x4c
	TotalZBal1 = TotalZBal1 / BalanceDivFactor;
     658:	4b00000a 	blmi	688 <__Stack_Size+0x288>
	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
		TotalXBal1 += 3600;

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
	TotalXBal1 = -TotalXBal1 / BalanceDivFactor;
     65c:	08030034 	stmdaeq	r3, {r2, r4, r5}
     660:	0b3b0b3a 	bleq	ec3350 <__Stack_Size+0xec2f50>
	TotalZBal1 = TotalZBal1 / BalanceDivFactor;
     664:	0c3f1349 	ldceq	3, cr1, [pc], #-292
     668:	00000a02 	andeq	r0, r0, r2, lsl #20

}
     66c:	0300344c 	movweq	r3, #1100	; 0x44c
     670:	3b0b3a0e 	blcc	2ceeb0 <__Stack_Size+0x2ceab0>
     674:	3f13490b 	svccc	0x0013490b
     678:	000c3c0c 	andeq	r3, ip, ip, lsl #24
     67c:	00344d00 	eorseq	r4, r4, r0, lsl #26
     680:	0b3a0803 	bleq	e82694 <__Stack_Size+0xe82294>
     684:	1349053b 	movtne	r0, #38203	; 0x953b
     688:	0a020c3f 	beq	8378c <__Stack_Size+0x8338c>
//sin4        - Output Sinus of AngleDeg
//cos4          - Output Cosinus of AngleDeg
void GetSinCos(short AngleDeg1) {
	short ABSAngleDeg1;   //Absolute value of the Angle in Degrees, decimals = 1
	//Get the absolute value of AngleDeg
	if (AngleDeg1 < 0)
     68c:	01000000 	tsteq	r0, r0
     690:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
		ABSAngleDeg1 = AngleDeg1 * -1;
     694:	0e030b13 	vmoveq.32	d3[0], r0
     698:	01110e1b 	tsteq	r1, fp, lsl lr
	else
		ABSAngleDeg1 = AngleDeg1;

	//Shift rotation to a full circle of 360 deg -> AngleDeg // 360
	if (AngleDeg1 < 0)    //Negative values
		AngleDeg1 = 3600 - (ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600)));
     69c:	06100112 	undefined
     6a0:	24020000 	strcs	r0, [r2]
     6a4:	3e0b0b00 	fmacdcc	d0, d11, d0
     6a8:	000e030b 	andeq	r0, lr, fp, lsl #6
     6ac:	00160300 	andseq	r0, r6, r0, lsl #6
     6b0:	0b3a0803 	bleq	e826c4 <__Stack_Size+0xe822c4>
     6b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     6b8:	04040000 	streq	r0, [r4]
     6bc:	3a0b0b01 	bcc	2c32c8 <__Stack_Size+0x2c2ec8>
	else
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));

	if (AngleDeg1 >= 0 && AngleDeg1 <= 900)     // 0 to 90 deg
     6c0:	010b3b0b 	tsteq	fp, fp, lsl #22
     6c4:	05000013 	streq	r0, [r0, #-19]
			{
		sin4 = pgm_read_word(&GetSin[AngleDeg1 / 5]); // 5 is the presision (0.5) of the table
     6c8:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     6cc:	00000d1c 	andeq	r0, r0, ip, lsl sp
     6d0:	03001606 	movweq	r1, #1542	; 0x606
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
     6d4:	3b0b3a0e 	blcc	2cef14 <__Stack_Size+0x2ceb14>
     6d8:	0013490b 	andseq	r4, r3, fp, lsl #18
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));

	if (AngleDeg1 >= 0 && AngleDeg1 <= 900)     // 0 to 90 deg
			{
		sin4 = pgm_read_word(&GetSin[AngleDeg1 / 5]); // 5 is the presision (0.5) of the table
     6dc:	01130700 	tsteq	r3, r0, lsl #14
     6e0:	0b3a0b0b 	bleq	e83314 <__Stack_Size+0xe82f14>
     6e4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     6e8:	0d080000 	stceq	0, cr0, [r8]
     6ec:	3a0e0300 	bcc	3812f4 <__Stack_Size+0x380ef4>
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
     6f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6f4:	000a3813 	andeq	r3, sl, r3, lsl r8
     6f8:	000f0900 	andeq	r0, pc, r0, lsl #18
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
     6fc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     700:	240a0000 	strcs	r0, [sl]
     704:	3e0b0b00 	fmacdcc	d0, d11, d0
     708:	0008030b 	andeq	r0, r8, fp, lsl #6
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     70c:	01040b00 	tsteq	r4, r0, lsl #22
     710:	0b3a0b0b 	bleq	e83344 <__Stack_Size+0xe82f44>
     714:	1301053b 	movwne	r0, #5435	; 0x153b
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     718:	240c0000 	strcs	r0, [ip]
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     71c:	3e0b0b00 	fmacdcc	d0, d11, d0
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     720:	0d00000b 	stceq	0, cr0, [r0, #-44]
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     724:	0c3f012e 	ldfeqs	f0, [pc], #-184
     728:	0b3a0e03 	bleq	e83f3c <__Stack_Size+0xe83b3c>
     72c:	0c270b3b 	stceq	11, cr0, [r7], #-236
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     730:	01120111 	tsteq	r2, r1, lsl r1
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     734:	13010a40 	movwne	r0, #6720	; 0x1a40
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     738:	050e0000 	streq	r0, [lr]
     73c:	3a0e0300 	bcc	381344 <__Stack_Size+0x380f44>
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
     740:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     744:	000a0213 	andeq	r0, sl, r3, lsl r2
     748:	00050f00 	andeq	r0, r5, r0, lsl #30
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     74c:	0b3a0803 	bleq	e82760 <__Stack_Size+0xe82360>
     750:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     754:	00000a02 	andeq	r0, r0, r2, lsl #20
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     758:	3f012e10 	svccc	0x00012e10
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     75c:	3a0e030c 	bcc	381394 <__Stack_Size+0x380f94>
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     760:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     764:	1113490c 	tstne	r3, ip, lsl #18
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     768:	40011201 	andmi	r1, r1, r1, lsl #4
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     76c:	0013010a 	andseq	r0, r3, sl, lsl #2
     770:	00051100 	andeq	r1, r5, r0, lsl #2
     774:	0b3a0e03 	bleq	e83f88 <__Stack_Size+0xe83b88>
     778:	13490b3b 	movtne	r0, #39739	; 0x9b3b
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     77c:	00000602 	andeq	r0, r0, r2, lsl #12
     780:	03003412 	movweq	r3, #1042	; 0x412
     784:	3b0b3a08 	blcc	2cefac <__Stack_Size+0x2cebac>
     788:	0013490b 	andseq	r4, r3, fp, lsl #18
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
     78c:	00261300 	eoreq	r1, r6, r0, lsl #6
     790:	00001349 	andeq	r1, r0, r9, asr #6
     794:	03000514 	movweq	r0, #1300	; 0x514
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     798:	3b0b3a08 	blcc	2cefc0 <__Stack_Size+0x2cebc0>
     79c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     7a0:	15000006 	strne	r0, [r0, #-6]
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7a4:	08030034 	stmdaeq	r3, {r2, r4, r5}
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7a8:	0b3b0b3a 	bleq	ec3498 <__Stack_Size+0xec3098>
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7ac:	06021349 	streq	r1, [r2], -r9, asr #6
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7b0:	2e160000 	wxorcs	wr0, wr6, wr0
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7b4:	030c3f01 	movweq	r3, #52993	; 0xcf01
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7b8:	3b0b3a0e 	blcc	2ceff8 <__Stack_Size+0x2cebf8>
     7bc:	110c2705 	tstne	ip, r5, lsl #14
     7c0:	40011201 	andmi	r1, r1, r1, lsl #4
     7c4:	00130106 	andseq	r0, r3, r6, lsl #2
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7c8:	00051700 	andeq	r1, r5, r0, lsl #14
     7cc:	0b3a0803 	bleq	e827e0 <__Stack_Size+0xe823e0>
     7d0:	1349053b 	movtne	r0, #38203	; 0x953b
	//Shift rotation to a full circle of 360 deg -> AngleDeg // 360
	if (AngleDeg1 < 0)    //Negative values
		AngleDeg1 = 3600 - (ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600)));
	else
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));
     7d4:	00000a02 	andeq	r0, r0, r2, lsl #20
     7d8:	03003418 	movweq	r3, #1048	; 0x418
     7dc:	3b0b3a08 	blcc	2cf004 <__Stack_Size+0x2cec04>
     7e0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     7e4:	1900000a 	stmdbne	r0, {r1, r3}
     7e8:	0c3f012e 	ldfeqs	f0, [pc], #-184
     7ec:	0b3a0e03 	bleq	e84000 <__Stack_Size+0xe83c00>
     7f0:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     7f4:	01120111 	tsteq	r2, r1, lsl r1
     7f8:	13010a40 	movwne	r0, #6720	; 0x1a40
	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
	}
}
     7fc:	051a0000 	ldreq	r0, [sl]
     800:	3a0e0300 	bcc	381408 <__Stack_Size+0x381008>
     804:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     808:	000a0213 	andeq	r0, sl, r3, lsl r2
     80c:	012e1b00 	teqeq	lr, r0, lsl #22
//cos4        - Input Cosinus
//AngleRad4     - Output Angle in AngleRad4
long GetArcCos(short cos4) {
	boolean NegativeValue/*:1*/;    //If the the value is Negative
	//Check for negative value
	if (cos4 < 0) {
     810:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     814:	0b3b0b3a 	bleq	ec3504 <__Stack_Size+0xec3104>
     818:	01110c27 	tsteq	r1, r7, lsr #24
		cos4 = -cos4;
     81c:	06400112 	undefined
     820:	00001301 	andeq	r1, r0, r1, lsl #6
		NegativeValue = 1;
	} else
		NegativeValue = 0;

	//Limit cos4 to his maximal value
	cos4 = min(cos4, c4DEC);
     824:	0300341c 	movweq	r3, #1052	; 0x41c
     828:	3b0b3a08 	blcc	2cf050 <__Stack_Size+0x2cec50>
     82c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000

	if ((cos4 >= 0) && (cos4 < 9000)) {
     830:	1d00000a 	stcne	0, cr0, [r0, #-40]
     834:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     838:	0b3b0b3a 	bleq	ec3528 <__Stack_Size+0xec3128>
		AngleRad4 = (byte) pgm_read_byte(&GetACos[cos4 / 79]);
     83c:	0a021349 	beq	85568 <__Stack_Size+0x85168>
     840:	2e1e0000 	wxorcs	wr0, wr14, wr0
     844:	030c3f01 	movweq	r3, #52993	; 0xcf01
		AngleRad4 = ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255) ;
     848:	3b0b3a0e 	blcc	2cf088 <__Stack_Size+0x2cec88>
     84c:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
	} else if ((cos4 >= 9000) && (cos4 < 9900)) {
     850:	01064001 	tsteq	r6, r1
     854:	1f000013 	svcne	0x00000013
     858:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     85c:	0b3b0b3a 	bleq	ec354c <__Stack_Size+0xec314c>
		AngleRad4 = (byte) pgm_read_byte(&GetACos[(cos4 - 9000) / 8 + 114]);
     860:	06021349 	streq	r1, [r2], -r9, asr #6
     864:	34200000 	strtcc	r0, [r0]
     868:	3a0e0300 	bcc	381470 <__Stack_Size+0x381070>
     86c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     870:	21000013 	tstcs	r0, r3, lsl r0
     874:	0c3f012e 	ldfeqs	f0, [pc], #-184
		AngleRad4 = (long) ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255)
     878:	0b3a0e03 	bleq	e8408c <__Stack_Size+0xe83c8c>
	} else if ((cos4 >= 9900) && (cos4 <= 10000)) {
     87c:	0c270b3b 	stceq	11, cr0, [r7], #-236
     880:	01111349 	tsteq	r1, r9, asr #6
     884:	06400112 	undefined
		AngleRad4 = (byte) pgm_read_byte(&GetACos[(cos4 - 9900) / 2 + 227]);
     888:	00001301 	andeq	r1, r0, r1, lsl #6
     88c:	11010b22 	tstne	r1, r2, lsr #22
     890:	00011201 	andeq	r1, r1, r1, lsl #4
		AngleRad4 = (long) ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255)
     894:	00352300 	eorseq	r2, r5, r0, lsl #6
     898:	00001349 	andeq	r1, r0, r9, asr #6
     89c:	49010124 	stmdbmi	r1, {r2, r5, r8}
     8a0:	00130113 	andseq	r0, r3, r3, lsl r1
     8a4:	00212500 	eoreq	r2, r1, r0, lsl #10
     8a8:	052f1349 	streq	r1, [pc, #-841]!	; 567 <__Stack_Size+0x167>
     8ac:	34260000 	strtcc	r0, [r6]
	}

	//Add negative sign
	if (NegativeValue)
		AngleRad4 = 31416 - AngleRad4;
     8b0:	3a0e0300 	bcc	3814b8 <__Stack_Size+0x3810b8>
     8b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8b8:	000b1c13 	andeq	r1, fp, r3, lsl ip
     8bc:	00212700 	eoreq	r2, r1, r0, lsl #14
     8c0:	0b2f1349 	bleq	bc55ec <__Stack_Size+0xbc51ec>

	return AngleRad4;
}
     8c4:	34280000 	strtcc	r0, [r8]
     8c8:	3a0e0300 	bcc	3814d0 <__Stack_Size+0x3810d0>
     8cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8d0:	020c3f13 	andeq	r3, ip, #76	; 0x4c
     8d4:	2900000a 	stmdbcs	r0, {r1, r3}
     8d8:	08030034 	stmdaeq	r3, {r2, r4, r5}

unsigned long isqrt32(unsigned long n) //
{
     8dc:	0b3b0b3a 	bleq	ec35cc <__Stack_Size+0xec31cc>
     8e0:	0c3f1349 	ldceq	3, cr1, [pc], #-292

	root = 0;
	remainder = n;
	place = 0x40000000; // OR place = 0x4000; OR place = 0x40; - respectively

	while (place > remainder)
     8e4:	00000a02 	andeq	r0, r0, r2, lsl #20
     8e8:	01110100 	tsteq	r1, r0, lsl #2
     8ec:	0b130e25 	bleq	4c4188 <__Stack_Size+0x4c3d88>
		place = place >> 2;
	while (place) {
		if (remainder >= root + place) {
     8f0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
			remainder = remainder - root - place;
     8f4:	01120111 	tsteq	r2, r1, lsl r1
     8f8:	00000610 	andeq	r0, r0, r0, lsl r6
			root = root + (place << 1);
     8fc:	03001602 	movweq	r1, #1538	; 0x602

	while (place > remainder)
		place = place >> 2;
	while (place) {
		if (remainder >= root + place) {
			remainder = remainder - root - place;
     900:	3b0b3a08 	blcc	2cf128 <__Stack_Size+0x2ced28>
			root = root + (place << 1);
		}
		root = root >> 1;
		place = place >> 2;
     904:	0013490b 	andseq	r4, r3, fp, lsl #18
	remainder = n;
	place = 0x40000000; // OR place = 0x4000; OR place = 0x40; - respectively

	while (place > remainder)
		place = place >> 2;
	while (place) {
     908:	00240300 	eoreq	r0, r4, r0, lsl #6
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
	XYhyp2 = isqrt32(
     90c:	0b3e0b0b 	bleq	f83540 <__Stack_Size+0xf83140>
//(GETATAN2) Simplyfied ArcTan2 function based on fixed point ArcCos
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
     910:	00000e03 	andeq	r0, r0, r3, lsl #28
	XYhyp2 = isqrt32(
     914:	03001604 	movweq	r1, #1540	; 0x604
     918:	3b0b3a0e 	blcc	2cf158 <__Stack_Size+0x2ced58>
//(GETATAN2) Simplyfied ArcTan2 function based on fixed point ArcCos
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
     91c:	0013490b 	andseq	r4, r3, fp, lsl #18
	XYhyp2 = isqrt32(
     920:	00240500 	eoreq	r0, r4, r0, lsl #10
     924:	0b3e0b0b 	bleq	f83558 <__Stack_Size+0xf83158>
     928:	04060000 	streq	r0, [r6]
			((long) AtanX * AtanX * c4DEC) + ((long) AtanY * AtanY * c4DEC));
	GetArcCos(((long) AtanX * (long) c6DEC) / (long) XYhyp2);
     92c:	3a0b0b01 	bcc	2c3538 <__Stack_Size+0x2c3138>
     930:	010b3b0b 	tsteq	fp, fp, lsl #22
     934:	07000013 	smladeq	r0, r3, r0, r0
     938:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     93c:	00000d1c 	andeq	r0, r0, ip, lsl sp
     940:	3f002e08 	svccc	0x00002e08
     944:	3a0e030c 	bcc	38157c <__Stack_Size+0x38117c>

	if (AtanY < 0) // removed overhead... Atan4 = AngleRad4 * (AtanY/abs(AtanY));
     948:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
		Atan4 = -AngleRad4;
     94c:	1113490c 	tstne	r3, ip, lsl #18
	else
		Atan4 = AngleRad4;
     950:	40011201 	andmi	r1, r1, r1, lsl #4
	XYhyp2 = isqrt32(
			((long) AtanX * AtanX * c4DEC) + ((long) AtanY * AtanY * c4DEC));
	GetArcCos(((long) AtanX * (long) c6DEC) / (long) XYhyp2);

	if (AtanY < 0) // removed overhead... Atan4 = AngleRad4 * (AtanY/abs(AtanY));
		Atan4 = -AngleRad4;
     954:	0900000a 	stmdbeq	r0, {r1, r3}
	else
		Atan4 = AngleRad4;
     958:	0c3f012e 	ldfeqs	f0, [pc], #-184
     95c:	0b3a0e03 	bleq	e84170 <__Stack_Size+0xe83d70>
	return Atan4;
}
     960:	0c270b3b 	stceq	11, cr0, [r7], #-236
     964:	01111349 	tsteq	r1, r9, asr #6
     968:	0a400112 	beq	1000db8 <__Stack_Size+0x10009b8>
     96c:	00001301 	andeq	r1, r0, r1, lsl #6

}

//--------------------------------------------------------------------
//[BalCalcOneLeg]
void BalCalcOneLeg(long PosX, long PosZ, long PosY, byte BalLegNr) {
     970:	0300340a 	movweq	r3, #1034	; 0x40a
	long CPR_Y;            //Final Y value for centerpoint of rotation
	long CPR_Z;            //Final Z value for centerpoint of rotation

	long lAtan;
	//Calculating totals from center of the body to the feet
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BalLegNr]) + PosZ;
     974:	3b0b3a0e 	blcc	2cf1b4 <__Stack_Size+0x2cedb4>
     978:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	CPR_X = (short) pgm_read_word(&cOffsetX[BalLegNr]) + PosX;
     97c:	0b00000a 	bleq	9ac <__Stack_Size+0x5ac>
     980:	0c3f012e 	ldfeqs	f0, [pc], #-184
	CPR_Y = 150 + PosY; // using the value 150 to lower the centerpoint of rotation 'g_InControlState.BodyPos.y +

	TotalTransY += (long) PosY;
     984:	0b3a0e03 	bleq	e84198 <__Stack_Size+0xe83d98>
     988:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     98c:	01120111 	tsteq	r2, r1, lsl r1
	TotalTransZ += (long) CPR_Z;
     990:	13010640 	movwne	r0, #5696	; 0x1640
     994:	050c0000 	streq	r0, [ip]
     998:	3a0e0300 	bcc	3815a0 <__Stack_Size+0x3811a0>
	TotalTransX += (long) CPR_X;
     99c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     9a0:	00060213 	andeq	r0, r6, r3, lsl r2
     9a4:	00340d00 	eorseq	r0, r4, r0, lsl #26
     9a8:	0b3a0e03 	bleq	e841bc <__Stack_Size+0xe83dbc>

	lAtan = GetATan2(CPR_X, CPR_Z);
     9ac:	1349053b 	movtne	r0, #38203	; 0x953b
	TotalYBal1 += (lAtan * 1800) / 31415;
     9b0:	00000a02 	andeq	r0, r0, r2, lsl #20
     9b4:	0300340e 	movweq	r3, #1038	; 0x40e
     9b8:	3b0b3a0e 	blcc	2cf1f8 <__Stack_Size+0x2cedf8>
     9bc:	02134905 	andseq	r4, r3, #81920	; 0x14000
     9c0:	0f000006 	svceq	0x00000006
     9c4:	0c3f012e 	ldfeqs	f0, [pc], #-184
     9c8:	0b3a0e03 	bleq	e841dc <__Stack_Size+0xe83ddc>
     9cc:	0c270b3b 	stceq	11, cr0, [r7], #-236

	lAtan = GetATan2(CPR_X, CPR_Y);
     9d0:	01111349 	tsteq	r1, r9, asr #6
     9d4:	06400112 	undefined
	TotalZBal1 += ((lAtan * 1800) / 31415) - 900; //Rotate balance circle 90 deg
     9d8:	00001301 	andeq	r1, r0, r1, lsl #6
     9dc:	03000510 	movweq	r0, #1296	; 0x510
     9e0:	3b0b3a08 	blcc	2cf208 <__Stack_Size+0x2cee08>
     9e4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     9e8:	11000006 	tstne	r0, r6
     9ec:	0b0b0024 	bleq	2c0a84 <__Stack_Size+0x2c0684>
     9f0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     9f4:	34120000 	ldrcc	r0, [r2]
     9f8:	3a080300 	bcc	201600 <__Stack_Size+0x201200>
     9fc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}

	lAtan = GetATan2(CPR_Z, CPR_Y);
     a00:	000a0213 	andeq	r0, sl, r3, lsl r2
     a04:	000f1300 	andeq	r1, pc, r0, lsl #6
	TotalXBal1 += ((lAtan * 1800) / 31415) - 900; //Rotate balance circle 90 deg
     a08:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     a0c:	26140000 	ldrcs	r0, [r4], -r0
     a10:	00134900 	andseq	r4, r3, r0, lsl #18
     a14:	00341500 	eorseq	r1, r4, r0, lsl #10
     a18:	0b3a0803 	bleq	e82a2c <__Stack_Size+0xe8262c>
     a1c:	1349053b 	movtne	r0, #38203	; 0x953b
     a20:	00000a02 	andeq	r0, r0, r2, lsl #20
     a24:	49010116 	stmdbmi	r1, {r1, r2, r4, r8}

}
     a28:	00130113 	andseq	r0, r3, r3, lsl r1
     a2c:	00211700 	eoreq	r1, r1, r0, lsl #14
     a30:	0b2f1349 	bleq	bc575c <__Stack_Size+0xbc535c>
     a34:	34180000 	ldrcc	r0, [r8]
     a38:	3a080300 	bcc	201640 <__Stack_Size+0x201240>
     a3c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a40:	00060213 	andeq	r0, r6, r3, lsl r2
     a44:	00341900 	eorseq	r1, r4, r0, lsl #18
     a48:	0b3a0803 	bleq	e82a5c <__Stack_Size+0xe8265c>
     a4c:	1349053b 	movtne	r0, #38203	; 0x953b
//SinG                  - Sin buffer for BodyRotZ
//CosG               - Cos buffer for BodyRotZ
//BodyFKPosX         - Output Position X of feet with Rotation
//BodyFKPosY         - Output Position Y of feet with Rotation
//BodyFKPosZ         - Output Position Z of feet with Rotation
void BodyFK(short PosX, short PosZ, short PosY, short RotationY, byte BodyIKLeg) {
     a50:	2e1a0000 	wxorcs	wr0, wr10, wr0
     a54:	030c3f01 	movweq	r3, #52993	; 0xcf01
	short CPR_X;            //Final X value for centerpoint of rotation
	short CPR_Y;            //Final Y value for centerpoint of rotation
	short CPR_Z;            //Final Z value for centerpoint of rotation

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
     a58:	3b0b3a0e 	blcc	2cf298 <__Stack_Size+0x2cee98>
     a5c:	110c270b 	tstne	ip, fp, lsl #14
     a60:	40011201 	andmi	r1, r1, r1, lsl #4
//SinG                  - Sin buffer for BodyRotZ
//CosG               - Cos buffer for BodyRotZ
//BodyFKPosX         - Output Position X of feet with Rotation
//BodyFKPosY         - Output Position Y of feet with Rotation
//BodyFKPosZ         - Output Position Z of feet with Rotation
void BodyFK(short PosX, short PosZ, short PosY, short RotationY, byte BodyIKLeg) {
     a64:	00130106 	andseq	r0, r3, r6, lsl #2
	short CPR_X;            //Final X value for centerpoint of rotation
	short CPR_Y;            //Final Y value for centerpoint of rotation
	short CPR_Z;            //Final Z value for centerpoint of rotation

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
     a68:	00051b00 	andeq	r1, r5, r0, lsl #22
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
     a6c:	0b3a0e03 	bleq	e84280 <__Stack_Size+0xe83e80>
     a70:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     a74:	00000602 	andeq	r0, r0, r2, lsl #12

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     a78:	0300341c 	movweq	r3, #1052	; 0x41c

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BodyIKLeg]) + PosZ
     a7c:	3b0b3a0e 	blcc	2cf2bc <__Stack_Size+0x2ceebc>
     a80:	0013490b 	andseq	r4, r3, fp, lsl #18
	//Successive global rotation matrix:
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
     a84:	00341d00 	eorseq	r1, r4, r0, lsl #26
     a88:	0b3a0803 	bleq	e82a9c <__Stack_Size+0xe8269c>

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BodyIKLeg]) + PosZ
     a8c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
	//Successive global rotation matrix:
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
     a90:	00000602 	andeq	r0, r0, r2, lsl #12
     a94:	0300341e 	movweq	r3, #1054	; 0x41e
	SinG4 = sin4;
     a98:	3b0b3a08 	blcc	2cf2c0 <__Stack_Size+0x2ceec0>
	CosG4 = cos4;
     a9c:	0013490b 	andseq	r4, r3, fp, lsl #18
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
	SinG4 = sin4;
     aa0:	002e1f00 	eoreq	r1, lr, r0, lsl #30
	CosG4 = cos4;
     aa4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
	SinG4 = sin4;
     aa8:	0b3b0b3a 	bleq	ec3798 <__Stack_Size+0xec3398>
	CosG4 = cos4;

	GetSinCos(g_InControlState.BodyRot1.z + TotalZBal1);
     aac:	01110c27 	tsteq	r1, r7, lsr #24
	SinB4 = sin4;
     ab0:	06400112 	undefined
     ab4:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
	CosB4 = cos4;
     ab8:	030c3f00 	movweq	r3, #52992	; 0xcf00

	GetSinCos(g_InControlState.BodyRot1.y + (RotationY * c1DEC) + TotalYBal1);
     abc:	3b0b3a0e 	blcc	2cf2fc <__Stack_Size+0x2ceefc>
     ac0:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     ac4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     ac8:	00064001 	andeq	r4, r6, r1
     acc:	00352100 	eorseq	r2, r5, r0, lsl #2

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     ad0:	00001349 	andeq	r1, r0, r9, asr #6
     ad4:	49002122 	stmdbmi	r0, {r1, r5, r8, sp}
     ad8:	00052f13 	andeq	r2, r5, r3, lsl pc
     adc:	00342300 	eorseq	r2, r4, r0, lsl #6
     ae0:	0b3a0e03 	bleq	e842f4 <__Stack_Size+0xe83ef4>
     ae4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ae8:	00000b1c 	andeq	r0, r0, ip, lsl fp
     aec:	01110100 	tsteq	r1, r0, lsl #2
     af0:	0b130e25 	bleq	4c438c <__Stack_Size+0x4c3f8c>
     af4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     af8:	01120111 	tsteq	r2, r1, lsl r1
     afc:	00000610 	andeq	r0, r0, r0, lsl r6
     b00:	0b002402 	bleq	9b10 <__Stack_Size+0x9710>
     b04:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     b08:	0300000e 	movweq	r0, #14	; 0xe
     b0c:	08030016 	stmdaeq	r3, {r1, r2, r4}
     b10:	0b3b0b3a 	bleq	ec3800 <__Stack_Size+0xec3400>
     b14:	00001349 	andeq	r1, r0, r9, asr #6
     b18:	0b002404 	bleq	9b30 <__Stack_Size+0x9730>
     b1c:	000b3e0b 	andeq	r3, fp, fp, lsl #28
     b20:	01040500 	tsteq	r4, r0, lsl #10
     b24:	0b3a0b0b 	bleq	e83758 <__Stack_Size+0xe83358>
     b28:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     b2c:	28060000 	stmdacs	r6, {}
     b30:	1c0e0300 	stcne	3, cr0, [lr], {0}
     b34:	0700000d 	streq	r0, [r0, -sp]
     b38:	0c3f012e 	ldfeqs	f0, [pc], #-184
     b3c:	0b3a0e03 	bleq	e84350 <__Stack_Size+0xe83f50>
     b40:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     b44:	13010b20 	movwne	r0, #6944	; 0x1b20
     b48:	34080000 	strcc	r0, [r8]
     b4c:	3a080300 	bcc	201754 <__Stack_Size+0x201354>
     b50:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b54:	09000013 	stmdbeq	r0, {r0, r1, r4}
     b58:	0c3f012e 	ldfeqs	f0, [pc], #-184
     b5c:	0b3a0e03 	bleq	e84370 <__Stack_Size+0xe83f70>
     b60:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     b64:	0b201349 	bleq	805890 <__Stack_Size+0x805490>
     b68:	00001301 	andeq	r1, r0, r1, lsl #6

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     b6c:	0300050a 	movweq	r0, #1290	; 0x50a
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     b70:	3b0b3a0e 	blcc	2cf3b0 <__Stack_Size+0x2cefb0>
     b74:	00134905 	andseq	r4, r3, r5, lsl #18
     b78:	00340b00 	eorseq	r0, r4, r0, lsl #22
     b7c:	0b3a0e03 	bleq	e84390 <__Stack_Size+0xe83f90>
     b80:	1349053b 	movtne	r0, #38203	; 0x953b
     b84:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
     b88:	030c3f00 	movweq	r3, #52992	; 0xcf00
     b8c:	3b0b3a0e 	blcc	2cf3cc <__Stack_Size+0x2cefcc>
     b90:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     b94:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     b98:	000a4001 	andeq	r4, sl, r1
     b9c:	012e0d00 	teqeq	lr, r0, lsl #26
     ba0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     ba4:	0b3b0b3a 	bleq	ec3894 <__Stack_Size+0xec3494>
     ba8:	01110c27 	tsteq	r1, r7, lsr #24
     bac:	0a400112 	beq	1000ffc <__Stack_Size+0x1000bfc>
     bb0:	00001301 	andeq	r1, r0, r1, lsl #6
     bb4:	0300050e 	movweq	r0, #1294	; 0x50e
     bb8:	3b0b3a08 	blcc	2cf3e0 <__Stack_Size+0x2cefe0>
     bbc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     bc0:	0f00000a 	svceq	0x0000000a
     bc4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     bc8:	0b3b0b3a 	bleq	ec38b8 <__Stack_Size+0xec34b8>
     bcc:	0a021349 	beq	858f8 <__Stack_Size+0x854f8>
     bd0:	2e100000 	wxorcs	wr0, wr0, wr0
     bd4:	030c3f01 	movweq	r3, #52993	; 0xcf01
     bd8:	3b0b3a0e 	blcc	2cf418 <__Stack_Size+0x2cf018>
     bdc:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     be0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     be4:	010a4001 	tsteq	sl, r1
     be8:	11000013 	tstne	r0, r3, lsl r0
     bec:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     bf0:	0b3b0b3a 	bleq	ec38e0 <__Stack_Size+0xec34e0>
     bf4:	06021349 	streq	r1, [r2], -r9, asr #6
     bf8:	2e120000 	wxorcs	wr0, wr2, wr0
     bfc:	030c3f01 	movweq	r3, #52993	; 0xcf01
     c00:	3b0b3a0e 	blcc	2cf440 <__Stack_Size+0x2cf040>
     c04:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
     c08:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     c0c:	010a4001 	tsteq	sl, r1
     c10:	13000013 	movwne	r0, #19	; 0x13
     c14:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     c18:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     c1c:	06021349 	streq	r1, [r2], -r9, asr #6
     c20:	2e140000 	wxorcs	wr0, wr4, wr0
     c24:	11133101 	tstne	r3, r1, lsl #2
     c28:	40011201 	andmi	r1, r1, r1, lsl #4
     c2c:	0013010a 	andseq	r0, r3, sl, lsl #2
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * CosG4 / c4DEC
					- (long) CPR_Z * c2DEC * SinA4 / c4DEC * SinB4 / c4DEC
							* SinG4 / c4DEC
					- (long) CPR_Y * c2DEC * CosB4 / c4DEC * SinG4 / c4DEC))
			/ c2DEC;
	BodyFKPosY = ((long) CPR_Y * c2DEC
     c30:	00051500 	andeq	r1, r5, r0, lsl #10
	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     c34:	06021331 	undefined
     c38:	05160000 	ldreq	r0, [r6]
     c3c:	02133100 	andseq	r3, r3, #0	; 0x0
     c40:	1700000a 	strne	r0, [r0, -sl]
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * CosG4 / c4DEC
					- (long) CPR_Z * c2DEC * SinA4 / c4DEC * SinB4 / c4DEC
							* SinG4 / c4DEC
					- (long) CPR_Y * c2DEC * CosB4 / c4DEC * SinG4 / c4DEC))
			/ c2DEC;
	BodyFKPosY = ((long) CPR_Y * c2DEC
     c44:	13310034 	teqne	r1, #52	; 0x34
     c48:	34180000 	ldrcc	r0, [r8]
     c4c:	02133100 	andseq	r3, r3, #0	; 0x0
     c50:	19000006 	stmdbne	r0, {r1, r2}
     c54:	0c3f012e 	ldfeqs	f0, [pc], #-184
     c58:	0b3a0e03 	bleq	e8446c <__Stack_Size+0xe8406c>
     c5c:	0c270b3b 	stceq	11, cr0, [r7], #-236
     c60:	01120111 	tsteq	r2, r1, lsl r1
     c64:	13010640 	movwne	r0, #5696	; 0x1640
     c68:	341a0000 	ldrcc	r0, [sl]
     c6c:	3a080300 	bcc	201874 <__Stack_Size+0x201474>
     c70:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c74:	00060213 	andeq	r0, r6, r3, lsl r2
     c78:	00341b00 	eorseq	r1, r4, r0, lsl #22
     c7c:	0b3a0e03 	bleq	e84490 <__Stack_Size+0xe84090>
     c80:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     c84:	341c0000 	ldrcc	r0, [ip]
     c88:	3a0e0300 	bcc	381890 <__Stack_Size+0x381490>
     c8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c90:	00060213 	andeq	r0, r6, r3, lsl r2
     c94:	00341d00 	eorseq	r1, r4, r0, lsl #26
     c98:	0b3a0e03 	bleq	e844ac <__Stack_Size+0xe840ac>
     c9c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ca0:	00000a02 	andeq	r0, r0, r2, lsl #20
     ca4:	31011d1e 	tstcc	r1, lr, lsl sp
     ca8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     cac:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     cb0:	1f00000b 	svcne	0x0000000b
     cb4:	0111010b 	tsteq	r1, fp, lsl #2
     cb8:	00000112 	andeq	r0, r0, r2, lsl r1
     cbc:	3f012e20 	svccc	0x00012e20
     cc0:	3a0e030c 	bcc	3818f8 <__Stack_Size+0x3814f8>
     cc4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     cc8:	1201110c 	andne	r1, r1, #3	; 0x3
     ccc:	01064001 	tsteq	r6, r1
     cd0:	21000013 	tstcs	r0, r3, lsl r0
     cd4:	08030005 	stmdaeq	r3, {r0, r2}
     cd8:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     cdc:	06021349 	streq	r1, [r2], -r9, asr #6
     ce0:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
     ce4:	030c3f01 	movweq	r3, #52993	; 0xcf01
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * SinG4 / c4DEC
					+ (long) CPR_Z * c2DEC * CosG4 / c4DEC * SinA4 / c4DEC
							* SinB4 / c4DEC
					+ (long) CPR_Y * c2DEC * CosB4 / c4DEC * CosG4 / c4DEC))
			/ c2DEC;
}
     ce8:	3b0b3a0e 	blcc	2cf528 <__Stack_Size+0x2cf128>
     cec:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
     cf0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     cf4:	01064001 	tsteq	r6, r1
     cf8:	23000013 	movwcs	r0, #19	; 0x13
     cfc:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     d00:	01120111 	tsteq	r2, r1, lsl r1
     d04:	05590b58 	ldrbeq	r0, [r9, #-2904]
     d08:	05240000 	streq	r0, [r4]!
     d0c:	00133100 	andseq	r3, r3, r0, lsl #2
     d10:	002e2500 	eoreq	r2, lr, r0, lsl #10
     d14:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     d18:	0b3b0b3a 	bleq	ec3a08 <__Stack_Size+0xec3608>
     d1c:	01110c27 	tsteq	r1, r7, lsr #24
//FemurAngle1           - Output Angle of Femur in degrees
//TibiaAngle1           - Output Angle of Tibia in degrees
//CoxaAngle1            - Output Angle of Coxa in degrees
//--------------------------------------------------------------------
void LegIK(short IKFeetPosX, short IKFeetPosY, short IKFeetPosZ,
		byte LegIKLegNr) {
     d20:	06400112 	undefined
     d24:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
     d28:	030c3f01 	movweq	r3, #52993	; 0xcf01
	long Temp1;
	long Temp2;
	long T3;

	//Calculate IKCoxaAngle and IKFeetPosXZ
	GetATan2(IKFeetPosX, IKFeetPosZ);
     d2c:	3b0b3a0e 	blcc	2cf56c <__Stack_Size+0x2cf16c>
	CoxaAngle1[LegIKLegNr] = (((long) Atan4 * 180) / 3141)
     d30:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     d34:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     d38:	01064001 	tsteq	r6, r1
     d3c:	27000013 	smladcs	r0, r3, r0, r0
     d40:	13490035 	movtne	r0, #36917	; 0x9035
     d44:	01280000 	teqeq	r8, r0
     d48:	01134901 	tsteq	r3, r1, lsl #18
     d4c:	29000013 	stmdbcs	r0, {r0, r1, r4}
     d50:	13490021 	movtne	r0, #36897	; 0x9021
     d54:	0000052f 	andeq	r0, r0, pc, lsr #10
	//Length between the Coxa and tars [foot]
	IKFeetPosXZ = XYhyp2 / c2DEC;

	//Using GetAtan2 for solving IKA1 and IKSW
	//IKA14 - Angle between SW line and the ground in radians
	IKA14 = GetATan2(IKFeetPosY - TarsOffsetY,
     d58:	0300342a 	movweq	r3, #1066	; 0x42a
     d5c:	3b0b3a0e 	blcc	2cf59c <__Stack_Size+0x2cf19c>
     d60:	1c13490b 	ldcne	9, cr4, [r3], {11}
     d64:	2b00000b 	blcs	d98 <__Stack_Size+0x998>
     d68:	13490021 	movtne	r0, #36897	; 0x9021
     d6c:	00000b2f 	andeq	r0, r0, pc, lsr #22
     d70:	0300342c 	movweq	r3, #1068	; 0x42c

	//IKSW2 - Length between femur axis and tars
	IKSW2 = XYhyp2;

	//IKA2 - Angle of the line S>W with respect to the femur in radians
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     d74:	3b0b3a0e 	blcc	2cf5b4 <__Stack_Size+0x2cf1b4>
     d78:	3f13490b 	svccc	0x0013490b
     d7c:	000a020c 	andeq	r0, sl, ip, lsl #4
     d80:	11010000 	tstne	r1, r0
					* (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))) * c4DEC
			+ ((long) IKSW2 * IKSW2));
	Temp2 = (long) (2 * (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])) * c2DEC
			* (unsigned long) IKSW2;
	T3 = Temp1 / (Temp2 / c4DEC);
	IKA24 = GetArcCos(T3);
     d84:	130e2501 	movwne	r2, #58625	; 0xe501
     d88:	1b0e030b 	blne	3819bc <__Stack_Size+0x3815bc>
     d8c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     d90:	00061001 	andeq	r1, r6, r1
     d94:	00240200 	eoreq	r0, r4, r0, lsl #4
     d98:	0b3e0b0b 	bleq	f839cc <__Stack_Size+0xf835cc>
     d9c:	00000e03 	andeq	r0, r0, r3, lsl #28
     da0:	03001603 	movweq	r1, #1539	; 0x603
     da4:	3b0b3a08 	blcc	2cf5cc <__Stack_Size+0x2cf1cc>
     da8:	0013490b 	andseq	r4, r3, fp, lsl #18
     dac:	00160400 	andseq	r0, r6, r0, lsl #8
     db0:	0b3a0e03 	bleq	e845c4 <__Stack_Size+0xe841c4>
     db4:	13490b3b 	movtne	r0, #39739	; 0x9b3b

	FemurAngle1[LegIKLegNr] = -(long) (IKA14 + IKA24) * 180
     db8:	24050000 	strcs	r0, [r5]
     dbc:	3e0b0b00 	fmacdcc	d0, d11, d0
     dc0:	0600000b 	streq	r0, [r0], -fp
     dc4:	0c3f002e 	ldceq	0, cr0, [pc], #-184
     dc8:	0b3a0e03 	bleq	e845dc <__Stack_Size+0xe841dc>
     dcc:	0c270b3b 	stceq	11, cr0, [r7], #-236
     dd0:	01111349 	tsteq	r1, r9, asr #6
     dd4:	0a400112 	beq	1001224 <__Stack_Size+0x1000e24>
     dd8:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
			/ 3141+ 900 + CFEMURHORNOFFSET1(LegIKLegNr);  //Normal

	//IKTibiaAngle
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     ddc:	030c3f00 	movweq	r3, #52992	; 0xcf00
	Temp2 = (long) (2 * (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])) * c2DEC
			* (unsigned long) IKSW2;
	T3 = Temp1 / (Temp2 / c4DEC);
	IKA24 = GetArcCos(T3);

	FemurAngle1[LegIKLegNr] = -(long) (IKA14 + IKA24) * 180
     de0:	3b0b3a0e 	blcc	2cf620 <__Stack_Size+0x2cf220>
			/ 3141+ 900 + CFEMURHORNOFFSET1(LegIKLegNr);  //Normal

	//IKTibiaAngle
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     de4:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
     de8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
			+ ((long) (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr])
					* (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))) * c4DEC
			- ((long) IKSW2 * IKSW2));
	Temp2 = 2 * ((long) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])))
			* (long) ((byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]));
	GetArcCos(Temp1 / Temp2);
     dec:	000a4001 	andeq	r4, sl, r1
     df0:	00240800 	eoreq	r0, r4, r0, lsl #16
     df4:	0b3e0b0b 	bleq	f83a28 <__Stack_Size+0xf83628>
     df8:	00000803 	andeq	r0, r0, r3, lsl #16
     dfc:	3f012e09 	svccc	0x00012e09
     e00:	3a0e030c 	bcc	381a38 <__Stack_Size+0x381638>
     e04:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     e08:	1113490c 	tstne	r3, ip, lsl #18

	TibiaAngle1[LegIKLegNr] = -(1450 - (long) AngleRad4 * 180 / 3141
     e0c:	40011201 	andmi	r1, r1, r1, lsl #4
     e10:	00130106 	andseq	r0, r3, r6, lsl #2
     e14:	00340a00 	eorseq	r0, r4, r0, lsl #20
     e18:	0b3a0e03 	bleq	e8462c <__Stack_Size+0xe8422c>
     e1c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e20:	340b0000 	strcc	r0, [fp]
     e24:	3a080300 	bcc	201a2c <__Stack_Size+0x20162c>
     e28:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			+ CTIBIAHORNOFFSET1(LegIKLegNr)); //!!!!!!!!!!!!145 instead of 1800

	//Set the Solution quality
	if (IKSW2
     e2c:	00060213 	andeq	r0, r6, r3, lsl r2
			- ((long) IKSW2 * IKSW2));
	Temp2 = 2 * ((long) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])))
			* (long) ((byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]));
	GetArcCos(Temp1 / Temp2);

	TibiaAngle1[LegIKLegNr] = -(1450 - (long) AngleRad4 * 180 / 3141
     e30:	00050c00 	andeq	r0, r5, r0, lsl #24
			+ CTIBIAHORNOFFSET1(LegIKLegNr)); //!!!!!!!!!!!!145 instead of 1800

	//Set the Solution quality
	if (IKSW2
     e34:	0b3a0e03 	bleq	e84648 <__Stack_Size+0xe84248>
     e38:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e3c:	00000602 	andeq	r0, r0, r2, lsl #12
     e40:	0300340d 	movweq	r3, #1037	; 0x40d
     e44:	3b0b3a0e 	blcc	2cf684 <__Stack_Size+0x2cf284>
			< ((word) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
					+ (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]) - 30)
					* c2DEC))
		IKSolution = 1;
     e48:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	else {
		if (IKSW2
     e4c:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
     e50:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
				< ((word) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
						+ (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))
						* c2DEC))
			IKSolutionWarning = 1;
     e54:	0b3b0b3a 	bleq	ec3b44 <__Stack_Size+0xec3744>
     e58:	06021349 	streq	r1, [r2], -r9, asr #6
		else
			IKSolutionError = 1;
     e5c:	010f0000 	mrseq	r0, CPSR
	}

}
     e60:	01134901 	tsteq	r3, r1, lsl #18
     e64:	10000013 	andne	r0, r0, r3, lsl r0
     e68:	13490021 	movtne	r0, #36897	; 0x9021
     e6c:	00000b2f 	andeq	r0, r0, pc, lsr #22
     e70:	3f002e11 	svccc	0x00002e11
     e74:	3a0e030c 	bcc	381aac <__Stack_Size+0x3816ac>
     e78:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     e7c:	1201110c 	andne	r1, r1, #3	; 0x3
     e80:	00064001 	andeq	r4, r6, r1
     e84:	00351200 	eorseq	r1, r5, r0, lsl #4
     e88:	00001349 	andeq	r1, r0, r9, asr #6
     e8c:	49002113 	stmdbmi	r0, {r0, r1, r4, r8, sp}
     e90:	00052f13 	andeq	r2, r5, r3, lsl pc
     e94:	00341400 	eorseq	r1, r4, r0, lsl #8
     e98:	0b3a0e03 	bleq	e846ac <__Stack_Size+0xe842ac>
     e9c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ea0:	00000b1c 	andeq	r0, r0, ip, lsl fp
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ea4:	03003415 	movweq	r3, #1045	; 0x415
	if (sVal < s) {
     ea8:	3b0b3a0e 	blcc	2cf6e8 <__Stack_Size+0x2cf2e8>
     eac:	3f13490b 	svccc	0x0013490b
		return s;
	}

	s = (short) pgm_read_word(sMax);
     eb0:	000a020c 	andeq	r0, sl, ip, lsl #4
     eb4:	11010000 	tstne	r1, r0
     eb8:	130e2501 	movwne	r2, #58625	; 0xe501

		return s;
	}
	return sVal;

}
     ebc:	1b0e030b 	blne	381af0 <__Stack_Size+0x3816f0>
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     ec0:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
}

//--------------------------------------------------------------------
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
     ec4:	00061001 	andeq	r1, r6, r1
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     ec8:	00240200 	eoreq	r0, r4, r0, lsl #4
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ecc:	0b3e0b0b 	bleq	f83b00 <__Stack_Size+0xf83700>
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
     ed0:	00000e03 	andeq	r0, r0, r3, lsl #28
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ed4:	03001603 	movweq	r1, #1539	; 0x603
	if (sVal < s) {
     ed8:	3b0b3a08 	blcc	2cf700 <__Stack_Size+0x2cf300>
     edc:	0013490b 	andseq	r4, r3, fp, lsl #18
     ee0:	00350400 	eorseq	r0, r5, r0, lsl #8
		return s;
	}

	s = (short) pgm_read_word(sMax);
     ee4:	00001349 	andeq	r1, r0, r9, asr #6
     ee8:	0b010405 	bleq	41f04 <__Stack_Size+0x41b04>
     eec:	3b0b3a0b 	blcc	2cf720 <__Stack_Size+0x2cf320>
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
     ef0:	0013010b 	andseq	r0, r3, fp, lsl #2
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ef4:	00280600 	eoreq	r0, r8, r0, lsl #12
	if (sVal < s) {
     ef8:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     efc:	13070000 	movwne	r0, #28672	; 0x7000
     f00:	3a0b0b01 	bcc	2c3b0c <__Stack_Size+0x2c370c>
		return s;
	}

	s = (short) pgm_read_word(sMax);
     f04:	010b3b0b 	tsteq	fp, fp, lsl #22
     f08:	08000013 	stmdaeq	r0, {r0, r1, r4}
     f0c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     f10:	0b3b0b3a 	bleq	ec3c00 <__Stack_Size+0xec3800>
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
     f14:	0a381349 	beq	e05c40 <__Stack_Size+0xe05840>
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     f18:	0d090000 	stceq	0, cr0, [r9]
	if (sVal < s) {
     f1c:	3a0e0300 	bcc	381b24 <__Stack_Size+0x381724>
     f20:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f24:	000a3813 	andeq	r3, sl, r3, lsl r8
		return s;
	}

	s = (short) pgm_read_word(sMax);
     f28:	00240a00 	eoreq	r0, r4, r0, lsl #20
     f2c:	0b3e0b0b 	bleq	f83b60 <__Stack_Size+0xf83760>
     f30:	130b0000 	movwne	r0, #45056	; 0xb000
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
				FemurAngle1[LegIndex], &cFemurMin1[LegIndex],
				&cFemurMax1[LegIndex]);
		TibiaAngle1[LegIndex] = CheckServoAngleBounds(s++,
     f34:	3a0b0b01 	bcc	2c3b40 <__Stack_Size+0x2c3740>
     f38:	01053b0b 	tsteq	r5, fp, lsl #22
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     f3c:	0c000013 	stceq	0, cr0, [r0], {19}
     f40:	0803000d 	stmdaeq	r3, {r0, r2, r3}
				TibiaAngle1[LegIndex], &cTibiaMin1[LegIndex],
				&cTibiaMax1[LegIndex]);

	}
#endif
}
     f44:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     f48:	0a381349 	beq	e05c74 <__Stack_Size+0xe05874>
     f4c:	0d0d0000 	stceq	0, cr0, [sp]
     f50:	3a0e0300 	bcc	381b58 <__Stack_Size+0x381758>
     f54:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f58:	000a3813 	andeq	r3, sl, r3, lsl r8
     f5c:	00160e00 	andseq	r0, r6, r0, lsl #28
     f60:	0b3a0e03 	bleq	e84774 <__Stack_Size+0xe84374>
     f64:	1349053b 	movtne	r0, #38203	; 0x953b
     f68:	040f0000 	streq	r0, [pc], #0	; f70 <__Stack_Size+0xb70>
     f6c:	0b0e0301 	bleq	381b78 <__Stack_Size+0x381778>
// SmoothControl (From Zenta) -  This function makes the body
//            rotation and translation much smoother
//--------------------------------------------------------------------
short SmoothControl(short CtrlMoveInp, short CtrlMoveOut, byte CtrlDivider) {

	if (CtrlMoveOut < (CtrlMoveInp - 4))
     f70:	3b0b3a0b 	blcc	2cf7a4 <__Stack_Size+0x2cf3a4>
     f74:	0013010b 	andseq	r0, r3, fp, lsl #2
		return CtrlMoveOut + abs((CtrlMoveOut - CtrlMoveInp) / CtrlDivider);
     f78:	00161000 	andseq	r1, r6, r0
     f7c:	0b3a0e03 	bleq	e84790 <__Stack_Size+0xe84390>
     f80:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f84:	13110000 	tstne	r1, #0	; 0x0
     f88:	0b0e0301 	bleq	381b94 <__Stack_Size+0x381794>
     f8c:	3b0b3a0b 	blcc	2cf7c0 <__Stack_Size+0x2cf3c0>
     f90:	0013010b 	andseq	r0, r3, fp, lsl #2
	else if (CtrlMoveOut > (CtrlMoveInp + 4))
     f94:	000f1200 	andeq	r1, pc, r0, lsl #4
		return CtrlMoveOut - abs((CtrlMoveOut - CtrlMoveInp) / CtrlDivider);
     f98:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     f9c:	2e130000 	wxorcs	wr0, wr3, wr0
     fa0:	030c3f01 	movweq	r3, #52993	; 0xcf01
     fa4:	3b0b3a0e 	blcc	2cf7e4 <__Stack_Size+0x2cf3e4>
     fa8:	110c270b 	tstne	ip, fp, lsl #14
     fac:	40011201 	andmi	r1, r1, r1, lsl #4
     fb0:	00130106 	andseq	r0, r3, r6, lsl #2

	return CtrlMoveInp;
}
     fb4:	00051400 	andeq	r1, r5, r0, lsl #8
// GetLegsXZLength -
//--------------------------------------------------------------------
word g_wLegsXZLength = 0xffff;
word GetLegsXZLength(void) {
	// Could save away or could do a little math on one leg...
	if (g_wLegsXZLength != 0xffff)
     fb8:	0b3a0803 	bleq	e82fcc <__Stack_Size+0xe82bcc>
     fbc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     fc0:	00000602 	andeq	r0, r0, r2, lsl #12

//--------------------------------------------------------------------
// GetLegsXZLength -
//--------------------------------------------------------------------
word g_wLegsXZLength = 0xffff;
word GetLegsXZLength(void) {
     fc4:	03000515 	movweq	r0, #1301	; 0x515
	// Could save away or could do a little math on one leg...
	if (g_wLegsXZLength != 0xffff)
		return g_wLegsXZLength;

	return isqrt32((LegPosX[0] * LegPosX[0]) + (LegPosZ[0] * LegPosZ[0]));
     fc8:	3b0b3a0e 	blcc	2cf808 <__Stack_Size+0x2cf408>
     fcc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     fd0:	16000006 	strne	r0, [r0], -r6
     fd4:	0c3f012e 	ldfeqs	f0, [pc], #-184
     fd8:	0b3a0e03 	bleq	e847ec <__Stack_Size+0xe843ec>
     fdc:	0c270b3b 	stceq	11, cr0, [r7], #-236
}
     fe0:	01111349 	tsteq	r1, r9, asr #6
     fe4:	06400112 	undefined
     fe8:	00001301 	andeq	r1, r0, r1, lsl #6
     fec:	11010b17 	tstne	r1, r7, lsl fp

#ifndef MAX_XZ_LEG_ADJUST
#define MAX_XZ_LEG_ADJUST   (word)(cCoxaLength[0]+cTibiaLength[0] + cFemurLength[0]/4)
#endif

void AdjustLegPositions(word XZLength1) {
     ff0:	00011201 	andeq	r1, r1, r1, lsl #4
     ff4:	00341800 	eorseq	r1, r4, r0, lsl #16
     ff8:	0b3a0e03 	bleq	e8480c <__Stack_Size+0xe8440c>
     ffc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1000:	00000602 	andeq	r0, r0, r2, lsl #12
		XZLength1 = MAX_XZ_LEG_ADJUST;
	if (XZLength1 < MIN_XZ_LEG_ADJUST)
		XZLength1 = MIN_XZ_LEG_ADJUST;

	// see if same length as when we came in
	if (XZLength1 == g_wLegsXZLength)
    1004:	03003419 	movweq	r3, #1049	; 0x419
    1008:	3b0b3a0e 	blcc	2cf848 <__Stack_Size+0x2cf448>
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		GetSinCos((short) pgm_read_word(&cCoxaAngle1[LegIndex]));

		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
    100c:	0013490b 	andseq	r4, r3, fp, lsl #18

	// see if same length as when we came in
	if (XZLength1 == g_wLegsXZLength)
		return;

	g_wLegsXZLength = XZLength1;
    1010:	01011a00 	tsteq	r1, r0, lsl #20

	u8 LegIndex;
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		GetSinCos((short) pgm_read_word(&cCoxaAngle1[LegIndex]));
    1014:	13011349 	movwne	r1, #4937	; 0x1349
    1018:	211b0000 	tstcs	fp, r0

		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
    101c:	2f134900 	svccs	0x00134900
    1020:	1c00000b 	stcne	0, cr0, [r0], {11}
    1024:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1028:	0b3b0b3a 	bleq	ec3d18 <__Stack_Size+0xec3918>
    102c:	0c3f1349 	ldceq	3, cr1, [pc], #-292
    1030:	00000a02 	andeq	r0, r0, r2, lsl #20
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
    1034:	01110100 	tsteq	r1, r0, lsl #2
    1038:	0b130e25 	bleq	4c48d4 <__Stack_Size+0x4c44d4>
    103c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1040:	01120111 	tsteq	r2, r1, lsl r1
    1044:	00000610 	andeq	r0, r0, r0, lsl r6
    1048:	0b002402 	bleq	a058 <__Stack_Size+0x9c58>
		return;

	g_wLegsXZLength = XZLength1;

	u8 LegIndex;
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    104c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
	}

	// Make sure we cycle through one gait to have the legs all move into their new locations...
	g_InControlState.ForceGaitStepCnt = g_InControlState.gaitCur.StepsInGait;
    1050:	0300000e 	movweq	r0, #14	; 0xe
    1054:	08030016 	stmdaeq	r3, {r1, r2, r4}
}
    1058:	0b3b0b3a 	bleq	ec3d48 <__Stack_Size+0xec3948>
    105c:	00001349 	andeq	r1, r0, r9, asr #6
    1060:	49003504 	stmdbmi	r0, {r2, r8, sl, ip, sp}
    1064:	05000013 	streq	r0, [r0, #-19]
    1068:	0b0b0104 	bleq	2c1480 <__Stack_Size+0x2c1080>
    106c:	0b3b0b3a 	bleq	ec3d5c <__Stack_Size+0xec395c>
    1070:	00001301 	andeq	r1, r0, r1, lsl #6
    1074:	03002806 	movweq	r2, #2054	; 0x806
    1078:	000d1c0e 	andeq	r1, sp, lr, lsl #24
		g_InControlState.aCoxaInitAngle1[LegIndex] = (short)pgm_read_word(&cCoxaAngle1[LegIndex]);
#endif
	}
	g_wLegsXZLength = 0xffff;
#endif
}
    107c:	00280700 	eoreq	r0, r8, r0, lsl #14
		else if (g_InControlState.aCoxaInitAngle1[LegIndex] < -700)
		g_InControlState.aCoxaInitAngle1[LegIndex] = -700;
	}
	g_wLegsXZLength = 0xffff;
#endif
}
    1080:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
//     to be appropriate for the current y location of the body...
//--------------------------------------------------------------------

u8 g_iLegInitIndex = 0x00; // remember which index we are currently using...

void AdjustLegPositionsToBodyHeight() {
    1084:	04080000 	streq	r0, [r8]
    1088:	0b0e0301 	bleq	381c94 <__Stack_Size+0x381894>
#ifdef CNT_HEX_INITS
	// Lets see which of our units we should use...
	// Note: We will also limit our body height here...
	if (g_InControlState.BodyPos.y
    108c:	3b0b3a0b 	blcc	2cf8c0 <__Stack_Size+0x2cf4c0>
			> (short) pgm_read_byte(&g_abHexMaxBodyY[CNT_HEX_INITS-1]))
		g_InControlState.BodyPos.y = (short) pgm_read_byte(
    1090:	0013010b 	andseq	r0, r3, fp, lsl #2
				&g_abHexMaxBodyY[CNT_HEX_INITS-1]);

	u8 i;
	word XZLength1 = pgm_read_byte(&g_abHexIntXZ[CNT_HEX_INITS-1]);
	for (i = 0; i < (CNT_HEX_INITS - 1); i++) { // Don't need to look at last entry as we already init to assume this one...
		if (g_InControlState.BodyPos.y
    1094:	00160900 	andseq	r0, r6, r0, lsl #18
    1098:	0b3a0e03 	bleq	e848ac <__Stack_Size+0xe844ac>
				<= (short) pgm_read_byte(&g_abHexMaxBodyY[i])) {
			XZLength1 = pgm_read_byte(&g_abHexIntXZ[i]);
			break;
		}
	}
	if (i != g_iLegInitIndex) {
    109c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
				&g_abHexMaxBodyY[CNT_HEX_INITS-1]);

	u8 i;
	word XZLength1 = pgm_read_byte(&g_abHexIntXZ[CNT_HEX_INITS-1]);
	for (i = 0; i < (CNT_HEX_INITS - 1); i++) { // Don't need to look at last entry as we already init to assume this one...
		if (g_InControlState.BodyPos.y
    10a0:	240a0000 	strcs	r0, [sl]
    10a4:	3e0b0b00 	fmacdcc	d0, d11, d0
    10a8:	0b00000b 	bleq	10dc <__Stack_Size+0xcdc>
				<= (short) pgm_read_byte(&g_abHexMaxBodyY[i])) {
			XZLength1 = pgm_read_byte(&g_abHexIntXZ[i]);
			break;
		}
	}
	if (i != g_iLegInitIndex) {
    10ac:	0b0b0113 	bleq	2c1500 <__Stack_Size+0x2c1100>
		g_iLegInitIndex = i;  // remember the current index...
		AdjustLegPositions(XZLength1);
    10b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!
	}
#endif // CNT_HEX_INITS
}
    10b4:	00001301 	andeq	r1, r0, r1, lsl #6
    10b8:	03000d0c 	movweq	r0, #3340	; 0xd0c
    10bc:	3b0b3a08 	blcc	2cf8e4 <__Stack_Size+0x2cf4e4>
}
//--------------------------------------------------------------------
//[CHECK VOLTAGE]
//Reads the input voltage and shuts down the bot when the power drops
byte s_bLVBeepCnt;
boolean CheckVoltage() {
    10c0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    10c4:	0d00000a 	stceq	0, cr0, [r0, #-40]
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10c8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}

	// BUGBUG:: if voltage is 0 it failed to retrieve don't hang program...
	//    if (!Voltage)
	//      return;

	if (!g_fLowVoltageShutdown) {
    10cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!
boolean CheckVoltage() {
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10d0:	0a381349 	beq	e05dfc <__Stack_Size+0xe059fc>

	// BUGBUG:: if voltage is 0 it failed to retrieve don't hang program...
	//    if (!Voltage)
	//      return;

	if (!g_fLowVoltageShutdown) {
    10d4:	160e0000 	strne	r0, [lr], -r0
boolean CheckVoltage() {
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10d8:	3a0e0300 	bcc	381ce0 <__Stack_Size+0x3818e0>

	if (!g_fLowVoltageShutdown) {
		/**PrintString("Voltage : ");
		Printu32d(Voltage);
		PrintString("\n");*/
		if ((Voltage < cTurnOffVol) || (Voltage >= 1999)) {
    10dc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    10e0:	0f000013 	svceq	0x00000013
    10e4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}


			//Turn off
			g_InControlState.BodyPos.x = 0;
    10e8:	0b3a0b0b 	bleq	e83d1c <__Stack_Size+0xe8391c>
			g_InControlState.TravelLength.x = 0;
			g_InControlState.TravelLength.z = 0;

#ifdef OPT_SINGLELEG
			g_InControlState.TravelLength.y = 0;
			g_InControlState.SelectedLeg = 255;
    10ec:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    10f0:	0d100000 	ldceq	0, cr0, [r0]
#endif
			g_fLowVoltageShutdown = 1;
    10f4:	3a0e0300 	bcc	381cfc <__Stack_Size+0x3818fc>
			s_bLVBeepCnt = 0;    // how many times we beeped...
    10f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		if ((Voltage < cTurnOffVol) || (Voltage >= 1999)) {


			//Turn off
			g_InControlState.BodyPos.x = 0;
			g_InControlState.BodyPos.y = 0;
    10fc:	000a3813 	andeq	r3, sl, r3, lsl r8
			g_InControlState.BodyPos.z = 0;
			g_InControlState.BodyRot1.x = 0;
    1100:	000d1100 	andeq	r1, sp, r0, lsl #2
			g_InControlState.BodyRot1.y = 0;
			g_InControlState.BodyRot1.z = 0;
    1104:	0b3a0803 	bleq	e83118 <__Stack_Size+0xe82d18>
			g_InControlState.TravelLength.x = 0;
			g_InControlState.TravelLength.z = 0;
    1108:	13490b3b 	movtne	r0, #39739	; 0x9b3b
#ifdef OPT_SINGLELEG
			g_InControlState.TravelLength.y = 0;
			g_InControlState.SelectedLeg = 255;
#endif
			g_fLowVoltageShutdown = 1;
			s_bLVBeepCnt = 0;    // how many times we beeped...
    110c:	00000a38 	andeq	r0, r0, r8, lsr sl
			g_InControlState.fRobotOn = false;
    1110:	0b000f12 	bleq	4d60 <__Stack_Size+0x4960>
		}
#ifdef cTurnOnVol
	} else if ((Voltage > cTurnOnVol) && (Voltage < 1999)) {
    1114:	0013490b 	andseq	r4, r3, fp, lsl #18
    1118:	012e1300 	teqeq	lr, r0, lsl #6

		g_fLowVoltageShutdown = 0;
    111c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1120:	0b3b0b3a 	bleq	ec3e10 <__Stack_Size+0xec3a10>

#endif
	} else {
		if (s_bLVBeepCnt < 5) {
    1124:	13490c27 	movtne	r0, #39975	; 0x9c27
    1128:	01120111 	tsteq	r2, r1, lsl r1
			s_bLVBeepCnt++;
    112c:	13010640 	movwne	r0, #5696	; 0x1640

			//MSound( 1, 45, 2000);
			Buzzed(45, 2000);
    1130:	05140000 	ldreq	r0, [r4]
    1134:	3a0e0300 	bcc	381d3c <__Stack_Size+0x38193c>
    1138:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		}
		mDelay(2000);
    113c:	00060213 	andeq	r0, r6, r3, lsl r2
    1140:	01011500 	tsteq	r1, r0, lsl #10
    1144:	13011349 	movwne	r1, #4937	; 0x1349
	}
#endif

	return g_fLowVoltageShutdown;
}
    1148:	21160000 	tstcs	r6, r0
    114c:	2f134900 	svccs	0x00134900
    1150:	1700000b 	strne	r0, [r0, -fp]
    1154:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1158:	0b3b0b3a 	bleq	ec3e48 <__Stack_Size+0xec3a48>

//==============================================================================
// BackgroundProcess - Allows us to have some background processing for those
//    servo drivers that need us to do things like polling...
//==============================================================================
void BackgroundProcess(void) {
    115c:	0c3f1349 	ldceq	3, cr1, [pc], #-292
    1160:	00000a02 	andeq	r0, r0, r2, lsl #20
	if (g_fAXSpeedControl)
    1164:	01110100 	tsteq	r1, r0, lsl #2
		return;  // nothing to do in this mode...

	if (ServosEnabled) {
		//DebugToggle(A3);
		BioloidControllerEx_interpolateStep(false); // Do our background stuff...
    1168:	0b130e25 	bleq	4c4a04 <__Stack_Size+0x4c4604>
		Battery_Monitor_Alarm();
    116c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
	}
}
    1170:	01120111 	tsteq	r2, r1, lsl r1
    1174:	00000610 	andeq	r0, r0, r0, lsl r6
//Function that gets called from the main loop if the robot is not logically
//     on.  Gives us a chance to play some...
//--------------------------------------------------------------------
static u8 g_iIdleServoNum = (u8) - 1;
static u8 g_iIdleLedState = 1;  // what state to we wish to set...
void IdleTime(void) {
    1178:	0b002402 	bleq	a188 <__Stack_Size+0x9d88>
    117c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
	// Each time we call this set servos LED on or off...
	g_iIdleServoNum++;
    1180:	0300000e 	movweq	r0, #14	; 0xe
	if (g_iIdleServoNum >= NUMSERVOS) {
    1184:	08030016 	stmdaeq	r3, {r1, r2, r4}
    1188:	0b3b0b3a 	bleq	ec3e78 <__Stack_Size+0xec3a78>
		g_iIdleServoNum = 0;
    118c:	00001349 	andeq	r1, r0, r9, asr #6
		g_iIdleLedState = 1 - g_iIdleLedState;
    1190:	49003504 	stmdbmi	r0, {r2, r8, sl, ip, sp}
    1194:	05000013 	streq	r0, [r0, #-19]
	}
	dxl_write_byte(pgm_read_byte(&cPinTable[g_iIdleServoNum]), AXM_LED,
    1198:	0e030104 	adfeqs	f0, f3, f4
    119c:	0b3a0b0b 	bleq	e83dd0 <__Stack_Size+0xe839d0>
    11a0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    11a4:	28060000 	stmdacs	r6, {}
    11a8:	1c0e0300 	stcne	3, cr0, [lr], {0}
			g_iIdleLedState);
	//ax12ReadPacket(6);  // get the response...


}
    11ac:	0700000d 	streq	r0, [r0, -sp]
    11b0:	08030028 	stmdaeq	r3, {r3, r5}
    11b4:	00000d1c 	andeq	r0, r0, ip, lsl sp
    11b8:	03001608 	movweq	r1, #1544	; 0x608

//--------------------------------------------------------------------
//[SetRegOnAllServos] Function that is called to set the state of one
//  register in all of the servos, like Torque on...
//--------------------------------------------------------------------
void SetRegOnAllServos(u8 bReg, u8 bVal) {
    11bc:	3b0b3a0e 	blcc	2cf9fc <__Stack_Size+0x2cf5fc>
    11c0:	0013490b 	andseq	r4, r3, fp, lsl #18
    11c4:	00240900 	eoreq	r0, r4, r0, lsl #18
	 ax12write(bVal);

  }
  ax12write(0xff - (checksum % 256));
  setRX(0);*/
	 dxl_set_txpacket_id (BROADCAST_ID);
    11c8:	0b3e0b0b 	bleq	f83dfc <__Stack_Size+0xf839fc>
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    11cc:	130a0000 	movwne	r0, #40960	; 0xa000
	dxl_set_txpacket_parameter(0,bReg);
    11d0:	3a0b0b01 	bcc	2c3ddc <__Stack_Size+0x2c39dc>
    11d4:	01053b0b 	tsteq	r5, fp, lsl #22
	dxl_set_txpacket_parameter(1,2);
    11d8:	0b000013 	bleq	122c <__Stack_Size+0xe2c>
    11dc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    11e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!
  int i;
	for (i = 0; i < poseSize; i++) {
		byte id = pgm_read_byte(&cPinTable[i]);
		dxl_set_txpacket_parameter(2 + 3 * i, id);
    11e4:	0a381349 	beq	e05f10 <__Stack_Size+0xe05b10>
    11e8:	0d0c0000 	stceq	0, cr0, [ip]
    11ec:	3a0e0300 	bcc	381df4 <__Stack_Size+0x3819f4>
    11f0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
    11f4:	000a3813 	andeq	r3, sl, r3, lsl r8
    11f8:	00160d00 	andseq	r0, r6, r0, lsl #26
    11fc:	0b3a0e03 	bleq	e84a10 <__Stack_Size+0xe84610>
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
    1200:	1349053b 	movtne	r0, #38203	; 0x953b
    1204:	130e0000 	movwne	r0, #57344	; 0xe000
    1208:	0b0e0301 	bleq	381e14 <__Stack_Size+0x381a14>
	dxl_set_txpacket_parameter(1,2);
  int i;
	for (i = 0; i < poseSize; i++) {
		byte id = pgm_read_byte(&cPinTable[i]);
		dxl_set_txpacket_parameter(2 + 3 * i, id);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
    120c:	3b0b3a0b 	blcc	2cfa40 <__Stack_Size+0x2cf640>
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
    1210:	0013010b 	andseq	r0, r3, fp, lsl #2
	 dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0,bReg);
	dxl_set_txpacket_parameter(1,2);
  int i;
	for (i = 0; i < poseSize; i++) {
    1214:	000d0f00 	andeq	r0, sp, r0, lsl #30
    1218:	0b3a0e03 	bleq	e84a2c <__Stack_Size+0xe8462c>
    121c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
		dxl_set_txpacket_parameter(2 + 3 * i, id);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
	}

	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
    1220:	00000a38 	andeq	r0, r0, r8, lsr sl
    1224:	03000d10 	movweq	r0, #3344	; 0xd10
    1228:	3b0b3a08 	blcc	2cfa50 <__Stack_Size+0x2cf650>
#ifdef DEBUG_BIOLOIDEX
	PrintString("DriverAX12 --- SetRegOnAllServos ---\n");
#endif
	dxl_txrx_packet();
    122c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}

	u16 CommStatus = dxl_get_result();
    1230:	1100000a 	tstne	r0, sl
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
    1234:	0b0b000f 	bleq	2c1278 <__Stack_Size+0x2c0e78>
		PrintErrorCode();
    1238:	00001349 	andeq	r1, r0, r9, asr #6
	else
		PrintCommStatus(CommStatus);
    123c:	3f012e12 	svccc	0x00012e12
#endif
}
    1240:	3a0e030c 	bcc	381e78 <__Stack_Size+0x381a78>
    1244:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1248:	1201110c 	andne	r1, r1, #3	; 0x3
//--------------------------------------------------------------------
//[MakeSureServosAreOn] Function that is called to handle when you are
//  transistioning from servos all off to being on.  May need to read
//  in the current pose...
//--------------------------------------------------------------------
void MakeSureServosAreOn(void) {
    124c:	01064001 	tsteq	r6, r1

	if (ServosEnabled) {

		if (!g_fServosFree)
    1250:	13000013 	movwne	r0, #19	; 0x13
			return;    // we are not free

		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		if (g_fAXSpeedControl) {
    1254:	08030005 	stmdaeq	r3, {r0, r2}
    1258:	0b3b0b3a 	bleq	ec3f48 <__Stack_Size+0xec3b48>

			int i;
			for (i = 0; i < NUMSERVOS; i++) {
				g_awGoalAXPos[i] = dxl_read_word(pgm_read_byte(&cPinTable[i]),
    125c:	06021349 	streq	r1, [r2], -r9, asr #6
    1260:	05140000 	ldreq	r0, [r4]
    1264:	3a0e0300 	bcc	381e6c <__Stack_Size+0x381a6c>
    1268:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
						AXM_PRESENT_POSITION_L);
				mDelay(25);
    126c:	00060213 	andeq	r0, r6, r3, lsl r2
    1270:	01011500 	tsteq	r1, r0, lsl #10

		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		if (g_fAXSpeedControl) {

			int i;
			for (i = 0; i < NUMSERVOS; i++) {
    1274:	13011349 	movwne	r1, #4937	; 0x1349
    1278:	21160000 	tstcs	r6, r0
				g_awGoalAXPos[i] = dxl_read_word(pgm_read_byte(&cPinTable[i]),
						AXM_PRESENT_POSITION_L);
				mDelay(25);
			}
		} else {
			BioloidControllerEx_readPose();
    127c:	2f134900 	svccs	0x00134900
		}

		SetRegOnAllServos(AXM_TORQUE_ENABLE, 1);  // Use sync write to do it.
    1280:	1700000b 	strne	r0, [r0, -fp]
    1284:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}

		CommanderInputController_AllowControllerInterrupts(true);
		g_fServosFree = false;
    1288:	0b3b0b3a 	bleq	ec3f78 <__Stack_Size+0xec3b78>
	}

}
    128c:	0c3f1349 	ldceq	3, cr1, [pc], #-292
    1290:	00000a02 	andeq	r0, r0, r2, lsl #20
    1294:	01110100 	tsteq	r1, r0, lsl #2
    1298:	0b130e25 	bleq	4c4b34 <__Stack_Size+0x4c4734>
    129c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}

//------------------------------------------------------------------------------------------
//[BeginServoUpdate] Does whatever preperation that is needed to starrt a move of our servos
//------------------------------------------------------------------------------------------
void BeginServoUpdate(void)    // Start the update
		{
    12a0:	01120111 	tsteq	r2, r1, lsl r1

	MakeSureServosAreOn();
    12a4:	00000610 	andeq	r0, r0, r0, lsl r6
	if (ServosEnabled) {

		if (g_fAXSpeedControl) {
    12a8:	0b002402 	bleq	a2b8 <__Stack_Size+0x9eb8>
    12ac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b

#ifdef USE_AX12_SPEED_CONTROL
			// If we are trying our own Servo control need to save away the new positions...
			byte i;
			for (i = 0; i < NUMSERVOS; i++) {
				g_awCurAXPos[i] = g_awGoalAXPos[i];
    12b0:	0300000e 	movweq	r0, #14	; 0xe
    12b4:	08030016 	stmdaeq	r3, {r1, r2, r4}
    12b8:	0b3b0b3a 	bleq	ec3fa8 <__Stack_Size+0xec3ba8>
		if (g_fAXSpeedControl) {

#ifdef USE_AX12_SPEED_CONTROL
			// If we are trying our own Servo control need to save away the new positions...
			byte i;
			for (i = 0; i < NUMSERVOS; i++) {
    12bc:	00001349 	andeq	r1, r0, r9, asr #6
				g_awCurAXPos[i] = g_awGoalAXPos[i];
			}
#endif
		} else
			BioloidControllerEx_interpolateStep(true); // Make sure we call at least once
    12c0:	49003504 	stmdbmi	r0, {r2, r8, sl, ip, sp}
    12c4:	05000013 	streq	r0, [r0, #-19]

	}
}
    12c8:	0e030104 	adfeqs	f0, f3, f4
    12cc:	0b3a0b0b 	bleq	e83f00 <__Stack_Size+0xe83b00>
    12d0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    12d4:	28060000 	stmdacs	r6, {}
}

//--------------------------------------------------------------------
//[FREE SERVOS] Frees all the servos
//--------------------------------------------------------------------
void FreeServos(void) {
    12d8:	1c0e0300 	stcne	3, cr0, [lr], {0}
    12dc:	0700000d 	streq	r0, [r0, -sp]

	if (!g_fServosFree) {
    12e0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		SetRegOnAllServos(AXM_TORQUE_ENABLE, 0);  // do this as one statement...
    12e4:	0b3b0b3a 	bleq	ec3fd4 <__Stack_Size+0xec3bd4>
    12e8:	00001349 	andeq	r1, r0, r9, asr #6
    12ec:	0b002408 	bleq	a314 <__Stack_Size+0x9f14>
		byte i;
		for (i = 0; i < NUMSERVOS; i++) {
			Relax(pgm_read_byte(&cPinTable[i]));
    12f0:	000b3e0b 	andeq	r3, fp, fp, lsl #28
    12f4:	01130900 	tsteq	r3, r0, lsl #18
    12f8:	0b3a0b0b 	bleq	e83f2c <__Stack_Size+0xe83b2c>

	if (!g_fServosFree) {
		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		SetRegOnAllServos(AXM_TORQUE_ENABLE, 0);  // do this as one statement...
		byte i;
		for (i = 0; i < NUMSERVOS; i++) {
    12fc:	1301053b 	movwne	r0, #5435	; 0x153b
			Relax(pgm_read_byte(&cPinTable[i]));
		}
		CommanderInputController_AllowControllerInterrupts(true);
		g_fServosFree = true;
    1300:	0d0a0000 	stceq	0, cr0, [sl]
	}
}
    1304:	3a080300 	bcc	201f0c <__Stack_Size+0x201b0c>
    1308:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    130c:	000a3813 	andeq	r3, sl, r3, lsl r8
extern void SetRegOnAllServos(u8 bReg, u8 bVal);

//--------------------------------------------------------------------
//Init
//--------------------------------------------------------------------
void Servo_Init(void) {
    1310:	000d0b00 	andeq	r0, sp, r0, lsl #22
	// First lets get the actual servo positions for all of our servos...
	//pinMode(0, OUTPUT);
	g_fServosFree = true;
    1314:	0b3a0e03 	bleq	e84b28 <__Stack_Size+0xe84728>

  poseSize = NUMSERVOS;
    1318:	1349053b 	movtne	r0, #38203	; 0x953b
    131c:	00000a38 	andeq	r0, r0, r8, lsr sl
  BioloidControllerEx_readPose();
    1320:	3f012e0c 	svccc	0x00012e0c
#ifdef cVoltagePin
	for (byte i=0; i < 8; i++)
	GetBatteryVoltage();  // init the voltage pin
#endif

	g_fAXSpeedControl = false;
    1324:	3a0e030c 	bcc	381f5c <__Stack_Size+0x381b5c>
    1328:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]



	// Added - try to speed things up later if we do a query...
	SetRegOnAllServos(AXM_RETURN_DELAY_TIME, 0); // tell servos to give us back their info as quick as they can...
    132c:	1201110c 	andne	r1, r1, #3	; 0x3
    1330:	01064001 	tsteq	r6, r1

}
    1334:	0d000013 	stceq	0, cr0, [r0, #-76]
    1338:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    133c:	0b3b0b3a 	bleq	ec402c <__Stack_Size+0xec3c2c>
    1340:	06021349 	streq	r1, [r2], -r9, asr #6

}

void setupPhoenix() {

	g_fShowDebugPrompt = true;
    1344:	340e0000 	strcc	r0, [lr]
void readSensors(){


}

void setupPhoenix() {
    1348:	3a0e0300 	bcc	381f50 <__Stack_Size+0x381b50>

	g_fShowDebugPrompt = true;
	g_fDebugOutput = false;
    134c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1350:	3c0c3f13 	stccc	15, cr3, [ip], {19}
	//init BioloidEx
	BioloidControllerEx();
    1354:	0000000c 	andeq	r0, r0, ip

	// Init our ServoDriver
	Servo_Init();
    1358:	25011101 	strcs	r1, [r1, #-257]

	mDelay(10);
    135c:	030b130e 	movweq	r1, #45838	; 0xb30e

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		LegPosX[LegIndex] = (short) pgm_read_word(&cInitPosX[LegIndex]); //Set start positions for each leg
    1360:	110e1b0e 	tstne	lr, lr, lsl #22
    1364:	10011201 	andne	r1, r1, r1, lsl #4
		LegPosY[LegIndex] = (short) pgm_read_word(&cInitPosY[LegIndex]);
    1368:	02000006 	andeq	r0, r0, #6	; 0x6
    136c:	0b0b0024 	bleq	2c1404 <__Stack_Size+0x2c1004>
		LegPosZ[LegIndex] = (short) pgm_read_word(&cInitPosZ[LegIndex]);
    1370:	0e030b3e 	vmoveq.16	d3[0], r0

	mDelay(10);

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		LegPosX[LegIndex] = (short) pgm_read_word(&cInitPosX[LegIndex]); //Set start positions for each leg
    1374:	16030000 	strne	r0, [r3], -r0
    1378:	3a080300 	bcc	201f80 <__Stack_Size+0x201b80>
		LegPosY[LegIndex] = (short) pgm_read_word(&cInitPosY[LegIndex]);
    137c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1380:	04000013 	streq	r0, [r0], #-19
		LegPosZ[LegIndex] = (short) pgm_read_word(&cInitPosZ[LegIndex]);
    1384:	0b0b0024 	bleq	2c141c <__Stack_Size+0x2c101c>
    1388:	00000b3e 	andeq	r0, r0, lr, lsr fp
    138c:	03010405 	movweq	r0, #5125	; 0x1405
	Servo_Init();

	mDelay(10);

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    1390:	3a0b0b0e 	bcc	2c3fd0 <__Stack_Size+0x2c3bd0>
    1394:	010b3b0b 	tsteq	fp, fp, lsl #22
    1398:	06000013 	undefined

	ResetLegInitAngles();

	//Single leg control. Make sure no leg is selected
#ifdef OPT_SINGLELEG
	g_InControlState.SelectedLeg = 255; // No Leg selected
    139c:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    13a0:	00000d1c 	andeq	r0, r0, ip, lsl sp
	g_InControlState.PrevSelectedLeg = 255;
    13a4:	03002807 	movweq	r2, #2055	; 0x807
#endif
	//Body Positions
	g_InControlState.BodyPos.x = 0;
    13a8:	000d1c08 	andeq	r1, sp, r8, lsl #24
	g_InControlState.BodyPos.y = 0;
	g_InControlState.BodyPos.z = 0;
    13ac:	012e0800 	teqeq	lr, r0, lsl #16

//Body Rotations
	g_InControlState.BodyRot1.x = 0;
	g_InControlState.BodyRot1.y = 0;
    13b0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	g_InControlState.BodyRot1.z = 0;
	g_InControlState.BodyRotOffset.x = 0;
    13b4:	0b3b0b3a 	bleq	ec40a4 <__Stack_Size+0xec3ca4>
	g_InControlState.BodyRotOffset.y = 0; //Input Y offset value to adjust centerpoint of rotation
	g_InControlState.BodyRotOffset.z = 0;
    13b8:	01110c27 	tsteq	r1, r7, lsr #24

	//Gait
	g_InControlState.GaitType = 0;
    13bc:	0a400112 	beq	100180c <__Stack_Size+0x100140c>
	g_InControlState.BalanceMode = 0;
    13c0:	00001301 	andeq	r1, r0, r1, lsl #6
	g_InControlState.LegLiftHeight = 50;
	g_InControlState.ForceGaitStepCnt = 0; // added to try to adjust starting positions depending on height...
    13c4:	03000509 	movweq	r0, #1289	; 0x509
	g_InControlState.GaitStep = 1;
    13c8:	3b0b3a0e 	blcc	2cfc08 <__Stack_Size+0x2cf808>
}

void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {
    13cc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	g_InControlState.BodyRotOffset.z = 0;

	//Gait
	g_InControlState.GaitType = 0;
	g_InControlState.BalanceMode = 0;
	g_InControlState.LegLiftHeight = 50;
    13d0:	0a00000a 	beq	1400 <__Stack_Size+0x1000>
    13d4:	0c3f012e 	ldfeqs	f0, [pc], #-184
void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {

		g_InControlState.gaitCur = APG[g_InControlState.GaitType];
    13d8:	0b3a0e03 	bleq	e84bec <__Stack_Size+0xe847ec>
    13dc:	0c270b3b 	stceq	11, cr0, [r7], #-236
    13e0:	01120111 	tsteq	r2, r1, lsl r1
//==============================================================================

// If both PS2 and XBee are defined then we will become secondary to the xbee
void CommanderInputController_Init(void) {

	g_BodyYOffset = 0;
    13e4:	13010640 	movwne	r0, #5696	; 0x1640
    13e8:	050b0000 	streq	r0, [fp]
    13ec:	3a0e0300 	bcc	381ff4 <__Stack_Size+0x381bf4>
	g_BodyYShift = 0;
	//begin(XBEE_BAUD);
	GPSeq = 0;  // init to something...
    13f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    13f4:	00060213 	andeq	r0, r6, r3, lsl r2

	ControlMode = WALKMODE;
    13f8:	002e0c00 	eoreq	r0, lr, r0, lsl #24
	HeightSpeedMode = NORM_NORM;
    13fc:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	//    DoubleHeightOn = false;
	DoubleTravelOn = false;
    1400:	0b3b0b3a 	bleq	ec40f0 <__Stack_Size+0xec3cf0>
	bJoystickWalkMode = 0;
    1404:	13490c27 	movtne	r0, #39975	; 0x9c27
	GaitSelect();

	CommanderInputController_Init();

	// Servo Driver
	ServoMoveTime = 150;
    1408:	01120111 	tsteq	r2, r1, lsl r1
	g_InControlState.fRobotOn = 0;
    140c:	00000a40 	andeq	r0, r0, r0, asr #20
	g_fLowVoltageShutdown = false;
    1410:	3f002e0d 	svccc	0x00002e0d

}
    1414:	3a0e030c 	bcc	38204c <__Stack_Size+0x381c4c>
    1418:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    141c:	1201110c 	andne	r1, r1, #3	; 0x3
    1420:	00064001 	andeq	r4, r6, r1
    1424:	00340e00 	eorseq	r0, r4, r0, lsl #28
    1428:	0b3a0e03 	bleq	e84c3c <__Stack_Size+0xe8483c>
    142c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1430:	0a020c3f 	beq	84534 <__Stack_Size+0x84134>
    1434:	350f0000 	strcc	r0, [pc, #0]	; 143c <__Stack_Size+0x103c>
    1438:	00134900 	andseq	r4, r3, r0, lsl #18
    143c:	11010000 	tstne	r1, r0
    1440:	130e2501 	movwne	r2, #58625	; 0xe501
    1444:	1b0e030b 	blne	382078 <__Stack_Size+0x381c78>
    1448:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    144c:	00061001 	andeq	r1, r6, r1
    1450:	00240200 	eoreq	r0, r4, r0, lsl #4
    1454:	0b3e0b0b 	bleq	f84088 <__Stack_Size+0xf83c88>
    1458:	00000e03 	andeq	r0, r0, r3, lsl #28
    145c:	03001603 	movweq	r1, #1539	; 0x603
    1460:	3b0b3a08 	blcc	2cfc88 <__Stack_Size+0x2cf888>
    1464:	0013490b 	andseq	r4, r3, fp, lsl #18
//[CommitServoDriver Updates the positions of the servos - This outputs
//         as much of the command as we can without committing it.  This
//         allows us to once the previous update was completed to quickly
//        get the next command to start
//--------------------------------------------------------------------
void CommitServoDriver(word wMoveTime) {
    1468:	00350400 	eorseq	r0, r5, r0, lsl #8
    146c:	00001349 	andeq	r1, r0, r9, asr #6
    1470:	0b010405 	bleq	4248c <__Stack_Size+0x4208c>


	CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    1474:	3b0b3a0b 	blcc	2cfca8 <__Stack_Size+0x2cf8a8>

      }
      ax12write(0xff - (checksum % 256));
      setRX(0);
*/
  	    dxl_set_txpacket_id (BROADCAST_ID);
    1478:	0013010b 	andseq	r0, r3, fp, lsl #2
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    147c:	00280600 	eoreq	r0, r8, r0, lsl #12
    1480:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
		dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
    1484:	28070000 	stmdacs	r7, {}
    1488:	1c080300 	stcne	3, cr0, [r8], {0}
		dxl_set_txpacket_parameter(1, 2);
    148c:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    1490:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1494:	0b3b0b3a 	bleq	ec4184 <__Stack_Size+0xec3d84>
    1498:	00001349 	andeq	r1, r0, r9, asr #6
      int i;
      word wSpeed;
		for (i = 0; i < poseSize; i++) {
			wSpeed = CalculateAX12MoveSpeed(g_awCurAXPos[i], g_awGoalAXPos[i], wMoveTime);    // What order should we store these values?
    149c:	0b011309 	bleq	460c8 <__Stack_Size+0x45cc8>
    14a0:	3b0b3a0b 	blcc	2cfcd4 <__Stack_Size+0x2cf8d4>
    14a4:	0013010b 	andseq	r0, r3, fp, lsl #2
    14a8:	000d0a00 	andeq	r0, sp, r0, lsl #20
			//dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
			byte id = pgm_read_byte(&cPinTable[i]);
			dxl_set_txpacket_parameter(2 + 3 * i, id);
    14ac:	0b3a0803 	bleq	e834c0 <__Stack_Size+0xe830c0>
    14b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    14b4:	00000a38 	andeq	r0, r0, r8, lsr sl
    14b8:	03000d0b 	movweq	r0, #3339	; 0xd0b
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(g_awGoalAXPos[i]));
    14bc:	3b0b3a0e 	blcc	2cfcfc <__Stack_Size+0x2cf8fc>
    14c0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    14c4:	0c00000a 	stceq	0, cr0, [r0], {10}
    14c8:	0b0b0024 	bleq	2c1560 <__Stack_Size+0x2c1160>
    14cc:	00000b3e 	andeq	r0, r0, lr, lsr fp
			dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(g_awGoalAXPos[i]));
    14d0:	0b01130d 	bleq	4610c <__Stack_Size+0x45d0c>
    14d4:	3b0b3a0b 	blcc	2cfd08 <__Stack_Size+0x2cf908>
    14d8:	00130105 	andseq	r0, r3, r5, lsl #2
    14dc:	000d0e00 	andeq	r0, sp, r0, lsl #28
    14e0:	0b3a0803 	bleq	e834f4 <__Stack_Size+0xe830f4>
    14e4:	1349053b 	movtne	r0, #38203	; 0x953b
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(wSpeed));
    14e8:	00000a38 	andeq	r0, r0, r8, lsr sl
    14ec:	03000d0f 	movweq	r0, #3343	; 0xd0f
    14f0:	3b0b3a0e 	blcc	2cfd30 <__Stack_Size+0x2cf930>
		    dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(wSpeed));
    14f4:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    14f8:	1000000a 	andne	r0, r0, sl
    14fc:	0c3f012e 	ldfeqs	f0, [pc], #-184
    1500:	0b3a0e03 	bleq	e84d14 <__Stack_Size+0xe84914>
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
		dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
		dxl_set_txpacket_parameter(1, 2);
      int i;
      word wSpeed;
		for (i = 0; i < poseSize; i++) {
    1504:	0111053b 	tsteq	r1, fp, lsr r5
    1508:	06400112 	undefined
    150c:	00001301 	andeq	r1, r0, r1, lsl #6
    1510:	03003411 	movweq	r3, #1041	; 0x411
			dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(g_awGoalAXPos[i]));
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(wSpeed));
		    dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(wSpeed));
		}

		dxl_set_txpacket_length((4 + 1) * poseSize + 4);
    1514:	3b0b3a0e 	blcc	2cfd54 <__Stack_Size+0x2cf954>
    1518:	00134905 	andseq	r4, r3, r5, lsl #18
    151c:	002e1200 	eoreq	r1, lr, r0, lsl #4
#ifdef DEBUG_BIOLOIDEX
	PrintString("DriverAX12 --- CommitServoDriver ---\n");
#endif
		dxl_txrx_packet();
    1520:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}

			u16 CommStatus = dxl_get_result();
    1524:	053b0b3a 	ldreq	r0, [fp, #-2874]!
#ifdef USING_PC_UART
			if (CommStatus == DXL_RXSUCCESS)
    1528:	01110c27 	tsteq	r1, r7, lsr #24
				PrintErrorCode();
    152c:	06400112 	undefined
			else
				PrintCommStatus(CommStatus);
    1530:	2e130000 	wxorcs	wr0, wr3, wr0
    1534:	030c3f01 	movweq	r3, #52993	; 0xcf01
#endif
#endif
		} else {
			BioloidControllerEx_interpolateSetup(wMoveTime);
    1538:	3b0b3a0e 	blcc	2cfd78 <__Stack_Size+0x2cf978>

	}

	CommanderInputController_AllowControllerInterrupts(true);

}
    153c:	110c270b 	tstne	ip, fp, lsl #14
    1540:	40011201 	andmi	r1, r1, r1, lsl #4
    1544:	00130106 	andseq	r0, r3, r6, lsl #2
    1548:	00341400 	eorseq	r1, r4, r0, lsl #8
    154c:	0b3a0e03 	bleq	e84d60 <__Stack_Size+0xe84960>
    1550:	13490b3b 	movtne	r0, #39739	; 0x9b3b
	word wCoxaSDV;        // Coxa value in servo driver units
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    1554:	00000a02 	andeq	r0, r0, r2, lsl #20
    1558:	03003415 	movweq	r3, #1045	; 0x415
    155c:	3b0b3a0e 	blcc	2cfd9c <__Stack_Size+0x2cf99c>
    1560:	0013490b 	andseq	r4, r3, fp, lsl #18
    1564:	002e1600 	eoreq	r1, lr, r0, lsl #12


void OutputServoInfoForLeg(byte LegIndex, short sCoxaAngle1, short sFemurAngle1,
		short sTibiaAngle1)

		{
    1568:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	word wCoxaSDV;        // Coxa value in servo driver units
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    156c:	0b3b0b3a 	bleq	ec425c <__Stack_Size+0xec3e5c>
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
    1570:	01120111 	tsteq	r2, r1, lsl r1
    1574:	00000640 	andeq	r0, r0, r0, asr #12
    1578:	49010117 	stmdbmi	r1, {r0, r1, r2, r4, r8}
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    157c:	00130113 	andseq	r0, r3, r3, lsl r1
    1580:	00211800 	eoreq	r1, r1, r0, lsl #16
    1584:	052f1349 	streq	r1, [pc, #-841]!	; 1243 <__Stack_Size+0xe43>


void OutputServoInfoForLeg(byte LegIndex, short sCoxaAngle1, short sFemurAngle1,
		short sTibiaAngle1)

		{
    1588:	34190000 	ldrcc	r0, [r9]
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    158c:	3a0e0300 	bcc	382194 <__Stack_Size+0x381d94>
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
    1590:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    1594:	000b1c13 	andeq	r1, fp, r3, lsl ip
#ifdef USE_AX12_SPEED_CONTROL
			// Save away the new positions...
			g_awGoalAXPos[FIRSTCOXAPIN + LegIndex] = wCoxaSDV; // What order should we store these values?
			g_awGoalAXPos[FIRSTFEMURPIN + LegIndex] = wFemurSDV;
    1598:	00211a00 	eoreq	r1, r1, r0, lsl #20

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
#ifdef USE_AX12_SPEED_CONTROL
			// Save away the new positions...
			g_awGoalAXPos[FIRSTCOXAPIN + LegIndex] = wCoxaSDV; // What order should we store these values?
    159c:	0b2f1349 	bleq	bc62c8 <__Stack_Size+0xbc5ec8>
			g_awGoalAXPos[FIRSTFEMURPIN + LegIndex] = wFemurSDV;
    15a0:	341b0000 	ldrcc	r0, [fp]
			g_awGoalAXPos[FIRSTTIBIAPIN + LegIndex] = wTibiaSDV;
    15a4:	3a0e0300 	bcc	3821ac <__Stack_Size+0x381dac>
    15a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    15ac:	3c0c3f13 	stccc	15, cr3, [ip], {19}

#endif
		} else {
			BioloidControllerEx_setNextPose(
    15b0:	0000000c 	andeq	r0, r0, ip
    15b4:	25011101 	strcs	r1, [r1, #-257]
					pgm_read_byte(&cPinTable[FIRSTCOXAPIN + LegIndex]),
					wCoxaSDV);
			BioloidControllerEx_setNextPose(
    15b8:	030b130e 	movweq	r1, #45838	; 0xb30e
    15bc:	110e1b0e 	tstne	lr, lr, lsl #22
    15c0:	10011201 	andne	r1, r1, r1, lsl #4
					pgm_read_byte(&cPinTable[FIRSTFEMURPIN + LegIndex]),
					wFemurSDV);
			BioloidControllerEx_setNextPose(
    15c4:	02000006 	andeq	r0, r0, #6	; 0x6
    15c8:	0b0b0024 	bleq	2c1660 <__Stack_Size+0x2c1260>
					wTibiaSDV);

		}
	}
	CommanderInputController_AllowControllerInterrupts(true); // Ok for hserial again...
}
    15cc:	0e030b3e 	vmoveq.16	d3[0], r0
    15d0:	16030000 	strne	r0, [r3], -r0
    15d4:	3a080300 	bcc	2021dc <__Stack_Size+0x201ddc>
    15d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    15dc:	04000013 	streq	r0, [r0], #-19

void StartUpdateServos() {
    15e0:	13490035 	movtne	r0, #36917	; 0x9035
	byte LegIndex;

	// First call off to the init...
	BeginServoUpdate();    // Start the update
    15e4:	04050000 	streq	r0, [r5]
    15e8:	3a0b0b01 	bcc	2c41f4 <__Stack_Size+0x2c3df4>
    15ec:	010b3b0b 	tsteq	fp, fp, lsl #22

	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		OutputServoInfoForLeg(LegIndex,
    15f0:	06000013 	undefined
    15f4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    15f8:	00000d1c 	andeq	r0, r0, ip, lsl sp
    15fc:	03002807 	movweq	r2, #2055	; 0x807
    1600:	000d1c08 	andeq	r1, sp, r8, lsl #24
    1604:	00240800 	eoreq	r0, r4, r0, lsl #16
    1608:	0b3e0b0b 	bleq	f8423c <__Stack_Size+0xf83e3c>
    160c:	13090000 	movwne	r0, #36864	; 0x9000
    1610:	3a0b0b01 	bcc	2c421c <__Stack_Size+0x2c3e1c>
    1614:	01053b0b 	tsteq	r5, fp, lsl #22
    1618:	0a000013 	beq	166c <__Stack_Size+0x126c>
    161c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1620:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1624:	0a381349 	beq	e06350 <__Stack_Size+0xe05f50>
    1628:	0d0b0000 	stceq	0, cr0, [fp]
    162c:	3a0e0300 	bcc	382234 <__Stack_Size+0x381e34>
    1630:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1634:	000a3813 	andeq	r3, sl, r3, lsl r8
    1638:	01130c00 	tsteq	r3, r0, lsl #24
    163c:	0b3a0b0b 	bleq	e84270 <__Stack_Size+0xe83e70>
    1640:	13010b3b 	movwne	r0, #6971	; 0x1b3b
	byte LegIndex;

	// First call off to the init...
	BeginServoUpdate();    // Start the update

	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    1644:	0d0d0000 	stceq	0, cr0, [sp]
				cTibiaInv[LegIndex] ?
						-TibiaAngle1[LegIndex] : TibiaAngle1[LegIndex]);

	}

}
    1648:	3a0e0300 	bcc	382250 <__Stack_Size+0x381e50>
    164c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1650:	000a3813 	andeq	r3, sl, r3, lsl r8
    1654:	00160e00 	andseq	r0, r6, r0, lsl #28
    1658:	0b3a0e03 	bleq	e84e6c <__Stack_Size+0xe84a6c>
    165c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1660:	040f0000 	streq	r0, [pc], #0	; 1668 <__Stack_Size+0x1268>
#else
word g_wLastVoltage = 0xffff;    // save the last voltage we retrieved...
byte g_bLegVoltage = 0;		// what leg did we last check?
unsigned long g_ulTimeLastBatteryVoltage;
#define VOLTAGE_REPEAT_MAX  3
word GetBatteryVoltage(void) {
    1664:	0b0e0301 	bleq	382270 <__Stack_Size+0x381e70>
	if (interpolating && (g_wLastVoltage != 0xffff)
    1668:	3b0b3a0b 	blcc	2cfe9c <__Stack_Size+0x2cfa9c>
    166c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1670:	002e1000 	eoreq	r1, lr, r0
    1674:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1678:	0b3b0b3a 	bleq	ec4368 <__Stack_Size+0xec3f68>
    167c:	0b200c27 	bleq	804720 <__Stack_Size+0x804320>
    1680:	2e110000 	wxorcs	wr0, wr1, wr0
    1684:	030c3f00 	movweq	r3, #52992	; 0xcf00
			&& ((getMillis() - g_ulTimeLastBatteryVoltage)
					< VOLTAGE_MAX_TIME_BETWEEN_CALLS))
		return g_wLastVoltage;
    1688:	3b0b3a0e 	blcc	2cfec8 <__Stack_Size+0x2cfac8>

	register u8 bLoopCnt = VOLTAGE_REPEAT_MAX;
	do {
		register word wVoltage = dxl_read_byte(1, AXM_PRESENT_VOLTAGE);
    168c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1690:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1694:	000a4001 	andeq	r4, sl, r1
		if (wVoltage != 0xffff) {
			g_ulTimeLastBatteryVoltage = getMillis();
    1698:	012e1200 	teqeq	lr, r0, lsl #4
			g_wLastVoltage = wVoltage * 10;
    169c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}

	register u8 bLoopCnt = VOLTAGE_REPEAT_MAX;
	do {
		register word wVoltage = dxl_read_byte(1, AXM_PRESENT_VOLTAGE);
		if (wVoltage != 0xffff) {
			g_ulTimeLastBatteryVoltage = getMillis();
    16a0:	0b3b0b3a 	bleq	ec4390 <__Stack_Size+0xec3f90>
			g_wLastVoltage = wVoltage * 10;
    16a4:	13490c27 	movtne	r0, #39975	; 0x9c27
		}
	} while (--bLoopCnt);

	return 0;

}
    16a8:	01120111 	tsteq	r2, r1, lsl r1
    16ac:	13010a40 	movwne	r0, #6720	; 0x1a40
    16b0:	34130000 	ldrcc	r0, [r3]
    16b4:	3a0e0300 	bcc	3822bc <__Stack_Size+0x381ebc>
// ReadMsgs
//==============================================================================

/* process messages coming from Commander
 *  format = 0xFF RIGHT_H RIGHT_V LEFT_H LEFT_V BUTTONS EXT CHECKSUM */
int Commander_ReadMsgs() {
    16b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	 }
	 #endif
	 */
	//while (CheckZBNewArrive() > 0) {
	while (1) {
		if (zgb_rx_check_arduino() == 1) {
    16bc:	00060213 	andeq	r0, r6, r3, lsl r2
    16c0:	002e1400 	eoreq	r1, lr, r0, lsl #8

			leftV = (signed char) (zgb_rx_data_right_V_());
    16c4:	01111331 	tsteq	r1, r1, lsr r3
    16c8:	0a400112 	beq	1001b18 <__Stack_Size+0x1001718>
			leftH = (signed char) (zgb_rx_data_right_H_());
    16cc:	1d150000 	ldcne	0, cr0, [r5]
    16d0:	11133100 	tstne	r3, r0, lsl #2
			rightV = (signed char) (zgb_rx_data_left_V_());
    16d4:	58011201 	stmdapl	r1, {r0, r9, ip}
    16d8:	000b590b 	andeq	r5, fp, fp, lsl #18
			rightH = (signed char) (zgb_rx_data_left_H_());
    16dc:	012e1600 	teqeq	lr, r0, lsl #12
    16e0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
			buttons = zgb_rx_data_buttons();
    16e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    16e8:	13490c27 	movtne	r0, #39975	; 0x9c27
			ext = zgb_rx_data_extra();
    16ec:	01120111 	tsteq	r2, r1, lsl r1
    16f0:	13010640 	movwne	r0, #5696	; 0x1640

	}

	return 0;

}
    16f4:	05170000 	ldreq	r0, [r7]
    16f8:	3a0e0300 	bcc	382300 <__Stack_Size+0x381f00>
    16fc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1700:	00060213 	andeq	r0, r6, r3, lsl r2
    1704:	00341800 	eorseq	r1, r4, r0, lsl #16
    1708:	0b3a0803 	bleq	e8371c <__Stack_Size+0xe8331c>
    170c:	1349053b 	movtne	r0, #38203	; 0x953b
    1710:	00000602 	andeq	r0, r0, r2, lsl #12

//==============================================================================
// This is The main code to input function to read inputs from the Commander and then
//process any commands.
//==============================================================================
void CommanderInputController_ControlInput(void) {
    1714:	0b000f19 	bleq	5380 <__Stack_Size+0x4f80>

	// See if we have a new command available...
	if (Commander_ReadMsgs() > 0) {
    1718:	0013490b 	andseq	r4, r3, fp, lsl #18
    171c:	012e1a00 	teqeq	lr, r0, lsl #20
    1720:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1724:	053b0b3a 	ldreq	r0, [fp, #-2874]!
		// If we receive a valid message than turn robot on...
		boolean fAdjustLegPositions = false;
		short sLegInitXZAdjust = 0;
		short sLegInitAngleAdjust = 0;

		if (!g_InControlState.fRobotOn) {
    1728:	01110c27 	tsteq	r1, r7, lsr #24
    172c:	0a400112 	beq	1001b7c <__Stack_Size+0x100177c>
			g_InControlState.fRobotOn = true;
    1730:	00001301 	andeq	r1, r0, r1, lsl #6
    1734:	0300341b 	movweq	r3, #1051	; 0x41b
		}

		// [SWITCH MODES]

		// Cycle through modes...
		if ((buttons & BUT_LT) && !(buttonsPrev & BUT_LT)) {
    1738:	3b0b3a08 	blcc	2cff60 <__Stack_Size+0x2cfb60>
    173c:	00134905 	andseq	r4, r3, r5, lsl #18
    1740:	002e1c00 	eoreq	r1, lr, r0, lsl #24
    1744:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1748:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    174c:	13490c27 	movtne	r0, #39975	; 0x9c27

			if (++ControlMode >= MODECNT) {
    1750:	01120111 	tsteq	r2, r1, lsl r1
    1754:	00000a40 	andeq	r0, r0, r0, asr #20
    1758:	3f012e1d 	svccc	0x00012e1d
    175c:	3a0e030c 	bcc	382394 <__Stack_Size+0x381f94>
				ControlMode = WALKMODE;    // cycled back around...
				Buzzed(50, 2000);
    1760:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1764:	1201110c 	andne	r1, r1, #3	; 0x3
    1768:	01064001 	tsteq	r6, r1
				Buzzed(50, 3000);
    176c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    1770:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}

			} else {
				Buzzed(50, 2000);
    1774:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1778:	0a021349 	beq	864a4 <__Stack_Size+0x860a4>
    177c:	2e1f0000 	wxorcs	wr0, wr15, wr0
			}
			if (ControlMode != SINGLELEGMODE)
    1780:	030c3f00 	movweq	r3, #52992	; 0xcf00
    1784:	3b0b3a0e 	blcc	2cffc4 <__Stack_Size+0x2cfbc4>
				g_InControlState.SelectedLeg = 255;
    1788:	110c2705 	tstne	ip, r5, lsl #14
    178c:	40011201 	andmi	r1, r1, r1, lsl #4
    1790:	20000006 	andcs	r0, r0, r6

		}

		//[Common functions]
		//Switch Balance mode on/off
		if ((buttons & BUT_L4) && !(buttonsPrev & BUT_L4)) {
    1794:	0c3f002e 	ldceq	0, cr0, [pc], #-184
    1798:	0b3a0e03 	bleq	e84fac <__Stack_Size+0xe84bac>
    179c:	0c270b3b 	stceq	11, cr0, [r7], #-236
    17a0:	01120111 	tsteq	r2, r1, lsl r1
    17a4:	00000640 	andeq	r0, r0, r0, asr #12
    17a8:	3f012e21 	svccc	0x00012e21

			g_InControlState.BalanceMode = !g_InControlState.BalanceMode;
    17ac:	3a0e030c 	bcc	3823e4 <__Stack_Size+0x381fe4>
    17b0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    17b4:	1113490c 	tstne	r3, ip, lsl #18
    17b8:	40011201 	andmi	r1, r1, r1, lsl #4
    17bc:	00130106 	andseq	r0, r3, r6, lsl #2
			if (g_InControlState.BalanceMode) {
    17c0:	00052200 	andeq	r2, r5, r0, lsl #4
				Buzzed(250, 1500);
    17c4:	0b3a0e03 	bleq	e84fd8 <__Stack_Size+0xe84bd8>
    17c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
			} else {
				Buzzed(100, 2000);
    17cc:	00000602 	andeq	r0, r0, r2, lsl #12
    17d0:	03003423 	movweq	r3, #1059	; 0x423
				Buzzed(50, 4000);
    17d4:	3b0b3a0e 	blcc	2d0014 <__Stack_Size+0x2cfc14>
    17d8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    17dc:	2400000a 	strcs	r0, [r0], #-10
			}
		}

		//Stand up, sit down
		if ((buttons & BUT_L5) && !(buttonsPrev & BUT_L5)) {
    17e0:	0c3f012e 	ldfeqs	f0, [pc], #-184
    17e4:	0b3a0e03 	bleq	e84ff8 <__Stack_Size+0xe84bf8>
    17e8:	0c270b3b 	stceq	11, cr0, [r7], #-236
    17ec:	01120111 	tsteq	r2, r1, lsl r1
    17f0:	13010640 	movwne	r0, #5696	; 0x1640
    17f4:	01250000 	teqeq	r5, r0
			if (g_BodyYOffset > 0)
    17f8:	01134901 	tsteq	r3, r1, lsl #18
    17fc:	26000013 	undefined
				g_BodyYOffset = 0;
    1800:	13490021 	movtne	r0, #36897	; 0x9021
    1804:	0000052f 	andeq	r0, r0, pc, lsr #10
			else
				g_BodyYOffset = 35;
			fAdjustLegPositions = true;
			g_fDynamicLegXZLength = false;
    1808:	49002127 	stmdbmi	r0, {r0, r1, r2, r5, r8, sp}
		//Stand up, sit down
		if ((buttons & BUT_L5) && !(buttonsPrev & BUT_L5)) {
			if (g_BodyYOffset > 0)
				g_BodyYOffset = 0;
			else
				g_BodyYOffset = 35;
    180c:	000b2f13 	andeq	r2, fp, r3, lsl pc
			fAdjustLegPositions = true;
			g_fDynamicLegXZLength = false;
    1810:	00342800 	eorseq	r2, r4, r0, lsl #16
    1814:	0b3a0e03 	bleq	e85028 <__Stack_Size+0xe84c28>

		// We will use L6 with the Right joystick to control both body offset as well as Speed...
		// We move each pass through this by a percentage of how far we are from center in each direction
		// We get feedback with height by seeing the robot move up and down.  For Speed, I put in sounds
		// which give an idea, but only for those whoes robot has a speaker
		int lx = leftH;
    1818:	13490b3b 	movtne	r0, #39739	; 0x9b3b
		int ly = leftV;
		if (buttons & BUT_L6) {
    181c:	0a020c3f 	beq	84920 <__Stack_Size+0x84520>

		// We will use L6 with the Right joystick to control both body offset as well as Speed...
		// We move each pass through this by a percentage of how far we are from center in each direction
		// We get feedback with height by seeing the robot move up and down.  For Speed, I put in sounds
		// which give an idea, but only for those whoes robot has a speaker
		int lx = leftH;
    1820:	34290000 	strtcc	r0, [r9]
    1824:	3a0e0300 	bcc	38242c <__Stack_Size+0x38202c>
		int ly = leftV;
    1828:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    182c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
		if (buttons & BUT_L6) {
    1830:	0000000c 	andeq	r0, r0, ip
    1834:	25011101 	strcs	r1, [r1, #-257]
			// raise or lower the robot on the joystick up /down
			// Maybe should have Min/Max
			int delta = rightV / 25;
    1838:	030b130e 	movweq	r1, #45838	; 0xb30e
    183c:	110e1b0e 	tstne	lr, lr, lsl #22
    1840:	10011201 	andne	r1, r1, r1, lsl #4
    1844:	02000006 	andeq	r0, r0, #6	; 0x6
    1848:	0b0b0024 	bleq	2c18e0 <__Stack_Size+0x2c14e0>
    184c:	0e030b3e 	vmoveq.16	d3[0], r0
			if (delta) {
    1850:	16030000 	strne	r0, [r3], -r0
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
    1854:	3a080300 	bcc	20245c <__Stack_Size+0x20205c>
    1858:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    185c:	04000013 	streq	r0, [r0], #-19
    1860:	13490035 	movtne	r0, #36917	; 0x9035
    1864:	04050000 	streq	r0, [r5]
    1868:	3a0b0b01 	bcc	2c4474 <__Stack_Size+0x2c4074>
    186c:	010b3b0b 	tsteq	fp, fp, lsl #22
    1870:	06000013 	undefined
    1874:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
			sLegInitAngleAdjust = ly / 8;
			lx = 0;
			ly = 0;

			// Likewise for Speed control
			delta = rightH / 16;   //
    1878:	00000d1c 	andeq	r0, r0, ip, lsl sp
    187c:	03002807 	movweq	r2, #2055	; 0x807
    1880:	000d1c08 	andeq	r1, sp, r8, lsl #24
    1884:	00160800 	andseq	r0, r6, r0, lsl #16
    1888:	0b3a0e03 	bleq	e8509c <__Stack_Size+0xe84c9c>
			if ((delta < 0) && g_InControlState.SpeedControl) {
    188c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1890:	13090000 	movwne	r0, #36864	; 0x9000
    1894:	3a0b0b01 	bcc	2c44a0 <__Stack_Size+0x2c40a0>
				if ((word)(-delta) < g_InControlState.SpeedControl)
    1898:	010b3b0b 	tsteq	fp, fp, lsl #22
					g_InControlState.SpeedControl += delta;
    189c:	0a000013 	beq	18f0 <__Stack_Size+0x14f0>
				else
					g_InControlState.SpeedControl = 0;
    18a0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    18a4:	0b3b0b3a 	bleq	ec4594 <__Stack_Size+0xec4194>

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}
			if ((delta > 0) && (g_InControlState.SpeedControl < 2000)) {
    18a8:	0a381349 	beq	e065d4 <__Stack_Size+0xe061d4>
    18ac:	0d0b0000 	stceq	0, cr0, [fp]
    18b0:	3a0e0300 	bcc	3824b8 <__Stack_Size+0x3820b8>
				g_InControlState.SpeedControl += delta;
				if (g_InControlState.SpeedControl > 2000)
    18b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					g_InControlState.SpeedControl = 0;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}
			if ((delta > 0) && (g_InControlState.SpeedControl < 2000)) {
				g_InControlState.SpeedControl += delta;
    18b8:	000a3813 	andeq	r3, sl, r3, lsl r8
				if (g_InControlState.SpeedControl > 2000)
					g_InControlState.SpeedControl = 2000;
    18bc:	00240c00 	eoreq	r0, r4, r0, lsl #24
    18c0:	0b3e0b0b 	bleq	f844f4 <__Stack_Size+0xf840f4>

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
    18c4:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    18c8:	030c3f01 	movweq	r3, #52993	; 0xcf01
    18cc:	3b0b3a0e 	blcc	2d010c <__Stack_Size+0x2cfd0c>
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
				fAdjustLegPositions = true;
			}

			// Also use right Horizontal to manually adjust the initial leg positions.
			sLegInitXZAdjust = lx / 10;        // play with this.
    18d0:	110c270b 	tstne	ip, fp, lsl #14
    18d4:	40011201 	andmi	r1, r1, r1, lsl #4
    18d8:	0013010a 	andseq	r0, r3, sl, lsl #2
    18dc:	00050e00 	andeq	r0, r5, r0, lsl #28
			sLegInitAngleAdjust = ly / 8;
    18e0:	0b3a0e03 	bleq	e850f4 <__Stack_Size+0xe84cf4>
    18e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    18e8:	00000a02 	andeq	r0, r0, r2, lsl #20
    18ec:	0300340f 	movweq	r3, #1039	; 0x40f
					g_InControlState.SpeedControl = 2000;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}

			rightH = 0; // don't walk when adjusting the speed here...
    18f0:	3b0b3a0e 	blcc	2d0130 <__Stack_Size+0x2cfd30>
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
				fAdjustLegPositions = true;
			}

			// Also use right Horizontal to manually adjust the initial leg positions.
			sLegInitXZAdjust = lx / 10;        // play with this.
    18f4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
					g_InControlState.SpeedControl = 2000;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}

			rightH = 0; // don't walk when adjusting the speed here...
    18f8:	10000006 	andne	r0, r0, r6
		}

		//[Walk functions]
		if (ControlMode == WALKMODE) {
    18fc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1900:	0b3b0b3a 	bleq	ec45f0 <__Stack_Size+0xec41f0>
    1904:	00001349 	andeq	r1, r0, r9, asr #6

			//Switch gates
			if (((buttons & BUT_R1) && !(buttonsPrev & BUT_R1))
    1908:	0b000f11 	bleq	5554 <__Stack_Size+0x5154>
    190c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1910:	012e1200 	teqeq	lr, r0, lsl #4
    1914:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1918:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    191c:	01110c27 	tsteq	r1, r7, lsr #24
    1920:	0a400112 	beq	1001d70 <__Stack_Size+0x1001970>
    1924:	00001301 	andeq	r1, r0, r1, lsl #6
    1928:	03000513 	movweq	r0, #1299	; 0x513
    192c:	3b0b3a0e 	blcc	2d016c <__Stack_Size+0x2cfd6c>
    1930:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1934:	1400000a 	strne	r0, [r0], #-10
    1938:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    193c:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1940:	06021349 	streq	r1, [r2], -r9, asr #6
    1944:	34150000 	ldrcc	r0, [r5]
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
    1948:	3a0e0300 	bcc	382550 <__Stack_Size+0x382150>
					&& abs(g_InControlState.TravelLength.x) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
    194c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1950:	000a0213 	andeq	r0, sl, r3, lsl r2
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
    1954:	012e1600 	teqeq	lr, r0, lsl #12
					&& abs(g_InControlState.TravelLength.x) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
    1958:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
					Buzzed(50, 2000);
    195c:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1960:	13490c27 	movtne	r0, #39975	; 0x9c27
    1964:	01120111 	tsteq	r2, r1, lsl r1
				} else {
					Buzzed(50, 2000);
    1968:	13010a40 	movwne	r0, #6720	; 0x1a40
    196c:	34170000 	ldrcc	r0, [r7]
    1970:	3a0e0300 	bcc	382578 <__Stack_Size+0x382178>
					Buzzed(50, 2250);
    1974:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1978:	18000013 	stmdane	r0, {r0, r1, r4}
					g_InControlState.GaitType = 0;
    197c:	0c3f012e 	ldfeqs	f0, [pc], #-184
    1980:	0b3a0e03 	bleq	e85194 <__Stack_Size+0xe84d94>
}

void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {
    1984:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
    1988:	01120111 	tsteq	r2, r1, lsl r1
    198c:	13010640 	movwne	r0, #5696	; 0x1640

		g_InControlState.gaitCur = APG[g_InControlState.GaitType];
    1990:	34190000 	ldrcc	r0, [r9]
    1994:	3a0e0300 	bcc	38259c <__Stack_Size+0x38219c>
    1998:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    199c:	00060213 	andeq	r0, r6, r3, lsl r2
    19a0:	002e1a00 	eoreq	r1, lr, r0, lsl #20
				}
				GaitSelect();
			}

			//Double leg lift height
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    19a4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    19a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    19ac:	13490c27 	movtne	r0, #39975	; 0x9c27
    19b0:	01120111 	tsteq	r2, r1, lsl r1
    19b4:	00000a40 	andeq	r0, r0, r0, asr #20
				Buzzed(50, 2000);
    19b8:	3f012e1b 	svccc	0x00012e1b
    19bc:	3a0e030c 	bcc	3825f4 <__Stack_Size+0x3821f4>
				HeightSpeedMode = (HeightSpeedMode + 1) & 0x3; // wrap around mode
    19c0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    19c4:	1113490c 	tstne	r3, ip, lsl #18
    19c8:	40011201 	andmi	r1, r1, r1, lsl #4
    19cc:	00130106 	andseq	r0, r3, r6, lsl #2
				DoubleTravelOn = HeightSpeedMode & 0x1;
    19d0:	012e1c00 	teqeq	lr, r0, lsl #24
    19d4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
				if (HeightSpeedMode & 0x2)
    19d8:	0b3b0b3a 	bleq	ec46c8 <__Stack_Size+0xec42c8>
    19dc:	01110c27 	tsteq	r1, r7, lsr #24
					g_InControlState.LegLiftHeight = 80;
    19e0:	06400112 	undefined
    19e4:	051d0000 	ldreq	r0, [sp]
				else
					g_InControlState.LegLiftHeight = 50;
			}

			// Switch between Walk method 1 && Walk method 2
			if ((buttons & BUT_R2) && !(buttonsPrev & BUT_R2)) {
    19e8:	3a0e0300 	bcc	3825f0 <__Stack_Size+0x3821f0>
    19ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    19f0:	00060213 	andeq	r0, r6, r3, lsl r2
    19f4:	11010000 	tstne	r1, r0
    19f8:	130e2501 	movwne	r2, #58625	; 0xe501

				if ((++bJoystickWalkMode) > 1)
    19fc:	1b0e030b 	blne	382630 <__Stack_Size+0x382230>
    1a00:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    1a04:	00061001 	andeq	r1, r6, r1

					bJoystickWalkMode = 0;
				Buzzed(50, 2000 + bJoystickWalkMode * 250);
    1a08:	00240200 	eoreq	r0, r4, r0, lsl #4
			// Switch between Walk method 1 && Walk method 2
			if ((buttons & BUT_R2) && !(buttonsPrev & BUT_R2)) {

				if ((++bJoystickWalkMode) > 1)

					bJoystickWalkMode = 0;
    1a0c:	0b3e0b0b 	bleq	f84640 <__Stack_Size+0xf84240>
				Buzzed(50, 2000 + bJoystickWalkMode * 250);
    1a10:	00000e03 	andeq	r0, r0, r3, lsl #28
    1a14:	03001603 	movweq	r1, #1539	; 0x603
    1a18:	3b0b3a08 	blcc	2d0240 <__Stack_Size+0x2cfe40>
    1a1c:	0013490b 	andseq	r4, r3, fp, lsl #18
			}

			//Walking
			switch (bJoystickWalkMode) {
    1a20:	00350400 	eorseq	r0, r5, r0, lsl #8
    1a24:	00001349 	andeq	r1, r0, r9, asr #6
    1a28:	0b010405 	bleq	42a44 <__Stack_Size+0x42644>
			case 0:
				g_InControlState.TravelLength.x = -lx;
    1a2c:	3b0b3a0b 	blcc	2d0260 <__Stack_Size+0x2cfe60>
    1a30:	0013010b 	andseq	r0, r3, fp, lsl #2
    1a34:	00280600 	eoreq	r0, r8, r0, lsl #12
				g_InControlState.TravelLength.z = -ly;
    1a38:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
				g_InControlState.TravelLength.y = -(rightH) / 4; //Right Stick Left/Right
				break;
			case 1:
				g_InControlState.TravelLength.z = (rightV); //Right Stick Up/Down
    1a3c:	28070000 	stmdacs	r7, {}
    1a40:	1c080300 	stcne	3, cr0, [r8], {0}
    1a44:	0800000d 	stmdaeq	r0, {r0, r2, r3}
				g_InControlState.TravelLength.y = -(rightH) / 4; //Right Stick Left/Right
    1a48:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1a4c:	0b3b0b3a 	bleq	ec473c <__Stack_Size+0xec433c>
    1a50:	00001349 	andeq	r1, r0, r9, asr #6
    1a54:	0b002409 	bleq	aa80 <__Stack_Size+0xa680>
    1a58:	000b3e0b 	andeq	r3, fp, fp, lsl #28
    1a5c:	01130a00 	tsteq	r3, r0, lsl #20
				break;

			}

			if (!DoubleTravelOn) {  //(Double travel length)
    1a60:	0b3a0b0b 	bleq	e84694 <__Stack_Size+0xe84294>
				g_InControlState.TravelLength.x =
    1a64:	1301053b 	movwne	r0, #5435	; 0x153b
    1a68:	0d0b0000 	stceq	0, cr0, [fp]
    1a6c:	3a080300 	bcc	202674 <__Stack_Size+0x202274>
						g_InControlState.TravelLength.x / 2;
				g_InControlState.TravelLength.z =
    1a70:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a74:	000a3813 	andeq	r3, sl, r3, lsl r8
    1a78:	000d0c00 	andeq	r0, sp, r0, lsl #24
			}

		}

		//[Translate functions]
		g_BodyYShift = 0;
    1a7c:	0b3a0e03 	bleq	e85290 <__Stack_Size+0xe84e90>
    1a80:	1349053b 	movtne	r0, #38203	; 0x953b
		if (ControlMode == TRANSLATEMODE) {
    1a84:	00000a38 	andeq	r0, r0, r8, lsr sl
    1a88:	3f012e0d 	svccc	0x00012e0d

		      g_InControlState.BodyPos.x =  SmoothControl(((lx)*2/3), g_InControlState.BodyPos.x, SmDiv);
    1a8c:	3a0e030c 	bcc	3826c4 <__Stack_Size+0x3822c4>
    1a90:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1a94:	2013490c 	andscs	r4, r3, ip, lsl #18
    1a98:	0013010b 	andseq	r0, r3, fp, lsl #2
    1a9c:	00340e00 	eorseq	r0, r4, r0, lsl #28
    1aa0:	0b3a0e03 	bleq	e852b4 <__Stack_Size+0xe84eb4>
    1aa4:	1349053b 	movtne	r0, #38203	; 0x953b
    1aa8:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
		      g_InControlState.BodyPos.z =  SmoothControl(((ly)*2/3), g_InControlState.BodyPos.z, SmDiv);
    1aac:	3a0e0301 	bcc	3826b8 <__Stack_Size+0x3822b8>
    1ab0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1ab4:	010b200c 	tsteq	fp, ip
    1ab8:	10000013 	andne	r0, r0, r3, lsl r0
    1abc:	08030034 	stmdaeq	r3, {r2, r4, r5}
		      g_InControlState.BodyRot1.y = SmoothControl(((rightH)*2), g_InControlState.BodyRot1.y, SmDiv);
    1ac0:	053b0b3a 	ldreq	r0, [fp, #-2874]!
		//[Translate functions]
		g_BodyYShift = 0;
		if (ControlMode == TRANSLATEMODE) {

		      g_InControlState.BodyPos.x =  SmoothControl(((lx)*2/3), g_InControlState.BodyPos.x, SmDiv);
		      g_InControlState.BodyPos.z =  SmoothControl(((ly)*2/3), g_InControlState.BodyPos.z, SmDiv);
    1ac4:	00001349 	andeq	r1, r0, r9, asr #6
		      g_InControlState.BodyRot1.y = SmoothControl(((rightH)*2), g_InControlState.BodyRot1.y, SmDiv);
    1ac8:	3f012e11 	svccc	0x00012e11
    1acc:	3a0e030c 	bcc	382704 <__Stack_Size+0x382304>
    1ad0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1ad4:	1201110c 	andne	r1, r1, #3	; 0x3


			//      g_InControlState.BodyPos.x = (lx)/2;
			//      g_InControlState.BodyPos.z = -(ly)/3;
			//      g_InControlState.BodyRot1.y = (rightH)*2;
			g_BodyYShift = (-(rightV) / 2);
    1ad8:	010a4001 	tsteq	sl, r1
    1adc:	12000013 	andne	r0, r0, #19	; 0x13
    1ae0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1ae4:	0b3b0b3a 	bleq	ec47d4 <__Stack_Size+0xec43d4>
    1ae8:	06021349 	streq	r1, [r2], -r9, asr #6
    1aec:	2e130000 	wxorcs	wr0, wr3, wr0
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
    1af0:	030c3f00 	movweq	r3, #52992	; 0xcf00
			g_InControlState.BodyRot1.x = (ly);
			g_InControlState.BodyRot1.y = (rightH) * 2;
    1af4:	3b0b3a0e 	blcc	2d0334 <__Stack_Size+0x2cff34>
    1af8:	110c270b 	tstne	ip, fp, lsl #14
			g_InControlState.BodyRot1.z = (lx);
			g_BodyYShift = (-(rightV) / 2);
    1afc:	40011201 	andmi	r1, r1, r1, lsl #4
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
			g_InControlState.BodyRot1.x = (ly);
			g_InControlState.BodyRot1.y = (rightH) * 2;
    1b00:	1400000a 	strne	r0, [r0], #-10
			g_BodyYShift = (-(rightV) / 2);
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
			g_InControlState.BodyRot1.x = (ly);
    1b04:	0c3f002e 	ldceq	0, cr0, [pc], #-184
			g_InControlState.BodyRot1.y = (rightH) * 2;
			g_InControlState.BodyRot1.z = (lx);
			g_BodyYShift = (-(rightV) / 2);
    1b08:	0b3a0e03 	bleq	e8531c <__Stack_Size+0xe84f1c>
    1b0c:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
    1b10:	01111349 	tsteq	r1, r9, asr #6
    1b14:	0a400112 	beq	1001f64 <__Stack_Size+0x1001b64>
    1b18:	2e150000 	wxorcs	wr0, wr5, wr0
		}

		//[Single leg functions]
#ifdef OPT_SINGLELEG
		if (ControlMode == SINGLELEGMODE) {
    1b1c:	030c3f01 	movweq	r3, #52993	; 0xcf01

			//Switch leg for single leg control
			if ((buttons & BUT_R1) && !(buttonsPrev & BUT_R1)) {
    1b20:	3b0b3a0e 	blcc	2d0360 <__Stack_Size+0x2cff60>
    1b24:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
    1b28:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1b2c:	010a4001 	tsteq	sl, r1
    1b30:	16000013 	undefined
				Buzzed(50,2000);
    1b34:	0c3f012e 	ldfeqs	f0, [pc], #-184
    1b38:	0b3a0e03 	bleq	e8534c <__Stack_Size+0xe84f4c>
    1b3c:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
				if (g_InControlState.SelectedLeg < (CNT_LEGS-1)) {
    1b40:	01120111 	tsteq	r2, r1, lsl r1
    1b44:	13010a40 	movwne	r0, #6720	; 0x1a40
					g_InControlState.SelectedLeg = g_InControlState.SelectedLeg + 1;
				} else {
					g_InControlState.SelectedLeg = 0;
    1b48:	05170000 	ldreq	r0, [r7]
		if (ControlMode == SINGLELEGMODE) {

			//Switch leg for single leg control
			if ((buttons & BUT_R1) && !(buttonsPrev & BUT_R1)) {
				Buzzed(50,2000);
				if (g_InControlState.SelectedLeg < (CNT_LEGS-1)) {
    1b4c:	3a0e0300 	bcc	382754 <__Stack_Size+0x382354>
					g_InControlState.SelectedLeg = g_InControlState.SelectedLeg + 1;
    1b50:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			   g_InControlState.SLLeg.x= (signed char)((int)((int)lx+128)/2); //Left Stick Right/Left
      		   g_InControlState.SLLeg.y= (signed char)((int)((int)rightV+128)/10); //Right Stick Up/Down
		       g_InControlState.SLLeg.z = (signed char)((int)((int)ly+128)/2); //Left Stick Up/Down

#else
			g_InControlState.SLLeg.x = lx; //Left Stick Right/Left
    1b54:	000a0213 	andeq	r0, sl, r3, lsl r2
			g_InControlState.SLLeg.y = rightV / 3 - 20;//Right Stick Up/Down
    1b58:	00051800 	andeq	r1, r5, r0, lsl #16
    1b5c:	0b3a0e03 	bleq	e85370 <__Stack_Size+0xe84f70>
    1b60:	1349053b 	movtne	r0, #38203	; 0x953b
    1b64:	00000602 	andeq	r0, r0, r2, lsl #12
    1b68:	03003419 	movweq	r3, #1049	; 0x419
			g_InControlState.SLLeg.z = ly;//Left Stick Up/Down

#endif
			// Hold single leg in place
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    1b6c:	3b0b3a0e 	blcc	2d03ac <__Stack_Size+0x2cffac>
    1b70:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1b74:	1a000006 	bne	1b94 <__Stack_Size+0x1794>
      		   g_InControlState.SLLeg.y= (signed char)((int)((int)rightV+128)/10); //Right Stick Up/Down
		       g_InControlState.SLLeg.z = (signed char)((int)((int)ly+128)/2); //Left Stick Up/Down

#else
			g_InControlState.SLLeg.x = lx; //Left Stick Right/Left
			g_InControlState.SLLeg.y = rightV / 3 - 20;//Right Stick Up/Down
    1b78:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
			g_InControlState.SLLeg.z = ly;//Left Stick Up/Down

#endif
			// Hold single leg in place
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    1b7c:	01120111 	tsteq	r2, r1, lsl r1
    1b80:	13010a40 	movwne	r0, #6720	; 0x1a40
    1b84:	341b0000 	ldrcc	r0, [fp]
				Buzzed(50,2000);
    1b88:	02133100 	andseq	r3, r3, #0	; 0x0
    1b8c:	1c000006 	stcne	0, cr0, [r0], {6}
				g_InControlState.fSLHold = !g_InControlState.fSLHold;
    1b90:	0c3f012e 	ldfeqs	f0, [pc], #-184
    1b94:	0b3a0e03 	bleq	e853a8 <__Stack_Size+0xe84fa8>
    1b98:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
    1b9c:	01111349 	tsteq	r1, r9, asr #6
			}
		}
#endif

		//Calculate walking time delay
		g_InControlState.InputTimeDelay = 128- max(max(abs(lx), abs(ly)), abs(rightH));
    1ba0:	06400112 	undefined
    1ba4:	00001301 	andeq	r1, r0, r1, lsl #6
    1ba8:	31011d1d 	tstcc	r1, sp, lsl sp
    1bac:	58065513 	stmdapl	r6, {r0, r1, r4, r8, sl, ip, lr}
    1bb0:	0105590b 	tsteq	r5, fp, lsl #18
    1bb4:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    1bb8:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    1bbc:	341f0000 	ldrcc	r0, [pc], #0	; 1bc4 <__Stack_Size+0x17c4>
    1bc0:	00133100 	andseq	r3, r3, r0, lsl #2
    1bc4:	011d2000 	tsteq	sp, r0
    1bc8:	06551331 	undefined
    1bcc:	05590b58 	ldrbeq	r0, [r9, #-2904]
    1bd0:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}

		//Calculate g_InControlState.BodyPos.y
		g_InControlState.BodyPos.y = max(g_BodyYOffset + g_BodyYShift, 0);
    1bd4:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1bd8:	3b0b3a0e 	blcc	2d0418 <__Stack_Size+0x2d0018>
    1bdc:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1be0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1be4:	01064001 	tsteq	r6, r1
    1be8:	22000013 	andcs	r0, r0, #19	; 0x13

		if (sLegInitXZAdjust || sLegInitAngleAdjust) {
    1bec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1bf0:	0b3b0b3a 	bleq	ec48e0 <__Stack_Size+0xec44e0>
			// User asked for manual leg adjustment - only do when we have finished any previous adjustment

			if (!g_InControlState.ForceGaitStepCnt) {
    1bf4:	06021349 	streq	r1, [r2], -r9, asr #6
				if (sLegInitXZAdjust)
    1bf8:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
					g_fDynamicLegXZLength = true;
    1bfc:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1c00:	3b0b3a0e 	blcc	2d0440 <__Stack_Size+0x2d0040>

				sLegInitXZAdjust += GetLegsXZLength(); // Add on current length to our adjustment...
    1c04:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1c08:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
				// Handle maybe change angles...
				if (sLegInitAngleAdjust)
					RotateLegInitAngles(sLegInitAngleAdjust);

				// Give system time to process previous calls
				AdjustLegPositions(sLegInitXZAdjust);
    1c0c:	00064001 	andeq	r4, r6, r1
			}
		}

		if (fAdjustLegPositions && !g_fDynamicLegXZLength)
    1c10:	11010000 	tstne	r1, r0
    1c14:	130e2501 	movwne	r2, #58625	; 0xe501
    1c18:	1b0e030b 	blne	38284c <__Stack_Size+0x38244c>
			AdjustLegPositionsToBodyHeight(); // Put main workings into main program file
    1c1c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
		// Save away the buttons state as to not process the same press twice.
		buttonsPrev = buttons;
    1c20:	00061001 	andeq	r1, r6, r1
    1c24:	00240200 	eoreq	r0, r4, r0, lsl #4
		extPrev = ext;
    1c28:	0b3e0b0b 	bleq	f8485c <__Stack_Size+0xf8445c>
    1c2c:	00000e03 	andeq	r0, r0, r3, lsl #28
		g_ulLastMsgTime = getMillis();
    1c30:	03001603 	movweq	r1, #1539	; 0x603
    1c34:	3b0b3a08 	blcc	2d045c <__Stack_Size+0x2d005c>
	} else {
		// We did not receive a valid packet.  check for a timeout to see if we should turn robot off...
		if (g_InControlState.fRobotOn) {
    1c38:	0013490b 	andseq	r4, r3, fp, lsl #18
			if ((getMillis() - g_ulLastMsgTime) > ARBOTIX_TO)
    1c3c:	00350400 	eorseq	r0, r5, r0, lsl #8
    1c40:	00001349 	andeq	r1, r0, r9, asr #6
    1c44:	0b010405 	bleq	42c60 <__Stack_Size+0x42860>
    1c48:	3b0b3a0b 	blcc	2d047c <__Stack_Size+0x2d007c>
    1c4c:	0013010b 	andseq	r0, r3, fp, lsl #2
				CommanderTurnRobotOff();
    1c50:	00280600 	eoreq	r0, r8, r0, lsl #12
		}
	}

}
    1c54:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    1c58:	16070000 	strne	r0, [r7], -r0
    1c5c:	3a0e0300 	bcc	382864 <__Stack_Size+0x382464>
    1c60:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c64:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1c68:	0b0b0024 	bleq	2c1d00 <__Stack_Size+0x2c1900>
    1c6c:	00000b3e 	andeq	r0, r0, lr, lsr fp
    1c70:	0b011309 	bleq	4689c <__Stack_Size+0x4649c>
    1c74:	3b0b3a0b 	blcc	2d04a8 <__Stack_Size+0x2d00a8>
    1c78:	00130105 	andseq	r0, r3, r5, lsl #2
    1c7c:	000d0a00 	andeq	r0, sp, r0, lsl #20
    1c80:	0b3a0803 	bleq	e83c94 <__Stack_Size+0xe83894>
    1c84:	1349053b 	movtne	r0, #38203	; 0x953b
    1c88:	00000a38 	andeq	r0, r0, r8, lsr sl
    1c8c:	03000d0b 	movweq	r0, #3339	; 0xd0b
    1c90:	3b0b3a0e 	blcc	2d04d0 <__Stack_Size+0x2d00d0>
    1c94:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1c98:	0c00000a 	stceq	0, cr0, [r0], {10}
    1c9c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1ca0:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1ca4:	00001349 	andeq	r1, r0, r9, asr #6
    1ca8:	4901010d 	stmdbmi	r1, {r0, r2, r3, r8}
    1cac:	00130113 	andseq	r0, r3, r3, lsl r1

extern void setupPhoenix(void);
extern void readSensors(void);


int Big_main(void) {
    1cb0:	00210e00 	eoreq	r0, r1, r0, lsl #28

	// Must include this line in all programs using "cm530.h/.c"
	SysInit();
    1cb4:	0b2f1349 	bleq	bc69e0 <__Stack_Size+0xbc65e0>
	setupPhoenix();
    1cb8:	130f0000 	movwne	r0, #61440	; 0xf000
			TotalYBal1 = 0;
			TotalZBal1 = 0;

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1cbc:	3a0b0b01 	bcc	2c48c8 <__Stack_Size+0x2c44c8>

	while (1){
		while (1) {
			//Start time
			unsigned long lTimeWaitEnd;
			lTimerStart = getMillis();
    1cc0:	010b3b0b 	tsteq	fp, fp, lsl #22
    1cc4:	10000013 	andne	r0, r0, r3, lsl r0
    1cc8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
#ifdef MILLIS
			PrintString("Barebones lTimerStart ");
			Printu32d(lTimerStart);
			PrintString("\n");
#endif
			DoBackgroundProcess();
    1ccc:	0b3b0b3a 	bleq	ec49bc <__Stack_Size+0xec45bc>
			//Read input
			CheckVoltage();        // check our voltages...
    1cd0:	0a381349 	beq	e069fc <__Stack_Size+0xe065fc>
			if (!g_fLowVoltageShutdown) {
    1cd4:	2e110000 	wxorcs	wr0, wr1, wr0
    1cd8:	030c3f01 	movweq	r3, #52993	; 0xcf01
				CommanderInputController_ControlInput();
    1cdc:	3b0b3a0e 	blcc	2d051c <__Stack_Size+0x2d011c>
			}
			WriteOutputs();        // Write Outputs
			//Single leg control
			SingleLegControl();
    1ce0:	110c270b 	tstne	ip, fp, lsl #14
			DoBackgroundProcess();
    1ce4:	40011201 	andmi	r1, r1, r1, lsl #4

			//Gait
			GaitSeq();
    1ce8:	00130106 	andseq	r0, r3, r6, lsl #2

			DoBackgroundProcess();
    1cec:	00051200 	andeq	r1, r5, r0, lsl #4

			//Balance calculations
			TotalTransX = 0;     //reset values used for calculation of balance
    1cf0:	0b3a0e03 	bleq	e85504 <__Stack_Size+0xe85104>
    1cf4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
			TotalTransZ = 0;
    1cf8:	00000a02 	andeq	r0, r0, r2, lsl #20
			TotalTransY = 0;
    1cfc:	03000513 	movweq	r0, #1299	; 0x513
    1d00:	3b0b3a0e 	blcc	2d0540 <__Stack_Size+0x2d0140>
			TotalXBal1 = 0;
    1d04:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			TotalYBal1 = 0;
    1d08:	14000006 	strne	r0, [r0], #-6
    1d0c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			TotalZBal1 = 0;
    1d10:	0b3b0b3a 	bleq	ec4a00 <__Stack_Size+0xec4600>

			if (g_InControlState.BalanceMode) {
    1d14:	0a021349 	beq	86a40 <__Stack_Size+0x86640>
    1d18:	34150000 	ldrcc	r0, [r5]
    1d1c:	3a080300 	bcc	202924 <__Stack_Size+0x202524>

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1d20:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}

					DoBackgroundProcess();
					BalCalcOneLeg(-LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d24:	00060213 	andeq	r0, r6, r3, lsl r2
    1d28:	00341600 	eorseq	r1, r4, r0, lsl #12
    1d2c:	0b3a0e03 	bleq	e85540 <__Stack_Size+0xe85140>

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs

					DoBackgroundProcess();
    1d30:	13490b3b 	movtne	r0, #39739	; 0x9b3b
					BalCalcOneLeg(-LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d34:	0f170000 	svceq	0x00170000
    1d38:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1d3c:	18000013 	stmdane	r0, {r0, r1, r4}
    1d40:	0c3f012e 	ldfeqs	f0, [pc], #-184
    1d44:	0b3a0e03 	bleq	e85558 <__Stack_Size+0xe85158>
    1d48:	0c270b3b 	stceq	11, cr0, [r7], #-236
    1d4c:	01120111 	tsteq	r2, r1, lsl r1
    1d50:	13010a40 	movwne	r0, #6720	; 0x1a40
    1d54:	2e190000 	wxorcs	wr0, wr9, wr0
    1d58:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1d5c:	3b0b3a0e 	blcc	2d059c <__Stack_Size+0x2d019c>
    1d60:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1d64:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1d68:	010a4001 	tsteq	sl, r1
    1d6c:	1a000013 	bne	1dc0 <__Stack_Size+0x19c0>
			TotalYBal1 = 0;
			TotalZBal1 = 0;

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1d70:	0c3f012e 	ldfeqs	f0, [pc], #-184
    1d74:	0b3a0e03 	bleq	e85588 <__Stack_Size+0xe85188>
    1d78:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
    1d7c:	01111349 	tsteq	r1, r9, asr #6
    1d80:	0a400112 	beq	10021d0 <__Stack_Size+0x1001dd0>
					DoBackgroundProcess();
					BalCalcOneLeg(LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d84:	00001301 	andeq	r1, r0, r1, lsl #6
    1d88:	0300051b 	movweq	r0, #1307	; 0x51b
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
					DoBackgroundProcess();
    1d8c:	3b0b3a0e 	blcc	2d05cc <__Stack_Size+0x2d01cc>
					BalCalcOneLeg(LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d90:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1d94:	1c000006 	stcne	0, cr0, [r0], {6}
    1d98:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1d9c:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1da0:	0a021349 	beq	86acc <__Stack_Size+0x866cc>
    1da4:	341d0000 	ldrcc	r0, [sp]
    1da8:	3a0e0300 	bcc	3829b0 <__Stack_Size+0x3825b0>
    1dac:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1db0:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    1db4:	0c3f012e 	ldfeqs	f0, [pc], #-184
    1db8:	0b3a0e03 	bleq	e855cc <__Stack_Size+0xe851cc>
    1dbc:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
    1dc0:	01120111 	tsteq	r2, r1, lsl r1
    1dc4:	13010a40 	movwne	r0, #6720	; 0x1a40
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
    1dc8:	341f0000 	ldrcc	r0, [pc], #0	; 1dd0 <__Stack_Size+0x19d0>
    1dcc:	3a080300 	bcc	2029d4 <__Stack_Size+0x2025d4>
    1dd0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
							LegPosZ[LegIndex] + GaitPosZ[LegIndex],
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}
				BalanceBody();
    1dd4:	000a0213 	andeq	r0, sl, r3, lsl r2
			}

			//Reset IKsolution indicators
			IKSolution = 0;
    1dd8:	00342000 	eorseq	r2, r4, r0
    1ddc:	0b3a0e03 	bleq	e855f0 <__Stack_Size+0xe851f0>
			IKSolutionWarning = 0;
			IKSolutionError = 0;

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
    1de0:	1349053b 	movtne	r0, #38203	; 0x953b
			}

			//Reset IKsolution indicators
			IKSolution = 0;
			IKSolutionWarning = 0;
			IKSolutionError = 0;
    1de4:	00000602 	andeq	r0, r0, r2, lsl #12
    1de8:	3f012e21 	svccc	0x00012e21

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
				DoBackgroundProcess();
    1dec:	3a0e030c 	bcc	382a24 <__Stack_Size+0x382624>
				BodyFK(
    1df0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1df4:	1201110c 	andne	r1, r1, #3	; 0x3
    1df8:	01064001 	tsteq	r6, r1
    1dfc:	22000013 	andcs	r0, r0, #19	; 0x13
    1e00:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1e04:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1e08:	00001349 	andeq	r1, r0, r9, asr #6
    1e0c:	3f002e23 	svccc	0x00002e23
    1e10:	3a0e030c 	bcc	382a48 <__Stack_Size+0x382648>
    1e14:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1e18:	1201110c 	andne	r1, r1, #3	; 0x3
    1e1c:	00064001 	andeq	r4, r6, r1
    1e20:	012e2400 	teqeq	lr, r0, lsl #8
    1e24:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1e28:	0b3b0b3a 	bleq	ec4b18 <__Stack_Size+0xec4718>
    1e2c:	01110c27 	tsteq	r1, r7, lsr #24
    1e30:	06400112 	undefined
    1e34:	01000000 	tsteq	r0, r0
    1e38:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1e3c:	0e030b13 	vmoveq.32	d3[0], r0
    1e40:	01110e1b 	tsteq	r1, fp, lsl lr
    1e44:	06100112 	undefined
    1e48:	24020000 	strcs	r0, [r2]
    1e4c:	3e0b0b00 	fmacdcc	d0, d11, d0
						+ GaitPosZ[LegIndex] - TotalTransZ,
						LegPosY[LegIndex] + g_InControlState.BodyPos.y
						+ GaitPosY[LegIndex] - TotalTransY,
						GaitRotY[LegIndex], LegIndex);

				LegIK(
    1e50:	000e030b 	andeq	r0, lr, fp, lsl #6
    1e54:	00160300 	andseq	r0, r6, r0, lsl #6
    1e58:	0b3a0803 	bleq	e83e6c <__Stack_Size+0xe83a6c>
    1e5c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1e60:	35040000 	strcc	r0, [r4]
    1e64:	00134900 	andseq	r4, r3, r0, lsl #18
    1e68:	00260500 	eoreq	r0, r6, r0, lsl #10
    1e6c:	00001349 	andeq	r1, r0, r9, asr #6
    1e70:	0b010406 	bleq	42e90 <__Stack_Size+0x42a90>
    1e74:	3b0b3a0b 	blcc	2d06a8 <__Stack_Size+0x2d02a8>
    1e78:	0013010b 	andseq	r0, r3, fp, lsl #2
    1e7c:	00280700 	eoreq	r0, r8, r0, lsl #14
    1e80:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    1e84:	28080000 	stmdacs	r8, {}
    1e88:	1c080300 	stcne	3, cr0, [r8], {0}
    1e8c:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    1e90:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1e94:	0b3b0b3a 	bleq	ec4b84 <__Stack_Size+0xec4784>
    1e98:	00001349 	andeq	r1, r0, r9, asr #6
    1e9c:	0b00240a 	bleq	aecc <__Stack_Size+0xaacc>
    1ea0:	000b3e0b 	andeq	r3, fp, fp, lsl #28
    1ea4:	01130b00 	tsteq	r3, r0, lsl #22
    1ea8:	0b3a050b 	bleq	e832dc <__Stack_Size+0xe82edc>
    1eac:	1301053b 	movwne	r0, #5435	; 0x153b
    1eb0:	0d0c0000 	stceq	0, cr0, [ip]
    1eb4:	3a0e0300 	bcc	382abc <__Stack_Size+0x3826bc>
    1eb8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ebc:	000a3813 	andeq	r3, sl, r3, lsl r8
    1ec0:	000d0d00 	andeq	r0, sp, r0, lsl #26
			IKSolutionWarning = 0;
			IKSolutionError = 0;

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
    1ec4:	0b3a0803 	bleq	e83ed8 <__Stack_Size+0xe83ad8>
    1ec8:	1349053b 	movtne	r0, #38203	; 0x953b
    1ecc:	00000a38 	andeq	r0, r0, r8, lsr sl
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Do IK for all Left legs
			for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) {
    1ed0:	4901010e 	stmdbmi	r1, {r1, r2, r3, r8}
    1ed4:	00130113 	andseq	r0, r3, r3, lsl r1
				DoBackgroundProcess();
    1ed8:	00210f00 	eoreq	r0, r1, r0, lsl #30
				BodyFK(
    1edc:	0b2f1349 	bleq	bc6c08 <__Stack_Size+0xbc6808>
    1ee0:	13100000 	tstne	r0, #0	; 0x0
    1ee4:	3a0b0b01 	bcc	2c4af0 <__Stack_Size+0x2c46f0>
    1ee8:	01053b0b 	tsteq	r5, fp, lsl #22
    1eec:	11000013 	tstne	r0, r3, lsl r0
    1ef0:	0b0b0113 	bleq	2c2344 <__Stack_Size+0x2c1f44>
    1ef4:	0b3b0b3a 	bleq	ec4be4 <__Stack_Size+0xec47e4>
    1ef8:	00001301 	andeq	r1, r0, r1, lsl #6
    1efc:	03000d12 	movweq	r0, #3346	; 0xd12
    1f00:	3b0b3a0e 	blcc	2d0740 <__Stack_Size+0x2d0340>
    1f04:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1f08:	1300000a 	movwne	r0, #10	; 0xa
    1f0c:	0c3f012e 	ldfeqs	f0, [pc], #-184
    1f10:	0b3a0e03 	bleq	e85724 <__Stack_Size+0xe85324>
    1f14:	0c270b3b 	stceq	11, cr0, [r7], #-236
    1f18:	01120111 	tsteq	r2, r1, lsl r1
    1f1c:	13010a40 	movwne	r0, #6720	; 0x1a40
    1f20:	34140000 	ldrcc	r0, [r4]
    1f24:	3a0e0300 	bcc	382b2c <__Stack_Size+0x38272c>
    1f28:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f2c:	000a0213 	andeq	r0, sl, r3, lsl r2
    1f30:	00341500 	eorseq	r1, r4, r0, lsl #10
    1f34:	0b3a0e03 	bleq	e85748 <__Stack_Size+0xe85348>
    1f38:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1f3c:	05160000 	ldreq	r0, [r6]
    1f40:	3a0e0300 	bcc	382b48 <__Stack_Size+0x382748>
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z
						+ GaitPosZ[LegIndex] - TotalTransZ,
						LegPosY[LegIndex] + g_InControlState.BodyPos.y
						+ GaitPosY[LegIndex] - TotalTransY,
						GaitRotY[LegIndex], LegIndex);
				LegIK(
    1f44:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f48:	00060213 	andeq	r0, r6, r3, lsl r2
    1f4c:	012e1700 	teqeq	lr, r0, lsl #14
    1f50:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1f54:	0b3b0b3a 	bleq	ec4c44 <__Stack_Size+0xec4844>
    1f58:	01110c27 	tsteq	r1, r7, lsr #24
    1f5c:	06400112 	undefined
    1f60:	00001301 	andeq	r1, r0, r1, lsl #6
    1f64:	03003418 	movweq	r3, #1048	; 0x418
    1f68:	3b0b3a0e 	blcc	2d07a8 <__Stack_Size+0x2d03a8>
    1f6c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1f70:	19000006 	stmdbne	r0, {r1, r2}
    1f74:	0b0b000f 	bleq	2c1fb8 <__Stack_Size+0x2c1bb8>
    1f78:	00001349 	andeq	r1, r0, r9, asr #6
    1f7c:	0300051a 	movweq	r0, #1306	; 0x51a
    1f80:	3b0b3a0e 	blcc	2d07c0 <__Stack_Size+0x2d03c0>
    1f84:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1f88:	1b00000a 	blne	1fb8 <__Stack_Size+0x1bb8>
    1f8c:	0c3f002e 	ldceq	0, cr0, [pc], #-184
    1f90:	0b3a0e03 	bleq	e857a4 <__Stack_Size+0xe853a4>
    1f94:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
    1f98:	01111349 	tsteq	r1, r9, asr #6
    1f9c:	0a400112 	beq	10023ec <__Stack_Size+0x1001fec>
    1fa0:	2e1c0000 	wxorcs	wr0, wr12, wr0
    1fa4:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1fa8:	3b0b3a0e 	blcc	2d07e8 <__Stack_Size+0x2d03e8>
    1fac:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
    1fb0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1fb4:	010a4001 	tsteq	sl, r1
    1fb8:	1d000013 	stcne	0, cr0, [r0, #-76]
    1fbc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Do IK for all Left legs
			for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) {
    1fc0:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1fc4:	06021349 	streq	r1, [r2], -r9, asr #6
    1fc8:	341e0000 	ldrcc	r0, [lr]
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Check mechanical limits
			CheckAngles();
    1fcc:	3a0e0300 	bcc	382bd4 <__Stack_Size+0x3827d4>

			//Drive Servos
			if (g_InControlState.fRobotOn) {
    1fd0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1fd4:	1f000013 	svcne	0x00000013
    1fd8:	08030034 	stmdaeq	r3, {r2, r4, r5}
				if (g_InControlState.fRobotOn && !g_InControlState.fPrev_RobotOn) {
					// MSound(3, 60, 2000, 80, 2250, 100, 2500);
					Buzzed(30, 2000);
    1fdc:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1fe0:	0a021349 	beq	86d0c <__Stack_Size+0x8690c>
    1fe4:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
					Buzzed(80, 2250);
    1fe8:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1fec:	3b0b3a0e 	blcc	2d082c <__Stack_Size+0x2d042c>
					Buzzed(100, 2500);
    1ff0:	110c2705 	tstne	ip, r5, lsl #14
    1ff4:	40011201 	andmi	r1, r1, r1, lsl #4
    1ff8:	0013010a 	andseq	r0, r3, sl, lsl #2

				}

				//Calculate Servo Move time
				if ((abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
    1ffc:	00052100 	andeq	r2, r5, r0, lsl #2
    2000:	0b3a0e03 	bleq	e85814 <__Stack_Size+0xe85414>
    2004:	1349053b 	movtne	r0, #38203	; 0x953b
    2008:	00000a02 	andeq	r0, r0, r2, lsl #20
    200c:	3f002e22 	svccc	0x00002e22
    2010:	3a0e030c 	bcc	382c48 <__Stack_Size+0x382848>
    2014:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2018:	1201110c 	andne	r1, r1, #3	; 0x3
    201c:	000a4001 	andeq	r4, sl, r1
    2020:	00342300 	eorseq	r2, r4, r0, lsl #6
    2024:	0b3a0e03 	bleq	e85838 <__Stack_Size+0xe85438>
						|| (abs(g_InControlState.TravelLength.z) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.y*2) > cTravelDeadZone)) {
					ServoMoveTime = g_InControlState.gaitCur.NomGaitSpeed
    2028:	1349053b 	movtne	r0, #38203	; 0x953b
    202c:	00000a02 	andeq	r0, r0, r2, lsl #20
    2030:	3f012e24 	svccc	0x00012e24
    2034:	3a0e030c 	bcc	382c6c <__Stack_Size+0x38286c>
    2038:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
							+ (g_InControlState.InputTimeDelay * 2)
							+ g_InControlState.SpeedControl;

					//Add aditional delay when Balance mode is on
					if (g_InControlState.BalanceMode)
    203c:	1201110c 	andne	r1, r1, #3	; 0x3

				//Calculate Servo Move time
				if ((abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.z) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.y*2) > cTravelDeadZone)) {
					ServoMoveTime = g_InControlState.gaitCur.NomGaitSpeed
    2040:	01064001 	tsteq	r6, r1
							+ (g_InControlState.InputTimeDelay * 2)
							+ g_InControlState.SpeedControl;

					//Add aditional delay when Balance mode is on
					if (g_InControlState.BalanceMode)
						ServoMoveTime = ServoMoveTime + BALANCE_DELAY;
    2044:	25000013 	strcs	r0, [r0, #-19]
    2048:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
				} else
					//Movement speed excl. Walking
					ServoMoveTime = 200 + g_InControlState.SpeedControl;
    204c:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    2050:	06021349 	streq	r1, [r2], -r9, asr #6
    2054:	34260000 	strtcc	r0, [r6]

				// note we broke up the servo driver into start/commit that way we can output all of the servo information
				// before we wait and only have the termination information to output after the wait.  That way we hopefully
				// be more accurate with our timings...
				DoBackgroundProcess();
    2058:	3a080300 	bcc	202c60 <__Stack_Size+0x202860>
				StartUpdateServos();
    205c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}

				// See if we need to sync our processor with the servo driver while walking to ensure the prev is completed
				//before sending the next one

				// Finding any incident of GaitPos/Rot <>0:
				for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    2060:	27000013 	smladcs	r0, r3, r0, r0
					if ((GaitPosX[LegIndex] > cGPlimit)
    2064:	0c3f002e 	ldceq	0, cr0, [pc], #-184
    2068:	0b3a0e03 	bleq	e8587c <__Stack_Size+0xe8547c>
    206c:	0c270b3b 	stceq	11, cr0, [r7], #-236
    2070:	01111349 	tsteq	r1, r9, asr #6
    2074:	06400112 	undefined
    2078:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
    207c:	030c3f00 	movweq	r3, #52992	; 0xcf00
    2080:	3b0b3a0e 	blcc	2d08c0 <__Stack_Size+0x2d04c0>
    2084:	110c270b 	tstne	ip, fp, lsl #14
    2088:	40011201 	andmi	r1, r1, r1, lsl #4
    208c:	00000006 	andeq	r0, r0, r6
    2090:	25011101 	strcs	r1, [r1, #-257]
    2094:	030b130e 	movweq	r1, #45838	; 0xb30e
    2098:	110e1b0e 	tstne	lr, lr, lsl #22
    209c:	10011201 	andne	r1, r1, r1, lsl #4
							|| (GaitPosZ[LegIndex] > cGPlimit)
							|| (GaitPosZ[LegIndex] < -cGPlimit)
							|| (GaitRotY[LegIndex] > cGPlimit)
							|| (GaitRotY[LegIndex] < -cGPlimit)) {

						bExtraCycle = g_InControlState.gaitCur.NrLiftedPos + 1;	//For making sure that we are using timed move until all legs are down
    20a0:	02000006 	andeq	r0, r0, #6	; 0x6
    20a4:	0b0b0024 	bleq	2c213c <__Stack_Size+0x2c1d3c>
    20a8:	0e030b3e 	vmoveq.16	d3[0], r0

				// See if we need to sync our processor with the servo driver while walking to ensure the prev is completed
				//before sending the next one

				// Finding any incident of GaitPos/Rot <>0:
				for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    20ac:	16030000 	strne	r0, [r3], -r0
    20b0:	3a080300 	bcc	202cb8 <__Stack_Size+0x2028b8>

						bExtraCycle = g_InControlState.gaitCur.NrLiftedPos + 1;	//For making sure that we are using timed move until all legs are down
						break;
					}
				}
				if (bExtraCycle > 0) {
    20b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					bExtraCycle--;
    20b8:	04000013 	streq	r0, [r0], #-19
    20bc:	13490035 	movtne	r0, #36917	; 0x9035
					fWalking = !(bExtraCycle == 0);
    20c0:	04050000 	streq	r0, [r5]
    20c4:	3a0b0b01 	bcc	2c4cd0 <__Stack_Size+0x2c48d0>

					//Get endtime and calculate wait time
					lTimeWaitEnd = lTimerStart + PrevServoMoveTime;
    20c8:	010b3b0b 	tsteq	fp, fp, lsl #22
    20cc:	06000013 	undefined
    20d0:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
					PrintString("\n");
#endif
					//DebugWrite(A1, HIGH);
					do {
						// Wait the appropriate time, call any background process while waiting...
						DoBackgroundProcess();
    20d4:	00000d1c 	andeq	r0, r0, ip, lsl sp
					} while (getMillis() < lTimeWaitEnd);
    20d8:	03002807 	movweq	r2, #2055	; 0x807
    20dc:	000d1c08 	andeq	r1, sp, r8, lsl #24
					PrintString("\n");
#endif

				}
				// Only do commit if we are actually doing something...
				CommitServoDriver(ServoMoveTime);
    20e0:	00160800 	andseq	r0, r6, r0, lsl #16
    20e4:	0b3a0e03 	bleq	e858f8 <__Stack_Size+0xe854f8>
    20e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
			} else {
				//Turn the bot off - May need to add ajust here...
				if (g_InControlState.fPrev_RobotOn || (AllDown = 0)) {
    20ec:	24090000 	strcs	r0, [r9]
					PrintString("Barebones lTimeWaitEnd-Millis  ");
					Printu32d(getMillis);
					PrintString("\n");
#endif
				} else {
					FreeServos();
    20f0:	3e0b0b00 	fmacdcc	d0, d11, d0
    20f4:	0a00000b 	beq	2128 <__Stack_Size+0x1d28>
				// Only do commit if we are actually doing something...
				CommitServoDriver(ServoMoveTime);
			} else {
				//Turn the bot off - May need to add ajust here...
				if (g_InControlState.fPrev_RobotOn || (AllDown = 0)) {
					ServoMoveTime = 600;
    20f8:	0b0b0113 	bleq	2c254c <__Stack_Size+0x2c214c>
    20fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!
					StartUpdateServos();
    2100:	00001301 	andeq	r1, r0, r1, lsl #6
					CommitServoDriver(ServoMoveTime);
    2104:	03000d0b 	movweq	r0, #3339	; 0xd0b
					//MSound(3, 100, 2500, 80, 2250, 60, 2000);
					Buzzed(100, 2500);
    2108:	3b0b3a08 	blcc	2d0930 <__Stack_Size+0x2d0530>
    210c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    2110:	0c00000a 	stceq	0, cr0, [r0], {10}
					Buzzed(80, 2250);
    2114:	0c3f012e 	ldfeqs	f0, [pc], #-184
    2118:	0b3a0e03 	bleq	e8592c <__Stack_Size+0xe8552c>
					Buzzed(60, 2000);
    211c:	0c270b3b 	stceq	11, cr0, [r7], #-236
    2120:	01120111 	tsteq	r2, r1, lsl r1
    2124:	13010a40 	movwne	r0, #6720	; 0x1a40

					//lTimeWaitEnd = getMillis() + 600; // setup to process background stuff while we wait...
					lTimeWaitEnd = getMillis() + 600; // setup to process background stuff while we wait...
    2128:	050d0000 	streq	r0, [sp]
    212c:	3a0e0300 	bcc	382d34 <__Stack_Size+0x382934>
					Printu32d(lTimeWaitEnd);
					PrintString("\n");
#endif
					do {
						// Wait the appropriate time, call any background process while waiting...
						DoBackgroundProcess();
    2130:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					} while (getMillis() < lTimeWaitEnd);
    2134:	000a0213 	andeq	r0, sl, r3, lsl r2
    2138:	00050e00 	andeq	r0, r5, r0, lsl #28
				} else {
					FreeServos();
				}

				// Allow the Servo driver to do stuff durint our idle time
				IdleTime();
    213c:	0b3a0e03 	bleq	e85950 <__Stack_Size+0xe85550>
				mDelay(20); // give a pause between times we call if nothing is happening
    2140:	13490b3b 	movtne	r0, #39739	; 0x9b3b
			}
			PrevServoMoveTime = ServoMoveTime;
    2144:	00000602 	andeq	r0, r0, r2, lsl #12
    2148:	0300340f 	movweq	r3, #1039	; 0x40f

			//Store previous g_InControlState.fRobotOn State
			if (g_InControlState.fRobotOn)
    214c:	3b0b3a0e 	blcc	2d098c <__Stack_Size+0x2d058c>
    2150:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
				g_InControlState.fPrev_RobotOn = 1;
			else
				g_InControlState.fPrev_RobotOn = 0;
    2154:	10000006 	andne	r0, r0, r6
    2158:	0c3f012e 	ldfeqs	f0, [pc], #-184
    215c:	0b3a0e03 	bleq	e85970 <__Stack_Size+0xe85570>
    2160:	0c270b3b 	stceq	11, cr0, [r7], #-236
    2164:	01111349 	tsteq	r1, r9, asr #6
    2168:	0a400112 	beq	10025b8 <__Stack_Size+0x10021b8>
    216c:	00001301 	andeq	r1, r0, r1, lsl #6
    2170:	03003411 	movweq	r3, #1041	; 0x411
    2174:	3b0b3a0e 	blcc	2d09b4 <__Stack_Size+0x2d05b4>
    2178:	0013490b 	andseq	r4, r3, fp, lsl #18
    217c:	012e1200 	teqeq	lr, r0, lsl #4
    2180:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    2184:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    2188:	01110c27 	tsteq	r1, r7, lsr #24
    218c:	0a400112 	beq	10025dc <__Stack_Size+0x10021dc>
    2190:	00001301 	andeq	r1, r0, r1, lsl #6
    2194:	03000513 	movweq	r0, #1299	; 0x513
    2198:	3b0b3a0e 	blcc	2d09d8 <__Stack_Size+0x2d05d8>
    219c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    21a0:	1400000a 	strne	r0, [r0], #-10
    21a4:	0c3f002e 	ldceq	0, cr0, [pc], #-184
    21a8:	0b3a0e03 	bleq	e859bc <__Stack_Size+0xe855bc>
    21ac:	0c270b3b 	stceq	11, cr0, [r7], #-236
    21b0:	01120111 	tsteq	r2, r1, lsl r1
    21b4:	00000640 	andeq	r0, r0, r0, asr #12
    21b8:	3f012e15 	svccc	0x00012e15
    21bc:	3a0e030c 	bcc	382df4 <__Stack_Size+0x3829f4>
    21c0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    21c4:	1201110c 	andne	r1, r1, #3	; 0x3
    21c8:	01064001 	tsteq	r6, r1
    21cc:	00000013 	andeq	r0, r0, r3, lsl r0
    21d0:	25011101 	strcs	r1, [r1, #-257]
    21d4:	030b130e 	movweq	r1, #45838	; 0xb30e
    21d8:	110e1b0e 	tstne	lr, lr, lsl #22
    21dc:	10011201 	andne	r1, r1, r1, lsl #4
    21e0:	02000006 	andeq	r0, r0, #6	; 0x6
    21e4:	0b0b0024 	bleq	2c227c <__Stack_Size+0x2c1e7c>
    21e8:	0e030b3e 	vmoveq.16	d3[0], r0
    21ec:	16030000 	strne	r0, [r3], -r0
    21f0:	3a080300 	bcc	202df8 <__Stack_Size+0x2029f8>
    21f4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    21f8:	04000013 	streq	r0, [r0], #-19
    21fc:	13490035 	movtne	r0, #36917	; 0x9035
    2200:	04050000 	streq	r0, [r5]
    2204:	3a0b0b01 	bcc	2c4e10 <__Stack_Size+0x2c4a10>
    2208:	010b3b0b 	tsteq	fp, fp, lsl #22
    220c:	06000013 	undefined
    2210:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    2214:	00000d1c 	andeq	r0, r0, ip, lsl sp
    2218:	03002807 	movweq	r2, #2055	; 0x807
    221c:	000d1c08 	andeq	r1, sp, r8, lsl #24
    2220:	00160800 	andseq	r0, r6, r0, lsl #16
    2224:	0b3a0e03 	bleq	e85a38 <__Stack_Size+0xe85638>
    2228:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    222c:	24090000 	strcs	r0, [r9]
    2230:	3e0b0b00 	fmacdcc	d0, d11, d0
    2234:	0a00000b 	beq	2268 <__Stack_Size+0x1e68>
    2238:	0b0b0113 	bleq	2c268c <__Stack_Size+0x2c228c>
    223c:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    2240:	00001301 	andeq	r1, r0, r1, lsl #6
    2244:	03000d0b 	movweq	r0, #3339	; 0xd0b
    2248:	3b0b3a08 	blcc	2d0a70 <__Stack_Size+0x2d0670>
    224c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    2250:	0c00000a 	stceq	0, cr0, [r0], {10}
    2254:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2258:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    225c:	0a381349 	beq	e06f88 <__Stack_Size+0xe06b88>
    2260:	130d0000 	movwne	r0, #53248	; 0xd000
    2264:	3a0b0b01 	bcc	2c4e70 <__Stack_Size+0x2c4a70>
    2268:	010b3b0b 	tsteq	fp, fp, lsl #22
    226c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    2270:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2274:	0b3b0b3a 	bleq	ec4f64 <__Stack_Size+0xec4b64>
    2278:	0a381349 	beq	e06fa4 <__Stack_Size+0xe06ba4>
    227c:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    2280:	030c3f01 	movweq	r3, #52993	; 0xcf01
    2284:	3b0b3a0e 	blcc	2d0ac4 <__Stack_Size+0x2d06c4>
    2288:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
    228c:	010b2013 	tsteq	fp, r3, lsl r0
    2290:	10000013 	andne	r0, r0, r3, lsl r0
    2294:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2298:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    229c:	00001349 	andeq	r1, r0, r9, asr #6
    22a0:	03003411 	movweq	r3, #1041	; 0x411
    22a4:	3b0b3a08 	blcc	2d0acc <__Stack_Size+0x2d06cc>
    22a8:	00134905 	andseq	r4, r3, r5, lsl #18
    22ac:	00341200 	eorseq	r1, r4, r0, lsl #4
    22b0:	0b3a0e03 	bleq	e85ac4 <__Stack_Size+0xe856c4>
    22b4:	1349053b 	movtne	r0, #38203	; 0x953b
    22b8:	2e130000 	wxorcs	wr0, wr3, wr0
    22bc:	030c3f00 	movweq	r3, #52992	; 0xcf00
    22c0:	3b0b3a0e 	blcc	2d0b00 <__Stack_Size+0x2d0700>
    22c4:	110c270b 	tstne	ip, fp, lsl #14
    22c8:	40011201 	andmi	r1, r1, r1, lsl #4
    22cc:	1400000a 	strne	r0, [r0], #-10
    22d0:	0c3f012e 	ldfeqs	f0, [pc], #-184
    22d4:	0b3a0e03 	bleq	e85ae8 <__Stack_Size+0xe856e8>
    22d8:	0c270b3b 	stceq	11, cr0, [r7], #-236
    22dc:	01120111 	tsteq	r2, r1, lsl r1
    22e0:	13010a40 	movwne	r0, #6720	; 0x1a40
    22e4:	05150000 	ldreq	r0, [r5]
    22e8:	3a0e0300 	bcc	382ef0 <__Stack_Size+0x382af0>
    22ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    22f0:	000a0213 	andeq	r0, sl, r3, lsl r2
    22f4:	012e1600 	teqeq	lr, r0, lsl #12
    22f8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    22fc:	0b3b0b3a 	bleq	ec4fec <__Stack_Size+0xec4bec>
    2300:	13490c27 	movtne	r0, #39975	; 0x9c27
    2304:	01120111 	tsteq	r2, r1, lsl r1
    2308:	13010640 	movwne	r0, #5696	; 0x1640
    230c:	34170000 	ldrcc	r0, [r7]
    2310:	3a0e0300 	bcc	382f18 <__Stack_Size+0x382b18>
    2314:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2318:	00060213 	andeq	r0, r6, r3, lsl r2
    231c:	00341800 	eorseq	r1, r4, r0, lsl #16
    2320:	0b3a0e03 	bleq	e85b34 <__Stack_Size+0xe85734>
    2324:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2328:	1d190000 	ldcne	0, cr0, [r9]
    232c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    2330:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    2334:	010b590b 	tsteq	fp, fp, lsl #18
    2338:	1a000013 	bne	238c <__Stack_Size+0x1f8c>
    233c:	13310005 	teqne	r1, #5	; 0x5
    2340:	0b1b0000 	bleq	6c2348 <__Stack_Size+0x6c1f48>
    2344:	00065501 	andeq	r5, r6, r1, lsl #10
    2348:	00341c00 	eorseq	r1, r4, r0, lsl #24
    234c:	00001331 	andeq	r1, r0, r1, lsr r3
    2350:	3100341d 	tstcc	r0, sp, lsl r4
    2354:	000a0213 	andeq	r0, sl, r3, lsl r2
    2358:	011d1e00 	tsteq	sp, r0, lsl #28
    235c:	01111331 	tsteq	r1, r1, lsr r3
    2360:	0b580112 	bleq	16027b0 <__Stack_Size+0x16023b0>
    2364:	00000b59 	andeq	r0, r0, r9, asr fp
    2368:	11010b1f 	tstne	r1, pc, lsl fp
    236c:	00011201 	andeq	r1, r1, r1, lsl #4
    2370:	00342000 	eorseq	r2, r4, r0
    2374:	06021331 	undefined
    2378:	34210000 	strtcc	r0, [r1]
    237c:	3a0e0300 	bcc	382f84 <__Stack_Size+0x382b84>
    2380:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2384:	000a0213 	andeq	r0, sl, r3, lsl r2
    2388:	012e2200 	teqeq	lr, r0, lsl #4
    238c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    2390:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    2394:	01110c27 	tsteq	r1, r7, lsr #24
    2398:	0a400112 	beq	10027e8 <__Stack_Size+0x10023e8>
    239c:	00001301 	andeq	r1, r0, r1, lsl #6
    23a0:	03000523 	movweq	r0, #1315	; 0x523
    23a4:	3b0b3a0e 	blcc	2d0be4 <__Stack_Size+0x2d07e4>
    23a8:	02134905 	andseq	r4, r3, #81920	; 0x14000
    23ac:	2400000a 	strcs	r0, [r0], #-10
    23b0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    23b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    23b8:	06021349 	streq	r1, [r2], -r9, asr #6
    23bc:	34250000 	strtcc	r0, [r5]
    23c0:	3a0e0300 	bcc	382fc8 <__Stack_Size+0x382bc8>
    23c4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    23c8:	00060213 	andeq	r0, r6, r3, lsl r2
    23cc:	002e2600 	eoreq	r2, lr, r0, lsl #12
    23d0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    23d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    23d8:	13490c27 	movtne	r0, #39975	; 0x9c27
    23dc:	01120111 	tsteq	r2, r1, lsl r1
    23e0:	00000a40 	andeq	r0, r0, r0, asr #20
    23e4:	03003427 	movweq	r3, #1063	; 0x427
    23e8:	3b0b3a0e 	blcc	2d0c28 <__Stack_Size+0x2d0828>
    23ec:	02134905 	andseq	r4, r3, #81920	; 0x14000
    23f0:	2800000a 	stmdacs	r0, {r1, r3}
    23f4:	08030034 	stmdaeq	r3, {r2, r4, r5}
    23f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    23fc:	06021349 	streq	r1, [r2], -r9, asr #6
    2400:	0f290000 	svceq	0x00290000
    2404:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2408:	2a000013 	bcs	245c <__Stack_Size+0x205c>
    240c:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
    2410:	01120111 	tsteq	r2, r1, lsl r1
    2414:	13010a40 	movwne	r0, #6720	; 0x1a40
    2418:	052b0000 	streq	r0, [fp]!
    241c:	02133100 	andseq	r3, r3, #0	; 0x0
    2420:	2c000006 	stccs	0, cr0, [r0], {6}
    2424:	0c3f002e 	ldceq	0, cr0, [pc], #-184
    2428:	0b3a0e03 	bleq	e85c3c <__Stack_Size+0xe8583c>
    242c:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
    2430:	01120111 	tsteq	r2, r1, lsl r1
    2434:	00000a40 	andeq	r0, r0, r0, asr #20
    2438:	3f012e2d 	svccc	0x00012e2d
    243c:	3a0e030c 	bcc	383074 <__Stack_Size+0x382c74>
    2440:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2444:	1113490c 	tstne	r3, ip, lsl #18
    2448:	40011201 	andmi	r1, r1, r1, lsl #4
    244c:	0013010a 	andseq	r0, r3, sl, lsl #2
    2450:	01012e00 	tsteq	r1, r0, lsl #28
    2454:	13011349 	movwne	r1, #4937	; 0x1349
    2458:	212f0000 	teqcs	pc, r0
    245c:	2f134900 	svccs	0x00134900
    2460:	3000000b 	andcc	r0, r0, fp
    2464:	13490026 	movtne	r0, #36902	; 0x9026
    2468:	01000000 	tsteq	r0, r0
    246c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2470:	0e030b13 	vmoveq.32	d3[0], r0
    2474:	01110e1b 	tsteq	r1, fp, lsl lr
    2478:	06100112 	undefined
    247c:	24020000 	strcs	r0, [r2]
    2480:	3e0b0b00 	fmacdcc	d0, d11, d0
    2484:	000e030b 	andeq	r0, lr, fp, lsl #6
    2488:	00160300 	andseq	r0, r6, r0, lsl #6
    248c:	0b3a0803 	bleq	e844a0 <__Stack_Size+0xe840a0>
    2490:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2494:	35040000 	strcc	r0, [r4]
    2498:	00134900 	andseq	r4, r3, r0, lsl #18
    249c:	00260500 	eoreq	r0, r6, r0, lsl #10
    24a0:	00001349 	andeq	r1, r0, r9, asr #6
    24a4:	0b010406 	bleq	434c4 <__Stack_Size+0x430c4>
    24a8:	3b0b3a0b 	blcc	2d0cdc <__Stack_Size+0x2d08dc>
    24ac:	0013010b 	andseq	r0, r3, fp, lsl #2
    24b0:	00280700 	eoreq	r0, r8, r0, lsl #14
    24b4:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    24b8:	28080000 	stmdacs	r8, {}
    24bc:	1c080300 	stcne	3, cr0, [r8], {0}
    24c0:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    24c4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    24c8:	0b3b0b3a 	bleq	ec51b8 <__Stack_Size+0xec4db8>
    24cc:	00001349 	andeq	r1, r0, r9, asr #6
    24d0:	0b00240a 	bleq	b500 <__Stack_Size+0xb100>
    24d4:	000b3e0b 	andeq	r3, fp, fp, lsl #28
    24d8:	01130b00 	tsteq	r3, r0, lsl #22
    24dc:	0b3a0b0b 	bleq	e85110 <__Stack_Size+0xe84d10>
    24e0:	1301053b 	movwne	r0, #5435	; 0x153b
    24e4:	0d0c0000 	stceq	0, cr0, [ip]
    24e8:	3a0e0300 	bcc	3830f0 <__Stack_Size+0x382cf0>
    24ec:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    24f0:	000a3813 	andeq	r3, sl, r3, lsl r8
    24f4:	000d0d00 	andeq	r0, sp, r0, lsl #26
    24f8:	0b3a0803 	bleq	e8450c <__Stack_Size+0xe8410c>
    24fc:	1349053b 	movtne	r0, #38203	; 0x953b
    2500:	00000a38 	andeq	r0, r0, r8, lsr sl
    2504:	3f012e0e 	svccc	0x00012e0e
    2508:	3a0e030c 	bcc	383140 <__Stack_Size+0x382d40>
    250c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2510:	1201110c 	andne	r1, r1, #3	; 0x3
    2514:	010a4001 	tsteq	sl, r1
    2518:	0f000013 	svceq	0x00000013
    251c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2520:	0b3b0b3a 	bleq	ec5210 <__Stack_Size+0xec4e10>
    2524:	0a021349 	beq	87250 <__Stack_Size+0x86e50>
    2528:	2e100000 	wxorcs	wr0, wr0, wr0
    252c:	030c3f00 	movweq	r3, #52992	; 0xcf00
    2530:	3b0b3a0e 	blcc	2d0d70 <__Stack_Size+0x2d0970>
    2534:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    2538:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    253c:	000a4001 	andeq	r4, sl, r1
    2540:	012e1100 	teqeq	lr, r0, lsl #2
    2544:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    2548:	0b3b0b3a 	bleq	ec5238 <__Stack_Size+0xec4e38>
    254c:	13490c27 	movtne	r0, #39975	; 0x9c27
    2550:	01120111 	tsteq	r2, r1, lsl r1
    2554:	00000a40 	andeq	r0, r0, r0, asr #20
    2558:	03000512 	movweq	r0, #1298	; 0x512
    255c:	3b0b3a0e 	blcc	2d0d9c <__Stack_Size+0x2d099c>
    2560:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2564:	13000006 	movwne	r0, #6	; 0x6
    2568:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    256c:	0b3b0b3a 	bleq	ec525c <__Stack_Size+0xec4e5c>
    2570:	06021349 	streq	r1, [r2], -r9, asr #6
    2574:	34140000 	ldrcc	r0, [r4]
    2578:	3a080300 	bcc	203180 <__Stack_Size+0x202d80>
    257c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2580:	15000013 	strne	r0, [r0, #-19]
    2584:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2588:	0b3b0b3a 	bleq	ec5278 <__Stack_Size+0xec4e78>
    258c:	00001349 	andeq	r1, r0, r9, asr #6
    2590:	01110100 	tsteq	r1, r0, lsl #2
    2594:	0b130e25 	bleq	4c5e30 <__Stack_Size+0x4c5a30>
    2598:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    259c:	01120111 	tsteq	r2, r1, lsl r1
    25a0:	00000610 	andeq	r0, r0, r0, lsl r6
    25a4:	0b002402 	bleq	b5b4 <__Stack_Size+0xb1b4>
    25a8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    25ac:	0300000e 	movweq	r0, #14	; 0xe
    25b0:	08030016 	stmdaeq	r3, {r1, r2, r4}
    25b4:	0b3b0b3a 	bleq	ec52a4 <__Stack_Size+0xec4ea4>
    25b8:	00001349 	andeq	r1, r0, r9, asr #6
    25bc:	49003504 	stmdbmi	r0, {r2, r8, sl, ip, sp}
    25c0:	05000013 	streq	r0, [r0, #-19]
    25c4:	0b0b0104 	bleq	2c29dc <__Stack_Size+0x2c25dc>
    25c8:	0b3b0b3a 	bleq	ec52b8 <__Stack_Size+0xec4eb8>
    25cc:	00001301 	andeq	r1, r0, r1, lsl #6
    25d0:	03002806 	movweq	r2, #2054	; 0x806
    25d4:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    25d8:	00280700 	eoreq	r0, r8, r0, lsl #14
    25dc:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
    25e0:	16080000 	strne	r0, [r8], -r0
    25e4:	3a0e0300 	bcc	3831ec <__Stack_Size+0x382dec>
    25e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    25ec:	09000013 	stmdbeq	r0, {r0, r1, r4}
    25f0:	0b0b0024 	bleq	2c2688 <__Stack_Size+0x2c2288>
    25f4:	00000b3e 	andeq	r0, r0, lr, lsr fp
    25f8:	0b01130a 	bleq	47228 <__Stack_Size+0x46e28>
    25fc:	3b0b3a0b 	blcc	2d0e30 <__Stack_Size+0x2d0a30>
    2600:	00130105 	andseq	r0, r3, r5, lsl #2
    2604:	000d0b00 	andeq	r0, sp, r0, lsl #22
    2608:	0b3a0803 	bleq	e8461c <__Stack_Size+0xe8421c>
    260c:	1349053b 	movtne	r0, #38203	; 0x953b
    2610:	00000a38 	andeq	r0, r0, r8, lsr sl
    2614:	03000d0c 	movweq	r0, #3340	; 0xd0c
    2618:	3b0b3a0e 	blcc	2d0e58 <__Stack_Size+0x2d0a58>
    261c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    2620:	0d00000a 	stceq	0, cr0, [r0, #-40]
    2624:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2628:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    262c:	00001349 	andeq	r1, r0, r9, asr #6
    2630:	0b01130e 	bleq	47270 <__Stack_Size+0x46e70>
    2634:	3b0b3a0b 	blcc	2d0e68 <__Stack_Size+0x2d0a68>
    2638:	0013010b 	andseq	r0, r3, fp, lsl #2
    263c:	000d0f00 	andeq	r0, sp, r0, lsl #30
    2640:	0b3a0e03 	bleq	e85e54 <__Stack_Size+0xe85a54>
    2644:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2648:	00000a38 	andeq	r0, r0, r8, lsr sl
    264c:	3f012e10 	svccc	0x00012e10
    2650:	3a0e030c 	bcc	383288 <__Stack_Size+0x382e88>
    2654:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2658:	1201110c 	andne	r1, r1, #3	; 0x3
    265c:	010a4001 	tsteq	sl, r1
    2660:	11000013 	tstne	r0, r3, lsl r0
    2664:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2668:	0b3b0b3a 	bleq	ec5358 <__Stack_Size+0xec4f58>
    266c:	0a021349 	beq	87398 <__Stack_Size+0x86f98>
    2670:	0f120000 	svceq	0x00120000
    2674:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2678:	13000013 	movwne	r0, #19	; 0x13
    267c:	0c3f012e 	ldfeqs	f0, [pc], #-184
    2680:	0b3a0e03 	bleq	e85e94 <__Stack_Size+0xe85a94>
    2684:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
    2688:	01120111 	tsteq	r2, r1, lsl r1
    268c:	13010a40 	movwne	r0, #6720	; 0x1a40
    2690:	05140000 	ldreq	r0, [r4]
    2694:	3a0e0300 	bcc	38329c <__Stack_Size+0x382e9c>
    2698:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    269c:	00060213 	andeq	r0, r6, r3, lsl r2
    26a0:	00341500 	eorseq	r1, r4, r0, lsl #10
    26a4:	0b3a0e03 	bleq	e85eb8 <__Stack_Size+0xe85ab8>
    26a8:	1349053b 	movtne	r0, #38203	; 0x953b
    26ac:	00000a02 	andeq	r0, r0, r2, lsl #20
    26b0:	03000516 	movweq	r0, #1302	; 0x516
    26b4:	3b0b3a0e 	blcc	2d0ef4 <__Stack_Size+0x2d0af4>
    26b8:	02134905 	andseq	r4, r3, #81920	; 0x14000
    26bc:	1700000a 	strne	r0, [r0, -sl]
    26c0:	0c3f012e 	ldfeqs	f0, [pc], #-184
    26c4:	0b3a0e03 	bleq	e85ed8 <__Stack_Size+0xe85ad8>
    26c8:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
    26cc:	01120111 	tsteq	r2, r1, lsl r1
    26d0:	13010640 	movwne	r0, #5696	; 0x1640
    26d4:	05180000 	ldreq	r0, [r8]
    26d8:	3a0e0300 	bcc	3832e0 <__Stack_Size+0x382ee0>
    26dc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    26e0:	00060213 	andeq	r0, r6, r3, lsl r2
    26e4:	00341900 	eorseq	r1, r4, r0, lsl #18
    26e8:	0b3a0e03 	bleq	e85efc <__Stack_Size+0xe85afc>
    26ec:	1349053b 	movtne	r0, #38203	; 0x953b
    26f0:	341a0000 	ldrcc	r0, [sl]
    26f4:	3a0e0300 	bcc	3832fc <__Stack_Size+0x382efc>
    26f8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    26fc:	00060213 	andeq	r0, r6, r3, lsl r2
    2700:	012e1b00 	teqeq	lr, r0, lsl #22
    2704:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    2708:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    270c:	13490c27 	movtne	r0, #39975	; 0x9c27
    2710:	01120111 	tsteq	r2, r1, lsl r1
    2714:	13010a40 	movwne	r0, #6720	; 0x1a40
    2718:	2e1c0000 	wxorcs	wr0, wr12, wr0
    271c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    2720:	3b0b3a0e 	blcc	2d0f60 <__Stack_Size+0x2d0b60>
    2724:	110c270b 	tstne	ip, fp, lsl #14
    2728:	40011201 	andmi	r1, r1, r1, lsl #4
    272c:	00130106 	andseq	r0, r3, r6, lsl #2
    2730:	00341d00 	eorseq	r1, r4, r0, lsl #26
    2734:	0b3a0e03 	bleq	e85f48 <__Stack_Size+0xe85b48>
    2738:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    273c:	00000602 	andeq	r0, r0, r2, lsl #12
    2740:	0300341e 	movweq	r3, #1054	; 0x41e
    2744:	3b0b3a0e 	blcc	2d0f84 <__Stack_Size+0x2d0b84>
    2748:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    274c:	1f00000a 	svcne	0x0000000a
    2750:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2754:	0b3b0b3a 	bleq	ec5444 <__Stack_Size+0xec5044>
    2758:	00001349 	andeq	r1, r0, r9, asr #6
    275c:	3f012e20 	svccc	0x00012e20
    2760:	3a0e030c 	bcc	383398 <__Stack_Size+0x382f98>
    2764:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2768:	1201110c 	andne	r1, r1, #3	; 0x3
    276c:	00064001 	andeq	r4, r6, r1
    2770:	11010000 	tstne	r1, r0
    2774:	11061000 	tstne	r6, r0
    2778:	03011201 	movweq	r1, #4609	; 0x1201
    277c:	25081b08 	strcs	r1, [r8, #-2824]
    2780:	00051308 	andeq	r1, r5, r8, lsl #6
    2784:	11010000 	tstne	r1, r0
    2788:	130e2501 	movwne	r2, #58625	; 0xe501
    278c:	1b0e030b 	blne	3833c0 <__Stack_Size+0x382fc0>
    2790:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    2794:	00061001 	andeq	r1, r6, r1
    2798:	00240200 	eoreq	r0, r4, r0, lsl #4
    279c:	0b3e0b0b 	bleq	f853d0 <__Stack_Size+0xf84fd0>
    27a0:	00000e03 	andeq	r0, r0, r3, lsl #28
    27a4:	0b002403 	bleq	b7b8 <__Stack_Size+0xb3b8>
    27a8:	000b3e0b 	andeq	r3, fp, fp, lsl #28
    27ac:	012e0400 	teqeq	lr, r0, lsl #8
    27b0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    27b4:	0b3b0b3a 	bleq	ec54a4 <__Stack_Size+0xec50a4>
    27b8:	01110c27 	tsteq	r1, r7, lsr #24
    27bc:	06400112 	undefined
    27c0:	00001301 	andeq	r1, r0, r1, lsl #6
    27c4:	03003405 	movweq	r3, #1029	; 0x405
    27c8:	3b0b3a0e 	blcc	2d1008 <__Stack_Size+0x2d0c08>
    27cc:	0013490b 	andseq	r4, r3, fp, lsl #18
    27d0:	00340600 	eorseq	r0, r4, r0, lsl #12
    27d4:	0b3a0e03 	bleq	e85fe8 <__Stack_Size+0xe85be8>
    27d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    27dc:	00000602 	andeq	r0, r0, r2, lsl #12
    27e0:	0b000f07 	bleq	6404 <__Stack_Size+0x6004>
    27e4:	0013490b 	andseq	r4, r3, fp, lsl #18
    27e8:	00340800 	eorseq	r0, r4, r0, lsl #16
    27ec:	0b3a0e03 	bleq	e86000 <__Stack_Size+0xe85c00>
    27f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    27f4:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252
    27f8:	34090000 	strcc	r0, [r9]
    27fc:	3a0e0300 	bcc	383404 <__Stack_Size+0x383004>
    2800:	3f0b3b0b 	svccc	0x000b3b0b
    2804:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    2808:	01010a00 	tsteq	r1, r0, lsl #20
    280c:	13011349 	movwne	r1, #4937	; 0x1349
    2810:	210b0000 	tstcs	fp, r0
    2814:	2f134900 	svccs	0x00134900
    2818:	0c00000b 	stceq	0, cr0, [r0], {11}
    281c:	0c270015 	stceq	0, cr0, [r7], #-84
    2820:	340d0000 	strcc	r0, [sp]
    2824:	3a0e0300 	bcc	38342c <__Stack_Size+0x38302c>
    2828:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    282c:	020c3f13 	andeq	r3, ip, #76	; 0x4c
    2830:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
    2834:	13490026 	movtne	r0, #36902	; 0x9026
    2838:	01000000 	tsteq	r0, r0
    283c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2840:	0e030b13 	vmoveq.32	d3[0], r0
    2844:	01110e1b 	tsteq	r1, fp, lsl lr
    2848:	06100112 	undefined
    284c:	24020000 	strcs	r0, [r2]
    2850:	3e0b0b00 	fmacdcc	d0, d11, d0
    2854:	000e030b 	andeq	r0, lr, fp, lsl #6
    2858:	00240300 	eoreq	r0, r4, r0, lsl #6
    285c:	0b3e0b0b 	bleq	f85490 <__Stack_Size+0xf85090>
    2860:	00000803 	andeq	r0, r0, r3, lsl #16
    2864:	0b002404 	bleq	b87c <__Stack_Size+0xb47c>
    2868:	000b3e0b 	andeq	r3, fp, fp, lsl #28
    286c:	00150500 	andseq	r0, r5, r0, lsl #10
    2870:	00000c27 	andeq	r0, r0, r7, lsr #24
    2874:	0b000f06 	bleq	6494 <__Stack_Size+0x6094>
    2878:	0013490b 	andseq	r4, r3, fp, lsl #18
    287c:	01040700 	tsteq	r4, r0, lsl #14
    2880:	0b0b0e03 	bleq	2c6094 <__Stack_Size+0x2c5c94>
    2884:	0b3b0b3a 	bleq	ec5574 <__Stack_Size+0xec5174>
    2888:	00001301 	andeq	r1, r0, r1, lsl #6
    288c:	03002808 	movweq	r2, #2056	; 0x808
    2890:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    2894:	012e0900 	teqeq	lr, r0, lsl #18
    2898:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    289c:	0b3b0b3a 	bleq	ec558c <__Stack_Size+0xec518c>
    28a0:	13490c27 	movtne	r0, #39975	; 0x9c27
    28a4:	01120111 	tsteq	r2, r1, lsl r1
    28a8:	00000640 	andeq	r0, r0, r0, asr #12
    28ac:	0300050a 	movweq	r0, #1290	; 0x50a
    28b0:	3b0b3a08 	blcc	2d10d8 <__Stack_Size+0x2d0cd8>
    28b4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    28b8:	00000006 	andeq	r0, r0, r6
    28bc:	25011101 	strcs	r1, [r1, #-257]
    28c0:	030b130e 	movweq	r1, #45838	; 0xb30e
    28c4:	110e1b0e 	tstne	lr, lr, lsl #22
    28c8:	10011201 	andne	r1, r1, r1, lsl #4
    28cc:	02000006 	andeq	r0, r0, #6	; 0x6
    28d0:	0b0b0024 	bleq	2c2968 <__Stack_Size+0x2c2568>
    28d4:	0e030b3e 	vmoveq.16	d3[0], r0
    28d8:	24030000 	strcs	r0, [r3]
    28dc:	3e0b0b00 	fmacdcc	d0, d11, d0
    28e0:	0008030b 	andeq	r0, r8, fp, lsl #6
    28e4:	00160400 	andseq	r0, r6, r0, lsl #8
    28e8:	0b3a0e03 	bleq	e860fc <__Stack_Size+0xe85cfc>
    28ec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    28f0:	16050000 	strne	r0, [r5], -r0
    28f4:	3a0e0300 	bcc	3834fc <__Stack_Size+0x3830fc>
    28f8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    28fc:	06000013 	undefined
    2900:	0b0b0117 	bleq	2c2d64 <__Stack_Size+0x2c2964>
    2904:	0b3b0b3a 	bleq	ec55f4 <__Stack_Size+0xec51f4>
    2908:	00001301 	andeq	r1, r0, r1, lsl #6
    290c:	03000d07 	movweq	r0, #3335	; 0xd07
    2910:	3b0b3a0e 	blcc	2d1150 <__Stack_Size+0x2d0d50>
    2914:	0013490b 	andseq	r4, r3, fp, lsl #18
    2918:	01010800 	tsteq	r1, r0, lsl #16
    291c:	13011349 	movwne	r1, #4937	; 0x1349
    2920:	21090000 	tstcs	r9, r0
    2924:	2f134900 	svccs	0x00134900
    2928:	0a00000b 	beq	295c <__Stack_Size+0x255c>
    292c:	0b0b0024 	bleq	2c29c4 <__Stack_Size+0x2c25c4>
    2930:	00000b3e 	andeq	r0, r0, lr, lsr fp
    2934:	0b01130b 	bleq	47568 <__Stack_Size+0x47168>
    2938:	3b0b3a0b 	blcc	2d116c <__Stack_Size+0x2d0d6c>
    293c:	0013010b 	andseq	r0, r3, fp, lsl #2
    2940:	000d0c00 	andeq	r0, sp, r0, lsl #24
    2944:	0b3a0e03 	bleq	e86158 <__Stack_Size+0xe85d58>
    2948:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    294c:	00000a38 	andeq	r0, r0, r8, lsr sl
    2950:	0b000f0d 	bleq	658c <__Stack_Size+0x618c>
    2954:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    2958:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    295c:	0b3a0b0b 	bleq	e85590 <__Stack_Size+0xe85190>
    2960:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2964:	0d0f0000 	stceq	0, cr0, [pc]
    2968:	3a080300 	bcc	203570 <__Stack_Size+0x203170>
    296c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2970:	000a3813 	andeq	r3, sl, r3, lsl r8
    2974:	000f1000 	andeq	r1, pc, r0
    2978:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    297c:	13110000 	tstne	r1, #0	; 0x0
    2980:	0b0e0301 	bleq	38358c <__Stack_Size+0x38318c>
    2984:	3b0b3a05 	blcc	2d11a0 <__Stack_Size+0x2d0da0>
    2988:	0013010b 	andseq	r0, r3, fp, lsl #2
    298c:	00151200 	andseq	r1, r5, r0, lsl #4
    2990:	00000c27 	andeq	r0, r0, r7, lsr #24
    2994:	27011513 	smladcs	r1, r3, r5, r1
    2998:	0113490c 	tsteq	r3, ip, lsl #18
    299c:	14000013 	strne	r0, [r0], #-19
    29a0:	13490005 	movtne	r0, #36869	; 0x9005
    29a4:	0d150000 	ldceq	0, cr0, [r5]
    29a8:	3a0e0300 	bcc	3835b0 <__Stack_Size+0x3831b0>
    29ac:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    29b0:	000a3813 	andeq	r3, sl, r3, lsl r8
    29b4:	00261600 	eoreq	r1, r6, r0, lsl #12
    29b8:	00001349 	andeq	r1, r0, r9, asr #6
    29bc:	03011317 	movweq	r1, #4887	; 0x1317
    29c0:	3a0b0b0e 	bcc	2c5600 <__Stack_Size+0x2c5200>
    29c4:	01053b0b 	tsteq	r5, fp, lsl #22
    29c8:	18000013 	stmdane	r0, {r0, r1, r4}
    29cc:	0b0b0113 	bleq	2c2e20 <__Stack_Size+0x2c2a20>
    29d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    29d4:	00001301 	andeq	r1, r0, r1, lsl #6
    29d8:	0b011719 	bleq	48644 <__Stack_Size+0x48244>
    29dc:	3b0b3a0b 	blcc	2d1210 <__Stack_Size+0x2d0e10>
    29e0:	00130105 	andseq	r0, r3, r5, lsl #2
    29e4:	000d1a00 	andeq	r1, sp, r0, lsl #20
    29e8:	0b3a0e03 	bleq	e861fc <__Stack_Size+0xe85dfc>
    29ec:	1349053b 	movtne	r0, #38203	; 0x953b
    29f0:	151b0000 	ldrne	r0, [fp]
    29f4:	010c2701 	tsteq	ip, r1, lsl #14
    29f8:	1c000013 	stcne	0, cr0, [r0], {19}
    29fc:	0c3f012e 	ldfeqs	f0, [pc], #-184
    2a00:	0b3a0e03 	bleq	e86214 <__Stack_Size+0xe85e14>
    2a04:	0c270b3b 	stceq	11, cr0, [r7], #-236
    2a08:	01120111 	tsteq	r2, r1, lsl r1
    2a0c:	13010a40 	movwne	r0, #6720	; 0x1a40
    2a10:	051d0000 	ldreq	r0, [sp]
    2a14:	3a0e0300 	bcc	38361c <__Stack_Size+0x38321c>
    2a18:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2a1c:	00060213 	andeq	r0, r6, r3, lsl r2
    2a20:	00341e00 	eorseq	r1, r4, r0, lsl #28
    2a24:	0b3a0e03 	bleq	e86238 <__Stack_Size+0xe85e38>
    2a28:	1349053b 	movtne	r0, #38203	; 0x953b
    2a2c:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252
    2a30:	01000000 	tsteq	r0, r0
    2a34:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2a38:	0e030b13 	vmoveq.32	d3[0], r0
    2a3c:	01110e1b 	tsteq	r1, fp, lsl lr
    2a40:	06100112 	undefined
    2a44:	24020000 	strcs	r0, [r2]
    2a48:	3e0b0b00 	fmacdcc	d0, d11, d0
    2a4c:	000e030b 	andeq	r0, lr, fp, lsl #6
    2a50:	00240300 	eoreq	r0, r4, r0, lsl #6
    2a54:	0b3e0b0b 	bleq	f85688 <__Stack_Size+0xf85288>
    2a58:	00000803 	andeq	r0, r0, r3, lsl #16
    2a5c:	03001604 	movweq	r1, #1540	; 0x604
    2a60:	3b0b3a0e 	blcc	2d12a0 <__Stack_Size+0x2d0ea0>
    2a64:	0013490b 	andseq	r4, r3, fp, lsl #18
    2a68:	00160500 	andseq	r0, r6, r0, lsl #10
    2a6c:	0b3a0e03 	bleq	e86280 <__Stack_Size+0xe85e80>
    2a70:	1349053b 	movtne	r0, #38203	; 0x953b
    2a74:	17060000 	strne	r0, [r6, -r0]
    2a78:	3a0b0b01 	bcc	2c5684 <__Stack_Size+0x2c5284>
    2a7c:	010b3b0b 	tsteq	fp, fp, lsl #22
    2a80:	07000013 	smladeq	r0, r3, r0, r0
    2a84:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2a88:	0b3b0b3a 	bleq	ec5778 <__Stack_Size+0xec5378>
    2a8c:	00001349 	andeq	r1, r0, r9, asr #6
    2a90:	49010108 	stmdbmi	r1, {r3, r8}
    2a94:	00130113 	andseq	r0, r3, r3, lsl r1
    2a98:	00210900 	eoreq	r0, r1, r0, lsl #18
    2a9c:	0b2f1349 	bleq	bc77c8 <__Stack_Size+0xbc73c8>
    2aa0:	240a0000 	strcs	r0, [sl]
    2aa4:	3e0b0b00 	fmacdcc	d0, d11, d0
    2aa8:	0b00000b 	bleq	2adc <__Stack_Size+0x26dc>
    2aac:	0b0b0113 	bleq	2c2f00 <__Stack_Size+0x2c2b00>
    2ab0:	0b3b0b3a 	bleq	ec57a0 <__Stack_Size+0xec53a0>
    2ab4:	00001301 	andeq	r1, r0, r1, lsl #6
    2ab8:	03000d0c 	movweq	r0, #3340	; 0xd0c
    2abc:	3b0b3a0e 	blcc	2d12fc <__Stack_Size+0x2d0efc>
    2ac0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2ac4:	0d00000a 	stceq	0, cr0, [r0, #-40]
    2ac8:	0b0b000f 	bleq	2c2b0c <__Stack_Size+0x2c270c>
    2acc:	130e0000 	movwne	r0, #57344	; 0xe000
    2ad0:	0b0e0301 	bleq	3836dc <__Stack_Size+0x3832dc>
    2ad4:	3b0b3a0b 	blcc	2d1308 <__Stack_Size+0x2d0f08>
    2ad8:	0013010b 	andseq	r0, r3, fp, lsl #2
    2adc:	000d0f00 	andeq	r0, sp, r0, lsl #30
    2ae0:	0b3a0803 	bleq	e84af4 <__Stack_Size+0xe846f4>
    2ae4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2ae8:	00000a38 	andeq	r0, r0, r8, lsr sl
    2aec:	0b000f10 	bleq	6734 <__Stack_Size+0x6334>
    2af0:	0013490b 	andseq	r4, r3, fp, lsl #18
    2af4:	01131100 	tsteq	r3, r0, lsl #2
    2af8:	050b0e03 	streq	r0, [fp, #-3587]
    2afc:	0b3b0b3a 	bleq	ec57ec <__Stack_Size+0xec53ec>
    2b00:	00001301 	andeq	r1, r0, r1, lsl #6
    2b04:	27001512 	smladcs	r0, r2, r5, r1
    2b08:	1300000c 	movwne	r0, #12	; 0xc
    2b0c:	0c270115 	stfeqs	f0, [r7], #-84
    2b10:	13011349 	movwne	r1, #4937	; 0x1349
    2b14:	05140000 	ldreq	r0, [r4]
    2b18:	00134900 	andseq	r4, r3, r0, lsl #18
    2b1c:	000d1500 	andeq	r1, sp, r0, lsl #10
    2b20:	0b3a0e03 	bleq	e86334 <__Stack_Size+0xe85f34>
    2b24:	1349053b 	movtne	r0, #38203	; 0x953b
    2b28:	00000a38 	andeq	r0, r0, r8, lsr sl
    2b2c:	49002616 	stmdbmi	r0, {r1, r2, r4, r9, sl, sp}
    2b30:	17000013 	smladne	r0, r3, r0, r0
    2b34:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2b38:	0b3a0b0b 	bleq	e8576c <__Stack_Size+0xe8536c>
    2b3c:	1301053b 	movwne	r0, #5435	; 0x153b
    2b40:	13180000 	tstne	r8, #0	; 0x0
    2b44:	3a0b0b01 	bcc	2c5750 <__Stack_Size+0x2c5350>
    2b48:	01053b0b 	tsteq	r5, fp, lsl #22
    2b4c:	19000013 	stmdbne	r0, {r0, r1, r4}
    2b50:	0b0b0117 	bleq	2c2fb4 <__Stack_Size+0x2c2bb4>
    2b54:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    2b58:	00001301 	andeq	r1, r0, r1, lsl #6
    2b5c:	03000d1a 	movweq	r0, #3354	; 0xd1a
    2b60:	3b0b3a0e 	blcc	2d13a0 <__Stack_Size+0x2d0fa0>
    2b64:	00134905 	andseq	r4, r3, r5, lsl #18
    2b68:	01151b00 	tsteq	r5, r0, lsl #22
    2b6c:	13010c27 	movwne	r0, #7207	; 0x1c27
    2b70:	341c0000 	ldrcc	r0, [ip]
    2b74:	3a0e0300 	bcc	38377c <__Stack_Size+0x38337c>
    2b78:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2b7c:	000a0213 	andeq	r0, sl, r3, lsl r2
    2b80:	00341d00 	eorseq	r1, r4, r0, lsl #26
    2b84:	0b3a0e03 	bleq	e86398 <__Stack_Size+0xe85f98>
    2b88:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2b8c:	0a020c3f 	beq	85c90 <__Stack_Size+0x85890>
    2b90:	01000000 	tsteq	r0, r0
    2b94:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2b98:	0e030b13 	vmoveq.32	d3[0], r0
    2b9c:	01110e1b 	tsteq	r1, fp, lsl lr
    2ba0:	06100112 	undefined
    2ba4:	24020000 	strcs	r0, [r2]
    2ba8:	3e0b0b00 	fmacdcc	d0, d11, d0
    2bac:	000e030b 	andeq	r0, lr, fp, lsl #6
    2bb0:	00240300 	eoreq	r0, r4, r0, lsl #6
    2bb4:	0b3e0b0b 	bleq	f857e8 <__Stack_Size+0xf853e8>
    2bb8:	00000803 	andeq	r0, r0, r3, lsl #16
    2bbc:	0b002404 	bleq	bbd4 <__Stack_Size+0xb7d4>
    2bc0:	000b3e0b 	andeq	r3, fp, fp, lsl #28
    2bc4:	00160500 	andseq	r0, r6, r0, lsl #10
    2bc8:	0b3a0e03 	bleq	e863dc <__Stack_Size+0xe85fdc>
    2bcc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2bd0:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    2bd4:	030c3f01 	movweq	r3, #52993	; 0xcf01
    2bd8:	3b0b3a0e 	blcc	2d1418 <__Stack_Size+0x2d1018>
    2bdc:	110c270b 	tstne	ip, fp, lsl #14
    2be0:	40011201 	andmi	r1, r1, r1, lsl #4
    2be4:	00130106 	andseq	r0, r3, r6, lsl #2
    2be8:	00340700 	eorseq	r0, r4, r0, lsl #14
    2bec:	0b3a0e03 	bleq	e86400 <__Stack_Size+0xe86000>
    2bf0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2bf4:	00000a02 	andeq	r0, r0, r2, lsl #20
    2bf8:	03003408 	movweq	r3, #1032	; 0x408
    2bfc:	3b0b3a08 	blcc	2d1424 <__Stack_Size+0x2d1024>
    2c00:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2c04:	0900000a 	stmdbeq	r0, {r1, r3}
    2c08:	13490101 	movtne	r0, #37121	; 0x9101
    2c0c:	00001301 	andeq	r1, r0, r1, lsl #6
    2c10:	0000210a 	andeq	r2, r0, sl, lsl #2
    2c14:	00150b00 	andseq	r0, r5, r0, lsl #22
    2c18:	00000c27 	andeq	r0, r0, r7, lsr #24
    2c1c:	0b000f0c 	bleq	6854 <__Stack_Size+0x6454>
    2c20:	0013490b 	andseq	r4, r3, fp, lsl #18
    2c24:	00340d00 	eorseq	r0, r4, r0, lsl #26
    2c28:	0b3a0e03 	bleq	e8643c <__Stack_Size+0xe8603c>
    2c2c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2c30:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252
    2c34:	01000000 	tsteq	r0, r0
    2c38:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2c3c:	0e030b13 	vmoveq.32	d3[0], r0
    2c40:	01110e1b 	tsteq	r1, fp, lsl lr
    2c44:	06100112 	undefined
    2c48:	24020000 	strcs	r0, [r2]
    2c4c:	3e0b0b00 	fmacdcc	d0, d11, d0
    2c50:	0008030b 	andeq	r0, r8, fp, lsl #6
    2c54:	00160300 	andseq	r0, r6, r0, lsl #6
    2c58:	0b3a0e03 	bleq	e8646c <__Stack_Size+0xe8606c>
    2c5c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2c60:	24040000 	strcs	r0, [r4]
    2c64:	3e0b0b00 	fmacdcc	d0, d11, d0
    2c68:	000e030b 	andeq	r0, lr, fp, lsl #6
    2c6c:	012e0500 	teqeq	lr, r0, lsl #10
    2c70:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    2c74:	0b3b0b3a 	bleq	ec5964 <__Stack_Size+0xec5564>
    2c78:	13490c27 	movtne	r0, #39975	; 0x9c27
    2c7c:	01120111 	tsteq	r2, r1, lsl r1
    2c80:	13010640 	movwne	r0, #5696	; 0x1640
    2c84:	05060000 	streq	r0, [r6]
    2c88:	3a0e0300 	bcc	383890 <__Stack_Size+0x383490>
    2c8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c90:	00060213 	andeq	r0, r6, r3, lsl r2
    2c94:	00340700 	eorseq	r0, r4, r0, lsl #14
    2c98:	0b3a0803 	bleq	e84cac <__Stack_Size+0xe848ac>
    2c9c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2ca0:	00000602 	andeq	r0, r0, r2, lsl #12
    2ca4:	03003408 	movweq	r3, #1032	; 0x408
    2ca8:	3b0b3a0e 	blcc	2d14e8 <__Stack_Size+0x2d10e8>
    2cac:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2cb0:	09000006 	stmdbeq	r0, {r1, r2}
    2cb4:	0b0b000f 	bleq	2c2cf8 <__Stack_Size+0x2c28f8>
    2cb8:	0f0a0000 	svceq	0x000a0000
    2cbc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2cc0:	0b000013 	bleq	2d14 <__Stack_Size+0x2914>
    2cc4:	00000026 	andeq	r0, r0, r6, lsr #32
    2cc8:	4900260c 	stmdbmi	r0, {r2, r3, r9, sl, sp}
    2ccc:	00000013 	andeq	r0, r0, r3, lsl r0
    2cd0:	25011101 	strcs	r1, [r1, #-257]
    2cd4:	030b130e 	movweq	r1, #45838	; 0xb30e
    2cd8:	110e1b0e 	tstne	lr, lr, lsl #22
    2cdc:	10011201 	andne	r1, r1, r1, lsl #4
    2ce0:	02000006 	andeq	r0, r0, #6	; 0x6
    2ce4:	0b0b0024 	bleq	2c2d7c <__Stack_Size+0x2c297c>
    2ce8:	0e030b3e 	vmoveq.16	d3[0], r0
    2cec:	24030000 	strcs	r0, [r3]
    2cf0:	3e0b0b00 	fmacdcc	d0, d11, d0
    2cf4:	0008030b 	andeq	r0, r8, fp, lsl #6
    2cf8:	00240400 	eoreq	r0, r4, r0, lsl #8
    2cfc:	0b3e0b0b 	bleq	f85930 <__Stack_Size+0xf85530>
    2d00:	0f050000 	svceq	0x00050000
    2d04:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2d08:	000f0600 	andeq	r0, pc, r0, lsl #12
    2d0c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2d10:	16070000 	strne	r0, [r7], -r0
    2d14:	3a0e0300 	bcc	38391c <__Stack_Size+0x38351c>
    2d18:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2d1c:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2d20:	0c3f012e 	ldfeqs	f0, [pc], #-184
    2d24:	0b3a0e03 	bleq	e86538 <__Stack_Size+0xe86138>
    2d28:	0c270b3b 	stceq	11, cr0, [r7], #-236
    2d2c:	01111349 	tsteq	r1, r9, asr #6
    2d30:	06400112 	undefined
    2d34:	00001301 	andeq	r1, r0, r1, lsl #6
    2d38:	03000509 	movweq	r0, #1289	; 0x509
    2d3c:	3b0b3a08 	blcc	2d1564 <__Stack_Size+0x2d1164>
    2d40:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2d44:	0a000006 	beq	2d64 <__Stack_Size+0x2964>
    2d48:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2d4c:	0b3b0b3a 	bleq	ec5a3c <__Stack_Size+0xec563c>
    2d50:	06021349 	streq	r1, [r2], -r9, asr #6
    2d54:	340b0000 	strcc	r0, [fp]
    2d58:	3a080300 	bcc	203960 <__Stack_Size+0x203560>
    2d5c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2d60:	0c000013 	stceq	0, cr0, [r0], {19}
    2d64:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2d68:	0b3b0b3a 	bleq	ec5a58 <__Stack_Size+0xec5658>
    2d6c:	06021349 	streq	r1, [r2], -r9, asr #6
    2d70:	340d0000 	strcc	r0, [sp]
    2d74:	3a080300 	bcc	20397c <__Stack_Size+0x20357c>
    2d78:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2d7c:	000a0213 	andeq	r0, sl, r3, lsl r2
    2d80:	11010000 	tstne	r1, r0
    2d84:	130e2501 	movwne	r2, #58625	; 0xe501
    2d88:	1b0e030b 	blne	3839bc <__Stack_Size+0x3835bc>
    2d8c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    2d90:	00061001 	andeq	r1, r6, r1
    2d94:	00240200 	eoreq	r0, r4, r0, lsl #4
    2d98:	0b3e0b0b 	bleq	f859cc <__Stack_Size+0xf855cc>
    2d9c:	00000803 	andeq	r0, r0, r3, lsl #16
    2da0:	0b002403 	bleq	bdb4 <__Stack_Size+0xb9b4>
    2da4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2da8:	0400000e 	streq	r0, [r0], #-14
    2dac:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2db0:	0b3b0b3a 	bleq	ec5aa0 <__Stack_Size+0xec56a0>
    2db4:	00001349 	andeq	r1, r0, r9, asr #6
    2db8:	03001605 	movweq	r1, #1541	; 0x605
    2dbc:	3b0b3a0e 	blcc	2d15fc <__Stack_Size+0x2d11fc>
    2dc0:	00134905 	andseq	r4, r3, r5, lsl #18
    2dc4:	01170600 	tsteq	r7, r0, lsl #12
    2dc8:	0b3a0b0b 	bleq	e859fc <__Stack_Size+0xe855fc>
    2dcc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2dd0:	0d070000 	stceq	0, cr0, [r7]
    2dd4:	3a0e0300 	bcc	3839dc <__Stack_Size+0x3835dc>
    2dd8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ddc:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2de0:	13490101 	movtne	r0, #37121	; 0x9101
    2de4:	00001301 	andeq	r1, r0, r1, lsl #6
    2de8:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
    2dec:	000b2f13 	andeq	r2, fp, r3, lsl pc
    2df0:	00240a00 	eoreq	r0, r4, r0, lsl #20
    2df4:	0b3e0b0b 	bleq	f85a28 <__Stack_Size+0xf85628>
    2df8:	130b0000 	movwne	r0, #45056	; 0xb000
    2dfc:	3a0b0b01 	bcc	2c5a08 <__Stack_Size+0x2c5608>
    2e00:	010b3b0b 	tsteq	fp, fp, lsl #22
    2e04:	0c000013 	stceq	0, cr0, [r0], {19}
    2e08:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2e0c:	0b3b0b3a 	bleq	ec5afc <__Stack_Size+0xec56fc>
    2e10:	0a381349 	beq	e07b3c <__Stack_Size+0xe0773c>
    2e14:	0f0d0000 	svceq	0x000d0000
    2e18:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2e1c:	01130e00 	tsteq	r3, r0, lsl #28
    2e20:	0b0b0e03 	bleq	2c6634 <__Stack_Size+0x2c6234>
    2e24:	0b3b0b3a 	bleq	ec5b14 <__Stack_Size+0xec5714>
    2e28:	00001301 	andeq	r1, r0, r1, lsl #6
    2e2c:	03000d0f 	movweq	r0, #3343	; 0xd0f
    2e30:	3b0b3a08 	blcc	2d1658 <__Stack_Size+0x2d1258>
    2e34:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2e38:	1000000a 	andne	r0, r0, sl
    2e3c:	0b0b000f 	bleq	2c2e80 <__Stack_Size+0x2c2a80>
    2e40:	00001349 	andeq	r1, r0, r9, asr #6
    2e44:	03011311 	movweq	r1, #4881	; 0x1311
    2e48:	3a050b0e 	bcc	145a88 <__Stack_Size+0x145688>
    2e4c:	010b3b0b 	tsteq	fp, fp, lsl #22
    2e50:	12000013 	andne	r0, r0, #19	; 0x13
    2e54:	0c270015 	stceq	0, cr0, [r7], #-84
    2e58:	15130000 	ldrne	r0, [r3]
    2e5c:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
    2e60:	00130113 	andseq	r0, r3, r3, lsl r1
    2e64:	00051400 	andeq	r1, r5, r0, lsl #8
    2e68:	00001349 	andeq	r1, r0, r9, asr #6
    2e6c:	03000d15 	movweq	r0, #3349	; 0xd15
    2e70:	3b0b3a0e 	blcc	2d16b0 <__Stack_Size+0x2d12b0>
    2e74:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    2e78:	1600000a 	strne	r0, [r0], -sl
    2e7c:	13490026 	movtne	r0, #36902	; 0x9026
    2e80:	13170000 	tstne	r7, #0	; 0x0
    2e84:	0b0e0301 	bleq	383a90 <__Stack_Size+0x383690>
    2e88:	3b0b3a0b 	blcc	2d16bc <__Stack_Size+0x2d12bc>
    2e8c:	00130105 	andseq	r0, r3, r5, lsl #2
    2e90:	01131800 	tsteq	r3, r0, lsl #16
    2e94:	0b3a0b0b 	bleq	e85ac8 <__Stack_Size+0xe856c8>
    2e98:	1301053b 	movwne	r0, #5435	; 0x153b
    2e9c:	17190000 	ldrne	r0, [r9, -r0]
    2ea0:	3a0b0b01 	bcc	2c5aac <__Stack_Size+0x2c56ac>
    2ea4:	01053b0b 	tsteq	r5, fp, lsl #22
    2ea8:	1a000013 	bne	2efc <__Stack_Size+0x2afc>
    2eac:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2eb0:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    2eb4:	00001349 	andeq	r1, r0, r9, asr #6
    2eb8:	2701151b 	smladcs	r1, fp, r5, r1
    2ebc:	0013010c 	andseq	r0, r3, ip, lsl #2
    2ec0:	01041c00 	tsteq	r4, r0, lsl #24
    2ec4:	0b0b0e03 	bleq	2c66d8 <__Stack_Size+0x2c62d8>
    2ec8:	0b3b0b3a 	bleq	ec5bb8 <__Stack_Size+0xec57b8>
    2ecc:	00001301 	andeq	r1, r0, r1, lsl #6
    2ed0:	0300281d 	movweq	r2, #2077	; 0x81d
    2ed4:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    2ed8:	012e1e00 	teqeq	lr, r0, lsl #28
    2edc:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    2ee0:	0b3b0b3a 	bleq	ec5bd0 <__Stack_Size+0xec57d0>
    2ee4:	13490c27 	movtne	r0, #39975	; 0x9c27
    2ee8:	01120111 	tsteq	r2, r1, lsl r1
    2eec:	13010640 	movwne	r0, #5696	; 0x1640
    2ef0:	051f0000 	ldreq	r0, [pc, #0]	; 2ef8 <__Stack_Size+0x2af8>
    2ef4:	3a0e0300 	bcc	383afc <__Stack_Size+0x3836fc>
    2ef8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2efc:	00060213 	andeq	r0, r6, r3, lsl r2
    2f00:	00052000 	andeq	r2, r5, r0
    2f04:	0b3a0803 	bleq	e84f18 <__Stack_Size+0xe84b18>
    2f08:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2f0c:	00000602 	andeq	r0, r0, r2, lsl #12
    2f10:	03003421 	movweq	r3, #1057	; 0x421
    2f14:	3b0b3a0e 	blcc	2d1754 <__Stack_Size+0x2d1354>
    2f18:	0013490b 	andseq	r4, r3, fp, lsl #18
    2f1c:	00342200 	eorseq	r2, r4, r0, lsl #4
    2f20:	0b3a0803 	bleq	e84f34 <__Stack_Size+0xe84b34>
    2f24:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2f28:	00000a02 	andeq	r0, r0, r2, lsl #20
    2f2c:	03003423 	movweq	r3, #1059	; 0x423
    2f30:	3b0b3a0e 	blcc	2d1770 <__Stack_Size+0x2d1370>
    2f34:	3f134905 	svccc	0x00134905
    2f38:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    2f3c:	11010000 	tstne	r1, r0
    2f40:	130e2501 	movwne	r2, #58625	; 0xe501
    2f44:	1b0e030b 	blne	383b78 <__Stack_Size+0x383778>
    2f48:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    2f4c:	00061001 	andeq	r1, r6, r1
    2f50:	00240200 	eoreq	r0, r4, r0, lsl #4
    2f54:	0b3e0b0b 	bleq	f85b88 <__Stack_Size+0xf85788>
    2f58:	00000e03 	andeq	r0, r0, r3, lsl #28
    2f5c:	0b002403 	bleq	bf70 <__Stack_Size+0xbb70>
    2f60:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2f64:	04000008 	streq	r0, [r0], #-8
    2f68:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2f6c:	0b3b0b3a 	bleq	ec5c5c <__Stack_Size+0xec585c>
    2f70:	00001349 	andeq	r1, r0, r9, asr #6
    2f74:	03001605 	movweq	r1, #1541	; 0x605
    2f78:	3b0b3a0e 	blcc	2d17b8 <__Stack_Size+0x2d13b8>
    2f7c:	00134905 	andseq	r4, r3, r5, lsl #18
    2f80:	01170600 	tsteq	r7, r0, lsl #12
    2f84:	0b3a0b0b 	bleq	e85bb8 <__Stack_Size+0xe857b8>
    2f88:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2f8c:	0d070000 	stceq	0, cr0, [r7]
    2f90:	3a0e0300 	bcc	383b98 <__Stack_Size+0x383798>
    2f94:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2f98:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2f9c:	13490101 	movtne	r0, #37121	; 0x9101
    2fa0:	00001301 	andeq	r1, r0, r1, lsl #6
    2fa4:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
    2fa8:	000b2f13 	andeq	r2, fp, r3, lsl pc
    2fac:	00240a00 	eoreq	r0, r4, r0, lsl #20
    2fb0:	0b3e0b0b 	bleq	f85be4 <__Stack_Size+0xf857e4>
    2fb4:	130b0000 	movwne	r0, #45056	; 0xb000
    2fb8:	3a0b0b01 	bcc	2c5bc4 <__Stack_Size+0x2c57c4>
    2fbc:	010b3b0b 	tsteq	fp, fp, lsl #22
    2fc0:	0c000013 	stceq	0, cr0, [r0], {19}
    2fc4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2fc8:	0b3b0b3a 	bleq	ec5cb8 <__Stack_Size+0xec58b8>
    2fcc:	0a381349 	beq	e07cf8 <__Stack_Size+0xe078f8>
    2fd0:	0f0d0000 	svceq	0x000d0000
    2fd4:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2fd8:	01130e00 	tsteq	r3, r0, lsl #28
    2fdc:	0b0b0e03 	bleq	2c67f0 <__Stack_Size+0x2c63f0>
    2fe0:	0b3b0b3a 	bleq	ec5cd0 <__Stack_Size+0xec58d0>
    2fe4:	00001301 	andeq	r1, r0, r1, lsl #6
    2fe8:	03000d0f 	movweq	r0, #3343	; 0xd0f
    2fec:	3b0b3a08 	blcc	2d1814 <__Stack_Size+0x2d1414>
    2ff0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2ff4:	1000000a 	andne	r0, r0, sl
    2ff8:	0b0b000f 	bleq	2c303c <__Stack_Size+0x2c2c3c>
    2ffc:	00001349 	andeq	r1, r0, r9, asr #6
    3000:	03011311 	movweq	r1, #4881	; 0x1311
    3004:	3a050b0e 	bcc	145c44 <__Stack_Size+0x145844>
    3008:	010b3b0b 	tsteq	fp, fp, lsl #22
    300c:	12000013 	andne	r0, r0, #19	; 0x13
    3010:	0c270015 	stceq	0, cr0, [r7], #-84
    3014:	15130000 	ldrne	r0, [r3]
    3018:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
    301c:	00130113 	andseq	r0, r3, r3, lsl r1
    3020:	00051400 	andeq	r1, r5, r0, lsl #8
    3024:	00001349 	andeq	r1, r0, r9, asr #6
    3028:	03000d15 	movweq	r0, #3349	; 0xd15
    302c:	3b0b3a0e 	blcc	2d186c <__Stack_Size+0x2d146c>
    3030:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    3034:	1600000a 	strne	r0, [r0], -sl
    3038:	13490026 	movtne	r0, #36902	; 0x9026
    303c:	13170000 	tstne	r7, #0	; 0x0
    3040:	0b0e0301 	bleq	383c4c <__Stack_Size+0x38384c>
    3044:	3b0b3a0b 	blcc	2d1878 <__Stack_Size+0x2d1478>
    3048:	00130105 	andseq	r0, r3, r5, lsl #2
    304c:	01131800 	tsteq	r3, r0, lsl #16
    3050:	0b3a0b0b 	bleq	e85c84 <__Stack_Size+0xe85884>
    3054:	1301053b 	movwne	r0, #5435	; 0x153b
    3058:	17190000 	ldrne	r0, [r9, -r0]
    305c:	3a0b0b01 	bcc	2c5c68 <__Stack_Size+0x2c5868>
    3060:	01053b0b 	tsteq	r5, fp, lsl #22
    3064:	1a000013 	bne	30b8 <__Stack_Size+0x2cb8>
    3068:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    306c:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    3070:	00001349 	andeq	r1, r0, r9, asr #6
    3074:	2701151b 	smladcs	r1, fp, r5, r1
    3078:	0013010c 	andseq	r0, r3, ip, lsl #2
    307c:	012e1c00 	teqeq	lr, r0, lsl #24
    3080:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    3084:	0b3b0b3a 	bleq	ec5d74 <__Stack_Size+0xec5974>
    3088:	01110c27 	tsteq	r1, r7, lsr #24
    308c:	06400112 	undefined
    3090:	00001301 	andeq	r1, r0, r1, lsl #6
    3094:	0300051d 	movweq	r0, #1309	; 0x51d
    3098:	3b0b3a0e 	blcc	2d18d8 <__Stack_Size+0x2d14d8>
    309c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    30a0:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    30a4:	08030005 	stmdaeq	r3, {r0, r2}
    30a8:	0b3b0b3a 	bleq	ec5d98 <__Stack_Size+0xec5998>
    30ac:	06021349 	streq	r1, [r2], -r9, asr #6
    30b0:	341f0000 	ldrcc	r0, [pc], #0	; 30b8 <__Stack_Size+0x2cb8>
    30b4:	3a080300 	bcc	203cbc <__Stack_Size+0x2038bc>
    30b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    30bc:	000a0213 	andeq	r0, sl, r3, lsl r2
    30c0:	00342000 	eorseq	r2, r4, r0
    30c4:	0b3a0e03 	bleq	e868d8 <__Stack_Size+0xe864d8>
    30c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    30cc:	34210000 	strtcc	r0, [r1]
    30d0:	3a080300 	bcc	203cd8 <__Stack_Size+0x2038d8>
    30d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    30d8:	22000013 	andcs	r0, r0, #19	; 0x13
    30dc:	08030034 	stmdaeq	r3, {r2, r4, r5}
    30e0:	0b3b0b3a 	bleq	ec5dd0 <__Stack_Size+0xec59d0>
    30e4:	06021349 	streq	r1, [r2], -r9, asr #6
    30e8:	0a230000 	beq	8c30f0 <__Stack_Size+0x8c2cf0>
    30ec:	3a0e0300 	bcc	383cf4 <__Stack_Size+0x3838f4>
    30f0:	000b3b0b 	andeq	r3, fp, fp, lsl #22
    30f4:	010b2400 	tsteq	fp, r0, lsl #8
    30f8:	00000655 	andeq	r0, r0, r5, asr r6
    30fc:	03003425 	movweq	r3, #1061	; 0x425
    3100:	3b0b3a0e 	blcc	2d1940 <__Stack_Size+0x2d1540>
    3104:	3f134905 	svccc	0x00134905
    3108:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    310c:	11010000 	tstne	r1, r0
    3110:	55061000 	strpl	r1, [r6]
    3114:	1b080306 	blne	203d34 <__Stack_Size+0x203934>
    3118:	13082508 	movwne	r2, #34056	; 0x8508
    311c:	00000005 	andeq	r0, r0, r5

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000045 	andeq	r0, r0, r5, asr #32
       4:	001f0002 	andseq	r0, pc, r2
       8:	01020000 	tsteq	r2, r0
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	tsteq	r0, r0
      18:	00010000 	andeq	r0, r1, r0
      1c:	69747263 	ldmdbvs	r4!, {r0, r1, r5, r6, r9, ip, sp, lr}^
      20:	6d73612e 	ldfvse	f6, [r3, #-184]!
      24:	00000000 	andeq	r0, r0, r0
      28:	02050000 	andeq	r0, r5, #0	; 0x0
      2c:	00000000 	andeq	r0, r0, r0
      30:	0100cc03 	tsteq	r0, r3, lsl #24
      34:	01000602 	tsteq	r0, r2, lsl #12
      38:	02050001 	andeq	r0, r5, #1	; 0x1
      3c:	00000000 	andeq	r0, r0, r0
      40:	0100d703 	tsteq	r0, r3, lsl #14
      44:	01000602 	tsteq	r0, r2, lsl #12
      48:	00009601 	andeq	r9, r0, r1, lsl #12
      4c:	40000200 	andmi	r0, r0, r0, lsl #4
      50:	02000000 	andeq	r0, r0, #0	; 0x0
      54:	0d0efb01 	vstreq	d15, [lr, #-4]
      58:	01010100 	tsteq	r1, r0, lsl #2
      5c:	00000001 	andeq	r0, r0, r1
      60:	01000001 	tsteq	r0, r1
      64:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
      68:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
      6c:	2f2e2e2f 	svccs	0x002e2e2f
      70:	2d636367 	stclcs	3, cr6, [r3, #-412]!
      74:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
      78:	696c2f30 	stmdbvs	ip!, {r4, r5, r8, r9, sl, fp, sp}^
      7c:	6f6c6762 	svcvs	0x006c6762
      80:	612f7373 	teqvs	pc, r3, ror r3
      84:	00006d72 	andeq	r6, r0, r2, ror sp
      88:	30747263 	rsbscc	r7, r4, r3, ror #4
      8c:	0100532e 	tsteq	r0, lr, lsr #6
      90:	00000000 	andeq	r0, r0, r0
      94:	00000205 	andeq	r0, r0, r5, lsl #4
      98:	d2030000 	andle	r0, r3, #0	; 0x0
      9c:	2f2f0100 	svccs	0x002f0100
      a0:	2f2f2f33 	svccs	0x002f2f33
      a4:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
      a8:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
      ac:	2f302f2f 	svccs	0x00302f2f
      b0:	2f2f302f 	svccs	0x002f302f
      b4:	2f302f2f 	svccs	0x00302f2f
      b8:	09032f30 	stmdbeq	r3, {r4, r5, r8, r9, sl, fp, sp}
      bc:	2f2f322e 	svccs	0x002f322e
      c0:	032f2f30 	teqeq	pc, #192	; 0xc0
      c4:	2f342e0e 	svccs	0x00342e0e
      c8:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
      cc:	2f2f2f2f 	svccs	0x002f2f2f
      d0:	f9032f30 	undefined instruction 0xf9032f30
      d4:	2f2f2e00 	svccs	0x002f2e00
      d8:	2f2f2f2f 	svccs	0x002f2f2f
      dc:	10023030 	andne	r3, r2, r0, lsr r0
      e0:	37010100 	strcc	r0, [r1, -r0, lsl #2]
      e4:	02000001 	andeq	r0, r0, #1	; 0x1
      e8:	0000a800 	andeq	sl, r0, r0, lsl #16
      ec:	fb010200 	blx	408f6 <__Stack_Size+0x404f6>
      f0:	01000d0e 	tsteq	r0, lr, lsl #26
      f4:	00010101 	andeq	r0, r1, r1, lsl #2
      f8:	00010000 	andeq	r0, r1, r0
      fc:	50410100 	subpl	r0, r1, r0, lsl #2
     100:	72732f50 	rsbsvc	r2, r3, #320	; 0x140
     104:	74730063 	ldrbtvc	r0, [r3], #-99
     108:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
/* set up for an interpolation from pose to nextpose over TIME
 milliseconds by setting servo speeds. */
void BioloidControllerEx_interpolateSetup(int time) {
	int i;
	int frames = (time/frameLength) + 1;
	nextframe_ = getMillis() + frameLength;
     10c:	5f783031 	svcpl	0x00783031
	PrintString("BioloidEX BioloidControllerEx_interpolateSetup nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// set speed each servo...
	for (i = 0; i < poseSize; i++) {
     110:	2f62696c 	svccs	0x0062696c
/* set up for an interpolation from pose to nextpose over TIME
 milliseconds by setting servo speeds. */
void BioloidControllerEx_interpolateSetup(int time) {
	int i;
	int frames = (time/frameLength) + 1;
	nextframe_ = getMillis() + frameLength;
     114:	00636e69 	rsbeq	r6, r3, r9, ror #28
     118:	33354d43 	teqcc	r5, #4288	; 0x10c0
	PrintString("BioloidEX BioloidControllerEx_interpolateSetup nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// set speed each servo...
	for (i = 0; i < poseSize; i++) {
     11c:	57485f30 	smlaldxpl	r5, r8, r0, pc
     120:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     124:	616d0000 	cmnvs	sp, r0
		if (nextpose_[i] > pose_[i]) {
     128:	632e6e69 	teqvs	lr, #1680	; 0x690
     12c:	00000100 	andeq	r0, r0, r0, lsl #2
			speed_[i] = (nextpose_[i] - pose_[i]) / frames + 1;
     130:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
		} else {
			speed_[i] = (pose_[i] - nextpose_[i]) / frames + 1;
     134:	30316632 	eorscc	r6, r1, r2, lsr r6
     138:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     13c:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
	PrintString("BioloidEX BioloidControllerEx_interpolateSetup nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// set speed each servo...
	for (i = 0; i < poseSize; i++) {
     140:	00000200 	andeq	r0, r0, r0, lsl #4
     144:	616e7964 	cmnvs	lr, r4, ror #18
		PrintString(" - ");
		TxD_Dec_U16(speed_[i]);
		PrintString("\n");
#endif
	}
	interpolating = 1;
     148:	6578696d 	ldrbvs	r6, [r8, #-2413]!
     14c:	64615f6c 	strbtvs	r5, [r1], #-3948
}
     150:	73657264 	cmnvc	r5, #1073741830	; 0x40000006
     154:	61745f73 	cmnvs	r4, r3, ror pc
     158:	73656c62 	cmnvc	r5, #25088	; 0x6200
     15c:	0300682e 	movweq	r6, #2094	; 0x82e
     160:	656c0000 	strbvs	r0, [ip]!
     164:	00682e64 	rsbeq	r2, r8, r4, ror #28
     168:	61000003 	tstvs	r0, r3
	PrintString("\n");
#endif
}

/* new-style setup */
void Bioloid_Setup(int servo_cnt) {
     16c:	682e6364 	stmdavs	lr!, {r2, r5, r6, r8, r9, sp, lr}
     170:	00000300 	andeq	r0, r0, r0, lsl #6
	/**id_ = (unsigned char *) malloc(servo_cnt * sizeof(unsigned char));
	 pose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
     174:	74747562 	ldrbtvc	r7, [r4], #-1378
     178:	682e6e6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
	for (i = 0; i < poseSize; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
     17c:	00000300 	andeq	r0, r0, r0, lsl #6
     180:	2e63696d 	cdpcs	9, 6, cr6, cr3, cr13, {3}
		nextpose_[i] = 512;
     184:	00030068 	andeq	r0, r3, r8, rrx
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
	for (i = 0; i < poseSize; i++) {
		id_[i] = i + 1;
     188:	61737500 	cmnvs	r3, r0, lsl #10
		pose_[i] = 512;
     18c:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
		nextpose_[i] = 512;
     190:	00000300 	andeq	r0, r0, r0, lsl #6
	 pose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
	for (i = 0; i < poseSize; i++) {
     194:	02050000 	andeq	r0, r5, #0	; 0x0
     198:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
	}
	interpolating = 0;
     19c:	31011503 	tstcc	r1, r3, lsl #10
     1a0:	3d4f3d34 	stclcc	13, cr3, [pc, #-208]
	nextframe_ = getMillis();
     1a4:	3e303e75 	mrccc	14, 1, r3, cr0, cr5, {3}
     1a8:	03201003 	teqeq	r0, #3	; 0x3
#ifdef MILLIS
	PrintString("BioloidEX nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
}
     1ac:	413d2070 	teqmi	sp, r0, ror r0
     1b0:	3e414b3e 	vmovcc.8	d1[1], r4
     1b4:	2f3f443d 	svccs	0x003f443d
     1b8:	4b4b3d2f 	blmi	12cf67c <__Stack_Size+0x12cf27c>
     1bc:	2f303e4b 	svccs	0x00303e4b
     1c0:	4b4b4b3d 	blmi	12d2ebc <__Stack_Size+0x12d2abc>
     1c4:	4b69315b 	blmi	1a4c738 <__Stack_Size+0x1a4c338>
transition_t * sequence;                    // sequence we are running
int transitions;                    // how many transitions we have left to load


//  initializes serial1 transmit at baud, 8-N-1
void BioloidControllerEx() {
     1c8:	3f3d3d4e 	svccc	0x003d3d4e
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
     1cc:	3e3d3159 	mrccc	1, 1, r3, cr13, cr9, {2}
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
     1d0:	3d3e673d 	ldccc	7, cr6, [lr, #-244]!
transition_t * sequence;                    // sequence we are running
int transitions;                    // how many transitions we have left to load


//  initializes serial1 transmit at baud, 8-N-1
void BioloidControllerEx() {
     1d4:	22242c22 	eorcs	r2, r4, #8704	; 0x2200
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
     1d8:	2c22242c 	cfstrscs	mvf2, [r2], #-176
	 pose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
     1dc:	242c2224 	strtcs	r2, [ip], #-548
     1e0:	30242c3e 	eorcc	r2, r4, lr, lsr ip
		pose_[i] = 512;
		nextpose_[i] = 512;
     1e4:	033c5803 	teqeq	ip, #196608	; 0x30000
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
     1e8:	5503202b 	strpl	r2, [r3, #-43]
		nextpose_[i] = 512;
     1ec:	202b0320 	eorcs	r0, fp, r0, lsr #6
	/**id_ = (unsigned char *) malloc(AX12_MAX_SERVOS * sizeof(unsigned char));
	 pose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
     1f0:	4c03682f 	stcmi	8, cr6, [r3], {47}
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
	}
	frameLength = BIOLOID_FRAME_LENGTH;
     1f4:	2e37034a 	cdpcs	3, 3, cr0, cr7, cr10, {2}
     1f8:	2f303d3d 	svccs	0x00303d3d
	interpolating = 0;
     1fc:	3d2f5a3d 	fstmdbscc	pc!, {s10-s70}
	nextframe_ = getMillis();
     200:	3d593d5a 	ldclcc	13, cr3, [r9, #-360]
     204:	5a753d59 	bpl	1d4f770 <__Stack_Size+0x1d4f370>
#ifdef MILLIS
	PrintString("BioloidEX nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
}
     208:	304b314b 	subcc	r3, fp, fp, asr #2
     20c:	304b304b 	subcc	r3, fp, fp, asr #32
     210:	3d4b4d4b 	stclcc	13, cr4, [fp, #-300]
     214:	09037a4b 	stmdbeq	r3, {r0, r1, r3, r6, r9, fp, ip, sp, lr}
     218:	004a023c 	subeq	r0, sl, ip, lsr r2
     21c:	01940101 	orrseq	r0, r4, r1, lsl #2
     220:	00020000 	andeq	r0, r2, r0
#endif
		mDelay(25);
	}
}
/* write pose out to servos using sync write. */
void BioloidControllerEx_writePose() {
     224:	0000006b 	andeq	r0, r0, fp, rrx
     228:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
	int temp;
	dxl_set_txpacket_id (BROADCAST_ID);
     22c:	0101000d 	tsteq	r1, sp
	dxl_set_txpacket_instruction (INST_SYNC_WRITE);
     230:	00000101 	andeq	r0, r0, r1, lsl #2
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
     234:	00000100 	andeq	r0, r0, r0, lsl #2
     238:	50504101 	subspl	r4, r0, r1, lsl #2
	dxl_set_txpacket_parameter(1, 2);
     23c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     240:	6d747300 	ldclvs	3, cr7, [r4]
     244:	31663233 	cmncc	r6, r3, lsr r2
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
     248:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
     24c:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
     250:	4300636e 	movwmi	r6, #878	; 0x36e
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
     254:	3033354d 	eorscc	r3, r3, sp, asr #10
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
     258:	2f57485f 	svccs	0x0057485f
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
     25c:	00636e69 	rsbeq	r6, r3, r9, ror #28
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
     260:	6d747300 	ldclvs	3, cr7, [r4]
     264:	31663233 	cmncc	r6, r3, lsr r2
     268:	695f7830 	ldmdbvs	pc, {r4, r5, fp, ip, sp, lr}^
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
     26c:	00632e74 	rsbeq	r2, r3, r4, ror lr
     270:	73000001 	movwvc	r0, #1	; 0x1
     274:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
     278:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
     27c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
	dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction (INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
     280:	00682e65 	rsbeq	r2, r8, r5, ror #28
     284:	75000002 	strvc	r0, [r0, #-2]
     288:	74726173 	ldrbtvc	r6, [r2], #-371
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
	}
	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
     28c:	0300682e 	movweq	r6, #2094	; 0x82e
     290:	00000000 	andeq	r0, r0, r0
     294:	343c0205 	ldrtcc	r0, [ip], #-517
	dxl_txrx_packet();
     298:	27030800 	strcs	r0, [r3, -r0, lsl #16]
	u16 CommStatus = dxl_get_result();
     29c:	0a031301 	beq	c4ea8 <__Stack_Size+0xc4aa8>
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
     2a0:	2e0f032e 	cdpcs	3, 0, cr0, cr15, cr14, {1}
		PrintErrorCode();
     2a4:	032e0f03 	teqeq	lr, #12	; 0xc
	else
		PrintCommStatus(CommStatus);
     2a8:	0f032e0f 	svceq	0x00032e0f
#endif
}
     2ac:	0a03132e 	beq	c4f6c <__Stack_Size+0xc4b6c>
     2b0:	0a03132e 	beq	c4f70 <__Stack_Size+0xc4b70>
     2b4:	1603132e 	strne	r1, [r3], -lr, lsr #6
     2b8:	0a03132e 	beq	c4f78 <__Stack_Size+0xc4b78>
	}
	interpolating = 1;
}
/* interpolate our pose, this should be called at about 30Hz. */
#define WAIT_SLOP_FACTOR 10
int BioloidControllerEx_interpolateStep(bool fWait) {
     2bc:	0a03132e 	beq	c4f7c <__Stack_Size+0xc4b7c>
     2c0:	0a03132e 	beq	c4f80 <__Stack_Size+0xc4b80>

	if (interpolating == 0)
     2c4:	0a03132e 	beq	c4f84 <__Stack_Size+0xc4b84>
		return 0;
	int i;
	int complete = poseSize;
     2c8:	0a03132e 	beq	c4f88 <__Stack_Size+0xc4b88>
	if (!fWait) {
     2cc:	0a03132e 	beq	c4f8c <__Stack_Size+0xc4b8c>
		if (getMillis() < (nextframe_ - WAIT_SLOP_FACTOR)) {
     2d0:	0a03132e 	beq	c4f90 <__Stack_Size+0xc4b90>
     2d4:	0a03132e 	beq	c4f94 <__Stack_Size+0xc4b94>
     2d8:	0a03132e 	beq	c4f98 <__Stack_Size+0xc4b98>
			return (getMillis() - nextframe_); // We still have some time to do something...
     2dc:	0a03132e 	beq	c4f9c <__Stack_Size+0xc4b9c>
     2e0:	0a03132e 	beq	c4fa0 <__Stack_Size+0xc4ba0>
     2e4:	0a03132e 	beq	c4fa4 <__Stack_Size+0xc4ba4>
#ifdef MILLIS
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	while (getMillis() < nextframe_);
     2e8:	0a03132e 	beq	c4fa8 <__Stack_Size+0xc4ba8>
     2ec:	0a03132e 	beq	c4fac <__Stack_Size+0xc4bac>
     2f0:	0a03132e 	beq	c4fb0 <__Stack_Size+0xc4bb0>
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
     2f4:	0a03132e 	beq	c4fb4 <__Stack_Size+0xc4bb4>
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     2f8:	0a03132e 	beq	c4fb8 <__Stack_Size+0xc4bb8>
     2fc:	0b03132e 	bleq	c4fbc <__Stack_Size+0xc4bbc>
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
     300:	0b03132e 	bleq	c4fc0 <__Stack_Size+0xc4bc0>
     304:	0b03132e 	bleq	c4fc4 <__Stack_Size+0xc4bc4>
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     308:	0a03132e 	beq	c4fc8 <__Stack_Size+0xc4bc8>
		int diff = nextpose_[i] - pose_[i];
     30c:	0a03132e 	beq	c4fcc <__Stack_Size+0xc4bcc>
     310:	0a03132e 	beq	c4fd0 <__Stack_Size+0xc4bd0>
     314:	0a03132e 	beq	c4fd4 <__Stack_Size+0xc4bd4>
     318:	0b03132e 	bleq	c4fd8 <__Stack_Size+0xc4bd8>
     31c:	0b03132e 	bleq	c4fdc <__Stack_Size+0xc4bdc>
		if (diff == 0) {
     320:	0a03132e 	beq	c4fe0 <__Stack_Size+0xc4be0>
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
     324:	0a03132e 	beq	c4fe4 <__Stack_Size+0xc4be4>
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
     328:	0a03142e 	beq	c53e8 <__Stack_Size+0xc4fe8>
		int diff = nextpose_[i] - pose_[i];
		if (diff == 0) {
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
     32c:	0a03132e 	beq	c4fec <__Stack_Size+0xc4bec>
					pose_[i] = nextpose_[i];
     330:	0a03132e 	beq	c4ff0 <__Stack_Size+0xc4bf0>
					complete--;
     334:	0a03132e 	beq	c4ff4 <__Stack_Size+0xc4bf4>
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
     338:	0a03132e 	beq	c4ff8 <__Stack_Size+0xc4bf8>
     33c:	0a03132e 	beq	c4ffc <__Stack_Size+0xc4bfc>
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
     340:	0a03132e 	beq	c5000 <__Stack_Size+0xc4c00>
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
     344:	0a03132e 	beq	c5004 <__Stack_Size+0xc4c04>
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
     348:	1803132e 	stmdane	r3, {r1, r2, r3, r5, r8, r9, ip}
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     34c:	1803132e 	stmdane	r3, {r1, r2, r3, r5, r8, r9, ip}
     350:	0a03132e 	beq	c5010 <__Stack_Size+0xc4c10>
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif

	}
	if (complete <= 0)
     354:	0a03132e 	beq	c5014 <__Stack_Size+0xc4c14>
		interpolating = 0;
     358:	0a03132e 	beq	c5018 <__Stack_Size+0xc4c18>
	BioloidControllerEx_writePose();
     35c:	0b03132e 	bleq	c501c <__Stack_Size+0xc4c1c>
     360:	0b03132e 	bleq	c5020 <__Stack_Size+0xc4c20>
	return 0;
}
     364:	0a03132e 	beq	c5024 <__Stack_Size+0xc4c24>
     368:	0a03132e 	beq	c5028 <__Stack_Size+0xc4c28>
     36c:	0a03132e 	beq	c502c <__Stack_Size+0xc4c2c>
     370:	0a03132e 	beq	c5030 <__Stack_Size+0xc4c30>
     374:	0a03132e 	beq	c5034 <__Stack_Size+0xc4c34>
     378:	0a03132e 	beq	c5038 <__Stack_Size+0xc4c38>
     37c:	0a03132e 	beq	c503c <__Stack_Size+0xc4c3c>
     380:	1803132e 	stmdane	r3, {r1, r2, r3, r5, r8, r9, ip}
	for (i = 0; i < poseSize; i++)
		//nextpose_[i] = pgm_read_word_near(addr+1+i) << BIOLOID_SHIFT;
		nextpose_[i] = pgm_read_word_near(addr + 1 + i);
}
/* read in current servo positions to the pose. */
void BioloidControllerEx_readPose() {
     384:	0a03132e 	beq	c5044 <__Stack_Size+0xc4c44>
     388:	0a03132e 	beq	c5048 <__Stack_Size+0xc4c48>
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
		//pose_[i] = dxl_read_word(id_[i],AXM_PRESENT_POSITION_L)<<BIOLOID_SHIFT;
		pose_[i] = dxl_read_word(id_[i], AXM_PRESENT_POSITION_L);
     38c:	0a03132e 	beq	c504c <__Stack_Size+0xc4c4c>
     390:	0a03132e 	beq	c5050 <__Stack_Size+0xc4c50>
     394:	0b03132e 	bleq	c5054 <__Stack_Size+0xc4c54>
     398:	b903132e 	stmdblt	r3, {r1, r2, r3, r5, r8, r9, ip}
     39c:	30302e7f 	eorscc	r2, r0, pc, ror lr
		PrintChar(id_[i]);
		PrintString(" - ");
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
     3a0:	2e7edd03 	cdpcs	13, 7, cr13, cr14, cr3, {0}

#ifdef DEBUG_BIOLOIDEX
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
     3a4:	63033030 	movwvs	r3, #12336	; 0x3030
     3a8:	0330302e 	teqeq	r0, #46	; 0x2e
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
	}
}
     3ac:	2f2e7cd3 	svccs	0x002e7cd3
     3b0:	0002022f 	andeq	r0, r2, pc, lsr #4
     3b4:	067c0101 	ldrbteq	r0, [ip], -r1, lsl #2
     3b8:	00020000 	andeq	r0, r2, r0
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitPosY[GaitCurrentLegNr] = -3 * g_InControlState.LegLiftHeight
				/ (3 + g_InControlState.gaitCur.HalfLiftHeight); // Easier to shift between div factor: /1 (3/3), /2 (3/6) and 3/4
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y
     3bc:	000000f4 	strdeq	r0, [r0], -r4
				/ g_InControlState.gaitCur.LiftDivFactor;
	}

	//Optional Half heigth Rear 5 LiftedPos (5 lifted positions)
	else if (((g_InControlState.gaitCur.NrLiftedPos == 5 && (LegStep == -2)))
     3c0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     3c4:	0101000d 	tsteq	r1, sp
     3c8:	00000101 	andeq	r0, r0, r1, lsl #2
     3cc:	00000100 	andeq	r0, r0, r0, lsl #2
     3d0:	50504101 	subspl	r4, r0, r1, lsl #2
     3d4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     3d8:	50504100 	subspl	r4, r0, r0, lsl #2
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = -g_InControlState.TravelLength.x / 2;
     3dc:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     3e0:	6d747300 	ldclvs	3, cr7, [r4]
     3e4:	31663233 	cmncc	r6, r3, lsr r2
     3e8:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
     3ec:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
     3f0:	4300636e 	movwmi	r6, #878	; 0x36e
     3f4:	3033354d 	eorscc	r3, r3, sp, asr #10
     3f8:	2f57485f 	svccs	0x0057485f
     3fc:	00636e69 	rsbeq	r6, r3, r9, ror #28
     400:	6f685000 	svcvs	0x00685000
		GaitPosZ[GaitCurrentLegNr] = -g_InControlState.TravelLength.z / 2;
     404:	78696e65 	stmdavc	r9!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     408:	706e495f 	rsbvc	r4, lr, pc, asr r9
     40c:	435f7475 	cmpmi	pc, #1962934272	; 0x75000000
     410:	616d6d6f 	cmnvs	sp, pc, ror #26
		GaitRotY[GaitCurrentLegNr] = -g_InControlState.TravelLength.y / 2;
     414:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
     418:	0100682e 	tsteq	r0, lr, lsr #16
     41c:	68500000 	ldmdavs	r0, {}^
     420:	696e656f 	stmdbvs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, sp, lr}^
	}

	//Optional Half heigth Front 5 LiftedPos (5 lifted positions)
	else if ((g_InControlState.gaitCur.NrLiftedPos == 5)
     424:	72445f78 	subvc	r5, r4, #480	; 0x1e0
     428:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     42c:	3158415f 	cmpcc	r8, pc, asr r1
     430:	00682e32 	rsbeq	r2, r8, r2, lsr lr
     434:	42000001 	andmi	r0, r0, #1	; 0x1
     438:	6d5f6769 	ldclvs	7, cr6, [pc, #-420]
			&& (LegStep == 2
					|| LegStep == -(g_InControlState.gaitCur.StepsInGait - 2))
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
     43c:	2e6e6961 	cdpcs	9, 6, cr6, cr14, cr1, {3}
     440:	00020063 	andeq	r0, r2, r3, rrx
     444:	6d747300 	ldclvs	3, cr7, [r4]
     448:	31663233 	cmncc	r6, r3, lsr r2
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
     44c:	745f7830 	ldrbvc	r7, [pc], #2096	; 454 <__Stack_Size+0x54>
     450:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     454:	00030068 	andeq	r0, r3, r8, rrx
     458:	72697700 	rsbvc	r7, r9, #0	; 0x0
     45c:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
     460:	00010068 	andeq	r0, r1, r8, rrx
     464:	6f685000 	svcvs	0x00685000
     468:	78696e65 	stmdavc	r9!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     46c:	0100682e 	tsteq	r0, lr, lsr #16
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y / 2;
     470:	79640000 	stmdbvc	r4!, {}^
     474:	696d616e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, sp, lr}^
     478:	5f6c6578 	svcpl	0x006c6578
     47c:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
	}
	//_B_
	//Leg front down position //bug here?  From _A_ to _B_ there should only be one gaitstep, not 2!
	//For example, where is the case of LegStep==0+2 executed when NRLiftedPos=3?
	else if ((LegStep == g_InControlState.gaitCur.FrontDownPos
     480:	5f737365 	svcpl	0x00737365
     484:	6c626174 	stfvse	f6, [r2], #-464
     488:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     48c:	00000400 	andeq	r0, r0, r0, lsl #8
     490:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
     494:	00682e74 	rsbeq	r2, r8, r4, ror lr
     498:	42000004 	andmi	r0, r0, #4	; 0x4
     49c:	6f6c6f69 	svcvs	0x006c6f69
			|| LegStep
					== -(g_InControlState.gaitCur.StepsInGait
							- g_InControlState.gaitCur.FrontDownPos))
			&& GaitPosY[GaitCurrentLegNr] < 0) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
     4a0:	78456469 	stmdavc	r5, {r0, r3, r5, r6, sl, sp, lr}^
     4a4:	0100682e 	tsteq	r0, lr, lsr #16
     4a8:	64610000 	strbtvs	r0, [r1]
     4ac:	00682e63 	rsbeq	r2, r8, r3, ror #28
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
     4b0:	00000004 	andeq	r0, r0, r4
     4b4:	00020500 	andeq	r0, r2, r0, lsl #10
     4b8:	03000000 	movweq	r0, #0	; 0x0
     4bc:	140101b4 	strne	r0, [r1], #-436
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y / 2;
     4c0:	22211f4b 	eorcs	r1, r1, #300	; 0x12c
     4c4:	2f302f30 	svccs	0x00302f30
     4c8:	0314eb2f 	tsteq	r4, #48128	; 0xbc00
		GaitPosY[GaitCurrentLegNr] = 0;
     4cc:	032e028d 	teqeq	lr, #-805306360	; 0xd0000008
     4d0:	034b010c 	movteq	r0, #45324	; 0xb10c
	}

	//Move body forward
	else {
		GaitPosX[GaitCurrentLegNr] = GaitPosX[GaitCurrentLegNr]
     4d4:	0a032076 	beq	c86b4 <__Stack_Size+0xc82b4>
     4d8:	7403222e 	strvc	r2, [r3], #-558
     4dc:	2121212e 	teqcs	r1, lr, lsr #2
     4e0:	21212121 	teqcs	r1, r1, lsr #2
     4e4:	22302421 	eorscs	r2, r0, #553648128	; 0x21000000
     4e8:	9e20032f 	cdpls	3, 2, cr0, cr0, cr15, {1}
				- (g_InControlState.TravelLength.x
						/ (short) g_InControlState.gaitCur.TLDivFactor);
		GaitPosY[GaitCurrentLegNr] = 0;
     4ec:	04143314 	ldreq	r3, [r4], #-788
     4f0:	7de70302 	stclvc	3, cr0, [r7, #8]!
     4f4:	3e21172e 	cdpcc	7, 2, cr1, cr1, cr14, {1}
		GaitPosZ[GaitCurrentLegNr] = GaitPosZ[GaitCurrentLegNr]
     4f8:	40697628 	rsbmi	r7, r9, r8, lsr #12
     4fc:	b5030304 	strlt	r0, [r3, #-772]
     500:	03152003 	tsteq	r5, #3	; 0x3
     504:	142e00d1 	strtne	r0, [lr], #-209
				- (g_InControlState.TravelLength.z
						/ (short) g_InControlState.gaitCur.TLDivFactor);
		GaitRotY[GaitCurrentLegNr] = GaitRotY[GaitCurrentLegNr]
     508:	162e3f03 	strtne	r3, [lr], -r3, lsl #30
     50c:	0a032462 	beq	c969c <__Stack_Size+0xc929c>
     510:	03012602 	movweq	r2, #5634	; 0x1602
     514:	0a032e76 	beq	cbef4 <__Stack_Size+0xcbaf4>
				- (g_InControlState.TravelLength.y
						/ (short) g_InControlState.gaitCur.TLDivFactor);
	}

}
     518:	2e760320 	cdpcs	3, 7, cr0, cr6, cr0, {1}
     51c:	03200a03 	teqeq	r0, #12288	; 0x3000
     520:	0a032076 	beq	c8700 <__Stack_Size+0xc8300>
     524:	21672120 	cmncs	r7, r0, lsr #2
     528:	69502a32 	ldmdbvs	r0, {r1, r4, r5, r9, fp, sp}^
     52c:	6a311d31 	bvs	c479f8 <__Stack_Size+0xc475f8>
     530:	a393934c 	orrsge	r9, r3, #805306369	; 0x30000001

}

//--------------------------------------------------------------------
//[GAIT Sequence]
void GaitSeq(void) {
     534:	2c3d2f22 	ldccs	15, cr2, [sp], #-136
	//Check if the Gait is in motion - If not if we are going to start a motion try to align our Gaitstep to start with a good foot
	// for the direction we are about to go...

	if (fWalking || (g_InControlState.ForceGaitStepCnt != 0))
     538:	50714b4b 	rsbspl	r4, r1, fp, asr #22
     53c:	5a085b4b 	bpl	217270 <__Stack_Size+0x216e70>
     540:	30235523 	eorcc	r5, r3, r3, lsr #10
		TravelRequest = true;   // Is walking or was walking...
     544:	82290394 	eorhi	r0, r9, #1342177282	; 0x50000002
     548:	87241c24 	strhi	r1, [r4, -r4, lsr #24]!
	else {
		TravelRequest = (abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
     54c:	4b182d02 	blmi	60b95c <__Stack_Size+0x60b55c>
     550:	084d3d83 	stmdaeq	sp, {r0, r1, r7, r8, sl, fp, ip, sp}^
     554:	84d8ae5e 	ldrbhi	sl, [r8], #3678
     558:	d892cc4f 	ldmle	r2, {r0, r1, r2, r3, r6, sl, fp, lr, pc}
     55c:	9fca4f68 	svcls	0x00ca4f68
     560:	cc78919f 	ldfgtp	f1, [r8], #-636
     564:	87759f83 	ldrbhi	r9, [r5, -r3, lsl #31]!
     568:	75831708 	strvc	r1, [r3, #1800]
     56c:	21bd4f75 	undefined instruction 0x21bd4f75
     570:	95853d1f 	strls	r3, [r5, #3359]
     574:	d67ef803 	ldrbtle	pc, [lr], -r3, lsl #16
     578:	084c7524 	stmdaeq	ip, {r2, r5, r8, sl, ip, sp, lr}^
     57c:	212f2386 	smlawbcs	pc, r6, r3, r2
				|| (abs(g_InControlState.TravelLength.y) > cTravelDeadZone);

		if (TravelRequest) {

		} else {    //Clear values under the cTravelDeadZone
			g_InControlState.TravelLength.x = 0;
     580:	6b2d5925 	blvs	b56a1c <__Stack_Size+0xb5661c>
			g_InControlState.TravelLength.z = 0;
     584:	1f2f2d3d 	svcne	0x002f2d3d
			g_InControlState.TravelLength.y = 0; //Gait NOT in motion, return to home position
		}
	}

	//Calculate Gait sequence
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
     588:	4b3f212f 	blmi	fc8a4c <__Stack_Size+0xfc864c>
     58c:	0186033d 	orreq	r0, r6, sp, lsr r3
     590:	221e149e 	andscs	r1, lr, #-1644167168	; 0x9e000000
		Gait(LegIndex);
     594:	2f1f4b75 	svccs	0x001f4b75
			g_InControlState.TravelLength.y = 0; //Gait NOT in motion, return to home position
		}
	}

	//Calculate Gait sequence
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
     598:	035b211f 	cmpeq	fp, #-1073741817	; 0xc0000007
     59c:	7303200d 	movwvc	r2, #12301	; 0x300d
     5a0:	200d0320 	andcs	r0, sp, r0, lsr #6
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5a4:	21207303 	teqcs	r0, r3, lsl #6
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
     5a8:	03273f3e 	teqeq	r7, #248	; 0xf8
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5ac:	4c3d2079 	ldcmi	0, cr2, [sp], #-484
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
     5b0:	4b594d4b 	blmi	1653ae4 <__Stack_Size+0x16536e4>
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5b4:	211f2f1f 	tstcs	pc, pc, lsl pc
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
		g_InControlState.GaitStep = 1;
     5b8:	1d15f85a 	ldcne	8, cr15, [r5, #-360]
     5bc:	08422f23 	stmdaeq	r2, {r0, r1, r5, r8, r9, sl, fp, sp}^

	// If we have a force count decrement it now...
	if (g_InControlState.ForceGaitStepCnt)
     5c0:	2d595a25 	fldscs	s11, [r9, #-148]
     5c4:	1f752d21 	svcne	0x00752d21
		g_InControlState.ForceGaitStepCnt--;
     5c8:	6784692f 	strvs	r6, [r4, pc, lsr #18]
}
     5cc:	752d212d 	strvc	r2, [sp, #-301]!
     5d0:	68592f1f 	ldmdavs	r9, {r0, r1, r2, r3, r4, r8, r9, sl, fp, sp}^
     5d4:	1f2f2d67 	svcne	0x002f2d67
     5d8:	1f592d3d 	svcne	0x00592d3d
     5dc:	67689321 	strbvs	r9, [r8, -r1, lsr #6]!
}
//--------------------------------------------------------------------
//[BalanceBody]
void BalanceBody(void) {

	TotalTransZ = TotalTransZ / BalanceDivFactor;
     5e0:	3d1f2f2d 	ldccc	15, cr2, [pc, #-180]
     5e4:	211f592d 	tstcs	pc, sp, lsr #18
     5e8:	03746b03 	cmneq	r4, #3072	; 0xc00
     5ec:	b22e0817 	eorlt	r0, lr, #1507328	; 0x170000
     5f0:	3d231d15 	stccc	13, cr1, [r3, #-84]!
	TotalTransX = TotalTransX / BalanceDivFactor;
     5f4:	75676850 	strbvc	r6, [r7, #-2128]!
     5f8:	752f211f 	strvc	r2, [pc, #-287]!	; 4e1 <__Stack_Size+0xe1>
     5fc:	67752fbb 	undefined
	TotalTransY = TotalTransY / BalanceDivFactor;
     600:	21b0211f 	lslscs	r2, pc, r1
     604:	0301cb93 	movweq	ip, #7059	; 0x1b93
     608:	5b1f3c0a 	blpl	7cf638 <__Stack_Size+0x7cf238>
     60c:	312d3d3d 	teqcc	sp, sp, lsr sp

	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
		TotalXBal1 += 3600;

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
     610:	207a0321 	rsbscs	r0, sl, r1, lsr #6
     614:	282e0903 	stmdacs	lr!, {r0, r1, r8, fp}
	TotalTransX = TotalTransX / BalanceDivFactor;
	TotalTransY = TotalTransY / BalanceDivFactor;

#ifndef QUADMODE // ??? on PhantomX Hex at no movment YBal1 = 1800, on Quad = 0...  Need to experiment
	if (TotalYBal1 > 0)        //Rotate balance circle by +/- 180 deg
		TotalYBal1 -= 1800;
     618:	2d212d13 	stccs	13, cr2, [r1, #-76]!
     61c:	2d212d21 	stccs	13, cr2, [r1, #-132]!
	else
		TotalYBal1 += 1800;
     620:	21d84c21 	bicscs	r4, r8, r1, lsr #24
#endif

	if (TotalZBal1 < -1800) //Compensate for extreme balance positions that causes overflow
     624:	4c302c30 	ldcmi	12, cr2, [r0], #-192
     628:	907ed803 	rsbsls	sp, lr, r3, lsl #16
     62c:	20790335 	rsbscs	r0, r9, r5, lsr r3
		TotalZBal1 += 3600;
     630:	211f2f27 	tstcs	pc, r7, lsr #30
     634:	25231d31 	strcs	r1, [r3, #-3377]!

	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
     638:	03262f1b 	teqeq	r6, #108	; 0x6c
     63c:	0326207a 	teqeq	r6, #122	; 0x7a
		TotalXBal1 += 3600;
     640:	222f207a 	eorcs	r2, pc, #122	; 0x7a
     644:	221e221e 	andscs	r2, lr, #-536870911	; 0xe0000001

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
     648:	e63d221e 	undefined
     64c:	4b3e084b 	blmi	f82780 <__Stack_Size+0xf82380>
	TotalXBal1 = -TotalXBal1 / BalanceDivFactor;
     650:	a1031408 	tstge	r3, r8, lsl #8
     654:	033c0801 	teqeq	ip, #65536	; 0x10000
	TotalZBal1 = TotalZBal1 / BalanceDivFactor;
     658:	7403200c 	strvc	r2, [r3], #-12
	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
		TotalXBal1 += 3600;

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
	TotalXBal1 = -TotalXBal1 / BalanceDivFactor;
     65c:	0c032020 	stceq	0, cr2, [r3], {32}
     660:	20740320 	rsbscs	r0, r4, r0, lsr #6
	TotalZBal1 = TotalZBal1 / BalanceDivFactor;
     664:	03200c03 	teqeq	r0, #768	; 0x300
     668:	0c032074 	stceq	0, cr2, [r3], {116}

}
     66c:	20740320 	rsbscs	r0, r4, r0, lsr #6
     670:	3e2e0c03 	cdpcc	12, 2, cr0, cr14, cr3, {0}
     674:	033d221e 	teqeq	sp, #-536870911	; 0xe0000001
     678:	6a032016 	bvs	c86d8 <__Stack_Size+0xc82d8>
     67c:	78036020 	stmdavc	r3, {r5, sp, lr}
     680:	78032820 	stmdavc	r3, {r5, fp, sp}
     684:	1d4e282e 	stclne	8, cr2, [lr, #-184]
     688:	1d221e23 	stcne	14, cr1, [r2, #-140]!
//sin4        - Output Sinus of AngleDeg
//cos4          - Output Cosinus of AngleDeg
void GetSinCos(short AngleDeg1) {
	short ABSAngleDeg1;   //Absolute value of the Angle in Degrees, decimals = 1
	//Get the absolute value of AngleDeg
	if (AngleDeg1 < 0)
     68c:	1d221e23 	stcne	14, cr1, [r2, #-140]!
     690:	232f2221 	teqcs	pc, #268435458	; 0x10000002
		ABSAngleDeg1 = AngleDeg1 * -1;
     694:	221e231d 	andscs	r2, lr, #1946157056	; 0x74000000
     698:	0288222c 	addeq	r2, r8, #-1073741822	; 0xc0000002
	else
		ABSAngleDeg1 = AngleDeg1;

	//Shift rotation to a full circle of 360 deg -> AngleDeg // 360
	if (AngleDeg1 < 0)    //Negative values
		AngleDeg1 = 3600 - (ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600)));
     69c:	241c164a 	ldrcs	r1, [ip], #-1610
     6a0:	0903242a 	stmdbeq	r3, {r1, r3, r5, sl, sp}
     6a4:	03016102 	movweq	r6, #4354	; 0x1102
     6a8:	09032e77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp}
     6ac:	02090374 	andeq	r0, r9, #-805306367	; 0xd0000001
     6b0:	0f030152 	svceq	0x00030152
     6b4:	0e03ba08 	fmacseq	s22, s6, s16
     6b8:	2072033c 	rsbscs	r0, r2, ip, lsr r3
     6bc:	2f200e03 	svccs	0x00200e03
	else
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));

	if (AngleDeg1 >= 0 && AngleDeg1 <= 900)     // 0 to 90 deg
     6c0:	207803fa 	ldrshtcs	r0, [r8], #-58
     6c4:	20780328 	rsbscs	r0, r8, r8, lsr #6
			{
		sin4 = pgm_read_word(&GetSin[AngleDeg1 / 5]); // 5 is the presision (0.5) of the table
     6c8:	0323ce36 	teqeq	r3, #864	; 0x360
     6cc:	09035877 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, fp, ip, lr}
     6d0:	1ee63620 	cdpne	6, 14, cr3, cr6, cr0, {1}
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
     6d4:	1c2408a0 	stcne	8, cr0, [r4], #-640
     6d8:	79033532 	stmdbvc	r3, {r1, r4, r5, r8, sl, ip, sp}
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));

	if (AngleDeg1 >= 0 && AngleDeg1 <= 900)     // 0 to 90 deg
			{
		sin4 = pgm_read_word(&GetSin[AngleDeg1 / 5]); // 5 is the presision (0.5) of the table
     6dc:	f6f42720 	undefined instruction 0xf6f42720
     6e0:	3ea2322a 	cdpcc	2, 10, cr3, cr2, cr10, {1}
     6e4:	023f3e4e 	eorseq	r3, pc, #1248	; 0x4e0
     6e8:	1c161822 	ldcne	8, cr1, [r6], {34}
     6ec:	337b4025 	cmncc	fp, #37	; 0x25
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
     6f0:	2f232b15 	svccs	0x00232b15
     6f4:	25206b03 	strcs	r6, [r0, #-2819]!
     6f8:	03201203 	teqeq	r0, #805306368	; 0x30000000
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
     6fc:	5c2f2e69 	stcpl	14, cr2, [pc], #-420
     700:	20150361 	andscs	r0, r5, r1, ror #6
     704:	2f2e6b03 	svccs	0x002e6b03
     708:	17036f5c 	smlsdne	r3, ip, pc, r6
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     70c:	2e690320 	cdpcs	3, 6, cr0, cr9, cr0, {1}
     710:	15036a2f 	strne	r6, [r3, #-2607]
     714:	3c7a0374 	ldclcc	3, cr0, [sl], #-464
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     718:	08580c03 	ldmdaeq	r8, {r0, r1, sl, fp}^
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     71c:	d73d145e 	undefined
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     720:	1434d93d 	ldrtne	sp, [r4], #-2365
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     724:	2248221e 	subcs	r2, r8, #-536870911	; 0xe0000001
     728:	0e03bb23 	fmacdeq	d11, d3, d19
     72c:	78032882 	stmdavc	r3, {r1, r7, fp, sp}
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     730:	78034420 	stmdavc	r3, {r5, sl, lr}
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     734:	78035220 	stmdavc	r3, {r5, r9, ip, lr}
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     738:	0a032820 	beq	ca7c0 <__Stack_Size+0xca3c0>
     73c:	78032120 	stmdavc	r3, {r5, r8, sp}
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
     740:	bb4c3320 	bllt	130d3c8 <__Stack_Size+0x130cfc8>
     744:	2e0903b5 	mcrcs	3, 0, r0, cr9, cr5, {5}
     748:	03270859 	teqeq	r7, #5832704	; 0x590000
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     74c:	0333010b 	teqeq	r3, #-1073741822	; 0xc0000002
     750:	09030113 	stmdbeq	r3, {r0, r1, r4, r8}
     754:	241c242e 	ldrcs	r2, [ip], #-1070
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     758:	0326343e 	teqeq	r6, #1040187392	; 0x3e000000
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     75c:	0334207a 	teqeq	r4, #122	; 0x7a
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     760:	2f6c207a 	svccs	0x006c207a
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     764:	f1033121 	undefined instruction 0xf1033121
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     768:	1b256679 	blne	95a154 <__Stack_Size+0x959d54>
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     76c:	7a033425 	bvc	cd808 <__Stack_Size+0xcd408>
     770:	7a03342e 	bvc	cd830 <__Stack_Size+0xcd430>
     774:	6a24342e 	bvs	90d834 <__Stack_Size+0x90d434>
     778:	4c200b03 	stcmi	11, cr0, [r0], #-12
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     77c:	2072033d 	rsbscs	r0, r2, sp, lsr r3
     780:	21212121 	teqcs	r1, r1, lsr #2
     784:	23212121 	teqcs	r1, #1073741832	; 0x40000008
     788:	5a312124 	bpl	c48c20 <__Stack_Size+0xc48820>
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
     78c:	5a314b4e 	bpl	c534cc <__Stack_Size+0xc530cc>
     790:	0302046b 	movweq	r0, #9323	; 0x246b
     794:	21ac7d8c 	undefined instruction 0x21ac7d8c
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     798:	3d33211f 	ldfccs	f2, [r3, #-124]!
     79c:	4a440330 	bmi	1101464 <__Stack_Size+0x1101064>
     7a0:	3d221e22 	stccc	14, cr1, [r2, #-136]!
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7a4:	2f21211f 	svccs	0x0021211f
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7a8:	dd03955a 	cfstr32le	mvfx9, [r3, #-360]
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7ac:	1503907e 	strne	r9, [r3, #-126]
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7b0:	206b033c 	rsbcs	r0, fp, ip, lsr r3
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7b4:	2f201503 	svccs	0x00201503
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7b8:	756a4b3d 	strbvc	r4, [sl, #-2877]!
     7bc:	2a216575 	bcs	859d98 <__Stack_Size+0x859998>
     7c0:	30306a6d 	eorscc	r6, r0, sp, ror #20
     7c4:	03303e2f 	teqeq	r0, #752	; 0x2f0
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7c8:	246600fc 	strbtcs	r0, [r6], #-252
     7cc:	242a4040 	strtcs	r4, [sl], #-64
     7d0:	2b231d68 	blcs	8c7d78 <__Stack_Size+0x8c7978>
	//Shift rotation to a full circle of 360 deg -> AngleDeg // 360
	if (AngleDeg1 < 0)    //Negative values
		AngleDeg1 = 3600 - (ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600)));
	else
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));
     7d4:	3f4d3142 	svccc	0x004d3142
     7d8:	9e7dd203 	cdpls	2, 7, cr13, cr13, cr3, {0}
     7dc:	03423130 	movteq	r3, #8496	; 0x2130
     7e0:	3b262e7a 	blcc	98c1d0 <__Stack_Size+0x98bdd0>
     7e4:	db033f41 	blle	d04f0 <__Stack_Size+0xd00f0>
     7e8:	1e229001 	cdpne	0, 2, cr9, cr2, cr1, {0}
     7ec:	1d4d3022 	stclne	0, cr3, [sp, #-136]
     7f0:	3e326523 	cdpcc	5, 3, cr6, cr2, cr3, {1}
     7f4:	667dba03 	ldrbtvs	fp, [sp], -r3, lsl #20
     7f8:	26373e23 	ldrtcs	r3, [r7], -r3, lsr #28
	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
	}
}
     7fc:	044c4135 	strbeq	r4, [ip], #-309
     800:	04d50303 	ldrbeq	r0, [r5], #771
     804:	222c1490 	eorcs	r1, ip, #-1879048192	; 0x90000000
     808:	30313e21 	eorscc	r3, r1, r1, lsr #28
     80c:	2f241c40 	svccs	0x00241c40
//cos4        - Input Cosinus
//AngleRad4     - Output Angle in AngleRad4
long GetArcCos(short cos4) {
	boolean NegativeValue/*:1*/;    //If the the value is Negative
	//Check for negative value
	if (cos4 < 0) {
     810:	4b4b2c3d 	blmi	12cb90c <__Stack_Size+0x12cb50c>
     814:	3c0a0371 	stccc	3, cr0, [sl], {113}
     818:	03207603 	teqeq	r0, #3145728	; 0x300000
		cos4 = -cos4;
     81c:	314b200a 	cmpcc	fp, sl
     820:	2123212f 	teqcs	r3, pc, lsr #2
		NegativeValue = 1;
	} else
		NegativeValue = 0;

	//Limit cos4 to his maximal value
	cos4 = min(cos4, c4DEC);
     824:	21212121 	teqcs	r1, r1, lsr #2
     828:	2f302f23 	svccs	0x00302f23
     82c:	3c01a203 	sfmcc	f2, 1, [r1], {3}

	if ((cos4 >= 0) && (cos4 < 9000)) {
     830:	207edc03 	rsbscs	sp, lr, r3, lsl #24
     834:	2e01a403 	cdpcs	4, 0, cr10, cr1, cr3, {0}
     838:	207edc03 	rsbscs	sp, lr, r3, lsl #24
		AngleRad4 = (byte) pgm_read_byte(&GetACos[cos4 / 79]);
     83c:	2001a403 	andcs	sl, r1, r3, lsl #8
     840:	03010422 	movweq	r0, #5154	; 0x1422
     844:	4b587a99 	blmi	161f2b0 <__Stack_Size+0x161eeb0>
		AngleRad4 = ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255) ;
     848:	0422211f 	strteq	r2, [r2], #-287
     84c:	04c60303 	strbeq	r0, [r6], #771
	} else if ((cos4 >= 9000) && (cos4 < 9900)) {
     850:	03010420 	movweq	r0, #5152	; 0x1420
     854:	22207bba 	eorcs	r7, r0, #190464	; 0x2e800
     858:	042f302f 	strteq	r3, [pc], #47	; 860 <__Stack_Size+0x460>
     85c:	04c00303 	strbeq	r0, [r0], #771
		AngleRad4 = (byte) pgm_read_byte(&GetACos[(cos4 - 9000) / 8 + 114]);
     860:	302f2f2e 	eorcc	r2, pc, lr, lsr #30
     864:	cd030204 	sfmgt	f0, 4, [r3, #-16]
     868:	012b027c 	teqeq	fp, ip, ror r2
     86c:	1b251b25 	blne	947508 <__Stack_Size+0x947108>
     870:	2e1d0325 	cdpcs	3, 1, cr0, cr13, cr5, {1}
     874:	944b3d3d 	strbls	r3, [fp], #-3389
		AngleRad4 = (long) ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255)
     878:	59232b77 	stmdbpl	r3!, {r0, r1, r2, r4, r5, r6, r8, r9, fp, sp}
	} else if ((cos4 >= 9900) && (cos4 <= 10000)) {
     87c:	3b211fad 	blcc	848738 <__Stack_Size+0x848338>
     880:	3d1f2121 	ldfccs	f2, [pc, #-132]
     884:	82780375 	rsbshi	r0, r8, #-738197503	; 0xd4000001
		AngleRad4 = (byte) pgm_read_byte(&GetACos[(cos4 - 9900) / 2 + 227]);
     888:	6a740b03 	bvs	1d0349c <__Stack_Size+0x1d0309c>
     88c:	3e2f3030 	mcrcc	0, 1, r3, cr15, cr0, {1}
     890:	b5034340 	strlt	r4, [r3, #-832]
		AngleRad4 = (long) ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255)
     894:	0318ba7e 	tsteq	r8, #516096	; 0x7e000
     898:	59263c7a 	stmdbpl	r6!, {r1, r3, r4, r5, r6, sl, fp, ip, sp}
     89c:	26207903 	strtcs	r7, [r0], -r3, lsl #18
     8a0:	3e1e302f 	cdpcc	0, 1, cr3, cr14, cr15, {1}
     8a4:	03747703 	cmneq	r4, #786432	; 0xc0000
     8a8:	1b232009 	blne	8c88d4 <__Stack_Size+0x8c84d4>
     8ac:	21213133 	teqcs	r1, r3, lsr r1
	}

	//Add negative sign
	if (NegativeValue)
		AngleRad4 = 31416 - AngleRad4;
     8b0:	5c2f2f1e 	stcpl	15, cr2, [pc], #-120
     8b4:	311d3f5b 	tstcc	sp, fp, asr pc
     8b8:	03030451 	movweq	r0, #13393	; 0x3451
     8bc:	329e0495 	addscc	r0, lr, #-1795162112	; 0x95000000
     8c0:	02241c6a 	eoreq	r1, r4, #27136	; 0x6a00

	return AngleRad4;
}
     8c4:	0c031028 	stceq	0, cr1, [r3], {40}
     8c8:	0302042e 	movweq	r0, #9262	; 0x242e
     8cc:	21d67b81 	bicscs	r7, r6, r1, lsl #23
     8d0:	5a272bf5 	bpl	9cb8ac <__Stack_Size+0x9cb4ac>
     8d4:	43212d3d 	teqmi	r1, #3904	; 0xf40
     8d8:	f1030104 	undefined instruction 0xf1030104

unsigned long isqrt32(unsigned long n) //
{
     8dc:	39038202 	stmdbcc	r3, {r1, r9, pc}
     8e0:	4b4b4c2e 	blmi	12d39a0 <__Stack_Size+0x12d35a0>

	root = 0;
	remainder = n;
	place = 0x40000000; // OR place = 0x4000; OR place = 0x40; - respectively

	while (place > remainder)
     8e4:	034b4b4b 	movteq	r4, #47947	; 0xbb4b
     8e8:	db034a19 	blle	d3154 <__Stack_Size+0xd2d54>
     8ec:	7a31f27c 	bvc	c7d2e4 <__Stack_Size+0xc7cee4>
		place = place >> 2;
	while (place) {
		if (remainder >= root + place) {
     8f0:	83bc4359 	undefined instruction 0x83bc4359
			remainder = remainder - root - place;
     8f4:	2f213b21 	svccs	0x00213b21
     8f8:	7a4b5a4d 	bvc	12d7234 <__Stack_Size+0x12d6e34>
			root = root + (place << 1);
     8fc:	4c219fbc 	stcmi	15, cr9, [r1], #-752

	while (place > remainder)
		place = place >> 2;
	while (place) {
		if (remainder >= root + place) {
			remainder = remainder - root - place;
     900:	59bb5d59 	ldmibpl	fp!, {r0, r3, r4, r6, r8, sl, fp, ip, lr}
			root = root + (place << 1);
		}
		root = root >> 1;
		place = place >> 2;
     904:	302c223e 	eorcc	r2, ip, lr, lsr r2
	remainder = n;
	place = 0x40000000; // OR place = 0x4000; OR place = 0x40; - respectively

	while (place > remainder)
		place = place >> 2;
	while (place) {
     908:	3d2c3051 	stccc	0, cr3, [ip, #-324]!
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
	XYhyp2 = isqrt32(
     90c:	21bb5b4b 	undefined instruction 0x21bb5b4b
//(GETATAN2) Simplyfied ArcTan2 function based on fixed point ArcCos
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
     910:	20080b03 	andcs	r0, r8, r3, lsl #22
	XYhyp2 = isqrt32(
     914:	303d59ad 	eorscc	r5, sp, sp, lsr #19
     918:	2d216740 	stccs	7, cr6, [r1, #-256]!
//(GETATAN2) Simplyfied ArcTan2 function based on fixed point ArcCos
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
     91c:	6c034c22 	stcvs	12, cr4, [r3], {34}
	XYhyp2 = isqrt32(
     920:	16037574 	undefined
     924:	2e690382 	cdpcs	3, 6, cr0, cr9, cr2, {4}
     928:	402e1703 	eormi	r1, lr, r3, lsl #14
			((long) AtanX * AtanX * c4DEC) + ((long) AtanY * AtanY * c4DEC));
	GetArcCos(((long) AtanX * (long) c6DEC) / (long) XYhyp2);
     92c:	21ea085b 	mvncs	r0, fp, asr r8
     930:	2f1f2f1f 	svccs	0x001f2f1f
     934:	68212f1f 	stmdavs	r1!, {r0, r1, r2, r3, r4, r8, r9, sl, fp, sp}
     938:	03045959 	movweq	r5, #18777	; 0x4959
     93c:	3c04db03 	stccc	11, cr13, [r4], {3}
     940:	03010476 	movweq	r0, #5238	; 0x1476
     944:	9f907ba9 	svcls	0x00907ba9

	if (AtanY < 0) // removed overhead... Atan4 = AngleRad4 * (AtanY/abs(AtanY));
     948:	4b4b7559 	blmi	12ddeb4 <__Stack_Size+0x12ddab4>
		Atan4 = -AngleRad4;
     94c:	24221e30 	strtcs	r1, [r2], #-3632
	else
		Atan4 = AngleRad4;
     950:	2f1f69a0 	svccs	0x001f69a0
	XYhyp2 = isqrt32(
			((long) AtanX * AtanX * c4DEC) + ((long) AtanY * AtanY * c4DEC));
	GetArcCos(((long) AtanX * (long) c6DEC) / (long) XYhyp2);

	if (AtanY < 0) // removed overhead... Atan4 = AngleRad4 * (AtanY/abs(AtanY));
		Atan4 = -AngleRad4;
     954:	40596894 	ldrbmi	r6, [r9], #-132
	else
		Atan4 = AngleRad4;
     958:	683dbf59 	ldmdavs	sp!, {r0, r3, r4, r6, r8, r9, sl, fp, ip, sp, pc}
     95c:	f34c4b5f 	undefined instruction 0xf34c4b5f
	return Atan4;
}
     960:	882f1fad 	stmdahi	pc!, {r0, r2, r3, r5, r7, r8, r9, sl, fp, ip}
     964:	264a7a03 	strbcs	r7, [sl], -r3, lsl #20
     968:	26587a03 	ldrbcs	r7, [r8], -r3, lsl #20
     96c:	211f3032 	tstcs	pc, r2, lsr r0

}

//--------------------------------------------------------------------
//[BalCalcOneLeg]
void BalCalcOneLeg(long PosX, long PosZ, long PosY, byte BalLegNr) {
     970:	1e2f1e30 	mcrne	14, 1, r1, cr15, cr0, {1}
	long CPR_Y;            //Final Y value for centerpoint of rotation
	long CPR_Z;            //Final Z value for centerpoint of rotation

	long lAtan;
	//Calculating totals from center of the body to the feet
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BalLegNr]) + PosZ;
     974:	31a32122 	undefined instruction 0x31a32122
     978:	394d599f 	stmdbcc	sp, {r0, r1, r2, r3, r4, r7, r8, fp, ip, lr}^
	CPR_X = (short) pgm_read_word(&cOffsetX[BalLegNr]) + PosX;
     97c:	3c100321 	ldccc	3, cr0, [r0], {33}
     980:	3d211f2f 	stccc	15, cr1, [r1, #-188]!
	CPR_Y = 150 + PosY; // using the value 150 to lower the centerpoint of rotation 'g_InControlState.BodyPos.y +

	TotalTransY += (long) PosY;
     984:	251b4f1f 	ldrcs	r4, [fp, #-3871]
     988:	2529251b 	strcs	r2, [r9, #-1307]!
     98c:	08885967 	stmeq	r8, {r0, r1, r2, r5, r6, r8, fp, ip, lr}
	TotalTransZ += (long) CPR_Z;
     990:	3d4dae93 	stclcc	14, cr10, [sp, #-588]
     994:	40503e2f 	subsmi	r3, r0, pc, lsr #28
     998:	4b4b3059 	blmi	12ccb04 <__Stack_Size+0x12cc704>
	TotalTransX += (long) CPR_X;
     99c:	32912f5b 	addscc	r2, r1, #364	; 0x16c
     9a0:	0a030304 	beq	c15b8 <__Stack_Size+0xc11b8>
     9a4:	31012f02 	tstcc	r1, r2, lsl #30
     9a8:	2e27032f 	cdpcs	3, 2, cr0, cr7, cr15, {1}

	lAtan = GetATan2(CPR_X, CPR_Z);
     9ac:	5e2e6003 	cdppl	0, 2, cr6, cr14, cr3, {0}
	TotalYBal1 += (lAtan * 1800) / 31415;
     9b0:	324b2f30 	subcc	r2, fp, #192	; 0xc0
     9b4:	3130312f 	teqcc	r0, pc, lsr #2
     9b8:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!
     9bc:	23683e3d 	cmncs	r8, #976	; 0x3d0
     9c0:	c5082f73 	strgt	r2, [r8, #-3955]
     9c4:	3e660a03 	fmulscc	s1, s12, s6
     9c8:	aa082f57 	bge	20c72c <__Stack_Size+0x20c32c>
     9cc:	253d326e 	ldrcs	r3, [sp, #-622]!

	lAtan = GetATan2(CPR_X, CPR_Y);
     9d0:	0326211b 	teqeq	r6, #-1073741818	; 0xc0000006
     9d4:	2f33207a 	svccs	0x0033207a
	TotalZBal1 += ((lAtan * 1800) / 31415) - 900; //Rotate balance circle 90 deg
     9d8:	30020903 	andcc	r0, r2, r3, lsl #18
     9dc:	02750301 	rsbseq	r0, r5, #67108864	; 0x4000000
     9e0:	15030139 	strne	r0, [r3, #-313]
     9e4:	022f4b66 	eoreq	r4, pc, #104448	; 0x19800
     9e8:	76031a34 	undefined
     9ec:	03013e02 	movweq	r3, #7682	; 0x1e02
     9f0:	59317414 	ldmdbpl	r1!, {r2, r4, sl, ip, sp, lr}
     9f4:	5d595922 	ldclpl	9, cr5, [r9, #-136]
     9f8:	29a36908 	stmibcs	r3!, {r3, r8, fp, sp, lr}
     9fc:	5d4d2125 	stfple	f2, [sp, #-148]

	lAtan = GetATan2(CPR_Z, CPR_Y);
     a00:	083d342f 	ldmdaeq	sp!, {r0, r1, r2, r3, r5, sl, ip, sp}
     a04:	207903a5 	rsbscs	r0, r9, r5, lsr #7
	TotalXBal1 += ((lAtan * 1800) / 31415) - 900; //Rotate balance circle 90 deg
     a08:	77036727 	strvc	r6, [r3, -r7, lsr #14]
     a0c:	3c0c0320 	stccc	3, cr0, [ip], {32}
     a10:	035b3d3d 	cmpeq	fp, #3904	; 0xf40
     a14:	032f6609 	teqeq	pc, #9437184	; 0x900000
     a18:	035b4a0a 	cmpeq	fp, #40960	; 0xa000
     a1c:	66033c1b 	undefined
     a20:	3e2f4b3c 	vmovcc.16	d15[2], r4
     a24:	525b5959 	subspl	r5, fp, #1458176	; 0x164000

}
     a28:	4a0c032f 	bmi	3016ec <__Stack_Size+0x3012ec>
     a2c:	3d4d3e2f 	stclcc	14, cr3, [sp, #-188]
     a30:	003c0222 	eorseq	r0, ip, r2, lsr #4
     a34:	017f0101 	cmneq	pc, r1, lsl #2
     a38:	00020000 	andeq	r0, r2, r0
     a3c:	0000009d 	muleq	r0, sp, r0
     a40:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     a44:	0101000d 	tsteq	r1, sp
     a48:	00000101 	andeq	r0, r0, r1, lsl #2
     a4c:	00000100 	andeq	r0, r0, r0, lsl #2
//SinG                  - Sin buffer for BodyRotZ
//CosG               - Cos buffer for BodyRotZ
//BodyFKPosX         - Output Position X of feet with Rotation
//BodyFKPosY         - Output Position Y of feet with Rotation
//BodyFKPosZ         - Output Position Z of feet with Rotation
void BodyFK(short PosX, short PosZ, short PosY, short RotationY, byte BodyIKLeg) {
     a50:	50504101 	subspl	r4, r0, r1, lsl #2
     a54:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
	short CPR_X;            //Final X value for centerpoint of rotation
	short CPR_Y;            //Final Y value for centerpoint of rotation
	short CPR_Z;            //Final Z value for centerpoint of rotation

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
     a58:	6d747300 	ldclvs	3, cr7, [r4]
     a5c:	31663233 	cmncc	r6, r3, lsr r2
     a60:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
//SinG                  - Sin buffer for BodyRotZ
//CosG               - Cos buffer for BodyRotZ
//BodyFKPosX         - Output Position X of feet with Rotation
//BodyFKPosY         - Output Position Y of feet with Rotation
//BodyFKPosZ         - Output Position Z of feet with Rotation
void BodyFK(short PosX, short PosZ, short PosY, short RotationY, byte BodyIKLeg) {
     a64:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
	short CPR_X;            //Final X value for centerpoint of rotation
	short CPR_Y;            //Final Y value for centerpoint of rotation
	short CPR_Z;            //Final Z value for centerpoint of rotation

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
     a68:	4100636e 	tstmi	r0, lr, ror #6
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
     a6c:	692f5050 	stmdbvs	pc!, {r4, r6, ip, lr}
     a70:	4300636e 	movwmi	r6, #878	; 0x36e
     a74:	3033354d 	eorscc	r3, r3, sp, asr #10

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     a78:	2f57485f 	svccs	0x0057485f

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BodyIKLeg]) + PosZ
     a7c:	00636e69 	rsbeq	r6, r3, r9, ror #28
     a80:	6f694200 	svcvs	0x00694200
	//Successive global rotation matrix:
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
     a84:	64696f6c 	strbtvs	r6, [r9], #-3948
     a88:	632e7845 	teqvs	lr, #4521984	; 0x450000

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BodyIKLeg]) + PosZ
     a8c:	00000100 	andeq	r0, r0, r0, lsl #2
	//Successive global rotation matrix:
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
     a90:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     a94:	30316632 	eorscc	r6, r1, r2, lsr r6
	SinG4 = sin4;
     a98:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
	CosG4 = cos4;
     a9c:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
	SinG4 = sin4;
     aa0:	00000200 	andeq	r0, r0, r0, lsl #4
	CosG4 = cos4;
     aa4:	6c6f6942 	stclvs	9, cr6, [pc], #-264
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
	SinG4 = sin4;
     aa8:	4564696f 	strbmi	r6, [r4, #-2415]!
	CosG4 = cos4;

	GetSinCos(g_InControlState.BodyRot1.z + TotalZBal1);
     aac:	00682e78 	rsbeq	r2, r8, r8, ror lr
	SinB4 = sin4;
     ab0:	64000003 	strvs	r0, [r0], #-3
     ab4:	6d616e79 	stclvs	14, cr6, [r1, #-484]!
	CosB4 = cos4;
     ab8:	6c657869 	stclvs	8, cr7, [r5], #-420

	GetSinCos(g_InControlState.BodyRot1.y + (RotationY * c1DEC) + TotalYBal1);
     abc:	6464615f 	strbtvs	r6, [r4], #-351
     ac0:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     ac4:	6261745f 	rsbvs	r7, r1, #1593835520	; 0x5f000000
     ac8:	2e73656c 	cdpcs	5, 7, cr6, cr3, cr12, {3}
     acc:	00040068 	andeq	r0, r4, r8, rrx

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     ad0:	61737500 	cmnvs	r3, r0, lsl #10
     ad4:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
     ad8:	00000400 	andeq	r0, r0, r0, lsl #8
     adc:	02050000 	andeq	r0, r5, #0	; 0x0
     ae0:	00000000 	andeq	r0, r0, r0
     ae4:	0100cd03 	tsteq	r0, r3, lsl #26
     ae8:	014b2f13 	cmpeq	fp, r3, lsl pc
     aec:	4d144d30 	ldcmi	13, cr4, [r4, #-192]
     af0:	3164302c 	cmncc	r4, ip, lsr #32
     af4:	66019503 	strvs	r9, [r1], -r3, lsl #10
     af8:	2f221e14 	svccs	0x00221e14
     afc:	845e4776 	ldrbhi	r4, [lr], #-1910
     b00:	2f221e14 	svccs	0x00221e14
     b04:	845e4776 	ldrbhi	r4, [lr], #-1910
     b08:	3d221e14 	stccc	14, cr1, [r2, #-80]!
     b0c:	7743475a 	smlsldvc	r4, r3, sl, r7
     b10:	034c3e13 	movteq	r3, #52755	; 0xce13
     b14:	22587ef8 	subscs	r7, r8, #3968	; 0xf80
     b18:	03200c03 	teqeq	r0, #768	; 0x300
     b1c:	034b2074 	movteq	r2, #45172	; 0xb074
     b20:	76033c0a 	strvc	r3, [r3], -sl, lsl #24
     b24:	2e0b0320 	cdpcs	3, 0, cr0, cr11, cr0, {1}
     b28:	03207503 	teqeq	r0, #12582912	; 0xc00000
     b2c:	3d75200a 	ldclcc	0, cr2, [r5, #-40]!
     b30:	0f03623e 	svceq	0x0003623e
     b34:	8d033d4a 	stchi	13, cr3, [r3, #-296]
     b38:	0328e47f 	teqeq	r8, #2130706432	; 0x7f000000
     b3c:	4c282078 	stcmi	0, cr2, [r8], #-480
     b40:	213a3d21 	teqcs	sl, r1, lsr #26
     b44:	3d5d2b2f 	vldrcc	d18, [sp, #-188]
     b48:	e4530350 	ldrb	r0, [r3], #-848
     b4c:	2c200b03 	stccs	11, cr0, [r0], #-12
     b50:	2e760321 	cdpcs	3, 7, cr0, cr6, cr1, {1}
     b54:	2d2e0a03 	fstmdbscs	lr!, {s0-s2}
     b58:	392f1f4c 	stmdbcc	pc!, {r2, r3, r6, r8, r9, sl, fp, ip}
     b5c:	503d3d33 	eorspl	r3, sp, r3, lsr sp
     b60:	22d63e03 	sbcscs	r3, r6, #48	; 0x30
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     b64:	3d2f221e 	sfmcc	f2, 4, [pc, #-120]!
     b68:	212d6b4b 	teqcs	sp, fp, asr #22

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     b6c:	1f2f2f1f 	svcne	0x002f2f1f
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     b70:	2165752f 	cmncs	r5, pc, lsr #10
     b74:	2f676d29 	svccs	0x00676d29
     b78:	303e2f30 	eorscc	r2, lr, r0, lsr pc
     b7c:	22822403 	addcs	r2, r2, #50331648	; 0x3000000
     b80:	2f3f221e 	svccs	0x003f221e
     b84:	6d607521 	cfstr64vs	mvdx7, [r0, #-132]!
     b88:	20790343 	rsbscs	r0, r9, r3, asr #6
     b8c:	20790327 	rsbscs	r0, r9, r7, lsr #6
     b90:	31913d51 	orrscc	r3, r1, r1, asr sp
     b94:	212a3221 	teqcs	sl, r1, lsr #4
     b98:	384e322f 	stmdacc	lr, {r0, r1, r2, r3, r5, r9, ip, sp}^
     b9c:	2e700324 	cdpcs	3, 7, cr0, cr0, cr4, {1}
     ba0:	2f4a1e03 	svccs	0x004a1e03
     ba4:	f0033e3d 	undefined instruction 0xf0033e3d
     ba8:	4312087e 	tstmi	r2, #8257536	; 0x7e0000
     bac:	76039822 	strvc	r9, [r3], -r2, lsr #16
     bb0:	4a0c033c 	bmi	3018a8 <__Stack_Size+0x3014a8>
     bb4:	01000802 	tsteq	r0, r2, lsl #16
     bb8:	00021201 	andeq	r1, r2, r1, lsl #4
     bbc:	83000200 	movwhi	r0, #512	; 0x200
     bc0:	02000000 	andeq	r0, r0, #0	; 0x0
     bc4:	0d0efb01 	vstreq	d15, [lr, #-4]
     bc8:	01010100 	tsteq	r1, r0, lsl #2
     bcc:	00000001 	andeq	r0, r0, r1
     bd0:	01000001 	tsteq	r0, r1
     bd4:	2f505041 	svccs	0x00505041
     bd8:	00637273 	rsbeq	r7, r3, r3, ror r2
     bdc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     be0:	30316632 	eorscc	r6, r1, r2, lsr r6
     be4:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     be8:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
     bec:	4d430063 	stclmi	0, cr0, [r3, #-396]
     bf0:	5f303335 	svcpl	0x00303335
     bf4:	692f5748 	stmdbvs	pc!, {r3, r6, r8, r9, sl, ip, lr}
     bf8:	0000636e 	andeq	r6, r0, lr, ror #6
     bfc:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
     c00:	632e6c61 	teqvs	lr, #24832	; 0x6100
     c04:	00000100 	andeq	r0, r0, r0, lsl #2
     c08:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     c0c:	30316632 	eorscc	r6, r1, r2, lsr r6
     c10:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     c14:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     c18:	00000200 	andeq	r0, r0, r0, lsl #4
     c1c:	616e7964 	cmnvs	lr, r4, ror #18
     c20:	6578696d 	ldrbvs	r6, [r8, #-2413]!
     c24:	64615f6c 	strbtvs	r5, [r1], #-3948
     c28:	73657264 	cmnvc	r5, #1073741830	; 0x40000006
     c2c:	61745f73 	cmnvs	r4, r3, ror pc
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * CosG4 / c4DEC
					- (long) CPR_Z * c2DEC * SinA4 / c4DEC * SinB4 / c4DEC
							* SinG4 / c4DEC
					- (long) CPR_Y * c2DEC * CosB4 / c4DEC * SinG4 / c4DEC))
			/ c2DEC;
	BodyFKPosY = ((long) CPR_Y * c2DEC
     c30:	73656c62 	cmnvc	r5, #25088	; 0x6200
	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     c34:	0300682e 	movweq	r6, #2094	; 0x82e
     c38:	73750000 	cmnvc	r5, #0	; 0x0
     c3c:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
     c40:	00030068 	andeq	r0, r3, r8, rrx
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * CosG4 / c4DEC
					- (long) CPR_Z * c2DEC * SinA4 / c4DEC * SinB4 / c4DEC
							* SinG4 / c4DEC
					- (long) CPR_Y * c2DEC * CosB4 / c4DEC * SinG4 / c4DEC))
			/ c2DEC;
	BodyFKPosY = ((long) CPR_Y * c2DEC
     c44:	05000000 	streq	r0, [r0]
     c48:	00357002 	eorseq	r7, r5, r2
     c4c:	010d0308 	tsteq	sp, r8, lsl #6
     c50:	16597813 	undefined
     c54:	034c4b94 	movteq	r4, #52116	; 0xcb94
     c58:	247403dd 	ldrbtcs	r0, [r4], #-989
     c5c:	2224201c 	eorcs	r2, r4, #28	; 0x1c
     c60:	223d6b2f 	eorscs	r6, sp, #48128	; 0xbc00
     c64:	2f1f5a85 	svccs	0x001f5a85
     c68:	03587603 	cmpeq	r8, #3145728	; 0x300000
     c6c:	03674a0d 	cmneq	r7, #53248	; 0xd000
     c70:	03276642 	teqeq	r7, #69206016	; 0x4200000
     c74:	27202079 	undefined
     c78:	3d1f974c 	ldccc	7, cr9, [pc, #-304]
     c7c:	69875984 	stmibvs	r7, {r2, r7, r8, fp, ip, lr}
     c80:	3c71034b 	ldclcc	3, cr0, [r1], #-300
     c84:	2f4a1203 	svccs	0x004a1203
     c88:	035a211f 	cmpeq	sl, #-1073741817	; 0xc0000007
     c8c:	274a7fb9 	undefined
     c90:	20207903 	eorcs	r7, r0, r3, lsl #18
     c94:	3d964c27 	ldccc	12, cr4, [r6, #156]
     c98:	5b795984 	blpl	1e572b0 <__Stack_Size+0x1e56eb0>
     c9c:	033c7203 	teqeq	ip, #805306368	; 0x30000000
     ca0:	1f2f6612 	svcne	0x002f6612
     ca4:	bf035a21 	svclt	0x00035a21
     ca8:	033c587f 	teqeq	ip, #8323072	; 0x7f0000
     cac:	222f3c09 	eorcs	r3, pc, #2304	; 0x900
     cb0:	034b3187 	movteq	r3, #45447	; 0xb187
     cb4:	12033c72 	andne	r3, r3, #29184	; 0x7200
     cb8:	4c2f1f4a 	stcmi	15, cr1, [pc], #-296
     cbc:	3c744703 	ldclcc	7, cr4, [r4], #-12
     cc0:	87222f52 	undefined
     cc4:	72034b31 	andvc	r4, r3, #50176	; 0xc400
     cc8:	4a11033c 	bmi	4419c0 <__Stack_Size+0x4415c0>
     ccc:	5a211f2f 	bpl	848990 <__Stack_Size+0x848590>
     cd0:	144a5a03 	strbne	r5, [sl], #-2563
     cd4:	2348221e 	movtcs	r2, #33310	; 0x821e
     cd8:	833d232b 	teqhi	sp, #-1409286144	; 0xac000000
     cdc:	594b211f 	stmdbpl	fp, {r0, r1, r2, r3, r4, r8, sp}^
     ce0:	7dbf03ad 	ldcvc	3, cr0, [pc, #692]!
     ce4:	201f1374 	andscs	r1, pc, r4, ror r3
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * SinG4 / c4DEC
					+ (long) CPR_Z * c2DEC * CosG4 / c4DEC * SinA4 / c4DEC
							* SinB4 / c4DEC
					+ (long) CPR_Y * c2DEC * CosB4 / c4DEC * CosG4 / c4DEC))
			/ c2DEC;
}
     ce8:	3d212a25 	fstmdbscc	r1!, {s4-s40}
     cec:	aa033222 	bge	cd57c <__Stack_Size+0xcd17c>
     cf0:	2f2f2e01 	svccs	0x002f2e01
     cf4:	2e7ed703 	cdpcs	7, 7, cr13, cr14, cr3, {0}
     cf8:	403b313c 	eorsmi	r3, fp, ip, lsr r1
     cfc:	3c029303 	stccc	3, cr9, [r2], {3}
     d00:	2f221e22 	svccs	0x00221e22
     d04:	1f2f3e3d 	svcne	0x002f3e3d
     d08:	4b3e212f 	blmi	f891cc <__Stack_Size+0xf88dcc>
     d0c:	3e212f1f 	mcrcc	15, 1, r2, cr1, cr15, {0}
     d10:	3c55034c 	mrrccc	3, 4, r0, r5, cr12
     d14:	2f221e22 	svccs	0x00221e22
     d18:	1f2f3e3d 	svcne	0x002f3e3d
     d1c:	4b3e212f 	blmi	f891e0 <__Stack_Size+0xf88de0>
//FemurAngle1           - Output Angle of Femur in degrees
//TibiaAngle1           - Output Angle of Tibia in degrees
//CoxaAngle1            - Output Angle of Coxa in degrees
//--------------------------------------------------------------------
void LegIK(short IKFeetPosX, short IKFeetPosY, short IKFeetPosZ,
		byte LegIKLegNr) {
     d20:	3e212f1f 	mcrcc	15, 1, r2, cr1, cr15, {0}
     d24:	212f1f4b 	teqcs	pc, fp, asr #30
     d28:	2f1f4b3e 	svccs	0x001f4b3e
	long Temp1;
	long Temp2;
	long T3;

	//Calculate IKCoxaAngle and IKFeetPosXZ
	GetATan2(IKFeetPosX, IKFeetPosZ);
     d2c:	034c3e21 	movteq	r3, #52769	; 0xce21
	CoxaAngle1[LegIKLegNr] = (((long) Atan4 * 180) / 3141)
     d30:	09033c42 	stmdbeq	r3, {r1, r6, sl, fp, ip, sp}
     d34:	09032f2e 	stmdbeq	r3, {r1, r2, r3, r5, r8, r9, sl, fp, sp}
     d38:	2e760320 	cdpcs	3, 7, cr0, cr6, cr0, {1}
     d3c:	312f2f32 	teqcc	pc, r2, lsr pc
     d40:	3c7a0359 	ldclcc	3, cr0, [sl], #-356
     d44:	3d764d36 	ldclcc	13, cr4, [r6, #-216]!
     d48:	033a1d21 	teqeq	sl, #2112	; 0x840
     d4c:	033e4a0a 	teqeq	lr, #40960	; 0xa000
     d50:	03747fbf 	cmneq	r4, #764	; 0x2fc
     d54:	75033c0b 	strvc	r3, [r3, #-3083]
	//Length between the Coxa and tars [foot]
	IKFeetPosXZ = XYhyp2 / c2DEC;

	//Using GetAtan2 for solving IKA1 and IKSW
	//IKA14 - Angle between SW line and the ground in radians
	IKA14 = GetATan2(IKFeetPosY - TarsOffsetY,
     d58:	200a032e 	andcs	r0, sl, lr, lsr #6
     d5c:	59312f2a 	ldmdbpl	r1!, {r1, r3, r5, r8, r9, sl, fp, sp}
     d60:	364a7a03 	strbcc	r7, [sl], -r3, lsl #20
     d64:	213d764d 	teqcs	sp, sp, asr #12
     d68:	0a033a1d 	beq	cf5e4 <__Stack_Size+0xcf1e4>
     d6c:	57034c4a 	strpl	r4, [r3, -sl, asr #24]
     d70:	032f2f66 	teqeq	pc, #408	; 0x198

	//IKSW2 - Length between femur axis and tars
	IKSW2 = XYhyp2;

	//IKA2 - Angle of the line S>W with respect to the femur in radians
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     d74:	2d132e42 	ldccs	14, cr2, [r3, #-264]
     d78:	3e212120 	sufccsp	f2, f1, f0
     d7c:	3e3d3e3d 	mrccc	14, 1, r3, cr13, cr13, {1}
     d80:	3f3d3e3d 	svccc	0x003d3e3d
					* (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))) * c4DEC
			+ ((long) IKSW2 * IKSW2));
	Temp2 = (long) (2 * (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])) * c2DEC
			* (unsigned long) IKSW2;
	T3 = Temp1 / (Temp2 / c4DEC);
	IKA24 = GetArcCos(T3);
     d84:	3e3d3e3d 	mrccc	14, 1, r3, cr13, cr13, {1}
     d88:	2308403d 	movwcs	r4, #32829	; 0x803d
     d8c:	4b211f21 	blmi	848a18 <__Stack_Size+0x848618>
     d90:	593e593e 	ldmdbpl	lr!, {r1, r2, r3, r4, r5, r8, fp, ip, lr}
     d94:	593e593e 	ldmdbpl	lr!, {r1, r2, r3, r4, r5, r8, fp, ip, lr}
     d98:	593e593e 	ldmdbpl	lr!, {r1, r2, r3, r4, r5, r8, fp, ip, lr}
     d9c:	7ee5033d 	mcrvc	3, 7, r0, cr5, cr13, {1}
     da0:	231d23f2 	tstcs	sp, #-939524093	; 0xc8000003
     da4:	305b762f 	subscc	r7, fp, pc, lsr #12
     da8:	01990340 	orrseq	r0, r9, r0, asr #6
     dac:	032f2f2e 	teqeq	pc, #184	; 0xb8
     db0:	3c2e7ee7 	stccc	14, cr7, [lr], #-924
     db4:	292e0a03 	stmdbcs	lr!, {r0, r1, r9, fp}

	FemurAngle1[LegIKLegNr] = -(long) (IKA14 + IKA24) * 180
     db8:	2c231d41 	stccs	13, cr1, [r3], #-260
     dbc:	2e09031c 	mcrcs	3, 0, r0, cr9, cr12, {0}
     dc0:	2f3c4803 	svccs	0x003c4803
     dc4:	2e76032f 	cdpcs	3, 7, cr0, cr6, cr15, {1}
     dc8:	02025c2f 	andeq	r5, r2, #12032	; 0x2f00
     dcc:	be010100 	adflts	f0, f1, f0
     dd0:	02000001 	andeq	r0, r0, #1	; 0x1
     dd4:	00008600 	andeq	r8, r0, r0, lsl #12
     dd8:	fb010200 	blx	415e2 <__Stack_Size+0x411e2>
			/ 3141+ 900 + CFEMURHORNOFFSET1(LegIKLegNr);  //Normal

	//IKTibiaAngle
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     ddc:	01000d0e 	tsteq	r0, lr, lsl #26
	Temp2 = (long) (2 * (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])) * c2DEC
			* (unsigned long) IKSW2;
	T3 = Temp1 / (Temp2 / c4DEC);
	IKA24 = GetArcCos(T3);

	FemurAngle1[LegIKLegNr] = -(long) (IKA14 + IKA24) * 180
     de0:	00010101 	andeq	r0, r1, r1, lsl #2
			/ 3141+ 900 + CFEMURHORNOFFSET1(LegIKLegNr);  //Normal

	//IKTibiaAngle
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     de4:	00010000 	andeq	r0, r1, r0
     de8:	50410100 	subpl	r0, r1, r0, lsl #2
			+ ((long) (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr])
					* (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))) * c4DEC
			- ((long) IKSW2 * IKSW2));
	Temp2 = 2 * ((long) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])))
			* (long) ((byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]));
	GetArcCos(Temp1 / Temp2);
     dec:	72732f50 	rsbsvc	r2, r3, #320	; 0x140
     df0:	74730063 	ldrbtvc	r0, [r3], #-99
     df4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     df8:	5f783031 	svcpl	0x00783031
     dfc:	2f62696c 	svccs	0x0062696c
     e00:	00636e69 	rsbeq	r6, r3, r9, ror #28
     e04:	33354d43 	teqcc	r5, #4288	; 0x10c0
     e08:	57485f30 	smlaldxpl	r5, r8, r0, pc

	TibiaAngle1[LegIKLegNr] = -(1450 - (long) AngleRad4 * 180 / 3141
     e0c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     e10:	79640000 	stmdbvc	r4!, {}^
     e14:	696d616e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, sp, lr}^
     e18:	2e6c6578 	mcrcs	5, 3, r6, cr12, cr8, {3}
     e1c:	00010063 	andeq	r0, r1, r3, rrx
     e20:	6d747300 	ldclvs	3, cr7, [r4]
     e24:	31663233 	cmncc	r6, r3, lsr r2
     e28:	745f7830 	ldrbvc	r7, [pc], #2096	; e30 <__Stack_Size+0xa30>
			+ CTIBIAHORNOFFSET1(LegIKLegNr)); //!!!!!!!!!!!!145 instead of 1800

	//Set the Solution quality
	if (IKSW2
     e2c:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
			- ((long) IKSW2 * IKSW2));
	Temp2 = 2 * ((long) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])))
			* (long) ((byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]));
	GetArcCos(Temp1 / Temp2);

	TibiaAngle1[LegIKLegNr] = -(1450 - (long) AngleRad4 * 180 / 3141
     e30:	00020068 	andeq	r0, r2, r8, rrx
			+ CTIBIAHORNOFFSET1(LegIKLegNr)); //!!!!!!!!!!!!145 instead of 1800

	//Set the Solution quality
	if (IKSW2
     e34:	6e796400 	cdpvs	4, 7, cr6, cr9, cr0, {0}
     e38:	78696d61 	stmdavc	r9!, {r0, r5, r6, r8, sl, fp, sp, lr}^
     e3c:	615f6c65 	cmpvs	pc, r5, ror #24
     e40:	65726464 	ldrbvs	r6, [r2, #-1124]!
     e44:	745f7373 	ldrbvc	r7, [pc], #883	; e4c <__Stack_Size+0xa4c>
			< ((word) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
					+ (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]) - 30)
					* c2DEC))
		IKSolution = 1;
     e48:	656c6261 	strbvs	r6, [ip, #-609]!
	else {
		if (IKSW2
     e4c:	00682e73 	rsbeq	r2, r8, r3, ror lr
     e50:	75000003 	strvc	r0, [r0, #-3]
				< ((word) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
						+ (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))
						* c2DEC))
			IKSolutionWarning = 1;
     e54:	74726173 	ldrbtvc	r6, [r2], #-371
     e58:	0300682e 	movweq	r6, #2094	; 0x82e
		else
			IKSolutionError = 1;
     e5c:	00000000 	andeq	r0, r0, r0
	}

}
     e60:	3be80205 	blcc	ffa0167c <SCS_BASE+0x1f9f367c>
     e64:	da030800 	ble	c2e6c <__Stack_Size+0xc2a6c>
     e68:	3d130101 	ldfccs	f0, [r3, #-4]
     e6c:	4d2f133f 	stcmi	3, cr1, [pc, #-252]!
     e70:	134d2f13 	movtne	r2, #57107	; 0xdf13
     e74:	2f133f3d 	svccs	0x00133f3d
     e78:	5bcf134d 	blpl	ff3c5bb4 <SCS_BASE+0x1f3b7bb4>
     e7c:	5b2f7713 	blpl	bdead0 <__Stack_Size+0xbde6d0>
     e80:	693d7713 	ldmdbvs	sp!, {r0, r1, r4, r8, r9, sl, ip, sp, lr}
     e84:	01233f16 	teqeq	r3, r6, lsl pc
     e88:	23012323 	movwcs	r2, #4899	; 0x1323
     e8c:	2000d303 	andcs	sp, r0, r3, lsl #6
     e90:	1e4c2f13 	mcrne	15, 2, r2, cr12, cr3, {0}
     e94:	5c3b2121 	ldfpls	f2, [fp], #-132
     e98:	7de50376 	stclvc	3, cr0, [r5, #472]!
     e9c:	241c244a 	ldrcs	r2, [ip], #-1098
     ea0:	4b6c304d 	blmi	1b0cfdc <__Stack_Size+0x1b0cbdc>
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ea4:	2fa13f3d 	svccs	0x00a13f3d
	if (sVal < s) {
     ea8:	211f211f 	tstcs	pc, pc, lsl r1
     eac:	4a0b0321 	bmi	2c1b38 <__Stack_Size+0x2c1738>
		return s;
	}

	s = (short) pgm_read_word(sMax);
     eb0:	1f211d23 	svcne	0x00211d23
     eb4:	3c730331 	ldclcc	3, cr0, [r3], #-196
     eb8:	84523e3d 	ldrbhi	r3, [r2], #-3645

		return s;
	}
	return sVal;

}
     ebc:	2f2f5263 	svccs	0x002f5263
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     ec0:	7a404d81 	bvc	10144cc <__Stack_Size+0x10140cc>
}

//--------------------------------------------------------------------
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
     ec4:	3d4e4b67 	vstrcc	d20, [lr, #-412]
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     ec8:	6821211f 	stmdavs	r1!, {r0, r1, r2, r3, r4, r8, sp}
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ecc:	1f211f2f 	svcne	0x00211f2f
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
     ed0:	7a032721 	bvc	cab5c <__Stack_Size+0xca75c>
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ed4:	4e575f66 	cdpmi	15, 5, cr5, cr7, cr6, {3}
	if (sVal < s) {
     ed8:	3d263b91 	fstmdbxcc	r6!, {d3-d74}
     edc:	7eeb032f 	cdpvc	3, 14, cr0, cr11, cr15, {1}
     ee0:	252925d6 	strcs	r2, [r9, #-1494]!
		return s;
	}

	s = (short) pgm_read_word(sMax);
     ee4:	2c221e4f 	stccs	14, cr1, [r2], #-316
     ee8:	221e2230 	andscs	r2, lr, #3	; 0x3
     eec:	59ec5d3d 	stmibpl	ip!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, lr}^
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
     ef0:	59214b40 	stmdbpl	r1!, {r6, r8, r9, fp, lr}
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ef4:	935a4c57 	cmpls	sl, #22272	; 0x5700
	if (sVal < s) {
     ef8:	2f1f2f31 	svccs	0x001f2f31
     efc:	4e672f3e 	mcrmi	15, 3, r2, cr7, cr14, {1}
     f00:	4b3e4c3d 	blmi	f93ffc <__Stack_Size+0xf93bfc>
		return s;
	}

	s = (short) pgm_read_word(sMax);
     f04:	9000de03 	andls	sp, r0, r3, lsl #28
     f08:	b4033022 	strlt	r3, [r3], #-34
     f0c:	4c2f5801 	stcmi	8, cr5, [pc], #-4
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     f10:	3b21211e 	blcc	849390 <__Stack_Size+0x848f90>
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
     f14:	7ed4035c 	mrcvc	3, 6, r0, cr4, cr12, {2}
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     f18:	3d2f1e74 	stccc	14, cr1, [pc, #-464]!
	if (sVal < s) {
     f1c:	018e0352 	orreq	r0, lr, r2, asr r3
     f20:	211f2f66 	tstcs	pc, r6, ror #30
     f24:	3d31213f 	ldfccs	f2, [r1, #-252]!
		return s;
	}

	s = (short) pgm_read_word(sMax);
     f28:	3021221b 	eorcc	r2, r1, fp, lsl r2
     f2c:	60032f22 	andvs	r2, r3, r2, lsr #30
     f30:	211f2174 	tstcs	pc, r4, ror r1
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
				FemurAngle1[LegIndex], &cFemurMin1[LegIndex],
				&cFemurMax1[LegIndex]);
		TibiaAngle1[LegIndex] = CheckServoAngleBounds(s++,
     f34:	2130213f 	teqcs	r0, pc, lsr r1
     f38:	3024222a 	eorcc	r2, r4, sl, lsr #4
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     f3c:	747fb403 	ldrbtvc	fp, [pc], #1027	; f44 <__Stack_Size+0xb44>
     f40:	00cf0330 	sbceq	r0, pc, r0, lsr r3
				TibiaAngle1[LegIndex], &cTibiaMin1[LegIndex],
				&cTibiaMax1[LegIndex]);

	}
#endif
}
     f44:	ac61034a 	stclge	3, cr0, [r1], #-296
     f48:	3f211f2f 	svccc	0x00211f2f
     f4c:	221c3121 	andscs	r3, ip, #1073741832	; 0x40000008
     f50:	2f222f21 	svccs	0x00222f21
     f54:	03663203 	cmneq	r6, #805306368	; 0x30000000
     f58:	77032009 	strvc	r2, [r3, -r9]
     f5c:	20090320 	andcs	r0, r9, r0, lsr #6
     f60:	7fa6033d 	svcvc	0x00a6033d
     f64:	211f212e 	tstcs	pc, lr, lsr #2
     f68:	2f30213f 	svccs	0x0030213f
     f6c:	3024222a 	eorcc	r2, r4, sl, lsr #4
// SmoothControl (From Zenta) -  This function makes the body
//            rotation and translation much smoother
//--------------------------------------------------------------------
short SmoothControl(short CtrlMoveInp, short CtrlMoveOut, byte CtrlDivider) {

	if (CtrlMoveOut < (CtrlMoveInp - 4))
     f70:	64032f77 	strvs	r2, [r3], #-3959
     f74:	211f219e 	ldrbcs	r2, [pc, -lr]
		return CtrlMoveOut + abs((CtrlMoveOut - CtrlMoveInp) / CtrlDivider);
     f78:	1e2f213f 	mcrne	1, 1, r2, cr15, cr15, {1}
     f7c:	032f2222 	teqeq	pc, #536870914	; 0x20000002
     f80:	2f667df3 	svccs	0x00667df3
     f84:	2e73032f 	cdpcs	3, 7, cr0, cr3, cr15, {1}
     f88:	4d4b3f2f 	stclmi	15, cr3, [fp, #-188]
     f8c:	01000702 	tsteq	r0, r2, lsl #14
     f90:	00012d01 	andeq	r2, r1, r1, lsl #26
	else if (CtrlMoveOut > (CtrlMoveInp + 4))
     f94:	65000200 	strvs	r0, [r0, #-512]
		return CtrlMoveOut - abs((CtrlMoveOut - CtrlMoveInp) / CtrlDivider);
     f98:	02000000 	andeq	r0, r0, #0	; 0x0
     f9c:	0d0efb01 	vstreq	d15, [lr, #-4]
     fa0:	01010100 	tsteq	r1, r0, lsl #2
     fa4:	00000001 	andeq	r0, r0, r1
     fa8:	01000001 	tsteq	r0, r1
     fac:	2f505041 	svccs	0x00505041
     fb0:	00637273 	rsbeq	r7, r3, r3, ror r2

	return CtrlMoveInp;
}
     fb4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
// GetLegsXZLength -
//--------------------------------------------------------------------
word g_wLegsXZLength = 0xffff;
word GetLegsXZLength(void) {
	// Could save away or could do a little math on one leg...
	if (g_wLegsXZLength != 0xffff)
     fb8:	30316632 	eorscc	r6, r1, r2, lsr r6
     fbc:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     fc0:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}

//--------------------------------------------------------------------
// GetLegsXZLength -
//--------------------------------------------------------------------
word g_wLegsXZLength = 0xffff;
word GetLegsXZLength(void) {
     fc4:	4d430063 	stclmi	0, cr0, [r3, #-396]
	// Could save away or could do a little math on one leg...
	if (g_wLegsXZLength != 0xffff)
		return g_wLegsXZLength;

	return isqrt32((LegPosX[0] * LegPosX[0]) + (LegPosZ[0] * LegPosZ[0]));
     fc8:	5f303335 	svcpl	0x00303335
     fcc:	692f5748 	stmdbvs	pc!, {r3, r6, r8, r9, sl, ip, lr}
     fd0:	0000636e 	andeq	r6, r0, lr, ror #6
     fd4:	6267697a 	rsbvs	r6, r7, #1998848	; 0x1e8000
     fd8:	632e6565 	teqvs	lr, #423624704	; 0x19400000
     fdc:	00000100 	andeq	r0, r0, r0, lsl #2
}
     fe0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     fe4:	30316632 	eorscc	r6, r1, r2, lsr r6
     fe8:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     fec:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}

#ifndef MAX_XZ_LEG_ADJUST
#define MAX_XZ_LEG_ADJUST   (word)(cCoxaLength[0]+cTibiaLength[0] + cFemurLength[0]/4)
#endif

void AdjustLegPositions(word XZLength1) {
     ff0:	00000200 	andeq	r0, r0, r0, lsl #4
     ff4:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
     ff8:	00682e74 	rsbeq	r2, r8, r4, ror lr
     ffc:	00000003 	andeq	r0, r0, r3
    1000:	18020500 	stmdane	r2, {r8, sl}
		XZLength1 = MAX_XZ_LEG_ADJUST;
	if (XZLength1 < MIN_XZ_LEG_ADJUST)
		XZLength1 = MIN_XZ_LEG_ADJUST;

	// see if same length as when we came in
	if (XZLength1 == g_wLegsXZLength)
    1004:	03080041 	movweq	r0, #32833	; 0x8041
    1008:	1301018b 	movwne	r0, #4491	; 0x118b
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		GetSinCos((short) pgm_read_word(&cCoxaAngle1[LegIndex]));

		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
    100c:	00fe035a 	rscseq	r0, lr, sl, asr r3

	// see if same length as when we came in
	if (XZLength1 == g_wLegsXZLength)
		return;

	g_wLegsXZLength = XZLength1;
    1010:	4d310158 	ldfmis	f0, [r1, #-352]!

	u8 LegIndex;
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		GetSinCos((short) pgm_read_word(&cCoxaAngle1[LegIndex]));
    1014:	014d3101 	cmpeq	sp, r1, lsl #2
    1018:	31014d31 	tstcc	r1, r1, lsr sp

		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
    101c:	4d31014d 	ldfmis	f0, [r1, #-308]!
    1020:	015b3f13 	cmpeq	fp, r3, lsl pc
    1024:	3f013f3f 	svccc	0x00013f3f
    1028:	3f3f013f 	svccc	0x003f013f
    102c:	133e3f01 	teqne	lr, #4	; 0x4
    1030:	7ec50378 	mcrvc	3, 6, r0, cr5, cr8, {3}
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
    1034:	506e2758 	rsbpl	r2, lr, r8, asr r7
    1038:	22794076 	rsbscs	r4, r9, #118	; 0x76
    103c:	3d305a3a 	fldmdbscc	r0!, {s10-s67}
    1040:	032e7903 	teqeq	lr, #49152	; 0xc000
    1044:	31222e0c 	teqcc	r2, ip, lsl #28
    1048:	4f634368 	svcmi	0x00634368
		return;

	g_wLegsXZLength = XZLength1;

	u8 LegIndex;
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    104c:	0f034d4f 	svceq	0x00034d4f
		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
	}

	// Make sure we cycle through one gait to have the legs all move into their new locations...
	g_InControlState.ForceGaitStepCnt = g_InControlState.gaitCur.StepsInGait;
    1050:	211f2f74 	tstcs	pc, r4, ror pc
    1054:	21212d21 	teqcs	r1, r1, lsr #26
}
    1058:	1f212f1f 	svcne	0x00212f1f
    105c:	20150321 	andscs	r0, r5, r1, lsr #6
    1060:	213c6b03 	teqcs	ip, r3, lsl #22
    1064:	032e1403 	teqeq	lr, #50331648	; 0x3000000
    1068:	1403206c 	strne	r2, [r3], #-108
    106c:	3d407720 	stclcc	7, cr7, [r0, #-128]
    1070:	b8033d31 	stmdalt	r3, {r0, r4, r5, r8, sl, fp, ip, sp}
    1074:	252e087e 	strcs	r0, [lr, #-2174]!
    1078:	4c5c251b 	cfldr64mi	mvdx2, [ip], {27}
		g_InControlState.aCoxaInitAngle1[LegIndex] = (short)pgm_read_word(&cCoxaAngle1[LegIndex]);
#endif
	}
	g_wLegsXZLength = 0xffff;
#endif
}
    107c:	22784076 	rsbscs	r4, r8, #118	; 0x76
		else if (g_InControlState.aCoxaInitAngle1[LegIndex] < -700)
		g_InControlState.aCoxaInitAngle1[LegIndex] = -700;
	}
	g_wLegsXZLength = 0xffff;
#endif
}
    1080:	3d305a3a 	fldmdbscc	r0!, {s10-s67}
//     to be appropriate for the current y location of the body...
//--------------------------------------------------------------------

u8 g_iLegInitIndex = 0x00; // remember which index we are currently using...

void AdjustLegPositionsToBodyHeight() {
    1084:	032e7903 	teqeq	lr, #49152	; 0xc000
    1088:	31222e0c 	teqcc	r2, ip, lsl #28
#ifdef CNT_HEX_INITS
	// Lets see which of our units we should use...
	// Note: We will also limit our body height here...
	if (g_InControlState.BodyPos.y
    108c:	4e644267 	cdpmi	2, 6, cr4, cr4, cr7, {3}
			> (short) pgm_read_byte(&g_abHexMaxBodyY[CNT_HEX_INITS-1]))
		g_InControlState.BodyPos.y = (short) pgm_read_byte(
    1090:	77774c4f 	ldrbvc	r4, [r7, -pc, asr #24]!
				&g_abHexMaxBodyY[CNT_HEX_INITS-1]);

	u8 i;
	word XZLength1 = pgm_read_byte(&g_abHexIntXZ[CNT_HEX_INITS-1]);
	for (i = 0; i < (CNT_HEX_INITS - 1); i++) { // Don't need to look at last entry as we already init to assume this one...
		if (g_InControlState.BodyPos.y
    1094:	3d404b77 	vstrcc	d20, [r0, #-476]
    1098:	a5033d31 	strge	r3, [r3, #-3377]
				<= (short) pgm_read_byte(&g_abHexMaxBodyY[i])) {
			XZLength1 = pgm_read_byte(&g_abHexIntXZ[i]);
			break;
		}
	}
	if (i != g_iLegInitIndex) {
    109c:	1e22ac7f 	mcrne	12, 1, sl, cr2, cr15, {3}
				&g_abHexMaxBodyY[CNT_HEX_INITS-1]);

	u8 i;
	word XZLength1 = pgm_read_byte(&g_abHexIntXZ[CNT_HEX_INITS-1]);
	for (i = 0; i < (CNT_HEX_INITS - 1); i++) { // Don't need to look at last entry as we already init to assume this one...
		if (g_InControlState.BodyPos.y
    10a0:	332a2623 	teqcc	sl, #36700160	; 0x2300000
    10a4:	222d3029 	eorcs	r3, sp, #41	; 0x29
    10a8:	7a033030 	bvc	cd170 <__Stack_Size+0xccd70>
				<= (short) pgm_read_byte(&g_abHexMaxBodyY[i])) {
			XZLength1 = pgm_read_byte(&g_abHexIntXZ[i]);
			break;
		}
	}
	if (i != g_iLegInitIndex) {
    10ac:	6a32303c 	bvs	c8d1a4 <__Stack_Size+0xc8cda4>
		g_iLegInitIndex = i;  // remember the current index...
		AdjustLegPositions(XZLength1);
    10b0:	2f2e6a03 	svccs	0x002e6a03
	}
#endif // CNT_HEX_INITS
}
    10b4:	2e72032f 	cdpcs	3, 7, cr0, cr2, cr15, {1}
    10b8:	4b3d3f2f 	blmi	f50d7c <__Stack_Size+0xf5097c>
    10bc:	0009023e 	andeq	r0, r9, lr, lsr r2
}
//--------------------------------------------------------------------
//[CHECK VOLTAGE]
//Reads the input voltage and shuts down the bot when the power drops
byte s_bLVBeepCnt;
boolean CheckVoltage() {
    10c0:	00df0101 	sbcseq	r0, pc, r1, lsl #2
    10c4:	00020000 	andeq	r0, r2, r0
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10c8:	00000089 	andeq	r0, r0, r9, lsl #1

	// BUGBUG:: if voltage is 0 it failed to retrieve don't hang program...
	//    if (!Voltage)
	//      return;

	if (!g_fLowVoltageShutdown) {
    10cc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
boolean CheckVoltage() {
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10d0:	0101000d 	tsteq	r1, sp

	// BUGBUG:: if voltage is 0 it failed to retrieve don't hang program...
	//    if (!Voltage)
	//      return;

	if (!g_fLowVoltageShutdown) {
    10d4:	00000101 	andeq	r0, r0, r1, lsl #2
boolean CheckVoltage() {
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10d8:	00000100 	andeq	r0, r0, r0, lsl #2

	if (!g_fLowVoltageShutdown) {
		/**PrintString("Voltage : ");
		Printu32d(Voltage);
		PrintString("\n");*/
		if ((Voltage < cTurnOffVol) || (Voltage >= 1999)) {
    10dc:	354d4301 	strbcc	r4, [sp, #-769]
    10e0:	485f3033 	ldmdami	pc, {r0, r1, r4, r5, ip, sp}^
    10e4:	72732f57 	rsbsvc	r2, r3, #348	; 0x15c


			//Turn off
			g_InControlState.BodyPos.x = 0;
    10e8:	74730063 	ldrbtvc	r0, [r3], #-99
			g_InControlState.TravelLength.x = 0;
			g_InControlState.TravelLength.z = 0;

#ifdef OPT_SINGLELEG
			g_InControlState.TravelLength.y = 0;
			g_InControlState.SelectedLeg = 255;
    10ec:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    10f0:	5f783031 	svcpl	0x00783031
#endif
			g_fLowVoltageShutdown = 1;
    10f4:	2f62696c 	svccs	0x0062696c
			s_bLVBeepCnt = 0;    // how many times we beeped...
    10f8:	00636e69 	rsbeq	r6, r3, r9, ror #28
		if ((Voltage < cTurnOffVol) || (Voltage >= 1999)) {


			//Turn off
			g_InControlState.BodyPos.x = 0;
			g_InControlState.BodyPos.y = 0;
    10fc:	33354d43 	teqcc	r5, #4288	; 0x10c0
			g_InControlState.BodyPos.z = 0;
			g_InControlState.BodyRot1.x = 0;
    1100:	57485f30 	smlaldxpl	r5, r8, r0, pc
			g_InControlState.BodyRot1.y = 0;
			g_InControlState.BodyRot1.z = 0;
    1104:	636e692f 	cmnvs	lr, #770048	; 0xbc000
			g_InControlState.TravelLength.x = 0;
			g_InControlState.TravelLength.z = 0;
    1108:	64610000 	strbtvs	r0, [r1]
#ifdef OPT_SINGLELEG
			g_InControlState.TravelLength.y = 0;
			g_InControlState.SelectedLeg = 255;
#endif
			g_fLowVoltageShutdown = 1;
			s_bLVBeepCnt = 0;    // how many times we beeped...
    110c:	00632e63 	rsbeq	r2, r3, r3, ror #28
			g_InControlState.fRobotOn = false;
    1110:	73000001 	movwvc	r0, #1	; 0x1
		}
#ifdef cTurnOnVol
	} else if ((Voltage > cTurnOnVol) && (Voltage < 1999)) {
    1114:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    1118:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}

		g_fLowVoltageShutdown = 0;
    111c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    1120:	00682e65 	rsbeq	r2, r8, r5, ror #28

#endif
	} else {
		if (s_bLVBeepCnt < 5) {
    1124:	73000002 	movwvc	r0, #2	; 0x2
    1128:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
			s_bLVBeepCnt++;
    112c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}

			//MSound( 1, 45, 2000);
			Buzzed(45, 2000);
    1130:	70616d5f 	rsbvc	r6, r1, pc, asr sp
    1134:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1138:	64610000 	strbtvs	r0, [r1]
		}
		mDelay(2000);
    113c:	00682e63 	rsbeq	r2, r8, r3, ror #28
    1140:	73000003 	movwvc	r0, #3	; 0x3
    1144:	65747379 	ldrbvs	r7, [r4, #-889]!
	}
#endif

	return g_fLowVoltageShutdown;
}
    1148:	6e695f6d 	cdpvs	15, 6, cr5, cr9, cr13, {3}
    114c:	682e7469 	stmdavs	lr!, {r0, r3, r5, r6, sl, ip, sp, lr}
    1150:	00000300 	andeq	r0, r0, r0, lsl #6
    1154:	02050000 	andeq	r0, r5, #0	; 0x0
    1158:	08004458 	stmdaeq	r0, {r3, r4, r6, sl, lr}

//==============================================================================
// BackgroundProcess - Allows us to have some background processing for those
//    servo drivers that need us to do things like polling...
//==============================================================================
void BackgroundProcess(void) {
    115c:	4b011c03 	blmi	48170 <__Stack_Size+0x47d70>
    1160:	4e677621 	cdpmi	6, 6, cr7, cr7, cr1, {1}
	if (g_fAXSpeedControl)
    1164:	1203a021 	andne	sl, r3, #33	; 0x21
		return;  // nothing to do in this mode...

	if (ServosEnabled) {
		//DebugToggle(A3);
		BioloidControllerEx_interpolateStep(false); // Do our background stuff...
    1168:	034ba058 	movteq	sl, #45144	; 0xb058
		Battery_Monitor_Alarm();
    116c:	4ba05811 	blmi	fe8171b8 <SCS_BASE+0x1e8091b8>
	}
}
    1170:	4b223e4c 	blmi	890aa8 <__Stack_Size+0x8906a8>
    1174:	3d4b323d 	sfmcc	f3, 2, [fp, #-244]
//Function that gets called from the main loop if the robot is not logically
//     on.  Gives us a chance to play some...
//--------------------------------------------------------------------
static u8 g_iIdleServoNum = (u8) - 1;
static u8 g_iIdleLedState = 1;  // what state to we wish to set...
void IdleTime(void) {
    1178:	3d685c5b 	stclcc	12, cr5, [r8, #-364]!
    117c:	1d3f3d4b 	ldcne	13, cr3, [pc, #-300]!
	// Each time we call this set servos LED on or off...
	g_iIdleServoNum++;
    1180:	03415a23 	movteq	r5, #6691	; 0x1a23
	if (g_iIdleServoNum >= NUMSERVOS) {
    1184:	1f218213 	svcne	0x00218213
    1188:	594b3621 	stmdbpl	fp, {r0, r5, r9, sl, ip, sp}^
		g_iIdleServoNum = 0;
    118c:	036e5967 	cmneq	lr, #1687552	; 0x19c000
		g_iIdleLedState = 1 - g_iIdleLedState;
    1190:	2f233c5b 	svccs	0x00233c5b
    1194:	1f2f231c 	svcne	0x002f231c
	}
	dxl_write_byte(pgm_read_byte(&cPinTable[g_iIdleServoNum]), AXM_LED,
    1198:	3e3d4c2f 	cdpcc	12, 3, cr4, cr13, cr15, {1}
    119c:	4d3d221e 	lfmmi	f2, 4, [sp, #-120]!
    11a0:	01000202 	tsteq	r0, r2, lsl #4
    11a4:	0000a801 	andeq	sl, r0, r1, lsl #16
    11a8:	8f000200 	svchi	0x00000200
			g_iIdleLedState);
	//ax12ReadPacket(6);  // get the response...


}
    11ac:	02000000 	andeq	r0, r0, #0	; 0x0
    11b0:	0d0efb01 	vstreq	d15, [lr, #-4]
    11b4:	01010100 	tsteq	r1, r0, lsl #2
    11b8:	00000001 	andeq	r0, r0, r1

//--------------------------------------------------------------------
//[SetRegOnAllServos] Function that is called to set the state of one
//  register in all of the servos, like Torque on...
//--------------------------------------------------------------------
void SetRegOnAllServos(u8 bReg, u8 bVal) {
    11bc:	01000001 	tsteq	r0, r1
    11c0:	33354d43 	teqcc	r5, #4288	; 0x10c0
    11c4:	57485f30 	smlaldxpl	r5, r8, r0, pc
	 ax12write(bVal);

  }
  ax12write(0xff - (checksum % 256));
  setRX(0);*/
	 dxl_set_txpacket_id (BROADCAST_ID);
    11c8:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    11cc:	6d747300 	ldclvs	3, cr7, [r4]
	dxl_set_txpacket_parameter(0,bReg);
    11d0:	31663233 	cmncc	r6, r3, lsr r2
    11d4:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
	dxl_set_txpacket_parameter(1,2);
    11d8:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
    11dc:	4300636e 	movwmi	r6, #878	; 0x36e
    11e0:	3033354d 	eorscc	r3, r3, sp, asr #10
  int i;
	for (i = 0; i < poseSize; i++) {
		byte id = pgm_read_byte(&cPinTable[i]);
		dxl_set_txpacket_parameter(2 + 3 * i, id);
    11e4:	2f57485f 	svccs	0x0057485f
    11e8:	00636e69 	rsbeq	r6, r3, r9, ror #28
    11ec:	74756200 	ldrbtvc	r6, [r5], #-512
    11f0:	2e6e6f74 	mcrcs	15, 3, r6, cr14, cr4, {3}
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
    11f4:	00010063 	andeq	r0, r1, r3, rrx
    11f8:	6d747300 	ldclvs	3, cr7, [r4]
    11fc:	31663233 	cmncc	r6, r3, lsr r2
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
    1200:	745f7830 	ldrbvc	r7, [pc], #2096	; 1208 <__Stack_Size+0xe08>
    1204:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    1208:	00020068 	andeq	r0, r2, r8, rrx
	dxl_set_txpacket_parameter(1,2);
  int i;
	for (i = 0; i < poseSize; i++) {
		byte id = pgm_read_byte(&cPinTable[i]);
		dxl_set_txpacket_parameter(2 + 3 * i, id);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
    120c:	6d747300 	ldclvs	3, cr7, [r4]
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
    1210:	31663233 	cmncc	r6, r3, lsr r2
	 dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0,bReg);
	dxl_set_txpacket_parameter(1,2);
  int i;
	for (i = 0; i < poseSize; i++) {
    1214:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]
    1218:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
    121c:	00000200 	andeq	r0, r0, r0, lsl #4
		dxl_set_txpacket_parameter(2 + 3 * i, id);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
	}

	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
    1220:	74747562 	ldrbtvc	r7, [r4], #-1378
    1224:	682e6e6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
    1228:	00000300 	andeq	r0, r0, r0, lsl #6
#ifdef DEBUG_BIOLOIDEX
	PrintString("DriverAX12 --- SetRegOnAllServos ---\n");
#endif
	dxl_txrx_packet();
    122c:	74737973 	ldrbtvc	r7, [r3], #-2419

	u16 CommStatus = dxl_get_result();
    1230:	695f6d65 	ldmdbvs	pc, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
    1234:	2e74696e 	cdpcs	9, 7, cr6, cr4, cr14, {3}
		PrintErrorCode();
    1238:	00030068 	andeq	r0, r3, r8, rrx
	else
		PrintCommStatus(CommStatus);
    123c:	05000000 	streq	r0, [r0]
#endif
}
    1240:	0045f802 	subeq	pc, r5, r2, lsl #16
    1244:	01100308 	tsteq	r0, r8, lsl #6
    1248:	af211f21 	svcge	0x00211f21
//--------------------------------------------------------------------
//[MakeSureServosAreOn] Function that is called to handle when you are
//  transistioning from servos all off to being on.  May need to read
//  in the current pose...
//--------------------------------------------------------------------
void MakeSureServosAreOn(void) {
    124c:	01000402 	tsteq	r0, r2, lsl #8

	if (ServosEnabled) {

		if (!g_fServosFree)
    1250:	0000a201 	andeq	sl, r0, r1, lsl #4
			return;    // we are not free

		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		if (g_fAXSpeedControl) {
    1254:	89000200 	stmdbhi	r0, {r9}
    1258:	02000000 	andeq	r0, r0, #0	; 0x0

			int i;
			for (i = 0; i < NUMSERVOS; i++) {
				g_awGoalAXPos[i] = dxl_read_word(pgm_read_byte(&cPinTable[i]),
    125c:	0d0efb01 	vstreq	d15, [lr, #-4]
    1260:	01010100 	tsteq	r1, r0, lsl #2
    1264:	00000001 	andeq	r0, r0, r1
    1268:	01000001 	tsteq	r0, r1
						AXM_PRESENT_POSITION_L);
				mDelay(25);
    126c:	33354d43 	teqcc	r5, #4288	; 0x10c0
    1270:	57485f30 	smlaldxpl	r5, r8, r0, pc

		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		if (g_fAXSpeedControl) {

			int i;
			for (i = 0; i < NUMSERVOS; i++) {
    1274:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1278:	6d747300 	ldclvs	3, cr7, [r4]
				g_awGoalAXPos[i] = dxl_read_word(pgm_read_byte(&cPinTable[i]),
						AXM_PRESENT_POSITION_L);
				mDelay(25);
			}
		} else {
			BioloidControllerEx_readPose();
    127c:	31663233 	cmncc	r6, r3, lsr r2
		}

		SetRegOnAllServos(AXM_TORQUE_ENABLE, 1);  // Use sync write to do it.
    1280:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    1284:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}

		CommanderInputController_AllowControllerInterrupts(true);
		g_fServosFree = false;
    1288:	4300636e 	movwmi	r6, #878	; 0x36e
	}

}
    128c:	3033354d 	eorscc	r3, r3, sp, asr #10
    1290:	2f57485f 	svccs	0x0057485f
    1294:	00636e69 	rsbeq	r6, r3, r9, ror #28
    1298:	64656c00 	strbtvs	r6, [r5], #-3072
    129c:	0100632e 	tsteq	r0, lr, lsr #6

//------------------------------------------------------------------------------------------
//[BeginServoUpdate] Does whatever preperation that is needed to starrt a move of our servos
//------------------------------------------------------------------------------------------
void BeginServoUpdate(void)    // Start the update
		{
    12a0:	74730000 	ldrbtvc	r0, [r3]

	MakeSureServosAreOn();
    12a4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
	if (ServosEnabled) {

		if (g_fAXSpeedControl) {
    12a8:	5f783031 	svcpl	0x00783031
    12ac:	65707974 	ldrbvs	r7, [r0, #-2420]!

#ifdef USE_AX12_SPEED_CONTROL
			// If we are trying our own Servo control need to save away the new positions...
			byte i;
			for (i = 0; i < NUMSERVOS; i++) {
				g_awCurAXPos[i] = g_awGoalAXPos[i];
    12b0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    12b4:	74730000 	ldrbtvc	r0, [r3]
    12b8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
		if (g_fAXSpeedControl) {

#ifdef USE_AX12_SPEED_CONTROL
			// If we are trying our own Servo control need to save away the new positions...
			byte i;
			for (i = 0; i < NUMSERVOS; i++) {
    12bc:	5f783031 	svcpl	0x00783031
				g_awCurAXPos[i] = g_awGoalAXPos[i];
			}
#endif
		} else
			BioloidControllerEx_interpolateStep(true); // Make sure we call at least once
    12c0:	2e70616d 	rpwcssz	f6, f0, #5.0
    12c4:	00020068 	andeq	r0, r2, r8, rrx

	}
}
    12c8:	64656c00 	strbtvs	r6, [r5], #-3072
    12cc:	0300682e 	movweq	r6, #2094	; 0x82e
    12d0:	79730000 	ldmdbvc	r3!, {}^
    12d4:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
}

//--------------------------------------------------------------------
//[FREE SERVOS] Frees all the servos
//--------------------------------------------------------------------
void FreeServos(void) {
    12d8:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    12dc:	00682e74 	rsbeq	r2, r8, r4, ror lr

	if (!g_fServosFree) {
    12e0:	00000003 	andeq	r0, r0, r3
		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		SetRegOnAllServos(AXM_TORQUE_ENABLE, 0);  // do this as one statement...
    12e4:	1c020500 	cfstr32ne	mvfx0, [r2], {0}
    12e8:	03080046 	movweq	r0, #32838	; 0x8046
    12ec:	214b0112 	cmpcs	fp, r2, lsl r1
		byte i;
		for (i = 0; i < NUMSERVOS; i++) {
			Relax(pgm_read_byte(&cPinTable[i]));
    12f0:	04026776 	streq	r6, [r2], #-1910
    12f4:	ae010100 	adfges	f0, f1, f0
    12f8:	02000000 	andeq	r0, r0, #0	; 0x0

	if (!g_fServosFree) {
		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		SetRegOnAllServos(AXM_TORQUE_ENABLE, 0);  // do this as one statement...
		byte i;
		for (i = 0; i < NUMSERVOS; i++) {
    12fc:	00008900 	andeq	r8, r0, r0, lsl #18
			Relax(pgm_read_byte(&cPinTable[i]));
		}
		CommanderInputController_AllowControllerInterrupts(true);
		g_fServosFree = true;
    1300:	fb010200 	blx	41b0a <__Stack_Size+0x4170a>
	}
}
    1304:	01000d0e 	tsteq	r0, lr, lsl #26
    1308:	00010101 	andeq	r0, r1, r1, lsl #2
    130c:	00010000 	andeq	r0, r1, r0
extern void SetRegOnAllServos(u8 bReg, u8 bVal);

//--------------------------------------------------------------------
//Init
//--------------------------------------------------------------------
void Servo_Init(void) {
    1310:	4d430100 	stfmie	f0, [r3]
	// First lets get the actual servo positions for all of our servos...
	//pinMode(0, OUTPUT);
	g_fServosFree = true;
    1314:	5f303335 	svcpl	0x00303335

  poseSize = NUMSERVOS;
    1318:	732f5748 	teqvc	pc, #18874368	; 0x1200000
    131c:	73006372 	movwvc	r6, #882	; 0x372
  BioloidControllerEx_readPose();
    1320:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
#ifdef cVoltagePin
	for (byte i=0; i < 8; i++)
	GetBatteryVoltage();  // init the voltage pin
#endif

	g_fAXSpeedControl = false;
    1324:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1328:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00



	// Added - try to speed things up later if we do a query...
	SetRegOnAllServos(AXM_RETURN_DELAY_TIME, 0); // tell servos to give us back their info as quick as they can...
    132c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1330:	354d4300 	strbcc	r4, [sp, #-768]

}
    1334:	485f3033 	ldmdami	pc, {r0, r1, r4, r5, ip, sp}^
    1338:	6e692f57 	mcrvs	15, 3, r2, cr9, cr7, {2}
    133c:	6d000063 	stcvs	0, cr0, [r0, #-396]
    1340:	632e6369 	teqvs	lr, #-1543503871	; 0xa4000001

}

void setupPhoenix() {

	g_fShowDebugPrompt = true;
    1344:	00000100 	andeq	r0, r0, r0, lsl #2
void readSensors(){


}

void setupPhoenix() {
    1348:	336d7473 	cmncc	sp, #1929379840	; 0x73000000

	g_fShowDebugPrompt = true;
	g_fDebugOutput = false;
    134c:	30316632 	eorscc	r6, r1, r2, lsr r6
    1350:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
	//init BioloidEx
	BioloidControllerEx();
    1354:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}

	// Init our ServoDriver
	Servo_Init();
    1358:	00000200 	andeq	r0, r0, r0, lsl #4

	mDelay(10);
    135c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		LegPosX[LegIndex] = (short) pgm_read_word(&cInitPosX[LegIndex]); //Set start positions for each leg
    1360:	30316632 	eorscc	r6, r1, r2, lsr r6
    1364:	616d5f78 	smcvs	54776
		LegPosY[LegIndex] = (short) pgm_read_word(&cInitPosY[LegIndex]);
    1368:	00682e70 	rsbeq	r2, r8, r0, ror lr
    136c:	6d000002 	stcvs	0, cr0, [r0, #-8]
		LegPosZ[LegIndex] = (short) pgm_read_word(&cInitPosZ[LegIndex]);
    1370:	682e6369 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sp, lr}

	mDelay(10);

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		LegPosX[LegIndex] = (short) pgm_read_word(&cInitPosX[LegIndex]); //Set start positions for each leg
    1374:	00000300 	andeq	r0, r0, r0, lsl #6
    1378:	74737973 	ldrbtvc	r7, [r3], #-2419
		LegPosY[LegIndex] = (short) pgm_read_word(&cInitPosY[LegIndex]);
    137c:	665f6d65 	ldrbvs	r6, [pc], -r5, ror #26
    1380:	2e636e75 	mcrcs	14, 3, r6, cr3, cr5, {3}
		LegPosZ[LegIndex] = (short) pgm_read_word(&cInitPosZ[LegIndex]);
    1384:	00030068 	andeq	r0, r3, r8, rrx
    1388:	05000000 	streq	r0, [r0]
    138c:	00464802 	subeq	r4, r6, r2, lsl #16
	Servo_Init();

	mDelay(10);

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    1390:	010d0308 	tsteq	sp, r8, lsl #6
    1394:	2010032e 	andscs	r0, r0, lr, lsr #6
    1398:	3d4b3e1f 	stclcc	14, cr3, [fp, #-124]

	ResetLegInitAngles();

	//Single leg control. Make sure no leg is selected
#ifdef OPT_SINGLELEG
	g_InControlState.SelectedLeg = 255; // No Leg selected
    139c:	6942384b 	stmdbvs	r2, {r0, r1, r3, r6, fp, ip, sp}^
    13a0:	2f211f21 	svccs	0x00211f21
	g_InControlState.PrevSelectedLeg = 255;
    13a4:	01000202 	tsteq	r0, r2, lsl #4
#endif
	//Body Positions
	g_InControlState.BodyPos.x = 0;
    13a8:	0000ee01 	andeq	lr, r0, r1, lsl #28
	g_InControlState.BodyPos.y = 0;
	g_InControlState.BodyPos.z = 0;
    13ac:	6d000200 	sfmvs	f0, 4, [r0]

//Body Rotations
	g_InControlState.BodyRot1.x = 0;
	g_InControlState.BodyRot1.y = 0;
    13b0:	02000000 	andeq	r0, r0, #0	; 0x0
	g_InControlState.BodyRot1.z = 0;
	g_InControlState.BodyRotOffset.x = 0;
    13b4:	0d0efb01 	vstreq	d15, [lr, #-4]
	g_InControlState.BodyRotOffset.y = 0; //Input Y offset value to adjust centerpoint of rotation
	g_InControlState.BodyRotOffset.z = 0;
    13b8:	01010100 	tsteq	r1, r0, lsl #2

	//Gait
	g_InControlState.GaitType = 0;
    13bc:	00000001 	andeq	r0, r0, r1
	g_InControlState.BalanceMode = 0;
    13c0:	01000001 	tsteq	r0, r1
	g_InControlState.LegLiftHeight = 50;
	g_InControlState.ForceGaitStepCnt = 0; // added to try to adjust starting positions depending on height...
    13c4:	33354d43 	teqcc	r5, #4288	; 0x10c0
	g_InControlState.GaitStep = 1;
    13c8:	57485f30 	smlaldxpl	r5, r8, r0, pc
}

void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {
    13cc:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
	g_InControlState.BodyRotOffset.z = 0;

	//Gait
	g_InControlState.GaitType = 0;
	g_InControlState.BalanceMode = 0;
	g_InControlState.LegLiftHeight = 50;
    13d0:	6d747300 	ldclvs	3, cr7, [r4]
    13d4:	31663233 	cmncc	r6, r3, lsr r2
void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {

		g_InControlState.gaitCur = APG[g_InControlState.GaitType];
    13d8:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    13dc:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
    13e0:	4300636e 	movwmi	r6, #878	; 0x36e
//==============================================================================

// If both PS2 and XBee are defined then we will become secondary to the xbee
void CommanderInputController_Init(void) {

	g_BodyYOffset = 0;
    13e4:	3033354d 	eorscc	r3, r3, sp, asr #10
    13e8:	2f57485f 	svccs	0x0057485f
    13ec:	00636e69 	rsbeq	r6, r3, r9, ror #28
	g_BodyYShift = 0;
	//begin(XBEE_BAUD);
	GPSeq = 0;  // init to something...
    13f0:	73797300 	cmnvc	r9, #0	; 0x0
    13f4:	5f6d6574 	svcpl	0x006d6574

	ControlMode = WALKMODE;
    13f8:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
	HeightSpeedMode = NORM_NORM;
    13fc:	0100632e 	tsteq	r0, lr, lsr #6
	//    DoubleHeightOn = false;
	DoubleTravelOn = false;
    1400:	74730000 	ldrbtvc	r0, [r3]
	bJoystickWalkMode = 0;
    1404:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
	GaitSelect();

	CommanderInputController_Init();

	// Servo Driver
	ServoMoveTime = 150;
    1408:	5f783031 	svcpl	0x00783031
	g_InControlState.fRobotOn = 0;
    140c:	65707974 	ldrbvs	r7, [r0, #-2420]!
	g_fLowVoltageShutdown = false;
    1410:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000

}
    1414:	656c0000 	strbvs	r0, [ip]!
    1418:	00682e64 	rsbeq	r2, r8, r4, ror #28
    141c:	00000003 	andeq	r0, r0, r3
    1420:	94020500 	strls	r0, [r2], #-1280
    1424:	03080046 	movweq	r0, #32838	; 0x8046
    1428:	3d13012c 	ldfccs	f0, [r3, #-176]
    142c:	3d580d03 	ldclcc	13, cr0, [r8, #-12]
    1430:	1b25335a 	blne	94e1a0 <__Stack_Size+0x94dda0>
    1434:	5d033e25 	stcpl	14, cr3, [r3, #-148]
    1438:	21492182 	smlalbbcs	r2, r9, r2, r1
    143c:	3c3c033d 	ldccc	3, cr0, [ip], #-244
    1440:	5d603d13 	stclpl	13, cr3, [r0, #-76]!
    1444:	3d135b32 	vldrcc	d5, [r3, #-200]
    1448:	3d580e03 	ldclcc	14, cr0, [r8, #-12]
    144c:	8532335a 	ldrhi	r3, [r2, #-858]!
    1450:	0e033d13 	mcreq	13, 0, r3, cr3, cr3, {0}
    1454:	335a3d58 	cmpcc	sl, #5632	; 0x1600
    1458:	67158532 	undefined
    145c:	221e1469 	andscs	r1, lr, #1761607680	; 0x69000000
    1460:	2f4b4b3f 	svccs	0x004b4b3f
    1464:	424b5c3d 	submi	r5, fp, #15616	; 0x3d00
//[CommitServoDriver Updates the positions of the servos - This outputs
//         as much of the command as we can without committing it.  This
//         allows us to once the previous update was completed to quickly
//        get the next command to start
//--------------------------------------------------------------------
void CommitServoDriver(word wMoveTime) {
    1468:	2f593e4e 	svccs	0x00593e4e
    146c:	2f1f214b 	svccs	0x001f214b
    1470:	2f4b4b4e 	svccs	0x004b4b4e


	CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    1474:	4b4b5c3d 	blmi	12d8570 <__Stack_Size+0x12d8170>

      }
      ax12write(0xff - (checksum % 256));
      setRX(0);
*/
  	    dxl_set_txpacket_id (BROADCAST_ID);
    1478:	4b5c3d2f 	blmi	171093c <__Stack_Size+0x171053c>
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    147c:	033d2f4b 	teqeq	sp, #300	; 0x12c
    1480:	c1035816 	tstgt	r3, r6, lsl r8
		dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
    1484:	1f21f27e 	svcne	0x0021f27e
    1488:	03602f21 	cmneq	r0, #132	; 0x84
		dxl_set_txpacket_parameter(1, 2);
    148c:	76034a0a 	strvc	r4, [r3], -sl, lsl #20
    1490:	1b252520 	blne	94a918 <__Stack_Size+0x94a518>
    1494:	07022f25 	streq	r2, [r2, -r5, lsr #30]
    1498:	ed010100 	stfs	f0, [r1]
      int i;
      word wSpeed;
		for (i = 0; i < poseSize; i++) {
			wSpeed = CalculateAX12MoveSpeed(g_awCurAXPos[i], g_awGoalAXPos[i], wMoveTime);    // What order should we store these values?
    149c:	02000001 	andeq	r0, r0, #1	; 0x1
    14a0:	0000ce00 	andeq	ip, r0, r0, lsl #28
    14a4:	fb010200 	blx	41cae <__Stack_Size+0x418ae>
    14a8:	01000d0e 	tsteq	r0, lr, lsl #26
			//dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
			byte id = pgm_read_byte(&cPinTable[i]);
			dxl_set_txpacket_parameter(2 + 3 * i, id);
    14ac:	00010101 	andeq	r0, r1, r1, lsl #2
    14b0:	00010000 	andeq	r0, r1, r0
    14b4:	4d430100 	stfmie	f0, [r3]
    14b8:	5f303335 	svcpl	0x00303335
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(g_awGoalAXPos[i]));
    14bc:	732f5748 	teqvc	pc, #18874368	; 0x1200000
    14c0:	73006372 	movwvc	r6, #882	; 0x372
    14c4:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    14c8:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    14cc:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
			dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(g_awGoalAXPos[i]));
    14d0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    14d4:	354d4300 	strbcc	r4, [sp, #-768]
    14d8:	485f3033 	ldmdami	pc, {r0, r1, r4, r5, ip, sp}^
    14dc:	6e692f57 	mcrvs	15, 3, r2, cr9, cr7, {2}
    14e0:	73000063 	movwvc	r0, #99	; 0x63
    14e4:	65747379 	ldrbvs	r7, [r4, #-889]!
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(wSpeed));
    14e8:	6e695f6d 	cdpvs	15, 6, cr5, cr9, cr13, {3}
    14ec:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
    14f0:	00000100 	andeq	r0, r0, r0, lsl #2
		    dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(wSpeed));
    14f4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    14f8:	30316632 	eorscc	r6, r1, r2, lsr r6
    14fc:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1500:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
		dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
		dxl_set_txpacket_parameter(1, 2);
      int i;
      word wSpeed;
		for (i = 0; i < poseSize; i++) {
    1504:	00000200 	andeq	r0, r0, r0, lsl #4
    1508:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    150c:	30316632 	eorscc	r6, r1, r2, lsr r6
    1510:	616d5f78 	smcvs	54776
			dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(g_awGoalAXPos[i]));
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(wSpeed));
		    dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(wSpeed));
		}

		dxl_set_txpacket_length((4 + 1) * poseSize + 4);
    1514:	00682e70 	rsbeq	r2, r8, r0, ror lr
    1518:	73000002 	movwvc	r0, #2	; 0x2
    151c:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
#ifdef DEBUG_BIOLOIDEX
	PrintString("DriverAX12 --- CommitServoDriver ---\n");
#endif
		dxl_txrx_packet();
    1520:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}

			u16 CommStatus = dxl_get_result();
    1524:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
#ifdef USING_PC_UART
			if (CommStatus == DXL_RXSUCCESS)
    1528:	00682e6f 	rsbeq	r2, r8, pc, ror #28
				PrintErrorCode();
    152c:	73000002 	movwvc	r0, #2	; 0x2
			else
				PrintCommStatus(CommStatus);
    1530:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    1534:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
#endif
#endif
		} else {
			BioloidControllerEx_interpolateSetup(wMoveTime);
    1538:	69766e5f 	ldmdbvs	r6!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^

	}

	CommanderInputController_AllowControllerInterrupts(true);

}
    153c:	00682e63 	rsbeq	r2, r8, r3, ror #28
    1540:	73000002 	movwvc	r0, #2	; 0x2
    1544:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    1548:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    154c:	6364615f 	cmnvs	r4, #-1073741801	; 0xc0000017
    1550:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
	word wCoxaSDV;        // Coxa value in servo driver units
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    1554:	73750000 	cmnvc	r5, #0	; 0x0
    1558:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    155c:	00030068 	andeq	r0, r3, r8, rrx
    1560:	73797300 	cmnvc	r9, #0	; 0x0
    1564:	5f6d6574 	svcpl	0x006d6574


void OutputServoInfoForLeg(byte LegIndex, short sCoxaAngle1, short sFemurAngle1,
		short sTibiaAngle1)

		{
    1568:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
	word wCoxaSDV;        // Coxa value in servo driver units
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    156c:	0300682e 	movweq	r6, #2094	; 0x82e
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
    1570:	00000000 	andeq	r0, r0, r0
    1574:	48d00205 	ldmmi	r0, {r0, r2, r9}^
    1578:	ce030800 	cdpgt	8, 0, cr0, cr3, cr0, {0}
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    157c:	1c240102 	stfnes	f0, [r4], #-8
    1580:	3d4e2f24 	stclcc	15, cr2, [lr, #-144]
    1584:	034d3d4e 	movteq	r3, #56654	; 0xdd4e


void OutputServoInfoForLeg(byte LegIndex, short sCoxaAngle1, short sFemurAngle1,
		short sTibiaAngle1)

		{
    1588:	09039055 	stmdbeq	r3, {r0, r2, r4, r6, ip, pc}
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    158c:	20770320 	rsbscs	r0, r7, r0, lsr #6
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
    1590:	34200903 	strtcc	r0, [r0], #-2307
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    1594:	033d3f3f 	teqeq	sp, #252	; 0xfc
#ifdef USE_AX12_SPEED_CONTROL
			// Save away the new positions...
			g_awGoalAXPos[FIRSTCOXAPIN + LegIndex] = wCoxaSDV; // What order should we store these values?
			g_awGoalAXPos[FIRSTFEMURPIN + LegIndex] = wFemurSDV;
    1598:	314a7fa5 	smlaltbcc	r7, sl, r5, pc

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
#ifdef USE_AX12_SPEED_CONTROL
			// Save away the new positions...
			g_awGoalAXPos[FIRSTCOXAPIN + LegIndex] = wCoxaSDV; // What order should we store these values?
    159c:	321e254d 	andscc	r2, lr, #322961408	; 0x13400000
			g_awGoalAXPos[FIRSTFEMURPIN + LegIndex] = wFemurSDV;
    15a0:	2f21292c 	svccs	0x0021292c
			g_awGoalAXPos[FIRSTTIBIAPIN + LegIndex] = wTibiaSDV;
    15a4:	3523212f 	strcc	r2, [r3, #-303]!
    15a8:	21292c22 	teqcs	r9, r2, lsr #24
    15ac:	23212f2f 	teqcs	r1, #188	; 0xbc

#endif
		} else {
			BioloidControllerEx_setNextPose(
    15b0:	4b6d6e32 	blmi	1b5ce80 <__Stack_Size+0x1b5ca80>
    15b4:	675b3d4e 	ldrbvs	r3, [fp, -lr, asr #26]
					pgm_read_byte(&cPinTable[FIRSTCOXAPIN + LegIndex]),
					wCoxaSDV);
			BioloidControllerEx_setNextPose(
    15b8:	675b675d 	undefined
    15bc:	034b755c 	movteq	r7, #46428	; 0xb55c
    15c0:	30747ee1 	rsbscc	r7, r4, r1, ror #29
					pgm_read_byte(&cPinTable[FIRSTFEMURPIN + LegIndex]),
					wFemurSDV);
			BioloidControllerEx_setNextPose(
    15c4:	20790327 	rsbscs	r0, r9, r7, lsr #6
    15c8:	1d341b25 	fldmdbxne	r4!, {d1-d18}
					wTibiaSDV);

		}
	}
	CommanderInputController_AllowControllerInterrupts(true); // Ok for hserial again...
}
    15cc:	2f302a32 	svccs	0x00302a32
    15d0:	2b31302f 	blcs	c4d694 <__Stack_Size+0xc4d294>
    15d4:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
    15d8:	1f2f1f4c 	svcne	0x002f1f4c
    15dc:	1f4c302f 	svcne	0x004c302f

void StartUpdateServos() {
    15e0:	2e790336 	mrccs	3, 3, r0, cr9, cr6, {1}
	byte LegIndex;

	// First call off to the init...
	BeginServoUpdate();    // Start the update
    15e4:	32312f1f 	eorscc	r2, r1, #124	; 0x7c
    15e8:	2f2f302a 	svccs	0x002f302a
    15ec:	2f2b3130 	svccs	0x002b3130

	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		OutputServoInfoForLeg(LegIndex,
    15f0:	4c302f2f 	ldcmi	15, cr2, [r0], #-188
    15f4:	2f1f2f1f 	svccs	0x001f2f1f
    15f8:	2f1f4d30 	svccs	0x001f4d30
    15fc:	30302d1f 	eorscc	r2, r0, pc, lsl sp
    1600:	03361f4c 	teqeq	r6, #304	; 0x130
    1604:	2f1f2e79 	svccs	0x001f2e79
    1608:	302a3231 	eorcc	r3, sl, r1, lsr r2
    160c:	31302f2f 	teqcc	r0, pc, lsr #30
    1610:	2f2f2f2b 	svccs	0x002f2f2b
    1614:	2f2b3130 	svccs	0x002b3130
    1618:	4d302f2f 	ldcmi	15, cr2, [r0, #-188]!
    161c:	2d1f2f1f 	ldccs	15, cr2, [pc, #-124]
    1620:	1f4c3030 	svcne	0x004c3030
    1624:	302f1f2f 	eorcc	r1, pc, pc, lsr #30
    1628:	1f2f1f4c 	svcne	0x002f1f4c
    162c:	1f4c302f 	svcne	0x004c302f
    1630:	312f1f2f 	teqcc	pc, pc, lsr #30
    1634:	2f2f2c30 	svccs	0x002f2c30
    1638:	034b4b30 	movteq	r4, #47920	; 0xbb30
    163c:	28907f80 	ldmcs	r0, {r7, r8, r9, sl, fp, ip, sp, lr}
    1640:	282e7803 	stmdacs	lr!, {r0, r1, fp, ip, sp, lr}
	byte LegIndex;

	// First call off to the init...
	BeginServoUpdate();    // Start the update

	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    1644:	034a0c03 	movteq	r0, #44035	; 0xac03
				cTibiaInv[LegIndex] ?
						-TibiaAngle1[LegIndex] : TibiaAngle1[LegIndex]);

	}

}
    1648:	1e4f2079 	mcrne	0, 2, r2, cr15, cr9, {3}
    164c:	2f1c2321 	svccs	0x001c2321
    1650:	312f2f2f 	teqcc	pc, pc, lsr #30
    1654:	303b1e40 	eorscc	r1, fp, r0, asr #28
    1658:	1e40312f 	dvfnesp	f3, f0, #10.0
    165c:	2f2f2f1f 	svccs	0x002f2f1f
    1660:	7f98032f 	svcvc	0x0098032f
#else
word g_wLastVoltage = 0xffff;    // save the last voltage we retrieved...
byte g_bLegVoltage = 0;		// what leg did we last check?
unsigned long g_ulTimeLastBatteryVoltage;
#define VOLTAGE_REPEAT_MAX  3
word GetBatteryVoltage(void) {
    1664:	4d31313c 	ldfmis	f3, [r1, #-240]!
	if (interpolating && (g_wLastVoltage != 0xffff)
    1668:	3f3f3030 	svccc	0x003f3030
    166c:	694d3f3f 	stmdbvs	sp, {r0, r1, r2, r3, r4, r5, r8, r9, sl, fp, ip, sp}^
    1670:	513f5c3f 	teqpl	pc, pc, lsr ip
    1674:	5b5c5c5e 	blpl	17187f4 <__Stack_Size+0x17183f4>
    1678:	7fa5033d 	svcvc	0x00a5033d
    167c:	232b232e 	teqcs	fp, #-1207959552	; 0xb8000000
    1680:	31313123 	teqcc	r1, r3, lsr #2
    1684:	022f3131 	eoreq	r3, pc, #1073741836	; 0x4000000c
			&& ((getMillis() - g_ulTimeLastBatteryVoltage)
					< VOLTAGE_MAX_TIME_BETWEEN_CALLS))
		return g_wLastVoltage;
    1688:	01010005 	tsteq	r1, r5

	register u8 bLoopCnt = VOLTAGE_REPEAT_MAX;
	do {
		register word wVoltage = dxl_read_byte(1, AXM_PRESENT_VOLTAGE);
    168c:	00000208 	andeq	r0, r0, r8, lsl #4
    1690:	00ab0002 	adceq	r0, fp, r2
    1694:	01020000 	tsteq	r2, r0
		if (wVoltage != 0xffff) {
			g_ulTimeLastBatteryVoltage = getMillis();
    1698:	000d0efb 	strdeq	r0, [sp], -fp
			g_wLastVoltage = wVoltage * 10;
    169c:	01010101 	tsteq	r1, r1, lsl #2

	register u8 bLoopCnt = VOLTAGE_REPEAT_MAX;
	do {
		register word wVoltage = dxl_read_byte(1, AXM_PRESENT_VOLTAGE);
		if (wVoltage != 0xffff) {
			g_ulTimeLastBatteryVoltage = getMillis();
    16a0:	01000000 	tsteq	r0, r0
			g_wLastVoltage = wVoltage * 10;
    16a4:	43010000 	movwmi	r0, #4096	; 0x1000
		}
	} while (--bLoopCnt);

	return 0;

}
    16a8:	3033354d 	eorscc	r3, r3, sp, asr #10
    16ac:	2f57485f 	svccs	0x0057485f
    16b0:	00637273 	rsbeq	r7, r3, r3, ror r2
    16b4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
// ReadMsgs
//==============================================================================

/* process messages coming from Commander
 *  format = 0xFF RIGHT_H RIGHT_V LEFT_H LEFT_V BUTTONS EXT CHECKSUM */
int Commander_ReadMsgs() {
    16b8:	30316632 	eorscc	r6, r1, r2, lsr r6
	 }
	 #endif
	 */
	//while (CheckZBNewArrive() > 0) {
	while (1) {
		if (zgb_rx_check_arduino() == 1) {
    16bc:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    16c0:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}

			leftV = (signed char) (zgb_rx_data_right_V_());
    16c4:	4d430063 	stclmi	0, cr0, [r3, #-396]
    16c8:	5f303335 	svcpl	0x00303335
			leftH = (signed char) (zgb_rx_data_right_H_());
    16cc:	692f5748 	stmdbvs	pc!, {r3, r6, r8, r9, sl, ip, lr}
    16d0:	0000636e 	andeq	r6, r0, lr, ror #6
			rightV = (signed char) (zgb_rx_data_left_V_());
    16d4:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
    16d8:	00632e74 	rsbeq	r2, r3, r4, ror lr
			rightH = (signed char) (zgb_rx_data_left_H_());
    16dc:	73000001 	movwvc	r0, #1	; 0x1
    16e0:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
			buttons = zgb_rx_data_buttons();
    16e4:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    16e8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
			ext = zgb_rx_data_extra();
    16ec:	00682e65 	rsbeq	r2, r8, r5, ror #28
    16f0:	73000002 	movwvc	r0, #2	; 0x2

	}

	return 0;

}
    16f4:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    16f8:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    16fc:	70616d5f 	rsbvc	r6, r1, pc, asr sp
    1700:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1704:	74730000 	ldrbtvc	r0, [r3]
    1708:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    170c:	5f783031 	svcpl	0x00783031
    1710:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001

//==============================================================================
// This is The main code to input function to read inputs from the Commander and then
//process any commands.
//==============================================================================
void CommanderInputController_ControlInput(void) {
    1714:	00682e74 	rsbeq	r2, r8, r4, ror lr

	// See if we have a new command available...
	if (Commander_ReadMsgs() > 0) {
    1718:	75000002 	strvc	r0, [r0, #-2]
    171c:	74726173 	ldrbtvc	r6, [r2], #-371
    1720:	0300682e 	movweq	r6, #2094	; 0x82e
    1724:	79730000 	ldmdbvc	r3!, {}^
		// If we receive a valid message than turn robot on...
		boolean fAdjustLegPositions = false;
		short sLegInitXZAdjust = 0;
		short sLegInitAngleAdjust = 0;

		if (!g_InControlState.fRobotOn) {
    1728:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
    172c:	6e75665f 	mrcvs	6, 3, r6, cr5, cr15, {2}
			g_InControlState.fRobotOn = true;
    1730:	00682e63 	rsbeq	r2, r8, r3, ror #28
    1734:	6c000003 	stcvs	0, cr0, [r0], {3}
		}

		// [SWITCH MODES]

		// Cycle through modes...
		if ((buttons & BUT_LT) && !(buttonsPrev & BUT_LT)) {
    1738:	682e6465 	stmdavs	lr!, {r0, r2, r5, r6, sl, sp, lr}
    173c:	00000300 	andeq	r0, r0, r0, lsl #6
    1740:	02050000 	andeq	r0, r5, #0	; 0x0
    1744:	08004d24 	stmdaeq	r0, {r2, r5, r8, sl, fp, lr}
    1748:	0100c503 	tsteq	r0, r3, lsl #10
    174c:	0f036a13 	svceq	0x00036a13

			if (++ControlMode >= MODECNT) {
    1750:	8485134a 	strhi	r1, [r5], #842
    1754:	13783f4b 	cmnne	r8, #300	; 0x12c
    1758:	2e035b85 	fmacdcs	d5, d19, d5
    175c:	2f4b1374 	svccs	0x004b1374
				ControlMode = WALKMODE;    // cycled back around...
				Buzzed(50, 2000);
    1760:	7903136a 	stmdbvc	r3, {r1, r3, r5, r6, r8, r9, ip}
    1764:	0b033d66 	bleq	d0d04 <__Stack_Size+0xd0904>
    1768:	75764b3c 	ldrbvc	r4, [r6, #-2876]!
				Buzzed(50, 3000);
    176c:	6601d503 	strvs	sp, [r1], -r3, lsl #10
    1770:	22222458 	eorcs	r2, r2, #1476395008	; 0x58000000

			} else {
				Buzzed(50, 2000);
    1774:	21755a2a 	cmncs	r5, sl, lsr #20
    1778:	7a03212d 	bvc	c9c34 <__Stack_Size+0xc9834>
    177c:	3c0d034a 	stccc	3, cr0, [sp], {74}
			}
			if (ControlMode != SINGLELEGMODE)
    1780:	9000d503 	andls	sp, r0, r3, lsl #10
    1784:	1f241c16 	svcne	0x00241c16
				g_InControlState.SelectedLeg = 255;
    1788:	4b302d2f 	blmi	c0cc4c <__Stack_Size+0xc0c84c>
    178c:	7419032f 	ldrvc	r0, [r9], #-815
    1790:	21212358 	teqcs	r1, r8, asr r3

		}

		//[Common functions]
		//Switch Balance mode on/off
		if ((buttons & BUT_L4) && !(buttonsPrev & BUT_L4)) {
    1794:	2183593a 	orrcs	r5, r3, sl, lsr r9
    1798:	03542f2d 	cmpeq	r4, #180	; 0xb4
    179c:	13983c0a 	orrsne	r3, r8, #2560	; 0xa00
    17a0:	1e224d6a 	cdpne	13, 2, cr4, cr2, cr10, {3}
    17a4:	46406722 	strbmi	r6, [r0], -r2, lsr #14
    17a8:	3d683d24 	stclcc	13, cr3, [r8, #-144]!

			g_InControlState.BalanceMode = !g_InControlState.BalanceMode;
    17ac:	594b673f 	stmdbpl	fp, {r0, r1, r2, r3, r4, r5, r8, r9, sl, sp, lr}^
    17b0:	9e61033d 	mcrls	3, 3, r0, cr1, cr13, {1}
    17b4:	3d212d21 	stccc	13, cr2, [r1, #-132]!
    17b8:	203c5903 	eorscs	r5, ip, r3, lsl #18
    17bc:	4b4c4c4e 	blmi	13148fc <__Stack_Size+0x13144fc>
			if (g_InControlState.BalanceMode) {
    17c0:	73034c6a 	movwvc	r4, #15466	; 0x3c6a
				Buzzed(250, 1500);
    17c4:	3c110358 	ldccc	3, cr0, [r1], {88}
    17c8:	22745d03 	rsbscs	r5, r4, #192	; 0xc0
			} else {
				Buzzed(100, 2000);
    17cc:	033d221e 	teqeq	sp, #-536870911	; 0xe0000001
    17d0:	224a7f84 	subcs	r7, sl, #528	; 0x210
				Buzzed(50, 4000);
    17d4:	593f221e 	ldmdbpl	pc!, {r1, r2, r3, r4, r9, sp}
    17d8:	747dca03 	ldrbtvc	ip, [sp], #-2563
    17dc:	3d221e22 	stccc	14, cr1, [r2, #-136]!
			}
		}

		//Stand up, sit down
		if ((buttons & BUT_L5) && !(buttonsPrev & BUT_L5)) {
    17e0:	4a038a03 	bmi	e3ff4 <__Stack_Size+0xe3bf4>
    17e4:	283e232e 	ldmdacs	lr!, {r1, r2, r3, r5, r8, r9, sp}
    17e8:	4b207903 	blmi	81fbfc <__Stack_Size+0x81f7fc>
    17ec:	1e322f2f 	cdpne	15, 3, cr2, cr2, cr15, {1}
    17f0:	4d3e2f4c 	ldcmi	15, cr2, [lr, #-304]!
    17f4:	4a6d0369 	bmi	1b425a0 <__Stack_Size+0x1b421a0>
			if (g_BodyYOffset > 0)
    17f8:	03201603 	teqeq	r0, #3145728	; 0x300000
    17fc:	2e587eea 	cdpcs	14, 5, cr7, cr8, cr10, {7}
				g_BodyYOffset = 0;
    1800:	03273e23 	teqeq	r7, #560	; 0x230
    1804:	2f4b207a 	svccs	0x004b207a
			else
				g_BodyYOffset = 35;
			fAdjustLegPositions = true;
			g_fDynamicLegXZLength = false;
    1808:	4c1e312f 	ldfmis	f3, [lr], {47}
		//Stand up, sit down
		if ((buttons & BUT_L5) && !(buttonsPrev & BUT_L5)) {
			if (g_BodyYOffset > 0)
				g_BodyYOffset = 0;
			else
				g_BodyYOffset = 35;
    180c:	694d3e2f 	stmdbvs	sp, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}^
			fAdjustLegPositions = true;
			g_fDynamicLegXZLength = false;
    1810:	586a034e 	stmdapl	sl!, {r1, r2, r3, r6, r8, r9}^
    1814:	03201903 	teqeq	r0, #49152	; 0xc000

		// We will use L6 with the Right joystick to control both body offset as well as Speed...
		// We move each pass through this by a percentage of how far we are from center in each direction
		// We get feedback with height by seeing the robot move up and down.  For Speed, I put in sounds
		// which give an idea, but only for those whoes robot has a speaker
		int lx = leftH;
    1818:	2e827db6 	mcrcs	13, 4, r7, cr2, cr6, {5}
		int ly = leftV;
		if (buttons & BUT_L6) {
    181c:	03273e23 	teqeq	r7, #560	; 0x230

		// We will use L6 with the Right joystick to control both body offset as well as Speed...
		// We move each pass through this by a percentage of how far we are from center in each direction
		// We get feedback with height by seeing the robot move up and down.  For Speed, I put in sounds
		// which give an idea, but only for those whoes robot has a speaker
		int lx = leftH;
    1820:	2f4b207a 	svccs	0x004b207a
    1824:	4c1e312f 	ldfmis	f3, [lr], {47}
		int ly = leftV;
    1828:	694d3e2f 	stmdbvs	sp, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}^
    182c:	034a6e03 	movteq	r6, #44547	; 0xae03
		if (buttons & BUT_L6) {
    1830:	e2032017 	and	r2, r3, #23	; 0x17
    1834:	76225802 	strtvc	r5, [r2], -r2, lsl #16
			// raise or lower the robot on the joystick up /down
			// Maybe should have Min/Max
			int delta = rightV / 25;
    1838:	304e3d4b 	subcc	r3, lr, fp, asr #26
    183c:	03200b03 	teqeq	r0, #3072	; 0xc00
    1840:	0b032e75 	bleq	cd21c <__Stack_Size+0xcce1c>
    1844:	5c5a3020 	mrrcpl	0, 2, r3, sl, cr0
    1848:	4b67312f 	blmi	19cdd0c <__Stack_Size+0x19cd90c>
    184c:	034b304b 	movteq	r3, #45131	; 0xb04b
			if (delta) {
    1850:	20ac7fb3 	strhcs	r7, [ip], r3
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
    1854:	684b4c4e 	stmdavs	fp, {r1, r2, r3, r6, sl, fp, lr}^
    1858:	03587903 	cmpeq	r8, #49152	; 0xc000
    185c:	f4033c0b 	undefined instruction 0xf4033c0b
    1860:	7622587d 	undefined
    1864:	304c3d4b 	subcc	r3, ip, fp, asr #26
    1868:	03200a03 	teqeq	r0, #12288	; 0x3000
    186c:	0a032e76 	beq	cd24c <__Stack_Size+0xcce4c>
    1870:	6a763020 	bvs	1d8d8f8 <__Stack_Size+0x1d8d4f8>
    1874:	4b673f3d 	blmi	19d1570 <__Stack_Size+0x19d1170>
			sLegInitAngleAdjust = ly / 8;
			lx = 0;
			ly = 0;

			// Likewise for Speed control
			delta = rightH / 16;   //
    1878:	034b3e59 	movteq	r3, #48729	; 0xbe59
    187c:	2f2fba19 	svccs	0x002fba19
    1880:	2e7f9b03 	fadddcs	d25, d15, d3
    1884:	1e302120 	rsfnesp	f2, f0, f0
    1888:	4b684b30 	blmi	1a14550 <__Stack_Size+0x1a14150>
			if ((delta < 0) && g_InControlState.SpeedControl) {
    188c:	303c6903 	eorscc	r6, ip, r3, lsl #18
    1890:	024b221e 	subeq	r2, fp, #-536870911	; 0xe0000001
    1894:	01010002 	tsteq	r1, r2
				if ((word)(-delta) < g_InControlState.SpeedControl)
    1898:	0000020d 	andeq	r0, r0, sp, lsl #4
					g_InControlState.SpeedControl += delta;
    189c:	00840002 	addeq	r0, r4, r2
				else
					g_InControlState.SpeedControl = 0;
    18a0:	01020000 	tsteq	r2, r0
    18a4:	000d0efb 	strdeq	r0, [sp], -fp

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}
			if ((delta > 0) && (g_InControlState.SpeedControl < 2000)) {
    18a8:	01010101 	tsteq	r1, r1, lsl #2
    18ac:	01000000 	tsteq	r0, r0
    18b0:	73010000 	movwvc	r0, #4096	; 0x1000
				g_InControlState.SpeedControl += delta;
				if (g_InControlState.SpeedControl > 2000)
    18b4:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
					g_InControlState.SpeedControl = 0;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}
			if ((delta > 0) && (g_InControlState.SpeedControl < 2000)) {
				g_InControlState.SpeedControl += delta;
    18b8:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
				if (g_InControlState.SpeedControl > 2000)
					g_InControlState.SpeedControl = 2000;
    18bc:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    18c0:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
    18c4:	6d747300 	ldclvs	3, cr7, [r4]
    18c8:	31663233 	cmncc	r6, r3, lsr r2
    18cc:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
				fAdjustLegPositions = true;
			}

			// Also use right Horizontal to manually adjust the initial leg positions.
			sLegInitXZAdjust = lx / 10;        // play with this.
    18d0:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
    18d4:	0000636e 	andeq	r6, r0, lr, ror #6
    18d8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    18dc:	30316632 	eorscc	r6, r1, r2, lsr r6
			sLegInitAngleAdjust = ly / 8;
    18e0:	64615f78 	strbtvs	r5, [r1], #-3960
    18e4:	00632e63 	rsbeq	r2, r3, r3, ror #28
    18e8:	73000001 	movwvc	r0, #1	; 0x1
    18ec:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
					g_InControlState.SpeedControl = 2000;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}

			rightH = 0; // don't walk when adjusting the speed here...
    18f0:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
				fAdjustLegPositions = true;
			}

			// Also use right Horizontal to manually adjust the initial leg positions.
			sLegInitXZAdjust = lx / 10;        // play with this.
    18f4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
					g_InControlState.SpeedControl = 2000;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}

			rightH = 0; // don't walk when adjusting the speed here...
    18f8:	00682e65 	rsbeq	r2, r8, r5, ror #28
		}

		//[Walk functions]
		if (ControlMode == WALKMODE) {
    18fc:	73000002 	movwvc	r0, #2	; 0x2
    1900:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    1904:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}

			//Switch gates
			if (((buttons & BUT_R1) && !(buttonsPrev & BUT_R1))
    1908:	70616d5f 	rsbvc	r6, r1, pc, asr sp
    190c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1910:	74730000 	ldrbtvc	r0, [r3]
    1914:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1918:	5f783031 	svcpl	0x00783031
    191c:	2e636461 	cdpcs	4, 6, cr6, cr3, cr1, {3}
    1920:	00020068 	andeq	r0, r2, r8, rrx
    1924:	05000000 	streq	r0, [r0]
    1928:	00530802 	subseq	r0, r3, r2, lsl #16
    192c:	01ae0308 	undefined instruction 0x01ae0308
    1930:	010f0301 	tsteq	pc, r1, lsl #6
    1934:	0b039226 	bleq	e61d4 <__Stack_Size+0xe5dd4>
    1938:	2e790320 	cdpcs	3, 7, cr0, cr9, cr0, {1}
    193c:	0a038535 	beq	e2e18 <__Stack_Size+0xe2a18>
    1940:	207a0320 	rsbscs	r0, sl, r0, lsr #6
    1944:	3e321c26 	cdpcc	12, 3, cr1, cr2, cr6, {1}
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
    1948:	3c0b0321 	stccc	3, cr0, [fp], {33}
					&& abs(g_InControlState.TravelLength.x) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
    194c:	23233115 	teqcs	r3, #1073741829	; 0x40000005
    1950:	032f2323 	teqeq	pc, #-1946157056	; 0x8c000000
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
    1954:	23172e0c 	tstcs	r7, #192	; 0xc0
					&& abs(g_InControlState.TravelLength.x) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
    1958:	0d034c4f 	stceq	12, cr4, [r3, #-316]
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
					Buzzed(50, 2000);
    195c:	4f231720 	svcmi	0x00231720
    1960:	2012034c 	andscs	r0, r2, ip, asr #6
    1964:	22010903 	andcs	r0, r1, #49152	; 0xc000
				} else {
					Buzzed(50, 2000);
    1968:	034c4f23 	movteq	r4, #53027	; 0xcf23
    196c:	4b172e0a 	blmi	5cd19c <__Stack_Size+0x5ccd9c>
    1970:	192e0a03 	stmdbne	lr!, {r0, r1, r9, fp}
					Buzzed(50, 2250);
    1974:	034a0d03 	movteq	r0, #44291	; 0xad03
    1978:	4b172e0a 	blmi	5cd1a8 <__Stack_Size+0x5ccda8>
					g_InControlState.GaitType = 0;
    197c:	192e0a03 	stmdbne	lr!, {r0, r1, r9, fp}
    1980:	034a0d03 	movteq	r0, #44291	; 0xad03
}

void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {
    1984:	24172e0c 	ldrcs	r2, [r7], #-3596
    1988:	0a034c50 	beq	d4ad0 <__Stack_Size+0xd46d0>
    198c:	0d031920 	stceq	9, cr1, [r3, #-128]

		g_InControlState.gaitCur = APG[g_InControlState.GaitType];
    1990:	2e0d034a 	cdpcs	3, 0, cr0, cr13, cr10, {2}
    1994:	25010903 	strcs	r0, [r1, #-2307]
    1998:	2130311d 	teqcs	r0, sp, lsl r1
    199c:	17200e03 	strne	r0, [r0, -r3, lsl #28]!
    19a0:	034c4f23 	movteq	r4, #53027	; 0xcf23
				}
				GaitSelect();
			}

			//Double leg lift height
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    19a4:	0a03202c 	beq	c9a5c <__Stack_Size+0xc965c>
    19a8:	20760301 	rsbscs	r0, r6, r1, lsl #6
    19ac:	580a0320 	stmdapl	sl, {r5, r8, r9}
    19b0:	03323025 	teqeq	r2, #37	; 0x25
    19b4:	32242e78 	eorcc	r2, r4, #1920	; 0x780
				Buzzed(50, 2000);
    19b8:	32223522 	eorcc	r3, r2, #142606336	; 0x8800000
    19bc:	242e7803 	strtcs	r7, [lr], #-2051
				HeightSpeedMode = (HeightSpeedMode + 1) & 0x3; // wrap around mode
    19c0:	41232232 	teqmi	r3, r2, lsr r2
    19c4:	7803323e 	stmdavc	r3, {r1, r2, r3, r4, r5, r9, ip, sp}
    19c8:	2232242e 	eorscs	r2, r2, #771751936	; 0x2e000000
    19cc:	32305d31 	eorscc	r5, r0, #3136	; 0xc40
				DoubleTravelOn = HeightSpeedMode & 0x1;
    19d0:	242e7803 	strtcs	r7, [lr], #-2051
    19d4:	30362232 	eorscc	r2, r6, r2, lsr r2
				if (HeightSpeedMode & 0x2)
    19d8:	2e780332 	mrccs	3, 3, r0, cr8, cr2, {1}
    19dc:	22223224 	eorcs	r3, r2, #1073741826	; 0x40000002
					g_InControlState.LegLiftHeight = 80;
    19e0:	172e0d03 	strne	r0, [lr, -r3, lsl #26]!
    19e4:	034c4f23 	movteq	r4, #53027	; 0xcf23
				else
					g_InControlState.LegLiftHeight = 50;
			}

			// Switch between Walk method 1 && Walk method 2
			if ((buttons & BUT_R2) && !(buttonsPrev & BUT_R2)) {
    19e8:	2f17200a 	svccs	0x0017200a
    19ec:	142e0903 	strtne	r0, [lr], #-2307
    19f0:	4a0e032f 	bmi	3826b4 <__Stack_Size+0x3822b4>
    19f4:	4c4f2317 	mcrrmi	3, 1, r2, pc, cr7
    19f8:	17200e03 	strne	r0, [r0, -r3, lsl #28]!

				if ((++bJoystickWalkMode) > 1)
    19fc:	034c4f23 	movteq	r4, #53027	; 0xcf23
    1a00:	221a2029 	andscs	r2, sl, #41	; 0x29
    1a04:	03212230 	teqeq	r1, #3	; 0x3

					bJoystickWalkMode = 0;
				Buzzed(50, 2000 + bJoystickWalkMode * 250);
    1a08:	2317200e 	tstcs	r7, #14	; 0xe
			// Switch between Walk method 1 && Walk method 2
			if ((buttons & BUT_R2) && !(buttonsPrev & BUT_R2)) {

				if ((++bJoystickWalkMode) > 1)

					bJoystickWalkMode = 0;
    1a0c:	0e034c4f 	cdpeq	12, 0, cr4, cr3, cr15, {2}
				Buzzed(50, 2000 + bJoystickWalkMode * 250);
    1a10:	50241720 	eorpl	r1, r4, r0, lsr #14
    1a14:	200a034c 	andcs	r0, sl, ip, asr #6
    1a18:	4a0d0319 	bmi	342684 <__Stack_Size+0x342284>
    1a1c:	032e2c03 	teqeq	lr, #768	; 0x300
			}

			//Walking
			switch (bJoystickWalkMode) {
    1a20:	7603010a 	strvc	r0, [r3], -sl, lsl #2
    1a24:	0a032020 	beq	c9aac <__Stack_Size+0xc96ac>
    1a28:	32302558 	eorscc	r2, r0, #369098752	; 0x16000000
			case 0:
				g_InControlState.TravelLength.x = -lx;
    1a2c:	242e7803 	strtcs	r7, [lr], #-2051
    1a30:	22352232 	eorscs	r2, r5, #536870915	; 0x20000003
    1a34:	2e780332 	mrccs	3, 3, r0, cr8, cr2, {1}
				g_InControlState.TravelLength.z = -ly;
    1a38:	25223224 	strcs	r3, [r2, #-548]!
				g_InControlState.TravelLength.y = -(rightH) / 4; //Right Stick Left/Right
				break;
			case 1:
				g_InControlState.TravelLength.z = (rightV); //Right Stick Up/Down
    1a3c:	24921e26 	ldrcs	r1, [r2], #3622
    1a40:	2122322a 	teqcs	r2, sl, lsr #4
    1a44:	032e0c03 	teqeq	lr, #768	; 0x300
				g_InControlState.TravelLength.y = -(rightH) / 4; //Right Stick Left/Right
    1a48:	1d250109 	stfnes	f0, [r5, #-36]!
    1a4c:	03213031 	teqeq	r1, #49	; 0x31
    1a50:	21272013 	teqcs	r7, r3, lsl r0
    1a54:	202e1003 	eorcs	r1, lr, r3
    1a58:	1b033d26 	blne	d0ef8 <__Stack_Size+0xd0af8>
    1a5c:	4c221a3c 	stcmi	10, cr1, [r2], #-240
				break;

			}

			if (!DoubleTravelOn) {  //(Double travel length)
    1a60:	0f032122 	svceq	0x00032122
				g_InControlState.TravelLength.x =
    1a64:	21221920 	teqcs	r2, r0, lsr #18
    1a68:	1a2e1f03 	bne	b8967c <__Stack_Size+0xb8927c>
    1a6c:	21223022 	teqcs	r2, r2, lsr #32
						g_InControlState.TravelLength.x / 2;
				g_InControlState.TravelLength.z =
    1a70:	16200b03 	strtne	r0, [r0], -r3, lsl #22
    1a74:	035a5d23 	cmpeq	sl, #2240	; 0x8c0
    1a78:	031a3c11 	tsteq	sl, #4352	; 0x1100
			}

		}

		//[Translate functions]
		g_BodyYShift = 0;
    1a7c:	1103580d 	tstne	r3, sp, lsl #16
    1a80:	033d1820 	teqeq	sp, #2097152	; 0x200000
		if (ControlMode == TRANSLATEMODE) {
    1a84:	0c03200f 	stceq	0, cr2, [r3], {15}
    1a88:	0d032301 	stceq	3, cr2, [r3, #-4]

		      g_InControlState.BodyPos.x =  SmoothControl(((lx)*2/3), g_InControlState.BodyPos.x, SmDiv);
    1a8c:	2e0f03ac 	cdpcs	3, 0, cr0, cr15, cr12, {5}
    1a90:	3d010b03 	vstrcc	d0, [r1, #-12]
    1a94:	20768b03 	rsbscs	r8, r6, r3, lsl #22
    1a98:	1c241c24 	stcne	12, cr1, [r4], #-144
    1a9c:	415a9424 	cmpmi	sl, r4, lsr #8
    1aa0:	5e5a415a 	mrcpl	1, 2, r4, cr10, cr10, {2}
    1aa4:	01000402 	tsteq	r0, r2, lsl #8
    1aa8:	00021f01 	andeq	r1, r2, r1, lsl #30
		      g_InControlState.BodyPos.z =  SmoothControl(((ly)*2/3), g_InControlState.BodyPos.z, SmDiv);
    1aac:	88000200 	stmdahi	r0, {r9}
    1ab0:	02000000 	andeq	r0, r0, #0	; 0x0
    1ab4:	0d0efb01 	vstreq	d15, [lr, #-4]
    1ab8:	01010100 	tsteq	r1, r0, lsl #2
    1abc:	00000001 	andeq	r0, r0, r1
		      g_InControlState.BodyRot1.y = SmoothControl(((rightH)*2), g_InControlState.BodyRot1.y, SmDiv);
    1ac0:	01000001 	tsteq	r0, r1
		//[Translate functions]
		g_BodyYShift = 0;
		if (ControlMode == TRANSLATEMODE) {

		      g_InControlState.BodyPos.x =  SmoothControl(((lx)*2/3), g_InControlState.BodyPos.x, SmDiv);
		      g_InControlState.BodyPos.z =  SmoothControl(((ly)*2/3), g_InControlState.BodyPos.z, SmDiv);
    1ac4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
		      g_InControlState.BodyRot1.y = SmoothControl(((rightH)*2), g_InControlState.BodyRot1.y, SmDiv);
    1ac8:	30316632 	eorscc	r6, r1, r2, lsr r6
    1acc:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1ad0:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    1ad4:	74730063 	ldrbtvc	r0, [r3], #-99


			//      g_InControlState.BodyPos.x = (lx)/2;
			//      g_InControlState.BodyPos.z = -(ly)/3;
			//      g_InControlState.BodyRot1.y = (rightH)*2;
			g_BodyYShift = (-(rightV) / 2);
    1ad8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1adc:	5f783031 	svcpl	0x00783031
    1ae0:	2f62696c 	svccs	0x0062696c
    1ae4:	00636e69 	rsbeq	r6, r3, r9, ror #28
    1ae8:	6d747300 	ldclvs	3, cr7, [r4]
    1aec:	31663233 	cmncc	r6, r3, lsr r2
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
    1af0:	665f7830 	undefined
			g_InControlState.BodyRot1.x = (ly);
			g_InControlState.BodyRot1.y = (rightH) * 2;
    1af4:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
    1af8:	0100632e 	tsteq	r0, lr, lsr #6
			g_InControlState.BodyRot1.z = (lx);
			g_BodyYShift = (-(rightV) / 2);
    1afc:	74730000 	ldrbtvc	r0, [r3]
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
			g_InControlState.BodyRot1.x = (ly);
			g_InControlState.BodyRot1.y = (rightH) * 2;
    1b00:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
			g_BodyYShift = (-(rightV) / 2);
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
			g_InControlState.BodyRot1.x = (ly);
    1b04:	5f783031 	svcpl	0x00783031
			g_InControlState.BodyRot1.y = (rightH) * 2;
			g_InControlState.BodyRot1.z = (lx);
			g_BodyYShift = (-(rightV) / 2);
    1b08:	65707974 	ldrbvs	r7, [r0, #-2420]!
    1b0c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1b10:	74730000 	ldrbtvc	r0, [r3]
    1b14:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1b18:	5f783031 	svcpl	0x00783031
		}

		//[Single leg functions]
#ifdef OPT_SINGLELEG
		if (ControlMode == SINGLELEGMODE) {
    1b1c:	2e70616d 	rpwcssz	f6, f0, #5.0

			//Switch leg for single leg control
			if ((buttons & BUT_R1) && !(buttonsPrev & BUT_R1)) {
    1b20:	00020068 	andeq	r0, r2, r8, rrx
    1b24:	6d747300 	ldclvs	3, cr7, [r4]
    1b28:	31663233 	cmncc	r6, r3, lsr r2
    1b2c:	665f7830 	undefined
    1b30:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
				Buzzed(50,2000);
    1b34:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1b38:	00000000 	andeq	r0, r0, r0
    1b3c:	569c0205 	ldrpl	r0, [ip], r5, lsl #4
				if (g_InControlState.SelectedLeg < (CNT_LEGS-1)) {
    1b40:	d6030800 	strle	r0, [r3], -r0, lsl #16
    1b44:	59170100 	ldmdbpl	r7, {r8}
					g_InControlState.SelectedLeg = g_InControlState.SelectedLeg + 1;
				} else {
					g_InControlState.SelectedLeg = 0;
    1b48:	4a0d033d 	bmi	342844 <__Stack_Size+0x342444>
		if (ControlMode == SINGLELEGMODE) {

			//Switch leg for single leg control
			if ((buttons & BUT_R1) && !(buttonsPrev & BUT_R1)) {
				Buzzed(50,2000);
				if (g_InControlState.SelectedLeg < (CNT_LEGS-1)) {
    1b4c:	033d5917 	teqeq	sp, #376832	; 0x5c000
					g_InControlState.SelectedLeg = g_InControlState.SelectedLeg + 1;
    1b50:	59174a0d 	ldmdbpl	r7, {r0, r2, r3, r9, fp, lr}
			   g_InControlState.SLLeg.x= (signed char)((int)((int)lx+128)/2); //Left Stick Right/Left
      		   g_InControlState.SLLeg.y= (signed char)((int)((int)rightV+128)/10); //Right Stick Up/Down
		       g_InControlState.SLLeg.z = (signed char)((int)((int)ly+128)/2); //Left Stick Up/Down

#else
			g_InControlState.SLLeg.x = lx; //Left Stick Right/Left
    1b54:	4a0b033d 	bmi	2c2850 <__Stack_Size+0x2c2450>
			g_InControlState.SLLeg.y = rightV / 3 - 20;//Right Stick Up/Down
    1b58:	033d3d14 	teqeq	sp, #1280	; 0x500
    1b5c:	5914660a 	ldmdbpl	r4, {r1, r3, r9, sl, sp, lr}
    1b60:	3c03f503 	cfstr32cc	mvfx15, [r3], {3}
    1b64:	0a033d14 	beq	d0fbc <__Stack_Size+0xd0bbc>
    1b68:	032f143c 	teqeq	pc, #1006632960	; 0x3c000000
			g_InControlState.SLLeg.z = ly;//Left Stick Up/Down

#endif
			// Hold single leg in place
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    1b6c:	03154a0b 	tsteq	r5, #45056	; 0xb000
    1b70:	0a035809 	beq	d7b9c <__Stack_Size+0xd779c>
    1b74:	0a03153c 	beq	c706c <__Stack_Size+0xc6c6c>
      		   g_InControlState.SLLeg.y= (signed char)((int)((int)rightV+128)/10); //Right Stick Up/Down
		       g_InControlState.SLLeg.z = (signed char)((int)((int)ly+128)/2); //Left Stick Up/Down

#else
			g_InControlState.SLLeg.x = lx; //Left Stick Right/Left
			g_InControlState.SLLeg.y = rightV / 3 - 20;//Right Stick Up/Down
    1b78:	3c0e0358 	stccc	3, cr0, [lr], {88}
			g_InControlState.SLLeg.z = ly;//Left Stick Up/Down

#endif
			// Hold single leg in place
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    1b7c:	5a5d2317 	bpl	174a7e0 <__Stack_Size+0x174a3e0>
    1b80:	183c1003 	ldmdane	ip!, {r0, r1, ip}
    1b84:	580b0330 	stmdapl	fp, {r4, r5, r8, r9}
				Buzzed(50,2000);
    1b88:	03660b03 	cmneq	r6, #3072	; 0xc00
    1b8c:	2f173c0f 	svccs	0x00173c0f
				g_InControlState.fSLHold = !g_InControlState.fSLHold;
    1b90:	154a0b03 	strbne	r0, [sl, #-2819]
    1b94:	0c036c7a 	stceq	12, cr6, [r3], {122}
    1b98:	3c0c0366 	stccc	3, cr0, [ip], {102}
    1b9c:	03205c03 	teqeq	r0, #768	; 0x300
			}
		}
#endif

		//Calculate walking time delay
		g_InControlState.InputTimeDelay = 128- max(max(abs(lx), abs(ly)), abs(rightH));
    1ba0:	5c032024 	stcpl	0, cr2, [r3], {36}
    1ba4:	20240320 	eorcs	r0, r4, r0, lsr #6
    1ba8:	5e205c03 	cdppl	12, 2, cr5, cr0, cr3, {0}
    1bac:	7438036c 	ldrtvc	r0, [r8], #-876
    1bb0:	7fba0322 	svcvc	0x00ba0322
    1bb4:	036c6c90 	cmneq	ip, #36864	; 0x9000
    1bb8:	51036623 	tstpl	r3, r3, lsr #12
    1bbc:	00c4032e 	sbceq	r0, r4, lr, lsr #6
    1bc0:	65032220 	strvs	r2, [r3, #-544]
    1bc4:	0343a52e 	movteq	sl, #13614	; 0x352e
    1bc8:	034a7def 	movteq	r7, #44527	; 0xadef
    1bcc:	77032009 	strvc	r2, [r3, -r9]
    1bd0:	2009032e 	andcs	r0, r9, lr, lsr #6

		//Calculate g_InControlState.BodyPos.y
		g_InControlState.BodyPos.y = max(g_BodyYOffset + g_BodyYShift, 0);
    1bd4:	2e760321 	cdpcs	3, 7, cr0, cr6, cr1, {1}
    1bd8:	23200a03 	teqcs	r0, #12288	; 0x3000
    1bdc:	03207303 	teqeq	r0, #201326592	; 0xc000000
    1be0:	31302e0d 	teqcc	r0, sp, lsl #28
    1be4:	773e1e22 	ldrvc	r1, [lr, -r2, lsr #28]!
    1be8:	036b233e 	cmneq	fp, #-134217728	; 0xf8000000

		if (sLegInitXZAdjust || sLegInitAngleAdjust) {
    1bec:	42827f8e 	addmi	r7, r2, #568	; 0x238
    1bf0:	0335314c 	teqeq	r5, #19	; 0x13
			// User asked for manual leg adjustment - only do when we have finished any previous adjustment

			if (!g_InControlState.ForceGaitStepCnt) {
    1bf4:	3e212e79 	mcrcc	14, 1, r2, cr1, cr9, {3}
				if (sLegInitXZAdjust)
    1bf8:	4d3d1c24 	ldcmi	12, cr1, [sp, #-144]!
					g_fDynamicLegXZLength = true;
    1bfc:	4c693130 	stfmie	f3, [r9], #-192
    1c00:	4c4e4e22 	mcrrmi	14, 2, r4, lr, cr2

				sLegInitXZAdjust += GetLegsXZLength(); // Add on current length to our adjustment...
    1c04:	6c238731 	stcvs	7, cr8, [r3], #-196
    1c08:	827ef803 	rsbshi	pc, lr, #196608	; 0x30000
				// Handle maybe change angles...
				if (sLegInitAngleAdjust)
					RotateLegInitAngles(sLegInitAngleAdjust);

				// Give system time to process previous calls
				AdjustLegPositions(sLegInitXZAdjust);
    1c0c:	200f0320 	andcs	r0, pc, r0, lsr #6
			}
		}

		if (fAdjustLegPositions && !g_fDynamicLegXZLength)
    1c10:	7403313e 	strvc	r3, [r3], #-318
    1c14:	2e0c032e 	cdpcs	3, 0, cr0, cr12, cr14, {1}
    1c18:	73033d21 	movwvc	r3, #15649	; 0x3d21
			AdjustLegPositionsToBodyHeight(); // Put main workings into main program file
    1c1c:	200d0320 	andcs	r0, sp, r0, lsr #6
		// Save away the buttons state as to not process the same press twice.
		buttonsPrev = buttons;
    1c20:	22221e30 	eorcs	r1, r2, #768	; 0x300
    1c24:	03231d23 	teqeq	r3, #2240	; 0x8c0
		extPrev = ext;
    1c28:	15032e6d 	strne	r2, [r3, #-3693]
    1c2c:	1d23a03c 	stcne	0, cr10, [r3, #-240]!
		g_ulLastMsgTime = getMillis();
    1c30:	2e670323 	cdpcs	3, 6, cr0, cr7, cr3, {1}
    1c34:	a03c1c03 	eorsge	r1, ip, r3, lsl #24
	} else {
		// We did not receive a valid packet.  check for a timeout to see if we should turn robot off...
		if (g_InControlState.fRobotOn) {
    1c38:	03231d23 	teqeq	r3, #2240	; 0x8c0
			if ((getMillis() - g_ulLastMsgTime) > ARBOTIX_TO)
    1c3c:	23032e60 	movwcs	r2, #15968	; 0x3e60
    1c40:	1d23a020 	stcne	0, cr10, [r3, #-128]!
    1c44:	87233123 	strhi	r3, [r3, -r3, lsr #2]!
    1c48:	827f9003 	rsbshi	r9, pc, #3	; 0x3
    1c4c:	7a032620 	bvc	cb4d4 <__Stack_Size+0xcb0d4>
				CommanderTurnRobotOff();
    1c50:	31302620 	teqcc	r0, r0, lsr #12
		}
	}

}
    1c54:	20780336 	rsbscs	r0, r8, r6, lsr r3
    1c58:	234b3f21 	movtcs	r3, #48929	; 0xbf21
    1c5c:	036b2330 	cmneq	fp, #-1073741824	; 0xc0000000
    1c60:	20587fbb 	ldrhcs	r7, [r8], #-251
    1c64:	20790327 	rsbscs	r0, r9, r7, lsr #6
    1c68:	24313027 	ldrtcs	r3, [r1], #-39
    1c6c:	30224c1c 	eorcc	r4, r2, ip, lsl ip
    1c70:	ab036b23 	blge	dc904 <__Stack_Size+0xdc504>
    1c74:	27204a7f 	undefined
    1c78:	27207903 	strcs	r7, [r0, -r3, lsl #18]!
    1c7c:	1b253230 	blne	94e544 <__Stack_Size+0x94e144>
    1c80:	3230314c 	eorscc	r3, r0, #19	; 0x13
    1c84:	3c0a0331 	stccc	3, cr0, [sl], {49}
    1c88:	93036c23 	movwls	r6, #15395	; 0x3c23
    1c8c:	4c244a7f 	stcmi	10, cr4, [r4], #-508
    1c90:	78033631 	stmdavc	r3, {r0, r4, r5, r9, sl, ip, sp}
    1c94:	243f212e 	ldrtcs	r2, [pc], #302	; 1c9c <__Stack_Size+0x189c>
    1c98:	304d3d1c 	subcc	r3, sp, ip, lsl sp
    1c9c:	2b236931 	blcs	8dc168 <__Stack_Size+0x8dbd68>
    1ca0:	231d233f 	tstcs	sp, #-67108864	; 0xfc000000
    1ca4:	232e0a03 	teqcs	lr, #12288	; 0x3000
    1ca8:	7fab036c 	svcvc	0x00ab036c
    1cac:	314c2482 	smlalbbcc	r2, ip, r2, r4

extern void setupPhoenix(void);
extern void readSensors(void);


int Big_main(void) {
    1cb0:	3f2b234b 	svccc	0x002b234b

	// Must include this line in all programs using "cm530.h/.c"
	SysInit();
    1cb4:	036b233e 	cmneq	fp, #-134217728	; 0xf8000000
	setupPhoenix();
    1cb8:	4c433c42 	mcrrmi	12, 4, r3, r3, cr2
			TotalYBal1 = 0;
			TotalZBal1 = 0;

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1cbc:	25292531 	strcs	r2, [r9, #-1329]!

	while (1){
		while (1) {
			//Start time
			unsigned long lTimeWaitEnd;
			lTimerStart = getMillis();
    1cc0:	4d213d1b 	stcmi	13, cr3, [r1, #-108]!
    1cc4:	026b2330 	rsbeq	r2, fp, #-1073741824	; 0xc0000000
    1cc8:	01010005 	tsteq	r1, r5
#ifdef MILLIS
			PrintString("Barebones lTimerStart ");
			Printu32d(lTimerStart);
			PrintString("\n");
#endif
			DoBackgroundProcess();
    1ccc:	00000174 	andeq	r0, r0, r4, ror r1
			//Read input
			CheckVoltage();        // check our voltages...
    1cd0:	00860002 	addeq	r0, r6, r2
			if (!g_fLowVoltageShutdown) {
    1cd4:	01020000 	tsteq	r2, r0
    1cd8:	000d0efb 	strdeq	r0, [sp], -fp
				CommanderInputController_ControlInput();
    1cdc:	01010101 	tsteq	r1, r1, lsl #2
			}
			WriteOutputs();        // Write Outputs
			//Single leg control
			SingleLegControl();
    1ce0:	01000000 	tsteq	r0, r0
			DoBackgroundProcess();
    1ce4:	73010000 	movwvc	r0, #4096	; 0x1000

			//Gait
			GaitSeq();
    1ce8:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00

			DoBackgroundProcess();
    1cec:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}

			//Balance calculations
			TotalTransX = 0;     //reset values used for calculation of balance
    1cf0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1cf4:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
			TotalTransZ = 0;
    1cf8:	6d747300 	ldclvs	3, cr7, [r4]
			TotalTransY = 0;
    1cfc:	31663233 	cmncc	r6, r3, lsr r2
    1d00:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
			TotalXBal1 = 0;
    1d04:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
			TotalYBal1 = 0;
    1d08:	0000636e 	andeq	r6, r0, lr, ror #6
    1d0c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
			TotalZBal1 = 0;
    1d10:	30316632 	eorscc	r6, r1, r2, lsr r6

			if (g_InControlState.BalanceMode) {
    1d14:	70675f78 	rsbvc	r5, r7, r8, ror pc
    1d18:	632e6f69 	teqvs	lr, #420	; 0x1a4
    1d1c:	00000100 	andeq	r0, r0, r0, lsl #2

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1d20:	336d7473 	cmncc	sp, #1929379840	; 0x73000000

					DoBackgroundProcess();
					BalCalcOneLeg(-LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d24:	30316632 	eorscc	r6, r1, r2, lsr r6
    1d28:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1d2c:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs

					DoBackgroundProcess();
    1d30:	00000200 	andeq	r0, r0, r0, lsl #4
					BalCalcOneLeg(-LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d34:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1d38:	30316632 	eorscc	r6, r1, r2, lsr r6
    1d3c:	616d5f78 	smcvs	54776
    1d40:	00682e70 	rsbeq	r2, r8, r0, ror lr
    1d44:	73000002 	movwvc	r0, #2	; 0x2
    1d48:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    1d4c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1d50:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
    1d54:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    1d58:	00000002 	andeq	r0, r0, r2
    1d5c:	c4020500 	strgt	r0, [r2], #-1280
    1d60:	0308005b 	movweq	r0, #32859	; 0x805b
    1d64:	030100fc 	movweq	r0, #4348	; 0x10fc
    1d68:	0c03200a 	stceq	0, cr2, [r3], {10}
    1d6c:	20760320 	rsbscs	r0, r6, r0, lsr #6
			TotalYBal1 = 0;
			TotalZBal1 = 0;

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1d70:	2e790333 	mrccs	3, 3, r0, cr9, cr3, {1}
    1d74:	6a033335 	bvs	cea50 <__Stack_Size+0xce650>
    1d78:	2016032e 	andscs	r0, r6, lr, lsr #6
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
    1d7c:	303e3222 	eorscc	r3, lr, r2, lsr #4
    1d80:	2b312132 	blcs	c4a250 <__Stack_Size+0xc49e50>
					DoBackgroundProcess();
					BalCalcOneLeg(LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d84:	7a032331 	bvc	caa50 <__Stack_Size+0xca650>
    1d88:	273a2820 	ldrcs	r2, [sl, -r0, lsr #16]!
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
					DoBackgroundProcess();
    1d8c:	3c660322 	stclcc	3, cr0, [r6], #-136
					BalCalcOneLeg(LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d90:	253c1f03 	ldrcs	r1, [ip, #-3843]!
    1d94:	2f5a3130 	svccs	0x005a3130
    1d98:	2b312132 	blcs	c4a268 <__Stack_Size+0xc49e68>
    1d9c:	7a032331 	bvc	caa68 <__Stack_Size+0xca668>
    1da0:	253a2820 	ldrcs	r2, [sl, #-2080]!
    1da4:	3c690322 	stclcc	3, cr0, [r9], #-136
    1da8:	223c1b03 	eorscs	r1, ip, #3072	; 0xc00
    1dac:	143c0b03 	ldrtne	r0, [ip], #-2819
    1db0:	032f2f3d 	teqeq	pc, #244	; 0xf4
    1db4:	0319200c 	tsteq	r9, #12	; 0xc
    1db8:	0a035809 	beq	d7de4 <__Stack_Size+0xd79e4>
    1dbc:	032f1620 	teqeq	pc, #33554432	; 0x2000000
    1dc0:	03192e0c 	tsteq	r9, #192	; 0xc0
    1dc4:	0a035809 	beq	d7df0 <__Stack_Size+0xd79f0>
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
    1dc8:	032f1620 	teqeq	pc, #33554432	; 0x2000000
    1dcc:	21172e0d 	tstcs	r7, sp, lsl #28
    1dd0:	17200d03 	strne	r0, [r0, -r3, lsl #26]!
							LegPosZ[LegIndex] + GaitPosZ[LegIndex],
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}
				BalanceBody();
    1dd4:	20100321 	andscs	r0, r0, r1, lsr #6
			}

			//Reset IKsolution indicators
			IKSolution = 0;
    1dd8:	22322218 	eorscs	r2, r2, #-2147483647	; 0x80000001
    1ddc:	162e0c03 	strtne	r0, [lr], -r3, lsl #24
			IKSolutionWarning = 0;
			IKSolutionError = 0;

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
    1de0:	200d0321 	andcs	r0, sp, r1, lsr #6
			}

			//Reset IKsolution indicators
			IKSolution = 0;
			IKSolutionWarning = 0;
			IKSolutionError = 0;
    1de4:	22223019 	eorcs	r3, r2, #25	; 0x19
    1de8:	03212222 	teqeq	r1, #536870914	; 0x20000002

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
				DoBackgroundProcess();
    1dec:	3019200f 	andscc	r2, r9, pc
				BodyFK(
    1df0:	302d312c 	eorcc	r3, sp, ip, lsr #2
    1df4:	0b032f22 	bleq	cda84 <__Stack_Size+0xcd684>
    1df8:	032f163c 	teqeq	pc, #62914560	; 0x3c00000
    1dfc:	0c034a26 	stceq	10, cr4, [r3], {38}
    1e00:	76032c20 	strvc	r2, [r3], -r0, lsr #24
    1e04:	22232720 	eorcs	r2, r3, #8388608	; 0x800000
    1e08:	1f233329 	svcne	0x00233329
    1e0c:	6b3f4c2f 	blvs	fd4ed0 <__Stack_Size+0xfd4ad0>
    1e10:	5b223167 	blpl	88e3b4 <__Stack_Size+0x88dfb4>
    1e14:	4a0f032f 	bmi	3c2ad8 <__Stack_Size+0x3c26d8>
    1e18:	1f2f3e27 	svcne	0x002f3e27
    1e1c:	a703599f 	undefined
    1e20:	2d214a7c 	fstmdbscs	r1!, {s8-s131}
    1e24:	034b2f21 	movteq	r2, #48929	; 0xbf21
    1e28:	1c242e45 	stcne	14, cr2, [r4], #-276
    1e2c:	08241c24 	stmdaeq	r4!, {r2, r5, sl, fp, ip}
    1e30:	4b324ba1 	blmi	c94cbc <__Stack_Size+0xc948bc>
    1e34:	4b324b32 	blmi	c94b04 <__Stack_Size+0xc94704>
    1e38:	4b324b32 	blmi	c94b08 <__Stack_Size+0xc94708>
    1e3c:	025e5932 	subseq	r5, lr, #819200	; 0xc8000
    1e40:	01010006 	tsteq	r1, r6
    1e44:	000001a6 	andeq	r0, r0, r6, lsr #3
    1e48:	00860002 	addeq	r0, r6, r2
    1e4c:	01020000 	tsteq	r2, r0
						+ GaitPosZ[LegIndex] - TotalTransZ,
						LegPosY[LegIndex] + g_InControlState.BodyPos.y
						+ GaitPosY[LegIndex] - TotalTransY,
						GaitRotY[LegIndex], LegIndex);

				LegIK(
    1e50:	000d0efb 	strdeq	r0, [sp], -fp
    1e54:	01010101 	tsteq	r1, r1, lsl #2
    1e58:	01000000 	tsteq	r0, r0
    1e5c:	73010000 	movwvc	r0, #4096	; 0x1000
    1e60:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    1e64:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1e68:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1e6c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1e70:	6d747300 	ldclvs	3, cr7, [r4]
    1e74:	31663233 	cmncc	r6, r3, lsr r2
    1e78:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    1e7c:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
    1e80:	0000636e 	andeq	r6, r0, lr, ror #6
    1e84:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1e88:	30316632 	eorscc	r6, r1, r2, lsr r6
    1e8c:	766e5f78 	uqsub16vc	r5, lr, r8
    1e90:	632e6369 	teqvs	lr, #-1543503871	; 0xa4000001
    1e94:	00000100 	andeq	r0, r0, r0, lsl #2
    1e98:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1e9c:	30316632 	eorscc	r6, r1, r2, lsr r6
    1ea0:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1ea4:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    1ea8:	00000200 	andeq	r0, r0, r0, lsl #4
    1eac:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1eb0:	30316632 	eorscc	r6, r1, r2, lsr r6
    1eb4:	616d5f78 	smcvs	54776
    1eb8:	00682e70 	rsbeq	r2, r8, r0, ror lr
    1ebc:	73000002 	movwvc	r0, #2	; 0x2
    1ec0:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
			IKSolutionWarning = 0;
			IKSolutionError = 0;

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
    1ec4:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1ec8:	69766e5f 	ldmdbvs	r6!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
    1ecc:	00682e63 	rsbeq	r2, r8, r3, ror #28
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Do IK for all Left legs
			for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) {
    1ed0:	00000002 	andeq	r0, r0, r2
    1ed4:	4c020500 	cfstr32mi	mvfx0, [r2], {0}
				DoBackgroundProcess();
    1ed8:	0308005e 	movweq	r0, #32862	; 0x805e
				BodyFK(
    1edc:	3d150124 	ldfccs	f0, [r5, #-144]
    1ee0:	7a03352d 	bvc	cf39c <__Stack_Size+0xcef9c>
    1ee4:	322f2f20 	eorcc	r2, pc, #128	; 0x80
    1ee8:	302c241c 	eorcc	r2, ip, ip, lsl r4
    1eec:	0b03242c 	bleq	cafa4 <__Stack_Size+0xcaba4>
    1ef0:	1e3e153c 	mrcne	5, 1, r1, cr14, cr12, {1}
    1ef4:	21212f21 	teqcs	r1, r1, lsr #30
    1ef8:	2f213e23 	svccs	0x00213e23
    1efc:	16032121 	strne	r2, [r3], -r1, lsr #2
    1f00:	03671766 	cmneq	r7, #26738688	; 0x1980000
    1f04:	0a034a0d 	beq	d4740 <__Stack_Size+0xd4340>
    1f08:	1c243f20 	stcne	15, cr3, [r4], #-128
    1f0c:	03200a03 	teqeq	r0, #12288	; 0x3000
    1f10:	3d5c2076 	ldclcc	0, cr2, [ip, #-472]
    1f14:	1f312b3f 	svcne	0x00312b3f
    1f18:	6a222b24 	bvs	88cbb0 <__Stack_Size+0x88c7b0>
    1f1c:	3122301e 	teqcc	r2, lr, lsl r0
    1f20:	0b039388 	bleq	e6d48 <__Stack_Size+0xe6948>
    1f24:	212f1458 	teqcs	pc, r8, asr r4
    1f28:	d7032121 	strle	r2, [r3, -r1, lsr #2]
    1f2c:	67132000 	ldrvs	r2, [r3, -r0]
    1f30:	19660b03 	stmdbne	r6!, {r0, r1, r8, r9, fp}^
    1f34:	9e09034c 	cdpls	3, 0, cr0, cr9, cr12, {2}
    1f38:	164a0a03 	strbne	r0, [sl], -r3, lsl #20
    1f3c:	4a0a032f 	bmi	282c00 <__Stack_Size+0x282800>
    1f40:	0b039116 	bleq	e63a0 <__Stack_Size+0xe5fa0>
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z
						+ GaitPosZ[LegIndex] - TotalTransZ,
						LegPosY[LegIndex] + g_InControlState.BodyPos.y
						+ GaitPosY[LegIndex] - TotalTransY,
						GaitRotY[LegIndex], LegIndex);
				LegIK(
    1f44:	034b133c 	movteq	r1, #45884	; 0xb33c
    1f48:	4c194a0b 	ldcmi	10, cr4, [r9], {11}
    1f4c:	039e0903 	orrseq	r0, lr, #49152	; 0xc000
    1f50:	2f134a0b 	svccs	0x00134a0b
    1f54:	174a1003 	strbne	r1, [sl, -r3]
    1f58:	3c0a0375 	stccc	3, cr0, [sl], {117}
    1f5c:	0a033d13 	beq	d13b0 <__Stack_Size+0xd0fb0>
    1f60:	033d1358 	teqeq	sp, #1610612737	; 0x60000001
    1f64:	22175811 	andscs	r5, r7, #1114112	; 0x110000
    1f68:	11035a5c 	tstne	r3, ip, asr sl
    1f6c:	225a193c 	subscs	r1, sl, #983040	; 0xf0000
    1f70:	18035a5c 	stmdane	r3, {r2, r3, r4, r6, r9, fp, ip, lr}
    1f74:	2009034a 	andcs	r0, r9, sl, asr #6
    1f78:	31694b78 	smccc	38072
    1f7c:	2e79033f 	mrccs	3, 3, r0, cr9, cr15, {1}
    1f80:	207a0328 	rsbscs	r0, sl, r8, lsr #6
    1f84:	03597525 	cmpeq	r9, #155189248	; 0x9400000
    1f88:	23194a10 	tstcs	r9, #65536	; 0x10000
    1f8c:	820b034c 	andhi	r0, fp, #805306369	; 0x30000001
    1f90:	033c0f03 	teqeq	ip, #12	; 0xc
    1f94:	03830109 	orreq	r0, r3, #1073741826	; 0x40000002
    1f98:	09034a0e 	stmdbeq	r3, {r1, r2, r3, r9, fp, lr}
    1f9c:	14039101 	strne	r9, [r3], #-257
    1fa0:	010a033c 	tsteq	sl, ip, lsr r3
    1fa4:	820b035a 	andhi	r0, fp, #1744830465	; 0x68000001
    1fa8:	193c1103 	ldmdbne	ip!, {r0, r1, r8, ip}
    1fac:	303e3e23 	eorscc	r3, lr, r3, lsr #28
    1fb0:	28587803 	ldmdacs	r8, {r0, r1, fp, ip, sp, lr}^
    1fb4:	36207803 	strtcc	r7, [r0], -r3, lsl #16
    1fb8:	4140224b 	cmpmi	r0, fp, asr #4
    1fbc:	3c0f0331 	stccc	3, cr0, [pc], {49}
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Do IK for all Left legs
			for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) {
    1fc0:	30010903 	andcc	r0, r1, r3, lsl #18
    1fc4:	23241c32 	teqcs	r4, #12800	; 0x3200
    1fc8:	3c7c8d03 	ldclcc	13, cr8, [ip], #-12
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Check mechanical limits
			CheckAngles();
    1fcc:	6f032f2f 	svcvs	0x00032f2f

			//Drive Servos
			if (g_InControlState.fRobotOn) {
    1fd0:	241c242e 	ldrcs	r2, [ip], #-1070
    1fd4:	3c6d032f 	stclcc	3, cr0, [sp], #-188
    1fd8:	72032f2f 	andvc	r2, r3, #188	; 0xbc
				if (g_InControlState.fRobotOn && !g_InControlState.fPrev_RobotOn) {
					// MSound(3, 60, 2000, 80, 2250, 100, 2500);
					Buzzed(30, 2000);
    1fdc:	032f2f2e 	teqeq	pc, #184	; 0xb8
    1fe0:	2f2f2e72 	svccs	0x002f2e72
    1fe4:	2f2e7203 	svccs	0x002e7203
					Buzzed(80, 2250);
    1fe8:	0002022f 	andeq	r0, r2, pc, lsr #4
    1fec:	00d20101 	sbcseq	r0, r2, r1, lsl #2
					Buzzed(100, 2500);
    1ff0:	00020000 	andeq	r0, r2, r0
    1ff4:	00000071 	andeq	r0, r0, r1, ror r0
    1ff8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}

				}

				//Calculate Servo Move time
				if ((abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
    1ffc:	0101000d 	tsteq	r1, sp
    2000:	00000101 	andeq	r0, r0, r1, lsl #2
    2004:	00000100 	andeq	r0, r0, r0, lsl #2
    2008:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
    200c:	31663233 	cmncc	r6, r3, lsr r2
    2010:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    2014:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    2018:	73006372 	movwvc	r6, #882	; 0x372
    201c:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    2020:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    2024:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
						|| (abs(g_InControlState.TravelLength.z) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.y*2) > cTravelDeadZone)) {
					ServoMoveTime = g_InControlState.gaitCur.NomGaitSpeed
    2028:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    202c:	74730000 	ldrbtvc	r0, [r3]
    2030:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2034:	5f783031 	svcpl	0x00783031
    2038:	2e727770 	mrccs	7, 3, r7, cr2, cr0, {3}
							+ (g_InControlState.InputTimeDelay * 2)
							+ g_InControlState.SpeedControl;

					//Add aditional delay when Balance mode is on
					if (g_InControlState.BalanceMode)
    203c:	00010063 	andeq	r0, r1, r3, rrx

				//Calculate Servo Move time
				if ((abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.z) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.y*2) > cTravelDeadZone)) {
					ServoMoveTime = g_InControlState.gaitCur.NomGaitSpeed
    2040:	6d747300 	ldclvs	3, cr7, [r4]
							+ (g_InControlState.InputTimeDelay * 2)
							+ g_InControlState.SpeedControl;

					//Add aditional delay when Balance mode is on
					if (g_InControlState.BalanceMode)
						ServoMoveTime = ServoMoveTime + BALANCE_DELAY;
    2044:	31663233 	cmncc	r6, r3, lsr r2
    2048:	745f7830 	ldrbvc	r7, [pc], #2096	; 2050 <__Stack_Size+0x1c50>
				} else
					//Movement speed excl. Walking
					ServoMoveTime = 200 + g_InControlState.SpeedControl;
    204c:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    2050:	00020068 	andeq	r0, r2, r8, rrx
    2054:	6d747300 	ldclvs	3, cr7, [r4]

				// note we broke up the servo driver into start/commit that way we can output all of the servo information
				// before we wait and only have the termination information to output after the wait.  That way we hopefully
				// be more accurate with our timings...
				DoBackgroundProcess();
    2058:	31663233 	cmncc	r6, r3, lsr r2
				StartUpdateServos();
    205c:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]

				// See if we need to sync our processor with the servo driver while walking to ensure the prev is completed
				//before sending the next one

				// Finding any incident of GaitPos/Rot <>0:
				for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    2060:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
					if ((GaitPosX[LegIndex] > cGPlimit)
    2064:	00000200 	andeq	r0, r0, r0, lsl #4
    2068:	02050000 	andeq	r0, r5, #0	; 0x0
    206c:	080061d0 	stmdaeq	r0, {r4, r6, r7, r8, sp, lr}
    2070:	0100d103 	tsteq	r0, r3, lsl #2
    2074:	0b032f16 	bleq	cdcd4 <__Stack_Size+0xcd8d4>
    2078:	032f164a 	teqeq	pc, #77594624	; 0x4a00000
    207c:	31184a14 	tstcc	r8, r4, lsl sl
    2080:	03212331 	teqeq	r1, #-1006632960	; 0xc4000000
    2084:	2f164a0b 	svccs	0x00164a0b
    2088:	4a00d803 	bmi	3809c <__Stack_Size+0x37c9c>
    208c:	660b0318 	undefined
    2090:	164a0d03 	strbne	r0, [sl], -r3, lsl #26
    2094:	3c430359 	mcrrcc	3, 5, r0, r3, cr9
    2098:	1e221e14 	mcrne	14, 1, r1, cr2, cr4, {0}
    209c:	934d3f22 	movtls	r3, #57122	; 0xdf22
							|| (GaitPosZ[LegIndex] > cGPlimit)
							|| (GaitPosZ[LegIndex] < -cGPlimit)
							|| (GaitRotY[LegIndex] > cGPlimit)
							|| (GaitRotY[LegIndex] < -cGPlimit)) {

						bExtraCycle = g_InControlState.gaitCur.NrLiftedPos + 1;	//For making sure that we are using timed move until all legs are down
    20a0:	4a49032f 	bmi	1242d64 <__Stack_Size+0x1242964>
    20a4:	2078031a 	rsbscs	r0, r8, sl, lsl r3
    20a8:	20780328 	rsbscs	r0, r8, r8, lsr #6

				// See if we need to sync our processor with the servo driver while walking to ensure the prev is completed
				//before sending the next one

				// Finding any incident of GaitPos/Rot <>0:
				for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    20ac:	31200b03 	teqcc	r0, r3, lsl #22
    20b0:	1d692323 	stclne	3, cr2, [r9, #-140]!

						bExtraCycle = g_InControlState.gaitCur.NrLiftedPos + 1;	//For making sure that we are using timed move until all legs are down
						break;
					}
				}
				if (bExtraCycle > 0) {
    20b4:	3041233f 	subcc	r2, r1, pc, lsr r3
					bExtraCycle--;
    20b8:	4a7ef503 	bmi	1fbf4cc <__Stack_Size+0x1fbf0cc>
    20bc:	024b6721 	subeq	r6, fp, #8650752	; 0x840000
					fWalking = !(bExtraCycle == 0);
    20c0:	01010001 	tsteq	r1, r1
    20c4:	000001b4 	strheq	r0, [r0], -r4

					//Get endtime and calculate wait time
					lTimeWaitEnd = lTimerStart + PrevServoMoveTime;
    20c8:	00840002 	addeq	r0, r4, r2
    20cc:	01020000 	tsteq	r2, r0
    20d0:	000d0efb 	strdeq	r0, [sp], -fp
					PrintString("\n");
#endif
					//DebugWrite(A1, HIGH);
					do {
						// Wait the appropriate time, call any background process while waiting...
						DoBackgroundProcess();
    20d4:	01010101 	tsteq	r1, r1, lsl #2
					} while (getMillis() < lTimeWaitEnd);
    20d8:	01000000 	tsteq	r0, r0
    20dc:	73010000 	movwvc	r0, #4096	; 0x1000
					PrintString("\n");
#endif

				}
				// Only do commit if we are actually doing something...
				CommitServoDriver(ServoMoveTime);
    20e0:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    20e4:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    20e8:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
			} else {
				//Turn the bot off - May need to add ajust here...
				if (g_InControlState.fPrev_RobotOn || (AllDown = 0)) {
    20ec:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
					PrintString("Barebones lTimeWaitEnd-Millis  ");
					Printu32d(getMillis);
					PrintString("\n");
#endif
				} else {
					FreeServos();
    20f0:	6d747300 	ldclvs	3, cr7, [r4]
    20f4:	31663233 	cmncc	r6, r3, lsr r2
				// Only do commit if we are actually doing something...
				CommitServoDriver(ServoMoveTime);
			} else {
				//Turn the bot off - May need to add ajust here...
				if (g_InControlState.fPrev_RobotOn || (AllDown = 0)) {
					ServoMoveTime = 600;
    20f8:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    20fc:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
					StartUpdateServos();
    2100:	0000636e 	andeq	r6, r0, lr, ror #6
					CommitServoDriver(ServoMoveTime);
    2104:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
					//MSound(3, 100, 2500, 80, 2250, 60, 2000);
					Buzzed(100, 2500);
    2108:	30316632 	eorscc	r6, r1, r2, lsr r6
    210c:	63725f78 	cmnvs	r2, #480	; 0x1e0
    2110:	00632e63 	rsbeq	r2, r3, r3, ror #28
					Buzzed(80, 2250);
    2114:	73000001 	movwvc	r0, #1	; 0x1
    2118:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
					Buzzed(60, 2000);
    211c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    2120:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    2124:	00682e65 	rsbeq	r2, r8, r5, ror #28

					//lTimeWaitEnd = getMillis() + 600; // setup to process background stuff while we wait...
					lTimeWaitEnd = getMillis() + 600; // setup to process background stuff while we wait...
    2128:	73000002 	movwvc	r0, #2	; 0x2
    212c:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
					Printu32d(lTimeWaitEnd);
					PrintString("\n");
#endif
					do {
						// Wait the appropriate time, call any background process while waiting...
						DoBackgroundProcess();
    2130:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
					} while (getMillis() < lTimeWaitEnd);
    2134:	70616d5f 	rsbvc	r6, r1, pc, asr sp
    2138:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
				} else {
					FreeServos();
				}

				// Allow the Servo driver to do stuff durint our idle time
				IdleTime();
    213c:	74730000 	ldrbtvc	r0, [r3]
				mDelay(20); // give a pause between times we call if nothing is happening
    2140:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
			}
			PrevServoMoveTime = ServoMoveTime;
    2144:	5f783031 	svcpl	0x00783031
    2148:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}

			//Store previous g_InControlState.fRobotOn State
			if (g_InControlState.fRobotOn)
    214c:	00020068 	andeq	r0, r2, r8, rrx
    2150:	05000000 	streq	r0, [r0]
				g_InControlState.fPrev_RobotOn = 1;
			else
				g_InControlState.fPrev_RobotOn = 0;
    2154:	0062b002 	rsbeq	fp, r2, r2
    2158:	00fc0308 	rscseq	r0, ip, r8, lsl #6
    215c:	5b5b1401 	blpl	16c7168 <__Stack_Size+0x16c6d68>
    2160:	2f4d4d69 	svccs	0x004d4d69
    2164:	18661103 	stmdane	r6!, {r0, r1, r8, ip}^
    2168:	2e7a0326 	cdpcs	3, 7, cr0, cr10, cr6, {1}
    216c:	415c4d4d 	cmpmi	ip, sp, asr #26
    2170:	3c0c0350 	stccc	3, cr0, [ip], {80}
    2174:	06a30321 	strteq	r0, [r3], r1, lsr #6
    2178:	79dd0320 	ldmibvc	sp, {r5, r8, r9}^
    217c:	06a30320 	strteq	r0, [r3], r0, lsr #6
    2180:	79e50320 	stmibvc	r5!, {r5, r8, r9}^
    2184:	212d2f20 	teqcs	sp, r0, lsr #30
    2188:	58069a03 	stmdapl	r6, {r0, r1, r9, fp, ip, pc}
    218c:	5879f303 	ldmdapl	r9!, {r0, r1, r8, r9, ip, sp, lr, pc}^
    2190:	184a0c03 	stmdane	sl, {r0, r1, sl, fp}^
    2194:	21313131 	teqcs	r1, r1, lsr r1
    2198:	163c0d03 	ldrtne	r0, [ip], -r3, lsl #26
    219c:	4a14032f 	bmi	502e60 <__Stack_Size+0x502a60>
    21a0:	214d3419 	cmpcs	sp, r9, lsl r4
    21a4:	163c0c03 	ldrtne	r0, [ip], -r3, lsl #24
    21a8:	4a0e032f 	bmi	382e6c <__Stack_Size+0x382a6c>
    21ac:	23313118 	teqcs	r1, #6	; 0x6
    21b0:	4a0e0321 	bmi	382e3c <__Stack_Size+0x382a3c>
    21b4:	15034b13 	strne	r4, [r3, #-2835]
    21b8:	3131184a 	teqcc	r1, sl, asr #16
    21bc:	11032123 	tstne	r3, r3, lsr #2
    21c0:	3131184a 	teqcc	r1, sl, asr #16
    21c4:	11032123 	tstne	r3, r3, lsr #2
    21c8:	3131184a 	teqcc	r1, sl, asr #16
    21cc:	13032131 	movwne	r2, #12593	; 0x3131
    21d0:	5d23173c 	stcpl	7, cr1, [r3, #-240]!
    21d4:	3c10035a 	ldccc	3, cr0, [r0], {90}
    21d8:	10032f16 	andne	r2, r3, r6, lsl pc
    21dc:	3131184a 	teqcc	r1, sl, asr #16
    21e0:	0f032123 	svceq	0x00032123
    21e4:	0334184a 	teqeq	r4, #4849664	; 0x4a0000
    21e8:	2723207a 	undefined
    21ec:	3c09032a 	stccc	3, cr0, [r9], {42}
    21f0:	4a0c0334 	bmi	302ec8 <__Stack_Size+0x302ac8>
    21f4:	11032f16 	tstne	r3, r6, lsl pc
    21f8:	034b174a 	movteq	r1, #46922	; 0xb74a
    21fc:	2f164a0d 	svccs	0x00164a0d
    2200:	164a0b03 	strbne	r0, [sl], -r3, lsl #22
    2204:	0322241c 	teqeq	r2, #469762048	; 0x1c000000
    2208:	4c21660c 	stcmi	6, cr6, [r1], #-48
    220c:	273a3022 	ldrcs	r3, [sl, -r2, lsr #32]!
    2210:	267a7869 	ldrbtcs	r7, [sl], -r9, ror #16
    2214:	34207a03 	strtcc	r7, [r0], #-2563
    2218:	77331b25 	ldrvc	r1, [r3, -r5, lsr #22]!
    221c:	36416941 	strbcc	r6, [r1], -r1, asr #18
    2220:	3f207803 	svccc	0x00207803
    2224:	15036741 	strne	r6, [r3, #-1857]
    2228:	5c221790 	stcpl	7, cr1, [r2], #-576
    222c:	3c14035a 	ldccc	3, cr0, [r4], {90}
    2230:	5a5c2217 	bpl	170aa94 <__Stack_Size+0x170a694>
    2234:	173c1503 	ldrne	r1, [ip, -r3, lsl #10]!
    2238:	035a5c22 	cmpeq	sl, #8704	; 0x2200
    223c:	22173c13 	andscs	r3, r7, #4864	; 0x1300
    2240:	14035a5c 	strne	r5, [r3], #-2652
    2244:	5c22173c 	stcpl	7, cr1, [r2], #-240
    2248:	3c0b035a 	stccc	3, cr0, [fp], {90}
    224c:	0b032f16 	bleq	cdeac <__Stack_Size+0xcdaac>
    2250:	032f164a 	teqeq	pc, #77594624	; 0x4a00000
    2254:	2f174a10 	svccs	0x00174a10
    2258:	034a1603 	movteq	r1, #42499	; 0xa603
    225c:	30220109 	eorcc	r0, r2, r9, lsl #2
    2260:	03943092 	orrseq	r3, r4, #146	; 0x92
    2264:	0d038211 	sfmeq	f0, 1, [r3, #-68]
    2268:	0359143c 	cmpeq	r9, #1006632960	; 0x3c000000
    226c:	03193c11 	tsteq	r9, #4352	; 0x1100
    2270:	1103660b 	tstne	r3, fp, lsl #12
    2274:	022f184a 	eoreq	r1, pc, #4849664	; 0x4a0000
    2278:	01010004 	tsteq	r1, r4
    227c:	000000b9 	strheq	r0, [r0], -r9
    2280:	00750002 	rsbseq	r0, r5, r2
    2284:	01020000 	tsteq	r2, r0
    2288:	000d0efb 	strdeq	r0, [sp], -fp
    228c:	01010101 	tsteq	r1, r1, lsl #2
    2290:	01000000 	tsteq	r0, r0
    2294:	73010000 	movwvc	r0, #4096	; 0x1000
    2298:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    229c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    22a0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    22a4:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    22a8:	6d747300 	ldclvs	3, cr7, [r4]
    22ac:	31663233 	cmncc	r6, r3, lsr r2
    22b0:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    22b4:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
    22b8:	0000636e 	andeq	r6, r0, lr, ror #6
    22bc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    22c0:	30316632 	eorscc	r6, r1, r2, lsr r6
    22c4:	79735f78 	ldmdbvc	r3!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    22c8:	63697473 	cmnvs	r9, #1929379840	; 0x73000000
    22cc:	00632e6b 	rsbeq	r2, r3, fp, ror #28
    22d0:	73000001 	movwvc	r0, #1	; 0x1
    22d4:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    22d8:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    22dc:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    22e0:	00682e65 	rsbeq	r2, r8, r5, ror #28
    22e4:	73000002 	movwvc	r0, #2	; 0x2
    22e8:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    22ec:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    22f0:	70616d5f 	rsbvc	r6, r1, pc, asr sp
    22f4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    22f8:	00000000 	andeq	r0, r0, r0
    22fc:	66540205 	ldrbvs	r0, [r4], -r5, lsl #4
    2300:	2b030800 	blcs	c4308 <__Stack_Size+0xc3f08>
    2304:	4e301601 	cfmsuba32mi	mvax0, mvax1, mvfx0, mvfx1
    2308:	3c0b035a 	stccc	3, cr0, [fp], {90}
    230c:	0e032f16 	mcreq	15, 0, r2, cr3, cr6, {0}
    2310:	4c30164a 	ldcmi	6, cr1, [r0], #-296
    2314:	033e6a3e 	teqeq	lr, #253952	; 0x3e000
    2318:	22164a0b 	andscs	r4, r6, #45056	; 0xb000
    231c:	0a035a5c 	beq	d8c94 <__Stack_Size+0xd8894>
    2320:	032f133c 	teqeq	pc, #-268435456	; 0xf0000000
    2324:	0a034a0e 	beq	d4b64 <__Stack_Size+0xd4764>
    2328:	2e760301 	cdpcs	3, 7, cr0, cr6, cr1, {0}
    232c:	22200a03 	eorcs	r0, r0, #12288	; 0x3000
    2330:	580c0378 	stmdapl	ip, {r3, r4, r5, r6, r8, r9}
    2334:	01000402 	tsteq	r0, r2, lsl #8
    2338:	0001fa01 	andeq	pc, r1, r1, lsl #20
    233c:	9b000200 	blls	2b44 <__Stack_Size+0x2744>
    2340:	02000000 	andeq	r0, r0, #0	; 0x0
    2344:	0d0efb01 	vstreq	d15, [lr, #-4]
    2348:	01010100 	tsteq	r1, r0, lsl #2
    234c:	00000001 	andeq	r0, r0, r1
    2350:	01000001 	tsteq	r0, r1
    2354:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2358:	30316632 	eorscc	r6, r1, r2, lsr r6
    235c:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2360:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    2364:	74730063 	ldrbtvc	r0, [r3], #-99
    2368:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    236c:	5f783031 	svcpl	0x00783031
    2370:	2f62696c 	svccs	0x0062696c
    2374:	00636e69 	rsbeq	r6, r3, r9, ror #28
    2378:	6d747300 	ldclvs	3, cr7, [r4]
    237c:	31663233 	cmncc	r6, r3, lsr r2
    2380:	755f7830 	ldrbvc	r7, [pc, #-2096]	; 1b58 <__Stack_Size+0x1758>
    2384:	74726173 	ldrbtvc	r6, [r2], #-371
    2388:	0100632e 	tsteq	r0, lr, lsr #6
    238c:	74730000 	ldrbtvc	r0, [r3]
    2390:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2394:	5f783031 	svcpl	0x00783031
    2398:	65707974 	ldrbvs	r7, [r0, #-2420]!
    239c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    23a0:	74730000 	ldrbtvc	r0, [r3]
    23a4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    23a8:	5f783031 	svcpl	0x00783031
    23ac:	2e70616d 	rpwcssz	f6, f0, #5.0
    23b0:	00020068 	andeq	r0, r2, r8, rrx
    23b4:	6d747300 	ldclvs	3, cr7, [r4]
    23b8:	31663233 	cmncc	r6, r3, lsr r2
    23bc:	755f7830 	ldrbvc	r7, [pc, #-2096]	; 1b94 <__Stack_Size+0x1794>
    23c0:	74726173 	ldrbtvc	r6, [r2], #-371
    23c4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    23c8:	74730000 	ldrbtvc	r0, [r3]
    23cc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    23d0:	5f783031 	svcpl	0x00783031
    23d4:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
    23d8:	00020068 	andeq	r0, r2, r8, rrx
    23dc:	05000000 	streq	r0, [r0]
    23e0:	0066f802 	rsbeq	pc, r6, r2, lsl #16
    23e4:	01e80308 	mvneq	r0, r8, lsl #6
    23e8:	3d3d1401 	cfldrscc	mvf1, [sp, #-4]!
    23ec:	3d3d2121 	ldfccs	f2, [sp, #-132]!
    23f0:	032e0f03 	teqeq	lr, #12	; 0xc
    23f4:	73030118 	movwvc	r0, #12568	; 0x3118
    23f8:	200d033c 	andcs	r0, sp, ip, lsr r3
    23fc:	03587503 	cmpeq	r8, #12582912	; 0xc00000
    2400:	75032e0b 	strvc	r2, [r3, #-3595]
    2404:	200b032e 	andcs	r0, fp, lr, lsr #6
    2408:	03207503 	teqeq	r0, #12582912	; 0xc00000
    240c:	033d200b 	teqeq	sp, #11	; 0xb
    2410:	3d14200b 	ldccc	0, cr2, [r4, #-44]
    2414:	03212121 	teqeq	r1, #1073741832	; 0x40000008
    2418:	23172e0e 	tstcs	r7, #224	; 0xe0
    241c:	1c03685d 	stcne	8, cr6, [r3], {93}
    2420:	010d032e 	tsteq	sp, lr, lsr #6
    2424:	3c6e0341 	stclcc	3, cr0, [lr], #-260
    2428:	30201203 	eorcc	r1, r0, r3, lsl #4
    242c:	032e6c03 	teqeq	lr, #768	; 0x300
    2430:	30222014 	eorcc	r2, r2, r4, lsl r0
    2434:	2222323e 	eorcs	r3, r2, #-536870909	; 0xe0000003
    2438:	13034c40 	movwne	r4, #15424	; 0x3c40
    243c:	5e24183c 	mcrpl	8, 1, r1, cr4, cr12, {1}
    2440:	200d035a 	andcs	r0, sp, sl, asr r3
    2444:	034b6818 	movteq	r6, #47128	; 0xb818
    2448:	67172e10 	undefined
    244c:	2e0e034b 	cdpcs	3, 0, cr0, cr14, cr11, {2}
    2450:	685d2317 	ldmdavs	sp, {r0, r1, r2, r4, r8, r9, sp}^
    2454:	172e1103 	strne	r1, [lr, -r3, lsl #2]!
    2458:	0e034b67 	fnmacdeq	d4, d3, d23
    245c:	5d23172e 	stcpl	7, cr1, [r3, #-184]!
    2460:	2e0d0368 	cdpcs	3, 0, cr0, cr13, cr8, {3}
    2464:	0c033d18 	stceq	13, cr3, [r3], {24}
    2468:	033d1720 	teqeq	sp, #8388608	; 0x800000
    246c:	5917200c 	ldmdbpl	r7, {r2, r3, sp}
    2470:	17200d03 	strne	r0, [r0, -r3, lsl #26]!
    2474:	0e03593e 	mcreq	9, 0, r5, cr3, cr14, {1}
    2478:	4b4c172e 	blmi	1308138 <__Stack_Size+0x1307d38>
    247c:	172e0e03 	strne	r0, [lr, -r3, lsl #28]!
    2480:	03685d23 	cmneq	r8, #2240	; 0x8c0
    2484:	23172e0e 	tstcs	r7, #224	; 0xe0
    2488:	0e03685d 	mcreq	8, 0, r6, cr3, cr13, {2}
    248c:	5d23172e 	stcpl	7, cr1, [r3, #-184]!
    2490:	2e100368 	cdpcs	3, 1, cr0, cr0, cr8, {3}
    2494:	034b6717 	movteq	r6, #46871	; 0xb717
    2498:	23172e0e 	tstcs	r7, #224	; 0xe0
    249c:	1903685d 	stmdbne	r3, {r0, r2, r3, r4, r6, fp, sp, lr}
    24a0:	09031a2e 	stmdbeq	r3, {r1, r2, r3, r5, r9, fp, ip}
    24a4:	20230358 	eorcs	r0, r3, r8, asr r3
    24a8:	1a034b18 	bne	d5110 <__Stack_Size+0xd4d10>
    24ac:	010a032e 	tsteq	sl, lr, lsr #6
    24b0:	2c305a41 	ldccs	10, cr5, [r0], #-260
    24b4:	4f323024 	svcmi	0x00323024
    24b8:	0a03303d 	beq	ce5b4 <__Stack_Size+0xce1b4>
    24bc:	2e23039e 	mcrcs	3, 1, r0, cr3, cr14, {4}
    24c0:	75010b03 	strvc	r0, [r1, #-2819]
    24c4:	2079a603 	rsbscs	sl, r9, r3, lsl #12
    24c8:	03011503 	movweq	r1, #5379	; 0x1503
    24cc:	79032009 	stmdbvc	r3, {r0, r3, sp}
    24d0:	03315120 	teqeq	r1, #8	; 0x8
    24d4:	2d03205f 	stccs	0, cr2, [r3, #-380]
    24d8:	20530320 	subscs	r0, r3, r0, lsr #6
    24dc:	03202d03 	teqeq	r0, #192	; 0xc0
    24e0:	0a032076 	beq	ca6c0 <__Stack_Size+0xca2c0>
    24e4:	2e76032e 	cdpcs	3, 7, cr0, cr6, cr14, {1}
    24e8:	032e0a03 	teqeq	lr, #12288	; 0x3000
    24ec:	0a032076 	beq	ca6cc <__Stack_Size+0xca2cc>
    24f0:	09033f2e 	stmdbeq	r3, {r1, r2, r3, r5, r8, r9, sl, fp, ip, sp}
    24f4:	20790320 	rsbscs	r0, r9, r0, lsr #6
    24f8:	034a4e03 	movteq	r4, #44547	; 0xae03
    24fc:	47032039 	smladxmi	r3, r9, r0, r2
    2500:	20390320 	eorscs	r0, r9, r0, lsr #6
    2504:	03204703 	teqeq	r0, #786432	; 0xc0000
    2508:	2b032012 	blcs	ca558 <__Stack_Size+0xca158>
    250c:	0b033d20 	bleq	d1994 <__Stack_Size+0xd1594>
    2510:	20750320 	rsbscs	r0, r5, r0, lsr #6
    2514:	83243222 	teqhi	r4, #536870914	; 0x20000002
    2518:	93321c32 	teqls	r2, #12800	; 0x3200
    251c:	7efd034b 	cdpvc	3, 15, cr0, cr13, cr11, {2}
    2520:	241c2466 	ldrcs	r2, [ip], #-1126
    2524:	2308241c 	movwcs	r2, #33820	; 0x841c
    2528:	40596a59 	subsmi	r6, r9, r9, asr sl
    252c:	40594059 	subsmi	r4, r9, r9, asr r0
    2530:	06025e59 	undefined
    2534:	a0010100 	andge	r0, r1, r0, lsl #2
    2538:	02000000 	andeq	r0, r0, #0	; 0x0
    253c:	00003900 	andeq	r3, r0, r0, lsl #18
    2540:	fb010200 	blx	42d4a <__Stack_Size+0x4294a>
    2544:	01000d0e 	tsteq	r0, lr, lsl #26
    2548:	00010101 	andeq	r0, r1, r1, lsl #2
    254c:	00010000 	andeq	r0, r1, r0
    2550:	74730100 	ldrbtvc	r0, [r3], #-256
    2554:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2558:	5f783031 	svcpl	0x00783031
    255c:	2f62696c 	svccs	0x0062696c
    2560:	00637273 	rsbeq	r7, r3, r3, ror r2
    2564:	726f6300 	rsbvc	r6, pc, #0	; 0x0
    2568:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!
    256c:	616d5f33 	cmnvs	sp, r3, lsr pc
    2570:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
    2574:	00010073 	andeq	r0, r1, r3, ror r0
    2578:	05000000 	streq	r0, [r0]
    257c:	006ab402 	rsbeq	fp, sl, r2, lsl #8
    2580:	01340308 	teqeq	r4, r8, lsl #6
    2584:	200b0321 	andcs	r0, fp, r1, lsr #6
    2588:	200b0321 	andcs	r0, fp, r1, lsr #6
    258c:	200b0321 	andcs	r0, fp, r1, lsr #6
    2590:	200b032f 	andcs	r0, fp, pc, lsr #6
    2594:	200b032f 	andcs	r0, fp, pc, lsr #6
    2598:	200b032f 	andcs	r0, fp, pc, lsr #6
    259c:	200b0321 	andcs	r0, fp, r1, lsr #6
    25a0:	200b032f 	andcs	r0, fp, pc, lsr #6
    25a4:	0a032f2f 	beq	ce268 <__Stack_Size+0xcde68>
    25a8:	0b032f20 	bleq	ce230 <__Stack_Size+0xcde30>
    25ac:	0b032f20 	bleq	ce234 <__Stack_Size+0xcde34>
    25b0:	0b032f20 	bleq	ce238 <__Stack_Size+0xcde38>
    25b4:	0a032f20 	beq	ce23c <__Stack_Size+0xcde3c>
    25b8:	0b032120 	bleq	caa40 <__Stack_Size+0xca640>
    25bc:	0b032120 	bleq	caa44 <__Stack_Size+0xca644>
    25c0:	0b032120 	bleq	caa48 <__Stack_Size+0xca648>
    25c4:	0b032120 	bleq	caa4c <__Stack_Size+0xca64c>
    25c8:	0b032f20 	bleq	ce250 <__Stack_Size+0xcde50>
    25cc:	0a032f20 	beq	ce254 <__Stack_Size+0xcde54>
    25d0:	0b032120 	bleq	caa58 <__Stack_Size+0xca658>
    25d4:	01022120 	tsteq	r2, r0, lsr #2
    25d8:	5a010100 	bpl	429e0 <__Stack_Size+0x425e0>
    25dc:	02000000 	andeq	r0, r0, #0	; 0x0
    25e0:	00003b00 	andeq	r3, r0, r0, lsl #22
    25e4:	fb010200 	blx	42dee <__Stack_Size+0x429ee>
    25e8:	01000d0e 	tsteq	r0, lr, lsl #26
    25ec:	00010101 	andeq	r0, r1, r1, lsl #2
    25f0:	00010000 	andeq	r0, r1, r0
    25f4:	74730100 	ldrbtvc	r0, [r3], #-256
    25f8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    25fc:	5f783031 	svcpl	0x00783031
    2600:	2f62696c 	svccs	0x0062696c
    2604:	00637273 	rsbeq	r7, r3, r3, ror r2
    2608:	6d747300 	ldclvs	3, cr7, [r4]
    260c:	31663233 	cmncc	r6, r3, lsr r2
    2610:	765f7830 	undefined
    2614:	6f746365 	svcvs	0x00746365
    2618:	00632e72 	rsbeq	r2, r3, r2, ror lr
    261c:	00000001 	andeq	r0, r0, r1
    2620:	24020500 	strcs	r0, [r2], #-1280
    2624:	0308006b 	movweq	r0, #32875	; 0x806b
    2628:	58010191 	stmdapl	r1, {r0, r4, r7, r8}
    262c:	60563e27 	subsvs	r3, r6, r7, lsr #28
    2630:	2f364822 	svccs	0x00364822
    2634:	01000e02 	tsteq	r0, r2, lsl #28
    2638:	00007001 	andeq	r7, r0, r1
    263c:	57000200 	strpl	r0, [r0, -r0, lsl #4]
    2640:	02000000 	andeq	r0, r0, #0	; 0x0
    2644:	0d0efb01 	vstreq	d15, [lr, #-4]
    2648:	01010100 	tsteq	r1, r0, lsl #2
    264c:	00000001 	andeq	r0, r0, r1
    2650:	01000001 	tsteq	r0, r1
    2654:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2658:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    265c:	2f2e2e2f 	svccs	0x002e2e2f
    2660:	672f2e2e 	strvs	r2, [pc, -lr, lsr #28]!
    2664:	342d6363 	strtcc	r6, [sp], #-867
    2668:	302e332e 	eorcc	r3, lr, lr, lsr #6
    266c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    2670:	2f62696c 	svccs	0x0062696c
    2674:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    2678:	6474732f 	ldrbtvs	r7, [r4], #-815
    267c:	0062696c 	rsbeq	r6, r2, ip, ror #18
    2680:	65746100 	ldrbvs	r6, [r4, #-256]!
    2684:	2e746978 	mrccs	9, 3, r6, cr4, cr8, {3}
    2688:	00010063 	andeq	r0, r1, r3, rrx
    268c:	65746100 	ldrbvs	r6, [r4, #-256]!
    2690:	2e746978 	mrccs	9, 3, r6, cr4, cr8, {3}
    2694:	00010068 	andeq	r0, r1, r8, rrx
    2698:	05000000 	streq	r0, [r0]
    269c:	00000002 	andeq	r0, r0, r2
    26a0:	013f0300 	teqeq	pc, r0, lsl #6
    26a4:	672f2d4b 	strvs	r2, [pc, -fp, asr #26]!
    26a8:	01000602 	tsteq	r0, r2, lsl #12
    26ac:	0000eb01 	andeq	lr, r0, r1, lsl #22
    26b0:	d0000200 	andle	r0, r0, r0, lsl #4
    26b4:	02000000 	andeq	r0, r0, #0	; 0x0
    26b8:	0d0efb01 	vstreq	d15, [lr, #-4]
    26bc:	01010100 	tsteq	r1, r0, lsl #2
    26c0:	00000001 	andeq	r0, r0, r1
    26c4:	01000001 	tsteq	r0, r1
    26c8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    26cc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    26d0:	2f2e2e2f 	svccs	0x002e2e2f
    26d4:	672f2e2e 	strvs	r2, [pc, -lr, lsr #28]!
    26d8:	342d6363 	strtcc	r6, [sp], #-867
    26dc:	302e332e 	eorcc	r3, lr, lr, lsr #6
    26e0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    26e4:	2f62696c 	svccs	0x0062696c
    26e8:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    26ec:	6474732f 	ldrbtvs	r7, [r4], #-815
    26f0:	0062696c 	rsbeq	r6, r2, ip, ror #18
    26f4:	772f3a63 	strvc	r3, [pc, -r3, ror #20]!
    26f8:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
    26fc:	622f736d 	eorvs	r7, pc, #-1275068415	; 0xb4000001
    2700:	646c6975 	strbtvs	r6, [ip], #-2421
    2704:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    2708:	332e342d 	teqcc	lr, #754974720	; 0x2d000000
    270c:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    2710:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2714:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    2718:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}
    271c:	756c636e 	strbvc	r6, [ip, #-878]!
    2720:	732f6564 	teqvc	pc, #419430400	; 0x19000000
    2724:	63007379 	movwvs	r7, #889	; 0x379
    2728:	69772f3a 	ldmdbvs	r7!, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
    272c:	6d72616e 	ldfvse	f6, [r2, #-440]!
    2730:	75622f73 	strbvc	r2, [r2, #-3955]!
    2734:	2f646c69 	svccs	0x00646c69
    2738:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    273c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    2740:	63672f64 	cmnvs	r7, #400	; 0x190
    2744:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    2748:	64756c63 	ldrbtvs	r6, [r5], #-3171
    274c:	65000065 	strvs	r0, [r0, #-101]
    2750:	2e746978 	mrccs	9, 3, r6, cr4, cr8, {3}
    2754:	00010063 	andeq	r0, r1, r3, rrx
    2758:	636f6c00 	cmnvs	pc, #0	; 0x0
    275c:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    2760:	5f000002 	svcpl	0x00000002
    2764:	65707974 	ldrbvs	r7, [r0, #-2420]!
    2768:	00682e73 	rsbeq	r2, r8, r3, ror lr
    276c:	73000002 	movwvc	r0, #2	; 0x2
    2770:	65646474 	strbvs	r6, [r4, #-1140]!
    2774:	00682e66 	rsbeq	r2, r8, r6, ror #28
    2778:	72000003 	andvc	r0, r0, #3	; 0x3
    277c:	746e6565 	strbtvc	r6, [lr], #-1381
    2780:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2784:	00000000 	andeq	r0, r0, r0
    2788:	00000205 	andeq	r0, r0, r5, lsl #4
    278c:	3b030000 	blcc	c2794 <__Stack_Size+0xc2394>
    2790:	2f2d1301 	svccs	0x002d1301
    2794:	024b8330 	subeq	r8, fp, #-1073741824	; 0xc0000000
    2798:	01010006 	tsteq	r1, r6
    279c:	000000d7 	ldrdeq	r0, [r0], -r7
    27a0:	00d10002 	sbcseq	r0, r1, r2
    27a4:	01020000 	tsteq	r2, r0
    27a8:	000d0efb 	strdeq	r0, [sp], -fp
    27ac:	01010101 	tsteq	r1, r1, lsl #2
    27b0:	01000000 	tsteq	r0, r0
    27b4:	63010000 	movwvs	r0, #4096	; 0x1000
    27b8:	69772f3a 	ldmdbvs	r7!, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
    27bc:	6d72616e 	ldfvse	f6, [r2, #-440]!
    27c0:	75622f73 	strbvc	r2, [r2, #-3955]!
    27c4:	2f646c69 	svccs	0x00646c69
    27c8:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    27cc:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    27d0:	656e2f30 	strbvs	r2, [lr, #-3888]!
    27d4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    27d8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    27dc:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    27e0:	64756c63 	ldrbtvs	r6, [r5], #-3171
    27e4:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    27e8:	3a630073 	bcc	18c29bc <__Stack_Size+0x18c25bc>
    27ec:	6e69772f 	cdpvs	7, 6, cr7, cr9, cr15, {1}
    27f0:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    27f4:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    27f8:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
    27fc:	622d6363 	eorvs	r6, sp, #-1946157055	; 0x8c000001
    2800:	646c6975 	strbtvs	r6, [ip], #-2421
    2804:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    2808:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    280c:	6564756c 	strbvs	r7, [r4, #-1388]!
    2810:	2f2e2e00 	svccs	0x002e2e00
    2814:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2818:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    281c:	2f2e2e2f 	svccs	0x002e2e2f
    2820:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    2824:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    2828:	656e2f30 	strbvs	r2, [lr, #-3888]!
    282c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2830:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    2834:	65722f63 	ldrbvs	r2, [r2, #-3939]!
    2838:	00746e65 	rsbseq	r6, r4, r5, ror #28
    283c:	636f6c00 	cmnvs	pc, #0	; 0x0
    2840:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    2844:	5f000001 	svcpl	0x00000001
    2848:	65707974 	ldrbvs	r7, [r0, #-2420]!
    284c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    2850:	73000001 	movwvc	r0, #1	; 0x1
    2854:	65646474 	strbvs	r6, [r4, #-1140]!
    2858:	00682e66 	rsbeq	r2, r8, r6, ror #28
    285c:	72000002 	andvc	r0, r0, #2	; 0x2
    2860:	746e6565 	strbtvc	r6, [lr], #-1381
    2864:	0100682e 	tsteq	r0, lr, lsr #16
    2868:	6d690000 	stclvs	0, cr0, [r9]
    286c:	65727570 	ldrbvs	r7, [r2, #-1392]!
    2870:	0300632e 	movweq	r6, #814	; 0x32e
    2874:	a2000000 	andge	r0, r0, #0	; 0x0
    2878:	02000000 	andeq	r0, r0, #0	; 0x0
    287c:	00007a00 	andeq	r7, r0, r0, lsl #20
    2880:	fb010200 	blx	4308a <__Stack_Size+0x42c8a>
    2884:	01000d0e 	tsteq	r0, lr, lsl #26
    2888:	00010101 	andeq	r0, r1, r1, lsl #2
    288c:	00010000 	andeq	r0, r1, r0
    2890:	2e2e0100 	sufcse	f0, f6, f0
    2894:	2f2e2e2f 	svccs	0x002e2e2f
    2898:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    289c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    28a0:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    28a4:	332e342d 	teqcc	lr, #754974720	; 0x2d000000
    28a8:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    28ac:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    28b0:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    28b4:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!
    28b8:	00637369 	rsbeq	r7, r3, r9, ror #6
    28bc:	772f3a63 	strvc	r3, [pc, -r3, ror #20]!
    28c0:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
    28c4:	622f736d 	eorvs	r7, pc, #-1275068415	; 0xb4000001
    28c8:	646c6975 	strbtvs	r6, [ip], #-2421
    28cc:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    28d0:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
    28d4:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
    28d8:	692f6363 	stmdbvs	pc!, {r0, r1, r5, r6, r8, r9, sp, lr}
    28dc:	756c636e 	strbvc	r6, [ip, #-878]!
    28e0:	00006564 	andeq	r6, r0, r4, ror #10
    28e4:	74696e69 	strbtvc	r6, [r9], #-3689
    28e8:	0100632e 	tsteq	r0, lr, lsr #6
    28ec:	74730000 	ldrbtvc	r0, [r3]
    28f0:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    28f4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    28f8:	00000000 	andeq	r0, r0, r0
    28fc:	00000205 	andeq	r0, r0, r5, lsl #4
    2900:	31030000 	tstcc	r3, r0
    2904:	67673201 	strbvs	r3, [r7, -r1, lsl #4]!
    2908:	032f6965 	teqeq	pc, #1654784	; 0x194000
    290c:	67328265 	ldrvs	r8, [r2, -r5, ror #4]!
    2910:	30696567 	rsbcc	r6, r9, r7, ror #10
    2914:	68656767 	stmdavs	r5!, {r0, r1, r2, r5, r6, r8, r9, sl, sp, lr}^
    2918:	01000c02 	tsteq	r0, r2, lsl #24
    291c:	0000d101 	andeq	sp, r0, r1, lsl #2
    2920:	7e000200 	cdpvc	2, 0, cr0, cr0, cr0, {0}
    2924:	02000000 	andeq	r0, r0, #0	; 0x0
    2928:	0d0efb01 	vstreq	d15, [lr, #-4]
    292c:	01010100 	tsteq	r1, r0, lsl #2
    2930:	00000001 	andeq	r0, r0, r1
    2934:	01000001 	tsteq	r0, r1
    2938:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    293c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2940:	2f2e2e2f 	svccs	0x002e2e2f
    2944:	672f2e2e 	strvs	r2, [pc, -lr, lsr #28]!
    2948:	342d6363 	strtcc	r6, [sp], #-867
    294c:	302e332e 	eorcc	r3, lr, lr, lsr #6
    2950:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    2954:	2f62696c 	svccs	0x0062696c
    2958:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    295c:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    2960:	00676e69 	rsbeq	r6, r7, r9, ror #28
    2964:	772f3a63 	strvc	r3, [pc, -r3, ror #20]!
    2968:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
    296c:	622f736d 	eorvs	r7, pc, #-1275068415	; 0xb4000001
    2970:	646c6975 	strbtvs	r6, [ip], #-2421
    2974:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    2978:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
    297c:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
    2980:	692f6363 	stmdbvs	pc!, {r0, r1, r5, r6, r8, r9, sp, lr}
    2984:	756c636e 	strbvc	r6, [ip, #-878]!
    2988:	00006564 	andeq	r6, r0, r4, ror #10
    298c:	636d656d 	cmnvs	sp, #457179136	; 0x1b400000
    2990:	632e7970 	teqvs	lr, #1835008	; 0x1c0000
    2994:	00000100 	andeq	r0, r0, r0, lsl #2
    2998:	64647473 	strbtvs	r7, [r4], #-1139
    299c:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    29a0:	00000200 	andeq	r0, r0, r0, lsl #4
    29a4:	02050000 	andeq	r0, r5, #0	; 0x0
    29a8:	00000000 	andeq	r0, r0, r0
    29ac:	03013803 	movweq	r3, #6147	; 0x1803
    29b0:	6a032e16 	bvs	ce210 <__Stack_Size+0xcde10>
    29b4:	4a0f032e 	bmi	3c3674 <__Stack_Size+0x3c3274>
    29b8:	032e7103 	teqeq	lr, #-1073741824	; 0xc0000000
    29bc:	03322e12 	teqeq	r2, #288	; 0x120
    29c0:	6567821b 	strbvs	r8, [r7, #-539]!
    29c4:	6663034f 	strbtvs	r0, [r3], -pc, asr #6
    29c8:	034b4b6b 	movteq	r4, #47979	; 0xbb6b
    29cc:	21034a60 	tstcs	r3, r0, ror #20
    29d0:	0333292e 	teqeq	r3, #753664	; 0xb8000
    29d4:	1c032e5f 	stcne	14, cr2, [r3], {95}
    29d8:	2e64034a 	cdpcs	3, 6, cr0, cr4, cr10, {2}
    29dc:	039e2603 	orrseq	r2, lr, #3145728	; 0x300000
    29e0:	26032e5a 	undefined
    29e4:	03644c4a 	cmneq	r4, #18944	; 0x4a00
    29e8:	2e03665a 	mcrcs	6, 0, r6, cr3, cr10, {2}
    29ec:	000402d6 	ldrdeq	r0, [r4], -r6
    29f0:	00d80101 	sbcseq	r0, r8, r1, lsl #2
    29f4:	00020000 	andeq	r0, r2, r0
    29f8:	0000007e 	andeq	r0, r0, lr, ror r0
    29fc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    2a00:	0101000d 	tsteq	r1, sp
    2a04:	00000101 	andeq	r0, r0, r1, lsl #2
    2a08:	00000100 	andeq	r0, r0, r0, lsl #2
    2a0c:	2f2e2e01 	svccs	0x002e2e01
    2a10:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2a14:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2a18:	2f2e2e2f 	svccs	0x002e2e2f
    2a1c:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    2a20:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    2a24:	656e2f30 	strbvs	r2, [lr, #-3888]!
    2a28:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2a2c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    2a30:	74732f63 	ldrbtvc	r2, [r3], #-3939
    2a34:	676e6972 	undefined
    2a38:	2f3a6300 	svccs	0x003a6300
    2a3c:	616e6977 	smcvs	59031
    2a40:	2f736d72 	svccs	0x00736d72
    2a44:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    2a48:	63672f64 	cmnvs	r7, #400	; 0x190
    2a4c:	75622d63 	strbvc	r2, [r2, #-3427]!
    2a50:	2f646c69 	svccs	0x00646c69
    2a54:	2f636367 	svccs	0x00636367
    2a58:	6c636e69 	stclvs	14, cr6, [r3], #-420
    2a5c:	00656475 	rsbeq	r6, r5, r5, ror r4
    2a60:	6d656d00 	stclvs	13, cr6, [r5]
    2a64:	2e746573 	mrccs	5, 3, r6, cr4, cr3, {3}
    2a68:	00010063 	andeq	r0, r1, r3, rrx
    2a6c:	64747300 	ldrbtvs	r7, [r4], #-768
    2a70:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    2a74:	00020068 	andeq	r0, r2, r8, rrx
    2a78:	05000000 	streq	r0, [r0]
    2a7c:	00000002 	andeq	r0, r0, r2
    2a80:	012e0300 	teqeq	lr, r0, lsl #6
    2a84:	03011203 	movweq	r1, #4611	; 0x1203
    2a88:	0b032e6e 	bleq	ce448 <__Stack_Size+0xce048>
    2a8c:	2e75032e 	cdpcs	3, 7, cr0, cr5, cr14, {1}
    2a90:	312e0f03 	teqcc	lr, r3, lsl #30
    2a94:	03661303 	cmneq	r6, #201326592	; 0xc000000
    2a98:	032f2e76 	teqeq	pc, #1888	; 0x760
    2a9c:	036c2e09 	cmneq	ip, #144	; 0x90
    2aa0:	2f302e7a 	svccs	0x00302e7a
    2aa4:	56032f2f 	strpl	r2, [r3], -pc, lsr #30
    2aa8:	2e25032e 	cdpcs	3, 2, cr0, cr5, cr14, {1}
    2aac:	032e5b03 	teqeq	lr, #3072	; 0xc00
    2ab0:	5203822e 	andpl	r8, r3, #-536870910	; 0xe0000002
    2ab4:	2e2e032e 	cdpcs	3, 2, cr0, cr14, cr14, {1}
    2ab8:	032e7703 	teqeq	lr, #786432	; 0xc0000
    2abc:	03482e0b 	movteq	r2, #36363	; 0x8e0b
    2ac0:	34036652 	strcc	r6, [r3], #-1618
    2ac4:	4884319e 	stmmi	r4, {r1, r2, r3, r4, r7, r8, ip, sp}
    2ac8:	00060251 	andeq	r0, r6, r1, asr r2
    2acc:	01230101 	teqeq	r3, r1, lsl #2
    2ad0:	00020000 	andeq	r0, r2, r0
    2ad4:	000000e0 	andeq	r0, r0, r0, ror #1
    2ad8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    2adc:	0101000d 	tsteq	r1, sp
    2ae0:	00000101 	andeq	r0, r0, r1, lsl #2
    2ae4:	00000100 	andeq	r0, r0, r0, lsl #2
    2ae8:	2f2e2e01 	svccs	0x002e2e01
    2aec:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2af0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2af4:	2f2e2e2f 	svccs	0x002e2e2f
    2af8:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    2afc:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    2b00:	656e2f30 	strbvs	r2, [lr, #-3888]!
    2b04:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2b08:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    2b0c:	74732f63 	ldrbtvc	r2, [r3], #-3939
    2b10:	62696c64 	rsbvs	r6, r9, #25600	; 0x6400
    2b14:	2f3a6300 	svccs	0x003a6300
    2b18:	616e6977 	smcvs	59031
    2b1c:	2f736d72 	svccs	0x00736d72
    2b20:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    2b24:	63672f64 	cmnvs	r7, #400	; 0x190
    2b28:	2e342d63 	cdpcs	13, 3, cr2, cr4, cr3, {3}
    2b2c:	2f302e33 	svccs	0x00302e33
    2b30:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    2b34:	6c2f6269 	sfmvs	f6, 4, [pc], #-420
    2b38:	2f636269 	svccs	0x00636269
    2b3c:	6c636e69 	stclvs	14, cr6, [r3], #-420
    2b40:	2f656475 	svccs	0x00656475
    2b44:	00737973 	rsbseq	r7, r3, r3, ror r9
    2b48:	772f3a63 	strvc	r3, [pc, -r3, ror #20]!
    2b4c:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
    2b50:	622f736d 	eorvs	r7, pc, #-1275068415	; 0xb4000001
    2b54:	646c6975 	strbtvs	r6, [ip], #-2421
    2b58:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    2b5c:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
    2b60:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
    2b64:	692f6363 	stmdbvs	pc!, {r0, r1, r5, r6, r8, r9, sp, lr}
    2b68:	756c636e 	strbvc	r6, [ip, #-878]!
    2b6c:	00006564 	andeq	r6, r0, r4, ror #10
    2b70:	74615f5f 	strbtvc	r5, [r1], #-3935
    2b74:	74697865 	strbtvc	r7, [r9], #-2149
    2b78:	0100632e 	tsteq	r0, lr, lsr #6
    2b7c:	6f6c0000 	svcvs	0x006c0000
    2b80:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    2b84:	00000200 	andeq	r0, r0, r0, lsl #4
    2b88:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    2b8c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    2b90:	00000200 	andeq	r0, r0, r0, lsl #4
    2b94:	64647473 	strbtvs	r7, [r4], #-1139
    2b98:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    2b9c:	00000300 	andeq	r0, r0, r0, lsl #6
    2ba0:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    2ba4:	00682e74 	rsbeq	r2, r8, r4, ror lr
    2ba8:	61000002 	tstvs	r0, r2
    2bac:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    2bb0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    2bb4:	00000001 	andeq	r0, r0, r1
    2bb8:	00020500 	andeq	r0, r2, r0, lsl #10
    2bbc:	03000000 	movweq	r0, #0	; 0x0
    2bc0:	0a030116 	beq	c3020 <__Stack_Size+0xc2c20>
    2bc4:	2e760301 	cdpcs	3, 7, cr0, cr6, cr1, {0}
    2bc8:	4b2e0a03 	blmi	b853dc <__Stack_Size+0xb84fdc>
    2bcc:	2e74032f 	cdpcs	3, 7, cr0, cr4, cr15, {1}
    2bd0:	2d2e0d03 	stccs	13, cr0, [lr, #-12]!
    2bd4:	2e73032f 	cdpcs	3, 7, cr0, cr3, cr15, {1}
    2bd8:	03660d03 	cmneq	r6, #192	; 0xc0
    2bdc:	1b034a17 	blne	d5440 <__Stack_Size+0xd5040>
    2be0:	7603a34a 	strvc	sl, [r3], -sl, asr #6
    2be4:	2f2b4c4a 	svccs	0x002b4c4a
    2be8:	2f2b322d 	svccs	0x002b322d
    2bec:	312d2c30 	teqcc	sp, r0, lsr ip
    2bf0:	01000602 	tsteq	r0, r2, lsl #12
    2bf4:	00011b01 	andeq	r1, r1, r1, lsl #22
    2bf8:	d9000200 	stmdble	r0, {r9}
    2bfc:	02000000 	andeq	r0, r0, #0	; 0x0
    2c00:	0d0efb01 	vstreq	d15, [lr, #-4]
    2c04:	01010100 	tsteq	r1, r0, lsl #2
    2c08:	00000001 	andeq	r0, r0, r1
    2c0c:	01000001 	tsteq	r0, r1
    2c10:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2c14:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2c18:	2f2e2e2f 	svccs	0x002e2e2f
    2c1c:	672f2e2e 	strvs	r2, [pc, -lr, lsr #28]!
    2c20:	342d6363 	strtcc	r6, [sp], #-867
    2c24:	302e332e 	eorcc	r3, lr, lr, lsr #6
    2c28:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    2c2c:	2f62696c 	svccs	0x0062696c
    2c30:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    2c34:	6474732f 	ldrbtvs	r7, [r4], #-815
    2c38:	0062696c 	rsbeq	r6, r2, ip, ror #18
    2c3c:	772f3a63 	strvc	r3, [pc, -r3, ror #20]!
    2c40:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
    2c44:	622f736d 	eorvs	r7, pc, #-1275068415	; 0xb4000001
    2c48:	646c6975 	strbtvs	r6, [ip], #-2421
    2c4c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    2c50:	332e342d 	teqcc	lr, #754974720	; 0x2d000000
    2c54:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    2c58:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2c5c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    2c60:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}
    2c64:	756c636e 	strbvc	r6, [ip, #-878]!
    2c68:	732f6564 	teqvc	pc, #419430400	; 0x19000000
    2c6c:	63007379 	movwvs	r7, #889	; 0x379
    2c70:	69772f3a 	ldmdbvs	r7!, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
    2c74:	6d72616e 	ldfvse	f6, [r2, #-440]!
    2c78:	75622f73 	strbvc	r2, [r2, #-3955]!
    2c7c:	2f646c69 	svccs	0x00646c69
    2c80:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    2c84:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    2c88:	63672f64 	cmnvs	r7, #400	; 0x190
    2c8c:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    2c90:	64756c63 	ldrbtvs	r6, [r5], #-3171
    2c94:	5f000065 	svcpl	0x00000065
    2c98:	6c61635f 	stclvs	3, cr6, [r1], #-380
    2c9c:	74615f6c 	strbtvc	r5, [r1], #-3948
    2ca0:	74697865 	strbtvc	r7, [r9], #-2149
    2ca4:	0100632e 	tsteq	r0, lr, lsr #6
    2ca8:	6f6c0000 	svcvs	0x006c0000
    2cac:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    2cb0:	00000200 	andeq	r0, r0, r0, lsl #4
    2cb4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    2cb8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    2cbc:	00000200 	andeq	r0, r0, r0, lsl #4
    2cc0:	64647473 	strbtvs	r7, [r4], #-1139
    2cc4:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    2cc8:	00000300 	andeq	r0, r0, r0, lsl #6
    2ccc:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    2cd0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    2cd4:	00000002 	andeq	r0, r0, r2
    2cd8:	00020500 	andeq	r0, r2, r0, lsl #10
    2cdc:	03000000 	movweq	r0, #0	; 0x0
    2ce0:	0a030111 	beq	c312c <__Stack_Size+0xc2d2c>
    2ce4:	4a76032e 	bmi	1d839a4 <__Stack_Size+0x1d835a4>
    2ce8:	4a2c034a 	bmi	b03a18 <__Stack_Size+0xb03618>
    2cec:	032e7703 	teqeq	lr, #786432	; 0xc0000
    2cf0:	c1512e69 	cmpgt	r1, r9, ror #28
    2cf4:	039e7903 	orrseq	r7, lr, #49152	; 0xc000
    2cf8:	4f03663e 	svcmi	0x0003663e
    2cfc:	4b2f2d66 	blmi	bce29c <__Stack_Size+0xbcde9c>
    2d00:	63503130 	cmpvs	r0, #12	; 0xc
    2d04:	89673031 	stmdbhi	r7!, {r0, r4, r5, ip, sp}^
    2d08:	039e7703 	orrseq	r7, lr, #786432	; 0xc0000
    2d0c:	02d14a09 	sbcseq	r4, r1, #36864	; 0x9000
    2d10:	0101000a 	tsteq	r1, sl
    2d14:	00000045 	andeq	r0, r0, r5, asr #32
    2d18:	001f0002 	andseq	r0, pc, r2
    2d1c:	01020000 	tsteq	r2, r0
    2d20:	000d0efb 	strdeq	r0, [sp], -fp
    2d24:	01010101 	tsteq	r1, r1, lsl #2
    2d28:	01000000 	tsteq	r0, r0
    2d2c:	00010000 	andeq	r0, r1, r0
    2d30:	6e747263 	cdpvs	2, 7, cr7, cr4, cr3, {3}
    2d34:	6d73612e 	ldfvse	f6, [r3, #-184]!
    2d38:	00000000 	andeq	r0, r0, r0
    2d3c:	02050000 	andeq	r0, r5, #0	; 0x0
    2d40:	00000000 	andeq	r0, r0, r0
    2d44:	0100ce03 	tsteq	r0, r3, lsl #28
    2d48:	01000602 	tsteq	r0, r2, lsl #12
    2d4c:	02050001 	andeq	r0, r5, #1	; 0x1
    2d50:	00000000 	andeq	r0, r0, r0
    2d54:	0100d203 	tsteq	r0, r3, lsl #4
    2d58:	01000602 	tsteq	r0, r2, lsl #12
    2d5c:	Address 0x00002d5c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 	undefined instruction 0xffffffff
       8:	7c010001 	stcvc	0, cr0, [r1], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000001c 	andeq	r0, r0, ip, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
      1c:	00000308 	andeq	r0, r0, r8, lsl #6
      20:	42140e42 	andsmi	r0, r4, #1056	; 0x420
      24:	018e180e 	orreq	r1, lr, lr, lsl #16
      28:	03860287 	orreq	r0, r6, #1879048200	; 0x70000008
      2c:	05840485 	streq	r0, [r4, #1157]
      30:	0000000c 	.word	0x0000000c
      34:	ffffffff 	.word	0xffffffff
      38:	7c010001 	.word	0x7c010001
      3c:	000d0c0e 	.word	0x000d0c0e
      40:	0000000c 	.word	0x0000000c
      44:	00000030 	.word	0x00000030
      48:	0800343c 	.word	0x0800343c
      4c:	00000002 	.word	0x00000002
      50:	0000000c 	.word	0x0000000c
      54:	00000030 	.word	0x00000030
      58:	08003440 	.word	0x08003440
      5c:	00000002 	.word	0x00000002
      60:	0000000c 	.word	0x0000000c
      64:	00000030 	.word	0x00000030
      68:	08003444 	.word	0x08003444
      6c:	00000002 	.word	0x00000002
      70:	0000000c 	.word	0x0000000c
      74:	00000030 	.word	0x00000030
      78:	08003448 	.word	0x08003448
      7c:	00000002 	.word	0x00000002
      80:	0000000c 	.word	0x0000000c
      84:	00000030 	.word	0x00000030
      88:	0800344c 	.word	0x0800344c
      8c:	00000002 	.word	0x00000002
      90:	0000000c 	.word	0x0000000c
      94:	00000030 	.word	0x00000030
      98:	08003450 	.word	0x08003450
      9c:	00000002 	.word	0x00000002
      a0:	0000000c 	.word	0x0000000c
      a4:	00000030 	.word	0x00000030
      a8:	08003454 	.word	0x08003454
      ac:	00000002 	.word	0x00000002
      b0:	0000000c 	.word	0x0000000c
      b4:	00000030 	.word	0x00000030
      b8:	08003458 	.word	0x08003458
      bc:	00000002 	.word	0x00000002
      c0:	0000000c 	.word	0x0000000c
      c4:	00000030 	.word	0x00000030
      c8:	0800345c 	.word	0x0800345c
      cc:	00000002 	.word	0x00000002
      d0:	0000000c 	.word	0x0000000c
      d4:	00000030 	.word	0x00000030
      d8:	08003460 	.word	0x08003460
      dc:	00000002 	.word	0x00000002
      e0:	0000000c 	.word	0x0000000c
      e4:	00000030 	.word	0x00000030
      e8:	08003464 	.word	0x08003464
      ec:	00000002 	.word	0x00000002
      f0:	0000000c 	.word	0x0000000c
      f4:	00000030 	.word	0x00000030
      f8:	08003468 	.word	0x08003468
      fc:	00000002 	.word	0x00000002
     100:	0000000c 	.word	0x0000000c
     104:	00000030 	.word	0x00000030
     108:	0800346c 	.word	0x0800346c
/* set up for an interpolation from pose to nextpose over TIME
 milliseconds by setting servo speeds. */
void BioloidControllerEx_interpolateSetup(int time) {
	int i;
	int frames = (time/frameLength) + 1;
	nextframe_ = getMillis() + frameLength;
     10c:	00000002 	.word	0x00000002
	PrintString("BioloidEX BioloidControllerEx_interpolateSetup nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// set speed each servo...
	for (i = 0; i < poseSize; i++) {
     110:	0000000c 	.word	0x0000000c
/* set up for an interpolation from pose to nextpose over TIME
 milliseconds by setting servo speeds. */
void BioloidControllerEx_interpolateSetup(int time) {
	int i;
	int frames = (time/frameLength) + 1;
	nextframe_ = getMillis() + frameLength;
     114:	00000030 	.word	0x00000030
     118:	08003470 	.word	0x08003470
	PrintString("BioloidEX BioloidControllerEx_interpolateSetup nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// set speed each servo...
	for (i = 0; i < poseSize; i++) {
     11c:	00000002 	.word	0x00000002
     120:	0000000c 	.word	0x0000000c
     124:	00000030 	.word	0x00000030
		if (nextpose_[i] > pose_[i]) {
     128:	08003474 	.word	0x08003474
     12c:	00000002 	.word	0x00000002
			speed_[i] = (nextpose_[i] - pose_[i]) / frames + 1;
     130:	0000000c 	.word	0x0000000c
		} else {
			speed_[i] = (pose_[i] - nextpose_[i]) / frames + 1;
     134:	00000030 	.word	0x00000030
     138:	08003478 	.word	0x08003478
     13c:	00000002 	.word	0x00000002
	PrintString("BioloidEX BioloidControllerEx_interpolateSetup nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// set speed each servo...
	for (i = 0; i < poseSize; i++) {
     140:	0000000c 	.word	0x0000000c
     144:	00000030 	.word	0x00000030
		PrintString(" - ");
		TxD_Dec_U16(speed_[i]);
		PrintString("\n");
#endif
	}
	interpolating = 1;
     148:	0800347c 	.word	0x0800347c
     14c:	00000002 	.word	0x00000002
}
     150:	0000000c 	.word	0x0000000c
     154:	00000030 	.word	0x00000030
     158:	08003480 	.word	0x08003480
     15c:	00000002 	.word	0x00000002
     160:	0000000c 	.word	0x0000000c
     164:	00000030 	.word	0x00000030
     168:	08003484 	.word	0x08003484
	PrintString("\n");
#endif
}

/* new-style setup */
void Bioloid_Setup(int servo_cnt) {
     16c:	00000002 	.word	0x00000002
     170:	0000000c 	.word	0x0000000c
	/**id_ = (unsigned char *) malloc(servo_cnt * sizeof(unsigned char));
	 pose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
     174:	00000030 	.word	0x00000030
     178:	08003488 	.word	0x08003488
	for (i = 0; i < poseSize; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
     17c:	00000002 	.word	0x00000002
     180:	0000000c 	.word	0x0000000c
		nextpose_[i] = 512;
     184:	00000030 	.word	0x00000030
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
	for (i = 0; i < poseSize; i++) {
		id_[i] = i + 1;
     188:	0800348c 	.word	0x0800348c
		pose_[i] = 512;
     18c:	00000002 	.word	0x00000002
		nextpose_[i] = 512;
     190:	0000000c 	.word	0x0000000c
	 pose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
	for (i = 0; i < poseSize; i++) {
     194:	00000030 	.word	0x00000030
     198:	08003490 	.word	0x08003490
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
	}
	interpolating = 0;
     19c:	00000002 	.word	0x00000002
     1a0:	0000000c 	.word	0x0000000c
	nextframe_ = getMillis();
     1a4:	00000030 	.word	0x00000030
     1a8:	08003494 	.word	0x08003494
#ifdef MILLIS
	PrintString("BioloidEX nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
}
     1ac:	00000002 	.word	0x00000002
     1b0:	0000000c 	.word	0x0000000c
     1b4:	00000030 	.word	0x00000030
     1b8:	08003498 	.word	0x08003498
     1bc:	00000002 	.word	0x00000002
     1c0:	0000000c 	.word	0x0000000c
     1c4:	00000030 	.word	0x00000030
transition_t * sequence;                    // sequence we are running
int transitions;                    // how many transitions we have left to load


//  initializes serial1 transmit at baud, 8-N-1
void BioloidControllerEx() {
     1c8:	0800349c 	.word	0x0800349c
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
     1cc:	00000002 	.word	0x00000002
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
     1d0:	0000000c 	.word	0x0000000c
transition_t * sequence;                    // sequence we are running
int transitions;                    // how many transitions we have left to load


//  initializes serial1 transmit at baud, 8-N-1
void BioloidControllerEx() {
     1d4:	00000030 	.word	0x00000030
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
     1d8:	080034a0 	.word	0x080034a0
	 pose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
     1dc:	00000002 	.word	0x00000002
     1e0:	0000000c 	.word	0x0000000c
		pose_[i] = 512;
		nextpose_[i] = 512;
     1e4:	00000030 	.word	0x00000030
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
     1e8:	080034a4 	.word	0x080034a4
		nextpose_[i] = 512;
     1ec:	00000002 	.word	0x00000002
	/**id_ = (unsigned char *) malloc(AX12_MAX_SERVOS * sizeof(unsigned char));
	 pose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
     1f0:	0000000c 	.word	0x0000000c
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
	}
	frameLength = BIOLOID_FRAME_LENGTH;
     1f4:	00000030 	.word	0x00000030
     1f8:	080034a8 	.word	0x080034a8
	interpolating = 0;
     1fc:	00000002 	.word	0x00000002
	nextframe_ = getMillis();
     200:	0000000c 	.word	0x0000000c
     204:	00000030 	.word	0x00000030
#ifdef MILLIS
	PrintString("BioloidEX nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
}
     208:	080034ac 	.word	0x080034ac
     20c:	00000002 	.word	0x00000002
     210:	0000000c 	.word	0x0000000c
     214:	00000030 	.word	0x00000030
     218:	080034b0 	.word	0x080034b0
     21c:	00000002 	.word	0x00000002
     220:	0000000c 	.word	0x0000000c
#endif
		mDelay(25);
	}
}
/* write pose out to servos using sync write. */
void BioloidControllerEx_writePose() {
     224:	00000030 	.word	0x00000030
     228:	080034b4 	.word	0x080034b4
	int temp;
	dxl_set_txpacket_id (BROADCAST_ID);
     22c:	00000002 	.word	0x00000002
	dxl_set_txpacket_instruction (INST_SYNC_WRITE);
     230:	0000000c 	.word	0x0000000c
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
     234:	00000030 	.word	0x00000030
     238:	080034b8 	.word	0x080034b8
	dxl_set_txpacket_parameter(1, 2);
     23c:	00000002 	.word	0x00000002
     240:	0000000c 	.word	0x0000000c
     244:	00000030 	.word	0x00000030
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
     248:	080034bc 	.word	0x080034bc
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
     24c:	00000002 	.word	0x00000002
     250:	0000000c 	.word	0x0000000c
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
     254:	00000030 	.word	0x00000030
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
     258:	080034c0 	.word	0x080034c0
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
     25c:	00000002 	.word	0x00000002
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
     260:	0000000c 	.word	0x0000000c
     264:	00000030 	.word	0x00000030
     268:	080034c4 	.word	0x080034c4
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
     26c:	00000002 	.word	0x00000002
     270:	0000000c 	.word	0x0000000c
     274:	00000030 	.word	0x00000030
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
     278:	080034c8 	.word	0x080034c8
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
     27c:	00000002 	.word	0x00000002
	dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction (INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
     280:	0000000c 	.word	0x0000000c
     284:	00000030 	.word	0x00000030
     288:	080034cc 	.word	0x080034cc
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
	}
	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
     28c:	00000002 	.word	0x00000002
     290:	0000000c 	.word	0x0000000c
     294:	00000030 	.word	0x00000030
	dxl_txrx_packet();
     298:	080034d0 	.word	0x080034d0
	u16 CommStatus = dxl_get_result();
     29c:	00000002 	.word	0x00000002
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
     2a0:	0000000c 	.word	0x0000000c
		PrintErrorCode();
     2a4:	00000030 	.word	0x00000030
	else
		PrintCommStatus(CommStatus);
     2a8:	080034d4 	.word	0x080034d4
#endif
}
     2ac:	00000002 	.word	0x00000002
     2b0:	0000000c 	.word	0x0000000c
     2b4:	00000030 	.word	0x00000030
     2b8:	080034d8 	.word	0x080034d8
	}
	interpolating = 1;
}
/* interpolate our pose, this should be called at about 30Hz. */
#define WAIT_SLOP_FACTOR 10
int BioloidControllerEx_interpolateStep(bool fWait) {
     2bc:	00000002 	.word	0x00000002
     2c0:	0000000c 	.word	0x0000000c

	if (interpolating == 0)
     2c4:	00000030 	.word	0x00000030
		return 0;
	int i;
	int complete = poseSize;
     2c8:	080034dc 	.word	0x080034dc
	if (!fWait) {
     2cc:	00000002 	.word	0x00000002
		if (getMillis() < (nextframe_ - WAIT_SLOP_FACTOR)) {
     2d0:	0000000c 	.word	0x0000000c
     2d4:	00000030 	.word	0x00000030
     2d8:	080034e0 	.word	0x080034e0
			return (getMillis() - nextframe_); // We still have some time to do something...
     2dc:	00000002 	.word	0x00000002
     2e0:	0000000c 	.word	0x0000000c
     2e4:	00000030 	.word	0x00000030
#ifdef MILLIS
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	while (getMillis() < nextframe_);
     2e8:	080034e4 	.word	0x080034e4
     2ec:	00000002 	.word	0x00000002
     2f0:	0000000c 	.word	0x0000000c
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
     2f4:	00000030 	.word	0x00000030
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     2f8:	080034e8 	.word	0x080034e8
     2fc:	00000002 	.word	0x00000002
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
     300:	0000000c 	.word	0x0000000c
     304:	00000030 	.word	0x00000030
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     308:	080034ec 	.word	0x080034ec
		int diff = nextpose_[i] - pose_[i];
     30c:	00000002 	.word	0x00000002
     310:	0000000c 	.word	0x0000000c
     314:	00000030 	.word	0x00000030
     318:	080034f0 	.word	0x080034f0
     31c:	00000002 	.word	0x00000002
		if (diff == 0) {
     320:	0000000c 	.word	0x0000000c
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
     324:	00000030 	.word	0x00000030
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
     328:	080034f4 	.word	0x080034f4
		int diff = nextpose_[i] - pose_[i];
		if (diff == 0) {
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
     32c:	00000002 	.word	0x00000002
					pose_[i] = nextpose_[i];
     330:	0000000c 	.word	0x0000000c
					complete--;
     334:	00000030 	.word	0x00000030
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
     338:	080034f8 	.word	0x080034f8
     33c:	00000002 	.word	0x00000002
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
     340:	0000000c 	.word	0x0000000c
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
     344:	00000030 	.word	0x00000030
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
     348:	080034fc 	.word	0x080034fc
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     34c:	00000002 	.word	0x00000002
     350:	0000000c 	.word	0x0000000c
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif

	}
	if (complete <= 0)
     354:	00000030 	.word	0x00000030
		interpolating = 0;
     358:	08003500 	.word	0x08003500
	BioloidControllerEx_writePose();
     35c:	00000002 	.word	0x00000002
     360:	0000000c 	.word	0x0000000c
	return 0;
}
     364:	00000030 	.word	0x00000030
     368:	08003504 	.word	0x08003504
     36c:	00000002 	.word	0x00000002
     370:	0000000c 	.word	0x0000000c
     374:	00000030 	.word	0x00000030
     378:	08003508 	.word	0x08003508
     37c:	00000002 	.word	0x00000002
     380:	0000000c 	.word	0x0000000c
	for (i = 0; i < poseSize; i++)
		//nextpose_[i] = pgm_read_word_near(addr+1+i) << BIOLOID_SHIFT;
		nextpose_[i] = pgm_read_word_near(addr + 1 + i);
}
/* read in current servo positions to the pose. */
void BioloidControllerEx_readPose() {
     384:	00000030 	.word	0x00000030
     388:	0800350c 	.word	0x0800350c
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
		//pose_[i] = dxl_read_word(id_[i],AXM_PRESENT_POSITION_L)<<BIOLOID_SHIFT;
		pose_[i] = dxl_read_word(id_[i], AXM_PRESENT_POSITION_L);
     38c:	00000002 	.word	0x00000002
     390:	0000000c 	.word	0x0000000c
     394:	00000030 	.word	0x00000030
     398:	08003510 	.word	0x08003510
     39c:	00000002 	.word	0x00000002
		PrintChar(id_[i]);
		PrintString(" - ");
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
     3a0:	0000000c 	.word	0x0000000c

#ifdef DEBUG_BIOLOIDEX
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
     3a4:	00000030 	.word	0x00000030
     3a8:	08003514 	.word	0x08003514
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
	}
}
     3ac:	00000002 	.word	0x00000002
     3b0:	0000000c 	.word	0x0000000c
     3b4:	00000030 	.word	0x00000030
     3b8:	08003518 	.word	0x08003518
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitPosY[GaitCurrentLegNr] = -3 * g_InControlState.LegLiftHeight
				/ (3 + g_InControlState.gaitCur.HalfLiftHeight); // Easier to shift between div factor: /1 (3/3), /2 (3/6) and 3/4
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y
     3bc:	00000002 	.word	0x00000002
				/ g_InControlState.gaitCur.LiftDivFactor;
	}

	//Optional Half heigth Rear 5 LiftedPos (5 lifted positions)
	else if (((g_InControlState.gaitCur.NrLiftedPos == 5 && (LegStep == -2)))
     3c0:	0000000c 	.word	0x0000000c
     3c4:	00000030 	.word	0x00000030
     3c8:	0800351c 	.word	0x0800351c
     3cc:	00000002 	.word	0x00000002
     3d0:	0000000c 	.word	0x0000000c
     3d4:	00000030 	.word	0x00000030
     3d8:	08003520 	.word	0x08003520
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = -g_InControlState.TravelLength.x / 2;
     3dc:	00000002 	.word	0x00000002
     3e0:	0000000c 	.word	0x0000000c
     3e4:	00000030 	.word	0x00000030
     3e8:	08003524 	.word	0x08003524
     3ec:	00000002 	.word	0x00000002
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
     3f0:	0000000c 	.word	0x0000000c
     3f4:	00000030 	.word	0x00000030
     3f8:	08003528 	.word	0x08003528
     3fc:	00000002 	.word	0x00000002
     400:	0000000c 	.word	0x0000000c
		GaitPosZ[GaitCurrentLegNr] = -g_InControlState.TravelLength.z / 2;
     404:	00000030 	.word	0x00000030
     408:	0800352c 	.word	0x0800352c
     40c:	00000002 	.word	0x00000002
     410:	0000000c 	.word	0x0000000c
		GaitRotY[GaitCurrentLegNr] = -g_InControlState.TravelLength.y / 2;
     414:	00000030 	.word	0x00000030
     418:	08003530 	.word	0x08003530
     41c:	00000002 	.word	0x00000002
     420:	0000000c 	.word	0x0000000c
	}

	//Optional Half heigth Front 5 LiftedPos (5 lifted positions)
	else if ((g_InControlState.gaitCur.NrLiftedPos == 5)
     424:	00000030 	.word	0x00000030
     428:	08003534 	.word	0x08003534
     42c:	00000002 	.word	0x00000002
     430:	0000000c 	.word	0x0000000c
     434:	00000030 	.word	0x00000030
     438:	08003538 	.word	0x08003538
			&& (LegStep == 2
					|| LegStep == -(g_InControlState.gaitCur.StepsInGait - 2))
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
     43c:	00000002 	.word	0x00000002
     440:	0000000c 	.word	0x0000000c
     444:	00000030 	.word	0x00000030
     448:	0800353c 	.word	0x0800353c
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
     44c:	00000002 	.word	0x00000002
     450:	00000014 	.word	0x00000014
     454:	00000030 	.word	0x00000030
     458:	08003540 	.word	0x08003540
     45c:	0000000c 	.word	0x0000000c
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
     460:	42040e42 	.word	0x42040e42
     464:	018e080e 	.word	0x018e080e
     468:	00000014 	.word	0x00000014
     46c:	00000030 	.word	0x00000030
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y / 2;
     470:	0800354c 	.word	0x0800354c
     474:	0000000c 	.word	0x0000000c
     478:	42040e42 	.word	0x42040e42
     47c:	018e080e 	.word	0x018e080e
	}
	//_B_
	//Leg front down position //bug here?  From _A_ to _B_ there should only be one gaitstep, not 2!
	//For example, where is the case of LegStep==0+2 executed when NRLiftedPos=3?
	else if ((LegStep == g_InControlState.gaitCur.FrontDownPos
     480:	00000014 	.word	0x00000014
     484:	00000030 	.word	0x00000030
     488:	08003558 	.word	0x08003558
     48c:	0000000c 	.word	0x0000000c
     490:	42040e42 	.word	0x42040e42
     494:	018e080e 	.word	0x018e080e
     498:	00000014 	.word	0x00000014
     49c:	00000030 	.word	0x00000030
			|| LegStep
					== -(g_InControlState.gaitCur.StepsInGait
							- g_InControlState.gaitCur.FrontDownPos))
			&& GaitPosY[GaitCurrentLegNr] < 0) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
     4a0:	08003564 	.word	0x08003564
     4a4:	0000000c 	.word	0x0000000c
     4a8:	42040e42 	.word	0x42040e42
     4ac:	018e080e 	.word	0x018e080e
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
     4b0:	0000000c 	.word	0x0000000c
     4b4:	ffffffff 	.word	0xffffffff
     4b8:	7c010001 	.word	0x7c010001
     4bc:	000d0c0e 	.word	0x000d0c0e
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y / 2;
     4c0:	0000000c 	.word	0x0000000c
     4c4:	000004b0 	.word	0x000004b0
     4c8:	00000000 	.word	0x00000000
		GaitPosY[GaitCurrentLegNr] = 0;
     4cc:	00000040 	.word	0x00000040
     4d0:	0000000c 	.word	0x0000000c
	}

	//Move body forward
	else {
		GaitPosX[GaitCurrentLegNr] = GaitPosX[GaitCurrentLegNr]
     4d4:	000004b0 	.word	0x000004b0
     4d8:	00000000 	.word	0x00000000
     4dc:	00000002 	.word	0x00000002
     4e0:	0000000c 	.word	0x0000000c
     4e4:	000004b0 	.word	0x000004b0
     4e8:	00000000 	.word	0x00000000
				- (g_InControlState.TravelLength.x
						/ (short) g_InControlState.gaitCur.TLDivFactor);
		GaitPosY[GaitCurrentLegNr] = 0;
     4ec:	00000044 	.word	0x00000044
     4f0:	0000000c 	.word	0x0000000c
     4f4:	000004b0 	.word	0x000004b0
		GaitPosZ[GaitCurrentLegNr] = GaitPosZ[GaitCurrentLegNr]
     4f8:	00000000 	.word	0x00000000
     4fc:	00000002 	.word	0x00000002
     500:	0000000c 	.word	0x0000000c
     504:	000004b0 	.word	0x000004b0
				- (g_InControlState.TravelLength.z
						/ (short) g_InControlState.gaitCur.TLDivFactor);
		GaitRotY[GaitCurrentLegNr] = GaitRotY[GaitCurrentLegNr]
     508:	00000000 	.word	0x00000000
     50c:	00000002 	.word	0x00000002
     510:	0000000c 	.word	0x0000000c
     514:	000004b0 	.word	0x000004b0
				- (g_InControlState.TravelLength.y
						/ (short) g_InControlState.gaitCur.TLDivFactor);
	}

}
     518:	00000000 	.word	0x00000000
     51c:	0000002c 	.word	0x0000002c
     520:	0000000c 	.word	0x0000000c
     524:	000004b0 	.word	0x000004b0
     528:	00000000 	.word	0x00000000
     52c:	00000002 	.word	0x00000002
     530:	0000000c 	.word	0x0000000c

}

//--------------------------------------------------------------------
//[GAIT Sequence]
void GaitSeq(void) {
     534:	000004b0 	.word	0x000004b0
	//Check if the Gait is in motion - If not if we are going to start a motion try to align our Gaitstep to start with a good foot
	// for the direction we are about to go...

	if (fWalking || (g_InControlState.ForceGaitStepCnt != 0))
     538:	00000000 	.word	0x00000000
     53c:	00000002 	.word	0x00000002
     540:	00000018 	.word	0x00000018
		TravelRequest = true;   // Is walking or was walking...
     544:	000004b0 	.word	0x000004b0
     548:	00000000 	.word	0x00000000
	else {
		TravelRequest = (abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
     54c:	00000160 	.word	0x00000160
     550:	8e0c0e4e 	.word	0x8e0c0e4e
     554:	84028501 	.word	0x84028501
     558:	00000003 	.word	0x00000003
     55c:	00000014 	.word	0x00000014
     560:	000004b0 	.word	0x000004b0
     564:	00000000 	.word	0x00000000
     568:	00000034 	.word	0x00000034
     56c:	4c040e42 	.word	0x4c040e42
     570:	018e080e 	.word	0x018e080e
     574:	00000018 	.word	0x00000018
     578:	000004b0 	.word	0x000004b0
     57c:	00000000 	.word	0x00000000
				|| (abs(g_InControlState.TravelLength.y) > cTravelDeadZone);

		if (TravelRequest) {

		} else {    //Clear values under the cTravelDeadZone
			g_InControlState.TravelLength.x = 0;
     580:	000002dc 	.word	0x000002dc
			g_InControlState.TravelLength.z = 0;
     584:	8e0c0e42 	.word	0x8e0c0e42
			g_InControlState.TravelLength.y = 0; //Gait NOT in motion, return to home position
		}
	}

	//Calculate Gait sequence
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
     588:	84028501 	.word	0x84028501
     58c:	00000003 	.word	0x00000003
     590:	00000014 	.word	0x00000014
		Gait(LegIndex);
     594:	000004b0 	.word	0x000004b0
			g_InControlState.TravelLength.y = 0; //Gait NOT in motion, return to home position
		}
	}

	//Calculate Gait sequence
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
     598:	00000000 	.word	0x00000000
     59c:	000000ac 	.word	0x000000ac
     5a0:	8e080e42 	.word	0x8e080e42
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5a4:	00028401 	.word	0x00028401
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
     5a8:	00000018 	.word	0x00000018
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5ac:	000004b0 	.word	0x000004b0
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
     5b0:	00000000 	.word	0x00000000
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5b4:	000000ac 	.word	0x000000ac
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
		g_InControlState.GaitStep = 1;
     5b8:	8e0c0e44 	.word	0x8e0c0e44
     5bc:	84028501 	.word	0x84028501

	// If we have a force count decrement it now...
	if (g_InControlState.ForceGaitStepCnt)
     5c0:	00000003 	.word	0x00000003
     5c4:	00000018 	.word	0x00000018
		g_InControlState.ForceGaitStepCnt--;
     5c8:	000004b0 	.word	0x000004b0
}
     5cc:	00000000 	.word	0x00000000
     5d0:	00000184 	.word	0x00000184
     5d4:	8e100e44 	.word	0x8e100e44
     5d8:	85028601 	.word	0x85028601
     5dc:	00048403 	.word	0x00048403
}
//--------------------------------------------------------------------
//[BalanceBody]
void BalanceBody(void) {

	TotalTransZ = TotalTransZ / BalanceDivFactor;
     5e0:	00000014 	.word	0x00000014
     5e4:	000004b0 	.word	0x000004b0
     5e8:	00000000 	.word	0x00000000
     5ec:	000000cc 	.word	0x000000cc
     5f0:	8e080e44 	.word	0x8e080e44
	TotalTransX = TotalTransX / BalanceDivFactor;
     5f4:	00028401 	.word	0x00028401
     5f8:	0000000c 	.word	0x0000000c
     5fc:	000004b0 	.word	0x000004b0
	TotalTransY = TotalTransY / BalanceDivFactor;
     600:	00000000 	.word	0x00000000
     604:	00000030 	.word	0x00000030
     608:	00000018 	.word	0x00000018
     60c:	000004b0 	.word	0x000004b0

	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
		TotalXBal1 += 3600;

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
     610:	00000000 	.word	0x00000000
     614:	00000064 	.word	0x00000064
	TotalTransX = TotalTransX / BalanceDivFactor;
	TotalTransY = TotalTransY / BalanceDivFactor;

#ifndef QUADMODE // ??? on PhantomX Hex at no movment YBal1 = 1800, on Quad = 0...  Need to experiment
	if (TotalYBal1 > 0)        //Rotate balance circle by +/- 180 deg
		TotalYBal1 -= 1800;
     618:	8e0c0e46 	.word	0x8e0c0e46
     61c:	84028501 	.word	0x84028501
	else
		TotalYBal1 += 1800;
     620:	100e4c03 	.word	0x100e4c03
#endif

	if (TotalZBal1 < -1800) //Compensate for extreme balance positions that causes overflow
     624:	0000001c 	.word	0x0000001c
     628:	000004b0 	.word	0x000004b0
     62c:	00000000 	.word	0x00000000
		TotalZBal1 += 3600;
     630:	000000e0 	.word	0x000000e0
     634:	8e140e42 	.word	0x8e140e42

	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
     638:	86028701 	.word	0x86028701
     63c:	84048503 	.word	0x84048503
		TotalXBal1 += 3600;
     640:	180e4605 	.word	0x180e4605
     644:	0000001c 	.word	0x0000001c

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
     648:	000004b0 	.word	0x000004b0
     64c:	00000000 	.word	0x00000000
	TotalXBal1 = -TotalXBal1 / BalanceDivFactor;
     650:	000002d0 	.word	0x000002d0
     654:	8e140e42 	.word	0x8e140e42
	TotalZBal1 = TotalZBal1 / BalanceDivFactor;
     658:	86028701 	.word	0x86028701
	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
		TotalXBal1 += 3600;

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
	TotalXBal1 = -TotalXBal1 / BalanceDivFactor;
     65c:	84048503 	.word	0x84048503
     660:	480e4405 	.word	0x480e4405
	TotalZBal1 = TotalZBal1 / BalanceDivFactor;
     664:	0000001c 	.word	0x0000001c
     668:	000004b0 	.word	0x000004b0

}
     66c:	00000000 	.word	0x00000000
     670:	00000184 	.word	0x00000184
     674:	8e140e42 	.word	0x8e140e42
     678:	86028701 	.word	0x86028701
     67c:	84048503 	.word	0x84048503
     680:	200e4405 	.word	0x200e4405
     684:	0000000c 	.word	0x0000000c
     688:	000004b0 	.word	0x000004b0
//sin4        - Output Sinus of AngleDeg
//cos4          - Output Cosinus of AngleDeg
void GetSinCos(short AngleDeg1) {
	short ABSAngleDeg1;   //Absolute value of the Angle in Degrees, decimals = 1
	//Get the absolute value of AngleDeg
	if (AngleDeg1 < 0)
     68c:	00000000 	.word	0x00000000
     690:	0000001a 	.word	0x0000001a
		ABSAngleDeg1 = AngleDeg1 * -1;
     694:	0000001c 	.word	0x0000001c
     698:	000004b0 	.word	0x000004b0
	else
		ABSAngleDeg1 = AngleDeg1;

	//Shift rotation to a full circle of 360 deg -> AngleDeg // 360
	if (AngleDeg1 < 0)    //Negative values
		AngleDeg1 = 3600 - (ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600)));
     69c:	00000000 	.word	0x00000000
     6a0:	000000b0 	.word	0x000000b0
     6a4:	8e140e46 	.word	0x8e140e46
     6a8:	86028701 	.word	0x86028701
     6ac:	84048503 	.word	0x84048503
     6b0:	00000005 	.word	0x00000005
     6b4:	0000000c 	.word	0x0000000c
     6b8:	000004b0 	.word	0x000004b0
     6bc:	00000000 	.word	0x00000000
	else
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));

	if (AngleDeg1 >= 0 && AngleDeg1 <= 900)     // 0 to 90 deg
     6c0:	00000046 	.word	0x00000046
     6c4:	00000014 	.word	0x00000014
			{
		sin4 = pgm_read_word(&GetSin[AngleDeg1 / 5]); // 5 is the presision (0.5) of the table
     6c8:	000004b0 	.word	0x000004b0
     6cc:	00000000 	.word	0x00000000
     6d0:	00000038 	.word	0x00000038
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
     6d4:	4a040e44 	.word	0x4a040e44
     6d8:	018e080e 	.word	0x018e080e
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));

	if (AngleDeg1 >= 0 && AngleDeg1 <= 900)     // 0 to 90 deg
			{
		sin4 = pgm_read_word(&GetSin[AngleDeg1 / 5]); // 5 is the presision (0.5) of the table
     6dc:	0000001c 	.word	0x0000001c
     6e0:	000004b0 	.word	0x000004b0
     6e4:	00000000 	.word	0x00000000
     6e8:	0000008c 	.word	0x0000008c
     6ec:	8e140e42 	.word	0x8e140e42
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
     6f0:	86028701 	.word	0x86028701
     6f4:	84048503 	.word	0x84048503
     6f8:	180e5605 	.word	0x180e5605
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
     6fc:	0000000c 	.word	0x0000000c
     700:	000004b0 	.word	0x000004b0
     704:	00000000 	.word	0x00000000
     708:	00000002 	.word	0x00000002
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     70c:	0000000c 	.word	0x0000000c
     710:	000004b0 	.word	0x000004b0
     714:	00000000 	.word	0x00000000
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     718:	00000002 	.word	0x00000002
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     71c:	00000014 	.word	0x00000014
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     720:	000004b0 	.word	0x000004b0
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     724:	00000000 	.word	0x00000000
     728:	0000003c 	.word	0x0000003c
     72c:	44040e42 	.word	0x44040e42
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     730:	018e080e 	.word	0x018e080e
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     734:	00000014 	.word	0x00000014
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     738:	000004b0 	.word	0x000004b0
     73c:	00000000 	.word	0x00000000
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
     740:	0000009c 	.word	0x0000009c
     744:	44040e42 	.word	0x44040e42
     748:	018e080e 	.word	0x018e080e
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     74c:	00000014 	.word	0x00000014
     750:	000004b0 	.word	0x000004b0
     754:	00000000 	.word	0x00000000
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     758:	0000001c 	.word	0x0000001c
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     75c:	44040e42 	.word	0x44040e42
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     760:	018e080e 	.word	0x018e080e
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     764:	00000014 	.word	0x00000014
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     768:	000004b0 	.word	0x000004b0
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     76c:	00000000 	.word	0x00000000
     770:	00000044 	.word	0x00000044
     774:	44040e42 	.word	0x44040e42
     778:	018e080e 	.word	0x018e080e
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     77c:	0000001c 	.word	0x0000001c
     780:	000004b0 	.word	0x000004b0
     784:	00000000 	.word	0x00000000
     788:	00000090 	.word	0x00000090
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
     78c:	8e140e42 	.word	0x8e140e42
     790:	86028701 	.word	0x86028701
     794:	84048503 	.word	0x84048503
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     798:	180e4405 	.word	0x180e4405
     79c:	00000018 	.word	0x00000018
     7a0:	000004b0 	.word	0x000004b0
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7a4:	00000000 	.word	0x00000000
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7a8:	00000054 	.word	0x00000054
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7ac:	8e100e42 	.word	0x8e100e42
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7b0:	85028601 	.word	0x85028601
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7b4:	00048403 	.word	0x00048403
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7b8:	00000014 	.word	0x00000014
     7bc:	000004b0 	.word	0x000004b0
     7c0:	00000000 	.word	0x00000000
     7c4:	00000038 	.word	0x00000038
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7c8:	42040e42 	.word	0x42040e42
     7cc:	018e080e 	.word	0x018e080e
     7d0:	00000018 	.word	0x00000018
	//Shift rotation to a full circle of 360 deg -> AngleDeg // 360
	if (AngleDeg1 < 0)    //Negative values
		AngleDeg1 = 3600 - (ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600)));
	else
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));
     7d4:	000004b0 	.word	0x000004b0
     7d8:	00000000 	.word	0x00000000
     7dc:	00000038 	.word	0x00000038
     7e0:	440c0e42 	.word	0x440c0e42
     7e4:	018e100e 	.word	0x018e100e
     7e8:	03840285 	.word	0x03840285
     7ec:	00000014 	.word	0x00000014
     7f0:	000004b0 	.word	0x000004b0
     7f4:	00000000 	.word	0x00000000
     7f8:	00000034 	.word	0x00000034
	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
	}
}
     7fc:	4e040e42 	.word	0x4e040e42
     800:	018e080e 	.word	0x018e080e
     804:	00000014 	.word	0x00000014
     808:	000004b0 	.word	0x000004b0
     80c:	00000000 	.word	0x00000000
//cos4        - Input Cosinus
//AngleRad4     - Output Angle in AngleRad4
long GetArcCos(short cos4) {
	boolean NegativeValue/*:1*/;    //If the the value is Negative
	//Check for negative value
	if (cos4 < 0) {
     810:	00000124 	.word	0x00000124
     814:	8e080e46 	.word	0x8e080e46
     818:	00028401 	.word	0x00028401
		cos4 = -cos4;
     81c:	0000001c 	.word	0x0000001c
     820:	000004b0 	.word	0x000004b0
		NegativeValue = 1;
	} else
		NegativeValue = 0;

	//Limit cos4 to his maximal value
	cos4 = min(cos4, c4DEC);
     824:	00000000 	.word	0x00000000
     828:	000000ec 	.word	0x000000ec
     82c:	44140e42 	.word	0x44140e42

	if ((cos4 >= 0) && (cos4 < 9000)) {
     830:	018e200e 	.word	0x018e200e
     834:	03860287 	.word	0x03860287
     838:	05840485 	.word	0x05840485
		AngleRad4 = (byte) pgm_read_byte(&GetACos[cos4 / 79]);
     83c:	0000001c 	.word	0x0000001c
     840:	000004b0 	.word	0x000004b0
     844:	00000000 	.word	0x00000000
		AngleRad4 = ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255) ;
     848:	0000008c 	.word	0x0000008c
     84c:	8e140e48 	.word	0x8e140e48
	} else if ((cos4 >= 9000) && (cos4 < 9900)) {
     850:	86028701 	.word	0x86028701
     854:	84048503 	.word	0x84048503
     858:	200e6e05 	.word	0x200e6e05
     85c:	0000001c 	.word	0x0000001c
		AngleRad4 = (byte) pgm_read_byte(&GetACos[(cos4 - 9000) / 8 + 114]);
     860:	000004b0 	.word	0x000004b0
     864:	00000000 	.word	0x00000000
     868:	00000084 	.word	0x00000084
     86c:	42140e42 	.word	0x42140e42
     870:	018e180e 	.word	0x018e180e
     874:	03860287 	.word	0x03860287
		AngleRad4 = (long) ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255)
     878:	05840485 	.word	0x05840485
	} else if ((cos4 >= 9900) && (cos4 <= 10000)) {
     87c:	00000014 	.word	0x00000014
     880:	000004b0 	.word	0x000004b0
     884:	00000000 	.word	0x00000000
		AngleRad4 = (byte) pgm_read_byte(&GetACos[(cos4 - 9900) / 2 + 227]);
     888:	00000054 	.word	0x00000054
     88c:	8e080e42 	.word	0x8e080e42
     890:	00028401 	.word	0x00028401
		AngleRad4 = (long) ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255)
     894:	00000014 	.word	0x00000014
     898:	000004b0 	.word	0x000004b0
     89c:	00000000 	.word	0x00000000
     8a0:	0000005c 	.word	0x0000005c
     8a4:	42040e42 	.word	0x42040e42
     8a8:	018e080e 	.word	0x018e080e
     8ac:	0000001c 	.word	0x0000001c
	}

	//Add negative sign
	if (NegativeValue)
		AngleRad4 = 31416 - AngleRad4;
     8b0:	000004b0 	.word	0x000004b0
     8b4:	00000000 	.word	0x00000000
     8b8:	0000059c 	.word	0x0000059c
     8bc:	42140e42 	.word	0x42140e42
     8c0:	018e280e 	.word	0x018e280e

	return AngleRad4;
}
     8c4:	03860287 	.word	0x03860287
     8c8:	05840485 	.word	0x05840485
     8cc:	0000001c 	.word	0x0000001c
     8d0:	000004b0 	.word	0x000004b0
     8d4:	00000000 	.word	0x00000000
     8d8:	0000051c 	.word	0x0000051c

unsigned long isqrt32(unsigned long n) //
{
     8dc:	42140e42 	.word	0x42140e42
     8e0:	018e200e 	.word	0x018e200e

	root = 0;
	remainder = n;
	place = 0x40000000; // OR place = 0x4000; OR place = 0x40; - respectively

	while (place > remainder)
     8e4:	03860287 	.word	0x03860287
     8e8:	05840485 	.word	0x05840485
     8ec:	0000000c 	.word	0x0000000c
		place = place >> 2;
	while (place) {
		if (remainder >= root + place) {
     8f0:	ffffffff 	.word	0xffffffff
			remainder = remainder - root - place;
     8f4:	7c010001 	.word	0x7c010001
     8f8:	000d0c0e 	.word	0x000d0c0e
			root = root + (place << 1);
     8fc:	0000000c 	.word	0x0000000c

	while (place > remainder)
		place = place >> 2;
	while (place) {
		if (remainder >= root + place) {
			remainder = remainder - root - place;
     900:	000008ec 	.word	0x000008ec
			root = root + (place << 1);
		}
		root = root >> 1;
		place = place >> 2;
     904:	00000000 	.word	0x00000000
	remainder = n;
	place = 0x40000000; // OR place = 0x4000; OR place = 0x40; - respectively

	while (place > remainder)
		place = place >> 2;
	while (place) {
     908:	0000000c 	.word	0x0000000c
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
	XYhyp2 = isqrt32(
     90c:	0000000c 	.word	0x0000000c
//(GETATAN2) Simplyfied ArcTan2 function based on fixed point ArcCos
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
     910:	000008ec 	.word	0x000008ec
	XYhyp2 = isqrt32(
     914:	00000000 	.word	0x00000000
     918:	0000000c 	.word	0x0000000c
//(GETATAN2) Simplyfied ArcTan2 function based on fixed point ArcCos
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
     91c:	0000000c 	.word	0x0000000c
	XYhyp2 = isqrt32(
     920:	000008ec 	.word	0x000008ec
     924:	00000000 	.word	0x00000000
     928:	0000002c 	.word	0x0000002c
			((long) AtanX * AtanX * c4DEC) + ((long) AtanY * AtanY * c4DEC));
	GetArcCos(((long) AtanX * (long) c6DEC) / (long) XYhyp2);
     92c:	0000000c 	.word	0x0000000c
     930:	000008ec 	.word	0x000008ec
     934:	00000000 	.word	0x00000000
     938:	00000038 	.word	0x00000038
     93c:	0000000c 	.word	0x0000000c
     940:	000008ec 	.word	0x000008ec
     944:	00000000 	.word	0x00000000

	if (AtanY < 0) // removed overhead... Atan4 = AngleRad4 * (AtanY/abs(AtanY));
     948:	00000038 	.word	0x00000038
		Atan4 = -AngleRad4;
     94c:	00000014 	.word	0x00000014
	else
		Atan4 = AngleRad4;
     950:	000008ec 	.word	0x000008ec
	XYhyp2 = isqrt32(
			((long) AtanX * AtanX * c4DEC) + ((long) AtanY * AtanY * c4DEC));
	GetArcCos(((long) AtanX * (long) c6DEC) / (long) XYhyp2);

	if (AtanY < 0) // removed overhead... Atan4 = AngleRad4 * (AtanY/abs(AtanY));
		Atan4 = -AngleRad4;
     954:	00000000 	.word	0x00000000
	else
		Atan4 = AngleRad4;
     958:	00000030 	.word	0x00000030
     95c:	8e080e44 	.word	0x8e080e44
	return Atan4;
}
     960:	00028401 	.word	0x00028401
     964:	0000000c 	.word	0x0000000c
     968:	000008ec 	.word	0x000008ec
     96c:	00000000 	.word	0x00000000

}

//--------------------------------------------------------------------
//[BalCalcOneLeg]
void BalCalcOneLeg(long PosX, long PosZ, long PosY, byte BalLegNr) {
     970:	00000018 	.word	0x00000018
	long CPR_Y;            //Final Y value for centerpoint of rotation
	long CPR_Z;            //Final Z value for centerpoint of rotation

	long lAtan;
	//Calculating totals from center of the body to the feet
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BalLegNr]) + PosZ;
     974:	00000018 	.word	0x00000018
     978:	000008ec 	.word	0x000008ec
	CPR_X = (short) pgm_read_word(&cOffsetX[BalLegNr]) + PosX;
     97c:	00000000 	.word	0x00000000
     980:	00000070 	.word	0x00000070
	CPR_Y = 150 + PosY; // using the value 150 to lower the centerpoint of rotation 'g_InControlState.BodyPos.y +

	TotalTransY += (long) PosY;
     984:	8e100e42 	.word	0x8e100e42
     988:	85028601 	.word	0x85028601
     98c:	00048403 	.word	0x00048403
	TotalTransZ += (long) CPR_Z;
     990:	00000018 	.word	0x00000018
     994:	000008ec 	.word	0x000008ec
     998:	00000000 	.word	0x00000000
	TotalTransX += (long) CPR_X;
     99c:	0000005c 	.word	0x0000005c
     9a0:	440c0e42 	.word	0x440c0e42
     9a4:	018e100e 	.word	0x018e100e
     9a8:	03840285 	.word	0x03840285

	lAtan = GetATan2(CPR_X, CPR_Z);
     9ac:	00000014 	.word	0x00000014
	TotalYBal1 += (lAtan * 1800) / 31415;
     9b0:	000008ec 	.word	0x000008ec
     9b4:	00000000 	.word	0x00000000
     9b8:	0000005c 	.word	0x0000005c
     9bc:	8e080e42 	.word	0x8e080e42
     9c0:	00028401 	.word	0x00028401
     9c4:	0000001c 	.word	0x0000001c
     9c8:	000008ec 	.word	0x000008ec
     9cc:	00000000 	.word	0x00000000

	lAtan = GetATan2(CPR_X, CPR_Y);
     9d0:	00000098 	.word	0x00000098
     9d4:	44140e42 	.word	0x44140e42
	TotalZBal1 += ((lAtan * 1800) / 31415) - 900; //Rotate balance circle 90 deg
     9d8:	018e180e 	.word	0x018e180e
     9dc:	03860287 	.word	0x03860287
     9e0:	05840485 	.word	0x05840485
     9e4:	0000001c 	.word	0x0000001c
     9e8:	000008ec 	.word	0x000008ec
     9ec:	00000000 	.word	0x00000000
     9f0:	000000c8 	.word	0x000000c8
     9f4:	44140e42 	.word	0x44140e42
     9f8:	018e180e 	.word	0x018e180e
     9fc:	03860287 	.word	0x03860287

	lAtan = GetATan2(CPR_Z, CPR_Y);
     a00:	05840485 	.word	0x05840485
     a04:	0000001c 	.word	0x0000001c
	TotalXBal1 += ((lAtan * 1800) / 31415) - 900; //Rotate balance circle 90 deg
     a08:	000008ec 	.word	0x000008ec
     a0c:	00000000 	.word	0x00000000
     a10:	00000038 	.word	0x00000038
     a14:	8e140e42 	.word	0x8e140e42
     a18:	86028701 	.word	0x86028701
     a1c:	84048503 	.word	0x84048503
     a20:	180e4405 	.word	0x180e4405
     a24:	0000000c 	.word	0x0000000c

}
     a28:	ffffffff 	.word	0xffffffff
     a2c:	7c010001 	.word	0x7c010001
     a30:	000d0c0e 	.word	0x000d0c0e
     a34:	0000000c 	.word	0x0000000c
     a38:	00000a24 	.word	0x00000a24
     a3c:	08003570 	.word	0x08003570
     a40:	00000018 	.word	0x00000018
     a44:	0000000c 	.word	0x0000000c
     a48:	00000a24 	.word	0x00000a24
     a4c:	08003588 	.word	0x08003588
//SinG                  - Sin buffer for BodyRotZ
//CosG               - Cos buffer for BodyRotZ
//BodyFKPosX         - Output Position X of feet with Rotation
//BodyFKPosY         - Output Position Y of feet with Rotation
//BodyFKPosZ         - Output Position Z of feet with Rotation
void BodyFK(short PosX, short PosZ, short PosY, short RotationY, byte BodyIKLeg) {
     a50:	00000030 	.word	0x00000030
     a54:	0000001c 	.word	0x0000001c
	short CPR_X;            //Final X value for centerpoint of rotation
	short CPR_Y;            //Final Y value for centerpoint of rotation
	short CPR_Z;            //Final Z value for centerpoint of rotation

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
     a58:	00000a24 	.word	0x00000a24
     a5c:	080035b8 	.word	0x080035b8
     a60:	0000006c 	.word	0x0000006c
//SinG                  - Sin buffer for BodyRotZ
//CosG               - Cos buffer for BodyRotZ
//BodyFKPosX         - Output Position X of feet with Rotation
//BodyFKPosY         - Output Position Y of feet with Rotation
//BodyFKPosZ         - Output Position Z of feet with Rotation
void BodyFK(short PosX, short PosZ, short PosY, short RotationY, byte BodyIKLeg) {
     a64:	44140e42 	.word	0x44140e42
	short CPR_X;            //Final X value for centerpoint of rotation
	short CPR_Y;            //Final Y value for centerpoint of rotation
	short CPR_Z;            //Final Z value for centerpoint of rotation

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
     a68:	018e200e 	.word	0x018e200e
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
     a6c:	03860287 	.word	0x03860287
     a70:	05840485 	.word	0x05840485
     a74:	0000001c 	.word	0x0000001c

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     a78:	00000a24 	.word	0x00000a24

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BodyIKLeg]) + PosZ
     a7c:	08003624 	.word	0x08003624
     a80:	00000090 	.word	0x00000090
	//Successive global rotation matrix:
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
     a84:	44140e42 	.word	0x44140e42
     a88:	018e200e 	.word	0x018e200e

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BodyIKLeg]) + PosZ
     a8c:	03860287 	.word	0x03860287
	//Successive global rotation matrix:
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
     a90:	05840485 	.word	0x05840485
     a94:	0000001c 	.word	0x0000001c
	SinG4 = sin4;
     a98:	00000a24 	.word	0x00000a24
	CosG4 = cos4;
     a9c:	080036b4 	.word	0x080036b4
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
	SinG4 = sin4;
     aa0:	00000088 	.word	0x00000088
	CosG4 = cos4;
     aa4:	44140e42 	.word	0x44140e42
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
	SinG4 = sin4;
     aa8:	018e200e 	.word	0x018e200e
	CosG4 = cos4;

	GetSinCos(g_InControlState.BodyRot1.z + TotalZBal1);
     aac:	03860287 	.word	0x03860287
	SinB4 = sin4;
     ab0:	05840485 	.word	0x05840485
     ab4:	0000001c 	.word	0x0000001c
	CosB4 = cos4;
     ab8:	00000a24 	.word	0x00000a24

	GetSinCos(g_InControlState.BodyRot1.y + (RotationY * c1DEC) + TotalYBal1);
     abc:	0800373c 	.word	0x0800373c
     ac0:	00000058 	.word	0x00000058
     ac4:	8e140e42 	.word	0x8e140e42
     ac8:	86028701 	.word	0x86028701
     acc:	84048503 	.word	0x84048503

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     ad0:	200e4405 	.word	0x200e4405
     ad4:	0000001c 	.word	0x0000001c
     ad8:	00000a24 	.word	0x00000a24
     adc:	08003794 	.word	0x08003794
     ae0:	00000058 	.word	0x00000058
     ae4:	8e140e42 	.word	0x8e140e42
     ae8:	86028701 	.word	0x86028701
     aec:	84048503 	.word	0x84048503
     af0:	200e4405 	.word	0x200e4405
     af4:	00000018 	.word	0x00000018
     af8:	00000a24 	.word	0x00000a24
     afc:	080037ec 	.word	0x080037ec
     b00:	00000064 	.word	0x00000064
     b04:	8e0c0e44 	.word	0x8e0c0e44
     b08:	84028501 	.word	0x84028501
     b0c:	100e5003 	.word	0x100e5003
     b10:	00000014 	.word	0x00000014
     b14:	00000a24 	.word	0x00000a24
     b18:	08003850 	.word	0x08003850
     b1c:	0000001c 	.word	0x0000001c
     b20:	8e080e44 	.word	0x8e080e44
     b24:	00028401 	.word	0x00028401
     b28:	00000014 	.word	0x00000014
     b2c:	00000a24 	.word	0x00000a24
     b30:	0800386c 	.word	0x0800386c
     b34:	0000000c 	.word	0x0000000c
     b38:	42040e42 	.word	0x42040e42
     b3c:	018e080e 	.word	0x018e080e
     b40:	00000018 	.word	0x00000018
     b44:	00000a24 	.word	0x00000a24
     b48:	08003878 	.word	0x08003878
     b4c:	0000001c 	.word	0x0000001c
     b50:	8e0c0e42 	.word	0x8e0c0e42
     b54:	84028501 	.word	0x84028501
     b58:	100e4403 	.word	0x100e4403
     b5c:	00000014 	.word	0x00000014
     b60:	00000a24 	.word	0x00000a24
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     b64:	08003894 	.word	0x08003894
     b68:	0000004a 	.word	0x0000004a

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     b6c:	44040e42 	.word	0x44040e42
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     b70:	018e100e 	.word	0x018e100e
     b74:	00000014 	.word	0x00000014
     b78:	00000a24 	.word	0x00000a24
     b7c:	080038e0 	.word	0x080038e0
     b80:	00000076 	.word	0x00000076
     b84:	44040e42 	.word	0x44040e42
     b88:	018e100e 	.word	0x018e100e
     b8c:	00000014 	.word	0x00000014
     b90:	00000a24 	.word	0x00000a24
     b94:	08003958 	.word	0x08003958
     b98:	00000074 	.word	0x00000074
     b9c:	42040e42 	.word	0x42040e42
     ba0:	018e180e 	.word	0x018e180e
     ba4:	00000014 	.word	0x00000014
     ba8:	00000a24 	.word	0x00000a24
     bac:	080039cc 	.word	0x080039cc
     bb0:	00000070 	.word	0x00000070
     bb4:	44040e42 	.word	0x44040e42
     bb8:	018e180e 	.word	0x018e180e
     bbc:	00000014 	.word	0x00000014
     bc0:	00000a24 	.word	0x00000a24
     bc4:	08003a3c 	.word	0x08003a3c
     bc8:	0000000c 	.word	0x0000000c
     bcc:	42040e42 	.word	0x42040e42
     bd0:	018e080e 	.word	0x018e080e
     bd4:	00000014 	.word	0x00000014
     bd8:	00000a24 	.word	0x00000a24
     bdc:	08003a48 	.word	0x08003a48
     be0:	00000088 	.word	0x00000088
     be4:	8e080e46 	.word	0x8e080e46
     be8:	00028401 	.word	0x00028401
     bec:	00000014 	.word	0x00000014
     bf0:	00000a24 	.word	0x00000a24
     bf4:	08003ad0 	.word	0x08003ad0
     bf8:	00000094 	.word	0x00000094
     bfc:	44040e42 	.word	0x44040e42
     c00:	018e080e 	.word	0x018e080e
     c04:	00000014 	.word	0x00000014
     c08:	00000a24 	.word	0x00000a24
     c0c:	08003b64 	.word	0x08003b64
     c10:	00000030 	.word	0x00000030
     c14:	44040e42 	.word	0x44040e42
     c18:	018e080e 	.word	0x018e080e
     c1c:	00000014 	.word	0x00000014
     c20:	00000a24 	.word	0x00000a24
     c24:	08003b94 	.word	0x08003b94
     c28:	0000000c 	.word	0x0000000c
     c2c:	42040e42 	.word	0x42040e42
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * CosG4 / c4DEC
					- (long) CPR_Z * c2DEC * SinA4 / c4DEC * SinB4 / c4DEC
							* SinG4 / c4DEC
					- (long) CPR_Y * c2DEC * CosB4 / c4DEC * SinG4 / c4DEC))
			/ c2DEC;
	BodyFKPosY = ((long) CPR_Y * c2DEC
     c30:	018e080e 	.word	0x018e080e
	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     c34:	0000001c 	.word	0x0000001c
     c38:	00000a24 	.word	0x00000a24
     c3c:	08003ba0 	.word	0x08003ba0
     c40:	00000028 	.word	0x00000028
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * CosG4 / c4DEC
					- (long) CPR_Z * c2DEC * SinA4 / c4DEC * SinB4 / c4DEC
							* SinG4 / c4DEC
					- (long) CPR_Y * c2DEC * CosB4 / c4DEC * SinG4 / c4DEC))
			/ c2DEC;
	BodyFKPosY = ((long) CPR_Y * c2DEC
     c44:	8e140e42 	.word	0x8e140e42
     c48:	86028701 	.word	0x86028701
     c4c:	84048503 	.word	0x84048503
     c50:	180e4405 	.word	0x180e4405
     c54:	00000014 	.word	0x00000014
     c58:	00000a24 	.word	0x00000a24
     c5c:	08003bc8 	.word	0x08003bc8
     c60:	0000000c 	.word	0x0000000c
     c64:	42040e42 	.word	0x42040e42
     c68:	018e080e 	.word	0x018e080e
     c6c:	00000014 	.word	0x00000014
     c70:	00000a24 	.word	0x00000a24
     c74:	08003bd4 	.word	0x08003bd4
     c78:	00000012 	.word	0x00000012
     c7c:	42040e42 	.word	0x42040e42
     c80:	018e080e 	.word	0x018e080e
     c84:	0000000c 	.word	0x0000000c
     c88:	ffffffff 	.word	0xffffffff
     c8c:	7c010001 	.word	0x7c010001
     c90:	000d0c0e 	.word	0x000d0c0e
     c94:	0000000c 	.word	0x0000000c
     c98:	00000c84 	.word	0x00000c84
     c9c:	08003be8 	.word	0x08003be8
     ca0:	0000000c 	.word	0x0000000c
     ca4:	0000000c 	.word	0x0000000c
     ca8:	00000c84 	.word	0x00000c84
     cac:	08003bf4 	.word	0x08003bf4
     cb0:	0000000c 	.word	0x0000000c
     cb4:	0000000c 	.word	0x0000000c
     cb8:	00000c84 	.word	0x00000c84
     cbc:	08003c00 	.word	0x08003c00
     cc0:	0000000c 	.word	0x0000000c
     cc4:	0000000c 	.word	0x0000000c
     cc8:	00000c84 	.word	0x00000c84
     ccc:	08003c0c 	.word	0x08003c0c
     cd0:	0000000c 	.word	0x0000000c
     cd4:	0000000c 	.word	0x0000000c
     cd8:	00000c84 	.word	0x00000c84
     cdc:	08003c18 	.word	0x08003c18
     ce0:	0000000c 	.word	0x0000000c
     ce4:	0000000c 	.word	0x0000000c
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * SinG4 / c4DEC
					+ (long) CPR_Z * c2DEC * CosG4 / c4DEC * SinA4 / c4DEC
							* SinB4 / c4DEC
					+ (long) CPR_Y * c2DEC * CosB4 / c4DEC * CosG4 / c4DEC))
			/ c2DEC;
}
     ce8:	00000c84 	.word	0x00000c84
     cec:	08003c24 	.word	0x08003c24
     cf0:	00000024 	.word	0x00000024
     cf4:	0000000c 	.word	0x0000000c
     cf8:	00000c84 	.word	0x00000c84
     cfc:	08003c48 	.word	0x08003c48
     d00:	0000001c 	.word	0x0000001c
     d04:	0000000c 	.word	0x0000000c
     d08:	00000c84 	.word	0x00000c84
     d0c:	08003c64 	.word	0x08003c64
     d10:	00000020 	.word	0x00000020
     d14:	0000000c 	.word	0x0000000c
     d18:	00000c84 	.word	0x00000c84
     d1c:	08003c84 	.word	0x08003c84
//FemurAngle1           - Output Angle of Femur in degrees
//TibiaAngle1           - Output Angle of Tibia in degrees
//CoxaAngle1            - Output Angle of Coxa in degrees
//--------------------------------------------------------------------
void LegIK(short IKFeetPosX, short IKFeetPosY, short IKFeetPosZ,
		byte LegIKLegNr) {
     d20:	00000008 	.word	0x00000008
     d24:	0000000c 	.word	0x0000000c
     d28:	00000c84 	.word	0x00000c84
	long Temp1;
	long Temp2;
	long T3;

	//Calculate IKCoxaAngle and IKFeetPosXZ
	GetATan2(IKFeetPosX, IKFeetPosZ);
     d2c:	08003c8c 	.word	0x08003c8c
	CoxaAngle1[LegIKLegNr] = (((long) Atan4 * 180) / 3141)
     d30:	00000004 	.word	0x00000004
     d34:	0000000c 	.word	0x0000000c
     d38:	00000c84 	.word	0x00000c84
     d3c:	08003c90 	.word	0x08003c90
     d40:	00000004 	.word	0x00000004
     d44:	0000000c 	.word	0x0000000c
     d48:	00000c84 	.word	0x00000c84
     d4c:	08003c94 	.word	0x08003c94
     d50:	00000038 	.word	0x00000038
     d54:	00000018 	.word	0x00000018
	//Length between the Coxa and tars [foot]
	IKFeetPosXZ = XYhyp2 / c2DEC;

	//Using GetAtan2 for solving IKA1 and IKSW
	//IKA14 - Angle between SW line and the ground in radians
	IKA14 = GetATan2(IKFeetPosY - TarsOffsetY,
     d58:	00000c84 	.word	0x00000c84
     d5c:	08003ccc 	.word	0x08003ccc
     d60:	00000184 	.word	0x00000184
     d64:	440c0e42 	.word	0x440c0e42
     d68:	018e100e 	.word	0x018e100e
     d6c:	03840285 	.word	0x03840285
     d70:	00000018 	.word	0x00000018

	//IKSW2 - Length between femur axis and tars
	IKSW2 = XYhyp2;

	//IKA2 - Angle of the line S>W with respect to the femur in radians
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     d74:	00000c84 	.word	0x00000c84
     d78:	08003e50 	.word	0x08003e50
     d7c:	000000fc 	.word	0x000000fc
     d80:	460c0e42 	.word	0x460c0e42
					* (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))) * c4DEC
			+ ((long) IKSW2 * IKSW2));
	Temp2 = (long) (2 * (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])) * c2DEC
			* (unsigned long) IKSW2;
	T3 = Temp1 / (Temp2 / c4DEC);
	IKA24 = GetArcCos(T3);
     d84:	018e100e 	.word	0x018e100e
     d88:	03840285 	.word	0x03840285
     d8c:	00000014 	.word	0x00000014
     d90:	00000c84 	.word	0x00000c84
     d94:	08003f4c 	.word	0x08003f4c
     d98:	00000060 	.word	0x00000060
     d9c:	8e080e42 	.word	0x8e080e42
     da0:	00028401 	.word	0x00028401
     da4:	00000014 	.word	0x00000014
     da8:	00000c84 	.word	0x00000c84
     dac:	08003fac 	.word	0x08003fac
     db0:	00000038 	.word	0x00000038
     db4:	46040e42 	.word	0x46040e42

	FemurAngle1[LegIKLegNr] = -(long) (IKA14 + IKA24) * 180
     db8:	018e080e 	.word	0x018e080e
     dbc:	00000014 	.word	0x00000014
     dc0:	00000c84 	.word	0x00000c84
     dc4:	08003fe4 	.word	0x08003fe4
     dc8:	00000050 	.word	0x00000050
     dcc:	44040e42 	.word	0x44040e42
     dd0:	018e080e 	.word	0x018e080e
     dd4:	00000014 	.word	0x00000014
     dd8:	00000c84 	.word	0x00000c84
			/ 3141+ 900 + CFEMURHORNOFFSET1(LegIKLegNr);  //Normal

	//IKTibiaAngle
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     ddc:	08004034 	.word	0x08004034
	Temp2 = (long) (2 * (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])) * c2DEC
			* (unsigned long) IKSW2;
	T3 = Temp1 / (Temp2 / c4DEC);
	IKA24 = GetArcCos(T3);

	FemurAngle1[LegIKLegNr] = -(long) (IKA14 + IKA24) * 180
     de0:	00000030 	.word	0x00000030
			/ 3141+ 900 + CFEMURHORNOFFSET1(LegIKLegNr);  //Normal

	//IKTibiaAngle
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     de4:	46040e42 	.word	0x46040e42
     de8:	018e080e 	.word	0x018e080e
			+ ((long) (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr])
					* (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))) * c4DEC
			- ((long) IKSW2 * IKSW2));
	Temp2 = 2 * ((long) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])))
			* (long) ((byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]));
	GetArcCos(Temp1 / Temp2);
     dec:	00000014 	.word	0x00000014
     df0:	00000c84 	.word	0x00000c84
     df4:	08004064 	.word	0x08004064
     df8:	00000010 	.word	0x00000010
     dfc:	44040e42 	.word	0x44040e42
     e00:	018e080e 	.word	0x018e080e
     e04:	00000014 	.word	0x00000014
     e08:	00000c84 	.word	0x00000c84

	TibiaAngle1[LegIKLegNr] = -(1450 - (long) AngleRad4 * 180 / 3141
     e0c:	08004074 	.word	0x08004074
     e10:	00000048 	.word	0x00000048
     e14:	44040e42 	.word	0x44040e42
     e18:	018e080e 	.word	0x018e080e
     e1c:	00000014 	.word	0x00000014
     e20:	00000c84 	.word	0x00000c84
     e24:	080040bc 	.word	0x080040bc
     e28:	00000028 	.word	0x00000028
			+ CTIBIAHORNOFFSET1(LegIKLegNr)); //!!!!!!!!!!!!145 instead of 1800

	//Set the Solution quality
	if (IKSW2
     e2c:	44040e42 	.word	0x44040e42
			- ((long) IKSW2 * IKSW2));
	Temp2 = 2 * ((long) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])))
			* (long) ((byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]));
	GetArcCos(Temp1 / Temp2);

	TibiaAngle1[LegIKLegNr] = -(1450 - (long) AngleRad4 * 180 / 3141
     e30:	018e080e 	.word	0x018e080e
			+ CTIBIAHORNOFFSET1(LegIKLegNr)); //!!!!!!!!!!!!145 instead of 1800

	//Set the Solution quality
	if (IKSW2
     e34:	00000014 	.word	0x00000014
     e38:	00000c84 	.word	0x00000c84
     e3c:	080040e4 	.word	0x080040e4
     e40:	0000000c 	.word	0x0000000c
     e44:	42040e42 	.word	0x42040e42
			< ((word) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
					+ (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]) - 30)
					* c2DEC))
		IKSolution = 1;
     e48:	018e080e 	.word	0x018e080e
	else {
		if (IKSW2
     e4c:	00000014 	.word	0x00000014
     e50:	00000c84 	.word	0x00000c84
				< ((word) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
						+ (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))
						* c2DEC))
			IKSolutionWarning = 1;
     e54:	080040f0 	.word	0x080040f0
     e58:	00000028 	.word	0x00000028
		else
			IKSolutionError = 1;
     e5c:	42040e42 	.word	0x42040e42
	}

}
     e60:	018e080e 	.word	0x018e080e
     e64:	0000000c 	.word	0x0000000c
     e68:	ffffffff 	.word	0xffffffff
     e6c:	7c010001 	.word	0x7c010001
     e70:	000d0c0e 	.word	0x000d0c0e
     e74:	0000000c 	.word	0x0000000c
     e78:	00000e64 	.word	0x00000e64
     e7c:	08004118 	.word	0x08004118
     e80:	00000014 	.word	0x00000014
     e84:	0000000c 	.word	0x0000000c
     e88:	00000e64 	.word	0x00000e64
     e8c:	0800412c 	.word	0x0800412c
     e90:	0000000c 	.word	0x0000000c
     e94:	0000000c 	.word	0x0000000c
     e98:	00000e64 	.word	0x00000e64
     e9c:	08004138 	.word	0x08004138
     ea0:	0000000c 	.word	0x0000000c
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ea4:	0000000c 	.word	0x0000000c
	if (sVal < s) {
     ea8:	00000e64 	.word	0x00000e64
     eac:	08004144 	.word	0x08004144
		return s;
	}

	s = (short) pgm_read_word(sMax);
     eb0:	0000000c 	.word	0x0000000c
     eb4:	0000000c 	.word	0x0000000c
     eb8:	00000e64 	.word	0x00000e64

		return s;
	}
	return sVal;

}
     ebc:	08004150 	.word	0x08004150
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     ec0:	0000000c 	.word	0x0000000c
}

//--------------------------------------------------------------------
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
     ec4:	0000000c 	.word	0x0000000c
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     ec8:	00000e64 	.word	0x00000e64
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ecc:	0800415c 	.word	0x0800415c
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
     ed0:	0000000c 	.word	0x0000000c
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ed4:	0000000c 	.word	0x0000000c
	if (sVal < s) {
     ed8:	00000e64 	.word	0x00000e64
     edc:	08004168 	.word	0x08004168
     ee0:	00000010 	.word	0x00000010
		return s;
	}

	s = (short) pgm_read_word(sMax);
     ee4:	0000000c 	.word	0x0000000c
     ee8:	00000e64 	.word	0x00000e64
     eec:	08004178 	.word	0x08004178
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
     ef0:	0000000c 	.word	0x0000000c
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ef4:	0000000c 	.word	0x0000000c
	if (sVal < s) {
     ef8:	00000e64 	.word	0x00000e64
     efc:	08004184 	.word	0x08004184
     f00:	0000000c 	.word	0x0000000c
		return s;
	}

	s = (short) pgm_read_word(sMax);
     f04:	0000000c 	.word	0x0000000c
     f08:	00000e64 	.word	0x00000e64
     f0c:	08004190 	.word	0x08004190
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     f10:	0000000c 	.word	0x0000000c
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
     f14:	0000000c 	.word	0x0000000c
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     f18:	00000e64 	.word	0x00000e64
	if (sVal < s) {
     f1c:	0800419c 	.word	0x0800419c
     f20:	0000000c 	.word	0x0000000c
     f24:	0000000c 	.word	0x0000000c
		return s;
	}

	s = (short) pgm_read_word(sMax);
     f28:	00000e64 	.word	0x00000e64
     f2c:	080041a8 	.word	0x080041a8
     f30:	00000018 	.word	0x00000018
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
				FemurAngle1[LegIndex], &cFemurMin1[LegIndex],
				&cFemurMax1[LegIndex]);
		TibiaAngle1[LegIndex] = CheckServoAngleBounds(s++,
     f34:	00000018 	.word	0x00000018
     f38:	00000e64 	.word	0x00000e64
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     f3c:	080041c0 	.word	0x080041c0
     f40:	00000120 	.word	0x00000120
				TibiaAngle1[LegIndex], &cTibiaMin1[LegIndex],
				&cTibiaMax1[LegIndex]);

	}
#endif
}
     f44:	8e100e42 	.word	0x8e100e42
     f48:	85028601 	.word	0x85028601
     f4c:	00048403 	.word	0x00048403
     f50:	00000018 	.word	0x00000018
     f54:	00000e64 	.word	0x00000e64
     f58:	080042e0 	.word	0x080042e0
     f5c:	000000f8 	.word	0x000000f8
     f60:	440c0e42 	.word	0x440c0e42
     f64:	018e100e 	.word	0x018e100e
     f68:	03840285 	.word	0x03840285
     f6c:	00000014 	.word	0x00000014
// SmoothControl (From Zenta) -  This function makes the body
//            rotation and translation much smoother
//--------------------------------------------------------------------
short SmoothControl(short CtrlMoveInp, short CtrlMoveOut, byte CtrlDivider) {

	if (CtrlMoveOut < (CtrlMoveInp - 4))
     f70:	00000e64 	.word	0x00000e64
     f74:	080043d8 	.word	0x080043d8
		return CtrlMoveOut + abs((CtrlMoveOut - CtrlMoveInp) / CtrlDivider);
     f78:	00000044 	.word	0x00000044
     f7c:	44040e42 	.word	0x44040e42
     f80:	018e100e 	.word	0x018e100e
     f84:	00000014 	.word	0x00000014
     f88:	00000e64 	.word	0x00000e64
     f8c:	0800441c 	.word	0x0800441c
     f90:	0000000c 	.word	0x0000000c
	else if (CtrlMoveOut > (CtrlMoveInp + 4))
     f94:	42040e42 	.word	0x42040e42
		return CtrlMoveOut - abs((CtrlMoveOut - CtrlMoveInp) / CtrlDivider);
     f98:	018e080e 	.word	0x018e080e
     f9c:	00000014 	.word	0x00000014
     fa0:	00000e64 	.word	0x00000e64
     fa4:	08004428 	.word	0x08004428
     fa8:	00000030 	.word	0x00000030
     fac:	42040e42 	.word	0x42040e42
     fb0:	018e080e 	.word	0x018e080e

	return CtrlMoveInp;
}
     fb4:	0000000c 	.word	0x0000000c
// GetLegsXZLength -
//--------------------------------------------------------------------
word g_wLegsXZLength = 0xffff;
word GetLegsXZLength(void) {
	// Could save away or could do a little math on one leg...
	if (g_wLegsXZLength != 0xffff)
     fb8:	ffffffff 	.word	0xffffffff
     fbc:	7c010001 	.word	0x7c010001
     fc0:	000d0c0e 	.word	0x000d0c0e

//--------------------------------------------------------------------
// GetLegsXZLength -
//--------------------------------------------------------------------
word g_wLegsXZLength = 0xffff;
word GetLegsXZLength(void) {
     fc4:	00000014 	.word	0x00000014
	// Could save away or could do a little math on one leg...
	if (g_wLegsXZLength != 0xffff)
		return g_wLegsXZLength;

	return isqrt32((LegPosX[0] * LegPosX[0]) + (LegPosZ[0] * LegPosZ[0]));
     fc8:	00000fb4 	.word	0x00000fb4
     fcc:	08004458 	.word	0x08004458
     fd0:	0000002c 	.word	0x0000002c
     fd4:	44040e42 	.word	0x44040e42
     fd8:	018e080e 	.word	0x018e080e
     fdc:	00000014 	.word	0x00000014
}
     fe0:	00000fb4 	.word	0x00000fb4
     fe4:	08004484 	.word	0x08004484
     fe8:	000000f0 	.word	0x000000f0
     fec:	8e080e42 	.word	0x8e080e42

#ifndef MAX_XZ_LEG_ADJUST
#define MAX_XZ_LEG_ADJUST   (word)(cCoxaLength[0]+cTibiaLength[0] + cFemurLength[0]/4)
#endif

void AdjustLegPositions(word XZLength1) {
     ff0:	00028401 	.word	0x00028401
     ff4:	00000014 	.word	0x00000014
     ff8:	00000fb4 	.word	0x00000fb4
     ffc:	08004574 	.word	0x08004574
    1000:	00000042 	.word	0x00000042
		XZLength1 = MAX_XZ_LEG_ADJUST;
	if (XZLength1 < MIN_XZ_LEG_ADJUST)
		XZLength1 = MIN_XZ_LEG_ADJUST;

	// see if same length as when we came in
	if (XZLength1 == g_wLegsXZLength)
    1004:	44040e42 	.word	0x44040e42
    1008:	018e080e 	.word	0x018e080e
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		GetSinCos((short) pgm_read_word(&cCoxaAngle1[LegIndex]));

		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
    100c:	00000018 	.word	0x00000018

	// see if same length as when we came in
	if (XZLength1 == g_wLegsXZLength)
		return;

	g_wLegsXZLength = XZLength1;
    1010:	00000fb4 	.word	0x00000fb4

	u8 LegIndex;
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		GetSinCos((short) pgm_read_word(&cCoxaAngle1[LegIndex]));
    1014:	080045b8 	.word	0x080045b8
    1018:	0000003e 	.word	0x0000003e

		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
    101c:	8e100e42 	.word	0x8e100e42
    1020:	85028601 	.word	0x85028601
    1024:	00048403 	.word	0x00048403
    1028:	0000000c 	.word	0x0000000c
    102c:	ffffffff 	.word	0xffffffff
    1030:	7c010001 	.word	0x7c010001
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
    1034:	000d0c0e 	.word	0x000d0c0e
    1038:	00000014 	.word	0x00000014
    103c:	00001028 	.word	0x00001028
    1040:	080045f8 	.word	0x080045f8
    1044:	00000024 	.word	0x00000024
    1048:	44040e42 	.word	0x44040e42
		return;

	g_wLegsXZLength = XZLength1;

	u8 LegIndex;
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    104c:	018e080e 	.word	0x018e080e
		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
	}

	// Make sure we cycle through one gait to have the legs all move into their new locations...
	g_InControlState.ForceGaitStepCnt = g_InControlState.gaitCur.StepsInGait;
    1050:	0000000c 	.word	0x0000000c
    1054:	ffffffff 	.word	0xffffffff
}
    1058:	7c010001 	.word	0x7c010001
    105c:	000d0c0e 	.word	0x000d0c0e
    1060:	00000014 	.word	0x00000014
    1064:	00001050 	.word	0x00001050
    1068:	0800461c 	.word	0x0800461c
    106c:	0000002c 	.word	0x0000002c
    1070:	44040e42 	.word	0x44040e42
    1074:	018e080e 	.word	0x018e080e
    1078:	0000000c 	.word	0x0000000c
		g_InControlState.aCoxaInitAngle1[LegIndex] = (short)pgm_read_word(&cCoxaAngle1[LegIndex]);
#endif
	}
	g_wLegsXZLength = 0xffff;
#endif
}
    107c:	ffffffff 	.word	0xffffffff
		else if (g_InControlState.aCoxaInitAngle1[LegIndex] < -700)
		g_InControlState.aCoxaInitAngle1[LegIndex] = -700;
	}
	g_wLegsXZLength = 0xffff;
#endif
}
    1080:	7c010001 	.word	0x7c010001
//     to be appropriate for the current y location of the body...
//--------------------------------------------------------------------

u8 g_iLegInitIndex = 0x00; // remember which index we are currently using...

void AdjustLegPositionsToBodyHeight() {
    1084:	000d0c0e 	.word	0x000d0c0e
    1088:	00000018 	.word	0x00000018
#ifdef CNT_HEX_INITS
	// Lets see which of our units we should use...
	// Note: We will also limit our body height here...
	if (g_InControlState.BodyPos.y
    108c:	00001078 	.word	0x00001078
			> (short) pgm_read_byte(&g_abHexMaxBodyY[CNT_HEX_INITS-1]))
		g_InControlState.BodyPos.y = (short) pgm_read_byte(
    1090:	08004648 	.word	0x08004648
				&g_abHexMaxBodyY[CNT_HEX_INITS-1]);

	u8 i;
	word XZLength1 = pgm_read_byte(&g_abHexIntXZ[CNT_HEX_INITS-1]);
	for (i = 0; i < (CNT_HEX_INITS - 1); i++) { // Don't need to look at last entry as we already init to assume this one...
		if (g_InControlState.BodyPos.y
    1094:	0000003c 	.word	0x0000003c
    1098:	420c0e42 	.word	0x420c0e42
				<= (short) pgm_read_byte(&g_abHexMaxBodyY[i])) {
			XZLength1 = pgm_read_byte(&g_abHexIntXZ[i]);
			break;
		}
	}
	if (i != g_iLegInitIndex) {
    109c:	018e100e 	.word	0x018e100e
				&g_abHexMaxBodyY[CNT_HEX_INITS-1]);

	u8 i;
	word XZLength1 = pgm_read_byte(&g_abHexIntXZ[CNT_HEX_INITS-1]);
	for (i = 0; i < (CNT_HEX_INITS - 1); i++) { // Don't need to look at last entry as we already init to assume this one...
		if (g_InControlState.BodyPos.y
    10a0:	03840285 	.word	0x03840285
    10a4:	00000014 	.word	0x00000014
    10a8:	00001078 	.word	0x00001078
				<= (short) pgm_read_byte(&g_abHexMaxBodyY[i])) {
			XZLength1 = pgm_read_byte(&g_abHexIntXZ[i]);
			break;
		}
	}
	if (i != g_iLegInitIndex) {
    10ac:	08004684 	.word	0x08004684
		g_iLegInitIndex = i;  // remember the current index...
		AdjustLegPositions(XZLength1);
    10b0:	0000000e 	.word	0x0000000e
	}
#endif // CNT_HEX_INITS
}
    10b4:	44040e42 	.word	0x44040e42
    10b8:	018e080e 	.word	0x018e080e
    10bc:	0000000c 	.word	0x0000000c
}
//--------------------------------------------------------------------
//[CHECK VOLTAGE]
//Reads the input voltage and shuts down the bot when the power drops
byte s_bLVBeepCnt;
boolean CheckVoltage() {
    10c0:	ffffffff 	.word	0xffffffff
    10c4:	7c010001 	.word	0x7c010001
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10c8:	000d0c0e 	.word	0x000d0c0e

	// BUGBUG:: if voltage is 0 it failed to retrieve don't hang program...
	//    if (!Voltage)
	//      return;

	if (!g_fLowVoltageShutdown) {
    10cc:	0000000c 	.word	0x0000000c
boolean CheckVoltage() {
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10d0:	000010bc 	.word	0x000010bc

	// BUGBUG:: if voltage is 0 it failed to retrieve don't hang program...
	//    if (!Voltage)
	//      return;

	if (!g_fLowVoltageShutdown) {
    10d4:	08004694 	.word	0x08004694
boolean CheckVoltage() {
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10d8:	00000040 	.word	0x00000040

	if (!g_fLowVoltageShutdown) {
		/**PrintString("Voltage : ");
		Printu32d(Voltage);
		PrintString("\n");*/
		if ((Voltage < cTurnOffVol) || (Voltage >= 1999)) {
    10dc:	00000014 	.word	0x00000014
    10e0:	000010bc 	.word	0x000010bc
    10e4:	080046d4 	.word	0x080046d4


			//Turn off
			g_InControlState.BodyPos.x = 0;
    10e8:	00000016 	.word	0x00000016
			g_InControlState.TravelLength.x = 0;
			g_InControlState.TravelLength.z = 0;

#ifdef OPT_SINGLELEG
			g_InControlState.TravelLength.y = 0;
			g_InControlState.SelectedLeg = 255;
    10ec:	4a040e42 	.word	0x4a040e42
    10f0:	018e080e 	.word	0x018e080e
#endif
			g_fLowVoltageShutdown = 1;
    10f4:	0000000c 	.word	0x0000000c
			s_bLVBeepCnt = 0;    // how many times we beeped...
    10f8:	000010bc 	.word	0x000010bc
		if ((Voltage < cTurnOffVol) || (Voltage >= 1999)) {


			//Turn off
			g_InControlState.BodyPos.x = 0;
			g_InControlState.BodyPos.y = 0;
    10fc:	080046ec 	.word	0x080046ec
			g_InControlState.BodyPos.z = 0;
			g_InControlState.BodyRot1.x = 0;
    1100:	00000028 	.word	0x00000028
			g_InControlState.BodyRot1.y = 0;
			g_InControlState.BodyRot1.z = 0;
    1104:	0000000c 	.word	0x0000000c
			g_InControlState.TravelLength.x = 0;
			g_InControlState.TravelLength.z = 0;
    1108:	000010bc 	.word	0x000010bc
#ifdef OPT_SINGLELEG
			g_InControlState.TravelLength.y = 0;
			g_InControlState.SelectedLeg = 255;
#endif
			g_fLowVoltageShutdown = 1;
			s_bLVBeepCnt = 0;    // how many times we beeped...
    110c:	08004714 	.word	0x08004714
			g_InControlState.fRobotOn = false;
    1110:	00000038 	.word	0x00000038
		}
#ifdef cTurnOnVol
	} else if ((Voltage > cTurnOnVol) && (Voltage < 1999)) {
    1114:	000c      	.short	0x000c
    1116:	0000      	.short	0x0000
    1118:	000010bc 	.word	0x000010bc

		g_fLowVoltageShutdown = 0;
    111c:	0800474c 	.word	0x0800474c
    1120:	00000038 	.word	0x00000038

#endif
	} else {
		if (s_bLVBeepCnt < 5) {
    1124:	0000000c 	.word	0x0000000c
    1128:	000010bc 	.word	0x000010bc
			s_bLVBeepCnt++;
    112c:	08004784 	.word	0x08004784

			//MSound( 1, 45, 2000);
			Buzzed(45, 2000);
    1130:	00000018 	.word	0x00000018
    1134:	00000014 	.word	0x00000014
    1138:	000010bc 	.word	0x000010bc
		}
		mDelay(2000);
    113c:	0800479c 	.word	0x0800479c
    1140:	000000fc 	.word	0x000000fc
    1144:	8e080e44 	.word	0x8e080e44
	}
#endif

	return g_fLowVoltageShutdown;
}
    1148:	00028401 	.word	0x00028401
    114c:	00000014 	.word	0x00000014
    1150:	000010bc 	.word	0x000010bc
    1154:	08004898 	.word	0x08004898
    1158:	00000038 	.word	0x00000038

//==============================================================================
// BackgroundProcess - Allows us to have some background processing for those
//    servo drivers that need us to do things like polling...
//==============================================================================
void BackgroundProcess(void) {
    115c:	44040e42 	.word	0x44040e42
    1160:	018e080e 	.word	0x018e080e
	if (g_fAXSpeedControl)
    1164:	0000000c 	.word	0x0000000c
		return;  // nothing to do in this mode...

	if (ServosEnabled) {
		//DebugToggle(A3);
		BioloidControllerEx_interpolateStep(false); // Do our background stuff...
    1168:	ffffffff 	.word	0xffffffff
		Battery_Monitor_Alarm();
    116c:	7c010001 	.word	0x7c010001
	}
}
    1170:	000d0c0e 	.word	0x000d0c0e
    1174:	00000014 	.word	0x00000014
//Function that gets called from the main loop if the robot is not logically
//     on.  Gives us a chance to play some...
//--------------------------------------------------------------------
static u8 g_iIdleServoNum = (u8) - 1;
static u8 g_iIdleLedState = 1;  // what state to we wish to set...
void IdleTime(void) {
    1178:	00001164 	.word	0x00001164
    117c:	080048d0 	.word	0x080048d0
	// Each time we call this set servos LED on or off...
	g_iIdleServoNum++;
    1180:	00000040 	.word	0x00000040
	if (g_iIdleServoNum >= NUMSERVOS) {
    1184:	44040e42 	.word	0x44040e42
    1188:	018e080e 	.word	0x018e080e
		g_iIdleServoNum = 0;
    118c:	00000014 	.word	0x00000014
		g_iIdleLedState = 1 - g_iIdleLedState;
    1190:	00001164 	.word	0x00001164
    1194:	08004910 	.word	0x08004910
	}
	dxl_write_byte(pgm_read_byte(&cPinTable[g_iIdleServoNum]), AXM_LED,
    1198:	00000024 	.word	0x00000024
    119c:	44040e42 	.word	0x44040e42
    11a0:	018e080e 	.word	0x018e080e
    11a4:	0000001c 	.word	0x0000001c
    11a8:	00001164 	.word	0x00001164
			g_iIdleLedState);
	//ax12ReadPacket(6);  // get the response...


}
    11ac:	08004934 	.word	0x08004934
    11b0:	000000e8 	.word	0x000000e8
    11b4:	42100e42 	.word	0x42100e42
    11b8:	018e280e 	.word	0x018e280e

//--------------------------------------------------------------------
//[SetRegOnAllServos] Function that is called to set the state of one
//  register in all of the servos, like Torque on...
//--------------------------------------------------------------------
void SetRegOnAllServos(u8 bReg, u8 bVal) {
    11bc:	03850286 	.word	0x03850286
    11c0:	00000484 	.word	0x00000484
    11c4:	0000001c 	.word	0x0000001c
	 ax12write(bVal);

  }
  ax12write(0xff - (checksum % 256));
  setRX(0);*/
	 dxl_set_txpacket_id (BROADCAST_ID);
    11c8:	00001164 	.word	0x00001164
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    11cc:	08004a1c 	.word	0x08004a1c
	dxl_set_txpacket_parameter(0,bReg);
    11d0:	000001d8 	.word	0x000001d8
    11d4:	42140e42 	.word	0x42140e42
	dxl_set_txpacket_parameter(1,2);
    11d8:	018e200e 	.word	0x018e200e
    11dc:	03860287 	.word	0x03860287
    11e0:	05840485 	.word	0x05840485
  int i;
	for (i = 0; i < poseSize; i++) {
		byte id = pgm_read_byte(&cPinTable[i]);
		dxl_set_txpacket_parameter(2 + 3 * i, id);
    11e4:	0000001c 	.word	0x0000001c
    11e8:	00001164 	.word	0x00001164
    11ec:	08004bf4 	.word	0x08004bf4
    11f0:	0000006e 	.word	0x0000006e
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
    11f4:	46100e42 	.word	0x46100e42
    11f8:	018e180e 	.word	0x018e180e
    11fc:	03850286 	.word	0x03850286
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
    1200:	00000484 	.word	0x00000484
    1204:	00000014 	.word	0x00000014
    1208:	00001164 	.word	0x00001164
	dxl_set_txpacket_parameter(1,2);
  int i;
	for (i = 0; i < poseSize; i++) {
		byte id = pgm_read_byte(&cPinTable[i]);
		dxl_set_txpacket_parameter(2 + 3 * i, id);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
    120c:	08004c64 	.word	0x08004c64
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
    1210:	00000094 	.word	0x00000094
	 dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0,bReg);
	dxl_set_txpacket_parameter(1,2);
  int i;
	for (i = 0; i < poseSize; i++) {
    1214:	42040e42 	.word	0x42040e42
    1218:	018e080e 	.word	0x018e080e
    121c:	00000014 	.word	0x00000014
		dxl_set_txpacket_parameter(2 + 3 * i, id);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
	}

	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
    1220:	00001164 	.word	0x00001164
    1224:	08004cf8 	.word	0x08004cf8
    1228:	0000002c 	.word	0x0000002c
#ifdef DEBUG_BIOLOIDEX
	PrintString("DriverAX12 --- SetRegOnAllServos ---\n");
#endif
	dxl_txrx_packet();
    122c:	46040e42 	.word	0x46040e42

	u16 CommStatus = dxl_get_result();
    1230:	018e080e 	.word	0x018e080e
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
    1234:	0000000c 	.word	0x0000000c
		PrintErrorCode();
    1238:	ffffffff 	.word	0xffffffff
	else
		PrintCommStatus(CommStatus);
    123c:	7c010001 	.word	0x7c010001
#endif
}
    1240:	000d0c0e 	.word	0x000d0c0e
    1244:	0000000c 	.word	0x0000000c
    1248:	00001234 	.word	0x00001234
//--------------------------------------------------------------------
//[MakeSureServosAreOn] Function that is called to handle when you are
//  transistioning from servos all off to being on.  May need to read
//  in the current pose...
//--------------------------------------------------------------------
void MakeSureServosAreOn(void) {
    124c:	08004d24 	.word	0x08004d24

	if (ServosEnabled) {

		if (!g_fServosFree)
    1250:	00000014 	.word	0x00000014
			return;    // we are not free

		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		if (g_fAXSpeedControl) {
    1254:	0000000c 	.word	0x0000000c
    1258:	00001234 	.word	0x00001234

			int i;
			for (i = 0; i < NUMSERVOS; i++) {
				g_awGoalAXPos[i] = dxl_read_word(pgm_read_byte(&cPinTable[i]),
    125c:	08004d38 	.word	0x08004d38
    1260:	0000003c 	.word	0x0000003c
    1264:	0000000c 	.word	0x0000000c
    1268:	00001234 	.word	0x00001234
						AXM_PRESENT_POSITION_L);
				mDelay(25);
    126c:	08004d74 	.word	0x08004d74
    1270:	00000028 	.word	0x00000028

		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		if (g_fAXSpeedControl) {

			int i;
			for (i = 0; i < NUMSERVOS; i++) {
    1274:	0000000c 	.word	0x0000000c
    1278:	00001234 	.word	0x00001234
				g_awGoalAXPos[i] = dxl_read_word(pgm_read_byte(&cPinTable[i]),
						AXM_PRESENT_POSITION_L);
				mDelay(25);
			}
		} else {
			BioloidControllerEx_readPose();
    127c:	08004d9c 	.word	0x08004d9c
		}

		SetRegOnAllServos(AXM_TORQUE_ENABLE, 1);  // Use sync write to do it.
    1280:	00000018 	.word	0x00000018
    1284:	0000000c 	.word	0x0000000c

		CommanderInputController_AllowControllerInterrupts(true);
		g_fServosFree = false;
    1288:	00001234 	.word	0x00001234
	}

}
    128c:	08004db4 	.word	0x08004db4
    1290:	00000048 	.word	0x00000048
    1294:	0000001c 	.word	0x0000001c
    1298:	00001234 	.word	0x00001234
    129c:	08004dfc 	.word	0x08004dfc

//------------------------------------------------------------------------------------------
//[BeginServoUpdate] Does whatever preperation that is needed to starrt a move of our servos
//------------------------------------------------------------------------------------------
void BeginServoUpdate(void)    // Start the update
		{
    12a0:	00000054 	.word	0x00000054

	MakeSureServosAreOn();
    12a4:	8e140e42 	.word	0x8e140e42
	if (ServosEnabled) {

		if (g_fAXSpeedControl) {
    12a8:	86028701 	.word	0x86028701
    12ac:	84048503 	.word	0x84048503

#ifdef USE_AX12_SPEED_CONTROL
			// If we are trying our own Servo control need to save away the new positions...
			byte i;
			for (i = 0; i < NUMSERVOS; i++) {
				g_awCurAXPos[i] = g_awGoalAXPos[i];
    12b0:	200e4805 	.word	0x200e4805
    12b4:	0000000c 	.word	0x0000000c
    12b8:	00001234 	.word	0x00001234
		if (g_fAXSpeedControl) {

#ifdef USE_AX12_SPEED_CONTROL
			// If we are trying our own Servo control need to save away the new positions...
			byte i;
			for (i = 0; i < NUMSERVOS; i++) {
    12bc:	08004e50 	.word	0x08004e50
				g_awCurAXPos[i] = g_awGoalAXPos[i];
			}
#endif
		} else
			BioloidControllerEx_interpolateStep(true); // Make sure we call at least once
    12c0:	0000002c 	.word	0x0000002c
    12c4:	0000001c 	.word	0x0000001c

	}
}
    12c8:	00001234 	.word	0x00001234
    12cc:	08004e7c 	.word	0x08004e7c
    12d0:	0000005c 	.word	0x0000005c
    12d4:	8e140e42 	.word	0x8e140e42
}

//--------------------------------------------------------------------
//[FREE SERVOS] Frees all the servos
//--------------------------------------------------------------------
void FreeServos(void) {
    12d8:	86028701 	.word	0x86028701
    12dc:	84048503 	.word	0x84048503

	if (!g_fServosFree) {
    12e0:	200e4805 	.word	0x200e4805
		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		SetRegOnAllServos(AXM_TORQUE_ENABLE, 0);  // do this as one statement...
    12e4:	0000000c 	.word	0x0000000c
    12e8:	00001234 	.word	0x00001234
    12ec:	08004ed8 	.word	0x08004ed8
		byte i;
		for (i = 0; i < NUMSERVOS; i++) {
			Relax(pgm_read_byte(&cPinTable[i]));
    12f0:	00000014 	.word	0x00000014
    12f4:	00000014 	.word	0x00000014
    12f8:	00001234 	.word	0x00001234

	if (!g_fServosFree) {
		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		SetRegOnAllServos(AXM_TORQUE_ENABLE, 0);  // do this as one statement...
		byte i;
		for (i = 0; i < NUMSERVOS; i++) {
    12fc:	08004eec 	.word	0x08004eec
			Relax(pgm_read_byte(&cPinTable[i]));
		}
		CommanderInputController_AllowControllerInterrupts(true);
		g_fServosFree = true;
    1300:	00000078 	.word	0x00000078
	}
}
    1304:	44040e42 	.word	0x44040e42
    1308:	018e080e 	.word	0x018e080e
    130c:	00000014 	.word	0x00000014
extern void SetRegOnAllServos(u8 bReg, u8 bVal);

//--------------------------------------------------------------------
//Init
//--------------------------------------------------------------------
void Servo_Init(void) {
    1310:	00001234 	.word	0x00001234
	// First lets get the actual servo positions for all of our servos...
	//pinMode(0, OUTPUT);
	g_fServosFree = true;
    1314:	08004f64 	.word	0x08004f64

  poseSize = NUMSERVOS;
    1318:	00000012 	.word	0x00000012
    131c:	46040e42 	.word	0x46040e42
  BioloidControllerEx_readPose();
    1320:	018e080e 	.word	0x018e080e
#ifdef cVoltagePin
	for (byte i=0; i < 8; i++)
	GetBatteryVoltage();  // init the voltage pin
#endif

	g_fAXSpeedControl = false;
    1324:	00000018 	.word	0x00000018
    1328:	00001234 	.word	0x00001234



	// Added - try to speed things up later if we do a query...
	SetRegOnAllServos(AXM_RETURN_DELAY_TIME, 0); // tell servos to give us back their info as quick as they can...
    132c:	08004f78 	.word	0x08004f78
    1330:	00000054 	.word	0x00000054

}
    1334:	8e100e42 	.word	0x8e100e42
    1338:	85028601 	.word	0x85028601
    133c:	00048403 	.word	0x00048403
    1340:	00000014 	.word	0x00000014

}

void setupPhoenix() {

	g_fShowDebugPrompt = true;
    1344:	00001234 	.word	0x00001234
void readSensors(){


}

void setupPhoenix() {
    1348:	08004fcc 	.word	0x08004fcc

	g_fShowDebugPrompt = true;
	g_fDebugOutput = false;
    134c:	00000014 	.word	0x00000014
    1350:	44040e42 	.word	0x44040e42
	//init BioloidEx
	BioloidControllerEx();
    1354:	018e080e 	.word	0x018e080e

	// Init our ServoDriver
	Servo_Init();
    1358:	00000014 	.word	0x00000014

	mDelay(10);
    135c:	00001234 	.word	0x00001234

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		LegPosX[LegIndex] = (short) pgm_read_word(&cInitPosX[LegIndex]); //Set start positions for each leg
    1360:	08004fe0 	.word	0x08004fe0
    1364:	00000024 	.word	0x00000024
		LegPosY[LegIndex] = (short) pgm_read_word(&cInitPosY[LegIndex]);
    1368:	44040e42 	.word	0x44040e42
    136c:	018e080e 	.word	0x018e080e
		LegPosZ[LegIndex] = (short) pgm_read_word(&cInitPosZ[LegIndex]);
    1370:	00000014 	.word	0x00000014

	mDelay(10);

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		LegPosX[LegIndex] = (short) pgm_read_word(&cInitPosX[LegIndex]); //Set start positions for each leg
    1374:	00001234 	.word	0x00001234
    1378:	08005004 	.word	0x08005004
		LegPosY[LegIndex] = (short) pgm_read_word(&cInitPosY[LegIndex]);
    137c:	00000014 	.word	0x00000014
    1380:	44040e42 	.word	0x44040e42
		LegPosZ[LegIndex] = (short) pgm_read_word(&cInitPosZ[LegIndex]);
    1384:	018e080e 	.word	0x018e080e
    1388:	00000018 	.word	0x00000018
    138c:	00001234 	.word	0x00001234
	Servo_Init();

	mDelay(10);

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    1390:	08005018 	.word	0x08005018
    1394:	00000060 	.word	0x00000060
    1398:	420c0e42 	.word	0x420c0e42

	ResetLegInitAngles();

	//Single leg control. Make sure no leg is selected
#ifdef OPT_SINGLELEG
	g_InControlState.SelectedLeg = 255; // No Leg selected
    139c:	018e200e 	.word	0x018e200e
    13a0:	03840285 	.word	0x03840285
	g_InControlState.PrevSelectedLeg = 255;
    13a4:	00000018 	.word	0x00000018
#endif
	//Body Positions
	g_InControlState.BodyPos.x = 0;
    13a8:	00001234 	.word	0x00001234
	g_InControlState.BodyPos.y = 0;
	g_InControlState.BodyPos.z = 0;
    13ac:	08005078 	.word	0x08005078

//Body Rotations
	g_InControlState.BodyRot1.x = 0;
	g_InControlState.BodyRot1.y = 0;
    13b0:	00000070 	.word	0x00000070
	g_InControlState.BodyRot1.z = 0;
	g_InControlState.BodyRotOffset.x = 0;
    13b4:	420c0e42 	.word	0x420c0e42
	g_InControlState.BodyRotOffset.y = 0; //Input Y offset value to adjust centerpoint of rotation
	g_InControlState.BodyRotOffset.z = 0;
    13b8:	018e200e 	.word	0x018e200e

	//Gait
	g_InControlState.GaitType = 0;
    13bc:	03840285 	.word	0x03840285
	g_InControlState.BalanceMode = 0;
    13c0:	00000018 	.word	0x00000018
	g_InControlState.LegLiftHeight = 50;
	g_InControlState.ForceGaitStepCnt = 0; // added to try to adjust starting positions depending on height...
    13c4:	00001234 	.word	0x00001234
	g_InControlState.GaitStep = 1;
    13c8:	080050e8 	.word	0x080050e8
}

void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {
    13cc:	00000060 	.word	0x00000060
	g_InControlState.BodyRotOffset.z = 0;

	//Gait
	g_InControlState.GaitType = 0;
	g_InControlState.BalanceMode = 0;
	g_InControlState.LegLiftHeight = 50;
    13d0:	420c0e42 	.word	0x420c0e42
    13d4:	018e200e 	.word	0x018e200e
void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {

		g_InControlState.gaitCur = APG[g_InControlState.GaitType];
    13d8:	03840285 	.word	0x03840285
    13dc:	00000014 	.word	0x00000014
    13e0:	00001234 	.word	0x00001234
//==============================================================================

// If both PS2 and XBee are defined then we will become secondary to the xbee
void CommanderInputController_Init(void) {

	g_BodyYOffset = 0;
    13e4:	08005148 	.word	0x08005148
    13e8:	00000090 	.word	0x00000090
    13ec:	8e080e42 	.word	0x8e080e42
	g_BodyYShift = 0;
	//begin(XBEE_BAUD);
	GPSeq = 0;  // init to something...
    13f0:	00028401 	.word	0x00028401
    13f4:	00000018 	.word	0x00000018

	ControlMode = WALKMODE;
    13f8:	00001234 	.word	0x00001234
	HeightSpeedMode = NORM_NORM;
    13fc:	080051d8 	.word	0x080051d8
	//    DoubleHeightOn = false;
	DoubleTravelOn = false;
    1400:	00000040 	.word	0x00000040
	bJoystickWalkMode = 0;
    1404:	8e100e42 	.word	0x8e100e42
	GaitSelect();

	CommanderInputController_Init();

	// Servo Driver
	ServoMoveTime = 150;
    1408:	85028601 	.word	0x85028601
	g_InControlState.fRobotOn = 0;
    140c:	00048403 	.word	0x00048403
	g_fLowVoltageShutdown = false;
    1410:	00000014 	.word	0x00000014

}
    1414:	00001234 	.word	0x00001234
    1418:	08005218 	.word	0x08005218
    141c:	000000a0 	.word	0x000000a0
    1420:	8e080e42 	.word	0x8e080e42
    1424:	00028401 	.word	0x00028401
    1428:	00000014 	.word	0x00000014
    142c:	00001234 	.word	0x00001234
    1430:	080052b8 	.word	0x080052b8
    1434:	0000000c 	.word	0x0000000c
    1438:	42040e42 	.word	0x42040e42
    143c:	018e080e 	.word	0x018e080e
    1440:	00000014 	.word	0x00000014
    1444:	00001234 	.word	0x00001234
    1448:	080052c4 	.word	0x080052c4
    144c:	00000030 	.word	0x00000030
    1450:	8e080e42 	.word	0x8e080e42
    1454:	00028401 	.word	0x00028401
    1458:	00000014 	.word	0x00000014
    145c:	00001234 	.word	0x00001234
    1460:	080052f4 	.word	0x080052f4
    1464:	00000014 	.word	0x00000014
//[CommitServoDriver Updates the positions of the servos - This outputs
//         as much of the command as we can without committing it.  This
//         allows us to once the previous update was completed to quickly
//        get the next command to start
//--------------------------------------------------------------------
void CommitServoDriver(word wMoveTime) {
    1468:	46040e42 	.word	0x46040e42
    146c:	018e080e 	.word	0x018e080e
    1470:	0000000c 	.word	0x0000000c


	CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    1474:	ffffffff 	.word	0xffffffff

      }
      ax12write(0xff - (checksum % 256));
      setRX(0);
*/
  	    dxl_set_txpacket_id (BROADCAST_ID);
    1478:	7c010001 	.word	0x7c010001
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    147c:	000d0c0e 	.word	0x000d0c0e
    1480:	0000000c 	.word	0x0000000c
		dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
    1484:	00001470 	.word	0x00001470
    1488:	08005308 	.word	0x08005308
		dxl_set_txpacket_parameter(1, 2);
    148c:	00000048 	.word	0x00000048
    1490:	0000000c 	.word	0x0000000c
    1494:	00001470 	.word	0x00001470
    1498:	08005350 	.word	0x08005350
      int i;
      word wSpeed;
		for (i = 0; i < poseSize; i++) {
			wSpeed = CalculateAX12MoveSpeed(g_awCurAXPos[i], g_awGoalAXPos[i], wMoveTime);    // What order should we store these values?
    149c:	00000012 	.word	0x00000012
    14a0:	0000000c 	.word	0x0000000c
    14a4:	00001470 	.word	0x00001470
    14a8:	08005364 	.word	0x08005364
			//dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
			byte id = pgm_read_byte(&cPinTable[i]);
			dxl_set_txpacket_parameter(2 + 3 * i, id);
    14ac:	00000014 	.word	0x00000014
    14b0:	0000000c 	.word	0x0000000c
    14b4:	00001470 	.word	0x00001470
    14b8:	08005378 	.word	0x08005378
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(g_awGoalAXPos[i]));
    14bc:	00000014 	.word	0x00000014
    14c0:	0000000c 	.word	0x0000000c
    14c4:	00001470 	.word	0x00001470
    14c8:	0800538c 	.word	0x0800538c
    14cc:	00000016 	.word	0x00000016
			dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(g_awGoalAXPos[i]));
    14d0:	0000000c 	.word	0x0000000c
    14d4:	00001470 	.word	0x00001470
    14d8:	080053a4 	.word	0x080053a4
    14dc:	0000000a 	.word	0x0000000a
    14e0:	0000000c 	.word	0x0000000c
    14e4:	00001470 	.word	0x00001470
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(wSpeed));
    14e8:	080053b0 	.word	0x080053b0
    14ec:	0000000a 	.word	0x0000000a
    14f0:	0000000c 	.word	0x0000000c
		    dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(wSpeed));
    14f4:	00001470 	.word	0x00001470
    14f8:	080053bc 	.word	0x080053bc
    14fc:	0000000a 	.word	0x0000000a
    1500:	0000000c 	.word	0x0000000c
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
		dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
		dxl_set_txpacket_parameter(1, 2);
      int i;
      word wSpeed;
		for (i = 0; i < poseSize; i++) {
    1504:	00001470 	.word	0x00001470
    1508:	080053c8 	.word	0x080053c8
    150c:	0000000a 	.word	0x0000000a
    1510:	0000000c 	.word	0x0000000c
			dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(g_awGoalAXPos[i]));
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(wSpeed));
		    dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(wSpeed));
		}

		dxl_set_txpacket_length((4 + 1) * poseSize + 4);
    1514:	00001470 	.word	0x00001470
    1518:	080053d4 	.word	0x080053d4
    151c:	00000014 	.word	0x00000014
#ifdef DEBUG_BIOLOIDEX
	PrintString("DriverAX12 --- CommitServoDriver ---\n");
#endif
		dxl_txrx_packet();
    1520:	0000000c 	.word	0x0000000c

			u16 CommStatus = dxl_get_result();
    1524:	00001470 	.word	0x00001470
#ifdef USING_PC_UART
			if (CommStatus == DXL_RXSUCCESS)
    1528:	080053e8 	.word	0x080053e8
				PrintErrorCode();
    152c:	0000000a 	.word	0x0000000a
			else
				PrintCommStatus(CommStatus);
    1530:	0000000c 	.word	0x0000000c
    1534:	00001470 	.word	0x00001470
#endif
#endif
		} else {
			BioloidControllerEx_interpolateSetup(wMoveTime);
    1538:	080053f4 	.word	0x080053f4

	}

	CommanderInputController_AllowControllerInterrupts(true);

}
    153c:	00000010 	.word	0x00000010
    1540:	0000000c 	.word	0x0000000c
    1544:	00001470 	.word	0x00001470
    1548:	08005404 	.word	0x08005404
    154c:	00000014 	.word	0x00000014
    1550:	00000018 	.word	0x00000018
	word wCoxaSDV;        // Coxa value in servo driver units
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    1554:	00001470 	.word	0x00001470
    1558:	08005418 	.word	0x08005418
    155c:	00000096 	.word	0x00000096
    1560:	8e0c0e44 	.word	0x8e0c0e44
    1564:	84028501 	.word	0x84028501


void OutputServoInfoForLeg(byte LegIndex, short sCoxaAngle1, short sFemurAngle1,
		short sTibiaAngle1)

		{
    1568:	00000003 	.word	0x00000003
	word wCoxaSDV;        // Coxa value in servo driver units
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    156c:	0000000c 	.word	0x0000000c
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
    1570:	00001470 	.word	0x00001470
    1574:	080054b0 	.word	0x080054b0
    1578:	00000014 	.word	0x00000014
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    157c:	0000000c 	.word	0x0000000c
    1580:	00001470 	.word	0x00001470
    1584:	080054c4 	.word	0x080054c4


void OutputServoInfoForLeg(byte LegIndex, short sCoxaAngle1, short sFemurAngle1,
		short sTibiaAngle1)

		{
    1588:	00000006 	.word	0x00000006
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    158c:	0000000c 	.word	0x0000000c
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
    1590:	00001470 	.word	0x00001470
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    1594:	080054cc 	.word	0x080054cc
#ifdef USE_AX12_SPEED_CONTROL
			// Save away the new positions...
			g_awGoalAXPos[FIRSTCOXAPIN + LegIndex] = wCoxaSDV; // What order should we store these values?
			g_awGoalAXPos[FIRSTFEMURPIN + LegIndex] = wFemurSDV;
    1598:	0000000c 	.word	0x0000000c

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
#ifdef USE_AX12_SPEED_CONTROL
			// Save away the new positions...
			g_awGoalAXPos[FIRSTCOXAPIN + LegIndex] = wCoxaSDV; // What order should we store these values?
    159c:	0000000c 	.word	0x0000000c
			g_awGoalAXPos[FIRSTFEMURPIN + LegIndex] = wFemurSDV;
    15a0:	00001470 	.word	0x00001470
			g_awGoalAXPos[FIRSTTIBIAPIN + LegIndex] = wTibiaSDV;
    15a4:	080054d8 	.word	0x080054d8
    15a8:	00000014 	.word	0x00000014
    15ac:	0000000c 	.word	0x0000000c

#endif
		} else {
			BioloidControllerEx_setNextPose(
    15b0:	00001470 	.word	0x00001470
    15b4:	080054ec 	.word	0x080054ec
					pgm_read_byte(&cPinTable[FIRSTCOXAPIN + LegIndex]),
					wCoxaSDV);
			BioloidControllerEx_setNextPose(
    15b8:	00000014 	.word	0x00000014
    15bc:	0000000c 	.word	0x0000000c
    15c0:	00001470 	.word	0x00001470
					pgm_read_byte(&cPinTable[FIRSTFEMURPIN + LegIndex]),
					wFemurSDV);
			BioloidControllerEx_setNextPose(
    15c4:	08005500 	.word	0x08005500
    15c8:	0000000c 	.word	0x0000000c
					wTibiaSDV);

		}
	}
	CommanderInputController_AllowControllerInterrupts(true); // Ok for hserial again...
}
    15cc:	0000000c 	.word	0x0000000c
    15d0:	00001470 	.word	0x00001470
    15d4:	0800550c 	.word	0x0800550c
    15d8:	00000014 	.word	0x00000014
    15dc:	0000000c 	.word	0x0000000c

void StartUpdateServos() {
    15e0:	00001470 	.word	0x00001470
	byte LegIndex;

	// First call off to the init...
	BeginServoUpdate();    // Start the update
    15e4:	08005520 	.word	0x08005520
    15e8:	00000014 	.word	0x00000014
    15ec:	0000000c 	.word	0x0000000c

	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		OutputServoInfoForLeg(LegIndex,
    15f0:	00001470 	.word	0x00001470
    15f4:	08005534 	.word	0x08005534
    15f8:	0000000a 	.word	0x0000000a
    15fc:	00000018 	.word	0x00000018
    1600:	00001470 	.word	0x00001470
    1604:	08005540 	.word	0x08005540
    1608:	00000062 	.word	0x00000062
    160c:	8e0c0e44 	.word	0x8e0c0e44
    1610:	84028501 	.word	0x84028501
    1614:	00000003 	.word	0x00000003
    1618:	0000000c 	.word	0x0000000c
    161c:	00001470 	.word	0x00001470
    1620:	080055a4 	.word	0x080055a4
    1624:	00000010 	.word	0x00000010
    1628:	00000010 	.word	0x00000010
    162c:	00001470 	.word	0x00001470
    1630:	080055b4 	.word	0x080055b4
    1634:	00000008 	.word	0x00000008
    1638:	00080e42 	.word	0x00080e42
    163c:	00000010 	.word	0x00000010
    1640:	00001470 	.word	0x00001470
	byte LegIndex;

	// First call off to the init...
	BeginServoUpdate();    // Start the update

	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    1644:	080055bc 	.word	0x080055bc
				cTibiaInv[LegIndex] ?
						-TibiaAngle1[LegIndex] : TibiaAngle1[LegIndex]);

	}

}
    1648:	0000000e 	.word	0x0000000e
    164c:	00080e42 	.word	0x00080e42
    1650:	0000000c 	.word	0x0000000c
    1654:	00001470 	.word	0x00001470
    1658:	080055cc 	.word	0x080055cc
    165c:	00000010 	.word	0x00000010
    1660:	0000000c 	.word	0x0000000c
#else
word g_wLastVoltage = 0xffff;    // save the last voltage we retrieved...
byte g_bLegVoltage = 0;		// what leg did we last check?
unsigned long g_ulTimeLastBatteryVoltage;
#define VOLTAGE_REPEAT_MAX  3
word GetBatteryVoltage(void) {
    1664:	00001470 	.word	0x00001470
	if (interpolating && (g_wLastVoltage != 0xffff)
    1668:	080055dc 	.word	0x080055dc
    166c:	00000006 	.word	0x00000006
    1670:	0000000c 	.word	0x0000000c
    1674:	00001470 	.word	0x00001470
    1678:	080055e4 	.word	0x080055e4
    167c:	0000000c 	.word	0x0000000c
    1680:	0000000c 	.word	0x0000000c
    1684:	00001470 	.word	0x00001470
			&& ((getMillis() - g_ulTimeLastBatteryVoltage)
					< VOLTAGE_MAX_TIME_BETWEEN_CALLS))
		return g_wLastVoltage;
    1688:	080055f0 	.word	0x080055f0

	register u8 bLoopCnt = VOLTAGE_REPEAT_MAX;
	do {
		register word wVoltage = dxl_read_byte(1, AXM_PRESENT_VOLTAGE);
    168c:	0000001c 	.word	0x0000001c
    1690:	0000000c 	.word	0x0000000c
    1694:	00001470 	.word	0x00001470
		if (wVoltage != 0xffff) {
			g_ulTimeLastBatteryVoltage = getMillis();
    1698:	0800560c 	.word	0x0800560c
			g_wLastVoltage = wVoltage * 10;
    169c:	0000000c 	.word	0x0000000c

	register u8 bLoopCnt = VOLTAGE_REPEAT_MAX;
	do {
		register word wVoltage = dxl_read_byte(1, AXM_PRESENT_VOLTAGE);
		if (wVoltage != 0xffff) {
			g_ulTimeLastBatteryVoltage = getMillis();
    16a0:	0000000c 	.word	0x0000000c
			g_wLastVoltage = wVoltage * 10;
    16a4:	00001470 	.word	0x00001470
		}
	} while (--bLoopCnt);

	return 0;

}
    16a8:	08005618 	.word	0x08005618
    16ac:	00000008 	.word	0x00000008
    16b0:	0000000c 	.word	0x0000000c
    16b4:	00001470 	.word	0x00001470
// ReadMsgs
//==============================================================================

/* process messages coming from Commander
 *  format = 0xFF RIGHT_H RIGHT_V LEFT_H LEFT_V BUTTONS EXT CHECKSUM */
int Commander_ReadMsgs() {
    16b8:	08005620 	.word	0x08005620
	 }
	 #endif
	 */
	//while (CheckZBNewArrive() > 0) {
	while (1) {
		if (zgb_rx_check_arduino() == 1) {
    16bc:	0000001a 	.word	0x0000001a
    16c0:	0000000c 	.word	0x0000000c

			leftV = (signed char) (zgb_rx_data_right_V_());
    16c4:	00001470 	.word	0x00001470
    16c8:	0800563c 	.word	0x0800563c
			leftH = (signed char) (zgb_rx_data_right_H_());
    16cc:	00000008 	.word	0x00000008
    16d0:	00000014 	.word	0x00000014
			rightV = (signed char) (zgb_rx_data_left_V_());
    16d4:	00001470 	.word	0x00001470
    16d8:	08005644 	.word	0x08005644
			rightH = (signed char) (zgb_rx_data_left_H_());
    16dc:	00000058 	.word	0x00000058
    16e0:	44040e42 	.word	0x44040e42
			buttons = zgb_rx_data_buttons();
    16e4:	018e100e 	.word	0x018e100e
    16e8:	0000000c 	.word	0x0000000c
			ext = zgb_rx_data_extra();
    16ec:	ffffffff 	.word	0xffffffff
    16f0:	7c010001 	.word	0x7c010001

	}

	return 0;

}
    16f4:	000d0c0e 	.word	0x000d0c0e
    16f8:	0000000c 	.word	0x0000000c
    16fc:	000016e8 	.word	0x000016e8
    1700:	0800569c 	.word	0x0800569c
    1704:	00000018 	.word	0x00000018
    1708:	0000000c 	.word	0x0000000c
    170c:	000016e8 	.word	0x000016e8
    1710:	080056b4 	.word	0x080056b4

//==============================================================================
// This is The main code to input function to read inputs from the Commander and then
//process any commands.
//==============================================================================
void CommanderInputController_ControlInput(void) {
    1714:	00000018 	.word	0x00000018

	// See if we have a new command available...
	if (Commander_ReadMsgs() > 0) {
    1718:	0000000c 	.word	0x0000000c
    171c:	000016e8 	.word	0x000016e8
    1720:	080056cc 	.word	0x080056cc
    1724:	00000018 	.word	0x00000018
		// If we receive a valid message than turn robot on...
		boolean fAdjustLegPositions = false;
		short sLegInitXZAdjust = 0;
		short sLegInitAngleAdjust = 0;

		if (!g_InControlState.fRobotOn) {
    1728:	0000000c 	.word	0x0000000c
    172c:	000016e8 	.word	0x000016e8
			g_InControlState.fRobotOn = true;
    1730:	080056e4 	.word	0x080056e4
    1734:	00000018 	.word	0x00000018
		}

		// [SWITCH MODES]

		// Cycle through modes...
		if ((buttons & BUT_LT) && !(buttonsPrev & BUT_LT)) {
    1738:	0000000c 	.word	0x0000000c
    173c:	000016e8 	.word	0x000016e8
    1740:	080056fc 	.word	0x080056fc
    1744:	00000010 	.word	0x00000010
    1748:	0000000c 	.word	0x0000000c
    174c:	000016e8 	.word	0x000016e8

			if (++ControlMode >= MODECNT) {
    1750:	0800570c 	.word	0x0800570c
    1754:	0000000c 	.word	0x0000000c
    1758:	0000000c 	.word	0x0000000c
    175c:	000016e8 	.word	0x000016e8
				ControlMode = WALKMODE;    // cycled back around...
				Buzzed(50, 2000);
    1760:	08005718 	.word	0x08005718
    1764:	0000000c 	.word	0x0000000c
    1768:	0000000c 	.word	0x0000000c
				Buzzed(50, 3000);
    176c:	000016e8 	.word	0x000016e8
    1770:	08005724 	.word	0x08005724

			} else {
				Buzzed(50, 2000);
    1774:	00000010 	.word	0x00000010
    1778:	0000000c 	.word	0x0000000c
    177c:	000016e8 	.word	0x000016e8
			}
			if (ControlMode != SINGLELEGMODE)
    1780:	08005734 	.word	0x08005734
    1784:	00000010 	.word	0x00000010
				g_InControlState.SelectedLeg = 255;
    1788:	0000000c 	.word	0x0000000c
    178c:	000016e8 	.word	0x000016e8
    1790:	08005744 	.word	0x08005744

		}

		//[Common functions]
		//Switch Balance mode on/off
		if ((buttons & BUT_L4) && !(buttonsPrev & BUT_L4)) {
    1794:	0000001c 	.word	0x0000001c
    1798:	0000000c 	.word	0x0000000c
    179c:	000016e8 	.word	0x000016e8
    17a0:	08005760 	.word	0x08005760
    17a4:	00000020 	.word	0x00000020
    17a8:	0000000c 	.word	0x0000000c

			g_InControlState.BalanceMode = !g_InControlState.BalanceMode;
    17ac:	000016e8 	.word	0x000016e8
    17b0:	08005780 	.word	0x08005780
    17b4:	0000000c 	.word	0x0000000c
    17b8:	0000000c 	.word	0x0000000c
    17bc:	000016e8 	.word	0x000016e8
			if (g_InControlState.BalanceMode) {
    17c0:	0800578c 	.word	0x0800578c
				Buzzed(250, 1500);
    17c4:	0000002c 	.word	0x0000002c
    17c8:	00000018 	.word	0x00000018
			} else {
				Buzzed(100, 2000);
    17cc:	000016e8 	.word	0x000016e8
    17d0:	080057b8 	.word	0x080057b8
				Buzzed(50, 4000);
    17d4:	00000094 	.word	0x00000094
    17d8:	44080e42 	.word	0x44080e42
    17dc:	018e100e 	.word	0x018e100e
			}
		}

		//Stand up, sit down
		if ((buttons & BUT_L5) && !(buttonsPrev & BUT_L5)) {
    17e0:	00000284 	.word	0x00000284
    17e4:	0000001c 	.word	0x0000001c
    17e8:	000016e8 	.word	0x000016e8
    17ec:	0800584c 	.word	0x0800584c
    17f0:	0000005c 	.word	0x0000005c
    17f4:	8e140e42 	.word	0x8e140e42
			if (g_BodyYOffset > 0)
    17f8:	86028701 	.word	0x86028701
    17fc:	84048503 	.word	0x84048503
				g_BodyYOffset = 0;
    1800:	180e4605 	.word	0x180e4605
    1804:	00000018 	.word	0x00000018
			else
				g_BodyYOffset = 35;
			fAdjustLegPositions = true;
			g_fDynamicLegXZLength = false;
    1808:	000016e8 	.word	0x000016e8
		//Stand up, sit down
		if ((buttons & BUT_L5) && !(buttonsPrev & BUT_L5)) {
			if (g_BodyYOffset > 0)
				g_BodyYOffset = 0;
			else
				g_BodyYOffset = 35;
    180c:	080058a8 	.word	0x080058a8
			fAdjustLegPositions = true;
			g_fDynamicLegXZLength = false;
    1810:	0000009c 	.word	0x0000009c
    1814:	8e0c0e42 	.word	0x8e0c0e42

		// We will use L6 with the Right joystick to control both body offset as well as Speed...
		// We move each pass through this by a percentage of how far we are from center in each direction
		// We get feedback with height by seeing the robot move up and down.  For Speed, I put in sounds
		// which give an idea, but only for those whoes robot has a speaker
		int lx = leftH;
    1818:	84028501 	.word	0x84028501
		int ly = leftV;
		if (buttons & BUT_L6) {
    181c:	100e4403 	.word	0x100e4403

		// We will use L6 with the Right joystick to control both body offset as well as Speed...
		// We move each pass through this by a percentage of how far we are from center in each direction
		// We get feedback with height by seeing the robot move up and down.  For Speed, I put in sounds
		// which give an idea, but only for those whoes robot has a speaker
		int lx = leftH;
    1820:	00000014 	.word	0x00000014
    1824:	000016e8 	.word	0x000016e8
		int ly = leftV;
    1828:	08005944 	.word	0x08005944
    182c:	000000c0 	.word	0x000000c0
		if (buttons & BUT_L6) {
    1830:	8e080e42 	.word	0x8e080e42
    1834:	00028401 	.word	0x00028401
			// raise or lower the robot on the joystick up /down
			// Maybe should have Min/Max
			int delta = rightV / 25;
    1838:	00000018 	.word	0x00000018
    183c:	000016e8 	.word	0x000016e8
    1840:	08005a04 	.word	0x08005a04
    1844:	00000044 	.word	0x00000044
    1848:	8e100e42 	.word	0x8e100e42
    184c:	85028601 	.word	0x85028601
			if (delta) {
    1850:	00048403 	.word	0x00048403
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
    1854:	00000018 	.word	0x00000018
    1858:	000016e8 	.word	0x000016e8
    185c:	08005a48 	.word	0x08005a48
    1860:	00000038 	.word	0x00000038
    1864:	8e100e42 	.word	0x8e100e42
    1868:	85028601 	.word	0x85028601
    186c:	00048403 	.word	0x00048403
    1870:	00000018 	.word	0x00000018
    1874:	000016e8 	.word	0x000016e8
			sLegInitAngleAdjust = ly / 8;
			lx = 0;
			ly = 0;

			// Likewise for Speed control
			delta = rightH / 16;   //
    1878:	08005a80 	.word	0x08005a80
    187c:	00000048 	.word	0x00000048
    1880:	8e100e42 	.word	0x8e100e42
    1884:	85028601 	.word	0x85028601
    1888:	00048403 	.word	0x00048403
			if ((delta < 0) && g_InControlState.SpeedControl) {
    188c:	00000014 	.word	0x00000014
    1890:	000016e8 	.word	0x000016e8
    1894:	08005ac8 	.word	0x08005ac8
				if ((word)(-delta) < g_InControlState.SpeedControl)
    1898:	00000078 	.word	0x00000078
					g_InControlState.SpeedControl += delta;
    189c:	8e080e42 	.word	0x8e080e42
				else
					g_InControlState.SpeedControl = 0;
    18a0:	00028401 	.word	0x00028401
    18a4:	00000014 	.word	0x00000014

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}
			if ((delta > 0) && (g_InControlState.SpeedControl < 2000)) {
    18a8:	000016e8 	.word	0x000016e8
    18ac:	08005b40 	.word	0x08005b40
    18b0:	0000003c 	.word	0x0000003c
				g_InControlState.SpeedControl += delta;
				if (g_InControlState.SpeedControl > 2000)
    18b4:	8e080e42 	.word	0x8e080e42
					g_InControlState.SpeedControl = 0;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}
			if ((delta > 0) && (g_InControlState.SpeedControl < 2000)) {
				g_InControlState.SpeedControl += delta;
    18b8:	00028401 	.word	0x00028401
				if (g_InControlState.SpeedControl > 2000)
					g_InControlState.SpeedControl = 2000;
    18bc:	00000018 	.word	0x00000018
    18c0:	000016e8 	.word	0x000016e8

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
    18c4:	08005b7c 	.word	0x08005b7c
    18c8:	00000048 	.word	0x00000048
    18cc:	8e0c0e42 	.word	0x8e0c0e42
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
				fAdjustLegPositions = true;
			}

			// Also use right Horizontal to manually adjust the initial leg positions.
			sLegInitXZAdjust = lx / 10;        // play with this.
    18d0:	84028501 	.word	0x84028501
    18d4:	100e4403 	.word	0x100e4403
    18d8:	0000000c 	.word	0x0000000c
    18dc:	ffffffff 	.word	0xffffffff
			sLegInitAngleAdjust = ly / 8;
    18e0:	7c010001 	.word	0x7c010001
    18e4:	000d0c0e 	.word	0x000d0c0e
    18e8:	0000001c 	.word	0x0000001c
    18ec:	000018d8 	.word	0x000018d8
					g_InControlState.SpeedControl = 2000;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}

			rightH = 0; // don't walk when adjusting the speed here...
    18f0:	08005bc4 	.word	0x08005bc4
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
				fAdjustLegPositions = true;
			}

			// Also use right Horizontal to manually adjust the initial leg positions.
			sLegInitXZAdjust = lx / 10;        // play with this.
    18f4:	000000a6 	.word	0x000000a6
					g_InControlState.SpeedControl = 2000;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}

			rightH = 0; // don't walk when adjusting the speed here...
    18f8:	8e140e42 	.word	0x8e140e42
		}

		//[Walk functions]
		if (ControlMode == WALKMODE) {
    18fc:	86028701 	.word	0x86028701
    1900:	84048503 	.word	0x84048503
    1904:	200e5a05 	.word	0x200e5a05

			//Switch gates
			if (((buttons & BUT_R1) && !(buttonsPrev & BUT_R1))
    1908:	0000000c 	.word	0x0000000c
    190c:	000018d8 	.word	0x000018d8
    1910:	08005c6c 	.word	0x08005c6c
    1914:	00000010 	.word	0x00000010
    1918:	0000000c 	.word	0x0000000c
    191c:	000018d8 	.word	0x000018d8
    1920:	08005c7c 	.word	0x08005c7c
    1924:	0000000c 	.word	0x0000000c
    1928:	0000000c 	.word	0x0000000c
    192c:	000018d8 	.word	0x000018d8
    1930:	08005c88 	.word	0x08005c88
    1934:	00000006 	.word	0x00000006
    1938:	0000000c 	.word	0x0000000c
    193c:	000018d8 	.word	0x000018d8
    1940:	08005c90 	.word	0x08005c90
    1944:	0000000c 	.word	0x0000000c
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
    1948:	0000000c 	.word	0x0000000c
					&& abs(g_InControlState.TravelLength.x) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
    194c:	000018d8 	.word	0x000018d8
    1950:	08005c9c 	.word	0x08005c9c
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
    1954:	00000006 	.word	0x00000006
					&& abs(g_InControlState.TravelLength.x) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
    1958:	0000000c 	.word	0x0000000c
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
					Buzzed(50, 2000);
    195c:	000018d8 	.word	0x000018d8
    1960:	08005ca4 	.word	0x08005ca4
    1964:	00000004 	.word	0x00000004
				} else {
					Buzzed(50, 2000);
    1968:	0000000c 	.word	0x0000000c
    196c:	000018d8 	.word	0x000018d8
    1970:	08005ca8 	.word	0x08005ca8
					Buzzed(50, 2250);
    1974:	00000004 	.word	0x00000004
    1978:	0000000c 	.word	0x0000000c
					g_InControlState.GaitType = 0;
    197c:	000018d8 	.word	0x000018d8
    1980:	08005cac 	.word	0x08005cac
}

void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {
    1984:	0000000a 	.word	0x0000000a
    1988:	0000000c 	.word	0x0000000c
    198c:	000018d8 	.word	0x000018d8

		g_InControlState.gaitCur = APG[g_InControlState.GaitType];
    1990:	08005cb8 	.word	0x08005cb8
    1994:	00000004 	.word	0x00000004
    1998:	0000000c 	.word	0x0000000c
    199c:	000018d8 	.word	0x000018d8
    19a0:	08005cbc 	.word	0x08005cbc
				}
				GaitSelect();
			}

			//Double leg lift height
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    19a4:	00000010 	.word	0x00000010
    19a8:	0000000c 	.word	0x0000000c
    19ac:	000018d8 	.word	0x000018d8
    19b0:	08005ccc 	.word	0x08005ccc
    19b4:	00000020 	.word	0x00000020
				Buzzed(50, 2000);
    19b8:	0000000c 	.word	0x0000000c
    19bc:	000018d8 	.word	0x000018d8
				HeightSpeedMode = (HeightSpeedMode + 1) & 0x3; // wrap around mode
    19c0:	08005cec 	.word	0x08005cec
    19c4:	0000000c 	.word	0x0000000c
    19c8:	00000018 	.word	0x00000018
    19cc:	000018d8 	.word	0x000018d8
				DoubleTravelOn = HeightSpeedMode & 0x1;
    19d0:	08005cf8 	.word	0x08005cf8
    19d4:	00000060 	.word	0x00000060
				if (HeightSpeedMode & 0x2)
    19d8:	8e0c0e42 	.word	0x8e0c0e42
    19dc:	84028501 	.word	0x84028501
					g_InControlState.LegLiftHeight = 80;
    19e0:	00000003 	.word	0x00000003
    19e4:	00000014 	.word	0x00000014
				else
					g_InControlState.LegLiftHeight = 50;
			}

			// Switch between Walk method 1 && Walk method 2
			if ((buttons & BUT_R2) && !(buttonsPrev & BUT_R2)) {
    19e8:	000018d8 	.word	0x000018d8
    19ec:	08005d58 	.word	0x08005d58
    19f0:	00000034 	.word	0x00000034
    19f4:	8e080e42 	.word	0x8e080e42
    19f8:	00028401 	.word	0x00028401

				if ((++bJoystickWalkMode) > 1)
    19fc:	00000014 	.word	0x00000014
    1a00:	000018d8 	.word	0x000018d8
    1a04:	08005d8c 	.word	0x08005d8c

					bJoystickWalkMode = 0;
				Buzzed(50, 2000 + bJoystickWalkMode * 250);
    1a08:	00000018 	.word	0x00000018
			// Switch between Walk method 1 && Walk method 2
			if ((buttons & BUT_R2) && !(buttonsPrev & BUT_R2)) {

				if ((++bJoystickWalkMode) > 1)

					bJoystickWalkMode = 0;
    1a0c:	46040e42 	.word	0x46040e42
				Buzzed(50, 2000 + bJoystickWalkMode * 250);
    1a10:	018e080e 	.word	0x018e080e
    1a14:	00000014 	.word	0x00000014
    1a18:	000018d8 	.word	0x000018d8
    1a1c:	08005da4 	.word	0x08005da4
			}

			//Walking
			switch (bJoystickWalkMode) {
    1a20:	000000a8 	.word	0x000000a8
    1a24:	44040e42 	.word	0x44040e42
    1a28:	018e100e 	.word	0x018e100e
			case 0:
				g_InControlState.TravelLength.x = -lx;
    1a2c:	0000000c 	.word	0x0000000c
    1a30:	ffffffff 	.word	0xffffffff
    1a34:	7c010001 	.word	0x7c010001
				g_InControlState.TravelLength.z = -ly;
    1a38:	000d0c0e 	.word	0x000d0c0e
				g_InControlState.TravelLength.y = -(rightH) / 4; //Right Stick Left/Right
				break;
			case 1:
				g_InControlState.TravelLength.z = (rightV); //Right Stick Up/Down
    1a3c:	0000000c 	.word	0x0000000c
    1a40:	00001a2c 	.word	0x00001a2c
    1a44:	08005e4c 	.word	0x08005e4c
				g_InControlState.TravelLength.y = -(rightH) / 4; //Right Stick Left/Right
    1a48:	00000034 	.word	0x00000034
    1a4c:	0000000c 	.word	0x0000000c
    1a50:	00001a2c 	.word	0x00001a2c
    1a54:	08005e80 	.word	0x08005e80
    1a58:	00000030 	.word	0x00000030
    1a5c:	0000000c 	.word	0x0000000c
				break;

			}

			if (!DoubleTravelOn) {  //(Double travel length)
    1a60:	00001a2c 	.word	0x00001a2c
				g_InControlState.TravelLength.x =
    1a64:	08005eb0 	.word	0x08005eb0
    1a68:	00000014 	.word	0x00000014
    1a6c:	00000018 	.word	0x00000018
						g_InControlState.TravelLength.x / 2;
				g_InControlState.TravelLength.z =
    1a70:	00001a2c 	.word	0x00001a2c
    1a74:	08005ec4 	.word	0x08005ec4
    1a78:	0000007c 	.word	0x0000007c
			}

		}

		//[Translate functions]
		g_BodyYShift = 0;
    1a7c:	8e0c0e42 	.word	0x8e0c0e42
    1a80:	84028501 	.word	0x84028501
		if (ControlMode == TRANSLATEMODE) {
    1a84:	00000003 	.word	0x00000003
    1a88:	0000000c 	.word	0x0000000c

		      g_InControlState.BodyPos.x =  SmoothControl(((lx)*2/3), g_InControlState.BodyPos.x, SmDiv);
    1a8c:	00001a2c 	.word	0x00001a2c
    1a90:	08005f40 	.word	0x08005f40
    1a94:	0000000c 	.word	0x0000000c
    1a98:	0000000c 	.word	0x0000000c
    1a9c:	00001a2c 	.word	0x00001a2c
    1aa0:	08005f4c 	.word	0x08005f4c
    1aa4:	00000018 	.word	0x00000018
    1aa8:	0000000c 	.word	0x0000000c
		      g_InControlState.BodyPos.z =  SmoothControl(((ly)*2/3), g_InControlState.BodyPos.z, SmDiv);
    1aac:	00001a2c 	.word	0x00001a2c
    1ab0:	08005f64 	.word	0x08005f64
    1ab4:	00000024 	.word	0x00000024
    1ab8:	0000000c 	.word	0x0000000c
    1abc:	00001a2c 	.word	0x00001a2c
		      g_InControlState.BodyRot1.y = SmoothControl(((rightH)*2), g_InControlState.BodyRot1.y, SmDiv);
    1ac0:	08005f88 	.word	0x08005f88
		//[Translate functions]
		g_BodyYShift = 0;
		if (ControlMode == TRANSLATEMODE) {

		      g_InControlState.BodyPos.x =  SmoothControl(((lx)*2/3), g_InControlState.BodyPos.x, SmDiv);
		      g_InControlState.BodyPos.z =  SmoothControl(((ly)*2/3), g_InControlState.BodyPos.z, SmDiv);
    1ac4:	0000000c 	.word	0x0000000c
		      g_InControlState.BodyRot1.y = SmoothControl(((rightH)*2), g_InControlState.BodyRot1.y, SmDiv);
    1ac8:	0000000c 	.word	0x0000000c
    1acc:	00001a2c 	.word	0x00001a2c
    1ad0:	08005f94 	.word	0x08005f94
    1ad4:	00000018 	.word	0x00000018


			//      g_InControlState.BodyPos.x = (lx)/2;
			//      g_InControlState.BodyPos.z = -(ly)/3;
			//      g_InControlState.BodyRot1.y = (rightH)*2;
			g_BodyYShift = (-(rightV) / 2);
    1ad8:	0000000c 	.word	0x0000000c
    1adc:	00001a2c 	.word	0x00001a2c
    1ae0:	08005fac 	.word	0x08005fac
    1ae4:	00000010 	.word	0x00000010
    1ae8:	0000000c 	.word	0x0000000c
    1aec:	00001a2c 	.word	0x00001a2c
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
    1af0:	08005fbc 	.word	0x08005fbc
			g_InControlState.BodyRot1.x = (ly);
			g_InControlState.BodyRot1.y = (rightH) * 2;
    1af4:	00000024 	.word	0x00000024
    1af8:	0000000c 	.word	0x0000000c
			g_InControlState.BodyRot1.z = (lx);
			g_BodyYShift = (-(rightV) / 2);
    1afc:	00001a2c 	.word	0x00001a2c
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
			g_InControlState.BodyRot1.x = (ly);
			g_InControlState.BodyRot1.y = (rightH) * 2;
    1b00:	08005fe0 	.word	0x08005fe0
			g_BodyYShift = (-(rightV) / 2);
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
			g_InControlState.BodyRot1.x = (ly);
    1b04:	0000000c 	.word	0x0000000c
			g_InControlState.BodyRot1.y = (rightH) * 2;
			g_InControlState.BodyRot1.z = (lx);
			g_BodyYShift = (-(rightV) / 2);
    1b08:	0000000c 	.word	0x0000000c
    1b0c:	00001a2c 	.word	0x00001a2c
    1b10:	08005fec 	.word	0x08005fec
    1b14:	00000014 	.word	0x00000014
    1b18:	0000000c 	.word	0x0000000c
		}

		//[Single leg functions]
#ifdef OPT_SINGLELEG
		if (ControlMode == SINGLELEGMODE) {
    1b1c:	00001a2c 	.word	0x00001a2c

			//Switch leg for single leg control
			if ((buttons & BUT_R1) && !(buttonsPrev & BUT_R1)) {
    1b20:	08006000 	.word	0x08006000
    1b24:	00000010 	.word	0x00000010
    1b28:	0000000c 	.word	0x0000000c
    1b2c:	00001a2c 	.word	0x00001a2c
    1b30:	08006010 	.word	0x08006010
				Buzzed(50,2000);
    1b34:	00000010 	.word	0x00000010
    1b38:	0000000c 	.word	0x0000000c
    1b3c:	00001a2c 	.word	0x00001a2c
				if (g_InControlState.SelectedLeg < (CNT_LEGS-1)) {
    1b40:	08006020 	.word	0x08006020
    1b44:	0000001c 	.word	0x0000001c
					g_InControlState.SelectedLeg = g_InControlState.SelectedLeg + 1;
				} else {
					g_InControlState.SelectedLeg = 0;
    1b48:	0000000c 	.word	0x0000000c
		if (ControlMode == SINGLELEGMODE) {

			//Switch leg for single leg control
			if ((buttons & BUT_R1) && !(buttonsPrev & BUT_R1)) {
				Buzzed(50,2000);
				if (g_InControlState.SelectedLeg < (CNT_LEGS-1)) {
    1b4c:	00001a2c 	.word	0x00001a2c
					g_InControlState.SelectedLeg = g_InControlState.SelectedLeg + 1;
    1b50:	0800603c 	.word	0x0800603c
			   g_InControlState.SLLeg.x= (signed char)((int)((int)lx+128)/2); //Left Stick Right/Left
      		   g_InControlState.SLLeg.y= (signed char)((int)((int)rightV+128)/10); //Right Stick Up/Down
		       g_InControlState.SLLeg.z = (signed char)((int)((int)ly+128)/2); //Left Stick Up/Down

#else
			g_InControlState.SLLeg.x = lx; //Left Stick Right/Left
    1b54:	00000028 	.word	0x00000028
			g_InControlState.SLLeg.y = rightV / 3 - 20;//Right Stick Up/Down
    1b58:	00000014 	.word	0x00000014
    1b5c:	00001a2c 	.word	0x00001a2c
    1b60:	08006064 	.word	0x08006064
    1b64:	00000058 	.word	0x00000058
    1b68:	8e080e42 	.word	0x8e080e42
			g_InControlState.SLLeg.z = ly;//Left Stick Up/Down

#endif
			// Hold single leg in place
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    1b6c:	00028401 	.word	0x00028401
    1b70:	0000000c 	.word	0x0000000c
    1b74:	00001a2c 	.word	0x00001a2c
      		   g_InControlState.SLLeg.y= (signed char)((int)((int)rightV+128)/10); //Right Stick Up/Down
		       g_InControlState.SLLeg.z = (signed char)((int)((int)ly+128)/2); //Left Stick Up/Down

#else
			g_InControlState.SLLeg.x = lx; //Left Stick Right/Left
			g_InControlState.SLLeg.y = rightV / 3 - 20;//Right Stick Up/Down
    1b78:	080060bc 	.word	0x080060bc
			g_InControlState.SLLeg.z = ly;//Left Stick Up/Down

#endif
			// Hold single leg in place
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    1b7c:	00000020 	.word	0x00000020
    1b80:	0000000c 	.word	0x0000000c
    1b84:	00001a2c 	.word	0x00001a2c
				Buzzed(50,2000);
    1b88:	080060dc 	.word	0x080060dc
    1b8c:	00000018 	.word	0x00000018
				g_InControlState.fSLHold = !g_InControlState.fSLHold;
    1b90:	0000000c 	.word	0x0000000c
    1b94:	00001a2c 	.word	0x00001a2c
    1b98:	080060f4 	.word	0x080060f4
    1b9c:	00000018 	.word	0x00000018
			}
		}
#endif

		//Calculate walking time delay
		g_InControlState.InputTimeDelay = 128- max(max(abs(lx), abs(ly)), abs(rightH));
    1ba0:	0000000c 	.word	0x0000000c
    1ba4:	00001a2c 	.word	0x00001a2c
    1ba8:	0800610c 	.word	0x0800610c
    1bac:	00000020 	.word	0x00000020
    1bb0:	0000000c 	.word	0x0000000c
    1bb4:	00001a2c 	.word	0x00001a2c
    1bb8:	0800612c 	.word	0x0800612c
    1bbc:	00000044 	.word	0x00000044
    1bc0:	0000000c 	.word	0x0000000c
    1bc4:	00001a2c 	.word	0x00001a2c
    1bc8:	08006170 	.word	0x08006170
    1bcc:	00000014 	.word	0x00000014
    1bd0:	00000014 	.word	0x00000014

		//Calculate g_InControlState.BodyPos.y
		g_InControlState.BodyPos.y = max(g_BodyYOffset + g_BodyYShift, 0);
    1bd4:	00001a2c 	.word	0x00001a2c
    1bd8:	08006184 	.word	0x08006184
    1bdc:	0000000c 	.word	0x0000000c
    1be0:	42040e42 	.word	0x42040e42
    1be4:	018e080e 	.word	0x018e080e
    1be8:	00000014 	.word	0x00000014

		if (sLegInitXZAdjust || sLegInitAngleAdjust) {
    1bec:	00001a2c 	.word	0x00001a2c
    1bf0:	08006190 	.word	0x08006190
			// User asked for manual leg adjustment - only do when we have finished any previous adjustment

			if (!g_InControlState.ForceGaitStepCnt) {
    1bf4:	0000000e 	.word	0x0000000e
				if (sLegInitXZAdjust)
    1bf8:	44040e42 	.word	0x44040e42
					g_fDynamicLegXZLength = true;
    1bfc:	018e080e 	.word	0x018e080e
    1c00:	00000014 	.word	0x00000014

				sLegInitXZAdjust += GetLegsXZLength(); // Add on current length to our adjustment...
    1c04:	00001a2c 	.word	0x00001a2c
    1c08:	080061a0 	.word	0x080061a0
				// Handle maybe change angles...
				if (sLegInitAngleAdjust)
					RotateLegInitAngles(sLegInitAngleAdjust);

				// Give system time to process previous calls
				AdjustLegPositions(sLegInitXZAdjust);
    1c0c:	0000000c 	.word	0x0000000c
			}
		}

		if (fAdjustLegPositions && !g_fDynamicLegXZLength)
    1c10:	42040e42 	.word	0x42040e42
    1c14:	018e080e 	.word	0x018e080e
    1c18:	00000014 	.word	0x00000014
			AdjustLegPositionsToBodyHeight(); // Put main workings into main program file
    1c1c:	00001a2c 	.word	0x00001a2c
		// Save away the buttons state as to not process the same press twice.
		buttonsPrev = buttons;
    1c20:	080061ac 	.word	0x080061ac
    1c24:	0000000c 	.word	0x0000000c
		extPrev = ext;
    1c28:	42040e42 	.word	0x42040e42
    1c2c:	018e080e 	.word	0x018e080e
		g_ulLastMsgTime = getMillis();
    1c30:	00000014 	.word	0x00000014
    1c34:	00001a2c 	.word	0x00001a2c
	} else {
		// We did not receive a valid packet.  check for a timeout to see if we should turn robot off...
		if (g_InControlState.fRobotOn) {
    1c38:	080061b8 	.word	0x080061b8
			if ((getMillis() - g_ulLastMsgTime) > ARBOTIX_TO)
    1c3c:	0000000c 	.word	0x0000000c
    1c40:	42040e42 	.word	0x42040e42
    1c44:	018e080e 	.word	0x018e080e
    1c48:	00000014 	.word	0x00000014
    1c4c:	00001a2c 	.word	0x00001a2c
				CommanderTurnRobotOff();
    1c50:	080061c4 	.word	0x080061c4
		}
	}

}
    1c54:	0000000c 	.word	0x0000000c
    1c58:	42040e42 	.word	0x42040e42
    1c5c:	018e080e 	.word	0x018e080e
    1c60:	0000000c 	.word	0x0000000c
    1c64:	ffffffff 	.word	0xffffffff
    1c68:	7c010001 	.word	0x7c010001
    1c6c:	000d0c0e 	.word	0x000d0c0e
    1c70:	0000000c 	.word	0x0000000c
    1c74:	00001c60 	.word	0x00001c60
    1c78:	080061d0 	.word	0x080061d0
    1c7c:	0000000c 	.word	0x0000000c
    1c80:	0000000c 	.word	0x0000000c
    1c84:	00001c60 	.word	0x00001c60
    1c88:	080061dc 	.word	0x080061dc
    1c8c:	0000000c 	.word	0x0000000c
    1c90:	0000000c 	.word	0x0000000c
    1c94:	00001c60 	.word	0x00001c60
    1c98:	080061e8 	.word	0x080061e8
    1c9c:	00000014 	.word	0x00000014
    1ca0:	0000000c 	.word	0x0000000c
    1ca4:	00001c60 	.word	0x00001c60
    1ca8:	080061fc 	.word	0x080061fc
    1cac:	0000000c 	.word	0x0000000c

extern void setupPhoenix(void);
extern void readSensors(void);


int Big_main(void) {
    1cb0:	0000000c 	.word	0x0000000c

	// Must include this line in all programs using "cm530.h/.c"
	SysInit();
    1cb4:	00001c60 	.word	0x00001c60
	setupPhoenix();
    1cb8:	08006208 	.word	0x08006208
			TotalYBal1 = 0;
			TotalZBal1 = 0;

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1cbc:	00000014 	.word	0x00000014

	while (1){
		while (1) {
			//Start time
			unsigned long lTimeWaitEnd;
			lTimerStart = getMillis();
    1cc0:	0000000c 	.word	0x0000000c
    1cc4:	00001c60 	.word	0x00001c60
    1cc8:	0800621c 	.word	0x0800621c
#ifdef MILLIS
			PrintString("Barebones lTimerStart ");
			Printu32d(lTimerStart);
			PrintString("\n");
#endif
			DoBackgroundProcess();
    1ccc:	00000010 	.word	0x00000010
			//Read input
			CheckVoltage();        // check our voltages...
    1cd0:	00000014 	.word	0x00000014
			if (!g_fLowVoltageShutdown) {
    1cd4:	00001c60 	.word	0x00001c60
    1cd8:	0800622c 	.word	0x0800622c
				CommanderInputController_ControlInput();
    1cdc:	00000034 	.word	0x00000034
			}
			WriteOutputs();        // Write Outputs
			//Single leg control
			SingleLegControl();
    1ce0:	44040e44 	.word	0x44040e44
			DoBackgroundProcess();
    1ce4:	018e080e 	.word	0x018e080e

			//Gait
			GaitSeq();
    1ce8:	00000014 	.word	0x00000014

			DoBackgroundProcess();
    1cec:	00001c60 	.word	0x00001c60

			//Balance calculations
			TotalTransX = 0;     //reset values used for calculation of balance
    1cf0:	08006260 	.word	0x08006260
    1cf4:	00000038 	.word	0x00000038
			TotalTransZ = 0;
    1cf8:	44040e44 	.word	0x44040e44
			TotalTransY = 0;
    1cfc:	018e080e 	.word	0x018e080e
    1d00:	00000014 	.word	0x00000014
			TotalXBal1 = 0;
    1d04:	00001c60 	.word	0x00001c60
			TotalYBal1 = 0;
    1d08:	08006298 	.word	0x08006298
    1d0c:	00000018 	.word	0x00000018
			TotalZBal1 = 0;
    1d10:	8e080e42 	.word	0x8e080e42

			if (g_InControlState.BalanceMode) {
    1d14:	00028401 	.word	0x00028401
    1d18:	0000000c 	.word	0x0000000c
    1d1c:	ffffffff 	.word	0xffffffff

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1d20:	7c010001 	.word	0x7c010001

					DoBackgroundProcess();
					BalCalcOneLeg(-LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d24:	000d0c0e 	.word	0x000d0c0e
    1d28:	0000000c 	.word	0x0000000c
    1d2c:	00001d18 	.word	0x00001d18

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs

					DoBackgroundProcess();
    1d30:	080062b0 	.word	0x080062b0
					BalCalcOneLeg(-LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d34:	00000040 	.word	0x00000040
    1d38:	0000000c 	.word	0x0000000c
    1d3c:	00001d18 	.word	0x00001d18
    1d40:	080062f0 	.word	0x080062f0
    1d44:	00000034 	.word	0x00000034
    1d48:	00000010 	.word	0x00000010
    1d4c:	00001d18 	.word	0x00001d18
    1d50:	08006324 	.word	0x08006324
    1d54:	00000030 	.word	0x00000030
    1d58:	00080e42 	.word	0x00080e42
    1d5c:	0000000c 	.word	0x0000000c
    1d60:	00001d18 	.word	0x00001d18
    1d64:	08006354 	.word	0x08006354
    1d68:	00000014 	.word	0x00000014
    1d6c:	0000000c 	.word	0x0000000c
			TotalYBal1 = 0;
			TotalZBal1 = 0;

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1d70:	00001d18 	.word	0x00001d18
    1d74:	08006368 	.word	0x08006368
    1d78:	0000000c 	.word	0x0000000c
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
    1d7c:	0000000c 	.word	0x0000000c
    1d80:	00001d18 	.word	0x00001d18
					DoBackgroundProcess();
					BalCalcOneLeg(LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d84:	08006374 	.word	0x08006374
    1d88:	00000014 	.word	0x00000014
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
					DoBackgroundProcess();
    1d8c:	0000000c 	.word	0x0000000c
					BalCalcOneLeg(LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d90:	00001d18 	.word	0x00001d18
    1d94:	08006388 	.word	0x08006388
    1d98:	0000000c 	.word	0x0000000c
    1d9c:	0000000c 	.word	0x0000000c
    1da0:	00001d18 	.word	0x00001d18
    1da4:	08006394 	.word	0x08006394
    1da8:	00000014 	.word	0x00000014
    1dac:	0000000c 	.word	0x0000000c
    1db0:	00001d18 	.word	0x00001d18
    1db4:	080063a8 	.word	0x080063a8
    1db8:	00000010 	.word	0x00000010
    1dbc:	0000000c 	.word	0x0000000c
    1dc0:	00001d18 	.word	0x00001d18
    1dc4:	080063b8 	.word	0x080063b8
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
    1dc8:	00000014 	.word	0x00000014
    1dcc:	0000000c 	.word	0x0000000c
    1dd0:	00001d18 	.word	0x00001d18
							LegPosZ[LegIndex] + GaitPosZ[LegIndex],
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}
				BalanceBody();
    1dd4:	080063cc 	.word	0x080063cc
			}

			//Reset IKsolution indicators
			IKSolution = 0;
    1dd8:	00000014 	.word	0x00000014
    1ddc:	0000000c 	.word	0x0000000c
			IKSolutionWarning = 0;
			IKSolutionError = 0;

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
    1de0:	00001d18 	.word	0x00001d18
			}

			//Reset IKsolution indicators
			IKSolution = 0;
			IKSolutionWarning = 0;
			IKSolutionError = 0;
    1de4:	080063e0 	.word	0x080063e0
    1de8:	00000014 	.word	0x00000014

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
				DoBackgroundProcess();
    1dec:	0000000c 	.word	0x0000000c
				BodyFK(
    1df0:	00001d18 	.word	0x00001d18
    1df4:	080063f4 	.word	0x080063f4
    1df8:	0000001c 	.word	0x0000001c
    1dfc:	0000000c 	.word	0x0000000c
    1e00:	00001d18 	.word	0x00001d18
    1e04:	08006410 	.word	0x08006410
    1e08:	0000000c 	.word	0x0000000c
    1e0c:	0000000c 	.word	0x0000000c
    1e10:	00001d18 	.word	0x00001d18
    1e14:	0800641c 	.word	0x0800641c
    1e18:	00000014 	.word	0x00000014
    1e1c:	0000000c 	.word	0x0000000c
    1e20:	00001d18 	.word	0x00001d18
    1e24:	08006430 	.word	0x08006430
    1e28:	00000020 	.word	0x00000020
    1e2c:	0000000c 	.word	0x0000000c
    1e30:	00001d18 	.word	0x00001d18
    1e34:	08006450 	.word	0x08006450
    1e38:	0000000c 	.word	0x0000000c
    1e3c:	0000000c 	.word	0x0000000c
    1e40:	00001d18 	.word	0x00001d18
    1e44:	0800645c 	.word	0x0800645c
    1e48:	00000010 	.word	0x00000010
    1e4c:	0000000c 	.word	0x0000000c
						+ GaitPosZ[LegIndex] - TotalTransZ,
						LegPosY[LegIndex] + g_InControlState.BodyPos.y
						+ GaitPosY[LegIndex] - TotalTransY,
						GaitRotY[LegIndex], LegIndex);

				LegIK(
    1e50:	00001d18 	.word	0x00001d18
    1e54:	0800646c 	.word	0x0800646c
    1e58:	0000000c 	.word	0x0000000c
    1e5c:	0000000c 	.word	0x0000000c
    1e60:	00001d18 	.word	0x00001d18
    1e64:	08006478 	.word	0x08006478
    1e68:	000000b8 	.word	0x000000b8
    1e6c:	0000000c 	.word	0x0000000c
    1e70:	00001d18 	.word	0x00001d18
    1e74:	08006530 	.word	0x08006530
    1e78:	0000001c 	.word	0x0000001c
    1e7c:	0000000c 	.word	0x0000000c
    1e80:	00001d18 	.word	0x00001d18
    1e84:	0800654c 	.word	0x0800654c
    1e88:	0000001c 	.word	0x0000001c
    1e8c:	0000000c 	.word	0x0000000c
    1e90:	00001d18 	.word	0x00001d18
    1e94:	08006568 	.word	0x08006568
    1e98:	0000001c 	.word	0x0000001c
    1e9c:	0000000c 	.word	0x0000000c
    1ea0:	00001d18 	.word	0x00001d18
    1ea4:	08006584 	.word	0x08006584
    1ea8:	0000001c 	.word	0x0000001c
    1eac:	0000000c 	.word	0x0000000c
    1eb0:	00001d18 	.word	0x00001d18
    1eb4:	080065a0 	.word	0x080065a0
    1eb8:	0000001c 	.word	0x0000001c
    1ebc:	0000000c 	.word	0x0000000c
    1ec0:	00001d18 	.word	0x00001d18
			IKSolutionWarning = 0;
			IKSolutionError = 0;

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
    1ec4:	080065bc 	.word	0x080065bc
    1ec8:	0000000c 	.word	0x0000000c
    1ecc:	0000000c 	.word	0x0000000c
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Do IK for all Left legs
			for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) {
    1ed0:	00001d18 	.word	0x00001d18
    1ed4:	080065c8 	.word	0x080065c8
				DoBackgroundProcess();
    1ed8:	0000000c 	.word	0x0000000c
				BodyFK(
    1edc:	0000000c 	.word	0x0000000c
    1ee0:	00001d18 	.word	0x00001d18
    1ee4:	080065d4 	.word	0x080065d4
    1ee8:	0000000c 	.word	0x0000000c
    1eec:	0000000c 	.word	0x0000000c
    1ef0:	00001d18 	.word	0x00001d18
    1ef4:	080065e0 	.word	0x080065e0
    1ef8:	00000044 	.word	0x00000044
    1efc:	0000000c 	.word	0x0000000c
    1f00:	00001d18 	.word	0x00001d18
    1f04:	08006624 	.word	0x08006624
    1f08:	00000010 	.word	0x00000010
    1f0c:	0000000c 	.word	0x0000000c
    1f10:	00001d18 	.word	0x00001d18
    1f14:	08006634 	.word	0x08006634
    1f18:	00000014 	.word	0x00000014
    1f1c:	0000000c 	.word	0x0000000c
    1f20:	00001d18 	.word	0x00001d18
    1f24:	08006648 	.word	0x08006648
    1f28:	000c      	.short	0x000c
    1f2a:	00          	.byte	0x00
    1f2b:	00          	.byte	0x00
    1f2c:	0000000c 	.word	0x0000000c
    1f30:	ffffffff 	.word	0xffffffff
    1f34:	7c010001 	.word	0x7c010001
    1f38:	000d0c0e 	.word	0x000d0c0e
    1f3c:	0000000c 	.word	0x0000000c
    1f40:	00001f2c 	.word	0x00001f2c
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z
						+ GaitPosZ[LegIndex] - TotalTransZ,
						LegPosY[LegIndex] + g_InControlState.BodyPos.y
						+ GaitPosY[LegIndex] - TotalTransY,
						GaitRotY[LegIndex], LegIndex);
				LegIK(
    1f44:	08006654 	.word	0x08006654
    1f48:	0000001c 	.word	0x0000001c
    1f4c:	0000000c 	.word	0x0000000c
    1f50:	00001f2c 	.word	0x00001f2c
    1f54:	08006670 	.word	0x08006670
    1f58:	0000000c 	.word	0x0000000c
    1f5c:	0000000c 	.word	0x0000000c
    1f60:	00001f2c 	.word	0x00001f2c
    1f64:	0800667c 	.word	0x0800667c
    1f68:	0000002c 	.word	0x0000002c
    1f6c:	0000000c 	.word	0x0000000c
    1f70:	00001f2c 	.word	0x00001f2c
    1f74:	080066a8 	.word	0x080066a8
    1f78:	0000001c 	.word	0x0000001c
    1f7c:	0000000c 	.word	0x0000000c
    1f80:	00001f2c 	.word	0x00001f2c
    1f84:	080066c4 	.word	0x080066c4
    1f88:	0000000c 	.word	0x0000000c
    1f8c:	0000000c 	.word	0x0000000c
    1f90:	00001f2c 	.word	0x00001f2c
    1f94:	080066d0 	.word	0x080066d0
    1f98:	00000028 	.word	0x00000028
    1f9c:	0000000c 	.word	0x0000000c
    1fa0:	ffffffff 	.word	0xffffffff
    1fa4:	7c010001 	.word	0x7c010001
    1fa8:	000d0c0e 	.word	0x000d0c0e
    1fac:	0000000c 	.word	0x0000000c
    1fb0:	00001f9c 	.word	0x00001f9c
    1fb4:	080066f8 	.word	0x080066f8
    1fb8:	0000001e 	.word	0x0000001e
    1fbc:	0000000c 	.word	0x0000000c
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Do IK for all Left legs
			for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) {
    1fc0:	00001f9c 	.word	0x00001f9c
    1fc4:	08006718 	.word	0x08006718
    1fc8:	00000028 	.word	0x00000028
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Check mechanical limits
			CheckAngles();
    1fcc:	0000000c 	.word	0x0000000c

			//Drive Servos
			if (g_InControlState.fRobotOn) {
    1fd0:	00001f9c 	.word	0x00001f9c
    1fd4:	08006740 	.word	0x08006740
    1fd8:	0000000e 	.word	0x0000000e
				if (g_InControlState.fRobotOn && !g_InControlState.fPrev_RobotOn) {
					// MSound(3, 60, 2000, 80, 2250, 100, 2500);
					Buzzed(30, 2000);
    1fdc:	0000000c 	.word	0x0000000c
    1fe0:	00001f9c 	.word	0x00001f9c
    1fe4:	08006750 	.word	0x08006750
					Buzzed(80, 2250);
    1fe8:	0000001a 	.word	0x0000001a
    1fec:	00000010 	.word	0x00000010
					Buzzed(100, 2500);
    1ff0:	00001f9c 	.word	0x00001f9c
    1ff4:	0800676c 	.word	0x0800676c
    1ff8:	0000003e 	.word	0x0000003e

				}

				//Calculate Servo Move time
				if ((abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
    1ffc:	00080e4e 	.word	0x00080e4e
    2000:	0000000c 	.word	0x0000000c
    2004:	00001f9c 	.word	0x00001f9c
    2008:	080067ac 	.word	0x080067ac
    200c:	00000018 	.word	0x00000018
    2010:	0000000c 	.word	0x0000000c
    2014:	00001f9c 	.word	0x00001f9c
    2018:	080067c4 	.word	0x080067c4
    201c:	00000016 	.word	0x00000016
    2020:	0000000c 	.word	0x0000000c
    2024:	00001f9c 	.word	0x00001f9c
						|| (abs(g_InControlState.TravelLength.z) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.y*2) > cTravelDeadZone)) {
					ServoMoveTime = g_InControlState.gaitCur.NomGaitSpeed
    2028:	080067dc 	.word	0x080067dc
    202c:	00000016 	.word	0x00000016
    2030:	0000000c 	.word	0x0000000c
    2034:	00001f9c 	.word	0x00001f9c
    2038:	080067f4 	.word	0x080067f4
							+ (g_InControlState.InputTimeDelay * 2)
							+ g_InControlState.SpeedControl;

					//Add aditional delay when Balance mode is on
					if (g_InControlState.BalanceMode)
    203c:	0000001a 	.word	0x0000001a

				//Calculate Servo Move time
				if ((abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.z) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.y*2) > cTravelDeadZone)) {
					ServoMoveTime = g_InControlState.gaitCur.NomGaitSpeed
    2040:	0000000c 	.word	0x0000000c
							+ (g_InControlState.InputTimeDelay * 2)
							+ g_InControlState.SpeedControl;

					//Add aditional delay when Balance mode is on
					if (g_InControlState.BalanceMode)
						ServoMoveTime = ServoMoveTime + BALANCE_DELAY;
    2044:	00001f9c 	.word	0x00001f9c
    2048:	08006810 	.word	0x08006810
				} else
					//Movement speed excl. Walking
					ServoMoveTime = 200 + g_InControlState.SpeedControl;
    204c:	00000016 	.word	0x00000016
    2050:	0000000c 	.word	0x0000000c
    2054:	00001f9c 	.word	0x00001f9c

				// note we broke up the servo driver into start/commit that way we can output all of the servo information
				// before we wait and only have the termination information to output after the wait.  That way we hopefully
				// be more accurate with our timings...
				DoBackgroundProcess();
    2058:	08006828 	.word	0x08006828
				StartUpdateServos();
    205c:	0000001a 	.word	0x0000001a

				// See if we need to sync our processor with the servo driver while walking to ensure the prev is completed
				//before sending the next one

				// Finding any incident of GaitPos/Rot <>0:
				for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    2060:	0000000c 	.word	0x0000000c
					if ((GaitPosX[LegIndex] > cGPlimit)
    2064:	00001f9c 	.word	0x00001f9c
    2068:	08006844 	.word	0x08006844
    206c:	00000008 	.word	0x00000008
    2070:	0000000c 	.word	0x0000000c
    2074:	00001f9c 	.word	0x00001f9c
    2078:	0800684c 	.word	0x0800684c
    207c:	00000008 	.word	0x00000008
    2080:	0000000c 	.word	0x0000000c
    2084:	00001f9c 	.word	0x00001f9c
    2088:	08006854 	.word	0x08006854
    208c:	0000000c 	.word	0x0000000c
    2090:	0000000c 	.word	0x0000000c
    2094:	00001f9c 	.word	0x00001f9c
    2098:	08006860 	.word	0x08006860
    209c:	00000012 	.word	0x00000012
							|| (GaitPosZ[LegIndex] > cGPlimit)
							|| (GaitPosZ[LegIndex] < -cGPlimit)
							|| (GaitRotY[LegIndex] > cGPlimit)
							|| (GaitRotY[LegIndex] < -cGPlimit)) {

						bExtraCycle = g_InControlState.gaitCur.NrLiftedPos + 1;	//For making sure that we are using timed move until all legs are down
    20a0:	0000000c 	.word	0x0000000c
    20a4:	00001f9c 	.word	0x00001f9c
    20a8:	08006874 	.word	0x08006874

				// See if we need to sync our processor with the servo driver while walking to ensure the prev is completed
				//before sending the next one

				// Finding any incident of GaitPos/Rot <>0:
				for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    20ac:	00000012 	.word	0x00000012
    20b0:	0000000c 	.word	0x0000000c

						bExtraCycle = g_InControlState.gaitCur.NrLiftedPos + 1;	//For making sure that we are using timed move until all legs are down
						break;
					}
				}
				if (bExtraCycle > 0) {
    20b4:	00001f9c 	.word	0x00001f9c
					bExtraCycle--;
    20b8:	08006888 	.word	0x08006888
    20bc:	0000001a 	.word	0x0000001a
					fWalking = !(bExtraCycle == 0);
    20c0:	0000000c 	.word	0x0000000c
    20c4:	00001f9c 	.word	0x00001f9c

					//Get endtime and calculate wait time
					lTimeWaitEnd = lTimerStart + PrevServoMoveTime;
    20c8:	080068a4 	.word	0x080068a4
    20cc:	0000001a 	.word	0x0000001a
    20d0:	0000000c 	.word	0x0000000c
					PrintString("\n");
#endif
					//DebugWrite(A1, HIGH);
					do {
						// Wait the appropriate time, call any background process while waiting...
						DoBackgroundProcess();
    20d4:	00001f9c 	.word	0x00001f9c
					} while (getMillis() < lTimeWaitEnd);
    20d8:	080068c0 	.word	0x080068c0
    20dc:	0000001a 	.word	0x0000001a
					PrintString("\n");
#endif

				}
				// Only do commit if we are actually doing something...
				CommitServoDriver(ServoMoveTime);
    20e0:	0000000c 	.word	0x0000000c
    20e4:	00001f9c 	.word	0x00001f9c
    20e8:	080068dc 	.word	0x080068dc
			} else {
				//Turn the bot off - May need to add ajust here...
				if (g_InControlState.fPrev_RobotOn || (AllDown = 0)) {
    20ec:	00000016 	.word	0x00000016
					PrintString("Barebones lTimeWaitEnd-Millis  ");
					Printu32d(getMillis);
					PrintString("\n");
#endif
				} else {
					FreeServos();
    20f0:	0000000c 	.word	0x0000000c
    20f4:	00001f9c 	.word	0x00001f9c
				// Only do commit if we are actually doing something...
				CommitServoDriver(ServoMoveTime);
			} else {
				//Turn the bot off - May need to add ajust here...
				if (g_InControlState.fPrev_RobotOn || (AllDown = 0)) {
					ServoMoveTime = 600;
    20f8:	080068f4 	.word	0x080068f4
    20fc:	0000001a 	.word	0x0000001a
					StartUpdateServos();
    2100:	0000000c 	.word	0x0000000c
					CommitServoDriver(ServoMoveTime);
    2104:	00001f9c 	.word	0x00001f9c
					//MSound(3, 100, 2500, 80, 2250, 60, 2000);
					Buzzed(100, 2500);
    2108:	08006910 	.word	0x08006910
    210c:	0000000c 	.word	0x0000000c
    2110:	0000000c 	.word	0x0000000c
					Buzzed(80, 2250);
    2114:	00001f9c 	.word	0x00001f9c
    2118:	691c      	.short	0x691c
    211a:	00          	.byte	0x00
    211b:	08          	.byte	0x08
					Buzzed(60, 2000);
    211c:	0000000a 	.word	0x0000000a
    2120:	0000000c 	.word	0x0000000c
    2124:	00001f9c 	.word	0x00001f9c

					//lTimeWaitEnd = getMillis() + 600; // setup to process background stuff while we wait...
					lTimeWaitEnd = getMillis() + 600; // setup to process background stuff while we wait...
    2128:	08006928 	.word	0x08006928
    212c:	0000004a 	.word	0x0000004a
					Printu32d(lTimeWaitEnd);
					PrintString("\n");
#endif
					do {
						// Wait the appropriate time, call any background process while waiting...
						DoBackgroundProcess();
    2130:	0000000c 	.word	0x0000000c
					} while (getMillis() < lTimeWaitEnd);
    2134:	00001f9c 	.word	0x00001f9c
    2138:	08006974 	.word	0x08006974
				} else {
					FreeServos();
				}

				// Allow the Servo driver to do stuff durint our idle time
				IdleTime();
    213c:	00000010 	.word	0x00000010
				mDelay(20); // give a pause between times we call if nothing is happening
    2140:	0000001c 	.word	0x0000001c
			}
			PrevServoMoveTime = ServoMoveTime;
    2144:	00001f9c 	.word	0x00001f9c
    2148:	08006984 	.word	0x08006984

			//Store previous g_InControlState.fRobotOn State
			if (g_InControlState.fRobotOn)
    214c:	0000009c 	.word	0x0000009c
    2150:	8e100e54 	.word	0x8e100e54
				g_InControlState.fPrev_RobotOn = 1;
			else
				g_InControlState.fPrev_RobotOn = 0;
    2154:	85028601 	.word	0x85028601
    2158:	6c048403 	.word	0x6c048403
    215c:	0000300e 	.word	0x0000300e
    2160:	00000014 	.word	0x00000014
    2164:	00001f9c 	.word	0x00001f9c
    2168:	08006a20 	.word	0x08006a20
    216c:	00000094 	.word	0x00000094
    2170:	44040e42 	.word	0x44040e42
    2174:	018e100e 	.word	0x018e100e
    2178:	0000000c 	.word	0x0000000c
    217c:	ffffffff 	.word	0xffffffff
    2180:	7c010001 	.word	0x7c010001
    2184:	000d0c0e 	.word	0x000d0c0e
    2188:	00000018 	.word	0x00000018
    218c:	00002178 	.word	0x00002178
    2190:	08006b24 	.word	0x08006b24
    2194:	00000054 	.word	0x00000054
    2198:	000d0946 	.word	0x000d0946
    219c:	8e080e44 	.word	0x8e080e44
    21a0:	00028d01 	.word	0x00028d01
    21a4:	0000000c 	.word	0x0000000c
    21a8:	ffffffff 	.word	0xffffffff
    21ac:	7c010001 	.word	0x7c010001
    21b0:	000d0c0e 	.word	0x000d0c0e
    21b4:	00000014 	.word	0x00000014
    21b8:	000021a4 	.word	0x000021a4
    21bc:	00000000 	.word	0x00000000
    21c0:	00000028 	.word	0x00000028
    21c4:	4c040e44 	.word	0x4c040e44
    21c8:	018e080e 	.word	0x018e080e
    21cc:	0000000c 	.word	0x0000000c
    21d0:	ffffffff 	.word	0xffffffff
    21d4:	7c010001 	.word	0x7c010001
    21d8:	000d0c0e 	.word	0x000d0c0e
    21dc:	0000000c 	.word	0x0000000c
    21e0:	000021cc 	.word	0x000021cc
    21e4:	00000000 	.word	0x00000000
    21e8:	00000030 	.word	0x00000030
    21ec:	0000000c 	.word	0x0000000c
    21f0:	ffffffff 	.word	0xffffffff
    21f4:	7c010001 	.word	0x7c010001
    21f8:	000d0c0e 	.word	0x000d0c0e
    21fc:	00000018 	.word	0x00000018
    2200:	000021ec 	.word	0x000021ec
    2204:	00000000 	.word	0x00000000
    2208:	00000048 	.word	0x00000048
    220c:	8e100e44 	.word	0x8e100e44
    2210:	85028601 	.word	0x85028601
    2214:	00048403 	.word	0x00048403
    2218:	00000018 	.word	0x00000018
    221c:	000021ec 	.word	0x000021ec
    2220:	00000000 	.word	0x00000000
    2224:	00000080 	.word	0x00000080
    2228:	8e100e44 	.word	0x8e100e44
    222c:	85028601 	.word	0x85028601
    2230:	00048403 	.word	0x00048403
    2234:	0000000c 	.word	0x0000000c
    2238:	ffffffff 	.word	0xffffffff
    223c:	7c010001 	.word	0x7c010001
    2240:	000d0c0e 	.word	0x000d0c0e
    2244:	00000018 	.word	0x00000018
    2248:	00002234 	.word	0x00002234
    224c:	00000000 	.word	0x00000000
    2250:	000000fc 	.word	0x000000fc
    2254:	860c0e44 	.word	0x860c0e44
    2258:	84028501 	.word	0x84028501
    225c:	00000003 	.word	0x00000003
    2260:	0000000c 	.word	0x0000000c
    2264:	ffffffff 	.word	0xffffffff
    2268:	7c010001 	.word	0x7c010001
    226c:	000d0c0e 	.word	0x000d0c0e
    2270:	00000014 	.word	0x00000014
    2274:	00002260 	.word	0x00002260
    2278:	00000000 	.word	0x00000000
    227c:	000000d0 	.word	0x000000d0
    2280:	85080e48 	.word	0x85080e48
    2284:	00028401 	.word	0x00028401
    2288:	0000000c 	.word	0x0000000c
    228c:	ffffffff 	.word	0xffffffff
    2290:	7c010001 	.word	0x7c010001
    2294:	000d0c0e 	.word	0x000d0c0e
    2298:	0000001c 	.word	0x0000001c
    229c:	00002288 	.word	0x00002288
    22a0:	00000000 	.word	0x00000000
    22a4:	0000009c 	.word	0x0000009c
    22a8:	88140e48 	.word	0x88140e48
    22ac:	86028701 	.word	0x86028701
    22b0:	84048503 	.word	0x84048503
    22b4:	00000005 	.word	0x00000005
    22b8:	0000000c 	.word	0x0000000c
    22bc:	ffffffff 	.word	0xffffffff
    22c0:	7c010001 	.word	0x7c010001
    22c4:	000d0c0e 	.word	0x000d0c0e
    22c8:	00000024 	.word	0x00000024
    22cc:	000022b8 	.word	0x000022b8
    22d0:	00000000 	.word	0x00000000
    22d4:	0000010c 	.word	0x0000010c
    22d8:	8e240e44 	.word	0x8e240e44
    22dc:	8a028b01 	.word	0x8a028b01
    22e0:	88048903 	.word	0x88048903
    22e4:	86068705 	.word	0x86068705
    22e8:	84088507 	.word	0x84088507
    22ec:	300e4c09 	.word	0x300e4c09

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	5446454c 	strbpl	r4, [r6], #-1356
       4:	75614200 	strbvc	r4, [r1, #-512]!
       8:	74617264 	strbtvc	r7, [r1], #-612
       c:	495a5f65 	ldmdbmi	sl, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
      10:	58410047 	stmdapl	r1, {r0, r1, r2, r6}^
      14:	52505f4d 	subspl	r5, r0, #308	; 0x134
      18:	4e455345 	cdpmi	3, 4, cr5, cr5, cr5, {2}
      1c:	4f565f54 	svcmi	0x00565f54
      20:	4741544c 	strbmi	r5, [r1, -ip, asr #8]
      24:	58440045 	stmdapl	r4, {r0, r2, r6}^
      28:	58525f4c 	ldmdapl	r2, {r2, r3, r6, r8, r9, sl, fp, ip, lr}^
      2c:	454d4954 	strbmi	r4, [sp, #-2388]
      30:	0054554f 	subseq	r5, r4, pc, asr #10
      34:	5f4d5841 	svcpl	0x004d5841
      38:	5245504f 	subpl	r5, r5, #79	; 0x4f
      3c:	4e495441 	cdpmi	4, 4, cr5, cr9, cr1, {2}
      40:	4f4d5f47 	svcmi	0x004d5f47
      44:	41004544 	tstmi	r0, r4, asr #10
      48:	732f5050 	teqvc	pc, #80	; 0x50
      4c:	6d2f6372 	stcvs	3, cr6, [pc, #-456]!
      50:	2e6e6961 	cdpcs	9, 6, cr6, cr14, cr1, {3}
      54:	61420063 	cmpvs	r2, r3, rrx
      58:	61726475 	cmnvs	r2, r5, ror r4
      5c:	505f6574 	subspl	r6, pc, r4, ror r5
      60:	50005543 	andpl	r5, r0, r3, asr #10
      64:	52474f52 	subpl	r4, r7, #328	; 0x148
      68:	41004d41 	tstmi	r0, r1, asr #26
      6c:	4c5f4d58 	mrrcmi	13, 5, r4, pc, cr8
      70:	41004445 	tstmi	r0, r5, asr #8
      74:	435f4d58 	cmpmi	pc, #5632	; 0x1600
      78:	4f435f57 	svcmi	0x00435f57
      7c:	494c504d 	stmdbmi	ip, {r0, r2, r3, r6, ip, lr}^
      80:	45434e41 	strbmi	r4, [r3, #-3649]
      84:	52414d5f 	subpl	r4, r1, #6080	; 0x17c0
      88:	004e4947 	subeq	r4, lr, r7, asr #18
      8c:	5f4d5841 	svcpl	0x004d5841
      90:	54415453 	strbpl	r5, [r1], #-1107
      94:	525f5355 	subspl	r5, pc, #1409286145	; 0x54000001
      98:	52555445 	subspl	r5, r5, #1157627904	; 0x45000000
      9c:	454c5f4e 	strbmi	r5, [ip, #-3918]
      a0:	004c4556 	subeq	r4, ip, r6, asr r5
      a4:	74616477 	strbtvc	r6, [r1], #-1143
      a8:	75620061 	strbvc	r0, [r2, #-97]!
      ac:	64657a7a 	strbtvs	r7, [r5], #-2682
      b0:	746f6e5f 	strbtvc	r6, [pc], #3679	; b8 <_Minimum_Stack_Size-0x48>
      b4:	00655f65 	rsbeq	r5, r5, r5, ror #30
      b8:	5f4d5841 	svcpl	0x004d5841
      bc:	44554142 	ldrbmi	r4, [r5], #-322
      c0:	5441525f 	strbpl	r5, [r1], #-607
      c4:	58410045 	stmdapl	r1, {r0, r2, r6}^
      c8:	45525f4d 	ldrbmi	r5, [r2, #-3917]
      cc:	4e525554 	mrcmi	5, 2, r5, cr2, cr4, {2}
      d0:	4c45445f 	cfstrdmi	mvd4, [r5], {95}
      d4:	545f5941 	ldrbpl	r5, [pc], #2369	; dc <_Minimum_Stack_Size-0x24>
      d8:	00454d49 	subeq	r4, r5, r9, asr #26
      dc:	45544f4e 	ldrbmi	r4, [r4, #-3918]
      e0:	0073465f 	rsbseq	r4, r3, pc, asr r6
      e4:	524f5045 	subpl	r5, pc, #69	; 0x45
      e8:	00413354 	subeq	r3, r1, r4, asr r3
      ec:	5a706267 	bpl	1c18a90 <__Stack_Size+0x1c18690>
      f0:	75426769 	strbvc	r6, [r2, #-1897]
      f4:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
      f8:	44626700 	strbtmi	r6, [r2], #-1792
      fc:	65526c78 	ldrbvs	r6, [r2, #-3192]
     100:	41006461 	tstmi	r0, r1, ror #8
     104:	485f4d58 	ldmdami	pc, {r3, r4, r6, r8, sl, fp, lr}^
     108:	45484749 	strbmi	r4, [r8, #-1865]
/* set up for an interpolation from pose to nextpose over TIME
 milliseconds by setting servo speeds. */
void BioloidControllerEx_interpolateSetup(int time) {
	int i;
	int frames = (time/frameLength) + 1;
	nextframe_ = getMillis() + frameLength;
     10c:	4c5f5453 	cfldrdmi	mvd5, [pc], {83}
	PrintString("BioloidEX BioloidControllerEx_interpolateSetup nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// set speed each servo...
	for (i = 0; i < poseSize; i++) {
     110:	54494d49 	strbpl	r4, [r9], #-3401
/* set up for an interpolation from pose to nextpose over TIME
 milliseconds by setting servo speeds. */
void BioloidControllerEx_interpolateSetup(int time) {
	int i;
	int frames = (time/frameLength) + 1;
	nextframe_ = getMillis() + frameLength;
     114:	4c4f565f 	mcrrmi	6, 5, r5, pc, cr15
     118:	45474154 	strbmi	r4, [r7, #-340]
	PrintString("BioloidEX BioloidControllerEx_interpolateSetup nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// set speed each servo...
	for (i = 0; i < poseSize; i++) {
     11c:	4d584100 	ldfmie	f4, [r8]
     120:	4552505f 	ldrbmi	r5, [r2, #-95]
     124:	544e4553 	strbpl	r4, [lr], #-1363
		if (nextpose_[i] > pose_[i]) {
     128:	4d45545f 	cfstrdmi	mvd5, [r5, #-380]
     12c:	41524550 	cmpmi	r2, r0, asr r5
			speed_[i] = (nextpose_[i] - pose_[i]) / frames + 1;
     130:	45525554 	ldrbmi	r5, [r2, #-1364]
		} else {
			speed_[i] = (pose_[i] - nextpose_[i]) / frames + 1;
     134:	4c584400 	cfldrdmi	mvd4, [r8], {0}
     138:	4358525f 	cmpmi	r8, #-268435451	; 0xf0000005
     13c:	4b434548 	blmi	10d1664 <__Stack_Size+0x10d1264>
	PrintString("BioloidEX BioloidControllerEx_interpolateSetup nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// set speed each servo...
	for (i = 0; i < poseSize; i++) {
     140:	004d5553 	subeq	r5, sp, r3, asr r5
     144:	5f4c5844 	svcpl	0x004c5844
		PrintString(" - ");
		TxD_Dec_U16(speed_[i]);
		PrintString("\n");
#endif
	}
	interpolating = 1;
     148:	5f444142 	svcpl	0x00444142
     14c:	54534e49 	ldrbpl	r4, [r3], #-3657
}
     150:	544f4e00 	strbpl	r4, [pc], #3584	; 158 <_Minimum_Stack_Size+0x58>
     154:	62475f45 	subvs	r5, r7, #276	; 0x114
     158:	4d584100 	ldfmie	f4, [r8]
     15c:	4e55505f 	mrcmi	0, 2, r5, cr5, cr15, {2}
     160:	485f4843 	ldmdami	pc, {r0, r1, r6, fp, lr}^
     164:	4d584100 	ldfmie	f4, [r8]
     168:	4e55505f 	mrcmi	0, 2, r5, cr5, cr15, {2}
	PrintString("\n");
#endif
}

/* new-style setup */
void Bioloid_Setup(int servo_cnt) {
     16c:	4c5f4843 	mrrcmi	8, 4, r4, pc, cr3
     170:	6f504500 	svcvs	0x00504500
	/**id_ = (unsigned char *) malloc(servo_cnt * sizeof(unsigned char));
	 pose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
     174:	5f417472 	svcpl	0x00417472
     178:	4f4e0065 	svcmi	0x004e0065
	for (i = 0; i < poseSize; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
     17c:	475f4554 	undefined
     180:	50450073 	subpl	r0, r5, r3, ror r0
		nextpose_[i] = 512;
     184:	3454524f 	ldrbcc	r5, [r4], #-591
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
	for (i = 0; i < poseSize; i++) {
		id_[i] = i + 1;
     188:	58410041 	stmdapl	r1, {r0, r6}^
		pose_[i] = 512;
     18c:	43435f4d 	movtmi	r5, #16205	; 0x3f4d
		nextpose_[i] = 512;
     190:	4e415f57 	mcrmi	15, 2, r5, cr1, cr7, {2}
	 pose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
	for (i = 0; i < poseSize; i++) {
     194:	5f454c47 	svcpl	0x00454c47
     198:	494d494c 	stmdbmi	sp, {r2, r3, r6, r8, fp, lr}^
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
	}
	interpolating = 0;
     19c:	00485f54 	subeq	r5, r8, r4, asr pc
     1a0:	5f4d5841 	svcpl	0x004d5841
	nextframe_ = getMillis();
     1a4:	5f574343 	svcpl	0x00574343
     1a8:	4c474e41 	mcrrmi	14, 4, r4, r7, cr1
#ifdef MILLIS
	PrintString("BioloidEX nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
}
     1ac:	494c5f45 	stmdbmi	ip, {r0, r2, r6, r8, r9, sl, fp, ip, lr}^
     1b0:	5f54494d 	svcpl	0x0054494d
     1b4:	6552004c 	ldrbvs	r0, [r2, #-76]
     1b8:	76696563 	strbtvc	r6, [r9], -r3, ror #10
     1bc:	6f436465 	svcvs	0x00436465
     1c0:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
     1c4:	4e470064 	cdpmi	0, 4, cr0, cr7, cr4, {3}
transition_t * sequence;                    // sequence we are running
int transitions;                    // how many transitions we have left to load


//  initializes serial1 transmit at baud, 8-N-1
void BioloidControllerEx() {
     1c8:	20432055 	subcs	r2, r3, r5, asr r0
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
     1cc:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
     1d0:	58410030 	stmdapl	r1, {r4, r5}^
transition_t * sequence;                    // sequence we are running
int transitions;                    // how many transitions we have left to load


//  initializes serial1 transmit at baud, 8-N-1
void BioloidControllerEx() {
     1d4:	43435f4d 	movtmi	r5, #16205	; 0x3f4d
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
     1d8:	4f435f57 	svcmi	0x00435f57
	 pose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
     1dc:	494c504d 	stmdbmi	ip, {r0, r2, r3, r6, ip, lr}^
     1e0:	45434e41 	strbmi	r4, [r3, #-3649]
		pose_[i] = 512;
		nextpose_[i] = 512;
     1e4:	4f4c535f 	svcmi	0x004c535f
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
     1e8:	41004550 	tstmi	r0, r0, asr r5
		nextpose_[i] = 512;
     1ec:	4c5f4d58 	mrrcmi	13, 5, r4, pc, cr8
	/**id_ = (unsigned char *) malloc(AX12_MAX_SERVOS * sizeof(unsigned char));
	 pose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
     1f0:	004b434f 	subeq	r4, fp, pc, asr #6
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
	}
	frameLength = BIOLOID_FRAME_LENGTH;
     1f4:	5f4d5841 	svcpl	0x004d5841
     1f8:	53554150 	cmppl	r5, #20	; 0x14
	interpolating = 0;
     1fc:	49545f45 	ldmdbmi	r4, {r0, r2, r6, r8, r9, sl, fp, ip, lr}^
	nextframe_ = getMillis();
     200:	4400454d 	strmi	r4, [r0], #-1357
     204:	4e5f4c58 	mrcmi	12, 2, r4, cr15, cr8, {2}
#ifdef MILLIS
	PrintString("BioloidEX nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
}
     208:	5f4c4c55 	svcpl	0x004c4c55
     20c:	41544144 	cmpmi	r4, r4, asr #2
     210:	4f504500 	svcmi	0x00504500
     214:	41355452 	teqmi	r5, r2, asr r4
     218:	74754200 	ldrbtvc	r4, [r5], #-512
     21c:	5f6e6f74 	svcpl	0x006e6f74
     220:	68730065 	ldmdavs	r3!, {r0, r2, r5, r6}^
#endif
		mDelay(25);
	}
}
/* write pose out to servos using sync write. */
void BioloidControllerEx_writePose() {
     224:	2074726f 	rsbscs	r7, r4, pc, ror #4
     228:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
	int temp;
	dxl_set_txpacket_id (BROADCAST_ID);
     22c:	64656e67 	strbtvs	r6, [r5], #-3687
	dxl_set_txpacket_instruction (INST_SYNC_WRITE);
     230:	746e6920 	strbtvc	r6, [lr], #-2336
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
     234:	544f4e00 	strbpl	r4, [pc], #3584	; 23c <_Minimum_Stack_Size+0x13c>
     238:	00415f45 	subeq	r5, r1, r5, asr #30
	dxl_set_txpacket_parameter(1, 2);
     23c:	45544f4e 	ldrbmi	r4, [r4, #-3918]
     240:	4e00425f 	mcrmi	2, 0, r4, cr0, cr15, {2}
     244:	5f45544f 	svcpl	0x0045544f
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
     248:	42560044 	subsmi	r0, r6, #68	; 0x44
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
     24c:	4e005355 	mcrmi	3, 0, r5, cr0, cr5, {2}
     250:	5f45544f 	svcpl	0x0045544f
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
     254:	4f4e0046 	svcmi	0x004e0046
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
     258:	475f4554 	undefined
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
     25c:	544f4e00 	strbpl	r4, [pc], #3584	; 264 <_Minimum_Stack_Size+0x164>
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
     260:	62415f45 	subvs	r5, r1, #276	; 0x114
     264:	50626700 	rsbpl	r6, r2, r0, lsl #14
     268:	72577563 	subsvc	r7, r7, #415236096	; 0x18c00000
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
     26c:	00657469 	rsbeq	r7, r5, r9, ror #8
     270:	5f4d5841 	svcpl	0x004d5841
     274:	4e004449 	cdpmi	4, 0, cr4, cr0, cr9, {2}
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
     278:	5f45544f 	svcpl	0x0045544f
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
     27c:	41007341 	tstmi	r0, r1, asr #6
	dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction (INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
     280:	4d5f4d58 	ldclmi	13, cr4, [pc, #-352]
     284:	4c45444f 	cfstrdmi	mvd4, [r5], {79}
     288:	4d554e5f 	ldclmi	14, cr4, [r5, #-380]
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
	}
	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
     28c:	5f524542 	svcpl	0x00524542
     290:	58410048 	stmdapl	r1, {r3, r6}^
     294:	4f4d5f4d 	svcmi	0x004d5f4d
	dxl_txrx_packet();
     298:	5f4c4544 	svcpl	0x004c4544
	u16 CommStatus = dxl_get_result();
     29c:	424d554e 	submi	r5, sp, #327155712	; 0x13800000
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
     2a0:	4c5f5245 	lfmmi	f5, 2, [pc], {69}
		PrintErrorCode();
     2a4:	4c584400 	cfldrdmi	mvd4, [r8], {0}
	else
		PrintCommStatus(CommStatus);
     2a8:	4c58525f 	lfmmi	f5, 2, [r8], {95}
#endif
}
     2ac:	54474e45 	strbpl	r4, [r7], #-3653
     2b0:	62670048 	rsbvs	r0, r7, #72	; 0x48
     2b4:	6c784470 	cfldrdvs	mvd4, [r8], #-448
     2b8:	66667542 	strbtvs	r7, [r6], -r2, asr #10
	}
	interpolating = 1;
}
/* interpolate our pose, this should be called at about 30Hz. */
#define WAIT_SLOP_FACTOR 10
int BioloidControllerEx_interpolateStep(bool fWait) {
     2bc:	41007265 	tstmi	r0, r5, ror #4
     2c0:	435f4d58 	cmpmi	pc, #5632	; 0x1600

	if (interpolating == 0)
     2c4:	435f5743 	cmpmi	pc, #17563648	; 0x10c0000
		return 0;
	int i;
	int complete = poseSize;
     2c8:	4c504d4f 	mrrcmi	13, 4, r4, r0, cr15
	if (!fWait) {
     2cc:	434e4149 	movtmi	r4, #57673	; 0xe149
		if (getMillis() < (nextframe_ - WAIT_SLOP_FACTOR)) {
     2d0:	414d5f45 	cmpmi	sp, r5, asr #30
     2d4:	4e494752 	mcrmi	7, 2, r4, cr9, cr2, {2}
     2d8:	4d584100 	ldfmie	f4, [r8]
			return (getMillis() - nextframe_); // We still have some time to do something...
     2dc:	58414d5f 	stmdapl	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
     2e0:	524f545f 	subpl	r5, pc, #1593835520	; 0x5f000000
     2e4:	5f455551 	svcpl	0x00455551
#ifdef MILLIS
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	while (getMillis() < nextframe_);
     2e8:	58410048 	stmdapl	r1, {r3, r6}^
     2ec:	414d5f4d 	cmpmi	sp, sp, asr #30
     2f0:	4f545f58 	svcmi	0x00545f58
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
     2f4:	45555152 	ldrbmi	r5, [r5, #-338]
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     2f8:	41004c5f 	tstmi	r0, pc, asr ip
     2fc:	555f4d58 	ldrbpl	r4, [pc, #-3416]	; fffff5ac <SCS_BASE+0x1fff15ac>
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
     300:	41435f50 	cmpmi	r3, r0, asr pc
     304:	5242494c 	subpl	r4, r2, #1245184	; 0x130000
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     308:	4f495441 	svcmi	0x00495441
		int diff = nextpose_[i] - pose_[i];
     30c:	00485f4e 	subeq	r5, r8, lr, asr #30
     310:	5f4c5844 	svcpl	0x004c5844
     314:	41465854 	cmpmi	r6, r4, asr r8
     318:	45004c49 	strmi	r4, [r0, #-3145]
     31c:	54524f50 	ldrbpl	r4, [r2], #-3920
		if (diff == 0) {
     320:	41004136 	tstmi	r0, r6, lsr r1
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
     324:	555f4d58 	ldrbpl	r4, [pc, #-3416]	; fffff5d4 <SCS_BASE+0x1fff15d4>
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
     328:	41435f50 	cmpmi	r3, r0, asr pc
		int diff = nextpose_[i] - pose_[i];
		if (diff == 0) {
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
     32c:	5242494c 	subpl	r4, r2, #1245184	; 0x130000
					pose_[i] = nextpose_[i];
     330:	4f495441 	svcmi	0x00495441
					complete--;
     334:	004c5f4e 	subeq	r5, ip, lr, asr #30
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
     338:	5f4d5841 	svcpl	0x004d5841
     33c:	49564f4d 	ldmdbmi	r6, {r0, r2, r3, r6, r8, r9, sl, fp, lr}^
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
     340:	4100474e 	tstmi	r0, lr, asr #14
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
     344:	505f4d58 	subspl	r4, pc, r8, asr sp
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
     348:	45534552 	ldrbmi	r4, [r3, #-1362]
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     34c:	505f544e 	subspl	r5, pc, lr, asr #8
     350:	5449534f 	strbpl	r5, [r9], #-847
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif

	}
	if (complete <= 0)
     354:	5f4e4f49 	svcpl	0x004e4f49
		interpolating = 0;
     358:	58410048 	stmdapl	r1, {r3, r6}^
	BioloidControllerEx_writePose();
     35c:	52505f4d 	subspl	r5, r0, #308	; 0x134
     360:	4e455345 	cdpmi	3, 4, cr5, cr5, cr5, {2}
	return 0;
}
     364:	4f505f54 	svcmi	0x00505f54
     368:	49544953 	ldmdbmi	r4, {r0, r1, r4, r6, r8, fp, lr}^
     36c:	4c5f4e4f 	mrrcmi	14, 4, r4, pc, cr15
     370:	574f5000 	strbpl	r5, [pc, -r0]
     374:	4e005245 	cdpmi	2, 0, cr5, cr0, cr5, {2}
     378:	5f45544f 	svcpl	0x0045544f
     37c:	4e006242 	cdpmi	2, 0, cr6, cr0, cr2, {2}
     380:	5f45544f 	svcpl	0x0045544f
	for (i = 0; i < poseSize; i++)
		//nextpose_[i] = pgm_read_word_near(addr+1+i) << BIOLOID_SHIFT;
		nextpose_[i] = pgm_read_word_near(addr + 1 + i);
}
/* read in current servo positions to the pose. */
void BioloidControllerEx_readPose() {
     384:	54530043 	ldrbpl	r0, [r3], #-67
     388:	00545241 	subseq	r5, r4, r1, asr #4
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
		//pose_[i] = dxl_read_word(id_[i],AXM_PRESENT_POSITION_L)<<BIOLOID_SHIFT;
		pose_[i] = dxl_read_word(id_[i], AXM_PRESENT_POSITION_L);
     38c:	45544f4e 	ldrbmi	r4, [r4, #-3918]
     390:	6700455f 	smlsdvs	r0, pc, r5, r4
     394:	67695a62 	strbvs	r5, [r9, -r2, ror #20]!
     398:	64616552 	strbtvs	r6, [r1], #-1362
     39c:	5c3a4300 	ldcpl	3, cr4, [sl]
		PrintChar(id_[i]);
		PrintString(" - ");
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
     3a0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001

#ifdef DEBUG_BIOLOIDEX
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
     3a4:	6e695c73 	mcrvs	12, 3, r5, cr9, cr3, {3}
     3a8:	6c617473 	cfstrdvs	mvd7, [r1], #-460
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
	}
}
     3ac:	72705c6c 	rsbsvc	r5, r0, #27648	; 0x6c00
     3b0:	6b656a6f 	blvs	195ad74 <__Stack_Size+0x195a974>
     3b4:	69425c74 	stmdbvs	r2, {r2, r4, r5, r6, sl, fp, ip, lr}^
     3b8:	696f6c6f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitPosY[GaitCurrentLegNr] = -3 * g_InControlState.LegLiftHeight
				/ (3 + g_InControlState.gaitCur.HalfLiftHeight); // Easier to shift between div factor: /1 (3/3), /2 (3/6) and 3/4
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y
     3bc:	75482d64 	strbvc	r2, [r8, #-3428]
				/ g_InControlState.gaitCur.LiftDivFactor;
	}

	//Optional Half heigth Rear 5 LiftedPos (5 lifted positions)
	else if (((g_InControlState.gaitCur.NrLiftedPos == 5 && (LegStep == -2)))
     3c0:	6f6e616d 	svcvs	0x006e616d
     3c4:	522d6469 	eorpl	r6, sp, #1761607680	; 0x69000000
     3c8:	746f626f 	strbtvc	r6, [pc], #623	; 3d0 <_Minimum_Stack_Size+0x2d0>
     3cc:	6d75685c 	ldclvs	8, cr6, [r5, #-368]!
     3d0:	696f6e61 	stmdbvs	pc!, {r0, r5, r6, r9, sl, fp, sp, lr}^
     3d4:	5f635f64 	svcpl	0x00635f64
     3d8:	746e6f63 	strbtvc	r6, [lr], #-3939
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = -g_InControlState.TravelLength.x / 2;
     3dc:	6c6c6f72 	stclvs	15, cr6, [ip], #-456
     3e0:	41007265 	tstmi	r0, r5, ror #4
     3e4:	545f4d58 	ldrbpl	r4, [pc], #3416	; 3ec <_Minimum_Stack_Size+0x2ec>
     3e8:	5551524f 	ldrbpl	r5, [r1, #-591]
     3ec:	494c5f45 	stmdbmi	ip, {r0, r2, r6, r8, r9, sl, fp, ip, lr}^
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
     3f0:	5f54494d 	svcpl	0x0054494d
     3f4:	62670048 	rsbvs	r0, r7, #72	; 0x48
     3f8:	52756350 	rsbspl	r6, r5, #1073741825	; 0x40000001
     3fc:	00646165 	rsbeq	r6, r4, r5, ror #2
     400:	5f4d5841 	svcpl	0x004d5841
		GaitPosZ[GaitCurrentLegNr] = -g_InControlState.TravelLength.z / 2;
     404:	51524f54 	cmppl	r2, r4, asr pc
     408:	4c5f4555 	cfldr64mi	mvdx4, [pc], {85}
     40c:	54494d49 	strbpl	r4, [r9], #-3401
     410:	41004c5f 	tstmi	r0, pc, asr ip
		GaitRotY[GaitCurrentLegNr] = -g_InControlState.TravelLength.y / 2;
     414:	525f4d58 	subspl	r4, pc, #5632	; 0x1600
     418:	53494745 	movtpl	r4, #38725	; 0x9745
     41c:	45524554 	ldrbmi	r4, [r2, #-1364]
     420:	4e495f44 	cdpmi	15, 4, cr5, cr9, cr4, {2}
	}

	//Optional Half heigth Front 5 LiftedPos (5 lifted positions)
	else if ((g_InControlState.gaitCur.NrLiftedPos == 5)
     424:	55525453 	ldrbpl	r5, [r2, #-1107]
     428:	4f495443 	svcmi	0x00495443
     42c:	5841004e 	stmdapl	r1, {r1, r2, r3, r6}^
     430:	4f545f4d 	svcmi	0x00545f4d
     434:	45555152 	ldrbmi	r5, [r5, #-338]
     438:	414e455f 	cmpmi	lr, pc, asr r5
			&& (LegStep == 2
					|| LegStep == -(g_InControlState.gaitCur.StepsInGait - 2))
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
     43c:	00454c42 	subeq	r4, r5, r2, asr #24
     440:	5f4d5841 	svcpl	0x004d5841
     444:	45574f4c 	ldrbmi	r4, [r7, #-3916]
     448:	4c5f5453 	cfldrdmi	mvd5, [pc], {83}
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
     44c:	54494d49 	strbpl	r4, [r9], #-3401
     450:	4c4f565f 	mcrrmi	6, 5, r5, pc, cr15
     454:	45474154 	strbmi	r4, [r7, #-340]
     458:	4c584400 	cfldrdmi	mvd4, [r8], {0}
     45c:	5758525f 	undefined
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
     460:	49544941 	ldmdbmi	r4, {r0, r6, r8, fp, lr}^
     464:	7500474e 	strvc	r4, [r0, #-1870]
     468:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     46c:	2064656e 	rsbcs	r6, r4, lr, ror #10
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y / 2;
     470:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     474:	414c5000 	cmpmi	ip, r0
     478:	62670059 	rsbvs	r0, r7, #89	; 0x59
     47c:	75635070 	strbvc	r5, [r3, #-112]!
	}
	//_B_
	//Leg front down position //bug here?  From _A_ to _B_ there should only be one gaitstep, not 2!
	//For example, where is the case of LegStep==0+2 executed when NRLiftedPos=3?
	else if ((LegStep == g_InControlState.gaitCur.FrontDownPos
     480:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     484:	44007265 	strmi	r7, [r0], #-613
     488:	525f4c58 	subspl	r4, pc, #22528	; 0x5800
     48c:	43555358 	cmpmi	r5, #1610612737	; 0x60000001
     490:	53534543 	cmppl	r3, #281018368	; 0x10c00000
     494:	6f687300 	svcvs	0x00687300
     498:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
     49c:	4100746e 	tstmi	r0, lr, ror #8
			|| LegStep
					== -(g_InControlState.gaitCur.StepsInGait
							- g_InControlState.gaitCur.FrontDownPos))
			&& GaitPosY[GaitCurrentLegNr] < 0) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
     4a0:	485f4d58 	ldmdami	pc, {r3, r4, r6, r8, sl, fp, lr}^
     4a4:	45484749 	strbmi	r4, [r8, #-1865]
     4a8:	4c5f5453 	cfldrdmi	mvd5, [pc], {83}
     4ac:	54494d49 	strbpl	r4, [r9], #-3401
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
     4b0:	4d45545f 	cfstrdmi	mvd5, [r5, #-380]
     4b4:	41524550 	cmpmi	r2, r0, asr r5
     4b8:	45525554 	ldrbmi	r5, [r2, #-1364]
     4bc:	4d584100 	ldfmie	f4, [r8]
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y / 2;
     4c0:	414c415f 	cmpmi	ip, pc, asr r1
     4c4:	4c5f4d52 	mrrcmi	13, 5, r4, pc, cr2
     4c8:	44004445 	strmi	r4, [r0], #-1093
		GaitPosY[GaitCurrentLegNr] = 0;
     4cc:	545f4c58 	ldrbpl	r4, [pc], #3160	; 4d4 <__Stack_Size+0xd4>
     4d0:	52524558 	subspl	r4, r2, #369098752	; 0x16000000
	}

	//Move body forward
	else {
		GaitPosX[GaitCurrentLegNr] = GaitPosX[GaitCurrentLegNr]
     4d4:	7400524f 	strvc	r5, [r0], #-591
     4d8:	6f43706d 	svcvs	0x0043706d
     4dc:	52006d6d 	andpl	r6, r0, #6976	; 0x1b40
     4e0:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     4e4:	44646576 	strbtmi	r6, [r4], #-1398
     4e8:	00617461 	rsbeq	r7, r1, r1, ror #8
				- (g_InControlState.TravelLength.x
						/ (short) g_InControlState.gaitCur.TLDivFactor);
		GaitPosY[GaitCurrentLegNr] = 0;
     4ec:	45544f4e 	ldrbmi	r4, [r4, #-3918]
     4f0:	0073435f 	rsbseq	r4, r3, pc, asr r3
     4f4:	5f44454c 	svcpl	0x0044454c
		GaitPosZ[GaitCurrentLegNr] = GaitPosZ[GaitCurrentLegNr]
     4f8:	58410065 	stmdapl	r1, {r0, r2, r5, r6}^
     4fc:	4f445f4d 	svcmi	0x00445f4d
     500:	435f4e57 	cmpmi	pc, #1392	; 0x570
     504:	42494c41 	submi	r4, r9, #16640	; 0x4100
				- (g_InControlState.TravelLength.z
						/ (short) g_InControlState.gaitCur.TLDivFactor);
		GaitRotY[GaitCurrentLegNr] = GaitRotY[GaitCurrentLegNr]
     508:	49544152 	ldmdbmi	r4, {r1, r4, r6, r8, lr}^
     50c:	485f4e4f 	ldmdami	pc, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
     510:	4d584100 	ldfmie	f4, [r8]
     514:	574f445f 	smlsldpl	r4, pc, pc, r4
				- (g_InControlState.TravelLength.y
						/ (short) g_InControlState.gaitCur.TLDivFactor);
	}

}
     518:	41435f4e 	cmpmi	r3, lr, asr #30
     51c:	5242494c 	subpl	r4, r2, #1245184	; 0x130000
     520:	4f495441 	svcmi	0x00495441
     524:	004c5f4e 	subeq	r5, ip, lr, asr #30
     528:	48474952 	stmdami	r7, {r1, r4, r6, r8, fp, lr}^
     52c:	64700054 	ldrbtvs	r0, [r0], #-84
     530:	00617461 	rsbeq	r7, r1, r1, ror #8

}

//--------------------------------------------------------------------
//[GAIT Sequence]
void GaitSeq(void) {
     534:	6f426552 	svcvs	0x00426552
	//Check if the Gait is in motion - If not if we are going to start a motion try to align our Gaitstep to start with a good foot
	// for the direction we are about to go...

	if (fWalking || (g_InControlState.ForceGaitStepCnt != 0))
     538:	6f54746f 	svcvs	0x0054746f
     53c:	746f6f42 	strbtvc	r6, [pc], #3906	; 544 <__Stack_Size+0x144>
     540:	64616f4c 	strbtvs	r6, [r1], #-3916
		TravelRequest = true;   // Is walking or was walking...
     544:	41007265 	tstmi	r0, r5, ror #4
     548:	505f4d58 	subspl	r4, pc, r8, asr sp
	else {
		TravelRequest = (abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
     54c:	45534552 	ldrbmi	r4, [r3, #-1362]
     550:	535f544e 	cmppl	pc, #1308622848	; 0x4e000000
     554:	44454550 	strbmi	r4, [r5], #-1360
     558:	4100485f 	tstmi	r0, pc, asr r8
     55c:	505f4d58 	subspl	r4, pc, r8, asr sp
     560:	45534552 	ldrbmi	r4, [r3, #-1362]
     564:	535f544e 	cmppl	pc, #1308622848	; 0x4e000000
     568:	44454550 	strbmi	r4, [r5], #-1360
     56c:	4e004c5f 	mcrmi	12, 0, r4, cr0, cr15, {2}
     570:	5f45544f 	svcpl	0x0045544f
     574:	41006244 	tstmi	r0, r4, asr #4
     578:	435f4d58 	cmpmi	pc, #5632	; 0x1600
     57c:	4e415f57 	mcrmi	15, 2, r5, cr1, cr7, {2}
				|| (abs(g_InControlState.TravelLength.y) > cTravelDeadZone);

		if (TravelRequest) {

		} else {    //Clear values under the cTravelDeadZone
			g_InControlState.TravelLength.x = 0;
     580:	5f454c47 	svcpl	0x00454c47
			g_InControlState.TravelLength.z = 0;
     584:	494d494c 	stmdbmi	sp, {r2, r3, r6, r8, fp, lr}^
			g_InControlState.TravelLength.y = 0; //Gait NOT in motion, return to home position
		}
	}

	//Calculate Gait sequence
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
     588:	00485f54 	subeq	r5, r8, r4, asr pc
     58c:	5f4c5844 	svcpl	0x004c5844
     590:	5f444142 	svcpl	0x00444142
		Gait(LegIndex);
     594:	41004449 	tstmi	r0, r9, asr #8
			g_InControlState.TravelLength.y = 0; //Gait NOT in motion, return to home position
		}
	}

	//Calculate Gait sequence
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
     598:	435f4d58 	cmpmi	pc, #5632	; 0x1600
     59c:	4e415f57 	mcrmi	15, 2, r5, cr1, cr7, {2}
     5a0:	5f454c47 	svcpl	0x00454c47
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5a4:	494d494c 	stmdbmi	sp, {r2, r3, r6, r8, fp, lr}^
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
     5a8:	004c5f54 	subeq	r5, ip, r4, asr pc
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5ac:	45544f4e 	ldrbmi	r4, [r4, #-3918]
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
     5b0:	0073445f 	rsbseq	r4, r3, pc, asr r4
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5b4:	524f5045 	subpl	r5, pc, #69	; 0x45
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
		g_InControlState.GaitStep = 1;
     5b8:	00413154 	subeq	r3, r1, r4, asr r1
     5bc:	5f4d5841 	svcpl	0x004d5841

	// If we have a force count decrement it now...
	if (g_InControlState.ForceGaitStepCnt)
     5c0:	4d524946 	ldclmi	9, cr4, [r2, #-280]
     5c4:	45524157 	ldrbmi	r4, [r2, #-343]
		g_InControlState.ForceGaitStepCnt--;
     5c8:	5245565f 	subpl	r5, r5, #99614720	; 0x5f00000
}
     5cc:	4e4f4953 	mcrmi	9, 2, r4, cr15, cr3, {2}
     5d0:	4d584100 	ldfmie	f4, [r8]
     5d4:	564f4d5f 	undefined
     5d8:	5f474e49 	svcpl	0x00474e49
     5dc:	45455053 	strbmi	r5, [r5, #-83]
}
//--------------------------------------------------------------------
//[BalanceBody]
void BalanceBody(void) {

	TotalTransZ = TotalTransZ / BalanceDivFactor;
     5e0:	00485f44 	subeq	r5, r8, r4, asr #30
     5e4:	78446267 	stmdavc	r4, {r0, r1, r2, r5, r6, r9, sp, lr}^
     5e8:	6972576c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, ip, lr}^
     5ec:	41006574 	tstmi	r0, r4, ror r5
     5f0:	4d5f4d58 	ldclmi	13, cr4, [pc, #-352]
	TotalTransX = TotalTransX / BalanceDivFactor;
     5f4:	4e49564f 	cdpmi	6, 4, cr5, cr9, cr15, {2}
     5f8:	50535f47 	subspl	r5, r3, r7, asr #30
     5fc:	5f444545 	svcpl	0x00444545
	TotalTransY = TotalTransY / BalanceDivFactor;
     600:	5841004c 	stmdapl	r1, {r2, r3, r6}^
     604:	4c415f4d 	mcrrmi	15, 4, r5, r1, cr13
     608:	5f4d5241 	svcpl	0x004d5241
     60c:	54554853 	ldrbpl	r4, [r5], #-2131

	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
		TotalXBal1 += 3600;

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
     610:	4e574f44 	cdpmi	15, 5, cr4, cr7, cr4, {2}
     614:	5a626700 	bpl	189a21c <__Stack_Size+0x1899e1c>
	TotalTransX = TotalTransX / BalanceDivFactor;
	TotalTransY = TotalTransY / BalanceDivFactor;

#ifndef QUADMODE // ??? on PhantomX Hex at no movment YBal1 = 1800, on Quad = 0...  Need to experiment
	if (TotalYBal1 > 0)        //Rotate balance circle by +/- 180 deg
		TotalYBal1 -= 1800;
     618:	72576769 	subsvc	r6, r7, #27525120	; 0x1a40000
     61c:	00657469 	rsbeq	r7, r5, r9, ror #8
	else
		TotalYBal1 += 1800;
     620:	5f4d5841 	svcpl	0x004d5841
#endif

	if (TotalZBal1 < -1800) //Compensate for extreme balance positions that causes overflow
     624:	4c414f47 	mcrrmi	15, 4, r4, r1, cr7
     628:	534f505f 	movtpl	r5, #61535	; 0xf05f
     62c:	4f495449 	svcmi	0x00495449
		TotalZBal1 += 3600;
     630:	00485f4e 	subeq	r5, r8, lr, asr #30
     634:	5f4d5841 	svcpl	0x004d5841

	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
     638:	54535953 	ldrbpl	r5, [r3], #-2387
     63c:	445f4d45 	ldrbmi	r4, [pc], #3397	; 644 <__Stack_Size+0x244>
		TotalXBal1 += 3600;
     640:	32415441 	subcc	r5, r1, #1090519040	; 0x41000000
     644:	4d584100 	ldfmie	f4, [r8]

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
     648:	414f475f 	cmpmi	pc, pc, asr r7
     64c:	4f505f4c 	svcmi	0x00505f4c
	TotalXBal1 = -TotalXBal1 / BalanceDivFactor;
     650:	49544953 	ldmdbmi	r4, {r0, r1, r4, r6, r8, fp, lr}^
     654:	4c5f4e4f 	mrrcmi	14, 4, r4, pc, cr15
	TotalZBal1 = TotalZBal1 / BalanceDivFactor;
     658:	72657000 	rsbvc	r7, r5, #0	; 0x0
	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
		TotalXBal1 += 3600;

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
	TotalXBal1 = -TotalXBal1 / BalanceDivFactor;
     65c:	00726f72 	rsbseq	r6, r2, r2, ror pc
     660:	5f4d5841 	svcpl	0x004d5841
	TotalZBal1 = TotalZBal1 / BalanceDivFactor;
     664:	435f5743 	cmpmi	pc, #17563648	; 0x10c0000
     668:	4c504d4f 	mrrcmi	13, 4, r4, r0, cr15

}
     66c:	434e4149 	movtmi	r4, #57673	; 0xe149
     670:	4c535f45 	mrrcmi	15, 4, r5, r3, cr5
     674:	0045504f 	subeq	r5, r5, pc, asr #32
     678:	45544f4e 	ldrbmi	r4, [r4, #-3918]
     67c:	0062455f 	rsbeq	r4, r2, pc, asr r5
     680:	5f4c5844 	svcpl	0x004c5844
     684:	55535854 	ldrbpl	r5, [r3, #-2132]
     688:	53454343 	movtpl	r4, #21315	; 0x5343
//sin4        - Output Sinus of AngleDeg
//cos4          - Output Cosinus of AngleDeg
void GetSinCos(short AngleDeg1) {
	short ABSAngleDeg1;   //Absolute value of the Angle in Degrees, decimals = 1
	//Get the absolute value of AngleDeg
	if (AngleDeg1 < 0)
     68c:	58440053 	stmdapl	r4, {r0, r1, r4, r6}^
     690:	58525f4c 	ldmdapl	r2, {r2, r3, r6, r8, r9, sl, fp, ip, lr}^
		ABSAngleDeg1 = AngleDeg1 * -1;
     694:	4c494146 	stfmie	f4, [r9], {70}
     698:	75614200 	strbvc	r4, [r1, #-512]!
	else
		ABSAngleDeg1 = AngleDeg1;

	//Shift rotation to a full circle of 360 deg -> AngleDeg // 360
	if (AngleDeg1 < 0)    //Negative values
		AngleDeg1 = 3600 - (ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600)));
     69c:	74617264 	strbtvc	r7, [r1], #-612
     6a0:	58445f65 	stmdapl	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     6a4:	5045004c 	subpl	r0, r5, ip, asr #32
     6a8:	3254524f 	subscc	r5, r4, #-268435452	; 0xf0000004
     6ac:	58410041 	stmdapl	r1, {r0, r6}^
     6b0:	52505f4d 	subspl	r5, r0, #308	; 0x134
     6b4:	4e455345 	cdpmi	3, 4, cr5, cr5, cr5, {2}
     6b8:	4f4c5f54 	svcmi	0x004c5f54
     6bc:	485f4441 	ldmdami	pc, {r0, r6, sl, lr}^
	else
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));

	if (AngleDeg1 >= 0 && AngleDeg1 <= 900)     // 0 to 90 deg
     6c0:	4c584400 	cfldrdmi	mvd4, [r8], {0}
     6c4:	4c554e5f 	mrrcmi	14, 5, r4, r5, cr15
			{
		sin4 = pgm_read_word(&GetSin[AngleDeg1 / 5]); // 5 is the presision (0.5) of the table
     6c8:	49535f4c 	ldmdbmi	r3, {r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     6cc:	4100455a 	tstmi	r0, sl, asr r5
     6d0:	505f4d58 	subspl	r4, pc, r8, asr sp
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
     6d4:	45534552 	ldrbmi	r4, [r3, #-1362]
     6d8:	4c5f544e 	cfldrdmi	mvd5, [pc], {78}
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));

	if (AngleDeg1 >= 0 && AngleDeg1 <= 900)     // 0 to 90 deg
			{
		sin4 = pgm_read_word(&GetSin[AngleDeg1 / 5]); // 5 is the presision (0.5) of the table
     6dc:	5f44414f 	svcpl	0x0044414f
     6e0:	3249004c 	subcc	r0, r9, #76	; 0x4c
     6e4:	455f3143 	ldrbmi	r3, [pc, #-323]	; 5a9 <__Stack_Size+0x1a9>
     6e8:	52495f52 	subpl	r5, r9, #328	; 0x148
     6ec:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
     6f0:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     6f4:	414d4400 	cmpmi	sp, r0, lsl #8
     6f8:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
     6fc:	656e6e61 	strbvs	r6, [lr, #-3681]!
     700:	495f346c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, ip, sp}^
     704:	61485152 	cmpvs	r8, r2, asr r1
     708:	656c646e 	strbvs	r6, [ip, #-1134]!
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     70c:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     710:	425f314d 	subsmi	r3, pc, #1073741843	; 0x40000013
     714:	495f4b52 	ldmdbmi	pc, {r1, r4, r6, r8, r9, fp, lr}^
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     718:	61485152 	cmpvs	r8, r2, asr r1
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     71c:	656c646e 	strbvs	r6, [ip, #-1134]!
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     720:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     724:	545f314d 	ldrbpl	r3, [pc], #333	; 72c <__Stack_Size+0x32c>
     728:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
     72c:	495f4d4f 	ldmdbmi	pc, {r0, r1, r2, r3, r6, r8, sl, fp, lr}^
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     730:	61485152 	cmpvs	r8, r2, asr r1
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     734:	656c646e 	strbvs	r6, [ip, #-1134]!
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     738:	41540072 	cmpmi	r4, r2, ror r0
     73c:	5245504d 	subpl	r5, r5, #77	; 0x4d
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
     740:	5152495f 	cmppl	r2, pc, asr r9
     744:	646e6148 	strbtvs	r6, [lr], #-328
     748:	0072656c 	rsbseq	r6, r2, ip, ror #10
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     74c:	67617355 	undefined
     750:	75614665 	strbvc	r4, [r1, #-1637]!
     754:	7845746c 	stmdavc	r5, {r2, r3, r5, r6, sl, ip, sp, lr}^
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     758:	74706563 	ldrbtvc	r6, [r0], #-1379
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     75c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     760:	31414d44 	cmpcc	r1, r4, asr #26
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     764:	6168435f 	cmnvs	r8, pc, asr r3
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     768:	6c656e6e 	stclvs	14, cr6, [r5], #-440
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     76c:	52495f35 	subpl	r5, r9, #212	; 0xd4
     770:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     774:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     778:	4d495400 	cfstrdmi	mvd5, [r9]
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     77c:	52495f32 	subpl	r5, r9, #200	; 0xc8
     780:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     784:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     788:	43545200 	cmpmi	r4, #0	; 0x0
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
     78c:	5152495f 	cmppl	r2, pc, asr r9
     790:	646e6148 	strbtvs	r6, [lr], #-328
     794:	0072656c 	rsbseq	r6, r2, ip, ror #10
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     798:	334d4954 	movtcc	r4, #55636	; 0xd954
     79c:	5152495f 	cmppl	r2, pc, asr r9
     7a0:	646e6148 	strbtvs	r6, [lr], #-328
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7a4:	0072656c 	rsbseq	r6, r2, ip, ror #10
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7a8:	434d5346 	movtmi	r5, #54086	; 0xd346
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7ac:	5152495f 	cmppl	r2, pc, asr r9
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7b0:	646e6148 	strbtvs	r6, [lr], #-328
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7b4:	0072656c 	rsbseq	r6, r2, ip, ror #10
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7b8:	344d4954 	strbcc	r4, [sp], #-2388
     7bc:	5152495f 	cmppl	r2, pc, asr r9
     7c0:	646e6148 	strbtvs	r6, [lr], #-328
     7c4:	0072656c 	rsbseq	r6, r2, ip, ror #10
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7c8:	57425355 	smlsldpl	r5, r2, r5, r3
     7cc:	55656b61 	strbpl	r6, [r5, #-2913]!
     7d0:	52495f70 	subpl	r5, r9, #448	; 0x1c0
	//Shift rotation to a full circle of 360 deg -> AngleDeg // 360
	if (AngleDeg1 < 0)    //Negative values
		AngleDeg1 = 3600 - (ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600)));
	else
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));
     7d4:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     7d8:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     7dc:	4d495400 	cfstrdmi	mvd5, [r9]
     7e0:	52495f35 	subpl	r5, r9, #212	; 0xd4
     7e4:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     7e8:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     7ec:	494d4e00 	stmdbmi	sp, {r9, sl, fp, lr}^
     7f0:	65637845 	strbvs	r7, [r3, #-2117]!
     7f4:	6f697470 	svcvs	0x00697470
     7f8:	5053006e 	subspl	r0, r3, lr, rrx
	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
	}
}
     7fc:	495f3149 	ldmdbmi	pc, {r0, r3, r6, r8, ip, sp}^
     800:	61485152 	cmpvs	r8, r2, asr r1
     804:	656c646e 	strbvs	r6, [ip, #-1134]!
     808:	75420072 	strbvc	r0, [r2, #-114]
     80c:	75614673 	strbvc	r4, [r1, #-1651]!
//cos4        - Input Cosinus
//AngleRad4     - Output Angle in AngleRad4
long GetArcCos(short cos4) {
	boolean NegativeValue/*:1*/;    //If the the value is Negative
	//Check for negative value
	if (cos4 < 0) {
     810:	7845746c 	stmdavc	r5, {r2, r3, r5, r6, sl, ip, sp, lr}^
     814:	74706563 	ldrbtvc	r6, [r0], #-1379
     818:	006e6f69 	rsbeq	r6, lr, r9, ror #30
		cos4 = -cos4;
     81c:	32495053 	subcc	r5, r9, #83	; 0x53
     820:	5152495f 	cmppl	r2, pc, asr r9
		NegativeValue = 1;
	} else
		NegativeValue = 0;

	//Limit cos4 to his maximal value
	cos4 = min(cos4, c4DEC);
     824:	646e6148 	strbtvs	r6, [lr], #-328
     828:	0072656c 	rsbseq	r6, r2, ip, ror #10
     82c:	5f425355 	svcpl	0x00425355

	if ((cos4 >= 0) && (cos4 < 9000)) {
     830:	435f5048 	cmpmi	pc, #72	; 0x48
     834:	545f4e41 	ldrbpl	r4, [pc], #3649	; 83c <__Stack_Size+0x43c>
     838:	52495f58 	subpl	r5, r9, #352	; 0x160
		AngleRad4 = (byte) pgm_read_byte(&GetACos[cos4 / 79]);
     83c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     840:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     844:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
		AngleRad4 = ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255) ;
     848:	52495f33 	subpl	r5, r9, #204	; 0xcc
     84c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
	} else if ((cos4 >= 9000) && (cos4 < 9900)) {
     850:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     854:	4d495400 	cfstrdmi	mvd5, [r9]
     858:	43435f31 	movtmi	r5, #16177	; 0x3f31
     85c:	5152495f 	cmppl	r2, pc, asr r9
		AngleRad4 = (byte) pgm_read_byte(&GetACos[(cos4 - 9000) / 8 + 114]);
     860:	646e6148 	strbtvs	r6, [lr], #-328
     864:	0072656c 	rsbseq	r6, r2, ip, ror #10
     868:	33434441 	movtcc	r4, #13377	; 0x3441
     86c:	5152495f 	cmppl	r2, pc, asr r9
     870:	646e6148 	strbtvs	r6, [lr], #-328
     874:	0072656c 	rsbseq	r6, r2, ip, ror #10
		AngleRad4 = (long) ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255)
     878:	31434441 	cmpcc	r3, r1, asr #8
	} else if ((cos4 >= 9900) && (cos4 <= 10000)) {
     87c:	495f325f 	ldmdbmi	pc, {r0, r1, r2, r3, r4, r6, r9, ip, sp}^
     880:	61485152 	cmpvs	r8, r2, asr r1
     884:	656c646e 	strbvs	r6, [ip, #-1134]!
		AngleRad4 = (byte) pgm_read_byte(&GetACos[(cos4 - 9900) / 2 + 227]);
     888:	41550072 	cmpmi	r5, r2, ror r0
     88c:	5f355452 	svcpl	0x00355452
     890:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
		AngleRad4 = (long) ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255)
     894:	6c646e61 	stclvs	14, cr6, [r4], #-388
     898:	44007265 	strmi	r7, [r0], #-613
     89c:	5f32414d 	svcpl	0x0032414d
     8a0:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     8a4:	316c656e 	cmncc	ip, lr, ror #10
     8a8:	5152495f 	cmppl	r2, pc, asr r9
     8ac:	646e6148 	strbtvs	r6, [lr], #-328
	}

	//Add negative sign
	if (NegativeValue)
		AngleRad4 = 31416 - AngleRad4;
     8b0:	0072656c 	rsbseq	r6, r2, ip, ror #10
     8b4:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
     8b8:	5f56455f 	svcpl	0x0056455f
     8bc:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     8c0:	6c646e61 	stclvs	14, cr6, [r4], #-388

	return AngleRad4;
}
     8c4:	44007265 	strmi	r7, [r0], #-613
     8c8:	5f32414d 	svcpl	0x0032414d
     8cc:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     8d0:	326c656e 	rsbcc	r6, ip, #461373440	; 0x1b800000
     8d4:	5152495f 	cmppl	r2, pc, asr r9
     8d8:	646e6148 	strbtvs	r6, [lr], #-328

unsigned long isqrt32(unsigned long n) //
{
     8dc:	0072656c 	rsbseq	r6, r2, ip, ror #10
     8e0:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^

	root = 0;
	remainder = n;
	place = 0x40000000; // OR place = 0x4000; OR place = 0x40; - respectively

	while (place > remainder)
     8e4:	52495f31 	subpl	r5, r9, #196	; 0xc4
     8e8:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     8ec:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
		place = place >> 2;
	while (place) {
		if (remainder >= root + place) {
     8f0:	414d4400 	cmpmi	sp, r0, lsl #8
			remainder = remainder - root - place;
     8f4:	68435f32 	stmdavs	r3, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     8f8:	656e6e61 	strbvs	r6, [lr, #-3681]!
			root = root + (place << 1);
     8fc:	495f336c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, r9, ip, sp}^

	while (place > remainder)
		place = place >> 2;
	while (place) {
		if (remainder >= root + place) {
			remainder = remainder - root - place;
     900:	61485152 	cmpvs	r8, r2, asr r1
			root = root + (place << 1);
		}
		root = root >> 1;
		place = place >> 2;
     904:	656c646e 	strbvs	r6, [ip, #-1134]!
	remainder = n;
	place = 0x40000000; // OR place = 0x4000; OR place = 0x40; - respectively

	while (place > remainder)
		place = place >> 2;
	while (place) {
     908:	56500072 	undefined
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
	XYhyp2 = isqrt32(
     90c:	52495f44 	subpl	r5, r9, #272	; 0x110
//(GETATAN2) Simplyfied ArcTan2 function based on fixed point ArcCos
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
     910:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
	XYhyp2 = isqrt32(
     914:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     918:	49445300 	stmdbmi	r4, {r8, r9, ip, lr}^
//(GETATAN2) Simplyfied ArcTan2 function based on fixed point ArcCos
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
     91c:	52495f4f 	subpl	r5, r9, #316	; 0x13c
	XYhyp2 = isqrt32(
     920:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     924:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     928:	42535500 	subsmi	r5, r3, #0	; 0x0
			((long) AtanX * AtanX * c4DEC) + ((long) AtanY * AtanY * c4DEC));
	GetArcCos(((long) AtanX * (long) c6DEC) / (long) XYhyp2);
     92c:	5f504c5f 	svcpl	0x00504c5f
     930:	5f4e4143 	svcpl	0x004e4143
     934:	5f305852 	svcpl	0x00305852
     938:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     93c:	6c646e61 	stclvs	14, cr6, [r4], #-388
     940:	53007265 	movwpl	r7, #613	; 0x265
     944:	61484356 	cmpvs	r8, r6, asr r3

	if (AtanY < 0) // removed overhead... Atan4 = AngleRad4 * (AtanY/abs(AtanY));
     948:	656c646e 	strbvs	r6, [ip, #-1134]!
		Atan4 = -AngleRad4;
     94c:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
	else
		Atan4 = AngleRad4;
     950:	5f334954 	svcpl	0x00334954
	XYhyp2 = isqrt32(
			((long) AtanX * AtanX * c4DEC) + ((long) AtanY * AtanY * c4DEC));
	GetArcCos(((long) AtanX * (long) c6DEC) / (long) XYhyp2);

	if (AtanY < 0) // removed overhead... Atan4 = AngleRad4 * (AtanY/abs(AtanY));
		Atan4 = -AngleRad4;
     954:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
	else
		Atan4 = AngleRad4;
     958:	6c646e61 	stclvs	14, cr6, [r4], #-388
     95c:	45007265 	strmi	r7, [r0, #-613]
	return Atan4;
}
     960:	39495458 	stmdbcc	r9, {r3, r4, r6, sl, ip, lr}^
     964:	495f355f 	ldmdbmi	pc, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp}^
     968:	61485152 	cmpvs	r8, r2, asr r1
     96c:	656c646e 	strbvs	r6, [ip, #-1134]!

}

//--------------------------------------------------------------------
//[BalCalcOneLeg]
void BalCalcOneLeg(long PosX, long PosZ, long PosY, byte BalLegNr) {
     970:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
	long CPR_Y;            //Final Y value for centerpoint of rotation
	long CPR_Z;            //Final Z value for centerpoint of rotation

	long lAtan;
	//Calculating totals from center of the body to the feet
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BalLegNr]) + PosZ;
     974:	545f384d 	ldrbpl	r3, [pc], #2125	; 97c <__Stack_Size+0x57c>
     978:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
	CPR_X = (short) pgm_read_word(&cOffsetX[BalLegNr]) + PosX;
     97c:	495f4d4f 	ldmdbmi	pc, {r0, r1, r2, r3, r6, r8, sl, fp, lr}^
     980:	61485152 	cmpvs	r8, r2, asr r1
	CPR_Y = 150 + PosY; // using the value 150 to lower the centerpoint of rotation 'g_InControlState.BodyPos.y +

	TotalTransY += (long) PosY;
     984:	656c646e 	strbvs	r6, [ip, #-1134]!
     988:	41430072 	cmpmi	r3, r2, ror r0
     98c:	58525f4e 	ldmdapl	r2, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
	TotalTransZ += (long) CPR_Z;
     990:	52495f31 	subpl	r5, r9, #196	; 0xc4
     994:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     998:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
	TotalTransX += (long) CPR_X;
     99c:	54584500 	ldrbpl	r4, [r8], #-1280
     9a0:	495f3449 	ldmdbmi	pc, {r0, r3, r6, sl, ip, sp}^
     9a4:	61485152 	cmpvs	r8, r2, asr r1
     9a8:	656c646e 	strbvs	r6, [ip, #-1134]!

	lAtan = GetATan2(CPR_X, CPR_Z);
     9ac:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
	TotalYBal1 += (lAtan * 1800) / 31415;
     9b0:	5f304954 	svcpl	0x00304954
     9b4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     9b8:	6c646e61 	stclvs	14, cr6, [r4], #-388
     9bc:	54007265 	strpl	r7, [r0], #-613
     9c0:	5f314d49 	svcpl	0x00314d49
     9c4:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^
     9c8:	61485152 	cmpvs	r8, r2, asr r1
     9cc:	656c646e 	strbvs	r6, [ip, #-1134]!

	lAtan = GetATan2(CPR_X, CPR_Y);
     9d0:	61480072 	cmpvs	r8, r2, ror r0
     9d4:	61466472 	cmpvs	r6, r2, ror r4
	TotalZBal1 += ((lAtan * 1800) / 31415) - 900; //Rotate balance circle 90 deg
     9d8:	45746c75 	ldrbmi	r6, [r4, #-3189]!
     9dc:	70656378 	rsbvc	r6, r5, r8, ror r3
     9e0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     9e4:	43435200 	movtmi	r5, #12800	; 0x3200
     9e8:	5152495f 	cmppl	r2, pc, asr r9
     9ec:	646e6148 	strbtvs	r6, [lr], #-328
     9f0:	0072656c 	rsbseq	r6, r2, ip, ror #10
     9f4:	31414d44 	cmpcc	r1, r4, asr #26
     9f8:	6168435f 	cmnvs	r8, pc, asr r3
     9fc:	6c656e6e 	stclvs	14, cr6, [r5], #-440

	lAtan = GetATan2(CPR_Z, CPR_Y);
     a00:	52495f36 	subpl	r5, r9, #216	; 0xd8
     a04:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
	TotalXBal1 += ((lAtan * 1800) / 31415) - 900; //Rotate balance circle 90 deg
     a08:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     a0c:	62654400 	rsbvs	r4, r5, #0	; 0x0
     a10:	6f4d6775 	svcvs	0x004d6775
     a14:	6f74696e 	svcvs	0x0074696e
     a18:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     a1c:	435f384d 	cmpmi	pc, #5046272	; 0x4d0000
     a20:	52495f43 	subpl	r5, r9, #268	; 0x10c
     a24:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}

}
     a28:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     a2c:	50504100 	subspl	r4, r0, r0, lsl #2
     a30:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     a34:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!
     a38:	31663233 	cmncc	r6, r3, lsr r2
     a3c:	695f7830 	ldmdbvs	pc, {r4, r5, fp, ip, sp, lr}^
     a40:	00632e74 	rsbeq	r2, r3, r4, ror lr
     a44:	47445757 	smlsldmi	r5, r4, r7, r7
     a48:	5152495f 	cmppl	r2, pc, asr r9
     a4c:	646e6148 	strbtvs	r6, [lr], #-328
//SinG                  - Sin buffer for BodyRotZ
//CosG               - Cos buffer for BodyRotZ
//BodyFKPosX         - Output Position X of feet with Rotation
//BodyFKPosY         - Output Position Y of feet with Rotation
//BodyFKPosZ         - Output Position Z of feet with Rotation
void BodyFK(short PosX, short PosZ, short PosY, short RotationY, byte BodyIKLeg) {
     a50:	0072656c 	rsbseq	r6, r2, ip, ror #10
     a54:	31414d44 	cmpcc	r1, r4, asr #26
	short CPR_X;            //Final X value for centerpoint of rotation
	short CPR_Y;            //Final Y value for centerpoint of rotation
	short CPR_Z;            //Final Z value for centerpoint of rotation

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
     a58:	6168435f 	cmnvs	r8, pc, asr r3
     a5c:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     a60:	52495f37 	subpl	r5, r9, #220	; 0xdc
//SinG                  - Sin buffer for BodyRotZ
//CosG               - Cos buffer for BodyRotZ
//BodyFKPosX         - Output Position X of feet with Rotation
//BodyFKPosY         - Output Position Y of feet with Rotation
//BodyFKPosZ         - Output Position Z of feet with Rotation
void BodyFK(short PosX, short PosZ, short PosY, short RotationY, byte BodyIKLeg) {
     a64:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
	short CPR_X;            //Final X value for centerpoint of rotation
	short CPR_Y;            //Final Y value for centerpoint of rotation
	short CPR_Z;            //Final Z value for centerpoint of rotation

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
     a68:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
     a6c:	43324900 	teqmi	r2, #0	; 0x0
     a70:	56455f31 	undefined
     a74:	5152495f 	cmppl	r2, pc, asr r9

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     a78:	646e6148 	strbtvs	r6, [lr], #-328

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BodyIKLeg]) + PosZ
     a7c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     a80:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
	//Successive global rotation matrix:
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
     a84:	4b52425f 	blmi	1491408 <__Stack_Size+0x1491008>
     a88:	5152495f 	cmppl	r2, pc, asr r9

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BodyIKLeg]) + PosZ
     a8c:	646e6148 	strbtvs	r6, [lr], #-328
	//Successive global rotation matrix:
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
     a90:	0072656c 	rsbseq	r6, r2, ip, ror #10
     a94:	53414c46 	movtpl	r4, #7238	; 0x1c46
	SinG4 = sin4;
     a98:	52495f48 	subpl	r5, r9, #288	; 0x120
	CosG4 = cos4;
     a9c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
	SinG4 = sin4;
     aa0:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
	CosG4 = cos4;
     aa4:	52415500 	subpl	r5, r1, #0	; 0x0
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
	SinG4 = sin4;
     aa8:	495f3454 	ldmdbmi	pc, {r2, r4, r6, sl, ip, sp}^
	CosG4 = cos4;

	GetSinCos(g_InControlState.BodyRot1.z + TotalZBal1);
     aac:	61485152 	cmpvs	r8, r2, asr r1
	SinB4 = sin4;
     ab0:	656c646e 	strbvs	r6, [ip, #-1134]!
     ab4:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
	CosB4 = cos4;
     ab8:	495f364d 	ldmdbmi	pc, {r0, r2, r3, r6, r9, sl, ip, sp}^

	GetSinCos(g_InControlState.BodyRot1.y + (RotationY * c1DEC) + TotalYBal1);
     abc:	61485152 	cmpvs	r8, r2, asr r1
     ac0:	656c646e 	strbvs	r6, [ip, #-1134]!
     ac4:	54520072 	ldrbpl	r0, [r2], #-114
     ac8:	616c4143 	cmnvs	ip, r3, asr #2
     acc:	495f6d72 	ldmdbmi	pc, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     ad0:	61485152 	cmpvs	r8, r2, asr r1
     ad4:	656c646e 	strbvs	r6, [ip, #-1134]!
     ad8:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     adc:	495f374d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, sl, ip, sp}^
     ae0:	61485152 	cmpvs	r8, r2, asr r1
     ae4:	656c646e 	strbvs	r6, [ip, #-1134]!
     ae8:	32490072 	subcc	r0, r9, #114	; 0x72
     aec:	455f3243 	ldrbmi	r3, [pc, #-579]	; 8b1 <__Stack_Size+0x4b1>
     af0:	52495f52 	subpl	r5, r9, #328	; 0x148
     af4:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     af8:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     afc:	41535500 	cmpmi	r3, r0, lsl #10
     b00:	5f315452 	svcpl	0x00315452
     b04:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     b08:	6c646e61 	stclvs	14, cr6, [r4], #-388
     b0c:	44007265 	strmi	r7, [r0], #-613
     b10:	5f32414d 	svcpl	0x0032414d
     b14:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     b18:	346c656e 	strbtcc	r6, [ip], #-1390
     b1c:	495f355f 	ldmdbmi	pc, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp}^
     b20:	61485152 	cmpvs	r8, r2, asr r1
     b24:	656c646e 	strbvs	r6, [ip, #-1134]!
     b28:	65500072 	ldrbvs	r0, [r0, #-114]
     b2c:	5653646e 	ldrbpl	r6, [r3], -lr, ror #8
     b30:	49540043 	ldmdbmi	r4, {r0, r1, r6}^
     b34:	555f384d 	ldrbpl	r3, [pc, #-2125]	; 2ef <_Minimum_Stack_Size+0x1ef>
     b38:	52495f50 	subpl	r5, r9, #320	; 0x140
     b3c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     b40:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     b44:	41535500 	cmpmi	r3, r0, lsl #10
     b48:	5f325452 	svcpl	0x00325452
     b4c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     b50:	6c646e61 	stclvs	14, cr6, [r4], #-388
     b54:	55007265 	strpl	r7, [r0, #-613]
     b58:	54524153 	ldrbpl	r4, [r2], #-339
     b5c:	52495f33 	subpl	r5, r9, #204	; 0xcc
     b60:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     b64:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     b68:	73795300 	cmnvc	r9, #0	; 0x0

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     b6c:	6b636954 	blvs	18db0c4 <__Stack_Size+0x18dacc4>
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     b70:	646e6148 	strbtvs	r6, [lr], #-328
     b74:	0072656c 	rsbseq	r6, r2, ip, ror #10
     b78:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     b7c:	315f3531 	cmpcc	pc, r1, lsr r5
     b80:	52495f30 	subpl	r5, r9, #192	; 0xc0
     b84:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     b88:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     b8c:	414d4400 	cmpmi	sp, r0, lsl #8
     b90:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     b94:	656e6e61 	strbvs	r6, [lr, #-3681]!
     b98:	495f316c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, ip, sp}^
     b9c:	61485152 	cmpvs	r8, r2, asr r1
     ba0:	656c646e 	strbvs	r6, [ip, #-1134]!
     ba4:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
     ba8:	5f324954 	svcpl	0x00324954
     bac:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     bb0:	6c646e61 	stclvs	14, cr6, [r4], #-388
     bb4:	44007265 	strmi	r7, [r0], #-613
     bb8:	5f31414d 	svcpl	0x0031414d
     bbc:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     bc0:	326c656e 	rsbcc	r6, ip, #461373440	; 0x1b800000
     bc4:	5152495f 	cmppl	r2, pc, asr r9
     bc8:	646e6148 	strbtvs	r6, [lr], #-328
     bcc:	0072656c 	rsbseq	r6, r2, ip, ror #10
     bd0:	5f4e4143 	svcpl	0x004e4143
     bd4:	5f454353 	svcpl	0x00454353
     bd8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     bdc:	6c646e61 	stclvs	14, cr6, [r4], #-388
     be0:	44007265 	strmi	r7, [r0], #-613
     be4:	5f31414d 	svcpl	0x0031414d
     be8:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     bec:	336c656e 	cmncc	ip, #461373440	; 0x1b800000
     bf0:	5152495f 	cmppl	r2, pc, asr r9
     bf4:	646e6148 	strbtvs	r6, [lr], #-328
     bf8:	0072656c 	rsbseq	r6, r2, ip, ror #10
     bfc:	4d6d654d 	cfstr64mi	mvdx6, [sp, #-308]!
     c00:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
     c04:	63784565 	cmnvs	r8, #423624704	; 0x19400000
     c08:	69747065 	ldmdbvs	r4!, {r0, r2, r5, r6, ip, sp, lr}^
     c0c:	62006e6f 	andvs	r6, r0, #1776	; 0x6f0
     c10:	00647561 	rsbeq	r7, r4, r1, ror #10
     c14:	4967654c 	stmdbmi	r7!, {r2, r3, r6, r8, sl, sp, lr}^
     c18:	6843004b 	stmdavs	r3, {r0, r1, r3, r6}^
     c1c:	566b6365 	strbtpl	r6, [fp], -r5, ror #6
     c20:	61746c6f 	cmnvs	r4, pc, ror #24
     c24:	67006567 	strvs	r6, [r0, -r7, ror #10]
     c28:	5047735f 	subpl	r7, r7, pc, asr r3
     c2c:	6f434d53 	svcvs	0x00434d53
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * CosG4 / c4DEC
					- (long) CPR_Z * c2DEC * SinA4 / c4DEC * SinB4 / c4DEC
							* SinG4 / c4DEC
					- (long) CPR_Y * c2DEC * CosB4 / c4DEC * SinG4 / c4DEC))
			/ c2DEC;
	BodyFKPosY = ((long) CPR_Y * c2DEC
     c30:	6f72746e 	svcvs	0x0072746e
	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     c34:	72656c6c 	rsbvc	r6, r5, #27648	; 0x6c00
     c38:	6f526600 	svcvs	0x00526600
     c3c:	55746f62 	ldrbpl	r6, [r4, #-3938]!
     c40:	64697370 	strbtvs	r7, [r9], #-880
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * CosG4 / c4DEC
					- (long) CPR_Z * c2DEC * SinA4 / c4DEC * SinB4 / c4DEC
							* SinG4 / c4DEC
					- (long) CPR_Y * c2DEC * CosB4 / c4DEC * SinG4 / c4DEC))
			/ c2DEC;
	BodyFKPosY = ((long) CPR_Y * c2DEC
     c44:	776f4465 	strbvc	r4, [pc, -r5, ror #8]!
     c48:	6572506e 	ldrbvs	r5, [r2, #-110]!
     c4c:	4e490076 	mcrmi	0, 2, r0, cr9, cr6, {3}
     c50:	525f5453 	subspl	r5, pc, #1392508928	; 0x53000000
     c54:	5f444145 	svcpl	0x00444145
     c58:	44495247 	strbmi	r5, [r9], #-583
     c5c:	74654700 	strbtvc	r4, [r5], #-1792
     c60:	6e615441 	cdpvs	4, 6, cr5, cr1, cr1, {2}
     c64:	74430032 	strbvc	r0, [r3], #-50
     c68:	6f4d6c72 	svcvs	0x004d6c72
     c6c:	754f6576 	strbvc	r6, [pc, #-1398]	; 6fe <__Stack_Size+0x2fe>
     c70:	546c0074 	strbtpl	r0, [ip], #-116
     c74:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     c78:	00646e45 	rsbeq	r6, r4, r5, asr #28
     c7c:	416e6953 	cmnmi	lr, r3, asr r9
     c80:	654c0034 	strbvs	r0, [ip, #-52]
     c84:	736f5067 	cmnvc	pc, #103	; 0x67
     c88:	654c0058 	strbvs	r0, [ip, #-88]
     c8c:	736f5067 	cmnvc	pc, #103	; 0x67
     c90:	654c0059 	strbvs	r0, [ip, #-89]
     c94:	736f5067 	cmnvc	pc, #103	; 0x67
     c98:	6f43005a 	svcvs	0x0043005a
     c9c:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
     ca0:	5f726564 	svcpl	0x00726564
     ca4:	64616552 	strbtvs	r6, [r1], #-1362
     ca8:	7367734d 	cmnvc	r7, #872415233	; 0x34000001
     cac:	6f6f7200 	svcvs	0x006f7200
     cb0:	43630074 	cmnmi	r3, #116	; 0x74
     cb4:	4161786f 	cmnmi	r1, pc, ror #16
     cb8:	656c676e 	strbvs	r6, [ip, #-1902]!
     cbc:	56730031 	undefined
     cc0:	4d006c61 	stcmi	12, cr6, [r0, #-388]
     cc4:	4345444f 	movtmi	r4, #21583	; 0x544f
     cc8:	4100544e 	tstmi	r0, lr, asr #8
     ccc:	6f446c6c 	svcvs	0x00446c6c
     cd0:	67006e77 	smlsdxvs	r0, r7, lr, r6
     cd4:	4c6c755f 	cfstr64mi	mvdx7, [ip], #-380
     cd8:	4d747361 	ldclmi	3, cr7, [r4, #-388]!
     cdc:	69546773 	ldmdbvs	r4, {r0, r1, r4, r5, r6, r8, r9, sl, sp, lr}^
     ce0:	7200656d 	andvc	r6, r0, #457179136	; 0x1b400000
     ce4:	74686769 	strbtvc	r6, [r8], #-1897
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * SinG4 / c4DEC
					+ (long) CPR_Z * c2DEC * CosG4 / c4DEC * SinA4 / c4DEC
							* SinB4 / c4DEC
					+ (long) CPR_Y * c2DEC * CosB4 / c4DEC * CosG4 / c4DEC))
			/ c2DEC;
}
     ce8:	5f670048 	svcpl	0x00670048
     cec:	6c644969 	stclvs	9, cr4, [r4], #-420
     cf0:	64654c65 	strbtvs	r4, [r5], #-3173
     cf4:	74617453 	strbtvc	r7, [r1], #-1107
     cf8:	6e490065 	cdpvs	0, 4, cr0, cr9, cr5, {3}
     cfc:	54747570 	ldrbtpl	r7, [r4], #-1392
     d00:	44656d69 	strbtmi	r6, [r5], #-3433
     d04:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     d08:	67697200 	strbvs	r7, [r9, -r0, lsl #4]!
     d0c:	00567468 	subseq	r7, r6, r8, ror #8
     d10:	65535047 	ldrbvs	r5, [r3, #-71]
     d14:	5f670071 	svcpl	0x00670071
     d18:	626f5266 	rsbvs	r5, pc, #1610612742	; 0x60000006
     d1c:	7055746f 	subsvc	r7, r5, pc, ror #8
//FemurAngle1           - Output Angle of Femur in degrees
//TibiaAngle1           - Output Angle of Tibia in degrees
//CoxaAngle1            - Output Angle of Coxa in degrees
//--------------------------------------------------------------------
void LegIK(short IKFeetPosX, short IKFeetPosY, short IKFeetPosZ,
		byte LegIKLegNr) {
     d20:	65646973 	strbvs	r6, [r4, #-2419]!
     d24:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
     d28:	646f4200 	strbtvs	r4, [pc], #512	; d30 <__Stack_Size+0x930>
	long Temp1;
	long Temp2;
	long T3;

	//Calculate IKCoxaAngle and IKFeetPosXZ
	GetATan2(IKFeetPosX, IKFeetPosZ);
     d2c:	4c4b4979 	mcrrmi	9, 7, r4, fp, cr9
	CoxaAngle1[LegIKLegNr] = (((long) Atan4 * 180) / 3141)
     d30:	53006765 	movwpl	r6, #1893	; 0x765
     d34:	34426e69 	strbcc	r6, [r2], #-3689
     d38:	4f485000 	svcmi	0x00485000
     d3c:	58494e45 	stmdapl	r9, {r0, r2, r6, r9, sl, fp, lr}^
     d40:	54494147 	strbpl	r4, [r9], #-327
     d44:	534b4900 	movtpl	r4, #47360	; 0xb900
     d48:	74756c6f 	ldrbtvc	r6, [r5], #-3183
     d4c:	576e6f69 	strbpl	r6, [lr, -r9, ror #30]!
     d50:	696e7261 	stmdbvs	lr!, {r0, r5, r6, r9, ip, sp, lr}^
     d54:	4900676e 	stmdbmi	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
	//Length between the Coxa and tars [foot]
	IKFeetPosXZ = XYhyp2 / c2DEC;

	//Using GetAtan2 for solving IKA1 and IKSW
	//IKA14 - Angle between SW line and the ground in radians
	IKA14 = GetATan2(IKFeetPosY - TarsOffsetY,
     d58:	5f54534e 	svcpl	0x0054534e
     d5c:	5f574152 	svcpl	0x00574152
     d60:	504d4153 	subpl	r4, sp, r3, asr r1
     d64:	4700454c 	strmi	r4, [r0, -ip, asr #10]
     d68:	54746961 	ldrbtpl	r6, [r4], #-2401
     d6c:	00657079 	rsbeq	r7, r5, r9, ror r0
     d70:	4967654c 	stmdbmi	r7!, {r2, r3, r6, r8, sl, sp, lr}^

	//IKSW2 - Length between femur axis and tars
	IKSW2 = XYhyp2;

	//IKA2 - Angle of the line S>W with respect to the femur in radians
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     d74:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
     d78:	6f436300 	svcvs	0x00436300
     d7c:	694d6178 	stmdbvs	sp, {r3, r4, r5, r6, r8, sp, lr}^
     d80:	4900316e 	stmdbmi	r0, {r1, r2, r3, r5, r6, r8, ip, sp}
					* (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))) * c4DEC
			+ ((long) IKSW2 * IKSW2));
	Temp2 = (long) (2 * (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])) * c2DEC
			* (unsigned long) IKSW2;
	T3 = Temp1 / (Temp2 / c4DEC);
	IKA24 = GetArcCos(T3);
     d84:	6c6f534b 	stclvs	3, cr5, [pc], #-300
     d88:	6f697475 	svcvs	0x00697475
     d8c:	654c006e 	strbvs	r0, [ip, #-110]
     d90:	65745367 	ldrbvs	r5, [r4, #-871]!
     d94:	4e490070 	mcrmi	0, 2, r0, cr9, cr0, {3}
     d98:	535f5453 	cmppl	pc, #1392508928	; 0x53000000
     d9c:	4c504d41 	mrrcmi	13, 4, r4, r0, cr1
     da0:	41465f45 	cmpmi	r6, r5, asr #30
     da4:	52005453 	andpl	r5, r0, #1392508928	; 0x53000000
     da8:	5441544f 	strbpl	r5, [r1], #-1103
     dac:	444f4d45 	strbmi	r4, [pc], #3397	; db4 <__Stack_Size+0x9b4>
     db0:	5f670045 	svcpl	0x00670045
     db4:	72655366 	rsbvc	r5, r5, #-1744830463	; 0x98000001

	FemurAngle1[LegIKLegNr] = -(long) (IKA14 + IKA24) * 180
     db8:	46736f76 	uhsub16mi	r6, r3, r6
     dbc:	00656572 	rsbeq	r6, r5, r2, ror r5
     dc0:	63656843 	cmnvs	r5, #4390912	; 0x430000
     dc4:	676e416b 	strbvs	r4, [lr, -fp, ror #2]!
     dc8:	0073656c 	rsbseq	r6, r3, ip, ror #10
     dcc:	76617254 	undefined
     dd0:	65526c65 	ldrbvs	r6, [r2, #-3173]
     dd4:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     dd8:	45620074 	strbmi	r0, [r2, #-116]!
			/ 3141+ 900 + CFEMURHORNOFFSET1(LegIKLegNr);  //Normal

	//IKTibiaAngle
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     ddc:	61727478 	cmnvs	r2, r8, ror r4
	Temp2 = (long) (2 * (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])) * c2DEC
			* (unsigned long) IKSW2;
	T3 = Temp1 / (Temp2 / c4DEC);
	IKA24 = GetArcCos(T3);

	FemurAngle1[LegIKLegNr] = -(long) (IKA14 + IKA24) * 180
     de0:	6c637943 	stclvs	9, cr7, [r3], #-268
			/ 3141+ 900 + CFEMURHORNOFFSET1(LegIKLegNr);  //Normal

	//IKTibiaAngle
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     de4:	6f420065 	svcvs	0x00420065
     de8:	4b467964 	blmi	119f380 <__Stack_Size+0x119ef80>
			+ ((long) (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr])
					* (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))) * c4DEC
			- ((long) IKSW2 * IKSW2));
	Temp2 = 2 * ((long) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])))
			* (long) ((byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]));
	GetArcCos(Temp1 / Temp2);
     dec:	6c617600 	stclvs	6, cr7, [r1]
     df0:	4c540073 	mrrcmi	0, 7, r0, r4, cr3
     df4:	46766944 	ldrbtmi	r6, [r6], -r4, asr #18
     df8:	6f746361 	svcvs	0x00746361
     dfc:	6f430072 	svcvs	0x00430072
     e00:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
     e04:	5f726564 	svcpl	0x00726564
     e08:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!

	TibiaAngle1[LegIKLegNr] = -(1450 - (long) AngleRad4 * 180 / 3141
     e0c:	65646e61 	strbvs	r6, [r4, #-3681]!
     e10:	61420072 	cmpvs	r2, r2, ror r0
     e14:	636e616c 	cmnvs	lr, #27	; 0x1b
     e18:	646f4d65 	strbtvs	r4, [pc], #3429	; e20 <__Stack_Size+0xa20>
     e1c:	5f670065 	svcpl	0x00670065
     e20:	69546c75 	ldmdbvs	r4, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
     e24:	614c656d 	cmpvs	ip, sp, ror #10
     e28:	61427473 	cmpvs	r2, r3, ror r4
			+ CTIBIAHORNOFFSET1(LegIKLegNr)); //!!!!!!!!!!!!145 instead of 1800

	//Set the Solution quality
	if (IKSW2
     e2c:	72657474 	rsbvc	r7, r5, #1946157056	; 0x74000000
			- ((long) IKSW2 * IKSW2));
	Temp2 = 2 * ((long) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])))
			* (long) ((byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]));
	GetArcCos(Temp1 / Temp2);

	TibiaAngle1[LegIKLegNr] = -(1450 - (long) AngleRad4 * 180 / 3141
     e30:	6c6f5679 	stclvs	6, cr5, [pc], #-484
			+ CTIBIAHORNOFFSET1(LegIKLegNr)); //!!!!!!!!!!!!145 instead of 1800

	//Set the Solution quality
	if (IKSW2
     e34:	65676174 	strbvs	r6, [r7, #-372]!
     e38:	69614700 	stmdbvs	r1!, {r8, r9, sl, lr}^
     e3c:	736f5074 	cmnvc	pc, #116	; 0x74
     e40:	61470059 	qdaddvs	r0, r9, r7
     e44:	6f507469 	svcvs	0x00507469
			< ((word) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
					+ (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]) - 30)
					* c2DEC))
		IKSolution = 1;
     e48:	49005a73 	stmdbmi	r0, {r0, r1, r4, r5, r6, r9, fp, ip, lr}
	else {
		if (IKSW2
     e4c:	5f54534e 	svcpl	0x0054534e
     e50:	49544341 	ldmdbmi	r4, {r0, r6, r8, r9, lr}^
				< ((word) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
						+ (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))
						* c2DEC))
			IKSolutionWarning = 1;
     e54:	4e004e4f 	cdpmi	14, 0, cr4, cr0, cr15, {2}
     e58:	5f4d524f 	svcpl	0x004d524f
		else
			IKSolutionError = 1;
     e5c:	474e4f4c 	strbmi	r4, [lr, -ip, asr #30]
	}

}
     e60:	74654700 	strbtvc	r4, [r5], #-1792
     e64:	006e6953 	rsbeq	r6, lr, r3, asr r9
     e68:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!
     e6c:	65646e61 	strbvs	r6, [r4, #-3681]!
     e70:	706e4972 	rsbvc	r4, lr, r2, ror r9
     e74:	6f437475 	svcvs	0x00437475
     e78:	6f72746e 	svcvs	0x0072746e
     e7c:	72656c6c 	rsbvc	r6, r5, #27648	; 0x6c00
     e80:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     e84:	56620074 	undefined
     e88:	43006c61 	movwmi	r6, #3169	; 0xc61
     e8c:	75636c61 	strbvc	r6, [r3, #-3169]!
     e90:	6574616c 	ldrbvs	r6, [r4, #-364]!
     e94:	32315841 	eorscc	r5, r1, #4259840	; 0x410000
     e98:	65766f4d 	ldrbvs	r6, [r6, #-3917]!
     e9c:	65657053 	strbvs	r7, [r5, #-83]!
     ea0:	5f670064 	svcpl	0x00670064
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ea4:	79646f42 	stmdbvc	r4!, {r1, r6, r8, r9, sl, fp, sp, lr}^
	if (sVal < s) {
     ea8:	66664f59 	uqsubaddxvs	r4, r6, r9
     eac:	00746573 	rsbseq	r6, r4, r3, ror r5
		return s;
	}

	s = (short) pgm_read_word(sMax);
     eb0:	54534e49 	ldrbpl	r4, [r3], #-3657
     eb4:	4749445f 	smlsldmi	r4, r9, pc, r4
     eb8:	4c415449 	cfstrdmi	mvd5, [r1], {73}

		return s;
	}
	return sVal;

}
     ebc:	5345525f 	movtpl	r5, #21087	; 0x525f
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     ec0:	49005445 	stmdbmi	r0, {r0, r2, r6, sl, ip, lr}
}

//--------------------------------------------------------------------
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
     ec4:	5f54534e 	svcpl	0x0054534e
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     ec8:	5f474552 	svcpl	0x00474552
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ecc:	54495257 	strbpl	r5, [r9], #-599
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
     ed0:	4c620045 	stclmi	0, cr0, [r2], #-276
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ed4:	43706f6f 	cmnmi	r0, #444	; 0x1bc
	if (sVal < s) {
     ed8:	4700746e 	strmi	r7, [r0, -lr, ror #8]
     edc:	52746961 	rsbspl	r6, r4, #1589248	; 0x184000
     ee0:	0059746f 	subseq	r7, r9, pc, ror #8
		return s;
	}

	s = (short) pgm_read_word(sMax);
     ee4:	79646f42 	stmdbvc	r4!, {r1, r6, r8, r9, sl, fp, sp, lr}^
     ee8:	4f746f52 	svcmi	0x00746f52
     eec:	65736666 	ldrbvs	r6, [r3, #-1638]!
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
     ef0:	6f520074 	svcvs	0x00520074
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ef4:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
	if (sVal < s) {
     ef8:	00596e6f 	subseq	r6, r9, pc, ror #28
     efc:	6c6f6f62 	stclvs	15, cr6, [pc], #-392
     f00:	006e6165 	rsbeq	r6, lr, r5, ror #2
		return s;
	}

	s = (short) pgm_read_word(sMax);
     f04:	74697257 	strbtvc	r7, [r9], #-599
     f08:	74754f65 	ldrbtvc	r4, [r5], #-3941
     f0c:	73747570 	cmnvc	r4, #469762048	; 0x1c000000
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     f10:	6f435f00 	svcvs	0x00435f00
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
     f14:	3364726f 	cmncc	r4, #-268435450	; 0xf0000006
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     f18:	6f540044 	svcvs	0x00540044
	if (sVal < s) {
     f1c:	5a6c6174 	bpl	1b194f4 <__Stack_Size+0x1b190f4>
     f20:	316c6142 	cmncc	ip, r2, asr #2
     f24:	6d6f4300 	stclvs	3, cr4, [pc]
		return s;
	}

	s = (short) pgm_read_word(sMax);
     f28:	646e616d 	strbtvs	r6, [lr], #-365
     f2c:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
     f30:	43747570 	cmnmi	r4, #469762048	; 0x1c000000
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
				FemurAngle1[LegIndex], &cFemurMin1[LegIndex],
				&cFemurMax1[LegIndex]);
		TibiaAngle1[LegIndex] = CheckServoAngleBounds(s++,
     f34:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     f38:	656c6c6f 	strbvs	r6, [ip, #-3183]!
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     f3c:	6c415f72 	mcrrvs	15, 7, r5, r1, cr2
     f40:	43776f6c 	cmnmi	r7, #432	; 0x1b0
				TibiaAngle1[LegIndex], &cTibiaMin1[LegIndex],
				&cTibiaMax1[LegIndex]);

	}
#endif
}
     f44:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     f48:	656c6c6f 	strbvs	r6, [ip, #-3183]!
     f4c:	746e4972 	strbtvc	r4, [lr], #-2418
     f50:	75727265 	ldrbvc	r7, [r2, #-613]!
     f54:	00737470 	rsbseq	r7, r3, r0, ror r4
     f58:	74696147 	strbtvc	r6, [r9], #-327
     f5c:	70657453 	rsbvc	r7, r5, r3, asr r4
     f60:	6f6f6200 	svcvs	0x006f6200
     f64:	6f63006c 	svcvs	0x0063006c
     f68:	49003473 	stmdbmi	r0, {r0, r1, r4, r5, r6, sl, ip, sp}
     f6c:	5f54534e 	svcpl	0x0054534e
// SmoothControl (From Zenta) -  This function makes the body
//            rotation and translation much smoother
//--------------------------------------------------------------------
short SmoothControl(short CtrlMoveInp, short CtrlMoveOut, byte CtrlDivider) {

	if (CtrlMoveOut < (CtrlMoveInp - 4))
     f70:	474e4950 	smlsldmi	r4, lr, r0, r9
     f74:	6d655400 	cfstrdvs	mvd5, [r5]
		return CtrlMoveOut + abs((CtrlMoveOut - CtrlMoveInp) / CtrlDivider);
     f78:	54003170 	strpl	r3, [r0], #-368
     f7c:	32706d65 	rsbscc	r6, r0, #6464	; 0x1940
     f80:	69654800 	stmdbvs	r5!, {fp, lr}^
     f84:	53746867 	cmnpl	r4, #6750208	; 0x670000
     f88:	64656570 	strbtvs	r6, [r5], #-1392
     f8c:	65646f4d 	strbvs	r6, [r4, #-3917]!
     f90:	4c724e00 	ldclmi	14, cr4, [r2]
	else if (CtrlMoveOut > (CtrlMoveInp + 4))
     f94:	65746669 	ldrbvs	r6, [r4, #-1641]!
		return CtrlMoveOut - abs((CtrlMoveOut - CtrlMoveInp) / CtrlDivider);
     f98:	736f5064 	cmnvc	pc, #100	; 0x64
     f9c:	66656c00 	strbtvs	r6, [r5], -r0, lsl #24
     fa0:	41004874 	tstmi	r0, r4, ror r8
     fa4:	6e415342 	cdpvs	3, 4, cr5, cr1, cr2, {2}
     fa8:	44656c67 	strbtmi	r6, [r5], #-3175
     fac:	00316765 	eorseq	r6, r1, r5, ror #14
     fb0:	76617254 	undefined

	return CtrlMoveInp;
}
     fb4:	654c6c65 	strbvs	r6, [ip, #-3173]
// GetLegsXZLength -
//--------------------------------------------------------------------
word g_wLegsXZLength = 0xffff;
word GetLegsXZLength(void) {
	// Could save away or could do a little math on one leg...
	if (g_wLegsXZLength != 0xffff)
     fb8:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     fbc:	66656c00 	strbtvs	r6, [r5], -r0, lsl #24
     fc0:	43005674 	movwmi	r5, #1652	; 0x674

//--------------------------------------------------------------------
// GetLegsXZLength -
//--------------------------------------------------------------------
word g_wLegsXZLength = 0xffff;
word GetLegsXZLength(void) {
     fc4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
	// Could save away or could do a little math on one leg...
	if (g_wLegsXZLength != 0xffff)
		return g_wLegsXZLength;

	return isqrt32((LegPosX[0] * LegPosX[0]) + (LegPosZ[0] * LegPosZ[0]));
     fc8:	6f4d6c6f 	svcvs	0x004d6c6f
     fcc:	42006564 	andmi	r6, r0, #419430400	; 0x19000000
     fd0:	61436c61 	cmpvs	r3, r1, ror #24
     fd4:	6e4f636c 	cdpvs	3, 4, cr6, cr15, cr12, {3}
     fd8:	67654c65 	strbvs	r4, [r5, -r5, ror #24]!
     fdc:	6e697300 	cdpvs	3, 6, cr7, cr9, cr0, {0}
}
     fe0:	69530034 	ldmdbvs	r3, {r2, r4, r5}^
     fe4:	0034476e 	eorseq	r4, r4, lr, ror #14
     fe8:	6d654663 	stclvs	6, cr4, [r5, #-396]!
     fec:	614d7275 	cmpvs	sp, r5, ror r2

#ifndef MAX_XZ_LEG_ADJUST
#define MAX_XZ_LEG_ADJUST   (word)(cCoxaLength[0]+cTibiaLength[0] + cFemurLength[0]/4)
#endif

void AdjustLegPositions(word XZLength1) {
     ff0:	41003178 	tstmi	r0, r8, ror r1
     ff4:	346e6174 	strbtcc	r6, [lr], #-372
     ff8:	74416c00 	strbvc	r6, [r1], #-3072
     ffc:	43006e61 	movwmi	r6, #3681	; 0xe61
    1000:	595f5250 	ldmdbpl	pc, {r4, r6, r9, ip, lr}^
		XZLength1 = MAX_XZ_LEG_ADJUST;
	if (XZLength1 < MIN_XZ_LEG_ADJUST)
		XZLength1 = MIN_XZ_LEG_ADJUST;

	// see if same length as when we came in
	if (XZLength1 == g_wLegsXZLength)
    1004:	52504300 	subspl	r4, r0, #0	; 0x0
    1008:	62005a5f 	andvs	r5, r0, #389120	; 0x5f000
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		GetSinCos((short) pgm_read_word(&cCoxaAngle1[LegIndex]));

		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
    100c:	6f747475 	svcvs	0x00747475

	// see if same length as when we came in
	if (XZLength1 == g_wLegsXZLength)
		return;

	g_wLegsXZLength = XZLength1;
    1010:	7250736e 	subsvc	r7, r0, #-1207959551	; 0xb8000001

	u8 LegIndex;
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		GetSinCos((short) pgm_read_word(&cCoxaAngle1[LegIndex]));
    1014:	67007665 	strvs	r7, [r0, -r5, ror #12]
    1018:	6544665f 	strbvs	r6, [r4, #-1631]

		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
    101c:	4f677562 	svcmi	0x00677562
    1020:	75707475 	ldrbvc	r7, [r0, #-1141]!
    1024:	57660074 	undefined
    1028:	696b6c61 	stmdbvs	fp!, {r0, r5, r6, sl, fp, sp, lr}^
    102c:	7700676e 	strvc	r6, [r0, -lr, ror #14]
    1030:	50727543 	rsbspl	r7, r2, r3, asr #10
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
    1034:	4100736f 	tstmi	r0, pc, ror #6
    1038:	656c676e 	strbvs	r6, [ip, #-1902]!
    103c:	34646152 	strbtcc	r6, [r4], #-338
    1040:	61744100 	cmnvs	r4, r0, lsl #2
    1044:	4100586e 	tstmi	r0, lr, ror #16
    1048:	596e6174 	stmdbpl	lr!, {r2, r4, r5, r6, r8, sp, lr}^
		return;

	g_wLegsXZLength = XZLength1;

	u8 LegIndex;
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    104c:	6f436300 	svcvs	0x00436300
		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
	}

	// Make sure we cycle through one gait to have the legs all move into their new locations...
	g_InControlState.ForceGaitStepCnt = g_InControlState.gaitCur.StepsInGait;
    1050:	6e496178 	mcrvs	1, 2, r6, cr9, cr8, {3}
    1054:	49630076 	stmdbmi	r3!, {r1, r2, r4, r5, r6}^
}
    1058:	5074696e 	rsbspl	r6, r4, lr, ror #18
    105c:	0058736f 	subseq	r7, r8, pc, ror #6
    1060:	696e4963 	stmdbvs	lr!, {r0, r1, r5, r6, r8, fp, lr}^
    1064:	736f5074 	cmnvc	pc, #116	; 0x74
    1068:	49630059 	stmdbmi	r3!, {r0, r3, r4, r6}^
    106c:	5074696e 	rsbspl	r6, r4, lr, ror #18
    1070:	005a736f 	subseq	r7, sl, pc, ror #6
    1074:	4d524f4e 	ldclmi	15, cr4, [r2, #-312]
    1078:	524f4e5f 	subpl	r4, pc, #1520	; 0x5f0
		g_InControlState.aCoxaInitAngle1[LegIndex] = (short)pgm_read_word(&cCoxaAngle1[LegIndex]);
#endif
	}
	g_wLegsXZLength = 0xffff;
#endif
}
    107c:	5f67004d 	svcpl	0x0067004d
		else if (g_InControlState.aCoxaInitAngle1[LegIndex] < -700)
		g_InControlState.aCoxaInitAngle1[LegIndex] = -700;
	}
	g_wLegsXZLength = 0xffff;
#endif
}
    1080:	75437761 	strbvc	r7, [r3, #-1889]
//     to be appropriate for the current y location of the body...
//--------------------------------------------------------------------

u8 g_iLegInitIndex = 0x00; // remember which index we are currently using...

void AdjustLegPositionsToBodyHeight() {
    1084:	50584172 	subspl	r4, r8, r2, ror r1
    1088:	4600736f 	strmi	r7, [r0], -pc, ror #6
#ifdef CNT_HEX_INITS
	// Lets see which of our units we should use...
	// Note: We will also limit our body height here...
	if (g_InControlState.BodyPos.y
    108c:	746e6f72 	strbtvc	r6, [lr], #-3954
			> (short) pgm_read_byte(&g_abHexMaxBodyY[CNT_HEX_INITS-1]))
		g_InControlState.BodyPos.y = (short) pgm_read_byte(
    1090:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
				&g_abHexMaxBodyY[CNT_HEX_INITS-1]);

	u8 i;
	word XZLength1 = pgm_read_byte(&g_abHexIntXZ[CNT_HEX_INITS-1]);
	for (i = 0; i < (CNT_HEX_INITS - 1); i++) { // Don't need to look at last entry as we already init to assume this one...
		if (g_InControlState.BodyPos.y
    1094:	00736f50 	rsbseq	r6, r3, r0, asr pc
    1098:	69676542 	stmdbvs	r7!, {r1, r6, r8, sl, sp, lr}^
				<= (short) pgm_read_byte(&g_abHexMaxBodyY[i])) {
			XZLength1 = pgm_read_byte(&g_abHexIntXZ[i]);
			break;
		}
	}
	if (i != g_iLegInitIndex) {
    109c:	7265536e 	rsbvc	r5, r5, #-1207959551	; 0xb8000001
				&g_abHexMaxBodyY[CNT_HEX_INITS-1]);

	u8 i;
	word XZLength1 = pgm_read_byte(&g_abHexIntXZ[CNT_HEX_INITS-1]);
	for (i = 0; i < (CNT_HEX_INITS - 1); i++) { // Don't need to look at last entry as we already init to assume this one...
		if (g_InControlState.BodyPos.y
    10a0:	70556f76 	subsvc	r6, r5, r6, ror pc
    10a4:	65746164 	ldrbvs	r6, [r4, #-356]!
    10a8:	69616700 	stmdbvs	r1!, {r8, r9, sl, sp, lr}^
				<= (short) pgm_read_byte(&g_abHexMaxBodyY[i])) {
			XZLength1 = pgm_read_byte(&g_abHexIntXZ[i]);
			break;
		}
	}
	if (i != g_iLegInitIndex) {
    10ac:	72754374 	rsbsvc	r4, r5, #-805306367	; 0xd0000001
		g_iLegInitIndex = i;  // remember the current index...
		AdjustLegPositions(XZLength1);
    10b0:	6f437300 	svcvs	0x00437300
	}
#endif // CNT_HEX_INITS
}
    10b4:	6e416178 	mcrvs	1, 2, r6, cr1, cr8, {3}
    10b8:	31656c67 	cmncc	r5, r7, ror #24
    10bc:	534e4900 	movtpl	r4, #59648	; 0xe900
}
//--------------------------------------------------------------------
//[CHECK VOLTAGE]
//Reads the input voltage and shuts down the bot when the power drops
byte s_bLVBeepCnt;
boolean CheckVoltage() {
    10c0:	45525f54 	ldrbmi	r5, [r2, #-3924]
    10c4:	00544553 	subseq	r4, r4, r3, asr r5
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10c8:	42746547 	rsbsmi	r6, r4, #297795584	; 0x11c00000

	// BUGBUG:: if voltage is 0 it failed to retrieve don't hang program...
	//    if (!Voltage)
	//      return;

	if (!g_fLowVoltageShutdown) {
    10cc:	65747461 	ldrbvs	r7, [r4, #-1121]!
boolean CheckVoltage() {
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10d0:	6f567972 	svcvs	0x00567972

	// BUGBUG:: if voltage is 0 it failed to retrieve don't hang program...
	//    if (!Voltage)
	//      return;

	if (!g_fLowVoltageShutdown) {
    10d4:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
boolean CheckVoltage() {
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10d8:	505f0065 	subspl	r0, pc, r5, rrx

	if (!g_fLowVoltageShutdown) {
		/**PrintString("Voltage : ");
		Printu32d(Voltage);
		PrintString("\n");*/
		if ((Voltage < cTurnOffVol) || (Voltage >= 1999)) {
    10dc:	6e656f68 	cdpvs	15, 6, cr6, cr5, cr8, {3}
    10e0:	61477869 	cmpvs	r7, r9, ror #16
    10e4:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}


			//Turn off
			g_InControlState.BodyPos.x = 0;
    10e8:	5f54534e 	svcpl	0x0054534e
			g_InControlState.TravelLength.x = 0;
			g_InControlState.TravelLength.z = 0;

#ifdef OPT_SINGLELEG
			g_InControlState.TravelLength.y = 0;
			g_InControlState.SelectedLeg = 255;
    10ec:	5f504143 	svcpl	0x00504143
    10f0:	44495247 	strbmi	r5, [r9], #-583
#endif
			g_fLowVoltageShutdown = 1;
    10f4:	534e4900 	movtpl	r4, #59648	; 0xe900
			s_bLVBeepCnt = 0;    // how many times we beeped...
    10f8:	59535f54 	ldmdbpl	r3, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
		if ((Voltage < cTurnOffVol) || (Voltage >= 1999)) {


			//Turn off
			g_InControlState.BodyPos.x = 0;
			g_InControlState.BodyPos.y = 0;
    10fc:	525f434e 	subspl	r4, pc, #939524097	; 0x38000001
			g_InControlState.BodyPos.z = 0;
			g_InControlState.BodyRot1.x = 0;
    1100:	575f4745 	ldrbpl	r4, [pc, -r5, asr #14]
			g_InControlState.BodyRot1.y = 0;
			g_InControlState.BodyRot1.z = 0;
    1104:	45544952 	ldrbmi	r4, [r4, #-2386]
			g_InControlState.TravelLength.x = 0;
			g_InControlState.TravelLength.z = 0;
    1108:	695f6700 	ldmdbvs	pc, {r8, r9, sl, sp, lr}^
#ifdef OPT_SINGLELEG
			g_InControlState.TravelLength.y = 0;
			g_InControlState.SelectedLeg = 255;
#endif
			g_fLowVoltageShutdown = 1;
			s_bLVBeepCnt = 0;    // how many times we beeped...
    110c:	656c6449 	strbvs	r6, [ip, #-1097]!
			g_InControlState.fRobotOn = false;
    1110:	76726553 	undefined
		}
#ifdef cTurnOnVol
	} else if ((Voltage > cTurnOnVol) && (Voltage < 1999)) {
    1114:	6d754e6f 	ldclvs	14, cr4, [r5, #-444]!
    1118:	70537700 	subsvc	r7, r3, r0, lsl #14

		g_fLowVoltageShutdown = 0;
    111c:	00646565 	rsbeq	r6, r4, r5, ror #10
    1120:	45665f67 	strbmi	r5, [r6, #-3943]!

#endif
	} else {
		if (s_bLVBeepCnt < 5) {
    1124:	6c62616e 	stfvse	f6, [r2], #-440
    1128:	72655365 	rsbvc	r5, r5, #-1811939327	; 0x94000001
			s_bLVBeepCnt++;
    112c:	00736f76 	rsbseq	r6, r3, r6, ror pc

			//MSound( 1, 45, 2000);
			Buzzed(45, 2000);
    1130:	61746f54 	cmnvs	r4, r4, asr pc
    1134:	6142596c 	cmpvs	r2, ip, ror #18
    1138:	5800316c 	stmdapl	r0, {r2, r3, r5, r6, r8, ip, sp}
		}
		mDelay(2000);
    113c:	6e654c5a 	mcrvs	12, 3, r4, cr5, cr10, {2}
    1140:	31687467 	cmncc	r8, r7, ror #8
    1144:	73655200 	cmnvc	r5, #0	; 0x0
	}
#endif

	return g_fLowVoltageShutdown;
}
    1148:	654c7465 	strbvs	r7, [ip, #-1125]
    114c:	696e4967 	stmdbvs	lr!, {r0, r1, r2, r5, r6, r8, fp, lr}^
    1150:	676e4174 	undefined
    1154:	0073656c 	rsbseq	r6, r3, ip, ror #10
    1158:	54534e49 	ldrbpl	r4, [r3], #-3657

//==============================================================================
// BackgroundProcess - Allows us to have some background processing for those
//    servo drivers that need us to do things like polling...
//==============================================================================
void BackgroundProcess(void) {
    115c:	5f44525f 	svcpl	0x0044525f
    1160:	544c4946 	strbpl	r4, [ip], #-2374
	if (g_fAXSpeedControl)
    1164:	49005248 	stmdbmi	r0, {r3, r6, r9, ip, lr}
		return;  // nothing to do in this mode...

	if (ServosEnabled) {
		//DebugToggle(A3);
		BioloidControllerEx_interpolateStep(false); // Do our background stuff...
    1168:	6c6f534b 	stclvs	3, cr5, [pc], #-300
		Battery_Monitor_Alarm();
    116c:	6f697475 	svcvs	0x00697475
	}
}
    1170:	7272456e 	rsbsvc	r4, r2, #461373440	; 0x1b800000
    1174:	6300726f 	movwvs	r7, #623	; 0x26f
//Function that gets called from the main loop if the robot is not logically
//     on.  Gives us a chance to play some...
//--------------------------------------------------------------------
static u8 g_iIdleServoNum = (u8) - 1;
static u8 g_iIdleLedState = 1;  // what state to we wish to set...
void IdleTime(void) {
    1178:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    117c:	00587465 	subseq	r7, r8, r5, ror #8
	// Each time we call this set servos LED on or off...
	g_iIdleServoNum++;
    1180:	66664f63 	strbtvs	r4, [r6], -r3, ror #30
	if (g_iIdleServoNum >= NUMSERVOS) {
    1184:	5a746573 	bpl	1d1a758 <__Stack_Size+0x1d1a358>
    1188:	47494800 	strbmi	r4, [r9, -r0, lsl #16]
		g_iIdleServoNum = 0;
    118c:	4f4c5f48 	svcmi	0x004c5f48
		g_iIdleLedState = 1 - g_iIdleLedState;
    1190:	4e00474e 	cdpmi	7, 0, cr4, cr0, cr14, {2}
    1194:	74616765 	strbtvc	r6, [r1], #-1893
	}
	dxl_write_byte(pgm_read_byte(&cPinTable[g_iIdleServoNum]), AXM_LED,
    1198:	56657669 	strbtpl	r7, [r5], -r9, ror #12
    119c:	65756c61 	ldrbvs	r6, [r5, #-3169]!
    11a0:	534e4900 	movtpl	r4, #59648	; 0xe900
    11a4:	45525f54 	ldrbmi	r5, [r2, #-3924]
    11a8:	445f4441 	ldrbmi	r4, [pc], #1089	; 11b0 <__Stack_Size+0xdb0>
			g_iIdleLedState);
	//ax12ReadPacket(6);  // get the response...


}
    11ac:	00415441 	subeq	r5, r1, r1, asr #8
    11b0:	41746547 	cmnmi	r4, r7, asr #10
    11b4:	00736f43 	rsbseq	r6, r3, r3, asr #30
    11b8:	54534e49 	ldrbpl	r4, [r3], #-3657

//--------------------------------------------------------------------
//[SetRegOnAllServos] Function that is called to set the state of one
//  register in all of the servos, like Torque on...
//--------------------------------------------------------------------
void SetRegOnAllServos(u8 bReg, u8 bVal) {
    11bc:	4e59535f 	mrcmi	3, 2, r5, cr9, cr15, {2}
    11c0:	45525f43 	ldrbmi	r5, [r2, #-3907]
    11c4:	67004441 	strvs	r4, [r0, -r1, asr #8]
	 ax12write(bVal);

  }
  ax12write(0xff - (checksum % 256));
  setRX(0);*/
	 dxl_set_txpacket_id (BROADCAST_ID);
    11c8:	6f4c665f 	svcvs	0x004c665f
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    11cc:	6c6f5677 	stclvs	6, cr5, [pc], #-476
	dxl_set_txpacket_parameter(0,bReg);
    11d0:	65676174 	strbvs	r6, [r7, #-372]!
    11d4:	74756853 	ldrbtvc	r6, [r5], #-2131
	dxl_set_txpacket_parameter(1,2);
    11d8:	6e776f64 	cdpvs	15, 7, cr6, cr7, cr4, {3}
    11dc:	65526200 	ldrbvs	r6, [r2, #-512]
    11e0:	4e430067 	cdpmi	0, 4, cr0, cr3, cr7, {3}
  int i;
	for (i = 0; i < poseSize; i++) {
		byte id = pgm_read_byte(&cPinTable[i]);
		dxl_set_txpacket_parameter(2 + 3 * i, id);
    11e4:	454c5f54 	strbmi	r5, [ip, #-3924]
    11e8:	47005347 	strmi	r5, [r0, -r7, asr #6]
    11ec:	43746961 	cmnmi	r4, #1589248	; 0x184000
    11f0:	65727275 	ldrbvs	r7, [r2, #-629]!
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
    11f4:	654c746e 	strbvs	r7, [ip, #-1134]
    11f8:	00724e67 	rsbseq	r4, r2, r7, ror #28
    11fc:	61746f52 	cmnvs	r4, r2, asr pc
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
    1200:	654c6574 	strbvs	r6, [ip, #-1396]
    1204:	696e4967 	stmdbvs	lr!, {r0, r1, r2, r5, r6, r8, fp, lr}^
    1208:	676e4174 	undefined
	dxl_set_txpacket_parameter(1,2);
  int i;
	for (i = 0; i < poseSize; i++) {
		byte id = pgm_read_byte(&cPinTable[i]);
		dxl_set_txpacket_parameter(2 + 3 * i, id);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
    120c:	0073656c 	rsbseq	r6, r3, ip, ror #10
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
    1210:	76657250 	undefined
	 dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0,bReg);
	dxl_set_txpacket_parameter(1,2);
  int i;
	for (i = 0; i < poseSize; i++) {
    1214:	76726553 	undefined
    1218:	766f4d6f 	strbtvc	r4, [pc], -pc, ror #26
    121c:	6d695465 	cfstrdvs	mvd5, [r9, #-404]!
		dxl_set_txpacket_parameter(2 + 3 * i, id);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
	}

	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
    1220:	6f420065 	svcvs	0x00420065
    1224:	6f507964 	svcvs	0x00507964
    1228:	61420073 	cmpvs	r2, r3, ror r0
#ifdef DEBUG_BIOLOIDEX
	PrintString("DriverAX12 --- SetRegOnAllServos ---\n");
#endif
	dxl_txrx_packet();
    122c:	72676b63 	rsbvc	r6, r7, #101376	; 0x18c00

	u16 CommStatus = dxl_get_result();
    1230:	646e756f 	strbtvs	r7, [lr], #-1391
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
    1234:	636f7250 	cmnvs	pc, #5	; 0x5
		PrintErrorCode();
    1238:	00737365 	rsbseq	r7, r3, r5, ror #6
	else
		PrintCommStatus(CommStatus);
    123c:	796f4a62 	stmdbvc	pc!, {r1, r5, r6, r9, fp, lr}^
#endif
}
    1240:	63697473 	cmnvs	r9, #1929379840	; 0x73000000
    1244:	6c61576b 	stclvs	7, cr5, [r1], #-428
    1248:	646f4d6b 	strbtvs	r4, [pc], #3435	; 1250 <__Stack_Size+0xe50>
//--------------------------------------------------------------------
//[MakeSureServosAreOn] Function that is called to handle when you are
//  transistioning from servos all off to being on.  May need to read
//  in the current pose...
//--------------------------------------------------------------------
void MakeSureServosAreOn(void) {
    124c:	61480065 	cmpvs	r8, r5, rrx

	if (ServosEnabled) {

		if (!g_fServosFree)
    1250:	694c666c 	stmdbvs	ip, {r2, r3, r5, r6, r9, sl, sp, lr}^
			return;    // we are not free

		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		if (g_fAXSpeedControl) {
    1254:	65487466 	strbvs	r7, [r8, #-1126]
    1258:	74686769 	strbtvc	r6, [r8], #-1897

			int i;
			for (i = 0; i < NUMSERVOS; i++) {
				g_awGoalAXPos[i] = dxl_read_word(pgm_read_byte(&cPinTable[i]),
    125c:	694d7300 	stmdbvs	sp, {r8, r9, ip, sp, lr}^
    1260:	4e49006e 	cdpmi	0, 4, cr0, cr9, cr14, {3}
    1264:	575f5453 	undefined
    1268:	45525f52 	ldrbmi	r5, [r2, #-3922]
						AXM_PRESENT_POSITION_L);
				mDelay(25);
    126c:	52485447 	subpl	r5, r8, #1191182336	; 0x47000000
    1270:	74655300 	strbtvc	r5, [r5], #-768

		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		if (g_fAXSpeedControl) {

			int i;
			for (i = 0; i < NUMSERVOS; i++) {
    1274:	4f676552 	svcmi	0x00676552
    1278:	6c6c416e 	stfvse	f4, [ip], #-440
				g_awGoalAXPos[i] = dxl_read_word(pgm_read_byte(&cPinTable[i]),
						AXM_PRESENT_POSITION_L);
				mDelay(25);
			}
		} else {
			BioloidControllerEx_readPose();
    127c:	76726553 	undefined
		}

		SetRegOnAllServos(AXM_TORQUE_ENABLE, 1);  // Use sync write to do it.
    1280:	4700736f 	strmi	r7, [r0, -pc, ror #6]
    1284:	50746961 	rsbspl	r6, r4, r1, ror #18

		CommanderInputController_AllowControllerInterrupts(true);
		g_fServosFree = false;
    1288:	0058736f 	subseq	r7, r8, pc, ror #6
	}

}
    128c:	79646f42 	stmdbvc	r4!, {r1, r6, r8, r9, sl, fp, sp, lr}^
    1290:	31746f52 	cmncc	r4, r2, asr pc
    1294:	52504300 	subspl	r4, r0, #0	; 0x0
    1298:	6300585f 	movwvs	r5, #2143	; 0x85f
    129c:	69626954 	stmdbvs	r2!, {r2, r4, r6, r8, fp, sp, lr}^

//------------------------------------------------------------------------------------------
//[BeginServoUpdate] Does whatever preperation that is needed to starrt a move of our servos
//------------------------------------------------------------------------------------------
void BeginServoUpdate(void)    // Start the update
		{
    12a0:	6e694d61 	cdpvs	13, 6, cr4, cr9, cr1, {3}

	MakeSureServosAreOn();
    12a4:	5f670031 	svcpl	0x00670031
	if (ServosEnabled) {

		if (g_fAXSpeedControl) {
    12a8:	67654c62 	strbvs	r4, [r5, -r2, ror #24]!
    12ac:	746c6f56 	strbtvc	r6, [ip], #-3926

#ifdef USE_AX12_SPEED_CONTROL
			// If we are trying our own Servo control need to save away the new positions...
			byte i;
			for (i = 0; i < NUMSERVOS; i++) {
				g_awCurAXPos[i] = g_awGoalAXPos[i];
    12b0:	00656761 	rsbeq	r6, r5, r1, ror #14
    12b4:	6d654663 	stclvs	6, cr4, [r5, #-396]!
    12b8:	654c7275 	strbvs	r7, [ip, #-629]
		if (g_fAXSpeedControl) {

#ifdef USE_AX12_SPEED_CONTROL
			// If we are trying our own Servo control need to save away the new positions...
			byte i;
			for (i = 0; i < NUMSERVOS; i++) {
    12bc:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
				g_awCurAXPos[i] = g_awGoalAXPos[i];
			}
#endif
		} else
			BioloidControllerEx_interpolateStep(true); // Make sure we call at least once
    12c0:	756f4400 	strbvc	r4, [pc, #-1024]!	; ec8 <__Stack_Size+0xac8>
    12c4:	54656c62 	strbtpl	r6, [r5], #-3170

	}
}
    12c8:	65766172 	ldrbvs	r6, [r6, #-370]!
    12cc:	006e4f6c 	rsbeq	r4, lr, ip, ror #30
    12d0:	4f434e49 	svcmi	0x00434e49
    12d4:	4f52544e 	svcmi	0x0052544e
}

//--------------------------------------------------------------------
//[FREE SERVOS] Frees all the servos
//--------------------------------------------------------------------
void FreeServos(void) {
    12d8:	4154534c 	cmpmi	r4, ip, asr #6
    12dc:	63004554 	movwvs	r4, #1364	; 0x554

	if (!g_fServosFree) {
    12e0:	756d6546 	strbvc	r6, [sp, #-1350]!
		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		SetRegOnAllServos(AXM_TORQUE_ENABLE, 0);  // do this as one statement...
    12e4:	6e694d72 	mcrvs	13, 3, r4, cr9, cr2, {3}
    12e8:	4d730031 	ldclmi	0, cr0, [r3, #-196]!
    12ec:	4e007861 	cdpmi	8, 0, cr7, cr0, cr1, {3}
		byte i;
		for (i = 0; i < NUMSERVOS; i++) {
			Relax(pgm_read_byte(&cPinTable[i]));
    12f0:	61476d6f 	cmpvs	r7, pc, ror #26
    12f4:	70537469 	subsvc	r7, r3, r9, ror #8
    12f8:	00646565 	rsbeq	r6, r4, r5, ror #10

	if (!g_fServosFree) {
		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		SetRegOnAllServos(AXM_TORQUE_ENABLE, 0);  // do this as one statement...
		byte i;
		for (i = 0; i < NUMSERVOS; i++) {
    12fc:	4967654c 	stmdbmi	r7!, {r2, r3, r6, r8, sl, sp, lr}^
			Relax(pgm_read_byte(&cPinTable[i]));
		}
		CommanderInputController_AllowControllerInterrupts(true);
		g_fServosFree = true;
    1300:	67654c4b 	strbvs	r4, [r5, -fp, asr #24]!
	}
}
    1304:	4800724e 	stmdami	r0, {r1, r2, r3, r6, r9, ip, sp, lr}
    1308:	5f484749 	svcpl	0x00484749
    130c:	4d524f4e 	ldclmi	15, cr4, [r2, #-312]
extern void SetRegOnAllServos(u8 bReg, u8 bVal);

//--------------------------------------------------------------------
//Init
//--------------------------------------------------------------------
void Servo_Init(void) {
    1310:	65745300 	ldrbvs	r5, [r4, #-768]!
	// First lets get the actual servo positions for all of our servos...
	//pinMode(0, OUTPUT);
	g_fServosFree = true;
    1314:	6e497370 	mcrvs	3, 2, r7, cr9, cr0, {3}

  poseSize = NUMSERVOS;
    1318:	74696147 	strbtvc	r6, [r9], #-327
    131c:	775f6700 	ldrbvc	r6, [pc, -r0, lsl #14]
  BioloidControllerEx_readPose();
    1320:	7367654c 	cmnvc	r7, #318767104	; 0x13000000
#ifdef cVoltagePin
	for (byte i=0; i < 8; i++)
	GetBatteryVoltage();  // init the voltage pin
#endif

	g_fAXSpeedControl = false;
    1324:	654c5a58 	strbvs	r5, [ip, #-2648]
    1328:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^



	// Added - try to speed things up later if we do a query...
	SetRegOnAllServos(AXM_RETURN_DELAY_TIME, 0); // tell servos to give us back their info as quick as they can...
    132c:	6e695300 	cdpvs	3, 6, cr5, cr9, cr0, {0}
    1330:	4c656c67 	stclmi	12, cr6, [r5], #-412

}
    1334:	6f436765 	svcvs	0x00436765
    1338:	6f72746e 	svcvs	0x0072746e
    133c:	6547006c 	strbvs	r0, [r7, #-108]
    1340:	6e695374 	mcrvs	3, 3, r5, cr9, cr4, {3}

}

void setupPhoenix() {

	g_fShowDebugPrompt = true;
    1344:	00736f43 	rsbseq	r6, r3, r3, asr #30
void readSensors(){


}

void setupPhoenix() {
    1348:	5f676942 	svcpl	0x00676942

	g_fShowDebugPrompt = true;
	g_fDebugOutput = false;
    134c:	6e69616d 	powvsez	f6, f1, #5.0
    1350:	72744300 	rsbsvc	r4, r4, #0	; 0x0
	//init BioloidEx
	BioloidControllerEx();
    1354:	766f4d6c 	strbtvc	r4, [pc], -ip, ror #26

	// Init our ServoDriver
	Servo_Init();
    1358:	706e4965 	rsbvc	r4, lr, r5, ror #18

	mDelay(10);
    135c:	654c7300 	strbvs	r7, [ip, #-768]

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		LegPosX[LegIndex] = (short) pgm_read_word(&cInitPosX[LegIndex]); //Set start positions for each leg
    1360:	696e4967 	stmdbvs	lr!, {r0, r1, r2, r5, r6, r8, fp, lr}^
    1364:	676e4174 	undefined
		LegPosY[LegIndex] = (short) pgm_read_word(&cInitPosY[LegIndex]);
    1368:	6441656c 	strbvs	r6, [r1], #-1388
    136c:	7473756a 	ldrbtvc	r7, [r3], #-1386
		LegPosZ[LegIndex] = (short) pgm_read_word(&cInitPosZ[LegIndex]);
    1370:	61745300 	cmnvs	r4, r0, lsl #6

	mDelay(10);

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		LegPosX[LegIndex] = (short) pgm_read_word(&cInitPosX[LegIndex]); //Set start positions for each leg
    1374:	70557472 	subsvc	r7, r5, r2, ror r4
    1378:	65746164 	ldrbvs	r6, [r4, #-356]!
		LegPosY[LegIndex] = (short) pgm_read_word(&cInitPosY[LegIndex]);
    137c:	76726553 	undefined
    1380:	4300736f 	movwmi	r7, #879	; 0x36f
		LegPosZ[LegIndex] = (short) pgm_read_word(&cInitPosZ[LegIndex]);
    1384:	3441736f 	strbcc	r7, [r1], #-879
    1388:	6c614200 	sfmvs	f4, 2, [r1]
    138c:	65636e61 	strbvs	r6, [r3, #-3681]!
	Servo_Init();

	mDelay(10);

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    1390:	79646f42 	stmdbvc	r4!, {r1, r6, r8, r9, sl, fp, sp, lr}^
    1394:	74654700 	strbtvc	r4, [r5], #-1792
    1398:	43637241 	cmnmi	r3, #268435460	; 0x10000004

	ResetLegInitAngles();

	//Single leg control. Make sure no leg is selected
#ifdef OPT_SINGLELEG
	g_InControlState.SelectedLeg = 255; // No Leg selected
    139c:	6700736f 	strvs	r7, [r0, -pc, ror #6]
    13a0:	5841665f 	stmdapl	r1, {r0, r1, r2, r3, r4, r6, r9, sl, sp, lr}^
	g_InControlState.PrevSelectedLeg = 255;
    13a4:	65657053 	strbvs	r7, [r5, #-83]!
#endif
	//Body Positions
	g_InControlState.BodyPos.x = 0;
    13a8:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
	g_InControlState.BodyPos.y = 0;
	g_InControlState.BodyPos.z = 0;
    13ac:	6c6f7274 	sfmvs	f7, 2, [pc], #-464

//Body Rotations
	g_InControlState.BodyRot1.x = 0;
	g_InControlState.BodyRot1.y = 0;
    13b0:	61657200 	cmnvs	r5, r0, lsl #4
	g_InControlState.BodyRot1.z = 0;
	g_InControlState.BodyRotOffset.x = 0;
    13b4:	6e655364 	cdpvs	3, 6, cr5, cr5, cr4, {3}
	g_InControlState.BodyRotOffset.y = 0; //Input Y offset value to adjust centerpoint of rotation
	g_InControlState.BodyRotOffset.z = 0;
    13b8:	73726f73 	cmnvc	r2, #460	; 0x1cc

	//Gait
	g_InControlState.GaitType = 0;
    13bc:	6f437700 	svcvs	0x00437700
	g_InControlState.BalanceMode = 0;
    13c0:	44536178 	ldrbmi	r6, [r3], #-376
	g_InControlState.LegLiftHeight = 50;
	g_InControlState.ForceGaitStepCnt = 0; // added to try to adjust starting positions depending on height...
    13c4:	6c700056 	ldclvs	0, cr0, [r0], #-344
	g_InControlState.GaitStep = 1;
    13c8:	00656361 	rsbeq	r6, r5, r1, ror #6
}

void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {
    13cc:	4c695f67 	stclmi	15, cr5, [r9], #-412
	g_InControlState.BodyRotOffset.z = 0;

	//Gait
	g_InControlState.GaitType = 0;
	g_InControlState.BalanceMode = 0;
	g_InControlState.LegLiftHeight = 50;
    13d0:	6e496765 	cdpvs	7, 4, cr6, cr9, cr5, {3}
    13d4:	6e497469 	cdpvs	4, 4, cr7, cr9, cr9, {3}
void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {

		g_InControlState.gaitCur = APG[g_InControlState.GaitType];
    13d8:	00786564 	rsbseq	r6, r8, r4, ror #10
    13dc:	6d654663 	stclvs	6, cr4, [r5, #-396]!
    13e0:	6e497275 	mcrvs	2, 2, r7, cr9, cr5, {3}
//==============================================================================

// If both PS2 and XBee are defined then we will become secondary to the xbee
void CommanderInputController_Init(void) {

	g_BodyYOffset = 0;
    13e4:	6f430076 	svcvs	0x00430076
    13e8:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
    13ec:	5f726564 	svcpl	0x00726564
	g_BodyYShift = 0;
	//begin(XBEE_BAUD);
	GPSeq = 0;  // init to something...
    13f0:	69676562 	stmdbvs	r7!, {r1, r5, r6, r8, sl, sp, lr}^
    13f4:	6f54006e 	svcvs	0x0054006e

	ControlMode = WALKMODE;
    13f8:	586c6174 	stmdapl	ip!, {r2, r4, r5, r6, r8, sp, lr}^
	HeightSpeedMode = NORM_NORM;
    13fc:	316c6142 	cmncc	ip, r2, asr #2
	//    DoubleHeightOn = false;
	DoubleTravelOn = false;
    1400:	736f4300 	cmnvc	pc, #0	; 0x0
	bJoystickWalkMode = 0;
    1404:	46003442 	strmi	r3, [r0], -r2, asr #8
	GaitSelect();

	CommanderInputController_Init();

	// Servo Driver
	ServoMoveTime = 150;
    1408:	45534c41 	ldrbmi	r4, [r3, #-3137]
	g_InControlState.fRobotOn = 0;
    140c:	6f436300 	svcvs	0x00436300
	g_fLowVoltageShutdown = false;
    1410:	654c6178 	strbvs	r6, [ip, #-376]

}
    1414:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1418:	72506600 	subsvc	r6, r0, #0	; 0x0
    141c:	525f7665 	subspl	r7, pc, #105906176	; 0x6500000
    1420:	746f626f 	strbtvc	r6, [pc], #623	; 1428 <__Stack_Size+0x1028>
    1424:	43006e4f 	movwmi	r6, #3663	; 0xe4f
    1428:	446c7274 	strbtmi	r7, [ip], #-628
    142c:	64697669 	strbtvs	r7, [r9], #-1641
    1430:	67007265 	strvs	r7, [r0, -r5, ror #4]
    1434:	646f425f 	strbtvs	r4, [pc], #607	; 143c <__Stack_Size+0x103c>
    1438:	68535979 	ldmdavs	r3, {r0, r3, r4, r5, r6, r8, fp, ip, lr}^
    143c:	00746669 	rsbseq	r6, r4, r9, ror #12
    1440:	54534e49 	ldrbpl	r4, [r3], #-3657
    1444:	4952575f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    1448:	445f4554 	ldrbmi	r4, [pc], #1364	; 1450 <__Stack_Size+0x1050>
    144c:	00415441 	subeq	r5, r1, r1, asr #8
    1450:	63656863 	cmnvs	r5, #6488064	; 0x630000
    1454:	6d75736b 	ldclvs	3, cr7, [r5, #-428]!
    1458:	65467700 	strbvs	r7, [r6, #-1792]
    145c:	5372756d 	cmnpl	r2, #457179136	; 0x1b400000
    1460:	46005644 	strmi	r5, [r0], -r4, asr #12
    1464:	53656572 	cmnpl	r5, #478150656	; 0x1c800000
//[CommitServoDriver Updates the positions of the servos - This outputs
//         as much of the command as we can without committing it.  This
//         allows us to once the previous update was completed to quickly
//        get the next command to start
//--------------------------------------------------------------------
void CommitServoDriver(word wMoveTime) {
    1468:	6f767265 	svcvs	0x00767265
    146c:	5f670073 	svcpl	0x00670073
    1470:	73614c77 	cmnvc	r1, #30464	; 0x7700


	CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    1474:	6c6f5674 	stclvs	6, cr5, [pc], #-464

      }
      ax12write(0xff - (checksum % 256));
      setRX(0);
*/
  	    dxl_set_txpacket_id (BROADCAST_ID);
    1478:	65676174 	strbvs	r6, [r7, #-372]!
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    147c:	534e4900 	movtpl	r4, #59648	; 0xe900
    1480:	554c5f54 	strbpl	r5, [ip, #-3924]
		dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
    1484:	414d5f54 	cmpmi	sp, r4, asr pc
    1488:	4547414e 	strbmi	r4, [r7, #-334]
		dxl_set_txpacket_parameter(1, 2);
    148c:	69547700 	ldmdbvs	r4, {r8, r9, sl, ip, sp, lr}^
    1490:	4100656d 	tstmi	r0, sp, ror #10
    1494:	732f5050 	teqvc	pc, #80	; 0x50
    1498:	422f6372 	eormi	r6, pc, #-939524095	; 0xc8000001
      int i;
      word wSpeed;
		for (i = 0; i < poseSize; i++) {
			wSpeed = CalculateAX12MoveSpeed(g_awCurAXPos[i], g_awGoalAXPos[i], wMoveTime);    // What order should we store these values?
    149c:	6d5f6769 	ldclvs	7, cr6, [pc, #-420]
    14a0:	2e6e6961 	cdpcs	9, 6, cr6, cr14, cr1, {3}
    14a4:	546c0063 	strbtpl	r0, [ip], #-99
    14a8:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
			//dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
			byte id = pgm_read_byte(&cPinTable[i]);
			dxl_set_txpacket_parameter(2 + 3 * i, id);
    14ac:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    14b0:	64490074 	strbvs	r0, [r9], #-116
    14b4:	6954656c 	ldmdbvs	r4, {r2, r3, r5, r6, r8, sl, sp, lr}^
    14b8:	7300656d 	movwvc	r6, #1389	; 0x56d
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(g_awGoalAXPos[i]));
    14bc:	69626954 	stmdbvs	r2!, {r2, r4, r6, r8, fp, sp, lr}^
    14c0:	676e4161 	strbvs	r4, [lr, -r1, ror #2]!
    14c4:	0031656c 	eorseq	r6, r1, ip, ror #10
    14c8:	65464b49 	strbvs	r4, [r6, #-2889]
    14cc:	6f507465 	svcvs	0x00507465
			dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(g_awGoalAXPos[i]));
    14d0:	49005873 	stmdbmi	r0, {r0, r1, r4, r5, r6, fp, ip, lr}
    14d4:	6565464b 	strbvs	r4, [r5, #-1611]!
    14d8:	736f5074 	cmnvc	pc, #116	; 0x74
    14dc:	4b490059 	blmi	1241648 <__Stack_Size+0x1241248>
    14e0:	74656546 	strbtvc	r6, [r5], #-1350
    14e4:	5a736f50 	bpl	1cdd22c <__Stack_Size+0x1cdce2c>
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(wSpeed));
    14e8:	74786500 	ldrbtvc	r6, [r8], #-1280
    14ec:	76657250 	undefined
    14f0:	6c656400 	cfstrdvs	mvd6, [r5]
		    dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(wSpeed));
    14f4:	47006174 	smlsdxmi	r0, r4, r1, r6
    14f8:	654c7465 	strbvs	r7, [ip, #-1125]
    14fc:	5a587367 	bpl	161e2a0 <__Stack_Size+0x161dea0>
    1500:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
		dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
		dxl_set_txpacket_parameter(1, 2);
      int i;
      word wSpeed;
		for (i = 0; i < poseSize; i++) {
    1504:	43006874 	movwmi	r6, #2164	; 0x874
    1508:	44524f4f 	ldrbmi	r4, [r2], #-3919
    150c:	66004433 	undefined
    1510:	6f746361 	svcvs	0x00746361
			dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(g_awGoalAXPos[i]));
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(wSpeed));
		    dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(wSpeed));
		}

		dxl_set_txpacket_length((4 + 1) * poseSize + 4);
    1514:	4e490072 	mcrmi	0, 2, r0, cr9, cr2, {3}
    1518:	575f5453 	undefined
    151c:	49465f52 	stmdbmi	r6, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
#ifdef DEBUG_BIOLOIDEX
	PrintString("DriverAX12 --- CommitServoDriver ---\n");
#endif
		dxl_txrx_packet();
    1520:	5248544c 	subpl	r5, r8, #1275068416	; 0x4c000000

			u16 CommStatus = dxl_get_result();
    1524:	6f526600 	svcvs	0x00526600
#ifdef USING_PC_UART
			if (CommStatus == DXL_RXSUCCESS)
    1528:	4f746f62 	svcmi	0x00746f62
				PrintErrorCode();
    152c:	694c006e 	stmdbvs	ip, {r1, r2, r3, r5, r6}^
			else
				PrintCommStatus(CommStatus);
    1530:	69447466 	stmdbvs	r4, {r1, r2, r5, r6, sl, ip, sp, lr}^
    1534:	63614676 	cmnvs	r1, #123731968	; 0x7600000
#endif
#endif
		} else {
			BioloidControllerEx_interpolateSetup(wMoveTime);
    1538:	00726f74 	rsbseq	r6, r2, r4, ror pc

	}

	CommanderInputController_AllowControllerInterrupts(true);

}
    153c:	656b614d 	strbvs	r6, [fp, #-333]!
    1540:	65727553 	ldrbvs	r7, [r2, #-1363]!
    1544:	76726553 	undefined
    1548:	7241736f 	subvc	r7, r1, #-1140850687	; 0xbc000001
    154c:	006e4f65 	rsbeq	r4, lr, r5, ror #30
    1550:	79685958 	stmdbvc	r8!, {r3, r4, r6, r8, fp, ip, lr}^
	word wCoxaSDV;        // Coxa value in servo driver units
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    1554:	54003270 	strpl	r3, [r0], #-624
    1558:	6c61746f 	cfstrdvs	mvd7, [r1], #-444
    155c:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    1560:	54005873 	strpl	r5, [r0], #-2163
    1564:	6c61746f 	cfstrdvs	mvd7, [r1], #-444


void OutputServoInfoForLeg(byte LegIndex, short sCoxaAngle1, short sFemurAngle1,
		short sTibiaAngle1)

		{
    1568:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
	word wCoxaSDV;        // Coxa value in servo driver units
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    156c:	54005973 	strpl	r5, [r0], #-2419
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
    1570:	6c61746f 	cfstrdvs	mvd7, [r1], #-444
    1574:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    1578:	49005a73 	stmdbmi	r0, {r0, r1, r4, r5, r6, r9, fp, ip, lr}
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    157c:	3257534b 	subscc	r5, r7, #738197505	; 0x2c000001
    1580:	615f6700 	cmpvs	pc, r0, lsl #14
    1584:	78654862 	stmdavc	r5!, {r1, r5, r6, fp, lr}^


void OutputServoInfoForLeg(byte LegIndex, short sCoxaAngle1, short sFemurAngle1,
		short sTibiaAngle1)

		{
    1588:	58746e49 	ldmdapl	r4!, {r0, r3, r6, r9, sl, fp, sp, lr}^
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    158c:	6441005a 	strbvs	r0, [r1], #-90
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
    1590:	7473756a 	ldrbtvc	r7, [r3], #-1386
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    1594:	5067654c 	rsbpl	r6, r7, ip, asr #10
#ifdef USE_AX12_SPEED_CONTROL
			// Save away the new positions...
			g_awGoalAXPos[FIRSTCOXAPIN + LegIndex] = wCoxaSDV; // What order should we store these values?
			g_awGoalAXPos[FIRSTFEMURPIN + LegIndex] = wFemurSDV;
    1598:	7469736f 	strbtvc	r7, [r9], #-879

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
#ifdef USE_AX12_SPEED_CONTROL
			// Save away the new positions...
			g_awGoalAXPos[FIRSTCOXAPIN + LegIndex] = wCoxaSDV; // What order should we store these values?
    159c:	736e6f69 	cmnvc	lr, #420	; 0x1a4
			g_awGoalAXPos[FIRSTFEMURPIN + LegIndex] = wFemurSDV;
    15a0:	6f426f54 	svcvs	0x00426f54
			g_awGoalAXPos[FIRSTTIBIAPIN + LegIndex] = wTibiaSDV;
    15a4:	65487964 	strbvs	r7, [r8, #-2404]
    15a8:	74686769 	strbtvc	r6, [r8], #-1897
    15ac:	495f6700 	ldmdbmi	pc, {r8, r9, sl, sp, lr}^

#endif
		} else {
			BioloidControllerEx_setNextPose(
    15b0:	6e6f436e 	cdpvs	3, 6, cr4, cr15, cr14, {3}
    15b4:	6c6f7274 	sfmvs	f7, 2, [pc], #-464
					pgm_read_byte(&cPinTable[FIRSTCOXAPIN + LegIndex]),
					wCoxaSDV);
			BioloidControllerEx_setNextPose(
    15b8:	74617453 	strbtvc	r7, [r1], #-1107
    15bc:	6f430065 	svcvs	0x00430065
    15c0:	74696d6d 	strbtvc	r6, [r9], #-3437
					pgm_read_byte(&cPinTable[FIRSTFEMURPIN + LegIndex]),
					wFemurSDV);
			BioloidControllerEx_setNextPose(
    15c4:	76726553 	undefined
    15c8:	6972446f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r6, sl, lr}^
					wTibiaSDV);

		}
	}
	CommanderInputController_AllowControllerInterrupts(true); // Ok for hserial again...
}
    15cc:	00726576 	rsbseq	r6, r2, r6, ror r5
    15d0:	616f4777 	smcvs	62583
    15d4:	736f506c 	cmnvc	pc, #108	; 0x6c
    15d8:	74754f00 	ldrbtvc	r4, [r5], #-3840
    15dc:	53747570 	cmnpl	r4, #469762048	; 0x1c000000

void StartUpdateServos() {
    15e0:	6f767265 	svcvs	0x00767265
	byte LegIndex;

	// First call off to the init...
	BeginServoUpdate();    // Start the update
    15e4:	6f666e49 	svcvs	0x00666e49
    15e8:	4c726f46 	ldclmi	15, cr6, [r2], #-280
    15ec:	49006765 	stmdbmi	r0, {r0, r2, r5, r6, r8, r9, sl, sp, lr}

	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		OutputServoInfoForLeg(LegIndex,
    15f0:	5f54534e 	svcpl	0x0054534e
    15f4:	5f504143 	svcpl	0x00504143
    15f8:	49474552 	stmdbmi	r7, {r1, r4, r6, r8, sl, lr}^
    15fc:	53004e4f 	movwpl	r4, #3663	; 0xe4f
    1600:	6f767265 	svcvs	0x00767265
    1604:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1608:	56770074 	undefined
    160c:	61746c6f 	cmnvs	r4, pc, ror #24
    1610:	66006567 	strvs	r6, [r0], -r7, ror #10
    1614:	6f6c6c41 	svcvs	0x006c6c41
    1618:	65730077 	ldrbvs	r0, [r3, #-119]!
    161c:	50707574 	rsbspl	r7, r0, r4, ror r5
    1620:	6e656f68 	cdpvs	15, 6, cr6, cr5, cr8, {3}
    1624:	4c007869 	stcmi	8, cr7, [r0], {105}
    1628:	694c6765 	stmdbvs	ip, {r0, r2, r5, r6, r8, r9, sl, sp, lr}^
    162c:	65487466 	strbvs	r7, [r8, #-1126]
    1630:	74686769 	strbtvc	r6, [r8], #-1897
    1634:	69614700 	stmdbvs	r1!, {r8, r9, sl, lr}^
    1638:	71655374 	smcvc	21812
    163c:	4c4c5300 	mcrrmi	3, 0, r5, ip, cr0
    1640:	49006765 	stmdbmi	r0, {r0, r2, r5, r6, r8, r9, sl, sp, lr}
	byte LegIndex;

	// First call off to the init...
	BeginServoUpdate();    // Start the update

	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    1644:	5f54534e 	svcpl	0x0054534e
				cTibiaInv[LegIndex] ?
						-TibiaAngle1[LegIndex] : TibiaAngle1[LegIndex]);

	}

}
    1648:	434e5953 	movtmi	r5, #59731	; 0xe953
    164c:	4952575f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    1650:	43004554 	movwmi	r4, #1364	; 0x554
    1654:	616d6d6f 	cmnvs	sp, pc, ror #26
    1658:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
    165c:	75706e49 	ldrbvc	r6, [r0, #-3657]!
    1660:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
#else
word g_wLastVoltage = 0xffff;    // save the last voltage we retrieved...
byte g_bLegVoltage = 0;		// what leg did we last check?
unsigned long g_ulTimeLastBatteryVoltage;
#define VOLTAGE_REPEAT_MAX  3
word GetBatteryVoltage(void) {
    1664:	6c6f7274 	sfmvs	f7, 2, [pc], #-464
	if (interpolating && (g_wLastVoltage != 0xffff)
    1668:	5f72656c 	svcpl	0x0072656c
    166c:	746e6f43 	strbtvc	r6, [lr], #-3907
    1670:	496c6f72 	stmdbmi	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    1674:	7475706e 	ldrbtvc	r7, [r5], #-110
    1678:	736f4300 	cmnvc	pc, #0	; 0x0
    167c:	46003447 	strmi	r3, [r0], -r7, asr #8
    1680:	6563726f 	strbvs	r7, [r3, #-623]!
    1684:	74696147 	strbtvc	r6, [r9], #-327
			&& ((getMillis() - g_ulTimeLastBatteryVoltage)
					< VOLTAGE_MAX_TIME_BETWEEN_CALLS))
		return g_wLastVoltage;
    1688:	70657453 	rsbvc	r7, r5, r3, asr r4

	register u8 bLoopCnt = VOLTAGE_REPEAT_MAX;
	do {
		register word wVoltage = dxl_read_byte(1, AXM_PRESENT_VOLTAGE);
    168c:	00746e43 	rsbseq	r6, r4, r3, asr #28
    1690:	6a644166 	bvs	1911c30 <__Stack_Size+0x1911830>
    1694:	4c747375 	ldclmi	3, cr7, [r4], #-468
		if (wVoltage != 0xffff) {
			g_ulTimeLastBatteryVoltage = getMillis();
    1698:	6f506765 	svcvs	0x00506765
			g_wLastVoltage = wVoltage * 10;
    169c:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^

	register u8 bLoopCnt = VOLTAGE_REPEAT_MAX;
	do {
		register word wVoltage = dxl_read_byte(1, AXM_PRESENT_VOLTAGE);
		if (wVoltage != 0xffff) {
			g_ulTimeLastBatteryVoltage = getMillis();
    16a0:	00736e6f 	rsbseq	r6, r3, pc, ror #28
			g_wLastVoltage = wVoltage * 10;
    16a4:	6f6f6d53 	svcvs	0x006f6d53
		}
	} while (--bLoopCnt);

	return 0;

}
    16a8:	6f436874 	svcvs	0x00436874
    16ac:	6f72746e 	svcvs	0x0072746e
    16b0:	4157006c 	cmpmi	r7, ip, rrx
    16b4:	4f4d4b4c 	svcmi	0x004d4b4c
// ReadMsgs
//==============================================================================

/* process messages coming from Commander
 *  format = 0xFF RIGHT_H RIGHT_V LEFT_H LEFT_V BUTTONS EXT CHECKSUM */
int Commander_ReadMsgs() {
    16b8:	49004544 	stmdbmi	r0, {r2, r6, r8, sl, lr}
	 }
	 #endif
	 */
	//while (CheckZBNewArrive() > 0) {
	while (1) {
		if (zgb_rx_check_arduino() == 1) {
    16bc:	5f54534e 	svcpl	0x0054534e
    16c0:	4b4c5542 	blmi	1316bd0 <__Stack_Size+0x13167d0>

			leftV = (signed char) (zgb_rx_data_right_V_());
    16c4:	4145525f 	cmpmi	r5, pc, asr r2
    16c8:	546c0044 	strbtpl	r0, [ip], #-68
			leftH = (signed char) (zgb_rx_data_right_H_());
    16cc:	57656d69 	strbpl	r6, [r5, -r9, ror #26]!
    16d0:	45746961 	ldrbmi	r6, [r4, #-2401]!
			rightV = (signed char) (zgb_rx_data_left_V_());
    16d4:	4700646e 	strmi	r6, [r0, -lr, ror #8]
    16d8:	53746961 	cmnpl	r4, #1589248	; 0x184000
			rightH = (signed char) (zgb_rx_data_left_H_());
    16dc:	63656c65 	cmnvs	r5, #25856	; 0x6500
    16e0:	61420074 	cmpvs	r2, r4, ror r0
			buttons = zgb_rx_data_buttons();
    16e4:	67654c6c 	strbvs	r4, [r5, -ip, ror #24]!
    16e8:	6300724e 	movwvs	r7, #590	; 0x24e
			ext = zgb_rx_data_extra();
    16ec:	61786f43 	cmnvs	r8, r3, asr #30
    16f0:	3178614d 	cmncc	r8, sp, asr #2

	}

	return 0;

}
    16f4:	534e4900 	movtpl	r4, #59648	; 0xe900
    16f8:	59535f54 	ldmdbpl	r3, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    16fc:	4d455453 	cfstrdmi	mvd5, [r5, #-332]
    1700:	4145525f 	cmpmi	r5, pc, asr r2
    1704:	61470044 	cmpvs	r7, r4, asr #32
    1708:	654c7469 	strbvs	r7, [ip, #-1129]
    170c:	00724e67 	rsbseq	r4, r2, r7, ror #28
    1710:	45555254 	ldrbmi	r5, [r5, #-596]

//==============================================================================
// This is The main code to input function to read inputs from the Commander and then
//process any commands.
//==============================================================================
void CommanderInputController_ControlInput(void) {
    1714:	534e4900 	movtpl	r4, #59648	; 0xe900

	// See if we have a new command available...
	if (Commander_ReadMsgs() > 0) {
    1718:	44525f54 	ldrbmi	r5, [r2], #-3924
    171c:	4745525f 	smlsldmi	r5, r5, pc, r2
    1720:	00524854 	subseq	r4, r2, r4, asr r8
    1724:	65746e69 	ldrbvs	r6, [r4, #-3689]!
		// If we receive a valid message than turn robot on...
		boolean fAdjustLegPositions = false;
		short sLegInitXZAdjust = 0;
		short sLegInitAngleAdjust = 0;

		if (!g_InControlState.fRobotOn) {
    1728:	6c6f7072 	stclvs	0, cr7, [pc], #-456
    172c:	6e697461 	cdpvs	4, 6, cr7, cr9, cr1, {3}
			g_InControlState.fRobotOn = true;
    1730:	44690067 	strbtmi	r0, [r9], #-103
    1734:	61746c65 	cmnvs	r4, r5, ror #24
		}

		// [SWITCH MODES]

		// Cycle through modes...
		if ((buttons & BUT_LT) && !(buttonsPrev & BUT_LT)) {
    1738:	6c676e41 	stclvs	14, cr6, [r7], #-260
    173c:	5f670065 	svcpl	0x00670065
    1740:	6f685366 	svcvs	0x00685366
    1744:	62654477 	rsbvs	r4, r5, #1996488704	; 0x77000000
    1748:	72506775 	subsvc	r6, r0, #30670848	; 0x1d40000
    174c:	74706d6f 	ldrbtvc	r6, [r0], #-3439

			if (++ControlMode >= MODECNT) {
    1750:	534e4900 	movtpl	r4, #59648	; 0xe900
    1754:	59535f54 	ldmdbpl	r3, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    1758:	4d455453 	cfstrdmi	mvd5, [r5, #-332]
    175c:	4952575f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
				ControlMode = WALKMODE;    // cycled back around...
				Buzzed(50, 2000);
    1760:	43004554 	movwmi	r4, #1364	; 0x554
    1764:	616d6d6f 	cmnvs	sp, pc, ror #26
    1768:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
				Buzzed(50, 3000);
    176c:	6e727554 	mrcvs	5, 3, r7, cr2, cr4, {2}
    1770:	6f626f52 	svcvs	0x00626f52

			} else {
				Buzzed(50, 2000);
    1774:	66664f74 	uqsub16vs	r4, r6, r4
    1778:	4c536600 	mrrcmi	6, 0, r6, r3, cr0
    177c:	646c6f48 	strbtvs	r6, [ip], #-3912
			}
			if (ControlMode != SINGLELEGMODE)
    1780:	414b4900 	cmpmi	fp, r0, lsl #18
    1784:	69003431 	stmdbvs	r0, {r0, r4, r5, sl, ip, sp}
				g_InControlState.SelectedLeg = 255;
    1788:	74727173 	ldrbtvc	r7, [r2], #-371
    178c:	70003233 	andvc	r3, r0, r3, lsr r2
    1790:	5365736f 	cmnpl	r5, #-1140850687	; 0xbc000001

		}

		//[Common functions]
		//Switch Balance mode on/off
		if ((buttons & BUT_L4) && !(buttonsPrev & BUT_L4)) {
    1794:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1798:	63656843 	cmnvs	r5, #4390912	; 0x430000
    179c:	7265536b 	rsbvc	r5, r5, #-1409286143	; 0xac000001
    17a0:	6e416f76 	mcrvs	15, 2, r6, cr1, cr6, {3}
    17a4:	42656c67 	rsbmi	r6, r5, #26368	; 0x6700
    17a8:	646e756f 	strbtvs	r7, [lr], #-1391

			g_InControlState.BalanceMode = !g_InControlState.BalanceMode;
    17ac:	4b490073 	blmi	1241980 <__Stack_Size+0x1241580>
    17b0:	74656546 	strbtvc	r6, [r5], #-1350
    17b4:	58736f50 	ldmdapl	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    17b8:	4d77005a 	ldclmi	0, cr0, [r7, #-360]!
    17bc:	5465766f 	strbtpl	r7, [r5], #-1647
			if (g_InControlState.BalanceMode) {
    17c0:	00656d69 	rsbeq	r6, r5, r9, ror #26
				Buzzed(250, 1500);
    17c4:	76657250 	undefined
    17c8:	656c6553 	strbvs	r6, [ip, #-1363]!
			} else {
				Buzzed(100, 2000);
    17cc:	64657463 	strbtvs	r7, [r5], #-1123
    17d0:	0067654c 	rsbeq	r6, r7, ip, asr #10
				Buzzed(50, 4000);
    17d4:	62695463 	rsbvs	r5, r9, #1660944384	; 0x63000000
    17d8:	6e496169 	dvfvsez	f6, f1, #1.0
    17dc:	54770076 	ldrbtpl	r0, [r7], #-118
			}
		}

		//Stand up, sit down
		if ((buttons & BUT_L5) && !(buttonsPrev & BUT_L5)) {
    17e0:	65766172 	ldrbvs	r6, [r6, #-370]!
    17e4:	4b49006c 	blmi	124199c <__Stack_Size+0x124159c>
    17e8:	00343241 	eorseq	r3, r4, r1, asr #4
    17ec:	5f4d554e 	svcpl	0x004d554e
    17f0:	54494147 	strbpl	r4, [r9], #-327
    17f4:	50630053 	rsbpl	r0, r3, r3, asr r0
			if (g_BodyYOffset > 0)
    17f8:	61546e69 	cmpvs	r4, r9, ror #28
    17fc:	00656c62 	rsbeq	r6, r5, r2, ror #24
				g_BodyYOffset = 0;
    1800:	4e415254 	mcrmi	2, 2, r5, cr1, cr4, {2}
    1804:	54414c53 	strbpl	r4, [r1], #-3155
			else
				g_BodyYOffset = 35;
			fAdjustLegPositions = true;
			g_fDynamicLegXZLength = false;
    1808:	444f4d45 	strbmi	r4, [pc], #3397	; 1810 <__Stack_Size+0x1410>
		//Stand up, sit down
		if ((buttons & BUT_L5) && !(buttonsPrev & BUT_L5)) {
			if (g_BodyYOffset > 0)
				g_BodyYOffset = 0;
			else
				g_BodyYOffset = 35;
    180c:	54630045 	strbtpl	r0, [r3], #-69
			fAdjustLegPositions = true;
			g_fDynamicLegXZLength = false;
    1810:	61696269 	cmnvs	r9, r9, ror #4
    1814:	3178614d 	cmncc	r8, sp, asr #2

		// We will use L6 with the Right joystick to control both body offset as well as Speed...
		// We move each pass through this by a percentage of how far we are from center in each direction
		// We get feedback with height by seeing the robot move up and down.  For Speed, I put in sounds
		// which give an idea, but only for those whoes robot has a speaker
		int lx = leftH;
    1818:	69547700 	ldmdbvs	r4, {r8, r9, sl, ip, sp, lr}^
		int ly = leftV;
		if (buttons & BUT_L6) {
    181c:	53616962 	cmnpl	r1, #1605632	; 0x188000

		// We will use L6 with the Right joystick to control both body offset as well as Speed...
		// We move each pass through this by a percentage of how far we are from center in each direction
		// We get feedback with height by seeing the robot move up and down.  For Speed, I put in sounds
		// which give an idea, but only for those whoes robot has a speaker
		int lx = leftH;
    1820:	67005644 	strvs	r5, [r0, -r4, asr #12]
    1824:	7944665f 	stmdbvc	r4, {r0, r1, r2, r3, r4, r6, r9, sl, sp, lr}^
		int ly = leftV;
    1828:	696d616e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, sp, lr}^
    182c:	67654c63 	strbvs	r4, [r5, -r3, ror #24]!
		if (buttons & BUT_L6) {
    1830:	654c5a58 	strbvs	r5, [ip, #-2648]
    1834:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
			// raise or lower the robot on the joystick up /down
			// Maybe should have Min/Max
			int delta = rightV / 25;
    1838:	69546300 	ldmdbvs	r4, {r8, r9, sp, lr}^
    183c:	4c616962 	stclmi	9, cr6, [r1], #-392
    1840:	74676e65 	strbtvc	r6, [r7], #-3685
    1844:	5f670068 	svcpl	0x00670068
    1848:	65486261 	strbvs	r6, [r8, #-609]
    184c:	78614d78 	stmdavc	r1!, {r3, r4, r5, r6, r8, sl, fp, lr}^
			if (delta) {
    1850:	79646f42 	stmdbvc	r4!, {r1, r6, r8, r9, sl, fp, sp, lr}^
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
    1854:	79430059 	stmdbvc	r3, {r0, r3, r4, r6}^
    1858:	54656c63 	strbtpl	r6, [r5], #-3171
    185c:	00656d69 	rsbeq	r6, r5, r9, ror #26
    1860:	474e4953 	smlsldmi	r4, lr, r3, r9
    1864:	454c454c 	strbmi	r4, [ip, #-1356]
    1868:	444f4d47 	strbmi	r4, [pc], #3399	; 1870 <__Stack_Size+0x1470>
    186c:	4c730045 	ldclmi	0, cr0, [r3], #-276
    1870:	6e496765 	cdpvs	7, 4, cr6, cr9, cr5, {3}
    1874:	5a587469 	bpl	161ea20 <__Stack_Size+0x161e620>
			sLegInitAngleAdjust = ly / 8;
			lx = 0;
			ly = 0;

			// Likewise for Speed control
			delta = rightH / 16;   //
    1878:	756a6441 	strbvc	r6, [sl, #-1089]!
    187c:	73007473 	movwvc	r7, #1139	; 0x473
    1880:	564c625f 	undefined
    1884:	70656542 	rsbvc	r6, r5, r2, asr #10
    1888:	00746e43 	rsbseq	r6, r4, r3, asr #28
			if ((delta < 0) && g_InControlState.SpeedControl) {
    188c:	77615f67 	strbvc	r5, [r1, -r7, ror #30]!
    1890:	6c616f47 	stclvs	15, cr6, [r1], #-284
    1894:	6f505841 	svcvs	0x00505841
				if ((word)(-delta) < g_InControlState.SpeedControl)
    1898:	46730073 	undefined
					g_InControlState.SpeedControl += delta;
    189c:	72756d65 	rsbsvc	r6, r5, #6464	; 0x1940
				else
					g_InControlState.SpeedControl = 0;
    18a0:	6c676e41 	stclvs	14, cr6, [r7], #-260
    18a4:	72003165 	andvc	r3, r0, #1073741849	; 0x40000019

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}
			if ((delta > 0) && (g_InControlState.SpeedControl < 2000)) {
    18a8:	69616d65 	stmdbvs	r1!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    18ac:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
    18b0:	646f4200 	strbtvs	r4, [pc], #512	; 18b8 <__Stack_Size+0x14b8>
				g_InControlState.SpeedControl += delta;
				if (g_InControlState.SpeedControl > 2000)
    18b4:	504b4679 	subpl	r4, fp, r9, ror r6
					g_InControlState.SpeedControl = 0;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}
			if ((delta > 0) && (g_InControlState.SpeedControl < 2000)) {
				g_InControlState.SpeedControl += delta;
    18b8:	0058736f 	subseq	r7, r8, pc, ror #6
				if (g_InControlState.SpeedControl > 2000)
					g_InControlState.SpeedControl = 2000;
    18bc:	79646f42 	stmdbvc	r4!, {r1, r6, r8, r9, sl, fp, sp, lr}^
    18c0:	6f504b46 	svcvs	0x00504b46

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
    18c4:	42005973 	andmi	r5, r0, #1884160	; 0x1cc000
    18c8:	4679646f 	ldrbtmi	r6, [r9], -pc, ror #8
    18cc:	736f504b 	cmnvc	pc, #75	; 0x4b
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
				fAdjustLegPositions = true;
			}

			// Also use right Horizontal to manually adjust the initial leg positions.
			sLegInitXZAdjust = lx / 10;        // play with this.
    18d0:	6942005a 	stmdbvs	r2, {r1, r3, r4, r6}^
    18d4:	696f6c6f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
    18d8:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    18dc:	6c6f7274 	sfmvs	f7, 2, [pc], #-464
			sLegInitAngleAdjust = ly / 8;
    18e0:	4572656c 	ldrbmi	r6, [r2, #-1388]!
    18e4:	65735f78 	ldrbvs	r5, [r3, #-3960]!
    18e8:	78654e74 	stmdavc	r5!, {r2, r4, r5, r6, r9, sl, fp, lr}^
    18ec:	736f5074 	cmnvc	pc, #116	; 0x74
					g_InControlState.SpeedControl = 2000;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}

			rightH = 0; // don't walk when adjusting the speed here...
    18f0:	49794265 	ldmdbmi	r9!, {r0, r2, r5, r6, r9, lr}^
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
				fAdjustLegPositions = true;
			}

			// Also use right Horizontal to manually adjust the initial leg positions.
			sLegInitXZAdjust = lx / 10;        // play with this.
    18f4:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
					g_InControlState.SpeedControl = 2000;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}

			rightH = 0; // don't walk when adjusting the speed here...
    18f8:	61726600 	cmnvs	r2, r0, lsl #12
		}

		//[Walk functions]
		if (ControlMode == WALKMODE) {
    18fc:	654c656d 	strbvs	r6, [ip, #-1389]
    1900:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1904:	61727400 	cmnvs	r2, r0, lsl #8

			//Switch gates
			if (((buttons & BUT_R1) && !(buttonsPrev & BUT_R1))
    1908:	7469736e 	strbtvc	r7, [r9], #-878
    190c:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    1910:	66696400 	strbtvs	r6, [r9], -r0, lsl #8
    1914:	57660066 	strbpl	r0, [r6, -r6, rrx]!
    1918:	00746961 	rsbseq	r6, r4, r1, ror #18
    191c:	6c6f6942 	stclvs	9, cr6, [pc], #-264
    1920:	4364696f 	cmnmi	r4, #1818624	; 0x1bc000
    1924:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    1928:	656c6c6f 	strbvs	r6, [ip, #-3183]!
    192c:	5f784572 	svcpl	0x00784572
    1930:	49746573 	ldmdbmi	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    1934:	69420064 	stmdbvs	r2, {r2, r5, r6}^
    1938:	696f6c6f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
    193c:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    1940:	6c6f7274 	sfmvs	f7, 2, [pc], #-464
    1944:	4572656c 	ldrbmi	r6, [r2, #-1388]!
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
    1948:	65675f78 	strbvs	r5, [r7, #-3960]!
					&& abs(g_InControlState.TravelLength.x) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
    194c:	72754374 	rsbsvc	r4, r5, #-805306367	; 0xd0000001
    1950:	65736f50 	ldrbvs	r6, [r3, #-3920]!
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
    1954:	6f694200 	svcvs	0x00694200
					&& abs(g_InControlState.TravelLength.x) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
    1958:	64696f6c 	strbtvs	r6, [r9], #-3948
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
					Buzzed(50, 2000);
    195c:	7465535f 	strbtvc	r5, [r5], #-863
    1960:	74007075 	strvc	r7, [r0], #-117
    1964:	00706d65 	rsbseq	r6, r0, r5, ror #26
				} else {
					Buzzed(50, 2000);
    1968:	6c6f6942 	stclvs	9, cr6, [pc], #-264
    196c:	4364696f 	cmnmi	r4, #1818624	; 0x1bc000
    1970:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
					Buzzed(50, 2250);
    1974:	656c6c6f 	strbvs	r6, [ip, #-3183]!
    1978:	5f784572 	svcpl	0x00784572
					g_InControlState.GaitType = 0;
    197c:	4e746567 	cdpmi	5, 7, cr6, cr4, cr7, {3}
    1980:	50747865 	rsbspl	r7, r4, r5, ror #16
}

void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {
    1984:	0065736f 	rsbeq	r7, r5, pc, ror #6
    1988:	6e617274 	mcrvs	2, 3, r7, cr1, cr4, {3}
    198c:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^

		g_InControlState.gaitCur = APG[g_InControlState.GaitType];
    1990:	745f6e6f 	ldrbvc	r6, [pc], #3695	; 1998 <__Stack_Size+0x1598>
    1994:	65707300 	ldrbvs	r7, [r0, #-768]!
    1998:	005f6465 	subseq	r6, pc, r5, ror #8
    199c:	6c6f6942 	stclvs	9, cr6, [pc], #-264
    19a0:	4364696f 	cmnmi	r4, #1818624	; 0x1bc000
				}
				GaitSelect();
			}

			//Double leg lift height
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    19a4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    19a8:	656c6c6f 	strbvs	r6, [ip, #-3183]!
    19ac:	5f784572 	svcpl	0x00784572
    19b0:	74697277 	strbtvc	r7, [r9], #-631
    19b4:	736f5065 	cmnvc	pc, #101	; 0x65
				Buzzed(50, 2000);
    19b8:	50410065 	subpl	r0, r1, r5, rrx
    19bc:	72732f50 	rsbsvc	r2, r3, #320	; 0x140
				HeightSpeedMode = (HeightSpeedMode + 1) & 0x3; // wrap around mode
    19c0:	69422f63 	stmdbvs	r2, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    19c4:	696f6c6f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
    19c8:	2e784564 	cdpcs	5, 7, cr4, cr8, cr4, {3}
    19cc:	6f700063 	svcvs	0x00700063
				DoubleTravelOn = HeightSpeedMode & 0x1;
    19d0:	42006573 	andmi	r6, r0, #482344960	; 0x1cc00000
    19d4:	6f6c6f69 	svcvs	0x006c6f69
				if (HeightSpeedMode & 0x2)
    19d8:	6f436469 	svcvs	0x00436469
    19dc:	6f72746e 	svcvs	0x0072746e
					g_InControlState.LegLiftHeight = 80;
    19e0:	72656c6c 	rsbvc	r6, r5, #27648	; 0x6c00
    19e4:	6c5f7845 	mrrcvs	8, 4, r7, pc, cr5
				else
					g_InControlState.LegLiftHeight = 50;
			}

			// Switch between Walk method 1 && Walk method 2
			if ((buttons & BUT_R2) && !(buttonsPrev & BUT_R2)) {
    19e8:	5064616f 	rsbpl	r6, r4, pc, ror #2
    19ec:	0065736f 	rsbeq	r7, r5, pc, ror #6
    19f0:	6c6f6942 	stclvs	9, cr6, [pc], #-264
    19f4:	4364696f 	cmnmi	r4, #1818624	; 0x1bc000
    19f8:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0

				if ((++bJoystickWalkMode) > 1)
    19fc:	656c6c6f 	strbvs	r6, [ip, #-3183]!
    1a00:	5f784572 	svcpl	0x00784572
    1a04:	4e746573 	mrcmi	5, 3, r6, cr4, cr3, {3}

					bJoystickWalkMode = 0;
				Buzzed(50, 2000 + bJoystickWalkMode * 250);
    1a08:	50747865 	rsbspl	r7, r4, r5, ror #16
			// Switch between Walk method 1 && Walk method 2
			if ((buttons & BUT_R2) && !(buttonsPrev & BUT_R2)) {

				if ((++bJoystickWalkMode) > 1)

					bJoystickWalkMode = 0;
    1a0c:	0065736f 	rsbeq	r7, r5, pc, ror #6
				Buzzed(50, 2000 + bJoystickWalkMode * 250);
    1a10:	75716573 	ldrbvc	r6, [r1, #-1395]!
    1a14:	65636e65 	strbvs	r6, [r3, #-3685]!
    1a18:	6f694200 	svcvs	0x00694200
    1a1c:	64696f6c 	strbtvs	r6, [r9], #-3948
			}

			//Walking
			switch (bJoystickWalkMode) {
    1a20:	746e6f43 	strbtvc	r6, [lr], #-3907
    1a24:	6c6c6f72 	stclvs	15, cr6, [ip], #-456
    1a28:	78457265 	stmdavc	r5, {r0, r2, r5, r6, r9, ip, sp, lr}^
			case 0:
				g_InControlState.TravelLength.x = -lx;
    1a2c:	6165725f 	cmnvs	r5, pc, asr r2
    1a30:	736f5064 	cmnvc	pc, #100	; 0x64
    1a34:	656e0065 	strbvs	r0, [lr, #-101]!
				g_InControlState.TravelLength.z = -ly;
    1a38:	6f707478 	svcvs	0x00707478
				g_InControlState.TravelLength.y = -(rightH) / 4; //Right Stick Left/Right
				break;
			case 1:
				g_InControlState.TravelLength.z = (rightV); //Right Stick Up/Down
    1a3c:	005f6573 	subseq	r6, pc, r3, ror r5
    1a40:	656d6974 	strbvs	r6, [sp, #-2420]!
    1a44:	6f694200 	svcvs	0x00694200
				g_InControlState.TravelLength.y = -(rightH) / 4; //Right Stick Left/Right
    1a48:	64696f6c 	strbtvs	r6, [r9], #-3948
    1a4c:	746e6f43 	strbtvc	r6, [lr], #-3907
    1a50:	6c6c6f72 	stclvs	15, cr6, [ip], #-456
    1a54:	78457265 	stmdavc	r5, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1a58:	7465675f 	strbtvc	r6, [r5], #-1887
    1a5c:	69006449 	stmdbvs	r0, {r0, r3, r6, sl, sp, lr}
				break;

			}

			if (!DoubleTravelOn) {  //(Double travel length)
    1a60:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
				g_InControlState.TravelLength.x =
    1a64:	6f694200 	svcvs	0x00694200
    1a68:	64696f6c 	strbtvs	r6, [r9], #-3948
    1a6c:	746e6f43 	strbtvc	r6, [lr], #-3907
						g_InControlState.TravelLength.x / 2;
				g_InControlState.TravelLength.z =
    1a70:	6c6c6f72 	stclvs	15, cr6, [ip], #-456
    1a74:	78457265 	stmdavc	r5, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1a78:	746e695f 	strbtvc	r6, [lr], #-2399
			}

		}

		//[Translate functions]
		g_BodyYShift = 0;
    1a7c:	6f707265 	svcvs	0x00707265
    1a80:	6574616c 	ldrbvs	r6, [r4, #-364]!
		if (ControlMode == TRANSLATEMODE) {
    1a84:	75746553 	ldrbvc	r6, [r4, #-1363]!
    1a88:	75720070 	ldrbvc	r0, [r2, #-112]!

		      g_InControlState.BodyPos.x =  SmoothControl(((lx)*2/3), g_InControlState.BodyPos.x, SmDiv);
    1a8c:	6e696e6e 	cdpvs	14, 6, cr6, cr9, cr14, {3}
    1a90:	71655367 	cmnvc	r5, r7, ror #6
    1a94:	78656e00 	stmdavc	r5!, {r9, sl, fp, sp, lr}^
    1a98:	61726674 	cmnvs	r2, r4, ror r6
    1a9c:	005f656d 	subseq	r6, pc, sp, ror #10
    1aa0:	76726573 	undefined
    1aa4:	6e635f6f 	cdpvs	15, 6, cr5, cr3, cr15, {3}
    1aa8:	69420074 	stmdbvs	r2, {r2, r4, r5, r6}^
		      g_InControlState.BodyPos.z =  SmoothControl(((ly)*2/3), g_InControlState.BodyPos.z, SmDiv);
    1aac:	696f6c6f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
    1ab0:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    1ab4:	6c6f7274 	sfmvs	f7, 2, [pc], #-464
    1ab8:	4572656c 	ldrbmi	r6, [r2, #-1388]!
    1abc:	69420078 	stmdbvs	r2, {r3, r4, r5, r6}^
		      g_InControlState.BodyRot1.y = SmoothControl(((rightH)*2), g_InControlState.BodyRot1.y, SmDiv);
    1ac0:	696f6c6f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
		//[Translate functions]
		g_BodyYShift = 0;
		if (ControlMode == TRANSLATEMODE) {

		      g_InControlState.BodyPos.x =  SmoothControl(((lx)*2/3), g_InControlState.BodyPos.x, SmDiv);
		      g_InControlState.BodyPos.z =  SmoothControl(((ly)*2/3), g_InControlState.BodyPos.z, SmDiv);
    1ac4:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
		      g_InControlState.BodyRot1.y = SmoothControl(((rightH)*2), g_InControlState.BodyRot1.y, SmDiv);
    1ac8:	6c6f7274 	sfmvs	f7, 2, [pc], #-464
    1acc:	4572656c 	ldrbmi	r6, [r2, #-1388]!
    1ad0:	6e695f78 	mcrvs	15, 3, r5, cr9, cr8, {3}
    1ad4:	70726574 	rsbsvc	r6, r2, r4, ror r5


			//      g_InControlState.BodyPos.x = (lx)/2;
			//      g_InControlState.BodyPos.z = -(ly)/3;
			//      g_InControlState.BodyRot1.y = (rightH)*2;
			g_BodyYShift = (-(rightV) / 2);
    1ad8:	74616c6f 	strbtvc	r6, [r1], #-3183
    1adc:	65745365 	ldrbvs	r5, [r4, #-869]!
    1ae0:	6f630070 	svcvs	0x00630070
    1ae4:	656c706d 	strbvs	r7, [ip, #-109]!
    1ae8:	66006574 	undefined
    1aec:	656d6172 	strbvs	r6, [sp, #-370]!
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
    1af0:	72500073 	subsvc	r0, r0, #115	; 0x73
			g_InControlState.BodyRot1.x = (ly);
			g_InControlState.BodyRot1.y = (rightH) * 2;
    1af4:	75746e69 	ldrbvc	r6, [r4, #-3689]!
    1af8:	00683631 	rsbeq	r3, r8, r1, lsr r6
			g_InControlState.BodyRot1.z = (lx);
			g_BodyYShift = (-(rightV) / 2);
    1afc:	74614477 	strbtvc	r4, [r1], #-1143
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
			g_InControlState.BodyRot1.x = (ly);
			g_InControlState.BodyRot1.y = (rightH) * 2;
    1b00:	78540061 	ldmdavc	r4, {r0, r5, r6}^
			g_BodyYShift = (-(rightV) / 2);
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
			g_InControlState.BodyRot1.x = (ly);
    1b04:	65445f44 	strbvs	r5, [r4, #-3908]
			g_InControlState.BodyRot1.y = (rightH) * 2;
			g_InControlState.BodyRot1.z = (lx);
			g_BodyYShift = (-(rightV) / 2);
    1b08:	33535f63 	cmpcc	r3, #396	; 0x18c
    1b0c:	63700032 	cmnvs	r0, #50	; 0x32
    1b10:	6e695f75 	mcrvs	15, 3, r5, cr9, cr5, {3}
    1b14:	61697469 	cmnvs	r9, r9, ror #8
    1b18:	657a696c 	ldrbvs	r6, [sl, #-2412]!
		}

		//[Single leg functions]
#ifdef OPT_SINGLELEG
		if (ControlMode == SINGLELEGMODE) {
    1b1c:	52524500 	subspl	r4, r2, #0	; 0x0

			//Switch leg for single leg control
			if ((buttons & BUT_R1) && !(buttonsPrev & BUT_R1)) {
    1b20:	5f544942 	svcpl	0x00544942
    1b24:	43454843 	movtmi	r4, #22595	; 0x5843
    1b28:	4d55534b 	ldclmi	3, cr5, [r5, #-300]
    1b2c:	52524500 	subspl	r4, r2, #0	; 0x0
    1b30:	5f544942 	svcpl	0x00544942
				Buzzed(50,2000);
    1b34:	5245564f 	subpl	r5, r5, #82837504	; 0x4f00000
    1b38:	54414548 	strbpl	r4, [r1], #-1352
    1b3c:	6f436200 	svcvs	0x00436200
				if (g_InControlState.SelectedLeg < (CNT_LEGS-1)) {
    1b40:	00746e75 	rsbseq	r6, r4, r5, ror lr
    1b44:	5f756370 	svcpl	0x00756370
					g_InControlState.SelectedLeg = g_InControlState.SelectedLeg + 1;
				} else {
					g_InControlState.SelectedLeg = 0;
    1b48:	6d726574 	cfldr64vs	mvdx6, [r2, #-464]!
		if (ControlMode == SINGLELEGMODE) {

			//Switch leg for single leg control
			if ((buttons & BUT_R1) && !(buttonsPrev & BUT_R1)) {
				Buzzed(50,2000);
				if (g_InControlState.SelectedLeg < (CNT_LEGS-1)) {
    1b4c:	74616e69 	strbtvc	r6, [r1], #-3689
					g_InControlState.SelectedLeg = g_InControlState.SelectedLeg + 1;
    1b50:	78540065 	ldmdavc	r4, {r0, r2, r5, r6}^
			   g_InControlState.SLLeg.x= (signed char)((int)((int)lx+128)/2); //Left Stick Right/Left
      		   g_InControlState.SLLeg.y= (signed char)((int)((int)rightV+128)/10); //Right Stick Up/Down
		       g_InControlState.SLLeg.z = (signed char)((int)((int)ly+128)/2); //Left Stick Up/Down

#else
			g_InControlState.SLLeg.x = lx; //Left Stick Right/Left
    1b54:	65445f44 	strbvs	r5, [r4, #-3908]
			g_InControlState.SLLeg.y = rightV / 3 - 20;//Right Stick Up/Down
    1b58:	33555f63 	cmpcc	r5, #396	; 0x18c
    1b5c:	50620032 	rsbpl	r0, r2, r2, lsr r0
    1b60:	746e6972 	strbtvc	r6, [lr], #-2418
    1b64:	50006465 	andpl	r6, r0, r5, ror #8
    1b68:	746e6972 	strbtvc	r6, [lr], #-2418
			g_InControlState.SLLeg.z = ly;//Left Stick Up/Down

#endif
			// Hold single leg in place
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    1b6c:	6f727245 	svcvs	0x00727245
    1b70:	646f4372 	strbtvs	r4, [pc], #882	; 1b78 <__Stack_Size+0x1778>
    1b74:	65470065 	strbvs	r0, [r7, #-101]
      		   g_InControlState.SLLeg.y= (signed char)((int)((int)rightV+128)/10); //Right Stick Up/Down
		       g_InControlState.SLLeg.z = (signed char)((int)((int)ly+128)/2); //Left Stick Up/Down

#else
			g_InControlState.SLLeg.x = lx; //Left Stick Right/Left
			g_InControlState.SLLeg.y = rightV / 3 - 20;//Right Stick Up/Down
    1b78:	61684374 	smcvs	33844
			g_InControlState.SLLeg.z = ly;//Left Stick Up/Down

#endif
			// Hold single leg in place
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    1b7c:	4e6c0072 	mcrmi	0, 3, r0, cr12, cr2, {3}
    1b80:	54006d75 	strpl	r6, [r0], #-3445
    1b84:	445f4478 	ldrbmi	r4, [pc], #1144	; 1b8c <__Stack_Size+0x178c>
				Buzzed(50,2000);
    1b88:	555f6365 	ldrbpl	r6, [pc, #-869]	; 182b <__Stack_Size+0x142b>
    1b8c:	73003631 	movwvc	r3, #1585	; 0x631
				g_InControlState.fSLHold = !g_InControlState.fSLHold;
    1b90:	675f6474 	undefined
    1b94:	74537465 	ldrbvc	r7, [r3], #-1125
    1b98:	676e6972 	undefined
    1b9c:	52524500 	subspl	r4, r2, #0	; 0x0
			}
		}
#endif

		//Calculate walking time delay
		g_InControlState.InputTimeDelay = 128- max(max(abs(lx), abs(ly)), abs(rightH));
    1ba0:	5f544942 	svcpl	0x00544942
    1ba4:	4c474e41 	mcrrmi	14, 4, r4, r7, cr1
    1ba8:	52450045 	subpl	r0, r5, #69	; 0x45
    1bac:	54494252 	strbpl	r4, [r9], #-594
    1bb0:	534e495f 	movtpl	r4, #59743	; 0xe95f
    1bb4:	43555254 	cmpmi	r5, #1073741829	; 0x40000005
    1bb8:	4e4f4954 	mcrmi	9, 2, r4, cr15, cr4, {2}
    1bbc:	6d546c00 	ldclvs	12, cr6, [r4]
    1bc0:	74730070 	ldrbtvc	r0, [r3], #-112
    1bc4:	75705f64 	ldrbvc	r5, [r0, #-3940]!
    1bc8:	61686374 	smcvs	34356
    1bcc:	72500072 	subsvc	r0, r0, #114	; 0x72
    1bd0:	53746e69 	cmnpl	r4, #1680	; 0x690

		//Calculate g_InControlState.BodyPos.y
		g_InControlState.BodyPos.y = max(g_BodyYOffset + g_BodyYShift, 0);
    1bd4:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    1bd8:	72500067 	subsvc	r0, r0, #103	; 0x67
    1bdc:	73746e69 	cmnvc	r4, #1680	; 0x690
    1be0:	00643233 	rsbeq	r3, r4, r3, lsr r2
    1be4:	6e6f4c6c 	cdpvs	12, 6, cr4, cr15, cr12, {3}
    1be8:	78540067 	ldmdavc	r4, {r0, r1, r2, r5, r6}^

		if (sLegInitXZAdjust || sLegInitAngleAdjust) {
    1bec:	65445f44 	strbvs	r5, [r4, #-3908]
    1bf0:	31535f63 	cmpcc	r3, r3, ror #30
			// User asked for manual leg adjustment - only do when we have finished any previous adjustment

			if (!g_InControlState.ForceGaitStepCnt) {
    1bf4:	61620036 	cmnvs	r2, r6, lsr r0
				if (sLegInitXZAdjust)
    1bf8:	61726475 	cmnvs	r2, r5, ror r4
					g_fDynamicLegXZLength = true;
    1bfc:	45006574 	strmi	r6, [r0, #-1396]
    1c00:	49425252 	stmdbmi	r2, {r1, r4, r6, r9, ip, lr}^

				sLegInitXZAdjust += GetLegsXZLength(); // Add on current length to our adjustment...
    1c04:	4f565f54 	svcmi	0x00565f54
    1c08:	4741544c 	strbmi	r5, [r1, -ip, asr #8]
				// Handle maybe change angles...
				if (sLegInitAngleAdjust)
					RotateLegInitAngles(sLegInitAngleAdjust);

				// Give system time to process previous calls
				AdjustLegPositions(sLegInitXZAdjust);
    1c0c:	68430045 	stmdavs	r3, {r0, r2, r6}^
			}
		}

		if (fAdjustLegPositions && !g_fDynamicLegXZLength)
    1c10:	506b6365 	rsbpl	r6, fp, r5, ror #6
    1c14:	77654e43 	strbvc	r4, [r5, -r3, asr #28]!
    1c18:	69727241 	ldmdbvs	r2!, {r0, r6, r9, ip, sp, lr}^
			AdjustLegPositionsToBodyHeight(); // Put main workings into main program file
    1c1c:	50006576 	andpl	r6, r0, r6, ror r5
		// Save away the buttons state as to not process the same press twice.
		buttonsPrev = buttons;
    1c20:	746e6972 	strbtvc	r6, [lr], #-2418
    1c24:	72616843 	rsbvc	r6, r1, #4390912	; 0x430000
		extPrev = ext;
    1c28:	5c3a4300 	ldcpl	3, cr4, [sl]
    1c2c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
		g_ulLastMsgTime = getMillis();
    1c30:	6e695c73 	mcrvs	12, 3, r5, cr9, cr3, {3}
    1c34:	6c617473 	cfstrdvs	mvd7, [r1], #-460
	} else {
		// We did not receive a valid packet.  check for a timeout to see if we should turn robot off...
		if (g_InControlState.fRobotOn) {
    1c38:	72705c6c 	rsbsvc	r5, r0, #27648	; 0x6c00
			if ((getMillis() - g_ulLastMsgTime) > ARBOTIX_TO)
    1c3c:	6b656a6f 	blvs	195c600 <__Stack_Size+0x195c200>
    1c40:	68545c74 	ldmdavs	r4, {r2, r4, r5, r6, sl, fp, ip, lr}^
    1c44:	73697365 	cmnvc	r9, #-1811939327	; 0x94000001
    1c48:	6f69425f 	svcvs	0x0069425f
    1c4c:	64696f6c 	strbtvs	r6, [r9], #-3948
				CommanderTurnRobotOff();
    1c50:	6d75685c 	ldclvs	8, cr6, [r5, #-368]!
		}
	}

}
    1c54:	696f6e61 	stmdbvs	pc!, {r0, r5, r6, r9, sl, fp, sp, lr}^
    1c58:	5f635f64 	svcpl	0x00635f64
    1c5c:	746e6f63 	strbtvc	r6, [lr], #-3939
    1c60:	6c6c6f72 	stclvs	15, cr6, [ip], #-456
    1c64:	77007265 	strvc	r7, [r0, -r5, ror #4]
    1c68:	69676944 	stmdbvs	r7!, {r2, r6, r8, fp, sp, lr}^
    1c6c:	4e770074 	mrcmi	0, 3, r0, cr7, cr4, {3}
    1c70:	50006d75 	andpl	r6, r0, r5, ror sp
    1c74:	746e6972 	strbtvc	r6, [lr], #-2418
    1c78:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!
    1c7c:	74617453 	strbtvc	r7, [r1], #-1107
    1c80:	6c007375 	stcvs	3, cr7, [r0], {117}
    1c84:	536d754e 	cmnpl	sp, #327155712	; 0x13800000
    1c88:	64747300 	ldrbtvs	r7, [r4], #-768
    1c8c:	7475705f 	ldrbtvc	r7, [r5], #-95
    1c90:	78540073 	ldmdavc	r4, {r0, r1, r4, r5, r6}^
    1c94:	65445f44 	strbvs	r5, [r4, #-3908]
    1c98:	38535f63 	ldmdacc	r3, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    1c9c:	65546200 	ldrbvs	r6, [r4, #-512]
    1ca0:	6200706d 	andvs	r7, r0, #109	; 0x6d
    1ca4:	006d754e 	rsbeq	r7, sp, lr, asr #10
    1ca8:	5f647473 	svcpl	0x00647473
    1cac:	63746567 	cmnvs	r4, #432013312	; 0x19c00000

extern void setupPhoenix(void);
extern void readSensors(void);


int Big_main(void) {
    1cb0:	00726168 	rsbseq	r6, r2, r8, ror #2

	// Must include this line in all programs using "cm530.h/.c"
	SysInit();
    1cb4:	6769446c 	strbvs	r4, [r9, -ip, ror #8]!
	setupPhoenix();
    1cb8:	50007469 	andpl	r7, r0, r9, ror #8
			TotalYBal1 = 0;
			TotalZBal1 = 0;

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1cbc:	746e6972 	strbtvc	r6, [lr], #-2418

	while (1){
		while (1) {
			//Start time
			unsigned long lTimeWaitEnd;
			lTimerStart = getMillis();
    1cc0:	64323375 	ldrtvs	r3, [r2], #-885
    1cc4:	69725000 	ldmdbvs	r2!, {ip, lr}^
    1cc8:	3875746e 	ldmdacc	r5!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
#ifdef MILLIS
			PrintString("Barebones lTimerStart ");
			Printu32d(lTimerStart);
			PrintString("\n");
#endif
			DoBackgroundProcess();
    1ccc:	50410068 	subpl	r0, r1, r8, rrx
			//Read input
			CheckVoltage();        // check our voltages...
    1cd0:	72732f50 	rsbsvc	r2, r3, #320	; 0x140
			if (!g_fLowVoltageShutdown) {
    1cd4:	65732f63 	ldrbvs	r2, [r3, #-3939]!
    1cd8:	6c616972 	stclvs	9, cr6, [r1], #-456
				CommanderInputController_ControlInput();
    1cdc:	5400632e 	strpl	r6, [r0], #-814
			}
			WriteOutputs();        // Write Outputs
			//Single leg control
			SingleLegControl();
    1ce0:	445f4478 	ldrbmi	r4, [pc], #1144	; 1ce8 <__Stack_Size+0x18e8>
			DoBackgroundProcess();
    1ce4:	555f6365 	ldrbpl	r6, [pc, #-869]	; 1987 <__Stack_Size+0x1587>

			//Gait
			GaitSeq();
    1ce8:	78520038 	ldmdavc	r2, {r3, r4, r5}^

			DoBackgroundProcess();
    1cec:	74794244 	ldrbtvc	r4, [r9], #-580

			//Balance calculations
			TotalTransX = 0;     //reset values used for calculation of balance
    1cf0:	43505f65 	cmpmi	r0, #404	; 0x194
    1cf4:	694d6200 	stmdbvs	sp, {r9, sp, lr}^
			TotalTransZ = 0;
    1cf8:	0073756e 	rsbseq	r7, r3, lr, ror #10
			TotalTransY = 0;
    1cfc:	706d5477 	rsbvc	r5, sp, r7, ror r4
    1d00:	52524500 	subspl	r4, r2, #0	; 0x0
			TotalXBal1 = 0;
    1d04:	5f544942 	svcpl	0x00544942
			TotalYBal1 = 0;
    1d08:	474e4152 	smlsldmi	r4, lr, r2, r1
    1d0c:	54620045 	strbtpl	r0, [r2], #-69
			TotalZBal1 = 0;
    1d10:	6200706d 	andvs	r7, r0, #109	; 0x6d

			if (g_InControlState.BalanceMode) {
    1d14:	65747942 	ldrbvs	r7, [r4, #-2370]!
    1d18:	52524500 	subspl	r4, r2, #0	; 0x0
    1d1c:	5f544942 	svcpl	0x00544942

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1d20:	5245564f 	subpl	r5, r5, #82837504	; 0x4f00000

					DoBackgroundProcess();
					BalCalcOneLeg(-LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d24:	44414f4c 	strbmi	r4, [r1], #-3916
    1d28:	6c786400 	cfldrdvs	mvd6, [r8]
    1d2c:	7465735f 	strbtvc	r7, [r5], #-863

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs

					DoBackgroundProcess();
    1d30:	7078745f 	rsbsvc	r7, r8, pc, asr r4
					BalCalcOneLeg(-LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d34:	656b6361 	strbvs	r6, [fp, #-865]!
    1d38:	61705f74 	cmnvs	r0, r4, ror pc
    1d3c:	656d6172 	strbvs	r6, [sp, #-370]!
    1d40:	00726574 	rsbseq	r6, r2, r4, ror r5
    1d44:	5f4c5844 	svcpl	0x004c5844
    1d48:	5f544b50 	svcpl	0x00544b50
    1d4c:	004e454c 	subeq	r4, lr, ip, asr #10
    1d50:	5f6c7864 	svcpl	0x006c7864
    1d54:	64616572 	strbtvs	r6, [r1], #-1394
    1d58:	726f775f 	rsbvc	r7, pc, #24903680	; 0x17c0000
    1d5c:	62670064 	rsbvs	r0, r7, #100	; 0x64
    1d60:	74736e49 	ldrbtvc	r6, [r3], #-3657
    1d64:	74637572 	strbtvc	r7, [r3], #-1394
    1d68:	506e6f69 	rsbpl	r6, lr, r9, ror #30
    1d6c:	656b6361 	strbvs	r6, [fp, #-865]!
			TotalYBal1 = 0;
			TotalZBal1 = 0;

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1d70:	78640074 	stmdavc	r4!, {r2, r4, r5, r6}^
    1d74:	78745f6c 	ldmdavc	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1d78:	6361705f 	cmnvs	r1, #95	; 0x5f
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
    1d7c:	0074656b 	rsbseq	r6, r4, fp, ror #10
    1d80:	5f6c7864 	svcpl	0x006c7864
					DoBackgroundProcess();
					BalCalcOneLeg(LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d84:	6d726574 	cfldr64vs	mvdx6, [r2, #-464]!
    1d88:	74616e69 	strbtvc	r6, [r1], #-3689
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
					DoBackgroundProcess();
    1d8c:	78640065 	stmdavc	r4!, {r0, r2, r5, r6}^
					BalCalcOneLeg(LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d90:	65675f6c 	strbvs	r5, [r7, #-3948]!
    1d94:	78725f74 	ldmdavc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1d98:	6b636170 	blvs	18da360 <__Stack_Size+0x18d9f60>
    1d9c:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}
    1da0:	74676e65 	strbtvc	r6, [r7], #-3685
    1da4:	58440068 	stmdapl	r4, {r3, r5, r6}^
    1da8:	4b505f4c 	blmi	1419ae0 <__Stack_Size+0x14196e0>
    1dac:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    1db0:	64005453 	strvs	r5, [r0], #-1107
    1db4:	675f6c78 	undefined
    1db8:	725f7465 	subsvc	r7, pc, #1694498816	; 0x65000000
    1dbc:	6c757365 	ldclvs	3, cr7, [r5], #-404
    1dc0:	78640074 	stmdavc	r4!, {r2, r4, r5, r6}^
    1dc4:	65735f6c 	ldrbvs	r5, [r3, #-3948]!
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
    1dc8:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1dcc:	6b636170 	blvs	18da394 <__Stack_Size+0x18d9f94>
    1dd0:	695f7465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^
							LegPosZ[LegIndex] + GaitPosZ[LegIndex],
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}
				BalanceBody();
    1dd4:	58440064 	stmdapl	r4, {r2, r5, r6}^
			}

			//Reset IKsolution indicators
			IKSolution = 0;
    1dd8:	4b505f4c 	blmi	1419b10 <__Stack_Size+0x1419710>
    1ddc:	41505f54 	cmpmi	r0, r4, asr pc
			IKSolutionWarning = 0;
			IKSolutionError = 0;

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
    1de0:	64004152 	strvs	r4, [r0], #-338
			}

			//Reset IKsolution indicators
			IKSolution = 0;
			IKSolutionWarning = 0;
			IKSolutionError = 0;
    1de4:	675f6c78 	undefined
    1de8:	725f7465 	subsvc	r7, pc, #1694498816	; 0x65000000

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
				DoBackgroundProcess();
    1dec:	63617078 	cmnvs	r1, #120	; 0x78
				BodyFK(
    1df0:	5f74656b 	svcpl	0x0074656b
    1df4:	6f727265 	svcvs	0x00727265
    1df8:	72650072 	rsbvc	r0, r5, #114	; 0x72
    1dfc:	74696272 	strbtvc	r6, [r9], #-626
    1e00:	52626700 	rsbpl	r6, r2, #0	; 0x0
    1e04:	74654778 	strbtvc	r4, [r5], #-1912
    1e08:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    1e0c:	44006874 	strmi	r6, [r0], #-2164
    1e10:	505f4c58 	subspl	r4, pc, r8, asr ip
    1e14:	495f544b 	ldmdbmi	pc, {r0, r1, r3, r6, sl, ip, lr}^
    1e18:	62670044 	rsbvs	r0, r7, #68	; 0x44
    1e1c:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!
    1e20:	74617453 	strbtvc	r7, [r1], #-1107
    1e24:	64007375 	strvs	r7, [r0], #-885
    1e28:	705f6c78 	subsvc	r6, pc, r8, ror ip
    1e2c:	00676e69 	rsbeq	r6, r7, r9, ror #28
    1e30:	5f6c7864 	svcpl	0x006c7864
    1e34:	5f746573 	svcpl	0x00746573
    1e38:	61707874 	cmnvs	r0, r4, ror r8
    1e3c:	74656b63 	strbtvc	r6, [r5], #-2915
    1e40:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
    1e44:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    1e48:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1e4c:	52626700 	rsbpl	r6, r2, #0	; 0x0
						+ GaitPosZ[LegIndex] - TotalTransZ,
						LegPosY[LegIndex] + g_InControlState.BodyPos.y
						+ GaitPosY[LegIndex] - TotalTransY,
						GaitRotY[LegIndex], LegIndex);

				LegIK(
    1e50:	63615078 	cmnvs	r1, #120	; 0x78
    1e54:	4c74656b 	cfldr64mi	mvdx6, [r4], #-428
    1e58:	74676e65 	strbtvc	r6, [r7], #-3685
    1e5c:	78640068 	stmdavc	r4!, {r3, r5, r6}^
    1e60:	65735f6c 	ldrbvs	r5, [r3, #-3948]!
    1e64:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1e68:	6b636170 	blvs	18da430 <__Stack_Size+0x18da030>
    1e6c:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}
    1e70:	74676e65 	strbtvc	r6, [r7], #-3685
    1e74:	65520068 	ldrbvs	r0, [r2, #-104]
    1e78:	78546c61 	ldmdavc	r4, {r0, r5, r6, sl, fp, sp, lr}^
    1e7c:	426d754e 	rsbmi	r7, sp, #327155712	; 0x13800000
    1e80:	00657479 	rsbeq	r7, r5, r9, ror r4
    1e84:	6165526e 	cmnvs	r5, lr, ror #4
    1e88:	78640064 	stmdavc	r4!, {r2, r5, r6}^
    1e8c:	65675f6c 	strbvs	r5, [r7, #-3948]!
    1e90:	78725f74 	ldmdavc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1e94:	6b636170 	blvs	18da45c <__Stack_Size+0x18da05c>
    1e98:	705f7465 	subsvc	r7, pc, r5, ror #8
    1e9c:	6d617261 	sfmvs	f7, 2, [r1, #-388]!
    1ea0:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
    1ea4:	6c786400 	cfldrdvs	mvd6, [r8]
    1ea8:	6b616d5f 	blvs	185d42c <__Stack_Size+0x185d02c>
    1eac:	726f7765 	rsbvc	r7, pc, #26476544	; 0x1940000
    1eb0:	78640064 	stmdavc	r4!, {r2, r5, r6}^
    1eb4:	65675f6c 	strbvs	r5, [r7, #-3948]!
    1eb8:	69685f74 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1ebc:	79626867 	stmdbvc	r2!, {r0, r1, r2, r5, r6, fp, sp, lr}^
    1ec0:	64006574 	strvs	r6, [r0], #-1396
			IKSolutionWarning = 0;
			IKSolutionError = 0;

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
    1ec4:	725f6c78 	subsvc	r6, pc, #30720	; 0x7800
    1ec8:	61705f78 	cmnvs	r0, r8, ror pc
    1ecc:	74656b63 	strbtvc	r6, [r5], #-2915
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Do IK for all Left legs
			for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) {
    1ed0:	6c786400 	cfldrdvs	mvd6, [r8]
    1ed4:	7465675f 	strbtvc	r6, [r5], #-1887
				DoBackgroundProcess();
    1ed8:	776f6c5f 	undefined
				BodyFK(
    1edc:	65747962 	ldrbvs	r7, [r4, #-2402]!
    1ee0:	4c584400 	cfldrdmi	mvd4, [r8], {0}
    1ee4:	544b505f 	strbpl	r5, [fp], #-95
    1ee8:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
    1eec:	6c786400 	cfldrdvs	mvd6, [r8]
    1ef0:	7278745f 	rsbsvc	r7, r8, #1593835520	; 0x5f000000
    1ef4:	61705f78 	cmnvs	r0, r8, ror pc
    1ef8:	74656b63 	strbtvc	r6, [r5], #-2915
    1efc:	50504100 	subspl	r4, r0, r0, lsl #2
    1f00:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1f04:	6e79642f 	cdpvs	4, 7, cr6, cr9, cr15, {1}
    1f08:	78696d61 	stmdavc	r9!, {r0, r5, r6, r8, sl, fp, sp, lr}^
    1f0c:	632e6c65 	teqvs	lr, #25856	; 0x6500
    1f10:	53626700 	cmnpl	r2, #0	; 0x0
    1f14:	75746174 	ldrbvc	r6, [r4, #-372]!
    1f18:	63615073 	cmnvs	r1, #115	; 0x73
    1f1c:	0074656b 	rsbseq	r6, r4, fp, ror #10
    1f20:	5f6c7864 	svcpl	0x006c7864
    1f24:	74696e69 	strbtvc	r6, [r9], #-3689
    1f28:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    1f2c:	6400657a 	strvs	r6, [r0], #-1402
    1f30:	635f6c78 	cmpvs	pc, #30720	; 0x7800
    1f34:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    1f38:	6174735f 	cmnvs	r4, pc, asr r3
    1f3c:	746b7074 	strbtvc	r7, [fp], #-116
    1f40:	6c786400 	cfldrdvs	mvd6, [r8]
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z
						+ GaitPosZ[LegIndex] - TotalTransZ,
						LegPosY[LegIndex] + g_InControlState.BodyPos.y
						+ GaitPosY[LegIndex] - TotalTransY,
						GaitRotY[LegIndex], LegIndex);
				LegIK(
    1f44:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    1f48:	625f6574 	subsvs	r6, pc, #486539264	; 0x1d000000
    1f4c:	00657479 	rsbeq	r7, r5, r9, ror r4
    1f50:	5f6c7864 	svcpl	0x006c7864
    1f54:	74706163 	ldrbtvc	r6, [r0], #-355
    1f58:	00657275 	rsbeq	r7, r5, r5, ror r2
    1f5c:	5f6c7864 	svcpl	0x006c7864
    1f60:	74697277 	strbtvc	r7, [r9], #-631
    1f64:	6f775f65 	svcvs	0x00775f65
    1f68:	67006472 	smlsdxvs	r0, r2, r4, r6
    1f6c:	73754269 	cmnvc	r5, #-1879048186	; 0x90000006
    1f70:	6e697355 	mcrvs	3, 3, r7, cr9, cr5, {2}
    1f74:	78640067 	stmdavc	r4!, {r0, r1, r2, r5, r6}^
    1f78:	65725f6c 	ldrbvs	r5, [r2, #-3948]!
    1f7c:	625f6461 	subsvs	r6, pc, #1627389952	; 0x61000000
    1f80:	00657479 	rsbeq	r7, r5, r9, ror r4
    1f84:	5f62677a 	svcpl	0x0062677a
    1f88:	635f7872 	cmpvs	pc, #7471104	; 0x720000
    1f8c:	6b636568 	blvs	18db534 <__Stack_Size+0x18db134>
    1f90:	50504100 	subspl	r4, r0, r0, lsl #2
    1f94:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1f98:	67697a2f 	strbvs	r7, [r9, -pc, lsr #20]!
    1f9c:	2e656562 	cdpcs	5, 6, cr6, cr5, cr2, {3}
    1fa0:	677a0063 	ldrbvs	r0, [sl, -r3, rrx]!
    1fa4:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
    1fa8:	61697469 	cmnvs	r9, r9, ror #8
    1fac:	657a696c 	ldrbvs	r6, [sl, #-2412]!
    1fb0:	62677a00 	rsbvs	r7, r7, #0	; 0x0
    1fb4:	5f78725f 	svcpl	0x0078725f
    1fb8:	61746164 	cmnvs	r4, r4, ror #2
    1fbc:	6769725f 	undefined
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Do IK for all Left legs
			for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) {
    1fc0:	485f7468 	ldmdami	pc, {r3, r5, r6, sl, ip, sp, lr}^
    1fc4:	52626700 	rsbpl	r6, r2, #0	; 0x0
    1fc8:	61507663 	cmpvs	r0, r3, ror #12
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Check mechanical limits
			CheckAngles();
    1fcc:	74656b63 	strbtvc	r6, [r5], #-2915

			//Drive Servos
			if (g_InControlState.fRobotOn) {
    1fd0:	76635200 	strbtvc	r5, [r3], -r0, lsl #4
    1fd4:	006d754e 	rsbeq	r7, sp, lr, asr #10
    1fd8:	5f62677a 	svcpl	0x0062677a
				if (g_InControlState.fRobotOn && !g_InControlState.fPrev_RobotOn) {
					// MSound(3, 60, 2000, 80, 2250, 100, 2500);
					Buzzed(30, 2000);
    1fdc:	645f7872 	ldrbvs	r7, [pc], #2162	; 1fe4 <__Stack_Size+0x1be4>
    1fe0:	5f617461 	svcpl	0x00617461
    1fe4:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
					Buzzed(80, 2250);
    1fe8:	00565f74 	subseq	r5, r6, r4, ror pc
    1fec:	50646e53 	rsbpl	r6, r4, r3, asr lr
					Buzzed(100, 2500);
    1ff0:	656b6361 	strbvs	r6, [fp, #-865]!
    1ff4:	677a0074 	undefined
    1ff8:	78725f62 	ldmdavc	r2!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^

				}

				//Calculate Servo Move time
				if ((abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
    1ffc:	7461645f 	strbtvc	r6, [r1], #-1119
    2000:	78655f61 	stmdavc	r5!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    2004:	00617274 	rsbeq	r7, r1, r4, ror r2
    2008:	5f62677a 	svcpl	0x0062677a
    200c:	645f7872 	ldrbvs	r7, [pc], #2162	; 2014 <__Stack_Size+0x1c14>
    2010:	5f617461 	svcpl	0x00617461
    2014:	7466656c 	strbtvc	r6, [r6], #-1388
    2018:	005f485f 	subseq	r4, pc, pc, asr r8
    201c:	63527767 	cmpvs	r2, #27000832	; 0x19c0000
    2020:	74614476 	strbtvc	r4, [r1], #-1142
    2024:	75620061 	strbvc	r0, [r2, #-97]!
						|| (abs(g_InControlState.TravelLength.z) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.y*2) > cTravelDeadZone)) {
					ServoMoveTime = g_InControlState.gaitCur.NomGaitSpeed
    2028:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    202c:	7a005f73 	bvc	19e00 <__Stack_Size+0x19a00>
    2030:	725f6267 	subsvc	r6, pc, #1879048198	; 0x70000006
    2034:	61645f78 	smcvs	17912
    2038:	7a006174 	bvc	1a610 <__Stack_Size+0x1a210>
							+ (g_InControlState.InputTimeDelay * 2)
							+ g_InControlState.SpeedControl;

					//Add aditional delay when Balance mode is on
					if (g_InControlState.BalanceMode)
    203c:	725f6267 	subsvc	r6, pc, #1879048198	; 0x70000006

				//Calculate Servo Move time
				if ((abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.z) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.y*2) > cTravelDeadZone)) {
					ServoMoveTime = g_InControlState.gaitCur.NomGaitSpeed
    2040:	61645f78 	smcvs	17912
							+ (g_InControlState.InputTimeDelay * 2)
							+ g_InControlState.SpeedControl;

					//Add aditional delay when Balance mode is on
					if (g_InControlState.BalanceMode)
						ServoMoveTime = ServoMoveTime + BALANCE_DELAY;
    2044:	725f6174 	subsvc	r6, pc, #29	; 0x1d
    2048:	74686769 	strbtvc	r6, [r8], #-1897
				} else
					//Movement speed excl. Walking
					ServoMoveTime = 200 + g_InControlState.SpeedControl;
    204c:	005f485f 	subseq	r4, pc, pc, asr r8
    2050:	5f62677a 	svcpl	0x0062677a
    2054:	635f7872 	cmpvs	pc, #7471104	; 0x720000

				// note we broke up the servo driver into start/commit that way we can output all of the servo information
				// before we wait and only have the termination information to output after the wait.  That way we hopefully
				// be more accurate with our timings...
				DoBackgroundProcess();
    2058:	6b636568 	blvs	18db600 <__Stack_Size+0x18db200>
				StartUpdateServos();
    205c:	6472615f 	ldrbtvs	r6, [r2], #-351

				// See if we need to sync our processor with the servo driver while walking to ensure the prev is completed
				//before sending the next one

				// Finding any incident of GaitPos/Rot <>0:
				for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    2060:	6f6e6975 	svcvs	0x006e6975
					if ((GaitPosX[LegIndex] > cGPlimit)
    2064:	52626700 	rsbpl	r6, r2, #0	; 0x0
    2068:	61507663 	cmpvs	r0, r3, ror #12
    206c:	74656b63 	strbtvc	r6, [r5], #-2915
    2070:	006d754e 	rsbeq	r7, sp, lr, asr #10
    2074:	5f62677a 	svcpl	0x0062677a
    2078:	645f7874 	ldrbvs	r7, [pc], #2164	; 2080 <__Stack_Size+0x1c80>
    207c:	00617461 	rsbeq	r7, r1, r1, ror #8
    2080:	5f62677a 	svcpl	0x0062677a
    2084:	6d726574 	cfldr64vs	mvdx6, [r2, #-464]!
    2088:	74616e69 	strbtvc	r6, [r1], #-3689
    208c:	677a0065 	ldrbvs	r0, [sl, -r5, rrx]!
    2090:	78725f62 	ldmdavc	r2!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    2094:	7461645f 	strbtvc	r6, [r1], #-1119
    2098:	656c5f61 	strbvs	r5, [ip, #-3937]!
    209c:	565f7466 	ldrbpl	r7, [pc], -r6, ror #8
							|| (GaitPosZ[LegIndex] > cGPlimit)
							|| (GaitPosZ[LegIndex] < -cGPlimit)
							|| (GaitRotY[LegIndex] > cGPlimit)
							|| (GaitRotY[LegIndex] < -cGPlimit)) {

						bExtraCycle = g_InControlState.gaitCur.NrLiftedPos + 1;	//For making sure that we are using timed move until all legs are down
    20a0:	6843005f 	stmdavs	r3, {r0, r1, r2, r3, r4, r6}^
    20a4:	5a6b6365 	bpl	1adae40 <__Stack_Size+0x1adaa40>
    20a8:	77654e42 	strbvc	r4, [r5, -r2, asr #28]!

				// See if we need to sync our processor with the servo driver while walking to ensure the prev is completed
				//before sending the next one

				// Finding any incident of GaitPos/Rot <>0:
				for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    20ac:	69727241 	ldmdbvs	r2!, {r0, r6, r9, ip, sp, lr}^
    20b0:	7a006576 	bvc	1b690 <__Stack_Size+0x1b290>

						bExtraCycle = g_InControlState.gaitCur.NrLiftedPos + 1;	//For making sure that we are using timed move until all legs are down
						break;
					}
				}
				if (bExtraCycle > 0) {
    20b4:	725f6267 	subsvc	r6, pc, #1879048198	; 0x70000006
					bExtraCycle--;
    20b8:	61645f78 	smcvs	17912
    20bc:	6c5f6174 	ldfvse	f6, [pc], {116}
					fWalking = !(bExtraCycle == 0);
    20c0:	5f746665 	svcpl	0x00746665
    20c4:	677a0048 	ldrbvs	r0, [sl, -r8, asr #32]!

					//Get endtime and calculate wait time
					lTimeWaitEnd = lTimerStart + PrevServoMoveTime;
    20c8:	78725f62 	ldmdavc	r2!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    20cc:	7461645f 	strbtvc	r6, [r1], #-1119
    20d0:	75625f61 	strbvc	r5, [r2, #-3937]!
					PrintString("\n");
#endif
					//DebugWrite(A1, HIGH);
					do {
						// Wait the appropriate time, call any background process while waiting...
						DoBackgroundProcess();
    20d4:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
					} while (getMillis() < lTimeWaitEnd);
    20d8:	677a0073 	undefined
    20dc:	78725f62 	ldmdavc	r2!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
					PrintString("\n");
#endif

				}
				// Only do commit if we are actually doing something...
				CommitServoDriver(ServoMoveTime);
    20e0:	7461645f 	strbtvc	r6, [r1], #-1119
    20e4:	69725f61 	ldmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    20e8:	5f746867 	svcpl	0x00746867
			} else {
				//Turn the bot off - May need to add ajust here...
				if (g_InControlState.fPrev_RobotOn || (AllDown = 0)) {
    20ec:	7a005f56 	bvc	19e4c <__Stack_Size+0x19a4c>
					PrintString("Barebones lTimeWaitEnd-Millis  ");
					Printu32d(getMillis);
					PrintString("\n");
#endif
				} else {
					FreeServos();
    20f0:	725f6267 	subsvc	r6, pc, #1879048198	; 0x70000006
    20f4:	61645f78 	smcvs	17912
				// Only do commit if we are actually doing something...
				CommitServoDriver(ServoMoveTime);
			} else {
				//Turn the bot off - May need to add ajust here...
				if (g_InControlState.fPrev_RobotOn || (AllDown = 0)) {
					ServoMoveTime = 600;
    20f8:	6c5f6174 	ldfvse	f6, [pc], {116}
    20fc:	5f746665 	svcpl	0x00746665
					StartUpdateServos();
    2100:	62670056 	rsbvs	r0, r7, #86	; 0x56
					CommitServoDriver(ServoMoveTime);
    2104:	46766352 	undefined
					//MSound(3, 100, 2500, 80, 2250, 60, 2000);
					Buzzed(100, 2500);
    2108:	0067616c 	rsbeq	r6, r7, ip, ror #2
    210c:	63526267 	cmpvs	r2, #1879048198	; 0x70000006
    2110:	63615076 	cmnvs	r1, #118	; 0x76
					Buzzed(80, 2250);
    2114:	4174656b 	cmnmi	r4, fp, ror #10
    2118:	69756472 	ldmdbvs	r5!, {r1, r4, r5, r6, sl, sp, lr}^
					Buzzed(60, 2000);
    211c:	47006f6e 	strmi	r6, [r0, -lr, ror #30]
    2120:	5f4f4950 	svcpl	0x004f4950
    2124:	65707954 	ldrbvs	r7, [r0, #-2388]!

					//lTimeWaitEnd = getMillis() + 600; // setup to process background stuff while we wait...
					lTimeWaitEnd = getMillis() + 600; // setup to process background stuff while we wait...
    2128:	00666544 	rsbeq	r6, r6, r4, asr #10
    212c:	64616552 	strbtvs	r6, [r1], #-1362
					Printu32d(lTimeWaitEnd);
					PrintString("\n");
#endif
					do {
						// Wait the appropriate time, call any background process while waiting...
						DoBackgroundProcess();
    2130:	4a005249 	bmi	16a5c <__Stack_Size+0x1665c>
					} while (getMillis() < lTimeWaitEnd);
    2134:	00325244 	eorseq	r5, r2, r4, asr #4
    2138:	3352444a 	cmpcc	r2, #1241513984	; 0x4a000000
				} else {
					FreeServos();
				}

				// Allow the Servo driver to do stuff durint our idle time
				IdleTime();
    213c:	52444a00 	subpl	r4, r4, #0	; 0x0
				mDelay(20); // give a pause between times we call if nothing is happening
    2140:	61420034 	cmpvs	r2, r4, lsr r0
			}
			PrevServoMoveTime = ServoMoveTime;
    2144:	72657474 	rsbvc	r7, r5, #1946157056	; 0x74000000
    2148:	6f4d5f79 	svcvs	0x004d5f79

			//Store previous g_InControlState.fRobotOn State
			if (g_InControlState.fRobotOn)
    214c:	6f74696e 	svcvs	0x0074696e
    2150:	6c415f72 	mcrrvs	15, 7, r5, r1, cr2
				g_InControlState.fPrev_RobotOn = 1;
			else
				g_InControlState.fPrev_RobotOn = 0;
    2154:	006d7261 	rsbeq	r7, sp, r1, ror #4
    2158:	524f5045 	subpl	r5, pc, #69	; 0x45
    215c:	00353254 	eorseq	r3, r5, r4, asr r2
    2160:	524f5045 	subpl	r5, pc, #69	; 0x45
    2164:	00313254 	eorseq	r3, r1, r4, asr r2
    2168:	45746553 	ldrbmi	r6, [r4, #-1363]!
    216c:	74726f50 	ldrbtvc	r6, [r2], #-3920
    2170:	51534a00 	cmppl	r3, r0, lsl #20
    2174:	50450052 	subpl	r0, r5, r2, asr r0
    2178:	4474726f 	ldrbtmi	r7, [r4], #-623
    217c:	7600655f 	undefined
    2180:	00746c6f 	rsbseq	r6, r4, pc, ror #24
    2184:	524f5045 	subpl	r5, pc, #69	; 0x45
    2188:	00313654 	eorseq	r3, r1, r4, asr r6
    218c:	33354d43 	teqcc	r5, #4288	; 0x10c0
    2190:	57485f30 	smlaldxpl	r5, r8, r0, pc
    2194:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    2198:	6364612f 	cmnvs	r4, #-1073741813	; 0xc000000b
    219c:	4500632e 	strmi	r6, [r0, #-814]
    21a0:	54524f50 	ldrbpl	r4, [r2], #-3920
    21a4:	44003536 	strmi	r3, [r0], #-1334
    21a8:	42415349 	submi	r5, r1, #603979777	; 0x24000001
    21ac:	4a00454c 	bmi	136e4 <__Stack_Size+0x132e4>
    21b0:	00315244 	eorseq	r5, r1, r4, asr #4
    21b4:	52525342 	subspl	r5, r2, #134217729	; 0x8000001
    21b8:	4f504500 	svcmi	0x00504500
    21bc:	31335452 	teqcc	r3, r2, asr r4
    21c0:	464f4a00 	strbmi	r4, [pc], -r0, lsl #20
    21c4:	4a003152 	bmi	e714 <__Stack_Size+0xe314>
    21c8:	3252464f 	subscc	r4, r2, #82837504	; 0x4f00000
    21cc:	4f504500 	svcmi	0x00504500
    21d0:	35335452 	ldrcc	r5, [r3, #-1106]!
    21d4:	73614500 	cmnvc	r1, #0	; 0x0
    21d8:	6f504579 	svcvs	0x00504579
    21dc:	45007472 	strmi	r7, [r0, #-1138]
    21e0:	74726f50 	ldrbtvc	r6, [r2], #-3920
    21e4:	00745f44 	rsbseq	r5, r4, r4, asr #30
    21e8:	52464f4a 	subpl	r4, r6, #296	; 0x128
    21ec:	50450033 	subpl	r0, r5, r3, lsr r0
    21f0:	3154524f 	cmpcc	r4, pc, asr #4
    21f4:	4f4a0035 	svcmi	0x004a0035
    21f8:	00345246 	eorseq	r5, r4, r6, asr #4
    21fc:	64616552 	strbtvs	r6, [r1], #-1362
    2200:	6c616e41 	stclvs	14, cr6, [r1], #-260
    2204:	4500676f 	strmi	r6, [r0, #-1903]
    2208:	54524f50 	ldrbpl	r4, [r2], #-3920
    220c:	45003134 	strmi	r3, [r0, #-308]
    2210:	54524f50 	ldrbpl	r4, [r2], #-3920
    2214:	70003534 	andvc	r3, r0, r4, lsr r5
    2218:	0074726f 	rsbseq	r7, r4, pc, ror #4
    221c:	726f5045 	rsbvc	r5, pc, #69	; 0x45
    2220:	745f4174 	ldrbvc	r4, [pc], #372	; 2228 <__Stack_Size+0x1e28>
    2224:	52515300 	subspl	r5, r1, #0	; 0x0
    2228:	51530031 	cmppl	r3, r1, lsr r0
    222c:	53003252 	movwpl	r3, #594	; 0x252
    2230:	00335251 	eorseq	r5, r3, r1, asr r2
    2234:	524f5045 	subpl	r5, pc, #69	; 0x45
    2238:	00313154 	eorseq	r3, r1, r4, asr r1
    223c:	79736145 	ldmdbvc	r3!, {r0, r2, r6, r8, sp, lr}^
    2240:	74726f50 	ldrbtvc	r6, [r2], #-3920
    2244:	4500735f 	strmi	r7, [r0, #-863]
    2248:	50797361 	rsbspl	r7, r9, r1, ror #6
    224c:	5f74726f 	svcpl	0x0074726f
    2250:	4d530074 	ldclmi	0, cr0, [r3, #-464]
    2254:	00315250 	eorseq	r5, r1, r0, asr r2
    2258:	52504d53 	subspl	r4, r0, #5312	; 0x14c0
    225c:	434c0032 	movtmi	r0, #49202	; 0xc032
    2260:	4500524b 	strmi	r5, [r0, #-587]
    2264:	54524f50 	ldrbpl	r4, [r2], #-3920
    2268:	45003135 	strmi	r3, [r0, #-309]
    226c:	54524f50 	ldrbpl	r4, [r2], #-3920
    2270:	42003535 	andmi	r3, r0, #222298112	; 0xd400000
    2274:	6f747475 	svcvs	0x00747475
    2278:	00745f6e 	rsbseq	r5, r4, lr, ror #30
    227c:	79736145 	ldmdbvc	r3!, {r0, r2, r6, r8, sp, lr}^
    2280:	74747542 	ldrbtvc	r7, [r4], #-1346
    2284:	52006e6f 	andpl	r6, r0, #1776	; 0x6f0
    2288:	42646165 	rsbmi	r6, r4, #1073741849	; 0x40000019
    228c:	6f747475 	svcvs	0x00747475
    2290:	4d43006e 	stclmi	0, cr0, [r3, #-440]
    2294:	5f303335 	svcpl	0x00303335
    2298:	732f5748 	teqvc	pc, #18874368	; 0x1200000
    229c:	622f6372 	eorvs	r6, pc, #-939524095	; 0xc8000001
    22a0:	6f747475 	svcvs	0x00747475
    22a4:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    22a8:	74747562 	ldrbtvc	r7, [r4], #-1378
    22ac:	43006e6f 	movwmi	r6, #3695	; 0xe6f
    22b0:	3033354d 	eorscc	r3, r3, sp, asr #10
    22b4:	2f57485f 	svccs	0x0057485f
    22b8:	2f637273 	svccs	0x00637273
    22bc:	2e64656c 	cdpcs	5, 6, cr6, cr4, cr12, {3}
    22c0:	454c0063 	strbmi	r0, [ip, #-99]
    22c4:	00745f44 	rsbseq	r5, r4, r4, asr #30
    22c8:	4c746553 	cfldr64mi	mvdx6, [r4], #-332
    22cc:	45004445 	strmi	r4, [r0, #-1093]
    22d0:	4c797361 	ldclmi	3, cr7, [r9], #-388
    22d4:	6e004445 	cdpvs	4, 0, cr4, cr0, cr5, {2}
    22d8:	0065746f 	rsbeq	r7, r5, pc, ror #8
    22dc:	656e6f74 	strbvs	r6, [lr, #-3956]!
    22e0:	7a756200 	bvc	1d5aae8 <__Stack_Size+0x1d5a6e8>
    22e4:	5f64657a 	svcpl	0x0064657a
    22e8:	65746f6e 	ldrbvs	r6, [r4, #-3950]!
    22ec:	6d00745f 	cfstrsvs	mvf7, [r0, #-380]
    22f0:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
    22f4:	6f006874 	svcvs	0x00006874
    22f8:	76617463 	strbtvc	r7, [r1], -r3, ror #8
    22fc:	6c500065 	mrrcvs	0, 6, r0, r0, cr5
    2300:	6f4e7961 	svcvs	0x004e7961
    2304:	67006574 	smlsdxvs	r0, r4, r5, r6
    2308:	7a75426c 	bvc	1d52cc0 <__Stack_Size+0x1d528c0>
    230c:	4372657a 	cmnmi	r2, #511705088	; 0x1e800000
    2310:	746e756f 	strbtvc	r7, [lr], #-1391
    2314:	42007265 	andmi	r7, r0, #1342177286	; 0x50000006
    2318:	657a7a75 	ldrbvs	r7, [sl, #-2677]!
    231c:	4d430064 	stclmi	0, cr0, [r3, #-400]
    2320:	5f303335 	svcpl	0x00303335
    2324:	732f5748 	teqvc	pc, #18874368	; 0x1200000
    2328:	6d2f6372 	stcvs	3, cr6, [pc, #-456]!
    232c:	632e6369 	teqvs	lr, #-1543503871	; 0xa4000001
    2330:	69546e00 	ldmdbvs	r4, {r9, sl, fp, sp, lr}^
    2334:	6d00656d 	cfstr32vs	mvfx6, [r0, #-436]
    2338:	616c6544 	cmnvs	ip, r4, asr #10
    233c:	4d430079 	stclmi	0, cr0, [r3, #-484]
    2340:	5f303335 	svcpl	0x00303335
    2344:	732f5748 	teqvc	pc, #18874368	; 0x1200000
    2348:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    234c:	65747379 	ldrbvs	r7, [r4, #-889]!
    2350:	75665f6d 	strbvc	r5, [r6, #-3949]!
    2354:	632e636e 	teqvs	lr, #-1207959551	; 0xb8000001
    2358:	74656700 	strbtvc	r6, [r5], #-1792
    235c:	6c6c694d 	stclvs	9, cr6, [ip], #-308
    2360:	67007369 	strvs	r7, [r0, -r9, ror #6]
    2364:	756f436c 	strbvc	r4, [pc, #-876]!	; 2000 <__Stack_Size+0x1c00>
    2368:	6f64746e 	svcvs	0x0064746e
    236c:	6f436e77 	svcvs	0x00436e77
    2370:	65746e75 	ldrbvs	r6, [r4, #-3701]!
    2374:	74530072 	ldrbvc	r0, [r3], #-114
    2378:	54747261 	ldrbtpl	r7, [r4], #-609
    237c:	00656d69 	rsbeq	r6, r5, r9, ror #26
    2380:	65446c67 	strbvs	r6, [r4, #-3175]
    2384:	4379616c 	cmnmi	r9, #27	; 0x1b
    2388:	746e756f 	strbtvc	r7, [lr], #-1391
    238c:	67007265 	strvs	r7, [r0, -r5, ror #4]
    2390:	7563506c 	strbvc	r5, [r3, #-108]!
    2394:	656d6954 	strbvs	r6, [sp, #-2388]!
    2398:	4374756f 	cmnmi	r4, #465567744	; 0x1bc00000
    239c:	746e756f 	strbtvc	r7, [lr], #-1391
    23a0:	53007265 	movwpl	r7, #613	; 0x265
    23a4:	74726174 	ldrbtvc	r6, [r2], #-372
    23a8:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    23ac:	776f6474 	undefined
    23b0:	4475006e 	ldrbtmi	r0, [r5], #-110
    23b4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    23b8:	4d736d00 	ldclmi	13, cr6, [r3]
    23bc:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
    23c0:	74730073 	ldrbtvc	r0, [r3], #-115
    23c4:	5f747261 	svcpl	0x00747261
    23c8:	656d6974 	strbvs	r6, [sp, #-2420]!
    23cc:	5f74756f 	svcpl	0x0074756f
    23d0:	006c7864 	rsbeq	r7, ip, r4, ror #16
    23d4:	5f525349 	svcpl	0x00525349
    23d8:	616c6544 	cmnvs	ip, r4, asr #10
    23dc:	61425f79 	cmpvs	r2, r9, ror pc
    23e0:	67006573 	smlsdxvs	r0, r3, r5, r6
    23e4:	6c78446c 	cfldrdvs	mvd4, [r8], #-432
    23e8:	656d6954 	strbvs	r6, [sp, #-2388]!
    23ec:	4374756f 	cmnmi	r4, #465567744	; 0x1bc00000
    23f0:	746e756f 	strbtvc	r7, [lr], #-1391
    23f4:	73007265 	movwvc	r7, #613	; 0x265
    23f8:	74726174 	ldrbtvc	r6, [r2], #-372
    23fc:	756f635f 	strbvc	r6, [pc, #-863]!	; 20a5 <__Stack_Size+0x1ca5>
    2400:	6f64746e 	svcvs	0x0064746e
    2404:	625f6e77 	subsvs	r6, pc, #1904	; 0x770
    2408:	657a7a75 	ldrbvs	r7, [sl, #-2677]!
    240c:	74730072 	ldrbtvc	r0, [r3], #-114
    2410:	5f747261 	svcpl	0x00747261
    2414:	656d6974 	strbvs	r6, [sp, #-2420]!
    2418:	5f74756f 	svcpl	0x0074756f
    241c:	00756370 	rsbseq	r6, r5, r0, ror r3
    2420:	6f436267 	svcvs	0x00436267
    2424:	65746e75 	ldrbvs	r6, [r4, #-3701]!
    2428:	756f4372 	strbvc	r4, [pc, #-882]!	; 20be <__Stack_Size+0x1cbe>
    242c:	4700746e 	strmi	r7, [r0, -lr, ror #8]
    2430:	5f4f4950 	svcpl	0x004f4950
    2434:	006e6950 	rsbeq	r6, lr, r0, asr r9
    2438:	5f434441 	svcpl	0x00434441
    243c:	74696e49 	strbtvc	r6, [r9], #-3657
    2440:	75727453 	ldrbvc	r7, [r2, #-1107]!
    2444:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
    2448:	564e0065 	strbpl	r0, [lr], -r5, rrx
    244c:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^
    2450:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    2454:	656e6e61 	strbvs	r6, [lr, #-3681]!
    2458:	646d436c 	strbtvs	r4, [sp], #-876
    245c:	43444100 	movtmi	r4, #16640	; 0x4100
    2460:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2464:	70795474 	rsbsvc	r5, r9, r4, ror r4
    2468:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    246c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    2470:	646f4d4f 	strbtvs	r4, [pc], #3407	; 2478 <__Stack_Size+0x2078>
    2474:	79545f65 	ldmdbvc	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    2478:	65446570 	strbvs	r6, [r4, #-1392]
    247c:	4d430066 	stclmi	0, cr0, [r3, #-408]
    2480:	5f303335 	svcpl	0x00303335
    2484:	732f5748 	teqvc	pc, #18874368	; 0x1200000
    2488:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    248c:	65747379 	ldrbvs	r7, [r4, #-889]!
    2490:	6e695f6d 	cdpvs	15, 6, cr5, cr9, cr13, {3}
    2494:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
    2498:	43444100 	movtmi	r4, #16640	; 0x4100
    249c:	6163535f 	cmnvs	r3, pc, asr r3
    24a0:	6e6f436e 	cdpvs	3, 6, cr4, cr15, cr14, {3}
    24a4:	646f4d76 	strbtvs	r4, [pc], #3446	; 24ac <__Stack_Size+0x20ac>
    24a8:	50470065 	subpl	r0, r7, r5, rrx
    24ac:	535f4f49 	cmppl	pc, #292	; 0x124
    24b0:	64656570 	strbtvs	r6, [r5], #-1392
    24b4:	73795300 	cmnvc	r9, #0	; 0x0
    24b8:	74696e49 	strbtvc	r6, [r9], #-3657
    24bc:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    24c0:	52495f43 	subpl	r5, r9, #268	; 0x10c
    24c4:	61684351 	cmnvs	r8, r1, asr r3
    24c8:	6c656e6e 	stclvs	14, cr6, [r5], #-440
    24cc:	50627553 	rsbpl	r7, r2, r3, asr r5
    24d0:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    24d4:	00797469 	rsbseq	r7, r9, r9, ror #8
    24d8:	4f495047 	svcmi	0x00495047
    24dc:	646f4d5f 	strbtvs	r4, [pc], #3423	; 24e4 <__Stack_Size+0x20e4>
    24e0:	754f5f65 	strbvc	r5, [pc, #-3941]	; 1583 <__Stack_Size+0x1183>
    24e4:	444f5f74 	strbmi	r5, [pc], #3956	; 24ec <__Stack_Size+0x20ec>
    24e8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    24ec:	6f4d5f4f 	svcvs	0x004d5f4f
    24f0:	415f6564 	cmpmi	pc, r4, ror #10
    24f4:	50505f46 	subspl	r5, r0, r6, asr #30
    24f8:	45534800 	ldrbmi	r4, [r3, #-2048]
    24fc:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    2500:	53705574 	cmnpl	r0, #486539264	; 0x1d000000
    2504:	75746174 	ldrbvc	r6, [r4, #-372]!
    2508:	564e0073 	undefined
    250c:	435f4349 	cmpmi	pc, #603979777	; 0x24000001
    2510:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2514:	61727567 	cmnvs	r2, r7, ror #10
    2518:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    251c:	43435200 	movtmi	r5, #12800	; 0x3200
    2520:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
    2524:	75676966 	strbvc	r6, [r7, #-2406]!
    2528:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    252c:	45006e6f 	strmi	r6, [r0, #-3695]
    2530:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    2534:	74617453 	strbtvc	r7, [r1], #-1107
    2538:	47007375 	smlsdxmi	r0, r5, r3, r7
    253c:	5f4f4950 	svcpl	0x004f4950
    2540:	65657053 	strbvs	r7, [r5, #-83]!
    2544:	30315f64 	eorscc	r5, r1, r4, ror #30
    2548:	007a484d 	rsbseq	r4, sl, sp, asr #16
    254c:	5f434441 	svcpl	0x00434441
    2550:	65646f4d 	strbvs	r6, [r4, #-3917]!
    2554:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    2558:	70535f4f 	subsvc	r5, r3, pc, asr #30
    255c:	5f646565 	svcpl	0x00646565
    2560:	7a484d32 	bvc	1215a30 <__Stack_Size+0x1215630>
    2564:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    2568:	6f435f4f 	svcvs	0x00435f4f
    256c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2570:	74617275 	strbtvc	r7, [r1], #-629
    2574:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    2578:	4f495047 	svcmi	0x00495047
    257c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2580:	70795474 	rsbsvc	r5, r9, r4, ror r4
    2584:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    2588:	43444100 	movtmi	r4, #16640	; 0x4100
    258c:	72624e5f 	rsbvc	r4, r2, #1520	; 0x5f0
    2590:	6843664f 	stmdavs	r3, {r0, r1, r2, r3, r6, r9, sl, sp, lr}^
    2594:	656e6e61 	strbvs	r6, [lr, #-3681]!
    2598:	4441006c 	strbmi	r0, [r1], #-108
    259c:	61445f43 	cmpvs	r4, r3, asr #30
    25a0:	6c416174 	stfvse	f6, [r1], {116}
    25a4:	006e6769 	rsbeq	r6, lr, r9, ror #14
    25a8:	4f495047 	svcmi	0x00495047
    25ac:	646f4d5f 	strbtvs	r4, [pc], #3423	; 25b4 <__Stack_Size+0x21b4>
    25b0:	50495f65 	subpl	r5, r9, r5, ror #30
    25b4:	50470044 	subpl	r0, r7, r4, asr #32
    25b8:	535f4f49 	cmppl	pc, #292	; 0x124
    25bc:	64656570 	strbtvs	r6, [r5], #-1392
    25c0:	4d30355f 	cfldr32mi	mvfx3, [r0, #-380]!
    25c4:	4e007a48 	fnmacsmi	s14, s0, s16
    25c8:	5f434956 	svcpl	0x00434956
    25cc:	74696e49 	strbtvc	r6, [r9], #-3657
    25d0:	75727453 	ldrbvc	r7, [r2, #-1107]!
    25d4:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
    25d8:	44410065 	strbmi	r0, [r1], #-101
    25dc:	6f435f43 	svcvs	0x00435f43
    25e0:	6e69746e 	cdpvs	4, 6, cr7, cr9, cr14, {3}
    25e4:	73756f75 	cmnvc	r5, #468	; 0x1d4
    25e8:	766e6f43 	strbtvc	r6, [lr], -r3, asr #30
    25ec:	65646f4d 	strbvs	r6, [r4, #-3917]!
    25f0:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    25f4:	52495f43 	subpl	r5, r9, #268	; 0x10c
    25f8:	61684351 	cmnvs	r8, r1, asr r3
    25fc:	6c656e6e 	stclvs	14, cr6, [r5], #-440
    2600:	43444100 	movtmi	r4, #16640	; 0x4100
    2604:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
    2608:	75676966 	strbvc	r6, [r7, #-2406]!
    260c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    2610:	47006e6f 	strmi	r6, [r0, -pc, ror #28]
    2614:	5f4f4950 	svcpl	0x004f4950
    2618:	65646f4d 	strbvs	r6, [r4, #-3917]!
    261c:	5550495f 	ldrbpl	r4, [r0, #-2399]
    2620:	43444100 	movtmi	r4, #16640	; 0x4100
    2624:	7478455f 	ldrbtvc	r4, [r8], #-1375
    2628:	616e7265 	cmnvs	lr, r5, ror #4
    262c:	6972546c 	ldmdbvs	r2!, {r2, r3, r5, r6, sl, ip, lr}^
    2630:	6e6f4367 	cdpvs	3, 6, cr4, cr15, cr7, {3}
    2634:	50470076 	subpl	r0, r7, r6, ror r0
    2638:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]
    263c:	5f65646f 	svcpl	0x0065646f
    2640:	004e4941 	subeq	r4, lr, r1, asr #18
    2644:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2648:	6f435f54 	svcvs	0x00435f54
    264c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2650:	74617275 	strbtvc	r7, [r1], #-629
    2654:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    2658:	4349564e 	movtmi	r5, #38478	; 0x964e
    265c:	5152495f 	cmppl	r2, pc, asr r9
    2660:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    2664:	506c656e 	rsbpl	r6, ip, lr, ror #10
    2668:	6d656572 	cfstr64vs	mvdx6, [r5, #-456]!
    266c:	6f697470 	svcvs	0x00697470
    2670:	6972506e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, ip, lr}^
    2674:	7469726f 	strbtvc	r7, [r9], #-623
    2678:	50470079 	subpl	r0, r7, r9, ror r0
    267c:	70534f49 	subsvc	r4, r3, r9, asr #30
    2680:	5f646565 	svcpl	0x00646565
    2684:	65707954 	ldrbvs	r7, [r0, #-2388]!
    2688:	00666544 	rsbeq	r6, r6, r4, asr #10
    268c:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
    2690:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    2694:	74536c61 	ldrbvc	r6, [r3], #-3169
    2698:	00657461 	rsbeq	r7, r5, r1, ror #8
    269c:	4349564e 	movtmi	r5, #38478	; 0x964e
    26a0:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    26a4:	70795474 	rsbsvc	r5, r9, r4, ror r4
    26a8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    26ac:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    26b0:	6f4d5f4f 	svcvs	0x004d5f4f
    26b4:	4f5f6564 	svcmi	0x005f6564
    26b8:	505f7475 	subspl	r7, pc, r5, ror r4
    26bc:	50470050 	subpl	r0, r7, r0, asr r0
    26c0:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^
    26c4:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    26c8:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    26cc:	65727574 	ldrbvs	r7, [r2, #-1396]!
    26d0:	73795300 	cmnvc	r9, #0	; 0x0
    26d4:	6b636954 	blvs	18dcc2c <__Stack_Size+0x18dc82c>
    26d8:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
    26dc:	75676966 	strbvc	r6, [r7, #-2406]!
    26e0:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    26e4:	47006e6f 	strmi	r6, [r0, -pc, ror #28]
    26e8:	5f4f4950 	svcpl	0x004f4950
    26ec:	65646f4d 	strbvs	r6, [r4, #-3917]!
    26f0:	5f4e495f 	svcpl	0x004e495f
    26f4:	414f4c46 	cmpmi	pc, r6, asr #24
    26f8:	474e4954 	smlsldmi	r4, lr, r4, r9
    26fc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    2700:	6f4d5f4f 	svcvs	0x004d5f4f
    2704:	415f6564 	cmpmi	pc, r4, ror #10
    2708:	444f5f46 	strbmi	r5, [pc], #3910	; 2710 <__Stack_Size+0x2310>
    270c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    2710:	6f4d5f4f 	svcvs	0x004d5f4f
    2714:	55006564 	strpl	r6, [r0, #-1380]
    2718:	54524153 	ldrbpl	r4, [r2], #-339
    271c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2720:	72745374 	rsbsvc	r5, r4, #-805306367	; 0xd0000001
    2724:	75746375 	ldrbvc	r6, [r4, #-885]!
    2728:	52006572 	andpl	r6, r0, #478150656	; 0x1c800000
    272c:	445f4478 	ldrbmi	r4, [pc], #1144	; 2734 <__Stack_Size+0x2334>
    2730:	495f4c58 	ldmdbmi	pc, {r3, r4, r6, sl, fp, lr}^
    2734:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2738:	74707572 	ldrbtvc	r7, [r0], #-1394
    273c:	75637000 	strbvc	r7, [r3]!
    2740:	6c61685f 	stclvs	8, cr6, [r1], #-380
    2744:	7465735f 	strbtvc	r7, [r5], #-863
    2748:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!
    274c:	74756f65 	ldrbtvc	r6, [r5], #-3941
    2750:	6c786400 	cfldrdvs	mvd6, [r8]
    2754:	6c61685f 	stclvs	8, cr6, [r1], #-380
    2758:	0078745f 	rsbseq	r7, r8, pc, asr r4
    275c:	5f6c7864 	svcpl	0x006c7864
    2760:	5f6c6168 	svcpl	0x006c6168
    2764:	736f6c63 	cmnvc	pc, #25344	; 0x6300
    2768:	50700065 	rsbspl	r0, r0, r5, rrx
    276c:	656b6361 	strbvs	r6, [fp, #-865]!
    2770:	78520074 	ldmdavc	r2, {r2, r4, r5, r6}^
    2774:	43505f44 	cmpmi	r0, #272	; 0x110
    2778:	6e495f55 	mcrvs	15, 2, r5, cr9, cr5, {2}
    277c:	72726574 	rsbsvc	r6, r2, #486539264	; 0x1d000000
    2780:	00747075 	rsbseq	r7, r4, r5, ror r0
    2784:	5f756370 	svcpl	0x00756370
    2788:	5f747570 	svcpl	0x00747570
    278c:	75657571 	strbvc	r7, [r5, #-1393]!
    2790:	53550065 	cmppl	r5, #101	; 0x65
    2794:	5f545241 	svcpl	0x00545241
    2798:	706f7453 	rsbvc	r7, pc, r3, asr r4
    279c:	73746942 	cmnvc	r4, #1081344	; 0x108000
    27a0:	75637000 	strbvc	r7, [r3]!
    27a4:	7475705f 	ldrbtvc	r7, [r5], #-95
    27a8:	7479625f 	ldrbtvc	r6, [r9], #-607
    27ac:	45520065 	ldrbmi	r0, [r2, #-101]
    27b0:	56524553 	undefined
    27b4:	00314445 	eorseq	r4, r1, r5, asr #8
    27b8:	5f756370 	svcpl	0x00756370
    27bc:	6b656570 	blvs	195bd84 <__Stack_Size+0x195b984>
    27c0:	6575715f 	ldrbvs	r7, [r5, #-351]!
    27c4:	70006575 	andvc	r6, r0, r5, ror r5
    27c8:	685f7563 	ldmdavs	pc, {r0, r1, r5, r6, r8, sl, ip, sp, lr}^
    27cc:	635f6c61 	cmpvs	pc, #24832	; 0x6100
    27d0:	65736f6c 	ldrbvs	r6, [r3, #-3948]!
    27d4:	41535500 	cmpmi	r3, r0, lsl #10
    27d8:	575f5452 	undefined
    27dc:	4c64726f 	sfmmi	f7, 2, [r4], #-444
    27e0:	74676e65 	strbtvc	r6, [r7], #-3685
    27e4:	63700068 	cmnvs	r0, #104	; 0x68
    27e8:	61685f75 	smcvs	34293
    27ec:	69745f6c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    27f0:	756f656d 	strbvc	r6, [pc, #-1389]!	; 228b <__Stack_Size+0x1e8b>
    27f4:	53550074 	cmppl	r5, #116	; 0x74
    27f8:	5f545241 	svcpl	0x00545241
    27fc:	64756142 	ldrbtvs	r6, [r5], #-322
    2800:	65746152 	ldrbvs	r6, [r4, #-338]!
    2804:	75637000 	strbvc	r7, [r3]!
    2808:	7465675f 	strbtvc	r6, [r5], #-1887
    280c:	7473715f 	ldrbtvc	r7, [r3], #-351
    2810:	00657461 	rsbeq	r7, r5, r1, ror #8
    2814:	5f756370 	svcpl	0x00756370
    2818:	5f746567 	svcpl	0x00746567
    281c:	75657571 	strbvc	r7, [r5, #-1393]!
    2820:	677a0065 	ldrbvs	r0, [sl, -r5, rrx]!
    2824:	61685f62 	cmnvs	r8, r2, ror #30
    2828:	6c635f6c 	stclvs	15, cr5, [r3], #-432
    282c:	0065736f 	rsbeq	r7, r5, pc, ror #6
    2830:	5f62677a 	svcpl	0x0062677a
    2834:	5f6c6168 	svcpl	0x006c6168
    2838:	4e007874 	mcrmi	8, 0, r7, cr0, cr4, {3}
    283c:	63526d75 	cmpvs	r2, #7488	; 0x1d40
    2840:	74794276 	ldrbtvc	r4, [r9], #-630
    2844:	78520065 	ldmdavc	r2, {r0, r2, r5, r6}^
    2848:	495a5f44 	ldmdbmi	sl, {r2, r6, r8, r9, sl, fp, ip, lr}^
    284c:	6e495f47 	cdpvs	15, 4, cr5, cr9, cr7, {2}
    2850:	72726574 	rsbsvc	r6, r2, #486539264	; 0x1d000000
    2854:	00747075 	rsbseq	r7, r4, r5, ror r0
    2858:	5f62677a 	svcpl	0x0062677a
    285c:	5f6c6168 	svcpl	0x006c6168
    2860:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
    2864:	41535500 	cmpmi	r3, r0, lsl #10
    2868:	505f5452 	subspl	r5, pc, r2, asr r4
    286c:	74697261 	strbtvc	r7, [r9], #-609
    2870:	54470079 	strbpl	r0, [r7], #-121
    2874:	64005250 	strvs	r5, [r0], #-592
    2878:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^
    287c:	635f6c61 	cmpvs	pc, #24832	; 0x6100
    2880:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    2884:	6c786400 	cfldrdvs	mvd6, [r8]
    2888:	6c61685f 	stclvs	8, cr6, [r1], #-380
    288c:	65706f5f 	ldrbvs	r6, [r0, #-3935]!
    2890:	7864006e 	stmdavc	r4!, {r1, r2, r3, r5, r6}^
    2894:	61685f6c 	cmnvs	r8, ip, ror #30
    2898:	78725f6c 	ldmdavc	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    289c:	6d756e00 	ldclvs	14, cr6, [r5]
    28a0:	6b636150 	blvs	18dade8 <__Stack_Size+0x18da9e8>
    28a4:	70007465 	andvc	r7, r0, r5, ror #8
    28a8:	685f7563 	ldmdavs	pc, {r0, r1, r5, r6, r8, sl, ip, sp, lr}^
    28ac:	6f5f6c61 	svcvs	0x005f6c61
    28b0:	006e6570 	rsbeq	r6, lr, r0, ror r5
    28b4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    28b8:	61485f54 	cmpvs	r8, r4, asr pc
    28bc:	61776472 	cmnvs	r7, r2, ror r4
    28c0:	6c466572 	cfstr64vs	mvdx6, [r6], {114}
    28c4:	6f43776f 	svcvs	0x0043776f
    28c8:	6f72746e 	svcvs	0x0072746e
    28cc:	5355006c 	cmppl	r5, #108	; 0x6c
    28d0:	5f545241 	svcpl	0x00545241
    28d4:	65646f4d 	strbvs	r6, [r4, #-3917]!
    28d8:	354d4300 	strbcc	r4, [sp, #-768]
    28dc:	485f3033 	ldmdami	pc, {r0, r1, r4, r5, ip, sp}^
    28e0:	72732f57 	rsbsvc	r2, r3, #348	; 0x15c
    28e4:	73752f63 	cmnvc	r5, #396	; 0x18c
    28e8:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    28ec:	45520063 	ldrbmi	r0, [r2, #-99]
    28f0:	56524553 	undefined
    28f4:	00304445 	eorseq	r4, r0, r5, asr #8
    28f8:	45534552 	ldrbmi	r4, [r3, #-1362]
    28fc:	44455652 	strbmi	r5, [r5], #-1618
    2900:	45520032 	ldrbmi	r0, [r2, #-50]
    2904:	56524553 	undefined
    2908:	00334445 	eorseq	r4, r3, r5, asr #8
    290c:	45534552 	ldrbmi	r4, [r3, #-1362]
    2910:	44455652 	strbmi	r5, [r5], #-1618
    2914:	45520034 	ldrbmi	r0, [r2, #-52]
    2918:	56524553 	undefined
    291c:	00354445 	eorseq	r4, r5, r5, asr #8
    2920:	45534552 	ldrbmi	r4, [r3, #-1362]
    2924:	44455652 	strbmi	r5, [r5], #-1618
    2928:	63700036 	cmnvs	r0, #54	; 0x36
    292c:	6c635f75 	stclvs	15, cr5, [r3], #-468
    2930:	5f726165 	svcpl	0x00726165
    2934:	75657571 	strbvc	r7, [r5, #-1393]!
    2938:	78640065 	stmdavc	r4!, {r0, r2, r5, r6}^
    293c:	61685f6c 	cmnvs	r8, ip, ror #30
    2940:	69745f6c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    2944:	756f656d 	strbvc	r6, [pc, #-1389]!	; 23df <__Stack_Size+0x1fdf>
    2948:	78640074 	stmdavc	r4!, {r2, r4, r5, r6}^
    294c:	61685f6c 	cmnvs	r8, ip, ror #30
    2950:	65735f6c 	ldrbvs	r5, [r3, #-3948]!
    2954:	69745f74 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2958:	756f656d 	strbvc	r6, [pc, #-1389]!	; 23f3 <__Stack_Size+0x1ff3>
    295c:	677a0074 	undefined
    2960:	61685f62 	cmnvs	r8, r2, ror #30
    2964:	78725f6c 	ldmdavc	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    2968:	41535500 	cmpmi	r3, r0, lsl #10
    296c:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^
    2970:	5474696e 	ldrbtpl	r6, [r4], #-2414
    2974:	44657079 	strbtmi	r7, [r5], #-121
    2978:	62006665 	andvs	r6, r0, #105906176	; 0x6500000
    297c:	44647854 	strbtmi	r7, [r4], #-2132
    2980:	00617461 	rsbeq	r7, r1, r1, ror #8
    2984:	78434441 	stmdavc	r3, {r0, r6, sl, lr}^
    2988:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    298c:	31676572 	smccc	30290
    2990:	43444100 	movtmi	r4, #16640	; 0x4100
    2994:	616e415f 	cmnvs	lr, pc, asr r1
    2998:	57676f6c 	strbpl	r6, [r7, -ip, ror #30]!
    299c:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    29a0:	43676f64 	cmnmi	r7, #400	; 0x190
    29a4:	4100646d 	tstmi	r0, sp, ror #8
    29a8:	495f4344 	ldmdbmi	pc, {r2, r6, r8, r9, lr}^
    29ac:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    29b0:	00676966 	rsbeq	r6, r7, r6, ror #18
    29b4:	5f434441 	svcpl	0x00434441
    29b8:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    29bc:	7774666f 	ldrbvc	r6, [r4, -pc, ror #12]!
    29c0:	53657261 	cmnpl	r5, #268435462	; 0x10000006
    29c4:	74726174 	ldrbtvc	r6, [r2], #-372
    29c8:	656a6e49 	strbvs	r6, [sl, #-3657]!
    29cc:	64657463 	strbtvs	r7, [r5], #-1123
    29d0:	766e6f43 	strbtvc	r6, [lr], -r3, asr #30
    29d4:	53646d43 	cmnpl	r4, #4288	; 0x10c0
    29d8:	75746174 	ldrbvc	r6, [r4, #-372]!
    29dc:	6f4c0073 	svcvs	0x004c0073
    29e0:	72685477 	rsbvc	r5, r8, #1996488704	; 0x77000000
    29e4:	6f687365 	svcvs	0x00687365
    29e8:	4100646c 	tstmi	r0, ip, ror #8
    29ec:	435f4344 	cmpmi	pc, #268435457	; 0x10000001
    29f0:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    29f4:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    29f8:	43444100 	movtmi	r4, #16640	; 0x4100
    29fc:	7465475f 	strbtvc	r4, [r5], #-1887
    2a00:	74535449 	ldrbvc	r5, [r3], #-1097
    2a04:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2a08:	6d747300 	ldclvs	3, cr7, [r4]
    2a0c:	31663233 	cmncc	r6, r3, lsr r2
    2a10:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    2a14:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    2a18:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    2a1c:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    2a20:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    2a24:	6364615f 	cmnvs	r4, #-1073741801	; 0xc0000017
    2a28:	4e00632e 	cdpmi	3, 0, cr6, cr0, cr14, {1}
    2a2c:	65626d75 	strbvs	r6, [r2, #-3445]!
    2a30:	44410072 	strbmi	r0, [r1], #-114
    2a34:	6d435f43 	stclvs	15, cr5, [r3, #-268]
    2a38:	44410064 	strbmi	r0, [r1], #-100
    2a3c:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    2a40:	74537469 	ldrbvc	r7, [r3], #-1129
    2a44:	74637572 	strbtvc	r7, [r3], #-1394
    2a48:	43444100 	movtmi	r4, #16640	; 0x4100
    2a4c:	616e415f 	cmnvs	lr, pc, asr r1
    2a50:	57676f6c 	strbpl	r6, [r7, -ip, ror #30]!
    2a54:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    2a58:	54676f64 	strbtpl	r6, [r7], #-3940
    2a5c:	73657268 	cmnvc	r5, #-2147483642	; 0x80000006
    2a60:	646c6f68 	strbtvs	r6, [ip], #-3944
    2a64:	6e6f4373 	mcrvs	3, 3, r4, cr15, cr3, {3}
    2a68:	00676966 	rsbeq	r6, r7, r6, ror #18
    2a6c:	5f434441 	svcpl	0x00434441
    2a70:	61656c43 	cmnvs	r5, r3, asr #24
    2a74:	50544972 	subspl	r4, r4, r2, ror r9
    2a78:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2a7c:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2a80:	44410074 	strbmi	r0, [r1], #-116
    2a84:	65475f43 	strbvs	r5, [r7, #-3907]
    2a88:	73655274 	cmnvc	r5, #1073741831	; 0x40000007
    2a8c:	61437465 	cmpvs	r3, r5, ror #8
    2a90:	7262696c 	rsbvc	r6, r2, #1769472	; 0x1b0000
    2a94:	6f697461 	svcvs	0x00697461
    2a98:	6174536e 	cmnvs	r4, lr, ror #6
    2a9c:	00737574 	rsbseq	r7, r3, r4, ror r5
    2aa0:	5f434441 	svcpl	0x00434441
    2aa4:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    2aa8:	77654e00 	strbvc	r4, [r5, -r0, lsl #28]!
    2aac:	74617453 	strbtvc	r7, [r1], #-1107
    2ab0:	44410065 	strbmi	r0, [r1], #-101
    2ab4:	6e415f43 	cdpvs	15, 4, cr5, cr1, cr3, {2}
    2ab8:	676f6c61 	strbvs	r6, [pc, -r1, ror #24]!
    2abc:	63746157 	cmnvs	r4, #-1073741803	; 0xc0000015
    2ac0:	676f6468 	strbvs	r6, [pc, -r8, ror #8]!
    2ac4:	676e6953 	undefined
    2ac8:	6843656c 	stmdavs	r3, {r2, r3, r5, r6, r8, sl, sp, lr}^
    2acc:	656e6e61 	strbvs	r6, [lr, #-3681]!
    2ad0:	6e6f436c 	cdpvs	3, 6, cr4, cr15, cr12, {3}
    2ad4:	00676966 	rsbeq	r6, r7, r6, ror #18
    2ad8:	5f434441 	svcpl	0x00434441
    2adc:	75676552 	strbvc	r6, [r7, #-1362]!
    2ae0:	4372616c 	cmnmi	r2, #27	; 0x1b
    2ae4:	6e6e6168 	powvsez	f6, f6, #0.0
    2ae8:	6f436c65 	svcvs	0x00436c65
    2aec:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2af0:	616e6500 	cmnvs	lr, r0, lsl #10
    2af4:	73656c62 	cmnvc	r5, #25088	; 0x6200
    2af8:	75746174 	ldrbvc	r6, [r4, #-372]!
    2afc:	69480073 	stmdbvs	r8, {r0, r1, r4, r5, r6}^
    2b00:	68546867 	ldmdavs	r4, {r0, r1, r2, r5, r6, fp, sp, lr}^
    2b04:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    2b08:	00646c6f 	rsbeq	r6, r4, pc, ror #24
    2b0c:	5f434441 	svcpl	0x00434441
    2b10:	63736944 	cmnvs	r3, #1114112	; 0x110000
    2b14:	65646f4d 	strbvs	r6, [r4, #-3917]!
    2b18:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    2b1c:	436c656e 	cmnmi	ip, #461373440	; 0x1b800000
    2b20:	746e756f 	strbtvc	r7, [lr], #-1391
    2b24:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2b28:	41006769 	tstmi	r0, r9, ror #14
    2b2c:	475f4344 	ldrbmi	r4, [pc, -r4, asr #6]
    2b30:	6f437465 	svcvs	0x00437465
    2b34:	7265766e 	rsbvc	r7, r5, #115343360	; 0x6e00000
    2b38:	6e6f6973 	mcrvs	9, 3, r6, cr15, cr3, {3}
    2b3c:	756c6156 	strbvc	r6, [ip, #-342]!
    2b40:	6d740065 	ldclvs	0, cr0, [r4, #-404]!
    2b44:	67657270 	undefined
    2b48:	6e615200 	cdpvs	2, 6, cr5, cr1, cr0, {0}
    2b4c:	4441006b 	strbmi	r0, [r1], #-107
    2b50:	75415f43 	strbvc	r5, [r1, #-3907]
    2b54:	6e496f74 	mcrvs	15, 2, r6, cr9, cr4, {3}
    2b58:	7463656a 	strbtvc	r6, [r3], #-1386
    2b5c:	6f436465 	svcvs	0x00436465
    2b60:	6d43766e 	stclvs	6, cr7, [r3, #-440]
    2b64:	44410064 	strbmi	r0, [r1], #-100
    2b68:	78455f43 	stmdavc	r5, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    2b6c:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    2b70:	72546c61 	subsvc	r6, r4, #24832	; 0x6100
    2b74:	6f436769 	svcvs	0x00436769
    2b78:	6d43766e 	stclvs	6, cr7, [r3, #-440]
    2b7c:	44410064 	strbmi	r0, [r1], #-100
    2b80:	65475f43 	strbvs	r5, [r7, #-3907]
    2b84:	666f5374 	undefined
    2b88:	72617774 	rsbvc	r7, r1, #30408704	; 0x1d00000
    2b8c:	61745365 	cmnvs	r4, r5, ror #6
    2b90:	6f437472 	svcvs	0x00437472
    2b94:	7453766e 	ldrbvc	r7, [r3], #-1646
    2b98:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2b9c:	43444100 	movtmi	r4, #16640	; 0x4100
    2ba0:	7465535f 	strbtvc	r5, [r5], #-863
    2ba4:	656a6e49 	strbvs	r6, [sl, #-3657]!
    2ba8:	64657463 	strbtvs	r7, [r5], #-1123
    2bac:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    2bb0:	41007465 	tstmi	r0, r5, ror #8
    2bb4:	445f4344 	ldrbmi	r4, [pc], #836	; 2bbc <__Stack_Size+0x27bc>
    2bb8:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    2bbc:	44410074 	strbmi	r0, [r1], #-116
    2bc0:	78455f43 	stmdavc	r5, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    2bc4:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    2bc8:	72546c61 	subsvc	r6, r4, #24832	; 0x6100
    2bcc:	6e496769 	cdpvs	7, 4, cr6, cr9, cr9, {3}
    2bd0:	7463656a 	strbtvc	r6, [r3], #-1386
    2bd4:	6f436465 	svcvs	0x00436465
    2bd8:	6d43766e 	stclvs	6, cr7, [r3, #-440]
    2bdc:	44410064 	strbmi	r0, [r1], #-100
    2be0:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    2be4:	7463656a 	strbtvc	r6, [r3], #-1386
    2be8:	69446465 	stmdbvs	r4, {r0, r2, r5, r6, sl, sp, lr}^
    2bec:	6f4d6373 	svcvs	0x004d6373
    2bf0:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]
    2bf4:	44410064 	strbmi	r0, [r1], #-100
    2bf8:	78455f43 	stmdavc	r5, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    2bfc:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    2c00:	72546c61 	subsvc	r6, r4, #24832	; 0x6100
    2c04:	6e496769 	cdpvs	7, 4, cr6, cr9, cr9, {3}
    2c08:	7463656a 	strbtvc	r6, [r3], #-1386
    2c0c:	6f436465 	svcvs	0x00436465
    2c10:	6f43766e 	svcvs	0x0043766e
    2c14:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2c18:	43444100 	movtmi	r4, #16640	; 0x4100
    2c1c:	7465475f 	strbtvc	r4, [r5], #-1887
    2c20:	656a6e49 	strbvs	r6, [sl, #-3657]!
    2c24:	64657463 	strbtvs	r7, [r5], #-1123
    2c28:	766e6f43 	strbtvc	r6, [lr], -r3, asr #30
    2c2c:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2c30:	61566e6f 	cmpvs	r6, pc, ror #28
    2c34:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2c38:	5f434441 	svcpl	0x00434441
    2c3c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    2c40:	006c656e 	rsbeq	r6, ip, lr, ror #10
    2c44:	5f434441 	svcpl	0x00434441
    2c48:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    2c4c:	6c614374 	stclvs	3, cr4, [r1], #-464
    2c50:	61726269 	cmnvs	r2, r9, ror #4
    2c54:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    2c58:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    2c5c:	32676572 	rsbcc	r6, r7, #478150656	; 0x1c800000
    2c60:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    2c64:	33676572 	cmncc	r7, #478150656	; 0x1c800000
    2c68:	43444100 	movtmi	r4, #16640	; 0x4100
    2c6c:	7465475f 	strbtvc	r4, [r5], #-1887
    2c70:	696c6143 	stmdbvs	ip!, {r0, r1, r6, r8, sp, lr}^
    2c74:	74617262 	strbtvc	r7, [r1], #-610
    2c78:	536e6f69 	cmnpl	lr, #420	; 0x1a4
    2c7c:	75746174 	ldrbvc	r6, [r4, #-372]!
    2c80:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
    2c84:	61747374 	cmnvs	r4, r4, ror r3
    2c88:	00737574 	rsbseq	r7, r3, r4, ror r5
    2c8c:	5f434441 	svcpl	0x00434441
    2c90:	74666f53 	strbtvc	r6, [r6], #-3923
    2c94:	65726177 	ldrbvs	r6, [r2, #-375]!
    2c98:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    2c9c:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    2ca0:	646d4376 	strbtvs	r4, [sp], #-886
    2ca4:	43444100 	movtmi	r4, #16640	; 0x4100
    2ca8:	6a6e495f 	bvs	1b9522c <__Stack_Size+0x1b94e2c>
    2cac:	65746365 	ldrbvs	r6, [r4, #-869]!
    2cb0:	71655364 	cmnvc	r5, r4, ror #6
    2cb4:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    2cb8:	654c7265 	strbvs	r7, [ip, #-613]
    2cbc:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2cc0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2cc4:	41006769 	tstmi	r0, r9, ror #14
    2cc8:	415f4344 	cmpmi	pc, r4, asr #6
    2ccc:	6f6c616e 	svcvs	0x006c616e
    2cd0:	74615767 	strbtvc	r5, [r1], #-1895
    2cd4:	6f646863 	svcvs	0x00646863
    2cd8:	44410067 	strbmi	r0, [r1], #-103
    2cdc:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    2ce0:	7463656a 	strbtvc	r6, [r3], #-1386
    2ce4:	68436465 	stmdavs	r3, {r0, r2, r5, r6, sl, sp, lr}^
    2ce8:	656e6e61 	strbvs	r6, [lr, #-3681]!
    2cec:	6e6f436c 	cdpvs	3, 6, cr4, cr15, cr12, {3}
    2cf0:	00676966 	rsbeq	r6, r7, r6, ror #18
    2cf4:	5f434441 	svcpl	0x00434441
    2cf8:	706d6153 	rsbvc	r6, sp, r3, asr r1
    2cfc:	6954656c 	ldmdbvs	r4, {r2, r3, r5, r6, r8, sl, sp, lr}^
    2d00:	4100656d 	tstmi	r0, sp, ror #10
    2d04:	535f4344 	cmppl	pc, #268435457	; 0x10000001
    2d08:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    2d0c:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    2d10:	44410074 	strbmi	r0, [r1], #-116
    2d14:	6f535f43 	svcvs	0x00535f43
    2d18:	61777466 	cmnvs	r7, r6, ror #8
    2d1c:	74536572 	ldrbvc	r6, [r3], #-1394
    2d20:	49747261 	ldmdbmi	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    2d24:	63656a6e 	cmnvs	r5, #450560	; 0x6e000
    2d28:	43646574 	cmnmi	r4, #486539264	; 0x1d000000
    2d2c:	43766e6f 	cmnmi	r6, #1776	; 0x6f0
    2d30:	4100646d 	tstmi	r0, sp, ror #8
    2d34:	495f4344 	ldmdbmi	pc, {r2, r6, r8, r9, lr}^
    2d38:	63656a6e 	cmnvs	r5, #450560	; 0x6e000
    2d3c:	43646574 	cmnmi	r4, #486539264	; 0x1d000000
    2d40:	6e6e6168 	powvsez	f6, f6, #0.0
    2d44:	41006c65 	tstmi	r0, r5, ror #24
    2d48:	475f4344 	ldrbmi	r4, [pc, -r4, asr #6]
    2d4c:	6c467465 	cfstrdvs	mvd7, [r6], {101}
    2d50:	74536761 	ldrbvc	r6, [r3], #-1889
    2d54:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2d58:	43444100 	movtmi	r4, #16640	; 0x4100
    2d5c:	6d65545f 	cfstrdvs	mvd5, [r5, #-380]!
    2d60:	6e655370 	mcrvs	3, 3, r5, cr5, cr0, {3}
    2d64:	56726f73 	uhsub16pl	r6, r2, r3
    2d68:	69666572 	stmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    2d6c:	6d43746e 	cfstrdvs	mvd7, [r3, #-440]
    2d70:	44410064 	strbmi	r0, [r1], #-100
    2d74:	69445f43 	stmdbvs	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    2d78:	6f4d6373 	svcvs	0x004d6373
    2d7c:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]
    2d80:	44410064 	strbmi	r0, [r1], #-100
    2d84:	65525f43 	ldrbvs	r5, [r2, #-3907]
    2d88:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    2d8c:	62696c61 	rsbvs	r6, r9, #24832	; 0x6100
    2d90:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    2d94:	41006e6f 	tstmi	r0, pc, ror #28
    2d98:	495f4344 	ldmdbmi	pc, {r2, r6, r8, r9, lr}^
    2d9c:	74690054 	strbtvc	r0, [r9], #-84
    2da0:	6b73616d 	blvs	1cdb35c <__Stack_Size+0x1cdaf5c>
    2da4:	43444100 	movtmi	r4, #16640	; 0x4100
    2da8:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    2dac:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    2db0:	43444100 	movtmi	r4, #16640	; 0x4100
    2db4:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2db8:	44410074 	strbmi	r0, [r1], #-116
    2dbc:	78455f43 	stmdavc	r5, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    2dc0:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    2dc4:	72546c61 	subsvc	r6, r4, #24832	; 0x6100
    2dc8:	6e496769 	cdpvs	7, 4, cr6, cr9, cr9, {3}
    2dcc:	4363656a 	cmnmi	r3, #444596224	; 0x1a800000
    2dd0:	00766e6f 	rsbseq	r6, r6, pc, ror #28
    2dd4:	5f434441 	svcpl	0x00434441
    2dd8:	43414d44 	movtmi	r4, #7492	; 0x1d44
    2ddc:	4100646d 	tstmi	r0, sp, ror #8
    2de0:	475f4344 	ldrbmi	r4, [pc, -r4, asr #6]
    2de4:	75447465 	strbvc	r7, [r4, #-1125]
    2de8:	6f4d6c61 	svcvs	0x004d6c61
    2dec:	6f436564 	svcvs	0x00436564
    2df0:	7265766e 	rsbvc	r7, r5, #115343360	; 0x6e00000
    2df4:	6e6f6973 	mcrvs	9, 3, r6, cr15, cr3, {3}
    2df8:	756c6156 	strbvc	r6, [ip, #-342]!
    2dfc:	4c460065 	mcrrmi	0, 6, r0, r6, cr5
    2e00:	5f485341 	svcpl	0x00485341
    2e04:	6f435449 	svcvs	0x00435449
    2e08:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2e0c:	5f424f00 	svcpl	0x00424f00
    2e10:	47445749 	strbmi	r5, [r4, -r9, asr #14]
    2e14:	50525700 	subspl	r5, r2, r0, lsl #14
    2e18:	61445f32 	cmpvs	r4, r2, lsr pc
    2e1c:	4f006174 	svcmi	0x00006174
    2e20:	54535f42 	ldrbpl	r5, [r3], #-3906
    2e24:	4600504f 	strmi	r5, [r0], -pc, asr #32
    2e28:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    2e2c:	6172455f 	cmnvs	r2, pc, asr r5
    2e30:	704f6573 	subvc	r6, pc, r3, ror r5
    2e34:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    2e38:	65747942 	ldrbvs	r7, [r4, #-2370]!
    2e3c:	65720073 	ldrbvs	r0, [r2, #-115]!
    2e40:	756f6461 	strbvc	r6, [pc, #-1121]!	; 29e7 <__Stack_Size+0x25e7>
    2e44:	61747374 	cmnvs	r4, r4, ror r3
    2e48:	00737574 	rsbseq	r7, r3, r4, ror r5
    2e4c:	53414c46 	movtpl	r4, #7238	; 0x1c46
    2e50:	52455f48 	subpl	r5, r5, #288	; 0x120
    2e54:	5f524f52 	svcpl	0x00524f52
    2e58:	00505257 	subseq	r5, r0, r7, asr r2
    2e5c:	53414c46 	movtpl	r4, #7238	; 0x1c46
    2e60:	72455f48 	subvc	r5, r5, #288	; 0x120
    2e64:	50657361 	rsbpl	r7, r5, r1, ror #6
    2e68:	00656761 	rsbeq	r6, r5, r1, ror #14
    2e6c:	53414c46 	movtpl	r4, #7238	; 0x1c46
    2e70:	614c5f48 	cmpvs	ip, r8, asr #30
    2e74:	636e6574 	cmnvs	lr, #486539264	; 0x1d000000
    2e78:	4c460079 	mcrrmi	0, 7, r0, r6, cr9
    2e7c:	5f485341 	svcpl	0x00485341
    2e80:	50746547 	rsbspl	r6, r4, r7, asr #10
    2e84:	65666572 	strbvs	r6, [r6, #-1394]!
    2e88:	42686374 	rsbmi	r6, r8, #-805306367	; 0xd0000001
    2e8c:	65666675 	strbvs	r6, [r6, #-1653]!
    2e90:	61745372 	cmnvs	r4, r2, ror r3
    2e94:	00737574 	rsbseq	r7, r3, r4, ror r5
    2e98:	616c6564 	cmnvs	ip, r4, ror #10
    2e9c:	52570079 	subspl	r0, r7, #121	; 0x79
    2ea0:	46005250 	undefined
    2ea4:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    2ea8:	6c6e555f 	cfstr64vs	mvdx5, [lr], #-380
    2eac:	006b636f 	rsbeq	r6, fp, pc, ror #6
    2eb0:	53414c46 	movtpl	r4, #7238	; 0x1c46
    2eb4:	72455f48 	subvc	r5, r5, #288	; 0x120
    2eb8:	41657361 	cmnmi	r5, r1, ror #6
    2ebc:	61506c6c 	cmpvs	r0, ip, ror #24
    2ec0:	00736567 	rsbseq	r6, r3, r7, ror #10
    2ec4:	53414c46 	movtpl	r4, #7238	; 0x1c46
    2ec8:	74535f48 	ldrbvc	r5, [r3], #-3912
    2ecc:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2ed0:	50525700 	subspl	r5, r2, r0, lsl #14
    2ed4:	52570030 	subspl	r0, r7, #48	; 0x30
    2ed8:	57003150 	smlsdpl	r0, r0, r1, r3
    2edc:	00325052 	eorseq	r5, r2, r2, asr r0
    2ee0:	33505257 	cmpcc	r0, #1879048197	; 0x70000005
    2ee4:	414c4600 	cmpmi	ip, r0, lsl #12
    2ee8:	475f4853 	undefined
    2eec:	72577465 	subsvc	r7, r7, #1694498816	; 0x65000000
    2ef0:	50657469 	rsbpl	r7, r5, r9, ror #8
    2ef4:	65746f72 	ldrbvs	r6, [r4, #-3954]!
    2ef8:	6f697463 	svcvs	0x00697463
    2efc:	74704f6e 	ldrbtvc	r4, [r0], #-3950
    2f00:	426e6f69 	rsbmi	r6, lr, #420	; 0x1a4
    2f04:	00657479 	rsbeq	r7, r5, r9, ror r4
    2f08:	4b54504f 	blmi	151704c <__Stack_Size+0x1516c4c>
    2f0c:	00525945 	subseq	r5, r2, r5, asr #18
    2f10:	53414c46 	movtpl	r4, #7238	; 0x1c46
    2f14:	73555f48 	cmpvc	r5, #288	; 0x120
    2f18:	704f7265 	subvc	r7, pc, r5, ror #4
    2f1c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    2f20:	65747942 	ldrbvs	r7, [r4, #-2370]!
    2f24:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2f28:	46006769 	strmi	r6, [r0], -r9, ror #14
    2f2c:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    2f30:	6165525f 	cmnvs	r5, pc, asr r2
    2f34:	74754f64 	ldrbtvc	r4, [r5], #-3940
    2f38:	746f7250 	strbtvc	r7, [pc], #592	; 2f40 <__Stack_Size+0x2b40>
    2f3c:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    2f40:	66006e6f 	strvs	r6, [r0], -pc, ror #28
    2f44:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
    2f48:	74617473 	strbtvc	r7, [r1], #-1139
    2f4c:	50007375 	andpl	r7, r0, r5, ror r3
    2f50:	5f656761 	svcpl	0x00656761
    2f54:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    2f58:	00737365 	rsbseq	r7, r3, r5, ror #6
    2f5c:	53414c46 	movtpl	r4, #7238	; 0x1c46
    2f60:	52455f48 	subpl	r5, r5, #288	; 0x120
    2f64:	5f524f52 	svcpl	0x00524f52
    2f68:	46004750 	undefined
    2f6c:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    2f70:	636f4c5f 	cmnvs	pc, #24320	; 0x5f00
    2f74:	5257006b 	subspl	r0, r7, #107	; 0x6b
    2f78:	445f3350 	ldrbmi	r3, [pc], #848	; 2f80 <__Stack_Size+0x2b80>
    2f7c:	00617461 	rsbeq	r7, r1, r1, ror #8
    2f80:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2f84:	30316632 	eorscc	r6, r1, r2, lsr r6
    2f88:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2f8c:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    2f90:	74732f63 	ldrbtvc	r2, [r3], #-3939
    2f94:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2f98:	5f783031 	svcpl	0x00783031
    2f9c:	73616c66 	cmnvc	r1, #26112	; 0x6600
    2fa0:	00632e68 	rsbeq	r2, r3, r8, ror #28
    2fa4:	53414c46 	movtpl	r4, #7238	; 0x1c46
    2fa8:	72505f48 	subsvc	r5, r0, #288	; 0x120
    2fac:	74656665 	strbtvc	r6, [r5], #-1637
    2fb0:	75426863 	strbvc	r6, [r2, #-2147]
    2fb4:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    2fb8:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2fbc:	53414c46 	movtpl	r4, #7238	; 0x1c46
    2fc0:	65475f48 	strbvs	r5, [r7, #-3912]
    2fc4:	616c4674 	smcvs	50276
    2fc8:	61745367 	cmnvs	r4, r7, ror #6
    2fcc:	00737574 	rsbseq	r7, r3, r4, ror r5
    2fd0:	53414c46 	movtpl	r4, #7238	; 0x1c46
    2fd4:	6c435f48 	mcrrvs	15, 4, r5, r3, cr8
    2fd8:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    2fdc:	0067616c 	rsbeq	r6, r7, ip, ror #2
    2fe0:	53414c46 	movtpl	r4, #7238	; 0x1c46
    2fe4:	4f435f48 	svcmi	0x00435f48
    2fe8:	454c504d 	strbmi	r5, [ip, #-77]
    2fec:	46004554 	undefined
    2ff0:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    2ff4:	5355425f 	cmppl	r5, #-268435451	; 0xf0000005
    2ff8:	52570059 	subspl	r0, r7, #89	; 0x59
    2ffc:	445f3150 	ldrbmi	r3, [pc], #336	; 3004 <__Stack_Size+0x2c04>
    3000:	00617461 	rsbeq	r7, r1, r1, ror #8
    3004:	53414c46 	movtpl	r4, #7238	; 0x1c46
    3008:	49545f48 	ldmdbmi	r4, {r3, r6, r8, r9, sl, fp, ip, lr}^
    300c:	554f454d 	strbpl	r4, [pc, #-1357]	; 2ac7 <__Stack_Size+0x26c7>
    3010:	69540054 	ldmdbvs	r4, {r2, r4, r6}^
    3014:	756f656d 	strbvc	r6, [pc, #-1389]!	; 2aaf <__Stack_Size+0x26af>
    3018:	4c460074 	mcrrmi	0, 7, r0, r6, cr4
    301c:	5f485341 	svcpl	0x00485341
    3020:	52746547 	rsbspl	r6, r4, #297795584	; 0x11c00000
    3024:	4f646165 	svcmi	0x00646165
    3028:	72507475 	subsvc	r7, r0, #1962934272	; 0x75000000
    302c:	6365746f 	cmnvs	r5, #1862270976	; 0x6f000000
    3030:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    3034:	74617453 	strbtvc	r7, [r1], #-1107
    3038:	4f007375 	svcmi	0x00007375
    303c:	54535f42 	ldrbpl	r5, [r3], #-3906
    3040:	00594244 	subseq	r4, r9, r4, asr #4
    3044:	30505257 	subscc	r5, r0, r7, asr r2
    3048:	7461445f 	strbtvc	r4, [r1], #-1119
    304c:	4c460061 	mcrrmi	0, 6, r0, r6, cr1
    3050:	5f485341 	svcpl	0x00485341
    3054:	666c6148 	strbtvs	r6, [ip], -r8, asr #2
    3058:	6c637943 	stclvs	9, cr7, [r3], #-268
    305c:	63634165 	cmnvs	r3, #1073741849	; 0x40000019
    3060:	00737365 	rsbseq	r7, r3, r5, ror #6
    3064:	53414c46 	movtpl	r4, #7238	; 0x1c46
    3068:	65475f48 	strbvs	r5, [r7, #-3912]
    306c:	61745374 	cmnvs	r4, r4, ror r3
    3070:	00737574 	rsbseq	r7, r3, r4, ror r5
    3074:	53414c46 	movtpl	r4, #7238	; 0x1c46
    3078:	6e455f48 	cdpvs	15, 4, cr5, cr5, cr8, {2}
    307c:	656c6261 	strbvs	r6, [ip, #-609]!
    3080:	74697257 	strbtvc	r7, [r9], #-599
    3084:	6f725065 	svcvs	0x00725065
    3088:	74636574 	strbtvc	r6, [r3], #-1396
    308c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    3090:	53414c46 	movtpl	r4, #7238	; 0x1c46
    3094:	65535f48 	ldrbvs	r5, [r3, #-3912]
    3098:	74614c74 	strbtvc	r4, [r1], #-3188
    309c:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    30a0:	414c4600 	cmpmi	ip, r0, lsl #12
    30a4:	485f4853 	ldmdami	pc, {r0, r1, r4, r6, fp, lr}^
    30a8:	43666c61 	cmnmi	r6, #24832	; 0x6100
    30ac:	656c6379 	strbvs	r6, [ip, #-889]!
    30b0:	65636341 	strbvs	r6, [r3, #-833]!
    30b4:	6d437373 	stclvs	3, cr7, [r3, #-460]
    30b8:	4c460064 	mcrrmi	0, 6, r0, r6, cr4
    30bc:	5f485341 	svcpl	0x00485341
    30c0:	676f7250 	undefined
    30c4:	4f6d6172 	svcmi	0x006d6172
    30c8:	6f697470 	svcvs	0x00697470
    30cc:	7479426e 	ldrbtvc	r4, [r9], #-622
    30d0:	74614465 	strbtvc	r4, [r1], #-1125
    30d4:	4c460061 	mcrrmi	0, 6, r0, r6, cr1
    30d8:	5f485341 	svcpl	0x00485341
    30dc:	55746547 	ldrbpl	r6, [r4, #-1351]!
    30e0:	4f726573 	svcmi	0x00726573
    30e4:	6f697470 	svcvs	0x00697470
    30e8:	7479426e 	ldrbtvc	r4, [r9], #-622
    30ec:	4c460065 	mcrrmi	0, 6, r0, r6, cr5
    30f0:	5f485341 	svcpl	0x00485341
    30f4:	676f7250 	undefined
    30f8:	486d6172 	stmdami	sp!, {r1, r4, r5, r6, r8, sp, lr}^
    30fc:	57666c61 	strbpl	r6, [r6, -r1, ror #24]!
    3100:	0064726f 	rsbeq	r7, r4, pc, ror #4
    3104:	53414c46 	movtpl	r4, #7238	; 0x1c46
    3108:	4c465f48 	mcrrmi	15, 4, r5, r6, cr8
    310c:	55004741 	strpl	r4, [r0, #-1857]
    3110:	00524553 	subseq	r4, r2, r3, asr r5
    3114:	61746144 	cmnvs	r4, r4, asr #2
    3118:	61440030 	cmpvs	r4, r0, lsr r0
    311c:	00316174 	eorseq	r6, r1, r4, ror r1
    3120:	53414c46 	movtpl	r4, #7238	; 0x1c46
    3124:	61505f48 	cmpvs	r0, r8, asr #30
    3128:	00736567 	rsbseq	r6, r3, r7, ror #10
    312c:	53414c46 	movtpl	r4, #7238	; 0x1c46
    3130:	54495f48 	strbpl	r5, [r9], #-3912
    3134:	414c4600 	cmpmi	ip, r0, lsl #12
    3138:	505f4853 	subspl	r4, pc, r3, asr r8
    313c:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
    3140:	6f576d61 	svcvs	0x00576d61
    3144:	52006472 	andpl	r6, r0, #1912602624	; 0x72000000
    3148:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    314c:	00444556 	subeq	r4, r4, r6, asr r5
    3150:	53414c46 	movtpl	r4, #7238	; 0x1c46
    3154:	61575f48 	cmpvs	r7, r8, asr #30
    3158:	6f467469 	svcvs	0x00467469
    315c:	73614c72 	cmnvc	r1, #29184	; 0x7200
    3160:	65704f74 	ldrbvs	r4, [r0, #-3956]!
    3164:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    3168:	46006e6f 	strmi	r6, [r0], -pc, ror #28
    316c:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    3170:	6572505f 	ldrbvs	r5, [r2, #-95]!
    3174:	63746566 	cmnvs	r4, #427819008	; 0x19800000
    3178:	66754268 	ldrbtvs	r4, [r5], -r8, ror #4
    317c:	00726566 	rsbseq	r6, r2, r6, ror #10
    3180:	706e6970 	rsbvc	r6, lr, r0, ror r9
    3184:	4200736f 	andmi	r7, r0, #-1140850687	; 0xbc000001
    3188:	535f7469 	cmppl	pc, #1761607680	; 0x69000000
    318c:	47005445 	strmi	r5, [r0, -r5, asr #8]
    3190:	5f4f4950 	svcpl	0x004f4950
    3194:	64616552 	strbtvs	r6, [r1], #-1362
    3198:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    319c:	61447475 	cmpvs	r4, r5, ror r4
    31a0:	47006174 	smlsdxmi	r0, r4, r1, r6
    31a4:	5f4f4950 	svcpl	0x004f4950
    31a8:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    31ac:	74754f74 	ldrbtvc	r4, [r5], #-3956
    31b0:	43747570 	cmnmi	r4, #469762048	; 0x1c000000
    31b4:	4700646d 	strmi	r6, [r0, -sp, ror #8]
    31b8:	5f4f4950 	svcpl	0x004f4950
    31bc:	75727453 	ldrbvc	r7, [r2, #-1107]!
    31c0:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    31c4:	42007469 	andmi	r7, r0, #1761607680	; 0x69000000
    31c8:	61567469 	cmpvs	r6, r9, ror #8
    31cc:	6942006c 	stmdbvs	r2, {r2, r3, r5, r6}^
    31d0:	45525f74 	ldrbmi	r5, [r2, #-3956]
    31d4:	00544553 	subseq	r4, r4, r3, asr r5
    31d8:	4f495047 	svcmi	0x00495047
    31dc:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    31e0:	69426574 	stmdbvs	r2, {r2, r4, r5, r6, r8, sl, sp, lr}^
    31e4:	50470074 	subpl	r0, r7, r4, ror r0
    31e8:	535f4f49 	cmppl	pc, #292	; 0x124
    31ec:	69427465 	stmdbvs	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
    31f0:	47007374 	smlsdxmi	r0, r4, r3, r7
    31f4:	5f4f4950 	svcpl	0x004f4950
    31f8:	74696e49 	strbtvc	r6, [r9], #-3657
    31fc:	54584500 	ldrbpl	r4, [r8], #-1280
    3200:	00524349 	subseq	r4, r2, r9, asr #6
    3204:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3208:	30316632 	eorscc	r6, r1, r2, lsr r6
    320c:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3210:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    3214:	74732f63 	ldrbtvc	r2, [r3], #-3939
    3218:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    321c:	5f783031 	svcpl	0x00783031
    3220:	6f697067 	svcvs	0x00697067
    3224:	7000632e 	andvc	r6, r0, lr, lsr #6
    3228:	616d6e69 	cmnvs	sp, r9, ror #28
    322c:	47006b73 	smlsdxmi	r0, r3, fp, r6
    3230:	5f4f4950 	svcpl	0x004f4950
    3234:	74726f50 	ldrbtvc	r6, [r2], #-3920
    3238:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    323c:	47006563 	strmi	r6, [r0, -r3, ror #10]
    3240:	5f4f4950 	svcpl	0x004f4950
    3244:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    3248:	47007469 	strmi	r7, [r0, -r9, ror #8]
    324c:	5f4f4950 	svcpl	0x004f4950
    3250:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    3254:	74754f74 	ldrbtvc	r4, [r5], #-3956
    3258:	43747570 	cmnmi	r4, #469762048	; 0x1c000000
    325c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3260:	50470067 	subpl	r0, r7, r7, rrx
    3264:	525f4f49 	subspl	r4, pc, #292	; 0x124
    3268:	70616d65 	rsbvc	r6, r1, r5, ror #26
    326c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    3270:	65525f4f 	ldrbvs	r5, [r2, #-3919]
    3274:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
    3278:	44747570 	ldrbtmi	r7, [r4], #-1392
    327c:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    3280:	47007469 	strmi	r7, [r0, -r9, ror #8]
    3284:	5f4f4950 	svcpl	0x004f4950
    3288:	65736552 	ldrbvs	r6, [r3, #-1362]!
    328c:	74694274 	strbtvc	r4, [r9], #-628
    3290:	6f500073 	svcvs	0x00500073
    3294:	61567472 	cmpvs	r6, r2, ror r4
    3298:	7563006c 	strbvc	r0, [r3, #-108]!
    329c:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    32a0:	646f6d74 	strbtvs	r6, [pc], #3444	; 32a8 <__Stack_Size+0x2ea8>
    32a4:	50470065 	subpl	r0, r7, r5, rrx
    32a8:	505f4f49 	subspl	r4, pc, r9, asr #30
    32ac:	65526e69 	ldrbvs	r6, [r2, #-3689]
    32b0:	4370616d 	cmnmi	r0, #1073741851	; 0x4000001b
    32b4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    32b8:	50470067 	subpl	r0, r7, r7, rrx
    32bc:	505f4f49 	subspl	r4, pc, r9, asr #30
    32c0:	6f536e69 	svcvs	0x00536e69
    32c4:	65637275 	strbvs	r7, [r3, #-629]!
    32c8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    32cc:	65525f4f 	ldrbvs	r5, [r2, #-3919]
    32d0:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
    32d4:	44747570 	ldrbtmi	r7, [r4], #-1392
    32d8:	00617461 	rsbeq	r7, r1, r1, ror #8
    32dc:	6d706d74 	ldclvs	13, cr6, [r0, #-464]!
    32e0:	006b7361 	rsbeq	r7, fp, r1, ror #6
    32e4:	4f495047 	svcmi	0x00495047
    32e8:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    32ec:	6b636f4c 	blvs	18df024 <__Stack_Size+0x18dec24>
    32f0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    32f4:	63006769 	movwvs	r6, #1897	; 0x769
    32f8:	65727275 	ldrbvs	r7, [r2, #-629]!
    32fc:	6970746e 	ldmdbvs	r0!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    3300:	5047006e 	subpl	r0, r7, lr, rrx
    3304:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
    3308:	65746972 	ldrbvs	r6, [r4, #-2418]!
    330c:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    3310:	50470031 	subpl	r0, r7, r1, lsr r0
    3314:	455f4f49 	ldrbmi	r4, [pc, #-3913]	; 23d3 <__Stack_Size+0x1fd3>
    3318:	4c495458 	cfstrdmi	mvd5, [r9], {88}
    331c:	43656e69 	cmnmi	r5, #1680	; 0x690
    3320:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3324:	69420067 	stmdbvs	r2, {r0, r1, r2, r5, r6}^
    3328:	74634174 	strbtvc	r4, [r3], #-372
    332c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    3330:	5250414d 	subspl	r4, r0, #1073741843	; 0x40000013
    3334:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    3338:	4700784f 	strmi	r7, [r0, -pc, asr #16]
    333c:	5f4f4950 	svcpl	0x004f4950
    3340:	74696e49 	strbtvc	r6, [r9], #-3657
    3344:	75727453 	ldrbvc	r7, [r2, #-1107]!
    3348:	45007463 	strmi	r7, [r0, #-1123]
    334c:	00524356 	subseq	r4, r2, r6, asr r3
    3350:	4f495047 	svcmi	0x00495047
    3354:	6165525f 	cmnvs	r5, pc, asr r2
    3358:	74754f64 	ldrbtvc	r4, [r5], #-3940
    335c:	44747570 	ldrbtmi	r7, [r4], #-1392
    3360:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    3364:	47007469 	strmi	r7, [r0, -r9, ror #8]
    3368:	5f4f4950 	svcpl	0x004f4950
    336c:	4f494641 	svcmi	0x00494641
    3370:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    3374:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    3378:	00524241 	subseq	r4, r2, r1, asr #4
    337c:	4349564e 	movtmi	r5, #38478	; 0x964e
    3380:	656c435f 	strbvs	r4, [ip, #-863]!
    3384:	52497261 	subpl	r7, r9, #268435462	; 0x10000006
    3388:	61684351 	cmnvs	r8, r1, asr r3
    338c:	6c656e6e 	stclvs	14, cr6, [r5], #-440
    3390:	646e6550 	strbtvs	r6, [lr], #-1360
    3394:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    3398:	4e007469 	cdpmi	4, 0, cr7, cr0, cr9, {3}
    339c:	5f434956 	svcpl	0x00434956
    33a0:	74696e49 	strbtvc	r6, [r9], #-3657
    33a4:	75727453 	ldrbvc	r7, [r2, #-1107]!
    33a8:	4e007463 	cdpmi	4, 0, cr7, cr0, cr3, {3}
    33ac:	5f434956 	svcpl	0x00434956
    33b0:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    33b4:	65727275 	ldrbvs	r7, [r2, #-629]!
    33b8:	6550746e 	ldrbvs	r7, [r0, #-1134]
    33bc:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    33c0:	51524967 	cmppl	r2, r7, ror #18
    33c4:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    33c8:	006c656e 	rsbeq	r6, ip, lr, ror #10
    33cc:	4349564e 	movtmi	r5, #38478	; 0x964e
    33d0:	7465475f 	strbtvc	r4, [r5], #-1887
    33d4:	6c756146 	ldfvse	f6, [r5], #-280
    33d8:	64644174 	strbtvs	r4, [r4], #-372
    33dc:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    33e0:	73795300 	cmnvc	r9, #0	; 0x0
    33e4:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    33e8:	6c646e61 	stclvs	14, cr6, [r4], #-388
    33ec:	75537265 	ldrbvc	r7, [r3, #-613]
    33f0:	69725062 	ldmdbvs	r2!, {r1, r5, r6, ip, lr}^
    33f4:	7469726f 	strbtvc	r7, [r9], #-623
    33f8:	564e0079 	undefined
    33fc:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    3400:	52505445 	subspl	r5, r0, #1157627904	; 0x45000000
    3404:	53414d49 	movtpl	r4, #7497	; 0x1d49
    3408:	564e004b 	strbpl	r0, [lr], -fp, asr #32
    340c:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    3410:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    3414:	53657461 	cmnpl	r5, #1627389952	; 0x61000000
    3418:	65747379 	ldrbvs	r7, [r4, #-889]!
    341c:	7365526d 	cmnvc	r5, #-805306362	; 0xd0000006
    3420:	74007465 	strvc	r7, [r0], #-1125
    3424:	7270706d 	rsbsvc	r7, r0, #109	; 0x6d
    3428:	564e0065 	strbpl	r0, [lr], -r5, rrx
    342c:	525f4349 	subspl	r4, pc, #603979777	; 0x24000001
    3430:	54455345 	strbpl	r5, [r5], #-837
    3434:	4d495250 	sfmmi	f5, 2, [r9, #-320]
    3438:	004b5341 	subeq	r5, fp, r1, asr #6
    343c:	6c756166 	ldfvse	f6, [r5], #-408
    3440:	64646174 	strbtvs	r6, [r4], #-372
    3444:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    3448:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    344c:	79535f43 	ldmdbvc	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    3450:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
    3454:	646e6148 	strbtvs	r6, [lr], #-328
    3458:	5072656c 	rsbspl	r6, r2, ip, ror #10
    345c:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    3460:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    3464:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3468:	74730067 	ldrbtvc	r0, [r3], #-103
    346c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3470:	5f783031 	svcpl	0x00783031
    3474:	2f62696c 	svccs	0x0062696c
    3478:	2f637273 	svccs	0x00637273
    347c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3480:	30316632 	eorscc	r6, r1, r2, lsr r6
    3484:	766e5f78 	uqsub16vc	r5, lr, r8
    3488:	632e6369 	teqvs	lr, #-1543503871	; 0xa4000001
    348c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    3490:	65475f43 	strbvs	r5, [r7, #-3907]
    3494:	55504374 	ldrbpl	r4, [r0, #-884]
    3498:	4e004449 	cdpmi	4, 0, cr4, cr0, cr9, {2}
    349c:	5f434956 	svcpl	0x00434956
    34a0:	6f697250 	svcvs	0x00697250
    34a4:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    34a8:	756f7247 	strbvc	r7, [pc, #-583]!	; 3269 <__Stack_Size+0x2e69>
    34ac:	564e0070 	undefined
    34b0:	525f4349 	subspl	r4, pc, #603979777	; 0x24000001
    34b4:	54455345 	strbpl	r5, [r5], #-837
    34b8:	4c554146 	ldfmie	f4, [r5], {70}
    34bc:	53414d54 	movtpl	r4, #7508	; 0x1d54
    34c0:	564e004b 	strbpl	r0, [lr], -fp, asr #32
    34c4:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    34c8:	75437465 	strbvc	r7, [r3, #-1125]
    34cc:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    34d0:	74634174 	strbtvc	r4, [r3], #-372
    34d4:	48657669 	stmdami	r5!, {r0, r3, r5, r6, r9, sl, ip, sp, lr}^
    34d8:	6c646e61 	stclvs	14, cr6, [r4], #-388
    34dc:	53007265 	movwpl	r7, #613	; 0x265
    34e0:	65747379 	ldrbvs	r7, [r4, #-889]!
    34e4:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    34e8:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    34ec:	53434900 	movtpl	r4, #14592	; 0x3900
    34f0:	53520052 	cmppl	r2, #82	; 0x52
    34f4:	45565245 	ldrbmi	r5, [r6, #-581]
    34f8:	4e003144 	adfmism	f3, f0, f4
    34fc:	5f434956 	svcpl	0x00434956
    3500:	656e6547 	strbvs	r6, [lr, #-1351]!
    3504:	65746172 	ldrbvs	r6, [r4, #-370]!
    3508:	65726f43 	ldrbvs	r6, [r2, #-3907]!
    350c:	65736552 	ldrbvs	r6, [r3, #-1362]!
    3510:	564e0074 	undefined
    3514:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    3518:	79537465 	ldmdbvc	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    351c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
    3520:	646e6148 	strbtvs	r6, [lr], #-328
    3524:	4172656c 	cmnmi	r2, ip, ror #10
    3528:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    352c:	74694265 	strbtvc	r4, [r9], #-613
    3530:	74617453 	strbtvc	r7, [r1], #-1107
    3534:	4e007375 	mcrmi	3, 0, r7, cr0, cr5, {3}
    3538:	5f434956 	svcpl	0x00434956
    353c:	45534142 	ldrbmi	r4, [r3, #-322]
    3540:	43495250 	movtmi	r5, #37456	; 0x9250
    3544:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
    3548:	46420047 	strbmi	r0, [r2], -r7, asr #32
    354c:	4e005241 	cdpmi	2, 0, cr5, cr0, cr1, {2}
    3550:	5f434956 	svcpl	0x00434956
    3554:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    3558:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    355c:	656e6e61 	strbvs	r6, [lr, #-3681]!
    3560:	6e65506c 	cdpvs	0, 6, cr5, cr5, cr12, {3}
    3564:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    3568:	00746942 	rsbseq	r6, r4, r2, asr #18
    356c:	70706d74 	rsbsvc	r6, r0, r4, ror sp
    3570:	4300736f 	movwmi	r7, #879	; 0x36f
    3574:	00525346 	subseq	r5, r2, r6, asr #6
    3578:	4349564e 	movtmi	r5, #38478	; 0x964e
    357c:	7465535f 	strbtvc	r5, [r5], #-863
    3580:	74737953 	ldrbtvc	r7, [r3], #-2387
    3584:	61486d65 	cmpvs	r8, r5, ror #26
    3588:	656c646e 	strbvs	r6, [ip, #-1134]!
    358c:	6e655072 	mcrvs	0, 3, r5, cr5, cr2, {3}
    3590:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    3594:	00746942 	rsbseq	r6, r4, r2, asr #18
    3598:	43524941 	cmpmi	r2, #1064960	; 0x104000
    359c:	564e0052 	undefined
    35a0:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    35a4:	65567465 	ldrbvs	r7, [r6, #-1125]
    35a8:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    35ac:	6c626154 	stfvse	f6, [r2], #-336
    35b0:	43490065 	movtmi	r0, #36965	; 0x9065
    35b4:	4e005250 	mcrmi	2, 0, r5, cr0, cr0, {2}
    35b8:	5f434956 	svcpl	0x00434956
    35bc:	74696e49 	strbtvc	r6, [r9], #-3657
    35c0:	50485300 	subpl	r5, r8, r0, lsl #6
    35c4:	48530052 	ldmdami	r3, {r1, r4, r6}^
    35c8:	00525343 	subseq	r5, r2, r3, asr #6
    35cc:	4349564e 	movtmi	r5, #38478	; 0x964e
    35d0:	7465475f 	strbtvc	r4, [r5], #-1887
    35d4:	45534142 	ldrbmi	r4, [r3, #-322]
    35d8:	00495250 	subeq	r5, r9, r0, asr r2
    35dc:	41464d4d 	cmpmi	r6, sp, asr #26
    35e0:	6d740052 	ldclvs	0, cr0, [r4, #-328]!
    35e4:	62757370 	rsbsvs	r7, r5, #-1073741823	; 0xc0000001
    35e8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    35ec:	79535f43 	ldmdbvc	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    35f0:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
    35f4:	646e6148 	strbtvs	r6, [lr], #-328
    35f8:	4372656c 	cmnmi	r2, #452984832	; 0x1b000000
    35fc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3600:	564e0067 	strbpl	r0, [lr], -r7, rrx
    3604:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    3608:	65747379 	ldrbvs	r7, [r4, #-889]!
    360c:	43504c6d 	cmpmi	r0, #27904	; 0x6d00
    3610:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3614:	564e0067 	strbpl	r0, [lr], -r7, rrx
    3618:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    361c:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    3620:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    3624:	43490074 	movtmi	r0, #36980	; 0x9074
    3628:	74005245 	strvc	r5, [r0], #-581
    362c:	7270706d 	rsbsvc	r7, r0, #109	; 0x6d
    3630:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    3634:	56007974 	undefined
    3638:	00524f54 	subseq	r4, r2, r4, asr pc
    363c:	52505349 	subspl	r5, r0, #603979777	; 0x24000001
    3640:	53464400 	movtpl	r4, #25600	; 0x6400
    3644:	46480052 	undefined
    3648:	4e005253 	mcrmi	2, 0, r5, cr0, cr3, {2}
    364c:	5f434956 	svcpl	0x00434956
    3650:	46544553 	undefined
    3654:	544c5541 	strbpl	r5, [ip], #-1345
    3658:	4b53414d 	blmi	14d3b94 <__Stack_Size+0x14d3794>
    365c:	53464100 	movtpl	r4, #24832	; 0x6100
    3660:	53490052 	movtpl	r0, #36946	; 0x9052
    3664:	4e005245 	cdpmi	2, 0, cr5, cr0, cr5, {2}
    3668:	5f434956 	svcpl	0x00434956
    366c:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    3670:	746c7561 	strbtvc	r7, [ip], #-1377
    3674:	646e6148 	strbtvs	r6, [lr], #-328
    3678:	5372656c 	cmnpl	r2, #452984832	; 0x1b000000
    367c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    3680:	74007365 	strvc	r7, [r0], #-869
    3684:	0032706d 	eorseq	r7, r2, sp, rrx
    3688:	4349564e 	movtmi	r5, #38478	; 0x964e
    368c:	7465475f 	strbtvc	r4, [r5], #-1887
    3690:	74737953 	ldrbtvc	r7, [r3], #-2387
    3694:	61486d65 	cmpvs	r8, r5, ror #26
    3698:	656c646e 	strbvs	r6, [ip, #-1134]!
    369c:	6e655072 	mcrvs	0, 3, r5, cr5, cr2, {3}
    36a0:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    36a4:	53746942 	cmnpl	r4, #1081344	; 0x108000
    36a8:	75746174 	ldrbvc	r6, [r4, #-372]!
    36ac:	564e0073 	undefined
    36b0:	435f4349 	cmpmi	pc, #603979777	; 0x24000001
    36b4:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    36b8:	74737953 	ldrbtvc	r7, [r3], #-2387
    36bc:	61486d65 	cmpvs	r8, r5, ror #26
    36c0:	656c646e 	strbvs	r6, [ip, #-1134]!
    36c4:	6e655072 	mcrvs	0, 3, r5, cr5, cr2, {3}
    36c8:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    36cc:	00746942 	rsbseq	r6, r4, r2, asr #18
    36d0:	6c756166 	ldfvse	f6, [r5], #-408
    36d4:	756f7374 	strbvc	r7, [pc, #-884]!	; 3368 <__Stack_Size+0x2f68>
    36d8:	73656372 	cmnvc	r5, #-939524095	; 0xc8000001
    36dc:	73795300 	cmnvc	r9, #0	; 0x0
    36e0:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    36e4:	6c646e61 	stclvs	14, cr6, [r4], #-388
    36e8:	72507265 	subsvc	r7, r0, #1342177286	; 0x50000006
    36ec:	706d6565 	rsbvc	r6, sp, r5, ror #10
    36f0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    36f4:	6f697250 	svcvs	0x00697250
    36f8:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    36fc:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    3700:	65475f43 	strbvs	r5, [r7, #-3907]
    3704:	51524974 	cmppl	r2, r4, ror r9
    3708:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    370c:	506c656e 	rsbpl	r6, ip, lr, ror #10
    3710:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    3714:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    3718:	61745374 	cmnvs	r4, r4, ror r3
    371c:	00737574 	rsbseq	r7, r3, r4, ror r5
    3720:	4349564e 	movtmi	r5, #38478	; 0x964e
    3724:	4243535f 	submi	r5, r3, #2080374785	; 0x7c000001
    3728:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    372c:	4e007469 	cdpmi	4, 0, cr7, cr0, cr9, {3}
    3730:	72507765 	subsvc	r7, r0, #26476544	; 0x1940000
    3734:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    3738:	4e007974 	mcrmi	9, 0, r7, cr0, cr4, {3}
    373c:	5f434956 	svcpl	0x00434956
    3740:	74636556 	strbtvc	r6, [r3], #-1366
    3744:	00626154 	rsbeq	r6, r2, r4, asr r1
    3748:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    374c:	72696576 	rsbvc	r6, r9, #494927872	; 0x1d800000
    3750:	61747371 	cmnvs	r4, r1, ror r3
    3754:	00737574 	rsbseq	r7, r3, r4, ror r5
    3758:	646e6168 	strbtvs	r6, [lr], #-360
    375c:	6d72656c 	cfldr64vs	mvdx6, [r2, #-432]!
    3760:	006b7361 	rsbeq	r7, fp, r1, ror #6
    3764:	50776f4c 	rsbspl	r6, r7, ip, asr #30
    3768:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    376c:	65646f4d 	strbvs	r6, [r4, #-3917]!
    3770:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    3774:	65475f43 	strbvs	r5, [r7, #-3907]
    3778:	51524974 	cmppl	r2, r4, ror r9
    377c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    3780:	416c656e 	cmnmi	ip, lr, ror #10
    3784:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    3788:	74694265 	strbtvc	r4, [r9], #-613
    378c:	74617453 	strbtvc	r7, [r1], #-1107
    3790:	4e007375 	mcrmi	3, 0, r7, cr0, cr5, {3}
    3794:	5f434956 	svcpl	0x00434956
    3798:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    379c:	4e007469 	cdpmi	4, 0, cr7, cr0, cr9, {3}
    37a0:	5f434956 	svcpl	0x00434956
    37a4:	6f697250 	svcvs	0x00697250
    37a8:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    37ac:	756f7247 	strbvc	r7, [pc, #-583]!	; 356d <__Stack_Size+0x316d>
    37b0:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
    37b4:	00676966 	rsbeq	r6, r7, r6, ror #18
    37b8:	646e6570 	strbtvs	r6, [lr], #-1392
    37bc:	69676e69 	stmdbvs	r7!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
    37c0:	74737172 	ldrbtvc	r7, [r3], #-370
    37c4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    37c8:	52575000 	subspl	r5, r7, #0	; 0x0
    37cc:	746e455f 	strbtvc	r4, [lr], #-1375
    37d0:	54537265 	ldrbpl	r7, [r3], #-613
    37d4:	42444e41 	submi	r4, r4, #1040	; 0x410
    37d8:	646f4d59 	strbtvs	r4, [pc], #3417	; 37e0 <__Stack_Size+0x33e0>
    37dc:	57500065 	ldrbpl	r0, [r0, -r5, rrx]
    37e0:	6c435f52 	mcrrvs	15, 5, r5, r3, cr2
    37e4:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    37e8:	0067616c 	rsbeq	r6, r7, ip, ror #2
    37ec:	5f525750 	svcpl	0x00525750
    37f0:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    37f4:	50007469 	andpl	r7, r0, r9, ror #8
    37f8:	525f5257 	subspl	r5, pc, #1879048197	; 0x70000005
    37fc:	6c756765 	ldclvs	7, cr6, [r5], #-404
    3800:	726f7461 	rsbvc	r7, pc, #1627389952	; 0x61000000
    3804:	52575000 	subspl	r5, r7, #0	; 0x0
    3808:	4456505f 	ldrbmi	r5, [r6], #-95
    380c:	6576654c 	ldrbvs	r6, [r6, #-1356]!
    3810:	5750006c 	ldrbpl	r0, [r0, -ip, rrx]
    3814:	4c465f52 	mcrrmi	15, 5, r5, r6, cr2
    3818:	50004741 	andpl	r4, r0, r1, asr #14
    381c:	505f5257 	subspl	r5, pc, r7, asr r2
    3820:	6d434456 	cfstrdvs	mvd4, [r3, #-344]
    3824:	74730064 	ldrbtvc	r0, [r3], #-100
    3828:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    382c:	5f783031 	svcpl	0x00783031
    3830:	2f62696c 	svccs	0x0062696c
    3834:	2f637273 	svccs	0x00637273
    3838:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    383c:	30316632 	eorscc	r6, r1, r2, lsr r6
    3840:	77705f78 	undefined
    3844:	00632e72 	rsbeq	r2, r3, r2, ror lr
    3848:	5f525750 	svcpl	0x00525750
    384c:	4c445650 	mcrrmi	6, 5, r5, r4, cr0
    3850:	6c657665 	stclvs	6, cr7, [r5], #-404
    3854:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3858:	50006769 	andpl	r6, r0, r9, ror #14
    385c:	475f5257 	undefined
    3860:	6c467465 	cfstrdvs	mvd7, [r6], {101}
    3864:	74536761 	ldrbvc	r6, [r3], #-1889
    3868:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    386c:	52575000 	subspl	r5, r7, #0	; 0x0
    3870:	746e455f 	strbtvc	r4, [lr], #-1375
    3874:	54537265 	ldrbpl	r7, [r3], #-613
    3878:	6f4d504f 	svcvs	0x004d504f
    387c:	50006564 	andpl	r6, r0, r4, ror #10
    3880:	535f5257 	cmppl	pc, #1879048197	; 0x70000005
    3884:	45504f54 	ldrbmi	r4, [r0, #-3924]
    3888:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    388c:	52575000 	subspl	r5, r7, #0	; 0x0
    3890:	6361425f 	cmnvs	r1, #-268435451	; 0xf0000005
    3894:	4170756b 	cmnmi	r0, fp, ror #10
    3898:	73656363 	cmnvc	r5, #-1946157055	; 0x8c000001
    389c:	646d4373 	strbtvs	r4, [sp], #-883
    38a0:	52575000 	subspl	r5, r7, #0	; 0x0
    38a4:	6b61575f 	blvs	1859628 <__Stack_Size+0x1859228>
    38a8:	50705565 	rsbspl	r5, r0, r5, ror #10
    38ac:	6d436e69 	stclvs	14, cr6, [r3, #-420]
    38b0:	50410064 	subpl	r0, r1, r4, rrx
    38b4:	53523142 	cmppl	r2, #-2147483632	; 0x80000010
    38b8:	52005254 	andpl	r5, r0, #1073741829	; 0x40000005
    38bc:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^
    38c0:	004b4c43 	subeq	r4, fp, r3, asr #24
    38c4:	5f434352 	svcpl	0x00434352
    38c8:	43434441 	movtmi	r4, #13377	; 0x3441
    38cc:	6f434b4c 	svcvs	0x00434b4c
    38d0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    38d4:	43435200 	movtmi	r5, #12800	; 0x3200
    38d8:	656c435f 	strbvs	r4, [ip, #-863]!
    38dc:	54497261 	strbpl	r7, [r9], #-609
    38e0:	646e6550 	strbtvs	r6, [lr], #-1360
    38e4:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    38e8:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
    38ec:	415f4343 	cmpmi	pc, r3, asr #6
    38f0:	50324250 	eorspl	r4, r2, r0, asr r2
    38f4:	70697265 	rsbvc	r7, r9, r5, ror #4
    38f8:	73655268 	cmnvc	r5, #-2147483642	; 0x80000006
    38fc:	6d437465 	cfstrdvs	mvd7, [r3, #-404]
    3900:	43520064 	cmpmi	r2, #100	; 0x64
    3904:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    3908:	43520045 	cmpmi	r2, #69	; 0x45
    390c:	65475f43 	strbvs	r5, [r7, #-3907]
    3910:	53544974 	cmppl	r4, #1900544	; 0x1d0000
    3914:	75746174 	ldrbvc	r6, [r4, #-372]!
    3918:	44420073 	strbmi	r0, [r2], #-115
    391c:	52005243 	andpl	r5, r0, #805306372	; 0x30000004
    3920:	415f4343 	cmpmi	pc, r3, asr #6
    3924:	50324250 	eorspl	r4, r2, r0, asr r2
    3928:	70697265 	rsbvc	r7, r9, r5, ror #4
    392c:	43520068 	cmpmi	r2, #104	; 0x68
    3930:	43505f43 	cmpmi	r0, #268	; 0x10c
    3934:	00324b4c 	eorseq	r4, r2, ip, asr #22
    3938:	5f434352 	svcpl	0x00434352
    393c:	434c4c50 	movtmi	r4, #52304	; 0xcc50
    3940:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    3944:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    3948:	6b636f6c 	blvs	18df700 <__Stack_Size+0x18df300>
    394c:	70795473 	rsbsvc	r5, r9, r3, ror r4
    3950:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    3954:	43435200 	movtmi	r5, #12800	; 0x3200
    3958:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    395c:	006c754d 	rsbeq	r7, ip, sp, asr #10
    3960:	5f434352 	svcpl	0x00434352
    3964:	50424841 	subpl	r4, r2, r1, asr #16
    3968:	70697265 	rsbvc	r7, r9, r5, ror #4
    396c:	6f6c4368 	svcvs	0x006c4368
    3970:	6d436b63 	vstrvs	d22, [r3, #-396]
    3974:	46430064 	strbmi	r0, [r3], -r4, rrx
    3978:	48005247 	stmdami	r0, {r0, r1, r2, r6, r9, ip, lr}
    397c:	5f4b4c43 	svcpl	0x004b4c43
    3980:	71657246 	cmnvc	r5, r6, asr #4
    3984:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    3988:	50410079 	subpl	r0, r1, r9, ror r0
    398c:	4e453142 	dvfmism	f3, f5, f2
    3990:	72700052 	rsbsvc	r0, r0, #82	; 0x52
    3994:	00637365 	rsbeq	r7, r3, r5, ror #6
    3998:	5f434352 	svcpl	0x00434352
    399c:	434f434d 	movtmi	r4, #62285	; 0xf34d
    39a0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    39a4:	43520067 	cmpmi	r2, #103	; 0x67
    39a8:	65445f43 	strbvs	r5, [r4, #-3907]
    39ac:	74696e49 	strbtvc	r6, [r9], #-3657
    39b0:	43435200 	movtmi	r5, #12800	; 0x3200
    39b4:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    39b8:	726f4674 	rsbvc	r4, pc, #121634816	; 0x7400000
    39bc:	53455348 	movtpl	r5, #21320	; 0x5348
    39c0:	74726174 	ldrbtvc	r6, [r2], #-372
    39c4:	52007055 	andpl	r7, r0, #85	; 0x55
    39c8:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
    39cc:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
    39d0:	756f534b 	strbvc	r5, [pc, #-843]!	; 368d <__Stack_Size+0x328d>
    39d4:	00656372 	rsbeq	r6, r5, r2, ror r3
    39d8:	5f434352 	svcpl	0x00434352
    39dc:	31425041 	cmpcc	r2, r1, asr #32
    39e0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    39e4:	65526870 	ldrbvs	r6, [r2, #-2160]
    39e8:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    39ec:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    39f0:	505f4343 	subspl	r4, pc, r3, asr #6
    39f4:	6f434c4c 	svcvs	0x00434c4c
    39f8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    39fc:	6c6c7000 	stclvs	0, cr7, [ip]
    3a00:	6c6c756d 	cfstr64vs	mvdx7, [ip], #-436
    3a04:	43435200 	movtmi	r5, #12800	; 0x3200
    3a08:	4253555f 	subsmi	r5, r3, #398458880	; 0x17c00000
    3a0c:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    3a10:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3a14:	43520067 	cmpmi	r2, #103	; 0x67
    3a18:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    3a1c:	646d4349 	strbtvs	r4, [sp], #-841
    3a20:	43435200 	movtmi	r5, #12800	; 0x3200
    3a24:	7465475f 	strbtvc	r4, [r5], #-1887
    3a28:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    3a2c:	6f534b4c 	svcvs	0x00534b4c
    3a30:	65637275 	strbvs	r7, [r3, #-629]!
    3a34:	42504100 	subsmi	r4, r0, #0	; 0x0
    3a38:	54535232 	ldrbpl	r5, [r3], #-562
    3a3c:	43520052 	cmpmi	r2, #82	; 0x52
    3a40:	50415f43 	subpl	r5, r1, r3, asr #30
    3a44:	65503142 	ldrbvs	r3, [r0, #-322]
    3a48:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    3a4c:	6c6c7000 	stclvs	0, cr7, [ip]
    3a50:	72756f73 	rsbsvc	r6, r5, #460	; 0x1cc
    3a54:	41006563 	tstmi	r0, r3, ror #10
    3a58:	4e454248 	cdpmi	2, 4, cr4, cr5, cr8, {2}
    3a5c:	43520052 	cmpmi	r2, #82	; 0x52
    3a60:	43505f43 	cmpmi	r0, #268	; 0x10c
    3a64:	43314b4c 	teqmi	r1, #77824	; 0x13000
    3a68:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3a6c:	74730067 	ldrbtvc	r0, [r3], #-103
    3a70:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    3a74:	00676572 	rsbeq	r6, r7, r2, ror r5
    3a78:	5f434352 	svcpl	0x00434352
    3a7c:	31425041 	cmpcc	r2, r1, asr #32
    3a80:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3a84:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    3a88:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    3a8c:	4100646d 	tstmi	r0, sp, ror #8
    3a90:	45324250 	ldrmi	r4, [r2, #-592]!
    3a94:	5300524e 	movwpl	r5, #590	; 0x24e
    3a98:	74726174 	ldrbtvc	r6, [r2], #-372
    3a9c:	6f437055 	svcvs	0x00437055
    3aa0:	65746e75 	ldrbvs	r6, [r4, #-3701]!
    3aa4:	43520072 	cmpmi	r2, #114	; 0x72
    3aa8:	61425f43 	cmpvs	r2, r3, asr #30
    3aac:	70756b63 	rsbsvc	r6, r5, r3, ror #22
    3ab0:	65736552 	ldrbvs	r6, [r3, #-1362]!
    3ab4:	646d4374 	strbtvs	r4, [sp], #-884
    3ab8:	43435200 	movtmi	r5, #12800	; 0x3200
    3abc:	6a64415f 	bvs	1914040 <__Stack_Size+0x1913c40>
    3ac0:	48747375 	ldmdami	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
    3ac4:	61434953 	cmpvs	r3, r3, asr r9
    3ac8:	7262696c 	rsbvc	r6, r2, #1769472	; 0x1b0000
    3acc:	6f697461 	svcvs	0x00697461
    3ad0:	6c61566e 	stclvs	6, cr5, [r1], #-440
    3ad4:	41006575 	tstmi	r0, r5, ror r5
    3ad8:	4c434344 	mcrrmi	3, 4, r4, r3, cr4
    3adc:	72465f4b 	subvc	r5, r6, #300	; 0x12c
    3ae0:	65757165 	ldrbvs	r7, [r5, #-357]!
    3ae4:	0079636e 	rsbseq	r6, r9, lr, ror #6
    3ae8:	5f434352 	svcpl	0x00434352
    3aec:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    3af0:	43435200 	movtmi	r5, #12800	; 0x3200
    3af4:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    3af8:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    3afc:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    3b00:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    3b04:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    3b08:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    3b0c:	00676966 	rsbeq	r6, r7, r6, ror #18
    3b10:	5f434352 	svcpl	0x00434352
    3b14:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    3b18:	5367616c 	cmnpl	r7, #27	; 0x1b
    3b1c:	75746174 	ldrbvc	r6, [r4, #-372]!
    3b20:	43520073 	cmpmi	r2, #115	; 0x73
    3b24:	54525f43 	ldrbpl	r5, [r2], #-3907
    3b28:	4b4c4343 	blmi	131483c <__Stack_Size+0x131443c>
    3b2c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3b30:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    3b34:	555f4343 	ldrbpl	r4, [pc, #-835]	; 37f9 <__Stack_Size+0x33f9>
    3b38:	4c434253 	sfmmi	f4, 2, [r3], {83}
    3b3c:	756f534b 	strbvc	r5, [pc, #-843]!	; 37f9 <__Stack_Size+0x33f9>
    3b40:	00656372 	rsbeq	r6, r5, r2, ror r3
    3b44:	5f434352 	svcpl	0x00434352
    3b48:	61656c43 	cmnvs	r5, r3, asr #24
    3b4c:	616c4672 	smcvs	50274
    3b50:	43520067 	cmpmi	r2, #103	; 0x67
    3b54:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    3b58:	4b4c4353 	blmi	13148ac <__Stack_Size+0x13144ac>
    3b5c:	45534800 	ldrbmi	r4, [r3, #-2048]
    3b60:	74617453 	strbtvc	r7, [r1], #-1107
    3b64:	52007375 	andpl	r7, r0, #-738197503	; 0xd4000001
    3b68:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^
    3b6c:	6f434553 	svcvs	0x00434553
    3b70:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3b74:	53595300 	cmppl	r9, #0	; 0x0
    3b78:	5f4b4c43 	svcpl	0x004b4c43
    3b7c:	71657246 	cmnvc	r5, r6, asr #4
    3b80:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    3b84:	43520079 	cmpmi	r2, #121	; 0x79
    3b88:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    3b8c:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    3b90:	4c435000 	marmi	acc0, r5, r3
    3b94:	465f324b 	ldrbmi	r3, [pc], -fp, asr #4
    3b98:	75716572 	ldrbvc	r6, [r1, #-1394]!
    3b9c:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    3ba0:	43435200 	movtmi	r5, #12800	; 0x3200
    3ba4:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    3ba8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3bac:	43520067 	cmpmi	r2, #103	; 0x67
    3bb0:	50415f43 	subpl	r5, r1, r3, asr #30
    3bb4:	65503242 	ldrbvs	r3, [r0, #-578]
    3bb8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    3bbc:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    3bc0:	646d436b 	strbtvs	r4, [sp], #-875
    3bc4:	43435200 	movtmi	r5, #12800	; 0x3200
    3bc8:	4553485f 	ldrbmi	r4, [r3, #-2143]
    3bcc:	43435200 	movtmi	r5, #12800	; 0x3200
    3bd0:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
    3bd4:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    3bd8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    3bdc:	43500065 	cmpmi	r0, #101	; 0x65
    3be0:	5f314b4c 	svcpl	0x00314b4c
    3be4:	71657246 	cmnvc	r5, r6, asr #4
    3be8:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    3bec:	43520079 	cmpmi	r2, #121	; 0x79
    3bf0:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    3bf4:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
    3bf8:	00676966 	rsbeq	r6, r7, r6, ror #18
    3bfc:	41425041 	cmpmi	r2, r1, asr #32
    3c00:	72504248 	subsvc	r4, r0, #-2147483644	; 0x80000004
    3c04:	54637365 	strbtpl	r7, [r3], #-869
    3c08:	656c6261 	strbvs	r6, [ip, #-609]!
    3c0c:	43435200 	movtmi	r5, #12800	; 0x3200
    3c10:	7465475f 	strbtvc	r4, [r5], #-1887
    3c14:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    3c18:	7246736b 	subvc	r7, r6, #-1409286143	; 0xac000001
    3c1c:	73007165 	movwvc	r7, #357	; 0x165
    3c20:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    3c24:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    3c28:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    3c2c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    3c30:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!
    3c34:	31663233 	cmncc	r6, r3, lsr r2
    3c38:	725f7830 	subsvc	r7, pc, #3145728	; 0x300000
    3c3c:	632e6363 	teqvs	lr, #-1946157055	; 0x8c000001
    3c40:	43435200 	movtmi	r5, #12800	; 0x3200
    3c44:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    3c48:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    3c4c:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    3c50:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    3c54:	6b636f6c 	blvs	18dfa0c <__Stack_Size+0x18df60c>
    3c58:	75636553 	strbvc	r6, [r3, #-1363]!
    3c5c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    3c60:	74737953 	ldrbtvc	r7, [r3], #-2387
    3c64:	6d436d65 	stclvs	13, cr6, [r3, #-404]
    3c68:	43520064 	cmpmi	r2, #100	; 0x64
    3c6c:	43485f43 	movtmi	r5, #36675	; 0x8f43
    3c70:	6f434b4c 	svcvs	0x00434b4c
    3c74:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3c78:	43435200 	movtmi	r5, #12800	; 0x3200
    3c7c:	4953485f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, fp, lr}^
    3c80:	00646d43 	rsbeq	r6, r4, r3, asr #26
    3c84:	5f434352 	svcpl	0x00434352
    3c88:	004f434d 	subeq	r4, pc, sp, asr #6
    3c8c:	5f434352 	svcpl	0x00434352
    3c90:	52005449 	andpl	r5, r0, #1224736768	; 0x49000000
    3c94:	415f4343 	cmpmi	pc, r3, asr #6
    3c98:	65504248 	ldrbvs	r4, [r0, #-584]
    3c9c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    3ca0:	43435200 	movtmi	r5, #12800	; 0x3200
    3ca4:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
    3ca8:	6f43324b 	svcvs	0x0043324b
    3cac:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3cb0:	43444100 	movtmi	r4, #16640	; 0x4100
    3cb4:	73657250 	cmnvc	r5, #5	; 0x5
    3cb8:	62615463 	rsbvs	r5, r1, #1660944384	; 0x63000000
    3cbc:	5300656c 	movwpl	r6, #1388	; 0x56c
    3cc0:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    3cc4:	475f6b63 	ldrbmi	r6, [pc, -r3, ror #22]
    3cc8:	6f437465 	svcvs	0x00437465
    3ccc:	65746e75 	ldrbvs	r6, [r4, #-3701]!
    3cd0:	79530072 	ldmdbvc	r3, {r1, r4, r5, r6}^
    3cd4:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    3cd8:	65535f6b 	ldrbvs	r5, [r3, #-3947]
    3cdc:	6c655274 	sfmvs	f5, 2, [r5], #-464
    3ce0:	0064616f 	rsbeq	r6, r4, pc, ror #2
    3ce4:	54737953 	ldrbtpl	r7, [r3], #-2387
    3ce8:	5f6b6369 	svcpl	0x006b6369
    3cec:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    3cf0:	5367616c 	cmnpl	r7, #27	; 0x1b
    3cf4:	75746174 	ldrbvc	r6, [r4, #-372]!
    3cf8:	79530073 	ldmdbvc	r3, {r0, r1, r4, r5, r6}^
    3cfc:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    3d00:	4c465f6b 	mcrrmi	15, 6, r5, r6, cr11
    3d04:	43004741 	movwmi	r4, #1857	; 0x741
    3d08:	42494c41 	submi	r4, r9, #16640	; 0x4100
    3d0c:	6d747300 	ldclvs	3, cr7, [r4]
    3d10:	31663233 	cmncc	r6, r3, lsr r2
    3d14:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    3d18:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    3d1c:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    3d20:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    3d24:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    3d28:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    3d2c:	6b636974 	blvs	18de304 <__Stack_Size+0x18ddf04>
    3d30:	4300632e 	movwmi	r6, #814	; 0x32e
    3d34:	004c5254 	subeq	r5, ip, r4, asr r2
    3d38:	54737953 	ldrbtpl	r7, [r3], #-2387
    3d3c:	5f6b6369 	svcpl	0x006b6369
    3d40:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    3d44:	43726574 	cmnmi	r2, #486539264	; 0x1d000000
    3d48:	5300646d 	movwpl	r6, #1133	; 0x46d
    3d4c:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    3d50:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    3d54:	746e756f 	strbtvc	r7, [lr], #-1391
    3d58:	53007265 	movwpl	r7, #613	; 0x265
    3d5c:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    3d60:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    3d64:	6f534b4c 	svcvs	0x00534b4c
    3d68:	65637275 	strbvs	r7, [r3, #-629]!
    3d6c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3d70:	53006769 	movwpl	r6, #1897	; 0x769
    3d74:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    3d78:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    3d7c:	6f534b4c 	svcvs	0x00534b4c
    3d80:	65637275 	strbvs	r7, [r3, #-629]!
    3d84:	73795300 	cmnvc	r9, #0	; 0x0
    3d88:	6b636954 	blvs	18de2e0 <__Stack_Size+0x18ddee0>
    3d8c:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    3d90:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3d94:	6e690067 	cdpvs	0, 6, cr0, cr9, cr7, {3}
    3d98:	65676574 	strbvs	r6, [r7, #-1396]!
    3d9c:	76696472 	undefined
    3da0:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
    3da4:	41535500 	cmpmi	r3, r0, lsl #10
    3da8:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    3dac:	00414850 	subeq	r4, r1, r0, asr r8
    3db0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3db4:	65535f54 	ldrbvs	r5, [r3, #-3924]
    3db8:	65725074 	ldrbvs	r5, [r2, #-116]!
    3dbc:	6c616373 	stclvs	3, cr6, [r1], #-460
    3dc0:	55007265 	strpl	r7, [r0, #-613]
    3dc4:	54524153 	ldrbpl	r4, [r2], #-339
    3dc8:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    3dcc:	53550074 	cmppl	r5, #116	; 0x74
    3dd0:	5f545241 	svcpl	0x00545241
    3dd4:	424e494c 	submi	r4, lr, #1245184	; 0x130000
    3dd8:	6b616572 	blvs	185d3a8 <__Stack_Size+0x185cfa8>
    3ddc:	65746544 	ldrbvs	r6, [r4, #-1348]!
    3de0:	654c7463 	strbvs	r7, [ip, #-1123]
    3de4:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    3de8:	41535500 	cmpmi	r3, r0, lsl #10
    3dec:	545f5452 	ldrbpl	r5, [pc], #1106	; 3df4 <__Stack_Size+0x39f4>
    3df0:	44657079 	strbtmi	r7, [r5], #-121
    3df4:	55006665 	strpl	r6, [r0, #-1637]
    3df8:	54524153 	ldrbpl	r4, [r2], #-339
    3dfc:	6f6c435f 	svcvs	0x006c435f
    3e00:	6e496b63 	fnmacdvs	d22, d9, d19
    3e04:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    3e08:	65446570 	strbvs	r6, [r4, #-1392]
    3e0c:	53550066 	cmppl	r5, #102	; 0x66
    3e10:	5f545241 	svcpl	0x00545241
    3e14:	00646d43 	rsbeq	r6, r4, r3, asr #26
    3e18:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3e1c:	65535f54 	ldrbvs	r5, [r3, #-3924]
    3e20:	6144646e 	cmpvs	r4, lr, ror #8
    3e24:	55006174 	strpl	r6, [r0, #-372]
    3e28:	54524153 	ldrbpl	r4, [r2], #-339
    3e2c:	6c61485f 	stclvs	8, cr4, [r1], #-380
    3e30:	70754466 	rsbsvc	r4, r5, r6, ror #8
    3e34:	4378656c 	cmnmi	r8, #452984832	; 0x1b000000
    3e38:	5500646d 	strpl	r6, [r0, #-1133]
    3e3c:	54524153 	ldrbpl	r4, [r2], #-339
    3e40:	6b61575f 	blvs	1859bc4 <__Stack_Size+0x18597c4>
    3e44:	00705565 	rsbseq	r5, r0, r5, ror #10
    3e48:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3e4c:	4d445f54 	stclmi	15, cr5, [r4, #-336]
    3e50:	646d4341 	strbtvs	r4, [sp], #-833
    3e54:	41535500 	cmpmi	r3, r0, lsl #10
    3e58:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}
    3e5c:	42747361 	rsbsmi	r7, r4, #-2080374783	; 0x84000001
    3e60:	55007469 	strpl	r7, [r0, #-1129]
    3e64:	54524153 	ldrbpl	r4, [r2], #-339
    3e68:	4472495f 	ldrbtmi	r4, [r2], #-2399
    3e6c:	646f4d41 	strbtvs	r4, [pc], #3393	; 3e74 <__Stack_Size+0x3a74>
    3e70:	70610065 	rsbvc	r0, r1, r5, rrx
    3e74:	6f6c6362 	svcvs	0x006c6362
    3e78:	55006b63 	strpl	r6, [r0, #-2915]
    3e7c:	54524153 	ldrbpl	r4, [r2], #-339
    3e80:	656c435f 	strbvs	r4, [ip, #-863]!
    3e84:	54497261 	strbpl	r7, [r9], #-609
    3e88:	646e6550 	strbtvs	r6, [lr], #-1360
    3e8c:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    3e90:	55007469 	strpl	r7, [r0, #-1129]
    3e94:	54524153 	ldrbpl	r4, [r2], #-339
    3e98:	6175475f 	cmnvs	r5, pc, asr r7
    3e9c:	69546472 	ldmdbvs	r4, {r1, r4, r5, r6, sl, sp, lr}^
    3ea0:	5500656d 	strpl	r6, [r0, #-1389]
    3ea4:	54524153 	ldrbpl	r4, [r2], #-339
    3ea8:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    3eac:	61657242 	cmnvs	r5, r2, asr #4
    3eb0:	7465446b 	strbtvc	r4, [r5], #-1131
    3eb4:	4c746365 	ldclmi	3, cr6, [r4], #-404
    3eb8:	74676e65 	strbtvc	r6, [r7], #-3685
    3ebc:	6e6f4368 	cdpvs	3, 6, cr4, cr15, cr8, {3}
    3ec0:	00676966 	rsbeq	r6, r7, r6, ror #18
    3ec4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3ec8:	4c465f54 	mcrrmi	15, 5, r5, r6, cr4
    3ecc:	55004741 	strpl	r4, [r0, #-1857]
    3ed0:	54524153 	ldrbpl	r4, [r2], #-339
    3ed4:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    3ed8:	0074696e 	rsbseq	r6, r4, lr, ror #18
    3edc:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3ee0:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    3ee4:	496b636f 	stmdbmi	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    3ee8:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    3eec:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    3ef0:	53550074 	cmppl	r5, #116	; 0x74
    3ef4:	5f545241 	svcpl	0x00545241
    3ef8:	52414d44 	subpl	r4, r1, #4352	; 0x1100
    3efc:	55007165 	strpl	r7, [r0, #-357]
    3f00:	54524153 	ldrbpl	r4, [r2], #-339
    3f04:	6f6c435f 	svcvs	0x006c435f
    3f08:	74536b63 	ldrbvc	r6, [r3], #-2915
    3f0c:	74637572 	strbtvc	r7, [r3], #-1394
    3f10:	74696e49 	strbtvc	r6, [r9], #-3657
    3f14:	61737500 	cmnvs	r3, r0, lsl #10
    3f18:	62787472 	rsbsvs	r7, r8, #1912602624	; 0x72000000
    3f1c:	00657361 	rsbeq	r7, r5, r1, ror #6
    3f20:	5f434352 	svcpl	0x00434352
    3f24:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    3f28:	7453736b 	ldrbvc	r7, [r3], #-875
    3f2c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    3f30:	41535500 	cmpmi	r3, r0, lsl #10
    3f34:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    3f38:	64417465 	strbvs	r7, [r1], #-1125
    3f3c:	73657264 	cmnvc	r5, #1073741830	; 0x40000006
    3f40:	53550073 	cmppl	r5, #115	; 0x73
    3f44:	5f545241 	svcpl	0x00545241
    3f48:	47746553 	undefined
    3f4c:	64726175 	ldrbtvs	r6, [r2], #-373
    3f50:	656d6954 	strbvs	r6, [sp, #-2388]!
    3f54:	41535500 	cmpmi	r3, r0, lsl #10
    3f58:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    3f5c:	42646e65 	rsbmi	r6, r4, #1616	; 0x650
    3f60:	6b616572 	blvs	185d530 <__Stack_Size+0x185d130>
    3f64:	41535500 	cmpmi	r3, r0, lsl #10
    3f68:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^
    3f6c:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    3f70:	00676966 	rsbeq	r6, r7, r6, ror #18
    3f74:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3f78:	55007854 	strpl	r7, [r0, #-2132]
    3f7c:	54524153 	ldrbpl	r4, [r2], #-339
    3f80:	616d535f 	cmnvs	sp, pc, asr r3
    3f84:	61437472 	cmpvs	r3, r2, ror r4
    3f88:	6d436472 	cfstrdvs	mvd6, [r3, #-456]
    3f8c:	53550064 	cmppl	r5, #100	; 0x64
    3f90:	5f545241 	svcpl	0x00545241
    3f94:	74696e49 	strbtvc	r6, [r9], #-3657
    3f98:	75727453 	ldrbvc	r7, [r2, #-1107]!
    3f9c:	55007463 	strpl	r7, [r0, #-1123]
    3fa0:	54524153 	ldrbpl	r4, [r2], #-339
    3fa4:	6464415f 	strbtvs	r4, [r4], #-351
    3fa8:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    3fac:	74696200 	strbtvc	r6, [r9], #-512
    3fb0:	00736f70 	rsbseq	r6, r3, r0, ror pc
    3fb4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3fb8:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    3fbc:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    3fc0:	0067616c 	rsbeq	r6, r7, ip, ror #2
    3fc4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3fc8:	65475f54 	strbvs	r5, [r7, #-3924]
    3fcc:	53544974 	cmppl	r4, #1900544	; 0x1d0000
    3fd0:	75746174 	ldrbvc	r6, [r4, #-372]!
    3fd4:	53550073 	cmppl	r5, #115	; 0x73
    3fd8:	5f545241 	svcpl	0x00545241
    3fdc:	41447249 	cmpmi	r4, r9, asr #4
    3fe0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3fe4:	55006769 	strpl	r6, [r0, #-1897]
    3fe8:	54524153 	ldrbpl	r4, [r2], #-339
    3fec:	6f6c435f 	svcvs	0x006c435f
    3ff0:	55006b63 	strpl	r6, [r0, #-2915]
    3ff4:	54524153 	ldrbpl	r4, [r2], #-339
    3ff8:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    3ffc:	65766965 	ldrbvs	r6, [r6, #-2405]!
    4000:	6b615772 	blvs	1859dd0 <__Stack_Size+0x18599d0>
    4004:	43705565 	cmnmi	r0, #423624704	; 0x19400000
    4008:	5500646d 	strpl	r6, [r0, #-1133]
    400c:	54524153 	ldrbpl	r4, [r2], #-339
    4010:	4472495f 	ldrbtmi	r4, [r2], #-2399
    4014:	646d4341 	strbtvs	r4, [sp], #-833
    4018:	41535500 	cmpmi	r3, r0, lsl #10
    401c:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}
    4020:	6d434e49 	stclvs	14, cr4, [r3, #-292]
    4024:	72660064 	rsbvc	r0, r6, #100	; 0x64
    4028:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    402c:	6c616e6f 	stclvs	14, cr6, [r1], #-444
    4030:	69766964 	ldmdbvs	r6!, {r2, r5, r6, r8, fp, sp, lr}^
    4034:	00726564 	rsbseq	r6, r2, r4, ror #10
    4038:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    403c:	6d535f54 	ldclvs	15, cr5, [r3, #-336]
    4040:	43747261 	cmnmi	r4, #268435462	; 0x10000006
    4044:	4e647261 	cdpmi	2, 6, cr7, cr4, cr1, {3}
    4048:	434b4341 	movtmi	r4, #45889	; 0xb341
    404c:	5500646d 	strpl	r6, [r0, #-1133]
    4050:	54524153 	ldrbpl	r4, [r2], #-339
    4054:	7465475f 	strbtvc	r4, [r5], #-1887
    4058:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    405c:	74617453 	strbtvc	r7, [r1], #-1107
    4060:	55007375 	strpl	r7, [r0, #-885]
    4064:	54524153 	ldrbpl	r4, [r2], #-339
    4068:	0054495f 	subseq	r4, r4, pc, asr r9
    406c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    4070:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    4074:	496b636f 	stmdbmi	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    4078:	0074696e 	rsbseq	r6, r4, lr, ror #18
    407c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    4080:	61575f54 	cmpvs	r7, r4, asr pc
    4084:	7055656b 	subsvc	r6, r5, fp, ror #10
    4088:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    408c:	55006769 	strpl	r6, [r0, #-1897]
    4090:	54524153 	ldrbpl	r4, [r2], #-339
    4094:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    4098:	65766965 	ldrbvs	r6, [r6, #-2405]!
    409c:	61746144 	cmnvs	r4, r4, asr #2
    40a0:	41535500 	cmpmi	r3, r0, lsl #10
    40a4:	505f5452 	subspl	r5, pc, r2, asr r4
    40a8:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    40ac:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    40b0:	41535500 	cmpmi	r3, r0, lsl #10
    40b4:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    40b8:	004c4f50 	subeq	r4, ip, r0, asr pc
    40bc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    40c0:	30316632 	eorscc	r6, r1, r2, lsr r6
    40c4:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    40c8:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    40cc:	74732f63 	ldrbtvc	r2, [r3], #-3939
    40d0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    40d4:	5f783031 	svcpl	0x00783031
    40d8:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
    40dc:	00632e74 	rsbeq	r2, r3, r4, ror lr
    40e0:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
    40e4:	67657274 	undefined
    40e8:	41535500 	cmpmi	r3, r0, lsl #10
    40ec:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    40f0:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    40f4:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    40f8:	655f0074 	ldrbvs	r0, [pc, #-116]	; 408c <__Stack_Size+0x3c8c>
    40fc:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    4100:	735f006b 	cmpvc	pc, #107	; 0x6b
    4104:	61746164 	cmnvs	r4, r4, ror #2
    4108:	73655200 	cmnvc	r5, #0	; 0x0
    410c:	485f7465 	ldmdami	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^
    4110:	6c646e61 	stclvs	14, cr6, [r4], #-388
    4114:	70007265 	andvc	r7, r0, r5, ror #4
    4118:	65446c75 	strbvs	r6, [r4, #-3189]
    411c:	5f007473 	svcpl	0x00007473
    4120:	61646973 	smcvs	18067
    4124:	5f006174 	svcpl	0x00006174
    4128:	73736265 	cmnvc	r3, #1342177286	; 0x50000006
    412c:	64655f00 	strbtvs	r5, [r5], #-3840
    4130:	00617461 	rsbeq	r7, r1, r1, ror #8
    4134:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    4138:	30316632 	eorscc	r6, r1, r2, lsr r6
    413c:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4140:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    4144:	74732f63 	ldrbtvc	r2, [r3], #-3939
    4148:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    414c:	5f783031 	svcpl	0x00783031
    4150:	74636576 	strbtvc	r6, [r3], #-1398
    4154:	632e726f 	teqvs	lr, #-268435450	; 0xf0000006
    4158:	705f6700 	subsvc	r6, pc, r0, lsl #14
    415c:	65566e66 	ldrbvs	r6, [r6, #-3686]
    4160:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    4164:	75700073 	ldrbvc	r0, [r0, #-115]!
    4168:	6372536c 	cmnvs	r2, #-1342177279	; 0xb0000001
    416c:	62735f00 	rsbsvs	r5, r3, #0	; 0x0
    4170:	6c007373 	stcvs	3, cr7, [r0], {115}
    4174:	20676e6f 	rsbcs	r6, r7, pc, ror #28
    4178:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
    417c:	746e6920 	strbtvc	r6, [lr], #-2336
    4180:	5c3a6300 	ldcpl	3, cr6, [sl]
    4184:	616e6977 	smcvs	59031
    4188:	5c736d72 	ldclpl	13, cr6, [r3], #-456
    418c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    4190:	63675c64 	cmnvs	r7, #25600	; 0x6400
    4194:	75622d63 	strbvc	r2, [r2, #-3427]!
    4198:	5c646c69 	stclpl	12, cr6, [r4], #-420
    419c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!
    41a0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    41a4:	77656e5c 	undefined
    41a8:	5c62696c 	stclpl	9, cr6, [r2], #-432
    41ac:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    41b0:	6474735c 	ldrbtvs	r7, [r4], #-860
    41b4:	0062696c 	rsbeq	r6, r2, ip, ror #18
    41b8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    41bc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    41c0:	2f2e2e2f 	svccs	0x002e2e2f
    41c4:	672f2e2e 	strvs	r2, [pc, -lr, lsr #28]!
    41c8:	342d6363 	strtcc	r6, [sp], #-867
    41cc:	302e332e 	eorcc	r3, lr, lr, lsr #6
    41d0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    41d4:	2f62696c 	svccs	0x0062696c
    41d8:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    41dc:	6474732f 	ldrbtvs	r7, [r4], #-815
    41e0:	2f62696c 	svccs	0x0062696c
    41e4:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    41e8:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
    41ec:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
    41f0:	6f6c2067 	svcvs	0x006c2067
    41f4:	7520676e 	strvc	r6, [r0, #-1902]!
    41f8:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
    41fc:	2064656e 	rsbcs	r6, r4, lr, ror #10
    4200:	00746e69 	rsbseq	r6, r4, r9, ror #28
    4204:	74655f5f 	strbtvc	r5, [r5], #-3935
    4208:	6178635f 	cmnvs	r8, pc, asr r3
    420c:	655f5f00 	ldrbvs	r5, [pc, #-3840]	; 3314 <__Stack_Size+0x2f14>
    4210:	6e6f5f74 	mcrvs	15, 3, r5, cr15, cr4, {3}
    4214:	74697865 	strbtvc	r7, [r9], #-2149
    4218:	615f5f00 	cmpvs	pc, r0, lsl #30
    421c:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    4220:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4224:	00736570 	rsbseq	r6, r3, r0, ror r5
    4228:	74655f5f 	strbtvc	r5, [r5], #-3935
    422c:	6574615f 	ldrbvs	r6, [r4, #-351]!
    4230:	00746978 	rsbseq	r6, r4, r8, ror r9
    4234:	6f73645f 	svcvs	0x0073645f
    4238:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
    423c:	00656c64 	rsbeq	r6, r5, r4, ror #24
    4240:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4244:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4248:	2f2e2e2f 	svccs	0x002e2e2f
    424c:	672f2e2e 	strvs	r2, [pc, -lr, lsr #28]!
    4250:	342d6363 	strtcc	r6, [sp], #-867
    4254:	302e332e 	eorcc	r3, lr, lr, lsr #6
    4258:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    425c:	2f62696c 	svccs	0x0062696c
    4260:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    4264:	6474732f 	ldrbtvs	r7, [r4], #-815
    4268:	2f62696c 	svccs	0x0062696c
    426c:	74697865 	strbtvc	r7, [r9], #-2149
    4270:	5f00632e 	svcpl	0x0000632e
    4274:	657a6973 	ldrbvs	r6, [sl, #-2419]!
    4278:	61725f00 	cmnvs	r2, r0, lsl #30
    427c:	3834646e 	ldmdacc	r4!, {r1, r2, r3, r5, r6, sl, sp, lr}
    4280:	6d655f00 	stclvs	15, cr5, [r5]
    4284:	65677265 	strbvs	r7, [r7, #-613]!
    4288:	0079636e 	rsbseq	r6, r9, lr, ror #6
    428c:	7263775f 	rsbvc	r7, r3, #24903680	; 0x17c0000
    4290:	626d6f74 	rsbvs	r6, sp, #464	; 0x1d0
    4294:	6174735f 	cmnvs	r4, pc, asr r3
    4298:	5f006574 	svcpl	0x00006574
    429c:	72736377 	rsbsvc	r6, r3, #-603979775	; 0xdc000001
    42a0:	626d6f74 	rsbvs	r6, sp, #464	; 0x1d0
    42a4:	74735f73 	ldrbtvc	r5, [r3], #-3955
    42a8:	00657461 	rsbeq	r7, r5, r1, ror #8
    42ac:	66626c5f 	undefined
    42b0:	657a6973 	ldrbvs	r6, [sl, #-2419]!
    42b4:	626d5f00 	rsbvs	r5, sp, #0	; 0x0
    42b8:	776f7472 	undefined
    42bc:	74735f63 	ldrbtvc	r5, [r3], #-3939
    42c0:	00657461 	rsbeq	r7, r5, r1, ror #8
    42c4:	7463775f 	strbtvc	r7, [r3], #-1887
    42c8:	5f626d6f 	svcpl	0x00626d6f
    42cc:	74617473 	strbtvc	r7, [r1], #-1139
    42d0:	5f5f0065 	svcpl	0x005f0065
    42d4:	735f6d74 	cmpvc	pc, #7424	; 0x1d00
    42d8:	5f006365 	svcpl	0x00006365
    42dc:	66756275 	undefined
    42e0:	61625f00 	cmnvs	r2, r0, lsl #30
    42e4:	5f006573 	svcpl	0x00006573
    42e8:	5f6d745f 	svcpl	0x006d745f
    42ec:	72756f68 	rsbsvc	r6, r5, #416	; 0x1a0
    42f0:	735f5f00 	cmpvc	pc, #0	; 0x0
    42f4:	6f5f0066 	svcvs	0x005f0066
    42f8:	78655f6e 	stmdavc	r5!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    42fc:	615f7469 	cmpvs	pc, r9, ror #8
    4300:	00736772 	rsbseq	r6, r3, r2, ror r7
    4304:	6f6f635f 	svcvs	0x006f635f
    4308:	0065696b 	rsbeq	r6, r5, fp, ror #18
    430c:	67735f5f 	undefined
    4310:	0065756c 	rsbeq	r7, r5, ip, ror #10
    4314:	616c665f 	cmnvs	ip, pc, asr r6
    4318:	5f007367 	svcpl	0x00007367
    431c:	635f7369 	cmpvs	pc, #-1543503871	; 0xa4000001
    4320:	5f006178 	svcpl	0x00006178
    4324:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4328:	625f006e 	subsvs	r0, pc, #110	; 0x6e
    432c:	69736b6c 	ldmdbvs	r3!, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^
    4330:	5f00657a 	svcpl	0x0000657a
    4334:	62747663 	rsbsvs	r7, r4, #103809024	; 0x6300000
    4338:	5f006675 	svcpl	0x00006675
    433c:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
    4340:	5f007465 	svcpl	0x00007465
    4344:	7273626d 	rsbsvc	r6, r3, #-805306362	; 0xd0000006
    4348:	63776f74 	cmnvs	r7, #464	; 0x1d0
    434c:	74735f73 	ldrbtvc	r5, [r3], #-3955
    4350:	00657461 	rsbeq	r7, r5, r1, ror #8
    4354:	72626d5f 	rsbvc	r6, r2, #6080	; 0x17c0
    4358:	5f6e656c 	svcpl	0x006e656c
    435c:	74617473 	strbtvc	r7, [r1], #-1139
    4360:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
    4364:	6772616e 	ldrbvs	r6, [r2, -lr, ror #2]!
    4368:	665f0073 	undefined
    436c:	5f00736e 	svcpl	0x0000736e
    4370:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    4374:	6c665f00 	stclvs	15, cr5, [r6]
    4378:	5f6b636f 	svcpl	0x006b636f
    437c:	735f0074 	cmpvc	pc, #116	; 0x74
    4380:	72656474 	rsbvc	r6, r5, #1946157056	; 0x74000000
    4384:	425f0072 	subsmi	r0, pc, #114	; 0x72
    4388:	6e696769 	cdpvs	7, 6, cr6, cr9, cr9, {3}
    438c:	725f0074 	subsvc	r0, pc, #116	; 0x74
    4390:	00646165 	rsbeq	r6, r4, r5, ror #2
    4394:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
    4398:	5f746c75 	svcpl	0x00746c75
    439c:	5f5f006b 	svcpl	0x005f006b
    43a0:	5f006d74 	svcpl	0x00006d74
    43a4:	6863775f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    43a8:	735f0062 	cmpvc	pc, #98	; 0x62
    43ac:	756f6474 	strbvc	r6, [pc, #-1140]!	; 3f40 <__Stack_Size+0x3b40>
    43b0:	635f0074 	cmpvs	pc, #116	; 0x74
    43b4:	656c7476 	strbvs	r7, [ip, #-1142]!
    43b8:	665f006e 	ldrbvs	r0, [pc], -lr, rrx
    43bc:	00656c69 	rsbeq	r6, r5, r9, ror #24
    43c0:	6f696e5f 	svcvs	0x00696e5f
    43c4:	5f007362 	svcpl	0x00007362
    43c8:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    43cc:	00307469 	eorseq	r7, r0, r9, ror #8
    43d0:	6769735f 	undefined
    43d4:	5f6c616e 	svcpl	0x006c616e
    43d8:	00667562 	rsbeq	r7, r6, r2, ror #10
    43dc:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
    43e0:	656d6974 	strbvs	r6, [sp, #-2420]!
    43e4:	6675625f 	undefined
    43e8:	775f5f00 	ldrbvc	r5, [pc, -r0, lsl #30]
    43ec:	77006863 	strvc	r6, [r0, -r3, ror #16]
    43f0:	5f746e69 	svcpl	0x00746e69
    43f4:	6c5f0074 	mrrcvs	0, 7, r0, pc, cr4
    43f8:	006b636f 	rsbeq	r6, fp, pc, ror #6
    43fc:	6c756d5f 	ldclvs	13, cr6, [r5], #-380
    4400:	775f0074 	undefined
    4404:	65746972 	ldrbvs	r6, [r4, #-2418]!
    4408:	745f5f00 	ldrbvc	r5, [pc], #3840	; 4410 <__Stack_Size+0x4010>
    440c:	65795f6d 	ldrbvs	r5, [r9, #-3949]!
    4410:	5f007261 	svcpl	0x00007261
    4414:	7478656e 	ldrbtvc	r6, [r8], #-1390
    4418:	5f5f0066 	svcpl	0x005f0066
    441c:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]
    4420:	5f006e6f 	svcpl	0x00006e6f
    4424:	6964735f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
    4428:	696e6964 	stmdbvs	lr!, {r2, r5, r6, r8, fp, sp, lr}^
    442c:	675f0074 	undefined
    4430:	616d6d61 	cmnvs	sp, r1, ror #26
    4434:	6769735f 	undefined
    4438:	6d61676e 	stclvs	7, cr6, [r1, #-440]!
    443c:	72665f00 	rsbvc	r5, r6, #0	; 0x0
    4440:	696c6565 	stmdbvs	ip!, {r0, r2, r5, r6, r8, sl, sp, lr}^
    4444:	5f007473 	svcpl	0x00007473
    4448:	4b434f4c 	blmi	10d8180 <__Stack_Size+0x10d7d80>
    444c:	4345525f 	movtmi	r5, #21087	; 0x525f
    4450:	49535255 	ldmdbmi	r3, {r0, r2, r4, r6, r9, ip, lr}^
    4454:	545f4556 	ldrbpl	r4, [pc], #1366	; 445c <__Stack_Size+0x405c>
    4458:	656e5f00 	strbvs	r5, [lr, #-3840]!
    445c:	5f5f0077 	svcpl	0x005f0077
    4460:	795f6d74 	ldmdbvc	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    4464:	00796164 	rsbseq	r6, r9, r4, ror #2
    4468:	62735f5f 	rsbsvs	r5, r3, #380	; 0x17c
    446c:	5f006675 	svcpl	0x00006675
    4470:	73626f69 	cmnvc	r2, #420	; 0x1a4
    4474:	465f5f00 	ldrbmi	r5, [pc], -r0, lsl #30
    4478:	00454c49 	subeq	r4, r5, r9, asr #24
    447c:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
    4480:	65746174 	ldrbvs	r6, [r4, #-372]!
    4484:	5f00745f 	svcpl	0x0000745f
    4488:	4946735f 	stmdbmi	r6, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
    448c:	5f00454c 	svcpl	0x0000454c
    4490:	646e6172 	strbtvs	r6, [lr], #-370
    4494:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
    4498:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]
    449c:	6e656c62 	cdpvs	12, 6, cr6, cr5, cr2, {3}
    44a0:	6174735f 	cmnvs	r4, pc, asr r3
    44a4:	5f006574 	svcpl	0x00006574
    44a8:	00636e69 	rsbeq	r6, r3, r9, ror #28
    44ac:	646e695f 	strbtvs	r6, [lr], #-2399
    44b0:	75635f00 	strbvc	r5, [r3, #-3840]!
    44b4:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    44b8:	6f6c5f74 	svcvs	0x006c5f74
    44bc:	656c6163 	strbvs	r6, [ip, #-355]!
    44c0:	635f5f00 	cmpvs	pc, #0	; 0x0
    44c4:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
    44c8:	5f007075 	svcpl	0x00007075
    44cc:	7778616d 	ldrbvc	r6, [r8, -sp, ror #2]!
    44d0:	5f007364 	svcpl	0x00007364
    44d4:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    44d8:	735f0074 	cmpvc	pc, #116	; 0x74
    44dc:	00646565 	rsbeq	r6, r4, r5, ror #10
    44e0:	6f635f5f 	svcvs	0x00635f5f
    44e4:	00746e75 	rsbseq	r6, r4, r5, ror lr
    44e8:	61765f5f 	cmnvs	r6, pc, asr pc
    44ec:	0065756c 	rsbeq	r7, r5, ip, ror #10
    44f0:	6565735f 	strbvs	r7, [r5, #-863]!
    44f4:	665f006b 	ldrbvs	r0, [pc], -fp, rrx
    44f8:	5f736f70 	svcpl	0x00736f70
    44fc:	655f0074 	ldrbvs	r0, [pc, #-116]	; 4490 <__Stack_Size+0x4090>
    4500:	6f6e7272 	svcvs	0x006e7272
    4504:	745f5f00 	ldrbvc	r5, [pc], #3840	; 450c <__Stack_Size+0x410c>
    4508:	696d5f6d 	stmdbvs	sp!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    450c:	735f006e 	cmpvc	pc, #110	; 0x6e
    4510:	6f747274 	svcvs	0x00747274
    4514:	616c5f6b 	cmnvs	ip, fp, ror #30
    4518:	5f007473 	svcpl	0x00007473
    451c:	79746e66 	ldmdbvc	r4!, {r1, r2, r5, r6, r9, sl, fp, sp, lr}^
    4520:	00736570 	rsbseq	r6, r3, r0, ror r5
    4524:	6464615f 	strbtvs	r6, [r4], #-351
    4528:	555f5f00 	ldrbpl	r5, [pc, #-3840]	; 3630 <__Stack_Size+0x3230>
    452c:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
    4530:	65675f00 	strbvs	r5, [r7, #-3840]!
    4534:	74616474 	strbtvc	r6, [r1], #-1140
    4538:	72655f65 	rsbvc	r5, r5, #404	; 0x194
    453c:	675f0072 	undefined
    4540:	61626f6c 	cmnvs	r2, ip, ror #30
    4544:	6d695f6c 	stclvs	15, cr5, [r9, #-432]!
    4548:	65727570 	ldrbvs	r7, [r2, #-1392]!
    454c:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
    4550:	75635f00 	strbvc	r5, [r3, #-3840]!
    4554:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    4558:	61635f74 	smcvs	13812
    455c:	6f676574 	svcvs	0x00676574
    4560:	63007972 	movwvs	r7, #2418	; 0x972
    4564:	0065646f 	rsbeq	r6, r5, pc, ror #8
    4568:	756e755f 	strbvc	r7, [lr, #-1375]!
    456c:	5f646573 	svcpl	0x00646573
    4570:	646e6172 	strbtvs	r6, [lr], #-370
    4574:	64775f00 	ldrbtvs	r5, [r7], #-3840
    4578:	5f5f0073 	svcpl	0x005f0073
    457c:	775f6d74 	undefined
    4580:	00796164 	rsbseq	r6, r9, r4, ror #2
    4584:	756c675f 	strbvc	r6, [ip, #-1887]!
    4588:	6e5f0065 	cdpvs	0, 5, cr0, cr15, cr5, {3}
    458c:	6c6c616d 	stfvse	f6, [ip], #-436
    4590:	5f00636f 	svcpl	0x0000636f
    4594:	6134366c 	teqvs	r4, ip, ror #12
    4598:	6675625f 	undefined
    459c:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
    45a0:	75665f67 	strbvc	r5, [r6, #-3943]!
    45a4:	5f00636e 	svcpl	0x0000636e
    45a8:	6675626e 	ldrbtvs	r6, [r5], -lr, ror #4
    45ac:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
    45b0:	64657375 	strbtvs	r7, [r5], #-885
    45b4:	745f5f00 	ldrbvc	r5, [pc], #3840	; 45bc <__Stack_Size+0x41bc>
    45b8:	73695f6d 	cmnvc	r9, #436	; 0x1b4
    45bc:	00747364 	rsbseq	r7, r4, r4, ror #6
    45c0:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    45c4:	69746c61 	ldmdbvs	r4!, {r0, r5, r6, sl, fp, sp, lr}^
    45c8:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
    45cc:	5f006675 	svcpl	0x00006675
    45d0:	00383472 	eorseq	r3, r8, r2, ror r4
    45d4:	74626d5f 	strbtvc	r6, [r2], #-3423
    45d8:	5f63776f 	svcpl	0x0063776f
    45dc:	74617473 	strbtvc	r7, [r1], #-1139
    45e0:	705f0065 	subsvc	r0, pc, r5, rrx
    45e4:	5f007335 	svcpl	0x00007335
    45e8:	5f6d745f 	svcpl	0x006d745f
    45ec:	7961646d 	stmdbvc	r1!, {r0, r2, r3, r5, r6, sl, sp, lr}^
    45f0:	706d6900 	rsbvc	r6, sp, r0, lsl #18
    45f4:	5f657275 	svcpl	0x00657275
    45f8:	61746164 	cmnvs	r4, r4, ror #2
    45fc:	2f2e2e00 	svccs	0x002e2e00
    4600:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4604:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4608:	2f2e2e2f 	svccs	0x002e2e2f
    460c:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    4610:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    4614:	656e2f30 	strbvs	r2, [lr, #-3888]!
    4618:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    461c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4620:	65722f63 	ldrbvs	r2, [r2, #-3939]!
    4624:	2f746e65 	svccs	0x00746e65
    4628:	75706d69 	ldrbvc	r6, [r0, #-3433]!
    462c:	632e6572 	teqvs	lr, #478150656	; 0x1c800000
    4630:	5c3a6300 	ldcpl	3, cr6, [sl]
    4634:	616e6977 	smcvs	59031
    4638:	5c736d72 	ldclpl	13, cr6, [r3], #-456
    463c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    4640:	63675c64 	cmnvs	r7, #25600	; 0x6400
    4644:	75622d63 	strbvc	r2, [r2, #-3427]!
    4648:	5c646c69 	stclpl	12, cr6, [r4], #-420
    464c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!
    4650:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    4654:	77656e5c 	undefined
    4658:	5c62696c 	stclpl	9, cr6, [r2], #-432
    465c:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    4660:	6565725c 	strbvs	r7, [r5, #-604]!
    4664:	5f00746e 	svcpl	0x0000746e
    4668:	6e69665f 	mcrvs	6, 3, r6, cr9, cr15, {2}
    466c:	72615f69 	rsbvc	r5, r1, #420	; 0x1a4
    4670:	5f796172 	svcpl	0x00796172
    4674:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    4678:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
    467c:	745f657a 	ldrbvc	r6, [pc], #1402	; 4684 <__Stack_Size+0x4284>
    4680:	665f5f00 	ldrbvs	r5, [pc], -r0, lsl #30
    4684:	5f696e69 	svcpl	0x00696e69
    4688:	61727261 	cmnvs	r2, r1, ror #4
    468c:	6e655f79 	mcrvs	15, 3, r5, cr5, cr9, {3}
    4690:	5f5f0064 	svcpl	0x005f0064
    4694:	69657270 	stmdbvs	r5!, {r4, r5, r6, r9, ip, sp, lr}^
    4698:	5f74696e 	svcpl	0x0074696e
    469c:	61727261 	cmnvs	r2, r1, ror #4
    46a0:	6e655f79 	mcrvs	15, 3, r5, cr5, cr9, {3}
    46a4:	2e2e0064 	cdpcs	0, 2, cr0, cr14, cr4, {3}
    46a8:	2f2e2e2f 	svccs	0x002e2e2f
    46ac:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    46b0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    46b4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    46b8:	332e342d 	teqcc	lr, #754974720	; 0x2d000000
    46bc:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    46c0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    46c4:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    46c8:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!
    46cc:	2f637369 	svccs	0x00637369
    46d0:	74696e69 	strbtvc	r6, [r9], #-3689
    46d4:	5f00632e 	svcpl	0x0000632e
    46d8:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    46dc:	72615f74 	rsbvc	r5, r1, #464	; 0x1d0
    46e0:	5f796172 	svcpl	0x00796172
    46e4:	00646e65 	rsbeq	r6, r4, r5, ror #28
    46e8:	696c5f5f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    46ec:	695f6362 	ldmdbvs	pc, {r1, r5, r6, r8, r9, sp, lr}^
    46f0:	5f74696e 	svcpl	0x0074696e
    46f4:	61727261 	cmnvs	r2, r1, ror #4
    46f8:	3a630079 	bcc	18c48e4 <__Stack_Size+0x18c44e4>
    46fc:	6e69775c 	mcrvs	7, 3, r7, cr9, cr12, {2}
    4700:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    4704:	6975625c 	ldmdbvs	r5!, {r2, r3, r4, r6, r9, sp, lr}^
    4708:	675c646c 	ldrbvs	r6, [ip, -ip, ror #8]
    470c:	622d6363 	eorvs	r6, sp, #-1946157055	; 0x8c000001
    4710:	646c6975 	strbtvs	r6, [ip], #-2421
    4714:	6d72615c 	ldfvse	f6, [r2, #-368]!
    4718:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    471c:	656e5c69 	strbvs	r5, [lr, #-3177]!
    4720:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4724:	62696c5c 	rsbvs	r6, r9, #23552	; 0x5c00
    4728:	696d5c63 	stmdbvs	sp!, {r0, r1, r5, r6, sl, fp, ip, lr}^
    472c:	5f006373 	svcpl	0x00006373
    4730:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    4734:	69665f63 	stmdbvs	r6!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    4738:	615f696e 	cmpvs	pc, lr, ror #18
    473c:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
    4740:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    4744:	6e696572 	mcrvs	5, 3, r6, cr9, cr2, {3}
    4748:	615f7469 	cmpvs	pc, r9, ror #8
    474c:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
    4750:	6174735f 	cmnvs	r4, pc, asr r3
    4754:	5f007472 	svcpl	0x00007472
    4758:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    475c:	72615f74 	rsbvc	r5, r1, #464	; 0x1d0
    4760:	5f796172 	svcpl	0x00796172
    4764:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    4768:	6c610074 	stclvs	0, cr0, [r1], #-464
    476c:	656e6769 	strbvs	r6, [lr, #-1897]!
    4770:	72735f64 	rsbsvc	r5, r3, #400	; 0x190
    4774:	72730063 	rsbsvc	r0, r3, #99	; 0x63
    4778:	61003063 	tstvs	r0, r3, rrx
    477c:	6e67696c 	cdpvs	9, 6, cr6, cr7, cr12, {3}
    4780:	645f6465 	ldrbvs	r6, [pc], #1125	; 4788 <__Stack_Size+0x4388>
    4784:	64007473 	strvs	r7, [r0], #-1139
    4788:	00307473 	eorseq	r7, r0, r3, ror r4
    478c:	775c3a63 	ldrbvc	r3, [ip, -r3, ror #20]
    4790:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
    4794:	625c736d 	subsvs	r7, ip, #-1275068415	; 0xb4000001
    4798:	646c6975 	strbtvs	r6, [ip], #-2421
    479c:	6363675c 	cmnvs	r3, #24117248	; 0x1700000
    47a0:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
    47a4:	615c646c 	cmpvs	ip, ip, ror #8
    47a8:	652d6d72 	strvs	r6, [sp, #-3442]!
    47ac:	5c696261 	sfmpl	f6, 2, [r9], #-388
    47b0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    47b4:	6c5c6269 	lfmvs	f6, 2, [ip], {105}
    47b8:	5c636269 	sfmpl	f6, 2, [r3], #-420
    47bc:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    47c0:	6d00676e 	stcvs	7, cr6, [r0, #-440]
    47c4:	70636d65 	rsbvc	r6, r3, r5, ror #26
    47c8:	656c0079 	strbvs	r0, [ip, #-121]!
    47cc:	2e00306e 	cdpcs	0, 0, cr3, cr0, cr14, {3}
    47d0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    47d4:	2f2e2e2f 	svccs	0x002e2e2f
    47d8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    47dc:	63672f2e 	cmnvs	r7, #184	; 0xb8
    47e0:	2e342d63 	cdpcs	13, 3, cr2, cr4, cr3, {3}
    47e4:	2f302e33 	svccs	0x00302e33
    47e8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    47ec:	6c2f6269 	sfmvs	f6, 4, [pc], #-420
    47f0:	2f636269 	svccs	0x00636269
    47f4:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    47f8:	6d2f676e 	stcvs	7, cr6, [pc, #-440]!
    47fc:	70636d65 	rsbvc	r6, r3, r5, ror #26
    4800:	00632e79 	rsbeq	r2, r3, r9, ror lr
    4804:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    4808:	5f64656e 	svcpl	0x0064656e
    480c:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
    4810:	2f2e2e00 	svccs	0x002e2e00
    4814:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4818:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    481c:	2f2e2e2f 	svccs	0x002e2e2f
    4820:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    4824:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    4828:	656e2f30 	strbvs	r2, [lr, #-3888]!
    482c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4830:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4834:	74732f63 	ldrbtvc	r2, [r3], #-3939
    4838:	676e6972 	undefined
    483c:	6d656d2f 	stclvs	13, cr6, [r5, #-188]!
    4840:	2e746573 	mrccs	5, 3, r6, cr4, cr3, {3}
    4844:	656d0063 	strbvs	r0, [sp, #-99]!
    4848:	7465736d 	strbtvc	r7, [r5], #-877
    484c:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    4850:	00726566 	rsbseq	r6, r2, r6, ror #10
    4854:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4858:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    485c:	2f2e2e2f 	svccs	0x002e2e2f
    4860:	672f2e2e 	strvs	r2, [pc, -lr, lsr #28]!
    4864:	342d6363 	strtcc	r6, [sp], #-867
    4868:	302e332e 	eorcc	r3, lr, lr, lsr #6
    486c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4870:	2f62696c 	svccs	0x0062696c
    4874:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    4878:	6474732f 	ldrbtvs	r7, [r4], #-815
    487c:	2f62696c 	svccs	0x0062696c
    4880:	74615f5f 	strbtvc	r5, [r1], #-3935
    4884:	74697865 	strbtvc	r7, [r9], #-2149
    4888:	7400632e 	strvc	r6, [r0], #-814
    488c:	00657079 	rsbeq	r7, r5, r9, ror r0
    4890:	65725f5f 	ldrbvs	r5, [r2, #-3935]!
    4894:	74736967 	ldrbtvc	r6, [r3], #-2407
    4898:	655f7265 	ldrbvs	r7, [pc, #-613]	; 463b <__Stack_Size+0x423b>
    489c:	70746978 	rsbsvc	r6, r4, r8, ror r9
    48a0:	00636f72 	rsbeq	r6, r3, r2, ror pc
    48a4:	61635f5f 	cmnvs	r3, pc, asr pc
    48a8:	655f6c6c 	ldrbvs	r6, [pc, #-3180]	; 3c44 <__Stack_Size+0x3844>
    48ac:	70746978 	rsbsvc	r6, r4, r8, ror r9
    48b0:	73636f72 	cmnvc	r3, #456	; 0x1c8
    48b4:	2f2e2e00 	svccs	0x002e2e00
    48b8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    48bc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    48c0:	2f2e2e2f 	svccs	0x002e2e2f
    48c4:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    48c8:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    48cc:	656e2f30 	strbvs	r2, [lr, #-3888]!
    48d0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    48d4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    48d8:	74732f63 	ldrbtvc	r2, [r3], #-3939
    48dc:	62696c64 	rsbvs	r6, r9, #25600	; 0x6400
    48e0:	635f5f2f 	cmpvs	pc, #188	; 0xbc
    48e4:	5f6c6c61 	svcpl	0x006c6c61
    48e8:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    48ec:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
    48f0:	73616c00 	cmnvc	r1, #0	; 0x0
    48f4:	72007074 	andvc	r7, r0, #116	; 0x74
    48f8:	61747365 	cmnvs	r4, r5, ror #6
    48fc:	Address 0x000048fc is out of bounds.


Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000000 	andeq	r0, r0, r0
       4:	00000002 	andeq	r0, r0, r2
       8:	025d0001 	subseq	r0, sp, #1	; 0x1
       c:	04000000 	streq	r0, [r0]
      10:	02000000 	andeq	r0, r0, #0	; 0x0
      14:	04147d00 	ldreq	r7, [r4], #-3328
      18:	08000000 	stmdaeq	r0, {}
      1c:	02000003 	andeq	r0, r0, #3	; 0x3
      20:	00187d00 	andseq	r7, r8, r0, lsl #26
      24:	00000000 	andeq	r0, r0, r0
      28:	76000000 	strvc	r0, [r0], -r0
      2c:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
      30:	01000000 	tsteq	r0, r0
      34:	00a25000 	adceq	r5, r2, r0
      38:	00aa0000 	adceq	r0, sl, r0
      3c:	00010000 	andeq	r0, r1, r0
      40:	0000d250 	andeq	sp, r0, r0, asr r2
      44:	0000d800 	andeq	sp, r0, r0, lsl #16
      48:	50000100 	andpl	r0, r0, r0, lsl #2
      4c:	000001a4 	andeq	r0, r0, r4, lsr #3
      50:	000001aa 	andeq	r0, r0, sl, lsr #3
      54:	b8500001 	ldmdalt	r0, {r0}^
      58:	be000001 	cdplt	0, 0, cr0, cr0, cr1, {0}
      5c:	01000001 	tsteq	r0, r1
      60:	020a5000 	andeq	r5, sl, #0	; 0x0
      64:	020c0000 	andeq	r0, ip, #0	; 0x0
      68:	00010000 	andeq	r0, r1, r0
      6c:	00000050 	andeq	r0, r0, r0, asr r0
      70:	00000000 	andeq	r0, r0, r0
      74:	00013800 	andeq	r3, r1, r0, lsl #16
      78:	00013c00 	andeq	r3, r1, r0, lsl #24
      7c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
      88:	00000104 	.word	0x00000104
      8c:	00000106 	.word	0x00000106
      90:	065d0001 	.word	0x065d0001
      94:	08000001 	.word	0x08000001
      98:	02000001 	.word	0x02000001
      9c:	08047d00 	.word	0x08047d00
      a0:	10000001 	.word	0x10000001
      a4:	02000001 	.word	0x02000001
      a8:	00087d00 	.word	0x00087d00
      ac:	00000000 	.word	0x00000000
      b0:	10000000 	.word	0x10000000
      b4:	12000001 	.word	0x12000001
      b8:	01000001 	.word	0x01000001
      bc:	01125d00 	.word	0x01125d00
      c0:	01140000 	.word	0x01140000
      c4:	00020000 	.word	0x00020000
      c8:	0114047d 	.word	0x0114047d
      cc:	011c0000 	.word	0x011c0000
      d0:	00020000 	.word	0x00020000
      d4:	0000087d 	.word	0x0000087d
      d8:	00000000 	.word	0x00000000
      dc:	011c0000 	.word	0x011c0000
      e0:	011e0000 	.word	0x011e0000
      e4:	00010000 	.word	0x00010000
      e8:	00011e5d 	.word	0x00011e5d
      ec:	00012000 	.word	0x00012000
      f0:	7d000200 	.word	0x7d000200
      f4:	00012004 	.word	0x00012004
      f8:	00012800 	.word	0x00012800
      fc:	7d000200 	.word	0x7d000200
     100:	00000008 	.word	0x00000008
     104:	00000000 	.word	0x00000000
     108:	00012800 	.word	0x00012800
/* set up for an interpolation from pose to nextpose over TIME
 milliseconds by setting servo speeds. */
void BioloidControllerEx_interpolateSetup(int time) {
	int i;
	int frames = (time/frameLength) + 1;
	nextframe_ = getMillis() + frameLength;
     10c:	00012a00 	.word	0x00012a00
	PrintString("BioloidEX BioloidControllerEx_interpolateSetup nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// set speed each servo...
	for (i = 0; i < poseSize; i++) {
     110:	5d000100 	.word	0x5d000100
/* set up for an interpolation from pose to nextpose over TIME
 milliseconds by setting servo speeds. */
void BioloidControllerEx_interpolateSetup(int time) {
	int i;
	int frames = (time/frameLength) + 1;
	nextframe_ = getMillis() + frameLength;
     114:	0000012a 	.word	0x0000012a
     118:	0000012c 	.word	0x0000012c
	PrintString("BioloidEX BioloidControllerEx_interpolateSetup nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// set speed each servo...
	for (i = 0; i < poseSize; i++) {
     11c:	047d0002 	.word	0x047d0002
     120:	0000012c 	.word	0x0000012c
     124:	00000134 	.word	0x00000134
		if (nextpose_[i] > pose_[i]) {
     128:	087d0002 	.word	0x087d0002
	...
			speed_[i] = (nextpose_[i] - pose_[i]) / frames + 1;
		} else {
			speed_[i] = (pose_[i] - nextpose_[i]) / frames + 1;
     134:	00000090 	.word	0x00000090
     138:	00000098 	.word	0x00000098
     13c:	9a500001 	.word	0x9a500001
	PrintString("BioloidEX BioloidControllerEx_interpolateSetup nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// set speed each servo...
	for (i = 0; i < poseSize; i++) {
     140:	bc000000 	.word	0xbc000000
     144:	01000000 	.word	0x01000000
		PrintString(" - ");
		TxD_Dec_U16(speed_[i]);
		PrintString("\n");
#endif
	}
	interpolating = 1;
     148:	00005000 	.word	0x00005000
     14c:	00000000 	.word	0x00000000
}
     150:	00980000 	.word	0x00980000
     154:	00a80000 	.word	0x00a80000
     158:	00010000 	.word	0x00010000
     15c:	00000050 	.word	0x00000050
     160:	00000000 	.word	0x00000000
     164:	0000a800 	.word	0x0000a800
     168:	0000ba00 	.word	0x0000ba00
	PrintString("\n");
#endif
}

/* new-style setup */
void Bioloid_Setup(int servo_cnt) {
     16c:	50000100 	.word	0x50000100
	...
	/**id_ = (unsigned char *) malloc(servo_cnt * sizeof(unsigned char));
	 pose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
     178:	000000c4 	.word	0x000000c4
	for (i = 0; i < poseSize; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
     17c:	000000d2 	.word	0x000000d2
     180:	d25d0001 	.word	0xd25d0001
		nextpose_[i] = 512;
     184:	24000000 	.word	0x24000000
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
	for (i = 0; i < poseSize; i++) {
		id_[i] = i + 1;
     188:	02000002 	.word	0x02000002
		pose_[i] = 512;
     18c:	000c7d00 	.word	0x000c7d00
		nextpose_[i] = 512;
     190:	00000000 	.word	0x00000000
	 pose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
	for (i = 0; i < poseSize; i++) {
     194:	24000000 	.word	0x24000000
     198:	26000002 	.word	0x26000002
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
	}
	interpolating = 0;
     19c:	01000002 	.word	0x01000002
     1a0:	02265d00 	.word	0x02265d00
	nextframe_ = getMillis();
     1a4:	02320000 	.word	0x02320000
     1a8:	00020000 	.word	0x00020000
#ifdef MILLIS
	PrintString("BioloidEX nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
}
     1ac:	0232047d 	.word	0x0232047d
     1b0:	02580000 	.word	0x02580000
     1b4:	00020000 	.word	0x00020000
     1b8:	0000087d 	.word	0x0000087d
     1bc:	00000000 	.word	0x00000000
     1c0:	02580000 	.word	0x02580000
     1c4:	025a0000 	.word	0x025a0000
transition_t * sequence;                    // sequence we are running
int transitions;                    // how many transitions we have left to load


//  initializes serial1 transmit at baud, 8-N-1
void BioloidControllerEx() {
     1c8:	00010000 	.word	0x00010000
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
     1cc:	00025a5d 	.word	0x00025a5d
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
     1d0:	00053400 	.word	0x00053400
transition_t * sequence;                    // sequence we are running
int transitions;                    // how many transitions we have left to load


//  initializes serial1 transmit at baud, 8-N-1
void BioloidControllerEx() {
     1d4:	7d000200 	.word	0x7d000200
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
     1d8:	0000000c 	.word	0x0000000c
	 pose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
     1dc:	00000000 	.word	0x00000000
     1e0:	00025800 	.word	0x00025800
		pose_[i] = 512;
		nextpose_[i] = 512;
     1e4:	00026200 	.word	0x00026200
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
     1e8:	50000100 	.word	0x50000100
	...
		nextpose_[i] = 512;
	}
	frameLength = BIOLOID_FRAME_LENGTH;
     1f4:	0000026e 	.word	0x0000026e
     1f8:	00000308 	.word	0x00000308
	interpolating = 0;
     1fc:	08500001 	.word	0x08500001
	nextframe_ = getMillis();
     200:	1e000003 	.word	0x1e000003
     204:	01000003 	.word	0x01000003
#ifdef MILLIS
	PrintString("BioloidEX nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
}
     208:	031e5200 	.word	0x031e5200
     20c:	03240000 	.word	0x03240000
     210:	00010000 	.word	0x00010000
     214:	00036450 	.word	0x00036450
     218:	00036a00 	.word	0x00036a00
     21c:	50000100 	.word	0x50000100
     220:	0000036a 	.word	0x0000036a
#endif
		mDelay(25);
	}
}
/* write pose out to servos using sync write. */
void BioloidControllerEx_writePose() {
     224:	00000382 	.word	0x00000382
     228:	c0520001 	.word	0xc0520001
	int temp;
	dxl_set_txpacket_id (BROADCAST_ID);
     22c:	c2000003 	.word	0xc2000003
	dxl_set_txpacket_instruction (INST_SYNC_WRITE);
     230:	01000003 	.word	0x01000003
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
     234:	03c25200 	.word	0x03c25200
     238:	03cc0000 	.word	0x03cc0000
	dxl_set_txpacket_parameter(1, 2);
     23c:	00010000 	.word	0x00010000
     240:	00042853 	.word	0x00042853
     244:	00044000 	.word	0x00044000
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
     248:	50000100 	.word	0x50000100
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
     24c:	0000047e 	.word	0x0000047e
     250:	00000482 	.word	0x00000482
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
     254:	82520001 	.word	0x82520001
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
     258:	a2000004 	.word	0xa2000004
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
		//temp = pose_[i] >> BIOLOID_SHIFT;
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
     25c:	01000004 	.word	0x01000004
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
     260:	04d45100 	.word	0x04d45100
     264:	04d80000 	.word	0x04d80000
     268:	00010000 	.word	0x00010000
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
     26c:	00051851 	.word	0x00051851
     270:	00053400 	.word	0x00053400
     274:	50000100 	.word	0x50000100
	...
	dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction (INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
	dxl_set_txpacket_parameter(1, 2);
	int i;
	for (i = 0; i < poseSize; i++) {
     280:	00000534 	.word	0x00000534
     284:	00000536 	.word	0x00000536
     288:	365d0001 	.word	0x365d0001
		temp = pose_[i];
		dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(temp));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(temp));
	}
	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
     28c:	e0000005 	.word	0xe0000005
     290:	02000005 	.word	0x02000005
     294:	00087d00 	.word	0x00087d00
	dxl_txrx_packet();
     298:	00000000 	.word	0x00000000
	u16 CommStatus = dxl_get_result();
     29c:	e0000000 	.word	0xe0000000
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
     2a0:	e4000005 	.word	0xe4000005
		PrintErrorCode();
     2a4:	01000005 	.word	0x01000005
	else
		PrintCommStatus(CommStatus);
     2a8:	05e45d00 	.word	0x05e45d00
#endif
}
     2ac:	068c0000 	.word	0x068c0000
     2b0:	00020000 	.word	0x00020000
     2b4:	00000c7d 	.word	0x00000c7d
     2b8:	00000000 	.word	0x00000000
	}
	interpolating = 1;
}
/* interpolate our pose, this should be called at about 30Hz. */
#define WAIT_SLOP_FACTOR 10
int BioloidControllerEx_interpolateStep(bool fWait) {
     2bc:	068c0000 	.word	0x068c0000
     2c0:	06900000 	.word	0x06900000

	if (interpolating == 0)
     2c4:	00010000 	.word	0x00010000
		return 0;
	int i;
	int complete = poseSize;
     2c8:	0006905d 	.word	0x0006905d
	if (!fWait) {
     2cc:	00081000 	.word	0x00081000
		if (getMillis() < (nextframe_ - WAIT_SLOP_FACTOR)) {
     2d0:	7d000200 	.word	0x7d000200
     2d4:	00000010 	.word	0x00000010
     2d8:	00000000 	.word	0x00000000
			return (getMillis() - nextframe_); // We still have some time to do something...
     2dc:	00068c00 	.word	0x00068c00
     2e0:	0006a000 	.word	0x0006a000
     2e4:	50000100 	.word	0x50000100
#ifdef MILLIS
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	while (getMillis() < nextframe_);
     2e8:	000006be 	.word	0x000006be
     2ec:	000006ca 	.word	0x000006ca
     2f0:	ca500001 	.word	0xca500001
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
     2f4:	d6000006 	.word	0xd6000006
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     2f8:	01000006 	.word	0x01000006
     2fc:	06fc5200 	.word	0x06fc5200
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_-Millis ");
	Printu32d(getMillis());
	PrintString("\n");
#endif

	nextframe_ = getMillis() + frameLength;
     300:	07100000 	.word	0x07100000
     304:	00010000 	.word	0x00010000
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     308:	00074050 	.word	0x00074050
		int diff = nextpose_[i] - pose_[i];
     30c:	00075800 	.word	0x00075800
     310:	50000100 	.word	0x50000100
     314:	0000078c 	.word	0x0000078c
     318:	000007a4 	.word	0x000007a4
     31c:	d4500001 	.word	0xd4500001
		if (diff == 0) {
     320:	10000007 	.word	0x10000007
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
     324:	01000008 	.word	0x01000008
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
     328:	00005000 	.word	0x00005000
		int diff = nextpose_[i] - pose_[i];
		if (diff == 0) {
			complete--;
		} else {
			if (diff > 0) {
				if (diff < speed_[i]) {
     32c:	00000000 	.word	0x00000000
					pose_[i] = nextpose_[i];
     330:	069a0000 	.word	0x069a0000
					complete--;
     334:	06aa0000 	.word	0x06aa0000
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
     338:	00010000 	.word	0x00010000
     33c:	00000051 	.word	0x00000051
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
     340:	00000000 	.word	0x00000000
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] += speed_[i];
			} else {
				if ((-diff) < speed_[i]) {
     344:	00081000 	.word	0x00081000
					pose_[i] = nextpose_[i];
					complete--;
				} else
					pose_[i] -= speed_[i];
     348:	00081400 	.word	0x00081400
	PrintString("BioloidEX  BioloidControllerEx_interpolateStep nextframe_ (Millis + framelength) ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// update each servo
	for (i = 0; i < poseSize; i++) {
     34c:	5d000100 	.word	0x5d000100
     350:	00000814 	.word	0x00000814
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif

	}
	if (complete <= 0)
     354:	000008dc 	.word	0x000008dc
		interpolating = 0;
     358:	087d0002 	.word	0x087d0002
	...
	BioloidControllerEx_writePose();
	return 0;
}
     364:	00000810 	.word	0x00000810
     368:	0000083e 	.word	0x0000083e
     36c:	3e500001 	.word	0x3e500001
     370:	44000008 	.word	0x44000008
     374:	01000008 	.word	0x01000008
     378:	08505100 	.word	0x08505100
     37c:	08600000 	.word	0x08600000
     380:	00010000 	.word	0x00010000
	for (i = 0; i < poseSize; i++)
		//nextpose_[i] = pgm_read_word_near(addr+1+i) << BIOLOID_SHIFT;
		nextpose_[i] = pgm_read_word_near(addr + 1 + i);
}
/* read in current servo positions to the pose. */
void BioloidControllerEx_readPose() {
     384:	00086050 	.word	0x00086050
     388:	00086800 	.word	0x00086800
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
		//pose_[i] = dxl_read_word(id_[i],AXM_PRESENT_POSITION_L)<<BIOLOID_SHIFT;
		pose_[i] = dxl_read_word(id_[i], AXM_PRESENT_POSITION_L);
     38c:	52000100 	.word	0x52000100
     390:	0000087a 	.word	0x0000087a
     394:	0000088a 	.word	0x0000088a
     398:	8a500001 	.word	0x8a500001
     39c:	8e000008 	.word	0x8e000008
		PrintChar(id_[i]);
		PrintString(" - ");
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
     3a0:	01000008 	.word	0x01000008

#ifdef DEBUG_BIOLOIDEX
	PrintString("Bioloid controller --- READ POSE ---\n");
	PrintString("ID - POSICION\n");
#endif
	for (i = 0; i < poseSize; i++) {
     3a4:	08ae5300 	.word	0x08ae5300
     3a8:	08c20000 	.word	0x08c20000
		TxD_Dec_U16(pose_[i]);
		PrintString("\n");
#endif
		mDelay(25);
	}
}
     3ac:	00010000 	.word	0x00010000
     3b0:	00000050 	.word	0x00000050
     3b4:	00000000 	.word	0x00000000
     3b8:	00081800 	.word	0x00081800
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitPosY[GaitCurrentLegNr] = -3 * g_InControlState.LegLiftHeight
				/ (3 + g_InControlState.gaitCur.HalfLiftHeight); // Easier to shift between div factor: /1 (3/3), /2 (3/6) and 3/4
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z
				/ g_InControlState.gaitCur.LiftDivFactor;
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y
     3bc:	00081a00 	.word	0x00081a00
				/ g_InControlState.gaitCur.LiftDivFactor;
	}

	//Optional Half heigth Rear 5 LiftedPos (5 lifted positions)
	else if (((g_InControlState.gaitCur.NrLiftedPos == 5 && (LegStep == -2)))
     3c0:	54000100 	.word	0x54000100
     3c4:	00000822 	.word	0x00000822
     3c8:	000008dc 	.word	0x000008dc
     3cc:	00540001 	.word	0x00540001
     3d0:	00000000 	.word	0x00000000
     3d4:	dc000000 	.word	0xdc000000
     3d8:	ec000008 	.word	0xec000008
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = -g_InControlState.TravelLength.x / 2;
     3dc:	01000008 	.word	0x01000008
     3e0:	00005000 	.word	0x00005000
     3e4:	00000000 	.word	0x00000000
     3e8:	090c0000 	.word	0x090c0000
     3ec:	09120000 	.word	0x09120000
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
     3f0:	00010000 	.word	0x00010000
     3f4:	0009125d 	.word	0x0009125d
     3f8:	00091e00 	.word	0x00091e00
     3fc:	7d000200 	.word	0x7d000200
     400:	00091e0c 	.word	0x00091e0c
		GaitPosZ[GaitCurrentLegNr] = -g_InControlState.TravelLength.z / 2;
     404:	00097000 	.word	0x00097000
     408:	7d000200 	.word	0x7d000200
     40c:	00000010 	.word	0x00000010
     410:	00000000 	.word	0x00000000
		GaitRotY[GaitCurrentLegNr] = -g_InControlState.TravelLength.y / 2;
     414:	00090c00 	.word	0x00090c00
     418:	00091c00 	.word	0x00091c00
     41c:	50000100 	.word	0x50000100
     420:	0000091c 	.word	0x0000091c
	}

	//Optional Half heigth Front 5 LiftedPos (5 lifted positions)
	else if ((g_InControlState.gaitCur.NrLiftedPos == 5)
     424:	00000938 	.word	0x00000938
     428:	00540001 	.word	0x00540001
     42c:	00000000 	.word	0x00000000
     430:	0c000000 	.word	0x0c000000
     434:	28000009 	.word	0x28000009
     438:	01000009 	.word	0x01000009
			&& (LegStep == 2
					|| LegStep == -(g_InControlState.gaitCur.StepsInGait - 2))
			&& TravelRequest) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
     43c:	09285100 	.word	0x09285100
     440:	09700000 	.word	0x09700000
     444:	00010000 	.word	0x00010000
     448:	00000055 	.word	0x00000055
		GaitPosY[GaitCurrentLegNr] = -g_InControlState.LegLiftHeight / 2;
     44c:	00000000 	.word	0x00000000
     450:	00097000 	.word	0x00097000
     454:	00097200 	.word	0x00097200
     458:	5d000100 	.word	0x5d000100
     45c:	00000972 	.word	0x00000972
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
     460:	00000978 	.word	0x00000978
     464:	147d0002 	.word	0x147d0002
     468:	00000978 	.word	0x00000978
     46c:	00000a50 	.word	0x00000a50
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y / 2;
     470:	187d0002 	.word	0x187d0002
	...
     47c:	00000970 	.word	0x00000970
	}
	//_B_
	//Leg front down position //bug here?  From _A_ to _B_ there should only be one gaitstep, not 2!
	//For example, where is the case of LegStep==0+2 executed when NRLiftedPos=3?
	else if ((LegStep == g_InControlState.gaitCur.FrontDownPos
     480:	000009ac 	.word	0x000009ac
     484:	00500001 	.word	0x00500001
     488:	00000000 	.word	0x00000000
     48c:	70000000 	.word	0x70000000
     490:	a4000009 	.word	0xa4000009
     494:	01000009 	.word	0x01000009
     498:	00005100 	.word	0x00005100
     49c:	00000000 	.word	0x00000000
			|| LegStep
					== -(g_InControlState.gaitCur.StepsInGait
							- g_InControlState.gaitCur.FrontDownPos))
			&& GaitPosY[GaitCurrentLegNr] < 0) {
		GaitPosX[GaitCurrentLegNr] = g_InControlState.TravelLength.x / 2;
     4a0:	09700000 	.word	0x09700000
     4a4:	09760000 	.word	0x09760000
     4a8:	00010000 	.word	0x00010000
     4ac:	00097652 	.word	0x00097652
		GaitPosZ[GaitCurrentLegNr] = g_InControlState.TravelLength.z / 2;
     4b0:	00099400 	.word	0x00099400
     4b4:	56000100 	.word	0x56000100
	...
		GaitRotY[GaitCurrentLegNr] = g_InControlState.TravelLength.y / 2;
     4c0:	00000970 	.word	0x00000970
     4c4:	0000098a 	.word	0x0000098a
     4c8:	00530001 	.word	0x00530001
		GaitPosY[GaitCurrentLegNr] = 0;
     4cc:	00000000 	.word	0x00000000
     4d0:	88000000 	.word	0x88000000
	}

	//Move body forward
	else {
		GaitPosX[GaitCurrentLegNr] = GaitPosX[GaitCurrentLegNr]
     4d4:	a8000009 	.word	0xa8000009
     4d8:	01000009 	.word	0x01000009
     4dc:	00005400 	.word	0x00005400
     4e0:	00000000 	.word	0x00000000
     4e4:	09800000 	.word	0x09800000
     4e8:	09a00000 	.word	0x09a00000
				- (g_InControlState.TravelLength.x
						/ (short) g_InControlState.gaitCur.TLDivFactor);
		GaitPosY[GaitCurrentLegNr] = 0;
     4ec:	00010000 	.word	0x00010000
     4f0:	00000055 	.word	0x00000055
     4f4:	00000000 	.word	0x00000000
		GaitPosZ[GaitCurrentLegNr] = GaitPosZ[GaitCurrentLegNr]
     4f8:	000a5000 	.word	0x000a5000
     4fc:	000a5200 	.word	0x000a5200
     500:	5d000100 	.word	0x5d000100
     504:	00000a52 	.word	0x00000a52
				- (g_InControlState.TravelLength.z
						/ (short) g_InControlState.gaitCur.TLDivFactor);
		GaitRotY[GaitCurrentLegNr] = GaitRotY[GaitCurrentLegNr]
     508:	00000a56 	.word	0x00000a56
     50c:	147d0002 	.word	0x147d0002
     510:	00000a56 	.word	0x00000a56
     514:	00000d20 	.word	0x00000d20
				- (g_InControlState.TravelLength.y
						/ (short) g_InControlState.gaitCur.TLDivFactor);
	}

}
     518:	c87d0003 	.word	0xc87d0003
	...
     524:	000a5000 	.word	0x000a5000
     528:	000a6000 	.word	0x000a6000
     52c:	50000100 	.word	0x50000100
	...
//[GAIT Sequence]
void GaitSeq(void) {
	//Check if the Gait is in motion - If not if we are going to start a motion try to align our Gaitstep to start with a good foot
	// for the direction we are about to go...

	if (fWalking || (g_InControlState.ForceGaitStepCnt != 0))
     538:	00000a50 	.word	0x00000a50
     53c:	00000a7c 	.word	0x00000a7c
     540:	00510001 	.word	0x00510001
		TravelRequest = true;   // Is walking or was walking...
     544:	00000000 	.word	0x00000000
     548:	50000000 	.word	0x50000000
	else {
		TravelRequest = (abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
     54c:	6600000a 	.word	0x6600000a
     550:	0100000a 	.word	0x0100000a
     554:	0a665200 	.word	0x0a665200
     558:	0a8a0000 	.word	0x0a8a0000
     55c:	00010000 	.word	0x00010000
     560:	00000050 	.word	0x00000050
     564:	00000000 	.word	0x00000000
     568:	000a5000 	.word	0x000a5000
     56c:	000a5a00 	.word	0x000a5a00
     570:	53000100 	.word	0x53000100
     574:	00000a5a 	.word	0x00000a5a
     578:	00000d20 	.word	0x00000d20
     57c:	047d0002 	.word	0x047d0002
	...
			g_InControlState.TravelLength.y = 0; //Gait NOT in motion, return to home position
		}
	}

	//Calculate Gait sequence
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
     588:	00000a50 	.word	0x00000a50
     58c:	00000a66 	.word	0x00000a66
     590:	00910002 	.word	0x00910002
		Gait(LegIndex);
     594:	00000a66 	.word	0x00000a66
			g_InControlState.TravelLength.y = 0; //Gait NOT in motion, return to home position
		}
	}

	//Calculate Gait sequence
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
     598:	00000a96 	.word	0x00000a96
     59c:	00520001 	.word	0x00520001
     5a0:	00000000 	.word	0x00000000
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5a4:	b6000000 	.word	0xb6000000
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
     5a8:	d400000a 	.word	0xd400000a
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5ac:	0100000a 	.word	0x0100000a
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
     5b0:	00005700 	.word	0x00005700
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) { // for all legs
		Gait(LegIndex);
	}    // next leg

		 //Advance to the next step
	g_InControlState.GaitStep++;
     5b4:	00000000 	.word	0x00000000
	if (g_InControlState.GaitStep > g_InControlState.gaitCur.StepsInGait)
		g_InControlState.GaitStep = 1;
     5b8:	0ac00000 	.word	0x0ac00000
     5bc:	0b040000 	.word	0x0b040000

	// If we have a force count decrement it now...
	if (g_InControlState.ForceGaitStepCnt)
     5c0:	00010000 	.word	0x00010000
     5c4:	00000056 	.word	0x00000056
		g_InControlState.ForceGaitStepCnt--;
     5c8:	00000000 	.word	0x00000000
}
     5cc:	000a7000 	.word	0x000a7000
     5d0:	000aec00 	.word	0x000aec00
     5d4:	54000100 	.word	0x54000100
	...
}
//--------------------------------------------------------------------
//[BalanceBody]
void BalanceBody(void) {

	TotalTransZ = TotalTransZ / BalanceDivFactor;
     5e0:	00000a76 	.word	0x00000a76
     5e4:	00000ad6 	.word	0x00000ad6
     5e8:	287d0002 	.word	0x287d0002
     5ec:	00000ad6 	.word	0x00000ad6
     5f0:	00000adc 	.word	0x00000adc
	TotalTransX = TotalTransX / BalanceDivFactor;
     5f4:	00520001 	.word	0x00520001
     5f8:	00000000 	.word	0x00000000
     5fc:	8e000000 	.word	0x8e000000
	TotalTransY = TotalTransY / BalanceDivFactor;
     600:	e400000a 	.word	0xe400000a
     604:	0200000a 	.word	0x0200000a
     608:	e42c7d00 	.word	0xe42c7d00
     60c:	f000000a 	.word	0xf000000a

	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
		TotalXBal1 += 3600;

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
     610:	0100000a 	.word	0x0100000a
     614:	00005100 	.word	0x00005100
	TotalTransX = TotalTransX / BalanceDivFactor;
	TotalTransY = TotalTransY / BalanceDivFactor;

#ifndef QUADMODE // ??? on PhantomX Hex at no movment YBal1 = 1800, on Quad = 0...  Need to experiment
	if (TotalYBal1 > 0)        //Rotate balance circle by +/- 180 deg
		TotalYBal1 -= 1800;
     618:	00000000 	.word	0x00000000
     61c:	0d200000 	.word	0x0d200000
	else
		TotalYBal1 += 1800;
     620:	0d220000 	.word	0x0d220000
#endif

	if (TotalZBal1 < -1800) //Compensate for extreme balance positions that causes overflow
     624:	00010000 	.word	0x00010000
     628:	000d225d 	.word	0x000d225d
     62c:	000d2600 	.word	0x000d2600
		TotalZBal1 += 3600;
     630:	7d000200 	.word	0x7d000200
     634:	000d2614 	.word	0x000d2614

	if (TotalXBal1 < -1800) //Compensate for extreme balance positions that causes overflow
     638:	000ea400 	.word	0x000ea400
     63c:	7d000200 	.word	0x7d000200
		TotalXBal1 += 3600;
     640:	00000020 	.word	0x00000020
     644:	00000000 	.word	0x00000000

	//Balance rotation
	TotalYBal1 = -TotalYBal1 / BalanceDivFactor;
     648:	000d2000 	.word	0x000d2000
     64c:	000d2e00 	.word	0x000d2e00
	TotalXBal1 = -TotalXBal1 / BalanceDivFactor;
     650:	50000100 	.word	0x50000100
	...
     65c:	00000d20 	.word	0x00000d20
     660:	00000d28 	.word	0x00000d28
	TotalZBal1 = TotalZBal1 / BalanceDivFactor;
     664:	28510001 	.word	0x28510001
     668:	8000000d 	.word	0x8000000d

}
     66c:	0100000d 	.word	0x0100000d
     670:	00005500 	.word	0x00005500
     674:	00000000 	.word	0x00000000
     678:	0d200000 	.word	0x0d200000
     67c:	0d2e0000 	.word	0x0d2e0000
     680:	00010000 	.word	0x00010000
     684:	00000052 	.word	0x00000052
     688:	00000000 	.word	0x00000000
//sin4        - Output Sinus of AngleDeg
//cos4          - Output Cosinus of AngleDeg
void GetSinCos(short AngleDeg1) {
	short ABSAngleDeg1;   //Absolute value of the Angle in Degrees, decimals = 1
	//Get the absolute value of AngleDeg
	if (AngleDeg1 < 0)
     68c:	000d2000 	.word	0x000d2000
     690:	000d2e00 	.word	0x000d2e00
		ABSAngleDeg1 = AngleDeg1 * -1;
     694:	53000100 	.word	0x53000100
     698:	00000d2e 	.word	0x00000d2e
	else
		ABSAngleDeg1 = AngleDeg1;

	//Shift rotation to a full circle of 360 deg -> AngleDeg // 360
	if (AngleDeg1 < 0)    //Negative values
		AngleDeg1 = 3600 - (ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600)));
     69c:	00000ea4 	.word	0x00000ea4
     6a0:	00560001 	.word	0x00560001
     6a4:	00000000 	.word	0x00000000
     6a8:	a4000000 	.word	0xa4000000
     6ac:	a600000e 	.word	0xa600000e
     6b0:	0100000e 	.word	0x0100000e
     6b4:	00005000 	.word	0x00005000
     6b8:	00000000 	.word	0x00000000
     6bc:	0ea40000 	.word	0x0ea40000
	else
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));

	if (AngleDeg1 >= 0 && AngleDeg1 <= 900)     // 0 to 90 deg
     6c0:	0eaa0000 	.word	0x0eaa0000
     6c4:	00010000 	.word	0x00010000
			{
		sin4 = pgm_read_word(&GetSin[AngleDeg1 / 5]); // 5 is the presision (0.5) of the table
     6c8:	000eaa53 	.word	0x000eaa53
     6cc:	000ebe00 	.word	0x000ebe00
     6d0:	5c000100 	.word	0x5c000100
	...
     6dc:	00000ea6 	.word	0x00000ea6
     6e0:	00000eaa 	.word	0x00000eaa
     6e4:	aa500001 	.word	0xaa500001
     6e8:	b800000e 	.word	0xb800000e
     6ec:	0100000e 	.word	0x0100000e
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
     6f0:	0eba5300 	.word	0x0eba5300
     6f4:	0ebc0000 	.word	0x0ebc0000
     6f8:	00010000 	.word	0x00010000
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
     6fc:	000ebc53 	.word	0x000ebc53
     700:	000ebc00 	.word	0x000ebc00
     704:	50000100 	.word	0x50000100
	...
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     710:	00000ec0 	.word	0x00000ec0
     714:	00000ec6 	.word	0x00000ec6
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     718:	c65d0001 	.word	0xc65d0001
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     71c:	7000000e 	.word	0x7000000e
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     720:	0200000f 	.word	0x0200000f
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     724:	00147d00 	.word	0x00147d00
     728:	00000000 	.word	0x00000000
     72c:	d8000000 	.word	0xd8000000
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     730:	dc00000e 	.word	0xdc00000e
		cos4 = pgm_read_word(&GetSin[(900 - (AngleDeg1)) / 5]);
	}

	else if (AngleDeg1 > 900 && AngleDeg1 <= 1800)     // 90 to 180 deg
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
     734:	0100000e 	.word	0x0100000e
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
     738:	0edc5000 	.word	0x0edc5000
     73c:	0ede0000 	.word	0x0ede0000
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
     740:	00010000 	.word	0x00010000
     744:	000ede5c 	.word	0x000ede5c
     748:	000eec00 	.word	0x000eec00
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     74c:	53000100 	.word	0x53000100
     750:	00000eec 	.word	0x00000eec
     754:	00000eee 	.word	0x00000eee
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     758:	ee5c0001 	.word	0xee5c0001
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     75c:	f000000e 	.word	0xf000000e
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     760:	0100000e 	.word	0x0100000e
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     764:	0ef05300 	.word	0x0ef05300
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     768:	0ef80000 	.word	0x0ef80000
			{
		sin4 = pgm_read_word(&GetSin[(900 - (AngleDeg1 - 900)) / 5]); // 5 is the presision (0.5) of the table
		cos4 = -pgm_read_word(&GetSin[(AngleDeg1 - 900) / 5]);
	} else if (AngleDeg1 > 1800 && AngleDeg1 <= 2700) // 180 to 270 deg
			{
		sin4 = -pgm_read_word(&GetSin[(AngleDeg1 - 1800) / 5]); // 5 is the presision (0.5) of the table
     76c:	00010000 	.word	0x00010000
     770:	000ef850 	.word	0x000ef850
     774:	000efc00 	.word	0x000efc00
     778:	5c000100 	.word	0x5c000100
	...
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
     784:	00000ef8 	.word	0x00000ef8
     788:	00000efc 	.word	0x00000efc
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
     78c:	fc500001 	.word	0xfc500001
     790:	fe00000e 	.word	0xfe00000e
     794:	0100000e 	.word	0x0100000e
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     798:	0efe5c00 	.word	0x0efe5c00
     79c:	0f040000 	.word	0x0f040000
     7a0:	00010000 	.word	0x00010000
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7a4:	000f0453 	.word	0x000f0453
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7a8:	000f0800 	.word	0x000f0800
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7ac:	5c000100 	.word	0x5c000100
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7b0:	00000f08 	.word	0x00000f08
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7b4:	00000f0e 	.word	0x00000f0e
		cos4 = -pgm_read_word(&GetSin[(2700 - AngleDeg1) / 5]);
	}

	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
     7b8:	0e530001 	.word	0x0e530001
     7bc:	1000000f 	.word	0x1000000f
     7c0:	0100000f 	.word	0x0100000f
     7c4:	0f105c00 	.word	0x0f105c00
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
     7c8:	0f120000 	.word	0x0f120000
     7cc:	00010000 	.word	0x00010000
     7d0:	000f1253 	.word	0x000f1253
	//Shift rotation to a full circle of 360 deg -> AngleDeg // 360
	if (AngleDeg1 < 0)    //Negative values
		AngleDeg1 = 3600 - (ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600)));
	else
		//Positive values
		AngleDeg1 = ABSAngleDeg1 - (3600 * (ABSAngleDeg1 / 3600));
     7d4:	000f1a00 	.word	0x000f1a00
     7d8:	50000100 	.word	0x50000100
     7dc:	00000f1a 	.word	0x00000f1a
     7e0:	00000f20 	.word	0x00000f20
     7e4:	005c0001 	.word	0x005c0001
     7e8:	00000000 	.word	0x00000000
     7ec:	d4000000 	.word	0xd4000000
     7f0:	d800000e 	.word	0xd800000e
     7f4:	0100000e 	.word	0x0100000e
     7f8:	0ed85000 	.word	0x0ed85000
	else if (AngleDeg1 > 2700 && AngleDeg1 <= 3600) // 270 to 360 deg
			{
		sin4 = -pgm_read_word(&GetSin[(3600 - AngleDeg1) / 5]); // 5 is the presision (0.5) of the table
		cos4 = pgm_read_word(&GetSin[(AngleDeg1 - 2700) / 5]);
	}
}
     7fc:	0edc0000 	.word	0x0edc0000
     800:	00010000 	.word	0x00010000
     804:	000f1a5c 	.word	0x000f1a5c
     808:	000f2000 	.word	0x000f2000
     80c:	50000100 	.word	0x50000100
//cos4        - Input Cosinus
//AngleRad4     - Output Angle in AngleRad4
long GetArcCos(short cos4) {
	boolean NegativeValue/*:1*/;    //If the the value is Negative
	//Check for negative value
	if (cos4 < 0) {
     810:	00000f20 	.word	0x00000f20
     814:	00000f22 	.word	0x00000f22
     818:	225c0001 	.word	0x225c0001
		cos4 = -cos4;
     81c:	2800000f 	.word	0x2800000f
     820:	0100000f 	.word	0x0100000f
		NegativeValue = 1;
	} else
		NegativeValue = 0;

	//Limit cos4 to his maximal value
	cos4 = min(cos4, c4DEC);
     824:	0f285300 	.word	0x0f285300
     828:	0f2c0000 	.word	0x0f2c0000
     82c:	00010000 	.word	0x00010000

	if ((cos4 >= 0) && (cos4 < 9000)) {
     830:	000f2c5c 	.word	0x000f2c5c
     834:	000f3200 	.word	0x000f3200
     838:	53000100 	.word	0x53000100
		AngleRad4 = (byte) pgm_read_byte(&GetACos[cos4 / 79]);
     83c:	00000f32 	.word	0x00000f32
     840:	00000f34 	.word	0x00000f34
     844:	345c0001 	.word	0x345c0001
		AngleRad4 = ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255) ;
     848:	3600000f 	.word	0x3600000f
     84c:	0100000f 	.word	0x0100000f
	} else if ((cos4 >= 9000) && (cos4 < 9900)) {
     850:	0f365300 	.word	0x0f365300
     854:	0f700000 	.word	0x0f700000
     858:	00010000 	.word	0x00010000
     85c:	00000050 	.word	0x00000050
		AngleRad4 = (byte) pgm_read_byte(&GetACos[(cos4 - 9000) / 8 + 114]);
     860:	00000000 	.word	0x00000000
     864:	000f7000 	.word	0x000f7000
     868:	000f8c00 	.word	0x000f8c00
     86c:	50000100 	.word	0x50000100
     870:	00000f92 	.word	0x00000f92
     874:	00000fae 	.word	0x00000fae
		AngleRad4 = (long) ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255)
     878:	b4500001 	.word	0xb4500001
	} else if ((cos4 >= 9900) && (cos4 <= 10000)) {
     87c:	b400000f 	.word	0xb400000f
     880:	0100000f 	.word	0x0100000f
     884:	00005000 	.word	0x00005000
		AngleRad4 = (byte) pgm_read_byte(&GetACos[(cos4 - 9900) / 2 + 227]);
     888:	00000000 	.word	0x00000000
     88c:	0fb80000 	.word	0x0fb80000
     890:	0fbc0000 	.word	0x0fbc0000
		AngleRad4 = (long) ((long) AngleRad4 * 616) / c1DEC; //616=acos resolution (pi/2/255)
     894:	00010000 	.word	0x00010000
     898:	000fbc5d 	.word	0x000fbc5d
     89c:	000fc600 	.word	0x000fc600
     8a0:	7d000200 	.word	0x7d000200
     8a4:	000fc604 	.word	0x000fc604
     8a8:	000ff000 	.word	0x000ff000
     8ac:	7d000200 	.word	0x7d000200
	}

	//Add negative sign
	if (NegativeValue)
		AngleRad4 = 31416 - AngleRad4;
     8b0:	00000008 	.word	0x00000008
     8b4:	00000000 	.word	0x00000000
     8b8:	000ff000 	.word	0x000ff000
     8bc:	000ff200 	.word	0x000ff200
     8c0:	5d000100 	.word	0x5d000100

	return AngleRad4;
}
     8c4:	00000ff2 	.word	0x00000ff2
     8c8:	00001008 	.word	0x00001008
     8cc:	147d0002 	.word	0x147d0002
     8d0:	00001008 	.word	0x00001008
     8d4:	0000107c 	.word	0x0000107c
     8d8:	187d0002 	.word	0x187d0002
	...

	root = 0;
	remainder = n;
	place = 0x40000000; // OR place = 0x4000; OR place = 0x40; - respectively

	while (place > remainder)
     8e4:	00000ff0 	.word	0x00000ff0
     8e8:	00001004 	.word	0x00001004
     8ec:	04500001 	.word	0x04500001
		place = place >> 2;
	while (place) {
		if (remainder >= root + place) {
     8f0:	7c000010 	.word	0x7c000010
			remainder = remainder - root - place;
     8f4:	01000010 	.word	0x01000010
     8f8:	00005500 	.word	0x00005500
			root = root + (place << 1);
     8fc:	00000000 	.word	0x00000000

	while (place > remainder)
		place = place >> 2;
	while (place) {
		if (remainder >= root + place) {
			remainder = remainder - root - place;
     900:	10840000 	.word	0x10840000
			root = root + (place << 1);
		}
		root = root >> 1;
		place = place >> 2;
     904:	10860000 	.word	0x10860000
	remainder = n;
	place = 0x40000000; // OR place = 0x4000; OR place = 0x40; - respectively

	while (place > remainder)
		place = place >> 2;
	while (place) {
     908:	00010000 	.word	0x00010000
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
	XYhyp2 = isqrt32(
     90c:	0010865d 	.word	0x0010865d
//(GETATAN2) Simplyfied ArcTan2 function based on fixed point ArcCos
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
     910:	00108a00 	.word	0x00108a00
	XYhyp2 = isqrt32(
     914:	7d000200 	.word	0x7d000200
     918:	00108a04 	.word	0x00108a04
//(GETATAN2) Simplyfied ArcTan2 function based on fixed point ArcCos
//ArcTanX         - Input X
//ArcTanY         - Input Y
//ArcTan4          - Output ARCTAN2(X/Y)
//XYhyp2            - Output presenting Hypotenuse of X and Y
short GetATan2(short AtanX, short AtanY) {
     91c:	0010c000 	.word	0x0010c000
	XYhyp2 = isqrt32(
     920:	7d000200 	.word	0x7d000200
     924:	00000008 	.word	0x00000008
     928:	00000000 	.word	0x00000000
			((long) AtanX * AtanX * c4DEC) + ((long) AtanY * AtanY * c4DEC));
	GetArcCos(((long) AtanX * (long) c6DEC) / (long) XYhyp2);
     92c:	0010a400 	.word	0x0010a400
     930:	0010b400 	.word	0x0010b400
     934:	52000100 	.word	0x52000100
     938:	000010b4 	.word	0x000010b4
     93c:	000010c0 	.word	0x000010c0
     940:	00520001 	.word	0x00520001
     944:	00000000 	.word	0x00000000

	if (AtanY < 0) // removed overhead... Atan4 = AngleRad4 * (AtanY/abs(AtanY));
     948:	aa000000 	.word	0xaa000000
		Atan4 = -AngleRad4;
     94c:	b4000010 	.word	0xb4000010
	else
		Atan4 = AngleRad4;
     950:	01000010 	.word	0x01000010
	XYhyp2 = isqrt32(
			((long) AtanX * AtanX * c4DEC) + ((long) AtanY * AtanY * c4DEC));
	GetArcCos(((long) AtanX * (long) c6DEC) / (long) XYhyp2);

	if (AtanY < 0) // removed overhead... Atan4 = AngleRad4 * (AtanY/abs(AtanY));
		Atan4 = -AngleRad4;
     954:	10b45000 	.word	0x10b45000
	else
		Atan4 = AngleRad4;
     958:	10c00000 	.word	0x10c00000
     95c:	00010000 	.word	0x00010000
	return Atan4;
}
     960:	00000050 	.word	0x00000050
     964:	00000000 	.word	0x00000000
     968:	0010c000 	.word	0x0010c000
     96c:	0010c200 	.word	0x0010c200

}

//--------------------------------------------------------------------
//[BalCalcOneLeg]
void BalCalcOneLeg(long PosX, long PosZ, long PosY, byte BalLegNr) {
     970:	5d000100 	.word	0x5d000100
	long CPR_Y;            //Final Y value for centerpoint of rotation
	long CPR_Z;            //Final Z value for centerpoint of rotation

	long lAtan;
	//Calculating totals from center of the body to the feet
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BalLegNr]) + PosZ;
     974:	000010c2 	.word	0x000010c2
     978:	000010c6 	.word	0x000010c6
	CPR_X = (short) pgm_read_word(&cOffsetX[BalLegNr]) + PosX;
     97c:	047d0002 	.word	0x047d0002
     980:	000010c6 	.word	0x000010c6
	CPR_Y = 150 + PosY; // using the value 150 to lower the centerpoint of rotation 'g_InControlState.BodyPos.y +

	TotalTransY += (long) PosY;
     984:	0000115c 	.word	0x0000115c
     988:	087d0002 	.word	0x087d0002
	...
	TotalTransZ += (long) CPR_Z;
     994:	0000115c 	.word	0x0000115c
     998:	0000115e 	.word	0x0000115e
	TotalTransX += (long) CPR_X;
     99c:	5e5d0001 	.word	0x5e5d0001
     9a0:	62000011 	.word	0x62000011
     9a4:	02000011 	.word	0x02000011
     9a8:	62047d00 	.word	0x62047d00

	lAtan = GetATan2(CPR_X, CPR_Z);
     9ac:	78000011 	.word	0x78000011
	TotalYBal1 += (lAtan * 1800) / 31415;
     9b0:	02000011 	.word	0x02000011
     9b4:	00087d00 	.word	0x00087d00
     9b8:	00000000 	.word	0x00000000
     9bc:	78000000 	.word	0x78000000
     9c0:	7a000011 	.word	0x7a000011
     9c4:	01000011 	.word	0x01000011
     9c8:	117a5d00 	.word	0x117a5d00
     9cc:	117e0000 	.word	0x117e0000

	lAtan = GetATan2(CPR_X, CPR_Y);
     9d0:	00020000 	.word	0x00020000
     9d4:	117e047d 	.word	0x117e047d
	TotalZBal1 += ((lAtan * 1800) / 31415) - 900; //Rotate balance circle 90 deg
     9d8:	11bc0000 	.word	0x11bc0000
     9dc:	00020000 	.word	0x00020000
     9e0:	0000087d 	.word	0x0000087d
     9e4:	00000000 	.word	0x00000000
     9e8:	11bc0000 	.word	0x11bc0000
     9ec:	11be0000 	.word	0x11be0000
     9f0:	00010000 	.word	0x00010000
     9f4:	0011be5d 	.word	0x0011be5d
     9f8:	0011c200 	.word	0x0011c200
     9fc:	7d000200 	.word	0x7d000200

	lAtan = GetATan2(CPR_Z, CPR_Y);
     a00:	0011c214 	.word	0x0011c214
     a04:	00124c00 	.word	0x00124c00
	TotalXBal1 += ((lAtan * 1800) / 31415) - 900; //Rotate balance circle 90 deg
     a08:	7d000200 	.word	0x7d000200
     a0c:	00000018 	.word	0x00000018
     a10:	00000000 	.word	0x00000000
     a14:	0011bc00 	.word	0x0011bc00
     a18:	0011c400 	.word	0x0011c400
     a1c:	50000100 	.word	0x50000100
     a20:	000011c4 	.word	0x000011c4
     a24:	000011e4 	.word	0x000011e4

}
     a28:	00540001 	.word	0x00540001
     a2c:	00000000 	.word	0x00000000
     a30:	bc000000 	.word	0xbc000000
     a34:	ca000011 	.word	0xca000011
     a38:	01000011 	.word	0x01000011
     a3c:	11ca5100 	.word	0x11ca5100
     a40:	124c0000 	.word	0x124c0000
     a44:	00010000 	.word	0x00010000
     a48:	00000056 	.word	0x00000056
     a4c:	00000000 	.word	0x00000000
//SinG                  - Sin buffer for BodyRotZ
//CosG               - Cos buffer for BodyRotZ
//BodyFKPosX         - Output Position X of feet with Rotation
//BodyFKPosY         - Output Position Y of feet with Rotation
//BodyFKPosZ         - Output Position Z of feet with Rotation
void BodyFK(short PosX, short PosZ, short PosY, short RotationY, byte BodyIKLeg) {
     a50:	00124c00 	.word	0x00124c00
     a54:	00124e00 	.word	0x00124e00
	short CPR_X;            //Final X value for centerpoint of rotation
	short CPR_Y;            //Final Y value for centerpoint of rotation
	short CPR_Z;            //Final Z value for centerpoint of rotation

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
     a58:	5d000100 	.word	0x5d000100
     a5c:	0000124e 	.word	0x0000124e
     a60:	000012a0 	.word	0x000012a0
//SinG                  - Sin buffer for BodyRotZ
//CosG               - Cos buffer for BodyRotZ
//BodyFKPosX         - Output Position X of feet with Rotation
//BodyFKPosY         - Output Position Y of feet with Rotation
//BodyFKPosZ         - Output Position Z of feet with Rotation
void BodyFK(short PosX, short PosZ, short PosY, short RotationY, byte BodyIKLeg) {
     a64:	107d0002 	.word	0x107d0002
	...
	short CPR_Z;            //Final Z value for centerpoint of rotation

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
     a70:	00001260 	.word	0x00001260
     a74:	0000127a 	.word	0x0000127a

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     a78:	7e540001 	.word	0x7e540001

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BodyIKLeg]) + PosZ
     a7c:	a0000012 	.word	0xa0000012
     a80:	01000012 	.word	0x01000012
	//Successive global rotation matrix:
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
     a84:	00005400 	.word	0x00005400
     a88:	00000000 	.word	0x00000000

	//Calculating totals from center of the body to the feet
	CPR_X = (short) pgm_read_word(&cOffsetX[BodyIKLeg]) + PosX
			+ g_InControlState.BodyRotOffset.x;
	CPR_Y = PosY + g_InControlState.BodyRotOffset.y; //Define centerpoint for rotation along the Y-axis
	CPR_Z = (short) pgm_read_word(&cOffsetZ[BodyIKLeg]) + PosZ
     a8c:	12a00000 	.word	0x12a00000
	//Successive global rotation matrix:
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
     a90:	12a20000 	.word	0x12a20000
     a94:	00010000 	.word	0x00010000
	SinG4 = sin4;
     a98:	0012a25d 	.word	0x0012a25d
	CosG4 = cos4;
     a9c:	0012a400 	.word	0x0012a400
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
	SinG4 = sin4;
     aa0:	7d000200 	.word	0x7d000200
	CosG4 = cos4;
     aa4:	0012a404 	.word	0x0012a404
	//Math shorts for rotation: Alfa [A] = Xrotate, Beta [B] = Zrotate, Gamma [G] = Yrotate
	//Sinus Alfa = SinA, cosinus Alfa = cosA. and so on...

	//First calculate sinus and cosinus for each rotation:
	GetSinCos(g_InControlState.BodyRot1.x + TotalXBal1);
	SinG4 = sin4;
     aa8:	0012d800 	.word	0x0012d800
	CosG4 = cos4;

	GetSinCos(g_InControlState.BodyRot1.z + TotalZBal1);
     aac:	7d000200 	.word	0x7d000200
	SinB4 = sin4;
     ab0:	00000008 	.word	0x00000008
     ab4:	00000000 	.word	0x00000000
	CosB4 = cos4;
     ab8:	0012d800 	.word	0x0012d800

	GetSinCos(g_InControlState.BodyRot1.y + (RotationY * c1DEC) + TotalYBal1);
     abc:	0012da00 	.word	0x0012da00
     ac0:	5d000100 	.word	0x5d000100
     ac4:	000012da 	.word	0x000012da
     ac8:	000012de 	.word	0x000012de
     acc:	0c7d0002 	.word	0x0c7d0002

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     ad0:	000012de 	.word	0x000012de
     ad4:	00001310 	.word	0x00001310
     ad8:	107d0002 	.word	0x107d0002
	...
     ae4:	00001310 	.word	0x00001310
     ae8:	00001312 	.word	0x00001312
     aec:	125d0001 	.word	0x125d0001
     af0:	20000013 	.word	0x20000013
     af4:	02000013 	.word	0x02000013
     af8:	20047d00 	.word	0x20047d00
     afc:	44000013 	.word	0x44000013
     b00:	02000013 	.word	0x02000013
     b04:	00087d00 	.word	0x00087d00
     b08:	00000000 	.word	0x00000000
     b0c:	44000000 	.word	0x44000000
     b10:	4a000013 	.word	0x4a000013
     b14:	01000013 	.word	0x01000013
     b18:	134a5d00 	.word	0x134a5d00
     b1c:	14680000 	.word	0x14680000
     b20:	00020000 	.word	0x00020000
     b24:	0000087d 	.word	0x0000087d
     b28:	00000000 	.word	0x00000000
     b2c:	14680000 	.word	0x14680000
     b30:	146a0000 	.word	0x146a0000
     b34:	00010000 	.word	0x00010000
     b38:	00146a5d 	.word	0x00146a5d
     b3c:	00146e00 	.word	0x00146e00
     b40:	7d000200 	.word	0x7d000200
     b44:	00146e14 	.word	0x00146e14
     b48:	00155400 	.word	0x00155400
     b4c:	7d000200 	.word	0x7d000200
     b50:	00000020 	.word	0x00000020
     b54:	00000000 	.word	0x00000000
     b58:	00146800 	.word	0x00146800
     b5c:	00147600 	.word	0x00147600
     b60:	50000100 	.word	0x50000100
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     b64:	00001476 	.word	0x00001476
     b68:	0000153c 	.word	0x0000153c

	SinA4 = sin4;
	CosA4 = cos4;

	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
     b6c:	007d0002 	.word	0x007d0002
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     b70:	0000153c 	.word	0x0000153c
     b74:	00001554 	.word	0x00001554
     b78:	74910002 	.word	0x74910002
	...
     b84:	00001496 	.word	0x00001496
     b88:	0000149c 	.word	0x0000149c
     b8c:	047d0002 	.word	0x047d0002
     b90:	0000149c 	.word	0x0000149c
     b94:	000014c4 	.word	0x000014c4
     b98:	78910002 	.word	0x78910002
     b9c:	000014c4 	.word	0x000014c4
     ba0:	00001512 	.word	0x00001512
     ba4:	047d0002 	.word	0x047d0002
     ba8:	00001512 	.word	0x00001512
     bac:	00001536 	.word	0x00001536
     bb0:	78910002 	.word	0x78910002
     bb4:	0000153c 	.word	0x0000153c
     bb8:	00001554 	.word	0x00001554
     bbc:	78910002 	.word	0x78910002
	...
     bc8:	000014b0 	.word	0x000014b0
     bcc:	000014e0 	.word	0x000014e0
     bd0:	00550001 	.word	0x00550001
     bd4:	00000000 	.word	0x00000000
     bd8:	54000000 	.word	0x54000000
     bdc:	5c000015 	.word	0x5c000015
     be0:	01000015 	.word	0x01000015
     be4:	155c5d00 	.word	0x155c5d00
     be8:	158a0000 	.word	0x158a0000
     bec:	00020000 	.word	0x00020000
     bf0:	158a147d 	.word	0x158a147d
     bf4:	15e00000 	.word	0x15e00000
     bf8:	00020000 	.word	0x00020000
     bfc:	0000207d 	.word	0x0000207d
     c00:	00000000 	.word	0x00000000
     c04:	15540000 	.word	0x15540000
     c08:	15720000 	.word	0x15720000
     c0c:	00010000 	.word	0x00010000
     c10:	00157250 	.word	0x00157250
     c14:	0015e000 	.word	0x0015e000
     c18:	56000100 	.word	0x56000100
	...
     c24:	00001554 	.word	0x00001554
     c28:	0000155a 	.word	0x0000155a
     c2c:	00510001 	.word	0x00510001
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * CosG4 / c4DEC
					- (long) CPR_Z * c2DEC * SinA4 / c4DEC * SinB4 / c4DEC
							* SinG4 / c4DEC
					- (long) CPR_Y * c2DEC * CosB4 / c4DEC * SinG4 / c4DEC))
			/ c2DEC;
	BodyFKPosY = ((long) CPR_Y * c2DEC
     c30:	00000000 	.word	0x00000000
	//Calcualtion of rotation matrix:
	BodyFKPosX = ((long) CPR_X * c2DEC
			- ((long) CPR_X * c2DEC * CosA4 / c4DEC * CosB4 / c4DEC
					- (long) CPR_Z * c2DEC * CosB4 / c4DEC * SinA4 / c4DEC
					+ (long) CPR_Y * c2DEC * SinB4 / c4DEC)) / c2DEC;
	BodyFKPosZ = ((long) CPR_Z * c2DEC
     c34:	54000000 	.word	0x54000000
     c38:	68000015 	.word	0x68000015
     c3c:	01000015 	.word	0x01000015
     c40:	00005200 	.word	0x00005200
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * CosG4 / c4DEC
					- (long) CPR_Z * c2DEC * SinA4 / c4DEC * SinB4 / c4DEC
							* SinG4 / c4DEC
					- (long) CPR_Y * c2DEC * CosB4 / c4DEC * SinG4 / c4DEC))
			/ c2DEC;
	BodyFKPosY = ((long) CPR_Y * c2DEC
     c44:	00000000 	.word	0x00000000
     c48:	15540000 	.word	0x15540000
     c4c:	15740000 	.word	0x15740000
     c50:	00010000 	.word	0x00010000
     c54:	00000053 	.word	0x00000053
     c58:	00000000 	.word	0x00000000
     c5c:	0015e000 	.word	0x0015e000
     c60:	0015e200 	.word	0x0015e200
     c64:	5d000100 	.word	0x5d000100
     c68:	000015e2 	.word	0x000015e2
     c6c:	000015e4 	.word	0x000015e4
     c70:	147d0002 	.word	0x147d0002
     c74:	000015e4 	.word	0x000015e4
     c78:	00001664 	.word	0x00001664
     c7c:	187d0002 	.word	0x187d0002
	...
     c88:	000015f4 	.word	0x000015f4
     c8c:	00001642 	.word	0x00001642
     c90:	00500001 	.word	0x00500001
     c94:	00000000 	.word	0x00000000
     c98:	64000000 	.word	0x64000000
     c9c:	66000016 	.word	0x66000016
     ca0:	01000016 	.word	0x01000016
     ca4:	16665d00 	.word	0x16665d00
     ca8:	16b80000 	.word	0x16b80000
     cac:	00020000 	.word	0x00020000
     cb0:	0000087d 	.word	0x0000087d
     cb4:	00000000 	.word	0x00000000
     cb8:	16b80000 	.word	0x16b80000
     cbc:	16ba0000 	.word	0x16ba0000
     cc0:	00010000 	.word	0x00010000
     cc4:	0016ba5d 	.word	0x0016ba5d
     cc8:	0016bc00 	.word	0x0016bc00
     ccc:	7d000200 	.word	0x7d000200
     cd0:	0016bc04 	.word	0x0016bc04
     cd4:	00171400 	.word	0x00171400
     cd8:	7d000200 	.word	0x7d000200
     cdc:	00000008 	.word	0x00000008
     ce0:	00000000 	.word	0x00000000
     ce4:	00171400 	.word	0x00171400
					+ (long) CPR_Z * c2DEC * CosA4 / c4DEC * SinG4 / c4DEC
					+ (long) CPR_Z * c2DEC * CosG4 / c4DEC * SinA4 / c4DEC
							* SinB4 / c4DEC
					+ (long) CPR_Y * c2DEC * CosB4 / c4DEC * CosG4 / c4DEC))
			/ c2DEC;
}
     ce8:	00171600 	.word	0x00171600
     cec:	5d000100 	.word	0x5d000100
     cf0:	00001716 	.word	0x00001716
     cf4:	00001718 	.word	0x00001718
     cf8:	147d0002 	.word	0x147d0002
     cfc:	00001718 	.word	0x00001718
     d00:	00001cb0 	.word	0x00001cb0
     d04:	287d0002 	.word	0x287d0002
	...
     d10:	0000172e 	.word	0x0000172e
     d14:	00001730 	.word	0x00001730
     d18:	007d0002 	.word	0x007d0002
     d1c:	00001736 	.word	0x00001736
//FemurAngle1           - Output Angle of Femur in degrees
//TibiaAngle1           - Output Angle of Tibia in degrees
//CoxaAngle1            - Output Angle of Coxa in degrees
//--------------------------------------------------------------------
void LegIK(short IKFeetPosX, short IKFeetPosY, short IKFeetPosZ,
		byte LegIKLegNr) {
     d20:	00001c14 	.word	0x00001c14
     d24:	007d0002 	.word	0x007d0002
     d28:	00001c14 	.word	0x00001c14
	long Temp1;
	long Temp2;
	long T3;

	//Calculate IKCoxaAngle and IKFeetPosXZ
	GetATan2(IKFeetPosX, IKFeetPosZ);
     d2c:	00001c38 	.word	0x00001c38
	CoxaAngle1[LegIKLegNr] = (((long) Atan4 * 180) / 3141)
     d30:	6c910002 	.word	0x6c910002
     d34:	00001c52 	.word	0x00001c52
     d38:	00001cb0 	.word	0x00001cb0
     d3c:	6c910002 	.word	0x6c910002
	...
     d48:	00001834 	.word	0x00001834
     d4c:	00001838 	.word	0x00001838
     d50:	047d0002 	.word	0x047d0002
     d54:	000018f6 	.word	0x000018f6
	//Length between the Coxa and tars [foot]
	IKFeetPosXZ = XYhyp2 / c2DEC;

	//Using GetAtan2 for solving IKA1 and IKSW
	//IKA14 - Angle between SW line and the ground in radians
	IKA14 = GetATan2(IKFeetPosY - TarsOffsetY,
     d58:	00001bf2 	.word	0x00001bf2
     d5c:	047d0002 	.word	0x047d0002
     d60:	00001bf2 	.word	0x00001bf2
     d64:	00001c38 	.word	0x00001c38
     d68:	70910002 	.word	0x70910002
     d6c:	00001c52 	.word	0x00001c52
     d70:	00001cb0 	.word	0x00001cb0

	//IKSW2 - Length between femur axis and tars
	IKSW2 = XYhyp2;

	//IKA2 - Angle of the line S>W with respect to the femur in radians
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     d74:	70910002 	.word	0x70910002
	...
     d80:	00001836 	.word	0x00001836
					* (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))) * c4DEC
			+ ((long) IKSW2 * IKSW2));
	Temp2 = (long) (2 * (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])) * c2DEC
			* (unsigned long) IKSW2;
	T3 = Temp1 / (Temp2 / c4DEC);
	IKA24 = GetArcCos(T3);
     d84:	00001838 	.word	0x00001838
     d88:	087d0002 	.word	0x087d0002
     d8c:	000018ee 	.word	0x000018ee
     d90:	00001bf2 	.word	0x00001bf2
     d94:	087d0002 	.word	0x087d0002
     d98:	00001bf2 	.word	0x00001bf2
     d9c:	00001c38 	.word	0x00001c38
     da0:	74910002 	.word	0x74910002
     da4:	00001c52 	.word	0x00001c52
     da8:	00001cb0 	.word	0x00001cb0
     dac:	74910002 	.word	0x74910002
	...

	FemurAngle1[LegIKLegNr] = -(long) (IKA14 + IKA24) * 180
     db8:	00001826 	.word	0x00001826
     dbc:	00001b7c 	.word	0x00001b7c
     dc0:	0c7d0002 	.word	0x0c7d0002
     dc4:	00001b7c 	.word	0x00001b7c
     dc8:	00001ba0 	.word	0x00001ba0
     dcc:	78910002 	.word	0x78910002
     dd0:	00001ba0 	.word	0x00001ba0
     dd4:	00001bf2 	.word	0x00001bf2
     dd8:	0c7d0002 	.word	0x0c7d0002
			/ 3141+ 900 + CFEMURHORNOFFSET1(LegIKLegNr);  //Normal

	//IKTibiaAngle
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     ddc:	00001bf2 	.word	0x00001bf2
	Temp2 = (long) (2 * (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])) * c2DEC
			* (unsigned long) IKSW2;
	T3 = Temp1 / (Temp2 / c4DEC);
	IKA24 = GetArcCos(T3);

	FemurAngle1[LegIKLegNr] = -(long) (IKA14 + IKA24) * 180
     de0:	00001c38 	.word	0x00001c38
			/ 3141+ 900 + CFEMURHORNOFFSET1(LegIKLegNr);  //Normal

	//IKTibiaAngle
	Temp1 = ((((long) (byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
     de4:	78910002 	.word	0x78910002
     de8:	00001c52 	.word	0x00001c52
			+ ((long) (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr])
					* (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))) * c4DEC
			- ((long) IKSW2 * IKSW2));
	Temp2 = 2 * ((long) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])))
			* (long) ((byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]));
	GetArcCos(Temp1 / Temp2);
     dec:	00001cb0 	.word	0x00001cb0
     df0:	78910002 	.word	0x78910002
	...
     dfc:	0000182e 	.word	0x0000182e
     e00:	000018e8 	.word	0x000018e8
     e04:	e8570001 	.word	0xe8570001
     e08:	ea000018 	.word	0xea000018

	TibiaAngle1[LegIKLegNr] = -(1450 - (long) AngleRad4 * 180 / 3141
     e0c:	01000018 	.word	0x01000018
     e10:	18fc5300 	.word	0x18fc5300
     e14:	1c380000 	.word	0x1c380000
     e18:	00010000 	.word	0x00010000
     e1c:	001c5257 	.word	0x001c5257
     e20:	001cb000 	.word	0x001cb000
     e24:	57000100 	.word	0x57000100
	...
     e30:	00001850 	.word	0x00001850
			+ CTIBIAHORNOFFSET1(LegIKLegNr)); //!!!!!!!!!!!!145 instead of 1800

	//Set the Solution quality
	if (IKSW2
     e34:	0000185c 	.word	0x0000185c
     e38:	76510001 	.word	0x76510001
     e3c:	c8000018 	.word	0xc8000018
     e40:	01000018 	.word	0x01000018
     e44:	18d05100 	.word	0x18d05100
			< ((word) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
					+ (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]) - 30)
					* c2DEC))
		IKSolution = 1;
     e48:	18d20000 	.word	0x18d20000
	else {
		if (IKSW2
     e4c:	00010000 	.word	0x00010000
     e50:	00000051 	.word	0x00000051
				< ((word) ((byte) pgm_read_byte(&cFemurLength[LegIKLegNr])
						+ (byte) pgm_read_byte(&cTibiaLength[LegIKLegNr]))
						* c2DEC))
			IKSolutionWarning = 1;
     e54:	00000000 	.word	0x00000000
     e58:	001cb000 	.word	0x001cb000
		else
			IKSolutionError = 1;
     e5c:	001cb200 	.word	0x001cb200
	}

}
     e60:	5d000100 	.word	0x5d000100
     e64:	00001cb2 	.word	0x00001cb2
     e68:	00001cb4 	.word	0x00001cb4
     e6c:	147d0002 	.word	0x147d0002
     e70:	00001cb4 	.word	0x00001cb4
     e74:	000021cc 	.word	0x000021cc
     e78:	207d0002 	.word	0x207d0002
	...
     e84:	00001cc0 	.word	0x00001cc0
     e88:	00001d2e 	.word	0x00001d2e
     e8c:	d8540001 	.word	0xd8540001
     e90:	fc00001d 	.word	0xfc00001d
     e94:	0100001d 	.word	0x0100001d
     e98:	1ec85400 	.word	0x1ec85400
     e9c:	1ed60000 	.word	0x1ed60000
     ea0:	00010000 	.word	0x00010000
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ea4:	001fc454 	.word	0x001fc454
	if (sVal < s) {
     ea8:	001fc800 	.word	0x001fc800
     eac:	54000100 	.word	0x54000100
		return s;
	}

	s = (short) pgm_read_word(sMax);
     eb0:	000020d4 	.word	0x000020d4
     eb4:	000020ea 	.word	0x000020ea
     eb8:	2e540001 	.word	0x2e540001

		return s;
	}
	return sVal;

}
     ebc:	cc000021 	.word	0xcc000021
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     ec0:	01000021 	.word	0x01000021
}

//--------------------------------------------------------------------
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
     ec4:	00005400 	.word	0x00005400
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     ec8:	00000000 	.word	0x00000000
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ecc:	000c0000 	.word	0x000c0000
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
     ed0:	00100000 	.word	0x00100000
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ed4:	00010000 	.word	0x00010000
	if (sVal < s) {
     ed8:	00000050 	.word	0x00000050
     edc:	00000000 	.word	0x00000000
     ee0:	00004400 	.word	0x00004400
		return s;
	}

	s = (short) pgm_read_word(sMax);
     ee4:	00004c00 	.word	0x00004c00
     ee8:	50000100 	.word	0x50000100
     eec:	0000004c 	.word	0x0000004c
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
     ef0:	0000007c 	.word	0x0000007c
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     ef4:	00510001 	.word	0x00510001
	if (sVal < s) {
     ef8:	00000000 	.word	0x00000000
     efc:	4c000000 	.word	0x4c000000
     f00:	60000000 	.word	0x60000000
		return s;
	}

	s = (short) pgm_read_word(sMax);
     f04:	01000000 	.word	0x01000000
     f08:	00625000 	.word	0x00625000
     f0c:	006c0000 	.word	0x006c0000
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     f10:	00010000 	.word	0x00010000
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
     f14:	00000050 	.word	0x00000050
short CheckServoAngleBounds(short sID, short sVal, const short *sMin,
		const short *sMax) {

	// Pull into simple function as so I can report errors on debug
	// Note ID is bogus, but something to let me know which one.
	short s = (short) pgm_read_word(sMin);
     f18:	00000000 	.word	0x00000000
	if (sVal < s) {
     f1c:	00007c00 	.word	0x00007c00
     f20:	00008400 	.word	0x00008400
     f24:	50000100 	.word	0x50000100
		return s;
	}

	s = (short) pgm_read_word(sMax);
     f28:	00000084 	.word	0x00000084
     f2c:	000000b4 	.word	0x000000b4
     f30:	00510001 	.word	0x00510001
		CoxaAngle1[LegIndex] = CheckServoAngleBounds(s++, CoxaAngle1[LegIndex],
				&cCoxaMin1[LegIndex], &cCoxaMax1[LegIndex]);
		FemurAngle1[LegIndex] = CheckServoAngleBounds(s++,
				FemurAngle1[LegIndex], &cFemurMin1[LegIndex],
				&cFemurMax1[LegIndex]);
		TibiaAngle1[LegIndex] = CheckServoAngleBounds(s++,
     f34:	00000000 	.word	0x00000000
     f38:	84000000 	.word	0x84000000
//[CHECK ANGLES] Checks the mechanical limits of the servos
//--------------------------------------------------------------------
void CheckAngles(void) {
#ifndef SERVOS_DO_MINMAX
	short s = 0;  // BUGBUG just some index so we can get a hint who errored out
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
     f3c:	98000000 	.word	0x98000000
     f40:	01000000 	.word	0x01000000
				TibiaAngle1[LegIndex], &cTibiaMin1[LegIndex],
				&cTibiaMax1[LegIndex]);

	}
#endif
}
     f44:	009a5000 	.word	0x009a5000
     f48:	00a40000 	.word	0x00a40000
     f4c:	00010000 	.word	0x00010000
     f50:	00000050 	.word	0x00000050
     f54:	00000000 	.word	0x00000000
     f58:	0000b400 	.word	0x0000b400
     f5c:	0000b800 	.word	0x0000b800
     f60:	5d000100 	.word	0x5d000100
     f64:	000000b8 	.word	0x000000b8
     f68:	000000e4 	.word	0x000000e4
     f6c:	087d0002 	.word	0x087d0002
	...
//            rotation and translation much smoother
//--------------------------------------------------------------------
short SmoothControl(short CtrlMoveInp, short CtrlMoveOut, byte CtrlDivider) {

	if (CtrlMoveOut < (CtrlMoveInp - 4))
		return CtrlMoveOut + abs((CtrlMoveOut - CtrlMoveInp) / CtrlDivider);
     f78:	000000fc 	.word	0x000000fc
     f7c:	000000fe 	.word	0x000000fe
     f80:	fe5d0001 	.word	0xfe5d0001
     f84:	6c000000 	.word	0x6c000000
     f88:	02000001 	.word	0x02000001
     f8c:	00107d00 	.word	0x00107d00
     f90:	00000000 	.word	0x00000000
	else if (CtrlMoveOut > (CtrlMoveInp + 4))
     f94:	fc000000 	.word	0xfc000000
		return CtrlMoveOut - abs((CtrlMoveOut - CtrlMoveInp) / CtrlDivider);
     f98:	08000000 	.word	0x08000000
     f9c:	01000001 	.word	0x01000001
     fa0:	00005000 	.word	0x00005000
     fa4:	00000000 	.word	0x00000000
     fa8:	016c0000 	.word	0x016c0000
     fac:	016e0000 	.word	0x016e0000
     fb0:	00010000 	.word	0x00010000

	return CtrlMoveInp;
}
     fb4:	00016e5d 	.word	0x00016e5d
// GetLegsXZLength -
//--------------------------------------------------------------------
word g_wLegsXZLength = 0xffff;
word GetLegsXZLength(void) {
	// Could save away or could do a little math on one leg...
	if (g_wLegsXZLength != 0xffff)
     fb8:	00017200 	.word	0x00017200
     fbc:	7d000200 	.word	0x7d000200
     fc0:	0001720c 	.word	0x0001720c

//--------------------------------------------------------------------
// GetLegsXZLength -
//--------------------------------------------------------------------
word g_wLegsXZLength = 0xffff;
word GetLegsXZLength(void) {
     fc4:	0001c800 	.word	0x0001c800
	// Could save away or could do a little math on one leg...
	if (g_wLegsXZLength != 0xffff)
		return g_wLegsXZLength;

	return isqrt32((LegPosX[0] * LegPosX[0]) + (LegPosZ[0] * LegPosZ[0]));
     fc8:	7d000200 	.word	0x7d000200
     fcc:	00000010 	.word	0x00000010
     fd0:	00000000 	.word	0x00000000
     fd4:	00016c00 	.word	0x00016c00
     fd8:	0001a600 	.word	0x0001a600
     fdc:	50000100 	.word	0x50000100
	...
}
     fe8:	00000176 	.word	0x00000176
     fec:	000001a0 	.word	0x000001a0

#ifndef MAX_XZ_LEG_ADJUST
#define MAX_XZ_LEG_ADJUST   (word)(cCoxaLength[0]+cTibiaLength[0] + cFemurLength[0]/4)
#endif

void AdjustLegPositions(word XZLength1) {
     ff0:	00520001 	.word	0x00520001
     ff4:	00000000 	.word	0x00000000
     ff8:	c8000000 	.word	0xc8000000
     ffc:	ca000001 	.word	0xca000001
    1000:	01000001 	.word	0x01000001
		XZLength1 = MAX_XZ_LEG_ADJUST;
	if (XZLength1 < MIN_XZ_LEG_ADJUST)
		XZLength1 = MIN_XZ_LEG_ADJUST;

	// see if same length as when we came in
	if (XZLength1 == g_wLegsXZLength)
    1004:	01ca5d00 	.word	0x01ca5d00
    1008:	02240000 	.word	0x02240000
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		GetSinCos((short) pgm_read_word(&cCoxaAngle1[LegIndex]));

		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
    100c:	00020000 	.word	0x00020000

	// see if same length as when we came in
	if (XZLength1 == g_wLegsXZLength)
		return;

	g_wLegsXZLength = XZLength1;
    1010:	0000087d 	.word	0x0000087d

	u8 LegIndex;
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		GetSinCos((short) pgm_read_word(&cCoxaAngle1[LegIndex]));
    1014:	00000000 	.word	0x00000000
    1018:	02240000 	.word	0x02240000

		LegPosX[LegIndex] = ((long) ((long) cos4 * XZLength1)) / c4DEC; //Set start positions for each leg
    101c:	02260000 	.word	0x02260000
    1020:	00010000 	.word	0x00010000
    1024:	0002265d 	.word	0x0002265d
    1028:	00022a00 	.word	0x00022a00
    102c:	7d000200 	.word	0x7d000200
    1030:	00022a14 	.word	0x00022a14
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
    1034:	0002bc00 	.word	0x0002bc00
    1038:	7d000200 	.word	0x7d000200
    103c:	00000018 	.word	0x00000018
    1040:	00000000 	.word	0x00000000
    1044:	00025400 	.word	0x00025400
    1048:	00025a00 	.word	0x00025a00
		return;

	g_wLegsXZLength = XZLength1;

	u8 LegIndex;
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    104c:	54000100 	.word	0x54000100
	...
		LegPosZ[LegIndex] = -((long) ((long) sin4 * XZLength1)) / c4DEC;
	}

	// Make sure we cycle through one gait to have the legs all move into their new locations...
	g_InControlState.ForceGaitStepCnt = g_InControlState.gaitCur.StepsInGait;
}
    1058:	000002bc 	.word	0x000002bc
    105c:	000002be 	.word	0x000002be
    1060:	be5d0001 	.word	0xbe5d0001
    1064:	c2000002 	.word	0xc2000002
    1068:	02000002 	.word	0x02000002
    106c:	c2147d00 	.word	0xc2147d00
    1070:	84000002 	.word	0x84000002
    1074:	02000003 	.word	0x02000003
    1078:	00187d00 	.word	0x00187d00
		g_InControlState.aCoxaInitAngle1[LegIndex] = (short)pgm_read_word(&cCoxaAngle1[LegIndex]);
#endif
	}
	g_wLegsXZLength = 0xffff;
#endif
}
    107c:	00000000 	.word	0x00000000
		else if (g_InControlState.aCoxaInitAngle1[LegIndex] < -700)
		g_InControlState.aCoxaInitAngle1[LegIndex] = -700;
	}
	g_wLegsXZLength = 0xffff;
#endif
}
    1080:	bc000000 	.word	0xbc000000
//     to be appropriate for the current y location of the body...
//--------------------------------------------------------------------

u8 g_iLegInitIndex = 0x00; // remember which index we are currently using...

void AdjustLegPositionsToBodyHeight() {
    1084:	d2000002 	.word	0xd2000002
    1088:	01000002 	.word	0x01000002
#ifdef CNT_HEX_INITS
	// Lets see which of our units we should use...
	// Note: We will also limit our body height here...
	if (g_InControlState.BodyPos.y
    108c:	02e65000 	.word	0x02e65000
			> (short) pgm_read_byte(&g_abHexMaxBodyY[CNT_HEX_INITS-1]))
		g_InControlState.BodyPos.y = (short) pgm_read_byte(
    1090:	02ec0000 	.word	0x02ec0000
				&g_abHexMaxBodyY[CNT_HEX_INITS-1]);

	u8 i;
	word XZLength1 = pgm_read_byte(&g_abHexIntXZ[CNT_HEX_INITS-1]);
	for (i = 0; i < (CNT_HEX_INITS - 1); i++) { // Don't need to look at last entry as we already init to assume this one...
		if (g_InControlState.BodyPos.y
    1094:	00010000 	.word	0x00010000
    1098:	00036050 	.word	0x00036050
				<= (short) pgm_read_byte(&g_abHexMaxBodyY[i])) {
			XZLength1 = pgm_read_byte(&g_abHexIntXZ[i]);
			break;
		}
	}
	if (i != g_iLegInitIndex) {
    109c:	00036200 	.word	0x00036200
				&g_abHexMaxBodyY[CNT_HEX_INITS-1]);

	u8 i;
	word XZLength1 = pgm_read_byte(&g_abHexIntXZ[CNT_HEX_INITS-1]);
	for (i = 0; i < (CNT_HEX_INITS - 1); i++) { // Don't need to look at last entry as we already init to assume this one...
		if (g_InControlState.BodyPos.y
    10a0:	50000100 	.word	0x50000100
	...
				<= (short) pgm_read_byte(&g_abHexMaxBodyY[i])) {
			XZLength1 = pgm_read_byte(&g_abHexIntXZ[i]);
			break;
		}
	}
	if (i != g_iLegInitIndex) {
    10ac:	0000030c 	.word	0x0000030c
		g_iLegInitIndex = i;  // remember the current index...
		AdjustLegPositions(XZLength1);
    10b0:	0000030e 	.word	0x0000030e
	}
#endif // CNT_HEX_INITS
}
    10b4:	1e530001 	.word	0x1e530001
    10b8:	2c000003 	.word	0x2c000003
    10bc:	01000003 	.word	0x01000003
}
//--------------------------------------------------------------------
//[CHECK VOLTAGE]
//Reads the input voltage and shuts down the bot when the power drops
byte s_bLVBeepCnt;
boolean CheckVoltage() {
    10c0:	03325300 	.word	0x03325300
    10c4:	033c0000 	.word	0x033c0000
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10c8:	00010000 	.word	0x00010000

	// BUGBUG:: if voltage is 0 it failed to retrieve don't hang program...
	//    if (!Voltage)
	//      return;

	if (!g_fLowVoltageShutdown) {
    10cc:	00034a53 	.word	0x00034a53
boolean CheckVoltage() {
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10d0:	00035800 	.word	0x00035800

	// BUGBUG:: if voltage is 0 it failed to retrieve don't hang program...
	//    if (!Voltage)
	//      return;

	if (!g_fLowVoltageShutdown) {
    10d4:	53000100 	.word	0x53000100
boolean CheckVoltage() {
#ifdef cTurnOffVol
	// Moved to Servo Driver - BUGBUG: Need to do when I merge back...
	//    Voltage = analogRead(cVoltagePin); // Battery voltage
	//    Voltage = ((long)Voltage*1955)/1000;
	Voltage = ReadAnalog(VBUS) >> 4;
    10d8:	0000035c 	.word	0x0000035c

	if (!g_fLowVoltageShutdown) {
		/**PrintString("Voltage : ");
		Printu32d(Voltage);
		PrintString("\n");*/
		if ((Voltage < cTurnOffVol) || (Voltage >= 1999)) {
    10dc:	00000360 	.word	0x00000360
    10e0:	00530001 	.word	0x00530001
    10e4:	00000000 	.word	0x00000000


			//Turn off
			g_InControlState.BodyPos.x = 0;
    10e8:	84000000 	.word	0x84000000
			g_InControlState.TravelLength.x = 0;
			g_InControlState.TravelLength.z = 0;

#ifdef OPT_SINGLELEG
			g_InControlState.TravelLength.y = 0;
			g_InControlState.SelectedLeg = 255;
    10ec:	86000003 	.word	0x86000003
    10f0:	01000003 	.word	0x01000003
#endif
			g_fLowVoltageShutdown = 1;
    10f4:	03865d00 	.word	0x03865d00
			s_bLVBeepCnt = 0;    // how many times we beeped...
    10f8:	038a0000 	.word	0x038a0000
		if ((Voltage < cTurnOffVol) || (Voltage >= 1999)) {


			//Turn off
			g_InControlState.BodyPos.x = 0;
			g_InControlState.BodyPos.y = 0;
    10fc:	00020000 	.word	0x00020000
			g_InControlState.BodyPos.z = 0;
			g_InControlState.BodyRot1.x = 0;
    1100:	038a147d 	.word	0x038a147d
			g_InControlState.BodyRot1.y = 0;
			g_InControlState.BodyRot1.z = 0;
    1104:	03bc0000 	.word	0x03bc0000
			g_InControlState.TravelLength.x = 0;
			g_InControlState.TravelLength.z = 0;
    1108:	00020000 	.word	0x00020000
#ifdef OPT_SINGLELEG
			g_InControlState.TravelLength.y = 0;
			g_InControlState.SelectedLeg = 255;
#endif
			g_fLowVoltageShutdown = 1;
			s_bLVBeepCnt = 0;    // how many times we beeped...
    110c:	0000187d 	.word	0x0000187d
			g_InControlState.fRobotOn = false;
    1110:	00000000 	.word	0x00000000
		}
#ifdef cTurnOnVol
	} else if ((Voltage > cTurnOnVol) && (Voltage < 1999)) {
    1114:	0000      	.short	0x0000
    1116:	0048      	.short	0x0048
    1118:	004a0000 	.word	0x004a0000

		g_fLowVoltageShutdown = 0;
    111c:	00010000 	.word	0x00010000
    1120:	00004a5d 	.word	0x00004a5d

#endif
	} else {
		if (s_bLVBeepCnt < 5) {
    1124:	00004e00 	.word	0x00004e00
    1128:	7d000200 	.word	0x7d000200
			s_bLVBeepCnt++;
    112c:	00004e14 	.word	0x00004e14

			//MSound( 1, 45, 2000);
			Buzzed(45, 2000);
    1130:	0000b400 	.word	0x0000b400
    1134:	7d000200 	.word	0x7d000200
    1138:	00000020 	.word	0x00000020
		}
		mDelay(2000);
    113c:	00000000 	.word	0x00000000
    1140:	00004800 	.word	0x00004800
    1144:	00005200 	.word	0x00005200
	}
#endif

	return g_fLowVoltageShutdown;
}
    1148:	50000100 	.word	0x50000100
    114c:	00000052 	.word	0x00000052
    1150:	000000b4 	.word	0x000000b4
    1154:	00540001 	.word	0x00540001
    1158:	00000000 	.word	0x00000000

//==============================================================================
// BackgroundProcess - Allows us to have some background processing for those
//    servo drivers that need us to do things like polling...
//==============================================================================
void BackgroundProcess(void) {
    115c:	62000000 	.word	0x62000000
    1160:	7e000000 	.word	0x7e000000
	if (g_fAXSpeedControl)
    1164:	02000000 	.word	0x02000000
		return;  // nothing to do in this mode...

	if (ServosEnabled) {
		//DebugToggle(A3);
		BioloidControllerEx_interpolateStep(false); // Do our background stuff...
    1168:	7e047d00 	.word	0x7e047d00
		Battery_Monitor_Alarm();
    116c:	84000000 	.word	0x84000000
	}
}
    1170:	02000000 	.word	0x02000000
    1174:	84789100 	.word	0x84789100
//Function that gets called from the main loop if the robot is not logically
//     on.  Gives us a chance to play some...
//--------------------------------------------------------------------
static u8 g_iIdleServoNum = (u8) - 1;
static u8 g_iIdleLedState = 1;  // what state to we wish to set...
void IdleTime(void) {
    1178:	b4000000 	.word	0xb4000000
    117c:	02000000 	.word	0x02000000
	// Each time we call this set servos LED on or off...
	g_iIdleServoNum++;
    1180:	00047d00 	.word	0x00047d00
	if (g_iIdleServoNum >= NUMSERVOS) {
    1184:	00000000 	.word	0x00000000
    1188:	b4000000 	.word	0xb4000000
		g_iIdleServoNum = 0;
    118c:	b6000000 	.word	0xb6000000
		g_iIdleLedState = 1 - g_iIdleLedState;
    1190:	01000000 	.word	0x01000000
    1194:	00b65d00 	.word	0x00b65d00
	}
	dxl_write_byte(pgm_read_byte(&cPinTable[g_iIdleServoNum]), AXM_LED,
    1198:	00ba0000 	.word	0x00ba0000
    119c:	00020000 	.word	0x00020000
    11a0:	00ba147d 	.word	0x00ba147d
    11a4:	01440000 	.word	0x01440000
    11a8:	00020000 	.word	0x00020000
			g_iIdleLedState);
	//ax12ReadPacket(6);  // get the response...


}
    11ac:	0000207d 	.word	0x0000207d
    11b0:	00000000 	.word	0x00000000
    11b4:	00b40000 	.word	0x00b40000
    11b8:	00be0000 	.word	0x00be0000

//--------------------------------------------------------------------
//[SetRegOnAllServos] Function that is called to set the state of one
//  register in all of the servos, like Torque on...
//--------------------------------------------------------------------
void SetRegOnAllServos(u8 bReg, u8 bVal) {
    11bc:	00010000 	.word	0x00010000
    11c0:	0000be50 	.word	0x0000be50
    11c4:	00014400 	.word	0x00014400
	 ax12write(bVal);

  }
  ax12write(0xff - (checksum % 256));
  setRX(0);*/
	 dxl_set_txpacket_id (BROADCAST_ID);
    11c8:	55000100 	.word	0x55000100
	...
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0,bReg);
    11d4:	000000d2 	.word	0x000000d2
	dxl_set_txpacket_parameter(1,2);
    11d8:	000000ee 	.word	0x000000ee
    11dc:	007d0002 	.word	0x007d0002
    11e0:	000000ee 	.word	0x000000ee
  int i;
	for (i = 0; i < poseSize; i++) {
		byte id = pgm_read_byte(&cPinTable[i]);
		dxl_set_txpacket_parameter(2 + 3 * i, id);
    11e4:	00000106 	.word	0x00000106
    11e8:	74910002 	.word	0x74910002
    11ec:	00000106 	.word	0x00000106
    11f0:	00000108 	.word	0x00000108
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
    11f4:	007d0002 	.word	0x007d0002
    11f8:	00000108 	.word	0x00000108
    11fc:	00000122 	.word	0x00000122
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
    1200:	74910002 	.word	0x74910002
    1204:	00000122 	.word	0x00000122
    1208:	00000144 	.word	0x00000144
	dxl_set_txpacket_parameter(1,2);
  int i;
	for (i = 0; i < poseSize; i++) {
		byte id = pgm_read_byte(&cPinTable[i]);
		dxl_set_txpacket_parameter(2 + 3 * i, id);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
    120c:	007d0002 	.word	0x007d0002
	...
	 dxl_set_txpacket_id (BROADCAST_ID);
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0,bReg);
	dxl_set_txpacket_parameter(1,2);
  int i;
	for (i = 0; i < poseSize; i++) {
    1218:	000000c2 	.word	0x000000c2
    121c:	000000c4 	.word	0x000000c4
		dxl_set_txpacket_parameter(2 + 3 * i, id);
		dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(bVal));
		dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(bVal));
	}

	dxl_set_txpacket_length((2 + 1) * poseSize + 4);
    1220:	047d0002 	.word	0x047d0002
    1224:	000000ce 	.word	0x000000ce
    1228:	000000f2 	.word	0x000000f2
#ifdef DEBUG_BIOLOIDEX
	PrintString("DriverAX12 --- SetRegOnAllServos ---\n");
#endif
	dxl_txrx_packet();
    122c:	047d0002 	.word	0x047d0002

	u16 CommStatus = dxl_get_result();
    1230:	000000f2 	.word	0x000000f2
#ifdef USING_PC_UART
	if (CommStatus == DXL_RXSUCCESS)
    1234:	00000108 	.word	0x00000108
		PrintErrorCode();
    1238:	78910002 	.word	0x78910002
	else
		PrintCommStatus(CommStatus);
    123c:	00000108 	.word	0x00000108
#endif
}
    1240:	00000144 	.word	0x00000144
    1244:	047d0002 	.word	0x047d0002
	...
//--------------------------------------------------------------------
void MakeSureServosAreOn(void) {

	if (ServosEnabled) {

		if (!g_fServosFree)
    1250:	00000144 	.word	0x00000144
			return;    // we are not free

		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		if (g_fAXSpeedControl) {
    1254:	00000146 	.word	0x00000146
    1258:	465d0001 	.word	0x465d0001

			int i;
			for (i = 0; i < NUMSERVOS; i++) {
				g_awGoalAXPos[i] = dxl_read_word(pgm_read_byte(&cPinTable[i]),
    125c:	4a000001 	.word	0x4a000001
    1260:	02000001 	.word	0x02000001
    1264:	4a147d00 	.word	0x4a147d00
    1268:	cc000001 	.word	0xcc000001
						AXM_PRESENT_POSITION_L);
				mDelay(25);
    126c:	02000001 	.word	0x02000001
    1270:	00207d00 	.word	0x00207d00

		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		if (g_fAXSpeedControl) {

			int i;
			for (i = 0; i < NUMSERVOS; i++) {
    1274:	00000000 	.word	0x00000000
    1278:	44000000 	.word	0x44000000
				g_awGoalAXPos[i] = dxl_read_word(pgm_read_byte(&cPinTable[i]),
						AXM_PRESENT_POSITION_L);
				mDelay(25);
			}
		} else {
			BioloidControllerEx_readPose();
    127c:	4e000001 	.word	0x4e000001
		}

		SetRegOnAllServos(AXM_TORQUE_ENABLE, 1);  // Use sync write to do it.
    1280:	01000001 	.word	0x01000001
    1284:	014e5000 	.word	0x014e5000

		CommanderInputController_AllowControllerInterrupts(true);
		g_fServosFree = false;
    1288:	01cc0000 	.word	0x01cc0000
	}

}
    128c:	00010000 	.word	0x00010000
    1290:	00000055 	.word	0x00000055
    1294:	00000000 	.word	0x00000000
    1298:	00015200 	.word	0x00015200
    129c:	00015400 	.word	0x00015400

//------------------------------------------------------------------------------------------
//[BeginServoUpdate] Does whatever preperation that is needed to starrt a move of our servos
//------------------------------------------------------------------------------------------
void BeginServoUpdate(void)    // Start the update
		{
    12a0:	7d000200 	.word	0x7d000200

	MakeSureServosAreOn();
    12a4:	00015e04 	.word	0x00015e04
	if (ServosEnabled) {

		if (g_fAXSpeedControl) {
    12a8:	00018000 	.word	0x00018000
    12ac:	7d000200 	.word	0x7d000200

#ifdef USE_AX12_SPEED_CONTROL
			// If we are trying our own Servo control need to save away the new positions...
			byte i;
			for (i = 0; i < NUMSERVOS; i++) {
				g_awCurAXPos[i] = g_awGoalAXPos[i];
    12b0:	00018004 	.word	0x00018004
    12b4:	00019400 	.word	0x00019400
    12b8:	91000200 	.word	0x91000200
		if (g_fAXSpeedControl) {

#ifdef USE_AX12_SPEED_CONTROL
			// If we are trying our own Servo control need to save away the new positions...
			byte i;
			for (i = 0; i < NUMSERVOS; i++) {
    12bc:	00019478 	.word	0x00019478
				g_awCurAXPos[i] = g_awGoalAXPos[i];
			}
#endif
		} else
			BioloidControllerEx_interpolateStep(true); // Make sure we call at least once
    12c0:	0001cc00 	.word	0x0001cc00
    12c4:	7d000200 	.word	0x7d000200

	}
}
    12c8:	00000004 	.word	0x00000004
    12cc:	00000000 	.word	0x00000000
    12d0:	0001cc00 	.word	0x0001cc00
    12d4:	0001ce00 	.word	0x0001ce00
}

//--------------------------------------------------------------------
//[FREE SERVOS] Frees all the servos
//--------------------------------------------------------------------
void FreeServos(void) {
    12d8:	5d000100 	.word	0x5d000100
    12dc:	000001ce 	.word	0x000001ce

	if (!g_fServosFree) {
    12e0:	000001d2 	.word	0x000001d2
		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		SetRegOnAllServos(AXM_TORQUE_ENABLE, 0);  // do this as one statement...
    12e4:	147d0002 	.word	0x147d0002
    12e8:	000001d2 	.word	0x000001d2
    12ec:	00000224 	.word	0x00000224
		byte i;
		for (i = 0; i < NUMSERVOS; i++) {
			Relax(pgm_read_byte(&cPinTable[i]));
    12f0:	207d0002 	.word	0x207d0002
	...

	if (!g_fServosFree) {
		CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
		SetRegOnAllServos(AXM_TORQUE_ENABLE, 0);  // do this as one statement...
		byte i;
		for (i = 0; i < NUMSERVOS; i++) {
    12fc:	000001cc 	.word	0x000001cc
			Relax(pgm_read_byte(&cPinTable[i]));
		}
		CommanderInputController_AllowControllerInterrupts(true);
		g_fServosFree = true;
    1300:	000001d8 	.word	0x000001d8
	}
}
    1304:	d8500001 	.word	0xd8500001
    1308:	24000001 	.word	0x24000001
    130c:	01000002 	.word	0x01000002
extern void SetRegOnAllServos(u8 bReg, u8 bVal);

//--------------------------------------------------------------------
//Init
//--------------------------------------------------------------------
void Servo_Init(void) {
    1310:	00005700 	.word	0x00005700
	// First lets get the actual servo positions for all of our servos...
	//pinMode(0, OUTPUT);
	g_fServosFree = true;
    1314:	00000000 	.word	0x00000000

  poseSize = NUMSERVOS;
    1318:	01d80000 	.word	0x01d80000
    131c:	01f20000 	.word	0x01f20000
  BioloidControllerEx_readPose();
    1320:	00020000 	.word	0x00020000
#ifdef cVoltagePin
	for (byte i=0; i < 8; i++)
	GetBatteryVoltage();  // init the voltage pin
#endif

	g_fAXSpeedControl = false;
    1324:	01f2047d 	.word	0x01f2047d
    1328:	02000000 	.word	0x02000000



	// Added - try to speed things up later if we do a query...
	SetRegOnAllServos(AXM_RETURN_DELAY_TIME, 0); // tell servos to give us back their info as quick as they can...
    132c:	00020000 	.word	0x00020000
    1330:	02007891 	.word	0x02007891

}
    1334:	02240000 	.word	0x02240000
    1338:	00020000 	.word	0x00020000
    133c:	0000047d 	.word	0x0000047d
    1340:	00000000 	.word	0x00000000

}

void setupPhoenix() {

	g_fShowDebugPrompt = true;
    1344:	02240000 	.word	0x02240000
void readSensors(){


}

void setupPhoenix() {
    1348:	02260000 	.word	0x02260000

	g_fShowDebugPrompt = true;
	g_fDebugOutput = false;
    134c:	00010000 	.word	0x00010000
    1350:	0002265d 	.word	0x0002265d
	//init BioloidEx
	BioloidControllerEx();
    1354:	00022a00 	.word	0x00022a00

	// Init our ServoDriver
	Servo_Init();
    1358:	7d000200 	.word	0x7d000200

	mDelay(10);
    135c:	00022a14 	.word	0x00022a14

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		LegPosX[LegIndex] = (short) pgm_read_word(&cInitPosX[LegIndex]); //Set start positions for each leg
    1360:	00027c00 	.word	0x00027c00
    1364:	7d000200 	.word	0x7d000200
		LegPosY[LegIndex] = (short) pgm_read_word(&cInitPosY[LegIndex]);
    1368:	00000020 	.word	0x00000020
    136c:	00000000 	.word	0x00000000
		LegPosZ[LegIndex] = (short) pgm_read_word(&cInitPosZ[LegIndex]);
    1370:	00022400 	.word	0x00022400

	mDelay(10);

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
		LegPosX[LegIndex] = (short) pgm_read_word(&cInitPosX[LegIndex]); //Set start positions for each leg
    1374:	00023200 	.word	0x00023200
    1378:	50000100 	.word	0x50000100
		LegPosY[LegIndex] = (short) pgm_read_word(&cInitPosY[LegIndex]);
    137c:	00000232 	.word	0x00000232
    1380:	0000027c 	.word	0x0000027c
		LegPosZ[LegIndex] = (short) pgm_read_word(&cInitPosZ[LegIndex]);
    1384:	00570001 	.word	0x00570001
    1388:	00000000 	.word	0x00000000
    138c:	2e000000 	.word	0x2e000000
	Servo_Init();

	mDelay(10);

	// Setup Init Positions
	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    1390:	4c000002 	.word	0x4c000002
    1394:	02000002 	.word	0x02000002
    1398:	4c047d00 	.word	0x4c047d00

	ResetLegInitAngles();

	//Single leg control. Make sure no leg is selected
#ifdef OPT_SINGLELEG
	g_InControlState.SelectedLeg = 255; // No Leg selected
    139c:	5a000002 	.word	0x5a000002
    13a0:	02000002 	.word	0x02000002
	g_InControlState.PrevSelectedLeg = 255;
    13a4:	5a789100 	.word	0x5a789100
#endif
	//Body Positions
	g_InControlState.BodyPos.x = 0;
    13a8:	7c000002 	.word	0x7c000002
	g_InControlState.BodyPos.y = 0;
	g_InControlState.BodyPos.z = 0;
    13ac:	02000002 	.word	0x02000002

//Body Rotations
	g_InControlState.BodyRot1.x = 0;
	g_InControlState.BodyRot1.y = 0;
    13b0:	00047d00 	.word	0x00047d00
	g_InControlState.BodyRot1.z = 0;
	g_InControlState.BodyRotOffset.x = 0;
    13b4:	00000000 	.word	0x00000000
	g_InControlState.BodyRotOffset.y = 0; //Input Y offset value to adjust centerpoint of rotation
	g_InControlState.BodyRotOffset.z = 0;
    13b8:	7c000000 	.word	0x7c000000

	//Gait
	g_InControlState.GaitType = 0;
    13bc:	80000002 	.word	0x80000002
	g_InControlState.BalanceMode = 0;
    13c0:	01000002 	.word	0x01000002
	g_InControlState.LegLiftHeight = 50;
	g_InControlState.ForceGaitStepCnt = 0; // added to try to adjust starting positions depending on height...
    13c4:	02805d00 	.word	0x02805d00
	g_InControlState.GaitStep = 1;
    13c8:	02900000 	.word	0x02900000
}

void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {
    13cc:	00020000 	.word	0x00020000
	g_InControlState.BodyRotOffset.z = 0;

	//Gait
	g_InControlState.GaitType = 0;
	g_InControlState.BalanceMode = 0;
	g_InControlState.LegLiftHeight = 50;
    13d0:	02900c7d 	.word	0x02900c7d
    13d4:	02e00000 	.word	0x02e00000
void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {

		g_InControlState.gaitCur = APG[g_InControlState.GaitType];
    13d8:	00020000 	.word	0x00020000
    13dc:	0000107d 	.word	0x0000107d
    13e0:	00000000 	.word	0x00000000
//==============================================================================

// If both PS2 and XBee are defined then we will become secondary to the xbee
void CommanderInputController_Init(void) {

	g_BodyYOffset = 0;
    13e4:	027c0000 	.word	0x027c0000
    13e8:	028e0000 	.word	0x028e0000
    13ec:	00010000 	.word	0x00010000
	g_BodyYShift = 0;
	//begin(XBEE_BAUD);
	GPSeq = 0;  // init to something...
    13f0:	00028e50 	.word	0x00028e50
    13f4:	0002a600 	.word	0x0002a600

	ControlMode = WALKMODE;
    13f8:	55000100 	.word	0x55000100
	HeightSpeedMode = NORM_NORM;
    13fc:	000002aa 	.word	0x000002aa
	//    DoubleHeightOn = false;
	DoubleTravelOn = false;
    1400:	000002c2 	.word	0x000002c2
	bJoystickWalkMode = 0;
    1404:	00550001 	.word	0x00550001
	GaitSelect();

	CommanderInputController_Init();

	// Servo Driver
	ServoMoveTime = 150;
    1408:	00000000 	.word	0x00000000
	g_InControlState.fRobotOn = 0;
    140c:	88000000 	.word	0x88000000
	g_fLowVoltageShutdown = false;
    1410:	a2000002 	.word	0xa2000002

}
    1414:	01000002 	.word	0x01000002
    1418:	02b25400 	.word	0x02b25400
    141c:	02c60000 	.word	0x02c60000
    1420:	00010000 	.word	0x00010000
    1424:	00000054 	.word	0x00000054
    1428:	00000000 	.word	0x00000000
    142c:	0002e000 	.word	0x0002e000
    1430:	0002e400 	.word	0x0002e400
    1434:	5d000100 	.word	0x5d000100
    1438:	000002e4 	.word	0x000002e4
    143c:	000002fc 	.word	0x000002fc
    1440:	087d0002 	.word	0x087d0002
	...
    144c:	000002e0 	.word	0x000002e0
    1450:	000002ee 	.word	0x000002ee
    1454:	ee500001 	.word	0xee500001
    1458:	fc000002 	.word	0xfc000002
    145c:	01000002 	.word	0x01000002
    1460:	00005400 	.word	0x00005400
    1464:	00000000 	.word	0x00000000
//[CommitServoDriver Updates the positions of the servos - This outputs
//         as much of the command as we can without committing it.  This
//         allows us to once the previous update was completed to quickly
//        get the next command to start
//--------------------------------------------------------------------
void CommitServoDriver(word wMoveTime) {
    1468:	02fc0000 	.word	0x02fc0000
    146c:	02fe0000 	.word	0x02fe0000
    1470:	00010000 	.word	0x00010000


	CommanderInputController_AllowControllerInterrupts(false); // If on xbee on hserial tell hserial to not processess...
	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    1474:	0002fe5d 	.word	0x0002fe5d

      }
      ax12write(0xff - (checksum % 256));
      setRX(0);
*/
  	    dxl_set_txpacket_id (BROADCAST_ID);
    1478:	00030000 	.word	0x00030000
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    147c:	7d000200 	.word	0x7d000200
    1480:	00030004 	.word	0x00030004
		dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
    1484:	00030800 	.word	0x00030800
    1488:	7d000200 	.word	0x7d000200
		dxl_set_txpacket_parameter(1, 2);
    148c:	00000008 	.word	0x00000008
    1490:	00000000 	.word	0x00000000
    1494:	0002fc00 	.word	0x0002fc00
    1498:	00030400 	.word	0x00030400
      int i;
      word wSpeed;
		for (i = 0; i < poseSize; i++) {
			wSpeed = CalculateAX12MoveSpeed(g_awCurAXPos[i], g_awGoalAXPos[i], wMoveTime);    // What order should we store these values?
    149c:	50000100 	.word	0x50000100
	...
    14a8:	00000308 	.word	0x00000308
			//dxl_set_txpacket_parameter(2 + 3 * i, id_[i]);
			byte id = pgm_read_byte(&cPinTable[i]);
			dxl_set_txpacket_parameter(2 + 3 * i, id);
    14ac:	0000030a 	.word	0x0000030a
    14b0:	0a5d0001 	.word	0x0a5d0001
    14b4:	0e000003 	.word	0x0e000003
    14b8:	02000003 	.word	0x02000003
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(g_awGoalAXPos[i]));
    14bc:	0e0c7d00 	.word	0x0e0c7d00
    14c0:	24000003 	.word	0x24000003
    14c4:	02000003 	.word	0x02000003
    14c8:	00107d00 	.word	0x00107d00
    14cc:	00000000 	.word	0x00000000
			dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(g_awGoalAXPos[i]));
    14d0:	08000000 	.word	0x08000000
    14d4:	12000003 	.word	0x12000003
    14d8:	01000003 	.word	0x01000003
    14dc:	03125000 	.word	0x03125000
    14e0:	03240000 	.word	0x03240000
    14e4:	00010000 	.word	0x00010000
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(wSpeed));
    14e8:	00000055 	.word	0x00000055
    14ec:	00000000 	.word	0x00000000
    14f0:	00032400 	.word	0x00032400
		    dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(wSpeed));
    14f4:	00032600 	.word	0x00032600
    14f8:	5d000100 	.word	0x5d000100
    14fc:	00000326 	.word	0x00000326
    1500:	0000032a 	.word	0x0000032a
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
		dxl_set_txpacket_parameter(0, AXM_GOAL_POSITION_L);
		dxl_set_txpacket_parameter(1, 2);
      int i;
      word wSpeed;
		for (i = 0; i < poseSize; i++) {
    1504:	047d0002 	.word	0x047d0002
    1508:	0000032a 	.word	0x0000032a
    150c:	0000036e 	.word	0x0000036e
    1510:	107d0002 	.word	0x107d0002
	...
			dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(g_awGoalAXPos[i]));
			dxl_set_txpacket_parameter(2 + 3 * i + 1, dxl_get_lowbyte(wSpeed));
		    dxl_set_txpacket_parameter(2 + 3 * i + 2, dxl_get_highbyte(wSpeed));
		}

		dxl_set_txpacket_length((4 + 1) * poseSize + 4);
    151c:	00000324 	.word	0x00000324
#ifdef DEBUG_BIOLOIDEX
	PrintString("DriverAX12 --- CommitServoDriver ---\n");
#endif
		dxl_txrx_packet();
    1520:	00000354 	.word	0x00000354

			u16 CommStatus = dxl_get_result();
    1524:	00500001 	.word	0x00500001
#ifdef USING_PC_UART
			if (CommStatus == DXL_RXSUCCESS)
    1528:	00000000 	.word	0x00000000
				PrintErrorCode();
    152c:	70000000 	.word	0x70000000
			else
				PrintCommStatus(CommStatus);
    1530:	72000003 	.word	0x72000003
    1534:	01000003 	.word	0x01000003
#endif
#endif
		} else {
			BioloidControllerEx_interpolateSetup(wMoveTime);
    1538:	03725d00 	.word	0x03725d00

	}

	CommanderInputController_AllowControllerInterrupts(true);

}
    153c:	03760000 	.word	0x03760000
    1540:	00020000 	.word	0x00020000
    1544:	0376047d 	.word	0x0376047d
    1548:	03e60000 	.word	0x03e60000
    154c:	00020000 	.word	0x00020000
    1550:	0000107d 	.word	0x0000107d
	word wCoxaSDV;        // Coxa value in servo driver units
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    1554:	00000000 	.word	0x00000000
    1558:	03700000 	.word	0x03700000
    155c:	03cc0000 	.word	0x03cc0000
    1560:	00010000 	.word	0x00010000
    1564:	00000050 	.word	0x00000050


void OutputServoInfoForLeg(byte LegIndex, short sCoxaAngle1, short sFemurAngle1,
		short sTibiaAngle1)

		{
    1568:	00000000 	.word	0x00000000
	word wCoxaSDV;        // Coxa value in servo driver units
	word wFemurSDV;        //
	word wTibiaSDV;        //

	// The Main code now takes care of the inversion before calling.
	wCoxaSDV = (((long) (sCoxaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    156c:	0003e800 	.word	0x0003e800
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
    1570:	0003ea00 	.word	0x0003ea00
    1574:	5d000100 	.word	0x5d000100
    1578:	000003ea 	.word	0x000003ea
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;
    157c:	000003ec 	.word	0x000003ec
    1580:	047d0002 	.word	0x047d0002
    1584:	000003ec 	.word	0x000003ec


void OutputServoInfoForLeg(byte LegIndex, short sCoxaAngle1, short sFemurAngle1,
		short sTibiaAngle1)

		{
    1588:	0000045c 	.word	0x0000045c
	wFemurSDV = (((long) ((long) (sFemurAngle1)) * cPwmMult) / cPwmDiv
			+ cPFConst);
	wTibiaSDV = (((long) (sTibiaAngle1)) * cPwmMult) / cPwmDiv + cPFConst;

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
    158c:	187d0002 	.word	0x187d0002
	...
#ifdef USE_AX12_SPEED_CONTROL
			// Save away the new positions...
			g_awGoalAXPos[FIRSTCOXAPIN + LegIndex] = wCoxaSDV; // What order should we store these values?
			g_awGoalAXPos[FIRSTFEMURPIN + LegIndex] = wFemurSDV;
    1598:	000003e8 	.word	0x000003e8

	if (ServosEnabled) {
		if (g_fAXSpeedControl) {
#ifdef USE_AX12_SPEED_CONTROL
			// Save away the new positions...
			g_awGoalAXPos[FIRSTCOXAPIN + LegIndex] = wCoxaSDV; // What order should we store these values?
    159c:	00000406 	.word	0x00000406
			g_awGoalAXPos[FIRSTFEMURPIN + LegIndex] = wFemurSDV;
    15a0:	00500001 	.word	0x00500001
			g_awGoalAXPos[FIRSTTIBIAPIN + LegIndex] = wTibiaSDV;
    15a4:	00000000 	.word	0x00000000
    15a8:	02000000 	.word	0x02000000
    15ac:	0a000004 	.word	0x0a000004

#endif
		} else {
			BioloidControllerEx_setNextPose(
    15b0:	01000004 	.word	0x01000004
    15b4:	00005300 	.word	0x00005300
					pgm_read_byte(&cPinTable[FIRSTCOXAPIN + LegIndex]),
					wCoxaSDV);
			BioloidControllerEx_setNextPose(
    15b8:	00000000 	.word	0x00000000
    15bc:	04020000 	.word	0x04020000
    15c0:	04260000 	.word	0x04260000
					pgm_read_byte(&cPinTable[FIRSTFEMURPIN + LegIndex]),
					wFemurSDV);
			BioloidControllerEx_setNextPose(
    15c4:	00010000 	.word	0x00010000
    15c8:	00000050 	.word	0x00000050
					wTibiaSDV);

		}
	}
	CommanderInputController_AllowControllerInterrupts(true); // Ok for hserial again...
}
    15cc:	00000000 	.word	0x00000000
    15d0:	0003f200 	.word	0x0003f200
    15d4:	00041400 	.word	0x00041400
    15d8:	52000100 	.word	0x52000100
    15dc:	00000416 	.word	0x00000416

void StartUpdateServos() {
    15e0:	00000430 	.word	0x00000430
	byte LegIndex;

	// First call off to the init...
	BeginServoUpdate();    // Start the update
    15e4:	40520001 	.word	0x40520001
    15e8:	4e000004 	.word	0x4e000004
    15ec:	01000004 	.word	0x01000004

	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {

		OutputServoInfoForLeg(LegIndex,
    15f0:	00005200 	.word	0x00005200
    15f4:	00000000 	.word	0x00000000
    15f8:	04220000 	.word	0x04220000
    15fc:	044e0000 	.word	0x044e0000
    1600:	00010000 	.word	0x00010000
    1604:	00000051 	.word	0x00000051
    1608:	00000000 	.word	0x00000000
    160c:	00045c00 	.word	0x00045c00
    1610:	00045e00 	.word	0x00045e00
    1614:	5d000100 	.word	0x5d000100
    1618:	0000045e 	.word	0x0000045e
    161c:	00000462 	.word	0x00000462
    1620:	047d0002 	.word	0x047d0002
    1624:	00000462 	.word	0x00000462
    1628:	000004cc 	.word	0x000004cc
    162c:	187d0002 	.word	0x187d0002
	...
    1638:	0000045c 	.word	0x0000045c
    163c:	00000496 	.word	0x00000496
    1640:	00500001 	.word	0x00500001
	byte LegIndex;

	// First call off to the init...
	BeginServoUpdate();    // Start the update

	for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    1644:	00000000 	.word	0x00000000
				cTibiaInv[LegIndex] ?
						-TibiaAngle1[LegIndex] : TibiaAngle1[LegIndex]);

	}

}
    1648:	60000000 	.word	0x60000000
    164c:	82000004 	.word	0x82000004
    1650:	01000004 	.word	0x01000004
    1654:	04865200 	.word	0x04865200
    1658:	04a00000 	.word	0x04a00000
    165c:	00010000 	.word	0x00010000
    1660:	0004b052 	.word	0x0004b052
#else
word g_wLastVoltage = 0xffff;    // save the last voltage we retrieved...
byte g_bLegVoltage = 0;		// what leg did we last check?
unsigned long g_ulTimeLastBatteryVoltage;
#define VOLTAGE_REPEAT_MAX  3
word GetBatteryVoltage(void) {
    1664:	0004c000 	.word	0x0004c000
	if (interpolating && (g_wLastVoltage != 0xffff)
    1668:	52000100 	.word	0x52000100
	...
    1674:	00000492 	.word	0x00000492
    1678:	000004c0 	.word	0x000004c0
    167c:	00510001 	.word	0x00510001
    1680:	00000000 	.word	0x00000000
    1684:	cc000000 	.word	0xcc000000
			&& ((getMillis() - g_ulTimeLastBatteryVoltage)
					< VOLTAGE_MAX_TIME_BETWEEN_CALLS))
		return g_wLastVoltage;
    1688:	ce000004 	.word	0xce000004

	register u8 bLoopCnt = VOLTAGE_REPEAT_MAX;
	do {
		register word wVoltage = dxl_read_byte(1, AXM_PRESENT_VOLTAGE);
    168c:	01000004 	.word	0x01000004
    1690:	04ce5d00 	.word	0x04ce5d00
    1694:	04d00000 	.word	0x04d00000
		if (wVoltage != 0xffff) {
			g_ulTimeLastBatteryVoltage = getMillis();
    1698:	00020000 	.word	0x00020000
			g_wLastVoltage = wVoltage * 10;
    169c:	04d0047d 	.word	0x04d0047d

	register u8 bLoopCnt = VOLTAGE_REPEAT_MAX;
	do {
		register word wVoltage = dxl_read_byte(1, AXM_PRESENT_VOLTAGE);
		if (wVoltage != 0xffff) {
			g_ulTimeLastBatteryVoltage = getMillis();
    16a0:	04d80000 	.word	0x04d80000
			g_wLastVoltage = wVoltage * 10;
    16a4:	00020000 	.word	0x00020000
		}
	} while (--bLoopCnt);

	return 0;

}
    16a8:	0000087d 	.word	0x0000087d
    16ac:	00000000 	.word	0x00000000
    16b0:	04cc0000 	.word	0x04cc0000
    16b4:	04d40000 	.word	0x04d40000
// ReadMsgs
//==============================================================================

/* process messages coming from Commander
 *  format = 0xFF RIGHT_H RIGHT_V LEFT_H LEFT_V BUTTONS EXT CHECKSUM */
int Commander_ReadMsgs() {
    16b8:	00010000 	.word	0x00010000
	 }
	 #endif
	 */
	//while (CheckZBNewArrive() > 0) {
	while (1) {
		if (zgb_rx_check_arduino() == 1) {
    16bc:	00000050 	.word	0x00000050
    16c0:	00000000 	.word	0x00000000

			leftV = (signed char) (zgb_rx_data_right_V_());
    16c4:	0004d800 	.word	0x0004d800
    16c8:	0004de00 	.word	0x0004de00
			leftH = (signed char) (zgb_rx_data_right_H_());
    16cc:	5d000100 	.word	0x5d000100
    16d0:	000004de 	.word	0x000004de
			rightV = (signed char) (zgb_rx_data_left_V_());
    16d4:	00000560 	.word	0x00000560
    16d8:	087d0002 	.word	0x087d0002
	...
			rightH = (signed char) (zgb_rx_data_left_H_());
			buttons = zgb_rx_data_buttons();
    16e4:	000004d8 	.word	0x000004d8
    16e8:	000004dc 	.word	0x000004dc
			ext = zgb_rx_data_extra();
    16ec:	e0500001 	.word	0xe0500001
    16f0:	e4000004 	.word	0xe4000004

	}

	return 0;

}
    16f4:	01000004 	.word	0x01000004
    16f8:	04e85000 	.word	0x04e85000
    16fc:	04f00000 	.word	0x04f00000
    1700:	00010000 	.word	0x00010000
    1704:	0004f450 	.word	0x0004f450
    1708:	0004fc00 	.word	0x0004fc00
    170c:	50000100 	.word	0x50000100
    1710:	00000500 	.word	0x00000500

//==============================================================================
// This is The main code to input function to read inputs from the Commander and then
//process any commands.
//==============================================================================
void CommanderInputController_ControlInput(void) {
    1714:	00000508 	.word	0x00000508

	// See if we have a new command available...
	if (Commander_ReadMsgs() > 0) {
    1718:	0c500001 	.word	0x0c500001
    171c:	14000005 	.word	0x14000005
    1720:	01000005 	.word	0x01000005
    1724:	05185000 	.word	0x05185000
		// If we receive a valid message than turn robot on...
		boolean fAdjustLegPositions = false;
		short sLegInitXZAdjust = 0;
		short sLegInitAngleAdjust = 0;

		if (!g_InControlState.fRobotOn) {
    1728:	05200000 	.word	0x05200000
    172c:	00010000 	.word	0x00010000
			g_InControlState.fRobotOn = true;
    1730:	00052450 	.word	0x00052450
    1734:	00052c00 	.word	0x00052c00
		}

		// [SWITCH MODES]

		// Cycle through modes...
		if ((buttons & BUT_LT) && !(buttonsPrev & BUT_LT)) {
    1738:	50000100 	.word	0x50000100
    173c:	00000530 	.word	0x00000530
    1740:	00000538 	.word	0x00000538
    1744:	3c500001 	.word	0x3c500001
    1748:	60000005 	.word	0x60000005
    174c:	01000005 	.word	0x01000005

			if (++ControlMode >= MODECNT) {
    1750:	00005000 	.word	0x00005000
    1754:	00000000 	.word	0x00000000
    1758:	05600000 	.word	0x05600000
    175c:	05620000 	.word	0x05620000
				ControlMode = WALKMODE;    // cycled back around...
				Buzzed(50, 2000);
    1760:	00010000 	.word	0x00010000
    1764:	0005625d 	.word	0x0005625d
    1768:	00056600 	.word	0x00056600
				Buzzed(50, 3000);
    176c:	7d000200 	.word	0x7d000200
    1770:	00056604 	.word	0x00056604

			} else {
				Buzzed(50, 2000);
    1774:	0005f400 	.word	0x0005f400
    1778:	7d000200 	.word	0x7d000200
    177c:	00000008 	.word	0x00000008
			}
			if (ControlMode != SINGLELEGMODE)
    1780:	00000000 	.word	0x00000000
    1784:	0005f400 	.word	0x0005f400
				g_InControlState.SelectedLeg = 255;
    1788:	0005f600 	.word	0x0005f600
    178c:	5d000100 	.word	0x5d000100
    1790:	000005f6 	.word	0x000005f6

		}

		//[Common functions]
		//Switch Balance mode on/off
		if ((buttons & BUT_L4) && !(buttonsPrev & BUT_L4)) {
    1794:	000005fa 	.word	0x000005fa
    1798:	047d0002 	.word	0x047d0002
    179c:	000005fa 	.word	0x000005fa
    17a0:	00000624 	.word	0x00000624
    17a4:	087d0002 	.word	0x087d0002
	...

			g_InControlState.BalanceMode = !g_InControlState.BalanceMode;
    17b0:	00000624 	.word	0x00000624
    17b4:	00000626 	.word	0x00000626
    17b8:	265d0001 	.word	0x265d0001
    17bc:	28000006 	.word	0x28000006
			if (g_InControlState.BalanceMode) {
    17c0:	02000006 	.word	0x02000006
				Buzzed(250, 1500);
    17c4:	28047d00 	.word	0x28047d00
    17c8:	30000006 	.word	0x30000006
			} else {
				Buzzed(100, 2000);
    17cc:	02000006 	.word	0x02000006
    17d0:	00087d00 	.word	0x00087d00
				Buzzed(50, 4000);
    17d4:	00000000 	.word	0x00000000
    17d8:	30000000 	.word	0x30000000
    17dc:	32000006 	.word	0x32000006
			}
		}

		//Stand up, sit down
		if ((buttons & BUT_L5) && !(buttonsPrev & BUT_L5)) {
    17e0:	01000006 	.word	0x01000006
    17e4:	06325d00 	.word	0x06325d00
    17e8:	06360000 	.word	0x06360000
    17ec:	00020000 	.word	0x00020000
    17f0:	0636147d 	.word	0x0636147d
    17f4:	06580000 	.word	0x06580000
			if (g_BodyYOffset > 0)
    17f8:	00020000 	.word	0x00020000
    17fc:	0000187d 	.word	0x0000187d
				g_BodyYOffset = 0;
    1800:	00000000 	.word	0x00000000
    1804:	06300000 	.word	0x06300000
			else
				g_BodyYOffset = 35;
			fAdjustLegPositions = true;
			g_fDynamicLegXZLength = false;
    1808:	063e0000 	.word	0x063e0000
		//Stand up, sit down
		if ((buttons & BUT_L5) && !(buttonsPrev & BUT_L5)) {
			if (g_BodyYOffset > 0)
				g_BodyYOffset = 0;
			else
				g_BodyYOffset = 35;
    180c:	00010000 	.word	0x00010000
			fAdjustLegPositions = true;
			g_fDynamicLegXZLength = false;
    1810:	00063e50 	.word	0x00063e50
    1814:	00065800 	.word	0x00065800

		// We will use L6 with the Right joystick to control both body offset as well as Speed...
		// We move each pass through this by a percentage of how far we are from center in each direction
		// We get feedback with height by seeing the robot move up and down.  For Speed, I put in sounds
		// which give an idea, but only for those whoes robot has a speaker
		int lx = leftH;
    1818:	56000100 	.word	0x56000100
	...
    1824:	00000630 	.word	0x00000630
		int ly = leftV;
    1828:	0000063e 	.word	0x0000063e
    182c:	3e510001 	.word	0x3e510001
		if (buttons & BUT_L6) {
    1830:	58000006 	.word	0x58000006
    1834:	01000006 	.word	0x01000006
			// raise or lower the robot on the joystick up /down
			// Maybe should have Min/Max
			int delta = rightV / 25;
    1838:	00005500 	.word	0x00005500
    183c:	00000000 	.word	0x00000000
    1840:	063e0000 	.word	0x063e0000
    1844:	06420000 	.word	0x06420000
    1848:	00010000 	.word	0x00010000
    184c:	00064450 	.word	0x00064450
			if (delta) {
    1850:	00065400 	.word	0x00065400
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
    1854:	50000100 	.word	0x50000100
	...
    1860:	00000658 	.word	0x00000658
    1864:	0000065a 	.word	0x0000065a
    1868:	5a5d0001 	.word	0x5a5d0001
    186c:	5c000006 	.word	0x5c000006
    1870:	02000006 	.word	0x02000006
    1874:	5c047d00 	.word	0x5c047d00
			sLegInitAngleAdjust = ly / 8;
			lx = 0;
			ly = 0;

			// Likewise for Speed control
			delta = rightH / 16;   //
    1878:	64000006 	.word	0x64000006
    187c:	02000006 	.word	0x02000006
    1880:	00087d00 	.word	0x00087d00
    1884:	00000000 	.word	0x00000000
    1888:	64000000 	.word	0x64000000
			if ((delta < 0) && g_InControlState.SpeedControl) {
    188c:	66000006 	.word	0x66000006
    1890:	01000006 	.word	0x01000006
    1894:	06665d00 	.word	0x06665d00
				if ((word)(-delta) < g_InControlState.SpeedControl)
    1898:	06680000 	.word	0x06680000
					g_InControlState.SpeedControl += delta;
    189c:	00020000 	.word	0x00020000
				else
					g_InControlState.SpeedControl = 0;
    18a0:	0668047d 	.word	0x0668047d
    18a4:	06760000 	.word	0x06760000

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}
			if ((delta > 0) && (g_InControlState.SpeedControl < 2000)) {
    18a8:	00020000 	.word	0x00020000
    18ac:	0000087d 	.word	0x0000087d
    18b0:	00000000 	.word	0x00000000
				g_InControlState.SpeedControl += delta;
				if (g_InControlState.SpeedControl > 2000)
    18b4:	06640000 	.word	0x06640000
					g_InControlState.SpeedControl = 0;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}
			if ((delta > 0) && (g_InControlState.SpeedControl < 2000)) {
				g_InControlState.SpeedControl += delta;
    18b8:	066c0000 	.word	0x066c0000
				if (g_InControlState.SpeedControl > 2000)
					g_InControlState.SpeedControl = 2000;
    18bc:	00010000 	.word	0x00010000
    18c0:	00000050 	.word	0x00000050

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
    18c4:	00000000 	.word	0x00000000
    18c8:	00003c00 	.word	0x00003c00
    18cc:	00004800 	.word	0x00004800
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
				fAdjustLegPositions = true;
			}

			// Also use right Horizontal to manually adjust the initial leg positions.
			sLegInitXZAdjust = lx / 10;        // play with this.
    18d0:	50000100 	.word	0x50000100
    18d4:	0000004a 	.word	0x0000004a
    18d8:	00000056 	.word	0x00000056
    18dc:	00500001 	.word	0x00500001
			sLegInitAngleAdjust = ly / 8;
    18e0:	00000000 	.word	0x00000000
    18e4:	7c000000 	.word	0x7c000000
    18e8:	88000000 	.word	0x88000000
    18ec:	01000000 	.word	0x01000000
					g_InControlState.SpeedControl = 2000;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}

			rightH = 0; // don't walk when adjusting the speed here...
    18f0:	008a5000 	.word	0x008a5000
				g_BodyYOffset = max(min(g_BodyYOffset + delta, MAX_BODY_Y), 0);
				fAdjustLegPositions = true;
			}

			// Also use right Horizontal to manually adjust the initial leg positions.
			sLegInitXZAdjust = lx / 10;        // play with this.
    18f4:	00900000 	.word	0x00900000
					g_InControlState.SpeedControl = 2000;

				Buzzed(50, 1000 + g_InControlState.SpeedControl);
			}

			rightH = 0; // don't walk when adjusting the speed here...
    18f8:	00010000 	.word	0x00010000
		}

		//[Walk functions]
		if (ControlMode == WALKMODE) {
    18fc:	00000050 	.word	0x00000050
    1900:	00000000 	.word	0x00000000
    1904:	00009c00 	.word	0x00009c00

			//Switch gates
			if (((buttons & BUT_R1) && !(buttonsPrev & BUT_R1))
    1908:	0000a000 	.word	0x0000a000
    190c:	50000100 	.word	0x50000100
	...
    1918:	000000a4 	.word	0x000000a4
    191c:	000000a6 	.word	0x000000a6
    1920:	00500001 	.word	0x00500001
    1924:	00000000 	.word	0x00000000
    1928:	a8000000 	.word	0xa8000000
    192c:	aa000000 	.word	0xaa000000
    1930:	01000000 	.word	0x01000000
    1934:	00005000 	.word	0x00005000
    1938:	00000000 	.word	0x00000000
    193c:	00bc0000 	.word	0x00bc0000
    1940:	00c60000 	.word	0x00c60000
    1944:	00010000 	.word	0x00010000
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
    1948:	0000c853 	.word	0x0000c853
					&& abs(g_InControlState.TravelLength.x) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
    194c:	0000ce00 	.word	0x0000ce00
    1950:	53000100 	.word	0x53000100
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
    1954:	000000dc 	.word	0x000000dc
					&& abs(g_InControlState.TravelLength.x) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.z) < cTravelDeadZone
					&& abs(g_InControlState.TravelLength.y * 2)
							< cTravelDeadZone) {

				g_InControlState.GaitType = g_InControlState.GaitType + 1; // Go to the next gait...
    1958:	000000e4 	.word	0x000000e4
				if (g_InControlState.GaitType < NUM_GAITS) { // Make sure we did not exceed number of gaits...
					Buzzed(50, 2000);
    195c:	00530001 	.word	0x00530001
    1960:	00000000 	.word	0x00000000
    1964:	b0000000 	.word	0xb0000000
				} else {
					Buzzed(50, 2000);
    1968:	be000000 	.word	0xbe000000
    196c:	01000000 	.word	0x01000000
    1970:	00ce5100 	.word	0x00ce5100
					Buzzed(50, 2250);
    1974:	00e40000 	.word	0x00e40000
    1978:	00010000 	.word	0x00010000
					g_InControlState.GaitType = 0;
    197c:	00000051 	.word	0x00000051
    1980:	00000000 	.word	0x00000000
}

void GaitSelect(void) {
	//Gait selector
	// First pass simply use defined table, next up will allow robots to add or relace set...
	if (g_InControlState.GaitType < NUM_GAITS) {
    1984:	0000e400 	.word	0x0000e400
    1988:	0000e600 	.word	0x0000e600
    198c:	5d000100 	.word	0x5d000100

		g_InControlState.gaitCur = APG[g_InControlState.GaitType];
    1990:	000000e6 	.word	0x000000e6
    1994:	000000ea 	.word	0x000000ea
    1998:	0c7d0002 	.word	0x0c7d0002
    199c:	000000ea 	.word	0x000000ea
    19a0:	00000268 	.word	0x00000268
				}
				GaitSelect();
			}

			//Double leg lift height
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    19a4:	107d0002 	.word	0x107d0002
	...
    19b0:	00000144 	.word	0x00000144
    19b4:	00000152 	.word	0x00000152
				Buzzed(50, 2000);
    19b8:	66500001 	.word	0x66500001
    19bc:	c2000001 	.word	0xc2000001
				HeightSpeedMode = (HeightSpeedMode + 1) & 0x3; // wrap around mode
    19c0:	01000001 	.word	0x01000001
    19c4:	02045000 	.word	0x02045000
    19c8:	020c0000 	.word	0x020c0000
    19cc:	00010000 	.word	0x00010000
				DoubleTravelOn = HeightSpeedMode & 0x1;
    19d0:	00020c51 	.word	0x00020c51
    19d4:	00021600 	.word	0x00021600
				if (HeightSpeedMode & 0x2)
    19d8:	50000100 	.word	0x50000100
    19dc:	00000216 	.word	0x00000216
					g_InControlState.LegLiftHeight = 80;
    19e0:	00000238 	.word	0x00000238
    19e4:	4c510001 	.word	0x4c510001
				else
					g_InControlState.LegLiftHeight = 50;
			}

			// Switch between Walk method 1 && Walk method 2
			if ((buttons & BUT_R2) && !(buttonsPrev & BUT_R2)) {
    19e8:	68000002 	.word	0x68000002
    19ec:	01000002 	.word	0x01000002
    19f0:	00005000 	.word	0x00005000
    19f4:	00000000 	.word	0x00000000
    19f8:	018e0000 	.word	0x018e0000

				if ((++bJoystickWalkMode) > 1)
    19fc:	01e00000 	.word	0x01e00000
    1a00:	00010000 	.word	0x00010000
    1a04:	00020c51 	.word	0x00020c51

					bJoystickWalkMode = 0;
				Buzzed(50, 2000 + bJoystickWalkMode * 250);
    1a08:	00021600 	.word	0x00021600
			// Switch between Walk method 1 && Walk method 2
			if ((buttons & BUT_R2) && !(buttonsPrev & BUT_R2)) {

				if ((++bJoystickWalkMode) > 1)

					bJoystickWalkMode = 0;
    1a0c:	51000100 	.word	0x51000100
				Buzzed(50, 2000 + bJoystickWalkMode * 250);
    1a10:	0000024c 	.word	0x0000024c
    1a14:	00000268 	.word	0x00000268
    1a18:	00510001 	.word	0x00510001
    1a1c:	00000000 	.word	0x00000000
			}

			//Walking
			switch (bJoystickWalkMode) {
    1a20:	08000000 	.word	0x08000000
    1a24:	0c000002 	.word	0x0c000002
    1a28:	01000002 	.word	0x01000002
			case 0:
				g_InControlState.TravelLength.x = -lx;
    1a2c:	02165200 	.word	0x02165200
    1a30:	022e0000 	.word	0x022e0000
    1a34:	00010000 	.word	0x00010000
				g_InControlState.TravelLength.z = -ly;
    1a38:	00000052 	.word	0x00000052
				g_InControlState.TravelLength.y = -(rightH) / 4; //Right Stick Left/Right
				break;
			case 1:
				g_InControlState.TravelLength.z = (rightV); //Right Stick Up/Down
    1a3c:	00000000 	.word	0x00000000
    1a40:	00026800 	.word	0x00026800
    1a44:	00026a00 	.word	0x00026a00
				g_InControlState.TravelLength.y = -(rightH) / 4; //Right Stick Left/Right
    1a48:	5d000100 	.word	0x5d000100
    1a4c:	0000026a 	.word	0x0000026a
    1a50:	00000270 	.word	0x00000270
    1a54:	0c7d0002 	.word	0x0c7d0002
    1a58:	00000270 	.word	0x00000270
    1a5c:	00000364 	.word	0x00000364
				break;

			}

			if (!DoubleTravelOn) {  //(Double travel length)
    1a60:	107d0002 	.word	0x107d0002
	...
				g_InControlState.TravelLength.x =
    1a6c:	000002d8 	.word	0x000002d8
						g_InControlState.TravelLength.x / 2;
				g_InControlState.TravelLength.z =
    1a70:	0000030e 	.word	0x0000030e
    1a74:	0e510001 	.word	0x0e510001
    1a78:	1a000003 	.word	0x1a000003
			}

		}

		//[Translate functions]
		g_BodyYShift = 0;
    1a7c:	01000003 	.word	0x01000003
    1a80:	00005100 	.word	0x00005100
		if (ControlMode == TRANSLATEMODE) {
    1a84:	00000000 	.word	0x00000000
    1a88:	02da0000 	.word	0x02da0000

		      g_InControlState.BodyPos.x =  SmoothControl(((lx)*2/3), g_InControlState.BodyPos.x, SmDiv);
    1a8c:	030e0000 	.word	0x030e0000
    1a90:	00010000 	.word	0x00010000
    1a94:	00030e50 	.word	0x00030e50
    1a98:	00031400 	.word	0x00031400
    1a9c:	50000100 	.word	0x50000100
	...
    1aa8:	00000364 	.word	0x00000364
		      g_InControlState.BodyPos.z =  SmoothControl(((ly)*2/3), g_InControlState.BodyPos.z, SmDiv);
    1aac:	00000366 	.word	0x00000366
    1ab0:	665d0001 	.word	0x665d0001
    1ab4:	c4000003 	.word	0xc4000003
    1ab8:	02000003 	.word	0x02000003
    1abc:	00087d00 	.word	0x00087d00
		      g_InControlState.BodyRot1.y = SmoothControl(((rightH)*2), g_InControlState.BodyRot1.y, SmDiv);
    1ac0:	00000000 	.word	0x00000000
		//[Translate functions]
		g_BodyYShift = 0;
		if (ControlMode == TRANSLATEMODE) {

		      g_InControlState.BodyPos.x =  SmoothControl(((lx)*2/3), g_InControlState.BodyPos.x, SmDiv);
		      g_InControlState.BodyPos.z =  SmoothControl(((ly)*2/3), g_InControlState.BodyPos.z, SmDiv);
    1ac4:	84000000 	.word	0x84000000
		      g_InControlState.BodyRot1.y = SmoothControl(((rightH)*2), g_InControlState.BodyRot1.y, SmDiv);
    1ac8:	8e000003 	.word	0x8e000003
    1acc:	01000003 	.word	0x01000003
    1ad0:	03905300 	.word	0x03905300
    1ad4:	03960000 	.word	0x03960000


			//      g_InControlState.BodyPos.x = (lx)/2;
			//      g_InControlState.BodyPos.z = -(ly)/3;
			//      g_InControlState.BodyRot1.y = (rightH)*2;
			g_BodyYShift = (-(rightV) / 2);
    1ad8:	00010000 	.word	0x00010000
    1adc:	0003a453 	.word	0x0003a453
    1ae0:	0003aa00 	.word	0x0003aa00
    1ae4:	53000100 	.word	0x53000100
	...
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
    1af0:	00000378 	.word	0x00000378
			g_InControlState.BodyRot1.x = (ly);
			g_InControlState.BodyRot1.y = (rightH) * 2;
    1af4:	00000386 	.word	0x00000386
    1af8:	96510001 	.word	0x96510001
			g_InControlState.BodyRot1.z = (lx);
			g_BodyYShift = (-(rightV) / 2);
    1afc:	aa000003 	.word	0xaa000003
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
			g_InControlState.BodyRot1.x = (ly);
			g_InControlState.BodyRot1.y = (rightH) * 2;
    1b00:	01000003 	.word	0x01000003
			g_BodyYShift = (-(rightV) / 2);
		}

		//[Rotate functions]
		if (ControlMode == ROTATEMODE) {
			g_InControlState.BodyRot1.x = (ly);
    1b04:	00005100 	.word	0x00005100
			g_InControlState.BodyRot1.y = (rightH) * 2;
			g_InControlState.BodyRot1.z = (lx);
			g_BodyYShift = (-(rightV) / 2);
    1b08:	00000000 	.word	0x00000000
    1b0c:	03c40000 	.word	0x03c40000
    1b10:	03c60000 	.word	0x03c60000
    1b14:	00010000 	.word	0x00010000
    1b18:	0003c65d 	.word	0x0003c65d
		}

		//[Single leg functions]
#ifdef OPT_SINGLELEG
		if (ControlMode == SINGLELEGMODE) {
    1b1c:	0003cc00 	.word	0x0003cc00

			//Switch leg for single leg control
			if ((buttons & BUT_R1) && !(buttonsPrev & BUT_R1)) {
    1b20:	7d000200 	.word	0x7d000200
    1b24:	0003cc04 	.word	0x0003cc04
    1b28:	0003fc00 	.word	0x0003fc00
    1b2c:	7d000200 	.word	0x7d000200
    1b30:	00000008 	.word	0x00000008
				Buzzed(50,2000);
    1b34:	00000000 	.word	0x00000000
    1b38:	0003c400 	.word	0x0003c400
    1b3c:	0003ee00 	.word	0x0003ee00
				if (g_InControlState.SelectedLeg < (CNT_LEGS-1)) {
    1b40:	50000100 	.word	0x50000100
	...
    1b4c:	000003c4 	.word	0x000003c4
					g_InControlState.SelectedLeg = g_InControlState.SelectedLeg + 1;
    1b50:	000003ee 	.word	0x000003ee
			   g_InControlState.SLLeg.x= (signed char)((int)((int)lx+128)/2); //Left Stick Right/Left
      		   g_InControlState.SLLeg.y= (signed char)((int)((int)rightV+128)/10); //Right Stick Up/Down
		       g_InControlState.SLLeg.z = (signed char)((int)((int)ly+128)/2); //Left Stick Up/Down

#else
			g_InControlState.SLLeg.x = lx; //Left Stick Right/Left
    1b54:	00510001 	.word	0x00510001
			g_InControlState.SLLeg.y = rightV / 3 - 20;//Right Stick Up/Down
    1b58:	00000000 	.word	0x00000000
    1b5c:	c4000000 	.word	0xc4000000
    1b60:	ca000003 	.word	0xca000003
    1b64:	01000003 	.word	0x01000003
    1b68:	03ca5200 	.word	0x03ca5200
			g_InControlState.SLLeg.z = ly;//Left Stick Up/Down

#endif
			// Hold single leg in place
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    1b6c:	03ee0000 	.word	0x03ee0000
    1b70:	00010000 	.word	0x00010000
    1b74:	0000005c 	.word	0x0000005c
      		   g_InControlState.SLLeg.y= (signed char)((int)((int)rightV+128)/10); //Right Stick Up/Down
		       g_InControlState.SLLeg.z = (signed char)((int)((int)ly+128)/2); //Left Stick Up/Down

#else
			g_InControlState.SLLeg.x = lx; //Left Stick Right/Left
			g_InControlState.SLLeg.y = rightV / 3 - 20;//Right Stick Up/Down
    1b78:	00000000 	.word	0x00000000
			g_InControlState.SLLeg.z = ly;//Left Stick Up/Down

#endif
			// Hold single leg in place
			if ((buttons & BUT_RT) && !(buttonsPrev & BUT_RT)) {
    1b7c:	0003fc00 	.word	0x0003fc00
    1b80:	0003fe00 	.word	0x0003fe00
    1b84:	5d000100 	.word	0x5d000100
				Buzzed(50,2000);
    1b88:	000003fe 	.word	0x000003fe
    1b8c:	00000402 	.word	0x00000402
				g_InControlState.fSLHold = !g_InControlState.fSLHold;
    1b90:	047d0002 	.word	0x047d0002
    1b94:	00000402 	.word	0x00000402
    1b98:	0000044c 	.word	0x0000044c
    1b9c:	087d0002 	.word	0x087d0002
	...
			}
		}
#endif

		//Calculate walking time delay
		g_InControlState.InputTimeDelay = 128- max(max(abs(lx), abs(ly)), abs(rightH));
    1ba8:	000003fc 	.word	0x000003fc
    1bac:	0000041c 	.word	0x0000041c
    1bb0:	00500001 	.word	0x00500001
    1bb4:	00000000 	.word	0x00000000
    1bb8:	fc000000 	.word	0xfc000000
    1bbc:	1c000003 	.word	0x1c000003
    1bc0:	01000004 	.word	0x01000004
    1bc4:	00005100 	.word	0x00005100
    1bc8:	00000000 	.word	0x00000000
    1bcc:	04280000 	.word	0x04280000
    1bd0:	042a0000 	.word	0x042a0000

		//Calculate g_InControlState.BodyPos.y
		g_InControlState.BodyPos.y = max(g_BodyYOffset + g_BodyYShift, 0);
    1bd4:	00010000 	.word	0x00010000
    1bd8:	00042e50 	.word	0x00042e50
    1bdc:	00043600 	.word	0x00043600
    1be0:	52000100 	.word	0x52000100
    1be4:	00000436 	.word	0x00000436
    1be8:	00000436 	.word	0x00000436

		if (sLegInitXZAdjust || sLegInitAngleAdjust) {
    1bec:	00500001 	.word	0x00500001
    1bf0:	00000000 	.word	0x00000000
			// User asked for manual leg adjustment - only do when we have finished any previous adjustment

			if (!g_InControlState.ForceGaitStepCnt) {
    1bf4:	4c000000 	.word	0x4c000000
				if (sLegInitXZAdjust)
    1bf8:	4e000004 	.word	0x4e000004
					g_fDynamicLegXZLength = true;
    1bfc:	01000004 	.word	0x01000004
    1c00:	044e5d00 	.word	0x044e5d00

				sLegInitXZAdjust += GetLegsXZLength(); // Add on current length to our adjustment...
    1c04:	04540000 	.word	0x04540000
    1c08:	00020000 	.word	0x00020000
				// Handle maybe change angles...
				if (sLegInitAngleAdjust)
					RotateLegInitAngles(sLegInitAngleAdjust);

				// Give system time to process previous calls
				AdjustLegPositions(sLegInitXZAdjust);
    1c0c:	0454047d 	.word	0x0454047d
			}
		}

		if (fAdjustLegPositions && !g_fDynamicLegXZLength)
    1c10:	047c0000 	.word	0x047c0000
    1c14:	00020000 	.word	0x00020000
    1c18:	0000087d 	.word	0x0000087d
			AdjustLegPositionsToBodyHeight(); // Put main workings into main program file
    1c1c:	00000000 	.word	0x00000000
		// Save away the buttons state as to not process the same press twice.
		buttonsPrev = buttons;
    1c20:	044c0000 	.word	0x044c0000
    1c24:	04700000 	.word	0x04700000
		extPrev = ext;
    1c28:	00010000 	.word	0x00010000
    1c2c:	00000050 	.word	0x00000050
		g_ulLastMsgTime = getMillis();
    1c30:	00000000 	.word	0x00000000
    1c34:	00044c00 	.word	0x00044c00
	} else {
		// We did not receive a valid packet.  check for a timeout to see if we should turn robot off...
		if (g_InControlState.fRobotOn) {
    1c38:	00047000 	.word	0x00047000
			if ((getMillis() - g_ulLastMsgTime) > ARBOTIX_TO)
    1c3c:	51000100 	.word	0x51000100
	...
    1c48:	0000044c 	.word	0x0000044c
    1c4c:	00000452 	.word	0x00000452
				CommanderTurnRobotOff();
    1c50:	52520001 	.word	0x52520001
		}
	}

}
    1c54:	70000004 	.word	0x70000004
    1c58:	01000004 	.word	0x01000004
    1c5c:	00005c00 	.word	0x00005c00
    1c60:	00000000 	.word	0x00000000
    1c64:	047c0000 	.word	0x047c0000
    1c68:	047e0000 	.word	0x047e0000
    1c6c:	00010000 	.word	0x00010000
    1c70:	00047e5d 	.word	0x00047e5d
    1c74:	00048200 	.word	0x00048200
    1c78:	7d000200 	.word	0x7d000200
    1c7c:	00048204 	.word	0x00048204
    1c80:	00048c00 	.word	0x00048c00
    1c84:	7d000200 	.word	0x7d000200
    1c88:	00000008 	.word	0x00000008
    1c8c:	00000000 	.word	0x00000000
    1c90:	00047c00 	.word	0x00047c00
    1c94:	00048800 	.word	0x00048800
    1c98:	50000100 	.word	0x50000100
	...
    1ca4:	0000048c 	.word	0x0000048c
    1ca8:	0000048e 	.word	0x0000048e
    1cac:	8e5d0001 	.word	0x8e5d0001

extern void setupPhoenix(void);
extern void readSensors(void);


int Big_main(void) {
    1cb0:	92000004 	.word	0x92000004

	// Must include this line in all programs using "cm530.h/.c"
	SysInit();
    1cb4:	02000004 	.word	0x02000004
	setupPhoenix();
    1cb8:	92047d00 	.word	0x92047d00
			TotalYBal1 = 0;
			TotalZBal1 = 0;

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1cbc:	d4000004 	.word	0xd4000004

	while (1){
		while (1) {
			//Start time
			unsigned long lTimeWaitEnd;
			lTimerStart = getMillis();
    1cc0:	02000004 	.word	0x02000004
    1cc4:	00087d00 	.word	0x00087d00
    1cc8:	00000000 	.word	0x00000000
#ifdef MILLIS
			PrintString("Barebones lTimerStart ");
			Printu32d(lTimerStart);
			PrintString("\n");
#endif
			DoBackgroundProcess();
    1ccc:	8c000000 	.word	0x8c000000
			//Read input
			CheckVoltage();        // check our voltages...
    1cd0:	ae000004 	.word	0xae000004
			if (!g_fLowVoltageShutdown) {
    1cd4:	01000004 	.word	0x01000004
    1cd8:	00005000 	.word	0x00005000
				CommanderInputController_ControlInput();
    1cdc:	00000000 	.word	0x00000000
			}
			WriteOutputs();        // Write Outputs
			//Single leg control
			SingleLegControl();
    1ce0:	048c0000 	.word	0x048c0000
			DoBackgroundProcess();
    1ce4:	04ae0000 	.word	0x04ae0000

			//Gait
			GaitSeq();
    1ce8:	00010000 	.word	0x00010000

			DoBackgroundProcess();
    1cec:	00000051 	.word	0x00000051

			//Balance calculations
			TotalTransX = 0;     //reset values used for calculation of balance
    1cf0:	00000000 	.word	0x00000000
    1cf4:	0004d400 	.word	0x0004d400
			TotalTransZ = 0;
    1cf8:	0004d600 	.word	0x0004d600
			TotalTransY = 0;
    1cfc:	5d000100 	.word	0x5d000100
    1d00:	000004d6 	.word	0x000004d6
			TotalXBal1 = 0;
    1d04:	000004da 	.word	0x000004da
			TotalYBal1 = 0;
    1d08:	047d0002 	.word	0x047d0002
    1d0c:	000004da 	.word	0x000004da
			TotalZBal1 = 0;
    1d10:	000004fc 	.word	0x000004fc

			if (g_InControlState.BalanceMode) {
    1d14:	087d0002 	.word	0x087d0002
	...

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1d20:	000004d4 	.word	0x000004d4

					DoBackgroundProcess();
					BalCalcOneLeg(-LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d24:	000004f0 	.word	0x000004f0
    1d28:	00500001 	.word	0x00500001
    1d2c:	00000000 	.word	0x00000000

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs

					DoBackgroundProcess();
    1d30:	fc000000 	.word	0xfc000000
					BalCalcOneLeg(-LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d34:	fe000004 	.word	0xfe000004
    1d38:	01000004 	.word	0x01000004
    1d3c:	04fe5d00 	.word	0x04fe5d00
    1d40:	05000000 	.word	0x05000000
    1d44:	00020000 	.word	0x00020000
    1d48:	0500047d 	.word	0x0500047d
    1d4c:	05080000 	.word	0x05080000
    1d50:	00020000 	.word	0x00020000
    1d54:	0000087d 	.word	0x0000087d
    1d58:	00000000 	.word	0x00000000
    1d5c:	05080000 	.word	0x05080000
    1d60:	050a0000 	.word	0x050a0000
    1d64:	00010000 	.word	0x00010000
    1d68:	00050a5d 	.word	0x00050a5d
    1d6c:	00050c00 	.word	0x00050c00
			TotalYBal1 = 0;
			TotalZBal1 = 0;

			if (g_InControlState.BalanceMode) {

				for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) { // balance calculations for all Right legs
    1d70:	7d000200 	.word	0x7d000200
    1d74:	00050c04 	.word	0x00050c04
    1d78:	00053000 	.word	0x00053000
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
    1d7c:	7d000200 	.word	0x7d000200
    1d80:	00000008 	.word	0x00000008
					DoBackgroundProcess();
					BalCalcOneLeg(LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d84:	00000000 	.word	0x00000000
    1d88:	00050800 	.word	0x00050800
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
					DoBackgroundProcess();
    1d8c:	00051000 	.word	0x00051000
					BalCalcOneLeg(LegPosX[LegIndex] + GaitPosX[LegIndex],
    1d90:	50000100 	.word	0x50000100
	...
    1d9c:	000000a8 	.word	0x000000a8
    1da0:	000000aa 	.word	0x000000aa
    1da4:	aa5d0001 	.word	0xaa5d0001
    1da8:	c8000000 	.word	0xc8000000
    1dac:	02000001 	.word	0x02000001
    1db0:	00107d00 	.word	0x00107d00
    1db4:	00000000 	.word	0x00000000
    1db8:	e8000000 	.word	0xe8000000
    1dbc:	6a000000 	.word	0x6a000000
    1dc0:	01000001 	.word	0x01000001
    1dc4:	01925000 	.word	0x01925000
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}

				for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) { // balance calculations for all Right legs
    1dc8:	01a20000 	.word	0x01a20000
    1dcc:	00010000 	.word	0x00010000
    1dd0:	00000050 	.word	0x00000050
							LegPosZ[LegIndex] + GaitPosZ[LegIndex],
							(LegPosY[LegIndex]
									 - (short) pgm_read_word(&cInitPosY[LegIndex]))
									 + GaitPosY[LegIndex], LegIndex);
				}
				BalanceBody();
    1dd4:	00000000 	.word	0x00000000
			}

			//Reset IKsolution indicators
			IKSolution = 0;
    1dd8:	00011c00 	.word	0x00011c00
    1ddc:	00017800 	.word	0x00017800
			IKSolutionWarning = 0;
			IKSolutionError = 0;

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
    1de0:	51000100 	.word	0x51000100
			}

			//Reset IKsolution indicators
			IKSolution = 0;
			IKSolutionWarning = 0;
			IKSolutionError = 0;
    1de4:	00000192 	.word	0x00000192
    1de8:	000001c8 	.word	0x000001c8

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
				DoBackgroundProcess();
    1dec:	00510001 	.word	0x00510001
				BodyFK(
    1df0:	00000000 	.word	0x00000000
    1df4:	c8000000 	.word	0xc8000000
    1df8:	ca000001 	.word	0xca000001
    1dfc:	01000001 	.word	0x01000001
    1e00:	01ca5d00 	.word	0x01ca5d00
    1e04:	01ce0000 	.word	0x01ce0000
    1e08:	00020000 	.word	0x00020000
    1e0c:	01ce0c7d 	.word	0x01ce0c7d
    1e10:	02c00000 	.word	0x02c00000
    1e14:	00020000 	.word	0x00020000
    1e18:	0000107d 	.word	0x0000107d
    1e1c:	00000000 	.word	0x00000000
    1e20:	020a0000 	.word	0x020a0000
    1e24:	02740000 	.word	0x02740000
    1e28:	00010000 	.word	0x00010000
    1e2c:	00029a50 	.word	0x00029a50
    1e30:	0002aa00 	.word	0x0002aa00
    1e34:	50000100 	.word	0x50000100
	...
    1e40:	0000023e 	.word	0x0000023e
    1e44:	00000282 	.word	0x00000282
    1e48:	9a510001 	.word	0x9a510001
    1e4c:	c0000002 	.word	0xc0000002
						+ GaitPosZ[LegIndex] - TotalTransZ,
						LegPosY[LegIndex] + g_InControlState.BodyPos.y
						+ GaitPosY[LegIndex] - TotalTransY,
						GaitRotY[LegIndex], LegIndex);

				LegIK(
    1e50:	01000002 	.word	0x01000002
    1e54:	00005100 	.word	0x00005100
    1e58:	00000000 	.word	0x00000000
    1e5c:	02c00000 	.word	0x02c00000
    1e60:	02c20000 	.word	0x02c20000
    1e64:	00010000 	.word	0x00010000
    1e68:	0002c25d 	.word	0x0002c25d
    1e6c:	0002c600 	.word	0x0002c600
    1e70:	7d000200 	.word	0x7d000200
    1e74:	0002c604 	.word	0x0002c604
    1e78:	00030400 	.word	0x00030400
    1e7c:	7d000200 	.word	0x7d000200
    1e80:	00000010 	.word	0x00000010
    1e84:	00000000 	.word	0x00000000
    1e88:	0002c000 	.word	0x0002c000
    1e8c:	0002c800 	.word	0x0002c800
    1e90:	50000100 	.word	0x50000100
	...
    1e9c:	000002c4 	.word	0x000002c4
    1ea0:	000002e2 	.word	0x000002e2
    1ea4:	00520001 	.word	0x00520001
    1ea8:	00000000 	.word	0x00000000
    1eac:	c8000000 	.word	0xc8000000
    1eb0:	d4000002 	.word	0xd4000002
    1eb4:	01000002 	.word	0x01000002
    1eb8:	00005000 	.word	0x00005000
    1ebc:	00000000 	.word	0x00000000
    1ec0:	03040000 	.word	0x03040000
			IKSolutionWarning = 0;
			IKSolutionError = 0;

			//Do IK for all Right legs

			for (LegIndex = 0; LegIndex < (CNT_LEGS / 2); LegIndex++) {
    1ec4:	03060000 	.word	0x03060000
    1ec8:	00010000 	.word	0x00010000
    1ecc:	0003065d 	.word	0x0003065d
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Do IK for all Left legs
			for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) {
    1ed0:	00030800 	.word	0x00030800
    1ed4:	7d000200 	.word	0x7d000200
				DoBackgroundProcess();
    1ed8:	00030804 	.word	0x00030804
				BodyFK(
    1edc:	00031000 	.word	0x00031000
    1ee0:	7d000200 	.word	0x7d000200
    1ee4:	00000008 	.word	0x00000008
    1ee8:	00000000 	.word	0x00000000
    1eec:	00031000 	.word	0x00031000
    1ef0:	00031200 	.word	0x00031200
    1ef4:	5d000100 	.word	0x5d000100
    1ef8:	00000312 	.word	0x00000312
    1efc:	00000314 	.word	0x00000314
    1f00:	047d0002 	.word	0x047d0002
    1f04:	00000314 	.word	0x00000314
    1f08:	00000340 	.word	0x00000340
    1f0c:	087d0002 	.word	0x087d0002
	...
    1f18:	00000310 	.word	0x00000310
    1f1c:	00000318 	.word	0x00000318
    1f20:	00500001 	.word	0x00500001
	...
    1f2c:	02000000 	.word	0x02000000
    1f30:	01000000 	.word	0x01000000
    1f34:	00025d00 	.word	0x00025d00
    1f38:	00060000 	.word	0x00060000
    1f3c:	00020000 	.word	0x00020000
    1f40:	0006047d 	.word	0x0006047d
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z
						+ GaitPosZ[LegIndex] - TotalTransZ,
						LegPosY[LegIndex] + g_InControlState.BodyPos.y
						+ GaitPosY[LegIndex] - TotalTransY,
						GaitRotY[LegIndex], LegIndex);
				LegIK(
    1f44:	002c0000 	.word	0x002c0000
    1f48:	00020000 	.word	0x00020000
    1f4c:	0000087d 	.word	0x0000087d
	...
    1f58:	000e0000 	.word	0x000e0000
    1f5c:	00010000 	.word	0x00010000
    1f60:	00001850 	.word	0x00001850
    1f64:	00001c00 	.word	0x00001c00
    1f68:	50000100 	.word	0x50000100
	...
    1f78:	00000012 	.word	0x00000012
    1f7c:	18510001 	.word	0x18510001
    1f80:	20000000 	.word	0x20000000
    1f84:	01000000 	.word	0x01000000
    1f88:	00005100 	.word	0x00005100
    1f8c:	00000000 	.word	0x00000000
    1f90:	002c0000 	.word	0x002c0000
    1f94:	002e0000 	.word	0x002e0000
    1f98:	00010000 	.word	0x00010000
    1f9c:	00002e5d 	.word	0x00002e5d
    1fa0:	00011c00 	.word	0x00011c00
    1fa4:	7d000200 	.word	0x7d000200
    1fa8:	00000008 	.word	0x00000008
    1fac:	00000000 	.word	0x00000000
    1fb0:	00002c00 	.word	0x00002c00
    1fb4:	00004400 	.word	0x00004400
    1fb8:	50000100 	.word	0x50000100
    1fbc:	0000004c 	.word	0x0000004c
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Do IK for all Left legs
			for (LegIndex = (CNT_LEGS / 2); LegIndex < CNT_LEGS; LegIndex++) {
    1fc0:	00000062 	.word	0x00000062
    1fc4:	72500001 	.word	0x72500001
    1fc8:	88000000 	.word	0x88000000
						LegPosZ[LegIndex] + g_InControlState.BodyPos.z - BodyFKPosZ
						+ GaitPosZ[LegIndex] - TotalTransZ, LegIndex);
			}

			//Check mechanical limits
			CheckAngles();
    1fcc:	01000000 	.word	0x01000000

			//Drive Servos
			if (g_InControlState.fRobotOn) {
    1fd0:	00c85000 	.word	0x00c85000
    1fd4:	00da0000 	.word	0x00da0000
    1fd8:	00010000 	.word	0x00010000
				if (g_InControlState.fRobotOn && !g_InControlState.fPrev_RobotOn) {
					// MSound(3, 60, 2000, 80, 2250, 100, 2500);
					Buzzed(30, 2000);
    1fdc:	00010c50 	.word	0x00010c50
    1fe0:	00010e00 	.word	0x00010e00
    1fe4:	50000100 	.word	0x50000100
	...
					Buzzed(80, 2250);
					Buzzed(100, 2500);
    1ff0:	000000c6 	.word	0x000000c6
    1ff4:	000000c8 	.word	0x000000c8
    1ff8:	d0540001 	.word	0xd0540001

				}

				//Calculate Servo Move time
				if ((abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
    1ffc:	1c000000 	.word	0x1c000000
    2000:	01000001 	.word	0x01000001
    2004:	00005400 	.word	0x00005400
    2008:	00000000 	.word	0x00000000
    200c:	011c0000 	.word	0x011c0000
    2010:	011e0000 	.word	0x011e0000
    2014:	00010000 	.word	0x00010000
    2018:	00011e5d 	.word	0x00011e5d
    201c:	00012200 	.word	0x00012200
    2020:	7d000200 	.word	0x7d000200
    2024:	00012204 	.word	0x00012204
						|| (abs(g_InControlState.TravelLength.z) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.y*2) > cTravelDeadZone)) {
					ServoMoveTime = g_InControlState.gaitCur.NomGaitSpeed
    2028:	00015e00 	.word	0x00015e00
    202c:	7d000200 	.word	0x7d000200
    2030:	00000008 	.word	0x00000008
    2034:	00000000 	.word	0x00000000
    2038:	00016000 	.word	0x00016000
							+ (g_InControlState.InputTimeDelay * 2)
							+ g_InControlState.SpeedControl;

					//Add aditional delay when Balance mode is on
					if (g_InControlState.BalanceMode)
    203c:	00016200 	.word	0x00016200

				//Calculate Servo Move time
				if ((abs(g_InControlState.TravelLength.x) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.z) > cTravelDeadZone)
						|| (abs(g_InControlState.TravelLength.y*2) > cTravelDeadZone)) {
					ServoMoveTime = g_InControlState.gaitCur.NomGaitSpeed
    2040:	5d000100 	.word	0x5d000100
							+ (g_InControlState.InputTimeDelay * 2)
							+ g_InControlState.SpeedControl;

					//Add aditional delay when Balance mode is on
					if (g_InControlState.BalanceMode)
						ServoMoveTime = ServoMoveTime + BALANCE_DELAY;
    2044:	00000162 	.word	0x00000162
    2048:	0000019e 	.word	0x0000019e
				} else
					//Movement speed excl. Walking
					ServoMoveTime = 200 + g_InControlState.SpeedControl;
    204c:	107d0002 	.word	0x107d0002
	...

				// note we broke up the servo driver into start/commit that way we can output all of the servo information
				// before we wait and only have the termination information to output after the wait.  That way we hopefully
				// be more accurate with our timings...
				DoBackgroundProcess();
    2058:	00000160 	.word	0x00000160
				StartUpdateServos();
    205c:	0000016e 	.word	0x0000016e

				// See if we need to sync our processor with the servo driver while walking to ensure the prev is completed
				//before sending the next one

				// Finding any incident of GaitPos/Rot <>0:
				for (LegIndex = 0; LegIndex < CNT_LEGS; LegIndex++) {
    2060:	6e500001 	.word	0x6e500001
					if ((GaitPosX[LegIndex] > cGPlimit)
    2064:	8c000001 	.word	0x8c000001
    2068:	01000001 	.word	0x01000001
    206c:	00005500 	.word	0x00005500
	...
    2078:	00020000 	.word	0x00020000
    207c:	00010000 	.word	0x00010000
    2080:	0000025d 	.word	0x0000025d
    2084:	00000600 	.word	0x00000600
    2088:	7d000200 	.word	0x7d000200
    208c:	00000604 	.word	0x00000604
    2090:	00002400 	.word	0x00002400
    2094:	7d000200 	.word	0x7d000200
    2098:	00000008 	.word	0x00000008
	...
							|| (GaitPosZ[LegIndex] > cGPlimit)
							|| (GaitPosZ[LegIndex] < -cGPlimit)
							|| (GaitRotY[LegIndex] > cGPlimit)
							|| (GaitRotY[LegIndex] < -cGPlimit)) {

						bExtraCycle = g_InControlState.gaitCur.NrLiftedPos + 1;	//For making sure that we are using timed move until all legs are down
    20a4:	00001200 	.word	0x00001200
    20a8:	50000100 	.word	0x50000100
	...
						break;
					}
				}
				if (bExtraCycle > 0) {
					bExtraCycle--;
    20b8:	00000002 	.word	0x00000002
    20bc:	025d0001 	.word	0x025d0001
					fWalking = !(bExtraCycle == 0);
    20c0:	06000000 	.word	0x06000000
    20c4:	02000000 	.word	0x02000000

					//Get endtime and calculate wait time
					lTimeWaitEnd = lTimerStart + PrevServoMoveTime;
    20c8:	06047d00 	.word	0x06047d00
    20cc:	2c000000 	.word	0x2c000000
    20d0:	02000000 	.word	0x02000000
					PrintString("\n");
#endif
					//DebugWrite(A1, HIGH);
					do {
						// Wait the appropriate time, call any background process while waiting...
						DoBackgroundProcess();
    20d4:	00087d00 	.word	0x00087d00
	...
					PrintString("\n");
#endif

				}
				// Only do commit if we are actually doing something...
				CommitServoDriver(ServoMoveTime);
    20e0:	0e000000 	.word	0x0e000000
    20e4:	01000000 	.word	0x01000000
    20e8:	00185000 	.word	0x00185000
			} else {
				//Turn the bot off - May need to add ajust here...
				if (g_InControlState.fPrev_RobotOn || (AllDown = 0)) {
    20ec:	001c0000 	.word	0x001c0000
					PrintString("Barebones lTimeWaitEnd-Millis  ");
					Printu32d(getMillis);
					PrintString("\n");
#endif
				} else {
					FreeServos();
    20f0:	00010000 	.word	0x00010000
    20f4:	00000050 	.word	0x00000050
	...
				CommitServoDriver(ServoMoveTime);
			} else {
				//Turn the bot off - May need to add ajust here...
				if (g_InControlState.fPrev_RobotOn || (AllDown = 0)) {
					ServoMoveTime = 600;
					StartUpdateServos();
    2100:	00001200 	.word	0x00001200
					CommitServoDriver(ServoMoveTime);
    2104:	51000100 	.word	0x51000100
					//MSound(3, 100, 2500, 80, 2250, 60, 2000);
					Buzzed(100, 2500);
    2108:	00000018 	.word	0x00000018
    210c:	00000020 	.word	0x00000020
    2110:	00510001 	.word	0x00510001
	...
					Buzzed(80, 2250);
					Buzzed(60, 2000);
    211c:	02000000 	.word	0x02000000
    2120:	01000000 	.word	0x01000000
    2124:	00025d00 	.word	0x00025d00

					//lTimeWaitEnd = getMillis() + 600; // setup to process background stuff while we wait...
					lTimeWaitEnd = getMillis() + 600; // setup to process background stuff while we wait...
    2128:	00040000 	.word	0x00040000
    212c:	00020000 	.word	0x00020000
					Printu32d(lTimeWaitEnd);
					PrintString("\n");
#endif
					do {
						// Wait the appropriate time, call any background process while waiting...
						DoBackgroundProcess();
    2130:	00040c7d 	.word	0x00040c7d
					} while (getMillis() < lTimeWaitEnd);
    2134:	003c0000 	.word	0x003c0000
    2138:	00020000 	.word	0x00020000
				} else {
					FreeServos();
				}

				// Allow the Servo driver to do stuff durint our idle time
				IdleTime();
    213c:	0000107d 	.word	0x0000107d
	...
				mDelay(20); // give a pause between times we call if nothing is happening
			}
			PrevServoMoveTime = ServoMoveTime;
    2148:	000c0000 	.word	0x000c0000

			//Store previous g_InControlState.fRobotOn State
			if (g_InControlState.fRobotOn)
    214c:	00010000 	.word	0x00010000
    2150:	00000050 	.word	0x00000050
	...
				g_InControlState.fPrev_RobotOn = 1;
			else
				g_InControlState.fPrev_RobotOn = 0;
    215c:	00000c00 	.word	0x00000c00
    2160:	51000100 	.word	0x51000100
    2164:	0000000c 	.word	0x0000000c
    2168:	0000003c 	.word	0x0000003c
    216c:	00540001 	.word	0x00540001
    2170:	00000000 	.word	0x00000000
    2174:	3c000000 	.word	0x3c000000
    2178:	3e000000 	.word	0x3e000000
    217c:	01000000 	.word	0x01000000
    2180:	003e5d00 	.word	0x003e5d00
    2184:	00420000 	.word	0x00420000
    2188:	00020000 	.word	0x00020000
    218c:	0042047d 	.word	0x0042047d
    2190:	004a0000 	.word	0x004a0000
    2194:	00020000 	.word	0x00020000
    2198:	0000087d 	.word	0x0000087d
    219c:	00000000 	.word	0x00000000
    21a0:	003c0000 	.word	0x003c0000
    21a4:	00460000 	.word	0x00460000
    21a8:	00010000 	.word	0x00010000
    21ac:	00000050 	.word	0x00000050
    21b0:	00000000 	.word	0x00000000
    21b4:	00003c00 	.word	0x00003c00
    21b8:	00004000 	.word	0x00004000
    21bc:	51000100 	.word	0x51000100
	...
    21c8:	0000003c 	.word	0x0000003c
    21cc:	00000046 	.word	0x00000046
    21d0:	00520001 	.word	0x00520001
    21d4:	00000000 	.word	0x00000000
    21d8:	40000000 	.word	0x40000000
    21dc:	42000000 	.word	0x42000000
    21e0:	01000000 	.word	0x01000000
    21e4:	00425d00 	.word	0x00425d00
    21e8:	004c0000 	.word	0x004c0000
    21ec:	00020000 	.word	0x00020000
    21f0:	004c047d 	.word	0x004c047d
    21f4:	00560000 	.word	0x00560000
    21f8:	00020000 	.word	0x00020000
    21fc:	0000087d 	.word	0x0000087d
    2200:	00000000 	.word	0x00000000
    2204:	00400000 	.word	0x00400000
    2208:	004a0000 	.word	0x004a0000
    220c:	00010000 	.word	0x00010000
    2210:	00000050 	.word	0x00000050
    2214:	00000000 	.word	0x00000000
    2218:	00010800 	.word	0x00010800
    221c:	00010c00 	.word	0x00010c00
    2220:	5d000100 	.word	0x5d000100
    2224:	0000010c 	.word	0x0000010c
    2228:	00000204 	.word	0x00000204
    222c:	087d0002 	.word	0x087d0002
	...
    2238:	00000204 	.word	0x00000204
    223c:	00000206 	.word	0x00000206
    2240:	065d0001 	.word	0x065d0001
    2244:	0a000002 	.word	0x0a000002
    2248:	02000002 	.word	0x02000002
    224c:	0a047d00 	.word	0x0a047d00
    2250:	3c000002 	.word	0x3c000002
    2254:	02000002 	.word	0x02000002
    2258:	00087d00 	.word	0x00087d00
    225c:	00000000 	.word	0x00000000
    2260:	04000000 	.word	0x04000000
    2264:	22000002 	.word	0x22000002
    2268:	01000002 	.word	0x01000002
    226c:	00005000 	.word	0x00005000
	...
    2278:	00020000 	.word	0x00020000
    227c:	00010000 	.word	0x00010000
    2280:	0000025d 	.word	0x0000025d
    2284:	00000600 	.word	0x00000600
    2288:	7d000200 	.word	0x7d000200
    228c:	00000604 	.word	0x00000604
    2290:	00004000 	.word	0x00004000
    2294:	7d000200 	.word	0x7d000200
    2298:	00000008 	.word	0x00000008
    229c:	00000000 	.word	0x00000000
    22a0:	00004000 	.word	0x00004000
    22a4:	00004200 	.word	0x00004200
    22a8:	5d000100 	.word	0x5d000100
    22ac:	00000042 	.word	0x00000042
    22b0:	00000046 	.word	0x00000046
    22b4:	047d0002 	.word	0x047d0002
    22b8:	00000046 	.word	0x00000046
    22bc:	00000064 	.word	0x00000064
    22c0:	087d0002 	.word	0x087d0002
	...
    22cc:	00000064 	.word	0x00000064
    22d0:	00000066 	.word	0x00000066
    22d4:	665d0001 	.word	0x665d0001
    22d8:	68000000 	.word	0x68000000
    22dc:	02000000 	.word	0x02000000
    22e0:	68107d00 	.word	0x68107d00
    22e4:	4c000000 	.word	0x4c000000
    22e8:	02000001 	.word	0x02000001
    22ec:	00287d00 	.word	0x00287d00
    22f0:	00000000 	.word	0x00000000
    22f4:	4c000000 	.word	0x4c000000
    22f8:	4e000001 	.word	0x4e000001
    22fc:	01000001 	.word	0x01000001
    2300:	014e5d00 	.word	0x014e5d00
    2304:	01500000 	.word	0x01500000
    2308:	00020000 	.word	0x00020000
    230c:	0150147d 	.word	0x0150147d
    2310:	03240000 	.word	0x03240000
    2314:	00020000 	.word	0x00020000
    2318:	0000207d 	.word	0x0000207d
    231c:	00000000 	.word	0x00000000
    2320:	03240000 	.word	0x03240000
    2324:	03260000 	.word	0x03260000
    2328:	00010000 	.word	0x00010000
    232c:	0003265d 	.word	0x0003265d
    2330:	00032c00 	.word	0x00032c00
    2334:	7d000200 	.word	0x7d000200
    2338:	00032c10 	.word	0x00032c10
    233c:	00039200 	.word	0x00039200
    2340:	7d000200 	.word	0x7d000200
    2344:	00000018 	.word	0x00000018
    2348:	00000000 	.word	0x00000000
    234c:	00039400 	.word	0x00039400
    2350:	00039600 	.word	0x00039600
    2354:	5d000100 	.word	0x5d000100
    2358:	00000396 	.word	0x00000396
    235c:	00000398 	.word	0x00000398
    2360:	047d0002 	.word	0x047d0002
    2364:	00000398 	.word	0x00000398
    2368:	00000428 	.word	0x00000428
    236c:	087d0002 	.word	0x087d0002
	...
    2378:	00000428 	.word	0x00000428
    237c:	0000042a 	.word	0x0000042a
    2380:	2a5d0001 	.word	0x2a5d0001
    2384:	30000004 	.word	0x30000004
    2388:	02000004 	.word	0x02000004
    238c:	30047d00 	.word	0x30047d00
    2390:	54000004 	.word	0x54000004
    2394:	02000004 	.word	0x02000004
    2398:	00087d00 	.word	0x00087d00
    239c:	00000000 	.word	0x00000000
    23a0:	0000      	.short	0x0000
    23a2:	00          	.byte	0x00
    23a3:	22          	.byte	0x22
    23a4:	24000000 	.word	0x24000000
    23a8:	01000000 	.word	0x01000000
    23ac:	00345000 	.word	0x00345000
    23b0:	00420000 	.word	0x00420000
    23b4:	00010000 	.word	0x00010000
    23b8:	00000050 	.word	0x00000050
    23bc:	00000000 	.word	0x00000000
    23c0:	00005e00 	.word	0x00005e00
    23c4:	00006000 	.word	0x00006000
    23c8:	50000100 	.word	0x50000100
    23cc:	0000006a 	.word	0x0000006a
    23d0:	0000006a 	.word	0x0000006a
    23d4:	00500001 	.word	0x00500001
    23d8:	00000000 	.word	0x00000000
    23dc:	d8000000 	.word	0xd8000000
    23e0:	da000000 	.word	0xda000000
    23e4:	01000000 	.word	0x01000000
    23e8:	00da5d00 	.word	0x00da5d00
    23ec:	00e20000 	.word	0x00e20000
    23f0:	00020000 	.word	0x00020000
    23f4:	00e2147d 	.word	0x00e2147d
    23f8:	012c0000 	.word	0x012c0000
    23fc:	00020000 	.word	0x00020000
    2400:	0000207d 	.word	0x0000207d
    2404:	00000000 	.word	0x00000000
    2408:	00d80000 	.word	0x00d80000
    240c:	00ec0000 	.word	0x00ec0000
    2410:	00010000 	.word	0x00010000
    2414:	0000ec50 	.word	0x0000ec50
    2418:	00012c00 	.word	0x00012c00
    241c:	55000100 	.word	0x55000100
	...
    2428:	000000d8 	.word	0x000000d8
    242c:	000000e6 	.word	0x000000e6
    2430:	e6510001 	.word	0xe6510001
    2434:	2c000000 	.word	0x2c000000
    2438:	01000001 	.word	0x01000001
    243c:	00005400 	.word	0x00005400
    2440:	00000000 	.word	0x00000000
    2444:	00ec0000 	.word	0x00ec0000
    2448:	011a0000 	.word	0x011a0000
    244c:	00010000 	.word	0x00010000
    2450:	00000050 	.word	0x00000050
    2454:	00000000 	.word	0x00000000
    2458:	00015800 	.word	0x00015800
    245c:	00015a00 	.word	0x00015a00
    2460:	5d000100 	.word	0x5d000100
    2464:	0000015a 	.word	0x0000015a
    2468:	00000162 	.word	0x00000162
    246c:	147d0002 	.word	0x147d0002
    2470:	00000162 	.word	0x00000162
    2474:	000001b4 	.word	0x000001b4
    2478:	207d0002 	.word	0x207d0002
	...
    2484:	00000158 	.word	0x00000158
    2488:	0000016e 	.word	0x0000016e
    248c:	6e500001 	.word	0x6e500001
    2490:	b4000001 	.word	0xb4000001
    2494:	01000001 	.word	0x01000001
    2498:	00005500 	.word	0x00005500
    249c:	00000000 	.word	0x00000000
    24a0:	01580000 	.word	0x01580000
    24a4:	01660000 	.word	0x01660000
    24a8:	00010000 	.word	0x00010000
    24ac:	00016651 	.word	0x00016651
    24b0:	0001b400 	.word	0x0001b400
    24b4:	54000100 	.word	0x54000100
	...
    24c0:	0000016e 	.word	0x0000016e
    24c4:	000001a2 	.word	0x000001a2
    24c8:	00500001 	.word	0x00500001
    24cc:	00000000 	.word	0x00000000
    24d0:	c8000000 	.word	0xc8000000
    24d4:	ca000001 	.word	0xca000001
    24d8:	01000001 	.word	0x01000001
    24dc:	01ca5d00 	.word	0x01ca5d00
    24e0:	01ce0000 	.word	0x01ce0000
    24e4:	00020000 	.word	0x00020000
    24e8:	01ce047d 	.word	0x01ce047d
    24ec:	02400000 	.word	0x02400000
    24f0:	00020000 	.word	0x00020000
    24f4:	0000087d 	.word	0x0000087d
    24f8:	00000000 	.word	0x00000000
    24fc:	02400000 	.word	0x02400000
    2500:	02420000 	.word	0x02420000
    2504:	00010000 	.word	0x00010000
    2508:	0002425d 	.word	0x0002425d
    250c:	00024800 	.word	0x00024800
    2510:	7d000200 	.word	0x7d000200
    2514:	00024804 	.word	0x00024804
    2518:	00025200 	.word	0x00025200
    251c:	7d000200 	.word	0x7d000200
    2520:	00000008 	.word	0x00000008
    2524:	00000000 	.word	0x00000000
    2528:	00024000 	.word	0x00024000
    252c:	00024600 	.word	0x00024600
    2530:	50000100 	.word	0x50000100
	...
    253c:	00000254 	.word	0x00000254
    2540:	00000256 	.word	0x00000256
    2544:	565d0001 	.word	0x565d0001
    2548:	a8000002 	.word	0xa8000002
    254c:	02000002 	.word	0x02000002
    2550:	00107d00 	.word	0x00107d00
    2554:	00000000 	.word	0x00000000
    2558:	54000000 	.word	0x54000000
    255c:	5e000002 	.word	0x5e000002
    2560:	01000002 	.word	0x01000002
    2564:	025e5000 	.word	0x025e5000
    2568:	02a80000 	.word	0x02a80000
    256c:	00010000 	.word	0x00010000
    2570:	00000056 	.word	0x00000056
    2574:	00000000 	.word	0x00000000
    2578:	00025400 	.word	0x00025400
    257c:	00025e00 	.word	0x00025e00
    2580:	51000100 	.word	0x51000100
    2584:	0000025e 	.word	0x0000025e
    2588:	000002a8 	.word	0x000002a8
    258c:	00550001 	.word	0x00550001
    2590:	00000000 	.word	0x00000000
    2594:	a8000000 	.word	0xa8000000
    2598:	aa000002 	.word	0xaa000002
    259c:	01000002 	.word	0x01000002
    25a0:	02aa5d00 	.word	0x02aa5d00
    25a4:	02ae0000 	.word	0x02ae0000
    25a8:	00020000 	.word	0x00020000
    25ac:	02ae047d 	.word	0x02ae047d
    25b0:	02bc0000 	.word	0x02bc0000
    25b4:	00020000 	.word	0x00020000
    25b8:	0000087d 	.word	0x0000087d
    25bc:	00000000 	.word	0x00000000
    25c0:	02bc0000 	.word	0x02bc0000
    25c4:	02be0000 	.word	0x02be0000
    25c8:	00010000 	.word	0x00010000
    25cc:	0002be5d 	.word	0x0002be5d
    25d0:	0002c200 	.word	0x0002c200
    25d4:	7d000200 	.word	0x7d000200
    25d8:	0002c204 	.word	0x0002c204
    25dc:	0002e000 	.word	0x0002e000
    25e0:	7d000200 	.word	0x7d000200
    25e4:	00000008 	.word	0x00000008
    25e8:	00000000 	.word	0x00000000
    25ec:	0002e000 	.word	0x0002e000
    25f0:	0002e200 	.word	0x0002e200
    25f4:	5d000100 	.word	0x5d000100
    25f8:	000002e2 	.word	0x000002e2
    25fc:	000002e6 	.word	0x000002e6
    2600:	047d0002 	.word	0x047d0002
    2604:	000002e6 	.word	0x000002e6
    2608:	000002f4 	.word	0x000002f4
    260c:	087d0002 	.word	0x087d0002
	...
    2618:	000002f4 	.word	0x000002f4
    261c:	000002f6 	.word	0x000002f6
    2620:	f65d0001 	.word	0xf65d0001
    2624:	f8000002 	.word	0xf8000002
    2628:	02000002 	.word	0x02000002
    262c:	f80c7d00 	.word	0xf80c7d00
    2630:	54000002 	.word	0x54000002
    2634:	02000003 	.word	0x02000003
    2638:	00207d00 	.word	0x00207d00
    263c:	00000000 	.word	0x00000000
    2640:	f4000000 	.word	0xf4000000
    2644:	fc000002 	.word	0xfc000002
    2648:	01000002 	.word	0x01000002
    264c:	02fc5000 	.word	0x02fc5000
    2650:	03040000 	.word	0x03040000
    2654:	00010000 	.word	0x00010000
    2658:	00000054 	.word	0x00000054
    265c:	00000000 	.word	0x00000000
    2660:	00035400 	.word	0x00035400
    2664:	00035600 	.word	0x00035600
    2668:	5d000100 	.word	0x5d000100
    266c:	00000356 	.word	0x00000356
    2670:	00000358 	.word	0x00000358
    2674:	0c7d0002 	.word	0x0c7d0002
    2678:	00000358 	.word	0x00000358
    267c:	000003c4 	.word	0x000003c4
    2680:	207d0002 	.word	0x207d0002
	...
    268c:	00000354 	.word	0x00000354
    2690:	0000035c 	.word	0x0000035c
    2694:	5c500001 	.word	0x5c500001
    2698:	64000003 	.word	0x64000003
    269c:	01000003 	.word	0x01000003
    26a0:	00005400 	.word	0x00005400
    26a4:	00000000 	.word	0x00000000
    26a8:	03c40000 	.word	0x03c40000
    26ac:	03c60000 	.word	0x03c60000
    26b0:	00010000 	.word	0x00010000
    26b4:	0003c65d 	.word	0x0003c65d
    26b8:	0003c800 	.word	0x0003c800
    26bc:	7d000200 	.word	0x7d000200
    26c0:	0003c80c 	.word	0x0003c80c
    26c4:	00042400 	.word	0x00042400
    26c8:	7d000200 	.word	0x7d000200
    26cc:	00000020 	.word	0x00000020
    26d0:	00000000 	.word	0x00000000
    26d4:	0003c400 	.word	0x0003c400
    26d8:	0003cc00 	.word	0x0003cc00
    26dc:	50000100 	.word	0x50000100
    26e0:	000003cc 	.word	0x000003cc
    26e4:	000003d4 	.word	0x000003d4
    26e8:	00540001 	.word	0x00540001
    26ec:	00000000 	.word	0x00000000
    26f0:	24000000 	.word	0x24000000
    26f4:	26000004 	.word	0x26000004
    26f8:	01000004 	.word	0x01000004
    26fc:	04265d00 	.word	0x04265d00
    2700:	04b40000 	.word	0x04b40000
    2704:	00020000 	.word	0x00020000
    2708:	0000087d 	.word	0x0000087d
    270c:	00000000 	.word	0x00000000
    2710:	04b40000 	.word	0x04b40000
    2714:	04b60000 	.word	0x04b60000
    2718:	00010000 	.word	0x00010000
    271c:	0004b65d 	.word	0x0004b65d
    2720:	0004f400 	.word	0x0004f400
    2724:	7d000200 	.word	0x7d000200
    2728:	00000010 	.word	0x00000010
    272c:	00000000 	.word	0x00000000
    2730:	0004b400 	.word	0x0004b400
    2734:	0004be00 	.word	0x0004be00
    2738:	50000100 	.word	0x50000100
    273c:	000004be 	.word	0x000004be
    2740:	000004f4 	.word	0x000004f4
    2744:	00560001 	.word	0x00560001
    2748:	00000000 	.word	0x00000000
    274c:	b4000000 	.word	0xb4000000
    2750:	be000004 	.word	0xbe000004
    2754:	01000004 	.word	0x01000004
    2758:	04be5100 	.word	0x04be5100
    275c:	04f40000 	.word	0x04f40000
    2760:	00010000 	.word	0x00010000
    2764:	00000055 	.word	0x00000055
    2768:	00000000 	.word	0x00000000
    276c:	0004f400 	.word	0x0004f400
    2770:	0004f600 	.word	0x0004f600
    2774:	5d000100 	.word	0x5d000100
    2778:	000004f6 	.word	0x000004f6
    277c:	00000594 	.word	0x00000594
    2780:	087d0002 	.word	0x087d0002
	...
    278c:	00000594 	.word	0x00000594
    2790:	00000596 	.word	0x00000596
    2794:	965d0001 	.word	0x965d0001
    2798:	98000005 	.word	0x98000005
    279c:	02000005 	.word	0x02000005
    27a0:	98047d00 	.word	0x98047d00
    27a4:	a0000005 	.word	0xa0000005
    27a8:	02000005 	.word	0x02000005
    27ac:	00087d00 	.word	0x00087d00
    27b0:	00000000 	.word	0x00000000
    27b4:	a0000000 	.word	0xa0000000
    27b8:	a2000005 	.word	0xa2000005
    27bc:	01000005 	.word	0x01000005
    27c0:	05a25d00 	.word	0x05a25d00
    27c4:	05d00000 	.word	0x05d00000
    27c8:	00020000 	.word	0x00020000
    27cc:	0000087d 	.word	0x0000087d
    27d0:	00000000 	.word	0x00000000
    27d4:	05a00000 	.word	0x05a00000
    27d8:	05a80000 	.word	0x05a80000
    27dc:	00010000 	.word	0x00010000
    27e0:	0005a850 	.word	0x0005a850
    27e4:	0005d000 	.word	0x0005d000
    27e8:	54000100 	.word	0x54000100
	...
    27f4:	000005d0 	.word	0x000005d0
    27f8:	000005d2 	.word	0x000005d2
    27fc:	d25d0001 	.word	0xd25d0001
    2800:	d8000005 	.word	0xd8000005
    2804:	02000005 	.word	0x02000005
    2808:	d8047d00 	.word	0xd8047d00
    280c:	e4000005 	.word	0xe4000005
    2810:	02000005 	.word	0x02000005
    2814:	00087d00 	.word	0x00087d00
    2818:	00000000 	.word	0x00000000
    281c:	d0000000 	.word	0xd0000000
    2820:	d6000005 	.word	0xd6000005
    2824:	01000005 	.word	0x01000005
    2828:	05d65000 	.word	0x05d65000
    282c:	05e00000 	.word	0x05e00000
    2830:	00010000 	.word	0x00010000
    2834:	00000053 	.word	0x00000053
    2838:	00000000 	.word	0x00000000
    283c:	00000200 	.word	0x00000200
    2840:	00000800 	.word	0x00000800
    2844:	53000100 	.word	0x53000100
    2848:	00000014 	.word	0x00000014
    284c:	00000018 	.word	0x00000018
    2850:	1e530001 	.word	0x1e530001
    2854:	2e000000 	.word	0x2e000000
    2858:	01000000 	.word	0x01000000
    285c:	002e5c00 	.word	0x002e5c00
    2860:	00480000 	.word	0x00480000
    2864:	00010000 	.word	0x00010000
    2868:	00000052 	.word	0x00000052
    286c:	00000000 	.word	0x00000000
    2870:	00008400 	.word	0x00008400
    2874:	00008600 	.word	0x00008600
    2878:	51000100 	.word	0x51000100
	...
    2884:	000000a8 	.word	0x000000a8
    2888:	000000aa 	.word	0x000000aa
    288c:	00500001 	.word	0x00500001
    2890:	00000000 	.word	0x00000000
    2894:	c0000000 	.word	0xc0000000
    2898:	c2000000 	.word	0xc2000000
    289c:	01000000 	.word	0x01000000
    28a0:	00005000 	.word	0x00005000
    28a4:	00000000 	.word	0x00000000
    28a8:	00e00000 	.word	0x00e00000
    28ac:	00e20000 	.word	0x00e20000
    28b0:	00010000 	.word	0x00010000
    28b4:	00000050 	.word	0x00000050
    28b8:	00000000 	.word	0x00000000
    28bc:	0000ec00 	.word	0x0000ec00
    28c0:	0000f000 	.word	0x0000f000
    28c4:	51000100 	.word	0x51000100
	...
    28d0:	00000110 	.word	0x00000110
    28d4:	00000114 	.word	0x00000114
    28d8:	145d0001 	.word	0x145d0001
    28dc:	a6000001 	.word	0xa6000001
    28e0:	02000001 	.word	0x02000001
    28e4:	000c7d00 	.word	0x000c7d00
    28e8:	00000000 	.word	0x00000000
    28ec:	10000000 	.word	0x10000000
    28f0:	2e000001 	.word	0x2e000001
    28f4:	01000001 	.word	0x01000001
    28f8:	012e5100 	.word	0x012e5100
    28fc:	01380000 	.word	0x01380000
    2900:	00010000 	.word	0x00010000
    2904:	00013854 	.word	0x00013854
    2908:	00014400 	.word	0x00014400
    290c:	51000100 	.word	0x51000100
    2910:	00000144 	.word	0x00000144
    2914:	000001a6 	.word	0x000001a6
    2918:	00540001 	.word	0x00540001
    291c:	00000000 	.word	0x00000000
    2920:	10000000 	.word	0x10000000
    2924:	1e000001 	.word	0x1e000001
    2928:	01000001 	.word	0x01000001
    292c:	011e5200 	.word	0x011e5200
    2930:	01a60000 	.word	0x01a60000
    2934:	00010000 	.word	0x00010000
    2938:	0000005c 	.word	0x0000005c
    293c:	00000000 	.word	0x00000000
    2940:	00011000 	.word	0x00011000
    2944:	00012000 	.word	0x00012000
    2948:	53000100 	.word	0x53000100
    294c:	00000120 	.word	0x00000120
    2950:	000001a6 	.word	0x000001a6
    2954:	00550001 	.word	0x00550001
    2958:	00000000 	.word	0x00000000
    295c:	2e000000 	.word	0x2e000000
    2960:	38000001 	.word	0x38000001
    2964:	01000001 	.word	0x01000001
    2968:	01445100 	.word	0x01445100
    296c:	01a60000 	.word	0x01a60000
    2970:	00010000 	.word	0x00010000
    2974:	00000051 	.word	0x00000051
    2978:	00000000 	.word	0x00000000
    297c:	0001bc00 	.word	0x0001bc00
    2980:	0001be00 	.word	0x0001be00
    2984:	50000100 	.word	0x50000100
	...
    2990:	000001f8 	.word	0x000001f8
    2994:	00000200 	.word	0x00000200
    2998:	00510001 	.word	0x00510001
    299c:	00000000 	.word	0x00000000
    29a0:	fa000000 	.word	0xfa000000
    29a4:	00000001 	.word	0x00000001
    29a8:	01000002 	.word	0x01000002
    29ac:	02005300 	.word	0x02005300
    29b0:	02040000 	.word	0x02040000
    29b4:	00010000 	.word	0x00010000
    29b8:	00000051 	.word	0x00000051
    29bc:	00000000 	.word	0x00000000
    29c0:	00022c00 	.word	0x00022c00
    29c4:	00022e00 	.word	0x00022e00
    29c8:	50000100 	.word	0x50000100
	...
    29d4:	00000238 	.word	0x00000238
    29d8:	0000023c 	.word	0x0000023c
    29dc:	3c5d0001 	.word	0x3c5d0001
    29e0:	9a000002 	.word	0x9a000002
    29e4:	02000002 	.word	0x02000002
    29e8:	000c7d00 	.word	0x000c7d00
    29ec:	00000000 	.word	0x00000000
    29f0:	38000000 	.word	0x38000000
    29f4:	56000002 	.word	0x56000002
    29f8:	01000002 	.word	0x01000002
    29fc:	02565100 	.word	0x02565100
    2a00:	02600000 	.word	0x02600000
    2a04:	00010000 	.word	0x00010000
    2a08:	0002605c 	.word	0x0002605c
    2a0c:	00026c00 	.word	0x00026c00
    2a10:	51000100 	.word	0x51000100
    2a14:	0000026c 	.word	0x0000026c
    2a18:	0000029a 	.word	0x0000029a
    2a1c:	005c0001 	.word	0x005c0001
    2a20:	00000000 	.word	0x00000000
    2a24:	38000000 	.word	0x38000000
    2a28:	46000002 	.word	0x46000002
    2a2c:	01000002 	.word	0x01000002
    2a30:	02465200 	.word	0x02465200
    2a34:	029a0000 	.word	0x029a0000
    2a38:	00010000 	.word	0x00010000
    2a3c:	00000055 	.word	0x00000055
    2a40:	00000000 	.word	0x00000000
    2a44:	00023800 	.word	0x00023800
    2a48:	00024800 	.word	0x00024800
    2a4c:	53000100 	.word	0x53000100
    2a50:	00000248 	.word	0x00000248
    2a54:	0000029a 	.word	0x0000029a
    2a58:	00540001 	.word	0x00540001
    2a5c:	00000000 	.word	0x00000000
    2a60:	56000000 	.word	0x56000000
    2a64:	60000002 	.word	0x60000002
    2a68:	01000002 	.word	0x01000002
    2a6c:	026c5100 	.word	0x026c5100
    2a70:	02760000 	.word	0x02760000
    2a74:	00010000 	.word	0x00010000
    2a78:	00027651 	.word	0x00027651
    2a7c:	00029a00 	.word	0x00029a00
    2a80:	53000100 	.word	0x53000100
	...
    2a8c:	0000029c 	.word	0x0000029c
    2a90:	000002a0 	.word	0x000002a0
    2a94:	00510001 	.word	0x00510001
    2a98:	00000000 	.word	0x00000000
    2a9c:	ac000000 	.word	0xac000000
    2aa0:	ae000002 	.word	0xae000002
    2aa4:	01000002 	.word	0x01000002
    2aa8:	02ae5d00 	.word	0x02ae5d00
    2aac:	02b40000 	.word	0x02b40000
    2ab0:	00020000 	.word	0x00020000
    2ab4:	0000087d 	.word	0x0000087d
    2ab8:	00000000 	.word	0x00000000
    2abc:	02ac0000 	.word	0x02ac0000
    2ac0:	02b00000 	.word	0x02b00000
    2ac4:	00010000 	.word	0x00010000
    2ac8:	00000050 	.word	0x00000050
    2acc:	00000000 	.word	0x00000000
    2ad0:	0002b400 	.word	0x0002b400
    2ad4:	0002b600 	.word	0x0002b600
    2ad8:	5d000100 	.word	0x5d000100
    2adc:	000002b6 	.word	0x000002b6
    2ae0:	000002c2 	.word	0x000002c2
    2ae4:	087d0002 	.word	0x087d0002
	...
    2af0:	000002b4 	.word	0x000002b4
    2af4:	000002b8 	.word	0x000002b8
    2af8:	00500001 	.word	0x00500001
    2afc:	00000000 	.word	0x00000000
    2b00:	c4000000 	.word	0xc4000000
    2b04:	d0000002 	.word	0xd0000002
    2b08:	01000002 	.word	0x01000002
    2b0c:	00005100 	.word	0x00005100
    2b10:	00000000 	.word	0x00000000
    2b14:	02c60000 	.word	0x02c60000
    2b18:	02d00000 	.word	0x02d00000
    2b1c:	00010000 	.word	0x00010000
    2b20:	0002d053 	.word	0x0002d053
    2b24:	0002d400 	.word	0x0002d400
    2b28:	51000100 	.word	0x51000100
	...
    2b34:	000002dc 	.word	0x000002dc
    2b38:	000002e4 	.word	0x000002e4
    2b3c:	00510001 	.word	0x00510001
    2b40:	00000000 	.word	0x00000000
    2b44:	de000000 	.word	0xde000000
    2b48:	e4000002 	.word	0xe4000002
    2b4c:	01000002 	.word	0x01000002
    2b50:	02e45300 	.word	0x02e45300
    2b54:	02e80000 	.word	0x02e80000
    2b58:	00010000 	.word	0x00010000
    2b5c:	00000051 	.word	0x00000051
    2b60:	00000000 	.word	0x00000000
    2b64:	00030400 	.word	0x00030400
    2b68:	00030e00 	.word	0x00030e00
    2b6c:	50000100 	.word	0x50000100
	...
    2b78:	00000310 	.word	0x00000310
    2b7c:	00000314 	.word	0x00000314
    2b80:	00510001 	.word	0x00510001
    2b84:	00000000 	.word	0x00000000
    2b88:	18000000 	.word	0x18000000
    2b8c:	24000003 	.word	0x24000003
    2b90:	01000003 	.word	0x01000003
    2b94:	03265000 	.word	0x03265000
    2b98:	03300000 	.word	0x03300000
    2b9c:	00010000 	.word	0x00010000
    2ba0:	00000050 	.word	0x00000050
    2ba4:	00000000 	.word	0x00000000
    2ba8:	00031800 	.word	0x00031800
    2bac:	00032800 	.word	0x00032800
    2bb0:	51000100 	.word	0x51000100
    2bb4:	00000328 	.word	0x00000328
    2bb8:	00000332 	.word	0x00000332
    2bbc:	00530001 	.word	0x00530001
    2bc0:	00000000 	.word	0x00000000
    2bc4:	24000000 	.word	0x24000000
    2bc8:	26000003 	.word	0x26000003
    2bcc:	01000003 	.word	0x01000003
    2bd0:	03305000 	.word	0x03305000
    2bd4:	03300000 	.word	0x03300000
    2bd8:	00010000 	.word	0x00010000
    2bdc:	00000050 	.word	0x00000050
    2be0:	00000000 	.word	0x00000000
    2be4:	00033400 	.word	0x00033400
    2be8:	00033800 	.word	0x00033800
    2bec:	51000100 	.word	0x51000100
	...
    2bf8:	0000033c 	.word	0x0000033c
    2bfc:	0000033e 	.word	0x0000033e
    2c00:	3e5d0001 	.word	0x3e5d0001
    2c04:	42000003 	.word	0x42000003
    2c08:	02000003 	.word	0x02000003
    2c0c:	42047d00 	.word	0x42047d00
    2c10:	94000003 	.word	0x94000003
    2c14:	02000003 	.word	0x02000003
    2c18:	00107d00 	.word	0x00107d00
    2c1c:	00000000 	.word	0x00000000
    2c20:	3c000000 	.word	0x3c000000
    2c24:	44000003 	.word	0x44000003
    2c28:	01000003 	.word	0x01000003
    2c2c:	03465000 	.word	0x03465000
    2c30:	03940000 	.word	0x03940000
    2c34:	00020000 	.word	0x00020000
    2c38:	0000047d 	.word	0x0000047d
	...
    2c44:	000e0000 	.word	0x000e0000
    2c48:	00010000 	.word	0x00010000
    2c4c:	00000050 	.word	0x00000050
    2c50:	00000000 	.word	0x00000000
    2c54:	00001800 	.word	0x00001800
    2c58:	00002600 	.word	0x00002600
    2c5c:	50000100 	.word	0x50000100
	...
    2c68:	00000030 	.word	0x00000030
    2c6c:	0000003e 	.word	0x0000003e
    2c70:	00500001 	.word	0x00500001
    2c74:	00000000 	.word	0x00000000
    2c78:	c4000000 	.word	0xc4000000
    2c7c:	d0000000 	.word	0xd0000000
    2c80:	01000000 	.word	0x01000000
    2c84:	00d25000 	.word	0x00d25000
    2c88:	00de0000 	.word	0x00de0000
    2c8c:	00010000 	.word	0x00010000
    2c90:	00000050 	.word	0x00000050
    2c94:	00000000 	.word	0x00000000
    2c98:	0000d000 	.word	0x0000d000
    2c9c:	0000d200 	.word	0x0000d200
    2ca0:	50000100 	.word	0x50000100
    2ca4:	000000de 	.word	0x000000de
    2ca8:	000000de 	.word	0x000000de
    2cac:	00500001 	.word	0x00500001
    2cb0:	00000000 	.word	0x00000000
    2cb4:	fc000000 	.word	0xfc000000
    2cb8:	fe000000 	.word	0xfe000000
    2cbc:	01000000 	.word	0x01000000
    2cc0:	01085000 	.word	0x01085000
    2cc4:	010a0000 	.word	0x010a0000
    2cc8:	00010000 	.word	0x00010000
    2ccc:	00011650 	.word	0x00011650
    2cd0:	00011600 	.word	0x00011600
    2cd4:	50000100 	.word	0x50000100
	...
    2ce0:	0000011c 	.word	0x0000011c
    2ce4:	0000011e 	.word	0x0000011e
    2ce8:	1e5d0001 	.word	0x1e5d0001
    2cec:	22000001 	.word	0x22000001
    2cf0:	02000001 	.word	0x02000001
    2cf4:	22087d00 	.word	0x22087d00
    2cf8:	b0000001 	.word	0xb0000001
    2cfc:	02000001 	.word	0x02000001
    2d00:	00107d00 	.word	0x00107d00
    2d04:	00000000 	.word	0x00000000
    2d08:	1c000000 	.word	0x1c000000
    2d0c:	2c000001 	.word	0x2c000001
    2d10:	01000001 	.word	0x01000001
    2d14:	012c5000 	.word	0x012c5000
    2d18:	01b00000 	.word	0x01b00000
    2d1c:	00010000 	.word	0x00010000
    2d20:	00000051 	.word	0x00000051
    2d24:	00000000 	.word	0x00000000
    2d28:	00012e00 	.word	0x00012e00
    2d2c:	00013000 	.word	0x00013000
    2d30:	50000100 	.word	0x50000100
    2d34:	0000013a 	.word	0x0000013a
    2d38:	0000013c 	.word	0x0000013c
    2d3c:	48500001 	.word	0x48500001
    2d40:	a8000001 	.word	0xa8000001
    2d44:	01000001 	.word	0x01000001
    2d48:	00005000 	.word	0x00005000
    2d4c:	00000000 	.word	0x00000000
    2d50:	014a0000 	.word	0x014a0000
    2d54:	014c0000 	.word	0x014c0000
    2d58:	00020000 	.word	0x00020000
    2d5c:	014c7c91 	.word	0x014c7c91
    2d60:	01520000 	.word	0x01520000
    2d64:	00020000 	.word	0x00020000
    2d68:	0152047d 	.word	0x0152047d
    2d6c:	01580000 	.word	0x01580000
    2d70:	00020000 	.word	0x00020000
    2d74:	01587c91 	.word	0x01587c91
    2d78:	015e0000 	.word	0x015e0000
    2d7c:	00020000 	.word	0x00020000
    2d80:	015e047d 	.word	0x015e047d
    2d84:	01860000 	.word	0x01860000
    2d88:	00020000 	.word	0x00020000
    2d8c:	018e7c91 	.word	0x018e7c91
    2d90:	01b00000 	.word	0x01b00000
    2d94:	00020000 	.word	0x00020000
    2d98:	00007c91 	.word	0x00007c91
    2d9c:	00000000 	.word	0x00000000
    2da0:	01b00000 	.word	0x01b00000
    2da4:	01b20000 	.word	0x01b20000
    2da8:	00010000 	.word	0x00010000
    2dac:	0001b25d 	.word	0x0001b25d
    2db0:	0001b800 	.word	0x0001b800
    2db4:	7d000200 	.word	0x7d000200
    2db8:	0001b814 	.word	0x0001b814
    2dbc:	00020c00 	.word	0x00020c00
    2dc0:	7d000200 	.word	0x7d000200
    2dc4:	00000018 	.word	0x00000018
    2dc8:	00000000 	.word	0x00000000
    2dcc:	0001b000 	.word	0x0001b000
    2dd0:	0001c400 	.word	0x0001c400
    2dd4:	50000100 	.word	0x50000100
    2dd8:	000001c4 	.word	0x000001c4
    2ddc:	0000020c 	.word	0x0000020c
    2de0:	00550001 	.word	0x00550001
    2de4:	00000000 	.word	0x00000000
    2de8:	b0000000 	.word	0xb0000000
    2dec:	cc000001 	.word	0xcc000001
    2df0:	01000001 	.word	0x01000001
    2df4:	01cc5100 	.word	0x01cc5100
    2df8:	020c0000 	.word	0x020c0000
    2dfc:	00010000 	.word	0x00010000
    2e00:	00000056 	.word	0x00000056
    2e04:	00000000 	.word	0x00000000
    2e08:	0001b000 	.word	0x0001b000
    2e0c:	0001cc00 	.word	0x0001cc00
    2e10:	52000100 	.word	0x52000100
    2e14:	000001cc 	.word	0x000001cc
    2e18:	0000020c 	.word	0x0000020c
    2e1c:	00570001 	.word	0x00570001
    2e20:	00000000 	.word	0x00000000
    2e24:	ce000000 	.word	0xce000000
    2e28:	ea000001 	.word	0xea000001
    2e2c:	01000001 	.word	0x01000001
    2e30:	01f05000 	.word	0x01f05000
    2e34:	01fc0000 	.word	0x01fc0000
    2e38:	00010000 	.word	0x00010000
    2e3c:	00000050 	.word	0x00000050
    2e40:	00000000 	.word	0x00000000
    2e44:	00020c00 	.word	0x00020c00
    2e48:	00020e00 	.word	0x00020e00
    2e4c:	5d000100 	.word	0x5d000100
    2e50:	0000020e 	.word	0x0000020e
    2e54:	00000212 	.word	0x00000212
    2e58:	0c7d0002 	.word	0x0c7d0002
    2e5c:	00000212 	.word	0x00000212
    2e60:	000002a8 	.word	0x000002a8
    2e64:	107d0002 	.word	0x107d0002
	...
    2e70:	0000020c 	.word	0x0000020c
    2e74:	00000216 	.word	0x00000216
    2e78:	16500001 	.word	0x16500001
    2e7c:	a8000002 	.word	0xa8000002
    2e80:	01000002 	.word	0x01000002
    2e84:	00005500 	.word	0x00005500
    2e88:	00000000 	.word	0x00000000
    2e8c:	021c0000 	.word	0x021c0000
    2e90:	02260000 	.word	0x02260000
    2e94:	00010000 	.word	0x00010000
    2e98:	00024650 	.word	0x00024650
    2e9c:	00027200 	.word	0x00027200
    2ea0:	50000100 	.word	0x50000100
    2ea4:	00000278 	.word	0x00000278
    2ea8:	00000298 	.word	0x00000298
    2eac:	00500001 	.word	0x00500001
    2eb0:	00000000 	.word	0x00000000
    2eb4:	a8000000 	.word	0xa8000000
    2eb8:	aa000002 	.word	0xaa000002
    2ebc:	01000002 	.word	0x01000002
    2ec0:	02aa5d00 	.word	0x02aa5d00
    2ec4:	03680000 	.word	0x03680000
    2ec8:	00020000 	.word	0x00020000
    2ecc:	0000087d 	.word	0x0000087d
    2ed0:	00000000 	.word	0x00000000
    2ed4:	02a80000 	.word	0x02a80000
    2ed8:	02ae0000 	.word	0x02ae0000
    2edc:	00010000 	.word	0x00010000
    2ee0:	0002ae50 	.word	0x0002ae50
    2ee4:	00036800 	.word	0x00036800
    2ee8:	54000100 	.word	0x54000100
	...
    2ef4:	000002ca 	.word	0x000002ca
    2ef8:	000002de 	.word	0x000002de
    2efc:	de510001 	.word	0xde510001
    2f00:	02000002 	.word	0x02000002
    2f04:	01000003 	.word	0x01000003
    2f08:	03025100 	.word	0x03025100
    2f0c:	03260000 	.word	0x03260000
    2f10:	00010000 	.word	0x00010000
    2f14:	00032651 	.word	0x00032651
    2f18:	00034600 	.word	0x00034600
    2f1c:	51000100 	.word	0x51000100
    2f20:	00000346 	.word	0x00000346
    2f24:	0000034c 	.word	0x0000034c
    2f28:	00510001 	.word	0x00510001
    2f2c:	00000000 	.word	0x00000000
    2f30:	e4000000 	.word	0xe4000000
    2f34:	02000002 	.word	0x02000002
    2f38:	01000003 	.word	0x01000003
    2f3c:	03025200 	.word	0x03025200
    2f40:	03080000 	.word	0x03080000
    2f44:	00010000 	.word	0x00010000
    2f48:	00000052 	.word	0x00000052
    2f4c:	00000000 	.word	0x00000000
    2f50:	00030800 	.word	0x00030800
    2f54:	00032600 	.word	0x00032600
    2f58:	52000100 	.word	0x52000100
    2f5c:	00000326 	.word	0x00000326
    2f60:	00000328 	.word	0x00000328
    2f64:	00520001 	.word	0x00520001
    2f68:	00000000 	.word	0x00000000
    2f6c:	28000000 	.word	0x28000000
    2f70:	46000003 	.word	0x46000003
    2f74:	01000003 	.word	0x01000003
    2f78:	03465200 	.word	0x03465200
    2f7c:	03520000 	.word	0x03520000
    2f80:	00010000 	.word	0x00010000
    2f84:	00000052 	.word	0x00000052
    2f88:	00000000 	.word	0x00000000
    2f8c:	0002b400 	.word	0x0002b400
    2f90:	0002d800 	.word	0x0002d800
    2f94:	50000100 	.word	0x50000100
    2f98:	000002de 	.word	0x000002de
    2f9c:	000002fc 	.word	0x000002fc
    2fa0:	02500001 	.word	0x02500001
    2fa4:	20000003 	.word	0x20000003
    2fa8:	01000003 	.word	0x01000003
    2fac:	03265000 	.word	0x03265000
    2fb0:	03400000 	.word	0x03400000
    2fb4:	00010000 	.word	0x00010000
    2fb8:	00034650 	.word	0x00034650
    2fbc:	00035800 	.word	0x00035800
    2fc0:	50000100 	.word	0x50000100
	...
    2fcc:	00000368 	.word	0x00000368
    2fd0:	0000036a 	.word	0x0000036a
    2fd4:	6a5d0001 	.word	0x6a5d0001
    2fd8:	ac000003 	.word	0xac000003
    2fdc:	02000003 	.word	0x02000003
    2fe0:	00107d00 	.word	0x00107d00
    2fe4:	00000000 	.word	0x00000000
    2fe8:	68000000 	.word	0x68000000
    2fec:	6e000003 	.word	0x6e000003
    2ff0:	01000003 	.word	0x01000003
    2ff4:	036e5000 	.word	0x036e5000
    2ff8:	03ac0000 	.word	0x03ac0000
    2ffc:	00010000 	.word	0x00010000
    3000:	00000056 	.word	0x00000056
    3004:	00000000 	.word	0x00000000
    3008:	00036800 	.word	0x00036800
    300c:	00037400 	.word	0x00037400
    3010:	51000100 	.word	0x51000100
    3014:	00000374 	.word	0x00000374
    3018:	000003ac 	.word	0x000003ac
    301c:	00550001 	.word	0x00550001
    3020:	00000000 	.word	0x00000000
    3024:	76000000 	.word	0x76000000
    3028:	7e000003 	.word	0x7e000003
    302c:	01000003 	.word	0x01000003
    3030:	03965000 	.word	0x03965000
    3034:	03a20000 	.word	0x03a20000
    3038:	00010000 	.word	0x00010000
    303c:	00000050 	.word	0x00000050
    3040:	00000000 	.word	0x00000000
    3044:	0003ac00 	.word	0x0003ac00
    3048:	0003ae00 	.word	0x0003ae00
    304c:	5d000100 	.word	0x5d000100
    3050:	000003ae 	.word	0x000003ae
    3054:	000003e4 	.word	0x000003e4
    3058:	107d0002 	.word	0x107d0002
	...
    3064:	000003ac 	.word	0x000003ac
    3068:	000003b2 	.word	0x000003b2
    306c:	b2500001 	.word	0xb2500001
    3070:	e4000003 	.word	0xe4000003
    3074:	01000003 	.word	0x01000003
    3078:	00005600 	.word	0x00005600
    307c:	00000000 	.word	0x00000000
    3080:	03ac0000 	.word	0x03ac0000
    3084:	03b80000 	.word	0x03b80000
    3088:	00010000 	.word	0x00010000
    308c:	0003b851 	.word	0x0003b851
    3090:	0003e400 	.word	0x0003e400
    3094:	55000100 	.word	0x55000100
	...
    30a0:	000003ba 	.word	0x000003ba
    30a4:	000003c0 	.word	0x000003c0
    30a8:	d0500001 	.word	0xd0500001
    30ac:	dc000003 	.word	0xdc000003
    30b0:	01000003 	.word	0x01000003
    30b4:	00005000 	.word	0x00005000
    30b8:	00000000 	.word	0x00000000
    30bc:	03e40000 	.word	0x03e40000
    30c0:	03e60000 	.word	0x03e60000
    30c4:	00010000 	.word	0x00010000
    30c8:	0003e65d 	.word	0x0003e65d
    30cc:	00042c00 	.word	0x00042c00
    30d0:	7d000200 	.word	0x7d000200
    30d4:	00000010 	.word	0x00000010
    30d8:	00000000 	.word	0x00000000
    30dc:	0003e400 	.word	0x0003e400
    30e0:	0003ea00 	.word	0x0003ea00
    30e4:	50000100 	.word	0x50000100
    30e8:	000003ea 	.word	0x000003ea
    30ec:	0000042c 	.word	0x0000042c
    30f0:	00560001 	.word	0x00560001
    30f4:	00000000 	.word	0x00000000
    30f8:	e4000000 	.word	0xe4000000
    30fc:	f0000003 	.word	0xf0000003
    3100:	01000003 	.word	0x01000003
    3104:	03f05100 	.word	0x03f05100
    3108:	042c0000 	.word	0x042c0000
    310c:	00010000 	.word	0x00010000
    3110:	00000055 	.word	0x00000055
    3114:	00000000 	.word	0x00000000
    3118:	0003f200 	.word	0x0003f200
    311c:	0003f800 	.word	0x0003f800
    3120:	50000100 	.word	0x50000100
    3124:	0000040a 	.word	0x0000040a
    3128:	00000412 	.word	0x00000412
    312c:	16500001 	.word	0x16500001
    3130:	24000004 	.word	0x24000004
    3134:	01000004 	.word	0x01000004
    3138:	00005000 	.word	0x00005000
    313c:	00000000 	.word	0x00000000
    3140:	042c0000 	.word	0x042c0000
    3144:	042e0000 	.word	0x042e0000
    3148:	00010000 	.word	0x00010000
    314c:	00042e5d 	.word	0x00042e5d
    3150:	0004a400 	.word	0x0004a400
    3154:	7d000200 	.word	0x7d000200
    3158:	00000008 	.word	0x00000008
    315c:	00000000 	.word	0x00000000
    3160:	00043800 	.word	0x00043800
    3164:	00044200 	.word	0x00044200
    3168:	50000100 	.word	0x50000100
    316c:	00000462 	.word	0x00000462
    3170:	00000480 	.word	0x00000480
    3174:	86500001 	.word	0x86500001
    3178:	94000004 	.word	0x94000004
    317c:	01000004 	.word	0x01000004
    3180:	00005000 	.word	0x00005000
    3184:	00000000 	.word	0x00000000
    3188:	04a40000 	.word	0x04a40000
    318c:	04a60000 	.word	0x04a60000
    3190:	00010000 	.word	0x00010000
    3194:	0004a65d 	.word	0x0004a65d
    3198:	0004e000 	.word	0x0004e000
    319c:	7d000200 	.word	0x7d000200
    31a0:	00000008 	.word	0x00000008
    31a4:	00000000 	.word	0x00000000
    31a8:	0004b000 	.word	0x0004b000
    31ac:	0004c000 	.word	0x0004c000
    31b0:	50000100 	.word	0x50000100
    31b4:	000004ce 	.word	0x000004ce
    31b8:	000004da 	.word	0x000004da
    31bc:	00500001 	.word	0x00500001
    31c0:	00000000 	.word	0x00000000
    31c4:	e0000000 	.word	0xe0000000
    31c8:	e2000004 	.word	0xe2000004
    31cc:	01000004 	.word	0x01000004
    31d0:	04e25d00 	.word	0x04e25d00
    31d4:	04e60000 	.word	0x04e60000
    31d8:	00020000 	.word	0x00020000
    31dc:	04e60c7d 	.word	0x04e60c7d
    31e0:	05280000 	.word	0x05280000
    31e4:	00020000 	.word	0x00020000
    31e8:	0000107d 	.word	0x0000107d
    31ec:	00000000 	.word	0x00000000
    31f0:	04e00000 	.word	0x04e00000
    31f4:	04ea0000 	.word	0x04ea0000
    31f8:	00010000 	.word	0x00010000
    31fc:	0004ea50 	.word	0x0004ea50
    3200:	00052800 	.word	0x00052800
    3204:	55000100 	.word	0x55000100
	...
    3210:	000004f0 	.word	0x000004f0
    3214:	000004f8 	.word	0x000004f8
    3218:	12500001 	.word	0x12500001
    321c:	1e000005 	.word	0x1e000005
    3220:	01000005 	.word	0x01000005
    3224:	00005000 	.word	0x00005000
	...
    3230:	00020000 	.word	0x00020000
    3234:	00010000 	.word	0x00010000
    3238:	0000025d 	.word	0x0000025d
    323c:	00001c00 	.word	0x00001c00
    3240:	7d000200 	.word	0x7d000200
    3244:	00001c14 	.word	0x00001c14
    3248:	0000a600 	.word	0x0000a600
    324c:	7d000200 	.word	0x7d000200
    3250:	00000020 	.word	0x00000020
	...
    325c:	00002200 	.word	0x00002200
    3260:	51000100 	.word	0x51000100
    3264:	0000005c 	.word	0x0000005c
    3268:	00000064 	.word	0x00000064
    326c:	a2510001 	.word	0xa2510001
    3270:	a6000000 	.word	0xa6000000
    3274:	01000000 	.word	0x01000000
    3278:	00005100 	.word	0x00005100
    327c:	00000000 	.word	0x00000000
    3280:	00220000 	.word	0x00220000
    3284:	00340000 	.word	0x00340000
    3288:	00010000 	.word	0x00010000
    328c:	00005453 	.word	0x00005453
    3290:	00006a00 	.word	0x00006a00
    3294:	53000100 	.word	0x53000100
    3298:	0000006e 	.word	0x0000006e
    329c:	0000007a 	.word	0x0000007a
    32a0:	9a530001 	.word	0x9a530001
    32a4:	a6000000 	.word	0xa6000000
    32a8:	01000000 	.word	0x01000000
    32ac:	00005300 	.word	0x00005300
    32b0:	00000000 	.word	0x00000000
    32b4:	00b80000 	.word	0x00b80000
    32b8:	00c20000 	.word	0x00c20000
    32bc:	00010000 	.word	0x00010000
    32c0:	00000050 	.word	0x00000050
    32c4:	00000000 	.word	0x00000000
    32c8:	0000c400 	.word	0x0000c400
    32cc:	0000c600 	.word	0x0000c600
    32d0:	50000100 	.word	0x50000100
	...
    32dc:	000000cc 	.word	0x000000cc
    32e0:	000000d6 	.word	0x000000d6
    32e4:	00500001 	.word	0x00500001
    32e8:	00000000 	.word	0x00000000
    32ec:	d8000000 	.word	0xd8000000
    32f0:	da000000 	.word	0xda000000
    32f4:	01000000 	.word	0x01000000
    32f8:	00005000 	.word	0x00005000
    32fc:	00000000 	.word	0x00000000
    3300:	01080000 	.word	0x01080000
    3304:	01180000 	.word	0x01180000
    3308:	00010000 	.word	0x00010000
    330c:	00000051 	.word	0x00000051
    3310:	00000000 	.word	0x00000000
    3314:	00011000 	.word	0x00011000
    3318:	00011400 	.word	0x00011400
    331c:	53000100 	.word	0x53000100
    3320:	00000114 	.word	0x00000114
    3324:	00000118 	.word	0x00000118
    3328:	18520001 	.word	0x18520001
    332c:	1c000001 	.word	0x1c000001
    3330:	01000001 	.word	0x01000001
    3334:	011c5100 	.word	0x011c5100
    3338:	011e0000 	.word	0x011e0000
    333c:	00010000 	.word	0x00010000
    3340:	00011e53 	.word	0x00011e53
    3344:	00012800 	.word	0x00012800
    3348:	51000100 	.word	0x51000100
	...
    3354:	00000134 	.word	0x00000134
    3358:	00000136 	.word	0x00000136
    335c:	365d0001 	.word	0x365d0001
    3360:	94000001 	.word	0x94000001
    3364:	02000001 	.word	0x02000001
    3368:	000c7d00 	.word	0x000c7d00
    336c:	00000000 	.word	0x00000000
    3370:	34000000 	.word	0x34000000
    3374:	40000001 	.word	0x40000001
    3378:	01000001 	.word	0x01000001
    337c:	01405100 	.word	0x01405100
    3380:	01940000 	.word	0x01940000
    3384:	00010000 	.word	0x00010000
    3388:	00000055 	.word	0x00000055
    338c:	00000000 	.word	0x00000000
    3390:	00014a00 	.word	0x00014a00
    3394:	00015200 	.word	0x00015200
    3398:	5c000100 	.word	0x5c000100
    339c:	00000152 	.word	0x00000152
    33a0:	0000015a 	.word	0x0000015a
    33a4:	5a520001 	.word	0x5a520001
    33a8:	78000001 	.word	0x78000001
    33ac:	01000001 	.word	0x01000001
    33b0:	01785c00 	.word	0x01785c00
    33b4:	017c0000 	.word	0x017c0000
    33b8:	00010000 	.word	0x00010000
    33bc:	00017c53 	.word	0x00017c53
    33c0:	00019400 	.word	0x00019400
    33c4:	52000100 	.word	0x52000100
	...
    33d0:	00000194 	.word	0x00000194
    33d4:	00000196 	.word	0x00000196
    33d8:	965d0001 	.word	0x965d0001
    33dc:	c8000001 	.word	0xc8000001
    33e0:	02000001 	.word	0x02000001
    33e4:	00087d00 	.word	0x00087d00
    33e8:	00000000 	.word	0x00000000
    33ec:	94000000 	.word	0x94000000
    33f0:	a2000001 	.word	0xa2000001
    33f4:	01000001 	.word	0x01000001
    33f8:	00005000 	.word	0x00005000
    33fc:	00000000 	.word	0x00000000
    3400:	01940000 	.word	0x01940000
    3404:	01a80000 	.word	0x01a80000
    3408:	00010000 	.word	0x00010000
    340c:	00000051 	.word	0x00000051
    3410:	00000000 	.word	0x00000000
    3414:	0001c800 	.word	0x0001c800
    3418:	0001ca00 	.word	0x0001ca00
    341c:	5d000100 	.word	0x5d000100
    3420:	000001ca 	.word	0x000001ca
    3424:	000001d0 	.word	0x000001d0
    3428:	047d0002 	.word	0x047d0002
    342c:	000001d0 	.word	0x000001d0
    3430:	000001e0 	.word	0x000001e0
    3434:	087d0002 	.word	0x087d0002
	...
    3440:	000001e0 	.word	0x000001e0
    3444:	000001e2 	.word	0x000001e2
    3448:	e25d0001 	.word	0xe25d0001
    344c:	e6000001 	.word	0xe6000001
    3450:	02000001 	.word	0x02000001
    3454:	e6047d00 	.word	0xe6047d00
    3458:	88000001 	.word	0x88000001
    345c:	02000002 	.word	0x02000002
    3460:	00107d00 	.word	0x00107d00
    3464:	00000000 	.word	0x00000000
    3468:	e0000000 	.word	0xe0000000
    346c:	e8000001 	.word	0xe8000001
    3470:	01000001 	.word	0x01000001
    3474:	01ea5000 	.word	0x01ea5000
    3478:	02880000 	.word	0x02880000
    347c:	00020000 	.word	0x00020000
    3480:	0000047d 	.word	0x0000047d
    3484:	00000000 	.word	0x00000000
    3488:	0000      	.short	0x0000
    348a:	0064      	.short	0x0064
    348c:	00680000 	.word	0x00680000
    3490:	00010000 	.word	0x00010000
    3494:	00000050 	.word	0x00000050
    3498:	00000000 	.word	0x00000000
    349c:	00007800 	.word	0x00007800
    34a0:	00007a00 	.word	0x00007a00
    34a4:	5d000100 	.word	0x5d000100
    34a8:	0000007a 	.word	0x0000007a
    34ac:	000000f4 	.word	0x000000f4
    34b0:	0c7d0002 	.word	0x0c7d0002
	...
    34bc:	00000078 	.word	0x00000078
    34c0:	000000a2 	.word	0x000000a2
    34c4:	d8500001 	.word	0xd8500001
    34c8:	f4000000 	.word	0xf4000000
    34cc:	01000000 	.word	0x01000000
    34d0:	00005000 	.word	0x00005000
    34d4:	00000000 	.word	0x00000000
    34d8:	00920000 	.word	0x00920000
    34dc:	00980000 	.word	0x00980000
    34e0:	00010000 	.word	0x00010000
    34e4:	00009852 	.word	0x00009852
    34e8:	0000a600 	.word	0x0000a600
    34ec:	51000100 	.word	0x51000100
    34f0:	000000a6 	.word	0x000000a6
    34f4:	000000be 	.word	0x000000be
    34f8:	00530001 	.word	0x00530001
    34fc:	00000000 	.word	0x00000000
    3500:	bc000000 	.word	0xbc000000
    3504:	c4000000 	.word	0xc4000000
    3508:	01000000 	.word	0x01000000
    350c:	00c45100 	.word	0x00c45100
    3510:	00ce0000 	.word	0x00ce0000
    3514:	00010000 	.word	0x00010000
    3518:	00000053 	.word	0x00000053
    351c:	00000000 	.word	0x00000000
    3520:	0000ae00 	.word	0x0000ae00
    3524:	0000cc00 	.word	0x0000cc00
    3528:	52000100 	.word	0x52000100
	...
    3534:	00000118 	.word	0x00000118
    3538:	00000122 	.word	0x00000122
    353c:	00500001 	.word	0x00500001
    3540:	00000000 	.word	0x00000000
    3544:	48000000 	.word	0x48000000
    3548:	50000001 	.word	0x50000001
    354c:	01000001 	.word	0x01000001
    3550:	00005000 	.word	0x00005000
    3554:	00000000 	.word	0x00000000
    3558:	01700000 	.word	0x01700000
    355c:	017a0000 	.word	0x017a0000
    3560:	00010000 	.word	0x00010000
    3564:	00000050 	.word	0x00000050
    3568:	00000000 	.word	0x00000000
    356c:	0001a000 	.word	0x0001a000
    3570:	0001a400 	.word	0x0001a400
    3574:	51000100 	.word	0x51000100
	...
    3580:	000001f0 	.word	0x000001f0
    3584:	000001f4 	.word	0x000001f4
    3588:	00500001 	.word	0x00500001
    358c:	00000000 	.word	0x00000000
    3590:	18000000 	.word	0x18000000
    3594:	1a000002 	.word	0x1a000002
    3598:	01000002 	.word	0x01000002
    359c:	021a5d00 	.word	0x021a5d00
    35a0:	02700000 	.word	0x02700000
    35a4:	00020000 	.word	0x00020000
    35a8:	0000087d 	.word	0x0000087d
    35ac:	00000000 	.word	0x00000000
    35b0:	02180000 	.word	0x02180000
    35b4:	02420000 	.word	0x02420000
    35b8:	00010000 	.word	0x00010000
    35bc:	00000050 	.word	0x00000050
    35c0:	00000000 	.word	0x00000000
    35c4:	00021800 	.word	0x00021800
    35c8:	00023000 	.word	0x00023000
    35cc:	51000100 	.word	0x51000100
	...
    35d8:	00000218 	.word	0x00000218
    35dc:	0000023a 	.word	0x0000023a
    35e0:	00520001 	.word	0x00520001
    35e4:	00000000 	.word	0x00000000
    35e8:	40000000 	.word	0x40000000
    35ec:	52000002 	.word	0x52000002
    35f0:	01000002 	.word	0x01000002
    35f4:	00005100 	.word	0x00005100
    35f8:	00000000 	.word	0x00000000
    35fc:	02280000 	.word	0x02280000
    3600:	02300000 	.word	0x02300000
    3604:	00010000 	.word	0x00010000
    3608:	00023053 	.word	0x00023053
    360c:	00023c00 	.word	0x00023c00
    3610:	51000100 	.word	0x51000100
    3614:	0000023c 	.word	0x0000023c
    3618:	0000024e 	.word	0x0000024e
    361c:	00520001 	.word	0x00520001
    3620:	00000000 	.word	0x00000000
    3624:	70000000 	.word	0x70000000
    3628:	72000002 	.word	0x72000002
    362c:	01000002 	.word	0x01000002
    3630:	00005000 	.word	0x00005000
    3634:	00000000 	.word	0x00000000
    3638:	02720000 	.word	0x02720000
    363c:	02760000 	.word	0x02760000
    3640:	00010000 	.word	0x00010000
    3644:	00027a50 	.word	0x00027a50
    3648:	00029000 	.word	0x00029000
    364c:	53000100 	.word	0x53000100
	...
    3658:	00000290 	.word	0x00000290
    365c:	00000294 	.word	0x00000294
    3660:	00500001 	.word	0x00500001
    3664:	00000000 	.word	0x00000000
    3668:	a8000000 	.word	0xa8000000
    366c:	ac000002 	.word	0xac000002
    3670:	01000002 	.word	0x01000002
    3674:	00005000 	.word	0x00005000
    3678:	00000000 	.word	0x00000000
    367c:	02c00000 	.word	0x02c00000
    3680:	02c20000 	.word	0x02c20000
    3684:	00010000 	.word	0x00010000
    3688:	00000050 	.word	0x00000050
    368c:	00000000 	.word	0x00000000
    3690:	0002e000 	.word	0x0002e000
    3694:	0002ec00 	.word	0x0002ec00
    3698:	50000100 	.word	0x50000100
    369c:	000002ee 	.word	0x000002ee
    36a0:	0000030c 	.word	0x0000030c
    36a4:	1a500001 	.word	0x1a500001
    36a8:	1e000003 	.word	0x1e000003
    36ac:	01000003 	.word	0x01000003
    36b0:	00005000 	.word	0x00005000
    36b4:	00000000 	.word	0x00000000
    36b8:	02ec0000 	.word	0x02ec0000
    36bc:	02ee0000 	.word	0x02ee0000
    36c0:	00010000 	.word	0x00010000
    36c4:	00030c50 	.word	0x00030c50
    36c8:	00031a00 	.word	0x00031a00
    36cc:	50000100 	.word	0x50000100
    36d0:	0000031e 	.word	0x0000031e
    36d4:	0000031e 	.word	0x0000031e
    36d8:	00500001 	.word	0x00500001
    36dc:	00000000 	.word	0x00000000
    36e0:	e6000000 	.word	0xe6000000
    36e4:	ea000002 	.word	0xea000002
    36e8:	01000002 	.word	0x01000002
    36ec:	02ee5300 	.word	0x02ee5300
    36f0:	02f60000 	.word	0x02f60000
    36f4:	00010000 	.word	0x00010000
    36f8:	00031a53 	.word	0x00031a53
    36fc:	00031c00 	.word	0x00031c00
    3700:	53000100 	.word	0x53000100
	...
    370c:	00000304 	.word	0x00000304
    3710:	0000031a 	.word	0x0000031a
    3714:	1e520001 	.word	0x1e520001
    3718:	24000003 	.word	0x24000003
    371c:	01000003 	.word	0x01000003
    3720:	00005200 	.word	0x00005200
    3724:	00000000 	.word	0x00000000
    3728:	03240000 	.word	0x03240000
    372c:	03300000 	.word	0x03300000
    3730:	00010000 	.word	0x00010000
    3734:	00000050 	.word	0x00000050
    3738:	00000000 	.word	0x00000000
    373c:	00033000 	.word	0x00033000
    3740:	00033200 	.word	0x00033200
    3744:	50000100 	.word	0x50000100
	...
    3750:	00000338 	.word	0x00000338
    3754:	0000033a 	.word	0x0000033a
    3758:	3a5d0001 	.word	0x3a5d0001
    375c:	3c000003 	.word	0x3c000003
    3760:	02000003 	.word	0x02000003
    3764:	3c047d00 	.word	0x3c047d00
    3768:	44000003 	.word	0x44000003
    376c:	02000003 	.word	0x02000003
    3770:	00087d00 	.word	0x00087d00
    3774:	00000000 	.word	0x00000000
    3778:	44000000 	.word	0x44000000
    377c:	46000003 	.word	0x46000003
    3780:	01000003 	.word	0x01000003
    3784:	03465d00 	.word	0x03465d00
    3788:	034a0000 	.word	0x034a0000
    378c:	00020000 	.word	0x00020000
    3790:	034a047d 	.word	0x034a047d
    3794:	03520000 	.word	0x03520000
    3798:	00020000 	.word	0x00020000
    379c:	0000087d 	.word	0x0000087d
    37a0:	00000000 	.word	0x00000000
    37a4:	03440000 	.word	0x03440000
    37a8:	03480000 	.word	0x03480000
    37ac:	00010000 	.word	0x00010000
    37b0:	00000050 	.word	0x00000050
    37b4:	00000000 	.word	0x00000000
    37b8:	00035400 	.word	0x00035400
    37bc:	00035600 	.word	0x00035600
    37c0:	5d000100 	.word	0x5d000100
    37c4:	00000356 	.word	0x00000356
    37c8:	00000358 	.word	0x00000358
    37cc:	047d0002 	.word	0x047d0002
    37d0:	00000358 	.word	0x00000358
    37d4:	00000360 	.word	0x00000360
    37d8:	087d0002 	.word	0x087d0002
	...
    37e4:	00000360 	.word	0x00000360
    37e8:	00000362 	.word	0x00000362
    37ec:	625d0001 	.word	0x625d0001
    37f0:	64000003 	.word	0x64000003
    37f4:	02000003 	.word	0x02000003
    37f8:	64047d00 	.word	0x64047d00
    37fc:	6c000003 	.word	0x6c000003
    3800:	02000003 	.word	0x02000003
    3804:	00087d00 	.word	0x00087d00
    3808:	00000000 	.word	0x00000000
    380c:	6c000000 	.word	0x6c000000
    3810:	6e000003 	.word	0x6e000003
    3814:	01000003 	.word	0x01000003
    3818:	036e5d00 	.word	0x036e5d00
    381c:	03700000 	.word	0x03700000
    3820:	00020000 	.word	0x00020000
    3824:	0370047d 	.word	0x0370047d
    3828:	03780000 	.word	0x03780000
    382c:	00020000 	.word	0x00020000
    3830:	0000087d 	.word	0x0000087d
    3834:	00000000 	.word	0x00000000
    3838:	03780000 	.word	0x03780000
    383c:	037a0000 	.word	0x037a0000
    3840:	00010000 	.word	0x00010000
    3844:	00037a5d 	.word	0x00037a5d
    3848:	00037c00 	.word	0x00037c00
    384c:	7d000200 	.word	0x7d000200
    3850:	00037c04 	.word	0x00037c04
    3854:	00038400 	.word	0x00038400
    3858:	7d000200 	.word	0x7d000200
    385c:	00000008 	.word	0x00000008
    3860:	00000000 	.word	0x00000000
    3864:	00          	.byte	0x00
    3865:	18          	.byte	0x18
    3866:	0000      	.short	0x0000
    3868:	00002200 	.word	0x00002200
    386c:	50000100 	.word	0x50000100
	...
    3878:	0000001c 	.word	0x0000001c
    387c:	00000022 	.word	0x00000022
    3880:	22530001 	.word	0x22530001
    3884:	2c000000 	.word	0x2c000000
    3888:	01000000 	.word	0x01000000
    388c:	00005000 	.word	0x00005000
    3890:	00000000 	.word	0x00000000
    3894:	00380000 	.word	0x00380000
    3898:	00440000 	.word	0x00440000
    389c:	00010000 	.word	0x00010000
    38a0:	00000050 	.word	0x00000050
    38a4:	00000000 	.word	0x00000000
    38a8:	00005c00 	.word	0x00005c00
    38ac:	00006000 	.word	0x00006000
    38b0:	5d000100 	.word	0x5d000100
    38b4:	00000060 	.word	0x00000060
    38b8:	00000064 	.word	0x00000064
    38bc:	047d0002 	.word	0x047d0002
    38c0:	00000064 	.word	0x00000064
    38c4:	00000090 	.word	0x00000090
    38c8:	087d0002 	.word	0x087d0002
	...
    38d4:	00000090 	.word	0x00000090
    38d8:	00000094 	.word	0x00000094
    38dc:	945d0001 	.word	0x945d0001
    38e0:	98000000 	.word	0x98000000
    38e4:	02000000 	.word	0x02000000
    38e8:	98047d00 	.word	0x98047d00
    38ec:	c8000000 	.word	0xc8000000
    38f0:	02000000 	.word	0x02000000
    38f4:	00087d00 	.word	0x00087d00
    38f8:	00000000 	.word	0x00000000
    38fc:	90000000 	.word	0x90000000
    3900:	9e000000 	.word	0x9e000000
    3904:	01000000 	.word	0x01000000
    3908:	00005000 	.word	0x00005000
    390c:	00000000 	.word	0x00000000
    3910:	00900000 	.word	0x00900000
    3914:	00ba0000 	.word	0x00ba0000
    3918:	00010000 	.word	0x00010000
    391c:	0000bc51 	.word	0x0000bc51
    3920:	0000c000 	.word	0x0000c000
    3924:	51000100 	.word	0x51000100
	...
    3930:	00000096 	.word	0x00000096
    3934:	0000009e 	.word	0x0000009e
    3938:	9e530001 	.word	0x9e530001
    393c:	ba000000 	.word	0xba000000
    3940:	01000000 	.word	0x01000000
    3944:	00bc5000 	.word	0x00bc5000
    3948:	00c00000 	.word	0x00c00000
    394c:	00010000 	.word	0x00010000
    3950:	00000050 	.word	0x00000050
    3954:	00000000 	.word	0x00000000
    3958:	0000c800 	.word	0x0000c800
    395c:	0000ca00 	.word	0x0000ca00
    3960:	5d000100 	.word	0x5d000100
    3964:	000000ca 	.word	0x000000ca
    3968:	000000e0 	.word	0x000000e0
    396c:	087d0002 	.word	0x087d0002
	...
    3978:	00000074 	.word	0x00000074
    397c:	00000076 	.word	0x00000076
    3980:	765d0001 	.word	0x765d0001
    3984:	a4000000 	.word	0xa4000000
    3988:	02000000 	.word	0x02000000
    398c:	00087d00 	.word	0x00087d00
    3990:	00000000 	.word	0x00000000
    3994:	7c000000 	.word	0x7c000000
    3998:	82000000 	.word	0x82000000
    399c:	02000000 	.word	0x02000000
    39a0:	82047d00 	.word	0x82047d00
    39a4:	8a000000 	.word	0x8a000000
    39a8:	01000000 	.word	0x01000000
    39ac:	008a5300 	.word	0x008a5300
    39b0:	00a40000 	.word	0x00a40000
    39b4:	00020000 	.word	0x00020000
    39b8:	0000047d 	.word	0x0000047d
    39bc:	00000000 	.word	0x00000000
    39c0:	00960000 	.word	0x00960000
    39c4:	00980000 	.word	0x00980000
    39c8:	00010000 	.word	0x00010000
    39cc:	00000050 	.word	0x00000050
    39d0:	00000000 	.word	0x00000000
    39d4:	0000c400 	.word	0x0000c400
    39d8:	0000ce00 	.word	0x0000ce00
    39dc:	50000100 	.word	0x50000100
	...
    39e8:	000000c8 	.word	0x000000c8
    39ec:	000000cc 	.word	0x000000cc
    39f0:	d0530001 	.word	0xd0530001
    39f4:	d8000000 	.word	0xd8000000
    39f8:	01000000 	.word	0x01000000
    39fc:	00005000 	.word	0x00005000
    3a00:	00000000 	.word	0x00000000
    3a04:	00e40000 	.word	0x00e40000
    3a08:	00ee0000 	.word	0x00ee0000
    3a0c:	00010000 	.word	0x00010000
    3a10:	00000050 	.word	0x00000050
    3a14:	00000000 	.word	0x00000000
    3a18:	0000e800 	.word	0x0000e800
    3a1c:	0000ee00 	.word	0x0000ee00
    3a20:	53000100 	.word	0x53000100
    3a24:	000000ee 	.word	0x000000ee
    3a28:	000000f8 	.word	0x000000f8
    3a2c:	00500001 	.word	0x00500001
    3a30:	00000000 	.word	0x00000000
    3a34:	08000000 	.word	0x08000000
    3a38:	12000001 	.word	0x12000001
    3a3c:	01000001 	.word	0x01000001
    3a40:	00005000 	.word	0x00005000
    3a44:	00000000 	.word	0x00000000
    3a48:	010c0000 	.word	0x010c0000
    3a4c:	01120000 	.word	0x01120000
    3a50:	00010000 	.word	0x00010000
    3a54:	00011253 	.word	0x00011253
    3a58:	00011c00 	.word	0x00011c00
    3a5c:	50000100 	.word	0x50000100
	...
    3a68:	0000011c 	.word	0x0000011c
    3a6c:	00000126 	.word	0x00000126
    3a70:	00500001 	.word	0x00500001
    3a74:	00000000 	.word	0x00000000
    3a78:	20000000 	.word	0x20000000
    3a7c:	26000001 	.word	0x26000001
    3a80:	01000001 	.word	0x01000001
    3a84:	01265300 	.word	0x01265300
    3a88:	01300000 	.word	0x01300000
    3a8c:	00010000 	.word	0x00010000
    3a90:	00000050 	.word	0x00000050
    3a94:	00000000 	.word	0x00000000
    3a98:	00016c00 	.word	0x00016c00
    3a9c:	00017600 	.word	0x00017600
    3aa0:	50000100 	.word	0x50000100
	...
    3aac:	00000170 	.word	0x00000170
    3ab0:	00000176 	.word	0x00000176
    3ab4:	76530001 	.word	0x76530001
    3ab8:	80000001 	.word	0x80000001
    3abc:	01000001 	.word	0x01000001
    3ac0:	00005000 	.word	0x00005000
    3ac4:	00000000 	.word	0x00000000
    3ac8:	01ac0000 	.word	0x01ac0000
    3acc:	01b20000 	.word	0x01b20000
    3ad0:	00010000 	.word	0x00010000
    3ad4:	00000050 	.word	0x00000050
    3ad8:	00000000 	.word	0x00000000
    3adc:	0001c800 	.word	0x0001c800
    3ae0:	0001d600 	.word	0x0001d600
    3ae4:	50000100 	.word	0x50000100
    3ae8:	000001d6 	.word	0x000001d6
    3aec:	00000280 	.word	0x00000280
    3af0:	005c0001 	.word	0x005c0001
    3af4:	00000000 	.word	0x00000000
    3af8:	2a000000 	.word	0x2a000000
    3afc:	2c000002 	.word	0x2c000002
    3b00:	01000002 	.word	0x01000002
    3b04:	023e5300 	.word	0x023e5300
    3b08:	02400000 	.word	0x02400000
    3b0c:	00010000 	.word	0x00010000
    3b10:	00025053 	.word	0x00025053
    3b14:	00025200 	.word	0x00025200
    3b18:	53000100 	.word	0x53000100
    3b1c:	00000262 	.word	0x00000262
    3b20:	00000264 	.word	0x00000264
    3b24:	00530001 	.word	0x00530001
    3b28:	00000000 	.word	0x00000000
    3b2c:	e4000000 	.word	0xe4000000
    3b30:	1a000001 	.word	0x1a000001
    3b34:	01000002 	.word	0x01000002
    3b38:	021c5200 	.word	0x021c5200
    3b3c:	02260000 	.word	0x02260000
    3b40:	00010000 	.word	0x00010000
    3b44:	00000052 	.word	0x00000052
    3b48:	00000000 	.word	0x00000000
    3b4c:	00033000 	.word	0x00033000
    3b50:	00036600 	.word	0x00036600
    3b54:	50000100 	.word	0x50000100
	...
    3b60:	00000332 	.word	0x00000332
    3b64:	0000033a 	.word	0x0000033a
    3b68:	48530001 	.word	0x48530001
    3b6c:	50000003 	.word	0x50000003
    3b70:	01000003 	.word	0x01000003
    3b74:	035e5300 	.word	0x035e5300
    3b78:	03600000 	.word	0x03600000
    3b7c:	00010000 	.word	0x00010000
    3b80:	00000053 	.word	0x00000053
    3b84:	00000000 	.word	0x00000000
    3b88:	00034600 	.word	0x00034600
    3b8c:	00034800 	.word	0x00034800
    3b90:	53000100 	.word	0x53000100
    3b94:	0000035c 	.word	0x0000035c
    3b98:	0000035e 	.word	0x0000035e
    3b9c:	62530001 	.word	0x62530001
    3ba0:	74000003 	.word	0x74000003
    3ba4:	01000003 	.word	0x01000003
    3ba8:	00005300 	.word	0x00005300
    3bac:	00000000 	.word	0x00000000
    3bb0:	03840000 	.word	0x03840000
    3bb4:	03900000 	.word	0x03900000
    3bb8:	00010000 	.word	0x00010000
    3bbc:	00000050 	.word	0x00000050
    3bc0:	00000000 	.word	0x00000000
    3bc4:	00007c00 	.word	0x00007c00
    3bc8:	00008400 	.word	0x00008400
    3bcc:	50000100 	.word	0x50000100
    3bd0:	00000084 	.word	0x00000084
    3bd4:	000000a4 	.word	0x000000a4
    3bd8:	00520001 	.word	0x00520001
    3bdc:	00000000 	.word	0x00000000
    3be0:	90000000 	.word	0x90000000
    3be4:	92000000 	.word	0x92000000
    3be8:	01000000 	.word	0x01000000
    3bec:	00965000 	.word	0x00965000
    3bf0:	00980000 	.word	0x00980000
    3bf4:	00010000 	.word	0x00010000
    3bf8:	00000050 	.word	0x00000050
    3bfc:	00000000 	.word	0x00000000
    3c00:	00002000 	.word	0x00002000
    3c04:	00003200 	.word	0x00003200
    3c08:	51000100 	.word	0x51000100
	...
    3c14:	00000074 	.word	0x00000074
    3c18:	00000082 	.word	0x00000082
    3c1c:	825d0001 	.word	0x825d0001
    3c20:	b2000000 	.word	0xb2000000
    3c24:	02000000 	.word	0x02000000
    3c28:	00087d00 	.word	0x00087d00
    3c2c:	00000000 	.word	0x00000000
    3c30:	74000000 	.word	0x74000000
    3c34:	8c000000 	.word	0x8c000000
    3c38:	01000000 	.word	0x01000000
    3c3c:	00005000 	.word	0x00005000
    3c40:	00000000 	.word	0x00000000
    3c44:	00740000 	.word	0x00740000
    3c48:	00760000 	.word	0x00760000
    3c4c:	00010000 	.word	0x00010000
    3c50:	00007651 	.word	0x00007651
    3c54:	00008000 	.word	0x00008000
    3c58:	53000100 	.word	0x53000100
	...
    3c64:	00000090 	.word	0x00000090
    3c68:	00000092 	.word	0x00000092
    3c6c:	9a500001 	.word	0x9a500001
    3c70:	9c000000 	.word	0x9c000000
    3c74:	01000000 	.word	0x01000000
    3c78:	009e5000 	.word	0x009e5000
    3c7c:	00b20000 	.word	0x00b20000
    3c80:	00010000 	.word	0x00010000
    3c84:	00000050 	.word	0x00000050
    3c88:	00000000 	.word	0x00000000
    3c8c:	0000e400 	.word	0x0000e400
    3c90:	0000f600 	.word	0x0000f600
    3c94:	51000100 	.word	0x51000100
	...
    3ca0:	00000118 	.word	0x00000118
    3ca4:	0000012a 	.word	0x0000012a
    3ca8:	00510001 	.word	0x00510001
    3cac:	00000000 	.word	0x00000000
    3cb0:	4c000000 	.word	0x4c000000
    3cb4:	4e000001 	.word	0x4e000001
    3cb8:	01000001 	.word	0x01000001
    3cbc:	00005100 	.word	0x00005100
    3cc0:	00000000 	.word	0x00000000
    3cc4:	01540000 	.word	0x01540000
    3cc8:	01560000 	.word	0x01560000
    3ccc:	00010000 	.word	0x00010000
    3cd0:	00000050 	.word	0x00000050
    3cd4:	00000000 	.word	0x00000000
    3cd8:	0001e400 	.word	0x0001e400
    3cdc:	0001f600 	.word	0x0001f600
    3ce0:	51000100 	.word	0x51000100
	...
    3cec:	00000218 	.word	0x00000218
    3cf0:	00000222 	.word	0x00000222
    3cf4:	00500001 	.word	0x00500001
    3cf8:	00000000 	.word	0x00000000
    3cfc:	24000000 	.word	0x24000000
    3d00:	28000002 	.word	0x28000002
    3d04:	01000002 	.word	0x01000002
    3d08:	00005100 	.word	0x00005100
    3d0c:	00000000 	.word	0x00000000
    3d10:	02300000 	.word	0x02300000
    3d14:	026c0000 	.word	0x026c0000
    3d18:	00010000 	.word	0x00010000
    3d1c:	00000050 	.word	0x00000050
    3d20:	00000000 	.word	0x00000000
    3d24:	00023000 	.word	0x00023000
    3d28:	00023200 	.word	0x00023200
    3d2c:	51000100 	.word	0x51000100
    3d30:	00000232 	.word	0x00000232
    3d34:	0000023c 	.word	0x0000023c
    3d38:	3c530001 	.word	0x3c530001
    3d3c:	7a000002 	.word	0x7a000002
    3d40:	01000002 	.word	0x01000002
    3d44:	00005100 	.word	0x00005100
    3d48:	00000000 	.word	0x00000000
    3d4c:	02400000 	.word	0x02400000
    3d50:	025a0000 	.word	0x025a0000
    3d54:	00010000 	.word	0x00010000
    3d58:	00025a52 	.word	0x00025a52
    3d5c:	00027a00 	.word	0x00027a00
    3d60:	5c000100 	.word	0x5c000100
	...
    3d6c:	00000236 	.word	0x00000236
    3d70:	0000025a 	.word	0x0000025a
    3d74:	005c0001 	.word	0x005c0001
    3d78:	00000000 	.word	0x00000000
    3d7c:	7c000000 	.word	0x7c000000
    3d80:	7e000002 	.word	0x7e000002
    3d84:	01000002 	.word	0x01000002
    3d88:	00005100 	.word	0x00005100
    3d8c:	00000000 	.word	0x00000000
    3d90:	028c0000 	.word	0x028c0000
    3d94:	02a00000 	.word	0x02a00000
    3d98:	00010000 	.word	0x00010000
    3d9c:	0002a05d 	.word	0x0002a05d
    3da0:	0002cc00 	.word	0x0002cc00
    3da4:	7d000200 	.word	0x7d000200
    3da8:	0002cc10 	.word	0x0002cc10
    3dac:	00032800 	.word	0x00032800
    3db0:	7d000200 	.word	0x7d000200
    3db4:	00000030 	.word	0x00000030
    3db8:	00000000 	.word	0x00000000
    3dbc:	00028c00 	.word	0x00028c00
    3dc0:	00028e00 	.word	0x00028e00
    3dc4:	50000100 	.word	0x50000100
    3dc8:	000002d4 	.word	0x000002d4
    3dcc:	00000328 	.word	0x00000328
    3dd0:	047d0002 	.word	0x047d0002
	...
    3ddc:	0000028c 	.word	0x0000028c
    3de0:	000002a6 	.word	0x000002a6
    3de4:	a6510001 	.word	0xa6510001
    3de8:	28000002 	.word	0x28000002
    3dec:	01000003 	.word	0x01000003
    3df0:	00005600 	.word	0x00005600
    3df4:	00000000 	.word	0x00000000
    3df8:	02940000 	.word	0x02940000
    3dfc:	029a0000 	.word	0x029a0000
    3e00:	00010000 	.word	0x00010000
    3e04:	0002aa53 	.word	0x0002aa53
    3e08:	0002c200 	.word	0x0002c200
    3e0c:	52000100 	.word	0x52000100
    3e10:	000002c6 	.word	0x000002c6
    3e14:	000002ce 	.word	0x000002ce
    3e18:	00530001 	.word	0x00530001
    3e1c:	00000000 	.word	0x00000000
    3e20:	e6000000 	.word	0xe6000000
    3e24:	ee000002 	.word	0xee000002
    3e28:	01000002 	.word	0x01000002
    3e2c:	00005300 	.word	0x00005300
    3e30:	00000000 	.word	0x00000000
    3e34:	03280000 	.word	0x03280000
    3e38:	032a0000 	.word	0x032a0000
    3e3c:	00010000 	.word	0x00010000
    3e40:	00032a5d 	.word	0x00032a5d
    3e44:	00032e00 	.word	0x00032e00
    3e48:	7d000200 	.word	0x7d000200
    3e4c:	00032e04 	.word	0x00032e04
    3e50:	0003bc00 	.word	0x0003bc00
    3e54:	7d000200 	.word	0x7d000200
    3e58:	00000010 	.word	0x00000010
    3e5c:	00000000 	.word	0x00000000
    3e60:	00032800 	.word	0x00032800
    3e64:	00033000 	.word	0x00033000
    3e68:	50000100 	.word	0x50000100
    3e6c:	00000332 	.word	0x00000332
    3e70:	000003bc 	.word	0x000003bc
    3e74:	047d0002 	.word	0x047d0002
	...
    3e84:	0000000a 	.word	0x0000000a
    3e88:	0a5d0001 	.word	0x0a5d0001
    3e8c:	54000000 	.word	0x54000000
    3e90:	02000000 	.word	0x02000000
    3e94:	00087d00 	.word	0x00087d00
    3e98:	00000000 	.word	0x00000000
    3e9c:	26000000 	.word	0x26000000
    3ea0:	38000000 	.word	0x38000000
    3ea4:	01000000 	.word	0x01000000
    3ea8:	00005300 	.word	0x00005300
	...
    3eb4:	00040000 	.word	0x00040000
    3eb8:	00010000 	.word	0x00010000
    3ebc:	0000045d 	.word	0x0000045d
    3ec0:	00001000 	.word	0x00001000
    3ec4:	7d000200 	.word	0x7d000200
    3ec8:	00001004 	.word	0x00001004
    3ecc:	00002800 	.word	0x00002800
    3ed0:	7d000200 	.word	0x7d000200
    3ed4:	00000008 	.word	0x00000008
	...
    3ee0:	00000c00 	.word	0x00000c00
    3ee4:	50000100 	.word	0x50000100
    3ee8:	0000000c 	.word	0x0000000c
    3eec:	0000001c 	.word	0x0000001c
    3ef0:	00510001 	.word	0x00510001
	...
    3efc:	0c000000 	.word	0x0c000000
    3f00:	01000000 	.word	0x01000000
    3f04:	000c5000 	.word	0x000c5000
    3f08:	00300000 	.word	0x00300000
    3f0c:	00010000 	.word	0x00010000
    3f10:	00000054 	.word	0x00000054
	...
    3f1c:	00000400 	.word	0x00000400
    3f20:	5d000100 	.word	0x5d000100
    3f24:	00000004 	.word	0x00000004
    3f28:	00000048 	.word	0x00000048
    3f2c:	107d0002 	.word	0x107d0002
	...
    3f38:	00000048 	.word	0x00000048
    3f3c:	0000004c 	.word	0x0000004c
    3f40:	4c5d0001 	.word	0x4c5d0001
    3f44:	c8000000 	.word	0xc8000000
    3f48:	02000000 	.word	0x02000000
    3f4c:	00107d00 	.word	0x00107d00
	...
    3f58:	04000000 	.word	0x04000000
    3f5c:	01000000 	.word	0x01000000
    3f60:	00045d00 	.word	0x00045d00
    3f64:	00fc0000 	.word	0x00fc0000
    3f68:	00020000 	.word	0x00020000
    3f6c:	00000c7d 	.word	0x00000c7d
	...
    3f78:	00200000 	.word	0x00200000
    3f7c:	00010000 	.word	0x00010000
    3f80:	00002050 	.word	0x00002050
    3f84:	0000fc00 	.word	0x0000fc00
    3f88:	56000100 	.word	0x56000100
	...
    3f98:	0000001c 	.word	0x0000001c
    3f9c:	1c510001 	.word	0x1c510001
    3fa0:	fc000000 	.word	0xfc000000
    3fa4:	01000000 	.word	0x01000000
    3fa8:	00005500 	.word	0x00005500
	...
    3fb4:	00140000 	.word	0x00140000
    3fb8:	00010000 	.word	0x00010000
    3fbc:	00001452 	.word	0x00001452
    3fc0:	00006400 	.word	0x00006400
    3fc4:	54000100 	.word	0x54000100
    3fc8:	00000064 	.word	0x00000064
    3fcc:	000000b8 	.word	0x000000b8
    3fd0:	00500001 	.word	0x00500001
    3fd4:	00000000 	.word	0x00000000
    3fd8:	40000000 	.word	0x40000000
    3fdc:	50000000 	.word	0x50000000
    3fe0:	01000000 	.word	0x01000000
    3fe4:	00005000 	.word	0x00005000
    3fe8:	00000000 	.word	0x00000000
    3fec:	00140000 	.word	0x00140000
    3ff0:	00700000 	.word	0x00700000
    3ff4:	00010000 	.word	0x00010000
    3ff8:	0000f852 	.word	0x0000f852
    3ffc:	0000fc00 	.word	0x0000fc00
    4000:	52000100 	.word	0x52000100
	...
    400c:	0000002c 	.word	0x0000002c
    4010:	00000050 	.word	0x00000050
    4014:	60500001 	.word	0x60500001
    4018:	b8000000 	.word	0xb8000000
    401c:	01000000 	.word	0x01000000
    4020:	00b85c00 	.word	0x00b85c00
    4024:	00fc0000 	.word	0x00fc0000
    4028:	00010000 	.word	0x00010000
    402c:	00000050 	.word	0x00000050
    4030:	00000000 	.word	0x00000000
    4034:	00002c00 	.word	0x00002c00
    4038:	00005800 	.word	0x00005800
    403c:	54000100 	.word	0x54000100
    4040:	0000005c 	.word	0x0000005c
    4044:	000000a4 	.word	0x000000a4
    4048:	b4510001 	.word	0xb4510001
    404c:	fc000000 	.word	0xfc000000
    4050:	01000000 	.word	0x01000000
    4054:	00005400 	.word	0x00005400
    4058:	00000000 	.word	0x00000000
    405c:	001c0000 	.word	0x001c0000
    4060:	005c0000 	.word	0x005c0000
    4064:	00010000 	.word	0x00010000
    4068:	0000a451 	.word	0x0000a451
    406c:	0000dc00 	.word	0x0000dc00
    4070:	51000100 	.word	0x51000100
    4074:	000000f0 	.word	0x000000f0
    4078:	000000fc 	.word	0x000000fc
    407c:	00510001 	.word	0x00510001
	...
    4088:	08000000 	.word	0x08000000
    408c:	01000000 	.word	0x01000000
    4090:	00085d00 	.word	0x00085d00
    4094:	00d00000 	.word	0x00d00000
    4098:	00020000 	.word	0x00020000
    409c:	0000087d 	.word	0x0000087d
	...
    40a8:	00180000 	.word	0x00180000
    40ac:	00010000 	.word	0x00010000
    40b0:	00001850 	.word	0x00001850
    40b4:	00002000 	.word	0x00002000
    40b8:	54000100 	.word	0x54000100
    40bc:	00000020 	.word	0x00000020
    40c0:	00000038 	.word	0x00000038
    40c4:	38500001 	.word	0x38500001
    40c8:	d0000000 	.word	0xd0000000
    40cc:	01000000 	.word	0x01000000
    40d0:	00005400 	.word	0x00005400
	...
    40dc:	002c0000 	.word	0x002c0000
    40e0:	00010000 	.word	0x00010000
    40e4:	0000a451 	.word	0x0000a451
    40e8:	0000b000 	.word	0x0000b000
    40ec:	51000100 	.word	0x51000100
    40f0:	000000c4 	.word	0x000000c4
    40f4:	000000d0 	.word	0x000000d0
    40f8:	00510001 	.word	0x00510001
	...
    4104:	38000000 	.word	0x38000000
    4108:	01000000 	.word	0x01000000
    410c:	00385200 	.word	0x00385200
    4110:	00600000 	.word	0x00600000
    4114:	00010000 	.word	0x00010000
    4118:	0000605c 	.word	0x0000605c
    411c:	00009000 	.word	0x00009000
    4120:	52000100 	.word	0x52000100
    4124:	000000a0 	.word	0x000000a0
    4128:	000000d0 	.word	0x000000d0
    412c:	00520001 	.word	0x00520001
    4130:	00000000 	.word	0x00000000
    4134:	0c000000 	.word	0x0c000000
    4138:	30000000 	.word	0x30000000
    413c:	01000000 	.word	0x01000000
    4140:	00a45c00 	.word	0x00a45c00
    4144:	00d00000 	.word	0x00d00000
    4148:	00010000 	.word	0x00010000
    414c:	0000005c 	.word	0x0000005c
    4150:	00000000 	.word	0x00000000
    4154:	00002800 	.word	0x00002800
    4158:	00002c00 	.word	0x00002c00
    415c:	53000100 	.word	0x53000100
    4160:	0000002c 	.word	0x0000002c
    4164:	000000b0 	.word	0x000000b0
    4168:	c4510001 	.word	0xc4510001
    416c:	d0000000 	.word	0xd0000000
    4170:	01000000 	.word	0x01000000
    4174:	00005100 	.word	0x00005100
    4178:	00000000 	.word	0x00000000
    417c:	00340000 	.word	0x00340000
    4180:	005c0000 	.word	0x005c0000
    4184:	00010000 	.word	0x00010000
    4188:	00007053 	.word	0x00007053
    418c:	00007400 	.word	0x00007400
    4190:	50000100 	.word	0x50000100
    4194:	00000074 	.word	0x00000074
    4198:	00000084 	.word	0x00000084
    419c:	84530001 	.word	0x84530001
    41a0:	c8000000 	.word	0xc8000000
    41a4:	01000000 	.word	0x01000000
    41a8:	00005000 	.word	0x00005000
	...
    41b4:	00080000 	.word	0x00080000
    41b8:	00010000 	.word	0x00010000
    41bc:	0000085d 	.word	0x0000085d
    41c0:	00009c00 	.word	0x00009c00
    41c4:	7d000200 	.word	0x7d000200
    41c8:	00000014 	.word	0x00000014
	...
    41d4:	00002000 	.word	0x00002000
    41d8:	50000100 	.word	0x50000100
    41dc:	00000020 	.word	0x00000020
    41e0:	0000009c 	.word	0x0000009c
    41e4:	00550001 	.word	0x00550001
	...
    41f0:	3c000000 	.word	0x3c000000
    41f4:	01000000 	.word	0x01000000
    41f8:	003c5100 	.word	0x003c5100
    41fc:	009c0000 	.word	0x009c0000
    4200:	00010000 	.word	0x00010000
    4204:	00000058 	.word	0x00000058
	...
    4210:	00003c00 	.word	0x00003c00
    4214:	52000100 	.word	0x52000100
    4218:	0000003c 	.word	0x0000003c
    421c:	0000009c 	.word	0x0000009c
    4220:	00560001 	.word	0x00560001
	...
    422c:	3c000000 	.word	0x3c000000
    4230:	01000000 	.word	0x01000000
    4234:	003c5300 	.word	0x003c5300
    4238:	009c0000 	.word	0x009c0000
    423c:	00010000 	.word	0x00010000
    4240:	00000057 	.word	0x00000057
	...
    424c:	00000400 	.word	0x00000400
    4250:	5d000100 	.word	0x5d000100
    4254:	00000004 	.word	0x00000004
    4258:	00000010 	.word	0x00000010
    425c:	247d0002 	.word	0x247d0002
    4260:	00000010 	.word	0x00000010
    4264:	0000010c 	.word	0x0000010c
    4268:	307d0002 	.word	0x307d0002
	...
    4278:	00000024 	.word	0x00000024
    427c:	24500001 	.word	0x24500001
    4280:	c0000000 	.word	0xc0000000
    4284:	02000000 	.word	0x02000000
    4288:	c0047d00 	.word	0xc0047d00
    428c:	d4000000 	.word	0xd4000000
    4290:	02000000 	.word	0x02000000
    4294:	d4709100 	.word	0xd4709100
    4298:	e8000000 	.word	0xe8000000
    429c:	02000000 	.word	0x02000000
    42a0:	e8047d00 	.word	0xe8047d00
    42a4:	f4000000 	.word	0xf4000000
    42a8:	02000000 	.word	0x02000000
    42ac:	f4709100 	.word	0xf4709100
    42b0:	0c000000 	.word	0x0c000000
    42b4:	02000001 	.word	0x02000001
    42b8:	00047d00 	.word	0x00047d00
	...
    42c4:	24000000 	.word	0x24000000
    42c8:	01000000 	.word	0x01000000
    42cc:	00245100 	.word	0x00245100
    42d0:	010c0000 	.word	0x010c0000
    42d4:	00010000 	.word	0x00010000
    42d8:	00000057 	.word	0x00000057
    42dc:	00000000 	.word	0x00000000
    42e0:	00004400 	.word	0x00004400
    42e4:	0000c000 	.word	0x0000c000
    42e8:	5c000100 	.word	0x5c000100
    42ec:	000000d4 	.word	0x000000d4
    42f0:	000000dc 	.word	0x000000dc
    42f4:	f85c0001 	.word	0xf85c0001
    42f8:	04000000 	.word	0x04000000
    42fc:	01000001 	.word	0x01000001
    4300:	00005c00 	.word	0x00005c00
    4304:	00000000 	.word	0x00000000
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003041 	andeq	r3, r0, r1, asr #32
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000026 	andeq	r0, r0, r6, lsr #32
  10:	524f4305 	subpl	r4, pc, #335544320	; 0x14000000
  14:	2d584554 	cfldr64cs	mvdx4, [r8, #-336]
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  1c:	084d070a 	stmdaeq	sp, {r1, r3, r8, r9, sl}^
  20:	12020901 	andne	r0, r2, #16384	; 0x4000
  24:	15011404 	strne	r1, [r1, #-1028]
  28:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  2c:	1a011901 	bne	46438 <__Stack_Size+0x46038>
  30:	Address 0x00000030 is out of bounds.


Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	ffffffff 	undefined instruction 0xffffffff
	...
  20:	00000ecc 	andeq	r0, r0, ip, asr #29
  24:	00000ed0 	ldrdeq	r0, [r0], -r0
  28:	00000ed4 	ldrdeq	r0, [r0], -r4
  2c:	00000eee 	andeq	r0, r0, lr, ror #29
	...
  38:	00000ecc 	andeq	r0, r0, ip, asr #29
  3c:	00000ed0 	ldrdeq	r0, [r0], -r0
  40:	00000ed4 	ldrdeq	r0, [r0], -r4
  44:	00000eee 	andeq	r0, r0, lr, ror #29
	...
  50:	00000eee 	andeq	r0, r0, lr, ror #29
  54:	00000ef0 	strdeq	r0, [r0], -r0
  58:	00000ef4 	strdeq	r0, [r0], -r4
  5c:	00000f10 	andeq	r0, r0, r0, lsl pc
	...
  68:	00000eee 	andeq	r0, r0, lr, ror #29
  6c:	00000ef0 	strdeq	r0, [r0], -r0
  70:	00000ef4 	strdeq	r0, [r0], -r4
  74:	00000f10 	andeq	r0, r0, r0, lsl pc
	...
  80:	00000f10 	andeq	r0, r0, r0, lsl pc
  84:	00000f12 	andeq	r0, r0, r2, lsl pc
  88:	00000f16 	andeq	r0, r0, r6, lsl pc
  8c:	00000f34 	andeq	r0, r0, r4, lsr pc
	...
  98:	00000f10 	andeq	r0, r0, r0, lsl pc
  9c:	00000f12 	andeq	r0, r0, r2, lsl pc
  a0:	00000f16 	andeq	r0, r0, r6, lsl pc
  a4:	00000f34 	andeq	r0, r0, r4, lsr pc
	...
  b0:	0000125a 	andeq	r1, r0, sl, asr r2
  b4:	0000125e 	andeq	r1, r0, lr, asr r2
  b8:	00001260 	andeq	r1, r0, r0, ror #4
  bc:	0000127a 	andeq	r1, r0, sl, ror r2
	...
  c8:	000012ae 	andeq	r1, r0, lr, lsr #5
  cc:	000012b2 	strheq	r1, [r0], -r2
  d0:	000012b4 	strheq	r1, [r0], -r4
  d4:	000012c0 	andeq	r1, r0, r0, asr #5
	...
  e0:	000013cc 	andeq	r1, r0, ip, asr #7
  e4:	000013ce 	andeq	r1, r0, lr, asr #7
  e8:	000013d6 	ldrdeq	r1, [r0], -r6
  ec:	000013e2 	andeq	r1, r0, r2, ror #7
  f0:	000013d2 	ldrdeq	r1, [r0], -r2
  f4:	000013d4 	ldrdeq	r1, [r0], -r4
	...
 100:	000013e2 	andeq	r1, r0, r2, ror #7
 104:	000013f2 	strdeq	r1, [r0], -r2
 108:	000013f4 	strdeq	r1, [r0], -r4
/* set up for an interpolation from pose to nextpose over TIME
 milliseconds by setting servo speeds. */
void BioloidControllerEx_interpolateSetup(int time) {
	int i;
	int frames = (time/frameLength) + 1;
	nextframe_ = getMillis() + frameLength;
 10c:	00001406 	andeq	r1, r0, r6, lsl #8
	...
 118:	0000011e 	andeq	r0, r0, lr, lsl r1
	PrintString("BioloidEX BioloidControllerEx_interpolateSetup nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// set speed each servo...
	for (i = 0; i < poseSize; i++) {
 11c:	00000120 	andeq	r0, r0, r0, lsr #2
 120:	00000126 	andeq	r0, r0, r6, lsr #2
 124:	0000014a 	andeq	r0, r0, sl, asr #2
		if (nextpose_[i] > pose_[i]) {
 128:	00000122 	andeq	r0, r0, r2, lsr #2
 12c:	00000124 	andeq	r0, r0, r4, lsr #2
	...
			speed_[i] = (nextpose_[i] - pose_[i]) / frames + 1;
		} else {
			speed_[i] = (pose_[i] - nextpose_[i]) / frames + 1;
 138:	0000011e 	andeq	r0, r0, lr, lsl r1
 13c:	00000120 	andeq	r0, r0, r0, lsr #2
	PrintString("BioloidEX BioloidControllerEx_interpolateSetup nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
	// set speed each servo...
	for (i = 0; i < poseSize; i++) {
 140:	00000130 	andeq	r0, r0, r0, lsr r1
 144:	0000014a 	andeq	r0, r0, sl, asr #2
		PrintString(" - ");
		TxD_Dec_U16(speed_[i]);
		PrintString("\n");
#endif
	}
	interpolating = 1;
 148:	00000122 	andeq	r0, r0, r2, lsr #2
 14c:	00000124 	andeq	r0, r0, r4, lsr #2
	...
}
 158:	0000014a 	andeq	r0, r0, sl, asr #2
 15c:	0000015e 	andeq	r0, r0, lr, asr r1
 160:	00000188 	andeq	r0, r0, r8, lsl #3
 164:	0000018e 	andeq	r0, r0, lr, lsl #3
	...
	PrintString("\n");
#endif
}

/* new-style setup */
void Bioloid_Setup(int servo_cnt) {
 170:	0000014a 	andeq	r0, r0, sl, asr #2
	/**id_ = (unsigned char *) malloc(servo_cnt * sizeof(unsigned char));
	 pose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
 174:	0000015e 	andeq	r0, r0, lr, asr r1
 178:	00000188 	andeq	r0, r0, r8, lsl #3
	for (i = 0; i < poseSize; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
 17c:	0000018e 	andeq	r0, r0, lr, lsl #3
	...
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
	for (i = 0; i < poseSize; i++) {
		id_[i] = i + 1;
 188:	0000015e 	andeq	r0, r0, lr, asr r1
		pose_[i] = 512;
 18c:	00000182 	andeq	r0, r0, r2, lsl #3
		nextpose_[i] = 512;
 190:	00000186 	andeq	r0, r0, r6, lsl #3
	 pose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));
	 speed_ = (int *) malloc(servo_cnt * sizeof(int));*/
	// initialize
	poseSize = servo_cnt;
	for (i = 0; i < poseSize; i++) {
 194:	00000188 	andeq	r0, r0, r8, lsl #3
	...
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
	}
	interpolating = 0;
 1a0:	0000015e 	andeq	r0, r0, lr, asr r1
	nextframe_ = getMillis();
 1a4:	00000160 	andeq	r0, r0, r0, ror #2
 1a8:	00000186 	andeq	r0, r0, r6, lsl #3
#ifdef MILLIS
	PrintString("BioloidEX nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
}
 1ac:	00000188 	andeq	r0, r0, r8, lsl #3
 1b0:	0000016a 	andeq	r0, r0, sl, ror #2
 1b4:	00000182 	andeq	r0, r0, r2, lsl #3
	...
 1c0:	00000078 	andeq	r0, r0, r8, ror r0
 1c4:	0000007a 	andeq	r0, r0, sl, ror r0
transition_t * sequence;                    // sequence we are running
int transitions;                    // how many transitions we have left to load


//  initializes serial1 transmit at baud, 8-N-1
void BioloidControllerEx() {
 1c8:	0000007c 	andeq	r0, r0, ip, ror r0
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
 1cc:	0000007e 	andeq	r0, r0, lr, ror r0
	...
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
		pose_[i] = 512;
 1d8:	00000078 	andeq	r0, r0, r8, ror r0
	 pose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
		id_[i] = i + 1;
 1dc:	0000007a 	andeq	r0, r0, sl, ror r0
 1e0:	0000007c 	andeq	r0, r0, ip, ror r0
		pose_[i] = 512;
		nextpose_[i] = 512;
 1e4:	0000007e 	andeq	r0, r0, lr, ror r0
	...
	/**id_ = (unsigned char *) malloc(AX12_MAX_SERVOS * sizeof(unsigned char));
	 pose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));
	 speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));*/
	// initialize
	for (i = 0; i < AX12_MAX_SERVOS; i++) {
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
		id_[i] = i + 1;
		pose_[i] = 512;
		nextpose_[i] = 512;
	}
	frameLength = BIOLOID_FRAME_LENGTH;
 1f4:	00000024 	andeq	r0, r0, r4, lsr #32
 1f8:	00000070 	andeq	r0, r0, r0, ror r0
	interpolating = 0;
 1fc:	0000010c 	andeq	r0, r0, ip, lsl #2
	nextframe_ = getMillis();
 200:	00000044 	andeq	r0, r0, r4, asr #32
 204:	00000058 	andeq	r0, r0, r8, asr r0
	...
#ifdef MILLIS
	PrintString("BioloidEX nextframe_ ");
	Printu32d(nextframe_);
	PrintString("\n");
#endif
}
 210:	ffffffff 	undefined instruction 0xffffffff
	...
